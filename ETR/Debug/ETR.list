
ETR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d660  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  0800d840  0800d840  0000e840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d8f0  0800d8f0  0000f1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d8f0  0800d8f0  0000e8f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d8f8  0800d8f8  0000f1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d8f8  0800d8f8  0000e8f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d8fc  0800d8fc  0000e8fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800d900  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004374  200001d4  0800dad4  0000f1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004548  0800dad4  0000f548  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c952  00000000  00000000  0000f204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043d1  00000000  00000000  0002bb56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001910  00000000  00000000  0002ff28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001318  00000000  00000000  00031838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b63a  00000000  00000000  00032b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001eccf  00000000  00000000  0005e18a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00113261  00000000  00000000  0007ce59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001900ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e74  00000000  00000000  00190100  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  00196f74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800d828 	.word	0x0800d828

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	0800d828 	.word	0x0800d828

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002c4:	f001 fafd 	bl	80018c2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002c8:	f000 f890 	bl	80003ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002cc:	f000 fcf0 	bl	8000cb0 <MX_GPIO_Init>
  MX_DMA_Init();
 80002d0:	f000 fcac 	bl	8000c2c <MX_DMA_Init>
  MX_TIM2_Init();
 80002d4:	f000 fb58 	bl	8000988 <MX_TIM2_Init>
  MX_TIM4_Init();
 80002d8:	f000 fc58 	bl	8000b8c <MX_TIM4_Init>
  MX_USB_Device_Init();
 80002dc:	f00c f8fa 	bl	800c4d4 <MX_USB_Device_Init>
  MX_TIM3_Init();
 80002e0:	f000 fbde 	bl	8000aa0 <MX_TIM3_Init>
  MX_ADC1_Init();
 80002e4:	f000 f8ce 	bl	8000484 <MX_ADC1_Init>
  MX_ADC2_Init();
 80002e8:	f000 f946 	bl	8000578 <MX_ADC2_Init>
  MX_ADC3_Init();
 80002ec:	f000 f9ac 	bl	8000648 <MX_ADC3_Init>
  MX_OPAMP1_Init();
 80002f0:	f000 fa24 	bl	800073c <MX_OPAMP1_Init>
  MX_OPAMP3_Init();
 80002f4:	f000 fa48 	bl	8000788 <MX_OPAMP3_Init>
  MX_TIM1_Init();
 80002f8:	f000 fa6c 	bl	80007d4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */




  HAL_OPAMP_Start(&hopamp1);
 80002fc:	4833      	ldr	r0, [pc, #204]	@ (80003cc <main+0x10c>)
 80002fe:	f003 fa5f 	bl	80037c0 <HAL_OPAMP_Start>
  HAL_OPAMP_Start(&hopamp3);
 8000302:	4833      	ldr	r0, [pc, #204]	@ (80003d0 <main+0x110>)
 8000304:	f003 fa5c 	bl	80037c0 <HAL_OPAMP_Start>


  HAL_TIM_Base_Start(&htim1);
 8000308:	4832      	ldr	r0, [pc, #200]	@ (80003d4 <main+0x114>)
 800030a:	f006 f80d 	bl	8006328 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim2);
 800030e:	4832      	ldr	r0, [pc, #200]	@ (80003d8 <main+0x118>)
 8000310:	f006 f80a 	bl	8006328 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);
 8000314:	4831      	ldr	r0, [pc, #196]	@ (80003dc <main+0x11c>)
 8000316:	f006 f807 	bl	8006328 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim4);
 800031a:	4831      	ldr	r0, [pc, #196]	@ (80003e0 <main+0x120>)
 800031c:	f006 f874 	bl	8006408 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000320:	210c      	movs	r1, #12
 8000322:	482d      	ldr	r0, [pc, #180]	@ (80003d8 <main+0x118>)
 8000324:	f006 fabe 	bl	80068a4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000328:	2108      	movs	r1, #8
 800032a:	482b      	ldr	r0, [pc, #172]	@ (80003d8 <main+0x118>)
 800032c:	f006 faba 	bl	80068a4 <HAL_TIM_PWM_Start>

  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_1);
 8000330:	2100      	movs	r1, #0
 8000332:	4828      	ldr	r0, [pc, #160]	@ (80003d4 <main+0x114>)
 8000334:	f006 f942 	bl	80065bc <HAL_TIM_OC_Start>
  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_2);
 8000338:	2104      	movs	r1, #4
 800033a:	4826      	ldr	r0, [pc, #152]	@ (80003d4 <main+0x114>)
 800033c:	f006 f93e 	bl	80065bc <HAL_TIM_OC_Start>
  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_3);
 8000340:	2108      	movs	r1, #8
 8000342:	4824      	ldr	r0, [pc, #144]	@ (80003d4 <main+0x114>)
 8000344:	f006 f93a 	bl	80065bc <HAL_TIM_OC_Start>
  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_4);
 8000348:	210c      	movs	r1, #12
 800034a:	4822      	ldr	r0, [pc, #136]	@ (80003d4 <main+0x114>)
 800034c:	f006 f936 	bl	80065bc <HAL_TIM_OC_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

		 ws2812_set_all(rgb_to_color(0xff, 0x00, 0x00));
 8000350:	2200      	movs	r2, #0
 8000352:	2100      	movs	r1, #0
 8000354:	20ff      	movs	r0, #255	@ 0xff
 8000356:	f001 fa59 	bl	800180c <rgb_to_color>
 800035a:	4603      	mov	r3, r0
 800035c:	4618      	mov	r0, r3
 800035e:	f001 fa39 	bl	80017d4 <ws2812_set_all>
		 ws2812_gradient(100, 10);
 8000362:	210a      	movs	r1, #10
 8000364:	2064      	movs	r0, #100	@ 0x64
 8000366:	f001 f91b 	bl	80015a0 <ws2812_gradient>
		 HAL_Delay(1000);
 800036a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800036e:	f001 fb19 	bl	80019a4 <HAL_Delay>
		 ws2812_set_all(rgb_to_color(0x00, 0x00, 0xff));
 8000372:	22ff      	movs	r2, #255	@ 0xff
 8000374:	2100      	movs	r1, #0
 8000376:	2000      	movs	r0, #0
 8000378:	f001 fa48 	bl	800180c <rgb_to_color>
 800037c:	4603      	mov	r3, r0
 800037e:	4618      	mov	r0, r3
 8000380:	f001 fa28 	bl	80017d4 <ws2812_set_all>
		 ws2812_gradient(100, 10);
 8000384:	210a      	movs	r1, #10
 8000386:	2064      	movs	r0, #100	@ 0x64
 8000388:	f001 f90a 	bl	80015a0 <ws2812_gradient>
		 HAL_Delay(1000);
 800038c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000390:	f001 fb08 	bl	80019a4 <HAL_Delay>
		 ws2812_set_all(rgb_to_color(0x00, 0xff, 0x00));
 8000394:	2200      	movs	r2, #0
 8000396:	21ff      	movs	r1, #255	@ 0xff
 8000398:	2000      	movs	r0, #0
 800039a:	f001 fa37 	bl	800180c <rgb_to_color>
 800039e:	4603      	mov	r3, r0
 80003a0:	4618      	mov	r0, r3
 80003a2:	f001 fa17 	bl	80017d4 <ws2812_set_all>
		 ws2812_gradient(100, 10);
 80003a6:	210a      	movs	r1, #10
 80003a8:	2064      	movs	r0, #100	@ 0x64
 80003aa:	f001 f8f9 	bl	80015a0 <ws2812_gradient>
		 HAL_Delay(1000);
 80003ae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80003b2:	f001 faf7 	bl	80019a4 <HAL_Delay>
	  sprintf(CDC_BUFFER,"-----WHILE-----      \r\n");
 80003b6:	490b      	ldr	r1, [pc, #44]	@ (80003e4 <main+0x124>)
 80003b8:	480b      	ldr	r0, [pc, #44]	@ (80003e8 <main+0x128>)
 80003ba:	f00c fd95 	bl	800cee8 <siprintf>
	  CDC_Transmit_FS(CDC_BUFFER, 50);
 80003be:	2132      	movs	r1, #50	@ 0x32
 80003c0:	4809      	ldr	r0, [pc, #36]	@ (80003e8 <main+0x128>)
 80003c2:	f00c f945 	bl	800c650 <CDC_Transmit_FS>
		 ws2812_set_all(rgb_to_color(0xff, 0x00, 0x00));
 80003c6:	bf00      	nop
 80003c8:	e7c2      	b.n	8000350 <main+0x90>
 80003ca:	bf00      	nop
 80003cc:	20000454 	.word	0x20000454
 80003d0:	20000490 	.word	0x20000490
 80003d4:	200004cc 	.word	0x200004cc
 80003d8:	20000518 	.word	0x20000518
 80003dc:	20000564 	.word	0x20000564
 80003e0:	200005b0 	.word	0x200005b0
 80003e4:	0800d840 	.word	0x0800d840
 80003e8:	20000660 	.word	0x20000660

080003ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b094      	sub	sp, #80	@ 0x50
 80003f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003f2:	f107 0318 	add.w	r3, r7, #24
 80003f6:	2238      	movs	r2, #56	@ 0x38
 80003f8:	2100      	movs	r1, #0
 80003fa:	4618      	mov	r0, r3
 80003fc:	f00c fd94 	bl	800cf28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000400:	1d3b      	adds	r3, r7, #4
 8000402:	2200      	movs	r2, #0
 8000404:	601a      	str	r2, [r3, #0]
 8000406:	605a      	str	r2, [r3, #4]
 8000408:	609a      	str	r2, [r3, #8]
 800040a:	60da      	str	r2, [r3, #12]
 800040c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800040e:	2000      	movs	r0, #0
 8000410:	f004 ff3a 	bl	8005288 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000414:	2321      	movs	r3, #33	@ 0x21
 8000416:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000418:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800041c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800041e:	2301      	movs	r3, #1
 8000420:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000422:	2302      	movs	r3, #2
 8000424:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000426:	2303      	movs	r3, #3
 8000428:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800042a:	2302      	movs	r3, #2
 800042c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800042e:	2355      	movs	r3, #85	@ 0x55
 8000430:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000432:	2302      	movs	r3, #2
 8000434:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000436:	2302      	movs	r3, #2
 8000438:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800043a:	2302      	movs	r3, #2
 800043c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800043e:	f107 0318 	add.w	r3, r7, #24
 8000442:	4618      	mov	r0, r3
 8000444:	f004 ffd4 	bl	80053f0 <HAL_RCC_OscConfig>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800044e:	f000 fc87 	bl	8000d60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000452:	230f      	movs	r3, #15
 8000454:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000456:	2303      	movs	r3, #3
 8000458:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800045a:	2300      	movs	r3, #0
 800045c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800045e:	2300      	movs	r3, #0
 8000460:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000462:	2300      	movs	r3, #0
 8000464:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000466:	1d3b      	adds	r3, r7, #4
 8000468:	2104      	movs	r1, #4
 800046a:	4618      	mov	r0, r3
 800046c:	f005 fad2 	bl	8005a14 <HAL_RCC_ClockConfig>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000476:	f000 fc73 	bl	8000d60 <Error_Handler>
  }
}
 800047a:	bf00      	nop
 800047c:	3750      	adds	r7, #80	@ 0x50
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
	...

08000484 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b08c      	sub	sp, #48	@ 0x30
 8000488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800048a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800048e:	2200      	movs	r2, #0
 8000490:	601a      	str	r2, [r3, #0]
 8000492:	605a      	str	r2, [r3, #4]
 8000494:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000496:	1d3b      	adds	r3, r7, #4
 8000498:	2220      	movs	r2, #32
 800049a:	2100      	movs	r1, #0
 800049c:	4618      	mov	r0, r3
 800049e:	f00c fd43 	bl	800cf28 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80004a2:	4b33      	ldr	r3, [pc, #204]	@ (8000570 <MX_ADC1_Init+0xec>)
 80004a4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80004a8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80004aa:	4b31      	ldr	r3, [pc, #196]	@ (8000570 <MX_ADC1_Init+0xec>)
 80004ac:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80004b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004b2:	4b2f      	ldr	r3, [pc, #188]	@ (8000570 <MX_ADC1_Init+0xec>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004b8:	4b2d      	ldr	r3, [pc, #180]	@ (8000570 <MX_ADC1_Init+0xec>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80004be:	4b2c      	ldr	r3, [pc, #176]	@ (8000570 <MX_ADC1_Init+0xec>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004c4:	4b2a      	ldr	r3, [pc, #168]	@ (8000570 <MX_ADC1_Init+0xec>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004ca:	4b29      	ldr	r3, [pc, #164]	@ (8000570 <MX_ADC1_Init+0xec>)
 80004cc:	2204      	movs	r2, #4
 80004ce:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80004d0:	4b27      	ldr	r3, [pc, #156]	@ (8000570 <MX_ADC1_Init+0xec>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004d6:	4b26      	ldr	r3, [pc, #152]	@ (8000570 <MX_ADC1_Init+0xec>)
 80004d8:	2200      	movs	r2, #0
 80004da:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80004dc:	4b24      	ldr	r3, [pc, #144]	@ (8000570 <MX_ADC1_Init+0xec>)
 80004de:	2201      	movs	r2, #1
 80004e0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004e2:	4b23      	ldr	r3, [pc, #140]	@ (8000570 <MX_ADC1_Init+0xec>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_CC1;
 80004ea:	4b21      	ldr	r3, [pc, #132]	@ (8000570 <MX_ADC1_Init+0xec>)
 80004ec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80004f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80004f2:	4b1f      	ldr	r3, [pc, #124]	@ (8000570 <MX_ADC1_Init+0xec>)
 80004f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80004f8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80004fa:	4b1d      	ldr	r3, [pc, #116]	@ (8000570 <MX_ADC1_Init+0xec>)
 80004fc:	2201      	movs	r2, #1
 80004fe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000502:	4b1b      	ldr	r3, [pc, #108]	@ (8000570 <MX_ADC1_Init+0xec>)
 8000504:	2200      	movs	r2, #0
 8000506:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000508:	4b19      	ldr	r3, [pc, #100]	@ (8000570 <MX_ADC1_Init+0xec>)
 800050a:	2200      	movs	r2, #0
 800050c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000510:	4817      	ldr	r0, [pc, #92]	@ (8000570 <MX_ADC1_Init+0xec>)
 8000512:	f001 fc3f 	bl	8001d94 <HAL_ADC_Init>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d001      	beq.n	8000520 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 800051c:	f000 fc20 	bl	8000d60 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000520:	2300      	movs	r3, #0
 8000522:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000524:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000528:	4619      	mov	r1, r3
 800052a:	4811      	ldr	r0, [pc, #68]	@ (8000570 <MX_ADC1_Init+0xec>)
 800052c:	f002 fa54 	bl	80029d8 <HAL_ADCEx_MultiModeConfigChannel>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000536:	f000 fc13 	bl	8000d60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP1;
 800053a:	4b0e      	ldr	r3, [pc, #56]	@ (8000574 <MX_ADC1_Init+0xf0>)
 800053c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800053e:	2306      	movs	r3, #6
 8000540:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000542:	2300      	movs	r3, #0
 8000544:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000546:	237f      	movs	r3, #127	@ 0x7f
 8000548:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800054a:	2304      	movs	r3, #4
 800054c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800054e:	2300      	movs	r3, #0
 8000550:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000552:	1d3b      	adds	r3, r7, #4
 8000554:	4619      	mov	r1, r3
 8000556:	4806      	ldr	r0, [pc, #24]	@ (8000570 <MX_ADC1_Init+0xec>)
 8000558:	f001 fdd8 	bl	800210c <HAL_ADC_ConfigChannel>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000562:	f000 fbfd 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000566:	bf00      	nop
 8000568:	3730      	adds	r7, #48	@ 0x30
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	200001f0 	.word	0x200001f0
 8000574:	b6902000 	.word	0xb6902000

08000578 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b088      	sub	sp, #32
 800057c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800057e:	463b      	mov	r3, r7
 8000580:	2220      	movs	r2, #32
 8000582:	2100      	movs	r1, #0
 8000584:	4618      	mov	r0, r3
 8000586:	f00c fccf 	bl	800cf28 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800058a:	4b2c      	ldr	r3, [pc, #176]	@ (800063c <MX_ADC2_Init+0xc4>)
 800058c:	4a2c      	ldr	r2, [pc, #176]	@ (8000640 <MX_ADC2_Init+0xc8>)
 800058e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000590:	4b2a      	ldr	r3, [pc, #168]	@ (800063c <MX_ADC2_Init+0xc4>)
 8000592:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000596:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000598:	4b28      	ldr	r3, [pc, #160]	@ (800063c <MX_ADC2_Init+0xc4>)
 800059a:	2200      	movs	r2, #0
 800059c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800059e:	4b27      	ldr	r3, [pc, #156]	@ (800063c <MX_ADC2_Init+0xc4>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80005a4:	4b25      	ldr	r3, [pc, #148]	@ (800063c <MX_ADC2_Init+0xc4>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005aa:	4b24      	ldr	r3, [pc, #144]	@ (800063c <MX_ADC2_Init+0xc4>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005b0:	4b22      	ldr	r3, [pc, #136]	@ (800063c <MX_ADC2_Init+0xc4>)
 80005b2:	2204      	movs	r2, #4
 80005b4:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80005b6:	4b21      	ldr	r3, [pc, #132]	@ (800063c <MX_ADC2_Init+0xc4>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80005bc:	4b1f      	ldr	r3, [pc, #124]	@ (800063c <MX_ADC2_Init+0xc4>)
 80005be:	2200      	movs	r2, #0
 80005c0:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80005c2:	4b1e      	ldr	r3, [pc, #120]	@ (800063c <MX_ADC2_Init+0xc4>)
 80005c4:	2201      	movs	r2, #1
 80005c6:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80005c8:	4b1c      	ldr	r3, [pc, #112]	@ (800063c <MX_ADC2_Init+0xc4>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_CC2;
 80005d0:	4b1a      	ldr	r3, [pc, #104]	@ (800063c <MX_ADC2_Init+0xc4>)
 80005d2:	f44f 6284 	mov.w	r2, #1056	@ 0x420
 80005d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80005d8:	4b18      	ldr	r3, [pc, #96]	@ (800063c <MX_ADC2_Init+0xc4>)
 80005da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80005de:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80005e0:	4b16      	ldr	r3, [pc, #88]	@ (800063c <MX_ADC2_Init+0xc4>)
 80005e2:	2201      	movs	r2, #1
 80005e4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005e8:	4b14      	ldr	r3, [pc, #80]	@ (800063c <MX_ADC2_Init+0xc4>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80005ee:	4b13      	ldr	r3, [pc, #76]	@ (800063c <MX_ADC2_Init+0xc4>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80005f6:	4811      	ldr	r0, [pc, #68]	@ (800063c <MX_ADC2_Init+0xc4>)
 80005f8:	f001 fbcc 	bl	8001d94 <HAL_ADC_Init>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8000602:	f000 fbad 	bl	8000d60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP3_ADC2;
 8000606:	4b0f      	ldr	r3, [pc, #60]	@ (8000644 <MX_ADC2_Init+0xcc>)
 8000608:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800060a:	2306      	movs	r3, #6
 800060c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800060e:	2300      	movs	r3, #0
 8000610:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000612:	237f      	movs	r3, #127	@ 0x7f
 8000614:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000616:	2304      	movs	r3, #4
 8000618:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800061a:	2300      	movs	r3, #0
 800061c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800061e:	463b      	mov	r3, r7
 8000620:	4619      	mov	r1, r3
 8000622:	4806      	ldr	r0, [pc, #24]	@ (800063c <MX_ADC2_Init+0xc4>)
 8000624:	f001 fd72 	bl	800210c <HAL_ADC_ConfigChannel>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 800062e:	f000 fb97 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000632:	bf00      	nop
 8000634:	3720      	adds	r7, #32
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	2000025c 	.word	0x2000025c
 8000640:	50000100 	.word	0x50000100
 8000644:	cb8c0000 	.word	0xcb8c0000

08000648 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08c      	sub	sp, #48	@ 0x30
 800064c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800064e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	605a      	str	r2, [r3, #4]
 8000658:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800065a:	1d3b      	adds	r3, r7, #4
 800065c:	2220      	movs	r2, #32
 800065e:	2100      	movs	r1, #0
 8000660:	4618      	mov	r0, r3
 8000662:	f00c fc61 	bl	800cf28 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000666:	4b32      	ldr	r3, [pc, #200]	@ (8000730 <MX_ADC3_Init+0xe8>)
 8000668:	4a32      	ldr	r2, [pc, #200]	@ (8000734 <MX_ADC3_Init+0xec>)
 800066a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800066c:	4b30      	ldr	r3, [pc, #192]	@ (8000730 <MX_ADC3_Init+0xe8>)
 800066e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000672:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000674:	4b2e      	ldr	r3, [pc, #184]	@ (8000730 <MX_ADC3_Init+0xe8>)
 8000676:	2200      	movs	r2, #0
 8000678:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800067a:	4b2d      	ldr	r3, [pc, #180]	@ (8000730 <MX_ADC3_Init+0xe8>)
 800067c:	2200      	movs	r2, #0
 800067e:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8000680:	4b2b      	ldr	r3, [pc, #172]	@ (8000730 <MX_ADC3_Init+0xe8>)
 8000682:	2200      	movs	r2, #0
 8000684:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000686:	4b2a      	ldr	r3, [pc, #168]	@ (8000730 <MX_ADC3_Init+0xe8>)
 8000688:	2200      	movs	r2, #0
 800068a:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800068c:	4b28      	ldr	r3, [pc, #160]	@ (8000730 <MX_ADC3_Init+0xe8>)
 800068e:	2204      	movs	r2, #4
 8000690:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000692:	4b27      	ldr	r3, [pc, #156]	@ (8000730 <MX_ADC3_Init+0xe8>)
 8000694:	2200      	movs	r2, #0
 8000696:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000698:	4b25      	ldr	r3, [pc, #148]	@ (8000730 <MX_ADC3_Init+0xe8>)
 800069a:	2200      	movs	r2, #0
 800069c:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 800069e:	4b24      	ldr	r3, [pc, #144]	@ (8000730 <MX_ADC3_Init+0xe8>)
 80006a0:	2201      	movs	r2, #1
 80006a2:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80006a4:	4b22      	ldr	r3, [pc, #136]	@ (8000730 <MX_ADC3_Init+0xe8>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_CC3;
 80006ac:	4b20      	ldr	r3, [pc, #128]	@ (8000730 <MX_ADC3_Init+0xe8>)
 80006ae:	f44f 6288 	mov.w	r2, #1088	@ 0x440
 80006b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80006b4:	4b1e      	ldr	r3, [pc, #120]	@ (8000730 <MX_ADC3_Init+0xe8>)
 80006b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80006ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80006bc:	4b1c      	ldr	r3, [pc, #112]	@ (8000730 <MX_ADC3_Init+0xe8>)
 80006be:	2201      	movs	r2, #1
 80006c0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006c4:	4b1a      	ldr	r3, [pc, #104]	@ (8000730 <MX_ADC3_Init+0xe8>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 80006ca:	4b19      	ldr	r3, [pc, #100]	@ (8000730 <MX_ADC3_Init+0xe8>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80006d2:	4817      	ldr	r0, [pc, #92]	@ (8000730 <MX_ADC3_Init+0xe8>)
 80006d4:	f001 fb5e 	bl	8001d94 <HAL_ADC_Init>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_ADC3_Init+0x9a>
  {
    Error_Handler();
 80006de:	f000 fb3f 	bl	8000d60 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006e2:	2300      	movs	r3, #0
 80006e4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80006e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006ea:	4619      	mov	r1, r3
 80006ec:	4810      	ldr	r0, [pc, #64]	@ (8000730 <MX_ADC3_Init+0xe8>)
 80006ee:	f002 f973 	bl	80029d8 <HAL_ADCEx_MultiModeConfigChannel>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 80006f8:	f000 fb32 	bl	8000d60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP3_ADC3;
 80006fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000738 <MX_ADC3_Init+0xf0>)
 80006fe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000700:	2306      	movs	r3, #6
 8000702:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000704:	2300      	movs	r3, #0
 8000706:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000708:	237f      	movs	r3, #127	@ 0x7f
 800070a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800070c:	2304      	movs	r3, #4
 800070e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000710:	2300      	movs	r3, #0
 8000712:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	4619      	mov	r1, r3
 8000718:	4805      	ldr	r0, [pc, #20]	@ (8000730 <MX_ADC3_Init+0xe8>)
 800071a:	f001 fcf7 	bl	800210c <HAL_ADC_ConfigChannel>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_ADC3_Init+0xe0>
  {
    Error_Handler();
 8000724:	f000 fb1c 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000728:	bf00      	nop
 800072a:	3730      	adds	r7, #48	@ 0x30
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	200002c8 	.word	0x200002c8
 8000734:	50000400 	.word	0x50000400
 8000738:	b6982000 	.word	0xb6982000

0800073c <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8000740:	4b0f      	ldr	r3, [pc, #60]	@ (8000780 <MX_OPAMP1_Init+0x44>)
 8000742:	4a10      	ldr	r2, [pc, #64]	@ (8000784 <MX_OPAMP1_Init+0x48>)
 8000744:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 8000746:	4b0e      	ldr	r3, [pc, #56]	@ (8000780 <MX_OPAMP1_Init+0x44>)
 8000748:	2280      	movs	r2, #128	@ 0x80
 800074a:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_FOLLOWER_MODE;
 800074c:	4b0c      	ldr	r3, [pc, #48]	@ (8000780 <MX_OPAMP1_Init+0x44>)
 800074e:	2260      	movs	r2, #96	@ 0x60
 8000750:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8000752:	4b0b      	ldr	r3, [pc, #44]	@ (8000780 <MX_OPAMP1_Init+0x44>)
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = ENABLE;
 8000758:	4b09      	ldr	r3, [pc, #36]	@ (8000780 <MX_OPAMP1_Init+0x44>)
 800075a:	2201      	movs	r2, #1
 800075c:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800075e:	4b08      	ldr	r3, [pc, #32]	@ (8000780 <MX_OPAMP1_Init+0x44>)
 8000760:	2200      	movs	r2, #0
 8000762:	619a      	str	r2, [r3, #24]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000764:	4b06      	ldr	r3, [pc, #24]	@ (8000780 <MX_OPAMP1_Init+0x44>)
 8000766:	2200      	movs	r2, #0
 8000768:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 800076a:	4805      	ldr	r0, [pc, #20]	@ (8000780 <MX_OPAMP1_Init+0x44>)
 800076c:	f002 ff58 	bl	8003620 <HAL_OPAMP_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_OPAMP1_Init+0x3e>
  {
    Error_Handler();
 8000776:	f000 faf3 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000454 	.word	0x20000454
 8000784:	40010300 	.word	0x40010300

08000788 <MX_OPAMP3_Init>:
  * @brief OPAMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP3_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 800078c:	4b0f      	ldr	r3, [pc, #60]	@ (80007cc <MX_OPAMP3_Init+0x44>)
 800078e:	4a10      	ldr	r2, [pc, #64]	@ (80007d0 <MX_OPAMP3_Init+0x48>)
 8000790:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 8000792:	4b0e      	ldr	r3, [pc, #56]	@ (80007cc <MX_OPAMP3_Init+0x44>)
 8000794:	2280      	movs	r2, #128	@ 0x80
 8000796:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_FOLLOWER_MODE;
 8000798:	4b0c      	ldr	r3, [pc, #48]	@ (80007cc <MX_OPAMP3_Init+0x44>)
 800079a:	2260      	movs	r2, #96	@ 0x60
 800079c:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 800079e:	4b0b      	ldr	r3, [pc, #44]	@ (80007cc <MX_OPAMP3_Init+0x44>)
 80007a0:	2208      	movs	r2, #8
 80007a2:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = ENABLE;
 80007a4:	4b09      	ldr	r3, [pc, #36]	@ (80007cc <MX_OPAMP3_Init+0x44>)
 80007a6:	2201      	movs	r2, #1
 80007a8:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80007aa:	4b08      	ldr	r3, [pc, #32]	@ (80007cc <MX_OPAMP3_Init+0x44>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	619a      	str	r2, [r3, #24]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80007b0:	4b06      	ldr	r3, [pc, #24]	@ (80007cc <MX_OPAMP3_Init+0x44>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 80007b6:	4805      	ldr	r0, [pc, #20]	@ (80007cc <MX_OPAMP3_Init+0x44>)
 80007b8:	f002 ff32 	bl	8003620 <HAL_OPAMP_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_OPAMP3_Init+0x3e>
  {
    Error_Handler();
 80007c2:	f000 facd 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	20000490 	.word	0x20000490
 80007d0:	40010308 	.word	0x40010308

080007d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b09c      	sub	sp, #112	@ 0x70
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007da:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007e8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007f4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	60da      	str	r2, [r3, #12]
 8000802:	611a      	str	r2, [r3, #16]
 8000804:	615a      	str	r2, [r3, #20]
 8000806:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000808:	1d3b      	adds	r3, r7, #4
 800080a:	2234      	movs	r2, #52	@ 0x34
 800080c:	2100      	movs	r1, #0
 800080e:	4618      	mov	r0, r3
 8000810:	f00c fb8a 	bl	800cf28 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000814:	4b5a      	ldr	r3, [pc, #360]	@ (8000980 <MX_TIM1_Init+0x1ac>)
 8000816:	4a5b      	ldr	r2, [pc, #364]	@ (8000984 <MX_TIM1_Init+0x1b0>)
 8000818:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 17-1;
 800081a:	4b59      	ldr	r3, [pc, #356]	@ (8000980 <MX_TIM1_Init+0x1ac>)
 800081c:	2210      	movs	r2, #16
 800081e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000820:	4b57      	ldr	r3, [pc, #348]	@ (8000980 <MX_TIM1_Init+0x1ac>)
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3;
 8000826:	4b56      	ldr	r3, [pc, #344]	@ (8000980 <MX_TIM1_Init+0x1ac>)
 8000828:	2203      	movs	r2, #3
 800082a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800082c:	4b54      	ldr	r3, [pc, #336]	@ (8000980 <MX_TIM1_Init+0x1ac>)
 800082e:	2200      	movs	r2, #0
 8000830:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000832:	4b53      	ldr	r3, [pc, #332]	@ (8000980 <MX_TIM1_Init+0x1ac>)
 8000834:	2200      	movs	r2, #0
 8000836:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000838:	4b51      	ldr	r3, [pc, #324]	@ (8000980 <MX_TIM1_Init+0x1ac>)
 800083a:	2200      	movs	r2, #0
 800083c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800083e:	4850      	ldr	r0, [pc, #320]	@ (8000980 <MX_TIM1_Init+0x1ac>)
 8000840:	f005 fd1a 	bl	8006278 <HAL_TIM_Base_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800084a:	f000 fa89 	bl	8000d60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800084e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000852:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000854:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000858:	4619      	mov	r1, r3
 800085a:	4849      	ldr	r0, [pc, #292]	@ (8000980 <MX_TIM1_Init+0x1ac>)
 800085c:	f006 fe3e 	bl	80074dc <HAL_TIM_ConfigClockSource>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000866:	f000 fa7b 	bl	8000d60 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800086a:	4845      	ldr	r0, [pc, #276]	@ (8000980 <MX_TIM1_Init+0x1ac>)
 800086c:	f005 fe44 	bl	80064f8 <HAL_TIM_OC_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000876:	f000 fa73 	bl	8000d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800087a:	2300      	movs	r3, #0
 800087c:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800087e:	2300      	movs	r3, #0
 8000880:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000882:	2300      	movs	r3, #0
 8000884:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000886:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800088a:	4619      	mov	r1, r3
 800088c:	483c      	ldr	r0, [pc, #240]	@ (8000980 <MX_TIM1_Init+0x1ac>)
 800088e:	f007 fcf3 	bl	8008278 <HAL_TIMEx_MasterConfigSynchronization>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000898:	f000 fa62 	bl	8000d60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800089c:	2330      	movs	r3, #48	@ 0x30
 800089e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008a4:	2300      	movs	r3, #0
 80008a6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008a8:	2300      	movs	r3, #0
 80008aa:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008ac:	2300      	movs	r3, #0
 80008ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008b0:	2300      	movs	r3, #0
 80008b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008b4:	2300      	movs	r3, #0
 80008b6:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008b8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80008bc:	2200      	movs	r2, #0
 80008be:	4619      	mov	r1, r3
 80008c0:	482f      	ldr	r0, [pc, #188]	@ (8000980 <MX_TIM1_Init+0x1ac>)
 80008c2:	f006 fc7d 	bl	80071c0 <HAL_TIM_OC_ConfigChannel>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80008cc:	f000 fa48 	bl	8000d60 <Error_Handler>
  }
  sConfigOC.Pulse = 1;
 80008d0:	2301      	movs	r3, #1
 80008d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008d4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80008d8:	2204      	movs	r2, #4
 80008da:	4619      	mov	r1, r3
 80008dc:	4828      	ldr	r0, [pc, #160]	@ (8000980 <MX_TIM1_Init+0x1ac>)
 80008de:	f006 fc6f 	bl	80071c0 <HAL_TIM_OC_ConfigChannel>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 80008e8:	f000 fa3a 	bl	8000d60 <Error_Handler>
  }
  sConfigOC.Pulse = 2;
 80008ec:	2302      	movs	r3, #2
 80008ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008f0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80008f4:	2208      	movs	r2, #8
 80008f6:	4619      	mov	r1, r3
 80008f8:	4821      	ldr	r0, [pc, #132]	@ (8000980 <MX_TIM1_Init+0x1ac>)
 80008fa:	f006 fc61 	bl	80071c0 <HAL_TIM_OC_ConfigChannel>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_TIM1_Init+0x134>
  {
    Error_Handler();
 8000904:	f000 fa2c 	bl	8000d60 <Error_Handler>
  }
  sConfigOC.Pulse = 3;
 8000908:	2303      	movs	r3, #3
 800090a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800090c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000910:	220c      	movs	r2, #12
 8000912:	4619      	mov	r1, r3
 8000914:	481a      	ldr	r0, [pc, #104]	@ (8000980 <MX_TIM1_Init+0x1ac>)
 8000916:	f006 fc53 	bl	80071c0 <HAL_TIM_OC_ConfigChannel>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 8000920:	f000 fa1e 	bl	8000d60 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000924:	2300      	movs	r3, #0
 8000926:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000928:	2300      	movs	r3, #0
 800092a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800092c:	2300      	movs	r3, #0
 800092e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000930:	2300      	movs	r3, #0
 8000932:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000934:	2300      	movs	r3, #0
 8000936:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000938:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800093c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000942:	2300      	movs	r3, #0
 8000944:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000946:	2300      	movs	r3, #0
 8000948:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800094a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800094e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000950:	2300      	movs	r3, #0
 8000952:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000954:	2300      	movs	r3, #0
 8000956:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000958:	2300      	movs	r3, #0
 800095a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800095c:	1d3b      	adds	r3, r7, #4
 800095e:	4619      	mov	r1, r3
 8000960:	4807      	ldr	r0, [pc, #28]	@ (8000980 <MX_TIM1_Init+0x1ac>)
 8000962:	f007 fd1f 	bl	80083a4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_TIM1_Init+0x19c>
  {
    Error_Handler();
 800096c:	f000 f9f8 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000970:	4803      	ldr	r0, [pc, #12]	@ (8000980 <MX_TIM1_Init+0x1ac>)
 8000972:	f000 fc43 	bl	80011fc <HAL_TIM_MspPostInit>

}
 8000976:	bf00      	nop
 8000978:	3770      	adds	r7, #112	@ 0x70
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	200004cc 	.word	0x200004cc
 8000984:	40012c00 	.word	0x40012c00

08000988 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b08e      	sub	sp, #56	@ 0x38
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800098e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]
 8000998:	609a      	str	r2, [r3, #8]
 800099a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800099c:	f107 031c 	add.w	r3, r7, #28
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009a8:	463b      	mov	r3, r7
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
 80009b4:	611a      	str	r2, [r3, #16]
 80009b6:	615a      	str	r2, [r3, #20]
 80009b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009ba:	4b37      	ldr	r3, [pc, #220]	@ (8000a98 <MX_TIM2_Init+0x110>)
 80009bc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009c0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80009c2:	4b35      	ldr	r3, [pc, #212]	@ (8000a98 <MX_TIM2_Init+0x110>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c8:	4b33      	ldr	r3, [pc, #204]	@ (8000a98 <MX_TIM2_Init+0x110>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80009ce:	4b32      	ldr	r3, [pc, #200]	@ (8000a98 <MX_TIM2_Init+0x110>)
 80009d0:	f04f 32ff 	mov.w	r2, #4294967295
 80009d4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009d6:	4b30      	ldr	r3, [pc, #192]	@ (8000a98 <MX_TIM2_Init+0x110>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009dc:	4b2e      	ldr	r3, [pc, #184]	@ (8000a98 <MX_TIM2_Init+0x110>)
 80009de:	2200      	movs	r2, #0
 80009e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009e2:	482d      	ldr	r0, [pc, #180]	@ (8000a98 <MX_TIM2_Init+0x110>)
 80009e4:	f005 fc48 	bl	8006278 <HAL_TIM_Base_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80009ee:	f000 f9b7 	bl	8000d60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 80009f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 80009f8:	2300      	movs	r3, #0
 80009fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 80009fc:	2300      	movs	r3, #0
 80009fe:	633b      	str	r3, [r7, #48]	@ 0x30
  sClockSourceConfig.ClockFilter = 0;
 8000a00:	2300      	movs	r3, #0
 8000a02:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a04:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4823      	ldr	r0, [pc, #140]	@ (8000a98 <MX_TIM2_Init+0x110>)
 8000a0c:	f006 fd66 	bl	80074dc <HAL_TIM_ConfigClockSource>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000a16:	f000 f9a3 	bl	8000d60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a1a:	481f      	ldr	r0, [pc, #124]	@ (8000a98 <MX_TIM2_Init+0x110>)
 8000a1c:	f005 fee0 	bl	80067e0 <HAL_TIM_PWM_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8000a26:	f000 f99b 	bl	8000d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a32:	f107 031c 	add.w	r3, r7, #28
 8000a36:	4619      	mov	r1, r3
 8000a38:	4817      	ldr	r0, [pc, #92]	@ (8000a98 <MX_TIM2_Init+0x110>)
 8000a3a:	f007 fc1d 	bl	8008278 <HAL_TIMEx_MasterConfigSynchronization>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_TIM2_Init+0xc0>
  {
    Error_Handler();
 8000a44:	f000 f98c 	bl	8000d60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a48:	2360      	movs	r3, #96	@ 0x60
 8000a4a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 8000a4c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a50:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a52:	2300      	movs	r3, #0
 8000a54:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a56:	2300      	movs	r3, #0
 8000a58:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a5a:	463b      	mov	r3, r7
 8000a5c:	2208      	movs	r2, #8
 8000a5e:	4619      	mov	r1, r3
 8000a60:	480d      	ldr	r0, [pc, #52]	@ (8000a98 <MX_TIM2_Init+0x110>)
 8000a62:	f006 fc27 	bl	80072b4 <HAL_TIM_PWM_ConfigChannel>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8000a6c:	f000 f978 	bl	8000d60 <Error_Handler>
  }
  sConfigOC.Pulse = 1000000;
 8000a70:	4b0a      	ldr	r3, [pc, #40]	@ (8000a9c <MX_TIM2_Init+0x114>)
 8000a72:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a74:	463b      	mov	r3, r7
 8000a76:	220c      	movs	r2, #12
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4807      	ldr	r0, [pc, #28]	@ (8000a98 <MX_TIM2_Init+0x110>)
 8000a7c:	f006 fc1a 	bl	80072b4 <HAL_TIM_PWM_ConfigChannel>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_TIM2_Init+0x102>
  {
    Error_Handler();
 8000a86:	f000 f96b 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a8a:	4803      	ldr	r0, [pc, #12]	@ (8000a98 <MX_TIM2_Init+0x110>)
 8000a8c:	f000 fbb6 	bl	80011fc <HAL_TIM_MspPostInit>

}
 8000a90:	bf00      	nop
 8000a92:	3738      	adds	r7, #56	@ 0x38
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	20000518 	.word	0x20000518
 8000a9c:	000f4240 	.word	0x000f4240

08000aa0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08e      	sub	sp, #56	@ 0x38
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aa6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ab4:	f107 031c 	add.w	r3, r7, #28
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ac0:	463b      	mov	r3, r7
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]
 8000ac8:	609a      	str	r2, [r3, #8]
 8000aca:	60da      	str	r2, [r3, #12]
 8000acc:	611a      	str	r2, [r3, #16]
 8000ace:	615a      	str	r2, [r3, #20]
 8000ad0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ad2:	4b2c      	ldr	r3, [pc, #176]	@ (8000b84 <MX_TIM3_Init+0xe4>)
 8000ad4:	4a2c      	ldr	r2, [pc, #176]	@ (8000b88 <MX_TIM3_Init+0xe8>)
 8000ad6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000ad8:	4b2a      	ldr	r3, [pc, #168]	@ (8000b84 <MX_TIM3_Init+0xe4>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ade:	4b29      	ldr	r3, [pc, #164]	@ (8000b84 <MX_TIM3_Init+0xe4>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 200;
 8000ae4:	4b27      	ldr	r3, [pc, #156]	@ (8000b84 <MX_TIM3_Init+0xe4>)
 8000ae6:	22c8      	movs	r2, #200	@ 0xc8
 8000ae8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aea:	4b26      	ldr	r3, [pc, #152]	@ (8000b84 <MX_TIM3_Init+0xe4>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000af0:	4b24      	ldr	r3, [pc, #144]	@ (8000b84 <MX_TIM3_Init+0xe4>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000af6:	4823      	ldr	r0, [pc, #140]	@ (8000b84 <MX_TIM3_Init+0xe4>)
 8000af8:	f005 fbbe 	bl	8006278 <HAL_TIM_Base_Init>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000b02:	f000 f92d 	bl	8000d60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b0c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b10:	4619      	mov	r1, r3
 8000b12:	481c      	ldr	r0, [pc, #112]	@ (8000b84 <MX_TIM3_Init+0xe4>)
 8000b14:	f006 fce2 	bl	80074dc <HAL_TIM_ConfigClockSource>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000b1e:	f000 f91f 	bl	8000d60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b22:	4818      	ldr	r0, [pc, #96]	@ (8000b84 <MX_TIM3_Init+0xe4>)
 8000b24:	f005 fe5c 	bl	80067e0 <HAL_TIM_PWM_Init>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000b2e:	f000 f917 	bl	8000d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b32:	2300      	movs	r3, #0
 8000b34:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b36:	2300      	movs	r3, #0
 8000b38:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b3a:	f107 031c 	add.w	r3, r7, #28
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4810      	ldr	r0, [pc, #64]	@ (8000b84 <MX_TIM3_Init+0xe4>)
 8000b42:	f007 fb99 	bl	8008278 <HAL_TIMEx_MasterConfigSynchronization>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000b4c:	f000 f908 	bl	8000d60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b50:	2360      	movs	r3, #96	@ 0x60
 8000b52:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b60:	463b      	mov	r3, r7
 8000b62:	220c      	movs	r2, #12
 8000b64:	4619      	mov	r1, r3
 8000b66:	4807      	ldr	r0, [pc, #28]	@ (8000b84 <MX_TIM3_Init+0xe4>)
 8000b68:	f006 fba4 	bl	80072b4 <HAL_TIM_PWM_ConfigChannel>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000b72:	f000 f8f5 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b76:	4803      	ldr	r0, [pc, #12]	@ (8000b84 <MX_TIM3_Init+0xe4>)
 8000b78:	f000 fb40 	bl	80011fc <HAL_TIM_MspPostInit>

}
 8000b7c:	bf00      	nop
 8000b7e:	3738      	adds	r7, #56	@ 0x38
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	20000564 	.word	0x20000564
 8000b88:	40000400 	.word	0x40000400

08000b8c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b088      	sub	sp, #32
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b92:	f107 0310 	add.w	r3, r7, #16
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	605a      	str	r2, [r3, #4]
 8000b9c:	609a      	str	r2, [r3, #8]
 8000b9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba0:	1d3b      	adds	r3, r7, #4
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	605a      	str	r2, [r3, #4]
 8000ba8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000baa:	4b1e      	ldr	r3, [pc, #120]	@ (8000c24 <MX_TIM4_Init+0x98>)
 8000bac:	4a1e      	ldr	r2, [pc, #120]	@ (8000c28 <MX_TIM4_Init+0x9c>)
 8000bae:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 17000-1;
 8000bb0:	4b1c      	ldr	r3, [pc, #112]	@ (8000c24 <MX_TIM4_Init+0x98>)
 8000bb2:	f244 2267 	movw	r2, #16999	@ 0x4267
 8000bb6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb8:	4b1a      	ldr	r3, [pc, #104]	@ (8000c24 <MX_TIM4_Init+0x98>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8000bbe:	4b19      	ldr	r3, [pc, #100]	@ (8000c24 <MX_TIM4_Init+0x98>)
 8000bc0:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000bc4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bc6:	4b17      	ldr	r3, [pc, #92]	@ (8000c24 <MX_TIM4_Init+0x98>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000bcc:	4b15      	ldr	r3, [pc, #84]	@ (8000c24 <MX_TIM4_Init+0x98>)
 8000bce:	2280      	movs	r2, #128	@ 0x80
 8000bd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000bd2:	4814      	ldr	r0, [pc, #80]	@ (8000c24 <MX_TIM4_Init+0x98>)
 8000bd4:	f005 fb50 	bl	8006278 <HAL_TIM_Base_Init>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8000bde:	f000 f8bf 	bl	8000d60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000be2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000be6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000be8:	f107 0310 	add.w	r3, r7, #16
 8000bec:	4619      	mov	r1, r3
 8000bee:	480d      	ldr	r0, [pc, #52]	@ (8000c24 <MX_TIM4_Init+0x98>)
 8000bf0:	f006 fc74 	bl	80074dc <HAL_TIM_ConfigClockSource>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8000bfa:	f000 f8b1 	bl	8000d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c02:	2300      	movs	r3, #0
 8000c04:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c06:	1d3b      	adds	r3, r7, #4
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4806      	ldr	r0, [pc, #24]	@ (8000c24 <MX_TIM4_Init+0x98>)
 8000c0c:	f007 fb34 	bl	8008278 <HAL_TIMEx_MasterConfigSynchronization>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8000c16:	f000 f8a3 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000c1a:	bf00      	nop
 8000c1c:	3720      	adds	r7, #32
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	200005b0 	.word	0x200005b0
 8000c28:	40000800 	.word	0x40000800

08000c2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000c32:	4b1e      	ldr	r3, [pc, #120]	@ (8000cac <MX_DMA_Init+0x80>)
 8000c34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c36:	4a1d      	ldr	r2, [pc, #116]	@ (8000cac <MX_DMA_Init+0x80>)
 8000c38:	f043 0304 	orr.w	r3, r3, #4
 8000c3c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000c3e:	4b1b      	ldr	r3, [pc, #108]	@ (8000cac <MX_DMA_Init+0x80>)
 8000c40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c42:	f003 0304 	and.w	r3, r3, #4
 8000c46:	607b      	str	r3, [r7, #4]
 8000c48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c4a:	4b18      	ldr	r3, [pc, #96]	@ (8000cac <MX_DMA_Init+0x80>)
 8000c4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c4e:	4a17      	ldr	r2, [pc, #92]	@ (8000cac <MX_DMA_Init+0x80>)
 8000c50:	f043 0301 	orr.w	r3, r3, #1
 8000c54:	6493      	str	r3, [r2, #72]	@ 0x48
 8000c56:	4b15      	ldr	r3, [pc, #84]	@ (8000cac <MX_DMA_Init+0x80>)
 8000c58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	603b      	str	r3, [r7, #0]
 8000c60:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000c62:	2200      	movs	r2, #0
 8000c64:	2100      	movs	r1, #0
 8000c66:	200b      	movs	r0, #11
 8000c68:	f002 f899 	bl	8002d9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000c6c:	200b      	movs	r0, #11
 8000c6e:	f002 f8b0 	bl	8002dd2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2100      	movs	r1, #0
 8000c76:	200c      	movs	r0, #12
 8000c78:	f002 f891 	bl	8002d9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000c7c:	200c      	movs	r0, #12
 8000c7e:	f002 f8a8 	bl	8002dd2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2100      	movs	r1, #0
 8000c86:	200d      	movs	r0, #13
 8000c88:	f002 f889 	bl	8002d9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000c8c:	200d      	movs	r0, #13
 8000c8e:	f002 f8a0 	bl	8002dd2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000c92:	2200      	movs	r2, #0
 8000c94:	2100      	movs	r1, #0
 8000c96:	200e      	movs	r0, #14
 8000c98:	f002 f881 	bl	8002d9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000c9c:	200e      	movs	r0, #14
 8000c9e:	f002 f898 	bl	8002dd2 <HAL_NVIC_EnableIRQ>

}
 8000ca2:	bf00      	nop
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40021000 	.word	0x40021000

08000cb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08a      	sub	sp, #40	@ 0x28
 8000cb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb6:	f107 0314 	add.w	r3, r7, #20
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	605a      	str	r2, [r3, #4]
 8000cc0:	609a      	str	r2, [r3, #8]
 8000cc2:	60da      	str	r2, [r3, #12]
 8000cc4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cc6:	4b25      	ldr	r3, [pc, #148]	@ (8000d5c <MX_GPIO_Init+0xac>)
 8000cc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cca:	4a24      	ldr	r2, [pc, #144]	@ (8000d5c <MX_GPIO_Init+0xac>)
 8000ccc:	f043 0320 	orr.w	r3, r3, #32
 8000cd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cd2:	4b22      	ldr	r3, [pc, #136]	@ (8000d5c <MX_GPIO_Init+0xac>)
 8000cd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cd6:	f003 0320 	and.w	r3, r3, #32
 8000cda:	613b      	str	r3, [r7, #16]
 8000cdc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cde:	4b1f      	ldr	r3, [pc, #124]	@ (8000d5c <MX_GPIO_Init+0xac>)
 8000ce0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ce2:	4a1e      	ldr	r2, [pc, #120]	@ (8000d5c <MX_GPIO_Init+0xac>)
 8000ce4:	f043 0304 	orr.w	r3, r3, #4
 8000ce8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cea:	4b1c      	ldr	r3, [pc, #112]	@ (8000d5c <MX_GPIO_Init+0xac>)
 8000cec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cee:	f003 0304 	and.w	r3, r3, #4
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf6:	4b19      	ldr	r3, [pc, #100]	@ (8000d5c <MX_GPIO_Init+0xac>)
 8000cf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cfa:	4a18      	ldr	r2, [pc, #96]	@ (8000d5c <MX_GPIO_Init+0xac>)
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d02:	4b16      	ldr	r3, [pc, #88]	@ (8000d5c <MX_GPIO_Init+0xac>)
 8000d04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	60bb      	str	r3, [r7, #8]
 8000d0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d0e:	4b13      	ldr	r3, [pc, #76]	@ (8000d5c <MX_GPIO_Init+0xac>)
 8000d10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d12:	4a12      	ldr	r2, [pc, #72]	@ (8000d5c <MX_GPIO_Init+0xac>)
 8000d14:	f043 0302 	orr.w	r3, r3, #2
 8000d18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d1a:	4b10      	ldr	r3, [pc, #64]	@ (8000d5c <MX_GPIO_Init+0xac>)
 8000d1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d1e:	f003 0302 	and.w	r3, r3, #2
 8000d22:	607b      	str	r3, [r7, #4]
 8000d24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000d26:	2200      	movs	r2, #0
 8000d28:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d30:	f002 fc5e 	bl	80035f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d42:	2300      	movs	r3, #0
 8000d44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d46:	f107 0314 	add.w	r3, r7, #20
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d50:	f002 facc 	bl	80032ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d54:	bf00      	nop
 8000d56:	3728      	adds	r7, #40	@ 0x28
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40021000 	.word	0x40021000

08000d60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d64:	b672      	cpsid	i
}
 8000d66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d68:	bf00      	nop
 8000d6a:	e7fd      	b.n	8000d68 <Error_Handler+0x8>

08000d6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d72:	4b0f      	ldr	r3, [pc, #60]	@ (8000db0 <HAL_MspInit+0x44>)
 8000d74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d76:	4a0e      	ldr	r2, [pc, #56]	@ (8000db0 <HAL_MspInit+0x44>)
 8000d78:	f043 0301 	orr.w	r3, r3, #1
 8000d7c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000db0 <HAL_MspInit+0x44>)
 8000d80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d82:	f003 0301 	and.w	r3, r3, #1
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d8a:	4b09      	ldr	r3, [pc, #36]	@ (8000db0 <HAL_MspInit+0x44>)
 8000d8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d8e:	4a08      	ldr	r2, [pc, #32]	@ (8000db0 <HAL_MspInit+0x44>)
 8000d90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d94:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d96:	4b06      	ldr	r3, [pc, #24]	@ (8000db0 <HAL_MspInit+0x44>)
 8000d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d9e:	603b      	str	r3, [r7, #0]
 8000da0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000da2:	f004 fb15 	bl	80053d0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40021000 	.word	0x40021000

08000db4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b09a      	sub	sp, #104	@ 0x68
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	2254      	movs	r2, #84	@ 0x54
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f00c f8af 	bl	800cf28 <memset>
  if(hadc->Instance==ADC1)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000dd2:	d150      	bne.n	8000e76 <HAL_ADC_MspInit+0xc2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000dd4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000dd8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000dda:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000dde:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	4618      	mov	r0, r3
 8000de6:	f004 fff9 	bl	8005ddc <HAL_RCCEx_PeriphCLKConfig>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <HAL_ADC_MspInit+0x40>
    {
      Error_Handler();
 8000df0:	f7ff ffb6 	bl	8000d60 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000df4:	4b73      	ldr	r3, [pc, #460]	@ (8000fc4 <HAL_ADC_MspInit+0x210>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	4a72      	ldr	r2, [pc, #456]	@ (8000fc4 <HAL_ADC_MspInit+0x210>)
 8000dfc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000dfe:	4b71      	ldr	r3, [pc, #452]	@ (8000fc4 <HAL_ADC_MspInit+0x210>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d10b      	bne.n	8000e1e <HAL_ADC_MspInit+0x6a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000e06:	4b70      	ldr	r3, [pc, #448]	@ (8000fc8 <HAL_ADC_MspInit+0x214>)
 8000e08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e0a:	4a6f      	ldr	r2, [pc, #444]	@ (8000fc8 <HAL_ADC_MspInit+0x214>)
 8000e0c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000e10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e12:	4b6d      	ldr	r3, [pc, #436]	@ (8000fc8 <HAL_ADC_MspInit+0x214>)
 8000e14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e16:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e1a:	613b      	str	r3, [r7, #16]
 8000e1c:	693b      	ldr	r3, [r7, #16]
    }

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 8000e1e:	4b6b      	ldr	r3, [pc, #428]	@ (8000fcc <HAL_ADC_MspInit+0x218>)
 8000e20:	4a6b      	ldr	r2, [pc, #428]	@ (8000fd0 <HAL_ADC_MspInit+0x21c>)
 8000e22:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000e24:	4b69      	ldr	r3, [pc, #420]	@ (8000fcc <HAL_ADC_MspInit+0x218>)
 8000e26:	2205      	movs	r2, #5
 8000e28:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e2a:	4b68      	ldr	r3, [pc, #416]	@ (8000fcc <HAL_ADC_MspInit+0x218>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e30:	4b66      	ldr	r3, [pc, #408]	@ (8000fcc <HAL_ADC_MspInit+0x218>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e36:	4b65      	ldr	r3, [pc, #404]	@ (8000fcc <HAL_ADC_MspInit+0x218>)
 8000e38:	2280      	movs	r2, #128	@ 0x80
 8000e3a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e3c:	4b63      	ldr	r3, [pc, #396]	@ (8000fcc <HAL_ADC_MspInit+0x218>)
 8000e3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e42:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e44:	4b61      	ldr	r3, [pc, #388]	@ (8000fcc <HAL_ADC_MspInit+0x218>)
 8000e46:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000e4a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e4c:	4b5f      	ldr	r3, [pc, #380]	@ (8000fcc <HAL_ADC_MspInit+0x218>)
 8000e4e:	2220      	movs	r2, #32
 8000e50:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e52:	4b5e      	ldr	r3, [pc, #376]	@ (8000fcc <HAL_ADC_MspInit+0x218>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e58:	485c      	ldr	r0, [pc, #368]	@ (8000fcc <HAL_ADC_MspInit+0x218>)
 8000e5a:	f001 ffd5 	bl	8002e08 <HAL_DMA_Init>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <HAL_ADC_MspInit+0xb4>
    {
      Error_Handler();
 8000e64:	f7ff ff7c 	bl	8000d60 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	4a58      	ldr	r2, [pc, #352]	@ (8000fcc <HAL_ADC_MspInit+0x218>)
 8000e6c:	655a      	str	r2, [r3, #84]	@ 0x54
 8000e6e:	4a57      	ldr	r2, [pc, #348]	@ (8000fcc <HAL_ADC_MspInit+0x218>)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000e74:	e0a1      	b.n	8000fba <HAL_ADC_MspInit+0x206>
  else if(hadc->Instance==ADC2)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a56      	ldr	r2, [pc, #344]	@ (8000fd4 <HAL_ADC_MspInit+0x220>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d150      	bne.n	8000f22 <HAL_ADC_MspInit+0x16e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000e80:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000e84:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000e86:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000e8a:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	4618      	mov	r0, r3
 8000e92:	f004 ffa3 	bl	8005ddc <HAL_RCCEx_PeriphCLKConfig>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <HAL_ADC_MspInit+0xec>
      Error_Handler();
 8000e9c:	f7ff ff60 	bl	8000d60 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000ea0:	4b48      	ldr	r3, [pc, #288]	@ (8000fc4 <HAL_ADC_MspInit+0x210>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	4a47      	ldr	r2, [pc, #284]	@ (8000fc4 <HAL_ADC_MspInit+0x210>)
 8000ea8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000eaa:	4b46      	ldr	r3, [pc, #280]	@ (8000fc4 <HAL_ADC_MspInit+0x210>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d10b      	bne.n	8000eca <HAL_ADC_MspInit+0x116>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000eb2:	4b45      	ldr	r3, [pc, #276]	@ (8000fc8 <HAL_ADC_MspInit+0x214>)
 8000eb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eb6:	4a44      	ldr	r2, [pc, #272]	@ (8000fc8 <HAL_ADC_MspInit+0x214>)
 8000eb8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000ebc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ebe:	4b42      	ldr	r3, [pc, #264]	@ (8000fc8 <HAL_ADC_MspInit+0x214>)
 8000ec0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
    hdma_adc2.Instance = DMA1_Channel3;
 8000eca:	4b43      	ldr	r3, [pc, #268]	@ (8000fd8 <HAL_ADC_MspInit+0x224>)
 8000ecc:	4a43      	ldr	r2, [pc, #268]	@ (8000fdc <HAL_ADC_MspInit+0x228>)
 8000ece:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000ed0:	4b41      	ldr	r3, [pc, #260]	@ (8000fd8 <HAL_ADC_MspInit+0x224>)
 8000ed2:	2224      	movs	r2, #36	@ 0x24
 8000ed4:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ed6:	4b40      	ldr	r3, [pc, #256]	@ (8000fd8 <HAL_ADC_MspInit+0x224>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000edc:	4b3e      	ldr	r3, [pc, #248]	@ (8000fd8 <HAL_ADC_MspInit+0x224>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000ee2:	4b3d      	ldr	r3, [pc, #244]	@ (8000fd8 <HAL_ADC_MspInit+0x224>)
 8000ee4:	2280      	movs	r2, #128	@ 0x80
 8000ee6:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ee8:	4b3b      	ldr	r3, [pc, #236]	@ (8000fd8 <HAL_ADC_MspInit+0x224>)
 8000eea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000eee:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ef0:	4b39      	ldr	r3, [pc, #228]	@ (8000fd8 <HAL_ADC_MspInit+0x224>)
 8000ef2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ef6:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000ef8:	4b37      	ldr	r3, [pc, #220]	@ (8000fd8 <HAL_ADC_MspInit+0x224>)
 8000efa:	2220      	movs	r2, #32
 8000efc:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000efe:	4b36      	ldr	r3, [pc, #216]	@ (8000fd8 <HAL_ADC_MspInit+0x224>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000f04:	4834      	ldr	r0, [pc, #208]	@ (8000fd8 <HAL_ADC_MspInit+0x224>)
 8000f06:	f001 ff7f 	bl	8002e08 <HAL_DMA_Init>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <HAL_ADC_MspInit+0x160>
      Error_Handler();
 8000f10:	f7ff ff26 	bl	8000d60 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	4a30      	ldr	r2, [pc, #192]	@ (8000fd8 <HAL_ADC_MspInit+0x224>)
 8000f18:	655a      	str	r2, [r3, #84]	@ 0x54
 8000f1a:	4a2f      	ldr	r2, [pc, #188]	@ (8000fd8 <HAL_ADC_MspInit+0x224>)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000f20:	e04b      	b.n	8000fba <HAL_ADC_MspInit+0x206>
  else if(hadc->Instance==ADC3)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a2e      	ldr	r2, [pc, #184]	@ (8000fe0 <HAL_ADC_MspInit+0x22c>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d146      	bne.n	8000fba <HAL_ADC_MspInit+0x206>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000f2c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f30:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000f32:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000f36:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f38:	f107 0314 	add.w	r3, r7, #20
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f004 ff4d 	bl	8005ddc <HAL_RCCEx_PeriphCLKConfig>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <HAL_ADC_MspInit+0x198>
      Error_Handler();
 8000f48:	f7ff ff0a 	bl	8000d60 <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 8000f4c:	4b1e      	ldr	r3, [pc, #120]	@ (8000fc8 <HAL_ADC_MspInit+0x214>)
 8000f4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f50:	4a1d      	ldr	r2, [pc, #116]	@ (8000fc8 <HAL_ADC_MspInit+0x214>)
 8000f52:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f58:	4b1b      	ldr	r3, [pc, #108]	@ (8000fc8 <HAL_ADC_MspInit+0x214>)
 8000f5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f60:	60bb      	str	r3, [r7, #8]
 8000f62:	68bb      	ldr	r3, [r7, #8]
    hdma_adc3.Instance = DMA1_Channel4;
 8000f64:	4b1f      	ldr	r3, [pc, #124]	@ (8000fe4 <HAL_ADC_MspInit+0x230>)
 8000f66:	4a20      	ldr	r2, [pc, #128]	@ (8000fe8 <HAL_ADC_MspInit+0x234>)
 8000f68:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000f6a:	4b1e      	ldr	r3, [pc, #120]	@ (8000fe4 <HAL_ADC_MspInit+0x230>)
 8000f6c:	2225      	movs	r2, #37	@ 0x25
 8000f6e:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f70:	4b1c      	ldr	r3, [pc, #112]	@ (8000fe4 <HAL_ADC_MspInit+0x230>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f76:	4b1b      	ldr	r3, [pc, #108]	@ (8000fe4 <HAL_ADC_MspInit+0x230>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000f7c:	4b19      	ldr	r3, [pc, #100]	@ (8000fe4 <HAL_ADC_MspInit+0x230>)
 8000f7e:	2280      	movs	r2, #128	@ 0x80
 8000f80:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f82:	4b18      	ldr	r3, [pc, #96]	@ (8000fe4 <HAL_ADC_MspInit+0x230>)
 8000f84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f88:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f8a:	4b16      	ldr	r3, [pc, #88]	@ (8000fe4 <HAL_ADC_MspInit+0x230>)
 8000f8c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f90:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8000f92:	4b14      	ldr	r3, [pc, #80]	@ (8000fe4 <HAL_ADC_MspInit+0x230>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000f98:	4b12      	ldr	r3, [pc, #72]	@ (8000fe4 <HAL_ADC_MspInit+0x230>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000f9e:	4811      	ldr	r0, [pc, #68]	@ (8000fe4 <HAL_ADC_MspInit+0x230>)
 8000fa0:	f001 ff32 	bl	8002e08 <HAL_DMA_Init>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <HAL_ADC_MspInit+0x1fa>
      Error_Handler();
 8000faa:	f7ff fed9 	bl	8000d60 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a0c      	ldr	r2, [pc, #48]	@ (8000fe4 <HAL_ADC_MspInit+0x230>)
 8000fb2:	655a      	str	r2, [r3, #84]	@ 0x54
 8000fb4:	4a0b      	ldr	r2, [pc, #44]	@ (8000fe4 <HAL_ADC_MspInit+0x230>)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000fba:	bf00      	nop
 8000fbc:	3768      	adds	r7, #104	@ 0x68
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20000694 	.word	0x20000694
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	20000334 	.word	0x20000334
 8000fd0:	4002001c 	.word	0x4002001c
 8000fd4:	50000100 	.word	0x50000100
 8000fd8:	20000394 	.word	0x20000394
 8000fdc:	40020030 	.word	0x40020030
 8000fe0:	50000400 	.word	0x50000400
 8000fe4:	200003f4 	.word	0x200003f4
 8000fe8:	40020044 	.word	0x40020044

08000fec <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08a      	sub	sp, #40	@ 0x28
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff4:	f107 0314 	add.w	r3, r7, #20
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a1f      	ldr	r2, [pc, #124]	@ (8001088 <HAL_OPAMP_MspInit+0x9c>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d119      	bne.n	8001042 <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800100e:	4b1f      	ldr	r3, [pc, #124]	@ (800108c <HAL_OPAMP_MspInit+0xa0>)
 8001010:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001012:	4a1e      	ldr	r2, [pc, #120]	@ (800108c <HAL_OPAMP_MspInit+0xa0>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800101a:	4b1c      	ldr	r3, [pc, #112]	@ (800108c <HAL_OPAMP_MspInit+0xa0>)
 800101c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	613b      	str	r3, [r7, #16]
 8001024:	693b      	ldr	r3, [r7, #16]
    /**OPAMP1 GPIO Configuration
    PA1     ------> OPAMP1_VINP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001026:	2302      	movs	r3, #2
 8001028:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800102a:	2303      	movs	r3, #3
 800102c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001032:	f107 0314 	add.w	r3, r7, #20
 8001036:	4619      	mov	r1, r3
 8001038:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800103c:	f002 f956 	bl	80032ec <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }

}
 8001040:	e01d      	b.n	800107e <HAL_OPAMP_MspInit+0x92>
  else if(hopamp->Instance==OPAMP3)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a12      	ldr	r2, [pc, #72]	@ (8001090 <HAL_OPAMP_MspInit+0xa4>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d118      	bne.n	800107e <HAL_OPAMP_MspInit+0x92>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800104c:	4b0f      	ldr	r3, [pc, #60]	@ (800108c <HAL_OPAMP_MspInit+0xa0>)
 800104e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001050:	4a0e      	ldr	r2, [pc, #56]	@ (800108c <HAL_OPAMP_MspInit+0xa0>)
 8001052:	f043 0301 	orr.w	r3, r3, #1
 8001056:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001058:	4b0c      	ldr	r3, [pc, #48]	@ (800108c <HAL_OPAMP_MspInit+0xa0>)
 800105a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800105c:	f003 0301 	and.w	r3, r3, #1
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001064:	2302      	movs	r3, #2
 8001066:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001068:	2303      	movs	r3, #3
 800106a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	4619      	mov	r1, r3
 8001076:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800107a:	f002 f937 	bl	80032ec <HAL_GPIO_Init>
}
 800107e:	bf00      	nop
 8001080:	3728      	adds	r7, #40	@ 0x28
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40010300 	.word	0x40010300
 800108c:	40021000 	.word	0x40021000
 8001090:	40010308 	.word	0x40010308

08001094 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08c      	sub	sp, #48	@ 0x30
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109c:	f107 031c 	add.w	r3, r7, #28
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a4c      	ldr	r2, [pc, #304]	@ (80011e4 <HAL_TIM_Base_MspInit+0x150>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d10c      	bne.n	80010d0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010b6:	4b4c      	ldr	r3, [pc, #304]	@ (80011e8 <HAL_TIM_Base_MspInit+0x154>)
 80010b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010ba:	4a4b      	ldr	r2, [pc, #300]	@ (80011e8 <HAL_TIM_Base_MspInit+0x154>)
 80010bc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80010c0:	6613      	str	r3, [r2, #96]	@ 0x60
 80010c2:	4b49      	ldr	r3, [pc, #292]	@ (80011e8 <HAL_TIM_Base_MspInit+0x154>)
 80010c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80010ca:	61bb      	str	r3, [r7, #24]
 80010cc:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80010ce:	e084      	b.n	80011da <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM2)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80010d8:	d129      	bne.n	800112e <HAL_TIM_Base_MspInit+0x9a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010da:	4b43      	ldr	r3, [pc, #268]	@ (80011e8 <HAL_TIM_Base_MspInit+0x154>)
 80010dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010de:	4a42      	ldr	r2, [pc, #264]	@ (80011e8 <HAL_TIM_Base_MspInit+0x154>)
 80010e0:	f043 0301 	orr.w	r3, r3, #1
 80010e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80010e6:	4b40      	ldr	r3, [pc, #256]	@ (80011e8 <HAL_TIM_Base_MspInit+0x154>)
 80010e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	617b      	str	r3, [r7, #20]
 80010f0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f2:	4b3d      	ldr	r3, [pc, #244]	@ (80011e8 <HAL_TIM_Base_MspInit+0x154>)
 80010f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f6:	4a3c      	ldr	r2, [pc, #240]	@ (80011e8 <HAL_TIM_Base_MspInit+0x154>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010fe:	4b3a      	ldr	r3, [pc, #232]	@ (80011e8 <HAL_TIM_Base_MspInit+0x154>)
 8001100:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	613b      	str	r3, [r7, #16]
 8001108:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800110a:	2301      	movs	r3, #1
 800110c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110e:	2302      	movs	r3, #2
 8001110:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001116:	2300      	movs	r3, #0
 8001118:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM2;
 800111a:	230e      	movs	r3, #14
 800111c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111e:	f107 031c 	add.w	r3, r7, #28
 8001122:	4619      	mov	r1, r3
 8001124:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001128:	f002 f8e0 	bl	80032ec <HAL_GPIO_Init>
}
 800112c:	e055      	b.n	80011da <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM3)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a2e      	ldr	r2, [pc, #184]	@ (80011ec <HAL_TIM_Base_MspInit+0x158>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d137      	bne.n	80011a8 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001138:	4b2b      	ldr	r3, [pc, #172]	@ (80011e8 <HAL_TIM_Base_MspInit+0x154>)
 800113a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800113c:	4a2a      	ldr	r2, [pc, #168]	@ (80011e8 <HAL_TIM_Base_MspInit+0x154>)
 800113e:	f043 0302 	orr.w	r3, r3, #2
 8001142:	6593      	str	r3, [r2, #88]	@ 0x58
 8001144:	4b28      	ldr	r3, [pc, #160]	@ (80011e8 <HAL_TIM_Base_MspInit+0x154>)
 8001146:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001148:	f003 0302 	and.w	r3, r3, #2
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	68fb      	ldr	r3, [r7, #12]
    hdma_tim3_ch4.Instance = DMA1_Channel1;
 8001150:	4b27      	ldr	r3, [pc, #156]	@ (80011f0 <HAL_TIM_Base_MspInit+0x15c>)
 8001152:	4a28      	ldr	r2, [pc, #160]	@ (80011f4 <HAL_TIM_Base_MspInit+0x160>)
 8001154:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4.Init.Request = DMA_REQUEST_TIM3_CH4;
 8001156:	4b26      	ldr	r3, [pc, #152]	@ (80011f0 <HAL_TIM_Base_MspInit+0x15c>)
 8001158:	2240      	movs	r2, #64	@ 0x40
 800115a:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800115c:	4b24      	ldr	r3, [pc, #144]	@ (80011f0 <HAL_TIM_Base_MspInit+0x15c>)
 800115e:	2210      	movs	r2, #16
 8001160:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8001162:	4b23      	ldr	r3, [pc, #140]	@ (80011f0 <HAL_TIM_Base_MspInit+0x15c>)
 8001164:	2200      	movs	r2, #0
 8001166:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8001168:	4b21      	ldr	r3, [pc, #132]	@ (80011f0 <HAL_TIM_Base_MspInit+0x15c>)
 800116a:	2280      	movs	r2, #128	@ 0x80
 800116c:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800116e:	4b20      	ldr	r3, [pc, #128]	@ (80011f0 <HAL_TIM_Base_MspInit+0x15c>)
 8001170:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001174:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001176:	4b1e      	ldr	r3, [pc, #120]	@ (80011f0 <HAL_TIM_Base_MspInit+0x15c>)
 8001178:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800117c:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4.Init.Mode = DMA_NORMAL;
 800117e:	4b1c      	ldr	r3, [pc, #112]	@ (80011f0 <HAL_TIM_Base_MspInit+0x15c>)
 8001180:	2200      	movs	r2, #0
 8001182:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8001184:	4b1a      	ldr	r3, [pc, #104]	@ (80011f0 <HAL_TIM_Base_MspInit+0x15c>)
 8001186:	2200      	movs	r2, #0
 8001188:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch4) != HAL_OK)
 800118a:	4819      	ldr	r0, [pc, #100]	@ (80011f0 <HAL_TIM_Base_MspInit+0x15c>)
 800118c:	f001 fe3c 	bl	8002e08 <HAL_DMA_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <HAL_TIM_Base_MspInit+0x106>
      Error_Handler();
 8001196:	f7ff fde3 	bl	8000d60 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a14      	ldr	r2, [pc, #80]	@ (80011f0 <HAL_TIM_Base_MspInit+0x15c>)
 800119e:	631a      	str	r2, [r3, #48]	@ 0x30
 80011a0:	4a13      	ldr	r2, [pc, #76]	@ (80011f0 <HAL_TIM_Base_MspInit+0x15c>)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80011a6:	e018      	b.n	80011da <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM4)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a12      	ldr	r2, [pc, #72]	@ (80011f8 <HAL_TIM_Base_MspInit+0x164>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d113      	bne.n	80011da <HAL_TIM_Base_MspInit+0x146>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80011b2:	4b0d      	ldr	r3, [pc, #52]	@ (80011e8 <HAL_TIM_Base_MspInit+0x154>)
 80011b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011b6:	4a0c      	ldr	r2, [pc, #48]	@ (80011e8 <HAL_TIM_Base_MspInit+0x154>)
 80011b8:	f043 0304 	orr.w	r3, r3, #4
 80011bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80011be:	4b0a      	ldr	r3, [pc, #40]	@ (80011e8 <HAL_TIM_Base_MspInit+0x154>)
 80011c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011c2:	f003 0304 	and.w	r3, r3, #4
 80011c6:	60bb      	str	r3, [r7, #8]
 80011c8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80011ca:	2200      	movs	r2, #0
 80011cc:	2100      	movs	r1, #0
 80011ce:	201e      	movs	r0, #30
 80011d0:	f001 fde5 	bl	8002d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80011d4:	201e      	movs	r0, #30
 80011d6:	f001 fdfc 	bl	8002dd2 <HAL_NVIC_EnableIRQ>
}
 80011da:	bf00      	nop
 80011dc:	3730      	adds	r7, #48	@ 0x30
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40012c00 	.word	0x40012c00
 80011e8:	40021000 	.word	0x40021000
 80011ec:	40000400 	.word	0x40000400
 80011f0:	200005fc 	.word	0x200005fc
 80011f4:	40020008 	.word	0x40020008
 80011f8:	40000800 	.word	0x40000800

080011fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08a      	sub	sp, #40	@ 0x28
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001204:	f107 0314 	add.w	r3, r7, #20
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a33      	ldr	r2, [pc, #204]	@ (80012e8 <HAL_TIM_MspPostInit+0xec>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d11c      	bne.n	8001258 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800121e:	4b33      	ldr	r3, [pc, #204]	@ (80012ec <HAL_TIM_MspPostInit+0xf0>)
 8001220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001222:	4a32      	ldr	r2, [pc, #200]	@ (80012ec <HAL_TIM_MspPostInit+0xf0>)
 8001224:	f043 0304 	orr.w	r3, r3, #4
 8001228:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800122a:	4b30      	ldr	r3, [pc, #192]	@ (80012ec <HAL_TIM_MspPostInit+0xf0>)
 800122c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800122e:	f003 0304 	and.w	r3, r3, #4
 8001232:	613b      	str	r3, [r7, #16]
 8001234:	693b      	ldr	r3, [r7, #16]
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001236:	230f      	movs	r3, #15
 8001238:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123a:	2302      	movs	r3, #2
 800123c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001242:	2300      	movs	r3, #0
 8001244:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001246:	2302      	movs	r3, #2
 8001248:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800124a:	f107 0314 	add.w	r3, r7, #20
 800124e:	4619      	mov	r1, r3
 8001250:	4827      	ldr	r0, [pc, #156]	@ (80012f0 <HAL_TIM_MspPostInit+0xf4>)
 8001252:	f002 f84b 	bl	80032ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001256:	e043      	b.n	80012e0 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM2)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001260:	d11d      	bne.n	800129e <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001262:	4b22      	ldr	r3, [pc, #136]	@ (80012ec <HAL_TIM_MspPostInit+0xf0>)
 8001264:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001266:	4a21      	ldr	r2, [pc, #132]	@ (80012ec <HAL_TIM_MspPostInit+0xf0>)
 8001268:	f043 0302 	orr.w	r3, r3, #2
 800126c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800126e:	4b1f      	ldr	r3, [pc, #124]	@ (80012ec <HAL_TIM_MspPostInit+0xf0>)
 8001270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001272:	f003 0302 	and.w	r3, r3, #2
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800127a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800127e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001280:	2302      	movs	r3, #2
 8001282:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001288:	2300      	movs	r3, #0
 800128a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800128c:	2301      	movs	r3, #1
 800128e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001290:	f107 0314 	add.w	r3, r7, #20
 8001294:	4619      	mov	r1, r3
 8001296:	4817      	ldr	r0, [pc, #92]	@ (80012f4 <HAL_TIM_MspPostInit+0xf8>)
 8001298:	f002 f828 	bl	80032ec <HAL_GPIO_Init>
}
 800129c:	e020      	b.n	80012e0 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a15      	ldr	r2, [pc, #84]	@ (80012f8 <HAL_TIM_MspPostInit+0xfc>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d11b      	bne.n	80012e0 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a8:	4b10      	ldr	r3, [pc, #64]	@ (80012ec <HAL_TIM_MspPostInit+0xf0>)
 80012aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ac:	4a0f      	ldr	r2, [pc, #60]	@ (80012ec <HAL_TIM_MspPostInit+0xf0>)
 80012ae:	f043 0302 	orr.w	r3, r3, #2
 80012b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012b4:	4b0d      	ldr	r3, [pc, #52]	@ (80012ec <HAL_TIM_MspPostInit+0xf0>)
 80012b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b8:	f003 0302 	and.w	r3, r3, #2
 80012bc:	60bb      	str	r3, [r7, #8]
 80012be:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80012c0:	2380      	movs	r3, #128	@ 0x80
 80012c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c4:	2302      	movs	r3, #2
 80012c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012cc:	2300      	movs	r3, #0
 80012ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM3;
 80012d0:	230a      	movs	r3, #10
 80012d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d4:	f107 0314 	add.w	r3, r7, #20
 80012d8:	4619      	mov	r1, r3
 80012da:	4806      	ldr	r0, [pc, #24]	@ (80012f4 <HAL_TIM_MspPostInit+0xf8>)
 80012dc:	f002 f806 	bl	80032ec <HAL_GPIO_Init>
}
 80012e0:	bf00      	nop
 80012e2:	3728      	adds	r7, #40	@ 0x28
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40012c00 	.word	0x40012c00
 80012ec:	40021000 	.word	0x40021000
 80012f0:	48000800 	.word	0x48000800
 80012f4:	48000400 	.word	0x48000400
 80012f8:	40000400 	.word	0x40000400

080012fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001300:	bf00      	nop
 8001302:	e7fd      	b.n	8001300 <NMI_Handler+0x4>

08001304 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001308:	bf00      	nop
 800130a:	e7fd      	b.n	8001308 <HardFault_Handler+0x4>

0800130c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001310:	bf00      	nop
 8001312:	e7fd      	b.n	8001310 <MemManage_Handler+0x4>

08001314 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001318:	bf00      	nop
 800131a:	e7fd      	b.n	8001318 <BusFault_Handler+0x4>

0800131c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001320:	bf00      	nop
 8001322:	e7fd      	b.n	8001320 <UsageFault_Handler+0x4>

08001324 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr

08001332 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001332:	b480      	push	{r7}
 8001334:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001336:	bf00      	nop
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001344:	bf00      	nop
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr

0800134e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001352:	f000 fb09 	bl	8001968 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
	...

0800135c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4);
 8001360:	4802      	ldr	r0, [pc, #8]	@ (800136c <DMA1_Channel1_IRQHandler+0x10>)
 8001362:	f001 fe74 	bl	800304e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	200005fc 	.word	0x200005fc

08001370 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001374:	4802      	ldr	r0, [pc, #8]	@ (8001380 <DMA1_Channel2_IRQHandler+0x10>)
 8001376:	f001 fe6a 	bl	800304e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20000334 	.word	0x20000334

08001384 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001388:	4802      	ldr	r0, [pc, #8]	@ (8001394 <DMA1_Channel3_IRQHandler+0x10>)
 800138a:	f001 fe60 	bl	800304e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20000394 	.word	0x20000394

08001398 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800139c:	4802      	ldr	r0, [pc, #8]	@ (80013a8 <DMA1_Channel4_IRQHandler+0x10>)
 800139e:	f001 fe56 	bl	800304e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	200003f4 	.word	0x200003f4

080013ac <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80013b0:	4802      	ldr	r0, [pc, #8]	@ (80013bc <USB_LP_IRQHandler+0x10>)
 80013b2:	f002 fb26 	bl	8003a02 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20003f04 	.word	0x20003f04

080013c0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	USER_CounterTicks= TIM2->CNT;
 80013c4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ca:	4a0b      	ldr	r2, [pc, #44]	@ (80013f8 <TIM4_IRQHandler+0x38>)
 80013cc:	6013      	str	r3, [r2, #0]
  	TIM2->CNT=0;
 80013ce:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013d2:	2200      	movs	r2, #0
 80013d4:	625a      	str	r2, [r3, #36]	@ 0x24
	  sprintf(&CDC_BUFFER,"FRRQ: %d \r\n",USER_CounterTicks);
 80013d6:	4b08      	ldr	r3, [pc, #32]	@ (80013f8 <TIM4_IRQHandler+0x38>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	461a      	mov	r2, r3
 80013dc:	4907      	ldr	r1, [pc, #28]	@ (80013fc <TIM4_IRQHandler+0x3c>)
 80013de:	4808      	ldr	r0, [pc, #32]	@ (8001400 <TIM4_IRQHandler+0x40>)
 80013e0:	f00b fd82 	bl	800cee8 <siprintf>
	  CDC_Transmit_FS(&CDC_BUFFER, 50);
 80013e4:	2132      	movs	r1, #50	@ 0x32
 80013e6:	4806      	ldr	r0, [pc, #24]	@ (8001400 <TIM4_IRQHandler+0x40>)
 80013e8:	f00b f932 	bl	800c650 <CDC_Transmit_FS>

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80013ec:	4805      	ldr	r0, [pc, #20]	@ (8001404 <TIM4_IRQHandler+0x44>)
 80013ee:	f005 fd97 	bl	8006f20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */


  /* USER CODE END TIM4_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	2000065c 	.word	0x2000065c
 80013fc:	0800d858 	.word	0x0800d858
 8001400:	20000660 	.word	0x20000660
 8001404:	200005b0 	.word	0x200005b0

08001408 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001410:	4a14      	ldr	r2, [pc, #80]	@ (8001464 <_sbrk+0x5c>)
 8001412:	4b15      	ldr	r3, [pc, #84]	@ (8001468 <_sbrk+0x60>)
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800141c:	4b13      	ldr	r3, [pc, #76]	@ (800146c <_sbrk+0x64>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d102      	bne.n	800142a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001424:	4b11      	ldr	r3, [pc, #68]	@ (800146c <_sbrk+0x64>)
 8001426:	4a12      	ldr	r2, [pc, #72]	@ (8001470 <_sbrk+0x68>)
 8001428:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800142a:	4b10      	ldr	r3, [pc, #64]	@ (800146c <_sbrk+0x64>)
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4413      	add	r3, r2
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	429a      	cmp	r2, r3
 8001436:	d207      	bcs.n	8001448 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001438:	f00b fd7e 	bl	800cf38 <__errno>
 800143c:	4603      	mov	r3, r0
 800143e:	220c      	movs	r2, #12
 8001440:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001442:	f04f 33ff 	mov.w	r3, #4294967295
 8001446:	e009      	b.n	800145c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001448:	4b08      	ldr	r3, [pc, #32]	@ (800146c <_sbrk+0x64>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800144e:	4b07      	ldr	r3, [pc, #28]	@ (800146c <_sbrk+0x64>)
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4413      	add	r3, r2
 8001456:	4a05      	ldr	r2, [pc, #20]	@ (800146c <_sbrk+0x64>)
 8001458:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800145a:	68fb      	ldr	r3, [r7, #12]
}
 800145c:	4618      	mov	r0, r3
 800145e:	3718      	adds	r7, #24
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20020000 	.word	0x20020000
 8001468:	00000400 	.word	0x00000400
 800146c:	20000698 	.word	0x20000698
 8001470:	20004548 	.word	0x20004548

08001474 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001478:	4b06      	ldr	r3, [pc, #24]	@ (8001494 <SystemInit+0x20>)
 800147a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800147e:	4a05      	ldr	r2, [pc, #20]	@ (8001494 <SystemInit+0x20>)
 8001480:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001484:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	e000ed00 	.word	0xe000ed00

08001498 <ws2812_update>:

/**
 * @brief  直接更新LED颜色
 */
void ws2812_update(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
	// 数据缓冲，每个LED占用24个字节，共10个LED，前100个字节用于复位信号
	static uint16_t ws2812_data[RST_PERIOD_NUM + WS2812_NUM * 24];

	for (uint8_t led_id = 0; led_id < WS2812_NUM; led_id++)
 800149e:	2300      	movs	r3, #0
 80014a0:	71fb      	strb	r3, [r7, #7]
 80014a2:	e061      	b.n	8001568 <ws2812_update+0xd0>
	{
		_ws2812_color_current[led_id] = ws2812_color[led_id];
 80014a4:	79fa      	ldrb	r2, [r7, #7]
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	4936      	ldr	r1, [pc, #216]	@ (8001584 <ws2812_update+0xec>)
 80014aa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80014ae:	4936      	ldr	r1, [pc, #216]	@ (8001588 <ws2812_update+0xf0>)
 80014b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		static uint8_t r, g, b;
		color_to_rgb(_ws2812_color_current[led_id], &r, &g, &b);
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	4a34      	ldr	r2, [pc, #208]	@ (8001588 <ws2812_update+0xf0>)
 80014b8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80014bc:	4b33      	ldr	r3, [pc, #204]	@ (800158c <ws2812_update+0xf4>)
 80014be:	4a34      	ldr	r2, [pc, #208]	@ (8001590 <ws2812_update+0xf8>)
 80014c0:	4934      	ldr	r1, [pc, #208]	@ (8001594 <ws2812_update+0xfc>)
 80014c2:	f000 f9b9 	bl	8001838 <color_to_rgb>
		uint16_t *p = ws2812_data + RST_PERIOD_NUM + led_id * 24;
 80014c6:	79fa      	ldrb	r2, [r7, #7]
 80014c8:	4613      	mov	r3, r2
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	4413      	add	r3, r2
 80014ce:	011b      	lsls	r3, r3, #4
 80014d0:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80014d4:	4a30      	ldr	r2, [pc, #192]	@ (8001598 <ws2812_update+0x100>)
 80014d6:	4413      	add	r3, r2
 80014d8:	603b      	str	r3, [r7, #0]
		for (uint8_t i = 0; i < 8; i++)
 80014da:	2300      	movs	r3, #0
 80014dc:	71bb      	strb	r3, [r7, #6]
 80014de:	e03d      	b.n	800155c <ws2812_update+0xc4>
		{
			p[i] = (r << i) & (0x80) ? CODE_ONE_DUTY : CODE_ZERO_DUTY;
 80014e0:	4b2c      	ldr	r3, [pc, #176]	@ (8001594 <ws2812_update+0xfc>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	461a      	mov	r2, r3
 80014e6:	79bb      	ldrb	r3, [r7, #6]
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <ws2812_update+0x60>
 80014f4:	218c      	movs	r1, #140	@ 0x8c
 80014f6:	e000      	b.n	80014fa <ws2812_update+0x62>
 80014f8:	2146      	movs	r1, #70	@ 0x46
 80014fa:	79bb      	ldrb	r3, [r7, #6]
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	683a      	ldr	r2, [r7, #0]
 8001500:	4413      	add	r3, r2
 8001502:	460a      	mov	r2, r1
 8001504:	801a      	strh	r2, [r3, #0]
			p[i + 8] = (g << i) & (0x80) ? CODE_ONE_DUTY : CODE_ZERO_DUTY;
 8001506:	4b22      	ldr	r3, [pc, #136]	@ (8001590 <ws2812_update+0xf8>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	461a      	mov	r2, r3
 800150c:	79bb      	ldrb	r3, [r7, #6]
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <ws2812_update+0x86>
 800151a:	218c      	movs	r1, #140	@ 0x8c
 800151c:	e000      	b.n	8001520 <ws2812_update+0x88>
 800151e:	2146      	movs	r1, #70	@ 0x46
 8001520:	79bb      	ldrb	r3, [r7, #6]
 8001522:	3308      	adds	r3, #8
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	683a      	ldr	r2, [r7, #0]
 8001528:	4413      	add	r3, r2
 800152a:	460a      	mov	r2, r1
 800152c:	801a      	strh	r2, [r3, #0]
			p[i + 16] = (b << i) & (0x80) ? CODE_ONE_DUTY : CODE_ZERO_DUTY;
 800152e:	4b17      	ldr	r3, [pc, #92]	@ (800158c <ws2812_update+0xf4>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	461a      	mov	r2, r3
 8001534:	79bb      	ldrb	r3, [r7, #6]
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <ws2812_update+0xae>
 8001542:	218c      	movs	r1, #140	@ 0x8c
 8001544:	e000      	b.n	8001548 <ws2812_update+0xb0>
 8001546:	2146      	movs	r1, #70	@ 0x46
 8001548:	79bb      	ldrb	r3, [r7, #6]
 800154a:	3310      	adds	r3, #16
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	683a      	ldr	r2, [r7, #0]
 8001550:	4413      	add	r3, r2
 8001552:	460a      	mov	r2, r1
 8001554:	801a      	strh	r2, [r3, #0]
		for (uint8_t i = 0; i < 8; i++)
 8001556:	79bb      	ldrb	r3, [r7, #6]
 8001558:	3301      	adds	r3, #1
 800155a:	71bb      	strb	r3, [r7, #6]
 800155c:	79bb      	ldrb	r3, [r7, #6]
 800155e:	2b07      	cmp	r3, #7
 8001560:	d9be      	bls.n	80014e0 <ws2812_update+0x48>
	for (uint8_t led_id = 0; led_id < WS2812_NUM; led_id++)
 8001562:	79fb      	ldrb	r3, [r7, #7]
 8001564:	3301      	adds	r3, #1
 8001566:	71fb      	strb	r3, [r7, #7]
 8001568:	79fb      	ldrb	r3, [r7, #7]
 800156a:	2b63      	cmp	r3, #99	@ 0x63
 800156c:	d99a      	bls.n	80014a4 <ws2812_update+0xc>
		}
	}
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_4, (uint32_t *)ws2812_data,
 800156e:	f640 5348 	movw	r3, #3400	@ 0xd48
 8001572:	4a09      	ldr	r2, [pc, #36]	@ (8001598 <ws2812_update+0x100>)
 8001574:	210c      	movs	r1, #12
 8001576:	4809      	ldr	r0, [pc, #36]	@ (800159c <ws2812_update+0x104>)
 8001578:	f005 faa6 	bl	8006ac8 <HAL_TIM_PWM_Start_DMA>
						  RST_PERIOD_NUM + WS2812_NUM * 24);
}
 800157c:	bf00      	nop
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	2000069c 	.word	0x2000069c
 8001588:	2000082c 	.word	0x2000082c
 800158c:	200009be 	.word	0x200009be
 8001590:	200009bd 	.word	0x200009bd
 8001594:	200009bc 	.word	0x200009bc
 8001598:	200009c0 	.word	0x200009c0
 800159c:	20000564 	.word	0x20000564

080015a0 <ws2812_gradient>:
 * @brief  通过渐变方式更新LED颜色（线性插值）
 * @param  steps: 渐变步数
 * @param  delay_ms: 每步之间的延迟时间（毫秒）
 */
void ws2812_gradient(uint8_t steps, uint16_t delay_ms)
{
 80015a0:	b590      	push	{r4, r7, lr}
 80015a2:	b087      	sub	sp, #28
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	460a      	mov	r2, r1
 80015aa:	71fb      	strb	r3, [r7, #7]
 80015ac:	4613      	mov	r3, r2
 80015ae:	80bb      	strh	r3, [r7, #4]
	static uint8_t start_r[WS2812_NUM], start_g[WS2812_NUM], start_b[WS2812_NUM];
	static float r_step[WS2812_NUM], g_step[WS2812_NUM], b_step[WS2812_NUM];

	// 提取初始颜色，并计算每步的渐变步长
	for (uint8_t i = 0; i < WS2812_NUM; i++)
 80015b0:	2300      	movs	r3, #0
 80015b2:	75fb      	strb	r3, [r7, #23]
 80015b4:	e062      	b.n	800167c <ws2812_gradient+0xdc>
	{
		color_to_rgb(_ws2812_color_current[i], &start_r[i], &start_g[i], &start_b[i]);
 80015b6:	7dfb      	ldrb	r3, [r7, #23]
 80015b8:	4a6e      	ldr	r2, [pc, #440]	@ (8001774 <ws2812_gradient+0x1d4>)
 80015ba:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80015be:	7dfb      	ldrb	r3, [r7, #23]
 80015c0:	4a6d      	ldr	r2, [pc, #436]	@ (8001778 <ws2812_gradient+0x1d8>)
 80015c2:	1899      	adds	r1, r3, r2
 80015c4:	7dfb      	ldrb	r3, [r7, #23]
 80015c6:	4a6d      	ldr	r2, [pc, #436]	@ (800177c <ws2812_gradient+0x1dc>)
 80015c8:	441a      	add	r2, r3
 80015ca:	7dfb      	ldrb	r3, [r7, #23]
 80015cc:	4c6c      	ldr	r4, [pc, #432]	@ (8001780 <ws2812_gradient+0x1e0>)
 80015ce:	4423      	add	r3, r4
 80015d0:	f000 f932 	bl	8001838 <color_to_rgb>
		uint8_t target_r, target_g, target_b;
		color_to_rgb(ws2812_color[i], &target_r, &target_g, &target_b);
 80015d4:	7dfb      	ldrb	r3, [r7, #23]
 80015d6:	4a6b      	ldr	r2, [pc, #428]	@ (8001784 <ws2812_gradient+0x1e4>)
 80015d8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80015dc:	f107 030f 	add.w	r3, r7, #15
 80015e0:	f107 0210 	add.w	r2, r7, #16
 80015e4:	f107 0111 	add.w	r1, r7, #17
 80015e8:	f000 f926 	bl	8001838 <color_to_rgb>

		r_step[i] = (float)(target_r - start_r[i]) / steps;
 80015ec:	7c7b      	ldrb	r3, [r7, #17]
 80015ee:	4619      	mov	r1, r3
 80015f0:	7dfb      	ldrb	r3, [r7, #23]
 80015f2:	4a61      	ldr	r2, [pc, #388]	@ (8001778 <ws2812_gradient+0x1d8>)
 80015f4:	5cd3      	ldrb	r3, [r2, r3]
 80015f6:	1acb      	subs	r3, r1, r3
 80015f8:	ee07 3a90 	vmov	s15, r3
 80015fc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	ee07 3a90 	vmov	s15, r3
 8001606:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800160a:	7dfb      	ldrb	r3, [r7, #23]
 800160c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001610:	4a5d      	ldr	r2, [pc, #372]	@ (8001788 <ws2812_gradient+0x1e8>)
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	4413      	add	r3, r2
 8001616:	edc3 7a00 	vstr	s15, [r3]
		g_step[i] = (float)(target_g - start_g[i]) / steps;
 800161a:	7c3b      	ldrb	r3, [r7, #16]
 800161c:	4619      	mov	r1, r3
 800161e:	7dfb      	ldrb	r3, [r7, #23]
 8001620:	4a56      	ldr	r2, [pc, #344]	@ (800177c <ws2812_gradient+0x1dc>)
 8001622:	5cd3      	ldrb	r3, [r2, r3]
 8001624:	1acb      	subs	r3, r1, r3
 8001626:	ee07 3a90 	vmov	s15, r3
 800162a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800162e:	79fb      	ldrb	r3, [r7, #7]
 8001630:	ee07 3a90 	vmov	s15, r3
 8001634:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001638:	7dfb      	ldrb	r3, [r7, #23]
 800163a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800163e:	4a53      	ldr	r2, [pc, #332]	@ (800178c <ws2812_gradient+0x1ec>)
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	4413      	add	r3, r2
 8001644:	edc3 7a00 	vstr	s15, [r3]
		b_step[i] = (float)(target_b - start_b[i]) / steps;
 8001648:	7bfb      	ldrb	r3, [r7, #15]
 800164a:	4619      	mov	r1, r3
 800164c:	7dfb      	ldrb	r3, [r7, #23]
 800164e:	4a4c      	ldr	r2, [pc, #304]	@ (8001780 <ws2812_gradient+0x1e0>)
 8001650:	5cd3      	ldrb	r3, [r2, r3]
 8001652:	1acb      	subs	r3, r1, r3
 8001654:	ee07 3a90 	vmov	s15, r3
 8001658:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800165c:	79fb      	ldrb	r3, [r7, #7]
 800165e:	ee07 3a90 	vmov	s15, r3
 8001662:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001666:	7dfb      	ldrb	r3, [r7, #23]
 8001668:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800166c:	4a48      	ldr	r2, [pc, #288]	@ (8001790 <ws2812_gradient+0x1f0>)
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	4413      	add	r3, r2
 8001672:	edc3 7a00 	vstr	s15, [r3]
	for (uint8_t i = 0; i < WS2812_NUM; i++)
 8001676:	7dfb      	ldrb	r3, [r7, #23]
 8001678:	3301      	adds	r3, #1
 800167a:	75fb      	strb	r3, [r7, #23]
 800167c:	7dfb      	ldrb	r3, [r7, #23]
 800167e:	2b63      	cmp	r3, #99	@ 0x63
 8001680:	d999      	bls.n	80015b6 <ws2812_gradient+0x16>
	}

	// 逐步渐变
	for (uint8_t step = 1; step <= steps; step++)
 8001682:	2301      	movs	r3, #1
 8001684:	75bb      	strb	r3, [r7, #22]
 8001686:	e06b      	b.n	8001760 <ws2812_gradient+0x1c0>
	{
		for (uint8_t led_id = 0; led_id < WS2812_NUM; led_id++)
 8001688:	2300      	movs	r3, #0
 800168a:	757b      	strb	r3, [r7, #21]
 800168c:	e05c      	b.n	8001748 <ws2812_gradient+0x1a8>
		{
			// 计算当前步的颜色
			uint8_t r = (uint8_t)(start_r[led_id] + r_step[led_id] * step);
 800168e:	7d7b      	ldrb	r3, [r7, #21]
 8001690:	4a39      	ldr	r2, [pc, #228]	@ (8001778 <ws2812_gradient+0x1d8>)
 8001692:	5cd3      	ldrb	r3, [r2, r3]
 8001694:	ee07 3a90 	vmov	s15, r3
 8001698:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800169c:	7d7b      	ldrb	r3, [r7, #21]
 800169e:	4a3a      	ldr	r2, [pc, #232]	@ (8001788 <ws2812_gradient+0x1e8>)
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	4413      	add	r3, r2
 80016a4:	edd3 6a00 	vldr	s13, [r3]
 80016a8:	7dbb      	ldrb	r3, [r7, #22]
 80016aa:	ee07 3a90 	vmov	s15, r3
 80016ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016be:	edc7 7a00 	vstr	s15, [r7]
 80016c2:	783b      	ldrb	r3, [r7, #0]
 80016c4:	753b      	strb	r3, [r7, #20]
			uint8_t g = (uint8_t)(start_g[led_id] + g_step[led_id] * step);
 80016c6:	7d7b      	ldrb	r3, [r7, #21]
 80016c8:	4a2c      	ldr	r2, [pc, #176]	@ (800177c <ws2812_gradient+0x1dc>)
 80016ca:	5cd3      	ldrb	r3, [r2, r3]
 80016cc:	ee07 3a90 	vmov	s15, r3
 80016d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016d4:	7d7b      	ldrb	r3, [r7, #21]
 80016d6:	4a2d      	ldr	r2, [pc, #180]	@ (800178c <ws2812_gradient+0x1ec>)
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	4413      	add	r3, r2
 80016dc:	edd3 6a00 	vldr	s13, [r3]
 80016e0:	7dbb      	ldrb	r3, [r7, #22]
 80016e2:	ee07 3a90 	vmov	s15, r3
 80016e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016f6:	edc7 7a00 	vstr	s15, [r7]
 80016fa:	783b      	ldrb	r3, [r7, #0]
 80016fc:	74fb      	strb	r3, [r7, #19]
			uint8_t b = (uint8_t)(start_b[led_id] + b_step[led_id] * step);
 80016fe:	7d7b      	ldrb	r3, [r7, #21]
 8001700:	4a1f      	ldr	r2, [pc, #124]	@ (8001780 <ws2812_gradient+0x1e0>)
 8001702:	5cd3      	ldrb	r3, [r2, r3]
 8001704:	ee07 3a90 	vmov	s15, r3
 8001708:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800170c:	7d7b      	ldrb	r3, [r7, #21]
 800170e:	4a20      	ldr	r2, [pc, #128]	@ (8001790 <ws2812_gradient+0x1f0>)
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	4413      	add	r3, r2
 8001714:	edd3 6a00 	vldr	s13, [r3]
 8001718:	7dbb      	ldrb	r3, [r7, #22]
 800171a:	ee07 3a90 	vmov	s15, r3
 800171e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001722:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001726:	ee77 7a27 	vadd.f32	s15, s14, s15
 800172a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800172e:	edc7 7a00 	vstr	s15, [r7]
 8001732:	783b      	ldrb	r3, [r7, #0]
 8001734:	74bb      	strb	r3, [r7, #18]

			ws2812_set_rgb(led_id, r, g, b);
 8001736:	7cbb      	ldrb	r3, [r7, #18]
 8001738:	7cfa      	ldrb	r2, [r7, #19]
 800173a:	7d39      	ldrb	r1, [r7, #20]
 800173c:	7d78      	ldrb	r0, [r7, #21]
 800173e:	f000 f829 	bl	8001794 <ws2812_set_rgb>
		for (uint8_t led_id = 0; led_id < WS2812_NUM; led_id++)
 8001742:	7d7b      	ldrb	r3, [r7, #21]
 8001744:	3301      	adds	r3, #1
 8001746:	757b      	strb	r3, [r7, #21]
 8001748:	7d7b      	ldrb	r3, [r7, #21]
 800174a:	2b63      	cmp	r3, #99	@ 0x63
 800174c:	d99f      	bls.n	800168e <ws2812_gradient+0xee>
		}

		ws2812_update();
 800174e:	f7ff fea3 	bl	8001498 <ws2812_update>
		HAL_Delay(delay_ms);
 8001752:	88bb      	ldrh	r3, [r7, #4]
 8001754:	4618      	mov	r0, r3
 8001756:	f000 f925 	bl	80019a4 <HAL_Delay>
	for (uint8_t step = 1; step <= steps; step++)
 800175a:	7dbb      	ldrb	r3, [r7, #22]
 800175c:	3301      	adds	r3, #1
 800175e:	75bb      	strb	r3, [r7, #22]
 8001760:	7dba      	ldrb	r2, [r7, #22]
 8001762:	79fb      	ldrb	r3, [r7, #7]
 8001764:	429a      	cmp	r2, r3
 8001766:	d98f      	bls.n	8001688 <ws2812_gradient+0xe8>
	}
}
 8001768:	bf00      	nop
 800176a:	bf00      	nop
 800176c:	371c      	adds	r7, #28
 800176e:	46bd      	mov	sp, r7
 8001770:	bd90      	pop	{r4, r7, pc}
 8001772:	bf00      	nop
 8001774:	2000082c 	.word	0x2000082c
 8001778:	20002450 	.word	0x20002450
 800177c:	200024b4 	.word	0x200024b4
 8001780:	20002518 	.word	0x20002518
 8001784:	2000069c 	.word	0x2000069c
 8001788:	2000257c 	.word	0x2000257c
 800178c:	2000270c 	.word	0x2000270c
 8001790:	2000289c 	.word	0x2000289c

08001794 <ws2812_set_rgb>:
 * @param  r: 红色亮度（0-255）
 * @param  g: 绿色亮度（0-255）
 * @param  b: 蓝色亮度（0-255）
 */
void ws2812_set_rgb(uint8_t led_id, uint8_t r, uint8_t g, uint8_t b)
{
 8001794:	b590      	push	{r4, r7, lr}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	4604      	mov	r4, r0
 800179c:	4608      	mov	r0, r1
 800179e:	4611      	mov	r1, r2
 80017a0:	461a      	mov	r2, r3
 80017a2:	4623      	mov	r3, r4
 80017a4:	71fb      	strb	r3, [r7, #7]
 80017a6:	4603      	mov	r3, r0
 80017a8:	71bb      	strb	r3, [r7, #6]
 80017aa:	460b      	mov	r3, r1
 80017ac:	717b      	strb	r3, [r7, #5]
 80017ae:	4613      	mov	r3, r2
 80017b0:	713b      	strb	r3, [r7, #4]
	ws2812_color[led_id] = rgb_to_color(r, g, b);
 80017b2:	79fc      	ldrb	r4, [r7, #7]
 80017b4:	793a      	ldrb	r2, [r7, #4]
 80017b6:	7979      	ldrb	r1, [r7, #5]
 80017b8:	79bb      	ldrb	r3, [r7, #6]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f000 f826 	bl	800180c <rgb_to_color>
 80017c0:	4603      	mov	r3, r0
 80017c2:	4a03      	ldr	r2, [pc, #12]	@ (80017d0 <ws2812_set_rgb+0x3c>)
 80017c4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
}
 80017c8:	bf00      	nop
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd90      	pop	{r4, r7, pc}
 80017d0:	2000069c 	.word	0x2000069c

080017d4 <ws2812_set_all>:
/**
 * @brief  设置所有LED颜色（24bit颜色格式）
 * @param  color: 24bit颜色
 */
void ws2812_set_all(uint32_t color)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
	for (uint8_t led_id = 0; led_id < WS2812_NUM; led_id++)
 80017dc:	2300      	movs	r3, #0
 80017de:	73fb      	strb	r3, [r7, #15]
 80017e0:	e007      	b.n	80017f2 <ws2812_set_all+0x1e>
	{
		ws2812_color[led_id] = color;
 80017e2:	7bfb      	ldrb	r3, [r7, #15]
 80017e4:	4908      	ldr	r1, [pc, #32]	@ (8001808 <ws2812_set_all+0x34>)
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (uint8_t led_id = 0; led_id < WS2812_NUM; led_id++)
 80017ec:	7bfb      	ldrb	r3, [r7, #15]
 80017ee:	3301      	adds	r3, #1
 80017f0:	73fb      	strb	r3, [r7, #15]
 80017f2:	7bfb      	ldrb	r3, [r7, #15]
 80017f4:	2b63      	cmp	r3, #99	@ 0x63
 80017f6:	d9f4      	bls.n	80017e2 <ws2812_set_all+0xe>
	}
}
 80017f8:	bf00      	nop
 80017fa:	bf00      	nop
 80017fc:	3714      	adds	r7, #20
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	2000069c 	.word	0x2000069c

0800180c <rgb_to_color>:
 * @param  g: 绿色亮度（0-255）
 * @param  b: 蓝色亮度（0-255）
 * @retval 24bit颜色
 */
uint32_t rgb_to_color(uint8_t r, uint8_t g, uint8_t b)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	71fb      	strb	r3, [r7, #7]
 8001816:	460b      	mov	r3, r1
 8001818:	71bb      	strb	r3, [r7, #6]
 800181a:	4613      	mov	r3, r2
 800181c:	717b      	strb	r3, [r7, #5]
	return (r << 16) | (g << 8) | b;
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	041a      	lsls	r2, r3, #16
 8001822:	79bb      	ldrb	r3, [r7, #6]
 8001824:	021b      	lsls	r3, r3, #8
 8001826:	431a      	orrs	r2, r3
 8001828:	797b      	ldrb	r3, [r7, #5]
 800182a:	4313      	orrs	r3, r2
}
 800182c:	4618      	mov	r0, r3
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <color_to_rgb>:
 * @param  r: 红色亮度（0-255）
 * @param  g: 绿色亮度（0-255）
 * @param  b: 蓝色亮度（0-255）
 */
void color_to_rgb(uint32_t color, uint8_t *r, uint8_t *g, uint8_t *b)
{
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
 8001844:	603b      	str	r3, [r7, #0]
	*r = (color >> 16) & 0xFF;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	0c1b      	lsrs	r3, r3, #16
 800184a:	b2da      	uxtb	r2, r3
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	701a      	strb	r2, [r3, #0]
	*g = (color >> 8) & 0xFF;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	0a1b      	lsrs	r3, r3, #8
 8001854:	b2da      	uxtb	r2, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	701a      	strb	r2, [r3, #0]
	*b = color & 0xFF;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	b2da      	uxtb	r2, r3
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	701a      	strb	r2, [r3, #0]
}
 8001862:	bf00      	nop
 8001864:	3714      	adds	r7, #20
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
	...

08001870 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001870:	480d      	ldr	r0, [pc, #52]	@ (80018a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001872:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001874:	f7ff fdfe 	bl	8001474 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001878:	480c      	ldr	r0, [pc, #48]	@ (80018ac <LoopForever+0x6>)
  ldr r1, =_edata
 800187a:	490d      	ldr	r1, [pc, #52]	@ (80018b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800187c:	4a0d      	ldr	r2, [pc, #52]	@ (80018b4 <LoopForever+0xe>)
  movs r3, #0
 800187e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001880:	e002      	b.n	8001888 <LoopCopyDataInit>

08001882 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001882:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001884:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001886:	3304      	adds	r3, #4

08001888 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001888:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800188a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800188c:	d3f9      	bcc.n	8001882 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800188e:	4a0a      	ldr	r2, [pc, #40]	@ (80018b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001890:	4c0a      	ldr	r4, [pc, #40]	@ (80018bc <LoopForever+0x16>)
  movs r3, #0
 8001892:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001894:	e001      	b.n	800189a <LoopFillZerobss>

08001896 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001896:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001898:	3204      	adds	r2, #4

0800189a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800189a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800189c:	d3fb      	bcc.n	8001896 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800189e:	f00b fb51 	bl	800cf44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018a2:	f7fe fd0d 	bl	80002c0 <main>

080018a6 <LoopForever>:

LoopForever:
    b LoopForever
 80018a6:	e7fe      	b.n	80018a6 <LoopForever>
  ldr   r0, =_estack
 80018a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018b0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80018b4:	0800d900 	.word	0x0800d900
  ldr r2, =_sbss
 80018b8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80018bc:	20004548 	.word	0x20004548

080018c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018c0:	e7fe      	b.n	80018c0 <ADC1_2_IRQHandler>

080018c2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b082      	sub	sp, #8
 80018c6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018c8:	2300      	movs	r3, #0
 80018ca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018cc:	2003      	movs	r0, #3
 80018ce:	f001 fa5b 	bl	8002d88 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018d2:	200f      	movs	r0, #15
 80018d4:	f000 f80e 	bl	80018f4 <HAL_InitTick>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d002      	beq.n	80018e4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	71fb      	strb	r3, [r7, #7]
 80018e2:	e001      	b.n	80018e8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018e4:	f7ff fa42 	bl	8000d6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018e8:	79fb      	ldrb	r3, [r7, #7]

}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
	...

080018f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018fc:	2300      	movs	r3, #0
 80018fe:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001900:	4b16      	ldr	r3, [pc, #88]	@ (800195c <HAL_InitTick+0x68>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d022      	beq.n	800194e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001908:	4b15      	ldr	r3, [pc, #84]	@ (8001960 <HAL_InitTick+0x6c>)
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	4b13      	ldr	r3, [pc, #76]	@ (800195c <HAL_InitTick+0x68>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001914:	fbb1 f3f3 	udiv	r3, r1, r3
 8001918:	fbb2 f3f3 	udiv	r3, r2, r3
 800191c:	4618      	mov	r0, r3
 800191e:	f001 fa66 	bl	8002dee <HAL_SYSTICK_Config>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d10f      	bne.n	8001948 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2b0f      	cmp	r3, #15
 800192c:	d809      	bhi.n	8001942 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800192e:	2200      	movs	r2, #0
 8001930:	6879      	ldr	r1, [r7, #4]
 8001932:	f04f 30ff 	mov.w	r0, #4294967295
 8001936:	f001 fa32 	bl	8002d9e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800193a:	4a0a      	ldr	r2, [pc, #40]	@ (8001964 <HAL_InitTick+0x70>)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6013      	str	r3, [r2, #0]
 8001940:	e007      	b.n	8001952 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	73fb      	strb	r3, [r7, #15]
 8001946:	e004      	b.n	8001952 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	73fb      	strb	r3, [r7, #15]
 800194c:	e001      	b.n	8001952 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001952:	7bfb      	ldrb	r3, [r7, #15]
}
 8001954:	4618      	mov	r0, r3
 8001956:	3710      	adds	r7, #16
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	20000008 	.word	0x20000008
 8001960:	20000000 	.word	0x20000000
 8001964:	20000004 	.word	0x20000004

08001968 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800196c:	4b05      	ldr	r3, [pc, #20]	@ (8001984 <HAL_IncTick+0x1c>)
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	4b05      	ldr	r3, [pc, #20]	@ (8001988 <HAL_IncTick+0x20>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4413      	add	r3, r2
 8001976:	4a03      	ldr	r2, [pc, #12]	@ (8001984 <HAL_IncTick+0x1c>)
 8001978:	6013      	str	r3, [r2, #0]
}
 800197a:	bf00      	nop
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	20002a2c 	.word	0x20002a2c
 8001988:	20000008 	.word	0x20000008

0800198c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  return uwTick;
 8001990:	4b03      	ldr	r3, [pc, #12]	@ (80019a0 <HAL_GetTick+0x14>)
 8001992:	681b      	ldr	r3, [r3, #0]
}
 8001994:	4618      	mov	r0, r3
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	20002a2c 	.word	0x20002a2c

080019a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019ac:	f7ff ffee 	bl	800198c <HAL_GetTick>
 80019b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019bc:	d004      	beq.n	80019c8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80019be:	4b09      	ldr	r3, [pc, #36]	@ (80019e4 <HAL_Delay+0x40>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	68fa      	ldr	r2, [r7, #12]
 80019c4:	4413      	add	r3, r2
 80019c6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019c8:	bf00      	nop
 80019ca:	f7ff ffdf 	bl	800198c <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	68fa      	ldr	r2, [r7, #12]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d8f7      	bhi.n	80019ca <HAL_Delay+0x26>
  {
  }
}
 80019da:	bf00      	nop
 80019dc:	bf00      	nop
 80019de:	3710      	adds	r7, #16
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	20000008 	.word	0x20000008

080019e8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	431a      	orrs	r2, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	609a      	str	r2, [r3, #8]
}
 8001a02:	bf00      	nop
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b083      	sub	sp, #12
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
 8001a16:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	431a      	orrs	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	609a      	str	r2, [r3, #8]
}
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b087      	sub	sp, #28
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
 8001a5c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	3360      	adds	r3, #96	@ 0x60
 8001a62:	461a      	mov	r2, r3
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	4413      	add	r3, r2
 8001a6a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	4b08      	ldr	r3, [pc, #32]	@ (8001a94 <LL_ADC_SetOffset+0x44>)
 8001a72:	4013      	ands	r3, r2
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001a7a:	683a      	ldr	r2, [r7, #0]
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001a88:	bf00      	nop
 8001a8a:	371c      	adds	r7, #28
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr
 8001a94:	03fff000 	.word	0x03fff000

08001a98 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	3360      	adds	r3, #96	@ 0x60
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	4413      	add	r3, r2
 8001aae:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3714      	adds	r7, #20
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b087      	sub	sp, #28
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	3360      	adds	r3, #96	@ 0x60
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	4413      	add	r3, r2
 8001adc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	431a      	orrs	r2, r3
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001aee:	bf00      	nop
 8001af0:	371c      	adds	r7, #28
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr

08001afa <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001afa:	b480      	push	{r7}
 8001afc:	b087      	sub	sp, #28
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	60f8      	str	r0, [r7, #12]
 8001b02:	60b9      	str	r1, [r7, #8]
 8001b04:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	3360      	adds	r3, #96	@ 0x60
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	4413      	add	r3, r2
 8001b12:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	431a      	orrs	r2, r3
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001b24:	bf00      	nop
 8001b26:	371c      	adds	r7, #28
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b087      	sub	sp, #28
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	3360      	adds	r3, #96	@ 0x60
 8001b40:	461a      	mov	r2, r3
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	4413      	add	r3, r2
 8001b48:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	431a      	orrs	r2, r3
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001b5a:	bf00      	nop
 8001b5c:	371c      	adds	r7, #28
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr

08001b66 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001b66:	b480      	push	{r7}
 8001b68:	b083      	sub	sp, #12
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
 8001b6e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	695b      	ldr	r3, [r3, #20]
 8001b74:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	431a      	orrs	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	615a      	str	r2, [r3, #20]
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b087      	sub	sp, #28
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	3330      	adds	r3, #48	@ 0x30
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	0a1b      	lsrs	r3, r3, #8
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	f003 030c 	and.w	r3, r3, #12
 8001ba8:	4413      	add	r3, r2
 8001baa:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	f003 031f 	and.w	r3, r3, #31
 8001bb6:	211f      	movs	r1, #31
 8001bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	401a      	ands	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	0e9b      	lsrs	r3, r3, #26
 8001bc4:	f003 011f 	and.w	r1, r3, #31
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	f003 031f 	and.w	r3, r3, #31
 8001bce:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd2:	431a      	orrs	r2, r3
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001bd8:	bf00      	nop
 8001bda:	371c      	adds	r7, #28
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b087      	sub	sp, #28
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	3314      	adds	r3, #20
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	0e5b      	lsrs	r3, r3, #25
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	f003 0304 	and.w	r3, r3, #4
 8001c00:	4413      	add	r3, r2
 8001c02:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	0d1b      	lsrs	r3, r3, #20
 8001c0c:	f003 031f 	and.w	r3, r3, #31
 8001c10:	2107      	movs	r1, #7
 8001c12:	fa01 f303 	lsl.w	r3, r1, r3
 8001c16:	43db      	mvns	r3, r3
 8001c18:	401a      	ands	r2, r3
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	0d1b      	lsrs	r3, r3, #20
 8001c1e:	f003 031f 	and.w	r3, r3, #31
 8001c22:	6879      	ldr	r1, [r7, #4]
 8001c24:	fa01 f303 	lsl.w	r3, r1, r3
 8001c28:	431a      	orrs	r2, r3
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001c2e:	bf00      	nop
 8001c30:	371c      	adds	r7, #28
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
	...

08001c3c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c54:	43db      	mvns	r3, r3
 8001c56:	401a      	ands	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f003 0318 	and.w	r3, r3, #24
 8001c5e:	4908      	ldr	r1, [pc, #32]	@ (8001c80 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001c60:	40d9      	lsrs	r1, r3
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	400b      	ands	r3, r1
 8001c66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c6a:	431a      	orrs	r2, r3
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001c72:	bf00      	nop
 8001c74:	3714      	adds	r7, #20
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	0007ffff 	.word	0x0007ffff

08001c84 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001c94:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	6093      	str	r3, [r2, #8]
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001cb8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001cbc:	d101      	bne.n	8001cc2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e000      	b.n	8001cc4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001cc2:	2300      	movs	r3, #0
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001ce0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ce4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001d0c:	d101      	bne.n	8001d12 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e000      	b.n	8001d14 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001d12:	2300      	movs	r3, #0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f003 0301 	and.w	r3, r3, #1
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d101      	bne.n	8001d38 <LL_ADC_IsEnabled+0x18>
 8001d34:	2301      	movs	r3, #1
 8001d36:	e000      	b.n	8001d3a <LL_ADC_IsEnabled+0x1a>
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr

08001d46 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d46:	b480      	push	{r7}
 8001d48:	b083      	sub	sp, #12
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f003 0304 	and.w	r3, r3, #4
 8001d56:	2b04      	cmp	r3, #4
 8001d58:	d101      	bne.n	8001d5e <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e000      	b.n	8001d60 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	f003 0308 	and.w	r3, r3, #8
 8001d7c:	2b08      	cmp	r3, #8
 8001d7e:	d101      	bne.n	8001d84 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001d80:	2301      	movs	r3, #1
 8001d82:	e000      	b.n	8001d86 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
	...

08001d94 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d94:	b590      	push	{r4, r7, lr}
 8001d96:	b089      	sub	sp, #36	@ 0x24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001da0:	2300      	movs	r3, #0
 8001da2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d101      	bne.n	8001dae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e1a9      	b.n	8002102 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	695b      	ldr	r3, [r3, #20]
 8001db2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d109      	bne.n	8001dd0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f7fe fff9 	bl	8000db4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff ff67 	bl	8001ca8 <LL_ADC_IsDeepPowerDownEnabled>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d004      	beq.n	8001dea <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff ff4d 	bl	8001c84 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff ff82 	bl	8001cf8 <LL_ADC_IsInternalRegulatorEnabled>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d115      	bne.n	8001e26 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7ff ff66 	bl	8001cd0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e04:	4b9c      	ldr	r3, [pc, #624]	@ (8002078 <HAL_ADC_Init+0x2e4>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	099b      	lsrs	r3, r3, #6
 8001e0a:	4a9c      	ldr	r2, [pc, #624]	@ (800207c <HAL_ADC_Init+0x2e8>)
 8001e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e10:	099b      	lsrs	r3, r3, #6
 8001e12:	3301      	adds	r3, #1
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001e18:	e002      	b.n	8001e20 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	3b01      	subs	r3, #1
 8001e1e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1f9      	bne.n	8001e1a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff ff64 	bl	8001cf8 <LL_ADC_IsInternalRegulatorEnabled>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d10d      	bne.n	8001e52 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e3a:	f043 0210 	orr.w	r2, r3, #16
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e46:	f043 0201 	orr.w	r2, r3, #1
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff ff75 	bl	8001d46 <LL_ADC_REG_IsConversionOngoing>
 8001e5c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e62:	f003 0310 	and.w	r3, r3, #16
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	f040 8142 	bne.w	80020f0 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	f040 813e 	bne.w	80020f0 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e78:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001e7c:	f043 0202 	orr.w	r2, r3, #2
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff ff49 	bl	8001d20 <LL_ADC_IsEnabled>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d141      	bne.n	8001f18 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e9c:	d004      	beq.n	8001ea8 <HAL_ADC_Init+0x114>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a77      	ldr	r2, [pc, #476]	@ (8002080 <HAL_ADC_Init+0x2ec>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d10f      	bne.n	8001ec8 <HAL_ADC_Init+0x134>
 8001ea8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001eac:	f7ff ff38 	bl	8001d20 <LL_ADC_IsEnabled>
 8001eb0:	4604      	mov	r4, r0
 8001eb2:	4873      	ldr	r0, [pc, #460]	@ (8002080 <HAL_ADC_Init+0x2ec>)
 8001eb4:	f7ff ff34 	bl	8001d20 <LL_ADC_IsEnabled>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	4323      	orrs	r3, r4
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	bf0c      	ite	eq
 8001ec0:	2301      	moveq	r3, #1
 8001ec2:	2300      	movne	r3, #0
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	e012      	b.n	8001eee <HAL_ADC_Init+0x15a>
 8001ec8:	486e      	ldr	r0, [pc, #440]	@ (8002084 <HAL_ADC_Init+0x2f0>)
 8001eca:	f7ff ff29 	bl	8001d20 <LL_ADC_IsEnabled>
 8001ece:	4604      	mov	r4, r0
 8001ed0:	486d      	ldr	r0, [pc, #436]	@ (8002088 <HAL_ADC_Init+0x2f4>)
 8001ed2:	f7ff ff25 	bl	8001d20 <LL_ADC_IsEnabled>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	431c      	orrs	r4, r3
 8001eda:	486c      	ldr	r0, [pc, #432]	@ (800208c <HAL_ADC_Init+0x2f8>)
 8001edc:	f7ff ff20 	bl	8001d20 <LL_ADC_IsEnabled>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	4323      	orrs	r3, r4
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	bf0c      	ite	eq
 8001ee8:	2301      	moveq	r3, #1
 8001eea:	2300      	movne	r3, #0
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d012      	beq.n	8001f18 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001efa:	d004      	beq.n	8001f06 <HAL_ADC_Init+0x172>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a5f      	ldr	r2, [pc, #380]	@ (8002080 <HAL_ADC_Init+0x2ec>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d101      	bne.n	8001f0a <HAL_ADC_Init+0x176>
 8001f06:	4a62      	ldr	r2, [pc, #392]	@ (8002090 <HAL_ADC_Init+0x2fc>)
 8001f08:	e000      	b.n	8001f0c <HAL_ADC_Init+0x178>
 8001f0a:	4a62      	ldr	r2, [pc, #392]	@ (8002094 <HAL_ADC_Init+0x300>)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	4619      	mov	r1, r3
 8001f12:	4610      	mov	r0, r2
 8001f14:	f7ff fd68 	bl	80019e8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	7f5b      	ldrb	r3, [r3, #29]
 8001f1c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f22:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001f28:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001f2e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f36:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d106      	bne.n	8001f54 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	045b      	lsls	r3, r3, #17
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d009      	beq.n	8001f70 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f60:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f68:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68da      	ldr	r2, [r3, #12]
 8001f76:	4b48      	ldr	r3, [pc, #288]	@ (8002098 <HAL_ADC_Init+0x304>)
 8001f78:	4013      	ands	r3, r2
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	6812      	ldr	r2, [r2, #0]
 8001f7e:	69b9      	ldr	r1, [r7, #24]
 8001f80:	430b      	orrs	r3, r1
 8001f82:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	430a      	orrs	r2, r1
 8001f98:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff fee4 	bl	8001d6c <LL_ADC_INJ_IsConversionOngoing>
 8001fa4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d17f      	bne.n	80020ac <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d17c      	bne.n	80020ac <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001fb6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001fbe:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001fce:	f023 0302 	bic.w	r3, r3, #2
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	6812      	ldr	r2, [r2, #0]
 8001fd6:	69b9      	ldr	r1, [r7, #24]
 8001fd8:	430b      	orrs	r3, r1
 8001fda:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	691b      	ldr	r3, [r3, #16]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d017      	beq.n	8002014 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	691a      	ldr	r2, [r3, #16]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001ff2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001ffc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002000:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	6911      	ldr	r1, [r2, #16]
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	6812      	ldr	r2, [r2, #0]
 800200c:	430b      	orrs	r3, r1
 800200e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002012:	e013      	b.n	800203c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	691a      	ldr	r2, [r3, #16]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002022:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	6812      	ldr	r2, [r2, #0]
 8002030:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002034:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002038:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002042:	2b01      	cmp	r3, #1
 8002044:	d12a      	bne.n	800209c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	691b      	ldr	r3, [r3, #16]
 800204c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002050:	f023 0304 	bic.w	r3, r3, #4
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800205c:	4311      	orrs	r1, r2
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002062:	4311      	orrs	r1, r2
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002068:	430a      	orrs	r2, r1
 800206a:	431a      	orrs	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f042 0201 	orr.w	r2, r2, #1
 8002074:	611a      	str	r2, [r3, #16]
 8002076:	e019      	b.n	80020ac <HAL_ADC_Init+0x318>
 8002078:	20000000 	.word	0x20000000
 800207c:	053e2d63 	.word	0x053e2d63
 8002080:	50000100 	.word	0x50000100
 8002084:	50000400 	.word	0x50000400
 8002088:	50000500 	.word	0x50000500
 800208c:	50000600 	.word	0x50000600
 8002090:	50000300 	.word	0x50000300
 8002094:	50000700 	.word	0x50000700
 8002098:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	691a      	ldr	r2, [r3, #16]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f022 0201 	bic.w	r2, r2, #1
 80020aa:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	695b      	ldr	r3, [r3, #20]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d10c      	bne.n	80020ce <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ba:	f023 010f 	bic.w	r1, r3, #15
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a1b      	ldr	r3, [r3, #32]
 80020c2:	1e5a      	subs	r2, r3, #1
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	430a      	orrs	r2, r1
 80020ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80020cc:	e007      	b.n	80020de <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f022 020f 	bic.w	r2, r2, #15
 80020dc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020e2:	f023 0303 	bic.w	r3, r3, #3
 80020e6:	f043 0201 	orr.w	r2, r3, #1
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	65da      	str	r2, [r3, #92]	@ 0x5c
 80020ee:	e007      	b.n	8002100 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020f4:	f043 0210 	orr.w	r2, r3, #16
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002100:	7ffb      	ldrb	r3, [r7, #31]
}
 8002102:	4618      	mov	r0, r3
 8002104:	3724      	adds	r7, #36	@ 0x24
 8002106:	46bd      	mov	sp, r7
 8002108:	bd90      	pop	{r4, r7, pc}
 800210a:	bf00      	nop

0800210c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b0b6      	sub	sp, #216	@ 0xd8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002116:	2300      	movs	r3, #0
 8002118:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800211c:	2300      	movs	r3, #0
 800211e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002126:	2b01      	cmp	r3, #1
 8002128:	d102      	bne.n	8002130 <HAL_ADC_ConfigChannel+0x24>
 800212a:	2302      	movs	r3, #2
 800212c:	f000 bc13 	b.w	8002956 <HAL_ADC_ConfigChannel+0x84a>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff fe02 	bl	8001d46 <LL_ADC_REG_IsConversionOngoing>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	f040 83f3 	bne.w	8002930 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6818      	ldr	r0, [r3, #0]
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	6859      	ldr	r1, [r3, #4]
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	461a      	mov	r2, r3
 8002158:	f7ff fd18 	bl	8001b8c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff fdf0 	bl	8001d46 <LL_ADC_REG_IsConversionOngoing>
 8002166:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff fdfc 	bl	8001d6c <LL_ADC_INJ_IsConversionOngoing>
 8002174:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002178:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800217c:	2b00      	cmp	r3, #0
 800217e:	f040 81d9 	bne.w	8002534 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002182:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002186:	2b00      	cmp	r3, #0
 8002188:	f040 81d4 	bne.w	8002534 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002194:	d10f      	bne.n	80021b6 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6818      	ldr	r0, [r3, #0]
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2200      	movs	r2, #0
 80021a0:	4619      	mov	r1, r3
 80021a2:	f7ff fd1f 	bl	8001be4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7ff fcd9 	bl	8001b66 <LL_ADC_SetSamplingTimeCommonConfig>
 80021b4:	e00e      	b.n	80021d4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6818      	ldr	r0, [r3, #0]
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	6819      	ldr	r1, [r3, #0]
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	461a      	mov	r2, r3
 80021c4:	f7ff fd0e 	bl	8001be4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2100      	movs	r1, #0
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7ff fcc9 	bl	8001b66 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	695a      	ldr	r2, [r3, #20]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	08db      	lsrs	r3, r3, #3
 80021e0:	f003 0303 	and.w	r3, r3, #3
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	2b04      	cmp	r3, #4
 80021f4:	d022      	beq.n	800223c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6818      	ldr	r0, [r3, #0]
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	6919      	ldr	r1, [r3, #16]
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002206:	f7ff fc23 	bl	8001a50 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6818      	ldr	r0, [r3, #0]
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	6919      	ldr	r1, [r3, #16]
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	461a      	mov	r2, r3
 8002218:	f7ff fc6f 	bl	8001afa <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6818      	ldr	r0, [r3, #0]
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002228:	2b01      	cmp	r3, #1
 800222a:	d102      	bne.n	8002232 <HAL_ADC_ConfigChannel+0x126>
 800222c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002230:	e000      	b.n	8002234 <HAL_ADC_ConfigChannel+0x128>
 8002232:	2300      	movs	r3, #0
 8002234:	461a      	mov	r2, r3
 8002236:	f7ff fc7b 	bl	8001b30 <LL_ADC_SetOffsetSaturation>
 800223a:	e17b      	b.n	8002534 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2100      	movs	r1, #0
 8002242:	4618      	mov	r0, r3
 8002244:	f7ff fc28 	bl	8001a98 <LL_ADC_GetOffsetChannel>
 8002248:	4603      	mov	r3, r0
 800224a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800224e:	2b00      	cmp	r3, #0
 8002250:	d10a      	bne.n	8002268 <HAL_ADC_ConfigChannel+0x15c>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2100      	movs	r1, #0
 8002258:	4618      	mov	r0, r3
 800225a:	f7ff fc1d 	bl	8001a98 <LL_ADC_GetOffsetChannel>
 800225e:	4603      	mov	r3, r0
 8002260:	0e9b      	lsrs	r3, r3, #26
 8002262:	f003 021f 	and.w	r2, r3, #31
 8002266:	e01e      	b.n	80022a6 <HAL_ADC_ConfigChannel+0x19a>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2100      	movs	r1, #0
 800226e:	4618      	mov	r0, r3
 8002270:	f7ff fc12 	bl	8001a98 <LL_ADC_GetOffsetChannel>
 8002274:	4603      	mov	r3, r0
 8002276:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800227e:	fa93 f3a3 	rbit	r3, r3
 8002282:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002286:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800228a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800228e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d101      	bne.n	800229a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002296:	2320      	movs	r3, #32
 8002298:	e004      	b.n	80022a4 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800229a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800229e:	fab3 f383 	clz	r3, r3
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d105      	bne.n	80022be <HAL_ADC_ConfigChannel+0x1b2>
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	0e9b      	lsrs	r3, r3, #26
 80022b8:	f003 031f 	and.w	r3, r3, #31
 80022bc:	e018      	b.n	80022f0 <HAL_ADC_ConfigChannel+0x1e4>
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80022ca:	fa93 f3a3 	rbit	r3, r3
 80022ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80022d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80022d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80022da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d101      	bne.n	80022e6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80022e2:	2320      	movs	r3, #32
 80022e4:	e004      	b.n	80022f0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80022e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80022ea:	fab3 f383 	clz	r3, r3
 80022ee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d106      	bne.n	8002302 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2200      	movs	r2, #0
 80022fa:	2100      	movs	r1, #0
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff fbe1 	bl	8001ac4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2101      	movs	r1, #1
 8002308:	4618      	mov	r0, r3
 800230a:	f7ff fbc5 	bl	8001a98 <LL_ADC_GetOffsetChannel>
 800230e:	4603      	mov	r3, r0
 8002310:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002314:	2b00      	cmp	r3, #0
 8002316:	d10a      	bne.n	800232e <HAL_ADC_ConfigChannel+0x222>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2101      	movs	r1, #1
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff fbba 	bl	8001a98 <LL_ADC_GetOffsetChannel>
 8002324:	4603      	mov	r3, r0
 8002326:	0e9b      	lsrs	r3, r3, #26
 8002328:	f003 021f 	and.w	r2, r3, #31
 800232c:	e01e      	b.n	800236c <HAL_ADC_ConfigChannel+0x260>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2101      	movs	r1, #1
 8002334:	4618      	mov	r0, r3
 8002336:	f7ff fbaf 	bl	8001a98 <LL_ADC_GetOffsetChannel>
 800233a:	4603      	mov	r3, r0
 800233c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002340:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002344:	fa93 f3a3 	rbit	r3, r3
 8002348:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800234c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002350:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002354:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002358:	2b00      	cmp	r3, #0
 800235a:	d101      	bne.n	8002360 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800235c:	2320      	movs	r3, #32
 800235e:	e004      	b.n	800236a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002360:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002364:	fab3 f383 	clz	r3, r3
 8002368:	b2db      	uxtb	r3, r3
 800236a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002374:	2b00      	cmp	r3, #0
 8002376:	d105      	bne.n	8002384 <HAL_ADC_ConfigChannel+0x278>
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	0e9b      	lsrs	r3, r3, #26
 800237e:	f003 031f 	and.w	r3, r3, #31
 8002382:	e018      	b.n	80023b6 <HAL_ADC_ConfigChannel+0x2aa>
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002390:	fa93 f3a3 	rbit	r3, r3
 8002394:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002398:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800239c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80023a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d101      	bne.n	80023ac <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80023a8:	2320      	movs	r3, #32
 80023aa:	e004      	b.n	80023b6 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80023ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80023b0:	fab3 f383 	clz	r3, r3
 80023b4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d106      	bne.n	80023c8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2200      	movs	r2, #0
 80023c0:	2101      	movs	r1, #1
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7ff fb7e 	bl	8001ac4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2102      	movs	r1, #2
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7ff fb62 	bl	8001a98 <LL_ADC_GetOffsetChannel>
 80023d4:	4603      	mov	r3, r0
 80023d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d10a      	bne.n	80023f4 <HAL_ADC_ConfigChannel+0x2e8>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2102      	movs	r1, #2
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff fb57 	bl	8001a98 <LL_ADC_GetOffsetChannel>
 80023ea:	4603      	mov	r3, r0
 80023ec:	0e9b      	lsrs	r3, r3, #26
 80023ee:	f003 021f 	and.w	r2, r3, #31
 80023f2:	e01e      	b.n	8002432 <HAL_ADC_ConfigChannel+0x326>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2102      	movs	r1, #2
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7ff fb4c 	bl	8001a98 <LL_ADC_GetOffsetChannel>
 8002400:	4603      	mov	r3, r0
 8002402:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002406:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800240a:	fa93 f3a3 	rbit	r3, r3
 800240e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002412:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002416:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800241a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002422:	2320      	movs	r3, #32
 8002424:	e004      	b.n	8002430 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002426:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800242a:	fab3 f383 	clz	r3, r3
 800242e:	b2db      	uxtb	r3, r3
 8002430:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800243a:	2b00      	cmp	r3, #0
 800243c:	d105      	bne.n	800244a <HAL_ADC_ConfigChannel+0x33e>
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	0e9b      	lsrs	r3, r3, #26
 8002444:	f003 031f 	and.w	r3, r3, #31
 8002448:	e016      	b.n	8002478 <HAL_ADC_ConfigChannel+0x36c>
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002452:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002456:	fa93 f3a3 	rbit	r3, r3
 800245a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800245c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800245e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002462:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800246a:	2320      	movs	r3, #32
 800246c:	e004      	b.n	8002478 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800246e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002472:	fab3 f383 	clz	r3, r3
 8002476:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002478:	429a      	cmp	r2, r3
 800247a:	d106      	bne.n	800248a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2200      	movs	r2, #0
 8002482:	2102      	movs	r1, #2
 8002484:	4618      	mov	r0, r3
 8002486:	f7ff fb1d 	bl	8001ac4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2103      	movs	r1, #3
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff fb01 	bl	8001a98 <LL_ADC_GetOffsetChannel>
 8002496:	4603      	mov	r3, r0
 8002498:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800249c:	2b00      	cmp	r3, #0
 800249e:	d10a      	bne.n	80024b6 <HAL_ADC_ConfigChannel+0x3aa>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2103      	movs	r1, #3
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7ff faf6 	bl	8001a98 <LL_ADC_GetOffsetChannel>
 80024ac:	4603      	mov	r3, r0
 80024ae:	0e9b      	lsrs	r3, r3, #26
 80024b0:	f003 021f 	and.w	r2, r3, #31
 80024b4:	e017      	b.n	80024e6 <HAL_ADC_ConfigChannel+0x3da>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2103      	movs	r1, #3
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff faeb 	bl	8001a98 <LL_ADC_GetOffsetChannel>
 80024c2:	4603      	mov	r3, r0
 80024c4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80024c8:	fa93 f3a3 	rbit	r3, r3
 80024cc:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80024ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80024d0:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80024d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d101      	bne.n	80024dc <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80024d8:	2320      	movs	r3, #32
 80024da:	e003      	b.n	80024e4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80024dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80024de:	fab3 f383 	clz	r3, r3
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d105      	bne.n	80024fe <HAL_ADC_ConfigChannel+0x3f2>
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	0e9b      	lsrs	r3, r3, #26
 80024f8:	f003 031f 	and.w	r3, r3, #31
 80024fc:	e011      	b.n	8002522 <HAL_ADC_ConfigChannel+0x416>
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002504:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002506:	fa93 f3a3 	rbit	r3, r3
 800250a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800250c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800250e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002510:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002516:	2320      	movs	r3, #32
 8002518:	e003      	b.n	8002522 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800251a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800251c:	fab3 f383 	clz	r3, r3
 8002520:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002522:	429a      	cmp	r2, r3
 8002524:	d106      	bne.n	8002534 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2200      	movs	r2, #0
 800252c:	2103      	movs	r1, #3
 800252e:	4618      	mov	r0, r3
 8002530:	f7ff fac8 	bl	8001ac4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4618      	mov	r0, r3
 800253a:	f7ff fbf1 	bl	8001d20 <LL_ADC_IsEnabled>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	f040 813d 	bne.w	80027c0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6818      	ldr	r0, [r3, #0]
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	6819      	ldr	r1, [r3, #0]
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	461a      	mov	r2, r3
 8002554:	f7ff fb72 	bl	8001c3c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	4aa2      	ldr	r2, [pc, #648]	@ (80027e8 <HAL_ADC_ConfigChannel+0x6dc>)
 800255e:	4293      	cmp	r3, r2
 8002560:	f040 812e 	bne.w	80027c0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002570:	2b00      	cmp	r3, #0
 8002572:	d10b      	bne.n	800258c <HAL_ADC_ConfigChannel+0x480>
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	0e9b      	lsrs	r3, r3, #26
 800257a:	3301      	adds	r3, #1
 800257c:	f003 031f 	and.w	r3, r3, #31
 8002580:	2b09      	cmp	r3, #9
 8002582:	bf94      	ite	ls
 8002584:	2301      	movls	r3, #1
 8002586:	2300      	movhi	r3, #0
 8002588:	b2db      	uxtb	r3, r3
 800258a:	e019      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x4b4>
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002592:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002594:	fa93 f3a3 	rbit	r3, r3
 8002598:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800259a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800259c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800259e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d101      	bne.n	80025a8 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80025a4:	2320      	movs	r3, #32
 80025a6:	e003      	b.n	80025b0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80025a8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80025aa:	fab3 f383 	clz	r3, r3
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	3301      	adds	r3, #1
 80025b2:	f003 031f 	and.w	r3, r3, #31
 80025b6:	2b09      	cmp	r3, #9
 80025b8:	bf94      	ite	ls
 80025ba:	2301      	movls	r3, #1
 80025bc:	2300      	movhi	r3, #0
 80025be:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d079      	beq.n	80026b8 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d107      	bne.n	80025e0 <HAL_ADC_ConfigChannel+0x4d4>
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	0e9b      	lsrs	r3, r3, #26
 80025d6:	3301      	adds	r3, #1
 80025d8:	069b      	lsls	r3, r3, #26
 80025da:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025de:	e015      	b.n	800260c <HAL_ADC_ConfigChannel+0x500>
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80025e8:	fa93 f3a3 	rbit	r3, r3
 80025ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80025ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80025f0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80025f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d101      	bne.n	80025fc <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80025f8:	2320      	movs	r3, #32
 80025fa:	e003      	b.n	8002604 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80025fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025fe:	fab3 f383 	clz	r3, r3
 8002602:	b2db      	uxtb	r3, r3
 8002604:	3301      	adds	r3, #1
 8002606:	069b      	lsls	r3, r3, #26
 8002608:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002614:	2b00      	cmp	r3, #0
 8002616:	d109      	bne.n	800262c <HAL_ADC_ConfigChannel+0x520>
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	0e9b      	lsrs	r3, r3, #26
 800261e:	3301      	adds	r3, #1
 8002620:	f003 031f 	and.w	r3, r3, #31
 8002624:	2101      	movs	r1, #1
 8002626:	fa01 f303 	lsl.w	r3, r1, r3
 800262a:	e017      	b.n	800265c <HAL_ADC_ConfigChannel+0x550>
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002632:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002634:	fa93 f3a3 	rbit	r3, r3
 8002638:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800263a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800263c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800263e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002640:	2b00      	cmp	r3, #0
 8002642:	d101      	bne.n	8002648 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002644:	2320      	movs	r3, #32
 8002646:	e003      	b.n	8002650 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002648:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800264a:	fab3 f383 	clz	r3, r3
 800264e:	b2db      	uxtb	r3, r3
 8002650:	3301      	adds	r3, #1
 8002652:	f003 031f 	and.w	r3, r3, #31
 8002656:	2101      	movs	r1, #1
 8002658:	fa01 f303 	lsl.w	r3, r1, r3
 800265c:	ea42 0103 	orr.w	r1, r2, r3
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002668:	2b00      	cmp	r3, #0
 800266a:	d10a      	bne.n	8002682 <HAL_ADC_ConfigChannel+0x576>
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	0e9b      	lsrs	r3, r3, #26
 8002672:	3301      	adds	r3, #1
 8002674:	f003 021f 	and.w	r2, r3, #31
 8002678:	4613      	mov	r3, r2
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	4413      	add	r3, r2
 800267e:	051b      	lsls	r3, r3, #20
 8002680:	e018      	b.n	80026b4 <HAL_ADC_ConfigChannel+0x5a8>
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800268a:	fa93 f3a3 	rbit	r3, r3
 800268e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002692:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002694:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800269a:	2320      	movs	r3, #32
 800269c:	e003      	b.n	80026a6 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800269e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026a0:	fab3 f383 	clz	r3, r3
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	3301      	adds	r3, #1
 80026a8:	f003 021f 	and.w	r2, r3, #31
 80026ac:	4613      	mov	r3, r2
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	4413      	add	r3, r2
 80026b2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026b4:	430b      	orrs	r3, r1
 80026b6:	e07e      	b.n	80027b6 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d107      	bne.n	80026d4 <HAL_ADC_ConfigChannel+0x5c8>
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	0e9b      	lsrs	r3, r3, #26
 80026ca:	3301      	adds	r3, #1
 80026cc:	069b      	lsls	r3, r3, #26
 80026ce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80026d2:	e015      	b.n	8002700 <HAL_ADC_ConfigChannel+0x5f4>
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026dc:	fa93 f3a3 	rbit	r3, r3
 80026e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80026e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026e4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80026e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d101      	bne.n	80026f0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80026ec:	2320      	movs	r3, #32
 80026ee:	e003      	b.n	80026f8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80026f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026f2:	fab3 f383 	clz	r3, r3
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	3301      	adds	r3, #1
 80026fa:	069b      	lsls	r3, r3, #26
 80026fc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002708:	2b00      	cmp	r3, #0
 800270a:	d109      	bne.n	8002720 <HAL_ADC_ConfigChannel+0x614>
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	0e9b      	lsrs	r3, r3, #26
 8002712:	3301      	adds	r3, #1
 8002714:	f003 031f 	and.w	r3, r3, #31
 8002718:	2101      	movs	r1, #1
 800271a:	fa01 f303 	lsl.w	r3, r1, r3
 800271e:	e017      	b.n	8002750 <HAL_ADC_ConfigChannel+0x644>
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002726:	6a3b      	ldr	r3, [r7, #32]
 8002728:	fa93 f3a3 	rbit	r3, r3
 800272c:	61fb      	str	r3, [r7, #28]
  return result;
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002734:	2b00      	cmp	r3, #0
 8002736:	d101      	bne.n	800273c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002738:	2320      	movs	r3, #32
 800273a:	e003      	b.n	8002744 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800273c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273e:	fab3 f383 	clz	r3, r3
 8002742:	b2db      	uxtb	r3, r3
 8002744:	3301      	adds	r3, #1
 8002746:	f003 031f 	and.w	r3, r3, #31
 800274a:	2101      	movs	r1, #1
 800274c:	fa01 f303 	lsl.w	r3, r1, r3
 8002750:	ea42 0103 	orr.w	r1, r2, r3
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800275c:	2b00      	cmp	r3, #0
 800275e:	d10d      	bne.n	800277c <HAL_ADC_ConfigChannel+0x670>
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	0e9b      	lsrs	r3, r3, #26
 8002766:	3301      	adds	r3, #1
 8002768:	f003 021f 	and.w	r2, r3, #31
 800276c:	4613      	mov	r3, r2
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	4413      	add	r3, r2
 8002772:	3b1e      	subs	r3, #30
 8002774:	051b      	lsls	r3, r3, #20
 8002776:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800277a:	e01b      	b.n	80027b4 <HAL_ADC_ConfigChannel+0x6a8>
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	fa93 f3a3 	rbit	r3, r3
 8002788:	613b      	str	r3, [r7, #16]
  return result;
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d101      	bne.n	8002798 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002794:	2320      	movs	r3, #32
 8002796:	e003      	b.n	80027a0 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	fab3 f383 	clz	r3, r3
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	3301      	adds	r3, #1
 80027a2:	f003 021f 	and.w	r2, r3, #31
 80027a6:	4613      	mov	r3, r2
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	4413      	add	r3, r2
 80027ac:	3b1e      	subs	r3, #30
 80027ae:	051b      	lsls	r3, r3, #20
 80027b0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027b4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80027b6:	683a      	ldr	r2, [r7, #0]
 80027b8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027ba:	4619      	mov	r1, r3
 80027bc:	f7ff fa12 	bl	8001be4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	4b09      	ldr	r3, [pc, #36]	@ (80027ec <HAL_ADC_ConfigChannel+0x6e0>)
 80027c6:	4013      	ands	r3, r2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	f000 80be 	beq.w	800294a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80027d6:	d004      	beq.n	80027e2 <HAL_ADC_ConfigChannel+0x6d6>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a04      	ldr	r2, [pc, #16]	@ (80027f0 <HAL_ADC_ConfigChannel+0x6e4>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d10a      	bne.n	80027f8 <HAL_ADC_ConfigChannel+0x6ec>
 80027e2:	4b04      	ldr	r3, [pc, #16]	@ (80027f4 <HAL_ADC_ConfigChannel+0x6e8>)
 80027e4:	e009      	b.n	80027fa <HAL_ADC_ConfigChannel+0x6ee>
 80027e6:	bf00      	nop
 80027e8:	407f0000 	.word	0x407f0000
 80027ec:	80080000 	.word	0x80080000
 80027f0:	50000100 	.word	0x50000100
 80027f4:	50000300 	.word	0x50000300
 80027f8:	4b59      	ldr	r3, [pc, #356]	@ (8002960 <HAL_ADC_ConfigChannel+0x854>)
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7ff f91a 	bl	8001a34 <LL_ADC_GetCommonPathInternalCh>
 8002800:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a56      	ldr	r2, [pc, #344]	@ (8002964 <HAL_ADC_ConfigChannel+0x858>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d004      	beq.n	8002818 <HAL_ADC_ConfigChannel+0x70c>
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a55      	ldr	r2, [pc, #340]	@ (8002968 <HAL_ADC_ConfigChannel+0x85c>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d13a      	bne.n	800288e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002818:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800281c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d134      	bne.n	800288e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800282c:	d005      	beq.n	800283a <HAL_ADC_ConfigChannel+0x72e>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a4e      	ldr	r2, [pc, #312]	@ (800296c <HAL_ADC_ConfigChannel+0x860>)
 8002834:	4293      	cmp	r3, r2
 8002836:	f040 8085 	bne.w	8002944 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002842:	d004      	beq.n	800284e <HAL_ADC_ConfigChannel+0x742>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a49      	ldr	r2, [pc, #292]	@ (8002970 <HAL_ADC_ConfigChannel+0x864>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d101      	bne.n	8002852 <HAL_ADC_ConfigChannel+0x746>
 800284e:	4a49      	ldr	r2, [pc, #292]	@ (8002974 <HAL_ADC_ConfigChannel+0x868>)
 8002850:	e000      	b.n	8002854 <HAL_ADC_ConfigChannel+0x748>
 8002852:	4a43      	ldr	r2, [pc, #268]	@ (8002960 <HAL_ADC_ConfigChannel+0x854>)
 8002854:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002858:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800285c:	4619      	mov	r1, r3
 800285e:	4610      	mov	r0, r2
 8002860:	f7ff f8d5 	bl	8001a0e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002864:	4b44      	ldr	r3, [pc, #272]	@ (8002978 <HAL_ADC_ConfigChannel+0x86c>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	099b      	lsrs	r3, r3, #6
 800286a:	4a44      	ldr	r2, [pc, #272]	@ (800297c <HAL_ADC_ConfigChannel+0x870>)
 800286c:	fba2 2303 	umull	r2, r3, r2, r3
 8002870:	099b      	lsrs	r3, r3, #6
 8002872:	1c5a      	adds	r2, r3, #1
 8002874:	4613      	mov	r3, r2
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	4413      	add	r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800287e:	e002      	b.n	8002886 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	3b01      	subs	r3, #1
 8002884:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1f9      	bne.n	8002880 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800288c:	e05a      	b.n	8002944 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a3b      	ldr	r2, [pc, #236]	@ (8002980 <HAL_ADC_ConfigChannel+0x874>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d125      	bne.n	80028e4 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002898:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800289c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d11f      	bne.n	80028e4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a31      	ldr	r2, [pc, #196]	@ (8002970 <HAL_ADC_ConfigChannel+0x864>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d104      	bne.n	80028b8 <HAL_ADC_ConfigChannel+0x7ac>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a34      	ldr	r2, [pc, #208]	@ (8002984 <HAL_ADC_ConfigChannel+0x878>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d047      	beq.n	8002948 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028c0:	d004      	beq.n	80028cc <HAL_ADC_ConfigChannel+0x7c0>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a2a      	ldr	r2, [pc, #168]	@ (8002970 <HAL_ADC_ConfigChannel+0x864>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d101      	bne.n	80028d0 <HAL_ADC_ConfigChannel+0x7c4>
 80028cc:	4a29      	ldr	r2, [pc, #164]	@ (8002974 <HAL_ADC_ConfigChannel+0x868>)
 80028ce:	e000      	b.n	80028d2 <HAL_ADC_ConfigChannel+0x7c6>
 80028d0:	4a23      	ldr	r2, [pc, #140]	@ (8002960 <HAL_ADC_ConfigChannel+0x854>)
 80028d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80028d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028da:	4619      	mov	r1, r3
 80028dc:	4610      	mov	r0, r2
 80028de:	f7ff f896 	bl	8001a0e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028e2:	e031      	b.n	8002948 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a27      	ldr	r2, [pc, #156]	@ (8002988 <HAL_ADC_ConfigChannel+0x87c>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d12d      	bne.n	800294a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80028ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80028f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d127      	bne.n	800294a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a1c      	ldr	r2, [pc, #112]	@ (8002970 <HAL_ADC_ConfigChannel+0x864>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d022      	beq.n	800294a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800290c:	d004      	beq.n	8002918 <HAL_ADC_ConfigChannel+0x80c>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a17      	ldr	r2, [pc, #92]	@ (8002970 <HAL_ADC_ConfigChannel+0x864>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d101      	bne.n	800291c <HAL_ADC_ConfigChannel+0x810>
 8002918:	4a16      	ldr	r2, [pc, #88]	@ (8002974 <HAL_ADC_ConfigChannel+0x868>)
 800291a:	e000      	b.n	800291e <HAL_ADC_ConfigChannel+0x812>
 800291c:	4a10      	ldr	r2, [pc, #64]	@ (8002960 <HAL_ADC_ConfigChannel+0x854>)
 800291e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002922:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002926:	4619      	mov	r1, r3
 8002928:	4610      	mov	r0, r2
 800292a:	f7ff f870 	bl	8001a0e <LL_ADC_SetCommonPathInternalCh>
 800292e:	e00c      	b.n	800294a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002934:	f043 0220 	orr.w	r2, r3, #32
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002942:	e002      	b.n	800294a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002944:	bf00      	nop
 8002946:	e000      	b.n	800294a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002948:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002952:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002956:	4618      	mov	r0, r3
 8002958:	37d8      	adds	r7, #216	@ 0xd8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	50000700 	.word	0x50000700
 8002964:	c3210000 	.word	0xc3210000
 8002968:	90c00010 	.word	0x90c00010
 800296c:	50000600 	.word	0x50000600
 8002970:	50000100 	.word	0x50000100
 8002974:	50000300 	.word	0x50000300
 8002978:	20000000 	.word	0x20000000
 800297c:	053e2d63 	.word	0x053e2d63
 8002980:	c7520000 	.word	0xc7520000
 8002984:	50000500 	.word	0x50000500
 8002988:	cb840000 	.word	0xcb840000

0800298c <LL_ADC_IsEnabled>:
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f003 0301 	and.w	r3, r3, #1
 800299c:	2b01      	cmp	r3, #1
 800299e:	d101      	bne.n	80029a4 <LL_ADC_IsEnabled+0x18>
 80029a0:	2301      	movs	r3, #1
 80029a2:	e000      	b.n	80029a6 <LL_ADC_IsEnabled+0x1a>
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr

080029b2 <LL_ADC_REG_IsConversionOngoing>:
{
 80029b2:	b480      	push	{r7}
 80029b4:	b083      	sub	sp, #12
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f003 0304 	and.w	r3, r3, #4
 80029c2:	2b04      	cmp	r3, #4
 80029c4:	d101      	bne.n	80029ca <LL_ADC_REG_IsConversionOngoing+0x18>
 80029c6:	2301      	movs	r3, #1
 80029c8:	e000      	b.n	80029cc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80029ca:	2300      	movs	r3, #0
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80029d8:	b590      	push	{r4, r7, lr}
 80029da:	b0a1      	sub	sp, #132	@ 0x84
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029e2:	2300      	movs	r3, #0
 80029e4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d101      	bne.n	80029f6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80029f2:	2302      	movs	r3, #2
 80029f4:	e0e7      	b.n	8002bc6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80029fe:	2300      	movs	r3, #0
 8002a00:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002a02:	2300      	movs	r3, #0
 8002a04:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a0e:	d102      	bne.n	8002a16 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002a10:	4b6f      	ldr	r3, [pc, #444]	@ (8002bd0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002a12:	60bb      	str	r3, [r7, #8]
 8002a14:	e009      	b.n	8002a2a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a6e      	ldr	r2, [pc, #440]	@ (8002bd4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d102      	bne.n	8002a26 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002a20:	4b6d      	ldr	r3, [pc, #436]	@ (8002bd8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002a22:	60bb      	str	r3, [r7, #8]
 8002a24:	e001      	b.n	8002a2a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002a26:	2300      	movs	r3, #0
 8002a28:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d10b      	bne.n	8002a48 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a34:	f043 0220 	orr.w	r2, r3, #32
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e0be      	b.n	8002bc6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff ffb1 	bl	80029b2 <LL_ADC_REG_IsConversionOngoing>
 8002a50:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7ff ffab 	bl	80029b2 <LL_ADC_REG_IsConversionOngoing>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	f040 80a0 	bne.w	8002ba4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002a64:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	f040 809c 	bne.w	8002ba4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a74:	d004      	beq.n	8002a80 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a55      	ldr	r2, [pc, #340]	@ (8002bd0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d101      	bne.n	8002a84 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002a80:	4b56      	ldr	r3, [pc, #344]	@ (8002bdc <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002a82:	e000      	b.n	8002a86 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002a84:	4b56      	ldr	r3, [pc, #344]	@ (8002be0 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002a86:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d04b      	beq.n	8002b28 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002a90:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	6859      	ldr	r1, [r3, #4]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002aa2:	035b      	lsls	r3, r3, #13
 8002aa4:	430b      	orrs	r3, r1
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002aaa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ab4:	d004      	beq.n	8002ac0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a45      	ldr	r2, [pc, #276]	@ (8002bd0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d10f      	bne.n	8002ae0 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002ac0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002ac4:	f7ff ff62 	bl	800298c <LL_ADC_IsEnabled>
 8002ac8:	4604      	mov	r4, r0
 8002aca:	4841      	ldr	r0, [pc, #260]	@ (8002bd0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002acc:	f7ff ff5e 	bl	800298c <LL_ADC_IsEnabled>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	4323      	orrs	r3, r4
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	bf0c      	ite	eq
 8002ad8:	2301      	moveq	r3, #1
 8002ada:	2300      	movne	r3, #0
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	e012      	b.n	8002b06 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002ae0:	483c      	ldr	r0, [pc, #240]	@ (8002bd4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002ae2:	f7ff ff53 	bl	800298c <LL_ADC_IsEnabled>
 8002ae6:	4604      	mov	r4, r0
 8002ae8:	483b      	ldr	r0, [pc, #236]	@ (8002bd8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002aea:	f7ff ff4f 	bl	800298c <LL_ADC_IsEnabled>
 8002aee:	4603      	mov	r3, r0
 8002af0:	431c      	orrs	r4, r3
 8002af2:	483c      	ldr	r0, [pc, #240]	@ (8002be4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002af4:	f7ff ff4a 	bl	800298c <LL_ADC_IsEnabled>
 8002af8:	4603      	mov	r3, r0
 8002afa:	4323      	orrs	r3, r4
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	bf0c      	ite	eq
 8002b00:	2301      	moveq	r3, #1
 8002b02:	2300      	movne	r3, #0
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d056      	beq.n	8002bb8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002b0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002b12:	f023 030f 	bic.w	r3, r3, #15
 8002b16:	683a      	ldr	r2, [r7, #0]
 8002b18:	6811      	ldr	r1, [r2, #0]
 8002b1a:	683a      	ldr	r2, [r7, #0]
 8002b1c:	6892      	ldr	r2, [r2, #8]
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	431a      	orrs	r2, r3
 8002b22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b24:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002b26:	e047      	b.n	8002bb8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002b28:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b30:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b32:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b3c:	d004      	beq.n	8002b48 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a23      	ldr	r2, [pc, #140]	@ (8002bd0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d10f      	bne.n	8002b68 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002b48:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002b4c:	f7ff ff1e 	bl	800298c <LL_ADC_IsEnabled>
 8002b50:	4604      	mov	r4, r0
 8002b52:	481f      	ldr	r0, [pc, #124]	@ (8002bd0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002b54:	f7ff ff1a 	bl	800298c <LL_ADC_IsEnabled>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	4323      	orrs	r3, r4
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	bf0c      	ite	eq
 8002b60:	2301      	moveq	r3, #1
 8002b62:	2300      	movne	r3, #0
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	e012      	b.n	8002b8e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002b68:	481a      	ldr	r0, [pc, #104]	@ (8002bd4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002b6a:	f7ff ff0f 	bl	800298c <LL_ADC_IsEnabled>
 8002b6e:	4604      	mov	r4, r0
 8002b70:	4819      	ldr	r0, [pc, #100]	@ (8002bd8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002b72:	f7ff ff0b 	bl	800298c <LL_ADC_IsEnabled>
 8002b76:	4603      	mov	r3, r0
 8002b78:	431c      	orrs	r4, r3
 8002b7a:	481a      	ldr	r0, [pc, #104]	@ (8002be4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002b7c:	f7ff ff06 	bl	800298c <LL_ADC_IsEnabled>
 8002b80:	4603      	mov	r3, r0
 8002b82:	4323      	orrs	r3, r4
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	bf0c      	ite	eq
 8002b88:	2301      	moveq	r3, #1
 8002b8a:	2300      	movne	r3, #0
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d012      	beq.n	8002bb8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002b92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002b9a:	f023 030f 	bic.w	r3, r3, #15
 8002b9e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002ba0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002ba2:	e009      	b.n	8002bb8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ba8:	f043 0220 	orr.w	r2, r3, #32
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002bb6:	e000      	b.n	8002bba <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002bb8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002bc2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3784      	adds	r7, #132	@ 0x84
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd90      	pop	{r4, r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	50000100 	.word	0x50000100
 8002bd4:	50000400 	.word	0x50000400
 8002bd8:	50000500 	.word	0x50000500
 8002bdc:	50000300 	.word	0x50000300
 8002be0:	50000700 	.word	0x50000700
 8002be4:	50000600 	.word	0x50000600

08002be8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f003 0307 	and.w	r3, r3, #7
 8002bf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bf8:	4b0c      	ldr	r3, [pc, #48]	@ (8002c2c <__NVIC_SetPriorityGrouping+0x44>)
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bfe:	68ba      	ldr	r2, [r7, #8]
 8002c00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c04:	4013      	ands	r3, r2
 8002c06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c1a:	4a04      	ldr	r2, [pc, #16]	@ (8002c2c <__NVIC_SetPriorityGrouping+0x44>)
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	60d3      	str	r3, [r2, #12]
}
 8002c20:	bf00      	nop
 8002c22:	3714      	adds	r7, #20
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr
 8002c2c:	e000ed00 	.word	0xe000ed00

08002c30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c34:	4b04      	ldr	r3, [pc, #16]	@ (8002c48 <__NVIC_GetPriorityGrouping+0x18>)
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	0a1b      	lsrs	r3, r3, #8
 8002c3a:	f003 0307 	and.w	r3, r3, #7
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr
 8002c48:	e000ed00 	.word	0xe000ed00

08002c4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	4603      	mov	r3, r0
 8002c54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	db0b      	blt.n	8002c76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c5e:	79fb      	ldrb	r3, [r7, #7]
 8002c60:	f003 021f 	and.w	r2, r3, #31
 8002c64:	4907      	ldr	r1, [pc, #28]	@ (8002c84 <__NVIC_EnableIRQ+0x38>)
 8002c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6a:	095b      	lsrs	r3, r3, #5
 8002c6c:	2001      	movs	r0, #1
 8002c6e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c76:	bf00      	nop
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	e000e100 	.word	0xe000e100

08002c88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	4603      	mov	r3, r0
 8002c90:	6039      	str	r1, [r7, #0]
 8002c92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	db0a      	blt.n	8002cb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	b2da      	uxtb	r2, r3
 8002ca0:	490c      	ldr	r1, [pc, #48]	@ (8002cd4 <__NVIC_SetPriority+0x4c>)
 8002ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca6:	0112      	lsls	r2, r2, #4
 8002ca8:	b2d2      	uxtb	r2, r2
 8002caa:	440b      	add	r3, r1
 8002cac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cb0:	e00a      	b.n	8002cc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	b2da      	uxtb	r2, r3
 8002cb6:	4908      	ldr	r1, [pc, #32]	@ (8002cd8 <__NVIC_SetPriority+0x50>)
 8002cb8:	79fb      	ldrb	r3, [r7, #7]
 8002cba:	f003 030f 	and.w	r3, r3, #15
 8002cbe:	3b04      	subs	r3, #4
 8002cc0:	0112      	lsls	r2, r2, #4
 8002cc2:	b2d2      	uxtb	r2, r2
 8002cc4:	440b      	add	r3, r1
 8002cc6:	761a      	strb	r2, [r3, #24]
}
 8002cc8:	bf00      	nop
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr
 8002cd4:	e000e100 	.word	0xe000e100
 8002cd8:	e000ed00 	.word	0xe000ed00

08002cdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b089      	sub	sp, #36	@ 0x24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f003 0307 	and.w	r3, r3, #7
 8002cee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	f1c3 0307 	rsb	r3, r3, #7
 8002cf6:	2b04      	cmp	r3, #4
 8002cf8:	bf28      	it	cs
 8002cfa:	2304      	movcs	r3, #4
 8002cfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	3304      	adds	r3, #4
 8002d02:	2b06      	cmp	r3, #6
 8002d04:	d902      	bls.n	8002d0c <NVIC_EncodePriority+0x30>
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	3b03      	subs	r3, #3
 8002d0a:	e000      	b.n	8002d0e <NVIC_EncodePriority+0x32>
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d10:	f04f 32ff 	mov.w	r2, #4294967295
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1a:	43da      	mvns	r2, r3
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	401a      	ands	r2, r3
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d24:	f04f 31ff 	mov.w	r1, #4294967295
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d2e:	43d9      	mvns	r1, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d34:	4313      	orrs	r3, r2
         );
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3724      	adds	r7, #36	@ 0x24
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
	...

08002d44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d54:	d301      	bcc.n	8002d5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d56:	2301      	movs	r3, #1
 8002d58:	e00f      	b.n	8002d7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d5a:	4a0a      	ldr	r2, [pc, #40]	@ (8002d84 <SysTick_Config+0x40>)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d62:	210f      	movs	r1, #15
 8002d64:	f04f 30ff 	mov.w	r0, #4294967295
 8002d68:	f7ff ff8e 	bl	8002c88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d6c:	4b05      	ldr	r3, [pc, #20]	@ (8002d84 <SysTick_Config+0x40>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d72:	4b04      	ldr	r3, [pc, #16]	@ (8002d84 <SysTick_Config+0x40>)
 8002d74:	2207      	movs	r2, #7
 8002d76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3708      	adds	r7, #8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	e000e010 	.word	0xe000e010

08002d88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f7ff ff29 	bl	8002be8 <__NVIC_SetPriorityGrouping>
}
 8002d96:	bf00      	nop
 8002d98:	3708      	adds	r7, #8
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b086      	sub	sp, #24
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	4603      	mov	r3, r0
 8002da6:	60b9      	str	r1, [r7, #8]
 8002da8:	607a      	str	r2, [r7, #4]
 8002daa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002dac:	f7ff ff40 	bl	8002c30 <__NVIC_GetPriorityGrouping>
 8002db0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	68b9      	ldr	r1, [r7, #8]
 8002db6:	6978      	ldr	r0, [r7, #20]
 8002db8:	f7ff ff90 	bl	8002cdc <NVIC_EncodePriority>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dc2:	4611      	mov	r1, r2
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7ff ff5f 	bl	8002c88 <__NVIC_SetPriority>
}
 8002dca:	bf00      	nop
 8002dcc:	3718      	adds	r7, #24
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b082      	sub	sp, #8
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	4603      	mov	r3, r0
 8002dda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7ff ff33 	bl	8002c4c <__NVIC_EnableIRQ>
}
 8002de6:	bf00      	nop
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b082      	sub	sp, #8
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f7ff ffa4 	bl	8002d44 <SysTick_Config>
 8002dfc:	4603      	mov	r3, r0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
	...

08002e08 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d101      	bne.n	8002e1a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e08d      	b.n	8002f36 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	461a      	mov	r2, r3
 8002e20:	4b47      	ldr	r3, [pc, #284]	@ (8002f40 <HAL_DMA_Init+0x138>)
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d80f      	bhi.n	8002e46 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	4b45      	ldr	r3, [pc, #276]	@ (8002f44 <HAL_DMA_Init+0x13c>)
 8002e2e:	4413      	add	r3, r2
 8002e30:	4a45      	ldr	r2, [pc, #276]	@ (8002f48 <HAL_DMA_Init+0x140>)
 8002e32:	fba2 2303 	umull	r2, r3, r2, r3
 8002e36:	091b      	lsrs	r3, r3, #4
 8002e38:	009a      	lsls	r2, r3, #2
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a42      	ldr	r2, [pc, #264]	@ (8002f4c <HAL_DMA_Init+0x144>)
 8002e42:	641a      	str	r2, [r3, #64]	@ 0x40
 8002e44:	e00e      	b.n	8002e64 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	4b40      	ldr	r3, [pc, #256]	@ (8002f50 <HAL_DMA_Init+0x148>)
 8002e4e:	4413      	add	r3, r2
 8002e50:	4a3d      	ldr	r2, [pc, #244]	@ (8002f48 <HAL_DMA_Init+0x140>)
 8002e52:	fba2 2303 	umull	r2, r3, r2, r3
 8002e56:	091b      	lsrs	r3, r3, #4
 8002e58:	009a      	lsls	r2, r3, #2
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a3c      	ldr	r2, [pc, #240]	@ (8002f54 <HAL_DMA_Init+0x14c>)
 8002e62:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2202      	movs	r2, #2
 8002e68:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002e7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e7e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002e88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ea0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
 8002ea6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002ea8:	68fa      	ldr	r2, [r7, #12]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 f9b6 	bl	8003228 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ec4:	d102      	bne.n	8002ecc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685a      	ldr	r2, [r3, #4]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ed4:	b2d2      	uxtb	r2, r2
 8002ed6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002ee0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d010      	beq.n	8002f0c <HAL_DMA_Init+0x104>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	2b04      	cmp	r3, #4
 8002ef0:	d80c      	bhi.n	8002f0c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 f9d6 	bl	80032a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002efc:	2200      	movs	r2, #0
 8002efe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002f08:	605a      	str	r2, [r3, #4]
 8002f0a:	e008      	b.n	8002f1e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3710      	adds	r7, #16
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	40020407 	.word	0x40020407
 8002f44:	bffdfff8 	.word	0xbffdfff8
 8002f48:	cccccccd 	.word	0xcccccccd
 8002f4c:	40020000 	.word	0x40020000
 8002f50:	bffdfbf8 	.word	0xbffdfbf8
 8002f54:	40020400 	.word	0x40020400

08002f58 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b086      	sub	sp, #24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	607a      	str	r2, [r7, #4]
 8002f64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f66:	2300      	movs	r3, #0
 8002f68:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d101      	bne.n	8002f78 <HAL_DMA_Start_IT+0x20>
 8002f74:	2302      	movs	r3, #2
 8002f76:	e066      	b.n	8003046 <HAL_DMA_Start_IT+0xee>
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d155      	bne.n	8003038 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2202      	movs	r2, #2
 8002f90:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2200      	movs	r2, #0
 8002f98:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f022 0201 	bic.w	r2, r2, #1
 8002fa8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	68b9      	ldr	r1, [r7, #8]
 8002fb0:	68f8      	ldr	r0, [r7, #12]
 8002fb2:	f000 f8fb 	bl	80031ac <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d008      	beq.n	8002fd0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f042 020e 	orr.w	r2, r2, #14
 8002fcc:	601a      	str	r2, [r3, #0]
 8002fce:	e00f      	b.n	8002ff0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f022 0204 	bic.w	r2, r2, #4
 8002fde:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f042 020a 	orr.w	r2, r2, #10
 8002fee:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d007      	beq.n	800300e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003008:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800300c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003012:	2b00      	cmp	r3, #0
 8003014:	d007      	beq.n	8003026 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003020:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003024:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f042 0201 	orr.w	r2, r2, #1
 8003034:	601a      	str	r2, [r3, #0]
 8003036:	e005      	b.n	8003044 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003040:	2302      	movs	r3, #2
 8003042:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003044:	7dfb      	ldrb	r3, [r7, #23]
}
 8003046:	4618      	mov	r0, r3
 8003048:	3718      	adds	r7, #24
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}

0800304e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800304e:	b580      	push	{r7, lr}
 8003050:	b084      	sub	sp, #16
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800306a:	f003 031f 	and.w	r3, r3, #31
 800306e:	2204      	movs	r2, #4
 8003070:	409a      	lsls	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	4013      	ands	r3, r2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d026      	beq.n	80030c8 <HAL_DMA_IRQHandler+0x7a>
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	f003 0304 	and.w	r3, r3, #4
 8003080:	2b00      	cmp	r3, #0
 8003082:	d021      	beq.n	80030c8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0320 	and.w	r3, r3, #32
 800308e:	2b00      	cmp	r3, #0
 8003090:	d107      	bne.n	80030a2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f022 0204 	bic.w	r2, r2, #4
 80030a0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030a6:	f003 021f 	and.w	r2, r3, #31
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ae:	2104      	movs	r1, #4
 80030b0:	fa01 f202 	lsl.w	r2, r1, r2
 80030b4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d071      	beq.n	80031a2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80030c6:	e06c      	b.n	80031a2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030cc:	f003 031f 	and.w	r3, r3, #31
 80030d0:	2202      	movs	r2, #2
 80030d2:	409a      	lsls	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	4013      	ands	r3, r2
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d02e      	beq.n	800313a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d029      	beq.n	800313a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0320 	and.w	r3, r3, #32
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d10b      	bne.n	800310c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f022 020a 	bic.w	r2, r2, #10
 8003102:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003110:	f003 021f 	and.w	r2, r3, #31
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003118:	2102      	movs	r1, #2
 800311a:	fa01 f202 	lsl.w	r2, r1, r2
 800311e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800312c:	2b00      	cmp	r3, #0
 800312e:	d038      	beq.n	80031a2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003138:	e033      	b.n	80031a2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800313e:	f003 031f 	and.w	r3, r3, #31
 8003142:	2208      	movs	r2, #8
 8003144:	409a      	lsls	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	4013      	ands	r3, r2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d02a      	beq.n	80031a4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	f003 0308 	and.w	r3, r3, #8
 8003154:	2b00      	cmp	r3, #0
 8003156:	d025      	beq.n	80031a4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f022 020e 	bic.w	r2, r2, #14
 8003166:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800316c:	f003 021f 	and.w	r2, r3, #31
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003174:	2101      	movs	r1, #1
 8003176:	fa01 f202 	lsl.w	r2, r1, r2
 800317a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2201      	movs	r2, #1
 8003186:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003196:	2b00      	cmp	r3, #0
 8003198:	d004      	beq.n	80031a4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80031a2:	bf00      	nop
 80031a4:	bf00      	nop
}
 80031a6:	3710      	adds	r7, #16
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]
 80031b8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80031c2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d004      	beq.n	80031d6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031d0:	68fa      	ldr	r2, [r7, #12]
 80031d2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80031d4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031da:	f003 021f 	and.w	r2, r3, #31
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e2:	2101      	movs	r1, #1
 80031e4:	fa01 f202 	lsl.w	r2, r1, r2
 80031e8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	683a      	ldr	r2, [r7, #0]
 80031f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	2b10      	cmp	r3, #16
 80031f8:	d108      	bne.n	800320c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68ba      	ldr	r2, [r7, #8]
 8003208:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800320a:	e007      	b.n	800321c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68ba      	ldr	r2, [r7, #8]
 8003212:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	60da      	str	r2, [r3, #12]
}
 800321c:	bf00      	nop
 800321e:	3714      	adds	r7, #20
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003228:	b480      	push	{r7}
 800322a:	b087      	sub	sp, #28
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	461a      	mov	r2, r3
 8003236:	4b16      	ldr	r3, [pc, #88]	@ (8003290 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003238:	429a      	cmp	r2, r3
 800323a:	d802      	bhi.n	8003242 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800323c:	4b15      	ldr	r3, [pc, #84]	@ (8003294 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800323e:	617b      	str	r3, [r7, #20]
 8003240:	e001      	b.n	8003246 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003242:	4b15      	ldr	r3, [pc, #84]	@ (8003298 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003244:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	b2db      	uxtb	r3, r3
 8003250:	3b08      	subs	r3, #8
 8003252:	4a12      	ldr	r2, [pc, #72]	@ (800329c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003254:	fba2 2303 	umull	r2, r3, r2, r3
 8003258:	091b      	lsrs	r3, r3, #4
 800325a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003260:	089b      	lsrs	r3, r3, #2
 8003262:	009a      	lsls	r2, r3, #2
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	4413      	add	r3, r2
 8003268:	461a      	mov	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a0b      	ldr	r2, [pc, #44]	@ (80032a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003272:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f003 031f 	and.w	r3, r3, #31
 800327a:	2201      	movs	r2, #1
 800327c:	409a      	lsls	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003282:	bf00      	nop
 8003284:	371c      	adds	r7, #28
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	40020407 	.word	0x40020407
 8003294:	40020800 	.word	0x40020800
 8003298:	40020820 	.word	0x40020820
 800329c:	cccccccd 	.word	0xcccccccd
 80032a0:	40020880 	.word	0x40020880

080032a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b085      	sub	sp, #20
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80032b4:	68fa      	ldr	r2, [r7, #12]
 80032b6:	4b0b      	ldr	r3, [pc, #44]	@ (80032e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80032b8:	4413      	add	r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	461a      	mov	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a08      	ldr	r2, [pc, #32]	@ (80032e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80032c6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	3b01      	subs	r3, #1
 80032cc:	f003 031f 	and.w	r3, r3, #31
 80032d0:	2201      	movs	r2, #1
 80032d2:	409a      	lsls	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80032d8:	bf00      	nop
 80032da:	3714      	adds	r7, #20
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr
 80032e4:	1000823f 	.word	0x1000823f
 80032e8:	40020940 	.word	0x40020940

080032ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b087      	sub	sp, #28
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80032f6:	2300      	movs	r3, #0
 80032f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80032fa:	e15a      	b.n	80035b2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	2101      	movs	r1, #1
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	fa01 f303 	lsl.w	r3, r1, r3
 8003308:	4013      	ands	r3, r2
 800330a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2b00      	cmp	r3, #0
 8003310:	f000 814c 	beq.w	80035ac <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f003 0303 	and.w	r3, r3, #3
 800331c:	2b01      	cmp	r3, #1
 800331e:	d005      	beq.n	800332c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003328:	2b02      	cmp	r3, #2
 800332a:	d130      	bne.n	800338e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	2203      	movs	r2, #3
 8003338:	fa02 f303 	lsl.w	r3, r2, r3
 800333c:	43db      	mvns	r3, r3
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	4013      	ands	r3, r2
 8003342:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	68da      	ldr	r2, [r3, #12]
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	005b      	lsls	r3, r3, #1
 800334c:	fa02 f303 	lsl.w	r3, r2, r3
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	4313      	orrs	r3, r2
 8003354:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	693a      	ldr	r2, [r7, #16]
 800335a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003362:	2201      	movs	r2, #1
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	fa02 f303 	lsl.w	r3, r2, r3
 800336a:	43db      	mvns	r3, r3
 800336c:	693a      	ldr	r2, [r7, #16]
 800336e:	4013      	ands	r3, r2
 8003370:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	091b      	lsrs	r3, r3, #4
 8003378:	f003 0201 	and.w	r2, r3, #1
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	fa02 f303 	lsl.w	r3, r2, r3
 8003382:	693a      	ldr	r2, [r7, #16]
 8003384:	4313      	orrs	r3, r2
 8003386:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	693a      	ldr	r2, [r7, #16]
 800338c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f003 0303 	and.w	r3, r3, #3
 8003396:	2b03      	cmp	r3, #3
 8003398:	d017      	beq.n	80033ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	2203      	movs	r2, #3
 80033a6:	fa02 f303 	lsl.w	r3, r2, r3
 80033aa:	43db      	mvns	r3, r3
 80033ac:	693a      	ldr	r2, [r7, #16]
 80033ae:	4013      	ands	r3, r2
 80033b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	689a      	ldr	r2, [r3, #8]
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	005b      	lsls	r3, r3, #1
 80033ba:	fa02 f303 	lsl.w	r3, r2, r3
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f003 0303 	and.w	r3, r3, #3
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d123      	bne.n	800341e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	08da      	lsrs	r2, r3, #3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	3208      	adds	r2, #8
 80033de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	f003 0307 	and.w	r3, r3, #7
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	220f      	movs	r2, #15
 80033ee:	fa02 f303 	lsl.w	r3, r2, r3
 80033f2:	43db      	mvns	r3, r3
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	4013      	ands	r3, r2
 80033f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	691a      	ldr	r2, [r3, #16]
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	f003 0307 	and.w	r3, r3, #7
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	fa02 f303 	lsl.w	r3, r2, r3
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	4313      	orrs	r3, r2
 800340e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	08da      	lsrs	r2, r3, #3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	3208      	adds	r2, #8
 8003418:	6939      	ldr	r1, [r7, #16]
 800341a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	005b      	lsls	r3, r3, #1
 8003428:	2203      	movs	r2, #3
 800342a:	fa02 f303 	lsl.w	r3, r2, r3
 800342e:	43db      	mvns	r3, r3
 8003430:	693a      	ldr	r2, [r7, #16]
 8003432:	4013      	ands	r3, r2
 8003434:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f003 0203 	and.w	r2, r3, #3
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	005b      	lsls	r3, r3, #1
 8003442:	fa02 f303 	lsl.w	r3, r2, r3
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	4313      	orrs	r3, r2
 800344a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800345a:	2b00      	cmp	r3, #0
 800345c:	f000 80a6 	beq.w	80035ac <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003460:	4b5b      	ldr	r3, [pc, #364]	@ (80035d0 <HAL_GPIO_Init+0x2e4>)
 8003462:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003464:	4a5a      	ldr	r2, [pc, #360]	@ (80035d0 <HAL_GPIO_Init+0x2e4>)
 8003466:	f043 0301 	orr.w	r3, r3, #1
 800346a:	6613      	str	r3, [r2, #96]	@ 0x60
 800346c:	4b58      	ldr	r3, [pc, #352]	@ (80035d0 <HAL_GPIO_Init+0x2e4>)
 800346e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003470:	f003 0301 	and.w	r3, r3, #1
 8003474:	60bb      	str	r3, [r7, #8]
 8003476:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003478:	4a56      	ldr	r2, [pc, #344]	@ (80035d4 <HAL_GPIO_Init+0x2e8>)
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	089b      	lsrs	r3, r3, #2
 800347e:	3302      	adds	r3, #2
 8003480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003484:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	f003 0303 	and.w	r3, r3, #3
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	220f      	movs	r2, #15
 8003490:	fa02 f303 	lsl.w	r3, r2, r3
 8003494:	43db      	mvns	r3, r3
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	4013      	ands	r3, r2
 800349a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80034a2:	d01f      	beq.n	80034e4 <HAL_GPIO_Init+0x1f8>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a4c      	ldr	r2, [pc, #304]	@ (80035d8 <HAL_GPIO_Init+0x2ec>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d019      	beq.n	80034e0 <HAL_GPIO_Init+0x1f4>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a4b      	ldr	r2, [pc, #300]	@ (80035dc <HAL_GPIO_Init+0x2f0>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d013      	beq.n	80034dc <HAL_GPIO_Init+0x1f0>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4a4a      	ldr	r2, [pc, #296]	@ (80035e0 <HAL_GPIO_Init+0x2f4>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d00d      	beq.n	80034d8 <HAL_GPIO_Init+0x1ec>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a49      	ldr	r2, [pc, #292]	@ (80035e4 <HAL_GPIO_Init+0x2f8>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d007      	beq.n	80034d4 <HAL_GPIO_Init+0x1e8>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a48      	ldr	r2, [pc, #288]	@ (80035e8 <HAL_GPIO_Init+0x2fc>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d101      	bne.n	80034d0 <HAL_GPIO_Init+0x1e4>
 80034cc:	2305      	movs	r3, #5
 80034ce:	e00a      	b.n	80034e6 <HAL_GPIO_Init+0x1fa>
 80034d0:	2306      	movs	r3, #6
 80034d2:	e008      	b.n	80034e6 <HAL_GPIO_Init+0x1fa>
 80034d4:	2304      	movs	r3, #4
 80034d6:	e006      	b.n	80034e6 <HAL_GPIO_Init+0x1fa>
 80034d8:	2303      	movs	r3, #3
 80034da:	e004      	b.n	80034e6 <HAL_GPIO_Init+0x1fa>
 80034dc:	2302      	movs	r3, #2
 80034de:	e002      	b.n	80034e6 <HAL_GPIO_Init+0x1fa>
 80034e0:	2301      	movs	r3, #1
 80034e2:	e000      	b.n	80034e6 <HAL_GPIO_Init+0x1fa>
 80034e4:	2300      	movs	r3, #0
 80034e6:	697a      	ldr	r2, [r7, #20]
 80034e8:	f002 0203 	and.w	r2, r2, #3
 80034ec:	0092      	lsls	r2, r2, #2
 80034ee:	4093      	lsls	r3, r2
 80034f0:	693a      	ldr	r2, [r7, #16]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034f6:	4937      	ldr	r1, [pc, #220]	@ (80035d4 <HAL_GPIO_Init+0x2e8>)
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	089b      	lsrs	r3, r3, #2
 80034fc:	3302      	adds	r3, #2
 80034fe:	693a      	ldr	r2, [r7, #16]
 8003500:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003504:	4b39      	ldr	r3, [pc, #228]	@ (80035ec <HAL_GPIO_Init+0x300>)
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	43db      	mvns	r3, r3
 800350e:	693a      	ldr	r2, [r7, #16]
 8003510:	4013      	ands	r3, r2
 8003512:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d003      	beq.n	8003528 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	4313      	orrs	r3, r2
 8003526:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003528:	4a30      	ldr	r2, [pc, #192]	@ (80035ec <HAL_GPIO_Init+0x300>)
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800352e:	4b2f      	ldr	r3, [pc, #188]	@ (80035ec <HAL_GPIO_Init+0x300>)
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	43db      	mvns	r3, r3
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	4013      	ands	r3, r2
 800353c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d003      	beq.n	8003552 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800354a:	693a      	ldr	r2, [r7, #16]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	4313      	orrs	r3, r2
 8003550:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003552:	4a26      	ldr	r2, [pc, #152]	@ (80035ec <HAL_GPIO_Init+0x300>)
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003558:	4b24      	ldr	r3, [pc, #144]	@ (80035ec <HAL_GPIO_Init+0x300>)
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	43db      	mvns	r3, r3
 8003562:	693a      	ldr	r2, [r7, #16]
 8003564:	4013      	ands	r3, r2
 8003566:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d003      	beq.n	800357c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	4313      	orrs	r3, r2
 800357a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800357c:	4a1b      	ldr	r2, [pc, #108]	@ (80035ec <HAL_GPIO_Init+0x300>)
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003582:	4b1a      	ldr	r3, [pc, #104]	@ (80035ec <HAL_GPIO_Init+0x300>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	43db      	mvns	r3, r3
 800358c:	693a      	ldr	r2, [r7, #16]
 800358e:	4013      	ands	r3, r2
 8003590:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d003      	beq.n	80035a6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80035a6:	4a11      	ldr	r2, [pc, #68]	@ (80035ec <HAL_GPIO_Init+0x300>)
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	3301      	adds	r3, #1
 80035b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	fa22 f303 	lsr.w	r3, r2, r3
 80035bc:	2b00      	cmp	r3, #0
 80035be:	f47f ae9d 	bne.w	80032fc <HAL_GPIO_Init+0x10>
  }
}
 80035c2:	bf00      	nop
 80035c4:	bf00      	nop
 80035c6:	371c      	adds	r7, #28
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr
 80035d0:	40021000 	.word	0x40021000
 80035d4:	40010000 	.word	0x40010000
 80035d8:	48000400 	.word	0x48000400
 80035dc:	48000800 	.word	0x48000800
 80035e0:	48000c00 	.word	0x48000c00
 80035e4:	48001000 	.word	0x48001000
 80035e8:	48001400 	.word	0x48001400
 80035ec:	40010400 	.word	0x40010400

080035f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	460b      	mov	r3, r1
 80035fa:	807b      	strh	r3, [r7, #2]
 80035fc:	4613      	mov	r3, r2
 80035fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003600:	787b      	ldrb	r3, [r7, #1]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d003      	beq.n	800360e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003606:	887a      	ldrh	r2, [r7, #2]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800360c:	e002      	b.n	8003614 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800360e:	887a      	ldrh	r2, [r7, #2]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003614:	bf00      	nop
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003628:	2300      	movs	r3, #0
 800362a:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d101      	bne.n	8003636 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e0bb      	b.n	80037ae <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800363c:	b2db      	uxtb	r3, r3
 800363e:	2b05      	cmp	r3, #5
 8003640:	d101      	bne.n	8003646 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e0b3      	b.n	80037ae <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b02      	cmp	r3, #2
 8003650:	d101      	bne.n	8003656 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e0ab      	b.n	80037ae <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003656:	4b58      	ldr	r3, [pc, #352]	@ (80037b8 <HAL_OPAMP_Init+0x198>)
 8003658:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800365a:	4a57      	ldr	r2, [pc, #348]	@ (80037b8 <HAL_OPAMP_Init+0x198>)
 800365c:	f043 0301 	orr.w	r3, r3, #1
 8003660:	6613      	str	r3, [r2, #96]	@ 0x60
 8003662:	4b55      	ldr	r3, [pc, #340]	@ (80037b8 <HAL_OPAMP_Init+0x198>)
 8003664:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003666:	f003 0301 	and.w	r3, r3, #1
 800366a:	60bb      	str	r3, [r7, #8]
 800366c:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d103      	bne.n	8003682 <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f7fd fcb2 	bl	8000fec <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	2b40      	cmp	r3, #64	@ 0x40
 800368e:	d003      	beq.n	8003698 <HAL_OPAMP_Init+0x78>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	2b60      	cmp	r3, #96	@ 0x60
 8003696:	d133      	bne.n	8003700 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f023 0110 	bic.w	r1, r3, #16
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	430a      	orrs	r2, r1
 80036ac:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	4b41      	ldr	r3, [pc, #260]	@ (80037bc <HAL_OPAMP_Init+0x19c>)
 80036b6:	4013      	ands	r3, r2
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	6851      	ldr	r1, [r2, #4]
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	6892      	ldr	r2, [r2, #8]
 80036c0:	4311      	orrs	r1, r2
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	6912      	ldr	r2, [r2, #16]
 80036c6:	430a      	orrs	r2, r1
 80036c8:	6879      	ldr	r1, [r7, #4]
 80036ca:	7d09      	ldrb	r1, [r1, #20]
 80036cc:	2901      	cmp	r1, #1
 80036ce:	d102      	bne.n	80036d6 <HAL_OPAMP_Init+0xb6>
 80036d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80036d4:	e000      	b.n	80036d8 <HAL_OPAMP_Init+0xb8>
 80036d6:	2100      	movs	r1, #0
 80036d8:	4311      	orrs	r1, r2
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80036de:	4311      	orrs	r1, r2
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80036e4:	4311      	orrs	r1, r2
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80036ea:	04d2      	lsls	r2, r2, #19
 80036ec:	4311      	orrs	r1, r2
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80036f2:	0612      	lsls	r2, r2, #24
 80036f4:	4311      	orrs	r1, r2
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	6812      	ldr	r2, [r2, #0]
 80036fa:	430b      	orrs	r3, r1
 80036fc:	6013      	str	r3, [r2, #0]
 80036fe:	e035      	b.n	800376c <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f023 0110 	bic.w	r1, r3, #16
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	430a      	orrs	r2, r1
 8003714:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	4b27      	ldr	r3, [pc, #156]	@ (80037bc <HAL_OPAMP_Init+0x19c>)
 800371e:	4013      	ands	r3, r2
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	6851      	ldr	r1, [r2, #4]
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	6892      	ldr	r2, [r2, #8]
 8003728:	4311      	orrs	r1, r2
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	68d2      	ldr	r2, [r2, #12]
 800372e:	4311      	orrs	r1, r2
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	6912      	ldr	r2, [r2, #16]
 8003734:	430a      	orrs	r2, r1
 8003736:	6879      	ldr	r1, [r7, #4]
 8003738:	7d09      	ldrb	r1, [r1, #20]
 800373a:	2901      	cmp	r1, #1
 800373c:	d102      	bne.n	8003744 <HAL_OPAMP_Init+0x124>
 800373e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003742:	e000      	b.n	8003746 <HAL_OPAMP_Init+0x126>
 8003744:	2100      	movs	r1, #0
 8003746:	4311      	orrs	r1, r2
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800374c:	4311      	orrs	r1, r2
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003752:	4311      	orrs	r1, r2
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003758:	04d2      	lsls	r2, r2, #19
 800375a:	4311      	orrs	r1, r2
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003760:	0612      	lsls	r2, r2, #24
 8003762:	4311      	orrs	r1, r2
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	6812      	ldr	r2, [r2, #0]
 8003768:	430b      	orrs	r3, r1
 800376a:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	2b00      	cmp	r3, #0
 8003774:	db10      	blt.n	8003798 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	699a      	ldr	r2, [r3, #24]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	69db      	ldr	r3, [r3, #28]
 8003788:	431a      	orrs	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a1b      	ldr	r3, [r3, #32]
 800378e:	431a      	orrs	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	430a      	orrs	r2, r1
 8003796:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d103      	bne.n	80037ac <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 80037ac:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3710      	adds	r7, #16
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	40021000 	.word	0x40021000
 80037bc:	e0003e11 	.word	0xe0003e11

080037c0 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b085      	sub	sp, #20
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037c8:	2300      	movs	r3, #0
 80037ca:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d102      	bne.n	80037d8 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	73fb      	strb	r3, [r7, #15]
 80037d6:	e01d      	b.n	8003814 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	2b05      	cmp	r3, #5
 80037e2:	d102      	bne.n	80037ea <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	73fb      	strb	r3, [r7, #15]
 80037e8:	e014      	b.n	8003814 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d10c      	bne.n	8003810 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f042 0201 	orr.w	r2, r2, #1
 8003804:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2204      	movs	r2, #4
 800380a:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 800380e:	e001      	b.n	8003814 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 8003814:	7bfb      	ldrb	r3, [r7, #15]
}
 8003816:	4618      	mov	r0, r3
 8003818:	3714      	adds	r7, #20
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr

08003822 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003822:	b580      	push	{r7, lr}
 8003824:	b084      	sub	sp, #16
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d101      	bne.n	8003834 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e0c0      	b.n	80039b6 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800383a:	b2db      	uxtb	r3, r3
 800383c:	2b00      	cmp	r3, #0
 800383e:	d106      	bne.n	800384e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f009 f849 	bl	800c8e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2203      	movs	r2, #3
 8003852:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4618      	mov	r0, r3
 800385c:	f004 fe93 	bl	8008586 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003860:	2300      	movs	r3, #0
 8003862:	73fb      	strb	r3, [r7, #15]
 8003864:	e03e      	b.n	80038e4 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003866:	7bfa      	ldrb	r2, [r7, #15]
 8003868:	6879      	ldr	r1, [r7, #4]
 800386a:	4613      	mov	r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	4413      	add	r3, r2
 8003870:	00db      	lsls	r3, r3, #3
 8003872:	440b      	add	r3, r1
 8003874:	3311      	adds	r3, #17
 8003876:	2201      	movs	r2, #1
 8003878:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800387a:	7bfa      	ldrb	r2, [r7, #15]
 800387c:	6879      	ldr	r1, [r7, #4]
 800387e:	4613      	mov	r3, r2
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	4413      	add	r3, r2
 8003884:	00db      	lsls	r3, r3, #3
 8003886:	440b      	add	r3, r1
 8003888:	3310      	adds	r3, #16
 800388a:	7bfa      	ldrb	r2, [r7, #15]
 800388c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800388e:	7bfa      	ldrb	r2, [r7, #15]
 8003890:	6879      	ldr	r1, [r7, #4]
 8003892:	4613      	mov	r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	4413      	add	r3, r2
 8003898:	00db      	lsls	r3, r3, #3
 800389a:	440b      	add	r3, r1
 800389c:	3313      	adds	r3, #19
 800389e:	2200      	movs	r2, #0
 80038a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80038a2:	7bfa      	ldrb	r2, [r7, #15]
 80038a4:	6879      	ldr	r1, [r7, #4]
 80038a6:	4613      	mov	r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	4413      	add	r3, r2
 80038ac:	00db      	lsls	r3, r3, #3
 80038ae:	440b      	add	r3, r1
 80038b0:	3320      	adds	r3, #32
 80038b2:	2200      	movs	r2, #0
 80038b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80038b6:	7bfa      	ldrb	r2, [r7, #15]
 80038b8:	6879      	ldr	r1, [r7, #4]
 80038ba:	4613      	mov	r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	4413      	add	r3, r2
 80038c0:	00db      	lsls	r3, r3, #3
 80038c2:	440b      	add	r3, r1
 80038c4:	3324      	adds	r3, #36	@ 0x24
 80038c6:	2200      	movs	r2, #0
 80038c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80038ca:	7bfb      	ldrb	r3, [r7, #15]
 80038cc:	6879      	ldr	r1, [r7, #4]
 80038ce:	1c5a      	adds	r2, r3, #1
 80038d0:	4613      	mov	r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	4413      	add	r3, r2
 80038d6:	00db      	lsls	r3, r3, #3
 80038d8:	440b      	add	r3, r1
 80038da:	2200      	movs	r2, #0
 80038dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038de:	7bfb      	ldrb	r3, [r7, #15]
 80038e0:	3301      	adds	r3, #1
 80038e2:	73fb      	strb	r3, [r7, #15]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	791b      	ldrb	r3, [r3, #4]
 80038e8:	7bfa      	ldrb	r2, [r7, #15]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d3bb      	bcc.n	8003866 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038ee:	2300      	movs	r3, #0
 80038f0:	73fb      	strb	r3, [r7, #15]
 80038f2:	e044      	b.n	800397e <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80038f4:	7bfa      	ldrb	r2, [r7, #15]
 80038f6:	6879      	ldr	r1, [r7, #4]
 80038f8:	4613      	mov	r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	4413      	add	r3, r2
 80038fe:	00db      	lsls	r3, r3, #3
 8003900:	440b      	add	r3, r1
 8003902:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8003906:	2200      	movs	r2, #0
 8003908:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800390a:	7bfa      	ldrb	r2, [r7, #15]
 800390c:	6879      	ldr	r1, [r7, #4]
 800390e:	4613      	mov	r3, r2
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	4413      	add	r3, r2
 8003914:	00db      	lsls	r3, r3, #3
 8003916:	440b      	add	r3, r1
 8003918:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800391c:	7bfa      	ldrb	r2, [r7, #15]
 800391e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003920:	7bfa      	ldrb	r2, [r7, #15]
 8003922:	6879      	ldr	r1, [r7, #4]
 8003924:	4613      	mov	r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	4413      	add	r3, r2
 800392a:	00db      	lsls	r3, r3, #3
 800392c:	440b      	add	r3, r1
 800392e:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8003932:	2200      	movs	r2, #0
 8003934:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003936:	7bfa      	ldrb	r2, [r7, #15]
 8003938:	6879      	ldr	r1, [r7, #4]
 800393a:	4613      	mov	r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	4413      	add	r3, r2
 8003940:	00db      	lsls	r3, r3, #3
 8003942:	440b      	add	r3, r1
 8003944:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8003948:	2200      	movs	r2, #0
 800394a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800394c:	7bfa      	ldrb	r2, [r7, #15]
 800394e:	6879      	ldr	r1, [r7, #4]
 8003950:	4613      	mov	r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	4413      	add	r3, r2
 8003956:	00db      	lsls	r3, r3, #3
 8003958:	440b      	add	r3, r1
 800395a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800395e:	2200      	movs	r2, #0
 8003960:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003962:	7bfa      	ldrb	r2, [r7, #15]
 8003964:	6879      	ldr	r1, [r7, #4]
 8003966:	4613      	mov	r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	4413      	add	r3, r2
 800396c:	00db      	lsls	r3, r3, #3
 800396e:	440b      	add	r3, r1
 8003970:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003974:	2200      	movs	r2, #0
 8003976:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003978:	7bfb      	ldrb	r3, [r7, #15]
 800397a:	3301      	adds	r3, #1
 800397c:	73fb      	strb	r3, [r7, #15]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	791b      	ldrb	r3, [r3, #4]
 8003982:	7bfa      	ldrb	r2, [r7, #15]
 8003984:	429a      	cmp	r2, r3
 8003986:	d3b5      	bcc.n	80038f4 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6818      	ldr	r0, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	3304      	adds	r3, #4
 8003990:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003994:	f004 fe12 	bl	80085bc <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2201      	movs	r2, #1
 80039a2:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	7a9b      	ldrb	r3, [r3, #10]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d102      	bne.n	80039b4 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f001 fc40 	bl	8005234 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3710      	adds	r7, #16
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80039be:	b580      	push	{r7, lr}
 80039c0:	b082      	sub	sp, #8
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d101      	bne.n	80039d4 <HAL_PCD_Start+0x16>
 80039d0:	2302      	movs	r3, #2
 80039d2:	e012      	b.n	80039fa <HAL_PCD_Start+0x3c>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f004 fdb9 	bl	8008558 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4618      	mov	r0, r3
 80039ec:	f007 f879 	bl	800aae2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3708      	adds	r7, #8
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b084      	sub	sp, #16
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f007 f87e 	bl	800ab10 <USB_ReadInterrupts>
 8003a14:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d003      	beq.n	8003a28 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f000 fb04 	bl	800402e <PCD_EP_ISR_Handler>

    return;
 8003a26:	e110      	b.n	8003c4a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d013      	beq.n	8003a5a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003a3a:	b29a      	uxth	r2, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a44:	b292      	uxth	r2, r2
 8003a46:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f008 ffd9 	bl	800ca02 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003a50:	2100      	movs	r1, #0
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 f8fc 	bl	8003c50 <HAL_PCD_SetAddress>

    return;
 8003a58:	e0f7      	b.n	8003c4a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d00c      	beq.n	8003a7e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003a6c:	b29a      	uxth	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003a76:	b292      	uxth	r2, r2
 8003a78:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003a7c:	e0e5      	b.n	8003c4a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d00c      	beq.n	8003aa2 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a9a:	b292      	uxth	r2, r2
 8003a9c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003aa0:	e0d3      	b.n	8003c4a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d034      	beq.n	8003b16 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003ab4:	b29a      	uxth	r2, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f022 0204 	bic.w	r2, r2, #4
 8003abe:	b292      	uxth	r2, r2
 8003ac0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003acc:	b29a      	uxth	r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f022 0208 	bic.w	r2, r2, #8
 8003ad6:	b292      	uxth	r2, r2
 8003ad8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d107      	bne.n	8003af6 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003aee:	2100      	movs	r1, #0
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f009 f979 	bl	800cde8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f008 ffbc 	bl	800ca74 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003b04:	b29a      	uxth	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003b0e:	b292      	uxth	r2, r2
 8003b10:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003b14:	e099      	b.n	8003c4a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d027      	beq.n	8003b70 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f042 0208 	orr.w	r2, r2, #8
 8003b32:	b292      	uxth	r2, r2
 8003b34:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003b40:	b29a      	uxth	r2, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b4a:	b292      	uxth	r2, r2
 8003b4c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003b58:	b29a      	uxth	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f042 0204 	orr.w	r2, r2, #4
 8003b62:	b292      	uxth	r2, r2
 8003b64:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f008 ff69 	bl	800ca40 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003b6e:	e06c      	b.n	8003c4a <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d040      	beq.n	8003bfc <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003b82:	b29a      	uxth	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b8c:	b292      	uxth	r2, r2
 8003b8e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d12b      	bne.n	8003bf4 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003ba4:	b29a      	uxth	r2, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f042 0204 	orr.w	r2, r2, #4
 8003bae:	b292      	uxth	r2, r2
 8003bb0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003bbc:	b29a      	uxth	r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f042 0208 	orr.w	r2, r2, #8
 8003bc6:	b292      	uxth	r2, r2
 8003bc8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	089b      	lsrs	r3, r3, #2
 8003be0:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003bea:	2101      	movs	r1, #1
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f009 f8fb 	bl	800cde8 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8003bf2:	e02a      	b.n	8003c4a <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f008 ff23 	bl	800ca40 <HAL_PCD_SuspendCallback>
    return;
 8003bfa:	e026      	b.n	8003c4a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00f      	beq.n	8003c26 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003c0e:	b29a      	uxth	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003c18:	b292      	uxth	r2, r2
 8003c1a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f008 fee1 	bl	800c9e6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003c24:	e011      	b.n	8003c4a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d00c      	beq.n	8003c4a <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003c38:	b29a      	uxth	r2, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c42:	b292      	uxth	r2, r2
 8003c44:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003c48:	bf00      	nop
  }
}
 8003c4a:	3710      	adds	r7, #16
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	460b      	mov	r3, r1
 8003c5a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d101      	bne.n	8003c6a <HAL_PCD_SetAddress+0x1a>
 8003c66:	2302      	movs	r3, #2
 8003c68:	e012      	b.n	8003c90 <HAL_PCD_SetAddress+0x40>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	78fa      	ldrb	r2, [r7, #3]
 8003c76:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	78fa      	ldrb	r2, [r7, #3]
 8003c7e:	4611      	mov	r1, r2
 8003c80:	4618      	mov	r0, r3
 8003c82:	f006 ff1a 	bl	800aaba <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003c8e:	2300      	movs	r3, #0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3708      	adds	r7, #8
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	4608      	mov	r0, r1
 8003ca2:	4611      	mov	r1, r2
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	70fb      	strb	r3, [r7, #3]
 8003caa:	460b      	mov	r3, r1
 8003cac:	803b      	strh	r3, [r7, #0]
 8003cae:	4613      	mov	r3, r2
 8003cb0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003cb6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	da0e      	bge.n	8003cdc <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cbe:	78fb      	ldrb	r3, [r7, #3]
 8003cc0:	f003 0207 	and.w	r2, r3, #7
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	4413      	add	r3, r2
 8003cca:	00db      	lsls	r3, r3, #3
 8003ccc:	3310      	adds	r3, #16
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	705a      	strb	r2, [r3, #1]
 8003cda:	e00e      	b.n	8003cfa <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cdc:	78fb      	ldrb	r3, [r7, #3]
 8003cde:	f003 0207 	and.w	r2, r3, #7
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	4413      	add	r3, r2
 8003ce8:	00db      	lsls	r3, r3, #3
 8003cea:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003cfa:	78fb      	ldrb	r3, [r7, #3]
 8003cfc:	f003 0307 	and.w	r3, r3, #7
 8003d00:	b2da      	uxtb	r2, r3
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003d06:	883a      	ldrh	r2, [r7, #0]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	78ba      	ldrb	r2, [r7, #2]
 8003d10:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003d12:	78bb      	ldrb	r3, [r7, #2]
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d102      	bne.n	8003d1e <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d101      	bne.n	8003d2c <HAL_PCD_EP_Open+0x94>
 8003d28:	2302      	movs	r3, #2
 8003d2a:	e00e      	b.n	8003d4a <HAL_PCD_EP_Open+0xb2>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68f9      	ldr	r1, [r7, #12]
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f004 fc5c 	bl	80085f8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8003d48:	7afb      	ldrb	r3, [r7, #11]
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3710      	adds	r7, #16
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}

08003d52 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d52:	b580      	push	{r7, lr}
 8003d54:	b084      	sub	sp, #16
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003d5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	da0e      	bge.n	8003d84 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d66:	78fb      	ldrb	r3, [r7, #3]
 8003d68:	f003 0207 	and.w	r2, r3, #7
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	4413      	add	r3, r2
 8003d72:	00db      	lsls	r3, r3, #3
 8003d74:	3310      	adds	r3, #16
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	4413      	add	r3, r2
 8003d7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	705a      	strb	r2, [r3, #1]
 8003d82:	e00e      	b.n	8003da2 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d84:	78fb      	ldrb	r3, [r7, #3]
 8003d86:	f003 0207 	and.w	r2, r3, #7
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	4413      	add	r3, r2
 8003d90:	00db      	lsls	r3, r3, #3
 8003d92:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	4413      	add	r3, r2
 8003d9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003da2:	78fb      	ldrb	r3, [r7, #3]
 8003da4:	f003 0307 	and.w	r3, r3, #7
 8003da8:	b2da      	uxtb	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d101      	bne.n	8003dbc <HAL_PCD_EP_Close+0x6a>
 8003db8:	2302      	movs	r3, #2
 8003dba:	e00e      	b.n	8003dda <HAL_PCD_EP_Close+0x88>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68f9      	ldr	r1, [r7, #12]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f004 ffd8 	bl	8008d80 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b086      	sub	sp, #24
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	60f8      	str	r0, [r7, #12]
 8003dea:	607a      	str	r2, [r7, #4]
 8003dec:	603b      	str	r3, [r7, #0]
 8003dee:	460b      	mov	r3, r1
 8003df0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003df2:	7afb      	ldrb	r3, [r7, #11]
 8003df4:	f003 0207 	and.w	r2, r3, #7
 8003df8:	4613      	mov	r3, r2
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	4413      	add	r3, r2
 8003dfe:	00db      	lsls	r3, r3, #3
 8003e00:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003e04:	68fa      	ldr	r2, [r7, #12]
 8003e06:	4413      	add	r3, r2
 8003e08:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	683a      	ldr	r2, [r7, #0]
 8003e14:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e22:	7afb      	ldrb	r3, [r7, #11]
 8003e24:	f003 0307 	and.w	r3, r3, #7
 8003e28:	b2da      	uxtb	r2, r3
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	6979      	ldr	r1, [r7, #20]
 8003e34:	4618      	mov	r0, r3
 8003e36:	f005 f990 	bl	800915a <USB_EPStartXfer>

  return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3718      	adds	r7, #24
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003e50:	78fb      	ldrb	r3, [r7, #3]
 8003e52:	f003 0207 	and.w	r2, r3, #7
 8003e56:	6879      	ldr	r1, [r7, #4]
 8003e58:	4613      	mov	r3, r2
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	4413      	add	r3, r2
 8003e5e:	00db      	lsls	r3, r3, #3
 8003e60:	440b      	add	r3, r1
 8003e62:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8003e66:	681b      	ldr	r3, [r3, #0]
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b086      	sub	sp, #24
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	607a      	str	r2, [r7, #4]
 8003e7e:	603b      	str	r3, [r7, #0]
 8003e80:	460b      	mov	r3, r1
 8003e82:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e84:	7afb      	ldrb	r3, [r7, #11]
 8003e86:	f003 0207 	and.w	r2, r3, #7
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	4413      	add	r3, r2
 8003e90:	00db      	lsls	r3, r3, #3
 8003e92:	3310      	adds	r3, #16
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	4413      	add	r3, r2
 8003e98:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	683a      	ldr	r2, [r7, #0]
 8003ea4:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	683a      	ldr	r2, [r7, #0]
 8003eb2:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ec0:	7afb      	ldrb	r3, [r7, #11]
 8003ec2:	f003 0307 	and.w	r3, r3, #7
 8003ec6:	b2da      	uxtb	r2, r3
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6979      	ldr	r1, [r7, #20]
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f005 f941 	bl	800915a <USB_EPStartXfer>

  return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3718      	adds	r7, #24
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}

08003ee2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b084      	sub	sp, #16
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
 8003eea:	460b      	mov	r3, r1
 8003eec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003eee:	78fb      	ldrb	r3, [r7, #3]
 8003ef0:	f003 0307 	and.w	r3, r3, #7
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	7912      	ldrb	r2, [r2, #4]
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d901      	bls.n	8003f00 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e03e      	b.n	8003f7e <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003f00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	da0e      	bge.n	8003f26 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f08:	78fb      	ldrb	r3, [r7, #3]
 8003f0a:	f003 0207 	and.w	r2, r3, #7
 8003f0e:	4613      	mov	r3, r2
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	4413      	add	r3, r2
 8003f14:	00db      	lsls	r3, r3, #3
 8003f16:	3310      	adds	r3, #16
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2201      	movs	r2, #1
 8003f22:	705a      	strb	r2, [r3, #1]
 8003f24:	e00c      	b.n	8003f40 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003f26:	78fa      	ldrb	r2, [r7, #3]
 8003f28:	4613      	mov	r3, r2
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	4413      	add	r3, r2
 8003f2e:	00db      	lsls	r3, r3, #3
 8003f30:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	4413      	add	r3, r2
 8003f38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2201      	movs	r2, #1
 8003f44:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f46:	78fb      	ldrb	r3, [r7, #3]
 8003f48:	f003 0307 	and.w	r3, r3, #7
 8003f4c:	b2da      	uxtb	r2, r3
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d101      	bne.n	8003f60 <HAL_PCD_EP_SetStall+0x7e>
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	e00e      	b.n	8003f7e <HAL_PCD_EP_SetStall+0x9c>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68f9      	ldr	r1, [r7, #12]
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f006 fca4 	bl	800a8bc <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3710      	adds	r7, #16
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f86:	b580      	push	{r7, lr}
 8003f88:	b084      	sub	sp, #16
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
 8003f8e:	460b      	mov	r3, r1
 8003f90:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003f92:	78fb      	ldrb	r3, [r7, #3]
 8003f94:	f003 030f 	and.w	r3, r3, #15
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	7912      	ldrb	r2, [r2, #4]
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d901      	bls.n	8003fa4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e040      	b.n	8004026 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003fa4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	da0e      	bge.n	8003fca <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fac:	78fb      	ldrb	r3, [r7, #3]
 8003fae:	f003 0207 	and.w	r2, r3, #7
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	4413      	add	r3, r2
 8003fb8:	00db      	lsls	r3, r3, #3
 8003fba:	3310      	adds	r3, #16
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	705a      	strb	r2, [r3, #1]
 8003fc8:	e00e      	b.n	8003fe8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fca:	78fb      	ldrb	r3, [r7, #3]
 8003fcc:	f003 0207 	and.w	r2, r3, #7
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	4413      	add	r3, r2
 8003fd6:	00db      	lsls	r3, r3, #3
 8003fd8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	4413      	add	r3, r2
 8003fe0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003fee:	78fb      	ldrb	r3, [r7, #3]
 8003ff0:	f003 0307 	and.w	r3, r3, #7
 8003ff4:	b2da      	uxtb	r2, r3
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004000:	2b01      	cmp	r3, #1
 8004002:	d101      	bne.n	8004008 <HAL_PCD_EP_ClrStall+0x82>
 8004004:	2302      	movs	r3, #2
 8004006:	e00e      	b.n	8004026 <HAL_PCD_EP_ClrStall+0xa0>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68f9      	ldr	r1, [r7, #12]
 8004016:	4618      	mov	r0, r3
 8004018:	f006 fca1 	bl	800a95e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	3710      	adds	r7, #16
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	b096      	sub	sp, #88	@ 0x58
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004036:	e3ad      	b.n	8004794 <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004040:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004044:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004048:	b2db      	uxtb	r3, r3
 800404a:	f003 030f 	and.w	r3, r3, #15
 800404e:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8004052:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004056:	2b00      	cmp	r3, #0
 8004058:	f040 816f 	bne.w	800433a <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800405c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004060:	f003 0310 	and.w	r3, r3, #16
 8004064:	2b00      	cmp	r3, #0
 8004066:	d14c      	bne.n	8004102 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	881b      	ldrh	r3, [r3, #0]
 800406e:	b29b      	uxth	r3, r3
 8004070:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004074:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004078:	81fb      	strh	r3, [r7, #14]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	89fb      	ldrh	r3, [r7, #14]
 8004080:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004084:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004088:	b29b      	uxth	r3, r3
 800408a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	3310      	adds	r3, #16
 8004090:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800409a:	b29b      	uxth	r3, r3
 800409c:	461a      	mov	r2, r3
 800409e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	00db      	lsls	r3, r3, #3
 80040a4:	4413      	add	r3, r2
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	6812      	ldr	r2, [r2, #0]
 80040aa:	4413      	add	r3, r2
 80040ac:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80040b0:	881b      	ldrh	r3, [r3, #0]
 80040b2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80040b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040b8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80040ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040bc:	695a      	ldr	r2, [r3, #20]
 80040be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040c0:	69db      	ldr	r3, [r3, #28]
 80040c2:	441a      	add	r2, r3
 80040c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040c6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80040c8:	2100      	movs	r1, #0
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f008 fc71 	bl	800c9b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	7b1b      	ldrb	r3, [r3, #12]
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	f000 835c 	beq.w	8004794 <PCD_EP_ISR_Handler+0x766>
 80040dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040de:	699b      	ldr	r3, [r3, #24]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	f040 8357 	bne.w	8004794 <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	7b1b      	ldrb	r3, [r3, #12]
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80040f0:	b2da      	uxtb	r2, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	731a      	strb	r2, [r3, #12]
 8004100:	e348      	b.n	8004794 <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004108:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	881b      	ldrh	r3, [r3, #0]
 8004110:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004114:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004118:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800411c:	2b00      	cmp	r3, #0
 800411e:	d032      	beq.n	8004186 <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004128:	b29b      	uxth	r3, r3
 800412a:	461a      	mov	r2, r3
 800412c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	00db      	lsls	r3, r3, #3
 8004132:	4413      	add	r3, r2
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	6812      	ldr	r2, [r2, #0]
 8004138:	4413      	add	r3, r2
 800413a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800413e:	881b      	ldrh	r3, [r3, #0]
 8004140:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004144:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004146:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6818      	ldr	r0, [r3, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8004152:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004154:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004156:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004158:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800415a:	b29b      	uxth	r3, r3
 800415c:	f006 fd2a 	bl	800abb4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	881b      	ldrh	r3, [r3, #0]
 8004166:	b29a      	uxth	r2, r3
 8004168:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800416c:	4013      	ands	r3, r2
 800416e:	823b      	strh	r3, [r7, #16]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	8a3a      	ldrh	r2, [r7, #16]
 8004176:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800417a:	b292      	uxth	r2, r2
 800417c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f008 fbea 	bl	800c958 <HAL_PCD_SetupStageCallback>
 8004184:	e306      	b.n	8004794 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004186:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800418a:	2b00      	cmp	r3, #0
 800418c:	f280 8302 	bge.w	8004794 <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	881b      	ldrh	r3, [r3, #0]
 8004196:	b29a      	uxth	r2, r3
 8004198:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800419c:	4013      	ands	r3, r2
 800419e:	83fb      	strh	r3, [r7, #30]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	8bfa      	ldrh	r2, [r7, #30]
 80041a6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80041aa:	b292      	uxth	r2, r2
 80041ac:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	461a      	mov	r2, r3
 80041ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	00db      	lsls	r3, r3, #3
 80041c0:	4413      	add	r3, r2
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	6812      	ldr	r2, [r2, #0]
 80041c6:	4413      	add	r3, r2
 80041c8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80041cc:	881b      	ldrh	r3, [r3, #0]
 80041ce:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80041d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041d4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80041d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041d8:	69db      	ldr	r3, [r3, #28]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d019      	beq.n	8004212 <PCD_EP_ISR_Handler+0x1e4>
 80041de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d015      	beq.n	8004212 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6818      	ldr	r0, [r3, #0]
 80041ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041ec:	6959      	ldr	r1, [r3, #20]
 80041ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041f0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80041f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041f4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	f006 fcdc 	bl	800abb4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80041fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041fe:	695a      	ldr	r2, [r3, #20]
 8004200:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004202:	69db      	ldr	r3, [r3, #28]
 8004204:	441a      	add	r2, r3
 8004206:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004208:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800420a:	2100      	movs	r1, #0
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f008 fbb5 	bl	800c97c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	881b      	ldrh	r3, [r3, #0]
 8004218:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800421c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004220:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004224:	2b00      	cmp	r3, #0
 8004226:	f040 82b5 	bne.w	8004794 <PCD_EP_ISR_Handler+0x766>
 800422a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800422e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004232:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004236:	f000 82ad 	beq.w	8004794 <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	61bb      	str	r3, [r7, #24]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004248:	b29b      	uxth	r3, r3
 800424a:	461a      	mov	r2, r3
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	4413      	add	r3, r2
 8004250:	61bb      	str	r3, [r7, #24]
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004258:	617b      	str	r3, [r7, #20]
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	881b      	ldrh	r3, [r3, #0]
 800425e:	b29b      	uxth	r3, r3
 8004260:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004264:	b29a      	uxth	r2, r3
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	801a      	strh	r2, [r3, #0]
 800426a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	2b3e      	cmp	r3, #62	@ 0x3e
 8004270:	d91d      	bls.n	80042ae <PCD_EP_ISR_Handler+0x280>
 8004272:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	095b      	lsrs	r3, r3, #5
 8004278:	647b      	str	r3, [r7, #68]	@ 0x44
 800427a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	f003 031f 	and.w	r3, r3, #31
 8004282:	2b00      	cmp	r3, #0
 8004284:	d102      	bne.n	800428c <PCD_EP_ISR_Handler+0x25e>
 8004286:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004288:	3b01      	subs	r3, #1
 800428a:	647b      	str	r3, [r7, #68]	@ 0x44
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	881b      	ldrh	r3, [r3, #0]
 8004290:	b29a      	uxth	r2, r3
 8004292:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004294:	b29b      	uxth	r3, r3
 8004296:	029b      	lsls	r3, r3, #10
 8004298:	b29b      	uxth	r3, r3
 800429a:	4313      	orrs	r3, r2
 800429c:	b29b      	uxth	r3, r3
 800429e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042a6:	b29a      	uxth	r2, r3
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	801a      	strh	r2, [r3, #0]
 80042ac:	e026      	b.n	80042fc <PCD_EP_ISR_Handler+0x2ce>
 80042ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d10a      	bne.n	80042cc <PCD_EP_ISR_Handler+0x29e>
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	881b      	ldrh	r3, [r3, #0]
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042c4:	b29a      	uxth	r2, r3
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	801a      	strh	r2, [r3, #0]
 80042ca:	e017      	b.n	80042fc <PCD_EP_ISR_Handler+0x2ce>
 80042cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	085b      	lsrs	r3, r3, #1
 80042d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80042d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042d6:	691b      	ldr	r3, [r3, #16]
 80042d8:	f003 0301 	and.w	r3, r3, #1
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d002      	beq.n	80042e6 <PCD_EP_ISR_Handler+0x2b8>
 80042e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042e2:	3301      	adds	r3, #1
 80042e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	881b      	ldrh	r3, [r3, #0]
 80042ea:	b29a      	uxth	r2, r3
 80042ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	029b      	lsls	r3, r3, #10
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	4313      	orrs	r3, r2
 80042f6:	b29a      	uxth	r2, r3
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	881b      	ldrh	r3, [r3, #0]
 8004302:	b29b      	uxth	r3, r3
 8004304:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004308:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800430c:	827b      	strh	r3, [r7, #18]
 800430e:	8a7b      	ldrh	r3, [r7, #18]
 8004310:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004314:	827b      	strh	r3, [r7, #18]
 8004316:	8a7b      	ldrh	r3, [r7, #18]
 8004318:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800431c:	827b      	strh	r3, [r7, #18]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	8a7b      	ldrh	r3, [r7, #18]
 8004324:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004328:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800432c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004330:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004334:	b29b      	uxth	r3, r3
 8004336:	8013      	strh	r3, [r2, #0]
 8004338:	e22c      	b.n	8004794 <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	461a      	mov	r2, r3
 8004340:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	4413      	add	r3, r2
 8004348:	881b      	ldrh	r3, [r3, #0]
 800434a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800434e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8004352:	2b00      	cmp	r3, #0
 8004354:	f280 80f6 	bge.w	8004544 <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	461a      	mov	r2, r3
 800435e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	4413      	add	r3, r2
 8004366:	881b      	ldrh	r3, [r3, #0]
 8004368:	b29a      	uxth	r2, r3
 800436a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800436e:	4013      	ands	r3, r2
 8004370:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	461a      	mov	r2, r3
 800437a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	4413      	add	r3, r2
 8004382:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8004386:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800438a:	b292      	uxth	r2, r2
 800438c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800438e:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8004392:	4613      	mov	r3, r2
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	4413      	add	r3, r2
 8004398:	00db      	lsls	r3, r3, #3
 800439a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	4413      	add	r3, r2
 80043a2:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80043a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043a6:	7b1b      	ldrb	r3, [r3, #12]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d123      	bne.n	80043f4 <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	461a      	mov	r2, r3
 80043b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	00db      	lsls	r3, r3, #3
 80043be:	4413      	add	r3, r2
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	6812      	ldr	r2, [r2, #0]
 80043c4:	4413      	add	r3, r2
 80043c6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80043ca:	881b      	ldrh	r3, [r3, #0]
 80043cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043d0:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80043d4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f000 808e 	beq.w	80044fa <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6818      	ldr	r0, [r3, #0]
 80043e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043e4:	6959      	ldr	r1, [r3, #20]
 80043e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043e8:	88da      	ldrh	r2, [r3, #6]
 80043ea:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80043ee:	f006 fbe1 	bl	800abb4 <USB_ReadPMA>
 80043f2:	e082      	b.n	80044fa <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80043f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043f6:	78db      	ldrb	r3, [r3, #3]
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d10a      	bne.n	8004412 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80043fc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004400:	461a      	mov	r2, r3
 8004402:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f000 f9d3 	bl	80047b0 <HAL_PCD_EP_DB_Receive>
 800440a:	4603      	mov	r3, r0
 800440c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8004410:	e073      	b.n	80044fa <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	461a      	mov	r2, r3
 8004418:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	4413      	add	r3, r2
 8004420:	881b      	ldrh	r3, [r3, #0]
 8004422:	b29b      	uxth	r3, r3
 8004424:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004428:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800442c:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	461a      	mov	r2, r3
 8004436:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	441a      	add	r2, r3
 800443e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8004442:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004446:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800444a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800444e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004452:	b29b      	uxth	r3, r3
 8004454:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	461a      	mov	r2, r3
 800445c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	4413      	add	r3, r2
 8004464:	881b      	ldrh	r3, [r3, #0]
 8004466:	b29b      	uxth	r3, r3
 8004468:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d022      	beq.n	80044b6 <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004478:	b29b      	uxth	r3, r3
 800447a:	461a      	mov	r2, r3
 800447c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	00db      	lsls	r3, r3, #3
 8004482:	4413      	add	r3, r2
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	6812      	ldr	r2, [r2, #0]
 8004488:	4413      	add	r3, r2
 800448a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800448e:	881b      	ldrh	r3, [r3, #0]
 8004490:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004494:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8004498:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800449c:	2b00      	cmp	r3, #0
 800449e:	d02c      	beq.n	80044fa <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6818      	ldr	r0, [r3, #0]
 80044a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044a6:	6959      	ldr	r1, [r3, #20]
 80044a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044aa:	891a      	ldrh	r2, [r3, #8]
 80044ac:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80044b0:	f006 fb80 	bl	800abb4 <USB_ReadPMA>
 80044b4:	e021      	b.n	80044fa <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044be:	b29b      	uxth	r3, r3
 80044c0:	461a      	mov	r2, r3
 80044c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	00db      	lsls	r3, r3, #3
 80044c8:	4413      	add	r3, r2
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	6812      	ldr	r2, [r2, #0]
 80044ce:	4413      	add	r3, r2
 80044d0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80044d4:	881b      	ldrh	r3, [r3, #0]
 80044d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044da:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80044de:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d009      	beq.n	80044fa <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6818      	ldr	r0, [r3, #0]
 80044ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044ec:	6959      	ldr	r1, [r3, #20]
 80044ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044f0:	895a      	ldrh	r2, [r3, #10]
 80044f2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80044f6:	f006 fb5d 	bl	800abb4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80044fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044fc:	69da      	ldr	r2, [r3, #28]
 80044fe:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004502:	441a      	add	r2, r3
 8004504:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004506:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004508:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800450a:	695a      	ldr	r2, [r3, #20]
 800450c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004510:	441a      	add	r2, r3
 8004512:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004514:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004516:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d005      	beq.n	800452a <PCD_EP_ISR_Handler+0x4fc>
 800451e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8004522:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	429a      	cmp	r2, r3
 8004528:	d206      	bcs.n	8004538 <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800452a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	4619      	mov	r1, r3
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f008 fa23 	bl	800c97c <HAL_PCD_DataOutStageCallback>
 8004536:	e005      	b.n	8004544 <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800453e:	4618      	mov	r0, r3
 8004540:	f004 fe0b 	bl	800915a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004544:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004548:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800454c:	2b00      	cmp	r3, #0
 800454e:	f000 8121 	beq.w	8004794 <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 8004552:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8004556:	4613      	mov	r3, r2
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	4413      	add	r3, r2
 800455c:	00db      	lsls	r3, r3, #3
 800455e:	3310      	adds	r3, #16
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	4413      	add	r3, r2
 8004564:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	461a      	mov	r2, r3
 800456c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	4413      	add	r3, r2
 8004574:	881b      	ldrh	r3, [r3, #0]
 8004576:	b29b      	uxth	r3, r3
 8004578:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800457c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004580:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	461a      	mov	r2, r3
 800458a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	441a      	add	r2, r3
 8004592:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004596:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800459a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800459e:	b29b      	uxth	r3, r3
 80045a0:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80045a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045a4:	78db      	ldrb	r3, [r3, #3]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	f040 80a2 	bne.w	80046f0 <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 80045ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045ae:	2200      	movs	r2, #0
 80045b0:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80045b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045b4:	7b1b      	ldrb	r3, [r3, #12]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	f000 8093 	beq.w	80046e2 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80045bc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80045c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d046      	beq.n	8004656 <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80045c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045ca:	785b      	ldrb	r3, [r3, #1]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d126      	bne.n	800461e <PCD_EP_ISR_Handler+0x5f0>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80045de:	b29b      	uxth	r3, r3
 80045e0:	461a      	mov	r2, r3
 80045e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e4:	4413      	add	r3, r2
 80045e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80045e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	00da      	lsls	r2, r3, #3
 80045ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f0:	4413      	add	r3, r2
 80045f2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80045f6:	623b      	str	r3, [r7, #32]
 80045f8:	6a3b      	ldr	r3, [r7, #32]
 80045fa:	881b      	ldrh	r3, [r3, #0]
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004602:	b29a      	uxth	r2, r3
 8004604:	6a3b      	ldr	r3, [r7, #32]
 8004606:	801a      	strh	r2, [r3, #0]
 8004608:	6a3b      	ldr	r3, [r7, #32]
 800460a:	881b      	ldrh	r3, [r3, #0]
 800460c:	b29b      	uxth	r3, r3
 800460e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004612:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004616:	b29a      	uxth	r2, r3
 8004618:	6a3b      	ldr	r3, [r7, #32]
 800461a:	801a      	strh	r2, [r3, #0]
 800461c:	e061      	b.n	80046e2 <PCD_EP_ISR_Handler+0x6b4>
 800461e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004620:	785b      	ldrb	r3, [r3, #1]
 8004622:	2b01      	cmp	r3, #1
 8004624:	d15d      	bne.n	80046e2 <PCD_EP_ISR_Handler+0x6b4>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004634:	b29b      	uxth	r3, r3
 8004636:	461a      	mov	r2, r3
 8004638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800463a:	4413      	add	r3, r2
 800463c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800463e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	00da      	lsls	r2, r3, #3
 8004644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004646:	4413      	add	r3, r2
 8004648:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800464c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800464e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004650:	2200      	movs	r2, #0
 8004652:	801a      	strh	r2, [r3, #0]
 8004654:	e045      	b.n	80046e2 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800465c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800465e:	785b      	ldrb	r3, [r3, #1]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d126      	bne.n	80046b2 <PCD_EP_ISR_Handler+0x684>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	637b      	str	r3, [r7, #52]	@ 0x34
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004672:	b29b      	uxth	r3, r3
 8004674:	461a      	mov	r2, r3
 8004676:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004678:	4413      	add	r3, r2
 800467a:	637b      	str	r3, [r7, #52]	@ 0x34
 800467c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	00da      	lsls	r2, r3, #3
 8004682:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004684:	4413      	add	r3, r2
 8004686:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800468a:	633b      	str	r3, [r7, #48]	@ 0x30
 800468c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800468e:	881b      	ldrh	r3, [r3, #0]
 8004690:	b29b      	uxth	r3, r3
 8004692:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004696:	b29a      	uxth	r2, r3
 8004698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800469a:	801a      	strh	r2, [r3, #0]
 800469c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800469e:	881b      	ldrh	r3, [r3, #0]
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046aa:	b29a      	uxth	r2, r3
 80046ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046ae:	801a      	strh	r2, [r3, #0]
 80046b0:	e017      	b.n	80046e2 <PCD_EP_ISR_Handler+0x6b4>
 80046b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046b4:	785b      	ldrb	r3, [r3, #1]
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d113      	bne.n	80046e2 <PCD_EP_ISR_Handler+0x6b4>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	461a      	mov	r2, r3
 80046c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046c8:	4413      	add	r3, r2
 80046ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	00da      	lsls	r2, r3, #3
 80046d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046d4:	4413      	add	r3, r2
 80046d6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80046da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80046dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046de:	2200      	movs	r2, #0
 80046e0:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80046e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	4619      	mov	r1, r3
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f008 f962 	bl	800c9b2 <HAL_PCD_DataInStageCallback>
 80046ee:	e051      	b.n	8004794 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80046f0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80046f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d144      	bne.n	8004786 <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004704:	b29b      	uxth	r3, r3
 8004706:	461a      	mov	r2, r3
 8004708:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	00db      	lsls	r3, r3, #3
 800470e:	4413      	add	r3, r2
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	6812      	ldr	r2, [r2, #0]
 8004714:	4413      	add	r3, r2
 8004716:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800471a:	881b      	ldrh	r3, [r3, #0]
 800471c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004720:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8004724:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004726:	699a      	ldr	r2, [r3, #24]
 8004728:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800472c:	429a      	cmp	r2, r3
 800472e:	d907      	bls.n	8004740 <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 8004730:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004732:	699a      	ldr	r2, [r3, #24]
 8004734:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004738:	1ad2      	subs	r2, r2, r3
 800473a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800473c:	619a      	str	r2, [r3, #24]
 800473e:	e002      	b.n	8004746 <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 8004740:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004742:	2200      	movs	r2, #0
 8004744:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004746:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004748:	699b      	ldr	r3, [r3, #24]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d106      	bne.n	800475c <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800474e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	4619      	mov	r1, r3
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f008 f92c 	bl	800c9b2 <HAL_PCD_DataInStageCallback>
 800475a:	e01b      	b.n	8004794 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800475c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800475e:	695a      	ldr	r2, [r3, #20]
 8004760:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004764:	441a      	add	r2, r3
 8004766:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004768:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800476a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800476c:	69da      	ldr	r2, [r3, #28]
 800476e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004772:	441a      	add	r2, r3
 8004774:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004776:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800477e:	4618      	mov	r0, r3
 8004780:	f004 fceb 	bl	800915a <USB_EPStartXfer>
 8004784:	e006      	b.n	8004794 <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004786:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800478a:	461a      	mov	r2, r3
 800478c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 f917 	bl	80049c2 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800479c:	b29b      	uxth	r3, r3
 800479e:	b21b      	sxth	r3, r3
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	f6ff ac49 	blt.w	8004038 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3758      	adds	r7, #88	@ 0x58
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b088      	sub	sp, #32
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	4613      	mov	r3, r2
 80047bc:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80047be:	88fb      	ldrh	r3, [r7, #6]
 80047c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d07c      	beq.n	80048c2 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	461a      	mov	r2, r3
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	00db      	lsls	r3, r3, #3
 80047da:	4413      	add	r3, r2
 80047dc:	68fa      	ldr	r2, [r7, #12]
 80047de:	6812      	ldr	r2, [r2, #0]
 80047e0:	4413      	add	r3, r2
 80047e2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80047e6:	881b      	ldrh	r3, [r3, #0]
 80047e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047ec:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	699a      	ldr	r2, [r3, #24]
 80047f2:	8b7b      	ldrh	r3, [r7, #26]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d306      	bcc.n	8004806 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	699a      	ldr	r2, [r3, #24]
 80047fc:	8b7b      	ldrh	r3, [r7, #26]
 80047fe:	1ad2      	subs	r2, r2, r3
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	619a      	str	r2, [r3, #24]
 8004804:	e002      	b.n	800480c <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	2200      	movs	r2, #0
 800480a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d123      	bne.n	800485c <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	461a      	mov	r2, r3
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	4413      	add	r3, r2
 8004822:	881b      	ldrh	r3, [r3, #0]
 8004824:	b29b      	uxth	r3, r3
 8004826:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800482a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800482e:	833b      	strh	r3, [r7, #24]
 8004830:	8b3b      	ldrh	r3, [r7, #24]
 8004832:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004836:	833b      	strh	r3, [r7, #24]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	461a      	mov	r2, r3
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	441a      	add	r2, r3
 8004846:	8b3b      	ldrh	r3, [r7, #24]
 8004848:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800484c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004850:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004854:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004858:	b29b      	uxth	r3, r3
 800485a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800485c:	88fb      	ldrh	r3, [r7, #6]
 800485e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004862:	2b00      	cmp	r3, #0
 8004864:	d01f      	beq.n	80048a6 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	461a      	mov	r2, r3
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	4413      	add	r3, r2
 8004874:	881b      	ldrh	r3, [r3, #0]
 8004876:	b29b      	uxth	r3, r3
 8004878:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800487c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004880:	82fb      	strh	r3, [r7, #22]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	461a      	mov	r2, r3
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	441a      	add	r2, r3
 8004890:	8afb      	ldrh	r3, [r7, #22]
 8004892:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004896:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800489a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800489e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80048a6:	8b7b      	ldrh	r3, [r7, #26]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	f000 8085 	beq.w	80049b8 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6818      	ldr	r0, [r3, #0]
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	6959      	ldr	r1, [r3, #20]
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	891a      	ldrh	r2, [r3, #8]
 80048ba:	8b7b      	ldrh	r3, [r7, #26]
 80048bc:	f006 f97a 	bl	800abb4 <USB_ReadPMA>
 80048c0:	e07a      	b.n	80049b8 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	461a      	mov	r2, r3
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	00db      	lsls	r3, r3, #3
 80048d4:	4413      	add	r3, r2
 80048d6:	68fa      	ldr	r2, [r7, #12]
 80048d8:	6812      	ldr	r2, [r2, #0]
 80048da:	4413      	add	r3, r2
 80048dc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80048e0:	881b      	ldrh	r3, [r3, #0]
 80048e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048e6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	699a      	ldr	r2, [r3, #24]
 80048ec:	8b7b      	ldrh	r3, [r7, #26]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d306      	bcc.n	8004900 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	699a      	ldr	r2, [r3, #24]
 80048f6:	8b7b      	ldrh	r3, [r7, #26]
 80048f8:	1ad2      	subs	r2, r2, r3
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	619a      	str	r2, [r3, #24]
 80048fe:	e002      	b.n	8004906 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	2200      	movs	r2, #0
 8004904:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	699b      	ldr	r3, [r3, #24]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d123      	bne.n	8004956 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	461a      	mov	r2, r3
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	4413      	add	r3, r2
 800491c:	881b      	ldrh	r3, [r3, #0]
 800491e:	b29b      	uxth	r3, r3
 8004920:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004924:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004928:	83fb      	strh	r3, [r7, #30]
 800492a:	8bfb      	ldrh	r3, [r7, #30]
 800492c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004930:	83fb      	strh	r3, [r7, #30]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	461a      	mov	r2, r3
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	441a      	add	r2, r3
 8004940:	8bfb      	ldrh	r3, [r7, #30]
 8004942:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004946:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800494a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800494e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004952:	b29b      	uxth	r3, r3
 8004954:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004956:	88fb      	ldrh	r3, [r7, #6]
 8004958:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800495c:	2b00      	cmp	r3, #0
 800495e:	d11f      	bne.n	80049a0 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	461a      	mov	r2, r3
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	4413      	add	r3, r2
 800496e:	881b      	ldrh	r3, [r3, #0]
 8004970:	b29b      	uxth	r3, r3
 8004972:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004976:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800497a:	83bb      	strh	r3, [r7, #28]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	461a      	mov	r2, r3
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	441a      	add	r2, r3
 800498a:	8bbb      	ldrh	r3, [r7, #28]
 800498c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004990:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004994:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004998:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800499c:	b29b      	uxth	r3, r3
 800499e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80049a0:	8b7b      	ldrh	r3, [r7, #26]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d008      	beq.n	80049b8 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6818      	ldr	r0, [r3, #0]
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	6959      	ldr	r1, [r3, #20]
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	895a      	ldrh	r2, [r3, #10]
 80049b2:	8b7b      	ldrh	r3, [r7, #26]
 80049b4:	f006 f8fe 	bl	800abb4 <USB_ReadPMA>
    }
  }

  return count;
 80049b8:	8b7b      	ldrh	r3, [r7, #26]
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3720      	adds	r7, #32
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}

080049c2 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80049c2:	b580      	push	{r7, lr}
 80049c4:	b0a4      	sub	sp, #144	@ 0x90
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	60f8      	str	r0, [r7, #12]
 80049ca:	60b9      	str	r1, [r7, #8]
 80049cc:	4613      	mov	r3, r2
 80049ce:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80049d0:	88fb      	ldrh	r3, [r7, #6]
 80049d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	f000 81db 	beq.w	8004d92 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	461a      	mov	r2, r3
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	00db      	lsls	r3, r3, #3
 80049ee:	4413      	add	r3, r2
 80049f0:	68fa      	ldr	r2, [r7, #12]
 80049f2:	6812      	ldr	r2, [r2, #0]
 80049f4:	4413      	add	r3, r2
 80049f6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80049fa:	881b      	ldrh	r3, [r3, #0]
 80049fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a00:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	699a      	ldr	r2, [r3, #24]
 8004a08:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d907      	bls.n	8004a20 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	699a      	ldr	r2, [r3, #24]
 8004a14:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004a18:	1ad2      	subs	r2, r2, r3
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	619a      	str	r2, [r3, #24]
 8004a1e:	e002      	b.n	8004a26 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	2200      	movs	r2, #0
 8004a24:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	699b      	ldr	r3, [r3, #24]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	f040 80b9 	bne.w	8004ba2 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	785b      	ldrb	r3, [r3, #1]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d126      	bne.n	8004a86 <HAL_PCD_EP_DB_Transmit+0xc4>
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	461a      	mov	r2, r3
 8004a4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a4c:	4413      	add	r3, r2
 8004a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	00da      	lsls	r2, r3, #3
 8004a56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a58:	4413      	add	r3, r2
 8004a5a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004a5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a62:	881b      	ldrh	r3, [r3, #0]
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a6a:	b29a      	uxth	r2, r3
 8004a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a6e:	801a      	strh	r2, [r3, #0]
 8004a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a72:	881b      	ldrh	r3, [r3, #0]
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a7e:	b29a      	uxth	r2, r3
 8004a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a82:	801a      	strh	r2, [r3, #0]
 8004a84:	e01a      	b.n	8004abc <HAL_PCD_EP_DB_Transmit+0xfa>
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	785b      	ldrb	r3, [r3, #1]
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d116      	bne.n	8004abc <HAL_PCD_EP_DB_Transmit+0xfa>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004aa2:	4413      	add	r3, r2
 8004aa4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	00da      	lsls	r2, r3, #3
 8004aac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004aae:	4413      	add	r3, r2
 8004ab0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004ab4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ab8:	2200      	movs	r2, #0
 8004aba:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	785b      	ldrb	r3, [r3, #1]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d126      	bne.n	8004b18 <HAL_PCD_EP_DB_Transmit+0x156>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	61fb      	str	r3, [r7, #28]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	461a      	mov	r2, r3
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	4413      	add	r3, r2
 8004ae0:	61fb      	str	r3, [r7, #28]
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	00da      	lsls	r2, r3, #3
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	4413      	add	r3, r2
 8004aec:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004af0:	61bb      	str	r3, [r7, #24]
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	881b      	ldrh	r3, [r3, #0]
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004afc:	b29a      	uxth	r2, r3
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	801a      	strh	r2, [r3, #0]
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	881b      	ldrh	r3, [r3, #0]
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b10:	b29a      	uxth	r2, r3
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	801a      	strh	r2, [r3, #0]
 8004b16:	e017      	b.n	8004b48 <HAL_PCD_EP_DB_Transmit+0x186>
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	785b      	ldrb	r3, [r3, #1]
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d113      	bne.n	8004b48 <HAL_PCD_EP_DB_Transmit+0x186>
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b2e:	4413      	add	r3, r2
 8004b30:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	00da      	lsls	r2, r3, #3
 8004b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b3a:	4413      	add	r3, r2
 8004b3c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004b40:	623b      	str	r3, [r7, #32]
 8004b42:	6a3b      	ldr	r3, [r7, #32]
 8004b44:	2200      	movs	r2, #0
 8004b46:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	4619      	mov	r1, r3
 8004b4e:	68f8      	ldr	r0, [r7, #12]
 8004b50:	f007 ff2f 	bl	800c9b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004b54:	88fb      	ldrh	r3, [r7, #6]
 8004b56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	f000 82fa 	beq.w	8005154 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	461a      	mov	r2, r3
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	4413      	add	r3, r2
 8004b6e:	881b      	ldrh	r3, [r3, #0]
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b7a:	82fb      	strh	r3, [r7, #22]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	461a      	mov	r2, r3
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	441a      	add	r2, r3
 8004b8a:	8afb      	ldrh	r3, [r7, #22]
 8004b8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b94:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004b98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	8013      	strh	r3, [r2, #0]
 8004ba0:	e2d8      	b.n	8005154 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004ba2:	88fb      	ldrh	r3, [r7, #6]
 8004ba4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d021      	beq.n	8004bf0 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	4413      	add	r3, r2
 8004bba:	881b      	ldrh	r3, [r3, #0]
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bc6:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	461a      	mov	r2, r3
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	441a      	add	r2, r3
 8004bd8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8004bdc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004be0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004be4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004be8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	f040 82ac 	bne.w	8005154 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	695a      	ldr	r2, [r3, #20]
 8004c00:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004c04:	441a      	add	r2, r3
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	69da      	ldr	r2, [r3, #28]
 8004c0e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004c12:	441a      	add	r2, r3
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	6a1a      	ldr	r2, [r3, #32]
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	691b      	ldr	r3, [r3, #16]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d30b      	bcc.n	8004c3c <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	691b      	ldr	r3, [r3, #16]
 8004c28:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	6a1a      	ldr	r2, [r3, #32]
 8004c30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c34:	1ad2      	subs	r2, r2, r3
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	621a      	str	r2, [r3, #32]
 8004c3a:	e017      	b.n	8004c6c <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	6a1b      	ldr	r3, [r3, #32]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d108      	bne.n	8004c56 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8004c44:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004c48:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004c54:	e00a      	b.n	8004c6c <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	6a1b      	ldr	r3, [r3, #32]
 8004c62:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	785b      	ldrb	r3, [r3, #1]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d165      	bne.n	8004d40 <HAL_PCD_EP_DB_Transmit+0x37e>
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	461a      	mov	r2, r3
 8004c86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c88:	4413      	add	r3, r2
 8004c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	00da      	lsls	r2, r3, #3
 8004c92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c94:	4413      	add	r3, r2
 8004c96:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004c9a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004c9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c9e:	881b      	ldrh	r3, [r3, #0]
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ca6:	b29a      	uxth	r2, r3
 8004ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004caa:	801a      	strh	r2, [r3, #0]
 8004cac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004cb0:	2b3e      	cmp	r3, #62	@ 0x3e
 8004cb2:	d91d      	bls.n	8004cf0 <HAL_PCD_EP_DB_Transmit+0x32e>
 8004cb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004cb8:	095b      	lsrs	r3, r3, #5
 8004cba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004cbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004cc0:	f003 031f 	and.w	r3, r3, #31
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d102      	bne.n	8004cce <HAL_PCD_EP_DB_Transmit+0x30c>
 8004cc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cd0:	881b      	ldrh	r3, [r3, #0]
 8004cd2:	b29a      	uxth	r2, r3
 8004cd4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	029b      	lsls	r3, r3, #10
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ce4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ce8:	b29a      	uxth	r2, r3
 8004cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cec:	801a      	strh	r2, [r3, #0]
 8004cee:	e044      	b.n	8004d7a <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004cf0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d10a      	bne.n	8004d0e <HAL_PCD_EP_DB_Transmit+0x34c>
 8004cf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cfa:	881b      	ldrh	r3, [r3, #0]
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d06:	b29a      	uxth	r2, r3
 8004d08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d0a:	801a      	strh	r2, [r3, #0]
 8004d0c:	e035      	b.n	8004d7a <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004d0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d12:	085b      	lsrs	r3, r3, #1
 8004d14:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d16:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d1a:	f003 0301 	and.w	r3, r3, #1
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d002      	beq.n	8004d28 <HAL_PCD_EP_DB_Transmit+0x366>
 8004d22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d24:	3301      	adds	r3, #1
 8004d26:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d2a:	881b      	ldrh	r3, [r3, #0]
 8004d2c:	b29a      	uxth	r2, r3
 8004d2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	029b      	lsls	r3, r3, #10
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	4313      	orrs	r3, r2
 8004d38:	b29a      	uxth	r2, r3
 8004d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d3c:	801a      	strh	r2, [r3, #0]
 8004d3e:	e01c      	b.n	8004d7a <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	785b      	ldrb	r3, [r3, #1]
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d118      	bne.n	8004d7a <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	461a      	mov	r2, r3
 8004d5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d5c:	4413      	add	r3, r2
 8004d5e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	00da      	lsls	r2, r3, #3
 8004d66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d68:	4413      	add	r3, r2
 8004d6a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004d6e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d70:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d74:	b29a      	uxth	r2, r3
 8004d76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d78:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6818      	ldr	r0, [r3, #0]
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	6959      	ldr	r1, [r3, #20]
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	891a      	ldrh	r2, [r3, #8]
 8004d86:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	f005 fed0 	bl	800ab30 <USB_WritePMA>
 8004d90:	e1e0      	b.n	8005154 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	00db      	lsls	r3, r3, #3
 8004da4:	4413      	add	r3, r2
 8004da6:	68fa      	ldr	r2, [r7, #12]
 8004da8:	6812      	ldr	r2, [r2, #0]
 8004daa:	4413      	add	r3, r2
 8004dac:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004db0:	881b      	ldrh	r3, [r3, #0]
 8004db2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004db6:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	699a      	ldr	r2, [r3, #24]
 8004dbe:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d307      	bcc.n	8004dd6 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	699a      	ldr	r2, [r3, #24]
 8004dca:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004dce:	1ad2      	subs	r2, r2, r3
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	619a      	str	r2, [r3, #24]
 8004dd4:	e002      	b.n	8004ddc <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	699b      	ldr	r3, [r3, #24]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	f040 80c0 	bne.w	8004f66 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	785b      	ldrb	r3, [r3, #1]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d126      	bne.n	8004e3c <HAL_PCD_EP_DB_Transmit+0x47a>
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	461a      	mov	r2, r3
 8004e00:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004e02:	4413      	add	r3, r2
 8004e04:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	00da      	lsls	r2, r3, #3
 8004e0c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004e0e:	4413      	add	r3, r2
 8004e10:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004e14:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004e16:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004e18:	881b      	ldrh	r3, [r3, #0]
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e20:	b29a      	uxth	r2, r3
 8004e22:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004e24:	801a      	strh	r2, [r3, #0]
 8004e26:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004e28:	881b      	ldrh	r3, [r3, #0]
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e34:	b29a      	uxth	r2, r3
 8004e36:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004e38:	801a      	strh	r2, [r3, #0]
 8004e3a:	e01a      	b.n	8004e72 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	785b      	ldrb	r3, [r3, #1]
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d116      	bne.n	8004e72 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	667b      	str	r3, [r7, #100]	@ 0x64
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	461a      	mov	r2, r3
 8004e56:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e58:	4413      	add	r3, r2
 8004e5a:	667b      	str	r3, [r7, #100]	@ 0x64
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	00da      	lsls	r2, r3, #3
 8004e62:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e64:	4413      	add	r3, r2
 8004e66:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004e6a:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e6c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004e6e:	2200      	movs	r2, #0
 8004e70:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	677b      	str	r3, [r7, #116]	@ 0x74
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	785b      	ldrb	r3, [r3, #1]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d12b      	bne.n	8004ed8 <HAL_PCD_EP_DB_Transmit+0x516>
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	461a      	mov	r2, r3
 8004e92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e94:	4413      	add	r3, r2
 8004e96:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	00da      	lsls	r2, r3, #3
 8004e9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ea0:	4413      	add	r3, r2
 8004ea2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004ea6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004eaa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004eae:	881b      	ldrh	r3, [r3, #0]
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004eb6:	b29a      	uxth	r2, r3
 8004eb8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004ebc:	801a      	strh	r2, [r3, #0]
 8004ebe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004ec2:	881b      	ldrh	r3, [r3, #0]
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004eca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ece:	b29a      	uxth	r2, r3
 8004ed0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004ed4:	801a      	strh	r2, [r3, #0]
 8004ed6:	e017      	b.n	8004f08 <HAL_PCD_EP_DB_Transmit+0x546>
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	785b      	ldrb	r3, [r3, #1]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d113      	bne.n	8004f08 <HAL_PCD_EP_DB_Transmit+0x546>
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	461a      	mov	r2, r3
 8004eec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004eee:	4413      	add	r3, r2
 8004ef0:	677b      	str	r3, [r7, #116]	@ 0x74
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	00da      	lsls	r2, r3, #3
 8004ef8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004efa:	4413      	add	r3, r2
 8004efc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004f00:	673b      	str	r3, [r7, #112]	@ 0x70
 8004f02:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004f04:	2200      	movs	r2, #0
 8004f06:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	68f8      	ldr	r0, [r7, #12]
 8004f10:	f007 fd4f 	bl	800c9b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004f14:	88fb      	ldrh	r3, [r7, #6]
 8004f16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	f040 811a 	bne.w	8005154 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	461a      	mov	r2, r3
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	4413      	add	r3, r2
 8004f2e:	881b      	ldrh	r3, [r3, #0]
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f3a:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	461a      	mov	r2, r3
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	441a      	add	r2, r3
 8004f4c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004f50:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f54:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f58:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004f5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	8013      	strh	r3, [r2, #0]
 8004f64:	e0f6      	b.n	8005154 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004f66:	88fb      	ldrh	r3, [r7, #6]
 8004f68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d121      	bne.n	8004fb4 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	461a      	mov	r2, r3
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	4413      	add	r3, r2
 8004f7e:	881b      	ldrh	r3, [r3, #0]
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f8a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	461a      	mov	r2, r3
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	441a      	add	r2, r3
 8004f9c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004fa0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004fa4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004fa8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004fac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	f040 80ca 	bne.w	8005154 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	695a      	ldr	r2, [r3, #20]
 8004fc4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004fc8:	441a      	add	r2, r3
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	69da      	ldr	r2, [r3, #28]
 8004fd2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004fd6:	441a      	add	r2, r3
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	6a1a      	ldr	r2, [r3, #32]
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	691b      	ldr	r3, [r3, #16]
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d30b      	bcc.n	8005000 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	691b      	ldr	r3, [r3, #16]
 8004fec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	6a1a      	ldr	r2, [r3, #32]
 8004ff4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ff8:	1ad2      	subs	r2, r2, r3
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	621a      	str	r2, [r3, #32]
 8004ffe:	e017      	b.n	8005030 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	6a1b      	ldr	r3, [r3, #32]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d108      	bne.n	800501a <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8005008:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800500c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	2200      	movs	r2, #0
 8005014:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005018:	e00a      	b.n	8005030 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	6a1b      	ldr	r3, [r3, #32]
 800501e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	2200      	movs	r2, #0
 8005026:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	2200      	movs	r2, #0
 800502c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	657b      	str	r3, [r7, #84]	@ 0x54
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	785b      	ldrb	r3, [r3, #1]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d165      	bne.n	800510a <HAL_PCD_EP_DB_Transmit+0x748>
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800504c:	b29b      	uxth	r3, r3
 800504e:	461a      	mov	r2, r3
 8005050:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005052:	4413      	add	r3, r2
 8005054:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	00da      	lsls	r2, r3, #3
 800505c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800505e:	4413      	add	r3, r2
 8005060:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005064:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005066:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005068:	881b      	ldrh	r3, [r3, #0]
 800506a:	b29b      	uxth	r3, r3
 800506c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005070:	b29a      	uxth	r2, r3
 8005072:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005074:	801a      	strh	r2, [r3, #0]
 8005076:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800507a:	2b3e      	cmp	r3, #62	@ 0x3e
 800507c:	d91d      	bls.n	80050ba <HAL_PCD_EP_DB_Transmit+0x6f8>
 800507e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005082:	095b      	lsrs	r3, r3, #5
 8005084:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005086:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800508a:	f003 031f 	and.w	r3, r3, #31
 800508e:	2b00      	cmp	r3, #0
 8005090:	d102      	bne.n	8005098 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8005092:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005094:	3b01      	subs	r3, #1
 8005096:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005098:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800509a:	881b      	ldrh	r3, [r3, #0]
 800509c:	b29a      	uxth	r2, r3
 800509e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	029b      	lsls	r3, r3, #10
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	4313      	orrs	r3, r2
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050b2:	b29a      	uxth	r2, r3
 80050b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80050b6:	801a      	strh	r2, [r3, #0]
 80050b8:	e041      	b.n	800513e <HAL_PCD_EP_DB_Transmit+0x77c>
 80050ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d10a      	bne.n	80050d8 <HAL_PCD_EP_DB_Transmit+0x716>
 80050c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80050c4:	881b      	ldrh	r3, [r3, #0]
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050d0:	b29a      	uxth	r2, r3
 80050d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80050d4:	801a      	strh	r2, [r3, #0]
 80050d6:	e032      	b.n	800513e <HAL_PCD_EP_DB_Transmit+0x77c>
 80050d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80050dc:	085b      	lsrs	r3, r3, #1
 80050de:	66bb      	str	r3, [r7, #104]	@ 0x68
 80050e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80050e4:	f003 0301 	and.w	r3, r3, #1
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d002      	beq.n	80050f2 <HAL_PCD_EP_DB_Transmit+0x730>
 80050ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80050ee:	3301      	adds	r3, #1
 80050f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80050f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80050f4:	881b      	ldrh	r3, [r3, #0]
 80050f6:	b29a      	uxth	r2, r3
 80050f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	029b      	lsls	r3, r3, #10
 80050fe:	b29b      	uxth	r3, r3
 8005100:	4313      	orrs	r3, r2
 8005102:	b29a      	uxth	r2, r3
 8005104:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005106:	801a      	strh	r2, [r3, #0]
 8005108:	e019      	b.n	800513e <HAL_PCD_EP_DB_Transmit+0x77c>
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	785b      	ldrb	r3, [r3, #1]
 800510e:	2b01      	cmp	r3, #1
 8005110:	d115      	bne.n	800513e <HAL_PCD_EP_DB_Transmit+0x77c>
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800511a:	b29b      	uxth	r3, r3
 800511c:	461a      	mov	r2, r3
 800511e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005120:	4413      	add	r3, r2
 8005122:	657b      	str	r3, [r7, #84]	@ 0x54
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	00da      	lsls	r2, r3, #3
 800512a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800512c:	4413      	add	r3, r2
 800512e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005132:	653b      	str	r3, [r7, #80]	@ 0x50
 8005134:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005138:	b29a      	uxth	r2, r3
 800513a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800513c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6818      	ldr	r0, [r3, #0]
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	6959      	ldr	r1, [r3, #20]
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	895a      	ldrh	r2, [r3, #10]
 800514a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800514e:	b29b      	uxth	r3, r3
 8005150:	f005 fcee 	bl	800ab30 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	461a      	mov	r2, r3
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	4413      	add	r3, r2
 8005162:	881b      	ldrh	r3, [r3, #0]
 8005164:	b29b      	uxth	r3, r3
 8005166:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800516a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800516e:	82bb      	strh	r3, [r7, #20]
 8005170:	8abb      	ldrh	r3, [r7, #20]
 8005172:	f083 0310 	eor.w	r3, r3, #16
 8005176:	82bb      	strh	r3, [r7, #20]
 8005178:	8abb      	ldrh	r3, [r7, #20]
 800517a:	f083 0320 	eor.w	r3, r3, #32
 800517e:	82bb      	strh	r3, [r7, #20]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	461a      	mov	r2, r3
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	441a      	add	r2, r3
 800518e:	8abb      	ldrh	r3, [r7, #20]
 8005190:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005194:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005198:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800519c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3790      	adds	r7, #144	@ 0x90
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}

080051ae <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80051ae:	b480      	push	{r7}
 80051b0:	b087      	sub	sp, #28
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	60f8      	str	r0, [r7, #12]
 80051b6:	607b      	str	r3, [r7, #4]
 80051b8:	460b      	mov	r3, r1
 80051ba:	817b      	strh	r3, [r7, #10]
 80051bc:	4613      	mov	r3, r2
 80051be:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80051c0:	897b      	ldrh	r3, [r7, #10]
 80051c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d00b      	beq.n	80051e4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80051cc:	897b      	ldrh	r3, [r7, #10]
 80051ce:	f003 0207 	and.w	r2, r3, #7
 80051d2:	4613      	mov	r3, r2
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	4413      	add	r3, r2
 80051d8:	00db      	lsls	r3, r3, #3
 80051da:	3310      	adds	r3, #16
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	4413      	add	r3, r2
 80051e0:	617b      	str	r3, [r7, #20]
 80051e2:	e009      	b.n	80051f8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80051e4:	897a      	ldrh	r2, [r7, #10]
 80051e6:	4613      	mov	r3, r2
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	4413      	add	r3, r2
 80051ec:	00db      	lsls	r3, r3, #3
 80051ee:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	4413      	add	r3, r2
 80051f6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80051f8:	893b      	ldrh	r3, [r7, #8]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d107      	bne.n	800520e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	2200      	movs	r2, #0
 8005202:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	b29a      	uxth	r2, r3
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	80da      	strh	r2, [r3, #6]
 800520c:	e00b      	b.n	8005226 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	2201      	movs	r2, #1
 8005212:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	b29a      	uxth	r2, r3
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	0c1b      	lsrs	r3, r3, #16
 8005220:	b29a      	uxth	r2, r3
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005226:	2300      	movs	r3, #0
}
 8005228:	4618      	mov	r0, r3
 800522a:	371c      	adds	r7, #28
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr

08005234 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005234:	b480      	push	{r7}
 8005236:	b085      	sub	sp, #20
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2201      	movs	r2, #1
 8005246:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8005258:	b29b      	uxth	r3, r3
 800525a:	f043 0301 	orr.w	r3, r3, #1
 800525e:	b29a      	uxth	r2, r3
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800526c:	b29b      	uxth	r3, r3
 800526e:	f043 0302 	orr.w	r3, r3, #2
 8005272:	b29a      	uxth	r2, r3
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800527a:	2300      	movs	r3, #0
}
 800527c:	4618      	mov	r0, r3
 800527e:	3714      	adds	r7, #20
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005288:	b480      	push	{r7}
 800528a:	b085      	sub	sp, #20
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d141      	bne.n	800531a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005296:	4b4b      	ldr	r3, [pc, #300]	@ (80053c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800529e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052a2:	d131      	bne.n	8005308 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80052a4:	4b47      	ldr	r3, [pc, #284]	@ (80053c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052aa:	4a46      	ldr	r2, [pc, #280]	@ (80053c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80052b4:	4b43      	ldr	r3, [pc, #268]	@ (80053c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80052bc:	4a41      	ldr	r2, [pc, #260]	@ (80053c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80052c2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80052c4:	4b40      	ldr	r3, [pc, #256]	@ (80053c8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2232      	movs	r2, #50	@ 0x32
 80052ca:	fb02 f303 	mul.w	r3, r2, r3
 80052ce:	4a3f      	ldr	r2, [pc, #252]	@ (80053cc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80052d0:	fba2 2303 	umull	r2, r3, r2, r3
 80052d4:	0c9b      	lsrs	r3, r3, #18
 80052d6:	3301      	adds	r3, #1
 80052d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80052da:	e002      	b.n	80052e2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	3b01      	subs	r3, #1
 80052e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80052e2:	4b38      	ldr	r3, [pc, #224]	@ (80053c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052e4:	695b      	ldr	r3, [r3, #20]
 80052e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052ee:	d102      	bne.n	80052f6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d1f2      	bne.n	80052dc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80052f6:	4b33      	ldr	r3, [pc, #204]	@ (80053c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052f8:	695b      	ldr	r3, [r3, #20]
 80052fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005302:	d158      	bne.n	80053b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005304:	2303      	movs	r3, #3
 8005306:	e057      	b.n	80053b8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005308:	4b2e      	ldr	r3, [pc, #184]	@ (80053c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800530a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800530e:	4a2d      	ldr	r2, [pc, #180]	@ (80053c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005310:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005314:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005318:	e04d      	b.n	80053b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005320:	d141      	bne.n	80053a6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005322:	4b28      	ldr	r3, [pc, #160]	@ (80053c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800532a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800532e:	d131      	bne.n	8005394 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005330:	4b24      	ldr	r3, [pc, #144]	@ (80053c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005332:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005336:	4a23      	ldr	r2, [pc, #140]	@ (80053c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005338:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800533c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005340:	4b20      	ldr	r3, [pc, #128]	@ (80053c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005348:	4a1e      	ldr	r2, [pc, #120]	@ (80053c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800534a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800534e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005350:	4b1d      	ldr	r3, [pc, #116]	@ (80053c8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2232      	movs	r2, #50	@ 0x32
 8005356:	fb02 f303 	mul.w	r3, r2, r3
 800535a:	4a1c      	ldr	r2, [pc, #112]	@ (80053cc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800535c:	fba2 2303 	umull	r2, r3, r2, r3
 8005360:	0c9b      	lsrs	r3, r3, #18
 8005362:	3301      	adds	r3, #1
 8005364:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005366:	e002      	b.n	800536e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	3b01      	subs	r3, #1
 800536c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800536e:	4b15      	ldr	r3, [pc, #84]	@ (80053c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005370:	695b      	ldr	r3, [r3, #20]
 8005372:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005376:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800537a:	d102      	bne.n	8005382 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d1f2      	bne.n	8005368 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005382:	4b10      	ldr	r3, [pc, #64]	@ (80053c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005384:	695b      	ldr	r3, [r3, #20]
 8005386:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800538a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800538e:	d112      	bne.n	80053b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	e011      	b.n	80053b8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005394:	4b0b      	ldr	r3, [pc, #44]	@ (80053c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005396:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800539a:	4a0a      	ldr	r2, [pc, #40]	@ (80053c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800539c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053a0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80053a4:	e007      	b.n	80053b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80053a6:	4b07      	ldr	r3, [pc, #28]	@ (80053c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80053ae:	4a05      	ldr	r2, [pc, #20]	@ (80053c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053b0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80053b4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80053b6:	2300      	movs	r3, #0
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3714      	adds	r7, #20
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr
 80053c4:	40007000 	.word	0x40007000
 80053c8:	20000000 	.word	0x20000000
 80053cc:	431bde83 	.word	0x431bde83

080053d0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80053d0:	b480      	push	{r7}
 80053d2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80053d4:	4b05      	ldr	r3, [pc, #20]	@ (80053ec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	4a04      	ldr	r2, [pc, #16]	@ (80053ec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80053da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80053de:	6093      	str	r3, [r2, #8]
}
 80053e0:	bf00      	nop
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop
 80053ec:	40007000 	.word	0x40007000

080053f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b088      	sub	sp, #32
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d101      	bne.n	8005402 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e2fe      	b.n	8005a00 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0301 	and.w	r3, r3, #1
 800540a:	2b00      	cmp	r3, #0
 800540c:	d075      	beq.n	80054fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800540e:	4b97      	ldr	r3, [pc, #604]	@ (800566c <HAL_RCC_OscConfig+0x27c>)
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	f003 030c 	and.w	r3, r3, #12
 8005416:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005418:	4b94      	ldr	r3, [pc, #592]	@ (800566c <HAL_RCC_OscConfig+0x27c>)
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	f003 0303 	and.w	r3, r3, #3
 8005420:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	2b0c      	cmp	r3, #12
 8005426:	d102      	bne.n	800542e <HAL_RCC_OscConfig+0x3e>
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	2b03      	cmp	r3, #3
 800542c:	d002      	beq.n	8005434 <HAL_RCC_OscConfig+0x44>
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	2b08      	cmp	r3, #8
 8005432:	d10b      	bne.n	800544c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005434:	4b8d      	ldr	r3, [pc, #564]	@ (800566c <HAL_RCC_OscConfig+0x27c>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800543c:	2b00      	cmp	r3, #0
 800543e:	d05b      	beq.n	80054f8 <HAL_RCC_OscConfig+0x108>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d157      	bne.n	80054f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e2d9      	b.n	8005a00 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005454:	d106      	bne.n	8005464 <HAL_RCC_OscConfig+0x74>
 8005456:	4b85      	ldr	r3, [pc, #532]	@ (800566c <HAL_RCC_OscConfig+0x27c>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a84      	ldr	r2, [pc, #528]	@ (800566c <HAL_RCC_OscConfig+0x27c>)
 800545c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005460:	6013      	str	r3, [r2, #0]
 8005462:	e01d      	b.n	80054a0 <HAL_RCC_OscConfig+0xb0>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800546c:	d10c      	bne.n	8005488 <HAL_RCC_OscConfig+0x98>
 800546e:	4b7f      	ldr	r3, [pc, #508]	@ (800566c <HAL_RCC_OscConfig+0x27c>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a7e      	ldr	r2, [pc, #504]	@ (800566c <HAL_RCC_OscConfig+0x27c>)
 8005474:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005478:	6013      	str	r3, [r2, #0]
 800547a:	4b7c      	ldr	r3, [pc, #496]	@ (800566c <HAL_RCC_OscConfig+0x27c>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a7b      	ldr	r2, [pc, #492]	@ (800566c <HAL_RCC_OscConfig+0x27c>)
 8005480:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005484:	6013      	str	r3, [r2, #0]
 8005486:	e00b      	b.n	80054a0 <HAL_RCC_OscConfig+0xb0>
 8005488:	4b78      	ldr	r3, [pc, #480]	@ (800566c <HAL_RCC_OscConfig+0x27c>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a77      	ldr	r2, [pc, #476]	@ (800566c <HAL_RCC_OscConfig+0x27c>)
 800548e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005492:	6013      	str	r3, [r2, #0]
 8005494:	4b75      	ldr	r3, [pc, #468]	@ (800566c <HAL_RCC_OscConfig+0x27c>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a74      	ldr	r2, [pc, #464]	@ (800566c <HAL_RCC_OscConfig+0x27c>)
 800549a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800549e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d013      	beq.n	80054d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054a8:	f7fc fa70 	bl	800198c <HAL_GetTick>
 80054ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80054ae:	e008      	b.n	80054c2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054b0:	f7fc fa6c 	bl	800198c <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	2b64      	cmp	r3, #100	@ 0x64
 80054bc:	d901      	bls.n	80054c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e29e      	b.n	8005a00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80054c2:	4b6a      	ldr	r3, [pc, #424]	@ (800566c <HAL_RCC_OscConfig+0x27c>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d0f0      	beq.n	80054b0 <HAL_RCC_OscConfig+0xc0>
 80054ce:	e014      	b.n	80054fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054d0:	f7fc fa5c 	bl	800198c <HAL_GetTick>
 80054d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80054d6:	e008      	b.n	80054ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054d8:	f7fc fa58 	bl	800198c <HAL_GetTick>
 80054dc:	4602      	mov	r2, r0
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	2b64      	cmp	r3, #100	@ 0x64
 80054e4:	d901      	bls.n	80054ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80054e6:	2303      	movs	r3, #3
 80054e8:	e28a      	b.n	8005a00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80054ea:	4b60      	ldr	r3, [pc, #384]	@ (800566c <HAL_RCC_OscConfig+0x27c>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d1f0      	bne.n	80054d8 <HAL_RCC_OscConfig+0xe8>
 80054f6:	e000      	b.n	80054fa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0302 	and.w	r3, r3, #2
 8005502:	2b00      	cmp	r3, #0
 8005504:	d075      	beq.n	80055f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005506:	4b59      	ldr	r3, [pc, #356]	@ (800566c <HAL_RCC_OscConfig+0x27c>)
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	f003 030c 	and.w	r3, r3, #12
 800550e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005510:	4b56      	ldr	r3, [pc, #344]	@ (800566c <HAL_RCC_OscConfig+0x27c>)
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	f003 0303 	and.w	r3, r3, #3
 8005518:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	2b0c      	cmp	r3, #12
 800551e:	d102      	bne.n	8005526 <HAL_RCC_OscConfig+0x136>
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	2b02      	cmp	r3, #2
 8005524:	d002      	beq.n	800552c <HAL_RCC_OscConfig+0x13c>
 8005526:	69bb      	ldr	r3, [r7, #24]
 8005528:	2b04      	cmp	r3, #4
 800552a:	d11f      	bne.n	800556c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800552c:	4b4f      	ldr	r3, [pc, #316]	@ (800566c <HAL_RCC_OscConfig+0x27c>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005534:	2b00      	cmp	r3, #0
 8005536:	d005      	beq.n	8005544 <HAL_RCC_OscConfig+0x154>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d101      	bne.n	8005544 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	e25d      	b.n	8005a00 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005544:	4b49      	ldr	r3, [pc, #292]	@ (800566c <HAL_RCC_OscConfig+0x27c>)
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	691b      	ldr	r3, [r3, #16]
 8005550:	061b      	lsls	r3, r3, #24
 8005552:	4946      	ldr	r1, [pc, #280]	@ (800566c <HAL_RCC_OscConfig+0x27c>)
 8005554:	4313      	orrs	r3, r2
 8005556:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005558:	4b45      	ldr	r3, [pc, #276]	@ (8005670 <HAL_RCC_OscConfig+0x280>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4618      	mov	r0, r3
 800555e:	f7fc f9c9 	bl	80018f4 <HAL_InitTick>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d043      	beq.n	80055f0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e249      	b.n	8005a00 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d023      	beq.n	80055bc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005574:	4b3d      	ldr	r3, [pc, #244]	@ (800566c <HAL_RCC_OscConfig+0x27c>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a3c      	ldr	r2, [pc, #240]	@ (800566c <HAL_RCC_OscConfig+0x27c>)
 800557a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800557e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005580:	f7fc fa04 	bl	800198c <HAL_GetTick>
 8005584:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005586:	e008      	b.n	800559a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005588:	f7fc fa00 	bl	800198c <HAL_GetTick>
 800558c:	4602      	mov	r2, r0
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	1ad3      	subs	r3, r2, r3
 8005592:	2b02      	cmp	r3, #2
 8005594:	d901      	bls.n	800559a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005596:	2303      	movs	r3, #3
 8005598:	e232      	b.n	8005a00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800559a:	4b34      	ldr	r3, [pc, #208]	@ (800566c <HAL_RCC_OscConfig+0x27c>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d0f0      	beq.n	8005588 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055a6:	4b31      	ldr	r3, [pc, #196]	@ (800566c <HAL_RCC_OscConfig+0x27c>)
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	061b      	lsls	r3, r3, #24
 80055b4:	492d      	ldr	r1, [pc, #180]	@ (800566c <HAL_RCC_OscConfig+0x27c>)
 80055b6:	4313      	orrs	r3, r2
 80055b8:	604b      	str	r3, [r1, #4]
 80055ba:	e01a      	b.n	80055f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055bc:	4b2b      	ldr	r3, [pc, #172]	@ (800566c <HAL_RCC_OscConfig+0x27c>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a2a      	ldr	r2, [pc, #168]	@ (800566c <HAL_RCC_OscConfig+0x27c>)
 80055c2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80055c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055c8:	f7fc f9e0 	bl	800198c <HAL_GetTick>
 80055cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80055ce:	e008      	b.n	80055e2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055d0:	f7fc f9dc 	bl	800198c <HAL_GetTick>
 80055d4:	4602      	mov	r2, r0
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	2b02      	cmp	r3, #2
 80055dc:	d901      	bls.n	80055e2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e20e      	b.n	8005a00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80055e2:	4b22      	ldr	r3, [pc, #136]	@ (800566c <HAL_RCC_OscConfig+0x27c>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d1f0      	bne.n	80055d0 <HAL_RCC_OscConfig+0x1e0>
 80055ee:	e000      	b.n	80055f2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80055f0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 0308 	and.w	r3, r3, #8
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d041      	beq.n	8005682 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	695b      	ldr	r3, [r3, #20]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d01c      	beq.n	8005640 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005606:	4b19      	ldr	r3, [pc, #100]	@ (800566c <HAL_RCC_OscConfig+0x27c>)
 8005608:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800560c:	4a17      	ldr	r2, [pc, #92]	@ (800566c <HAL_RCC_OscConfig+0x27c>)
 800560e:	f043 0301 	orr.w	r3, r3, #1
 8005612:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005616:	f7fc f9b9 	bl	800198c <HAL_GetTick>
 800561a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800561c:	e008      	b.n	8005630 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800561e:	f7fc f9b5 	bl	800198c <HAL_GetTick>
 8005622:	4602      	mov	r2, r0
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	2b02      	cmp	r3, #2
 800562a:	d901      	bls.n	8005630 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800562c:	2303      	movs	r3, #3
 800562e:	e1e7      	b.n	8005a00 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005630:	4b0e      	ldr	r3, [pc, #56]	@ (800566c <HAL_RCC_OscConfig+0x27c>)
 8005632:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005636:	f003 0302 	and.w	r3, r3, #2
 800563a:	2b00      	cmp	r3, #0
 800563c:	d0ef      	beq.n	800561e <HAL_RCC_OscConfig+0x22e>
 800563e:	e020      	b.n	8005682 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005640:	4b0a      	ldr	r3, [pc, #40]	@ (800566c <HAL_RCC_OscConfig+0x27c>)
 8005642:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005646:	4a09      	ldr	r2, [pc, #36]	@ (800566c <HAL_RCC_OscConfig+0x27c>)
 8005648:	f023 0301 	bic.w	r3, r3, #1
 800564c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005650:	f7fc f99c 	bl	800198c <HAL_GetTick>
 8005654:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005656:	e00d      	b.n	8005674 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005658:	f7fc f998 	bl	800198c <HAL_GetTick>
 800565c:	4602      	mov	r2, r0
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	2b02      	cmp	r3, #2
 8005664:	d906      	bls.n	8005674 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	e1ca      	b.n	8005a00 <HAL_RCC_OscConfig+0x610>
 800566a:	bf00      	nop
 800566c:	40021000 	.word	0x40021000
 8005670:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005674:	4b8c      	ldr	r3, [pc, #560]	@ (80058a8 <HAL_RCC_OscConfig+0x4b8>)
 8005676:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800567a:	f003 0302 	and.w	r3, r3, #2
 800567e:	2b00      	cmp	r3, #0
 8005680:	d1ea      	bne.n	8005658 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 0304 	and.w	r3, r3, #4
 800568a:	2b00      	cmp	r3, #0
 800568c:	f000 80a6 	beq.w	80057dc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005690:	2300      	movs	r3, #0
 8005692:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005694:	4b84      	ldr	r3, [pc, #528]	@ (80058a8 <HAL_RCC_OscConfig+0x4b8>)
 8005696:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005698:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800569c:	2b00      	cmp	r3, #0
 800569e:	d101      	bne.n	80056a4 <HAL_RCC_OscConfig+0x2b4>
 80056a0:	2301      	movs	r3, #1
 80056a2:	e000      	b.n	80056a6 <HAL_RCC_OscConfig+0x2b6>
 80056a4:	2300      	movs	r3, #0
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d00d      	beq.n	80056c6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056aa:	4b7f      	ldr	r3, [pc, #508]	@ (80058a8 <HAL_RCC_OscConfig+0x4b8>)
 80056ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056ae:	4a7e      	ldr	r2, [pc, #504]	@ (80058a8 <HAL_RCC_OscConfig+0x4b8>)
 80056b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80056b6:	4b7c      	ldr	r3, [pc, #496]	@ (80058a8 <HAL_RCC_OscConfig+0x4b8>)
 80056b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056be:	60fb      	str	r3, [r7, #12]
 80056c0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80056c2:	2301      	movs	r3, #1
 80056c4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056c6:	4b79      	ldr	r3, [pc, #484]	@ (80058ac <HAL_RCC_OscConfig+0x4bc>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d118      	bne.n	8005704 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056d2:	4b76      	ldr	r3, [pc, #472]	@ (80058ac <HAL_RCC_OscConfig+0x4bc>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a75      	ldr	r2, [pc, #468]	@ (80058ac <HAL_RCC_OscConfig+0x4bc>)
 80056d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056de:	f7fc f955 	bl	800198c <HAL_GetTick>
 80056e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056e4:	e008      	b.n	80056f8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056e6:	f7fc f951 	bl	800198c <HAL_GetTick>
 80056ea:	4602      	mov	r2, r0
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	1ad3      	subs	r3, r2, r3
 80056f0:	2b02      	cmp	r3, #2
 80056f2:	d901      	bls.n	80056f8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80056f4:	2303      	movs	r3, #3
 80056f6:	e183      	b.n	8005a00 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056f8:	4b6c      	ldr	r3, [pc, #432]	@ (80058ac <HAL_RCC_OscConfig+0x4bc>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005700:	2b00      	cmp	r3, #0
 8005702:	d0f0      	beq.n	80056e6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	2b01      	cmp	r3, #1
 800570a:	d108      	bne.n	800571e <HAL_RCC_OscConfig+0x32e>
 800570c:	4b66      	ldr	r3, [pc, #408]	@ (80058a8 <HAL_RCC_OscConfig+0x4b8>)
 800570e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005712:	4a65      	ldr	r2, [pc, #404]	@ (80058a8 <HAL_RCC_OscConfig+0x4b8>)
 8005714:	f043 0301 	orr.w	r3, r3, #1
 8005718:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800571c:	e024      	b.n	8005768 <HAL_RCC_OscConfig+0x378>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	2b05      	cmp	r3, #5
 8005724:	d110      	bne.n	8005748 <HAL_RCC_OscConfig+0x358>
 8005726:	4b60      	ldr	r3, [pc, #384]	@ (80058a8 <HAL_RCC_OscConfig+0x4b8>)
 8005728:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800572c:	4a5e      	ldr	r2, [pc, #376]	@ (80058a8 <HAL_RCC_OscConfig+0x4b8>)
 800572e:	f043 0304 	orr.w	r3, r3, #4
 8005732:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005736:	4b5c      	ldr	r3, [pc, #368]	@ (80058a8 <HAL_RCC_OscConfig+0x4b8>)
 8005738:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800573c:	4a5a      	ldr	r2, [pc, #360]	@ (80058a8 <HAL_RCC_OscConfig+0x4b8>)
 800573e:	f043 0301 	orr.w	r3, r3, #1
 8005742:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005746:	e00f      	b.n	8005768 <HAL_RCC_OscConfig+0x378>
 8005748:	4b57      	ldr	r3, [pc, #348]	@ (80058a8 <HAL_RCC_OscConfig+0x4b8>)
 800574a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800574e:	4a56      	ldr	r2, [pc, #344]	@ (80058a8 <HAL_RCC_OscConfig+0x4b8>)
 8005750:	f023 0301 	bic.w	r3, r3, #1
 8005754:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005758:	4b53      	ldr	r3, [pc, #332]	@ (80058a8 <HAL_RCC_OscConfig+0x4b8>)
 800575a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800575e:	4a52      	ldr	r2, [pc, #328]	@ (80058a8 <HAL_RCC_OscConfig+0x4b8>)
 8005760:	f023 0304 	bic.w	r3, r3, #4
 8005764:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d016      	beq.n	800579e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005770:	f7fc f90c 	bl	800198c <HAL_GetTick>
 8005774:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005776:	e00a      	b.n	800578e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005778:	f7fc f908 	bl	800198c <HAL_GetTick>
 800577c:	4602      	mov	r2, r0
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005786:	4293      	cmp	r3, r2
 8005788:	d901      	bls.n	800578e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	e138      	b.n	8005a00 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800578e:	4b46      	ldr	r3, [pc, #280]	@ (80058a8 <HAL_RCC_OscConfig+0x4b8>)
 8005790:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005794:	f003 0302 	and.w	r3, r3, #2
 8005798:	2b00      	cmp	r3, #0
 800579a:	d0ed      	beq.n	8005778 <HAL_RCC_OscConfig+0x388>
 800579c:	e015      	b.n	80057ca <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800579e:	f7fc f8f5 	bl	800198c <HAL_GetTick>
 80057a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80057a4:	e00a      	b.n	80057bc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057a6:	f7fc f8f1 	bl	800198c <HAL_GetTick>
 80057aa:	4602      	mov	r2, r0
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d901      	bls.n	80057bc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80057b8:	2303      	movs	r3, #3
 80057ba:	e121      	b.n	8005a00 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80057bc:	4b3a      	ldr	r3, [pc, #232]	@ (80058a8 <HAL_RCC_OscConfig+0x4b8>)
 80057be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057c2:	f003 0302 	and.w	r3, r3, #2
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d1ed      	bne.n	80057a6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80057ca:	7ffb      	ldrb	r3, [r7, #31]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d105      	bne.n	80057dc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057d0:	4b35      	ldr	r3, [pc, #212]	@ (80058a8 <HAL_RCC_OscConfig+0x4b8>)
 80057d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057d4:	4a34      	ldr	r2, [pc, #208]	@ (80058a8 <HAL_RCC_OscConfig+0x4b8>)
 80057d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80057da:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 0320 	and.w	r3, r3, #32
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d03c      	beq.n	8005862 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	699b      	ldr	r3, [r3, #24]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d01c      	beq.n	800582a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80057f0:	4b2d      	ldr	r3, [pc, #180]	@ (80058a8 <HAL_RCC_OscConfig+0x4b8>)
 80057f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80057f6:	4a2c      	ldr	r2, [pc, #176]	@ (80058a8 <HAL_RCC_OscConfig+0x4b8>)
 80057f8:	f043 0301 	orr.w	r3, r3, #1
 80057fc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005800:	f7fc f8c4 	bl	800198c <HAL_GetTick>
 8005804:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005806:	e008      	b.n	800581a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005808:	f7fc f8c0 	bl	800198c <HAL_GetTick>
 800580c:	4602      	mov	r2, r0
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	2b02      	cmp	r3, #2
 8005814:	d901      	bls.n	800581a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005816:	2303      	movs	r3, #3
 8005818:	e0f2      	b.n	8005a00 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800581a:	4b23      	ldr	r3, [pc, #140]	@ (80058a8 <HAL_RCC_OscConfig+0x4b8>)
 800581c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005820:	f003 0302 	and.w	r3, r3, #2
 8005824:	2b00      	cmp	r3, #0
 8005826:	d0ef      	beq.n	8005808 <HAL_RCC_OscConfig+0x418>
 8005828:	e01b      	b.n	8005862 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800582a:	4b1f      	ldr	r3, [pc, #124]	@ (80058a8 <HAL_RCC_OscConfig+0x4b8>)
 800582c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005830:	4a1d      	ldr	r2, [pc, #116]	@ (80058a8 <HAL_RCC_OscConfig+0x4b8>)
 8005832:	f023 0301 	bic.w	r3, r3, #1
 8005836:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800583a:	f7fc f8a7 	bl	800198c <HAL_GetTick>
 800583e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005840:	e008      	b.n	8005854 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005842:	f7fc f8a3 	bl	800198c <HAL_GetTick>
 8005846:	4602      	mov	r2, r0
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	1ad3      	subs	r3, r2, r3
 800584c:	2b02      	cmp	r3, #2
 800584e:	d901      	bls.n	8005854 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005850:	2303      	movs	r3, #3
 8005852:	e0d5      	b.n	8005a00 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005854:	4b14      	ldr	r3, [pc, #80]	@ (80058a8 <HAL_RCC_OscConfig+0x4b8>)
 8005856:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800585a:	f003 0302 	and.w	r3, r3, #2
 800585e:	2b00      	cmp	r3, #0
 8005860:	d1ef      	bne.n	8005842 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	69db      	ldr	r3, [r3, #28]
 8005866:	2b00      	cmp	r3, #0
 8005868:	f000 80c9 	beq.w	80059fe <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800586c:	4b0e      	ldr	r3, [pc, #56]	@ (80058a8 <HAL_RCC_OscConfig+0x4b8>)
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	f003 030c 	and.w	r3, r3, #12
 8005874:	2b0c      	cmp	r3, #12
 8005876:	f000 8083 	beq.w	8005980 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	69db      	ldr	r3, [r3, #28]
 800587e:	2b02      	cmp	r3, #2
 8005880:	d15e      	bne.n	8005940 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005882:	4b09      	ldr	r3, [pc, #36]	@ (80058a8 <HAL_RCC_OscConfig+0x4b8>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a08      	ldr	r2, [pc, #32]	@ (80058a8 <HAL_RCC_OscConfig+0x4b8>)
 8005888:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800588c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800588e:	f7fc f87d 	bl	800198c <HAL_GetTick>
 8005892:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005894:	e00c      	b.n	80058b0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005896:	f7fc f879 	bl	800198c <HAL_GetTick>
 800589a:	4602      	mov	r2, r0
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	1ad3      	subs	r3, r2, r3
 80058a0:	2b02      	cmp	r3, #2
 80058a2:	d905      	bls.n	80058b0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80058a4:	2303      	movs	r3, #3
 80058a6:	e0ab      	b.n	8005a00 <HAL_RCC_OscConfig+0x610>
 80058a8:	40021000 	.word	0x40021000
 80058ac:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058b0:	4b55      	ldr	r3, [pc, #340]	@ (8005a08 <HAL_RCC_OscConfig+0x618>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d1ec      	bne.n	8005896 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80058bc:	4b52      	ldr	r3, [pc, #328]	@ (8005a08 <HAL_RCC_OscConfig+0x618>)
 80058be:	68da      	ldr	r2, [r3, #12]
 80058c0:	4b52      	ldr	r3, [pc, #328]	@ (8005a0c <HAL_RCC_OscConfig+0x61c>)
 80058c2:	4013      	ands	r3, r2
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	6a11      	ldr	r1, [r2, #32]
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80058cc:	3a01      	subs	r2, #1
 80058ce:	0112      	lsls	r2, r2, #4
 80058d0:	4311      	orrs	r1, r2
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80058d6:	0212      	lsls	r2, r2, #8
 80058d8:	4311      	orrs	r1, r2
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80058de:	0852      	lsrs	r2, r2, #1
 80058e0:	3a01      	subs	r2, #1
 80058e2:	0552      	lsls	r2, r2, #21
 80058e4:	4311      	orrs	r1, r2
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80058ea:	0852      	lsrs	r2, r2, #1
 80058ec:	3a01      	subs	r2, #1
 80058ee:	0652      	lsls	r2, r2, #25
 80058f0:	4311      	orrs	r1, r2
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80058f6:	06d2      	lsls	r2, r2, #27
 80058f8:	430a      	orrs	r2, r1
 80058fa:	4943      	ldr	r1, [pc, #268]	@ (8005a08 <HAL_RCC_OscConfig+0x618>)
 80058fc:	4313      	orrs	r3, r2
 80058fe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005900:	4b41      	ldr	r3, [pc, #260]	@ (8005a08 <HAL_RCC_OscConfig+0x618>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a40      	ldr	r2, [pc, #256]	@ (8005a08 <HAL_RCC_OscConfig+0x618>)
 8005906:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800590a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800590c:	4b3e      	ldr	r3, [pc, #248]	@ (8005a08 <HAL_RCC_OscConfig+0x618>)
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	4a3d      	ldr	r2, [pc, #244]	@ (8005a08 <HAL_RCC_OscConfig+0x618>)
 8005912:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005916:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005918:	f7fc f838 	bl	800198c <HAL_GetTick>
 800591c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800591e:	e008      	b.n	8005932 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005920:	f7fc f834 	bl	800198c <HAL_GetTick>
 8005924:	4602      	mov	r2, r0
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	2b02      	cmp	r3, #2
 800592c:	d901      	bls.n	8005932 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800592e:	2303      	movs	r3, #3
 8005930:	e066      	b.n	8005a00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005932:	4b35      	ldr	r3, [pc, #212]	@ (8005a08 <HAL_RCC_OscConfig+0x618>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800593a:	2b00      	cmp	r3, #0
 800593c:	d0f0      	beq.n	8005920 <HAL_RCC_OscConfig+0x530>
 800593e:	e05e      	b.n	80059fe <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005940:	4b31      	ldr	r3, [pc, #196]	@ (8005a08 <HAL_RCC_OscConfig+0x618>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a30      	ldr	r2, [pc, #192]	@ (8005a08 <HAL_RCC_OscConfig+0x618>)
 8005946:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800594a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800594c:	f7fc f81e 	bl	800198c <HAL_GetTick>
 8005950:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005952:	e008      	b.n	8005966 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005954:	f7fc f81a 	bl	800198c <HAL_GetTick>
 8005958:	4602      	mov	r2, r0
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	2b02      	cmp	r3, #2
 8005960:	d901      	bls.n	8005966 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005962:	2303      	movs	r3, #3
 8005964:	e04c      	b.n	8005a00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005966:	4b28      	ldr	r3, [pc, #160]	@ (8005a08 <HAL_RCC_OscConfig+0x618>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800596e:	2b00      	cmp	r3, #0
 8005970:	d1f0      	bne.n	8005954 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005972:	4b25      	ldr	r3, [pc, #148]	@ (8005a08 <HAL_RCC_OscConfig+0x618>)
 8005974:	68da      	ldr	r2, [r3, #12]
 8005976:	4924      	ldr	r1, [pc, #144]	@ (8005a08 <HAL_RCC_OscConfig+0x618>)
 8005978:	4b25      	ldr	r3, [pc, #148]	@ (8005a10 <HAL_RCC_OscConfig+0x620>)
 800597a:	4013      	ands	r3, r2
 800597c:	60cb      	str	r3, [r1, #12]
 800597e:	e03e      	b.n	80059fe <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	69db      	ldr	r3, [r3, #28]
 8005984:	2b01      	cmp	r3, #1
 8005986:	d101      	bne.n	800598c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	e039      	b.n	8005a00 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800598c:	4b1e      	ldr	r3, [pc, #120]	@ (8005a08 <HAL_RCC_OscConfig+0x618>)
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	f003 0203 	and.w	r2, r3, #3
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6a1b      	ldr	r3, [r3, #32]
 800599c:	429a      	cmp	r2, r3
 800599e:	d12c      	bne.n	80059fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059aa:	3b01      	subs	r3, #1
 80059ac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d123      	bne.n	80059fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059bc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80059be:	429a      	cmp	r2, r3
 80059c0:	d11b      	bne.n	80059fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059cc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d113      	bne.n	80059fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059dc:	085b      	lsrs	r3, r3, #1
 80059de:	3b01      	subs	r3, #1
 80059e0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d109      	bne.n	80059fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059f0:	085b      	lsrs	r3, r3, #1
 80059f2:	3b01      	subs	r3, #1
 80059f4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d001      	beq.n	80059fe <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e000      	b.n	8005a00 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80059fe:	2300      	movs	r3, #0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3720      	adds	r7, #32
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	40021000 	.word	0x40021000
 8005a0c:	019f800c 	.word	0x019f800c
 8005a10:	feeefffc 	.word	0xfeeefffc

08005a14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b086      	sub	sp, #24
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d101      	bne.n	8005a2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e11e      	b.n	8005c6a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a2c:	4b91      	ldr	r3, [pc, #580]	@ (8005c74 <HAL_RCC_ClockConfig+0x260>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 030f 	and.w	r3, r3, #15
 8005a34:	683a      	ldr	r2, [r7, #0]
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d910      	bls.n	8005a5c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a3a:	4b8e      	ldr	r3, [pc, #568]	@ (8005c74 <HAL_RCC_ClockConfig+0x260>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f023 020f 	bic.w	r2, r3, #15
 8005a42:	498c      	ldr	r1, [pc, #560]	@ (8005c74 <HAL_RCC_ClockConfig+0x260>)
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a4a:	4b8a      	ldr	r3, [pc, #552]	@ (8005c74 <HAL_RCC_ClockConfig+0x260>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 030f 	and.w	r3, r3, #15
 8005a52:	683a      	ldr	r2, [r7, #0]
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d001      	beq.n	8005a5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e106      	b.n	8005c6a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 0301 	and.w	r3, r3, #1
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d073      	beq.n	8005b50 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	2b03      	cmp	r3, #3
 8005a6e:	d129      	bne.n	8005ac4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a70:	4b81      	ldr	r3, [pc, #516]	@ (8005c78 <HAL_RCC_ClockConfig+0x264>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d101      	bne.n	8005a80 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e0f4      	b.n	8005c6a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005a80:	f000 f966 	bl	8005d50 <RCC_GetSysClockFreqFromPLLSource>
 8005a84:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	4a7c      	ldr	r2, [pc, #496]	@ (8005c7c <HAL_RCC_ClockConfig+0x268>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d93f      	bls.n	8005b0e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005a8e:	4b7a      	ldr	r3, [pc, #488]	@ (8005c78 <HAL_RCC_ClockConfig+0x264>)
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d009      	beq.n	8005aae <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d033      	beq.n	8005b0e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d12f      	bne.n	8005b0e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005aae:	4b72      	ldr	r3, [pc, #456]	@ (8005c78 <HAL_RCC_ClockConfig+0x264>)
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ab6:	4a70      	ldr	r2, [pc, #448]	@ (8005c78 <HAL_RCC_ClockConfig+0x264>)
 8005ab8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005abc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005abe:	2380      	movs	r3, #128	@ 0x80
 8005ac0:	617b      	str	r3, [r7, #20]
 8005ac2:	e024      	b.n	8005b0e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	2b02      	cmp	r3, #2
 8005aca:	d107      	bne.n	8005adc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005acc:	4b6a      	ldr	r3, [pc, #424]	@ (8005c78 <HAL_RCC_ClockConfig+0x264>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d109      	bne.n	8005aec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e0c6      	b.n	8005c6a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005adc:	4b66      	ldr	r3, [pc, #408]	@ (8005c78 <HAL_RCC_ClockConfig+0x264>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d101      	bne.n	8005aec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e0be      	b.n	8005c6a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005aec:	f000 f8ce 	bl	8005c8c <HAL_RCC_GetSysClockFreq>
 8005af0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	4a61      	ldr	r2, [pc, #388]	@ (8005c7c <HAL_RCC_ClockConfig+0x268>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d909      	bls.n	8005b0e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005afa:	4b5f      	ldr	r3, [pc, #380]	@ (8005c78 <HAL_RCC_ClockConfig+0x264>)
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b02:	4a5d      	ldr	r2, [pc, #372]	@ (8005c78 <HAL_RCC_ClockConfig+0x264>)
 8005b04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b08:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005b0a:	2380      	movs	r3, #128	@ 0x80
 8005b0c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005b0e:	4b5a      	ldr	r3, [pc, #360]	@ (8005c78 <HAL_RCC_ClockConfig+0x264>)
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	f023 0203 	bic.w	r2, r3, #3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	4957      	ldr	r1, [pc, #348]	@ (8005c78 <HAL_RCC_ClockConfig+0x264>)
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b20:	f7fb ff34 	bl	800198c <HAL_GetTick>
 8005b24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b26:	e00a      	b.n	8005b3e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b28:	f7fb ff30 	bl	800198c <HAL_GetTick>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d901      	bls.n	8005b3e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005b3a:	2303      	movs	r3, #3
 8005b3c:	e095      	b.n	8005c6a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b3e:	4b4e      	ldr	r3, [pc, #312]	@ (8005c78 <HAL_RCC_ClockConfig+0x264>)
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	f003 020c 	and.w	r2, r3, #12
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d1eb      	bne.n	8005b28 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 0302 	and.w	r3, r3, #2
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d023      	beq.n	8005ba4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 0304 	and.w	r3, r3, #4
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d005      	beq.n	8005b74 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b68:	4b43      	ldr	r3, [pc, #268]	@ (8005c78 <HAL_RCC_ClockConfig+0x264>)
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	4a42      	ldr	r2, [pc, #264]	@ (8005c78 <HAL_RCC_ClockConfig+0x264>)
 8005b6e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005b72:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 0308 	and.w	r3, r3, #8
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d007      	beq.n	8005b90 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005b80:	4b3d      	ldr	r3, [pc, #244]	@ (8005c78 <HAL_RCC_ClockConfig+0x264>)
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005b88:	4a3b      	ldr	r2, [pc, #236]	@ (8005c78 <HAL_RCC_ClockConfig+0x264>)
 8005b8a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005b8e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b90:	4b39      	ldr	r3, [pc, #228]	@ (8005c78 <HAL_RCC_ClockConfig+0x264>)
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	4936      	ldr	r1, [pc, #216]	@ (8005c78 <HAL_RCC_ClockConfig+0x264>)
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	608b      	str	r3, [r1, #8]
 8005ba2:	e008      	b.n	8005bb6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	2b80      	cmp	r3, #128	@ 0x80
 8005ba8:	d105      	bne.n	8005bb6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005baa:	4b33      	ldr	r3, [pc, #204]	@ (8005c78 <HAL_RCC_ClockConfig+0x264>)
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	4a32      	ldr	r2, [pc, #200]	@ (8005c78 <HAL_RCC_ClockConfig+0x264>)
 8005bb0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005bb4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005bb6:	4b2f      	ldr	r3, [pc, #188]	@ (8005c74 <HAL_RCC_ClockConfig+0x260>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 030f 	and.w	r3, r3, #15
 8005bbe:	683a      	ldr	r2, [r7, #0]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d21d      	bcs.n	8005c00 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bc4:	4b2b      	ldr	r3, [pc, #172]	@ (8005c74 <HAL_RCC_ClockConfig+0x260>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f023 020f 	bic.w	r2, r3, #15
 8005bcc:	4929      	ldr	r1, [pc, #164]	@ (8005c74 <HAL_RCC_ClockConfig+0x260>)
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005bd4:	f7fb feda 	bl	800198c <HAL_GetTick>
 8005bd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bda:	e00a      	b.n	8005bf2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bdc:	f7fb fed6 	bl	800198c <HAL_GetTick>
 8005be0:	4602      	mov	r2, r0
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	1ad3      	subs	r3, r2, r3
 8005be6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d901      	bls.n	8005bf2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005bee:	2303      	movs	r3, #3
 8005bf0:	e03b      	b.n	8005c6a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bf2:	4b20      	ldr	r3, [pc, #128]	@ (8005c74 <HAL_RCC_ClockConfig+0x260>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 030f 	and.w	r3, r3, #15
 8005bfa:	683a      	ldr	r2, [r7, #0]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d1ed      	bne.n	8005bdc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 0304 	and.w	r3, r3, #4
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d008      	beq.n	8005c1e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c0c:	4b1a      	ldr	r3, [pc, #104]	@ (8005c78 <HAL_RCC_ClockConfig+0x264>)
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	4917      	ldr	r1, [pc, #92]	@ (8005c78 <HAL_RCC_ClockConfig+0x264>)
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f003 0308 	and.w	r3, r3, #8
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d009      	beq.n	8005c3e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c2a:	4b13      	ldr	r3, [pc, #76]	@ (8005c78 <HAL_RCC_ClockConfig+0x264>)
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	691b      	ldr	r3, [r3, #16]
 8005c36:	00db      	lsls	r3, r3, #3
 8005c38:	490f      	ldr	r1, [pc, #60]	@ (8005c78 <HAL_RCC_ClockConfig+0x264>)
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005c3e:	f000 f825 	bl	8005c8c <HAL_RCC_GetSysClockFreq>
 8005c42:	4602      	mov	r2, r0
 8005c44:	4b0c      	ldr	r3, [pc, #48]	@ (8005c78 <HAL_RCC_ClockConfig+0x264>)
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	091b      	lsrs	r3, r3, #4
 8005c4a:	f003 030f 	and.w	r3, r3, #15
 8005c4e:	490c      	ldr	r1, [pc, #48]	@ (8005c80 <HAL_RCC_ClockConfig+0x26c>)
 8005c50:	5ccb      	ldrb	r3, [r1, r3]
 8005c52:	f003 031f 	and.w	r3, r3, #31
 8005c56:	fa22 f303 	lsr.w	r3, r2, r3
 8005c5a:	4a0a      	ldr	r2, [pc, #40]	@ (8005c84 <HAL_RCC_ClockConfig+0x270>)
 8005c5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005c5e:	4b0a      	ldr	r3, [pc, #40]	@ (8005c88 <HAL_RCC_ClockConfig+0x274>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4618      	mov	r0, r3
 8005c64:	f7fb fe46 	bl	80018f4 <HAL_InitTick>
 8005c68:	4603      	mov	r3, r0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3718      	adds	r7, #24
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	bf00      	nop
 8005c74:	40022000 	.word	0x40022000
 8005c78:	40021000 	.word	0x40021000
 8005c7c:	04c4b400 	.word	0x04c4b400
 8005c80:	0800d8ac 	.word	0x0800d8ac
 8005c84:	20000000 	.word	0x20000000
 8005c88:	20000004 	.word	0x20000004

08005c8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b087      	sub	sp, #28
 8005c90:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005c92:	4b2c      	ldr	r3, [pc, #176]	@ (8005d44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	f003 030c 	and.w	r3, r3, #12
 8005c9a:	2b04      	cmp	r3, #4
 8005c9c:	d102      	bne.n	8005ca4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005c9e:	4b2a      	ldr	r3, [pc, #168]	@ (8005d48 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005ca0:	613b      	str	r3, [r7, #16]
 8005ca2:	e047      	b.n	8005d34 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005ca4:	4b27      	ldr	r3, [pc, #156]	@ (8005d44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	f003 030c 	and.w	r3, r3, #12
 8005cac:	2b08      	cmp	r3, #8
 8005cae:	d102      	bne.n	8005cb6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005cb0:	4b26      	ldr	r3, [pc, #152]	@ (8005d4c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005cb2:	613b      	str	r3, [r7, #16]
 8005cb4:	e03e      	b.n	8005d34 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005cb6:	4b23      	ldr	r3, [pc, #140]	@ (8005d44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	f003 030c 	and.w	r3, r3, #12
 8005cbe:	2b0c      	cmp	r3, #12
 8005cc0:	d136      	bne.n	8005d30 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005cc2:	4b20      	ldr	r3, [pc, #128]	@ (8005d44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	f003 0303 	and.w	r3, r3, #3
 8005cca:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005ccc:	4b1d      	ldr	r3, [pc, #116]	@ (8005d44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	091b      	lsrs	r3, r3, #4
 8005cd2:	f003 030f 	and.w	r3, r3, #15
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2b03      	cmp	r3, #3
 8005cde:	d10c      	bne.n	8005cfa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005ce0:	4a1a      	ldr	r2, [pc, #104]	@ (8005d4c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ce8:	4a16      	ldr	r2, [pc, #88]	@ (8005d44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005cea:	68d2      	ldr	r2, [r2, #12]
 8005cec:	0a12      	lsrs	r2, r2, #8
 8005cee:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005cf2:	fb02 f303 	mul.w	r3, r2, r3
 8005cf6:	617b      	str	r3, [r7, #20]
      break;
 8005cf8:	e00c      	b.n	8005d14 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005cfa:	4a13      	ldr	r2, [pc, #76]	@ (8005d48 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d02:	4a10      	ldr	r2, [pc, #64]	@ (8005d44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005d04:	68d2      	ldr	r2, [r2, #12]
 8005d06:	0a12      	lsrs	r2, r2, #8
 8005d08:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005d0c:	fb02 f303 	mul.w	r3, r2, r3
 8005d10:	617b      	str	r3, [r7, #20]
      break;
 8005d12:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005d14:	4b0b      	ldr	r3, [pc, #44]	@ (8005d44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	0e5b      	lsrs	r3, r3, #25
 8005d1a:	f003 0303 	and.w	r3, r3, #3
 8005d1e:	3301      	adds	r3, #1
 8005d20:	005b      	lsls	r3, r3, #1
 8005d22:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005d24:	697a      	ldr	r2, [r7, #20]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d2c:	613b      	str	r3, [r7, #16]
 8005d2e:	e001      	b.n	8005d34 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005d30:	2300      	movs	r3, #0
 8005d32:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005d34:	693b      	ldr	r3, [r7, #16]
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	371c      	adds	r7, #28
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr
 8005d42:	bf00      	nop
 8005d44:	40021000 	.word	0x40021000
 8005d48:	00f42400 	.word	0x00f42400
 8005d4c:	007a1200 	.word	0x007a1200

08005d50 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b087      	sub	sp, #28
 8005d54:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005d56:	4b1e      	ldr	r3, [pc, #120]	@ (8005dd0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	f003 0303 	and.w	r3, r3, #3
 8005d5e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005d60:	4b1b      	ldr	r3, [pc, #108]	@ (8005dd0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	091b      	lsrs	r3, r3, #4
 8005d66:	f003 030f 	and.w	r3, r3, #15
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	2b03      	cmp	r3, #3
 8005d72:	d10c      	bne.n	8005d8e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005d74:	4a17      	ldr	r2, [pc, #92]	@ (8005dd4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d7c:	4a14      	ldr	r2, [pc, #80]	@ (8005dd0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d7e:	68d2      	ldr	r2, [r2, #12]
 8005d80:	0a12      	lsrs	r2, r2, #8
 8005d82:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005d86:	fb02 f303 	mul.w	r3, r2, r3
 8005d8a:	617b      	str	r3, [r7, #20]
    break;
 8005d8c:	e00c      	b.n	8005da8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005d8e:	4a12      	ldr	r2, [pc, #72]	@ (8005dd8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d96:	4a0e      	ldr	r2, [pc, #56]	@ (8005dd0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d98:	68d2      	ldr	r2, [r2, #12]
 8005d9a:	0a12      	lsrs	r2, r2, #8
 8005d9c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005da0:	fb02 f303 	mul.w	r3, r2, r3
 8005da4:	617b      	str	r3, [r7, #20]
    break;
 8005da6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005da8:	4b09      	ldr	r3, [pc, #36]	@ (8005dd0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	0e5b      	lsrs	r3, r3, #25
 8005dae:	f003 0303 	and.w	r3, r3, #3
 8005db2:	3301      	adds	r3, #1
 8005db4:	005b      	lsls	r3, r3, #1
 8005db6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005db8:	697a      	ldr	r2, [r7, #20]
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dc0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005dc2:	687b      	ldr	r3, [r7, #4]
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	371c      	adds	r7, #28
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr
 8005dd0:	40021000 	.word	0x40021000
 8005dd4:	007a1200 	.word	0x007a1200
 8005dd8:	00f42400 	.word	0x00f42400

08005ddc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b086      	sub	sp, #24
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005de4:	2300      	movs	r3, #0
 8005de6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005de8:	2300      	movs	r3, #0
 8005dea:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	f000 8098 	beq.w	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005dfe:	4b43      	ldr	r3, [pc, #268]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d10d      	bne.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e0a:	4b40      	ldr	r3, [pc, #256]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e0e:	4a3f      	ldr	r2, [pc, #252]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e14:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e16:	4b3d      	ldr	r3, [pc, #244]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e1e:	60bb      	str	r3, [r7, #8]
 8005e20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e22:	2301      	movs	r3, #1
 8005e24:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e26:	4b3a      	ldr	r3, [pc, #232]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a39      	ldr	r2, [pc, #228]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005e2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e30:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e32:	f7fb fdab 	bl	800198c <HAL_GetTick>
 8005e36:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e38:	e009      	b.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e3a:	f7fb fda7 	bl	800198c <HAL_GetTick>
 8005e3e:	4602      	mov	r2, r0
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	1ad3      	subs	r3, r2, r3
 8005e44:	2b02      	cmp	r3, #2
 8005e46:	d902      	bls.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005e48:	2303      	movs	r3, #3
 8005e4a:	74fb      	strb	r3, [r7, #19]
        break;
 8005e4c:	e005      	b.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e4e:	4b30      	ldr	r3, [pc, #192]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d0ef      	beq.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005e5a:	7cfb      	ldrb	r3, [r7, #19]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d159      	bne.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005e60:	4b2a      	ldr	r3, [pc, #168]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e6a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d01e      	beq.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e76:	697a      	ldr	r2, [r7, #20]
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d019      	beq.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005e7c:	4b23      	ldr	r3, [pc, #140]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e86:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e88:	4b20      	ldr	r3, [pc, #128]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e8e:	4a1f      	ldr	r2, [pc, #124]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005e98:	4b1c      	ldr	r3, [pc, #112]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e9e:	4a1b      	ldr	r2, [pc, #108]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ea0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ea4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005ea8:	4a18      	ldr	r2, [pc, #96]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	f003 0301 	and.w	r3, r3, #1
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d016      	beq.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eba:	f7fb fd67 	bl	800198c <HAL_GetTick>
 8005ebe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ec0:	e00b      	b.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ec2:	f7fb fd63 	bl	800198c <HAL_GetTick>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	1ad3      	subs	r3, r2, r3
 8005ecc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d902      	bls.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005ed4:	2303      	movs	r3, #3
 8005ed6:	74fb      	strb	r3, [r7, #19]
            break;
 8005ed8:	e006      	b.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005eda:	4b0c      	ldr	r3, [pc, #48]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ee0:	f003 0302 	and.w	r3, r3, #2
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d0ec      	beq.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005ee8:	7cfb      	ldrb	r3, [r7, #19]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d10b      	bne.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005eee:	4b07      	ldr	r3, [pc, #28]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ef4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005efc:	4903      	ldr	r1, [pc, #12]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005efe:	4313      	orrs	r3, r2
 8005f00:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005f04:	e008      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005f06:	7cfb      	ldrb	r3, [r7, #19]
 8005f08:	74bb      	strb	r3, [r7, #18]
 8005f0a:	e005      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005f0c:	40021000 	.word	0x40021000
 8005f10:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f14:	7cfb      	ldrb	r3, [r7, #19]
 8005f16:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f18:	7c7b      	ldrb	r3, [r7, #17]
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d105      	bne.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f1e:	4ba7      	ldr	r3, [pc, #668]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f22:	4aa6      	ldr	r2, [pc, #664]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f28:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 0301 	and.w	r3, r3, #1
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d00a      	beq.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005f36:	4ba1      	ldr	r3, [pc, #644]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f3c:	f023 0203 	bic.w	r2, r3, #3
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	499d      	ldr	r1, [pc, #628]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f46:	4313      	orrs	r3, r2
 8005f48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 0302 	and.w	r3, r3, #2
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d00a      	beq.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005f58:	4b98      	ldr	r3, [pc, #608]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f5e:	f023 020c 	bic.w	r2, r3, #12
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	4995      	ldr	r1, [pc, #596]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 0304 	and.w	r3, r3, #4
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d00a      	beq.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005f7a:	4b90      	ldr	r3, [pc, #576]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f80:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	498c      	ldr	r1, [pc, #560]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f003 0308 	and.w	r3, r3, #8
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d00a      	beq.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005f9c:	4b87      	ldr	r3, [pc, #540]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fa2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	4984      	ldr	r1, [pc, #528]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fac:	4313      	orrs	r3, r2
 8005fae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f003 0310 	and.w	r3, r3, #16
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d00a      	beq.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005fbe:	4b7f      	ldr	r3, [pc, #508]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fc4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	695b      	ldr	r3, [r3, #20]
 8005fcc:	497b      	ldr	r1, [pc, #492]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f003 0320 	and.w	r3, r3, #32
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d00a      	beq.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005fe0:	4b76      	ldr	r3, [pc, #472]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fe6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	699b      	ldr	r3, [r3, #24]
 8005fee:	4973      	ldr	r1, [pc, #460]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d00a      	beq.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006002:	4b6e      	ldr	r3, [pc, #440]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006004:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006008:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	69db      	ldr	r3, [r3, #28]
 8006010:	496a      	ldr	r1, [pc, #424]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006012:	4313      	orrs	r3, r2
 8006014:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006020:	2b00      	cmp	r3, #0
 8006022:	d00a      	beq.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006024:	4b65      	ldr	r3, [pc, #404]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006026:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800602a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a1b      	ldr	r3, [r3, #32]
 8006032:	4962      	ldr	r1, [pc, #392]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006034:	4313      	orrs	r3, r2
 8006036:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006042:	2b00      	cmp	r3, #0
 8006044:	d00a      	beq.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006046:	4b5d      	ldr	r3, [pc, #372]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006048:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800604c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006054:	4959      	ldr	r1, [pc, #356]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006056:	4313      	orrs	r3, r2
 8006058:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006064:	2b00      	cmp	r3, #0
 8006066:	d00a      	beq.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006068:	4b54      	ldr	r3, [pc, #336]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800606a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800606e:	f023 0203 	bic.w	r2, r3, #3
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006076:	4951      	ldr	r1, [pc, #324]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006078:	4313      	orrs	r3, r2
 800607a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006086:	2b00      	cmp	r3, #0
 8006088:	d00a      	beq.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800608a:	4b4c      	ldr	r3, [pc, #304]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800608c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006090:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006098:	4948      	ldr	r1, [pc, #288]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800609a:	4313      	orrs	r3, r2
 800609c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d015      	beq.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80060ac:	4b43      	ldr	r3, [pc, #268]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060b2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060ba:	4940      	ldr	r1, [pc, #256]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060bc:	4313      	orrs	r3, r2
 80060be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80060ca:	d105      	bne.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060cc:	4b3b      	ldr	r3, [pc, #236]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	4a3a      	ldr	r2, [pc, #232]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80060d6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d015      	beq.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80060e4:	4b35      	ldr	r3, [pc, #212]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060ea:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060f2:	4932      	ldr	r1, [pc, #200]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060f4:	4313      	orrs	r3, r2
 80060f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006102:	d105      	bne.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006104:	4b2d      	ldr	r3, [pc, #180]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006106:	68db      	ldr	r3, [r3, #12]
 8006108:	4a2c      	ldr	r2, [pc, #176]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800610a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800610e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006118:	2b00      	cmp	r3, #0
 800611a:	d015      	beq.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800611c:	4b27      	ldr	r3, [pc, #156]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800611e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006122:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800612a:	4924      	ldr	r1, [pc, #144]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800612c:	4313      	orrs	r3, r2
 800612e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006136:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800613a:	d105      	bne.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800613c:	4b1f      	ldr	r3, [pc, #124]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	4a1e      	ldr	r2, [pc, #120]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006142:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006146:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006150:	2b00      	cmp	r3, #0
 8006152:	d015      	beq.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006154:	4b19      	ldr	r3, [pc, #100]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006156:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800615a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006162:	4916      	ldr	r1, [pc, #88]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006164:	4313      	orrs	r3, r2
 8006166:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800616e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006172:	d105      	bne.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006174:	4b11      	ldr	r3, [pc, #68]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	4a10      	ldr	r2, [pc, #64]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800617a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800617e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006188:	2b00      	cmp	r3, #0
 800618a:	d019      	beq.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800618c:	4b0b      	ldr	r3, [pc, #44]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800618e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006192:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800619a:	4908      	ldr	r1, [pc, #32]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800619c:	4313      	orrs	r3, r2
 800619e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80061aa:	d109      	bne.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80061ac:	4b03      	ldr	r3, [pc, #12]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	4a02      	ldr	r2, [pc, #8]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80061b6:	60d3      	str	r3, [r2, #12]
 80061b8:	e002      	b.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80061ba:	bf00      	nop
 80061bc:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d015      	beq.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80061cc:	4b29      	ldr	r3, [pc, #164]	@ (8006274 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80061ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061d2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061da:	4926      	ldr	r1, [pc, #152]	@ (8006274 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80061dc:	4313      	orrs	r3, r2
 80061de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80061ea:	d105      	bne.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80061ec:	4b21      	ldr	r3, [pc, #132]	@ (8006274 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	4a20      	ldr	r2, [pc, #128]	@ (8006274 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80061f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061f6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006200:	2b00      	cmp	r3, #0
 8006202:	d015      	beq.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006204:	4b1b      	ldr	r3, [pc, #108]	@ (8006274 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006206:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800620a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006212:	4918      	ldr	r1, [pc, #96]	@ (8006274 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006214:	4313      	orrs	r3, r2
 8006216:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800621e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006222:	d105      	bne.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006224:	4b13      	ldr	r3, [pc, #76]	@ (8006274 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	4a12      	ldr	r2, [pc, #72]	@ (8006274 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800622a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800622e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006238:	2b00      	cmp	r3, #0
 800623a:	d015      	beq.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800623c:	4b0d      	ldr	r3, [pc, #52]	@ (8006274 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800623e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006242:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800624a:	490a      	ldr	r1, [pc, #40]	@ (8006274 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800624c:	4313      	orrs	r3, r2
 800624e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006256:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800625a:	d105      	bne.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800625c:	4b05      	ldr	r3, [pc, #20]	@ (8006274 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800625e:	68db      	ldr	r3, [r3, #12]
 8006260:	4a04      	ldr	r2, [pc, #16]	@ (8006274 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006262:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006266:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006268:	7cbb      	ldrb	r3, [r7, #18]
}
 800626a:	4618      	mov	r0, r3
 800626c:	3718      	adds	r7, #24
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	40021000 	.word	0x40021000

08006278 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b082      	sub	sp, #8
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d101      	bne.n	800628a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	e049      	b.n	800631e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006290:	b2db      	uxtb	r3, r3
 8006292:	2b00      	cmp	r3, #0
 8006294:	d106      	bne.n	80062a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f7fa fef8 	bl	8001094 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2202      	movs	r2, #2
 80062a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	3304      	adds	r3, #4
 80062b4:	4619      	mov	r1, r3
 80062b6:	4610      	mov	r0, r2
 80062b8:	f001 fb3e 	bl	8007938 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2201      	movs	r2, #1
 80062d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2201      	movs	r2, #1
 8006310:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	3708      	adds	r7, #8
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
	...

08006328 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006328:	b480      	push	{r7}
 800632a:	b085      	sub	sp, #20
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006336:	b2db      	uxtb	r3, r3
 8006338:	2b01      	cmp	r3, #1
 800633a:	d001      	beq.n	8006340 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	e04c      	b.n	80063da <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2202      	movs	r2, #2
 8006344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a26      	ldr	r2, [pc, #152]	@ (80063e8 <HAL_TIM_Base_Start+0xc0>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d022      	beq.n	8006398 <HAL_TIM_Base_Start+0x70>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800635a:	d01d      	beq.n	8006398 <HAL_TIM_Base_Start+0x70>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a22      	ldr	r2, [pc, #136]	@ (80063ec <HAL_TIM_Base_Start+0xc4>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d018      	beq.n	8006398 <HAL_TIM_Base_Start+0x70>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a21      	ldr	r2, [pc, #132]	@ (80063f0 <HAL_TIM_Base_Start+0xc8>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d013      	beq.n	8006398 <HAL_TIM_Base_Start+0x70>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a1f      	ldr	r2, [pc, #124]	@ (80063f4 <HAL_TIM_Base_Start+0xcc>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d00e      	beq.n	8006398 <HAL_TIM_Base_Start+0x70>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a1e      	ldr	r2, [pc, #120]	@ (80063f8 <HAL_TIM_Base_Start+0xd0>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d009      	beq.n	8006398 <HAL_TIM_Base_Start+0x70>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a1c      	ldr	r2, [pc, #112]	@ (80063fc <HAL_TIM_Base_Start+0xd4>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d004      	beq.n	8006398 <HAL_TIM_Base_Start+0x70>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a1b      	ldr	r2, [pc, #108]	@ (8006400 <HAL_TIM_Base_Start+0xd8>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d115      	bne.n	80063c4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	689a      	ldr	r2, [r3, #8]
 800639e:	4b19      	ldr	r3, [pc, #100]	@ (8006404 <HAL_TIM_Base_Start+0xdc>)
 80063a0:	4013      	ands	r3, r2
 80063a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2b06      	cmp	r3, #6
 80063a8:	d015      	beq.n	80063d6 <HAL_TIM_Base_Start+0xae>
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063b0:	d011      	beq.n	80063d6 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f042 0201 	orr.w	r2, r2, #1
 80063c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063c2:	e008      	b.n	80063d6 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f042 0201 	orr.w	r2, r2, #1
 80063d2:	601a      	str	r2, [r3, #0]
 80063d4:	e000      	b.n	80063d8 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3714      	adds	r7, #20
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr
 80063e6:	bf00      	nop
 80063e8:	40012c00 	.word	0x40012c00
 80063ec:	40000400 	.word	0x40000400
 80063f0:	40000800 	.word	0x40000800
 80063f4:	40000c00 	.word	0x40000c00
 80063f8:	40013400 	.word	0x40013400
 80063fc:	40014000 	.word	0x40014000
 8006400:	40015000 	.word	0x40015000
 8006404:	00010007 	.word	0x00010007

08006408 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006408:	b480      	push	{r7}
 800640a:	b085      	sub	sp, #20
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006416:	b2db      	uxtb	r3, r3
 8006418:	2b01      	cmp	r3, #1
 800641a:	d001      	beq.n	8006420 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	e054      	b.n	80064ca <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2202      	movs	r2, #2
 8006424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	68da      	ldr	r2, [r3, #12]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f042 0201 	orr.w	r2, r2, #1
 8006436:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a26      	ldr	r2, [pc, #152]	@ (80064d8 <HAL_TIM_Base_Start_IT+0xd0>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d022      	beq.n	8006488 <HAL_TIM_Base_Start_IT+0x80>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800644a:	d01d      	beq.n	8006488 <HAL_TIM_Base_Start_IT+0x80>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a22      	ldr	r2, [pc, #136]	@ (80064dc <HAL_TIM_Base_Start_IT+0xd4>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d018      	beq.n	8006488 <HAL_TIM_Base_Start_IT+0x80>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a21      	ldr	r2, [pc, #132]	@ (80064e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d013      	beq.n	8006488 <HAL_TIM_Base_Start_IT+0x80>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a1f      	ldr	r2, [pc, #124]	@ (80064e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d00e      	beq.n	8006488 <HAL_TIM_Base_Start_IT+0x80>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a1e      	ldr	r2, [pc, #120]	@ (80064e8 <HAL_TIM_Base_Start_IT+0xe0>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d009      	beq.n	8006488 <HAL_TIM_Base_Start_IT+0x80>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a1c      	ldr	r2, [pc, #112]	@ (80064ec <HAL_TIM_Base_Start_IT+0xe4>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d004      	beq.n	8006488 <HAL_TIM_Base_Start_IT+0x80>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a1b      	ldr	r2, [pc, #108]	@ (80064f0 <HAL_TIM_Base_Start_IT+0xe8>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d115      	bne.n	80064b4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	689a      	ldr	r2, [r3, #8]
 800648e:	4b19      	ldr	r3, [pc, #100]	@ (80064f4 <HAL_TIM_Base_Start_IT+0xec>)
 8006490:	4013      	ands	r3, r2
 8006492:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2b06      	cmp	r3, #6
 8006498:	d015      	beq.n	80064c6 <HAL_TIM_Base_Start_IT+0xbe>
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064a0:	d011      	beq.n	80064c6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f042 0201 	orr.w	r2, r2, #1
 80064b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064b2:	e008      	b.n	80064c6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f042 0201 	orr.w	r2, r2, #1
 80064c2:	601a      	str	r2, [r3, #0]
 80064c4:	e000      	b.n	80064c8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80064c8:	2300      	movs	r3, #0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3714      	adds	r7, #20
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr
 80064d6:	bf00      	nop
 80064d8:	40012c00 	.word	0x40012c00
 80064dc:	40000400 	.word	0x40000400
 80064e0:	40000800 	.word	0x40000800
 80064e4:	40000c00 	.word	0x40000c00
 80064e8:	40013400 	.word	0x40013400
 80064ec:	40014000 	.word	0x40014000
 80064f0:	40015000 	.word	0x40015000
 80064f4:	00010007 	.word	0x00010007

080064f8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b082      	sub	sp, #8
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d101      	bne.n	800650a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	e049      	b.n	800659e <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006510:	b2db      	uxtb	r3, r3
 8006512:	2b00      	cmp	r3, #0
 8006514:	d106      	bne.n	8006524 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 f841 	bl	80065a6 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2202      	movs	r2, #2
 8006528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	3304      	adds	r3, #4
 8006534:	4619      	mov	r1, r3
 8006536:	4610      	mov	r0, r2
 8006538:	f001 f9fe 	bl	8007938 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2201      	movs	r2, #1
 8006548:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2201      	movs	r2, #1
 8006550:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2201      	movs	r2, #1
 8006558:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2201      	movs	r2, #1
 8006568:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2201      	movs	r2, #1
 8006570:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2201      	movs	r2, #1
 8006578:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2201      	movs	r2, #1
 8006580:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2201      	movs	r2, #1
 8006588:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2201      	movs	r2, #1
 8006590:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2201      	movs	r2, #1
 8006598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3708      	adds	r7, #8
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}

080065a6 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80065a6:	b480      	push	{r7}
 80065a8:	b083      	sub	sp, #12
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80065ae:	bf00      	nop
 80065b0:	370c      	adds	r7, #12
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr
	...

080065bc <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d109      	bne.n	80065e0 <HAL_TIM_OC_Start+0x24>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	bf14      	ite	ne
 80065d8:	2301      	movne	r3, #1
 80065da:	2300      	moveq	r3, #0
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	e03c      	b.n	800665a <HAL_TIM_OC_Start+0x9e>
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	2b04      	cmp	r3, #4
 80065e4:	d109      	bne.n	80065fa <HAL_TIM_OC_Start+0x3e>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	bf14      	ite	ne
 80065f2:	2301      	movne	r3, #1
 80065f4:	2300      	moveq	r3, #0
 80065f6:	b2db      	uxtb	r3, r3
 80065f8:	e02f      	b.n	800665a <HAL_TIM_OC_Start+0x9e>
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	2b08      	cmp	r3, #8
 80065fe:	d109      	bne.n	8006614 <HAL_TIM_OC_Start+0x58>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006606:	b2db      	uxtb	r3, r3
 8006608:	2b01      	cmp	r3, #1
 800660a:	bf14      	ite	ne
 800660c:	2301      	movne	r3, #1
 800660e:	2300      	moveq	r3, #0
 8006610:	b2db      	uxtb	r3, r3
 8006612:	e022      	b.n	800665a <HAL_TIM_OC_Start+0x9e>
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	2b0c      	cmp	r3, #12
 8006618:	d109      	bne.n	800662e <HAL_TIM_OC_Start+0x72>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006620:	b2db      	uxtb	r3, r3
 8006622:	2b01      	cmp	r3, #1
 8006624:	bf14      	ite	ne
 8006626:	2301      	movne	r3, #1
 8006628:	2300      	moveq	r3, #0
 800662a:	b2db      	uxtb	r3, r3
 800662c:	e015      	b.n	800665a <HAL_TIM_OC_Start+0x9e>
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	2b10      	cmp	r3, #16
 8006632:	d109      	bne.n	8006648 <HAL_TIM_OC_Start+0x8c>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800663a:	b2db      	uxtb	r3, r3
 800663c:	2b01      	cmp	r3, #1
 800663e:	bf14      	ite	ne
 8006640:	2301      	movne	r3, #1
 8006642:	2300      	moveq	r3, #0
 8006644:	b2db      	uxtb	r3, r3
 8006646:	e008      	b.n	800665a <HAL_TIM_OC_Start+0x9e>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800664e:	b2db      	uxtb	r3, r3
 8006650:	2b01      	cmp	r3, #1
 8006652:	bf14      	ite	ne
 8006654:	2301      	movne	r3, #1
 8006656:	2300      	moveq	r3, #0
 8006658:	b2db      	uxtb	r3, r3
 800665a:	2b00      	cmp	r3, #0
 800665c:	d001      	beq.n	8006662 <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	e0a6      	b.n	80067b0 <HAL_TIM_OC_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d104      	bne.n	8006672 <HAL_TIM_OC_Start+0xb6>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2202      	movs	r2, #2
 800666c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006670:	e023      	b.n	80066ba <HAL_TIM_OC_Start+0xfe>
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	2b04      	cmp	r3, #4
 8006676:	d104      	bne.n	8006682 <HAL_TIM_OC_Start+0xc6>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2202      	movs	r2, #2
 800667c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006680:	e01b      	b.n	80066ba <HAL_TIM_OC_Start+0xfe>
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	2b08      	cmp	r3, #8
 8006686:	d104      	bne.n	8006692 <HAL_TIM_OC_Start+0xd6>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2202      	movs	r2, #2
 800668c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006690:	e013      	b.n	80066ba <HAL_TIM_OC_Start+0xfe>
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	2b0c      	cmp	r3, #12
 8006696:	d104      	bne.n	80066a2 <HAL_TIM_OC_Start+0xe6>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2202      	movs	r2, #2
 800669c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80066a0:	e00b      	b.n	80066ba <HAL_TIM_OC_Start+0xfe>
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	2b10      	cmp	r3, #16
 80066a6:	d104      	bne.n	80066b2 <HAL_TIM_OC_Start+0xf6>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2202      	movs	r2, #2
 80066ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80066b0:	e003      	b.n	80066ba <HAL_TIM_OC_Start+0xfe>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2202      	movs	r2, #2
 80066b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	2201      	movs	r2, #1
 80066c0:	6839      	ldr	r1, [r7, #0]
 80066c2:	4618      	mov	r0, r3
 80066c4:	f001 fdb2 	bl	800822c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a3a      	ldr	r2, [pc, #232]	@ (80067b8 <HAL_TIM_OC_Start+0x1fc>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d018      	beq.n	8006704 <HAL_TIM_OC_Start+0x148>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a39      	ldr	r2, [pc, #228]	@ (80067bc <HAL_TIM_OC_Start+0x200>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d013      	beq.n	8006704 <HAL_TIM_OC_Start+0x148>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a37      	ldr	r2, [pc, #220]	@ (80067c0 <HAL_TIM_OC_Start+0x204>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d00e      	beq.n	8006704 <HAL_TIM_OC_Start+0x148>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a36      	ldr	r2, [pc, #216]	@ (80067c4 <HAL_TIM_OC_Start+0x208>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d009      	beq.n	8006704 <HAL_TIM_OC_Start+0x148>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a34      	ldr	r2, [pc, #208]	@ (80067c8 <HAL_TIM_OC_Start+0x20c>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d004      	beq.n	8006704 <HAL_TIM_OC_Start+0x148>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a33      	ldr	r2, [pc, #204]	@ (80067cc <HAL_TIM_OC_Start+0x210>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d101      	bne.n	8006708 <HAL_TIM_OC_Start+0x14c>
 8006704:	2301      	movs	r3, #1
 8006706:	e000      	b.n	800670a <HAL_TIM_OC_Start+0x14e>
 8006708:	2300      	movs	r3, #0
 800670a:	2b00      	cmp	r3, #0
 800670c:	d007      	beq.n	800671e <HAL_TIM_OC_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800671c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a25      	ldr	r2, [pc, #148]	@ (80067b8 <HAL_TIM_OC_Start+0x1fc>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d022      	beq.n	800676e <HAL_TIM_OC_Start+0x1b2>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006730:	d01d      	beq.n	800676e <HAL_TIM_OC_Start+0x1b2>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a26      	ldr	r2, [pc, #152]	@ (80067d0 <HAL_TIM_OC_Start+0x214>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d018      	beq.n	800676e <HAL_TIM_OC_Start+0x1b2>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a24      	ldr	r2, [pc, #144]	@ (80067d4 <HAL_TIM_OC_Start+0x218>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d013      	beq.n	800676e <HAL_TIM_OC_Start+0x1b2>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a23      	ldr	r2, [pc, #140]	@ (80067d8 <HAL_TIM_OC_Start+0x21c>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d00e      	beq.n	800676e <HAL_TIM_OC_Start+0x1b2>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a19      	ldr	r2, [pc, #100]	@ (80067bc <HAL_TIM_OC_Start+0x200>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d009      	beq.n	800676e <HAL_TIM_OC_Start+0x1b2>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a18      	ldr	r2, [pc, #96]	@ (80067c0 <HAL_TIM_OC_Start+0x204>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d004      	beq.n	800676e <HAL_TIM_OC_Start+0x1b2>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a18      	ldr	r2, [pc, #96]	@ (80067cc <HAL_TIM_OC_Start+0x210>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d115      	bne.n	800679a <HAL_TIM_OC_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	689a      	ldr	r2, [r3, #8]
 8006774:	4b19      	ldr	r3, [pc, #100]	@ (80067dc <HAL_TIM_OC_Start+0x220>)
 8006776:	4013      	ands	r3, r2
 8006778:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2b06      	cmp	r3, #6
 800677e:	d015      	beq.n	80067ac <HAL_TIM_OC_Start+0x1f0>
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006786:	d011      	beq.n	80067ac <HAL_TIM_OC_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f042 0201 	orr.w	r2, r2, #1
 8006796:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006798:	e008      	b.n	80067ac <HAL_TIM_OC_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f042 0201 	orr.w	r2, r2, #1
 80067a8:	601a      	str	r2, [r3, #0]
 80067aa:	e000      	b.n	80067ae <HAL_TIM_OC_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067ac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80067ae:	2300      	movs	r3, #0
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3710      	adds	r7, #16
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}
 80067b8:	40012c00 	.word	0x40012c00
 80067bc:	40013400 	.word	0x40013400
 80067c0:	40014000 	.word	0x40014000
 80067c4:	40014400 	.word	0x40014400
 80067c8:	40014800 	.word	0x40014800
 80067cc:	40015000 	.word	0x40015000
 80067d0:	40000400 	.word	0x40000400
 80067d4:	40000800 	.word	0x40000800
 80067d8:	40000c00 	.word	0x40000c00
 80067dc:	00010007 	.word	0x00010007

080067e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b082      	sub	sp, #8
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d101      	bne.n	80067f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	e049      	b.n	8006886 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d106      	bne.n	800680c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 f841 	bl	800688e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2202      	movs	r2, #2
 8006810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	3304      	adds	r3, #4
 800681c:	4619      	mov	r1, r3
 800681e:	4610      	mov	r0, r2
 8006820:	f001 f88a 	bl	8007938 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2201      	movs	r2, #1
 8006828:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2201      	movs	r2, #1
 8006848:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2201      	movs	r2, #1
 8006858:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2201      	movs	r2, #1
 8006870:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2201      	movs	r2, #1
 8006878:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2201      	movs	r2, #1
 8006880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006884:	2300      	movs	r3, #0
}
 8006886:	4618      	mov	r0, r3
 8006888:	3708      	adds	r7, #8
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}

0800688e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800688e:	b480      	push	{r7}
 8006890:	b083      	sub	sp, #12
 8006892:	af00      	add	r7, sp, #0
 8006894:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006896:	bf00      	nop
 8006898:	370c      	adds	r7, #12
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr
	...

080068a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d109      	bne.n	80068c8 <HAL_TIM_PWM_Start+0x24>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	2b01      	cmp	r3, #1
 80068be:	bf14      	ite	ne
 80068c0:	2301      	movne	r3, #1
 80068c2:	2300      	moveq	r3, #0
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	e03c      	b.n	8006942 <HAL_TIM_PWM_Start+0x9e>
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	2b04      	cmp	r3, #4
 80068cc:	d109      	bne.n	80068e2 <HAL_TIM_PWM_Start+0x3e>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	bf14      	ite	ne
 80068da:	2301      	movne	r3, #1
 80068dc:	2300      	moveq	r3, #0
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	e02f      	b.n	8006942 <HAL_TIM_PWM_Start+0x9e>
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	2b08      	cmp	r3, #8
 80068e6:	d109      	bne.n	80068fc <HAL_TIM_PWM_Start+0x58>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80068ee:	b2db      	uxtb	r3, r3
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	bf14      	ite	ne
 80068f4:	2301      	movne	r3, #1
 80068f6:	2300      	moveq	r3, #0
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	e022      	b.n	8006942 <HAL_TIM_PWM_Start+0x9e>
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	2b0c      	cmp	r3, #12
 8006900:	d109      	bne.n	8006916 <HAL_TIM_PWM_Start+0x72>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006908:	b2db      	uxtb	r3, r3
 800690a:	2b01      	cmp	r3, #1
 800690c:	bf14      	ite	ne
 800690e:	2301      	movne	r3, #1
 8006910:	2300      	moveq	r3, #0
 8006912:	b2db      	uxtb	r3, r3
 8006914:	e015      	b.n	8006942 <HAL_TIM_PWM_Start+0x9e>
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	2b10      	cmp	r3, #16
 800691a:	d109      	bne.n	8006930 <HAL_TIM_PWM_Start+0x8c>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006922:	b2db      	uxtb	r3, r3
 8006924:	2b01      	cmp	r3, #1
 8006926:	bf14      	ite	ne
 8006928:	2301      	movne	r3, #1
 800692a:	2300      	moveq	r3, #0
 800692c:	b2db      	uxtb	r3, r3
 800692e:	e008      	b.n	8006942 <HAL_TIM_PWM_Start+0x9e>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006936:	b2db      	uxtb	r3, r3
 8006938:	2b01      	cmp	r3, #1
 800693a:	bf14      	ite	ne
 800693c:	2301      	movne	r3, #1
 800693e:	2300      	moveq	r3, #0
 8006940:	b2db      	uxtb	r3, r3
 8006942:	2b00      	cmp	r3, #0
 8006944:	d001      	beq.n	800694a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	e0a6      	b.n	8006a98 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d104      	bne.n	800695a <HAL_TIM_PWM_Start+0xb6>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2202      	movs	r2, #2
 8006954:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006958:	e023      	b.n	80069a2 <HAL_TIM_PWM_Start+0xfe>
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	2b04      	cmp	r3, #4
 800695e:	d104      	bne.n	800696a <HAL_TIM_PWM_Start+0xc6>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2202      	movs	r2, #2
 8006964:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006968:	e01b      	b.n	80069a2 <HAL_TIM_PWM_Start+0xfe>
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	2b08      	cmp	r3, #8
 800696e:	d104      	bne.n	800697a <HAL_TIM_PWM_Start+0xd6>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2202      	movs	r2, #2
 8006974:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006978:	e013      	b.n	80069a2 <HAL_TIM_PWM_Start+0xfe>
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	2b0c      	cmp	r3, #12
 800697e:	d104      	bne.n	800698a <HAL_TIM_PWM_Start+0xe6>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2202      	movs	r2, #2
 8006984:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006988:	e00b      	b.n	80069a2 <HAL_TIM_PWM_Start+0xfe>
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	2b10      	cmp	r3, #16
 800698e:	d104      	bne.n	800699a <HAL_TIM_PWM_Start+0xf6>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2202      	movs	r2, #2
 8006994:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006998:	e003      	b.n	80069a2 <HAL_TIM_PWM_Start+0xfe>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2202      	movs	r2, #2
 800699e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	2201      	movs	r2, #1
 80069a8:	6839      	ldr	r1, [r7, #0]
 80069aa:	4618      	mov	r0, r3
 80069ac:	f001 fc3e 	bl	800822c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a3a      	ldr	r2, [pc, #232]	@ (8006aa0 <HAL_TIM_PWM_Start+0x1fc>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d018      	beq.n	80069ec <HAL_TIM_PWM_Start+0x148>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a39      	ldr	r2, [pc, #228]	@ (8006aa4 <HAL_TIM_PWM_Start+0x200>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d013      	beq.n	80069ec <HAL_TIM_PWM_Start+0x148>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a37      	ldr	r2, [pc, #220]	@ (8006aa8 <HAL_TIM_PWM_Start+0x204>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d00e      	beq.n	80069ec <HAL_TIM_PWM_Start+0x148>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a36      	ldr	r2, [pc, #216]	@ (8006aac <HAL_TIM_PWM_Start+0x208>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d009      	beq.n	80069ec <HAL_TIM_PWM_Start+0x148>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a34      	ldr	r2, [pc, #208]	@ (8006ab0 <HAL_TIM_PWM_Start+0x20c>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d004      	beq.n	80069ec <HAL_TIM_PWM_Start+0x148>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a33      	ldr	r2, [pc, #204]	@ (8006ab4 <HAL_TIM_PWM_Start+0x210>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d101      	bne.n	80069f0 <HAL_TIM_PWM_Start+0x14c>
 80069ec:	2301      	movs	r3, #1
 80069ee:	e000      	b.n	80069f2 <HAL_TIM_PWM_Start+0x14e>
 80069f0:	2300      	movs	r3, #0
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d007      	beq.n	8006a06 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006a04:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a25      	ldr	r2, [pc, #148]	@ (8006aa0 <HAL_TIM_PWM_Start+0x1fc>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d022      	beq.n	8006a56 <HAL_TIM_PWM_Start+0x1b2>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a18:	d01d      	beq.n	8006a56 <HAL_TIM_PWM_Start+0x1b2>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a26      	ldr	r2, [pc, #152]	@ (8006ab8 <HAL_TIM_PWM_Start+0x214>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d018      	beq.n	8006a56 <HAL_TIM_PWM_Start+0x1b2>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a24      	ldr	r2, [pc, #144]	@ (8006abc <HAL_TIM_PWM_Start+0x218>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d013      	beq.n	8006a56 <HAL_TIM_PWM_Start+0x1b2>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a23      	ldr	r2, [pc, #140]	@ (8006ac0 <HAL_TIM_PWM_Start+0x21c>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d00e      	beq.n	8006a56 <HAL_TIM_PWM_Start+0x1b2>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a19      	ldr	r2, [pc, #100]	@ (8006aa4 <HAL_TIM_PWM_Start+0x200>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d009      	beq.n	8006a56 <HAL_TIM_PWM_Start+0x1b2>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a18      	ldr	r2, [pc, #96]	@ (8006aa8 <HAL_TIM_PWM_Start+0x204>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d004      	beq.n	8006a56 <HAL_TIM_PWM_Start+0x1b2>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a18      	ldr	r2, [pc, #96]	@ (8006ab4 <HAL_TIM_PWM_Start+0x210>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d115      	bne.n	8006a82 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	689a      	ldr	r2, [r3, #8]
 8006a5c:	4b19      	ldr	r3, [pc, #100]	@ (8006ac4 <HAL_TIM_PWM_Start+0x220>)
 8006a5e:	4013      	ands	r3, r2
 8006a60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2b06      	cmp	r3, #6
 8006a66:	d015      	beq.n	8006a94 <HAL_TIM_PWM_Start+0x1f0>
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a6e:	d011      	beq.n	8006a94 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f042 0201 	orr.w	r2, r2, #1
 8006a7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a80:	e008      	b.n	8006a94 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f042 0201 	orr.w	r2, r2, #1
 8006a90:	601a      	str	r2, [r3, #0]
 8006a92:	e000      	b.n	8006a96 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a94:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006a96:	2300      	movs	r3, #0
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3710      	adds	r7, #16
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}
 8006aa0:	40012c00 	.word	0x40012c00
 8006aa4:	40013400 	.word	0x40013400
 8006aa8:	40014000 	.word	0x40014000
 8006aac:	40014400 	.word	0x40014400
 8006ab0:	40014800 	.word	0x40014800
 8006ab4:	40015000 	.word	0x40015000
 8006ab8:	40000400 	.word	0x40000400
 8006abc:	40000800 	.word	0x40000800
 8006ac0:	40000c00 	.word	0x40000c00
 8006ac4:	00010007 	.word	0x00010007

08006ac8 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b086      	sub	sp, #24
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	60b9      	str	r1, [r7, #8]
 8006ad2:	607a      	str	r2, [r7, #4]
 8006ad4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d109      	bne.n	8006af4 <HAL_TIM_PWM_Start_DMA+0x2c>
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	2b02      	cmp	r3, #2
 8006aea:	bf0c      	ite	eq
 8006aec:	2301      	moveq	r3, #1
 8006aee:	2300      	movne	r3, #0
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	e03c      	b.n	8006b6e <HAL_TIM_PWM_Start_DMA+0xa6>
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	2b04      	cmp	r3, #4
 8006af8:	d109      	bne.n	8006b0e <HAL_TIM_PWM_Start_DMA+0x46>
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	2b02      	cmp	r3, #2
 8006b04:	bf0c      	ite	eq
 8006b06:	2301      	moveq	r3, #1
 8006b08:	2300      	movne	r3, #0
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	e02f      	b.n	8006b6e <HAL_TIM_PWM_Start_DMA+0xa6>
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	2b08      	cmp	r3, #8
 8006b12:	d109      	bne.n	8006b28 <HAL_TIM_PWM_Start_DMA+0x60>
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	2b02      	cmp	r3, #2
 8006b1e:	bf0c      	ite	eq
 8006b20:	2301      	moveq	r3, #1
 8006b22:	2300      	movne	r3, #0
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	e022      	b.n	8006b6e <HAL_TIM_PWM_Start_DMA+0xa6>
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	2b0c      	cmp	r3, #12
 8006b2c:	d109      	bne.n	8006b42 <HAL_TIM_PWM_Start_DMA+0x7a>
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	2b02      	cmp	r3, #2
 8006b38:	bf0c      	ite	eq
 8006b3a:	2301      	moveq	r3, #1
 8006b3c:	2300      	movne	r3, #0
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	e015      	b.n	8006b6e <HAL_TIM_PWM_Start_DMA+0xa6>
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	2b10      	cmp	r3, #16
 8006b46:	d109      	bne.n	8006b5c <HAL_TIM_PWM_Start_DMA+0x94>
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	2b02      	cmp	r3, #2
 8006b52:	bf0c      	ite	eq
 8006b54:	2301      	moveq	r3, #1
 8006b56:	2300      	movne	r3, #0
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	e008      	b.n	8006b6e <HAL_TIM_PWM_Start_DMA+0xa6>
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006b62:	b2db      	uxtb	r3, r3
 8006b64:	2b02      	cmp	r3, #2
 8006b66:	bf0c      	ite	eq
 8006b68:	2301      	moveq	r3, #1
 8006b6a:	2300      	movne	r3, #0
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d001      	beq.n	8006b76 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8006b72:	2302      	movs	r3, #2
 8006b74:	e1b5      	b.n	8006ee2 <HAL_TIM_PWM_Start_DMA+0x41a>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d109      	bne.n	8006b90 <HAL_TIM_PWM_Start_DMA+0xc8>
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	bf0c      	ite	eq
 8006b88:	2301      	moveq	r3, #1
 8006b8a:	2300      	movne	r3, #0
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	e03c      	b.n	8006c0a <HAL_TIM_PWM_Start_DMA+0x142>
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	2b04      	cmp	r3, #4
 8006b94:	d109      	bne.n	8006baa <HAL_TIM_PWM_Start_DMA+0xe2>
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006b9c:	b2db      	uxtb	r3, r3
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	bf0c      	ite	eq
 8006ba2:	2301      	moveq	r3, #1
 8006ba4:	2300      	movne	r3, #0
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	e02f      	b.n	8006c0a <HAL_TIM_PWM_Start_DMA+0x142>
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	2b08      	cmp	r3, #8
 8006bae:	d109      	bne.n	8006bc4 <HAL_TIM_PWM_Start_DMA+0xfc>
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006bb6:	b2db      	uxtb	r3, r3
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	bf0c      	ite	eq
 8006bbc:	2301      	moveq	r3, #1
 8006bbe:	2300      	movne	r3, #0
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	e022      	b.n	8006c0a <HAL_TIM_PWM_Start_DMA+0x142>
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	2b0c      	cmp	r3, #12
 8006bc8:	d109      	bne.n	8006bde <HAL_TIM_PWM_Start_DMA+0x116>
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	bf0c      	ite	eq
 8006bd6:	2301      	moveq	r3, #1
 8006bd8:	2300      	movne	r3, #0
 8006bda:	b2db      	uxtb	r3, r3
 8006bdc:	e015      	b.n	8006c0a <HAL_TIM_PWM_Start_DMA+0x142>
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	2b10      	cmp	r3, #16
 8006be2:	d109      	bne.n	8006bf8 <HAL_TIM_PWM_Start_DMA+0x130>
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	bf0c      	ite	eq
 8006bf0:	2301      	moveq	r3, #1
 8006bf2:	2300      	movne	r3, #0
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	e008      	b.n	8006c0a <HAL_TIM_PWM_Start_DMA+0x142>
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006bfe:	b2db      	uxtb	r3, r3
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	bf0c      	ite	eq
 8006c04:	2301      	moveq	r3, #1
 8006c06:	2300      	movne	r3, #0
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d034      	beq.n	8006c78 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d002      	beq.n	8006c1a <HAL_TIM_PWM_Start_DMA+0x152>
 8006c14:	887b      	ldrh	r3, [r7, #2]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d101      	bne.n	8006c1e <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e161      	b.n	8006ee2 <HAL_TIM_PWM_Start_DMA+0x41a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d104      	bne.n	8006c2e <HAL_TIM_PWM_Start_DMA+0x166>
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2202      	movs	r2, #2
 8006c28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006c2c:	e026      	b.n	8006c7c <HAL_TIM_PWM_Start_DMA+0x1b4>
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	2b04      	cmp	r3, #4
 8006c32:	d104      	bne.n	8006c3e <HAL_TIM_PWM_Start_DMA+0x176>
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2202      	movs	r2, #2
 8006c38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006c3c:	e01e      	b.n	8006c7c <HAL_TIM_PWM_Start_DMA+0x1b4>
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	2b08      	cmp	r3, #8
 8006c42:	d104      	bne.n	8006c4e <HAL_TIM_PWM_Start_DMA+0x186>
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2202      	movs	r2, #2
 8006c48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006c4c:	e016      	b.n	8006c7c <HAL_TIM_PWM_Start_DMA+0x1b4>
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	2b0c      	cmp	r3, #12
 8006c52:	d104      	bne.n	8006c5e <HAL_TIM_PWM_Start_DMA+0x196>
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2202      	movs	r2, #2
 8006c58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006c5c:	e00e      	b.n	8006c7c <HAL_TIM_PWM_Start_DMA+0x1b4>
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	2b10      	cmp	r3, #16
 8006c62:	d104      	bne.n	8006c6e <HAL_TIM_PWM_Start_DMA+0x1a6>
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2202      	movs	r2, #2
 8006c68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006c6c:	e006      	b.n	8006c7c <HAL_TIM_PWM_Start_DMA+0x1b4>
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2202      	movs	r2, #2
 8006c72:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006c76:	e001      	b.n	8006c7c <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	e132      	b.n	8006ee2 <HAL_TIM_PWM_Start_DMA+0x41a>
  }

  switch (Channel)
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	2b0c      	cmp	r3, #12
 8006c80:	f200 80ae 	bhi.w	8006de0 <HAL_TIM_PWM_Start_DMA+0x318>
 8006c84:	a201      	add	r2, pc, #4	@ (adr r2, 8006c8c <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8006c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c8a:	bf00      	nop
 8006c8c:	08006cc1 	.word	0x08006cc1
 8006c90:	08006de1 	.word	0x08006de1
 8006c94:	08006de1 	.word	0x08006de1
 8006c98:	08006de1 	.word	0x08006de1
 8006c9c:	08006d09 	.word	0x08006d09
 8006ca0:	08006de1 	.word	0x08006de1
 8006ca4:	08006de1 	.word	0x08006de1
 8006ca8:	08006de1 	.word	0x08006de1
 8006cac:	08006d51 	.word	0x08006d51
 8006cb0:	08006de1 	.word	0x08006de1
 8006cb4:	08006de1 	.word	0x08006de1
 8006cb8:	08006de1 	.word	0x08006de1
 8006cbc:	08006d99 	.word	0x08006d99
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cc4:	4a89      	ldr	r2, [pc, #548]	@ (8006eec <HAL_TIM_PWM_Start_DMA+0x424>)
 8006cc6:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ccc:	4a88      	ldr	r2, [pc, #544]	@ (8006ef0 <HAL_TIM_PWM_Start_DMA+0x428>)
 8006cce:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cd4:	4a87      	ldr	r2, [pc, #540]	@ (8006ef4 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8006cd6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8006cdc:	6879      	ldr	r1, [r7, #4]
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	3334      	adds	r3, #52	@ 0x34
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	887b      	ldrh	r3, [r7, #2]
 8006ce8:	f7fc f936 	bl	8002f58 <HAL_DMA_Start_IT>
 8006cec:	4603      	mov	r3, r0
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d001      	beq.n	8006cf6 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	e0f5      	b.n	8006ee2 <HAL_TIM_PWM_Start_DMA+0x41a>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	68da      	ldr	r2, [r3, #12]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d04:	60da      	str	r2, [r3, #12]
      break;
 8006d06:	e06e      	b.n	8006de6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d0c:	4a77      	ldr	r2, [pc, #476]	@ (8006eec <HAL_TIM_PWM_Start_DMA+0x424>)
 8006d0e:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d14:	4a76      	ldr	r2, [pc, #472]	@ (8006ef0 <HAL_TIM_PWM_Start_DMA+0x428>)
 8006d16:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d1c:	4a75      	ldr	r2, [pc, #468]	@ (8006ef4 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8006d1e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8006d24:	6879      	ldr	r1, [r7, #4]
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	3338      	adds	r3, #56	@ 0x38
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	887b      	ldrh	r3, [r7, #2]
 8006d30:	f7fc f912 	bl	8002f58 <HAL_DMA_Start_IT>
 8006d34:	4603      	mov	r3, r0
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d001      	beq.n	8006d3e <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	e0d1      	b.n	8006ee2 <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	68da      	ldr	r2, [r3, #12]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006d4c:	60da      	str	r2, [r3, #12]
      break;
 8006d4e:	e04a      	b.n	8006de6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d54:	4a65      	ldr	r2, [pc, #404]	@ (8006eec <HAL_TIM_PWM_Start_DMA+0x424>)
 8006d56:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d5c:	4a64      	ldr	r2, [pc, #400]	@ (8006ef0 <HAL_TIM_PWM_Start_DMA+0x428>)
 8006d5e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d64:	4a63      	ldr	r2, [pc, #396]	@ (8006ef4 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8006d66:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8006d6c:	6879      	ldr	r1, [r7, #4]
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	333c      	adds	r3, #60	@ 0x3c
 8006d74:	461a      	mov	r2, r3
 8006d76:	887b      	ldrh	r3, [r7, #2]
 8006d78:	f7fc f8ee 	bl	8002f58 <HAL_DMA_Start_IT>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d001      	beq.n	8006d86 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
 8006d84:	e0ad      	b.n	8006ee2 <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	68da      	ldr	r2, [r3, #12]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006d94:	60da      	str	r2, [r3, #12]
      break;
 8006d96:	e026      	b.n	8006de6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d9c:	4a53      	ldr	r2, [pc, #332]	@ (8006eec <HAL_TIM_PWM_Start_DMA+0x424>)
 8006d9e:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006da4:	4a52      	ldr	r2, [pc, #328]	@ (8006ef0 <HAL_TIM_PWM_Start_DMA+0x428>)
 8006da6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dac:	4a51      	ldr	r2, [pc, #324]	@ (8006ef4 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8006dae:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006db4:	6879      	ldr	r1, [r7, #4]
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	3340      	adds	r3, #64	@ 0x40
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	887b      	ldrh	r3, [r7, #2]
 8006dc0:	f7fc f8ca 	bl	8002f58 <HAL_DMA_Start_IT>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d001      	beq.n	8006dce <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e089      	b.n	8006ee2 <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	68da      	ldr	r2, [r3, #12]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006ddc:	60da      	str	r2, [r3, #12]
      break;
 8006dde:	e002      	b.n	8006de6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	75fb      	strb	r3, [r7, #23]
      break;
 8006de4:	bf00      	nop
  }

  if (status == HAL_OK)
 8006de6:	7dfb      	ldrb	r3, [r7, #23]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d179      	bne.n	8006ee0 <HAL_TIM_PWM_Start_DMA+0x418>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	2201      	movs	r2, #1
 8006df2:	68b9      	ldr	r1, [r7, #8]
 8006df4:	4618      	mov	r0, r3
 8006df6:	f001 fa19 	bl	800822c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a3e      	ldr	r2, [pc, #248]	@ (8006ef8 <HAL_TIM_PWM_Start_DMA+0x430>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d018      	beq.n	8006e36 <HAL_TIM_PWM_Start_DMA+0x36e>
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a3c      	ldr	r2, [pc, #240]	@ (8006efc <HAL_TIM_PWM_Start_DMA+0x434>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d013      	beq.n	8006e36 <HAL_TIM_PWM_Start_DMA+0x36e>
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a3b      	ldr	r2, [pc, #236]	@ (8006f00 <HAL_TIM_PWM_Start_DMA+0x438>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d00e      	beq.n	8006e36 <HAL_TIM_PWM_Start_DMA+0x36e>
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a39      	ldr	r2, [pc, #228]	@ (8006f04 <HAL_TIM_PWM_Start_DMA+0x43c>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d009      	beq.n	8006e36 <HAL_TIM_PWM_Start_DMA+0x36e>
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a38      	ldr	r2, [pc, #224]	@ (8006f08 <HAL_TIM_PWM_Start_DMA+0x440>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d004      	beq.n	8006e36 <HAL_TIM_PWM_Start_DMA+0x36e>
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a36      	ldr	r2, [pc, #216]	@ (8006f0c <HAL_TIM_PWM_Start_DMA+0x444>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d101      	bne.n	8006e3a <HAL_TIM_PWM_Start_DMA+0x372>
 8006e36:	2301      	movs	r3, #1
 8006e38:	e000      	b.n	8006e3c <HAL_TIM_PWM_Start_DMA+0x374>
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d007      	beq.n	8006e50 <HAL_TIM_PWM_Start_DMA+0x388>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006e4e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a28      	ldr	r2, [pc, #160]	@ (8006ef8 <HAL_TIM_PWM_Start_DMA+0x430>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d022      	beq.n	8006ea0 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e62:	d01d      	beq.n	8006ea0 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a29      	ldr	r2, [pc, #164]	@ (8006f10 <HAL_TIM_PWM_Start_DMA+0x448>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d018      	beq.n	8006ea0 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a28      	ldr	r2, [pc, #160]	@ (8006f14 <HAL_TIM_PWM_Start_DMA+0x44c>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d013      	beq.n	8006ea0 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a26      	ldr	r2, [pc, #152]	@ (8006f18 <HAL_TIM_PWM_Start_DMA+0x450>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d00e      	beq.n	8006ea0 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a1d      	ldr	r2, [pc, #116]	@ (8006efc <HAL_TIM_PWM_Start_DMA+0x434>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d009      	beq.n	8006ea0 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a1b      	ldr	r2, [pc, #108]	@ (8006f00 <HAL_TIM_PWM_Start_DMA+0x438>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d004      	beq.n	8006ea0 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a1c      	ldr	r2, [pc, #112]	@ (8006f0c <HAL_TIM_PWM_Start_DMA+0x444>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d115      	bne.n	8006ecc <HAL_TIM_PWM_Start_DMA+0x404>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	689a      	ldr	r2, [r3, #8]
 8006ea6:	4b1d      	ldr	r3, [pc, #116]	@ (8006f1c <HAL_TIM_PWM_Start_DMA+0x454>)
 8006ea8:	4013      	ands	r3, r2
 8006eaa:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	2b06      	cmp	r3, #6
 8006eb0:	d015      	beq.n	8006ede <HAL_TIM_PWM_Start_DMA+0x416>
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006eb8:	d011      	beq.n	8006ede <HAL_TIM_PWM_Start_DMA+0x416>
      {
        __HAL_TIM_ENABLE(htim);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f042 0201 	orr.w	r2, r2, #1
 8006ec8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006eca:	e008      	b.n	8006ede <HAL_TIM_PWM_Start_DMA+0x416>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	681a      	ldr	r2, [r3, #0]
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f042 0201 	orr.w	r2, r2, #1
 8006eda:	601a      	str	r2, [r3, #0]
 8006edc:	e000      	b.n	8006ee0 <HAL_TIM_PWM_Start_DMA+0x418>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ede:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8006ee0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3718      	adds	r7, #24
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}
 8006eea:	bf00      	nop
 8006eec:	08007827 	.word	0x08007827
 8006ef0:	080078cf 	.word	0x080078cf
 8006ef4:	08007795 	.word	0x08007795
 8006ef8:	40012c00 	.word	0x40012c00
 8006efc:	40013400 	.word	0x40013400
 8006f00:	40014000 	.word	0x40014000
 8006f04:	40014400 	.word	0x40014400
 8006f08:	40014800 	.word	0x40014800
 8006f0c:	40015000 	.word	0x40015000
 8006f10:	40000400 	.word	0x40000400
 8006f14:	40000800 	.word	0x40000800
 8006f18:	40000c00 	.word	0x40000c00
 8006f1c:	00010007 	.word	0x00010007

08006f20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b084      	sub	sp, #16
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	68db      	ldr	r3, [r3, #12]
 8006f2e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	691b      	ldr	r3, [r3, #16]
 8006f36:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	f003 0302 	and.w	r3, r3, #2
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d020      	beq.n	8006f84 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f003 0302 	and.w	r3, r3, #2
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d01b      	beq.n	8006f84 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f06f 0202 	mvn.w	r2, #2
 8006f54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2201      	movs	r2, #1
 8006f5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	699b      	ldr	r3, [r3, #24]
 8006f62:	f003 0303 	and.w	r3, r3, #3
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d003      	beq.n	8006f72 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 fbe0 	bl	8007730 <HAL_TIM_IC_CaptureCallback>
 8006f70:	e005      	b.n	8006f7e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 fbd2 	bl	800771c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f000 fbe3 	bl	8007744 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2200      	movs	r2, #0
 8006f82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	f003 0304 	and.w	r3, r3, #4
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d020      	beq.n	8006fd0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	f003 0304 	and.w	r3, r3, #4
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d01b      	beq.n	8006fd0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f06f 0204 	mvn.w	r2, #4
 8006fa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2202      	movs	r2, #2
 8006fa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	699b      	ldr	r3, [r3, #24]
 8006fae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d003      	beq.n	8006fbe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 fbba 	bl	8007730 <HAL_TIM_IC_CaptureCallback>
 8006fbc:	e005      	b.n	8006fca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 fbac 	bl	800771c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f000 fbbd 	bl	8007744 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	f003 0308 	and.w	r3, r3, #8
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d020      	beq.n	800701c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f003 0308 	and.w	r3, r3, #8
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d01b      	beq.n	800701c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f06f 0208 	mvn.w	r2, #8
 8006fec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2204      	movs	r2, #4
 8006ff2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	69db      	ldr	r3, [r3, #28]
 8006ffa:	f003 0303 	and.w	r3, r3, #3
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d003      	beq.n	800700a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 fb94 	bl	8007730 <HAL_TIM_IC_CaptureCallback>
 8007008:	e005      	b.n	8007016 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 fb86 	bl	800771c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f000 fb97 	bl	8007744 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	f003 0310 	and.w	r3, r3, #16
 8007022:	2b00      	cmp	r3, #0
 8007024:	d020      	beq.n	8007068 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	f003 0310 	and.w	r3, r3, #16
 800702c:	2b00      	cmp	r3, #0
 800702e:	d01b      	beq.n	8007068 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f06f 0210 	mvn.w	r2, #16
 8007038:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2208      	movs	r2, #8
 800703e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	69db      	ldr	r3, [r3, #28]
 8007046:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800704a:	2b00      	cmp	r3, #0
 800704c:	d003      	beq.n	8007056 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 fb6e 	bl	8007730 <HAL_TIM_IC_CaptureCallback>
 8007054:	e005      	b.n	8007062 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 fb60 	bl	800771c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f000 fb71 	bl	8007744 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2200      	movs	r2, #0
 8007066:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	f003 0301 	and.w	r3, r3, #1
 800706e:	2b00      	cmp	r3, #0
 8007070:	d00c      	beq.n	800708c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f003 0301 	and.w	r3, r3, #1
 8007078:	2b00      	cmp	r3, #0
 800707a:	d007      	beq.n	800708c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f06f 0201 	mvn.w	r2, #1
 8007084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f000 fb3e 	bl	8007708 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007092:	2b00      	cmp	r3, #0
 8007094:	d104      	bne.n	80070a0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800709c:	2b00      	cmp	r3, #0
 800709e:	d00c      	beq.n	80070ba <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d007      	beq.n	80070ba <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80070b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f001 fa13 	bl	80084e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d00c      	beq.n	80070de <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d007      	beq.n	80070de <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80070d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f001 fa0b 	bl	80084f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d00c      	beq.n	8007102 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d007      	beq.n	8007102 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80070fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f000 fb35 	bl	800776c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	f003 0320 	and.w	r3, r3, #32
 8007108:	2b00      	cmp	r3, #0
 800710a:	d00c      	beq.n	8007126 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f003 0320 	and.w	r3, r3, #32
 8007112:	2b00      	cmp	r3, #0
 8007114:	d007      	beq.n	8007126 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f06f 0220 	mvn.w	r2, #32
 800711e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f001 f9d3 	bl	80084cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800712c:	2b00      	cmp	r3, #0
 800712e:	d00c      	beq.n	800714a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007136:	2b00      	cmp	r3, #0
 8007138:	d007      	beq.n	800714a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8007142:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f001 f9df 	bl	8008508 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007150:	2b00      	cmp	r3, #0
 8007152:	d00c      	beq.n	800716e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800715a:	2b00      	cmp	r3, #0
 800715c:	d007      	beq.n	800716e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8007166:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f001 f9d7 	bl	800851c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007174:	2b00      	cmp	r3, #0
 8007176:	d00c      	beq.n	8007192 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800717e:	2b00      	cmp	r3, #0
 8007180:	d007      	beq.n	8007192 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800718a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f001 f9cf 	bl	8008530 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007198:	2b00      	cmp	r3, #0
 800719a:	d00c      	beq.n	80071b6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d007      	beq.n	80071b6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80071ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f001 f9c7 	bl	8008544 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80071b6:	bf00      	nop
 80071b8:	3710      	adds	r7, #16
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
	...

080071c0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b086      	sub	sp, #24
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	60f8      	str	r0, [r7, #12]
 80071c8:	60b9      	str	r1, [r7, #8]
 80071ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071cc:	2300      	movs	r3, #0
 80071ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	d101      	bne.n	80071de <HAL_TIM_OC_ConfigChannel+0x1e>
 80071da:	2302      	movs	r3, #2
 80071dc:	e066      	b.n	80072ac <HAL_TIM_OC_ConfigChannel+0xec>
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2201      	movs	r2, #1
 80071e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2b14      	cmp	r3, #20
 80071ea:	d857      	bhi.n	800729c <HAL_TIM_OC_ConfigChannel+0xdc>
 80071ec:	a201      	add	r2, pc, #4	@ (adr r2, 80071f4 <HAL_TIM_OC_ConfigChannel+0x34>)
 80071ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f2:	bf00      	nop
 80071f4:	08007249 	.word	0x08007249
 80071f8:	0800729d 	.word	0x0800729d
 80071fc:	0800729d 	.word	0x0800729d
 8007200:	0800729d 	.word	0x0800729d
 8007204:	08007257 	.word	0x08007257
 8007208:	0800729d 	.word	0x0800729d
 800720c:	0800729d 	.word	0x0800729d
 8007210:	0800729d 	.word	0x0800729d
 8007214:	08007265 	.word	0x08007265
 8007218:	0800729d 	.word	0x0800729d
 800721c:	0800729d 	.word	0x0800729d
 8007220:	0800729d 	.word	0x0800729d
 8007224:	08007273 	.word	0x08007273
 8007228:	0800729d 	.word	0x0800729d
 800722c:	0800729d 	.word	0x0800729d
 8007230:	0800729d 	.word	0x0800729d
 8007234:	08007281 	.word	0x08007281
 8007238:	0800729d 	.word	0x0800729d
 800723c:	0800729d 	.word	0x0800729d
 8007240:	0800729d 	.word	0x0800729d
 8007244:	0800728f 	.word	0x0800728f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	68b9      	ldr	r1, [r7, #8]
 800724e:	4618      	mov	r0, r3
 8007250:	f000 fc26 	bl	8007aa0 <TIM_OC1_SetConfig>
      break;
 8007254:	e025      	b.n	80072a2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	68b9      	ldr	r1, [r7, #8]
 800725c:	4618      	mov	r0, r3
 800725e:	f000 fcb9 	bl	8007bd4 <TIM_OC2_SetConfig>
      break;
 8007262:	e01e      	b.n	80072a2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	68b9      	ldr	r1, [r7, #8]
 800726a:	4618      	mov	r0, r3
 800726c:	f000 fd46 	bl	8007cfc <TIM_OC3_SetConfig>
      break;
 8007270:	e017      	b.n	80072a2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	68b9      	ldr	r1, [r7, #8]
 8007278:	4618      	mov	r0, r3
 800727a:	f000 fdd1 	bl	8007e20 <TIM_OC4_SetConfig>
      break;
 800727e:	e010      	b.n	80072a2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	68b9      	ldr	r1, [r7, #8]
 8007286:	4618      	mov	r0, r3
 8007288:	f000 fe5e 	bl	8007f48 <TIM_OC5_SetConfig>
      break;
 800728c:	e009      	b.n	80072a2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	68b9      	ldr	r1, [r7, #8]
 8007294:	4618      	mov	r0, r3
 8007296:	f000 fec1 	bl	800801c <TIM_OC6_SetConfig>
      break;
 800729a:	e002      	b.n	80072a2 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800729c:	2301      	movs	r3, #1
 800729e:	75fb      	strb	r3, [r7, #23]
      break;
 80072a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2200      	movs	r2, #0
 80072a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80072aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3718      	adds	r7, #24
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b086      	sub	sp, #24
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	60f8      	str	r0, [r7, #12]
 80072bc:	60b9      	str	r1, [r7, #8]
 80072be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072c0:	2300      	movs	r3, #0
 80072c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	d101      	bne.n	80072d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80072ce:	2302      	movs	r3, #2
 80072d0:	e0ff      	b.n	80074d2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2201      	movs	r2, #1
 80072d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2b14      	cmp	r3, #20
 80072de:	f200 80f0 	bhi.w	80074c2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80072e2:	a201      	add	r2, pc, #4	@ (adr r2, 80072e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80072e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e8:	0800733d 	.word	0x0800733d
 80072ec:	080074c3 	.word	0x080074c3
 80072f0:	080074c3 	.word	0x080074c3
 80072f4:	080074c3 	.word	0x080074c3
 80072f8:	0800737d 	.word	0x0800737d
 80072fc:	080074c3 	.word	0x080074c3
 8007300:	080074c3 	.word	0x080074c3
 8007304:	080074c3 	.word	0x080074c3
 8007308:	080073bf 	.word	0x080073bf
 800730c:	080074c3 	.word	0x080074c3
 8007310:	080074c3 	.word	0x080074c3
 8007314:	080074c3 	.word	0x080074c3
 8007318:	080073ff 	.word	0x080073ff
 800731c:	080074c3 	.word	0x080074c3
 8007320:	080074c3 	.word	0x080074c3
 8007324:	080074c3 	.word	0x080074c3
 8007328:	08007441 	.word	0x08007441
 800732c:	080074c3 	.word	0x080074c3
 8007330:	080074c3 	.word	0x080074c3
 8007334:	080074c3 	.word	0x080074c3
 8007338:	08007481 	.word	0x08007481
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	68b9      	ldr	r1, [r7, #8]
 8007342:	4618      	mov	r0, r3
 8007344:	f000 fbac 	bl	8007aa0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	699a      	ldr	r2, [r3, #24]
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f042 0208 	orr.w	r2, r2, #8
 8007356:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	699a      	ldr	r2, [r3, #24]
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f022 0204 	bic.w	r2, r2, #4
 8007366:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	6999      	ldr	r1, [r3, #24]
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	691a      	ldr	r2, [r3, #16]
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	430a      	orrs	r2, r1
 8007378:	619a      	str	r2, [r3, #24]
      break;
 800737a:	e0a5      	b.n	80074c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	68b9      	ldr	r1, [r7, #8]
 8007382:	4618      	mov	r0, r3
 8007384:	f000 fc26 	bl	8007bd4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	699a      	ldr	r2, [r3, #24]
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007396:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	699a      	ldr	r2, [r3, #24]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80073a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	6999      	ldr	r1, [r3, #24]
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	691b      	ldr	r3, [r3, #16]
 80073b2:	021a      	lsls	r2, r3, #8
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	430a      	orrs	r2, r1
 80073ba:	619a      	str	r2, [r3, #24]
      break;
 80073bc:	e084      	b.n	80074c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	68b9      	ldr	r1, [r7, #8]
 80073c4:	4618      	mov	r0, r3
 80073c6:	f000 fc99 	bl	8007cfc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	69da      	ldr	r2, [r3, #28]
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f042 0208 	orr.w	r2, r2, #8
 80073d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	69da      	ldr	r2, [r3, #28]
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f022 0204 	bic.w	r2, r2, #4
 80073e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	69d9      	ldr	r1, [r3, #28]
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	691a      	ldr	r2, [r3, #16]
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	430a      	orrs	r2, r1
 80073fa:	61da      	str	r2, [r3, #28]
      break;
 80073fc:	e064      	b.n	80074c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	68b9      	ldr	r1, [r7, #8]
 8007404:	4618      	mov	r0, r3
 8007406:	f000 fd0b 	bl	8007e20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	69da      	ldr	r2, [r3, #28]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007418:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	69da      	ldr	r2, [r3, #28]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007428:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	69d9      	ldr	r1, [r3, #28]
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	691b      	ldr	r3, [r3, #16]
 8007434:	021a      	lsls	r2, r3, #8
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	430a      	orrs	r2, r1
 800743c:	61da      	str	r2, [r3, #28]
      break;
 800743e:	e043      	b.n	80074c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	68b9      	ldr	r1, [r7, #8]
 8007446:	4618      	mov	r0, r3
 8007448:	f000 fd7e 	bl	8007f48 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f042 0208 	orr.w	r2, r2, #8
 800745a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f022 0204 	bic.w	r2, r2, #4
 800746a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	691a      	ldr	r2, [r3, #16]
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	430a      	orrs	r2, r1
 800747c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800747e:	e023      	b.n	80074c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	68b9      	ldr	r1, [r7, #8]
 8007486:	4618      	mov	r0, r3
 8007488:	f000 fdc8 	bl	800801c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800749a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80074aa:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	691b      	ldr	r3, [r3, #16]
 80074b6:	021a      	lsls	r2, r3, #8
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	430a      	orrs	r2, r1
 80074be:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80074c0:	e002      	b.n	80074c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80074c2:	2301      	movs	r3, #1
 80074c4:	75fb      	strb	r3, [r7, #23]
      break;
 80074c6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2200      	movs	r2, #0
 80074cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80074d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3718      	adds	r7, #24
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}
 80074da:	bf00      	nop

080074dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b084      	sub	sp, #16
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80074e6:	2300      	movs	r3, #0
 80074e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d101      	bne.n	80074f8 <HAL_TIM_ConfigClockSource+0x1c>
 80074f4:	2302      	movs	r3, #2
 80074f6:	e0f6      	b.n	80076e6 <HAL_TIM_ConfigClockSource+0x20a>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2201      	movs	r2, #1
 80074fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2202      	movs	r2, #2
 8007504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8007516:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800751a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007522:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	68ba      	ldr	r2, [r7, #8]
 800752a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a6f      	ldr	r2, [pc, #444]	@ (80076f0 <HAL_TIM_ConfigClockSource+0x214>)
 8007532:	4293      	cmp	r3, r2
 8007534:	f000 80c1 	beq.w	80076ba <HAL_TIM_ConfigClockSource+0x1de>
 8007538:	4a6d      	ldr	r2, [pc, #436]	@ (80076f0 <HAL_TIM_ConfigClockSource+0x214>)
 800753a:	4293      	cmp	r3, r2
 800753c:	f200 80c6 	bhi.w	80076cc <HAL_TIM_ConfigClockSource+0x1f0>
 8007540:	4a6c      	ldr	r2, [pc, #432]	@ (80076f4 <HAL_TIM_ConfigClockSource+0x218>)
 8007542:	4293      	cmp	r3, r2
 8007544:	f000 80b9 	beq.w	80076ba <HAL_TIM_ConfigClockSource+0x1de>
 8007548:	4a6a      	ldr	r2, [pc, #424]	@ (80076f4 <HAL_TIM_ConfigClockSource+0x218>)
 800754a:	4293      	cmp	r3, r2
 800754c:	f200 80be 	bhi.w	80076cc <HAL_TIM_ConfigClockSource+0x1f0>
 8007550:	4a69      	ldr	r2, [pc, #420]	@ (80076f8 <HAL_TIM_ConfigClockSource+0x21c>)
 8007552:	4293      	cmp	r3, r2
 8007554:	f000 80b1 	beq.w	80076ba <HAL_TIM_ConfigClockSource+0x1de>
 8007558:	4a67      	ldr	r2, [pc, #412]	@ (80076f8 <HAL_TIM_ConfigClockSource+0x21c>)
 800755a:	4293      	cmp	r3, r2
 800755c:	f200 80b6 	bhi.w	80076cc <HAL_TIM_ConfigClockSource+0x1f0>
 8007560:	4a66      	ldr	r2, [pc, #408]	@ (80076fc <HAL_TIM_ConfigClockSource+0x220>)
 8007562:	4293      	cmp	r3, r2
 8007564:	f000 80a9 	beq.w	80076ba <HAL_TIM_ConfigClockSource+0x1de>
 8007568:	4a64      	ldr	r2, [pc, #400]	@ (80076fc <HAL_TIM_ConfigClockSource+0x220>)
 800756a:	4293      	cmp	r3, r2
 800756c:	f200 80ae 	bhi.w	80076cc <HAL_TIM_ConfigClockSource+0x1f0>
 8007570:	4a63      	ldr	r2, [pc, #396]	@ (8007700 <HAL_TIM_ConfigClockSource+0x224>)
 8007572:	4293      	cmp	r3, r2
 8007574:	f000 80a1 	beq.w	80076ba <HAL_TIM_ConfigClockSource+0x1de>
 8007578:	4a61      	ldr	r2, [pc, #388]	@ (8007700 <HAL_TIM_ConfigClockSource+0x224>)
 800757a:	4293      	cmp	r3, r2
 800757c:	f200 80a6 	bhi.w	80076cc <HAL_TIM_ConfigClockSource+0x1f0>
 8007580:	4a60      	ldr	r2, [pc, #384]	@ (8007704 <HAL_TIM_ConfigClockSource+0x228>)
 8007582:	4293      	cmp	r3, r2
 8007584:	f000 8099 	beq.w	80076ba <HAL_TIM_ConfigClockSource+0x1de>
 8007588:	4a5e      	ldr	r2, [pc, #376]	@ (8007704 <HAL_TIM_ConfigClockSource+0x228>)
 800758a:	4293      	cmp	r3, r2
 800758c:	f200 809e 	bhi.w	80076cc <HAL_TIM_ConfigClockSource+0x1f0>
 8007590:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007594:	f000 8091 	beq.w	80076ba <HAL_TIM_ConfigClockSource+0x1de>
 8007598:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800759c:	f200 8096 	bhi.w	80076cc <HAL_TIM_ConfigClockSource+0x1f0>
 80075a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80075a4:	f000 8089 	beq.w	80076ba <HAL_TIM_ConfigClockSource+0x1de>
 80075a8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80075ac:	f200 808e 	bhi.w	80076cc <HAL_TIM_ConfigClockSource+0x1f0>
 80075b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075b4:	d03e      	beq.n	8007634 <HAL_TIM_ConfigClockSource+0x158>
 80075b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075ba:	f200 8087 	bhi.w	80076cc <HAL_TIM_ConfigClockSource+0x1f0>
 80075be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075c2:	f000 8086 	beq.w	80076d2 <HAL_TIM_ConfigClockSource+0x1f6>
 80075c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075ca:	d87f      	bhi.n	80076cc <HAL_TIM_ConfigClockSource+0x1f0>
 80075cc:	2b70      	cmp	r3, #112	@ 0x70
 80075ce:	d01a      	beq.n	8007606 <HAL_TIM_ConfigClockSource+0x12a>
 80075d0:	2b70      	cmp	r3, #112	@ 0x70
 80075d2:	d87b      	bhi.n	80076cc <HAL_TIM_ConfigClockSource+0x1f0>
 80075d4:	2b60      	cmp	r3, #96	@ 0x60
 80075d6:	d050      	beq.n	800767a <HAL_TIM_ConfigClockSource+0x19e>
 80075d8:	2b60      	cmp	r3, #96	@ 0x60
 80075da:	d877      	bhi.n	80076cc <HAL_TIM_ConfigClockSource+0x1f0>
 80075dc:	2b50      	cmp	r3, #80	@ 0x50
 80075de:	d03c      	beq.n	800765a <HAL_TIM_ConfigClockSource+0x17e>
 80075e0:	2b50      	cmp	r3, #80	@ 0x50
 80075e2:	d873      	bhi.n	80076cc <HAL_TIM_ConfigClockSource+0x1f0>
 80075e4:	2b40      	cmp	r3, #64	@ 0x40
 80075e6:	d058      	beq.n	800769a <HAL_TIM_ConfigClockSource+0x1be>
 80075e8:	2b40      	cmp	r3, #64	@ 0x40
 80075ea:	d86f      	bhi.n	80076cc <HAL_TIM_ConfigClockSource+0x1f0>
 80075ec:	2b30      	cmp	r3, #48	@ 0x30
 80075ee:	d064      	beq.n	80076ba <HAL_TIM_ConfigClockSource+0x1de>
 80075f0:	2b30      	cmp	r3, #48	@ 0x30
 80075f2:	d86b      	bhi.n	80076cc <HAL_TIM_ConfigClockSource+0x1f0>
 80075f4:	2b20      	cmp	r3, #32
 80075f6:	d060      	beq.n	80076ba <HAL_TIM_ConfigClockSource+0x1de>
 80075f8:	2b20      	cmp	r3, #32
 80075fa:	d867      	bhi.n	80076cc <HAL_TIM_ConfigClockSource+0x1f0>
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d05c      	beq.n	80076ba <HAL_TIM_ConfigClockSource+0x1de>
 8007600:	2b10      	cmp	r3, #16
 8007602:	d05a      	beq.n	80076ba <HAL_TIM_ConfigClockSource+0x1de>
 8007604:	e062      	b.n	80076cc <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007616:	f000 fde9 	bl	80081ec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	689b      	ldr	r3, [r3, #8]
 8007620:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007628:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	68ba      	ldr	r2, [r7, #8]
 8007630:	609a      	str	r2, [r3, #8]
      break;
 8007632:	e04f      	b.n	80076d4 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007644:	f000 fdd2 	bl	80081ec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	689a      	ldr	r2, [r3, #8]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007656:	609a      	str	r2, [r3, #8]
      break;
 8007658:	e03c      	b.n	80076d4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007666:	461a      	mov	r2, r3
 8007668:	f000 fd44 	bl	80080f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	2150      	movs	r1, #80	@ 0x50
 8007672:	4618      	mov	r0, r3
 8007674:	f000 fd9d 	bl	80081b2 <TIM_ITRx_SetConfig>
      break;
 8007678:	e02c      	b.n	80076d4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007686:	461a      	mov	r2, r3
 8007688:	f000 fd63 	bl	8008152 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	2160      	movs	r1, #96	@ 0x60
 8007692:	4618      	mov	r0, r3
 8007694:	f000 fd8d 	bl	80081b2 <TIM_ITRx_SetConfig>
      break;
 8007698:	e01c      	b.n	80076d4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80076a6:	461a      	mov	r2, r3
 80076a8:	f000 fd24 	bl	80080f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	2140      	movs	r1, #64	@ 0x40
 80076b2:	4618      	mov	r0, r3
 80076b4:	f000 fd7d 	bl	80081b2 <TIM_ITRx_SetConfig>
      break;
 80076b8:	e00c      	b.n	80076d4 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681a      	ldr	r2, [r3, #0]
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4619      	mov	r1, r3
 80076c4:	4610      	mov	r0, r2
 80076c6:	f000 fd74 	bl	80081b2 <TIM_ITRx_SetConfig>
      break;
 80076ca:	e003      	b.n	80076d4 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80076cc:	2301      	movs	r3, #1
 80076ce:	73fb      	strb	r3, [r7, #15]
      break;
 80076d0:	e000      	b.n	80076d4 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80076d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2201      	movs	r2, #1
 80076d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2200      	movs	r2, #0
 80076e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80076e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3710      	adds	r7, #16
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}
 80076ee:	bf00      	nop
 80076f0:	00100070 	.word	0x00100070
 80076f4:	00100060 	.word	0x00100060
 80076f8:	00100050 	.word	0x00100050
 80076fc:	00100040 	.word	0x00100040
 8007700:	00100030 	.word	0x00100030
 8007704:	00100020 	.word	0x00100020

08007708 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007708:	b480      	push	{r7}
 800770a:	b083      	sub	sp, #12
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007710:	bf00      	nop
 8007712:	370c      	adds	r7, #12
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr

0800771c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800771c:	b480      	push	{r7}
 800771e:	b083      	sub	sp, #12
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007724:	bf00      	nop
 8007726:	370c      	adds	r7, #12
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr

08007730 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007730:	b480      	push	{r7}
 8007732:	b083      	sub	sp, #12
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007738:	bf00      	nop
 800773a:	370c      	adds	r7, #12
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr

08007744 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007744:	b480      	push	{r7}
 8007746:	b083      	sub	sp, #12
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800774c:	bf00      	nop
 800774e:	370c      	adds	r7, #12
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr

08007758 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007758:	b480      	push	{r7}
 800775a:	b083      	sub	sp, #12
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8007760:	bf00      	nop
 8007762:	370c      	adds	r7, #12
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr

0800776c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800776c:	b480      	push	{r7}
 800776e:	b083      	sub	sp, #12
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007774:	bf00      	nop
 8007776:	370c      	adds	r7, #12
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr

08007780 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007780:	b480      	push	{r7}
 8007782:	b083      	sub	sp, #12
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8007788:	bf00      	nop
 800778a:	370c      	adds	r7, #12
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr

08007794 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b084      	sub	sp, #16
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077a0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077a6:	687a      	ldr	r2, [r7, #4]
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d107      	bne.n	80077bc <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2201      	movs	r2, #1
 80077b0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2201      	movs	r2, #1
 80077b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80077ba:	e02a      	b.n	8007812 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077c0:	687a      	ldr	r2, [r7, #4]
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d107      	bne.n	80077d6 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2202      	movs	r2, #2
 80077ca:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2201      	movs	r2, #1
 80077d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80077d4:	e01d      	b.n	8007812 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077da:	687a      	ldr	r2, [r7, #4]
 80077dc:	429a      	cmp	r2, r3
 80077de:	d107      	bne.n	80077f0 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2204      	movs	r2, #4
 80077e4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2201      	movs	r2, #1
 80077ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80077ee:	e010      	b.n	8007812 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077f4:	687a      	ldr	r2, [r7, #4]
 80077f6:	429a      	cmp	r2, r3
 80077f8:	d107      	bne.n	800780a <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2208      	movs	r2, #8
 80077fe:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2201      	movs	r2, #1
 8007804:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007808:	e003      	b.n	8007812 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2201      	movs	r2, #1
 800780e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8007812:	68f8      	ldr	r0, [r7, #12]
 8007814:	f7ff ffb4 	bl	8007780 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2200      	movs	r2, #0
 800781c:	771a      	strb	r2, [r3, #28]
}
 800781e:	bf00      	nop
 8007820:	3710      	adds	r7, #16
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}

08007826 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8007826:	b580      	push	{r7, lr}
 8007828:	b084      	sub	sp, #16
 800782a:	af00      	add	r7, sp, #0
 800782c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007832:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007838:	687a      	ldr	r2, [r7, #4]
 800783a:	429a      	cmp	r2, r3
 800783c:	d10b      	bne.n	8007856 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2201      	movs	r2, #1
 8007842:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	69db      	ldr	r3, [r3, #28]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d136      	bne.n	80078ba <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2201      	movs	r2, #1
 8007850:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007854:	e031      	b.n	80078ba <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800785a:	687a      	ldr	r2, [r7, #4]
 800785c:	429a      	cmp	r2, r3
 800785e:	d10b      	bne.n	8007878 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2202      	movs	r2, #2
 8007864:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	69db      	ldr	r3, [r3, #28]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d125      	bne.n	80078ba <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2201      	movs	r2, #1
 8007872:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007876:	e020      	b.n	80078ba <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800787c:	687a      	ldr	r2, [r7, #4]
 800787e:	429a      	cmp	r2, r3
 8007880:	d10b      	bne.n	800789a <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2204      	movs	r2, #4
 8007886:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	69db      	ldr	r3, [r3, #28]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d114      	bne.n	80078ba <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2201      	movs	r2, #1
 8007894:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007898:	e00f      	b.n	80078ba <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800789e:	687a      	ldr	r2, [r7, #4]
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d10a      	bne.n	80078ba <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2208      	movs	r2, #8
 80078a8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	69db      	ldr	r3, [r3, #28]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d103      	bne.n	80078ba <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2201      	movs	r2, #1
 80078b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078ba:	68f8      	ldr	r0, [r7, #12]
 80078bc:	f7ff ff42 	bl	8007744 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2200      	movs	r2, #0
 80078c4:	771a      	strb	r2, [r3, #28]
}
 80078c6:	bf00      	nop
 80078c8:	3710      	adds	r7, #16
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}

080078ce <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80078ce:	b580      	push	{r7, lr}
 80078d0:	b084      	sub	sp, #16
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078da:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078e0:	687a      	ldr	r2, [r7, #4]
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d103      	bne.n	80078ee <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2201      	movs	r2, #1
 80078ea:	771a      	strb	r2, [r3, #28]
 80078ec:	e019      	b.n	8007922 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	429a      	cmp	r2, r3
 80078f6:	d103      	bne.n	8007900 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2202      	movs	r2, #2
 80078fc:	771a      	strb	r2, [r3, #28]
 80078fe:	e010      	b.n	8007922 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007904:	687a      	ldr	r2, [r7, #4]
 8007906:	429a      	cmp	r2, r3
 8007908:	d103      	bne.n	8007912 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2204      	movs	r2, #4
 800790e:	771a      	strb	r2, [r3, #28]
 8007910:	e007      	b.n	8007922 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007916:	687a      	ldr	r2, [r7, #4]
 8007918:	429a      	cmp	r2, r3
 800791a:	d102      	bne.n	8007922 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2208      	movs	r2, #8
 8007920:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8007922:	68f8      	ldr	r0, [r7, #12]
 8007924:	f7ff ff18 	bl	8007758 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2200      	movs	r2, #0
 800792c:	771a      	strb	r2, [r3, #28]
}
 800792e:	bf00      	nop
 8007930:	3710      	adds	r7, #16
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}
	...

08007938 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007938:	b480      	push	{r7}
 800793a:	b085      	sub	sp, #20
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	4a4c      	ldr	r2, [pc, #304]	@ (8007a7c <TIM_Base_SetConfig+0x144>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d017      	beq.n	8007980 <TIM_Base_SetConfig+0x48>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007956:	d013      	beq.n	8007980 <TIM_Base_SetConfig+0x48>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	4a49      	ldr	r2, [pc, #292]	@ (8007a80 <TIM_Base_SetConfig+0x148>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d00f      	beq.n	8007980 <TIM_Base_SetConfig+0x48>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	4a48      	ldr	r2, [pc, #288]	@ (8007a84 <TIM_Base_SetConfig+0x14c>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d00b      	beq.n	8007980 <TIM_Base_SetConfig+0x48>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	4a47      	ldr	r2, [pc, #284]	@ (8007a88 <TIM_Base_SetConfig+0x150>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d007      	beq.n	8007980 <TIM_Base_SetConfig+0x48>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	4a46      	ldr	r2, [pc, #280]	@ (8007a8c <TIM_Base_SetConfig+0x154>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d003      	beq.n	8007980 <TIM_Base_SetConfig+0x48>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	4a45      	ldr	r2, [pc, #276]	@ (8007a90 <TIM_Base_SetConfig+0x158>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d108      	bne.n	8007992 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007986:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	68fa      	ldr	r2, [r7, #12]
 800798e:	4313      	orrs	r3, r2
 8007990:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	4a39      	ldr	r2, [pc, #228]	@ (8007a7c <TIM_Base_SetConfig+0x144>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d023      	beq.n	80079e2 <TIM_Base_SetConfig+0xaa>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079a0:	d01f      	beq.n	80079e2 <TIM_Base_SetConfig+0xaa>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	4a36      	ldr	r2, [pc, #216]	@ (8007a80 <TIM_Base_SetConfig+0x148>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d01b      	beq.n	80079e2 <TIM_Base_SetConfig+0xaa>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	4a35      	ldr	r2, [pc, #212]	@ (8007a84 <TIM_Base_SetConfig+0x14c>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d017      	beq.n	80079e2 <TIM_Base_SetConfig+0xaa>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	4a34      	ldr	r2, [pc, #208]	@ (8007a88 <TIM_Base_SetConfig+0x150>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d013      	beq.n	80079e2 <TIM_Base_SetConfig+0xaa>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	4a33      	ldr	r2, [pc, #204]	@ (8007a8c <TIM_Base_SetConfig+0x154>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d00f      	beq.n	80079e2 <TIM_Base_SetConfig+0xaa>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	4a33      	ldr	r2, [pc, #204]	@ (8007a94 <TIM_Base_SetConfig+0x15c>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d00b      	beq.n	80079e2 <TIM_Base_SetConfig+0xaa>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	4a32      	ldr	r2, [pc, #200]	@ (8007a98 <TIM_Base_SetConfig+0x160>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d007      	beq.n	80079e2 <TIM_Base_SetConfig+0xaa>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	4a31      	ldr	r2, [pc, #196]	@ (8007a9c <TIM_Base_SetConfig+0x164>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d003      	beq.n	80079e2 <TIM_Base_SetConfig+0xaa>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	4a2c      	ldr	r2, [pc, #176]	@ (8007a90 <TIM_Base_SetConfig+0x158>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d108      	bne.n	80079f4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80079e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	68db      	ldr	r3, [r3, #12]
 80079ee:	68fa      	ldr	r2, [r7, #12]
 80079f0:	4313      	orrs	r3, r2
 80079f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	695b      	ldr	r3, [r3, #20]
 80079fe:	4313      	orrs	r3, r2
 8007a00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	68fa      	ldr	r2, [r7, #12]
 8007a06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	689a      	ldr	r2, [r3, #8]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	681a      	ldr	r2, [r3, #0]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	4a18      	ldr	r2, [pc, #96]	@ (8007a7c <TIM_Base_SetConfig+0x144>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d013      	beq.n	8007a48 <TIM_Base_SetConfig+0x110>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	4a1a      	ldr	r2, [pc, #104]	@ (8007a8c <TIM_Base_SetConfig+0x154>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d00f      	beq.n	8007a48 <TIM_Base_SetConfig+0x110>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	4a1a      	ldr	r2, [pc, #104]	@ (8007a94 <TIM_Base_SetConfig+0x15c>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d00b      	beq.n	8007a48 <TIM_Base_SetConfig+0x110>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	4a19      	ldr	r2, [pc, #100]	@ (8007a98 <TIM_Base_SetConfig+0x160>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d007      	beq.n	8007a48 <TIM_Base_SetConfig+0x110>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	4a18      	ldr	r2, [pc, #96]	@ (8007a9c <TIM_Base_SetConfig+0x164>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d003      	beq.n	8007a48 <TIM_Base_SetConfig+0x110>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	4a13      	ldr	r2, [pc, #76]	@ (8007a90 <TIM_Base_SetConfig+0x158>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d103      	bne.n	8007a50 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	691a      	ldr	r2, [r3, #16]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2201      	movs	r2, #1
 8007a54:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	691b      	ldr	r3, [r3, #16]
 8007a5a:	f003 0301 	and.w	r3, r3, #1
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	d105      	bne.n	8007a6e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	691b      	ldr	r3, [r3, #16]
 8007a66:	f023 0201 	bic.w	r2, r3, #1
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	611a      	str	r2, [r3, #16]
  }
}
 8007a6e:	bf00      	nop
 8007a70:	3714      	adds	r7, #20
 8007a72:	46bd      	mov	sp, r7
 8007a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a78:	4770      	bx	lr
 8007a7a:	bf00      	nop
 8007a7c:	40012c00 	.word	0x40012c00
 8007a80:	40000400 	.word	0x40000400
 8007a84:	40000800 	.word	0x40000800
 8007a88:	40000c00 	.word	0x40000c00
 8007a8c:	40013400 	.word	0x40013400
 8007a90:	40015000 	.word	0x40015000
 8007a94:	40014000 	.word	0x40014000
 8007a98:	40014400 	.word	0x40014400
 8007a9c:	40014800 	.word	0x40014800

08007aa0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b087      	sub	sp, #28
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6a1b      	ldr	r3, [r3, #32]
 8007aae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6a1b      	ldr	r3, [r3, #32]
 8007ab4:	f023 0201 	bic.w	r2, r3, #1
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	699b      	ldr	r3, [r3, #24]
 8007ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007ace:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ad2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f023 0303 	bic.w	r3, r3, #3
 8007ada:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	68fa      	ldr	r2, [r7, #12]
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	f023 0302 	bic.w	r3, r3, #2
 8007aec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	689b      	ldr	r3, [r3, #8]
 8007af2:	697a      	ldr	r2, [r7, #20]
 8007af4:	4313      	orrs	r3, r2
 8007af6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	4a30      	ldr	r2, [pc, #192]	@ (8007bbc <TIM_OC1_SetConfig+0x11c>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d013      	beq.n	8007b28 <TIM_OC1_SetConfig+0x88>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	4a2f      	ldr	r2, [pc, #188]	@ (8007bc0 <TIM_OC1_SetConfig+0x120>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d00f      	beq.n	8007b28 <TIM_OC1_SetConfig+0x88>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	4a2e      	ldr	r2, [pc, #184]	@ (8007bc4 <TIM_OC1_SetConfig+0x124>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d00b      	beq.n	8007b28 <TIM_OC1_SetConfig+0x88>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	4a2d      	ldr	r2, [pc, #180]	@ (8007bc8 <TIM_OC1_SetConfig+0x128>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d007      	beq.n	8007b28 <TIM_OC1_SetConfig+0x88>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	4a2c      	ldr	r2, [pc, #176]	@ (8007bcc <TIM_OC1_SetConfig+0x12c>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d003      	beq.n	8007b28 <TIM_OC1_SetConfig+0x88>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	4a2b      	ldr	r2, [pc, #172]	@ (8007bd0 <TIM_OC1_SetConfig+0x130>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d10c      	bne.n	8007b42 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	f023 0308 	bic.w	r3, r3, #8
 8007b2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	68db      	ldr	r3, [r3, #12]
 8007b34:	697a      	ldr	r2, [r7, #20]
 8007b36:	4313      	orrs	r3, r2
 8007b38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	f023 0304 	bic.w	r3, r3, #4
 8007b40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	4a1d      	ldr	r2, [pc, #116]	@ (8007bbc <TIM_OC1_SetConfig+0x11c>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d013      	beq.n	8007b72 <TIM_OC1_SetConfig+0xd2>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	4a1c      	ldr	r2, [pc, #112]	@ (8007bc0 <TIM_OC1_SetConfig+0x120>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d00f      	beq.n	8007b72 <TIM_OC1_SetConfig+0xd2>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	4a1b      	ldr	r2, [pc, #108]	@ (8007bc4 <TIM_OC1_SetConfig+0x124>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d00b      	beq.n	8007b72 <TIM_OC1_SetConfig+0xd2>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	4a1a      	ldr	r2, [pc, #104]	@ (8007bc8 <TIM_OC1_SetConfig+0x128>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d007      	beq.n	8007b72 <TIM_OC1_SetConfig+0xd2>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	4a19      	ldr	r2, [pc, #100]	@ (8007bcc <TIM_OC1_SetConfig+0x12c>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d003      	beq.n	8007b72 <TIM_OC1_SetConfig+0xd2>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	4a18      	ldr	r2, [pc, #96]	@ (8007bd0 <TIM_OC1_SetConfig+0x130>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d111      	bne.n	8007b96 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007b80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	695b      	ldr	r3, [r3, #20]
 8007b86:	693a      	ldr	r2, [r7, #16]
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	699b      	ldr	r3, [r3, #24]
 8007b90:	693a      	ldr	r2, [r7, #16]
 8007b92:	4313      	orrs	r3, r2
 8007b94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	693a      	ldr	r2, [r7, #16]
 8007b9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	68fa      	ldr	r2, [r7, #12]
 8007ba0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	685a      	ldr	r2, [r3, #4]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	697a      	ldr	r2, [r7, #20]
 8007bae:	621a      	str	r2, [r3, #32]
}
 8007bb0:	bf00      	nop
 8007bb2:	371c      	adds	r7, #28
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bba:	4770      	bx	lr
 8007bbc:	40012c00 	.word	0x40012c00
 8007bc0:	40013400 	.word	0x40013400
 8007bc4:	40014000 	.word	0x40014000
 8007bc8:	40014400 	.word	0x40014400
 8007bcc:	40014800 	.word	0x40014800
 8007bd0:	40015000 	.word	0x40015000

08007bd4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b087      	sub	sp, #28
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6a1b      	ldr	r3, [r3, #32]
 8007be2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6a1b      	ldr	r3, [r3, #32]
 8007be8:	f023 0210 	bic.w	r2, r3, #16
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	699b      	ldr	r3, [r3, #24]
 8007bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007c02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	021b      	lsls	r3, r3, #8
 8007c16:	68fa      	ldr	r2, [r7, #12]
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	f023 0320 	bic.w	r3, r3, #32
 8007c22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	011b      	lsls	r3, r3, #4
 8007c2a:	697a      	ldr	r2, [r7, #20]
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	4a2c      	ldr	r2, [pc, #176]	@ (8007ce4 <TIM_OC2_SetConfig+0x110>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d007      	beq.n	8007c48 <TIM_OC2_SetConfig+0x74>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	4a2b      	ldr	r2, [pc, #172]	@ (8007ce8 <TIM_OC2_SetConfig+0x114>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d003      	beq.n	8007c48 <TIM_OC2_SetConfig+0x74>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	4a2a      	ldr	r2, [pc, #168]	@ (8007cec <TIM_OC2_SetConfig+0x118>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d10d      	bne.n	8007c64 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	68db      	ldr	r3, [r3, #12]
 8007c54:	011b      	lsls	r3, r3, #4
 8007c56:	697a      	ldr	r2, [r7, #20]
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c62:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	4a1f      	ldr	r2, [pc, #124]	@ (8007ce4 <TIM_OC2_SetConfig+0x110>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d013      	beq.n	8007c94 <TIM_OC2_SetConfig+0xc0>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	4a1e      	ldr	r2, [pc, #120]	@ (8007ce8 <TIM_OC2_SetConfig+0x114>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d00f      	beq.n	8007c94 <TIM_OC2_SetConfig+0xc0>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	4a1e      	ldr	r2, [pc, #120]	@ (8007cf0 <TIM_OC2_SetConfig+0x11c>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d00b      	beq.n	8007c94 <TIM_OC2_SetConfig+0xc0>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	4a1d      	ldr	r2, [pc, #116]	@ (8007cf4 <TIM_OC2_SetConfig+0x120>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d007      	beq.n	8007c94 <TIM_OC2_SetConfig+0xc0>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	4a1c      	ldr	r2, [pc, #112]	@ (8007cf8 <TIM_OC2_SetConfig+0x124>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d003      	beq.n	8007c94 <TIM_OC2_SetConfig+0xc0>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	4a17      	ldr	r2, [pc, #92]	@ (8007cec <TIM_OC2_SetConfig+0x118>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d113      	bne.n	8007cbc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007c9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007ca2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	695b      	ldr	r3, [r3, #20]
 8007ca8:	009b      	lsls	r3, r3, #2
 8007caa:	693a      	ldr	r2, [r7, #16]
 8007cac:	4313      	orrs	r3, r2
 8007cae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	699b      	ldr	r3, [r3, #24]
 8007cb4:	009b      	lsls	r3, r3, #2
 8007cb6:	693a      	ldr	r2, [r7, #16]
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	693a      	ldr	r2, [r7, #16]
 8007cc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	68fa      	ldr	r2, [r7, #12]
 8007cc6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	685a      	ldr	r2, [r3, #4]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	697a      	ldr	r2, [r7, #20]
 8007cd4:	621a      	str	r2, [r3, #32]
}
 8007cd6:	bf00      	nop
 8007cd8:	371c      	adds	r7, #28
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce0:	4770      	bx	lr
 8007ce2:	bf00      	nop
 8007ce4:	40012c00 	.word	0x40012c00
 8007ce8:	40013400 	.word	0x40013400
 8007cec:	40015000 	.word	0x40015000
 8007cf0:	40014000 	.word	0x40014000
 8007cf4:	40014400 	.word	0x40014400
 8007cf8:	40014800 	.word	0x40014800

08007cfc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b087      	sub	sp, #28
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6a1b      	ldr	r3, [r3, #32]
 8007d0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6a1b      	ldr	r3, [r3, #32]
 8007d10:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	69db      	ldr	r3, [r3, #28]
 8007d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	f023 0303 	bic.w	r3, r3, #3
 8007d36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	68fa      	ldr	r2, [r7, #12]
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007d48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	689b      	ldr	r3, [r3, #8]
 8007d4e:	021b      	lsls	r3, r3, #8
 8007d50:	697a      	ldr	r2, [r7, #20]
 8007d52:	4313      	orrs	r3, r2
 8007d54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	4a2b      	ldr	r2, [pc, #172]	@ (8007e08 <TIM_OC3_SetConfig+0x10c>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d007      	beq.n	8007d6e <TIM_OC3_SetConfig+0x72>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	4a2a      	ldr	r2, [pc, #168]	@ (8007e0c <TIM_OC3_SetConfig+0x110>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d003      	beq.n	8007d6e <TIM_OC3_SetConfig+0x72>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	4a29      	ldr	r2, [pc, #164]	@ (8007e10 <TIM_OC3_SetConfig+0x114>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d10d      	bne.n	8007d8a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007d74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	68db      	ldr	r3, [r3, #12]
 8007d7a:	021b      	lsls	r3, r3, #8
 8007d7c:	697a      	ldr	r2, [r7, #20]
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007d88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	4a1e      	ldr	r2, [pc, #120]	@ (8007e08 <TIM_OC3_SetConfig+0x10c>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d013      	beq.n	8007dba <TIM_OC3_SetConfig+0xbe>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	4a1d      	ldr	r2, [pc, #116]	@ (8007e0c <TIM_OC3_SetConfig+0x110>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d00f      	beq.n	8007dba <TIM_OC3_SetConfig+0xbe>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	4a1d      	ldr	r2, [pc, #116]	@ (8007e14 <TIM_OC3_SetConfig+0x118>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d00b      	beq.n	8007dba <TIM_OC3_SetConfig+0xbe>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	4a1c      	ldr	r2, [pc, #112]	@ (8007e18 <TIM_OC3_SetConfig+0x11c>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d007      	beq.n	8007dba <TIM_OC3_SetConfig+0xbe>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	4a1b      	ldr	r2, [pc, #108]	@ (8007e1c <TIM_OC3_SetConfig+0x120>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d003      	beq.n	8007dba <TIM_OC3_SetConfig+0xbe>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	4a16      	ldr	r2, [pc, #88]	@ (8007e10 <TIM_OC3_SetConfig+0x114>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d113      	bne.n	8007de2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007dc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007dc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	695b      	ldr	r3, [r3, #20]
 8007dce:	011b      	lsls	r3, r3, #4
 8007dd0:	693a      	ldr	r2, [r7, #16]
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	699b      	ldr	r3, [r3, #24]
 8007dda:	011b      	lsls	r3, r3, #4
 8007ddc:	693a      	ldr	r2, [r7, #16]
 8007dde:	4313      	orrs	r3, r2
 8007de0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	693a      	ldr	r2, [r7, #16]
 8007de6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	68fa      	ldr	r2, [r7, #12]
 8007dec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	685a      	ldr	r2, [r3, #4]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	697a      	ldr	r2, [r7, #20]
 8007dfa:	621a      	str	r2, [r3, #32]
}
 8007dfc:	bf00      	nop
 8007dfe:	371c      	adds	r7, #28
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr
 8007e08:	40012c00 	.word	0x40012c00
 8007e0c:	40013400 	.word	0x40013400
 8007e10:	40015000 	.word	0x40015000
 8007e14:	40014000 	.word	0x40014000
 8007e18:	40014400 	.word	0x40014400
 8007e1c:	40014800 	.word	0x40014800

08007e20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b087      	sub	sp, #28
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6a1b      	ldr	r3, [r3, #32]
 8007e2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6a1b      	ldr	r3, [r3, #32]
 8007e34:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	685b      	ldr	r3, [r3, #4]
 8007e40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	69db      	ldr	r3, [r3, #28]
 8007e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007e4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	021b      	lsls	r3, r3, #8
 8007e62:	68fa      	ldr	r2, [r7, #12]
 8007e64:	4313      	orrs	r3, r2
 8007e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007e6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	031b      	lsls	r3, r3, #12
 8007e76:	697a      	ldr	r2, [r7, #20]
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	4a2c      	ldr	r2, [pc, #176]	@ (8007f30 <TIM_OC4_SetConfig+0x110>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d007      	beq.n	8007e94 <TIM_OC4_SetConfig+0x74>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	4a2b      	ldr	r2, [pc, #172]	@ (8007f34 <TIM_OC4_SetConfig+0x114>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d003      	beq.n	8007e94 <TIM_OC4_SetConfig+0x74>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	4a2a      	ldr	r2, [pc, #168]	@ (8007f38 <TIM_OC4_SetConfig+0x118>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d10d      	bne.n	8007eb0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007e9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	68db      	ldr	r3, [r3, #12]
 8007ea0:	031b      	lsls	r3, r3, #12
 8007ea2:	697a      	ldr	r2, [r7, #20]
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007eae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	4a1f      	ldr	r2, [pc, #124]	@ (8007f30 <TIM_OC4_SetConfig+0x110>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d013      	beq.n	8007ee0 <TIM_OC4_SetConfig+0xc0>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	4a1e      	ldr	r2, [pc, #120]	@ (8007f34 <TIM_OC4_SetConfig+0x114>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d00f      	beq.n	8007ee0 <TIM_OC4_SetConfig+0xc0>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	4a1e      	ldr	r2, [pc, #120]	@ (8007f3c <TIM_OC4_SetConfig+0x11c>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d00b      	beq.n	8007ee0 <TIM_OC4_SetConfig+0xc0>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	4a1d      	ldr	r2, [pc, #116]	@ (8007f40 <TIM_OC4_SetConfig+0x120>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d007      	beq.n	8007ee0 <TIM_OC4_SetConfig+0xc0>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	4a1c      	ldr	r2, [pc, #112]	@ (8007f44 <TIM_OC4_SetConfig+0x124>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d003      	beq.n	8007ee0 <TIM_OC4_SetConfig+0xc0>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	4a17      	ldr	r2, [pc, #92]	@ (8007f38 <TIM_OC4_SetConfig+0x118>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d113      	bne.n	8007f08 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007ee6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007eee:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	695b      	ldr	r3, [r3, #20]
 8007ef4:	019b      	lsls	r3, r3, #6
 8007ef6:	693a      	ldr	r2, [r7, #16]
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	699b      	ldr	r3, [r3, #24]
 8007f00:	019b      	lsls	r3, r3, #6
 8007f02:	693a      	ldr	r2, [r7, #16]
 8007f04:	4313      	orrs	r3, r2
 8007f06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	693a      	ldr	r2, [r7, #16]
 8007f0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	68fa      	ldr	r2, [r7, #12]
 8007f12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	685a      	ldr	r2, [r3, #4]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	697a      	ldr	r2, [r7, #20]
 8007f20:	621a      	str	r2, [r3, #32]
}
 8007f22:	bf00      	nop
 8007f24:	371c      	adds	r7, #28
 8007f26:	46bd      	mov	sp, r7
 8007f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2c:	4770      	bx	lr
 8007f2e:	bf00      	nop
 8007f30:	40012c00 	.word	0x40012c00
 8007f34:	40013400 	.word	0x40013400
 8007f38:	40015000 	.word	0x40015000
 8007f3c:	40014000 	.word	0x40014000
 8007f40:	40014400 	.word	0x40014400
 8007f44:	40014800 	.word	0x40014800

08007f48 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b087      	sub	sp, #28
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6a1b      	ldr	r3, [r3, #32]
 8007f56:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6a1b      	ldr	r3, [r3, #32]
 8007f5c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007f76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	68fa      	ldr	r2, [r7, #12]
 8007f82:	4313      	orrs	r3, r2
 8007f84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007f8c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	689b      	ldr	r3, [r3, #8]
 8007f92:	041b      	lsls	r3, r3, #16
 8007f94:	693a      	ldr	r2, [r7, #16]
 8007f96:	4313      	orrs	r3, r2
 8007f98:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	4a19      	ldr	r2, [pc, #100]	@ (8008004 <TIM_OC5_SetConfig+0xbc>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d013      	beq.n	8007fca <TIM_OC5_SetConfig+0x82>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	4a18      	ldr	r2, [pc, #96]	@ (8008008 <TIM_OC5_SetConfig+0xc0>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d00f      	beq.n	8007fca <TIM_OC5_SetConfig+0x82>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	4a17      	ldr	r2, [pc, #92]	@ (800800c <TIM_OC5_SetConfig+0xc4>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d00b      	beq.n	8007fca <TIM_OC5_SetConfig+0x82>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	4a16      	ldr	r2, [pc, #88]	@ (8008010 <TIM_OC5_SetConfig+0xc8>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d007      	beq.n	8007fca <TIM_OC5_SetConfig+0x82>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	4a15      	ldr	r2, [pc, #84]	@ (8008014 <TIM_OC5_SetConfig+0xcc>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d003      	beq.n	8007fca <TIM_OC5_SetConfig+0x82>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	4a14      	ldr	r2, [pc, #80]	@ (8008018 <TIM_OC5_SetConfig+0xd0>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d109      	bne.n	8007fde <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007fd0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	695b      	ldr	r3, [r3, #20]
 8007fd6:	021b      	lsls	r3, r3, #8
 8007fd8:	697a      	ldr	r2, [r7, #20]
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	697a      	ldr	r2, [r7, #20]
 8007fe2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	68fa      	ldr	r2, [r7, #12]
 8007fe8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	685a      	ldr	r2, [r3, #4]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	693a      	ldr	r2, [r7, #16]
 8007ff6:	621a      	str	r2, [r3, #32]
}
 8007ff8:	bf00      	nop
 8007ffa:	371c      	adds	r7, #28
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008002:	4770      	bx	lr
 8008004:	40012c00 	.word	0x40012c00
 8008008:	40013400 	.word	0x40013400
 800800c:	40014000 	.word	0x40014000
 8008010:	40014400 	.word	0x40014400
 8008014:	40014800 	.word	0x40014800
 8008018:	40015000 	.word	0x40015000

0800801c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800801c:	b480      	push	{r7}
 800801e:	b087      	sub	sp, #28
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6a1b      	ldr	r3, [r3, #32]
 800802a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6a1b      	ldr	r3, [r3, #32]
 8008030:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	685b      	ldr	r3, [r3, #4]
 800803c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800804a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800804e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	021b      	lsls	r3, r3, #8
 8008056:	68fa      	ldr	r2, [r7, #12]
 8008058:	4313      	orrs	r3, r2
 800805a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008062:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	689b      	ldr	r3, [r3, #8]
 8008068:	051b      	lsls	r3, r3, #20
 800806a:	693a      	ldr	r2, [r7, #16]
 800806c:	4313      	orrs	r3, r2
 800806e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	4a1a      	ldr	r2, [pc, #104]	@ (80080dc <TIM_OC6_SetConfig+0xc0>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d013      	beq.n	80080a0 <TIM_OC6_SetConfig+0x84>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	4a19      	ldr	r2, [pc, #100]	@ (80080e0 <TIM_OC6_SetConfig+0xc4>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d00f      	beq.n	80080a0 <TIM_OC6_SetConfig+0x84>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	4a18      	ldr	r2, [pc, #96]	@ (80080e4 <TIM_OC6_SetConfig+0xc8>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d00b      	beq.n	80080a0 <TIM_OC6_SetConfig+0x84>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	4a17      	ldr	r2, [pc, #92]	@ (80080e8 <TIM_OC6_SetConfig+0xcc>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d007      	beq.n	80080a0 <TIM_OC6_SetConfig+0x84>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	4a16      	ldr	r2, [pc, #88]	@ (80080ec <TIM_OC6_SetConfig+0xd0>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d003      	beq.n	80080a0 <TIM_OC6_SetConfig+0x84>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	4a15      	ldr	r2, [pc, #84]	@ (80080f0 <TIM_OC6_SetConfig+0xd4>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d109      	bne.n	80080b4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80080a6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	695b      	ldr	r3, [r3, #20]
 80080ac:	029b      	lsls	r3, r3, #10
 80080ae:	697a      	ldr	r2, [r7, #20]
 80080b0:	4313      	orrs	r3, r2
 80080b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	697a      	ldr	r2, [r7, #20]
 80080b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	68fa      	ldr	r2, [r7, #12]
 80080be:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	685a      	ldr	r2, [r3, #4]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	693a      	ldr	r2, [r7, #16]
 80080cc:	621a      	str	r2, [r3, #32]
}
 80080ce:	bf00      	nop
 80080d0:	371c      	adds	r7, #28
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr
 80080da:	bf00      	nop
 80080dc:	40012c00 	.word	0x40012c00
 80080e0:	40013400 	.word	0x40013400
 80080e4:	40014000 	.word	0x40014000
 80080e8:	40014400 	.word	0x40014400
 80080ec:	40014800 	.word	0x40014800
 80080f0:	40015000 	.word	0x40015000

080080f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b087      	sub	sp, #28
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	60f8      	str	r0, [r7, #12]
 80080fc:	60b9      	str	r1, [r7, #8]
 80080fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	6a1b      	ldr	r3, [r3, #32]
 8008104:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	6a1b      	ldr	r3, [r3, #32]
 800810a:	f023 0201 	bic.w	r2, r3, #1
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	699b      	ldr	r3, [r3, #24]
 8008116:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800811e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	011b      	lsls	r3, r3, #4
 8008124:	693a      	ldr	r2, [r7, #16]
 8008126:	4313      	orrs	r3, r2
 8008128:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	f023 030a 	bic.w	r3, r3, #10
 8008130:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008132:	697a      	ldr	r2, [r7, #20]
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	4313      	orrs	r3, r2
 8008138:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	693a      	ldr	r2, [r7, #16]
 800813e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	697a      	ldr	r2, [r7, #20]
 8008144:	621a      	str	r2, [r3, #32]
}
 8008146:	bf00      	nop
 8008148:	371c      	adds	r7, #28
 800814a:	46bd      	mov	sp, r7
 800814c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008150:	4770      	bx	lr

08008152 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008152:	b480      	push	{r7}
 8008154:	b087      	sub	sp, #28
 8008156:	af00      	add	r7, sp, #0
 8008158:	60f8      	str	r0, [r7, #12]
 800815a:	60b9      	str	r1, [r7, #8]
 800815c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	6a1b      	ldr	r3, [r3, #32]
 8008162:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	6a1b      	ldr	r3, [r3, #32]
 8008168:	f023 0210 	bic.w	r2, r3, #16
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	699b      	ldr	r3, [r3, #24]
 8008174:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800817c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	031b      	lsls	r3, r3, #12
 8008182:	693a      	ldr	r2, [r7, #16]
 8008184:	4313      	orrs	r3, r2
 8008186:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800818e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	011b      	lsls	r3, r3, #4
 8008194:	697a      	ldr	r2, [r7, #20]
 8008196:	4313      	orrs	r3, r2
 8008198:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	693a      	ldr	r2, [r7, #16]
 800819e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	697a      	ldr	r2, [r7, #20]
 80081a4:	621a      	str	r2, [r3, #32]
}
 80081a6:	bf00      	nop
 80081a8:	371c      	adds	r7, #28
 80081aa:	46bd      	mov	sp, r7
 80081ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b0:	4770      	bx	lr

080081b2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80081b2:	b480      	push	{r7}
 80081b4:	b085      	sub	sp, #20
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	6078      	str	r0, [r7, #4]
 80081ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	689b      	ldr	r3, [r3, #8]
 80081c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80081c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80081ce:	683a      	ldr	r2, [r7, #0]
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	4313      	orrs	r3, r2
 80081d4:	f043 0307 	orr.w	r3, r3, #7
 80081d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	68fa      	ldr	r2, [r7, #12]
 80081de:	609a      	str	r2, [r3, #8]
}
 80081e0:	bf00      	nop
 80081e2:	3714      	adds	r7, #20
 80081e4:	46bd      	mov	sp, r7
 80081e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ea:	4770      	bx	lr

080081ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b087      	sub	sp, #28
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	60f8      	str	r0, [r7, #12]
 80081f4:	60b9      	str	r1, [r7, #8]
 80081f6:	607a      	str	r2, [r7, #4]
 80081f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	689b      	ldr	r3, [r3, #8]
 80081fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008206:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	021a      	lsls	r2, r3, #8
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	431a      	orrs	r2, r3
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	4313      	orrs	r3, r2
 8008214:	697a      	ldr	r2, [r7, #20]
 8008216:	4313      	orrs	r3, r2
 8008218:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	697a      	ldr	r2, [r7, #20]
 800821e:	609a      	str	r2, [r3, #8]
}
 8008220:	bf00      	nop
 8008222:	371c      	adds	r7, #28
 8008224:	46bd      	mov	sp, r7
 8008226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822a:	4770      	bx	lr

0800822c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800822c:	b480      	push	{r7}
 800822e:	b087      	sub	sp, #28
 8008230:	af00      	add	r7, sp, #0
 8008232:	60f8      	str	r0, [r7, #12]
 8008234:	60b9      	str	r1, [r7, #8]
 8008236:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	f003 031f 	and.w	r3, r3, #31
 800823e:	2201      	movs	r2, #1
 8008240:	fa02 f303 	lsl.w	r3, r2, r3
 8008244:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	6a1a      	ldr	r2, [r3, #32]
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	43db      	mvns	r3, r3
 800824e:	401a      	ands	r2, r3
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	6a1a      	ldr	r2, [r3, #32]
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	f003 031f 	and.w	r3, r3, #31
 800825e:	6879      	ldr	r1, [r7, #4]
 8008260:	fa01 f303 	lsl.w	r3, r1, r3
 8008264:	431a      	orrs	r2, r3
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	621a      	str	r2, [r3, #32]
}
 800826a:	bf00      	nop
 800826c:	371c      	adds	r7, #28
 800826e:	46bd      	mov	sp, r7
 8008270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008274:	4770      	bx	lr
	...

08008278 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008278:	b480      	push	{r7}
 800827a:	b085      	sub	sp, #20
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
 8008280:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008288:	2b01      	cmp	r3, #1
 800828a:	d101      	bne.n	8008290 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800828c:	2302      	movs	r3, #2
 800828e:	e074      	b.n	800837a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2201      	movs	r2, #1
 8008294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2202      	movs	r2, #2
 800829c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	689b      	ldr	r3, [r3, #8]
 80082ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4a34      	ldr	r2, [pc, #208]	@ (8008388 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d009      	beq.n	80082ce <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4a33      	ldr	r2, [pc, #204]	@ (800838c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d004      	beq.n	80082ce <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4a31      	ldr	r2, [pc, #196]	@ (8008390 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d108      	bne.n	80082e0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80082d4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	685b      	ldr	r3, [r3, #4]
 80082da:	68fa      	ldr	r2, [r7, #12]
 80082dc:	4313      	orrs	r3, r2
 80082de:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80082e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	68fa      	ldr	r2, [r7, #12]
 80082f2:	4313      	orrs	r3, r2
 80082f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	68fa      	ldr	r2, [r7, #12]
 80082fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4a21      	ldr	r2, [pc, #132]	@ (8008388 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d022      	beq.n	800834e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008310:	d01d      	beq.n	800834e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a1f      	ldr	r2, [pc, #124]	@ (8008394 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d018      	beq.n	800834e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4a1d      	ldr	r2, [pc, #116]	@ (8008398 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d013      	beq.n	800834e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4a1c      	ldr	r2, [pc, #112]	@ (800839c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d00e      	beq.n	800834e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4a15      	ldr	r2, [pc, #84]	@ (800838c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d009      	beq.n	800834e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4a18      	ldr	r2, [pc, #96]	@ (80083a0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d004      	beq.n	800834e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a11      	ldr	r2, [pc, #68]	@ (8008390 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d10c      	bne.n	8008368 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008354:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	689b      	ldr	r3, [r3, #8]
 800835a:	68ba      	ldr	r2, [r7, #8]
 800835c:	4313      	orrs	r3, r2
 800835e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	68ba      	ldr	r2, [r7, #8]
 8008366:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2201      	movs	r2, #1
 800836c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2200      	movs	r2, #0
 8008374:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008378:	2300      	movs	r3, #0
}
 800837a:	4618      	mov	r0, r3
 800837c:	3714      	adds	r7, #20
 800837e:	46bd      	mov	sp, r7
 8008380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008384:	4770      	bx	lr
 8008386:	bf00      	nop
 8008388:	40012c00 	.word	0x40012c00
 800838c:	40013400 	.word	0x40013400
 8008390:	40015000 	.word	0x40015000
 8008394:	40000400 	.word	0x40000400
 8008398:	40000800 	.word	0x40000800
 800839c:	40000c00 	.word	0x40000c00
 80083a0:	40014000 	.word	0x40014000

080083a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b085      	sub	sp, #20
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
 80083ac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80083ae:	2300      	movs	r3, #0
 80083b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80083b8:	2b01      	cmp	r3, #1
 80083ba:	d101      	bne.n	80083c0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80083bc:	2302      	movs	r3, #2
 80083be:	e078      	b.n	80084b2 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2201      	movs	r2, #1
 80083c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	68db      	ldr	r3, [r3, #12]
 80083d2:	4313      	orrs	r3, r2
 80083d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	689b      	ldr	r3, [r3, #8]
 80083e0:	4313      	orrs	r3, r2
 80083e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	4313      	orrs	r3, r2
 80083f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4313      	orrs	r3, r2
 80083fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	691b      	ldr	r3, [r3, #16]
 800840a:	4313      	orrs	r3, r2
 800840c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	695b      	ldr	r3, [r3, #20]
 8008418:	4313      	orrs	r3, r2
 800841a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008426:	4313      	orrs	r3, r2
 8008428:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	699b      	ldr	r3, [r3, #24]
 8008434:	041b      	lsls	r3, r3, #16
 8008436:	4313      	orrs	r3, r2
 8008438:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	69db      	ldr	r3, [r3, #28]
 8008444:	4313      	orrs	r3, r2
 8008446:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4a1c      	ldr	r2, [pc, #112]	@ (80084c0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d009      	beq.n	8008466 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4a1b      	ldr	r2, [pc, #108]	@ (80084c4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d004      	beq.n	8008466 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a19      	ldr	r2, [pc, #100]	@ (80084c8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d11c      	bne.n	80084a0 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008470:	051b      	lsls	r3, r3, #20
 8008472:	4313      	orrs	r3, r2
 8008474:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	6a1b      	ldr	r3, [r3, #32]
 8008480:	4313      	orrs	r3, r2
 8008482:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800848e:	4313      	orrs	r3, r2
 8008490:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800849c:	4313      	orrs	r3, r2
 800849e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	68fa      	ldr	r2, [r7, #12]
 80084a6:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2200      	movs	r2, #0
 80084ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80084b0:	2300      	movs	r3, #0
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3714      	adds	r7, #20
 80084b6:	46bd      	mov	sp, r7
 80084b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084bc:	4770      	bx	lr
 80084be:	bf00      	nop
 80084c0:	40012c00 	.word	0x40012c00
 80084c4:	40013400 	.word	0x40013400
 80084c8:	40015000 	.word	0x40015000

080084cc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b083      	sub	sp, #12
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80084d4:	bf00      	nop
 80084d6:	370c      	adds	r7, #12
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr

080084e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b083      	sub	sp, #12
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80084e8:	bf00      	nop
 80084ea:	370c      	adds	r7, #12
 80084ec:	46bd      	mov	sp, r7
 80084ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f2:	4770      	bx	lr

080084f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b083      	sub	sp, #12
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80084fc:	bf00      	nop
 80084fe:	370c      	adds	r7, #12
 8008500:	46bd      	mov	sp, r7
 8008502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008506:	4770      	bx	lr

08008508 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008508:	b480      	push	{r7}
 800850a:	b083      	sub	sp, #12
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008510:	bf00      	nop
 8008512:	370c      	adds	r7, #12
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr

0800851c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800851c:	b480      	push	{r7}
 800851e:	b083      	sub	sp, #12
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008524:	bf00      	nop
 8008526:	370c      	adds	r7, #12
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr

08008530 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008530:	b480      	push	{r7}
 8008532:	b083      	sub	sp, #12
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008538:	bf00      	nop
 800853a:	370c      	adds	r7, #12
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr

08008544 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008544:	b480      	push	{r7}
 8008546:	b083      	sub	sp, #12
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800854c:	bf00      	nop
 800854e:	370c      	adds	r7, #12
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr

08008558 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008558:	b480      	push	{r7}
 800855a:	b085      	sub	sp, #20
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2200      	movs	r2, #0
 8008564:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008568:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800856c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	b29a      	uxth	r2, r3
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008578:	2300      	movs	r3, #0
}
 800857a:	4618      	mov	r0, r3
 800857c:	3714      	adds	r7, #20
 800857e:	46bd      	mov	sp, r7
 8008580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008584:	4770      	bx	lr

08008586 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008586:	b480      	push	{r7}
 8008588:	b085      	sub	sp, #20
 800858a:	af00      	add	r7, sp, #0
 800858c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800858e:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8008592:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800859a:	b29a      	uxth	r2, r3
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	b29b      	uxth	r3, r3
 80085a0:	43db      	mvns	r3, r3
 80085a2:	b29b      	uxth	r3, r3
 80085a4:	4013      	ands	r3, r2
 80085a6:	b29a      	uxth	r2, r3
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80085ae:	2300      	movs	r3, #0
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3714      	adds	r7, #20
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr

080085bc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80085bc:	b480      	push	{r7}
 80085be:	b085      	sub	sp, #20
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	60f8      	str	r0, [r7, #12]
 80085c4:	1d3b      	adds	r3, r7, #4
 80085c6:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2201      	movs	r2, #1
 80085ce:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	2200      	movs	r2, #0
 80085d6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	2200      	movs	r2, #0
 80085de:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	2200      	movs	r2, #0
 80085e6:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80085ea:	2300      	movs	r3, #0
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	3714      	adds	r7, #20
 80085f0:	46bd      	mov	sp, r7
 80085f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f6:	4770      	bx	lr

080085f8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b09d      	sub	sp, #116	@ 0x74
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
 8008600:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008602:	2300      	movs	r3, #0
 8008604:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008608:	687a      	ldr	r2, [r7, #4]
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	781b      	ldrb	r3, [r3, #0]
 800860e:	009b      	lsls	r3, r3, #2
 8008610:	4413      	add	r3, r2
 8008612:	881b      	ldrh	r3, [r3, #0]
 8008614:	b29b      	uxth	r3, r3
 8008616:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800861a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800861e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	78db      	ldrb	r3, [r3, #3]
 8008626:	2b03      	cmp	r3, #3
 8008628:	d81f      	bhi.n	800866a <USB_ActivateEndpoint+0x72>
 800862a:	a201      	add	r2, pc, #4	@ (adr r2, 8008630 <USB_ActivateEndpoint+0x38>)
 800862c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008630:	08008641 	.word	0x08008641
 8008634:	0800865d 	.word	0x0800865d
 8008638:	08008673 	.word	0x08008673
 800863c:	0800864f 	.word	0x0800864f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008640:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008644:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008648:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800864c:	e012      	b.n	8008674 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800864e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008652:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8008656:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800865a:	e00b      	b.n	8008674 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800865c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008660:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008664:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8008668:	e004      	b.n	8008674 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800866a:	2301      	movs	r3, #1
 800866c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8008670:	e000      	b.n	8008674 <USB_ActivateEndpoint+0x7c>
      break;
 8008672:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008674:	687a      	ldr	r2, [r7, #4]
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	781b      	ldrb	r3, [r3, #0]
 800867a:	009b      	lsls	r3, r3, #2
 800867c:	441a      	add	r2, r3
 800867e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008682:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008686:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800868a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800868e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008692:	b29b      	uxth	r3, r3
 8008694:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008696:	687a      	ldr	r2, [r7, #4]
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	781b      	ldrb	r3, [r3, #0]
 800869c:	009b      	lsls	r3, r3, #2
 800869e:	4413      	add	r3, r2
 80086a0:	881b      	ldrh	r3, [r3, #0]
 80086a2:	b29b      	uxth	r3, r3
 80086a4:	b21b      	sxth	r3, r3
 80086a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80086aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086ae:	b21a      	sxth	r2, r3
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	781b      	ldrb	r3, [r3, #0]
 80086b4:	b21b      	sxth	r3, r3
 80086b6:	4313      	orrs	r3, r2
 80086b8:	b21b      	sxth	r3, r3
 80086ba:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80086be:	687a      	ldr	r2, [r7, #4]
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	781b      	ldrb	r3, [r3, #0]
 80086c4:	009b      	lsls	r3, r3, #2
 80086c6:	441a      	add	r2, r3
 80086c8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80086cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80086d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80086d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80086d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086dc:	b29b      	uxth	r3, r3
 80086de:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	7b1b      	ldrb	r3, [r3, #12]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	f040 8178 	bne.w	80089da <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	785b      	ldrb	r3, [r3, #1]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	f000 8084 	beq.w	80087fc <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	61bb      	str	r3, [r7, #24]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80086fe:	b29b      	uxth	r3, r3
 8008700:	461a      	mov	r2, r3
 8008702:	69bb      	ldr	r3, [r7, #24]
 8008704:	4413      	add	r3, r2
 8008706:	61bb      	str	r3, [r7, #24]
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	781b      	ldrb	r3, [r3, #0]
 800870c:	00da      	lsls	r2, r3, #3
 800870e:	69bb      	ldr	r3, [r7, #24]
 8008710:	4413      	add	r3, r2
 8008712:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008716:	617b      	str	r3, [r7, #20]
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	88db      	ldrh	r3, [r3, #6]
 800871c:	085b      	lsrs	r3, r3, #1
 800871e:	b29b      	uxth	r3, r3
 8008720:	005b      	lsls	r3, r3, #1
 8008722:	b29a      	uxth	r2, r3
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008728:	687a      	ldr	r2, [r7, #4]
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	781b      	ldrb	r3, [r3, #0]
 800872e:	009b      	lsls	r3, r3, #2
 8008730:	4413      	add	r3, r2
 8008732:	881b      	ldrh	r3, [r3, #0]
 8008734:	827b      	strh	r3, [r7, #18]
 8008736:	8a7b      	ldrh	r3, [r7, #18]
 8008738:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800873c:	2b00      	cmp	r3, #0
 800873e:	d01b      	beq.n	8008778 <USB_ActivateEndpoint+0x180>
 8008740:	687a      	ldr	r2, [r7, #4]
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	781b      	ldrb	r3, [r3, #0]
 8008746:	009b      	lsls	r3, r3, #2
 8008748:	4413      	add	r3, r2
 800874a:	881b      	ldrh	r3, [r3, #0]
 800874c:	b29b      	uxth	r3, r3
 800874e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008752:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008756:	823b      	strh	r3, [r7, #16]
 8008758:	687a      	ldr	r2, [r7, #4]
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	781b      	ldrb	r3, [r3, #0]
 800875e:	009b      	lsls	r3, r3, #2
 8008760:	441a      	add	r2, r3
 8008762:	8a3b      	ldrh	r3, [r7, #16]
 8008764:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008768:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800876c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008770:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008774:	b29b      	uxth	r3, r3
 8008776:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	78db      	ldrb	r3, [r3, #3]
 800877c:	2b01      	cmp	r3, #1
 800877e:	d020      	beq.n	80087c2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008780:	687a      	ldr	r2, [r7, #4]
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	781b      	ldrb	r3, [r3, #0]
 8008786:	009b      	lsls	r3, r3, #2
 8008788:	4413      	add	r3, r2
 800878a:	881b      	ldrh	r3, [r3, #0]
 800878c:	b29b      	uxth	r3, r3
 800878e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008792:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008796:	81bb      	strh	r3, [r7, #12]
 8008798:	89bb      	ldrh	r3, [r7, #12]
 800879a:	f083 0320 	eor.w	r3, r3, #32
 800879e:	81bb      	strh	r3, [r7, #12]
 80087a0:	687a      	ldr	r2, [r7, #4]
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	781b      	ldrb	r3, [r3, #0]
 80087a6:	009b      	lsls	r3, r3, #2
 80087a8:	441a      	add	r2, r3
 80087aa:	89bb      	ldrh	r3, [r7, #12]
 80087ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80087b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80087b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80087b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087bc:	b29b      	uxth	r3, r3
 80087be:	8013      	strh	r3, [r2, #0]
 80087c0:	e2d5      	b.n	8008d6e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80087c2:	687a      	ldr	r2, [r7, #4]
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	781b      	ldrb	r3, [r3, #0]
 80087c8:	009b      	lsls	r3, r3, #2
 80087ca:	4413      	add	r3, r2
 80087cc:	881b      	ldrh	r3, [r3, #0]
 80087ce:	b29b      	uxth	r3, r3
 80087d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80087d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80087d8:	81fb      	strh	r3, [r7, #14]
 80087da:	687a      	ldr	r2, [r7, #4]
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	781b      	ldrb	r3, [r3, #0]
 80087e0:	009b      	lsls	r3, r3, #2
 80087e2:	441a      	add	r2, r3
 80087e4:	89fb      	ldrh	r3, [r7, #14]
 80087e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80087ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80087ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80087f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087f6:	b29b      	uxth	r3, r3
 80087f8:	8013      	strh	r3, [r2, #0]
 80087fa:	e2b8      	b.n	8008d6e <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008806:	b29b      	uxth	r3, r3
 8008808:	461a      	mov	r2, r3
 800880a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800880c:	4413      	add	r3, r2
 800880e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	781b      	ldrb	r3, [r3, #0]
 8008814:	00da      	lsls	r2, r3, #3
 8008816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008818:	4413      	add	r3, r2
 800881a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800881e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	88db      	ldrh	r3, [r3, #6]
 8008824:	085b      	lsrs	r3, r3, #1
 8008826:	b29b      	uxth	r3, r3
 8008828:	005b      	lsls	r3, r3, #1
 800882a:	b29a      	uxth	r2, r3
 800882c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800882e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800883a:	b29b      	uxth	r3, r3
 800883c:	461a      	mov	r2, r3
 800883e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008840:	4413      	add	r3, r2
 8008842:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	781b      	ldrb	r3, [r3, #0]
 8008848:	00da      	lsls	r2, r3, #3
 800884a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800884c:	4413      	add	r3, r2
 800884e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008852:	627b      	str	r3, [r7, #36]	@ 0x24
 8008854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008856:	881b      	ldrh	r3, [r3, #0]
 8008858:	b29b      	uxth	r3, r3
 800885a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800885e:	b29a      	uxth	r2, r3
 8008860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008862:	801a      	strh	r2, [r3, #0]
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	691b      	ldr	r3, [r3, #16]
 8008868:	2b3e      	cmp	r3, #62	@ 0x3e
 800886a:	d91d      	bls.n	80088a8 <USB_ActivateEndpoint+0x2b0>
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	691b      	ldr	r3, [r3, #16]
 8008870:	095b      	lsrs	r3, r3, #5
 8008872:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	691b      	ldr	r3, [r3, #16]
 8008878:	f003 031f 	and.w	r3, r3, #31
 800887c:	2b00      	cmp	r3, #0
 800887e:	d102      	bne.n	8008886 <USB_ActivateEndpoint+0x28e>
 8008880:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008882:	3b01      	subs	r3, #1
 8008884:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008888:	881b      	ldrh	r3, [r3, #0]
 800888a:	b29a      	uxth	r2, r3
 800888c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800888e:	b29b      	uxth	r3, r3
 8008890:	029b      	lsls	r3, r3, #10
 8008892:	b29b      	uxth	r3, r3
 8008894:	4313      	orrs	r3, r2
 8008896:	b29b      	uxth	r3, r3
 8008898:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800889c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088a0:	b29a      	uxth	r2, r3
 80088a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088a4:	801a      	strh	r2, [r3, #0]
 80088a6:	e026      	b.n	80088f6 <USB_ActivateEndpoint+0x2fe>
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	691b      	ldr	r3, [r3, #16]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d10a      	bne.n	80088c6 <USB_ActivateEndpoint+0x2ce>
 80088b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088b2:	881b      	ldrh	r3, [r3, #0]
 80088b4:	b29b      	uxth	r3, r3
 80088b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088be:	b29a      	uxth	r2, r3
 80088c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088c2:	801a      	strh	r2, [r3, #0]
 80088c4:	e017      	b.n	80088f6 <USB_ActivateEndpoint+0x2fe>
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	691b      	ldr	r3, [r3, #16]
 80088ca:	085b      	lsrs	r3, r3, #1
 80088cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	691b      	ldr	r3, [r3, #16]
 80088d2:	f003 0301 	and.w	r3, r3, #1
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d002      	beq.n	80088e0 <USB_ActivateEndpoint+0x2e8>
 80088da:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80088dc:	3301      	adds	r3, #1
 80088de:	66bb      	str	r3, [r7, #104]	@ 0x68
 80088e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088e2:	881b      	ldrh	r3, [r3, #0]
 80088e4:	b29a      	uxth	r2, r3
 80088e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80088e8:	b29b      	uxth	r3, r3
 80088ea:	029b      	lsls	r3, r3, #10
 80088ec:	b29b      	uxth	r3, r3
 80088ee:	4313      	orrs	r3, r2
 80088f0:	b29a      	uxth	r2, r3
 80088f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088f4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80088f6:	687a      	ldr	r2, [r7, #4]
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	781b      	ldrb	r3, [r3, #0]
 80088fc:	009b      	lsls	r3, r3, #2
 80088fe:	4413      	add	r3, r2
 8008900:	881b      	ldrh	r3, [r3, #0]
 8008902:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008904:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008906:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800890a:	2b00      	cmp	r3, #0
 800890c:	d01b      	beq.n	8008946 <USB_ActivateEndpoint+0x34e>
 800890e:	687a      	ldr	r2, [r7, #4]
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	781b      	ldrb	r3, [r3, #0]
 8008914:	009b      	lsls	r3, r3, #2
 8008916:	4413      	add	r3, r2
 8008918:	881b      	ldrh	r3, [r3, #0]
 800891a:	b29b      	uxth	r3, r3
 800891c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008920:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008924:	843b      	strh	r3, [r7, #32]
 8008926:	687a      	ldr	r2, [r7, #4]
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	009b      	lsls	r3, r3, #2
 800892e:	441a      	add	r2, r3
 8008930:	8c3b      	ldrh	r3, [r7, #32]
 8008932:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008936:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800893a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800893e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008942:	b29b      	uxth	r3, r3
 8008944:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	781b      	ldrb	r3, [r3, #0]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d124      	bne.n	8008998 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800894e:	687a      	ldr	r2, [r7, #4]
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	781b      	ldrb	r3, [r3, #0]
 8008954:	009b      	lsls	r3, r3, #2
 8008956:	4413      	add	r3, r2
 8008958:	881b      	ldrh	r3, [r3, #0]
 800895a:	b29b      	uxth	r3, r3
 800895c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008960:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008964:	83bb      	strh	r3, [r7, #28]
 8008966:	8bbb      	ldrh	r3, [r7, #28]
 8008968:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800896c:	83bb      	strh	r3, [r7, #28]
 800896e:	8bbb      	ldrh	r3, [r7, #28]
 8008970:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008974:	83bb      	strh	r3, [r7, #28]
 8008976:	687a      	ldr	r2, [r7, #4]
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	781b      	ldrb	r3, [r3, #0]
 800897c:	009b      	lsls	r3, r3, #2
 800897e:	441a      	add	r2, r3
 8008980:	8bbb      	ldrh	r3, [r7, #28]
 8008982:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008986:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800898a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800898e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008992:	b29b      	uxth	r3, r3
 8008994:	8013      	strh	r3, [r2, #0]
 8008996:	e1ea      	b.n	8008d6e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8008998:	687a      	ldr	r2, [r7, #4]
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	781b      	ldrb	r3, [r3, #0]
 800899e:	009b      	lsls	r3, r3, #2
 80089a0:	4413      	add	r3, r2
 80089a2:	881b      	ldrh	r3, [r3, #0]
 80089a4:	b29b      	uxth	r3, r3
 80089a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80089aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089ae:	83fb      	strh	r3, [r7, #30]
 80089b0:	8bfb      	ldrh	r3, [r7, #30]
 80089b2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80089b6:	83fb      	strh	r3, [r7, #30]
 80089b8:	687a      	ldr	r2, [r7, #4]
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	781b      	ldrb	r3, [r3, #0]
 80089be:	009b      	lsls	r3, r3, #2
 80089c0:	441a      	add	r2, r3
 80089c2:	8bfb      	ldrh	r3, [r7, #30]
 80089c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80089c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80089cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80089d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089d4:	b29b      	uxth	r3, r3
 80089d6:	8013      	strh	r3, [r2, #0]
 80089d8:	e1c9      	b.n	8008d6e <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	78db      	ldrb	r3, [r3, #3]
 80089de:	2b02      	cmp	r3, #2
 80089e0:	d11e      	bne.n	8008a20 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80089e2:	687a      	ldr	r2, [r7, #4]
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	781b      	ldrb	r3, [r3, #0]
 80089e8:	009b      	lsls	r3, r3, #2
 80089ea:	4413      	add	r3, r2
 80089ec:	881b      	ldrh	r3, [r3, #0]
 80089ee:	b29b      	uxth	r3, r3
 80089f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80089f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089f8:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80089fc:	687a      	ldr	r2, [r7, #4]
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	781b      	ldrb	r3, [r3, #0]
 8008a02:	009b      	lsls	r3, r3, #2
 8008a04:	441a      	add	r2, r3
 8008a06:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8008a0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a12:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008a16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a1a:	b29b      	uxth	r3, r3
 8008a1c:	8013      	strh	r3, [r2, #0]
 8008a1e:	e01d      	b.n	8008a5c <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008a20:	687a      	ldr	r2, [r7, #4]
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	781b      	ldrb	r3, [r3, #0]
 8008a26:	009b      	lsls	r3, r3, #2
 8008a28:	4413      	add	r3, r2
 8008a2a:	881b      	ldrh	r3, [r3, #0]
 8008a2c:	b29b      	uxth	r3, r3
 8008a2e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8008a32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a36:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8008a3a:	687a      	ldr	r2, [r7, #4]
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	781b      	ldrb	r3, [r3, #0]
 8008a40:	009b      	lsls	r3, r3, #2
 8008a42:	441a      	add	r2, r3
 8008a44:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8008a48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a58:	b29b      	uxth	r3, r3
 8008a5a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	461a      	mov	r2, r3
 8008a6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008a6c:	4413      	add	r3, r2
 8008a6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	781b      	ldrb	r3, [r3, #0]
 8008a74:	00da      	lsls	r2, r3, #3
 8008a76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008a78:	4413      	add	r3, r2
 8008a7a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008a7e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	891b      	ldrh	r3, [r3, #8]
 8008a84:	085b      	lsrs	r3, r3, #1
 8008a86:	b29b      	uxth	r3, r3
 8008a88:	005b      	lsls	r3, r3, #1
 8008a8a:	b29a      	uxth	r2, r3
 8008a8c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008a8e:	801a      	strh	r2, [r3, #0]
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	657b      	str	r3, [r7, #84]	@ 0x54
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008a9a:	b29b      	uxth	r3, r3
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008aa0:	4413      	add	r3, r2
 8008aa2:	657b      	str	r3, [r7, #84]	@ 0x54
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	781b      	ldrb	r3, [r3, #0]
 8008aa8:	00da      	lsls	r2, r3, #3
 8008aaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008aac:	4413      	add	r3, r2
 8008aae:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008ab2:	653b      	str	r3, [r7, #80]	@ 0x50
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	895b      	ldrh	r3, [r3, #10]
 8008ab8:	085b      	lsrs	r3, r3, #1
 8008aba:	b29b      	uxth	r3, r3
 8008abc:	005b      	lsls	r3, r3, #1
 8008abe:	b29a      	uxth	r2, r3
 8008ac0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008ac2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	785b      	ldrb	r3, [r3, #1]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	f040 8093 	bne.w	8008bf4 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008ace:	687a      	ldr	r2, [r7, #4]
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	781b      	ldrb	r3, [r3, #0]
 8008ad4:	009b      	lsls	r3, r3, #2
 8008ad6:	4413      	add	r3, r2
 8008ad8:	881b      	ldrh	r3, [r3, #0]
 8008ada:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8008ade:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8008ae2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d01b      	beq.n	8008b22 <USB_ActivateEndpoint+0x52a>
 8008aea:	687a      	ldr	r2, [r7, #4]
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	781b      	ldrb	r3, [r3, #0]
 8008af0:	009b      	lsls	r3, r3, #2
 8008af2:	4413      	add	r3, r2
 8008af4:	881b      	ldrh	r3, [r3, #0]
 8008af6:	b29b      	uxth	r3, r3
 8008af8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008afc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b00:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8008b02:	687a      	ldr	r2, [r7, #4]
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	781b      	ldrb	r3, [r3, #0]
 8008b08:	009b      	lsls	r3, r3, #2
 8008b0a:	441a      	add	r2, r3
 8008b0c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008b0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b16:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008b1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b1e:	b29b      	uxth	r3, r3
 8008b20:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008b22:	687a      	ldr	r2, [r7, #4]
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	781b      	ldrb	r3, [r3, #0]
 8008b28:	009b      	lsls	r3, r3, #2
 8008b2a:	4413      	add	r3, r2
 8008b2c:	881b      	ldrh	r3, [r3, #0]
 8008b2e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8008b30:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8008b32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d01b      	beq.n	8008b72 <USB_ActivateEndpoint+0x57a>
 8008b3a:	687a      	ldr	r2, [r7, #4]
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	781b      	ldrb	r3, [r3, #0]
 8008b40:	009b      	lsls	r3, r3, #2
 8008b42:	4413      	add	r3, r2
 8008b44:	881b      	ldrh	r3, [r3, #0]
 8008b46:	b29b      	uxth	r3, r3
 8008b48:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b50:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8008b52:	687a      	ldr	r2, [r7, #4]
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	781b      	ldrb	r3, [r3, #0]
 8008b58:	009b      	lsls	r3, r3, #2
 8008b5a:	441a      	add	r2, r3
 8008b5c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8008b5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b6a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008b6e:	b29b      	uxth	r3, r3
 8008b70:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008b72:	687a      	ldr	r2, [r7, #4]
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	009b      	lsls	r3, r3, #2
 8008b7a:	4413      	add	r3, r2
 8008b7c:	881b      	ldrh	r3, [r3, #0]
 8008b7e:	b29b      	uxth	r3, r3
 8008b80:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008b84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b88:	873b      	strh	r3, [r7, #56]	@ 0x38
 8008b8a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008b8c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008b90:	873b      	strh	r3, [r7, #56]	@ 0x38
 8008b92:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008b94:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008b98:	873b      	strh	r3, [r7, #56]	@ 0x38
 8008b9a:	687a      	ldr	r2, [r7, #4]
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	781b      	ldrb	r3, [r3, #0]
 8008ba0:	009b      	lsls	r3, r3, #2
 8008ba2:	441a      	add	r2, r3
 8008ba4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008ba6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008baa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008bae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008bb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008bb6:	b29b      	uxth	r3, r3
 8008bb8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008bba:	687a      	ldr	r2, [r7, #4]
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	781b      	ldrb	r3, [r3, #0]
 8008bc0:	009b      	lsls	r3, r3, #2
 8008bc2:	4413      	add	r3, r2
 8008bc4:	881b      	ldrh	r3, [r3, #0]
 8008bc6:	b29b      	uxth	r3, r3
 8008bc8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008bcc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008bd0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8008bd2:	687a      	ldr	r2, [r7, #4]
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	781b      	ldrb	r3, [r3, #0]
 8008bd8:	009b      	lsls	r3, r3, #2
 8008bda:	441a      	add	r2, r3
 8008bdc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008bde:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008be2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008be6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008bea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008bee:	b29b      	uxth	r3, r3
 8008bf0:	8013      	strh	r3, [r2, #0]
 8008bf2:	e0bc      	b.n	8008d6e <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008bf4:	687a      	ldr	r2, [r7, #4]
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	781b      	ldrb	r3, [r3, #0]
 8008bfa:	009b      	lsls	r3, r3, #2
 8008bfc:	4413      	add	r3, r2
 8008bfe:	881b      	ldrh	r3, [r3, #0]
 8008c00:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8008c04:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8008c08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d01d      	beq.n	8008c4c <USB_ActivateEndpoint+0x654>
 8008c10:	687a      	ldr	r2, [r7, #4]
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	781b      	ldrb	r3, [r3, #0]
 8008c16:	009b      	lsls	r3, r3, #2
 8008c18:	4413      	add	r3, r2
 8008c1a:	881b      	ldrh	r3, [r3, #0]
 8008c1c:	b29b      	uxth	r3, r3
 8008c1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c26:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8008c2a:	687a      	ldr	r2, [r7, #4]
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	781b      	ldrb	r3, [r3, #0]
 8008c30:	009b      	lsls	r3, r3, #2
 8008c32:	441a      	add	r2, r3
 8008c34:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8008c38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c40:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008c44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c48:	b29b      	uxth	r3, r3
 8008c4a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008c4c:	687a      	ldr	r2, [r7, #4]
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	781b      	ldrb	r3, [r3, #0]
 8008c52:	009b      	lsls	r3, r3, #2
 8008c54:	4413      	add	r3, r2
 8008c56:	881b      	ldrh	r3, [r3, #0]
 8008c58:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8008c5c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8008c60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d01d      	beq.n	8008ca4 <USB_ActivateEndpoint+0x6ac>
 8008c68:	687a      	ldr	r2, [r7, #4]
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	781b      	ldrb	r3, [r3, #0]
 8008c6e:	009b      	lsls	r3, r3, #2
 8008c70:	4413      	add	r3, r2
 8008c72:	881b      	ldrh	r3, [r3, #0]
 8008c74:	b29b      	uxth	r3, r3
 8008c76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c7e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8008c82:	687a      	ldr	r2, [r7, #4]
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	781b      	ldrb	r3, [r3, #0]
 8008c88:	009b      	lsls	r3, r3, #2
 8008c8a:	441a      	add	r2, r3
 8008c8c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8008c90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c9c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008ca0:	b29b      	uxth	r3, r3
 8008ca2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	78db      	ldrb	r3, [r3, #3]
 8008ca8:	2b01      	cmp	r3, #1
 8008caa:	d024      	beq.n	8008cf6 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008cac:	687a      	ldr	r2, [r7, #4]
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	781b      	ldrb	r3, [r3, #0]
 8008cb2:	009b      	lsls	r3, r3, #2
 8008cb4:	4413      	add	r3, r2
 8008cb6:	881b      	ldrh	r3, [r3, #0]
 8008cb8:	b29b      	uxth	r3, r3
 8008cba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008cbe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008cc2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8008cc6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8008cca:	f083 0320 	eor.w	r3, r3, #32
 8008cce:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8008cd2:	687a      	ldr	r2, [r7, #4]
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	781b      	ldrb	r3, [r3, #0]
 8008cd8:	009b      	lsls	r3, r3, #2
 8008cda:	441a      	add	r2, r3
 8008cdc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8008ce0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ce4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ce8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008cec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cf0:	b29b      	uxth	r3, r3
 8008cf2:	8013      	strh	r3, [r2, #0]
 8008cf4:	e01d      	b.n	8008d32 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008cf6:	687a      	ldr	r2, [r7, #4]
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	781b      	ldrb	r3, [r3, #0]
 8008cfc:	009b      	lsls	r3, r3, #2
 8008cfe:	4413      	add	r3, r2
 8008d00:	881b      	ldrh	r3, [r3, #0]
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d0c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8008d10:	687a      	ldr	r2, [r7, #4]
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	781b      	ldrb	r3, [r3, #0]
 8008d16:	009b      	lsls	r3, r3, #2
 8008d18:	441a      	add	r2, r3
 8008d1a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8008d1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d2e:	b29b      	uxth	r3, r3
 8008d30:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008d32:	687a      	ldr	r2, [r7, #4]
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	781b      	ldrb	r3, [r3, #0]
 8008d38:	009b      	lsls	r3, r3, #2
 8008d3a:	4413      	add	r3, r2
 8008d3c:	881b      	ldrh	r3, [r3, #0]
 8008d3e:	b29b      	uxth	r3, r3
 8008d40:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008d44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d48:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8008d4c:	687a      	ldr	r2, [r7, #4]
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	781b      	ldrb	r3, [r3, #0]
 8008d52:	009b      	lsls	r3, r3, #2
 8008d54:	441a      	add	r2, r3
 8008d56:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8008d5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d6a:	b29b      	uxth	r3, r3
 8008d6c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8008d6e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3774      	adds	r7, #116	@ 0x74
 8008d76:	46bd      	mov	sp, r7
 8008d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7c:	4770      	bx	lr
 8008d7e:	bf00      	nop

08008d80 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b08d      	sub	sp, #52	@ 0x34
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
 8008d88:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	7b1b      	ldrb	r3, [r3, #12]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	f040 808e 	bne.w	8008eb0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	785b      	ldrb	r3, [r3, #1]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d044      	beq.n	8008e26 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008d9c:	687a      	ldr	r2, [r7, #4]
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	781b      	ldrb	r3, [r3, #0]
 8008da2:	009b      	lsls	r3, r3, #2
 8008da4:	4413      	add	r3, r2
 8008da6:	881b      	ldrh	r3, [r3, #0]
 8008da8:	81bb      	strh	r3, [r7, #12]
 8008daa:	89bb      	ldrh	r3, [r7, #12]
 8008dac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d01b      	beq.n	8008dec <USB_DeactivateEndpoint+0x6c>
 8008db4:	687a      	ldr	r2, [r7, #4]
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	781b      	ldrb	r3, [r3, #0]
 8008dba:	009b      	lsls	r3, r3, #2
 8008dbc:	4413      	add	r3, r2
 8008dbe:	881b      	ldrh	r3, [r3, #0]
 8008dc0:	b29b      	uxth	r3, r3
 8008dc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008dc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008dca:	817b      	strh	r3, [r7, #10]
 8008dcc:	687a      	ldr	r2, [r7, #4]
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	781b      	ldrb	r3, [r3, #0]
 8008dd2:	009b      	lsls	r3, r3, #2
 8008dd4:	441a      	add	r2, r3
 8008dd6:	897b      	ldrh	r3, [r7, #10]
 8008dd8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ddc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008de0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008de4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008de8:	b29b      	uxth	r3, r3
 8008dea:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008dec:	687a      	ldr	r2, [r7, #4]
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	781b      	ldrb	r3, [r3, #0]
 8008df2:	009b      	lsls	r3, r3, #2
 8008df4:	4413      	add	r3, r2
 8008df6:	881b      	ldrh	r3, [r3, #0]
 8008df8:	b29b      	uxth	r3, r3
 8008dfa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008dfe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e02:	813b      	strh	r3, [r7, #8]
 8008e04:	687a      	ldr	r2, [r7, #4]
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	781b      	ldrb	r3, [r3, #0]
 8008e0a:	009b      	lsls	r3, r3, #2
 8008e0c:	441a      	add	r2, r3
 8008e0e:	893b      	ldrh	r3, [r7, #8]
 8008e10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e20:	b29b      	uxth	r3, r3
 8008e22:	8013      	strh	r3, [r2, #0]
 8008e24:	e192      	b.n	800914c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008e26:	687a      	ldr	r2, [r7, #4]
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	781b      	ldrb	r3, [r3, #0]
 8008e2c:	009b      	lsls	r3, r3, #2
 8008e2e:	4413      	add	r3, r2
 8008e30:	881b      	ldrh	r3, [r3, #0]
 8008e32:	827b      	strh	r3, [r7, #18]
 8008e34:	8a7b      	ldrh	r3, [r7, #18]
 8008e36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d01b      	beq.n	8008e76 <USB_DeactivateEndpoint+0xf6>
 8008e3e:	687a      	ldr	r2, [r7, #4]
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	781b      	ldrb	r3, [r3, #0]
 8008e44:	009b      	lsls	r3, r3, #2
 8008e46:	4413      	add	r3, r2
 8008e48:	881b      	ldrh	r3, [r3, #0]
 8008e4a:	b29b      	uxth	r3, r3
 8008e4c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e54:	823b      	strh	r3, [r7, #16]
 8008e56:	687a      	ldr	r2, [r7, #4]
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	781b      	ldrb	r3, [r3, #0]
 8008e5c:	009b      	lsls	r3, r3, #2
 8008e5e:	441a      	add	r2, r3
 8008e60:	8a3b      	ldrh	r3, [r7, #16]
 8008e62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e6a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008e6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e72:	b29b      	uxth	r3, r3
 8008e74:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008e76:	687a      	ldr	r2, [r7, #4]
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	781b      	ldrb	r3, [r3, #0]
 8008e7c:	009b      	lsls	r3, r3, #2
 8008e7e:	4413      	add	r3, r2
 8008e80:	881b      	ldrh	r3, [r3, #0]
 8008e82:	b29b      	uxth	r3, r3
 8008e84:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008e88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e8c:	81fb      	strh	r3, [r7, #14]
 8008e8e:	687a      	ldr	r2, [r7, #4]
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	781b      	ldrb	r3, [r3, #0]
 8008e94:	009b      	lsls	r3, r3, #2
 8008e96:	441a      	add	r2, r3
 8008e98:	89fb      	ldrh	r3, [r7, #14]
 8008e9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ea2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ea6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008eaa:	b29b      	uxth	r3, r3
 8008eac:	8013      	strh	r3, [r2, #0]
 8008eae:	e14d      	b.n	800914c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	785b      	ldrb	r3, [r3, #1]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	f040 80a5 	bne.w	8009004 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008eba:	687a      	ldr	r2, [r7, #4]
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	781b      	ldrb	r3, [r3, #0]
 8008ec0:	009b      	lsls	r3, r3, #2
 8008ec2:	4413      	add	r3, r2
 8008ec4:	881b      	ldrh	r3, [r3, #0]
 8008ec6:	843b      	strh	r3, [r7, #32]
 8008ec8:	8c3b      	ldrh	r3, [r7, #32]
 8008eca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d01b      	beq.n	8008f0a <USB_DeactivateEndpoint+0x18a>
 8008ed2:	687a      	ldr	r2, [r7, #4]
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	781b      	ldrb	r3, [r3, #0]
 8008ed8:	009b      	lsls	r3, r3, #2
 8008eda:	4413      	add	r3, r2
 8008edc:	881b      	ldrh	r3, [r3, #0]
 8008ede:	b29b      	uxth	r3, r3
 8008ee0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ee4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ee8:	83fb      	strh	r3, [r7, #30]
 8008eea:	687a      	ldr	r2, [r7, #4]
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	781b      	ldrb	r3, [r3, #0]
 8008ef0:	009b      	lsls	r3, r3, #2
 8008ef2:	441a      	add	r2, r3
 8008ef4:	8bfb      	ldrh	r3, [r7, #30]
 8008ef6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008efa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008efe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008f02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f06:	b29b      	uxth	r3, r3
 8008f08:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008f0a:	687a      	ldr	r2, [r7, #4]
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	781b      	ldrb	r3, [r3, #0]
 8008f10:	009b      	lsls	r3, r3, #2
 8008f12:	4413      	add	r3, r2
 8008f14:	881b      	ldrh	r3, [r3, #0]
 8008f16:	83bb      	strh	r3, [r7, #28]
 8008f18:	8bbb      	ldrh	r3, [r7, #28]
 8008f1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d01b      	beq.n	8008f5a <USB_DeactivateEndpoint+0x1da>
 8008f22:	687a      	ldr	r2, [r7, #4]
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	781b      	ldrb	r3, [r3, #0]
 8008f28:	009b      	lsls	r3, r3, #2
 8008f2a:	4413      	add	r3, r2
 8008f2c:	881b      	ldrh	r3, [r3, #0]
 8008f2e:	b29b      	uxth	r3, r3
 8008f30:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f38:	837b      	strh	r3, [r7, #26]
 8008f3a:	687a      	ldr	r2, [r7, #4]
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	781b      	ldrb	r3, [r3, #0]
 8008f40:	009b      	lsls	r3, r3, #2
 8008f42:	441a      	add	r2, r3
 8008f44:	8b7b      	ldrh	r3, [r7, #26]
 8008f46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f52:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008f56:	b29b      	uxth	r3, r3
 8008f58:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008f5a:	687a      	ldr	r2, [r7, #4]
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	781b      	ldrb	r3, [r3, #0]
 8008f60:	009b      	lsls	r3, r3, #2
 8008f62:	4413      	add	r3, r2
 8008f64:	881b      	ldrh	r3, [r3, #0]
 8008f66:	b29b      	uxth	r3, r3
 8008f68:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f70:	833b      	strh	r3, [r7, #24]
 8008f72:	687a      	ldr	r2, [r7, #4]
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	781b      	ldrb	r3, [r3, #0]
 8008f78:	009b      	lsls	r3, r3, #2
 8008f7a:	441a      	add	r2, r3
 8008f7c:	8b3b      	ldrh	r3, [r7, #24]
 8008f7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f8a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008f8e:	b29b      	uxth	r3, r3
 8008f90:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008f92:	687a      	ldr	r2, [r7, #4]
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	781b      	ldrb	r3, [r3, #0]
 8008f98:	009b      	lsls	r3, r3, #2
 8008f9a:	4413      	add	r3, r2
 8008f9c:	881b      	ldrh	r3, [r3, #0]
 8008f9e:	b29b      	uxth	r3, r3
 8008fa0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008fa4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008fa8:	82fb      	strh	r3, [r7, #22]
 8008faa:	687a      	ldr	r2, [r7, #4]
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	781b      	ldrb	r3, [r3, #0]
 8008fb0:	009b      	lsls	r3, r3, #2
 8008fb2:	441a      	add	r2, r3
 8008fb4:	8afb      	ldrh	r3, [r7, #22]
 8008fb6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008fba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008fbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008fc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008fc6:	b29b      	uxth	r3, r3
 8008fc8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008fca:	687a      	ldr	r2, [r7, #4]
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	781b      	ldrb	r3, [r3, #0]
 8008fd0:	009b      	lsls	r3, r3, #2
 8008fd2:	4413      	add	r3, r2
 8008fd4:	881b      	ldrh	r3, [r3, #0]
 8008fd6:	b29b      	uxth	r3, r3
 8008fd8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008fdc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008fe0:	82bb      	strh	r3, [r7, #20]
 8008fe2:	687a      	ldr	r2, [r7, #4]
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	781b      	ldrb	r3, [r3, #0]
 8008fe8:	009b      	lsls	r3, r3, #2
 8008fea:	441a      	add	r2, r3
 8008fec:	8abb      	ldrh	r3, [r7, #20]
 8008fee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ff2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ff6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ffa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ffe:	b29b      	uxth	r3, r3
 8009000:	8013      	strh	r3, [r2, #0]
 8009002:	e0a3      	b.n	800914c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009004:	687a      	ldr	r2, [r7, #4]
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	781b      	ldrb	r3, [r3, #0]
 800900a:	009b      	lsls	r3, r3, #2
 800900c:	4413      	add	r3, r2
 800900e:	881b      	ldrh	r3, [r3, #0]
 8009010:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8009012:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009014:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009018:	2b00      	cmp	r3, #0
 800901a:	d01b      	beq.n	8009054 <USB_DeactivateEndpoint+0x2d4>
 800901c:	687a      	ldr	r2, [r7, #4]
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	781b      	ldrb	r3, [r3, #0]
 8009022:	009b      	lsls	r3, r3, #2
 8009024:	4413      	add	r3, r2
 8009026:	881b      	ldrh	r3, [r3, #0]
 8009028:	b29b      	uxth	r3, r3
 800902a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800902e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009032:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8009034:	687a      	ldr	r2, [r7, #4]
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	781b      	ldrb	r3, [r3, #0]
 800903a:	009b      	lsls	r3, r3, #2
 800903c:	441a      	add	r2, r3
 800903e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8009040:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009044:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009048:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800904c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009050:	b29b      	uxth	r3, r3
 8009052:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009054:	687a      	ldr	r2, [r7, #4]
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	781b      	ldrb	r3, [r3, #0]
 800905a:	009b      	lsls	r3, r3, #2
 800905c:	4413      	add	r3, r2
 800905e:	881b      	ldrh	r3, [r3, #0]
 8009060:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8009062:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009064:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009068:	2b00      	cmp	r3, #0
 800906a:	d01b      	beq.n	80090a4 <USB_DeactivateEndpoint+0x324>
 800906c:	687a      	ldr	r2, [r7, #4]
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	781b      	ldrb	r3, [r3, #0]
 8009072:	009b      	lsls	r3, r3, #2
 8009074:	4413      	add	r3, r2
 8009076:	881b      	ldrh	r3, [r3, #0]
 8009078:	b29b      	uxth	r3, r3
 800907a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800907e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009082:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009084:	687a      	ldr	r2, [r7, #4]
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	781b      	ldrb	r3, [r3, #0]
 800908a:	009b      	lsls	r3, r3, #2
 800908c:	441a      	add	r2, r3
 800908e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009090:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009094:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009098:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800909c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80090a0:	b29b      	uxth	r3, r3
 80090a2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80090a4:	687a      	ldr	r2, [r7, #4]
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	781b      	ldrb	r3, [r3, #0]
 80090aa:	009b      	lsls	r3, r3, #2
 80090ac:	4413      	add	r3, r2
 80090ae:	881b      	ldrh	r3, [r3, #0]
 80090b0:	b29b      	uxth	r3, r3
 80090b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80090b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090ba:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80090bc:	687a      	ldr	r2, [r7, #4]
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	781b      	ldrb	r3, [r3, #0]
 80090c2:	009b      	lsls	r3, r3, #2
 80090c4:	441a      	add	r2, r3
 80090c6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80090c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80090cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80090d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80090d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090d8:	b29b      	uxth	r3, r3
 80090da:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80090dc:	687a      	ldr	r2, [r7, #4]
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	781b      	ldrb	r3, [r3, #0]
 80090e2:	009b      	lsls	r3, r3, #2
 80090e4:	4413      	add	r3, r2
 80090e6:	881b      	ldrh	r3, [r3, #0]
 80090e8:	b29b      	uxth	r3, r3
 80090ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80090ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80090f2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80090f4:	687a      	ldr	r2, [r7, #4]
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	781b      	ldrb	r3, [r3, #0]
 80090fa:	009b      	lsls	r3, r3, #2
 80090fc:	441a      	add	r2, r3
 80090fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009100:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009104:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009108:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800910c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009110:	b29b      	uxth	r3, r3
 8009112:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009114:	687a      	ldr	r2, [r7, #4]
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	781b      	ldrb	r3, [r3, #0]
 800911a:	009b      	lsls	r3, r3, #2
 800911c:	4413      	add	r3, r2
 800911e:	881b      	ldrh	r3, [r3, #0]
 8009120:	b29b      	uxth	r3, r3
 8009122:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009126:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800912a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800912c:	687a      	ldr	r2, [r7, #4]
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	781b      	ldrb	r3, [r3, #0]
 8009132:	009b      	lsls	r3, r3, #2
 8009134:	441a      	add	r2, r3
 8009136:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009138:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800913c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009140:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009144:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009148:	b29b      	uxth	r3, r3
 800914a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800914c:	2300      	movs	r3, #0
}
 800914e:	4618      	mov	r0, r3
 8009150:	3734      	adds	r7, #52	@ 0x34
 8009152:	46bd      	mov	sp, r7
 8009154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009158:	4770      	bx	lr

0800915a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800915a:	b580      	push	{r7, lr}
 800915c:	b0c2      	sub	sp, #264	@ 0x108
 800915e:	af00      	add	r7, sp, #0
 8009160:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009164:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009168:	6018      	str	r0, [r3, #0]
 800916a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800916e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009172:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009174:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009178:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	785b      	ldrb	r3, [r3, #1]
 8009180:	2b01      	cmp	r3, #1
 8009182:	f040 86b7 	bne.w	8009ef4 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009186:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800918a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	699a      	ldr	r2, [r3, #24]
 8009192:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009196:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	691b      	ldr	r3, [r3, #16]
 800919e:	429a      	cmp	r2, r3
 80091a0:	d908      	bls.n	80091b4 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80091a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	691b      	ldr	r3, [r3, #16]
 80091ae:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80091b2:	e007      	b.n	80091c4 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80091b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	699b      	ldr	r3, [r3, #24]
 80091c0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80091c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	7b1b      	ldrb	r3, [r3, #12]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d13a      	bne.n	800924a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80091d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	6959      	ldr	r1, [r3, #20]
 80091e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	88da      	ldrh	r2, [r3, #6]
 80091ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091f0:	b29b      	uxth	r3, r3
 80091f2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80091f6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80091fa:	6800      	ldr	r0, [r0, #0]
 80091fc:	f001 fc98 	bl	800ab30 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009200:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009204:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	613b      	str	r3, [r7, #16]
 800920c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009210:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800921a:	b29b      	uxth	r3, r3
 800921c:	461a      	mov	r2, r3
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	4413      	add	r3, r2
 8009222:	613b      	str	r3, [r7, #16]
 8009224:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009228:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	781b      	ldrb	r3, [r3, #0]
 8009230:	00da      	lsls	r2, r3, #3
 8009232:	693b      	ldr	r3, [r7, #16]
 8009234:	4413      	add	r3, r2
 8009236:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800923a:	60fb      	str	r3, [r7, #12]
 800923c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009240:	b29a      	uxth	r2, r3
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	801a      	strh	r2, [r3, #0]
 8009246:	f000 be1f 	b.w	8009e88 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800924a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800924e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	78db      	ldrb	r3, [r3, #3]
 8009256:	2b02      	cmp	r3, #2
 8009258:	f040 8462 	bne.w	8009b20 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800925c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009260:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	6a1a      	ldr	r2, [r3, #32]
 8009268:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800926c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	691b      	ldr	r3, [r3, #16]
 8009274:	429a      	cmp	r2, r3
 8009276:	f240 83df 	bls.w	8009a38 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800927a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800927e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009282:	681a      	ldr	r2, [r3, #0]
 8009284:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009288:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	781b      	ldrb	r3, [r3, #0]
 8009290:	009b      	lsls	r3, r3, #2
 8009292:	4413      	add	r3, r2
 8009294:	881b      	ldrh	r3, [r3, #0]
 8009296:	b29b      	uxth	r3, r3
 8009298:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800929c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092a0:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80092a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80092ac:	681a      	ldr	r2, [r3, #0]
 80092ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	781b      	ldrb	r3, [r3, #0]
 80092ba:	009b      	lsls	r3, r3, #2
 80092bc:	441a      	add	r2, r3
 80092be:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80092c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80092c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80092ca:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80092ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092d2:	b29b      	uxth	r3, r3
 80092d4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80092d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	6a1a      	ldr	r2, [r3, #32]
 80092e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092e6:	1ad2      	subs	r2, r2, r3
 80092e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80092f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80092fc:	681a      	ldr	r2, [r3, #0]
 80092fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009302:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	781b      	ldrb	r3, [r3, #0]
 800930a:	009b      	lsls	r3, r3, #2
 800930c:	4413      	add	r3, r2
 800930e:	881b      	ldrh	r3, [r3, #0]
 8009310:	b29b      	uxth	r3, r3
 8009312:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009316:	2b00      	cmp	r3, #0
 8009318:	f000 81c7 	beq.w	80096aa <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800931c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009320:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	633b      	str	r3, [r7, #48]	@ 0x30
 8009328:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800932c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	785b      	ldrb	r3, [r3, #1]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d177      	bne.n	8009428 <USB_EPStartXfer+0x2ce>
 8009338:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800933c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009344:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009348:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009352:	b29b      	uxth	r3, r3
 8009354:	461a      	mov	r2, r3
 8009356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009358:	4413      	add	r3, r2
 800935a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800935c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009360:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	781b      	ldrb	r3, [r3, #0]
 8009368:	00da      	lsls	r2, r3, #3
 800936a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800936c:	4413      	add	r3, r2
 800936e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009372:	627b      	str	r3, [r7, #36]	@ 0x24
 8009374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009376:	881b      	ldrh	r3, [r3, #0]
 8009378:	b29b      	uxth	r3, r3
 800937a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800937e:	b29a      	uxth	r2, r3
 8009380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009382:	801a      	strh	r2, [r3, #0]
 8009384:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009388:	2b3e      	cmp	r3, #62	@ 0x3e
 800938a:	d921      	bls.n	80093d0 <USB_EPStartXfer+0x276>
 800938c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009390:	095b      	lsrs	r3, r3, #5
 8009392:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009396:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800939a:	f003 031f 	and.w	r3, r3, #31
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d104      	bne.n	80093ac <USB_EPStartXfer+0x252>
 80093a2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80093a6:	3b01      	subs	r3, #1
 80093a8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80093ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ae:	881b      	ldrh	r3, [r3, #0]
 80093b0:	b29a      	uxth	r2, r3
 80093b2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80093b6:	b29b      	uxth	r3, r3
 80093b8:	029b      	lsls	r3, r3, #10
 80093ba:	b29b      	uxth	r3, r3
 80093bc:	4313      	orrs	r3, r2
 80093be:	b29b      	uxth	r3, r3
 80093c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093c8:	b29a      	uxth	r2, r3
 80093ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093cc:	801a      	strh	r2, [r3, #0]
 80093ce:	e050      	b.n	8009472 <USB_EPStartXfer+0x318>
 80093d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d10a      	bne.n	80093ee <USB_EPStartXfer+0x294>
 80093d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093da:	881b      	ldrh	r3, [r3, #0]
 80093dc:	b29b      	uxth	r3, r3
 80093de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093e6:	b29a      	uxth	r2, r3
 80093e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ea:	801a      	strh	r2, [r3, #0]
 80093ec:	e041      	b.n	8009472 <USB_EPStartXfer+0x318>
 80093ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093f2:	085b      	lsrs	r3, r3, #1
 80093f4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80093f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093fc:	f003 0301 	and.w	r3, r3, #1
 8009400:	2b00      	cmp	r3, #0
 8009402:	d004      	beq.n	800940e <USB_EPStartXfer+0x2b4>
 8009404:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8009408:	3301      	adds	r3, #1
 800940a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800940e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009410:	881b      	ldrh	r3, [r3, #0]
 8009412:	b29a      	uxth	r2, r3
 8009414:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8009418:	b29b      	uxth	r3, r3
 800941a:	029b      	lsls	r3, r3, #10
 800941c:	b29b      	uxth	r3, r3
 800941e:	4313      	orrs	r3, r2
 8009420:	b29a      	uxth	r2, r3
 8009422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009424:	801a      	strh	r2, [r3, #0]
 8009426:	e024      	b.n	8009472 <USB_EPStartXfer+0x318>
 8009428:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800942c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	785b      	ldrb	r3, [r3, #1]
 8009434:	2b01      	cmp	r3, #1
 8009436:	d11c      	bne.n	8009472 <USB_EPStartXfer+0x318>
 8009438:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800943c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009446:	b29b      	uxth	r3, r3
 8009448:	461a      	mov	r2, r3
 800944a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800944c:	4413      	add	r3, r2
 800944e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009450:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009454:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	781b      	ldrb	r3, [r3, #0]
 800945c:	00da      	lsls	r2, r3, #3
 800945e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009460:	4413      	add	r3, r2
 8009462:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009466:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009468:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800946c:	b29a      	uxth	r2, r3
 800946e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009470:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009472:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009476:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	895b      	ldrh	r3, [r3, #10]
 800947e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009482:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009486:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	6959      	ldr	r1, [r3, #20]
 800948e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009492:	b29b      	uxth	r3, r3
 8009494:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009498:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800949c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80094a0:	6800      	ldr	r0, [r0, #0]
 80094a2:	f001 fb45 	bl	800ab30 <USB_WritePMA>
            ep->xfer_buff += len;
 80094a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	695a      	ldr	r2, [r3, #20]
 80094b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094b6:	441a      	add	r2, r3
 80094b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80094c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	6a1a      	ldr	r2, [r3, #32]
 80094d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	691b      	ldr	r3, [r3, #16]
 80094dc:	429a      	cmp	r2, r3
 80094de:	d90f      	bls.n	8009500 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80094e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	6a1a      	ldr	r2, [r3, #32]
 80094ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094f0:	1ad2      	subs	r2, r2, r3
 80094f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	621a      	str	r2, [r3, #32]
 80094fe:	e00e      	b.n	800951e <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8009500:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009504:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	6a1b      	ldr	r3, [r3, #32]
 800950c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8009510:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009514:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	2200      	movs	r2, #0
 800951c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800951e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009522:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	785b      	ldrb	r3, [r3, #1]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d177      	bne.n	800961e <USB_EPStartXfer+0x4c4>
 800952e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009532:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	61bb      	str	r3, [r7, #24]
 800953a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800953e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009548:	b29b      	uxth	r3, r3
 800954a:	461a      	mov	r2, r3
 800954c:	69bb      	ldr	r3, [r7, #24]
 800954e:	4413      	add	r3, r2
 8009550:	61bb      	str	r3, [r7, #24]
 8009552:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009556:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	781b      	ldrb	r3, [r3, #0]
 800955e:	00da      	lsls	r2, r3, #3
 8009560:	69bb      	ldr	r3, [r7, #24]
 8009562:	4413      	add	r3, r2
 8009564:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009568:	617b      	str	r3, [r7, #20]
 800956a:	697b      	ldr	r3, [r7, #20]
 800956c:	881b      	ldrh	r3, [r3, #0]
 800956e:	b29b      	uxth	r3, r3
 8009570:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009574:	b29a      	uxth	r2, r3
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	801a      	strh	r2, [r3, #0]
 800957a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800957e:	2b3e      	cmp	r3, #62	@ 0x3e
 8009580:	d921      	bls.n	80095c6 <USB_EPStartXfer+0x46c>
 8009582:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009586:	095b      	lsrs	r3, r3, #5
 8009588:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800958c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009590:	f003 031f 	and.w	r3, r3, #31
 8009594:	2b00      	cmp	r3, #0
 8009596:	d104      	bne.n	80095a2 <USB_EPStartXfer+0x448>
 8009598:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800959c:	3b01      	subs	r3, #1
 800959e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80095a2:	697b      	ldr	r3, [r7, #20]
 80095a4:	881b      	ldrh	r3, [r3, #0]
 80095a6:	b29a      	uxth	r2, r3
 80095a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80095ac:	b29b      	uxth	r3, r3
 80095ae:	029b      	lsls	r3, r3, #10
 80095b0:	b29b      	uxth	r3, r3
 80095b2:	4313      	orrs	r3, r2
 80095b4:	b29b      	uxth	r3, r3
 80095b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095be:	b29a      	uxth	r2, r3
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	801a      	strh	r2, [r3, #0]
 80095c4:	e056      	b.n	8009674 <USB_EPStartXfer+0x51a>
 80095c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d10a      	bne.n	80095e4 <USB_EPStartXfer+0x48a>
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	881b      	ldrh	r3, [r3, #0]
 80095d2:	b29b      	uxth	r3, r3
 80095d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095dc:	b29a      	uxth	r2, r3
 80095de:	697b      	ldr	r3, [r7, #20]
 80095e0:	801a      	strh	r2, [r3, #0]
 80095e2:	e047      	b.n	8009674 <USB_EPStartXfer+0x51a>
 80095e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095e8:	085b      	lsrs	r3, r3, #1
 80095ea:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80095ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095f2:	f003 0301 	and.w	r3, r3, #1
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d004      	beq.n	8009604 <USB_EPStartXfer+0x4aa>
 80095fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80095fe:	3301      	adds	r3, #1
 8009600:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	881b      	ldrh	r3, [r3, #0]
 8009608:	b29a      	uxth	r2, r3
 800960a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800960e:	b29b      	uxth	r3, r3
 8009610:	029b      	lsls	r3, r3, #10
 8009612:	b29b      	uxth	r3, r3
 8009614:	4313      	orrs	r3, r2
 8009616:	b29a      	uxth	r2, r3
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	801a      	strh	r2, [r3, #0]
 800961c:	e02a      	b.n	8009674 <USB_EPStartXfer+0x51a>
 800961e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009622:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	785b      	ldrb	r3, [r3, #1]
 800962a:	2b01      	cmp	r3, #1
 800962c:	d122      	bne.n	8009674 <USB_EPStartXfer+0x51a>
 800962e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009632:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	623b      	str	r3, [r7, #32]
 800963a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800963e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009648:	b29b      	uxth	r3, r3
 800964a:	461a      	mov	r2, r3
 800964c:	6a3b      	ldr	r3, [r7, #32]
 800964e:	4413      	add	r3, r2
 8009650:	623b      	str	r3, [r7, #32]
 8009652:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009656:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	781b      	ldrb	r3, [r3, #0]
 800965e:	00da      	lsls	r2, r3, #3
 8009660:	6a3b      	ldr	r3, [r7, #32]
 8009662:	4413      	add	r3, r2
 8009664:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009668:	61fb      	str	r3, [r7, #28]
 800966a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800966e:	b29a      	uxth	r2, r3
 8009670:	69fb      	ldr	r3, [r7, #28]
 8009672:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009674:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009678:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	891b      	ldrh	r3, [r3, #8]
 8009680:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009684:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009688:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	6959      	ldr	r1, [r3, #20]
 8009690:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009694:	b29b      	uxth	r3, r3
 8009696:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800969a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800969e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80096a2:	6800      	ldr	r0, [r0, #0]
 80096a4:	f001 fa44 	bl	800ab30 <USB_WritePMA>
 80096a8:	e3ee      	b.n	8009e88 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80096aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	785b      	ldrb	r3, [r3, #1]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d177      	bne.n	80097aa <USB_EPStartXfer+0x650>
 80096ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80096c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80096d4:	b29b      	uxth	r3, r3
 80096d6:	461a      	mov	r2, r3
 80096d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80096da:	4413      	add	r3, r2
 80096dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80096de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	781b      	ldrb	r3, [r3, #0]
 80096ea:	00da      	lsls	r2, r3, #3
 80096ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80096ee:	4413      	add	r3, r2
 80096f0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80096f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80096f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80096f8:	881b      	ldrh	r3, [r3, #0]
 80096fa:	b29b      	uxth	r3, r3
 80096fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009700:	b29a      	uxth	r2, r3
 8009702:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009704:	801a      	strh	r2, [r3, #0]
 8009706:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800970a:	2b3e      	cmp	r3, #62	@ 0x3e
 800970c:	d921      	bls.n	8009752 <USB_EPStartXfer+0x5f8>
 800970e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009712:	095b      	lsrs	r3, r3, #5
 8009714:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009718:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800971c:	f003 031f 	and.w	r3, r3, #31
 8009720:	2b00      	cmp	r3, #0
 8009722:	d104      	bne.n	800972e <USB_EPStartXfer+0x5d4>
 8009724:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009728:	3b01      	subs	r3, #1
 800972a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800972e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009730:	881b      	ldrh	r3, [r3, #0]
 8009732:	b29a      	uxth	r2, r3
 8009734:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009738:	b29b      	uxth	r3, r3
 800973a:	029b      	lsls	r3, r3, #10
 800973c:	b29b      	uxth	r3, r3
 800973e:	4313      	orrs	r3, r2
 8009740:	b29b      	uxth	r3, r3
 8009742:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009746:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800974a:	b29a      	uxth	r2, r3
 800974c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800974e:	801a      	strh	r2, [r3, #0]
 8009750:	e056      	b.n	8009800 <USB_EPStartXfer+0x6a6>
 8009752:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009756:	2b00      	cmp	r3, #0
 8009758:	d10a      	bne.n	8009770 <USB_EPStartXfer+0x616>
 800975a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800975c:	881b      	ldrh	r3, [r3, #0]
 800975e:	b29b      	uxth	r3, r3
 8009760:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009764:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009768:	b29a      	uxth	r2, r3
 800976a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800976c:	801a      	strh	r2, [r3, #0]
 800976e:	e047      	b.n	8009800 <USB_EPStartXfer+0x6a6>
 8009770:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009774:	085b      	lsrs	r3, r3, #1
 8009776:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800977a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800977e:	f003 0301 	and.w	r3, r3, #1
 8009782:	2b00      	cmp	r3, #0
 8009784:	d004      	beq.n	8009790 <USB_EPStartXfer+0x636>
 8009786:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800978a:	3301      	adds	r3, #1
 800978c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009790:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009792:	881b      	ldrh	r3, [r3, #0]
 8009794:	b29a      	uxth	r2, r3
 8009796:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800979a:	b29b      	uxth	r3, r3
 800979c:	029b      	lsls	r3, r3, #10
 800979e:	b29b      	uxth	r3, r3
 80097a0:	4313      	orrs	r3, r2
 80097a2:	b29a      	uxth	r2, r3
 80097a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80097a6:	801a      	strh	r2, [r3, #0]
 80097a8:	e02a      	b.n	8009800 <USB_EPStartXfer+0x6a6>
 80097aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	785b      	ldrb	r3, [r3, #1]
 80097b6:	2b01      	cmp	r3, #1
 80097b8:	d122      	bne.n	8009800 <USB_EPStartXfer+0x6a6>
 80097ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	653b      	str	r3, [r7, #80]	@ 0x50
 80097c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80097d4:	b29b      	uxth	r3, r3
 80097d6:	461a      	mov	r2, r3
 80097d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80097da:	4413      	add	r3, r2
 80097dc:	653b      	str	r3, [r7, #80]	@ 0x50
 80097de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	781b      	ldrb	r3, [r3, #0]
 80097ea:	00da      	lsls	r2, r3, #3
 80097ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80097ee:	4413      	add	r3, r2
 80097f0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80097f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80097f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097fa:	b29a      	uxth	r2, r3
 80097fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80097fe:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009800:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009804:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	891b      	ldrh	r3, [r3, #8]
 800980c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009810:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009814:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	6959      	ldr	r1, [r3, #20]
 800981c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009820:	b29b      	uxth	r3, r3
 8009822:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009826:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800982a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800982e:	6800      	ldr	r0, [r0, #0]
 8009830:	f001 f97e 	bl	800ab30 <USB_WritePMA>
            ep->xfer_buff += len;
 8009834:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009838:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	695a      	ldr	r2, [r3, #20]
 8009840:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009844:	441a      	add	r2, r3
 8009846:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800984a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009852:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009856:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	6a1a      	ldr	r2, [r3, #32]
 800985e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009862:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	691b      	ldr	r3, [r3, #16]
 800986a:	429a      	cmp	r2, r3
 800986c:	d90f      	bls.n	800988e <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800986e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009872:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	6a1a      	ldr	r2, [r3, #32]
 800987a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800987e:	1ad2      	subs	r2, r2, r3
 8009880:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009884:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	621a      	str	r2, [r3, #32]
 800988c:	e00e      	b.n	80098ac <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800988e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009892:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	6a1b      	ldr	r3, [r3, #32]
 800989a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800989e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	2200      	movs	r2, #0
 80098aa:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80098ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80098b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	785b      	ldrb	r3, [r3, #1]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d177      	bne.n	80099b8 <USB_EPStartXfer+0x85e>
 80098c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80098d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80098e2:	b29b      	uxth	r3, r3
 80098e4:	461a      	mov	r2, r3
 80098e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098e8:	4413      	add	r3, r2
 80098ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 80098ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	781b      	ldrb	r3, [r3, #0]
 80098f8:	00da      	lsls	r2, r3, #3
 80098fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098fc:	4413      	add	r3, r2
 80098fe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009902:	637b      	str	r3, [r7, #52]	@ 0x34
 8009904:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009906:	881b      	ldrh	r3, [r3, #0]
 8009908:	b29b      	uxth	r3, r3
 800990a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800990e:	b29a      	uxth	r2, r3
 8009910:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009912:	801a      	strh	r2, [r3, #0]
 8009914:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009918:	2b3e      	cmp	r3, #62	@ 0x3e
 800991a:	d921      	bls.n	8009960 <USB_EPStartXfer+0x806>
 800991c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009920:	095b      	lsrs	r3, r3, #5
 8009922:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009926:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800992a:	f003 031f 	and.w	r3, r3, #31
 800992e:	2b00      	cmp	r3, #0
 8009930:	d104      	bne.n	800993c <USB_EPStartXfer+0x7e2>
 8009932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009936:	3b01      	subs	r3, #1
 8009938:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800993c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800993e:	881b      	ldrh	r3, [r3, #0]
 8009940:	b29a      	uxth	r2, r3
 8009942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009946:	b29b      	uxth	r3, r3
 8009948:	029b      	lsls	r3, r3, #10
 800994a:	b29b      	uxth	r3, r3
 800994c:	4313      	orrs	r3, r2
 800994e:	b29b      	uxth	r3, r3
 8009950:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009954:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009958:	b29a      	uxth	r2, r3
 800995a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800995c:	801a      	strh	r2, [r3, #0]
 800995e:	e050      	b.n	8009a02 <USB_EPStartXfer+0x8a8>
 8009960:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009964:	2b00      	cmp	r3, #0
 8009966:	d10a      	bne.n	800997e <USB_EPStartXfer+0x824>
 8009968:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800996a:	881b      	ldrh	r3, [r3, #0]
 800996c:	b29b      	uxth	r3, r3
 800996e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009972:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009976:	b29a      	uxth	r2, r3
 8009978:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800997a:	801a      	strh	r2, [r3, #0]
 800997c:	e041      	b.n	8009a02 <USB_EPStartXfer+0x8a8>
 800997e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009982:	085b      	lsrs	r3, r3, #1
 8009984:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009988:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800998c:	f003 0301 	and.w	r3, r3, #1
 8009990:	2b00      	cmp	r3, #0
 8009992:	d004      	beq.n	800999e <USB_EPStartXfer+0x844>
 8009994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009998:	3301      	adds	r3, #1
 800999a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800999e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099a0:	881b      	ldrh	r3, [r3, #0]
 80099a2:	b29a      	uxth	r2, r3
 80099a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099a8:	b29b      	uxth	r3, r3
 80099aa:	029b      	lsls	r3, r3, #10
 80099ac:	b29b      	uxth	r3, r3
 80099ae:	4313      	orrs	r3, r2
 80099b0:	b29a      	uxth	r2, r3
 80099b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099b4:	801a      	strh	r2, [r3, #0]
 80099b6:	e024      	b.n	8009a02 <USB_EPStartXfer+0x8a8>
 80099b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	785b      	ldrb	r3, [r3, #1]
 80099c4:	2b01      	cmp	r3, #1
 80099c6:	d11c      	bne.n	8009a02 <USB_EPStartXfer+0x8a8>
 80099c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80099d6:	b29b      	uxth	r3, r3
 80099d8:	461a      	mov	r2, r3
 80099da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80099dc:	4413      	add	r3, r2
 80099de:	643b      	str	r3, [r7, #64]	@ 0x40
 80099e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	781b      	ldrb	r3, [r3, #0]
 80099ec:	00da      	lsls	r2, r3, #3
 80099ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80099f0:	4413      	add	r3, r2
 80099f2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80099f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80099f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099fc:	b29a      	uxth	r2, r3
 80099fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a00:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009a02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	895b      	ldrh	r3, [r3, #10]
 8009a0e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009a12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	6959      	ldr	r1, [r3, #20]
 8009a1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a22:	b29b      	uxth	r3, r3
 8009a24:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009a28:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009a2c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009a30:	6800      	ldr	r0, [r0, #0]
 8009a32:	f001 f87d 	bl	800ab30 <USB_WritePMA>
 8009a36:	e227      	b.n	8009e88 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009a38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	6a1b      	ldr	r3, [r3, #32]
 8009a44:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8009a48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009a50:	681a      	ldr	r2, [r3, #0]
 8009a52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	781b      	ldrb	r3, [r3, #0]
 8009a5e:	009b      	lsls	r3, r3, #2
 8009a60:	4413      	add	r3, r2
 8009a62:	881b      	ldrh	r3, [r3, #0]
 8009a64:	b29b      	uxth	r3, r3
 8009a66:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8009a6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a6e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8009a72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a76:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009a7a:	681a      	ldr	r2, [r3, #0]
 8009a7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	781b      	ldrb	r3, [r3, #0]
 8009a88:	009b      	lsls	r3, r3, #2
 8009a8a:	441a      	add	r2, r3
 8009a8c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8009a90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009a94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009a98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009a9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009aa0:	b29b      	uxth	r3, r3
 8009aa2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009aa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009aa8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009ab0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ab4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009abe:	b29b      	uxth	r3, r3
 8009ac0:	461a      	mov	r2, r3
 8009ac2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009ac4:	4413      	add	r3, r2
 8009ac6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009ac8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009acc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	781b      	ldrb	r3, [r3, #0]
 8009ad4:	00da      	lsls	r2, r3, #3
 8009ad6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009ad8:	4413      	add	r3, r2
 8009ada:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009ade:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009ae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ae4:	b29a      	uxth	r2, r3
 8009ae6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009ae8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009aea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009aee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	891b      	ldrh	r3, [r3, #8]
 8009af6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009afa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009afe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	6959      	ldr	r1, [r3, #20]
 8009b06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b0a:	b29b      	uxth	r3, r3
 8009b0c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009b10:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009b14:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009b18:	6800      	ldr	r0, [r0, #0]
 8009b1a:	f001 f809 	bl	800ab30 <USB_WritePMA>
 8009b1e:	e1b3      	b.n	8009e88 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009b20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	6a1a      	ldr	r2, [r3, #32]
 8009b2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b30:	1ad2      	subs	r2, r2, r3
 8009b32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009b3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009b46:	681a      	ldr	r2, [r3, #0]
 8009b48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	781b      	ldrb	r3, [r3, #0]
 8009b54:	009b      	lsls	r3, r3, #2
 8009b56:	4413      	add	r3, r2
 8009b58:	881b      	ldrh	r3, [r3, #0]
 8009b5a:	b29b      	uxth	r3, r3
 8009b5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	f000 80c6 	beq.w	8009cf2 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009b66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b6a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	673b      	str	r3, [r7, #112]	@ 0x70
 8009b72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	785b      	ldrb	r3, [r3, #1]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d177      	bne.n	8009c72 <USB_EPStartXfer+0xb18>
 8009b82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009b8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b92:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009b9c:	b29b      	uxth	r3, r3
 8009b9e:	461a      	mov	r2, r3
 8009ba0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009ba2:	4413      	add	r3, r2
 8009ba4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009ba6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009baa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	781b      	ldrb	r3, [r3, #0]
 8009bb2:	00da      	lsls	r2, r3, #3
 8009bb4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009bb6:	4413      	add	r3, r2
 8009bb8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009bbc:	667b      	str	r3, [r7, #100]	@ 0x64
 8009bbe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009bc0:	881b      	ldrh	r3, [r3, #0]
 8009bc2:	b29b      	uxth	r3, r3
 8009bc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009bc8:	b29a      	uxth	r2, r3
 8009bca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009bcc:	801a      	strh	r2, [r3, #0]
 8009bce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bd2:	2b3e      	cmp	r3, #62	@ 0x3e
 8009bd4:	d921      	bls.n	8009c1a <USB_EPStartXfer+0xac0>
 8009bd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bda:	095b      	lsrs	r3, r3, #5
 8009bdc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009be0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009be4:	f003 031f 	and.w	r3, r3, #31
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d104      	bne.n	8009bf6 <USB_EPStartXfer+0xa9c>
 8009bec:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009bf0:	3b01      	subs	r3, #1
 8009bf2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009bf6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009bf8:	881b      	ldrh	r3, [r3, #0]
 8009bfa:	b29a      	uxth	r2, r3
 8009bfc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009c00:	b29b      	uxth	r3, r3
 8009c02:	029b      	lsls	r3, r3, #10
 8009c04:	b29b      	uxth	r3, r3
 8009c06:	4313      	orrs	r3, r2
 8009c08:	b29b      	uxth	r3, r3
 8009c0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c12:	b29a      	uxth	r2, r3
 8009c14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c16:	801a      	strh	r2, [r3, #0]
 8009c18:	e050      	b.n	8009cbc <USB_EPStartXfer+0xb62>
 8009c1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d10a      	bne.n	8009c38 <USB_EPStartXfer+0xade>
 8009c22:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c24:	881b      	ldrh	r3, [r3, #0]
 8009c26:	b29b      	uxth	r3, r3
 8009c28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c30:	b29a      	uxth	r2, r3
 8009c32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c34:	801a      	strh	r2, [r3, #0]
 8009c36:	e041      	b.n	8009cbc <USB_EPStartXfer+0xb62>
 8009c38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c3c:	085b      	lsrs	r3, r3, #1
 8009c3e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009c42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c46:	f003 0301 	and.w	r3, r3, #1
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d004      	beq.n	8009c58 <USB_EPStartXfer+0xafe>
 8009c4e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009c52:	3301      	adds	r3, #1
 8009c54:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009c58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c5a:	881b      	ldrh	r3, [r3, #0]
 8009c5c:	b29a      	uxth	r2, r3
 8009c5e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009c62:	b29b      	uxth	r3, r3
 8009c64:	029b      	lsls	r3, r3, #10
 8009c66:	b29b      	uxth	r3, r3
 8009c68:	4313      	orrs	r3, r2
 8009c6a:	b29a      	uxth	r2, r3
 8009c6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c6e:	801a      	strh	r2, [r3, #0]
 8009c70:	e024      	b.n	8009cbc <USB_EPStartXfer+0xb62>
 8009c72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	785b      	ldrb	r3, [r3, #1]
 8009c7e:	2b01      	cmp	r3, #1
 8009c80:	d11c      	bne.n	8009cbc <USB_EPStartXfer+0xb62>
 8009c82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009c90:	b29b      	uxth	r3, r3
 8009c92:	461a      	mov	r2, r3
 8009c94:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009c96:	4413      	add	r3, r2
 8009c98:	673b      	str	r3, [r7, #112]	@ 0x70
 8009c9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	781b      	ldrb	r3, [r3, #0]
 8009ca6:	00da      	lsls	r2, r3, #3
 8009ca8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009caa:	4413      	add	r3, r2
 8009cac:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009cb0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009cb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cb6:	b29a      	uxth	r2, r3
 8009cb8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009cba:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009cbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	895b      	ldrh	r3, [r3, #10]
 8009cc8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009ccc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	6959      	ldr	r1, [r3, #20]
 8009cd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cdc:	b29b      	uxth	r3, r3
 8009cde:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009ce2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009ce6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009cea:	6800      	ldr	r0, [r0, #0]
 8009cec:	f000 ff20 	bl	800ab30 <USB_WritePMA>
 8009cf0:	e0ca      	b.n	8009e88 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009cf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cf6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	785b      	ldrb	r3, [r3, #1]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d177      	bne.n	8009df2 <USB_EPStartXfer+0xc98>
 8009d02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009d0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009d1c:	b29b      	uxth	r3, r3
 8009d1e:	461a      	mov	r2, r3
 8009d20:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009d22:	4413      	add	r3, r2
 8009d24:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009d26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	781b      	ldrb	r3, [r3, #0]
 8009d32:	00da      	lsls	r2, r3, #3
 8009d34:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009d36:	4413      	add	r3, r2
 8009d38:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009d3c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009d3e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009d40:	881b      	ldrh	r3, [r3, #0]
 8009d42:	b29b      	uxth	r3, r3
 8009d44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009d48:	b29a      	uxth	r2, r3
 8009d4a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009d4c:	801a      	strh	r2, [r3, #0]
 8009d4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d52:	2b3e      	cmp	r3, #62	@ 0x3e
 8009d54:	d921      	bls.n	8009d9a <USB_EPStartXfer+0xc40>
 8009d56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d5a:	095b      	lsrs	r3, r3, #5
 8009d5c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d64:	f003 031f 	and.w	r3, r3, #31
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d104      	bne.n	8009d76 <USB_EPStartXfer+0xc1c>
 8009d6c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009d70:	3b01      	subs	r3, #1
 8009d72:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009d76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009d78:	881b      	ldrh	r3, [r3, #0]
 8009d7a:	b29a      	uxth	r2, r3
 8009d7c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009d80:	b29b      	uxth	r3, r3
 8009d82:	029b      	lsls	r3, r3, #10
 8009d84:	b29b      	uxth	r3, r3
 8009d86:	4313      	orrs	r3, r2
 8009d88:	b29b      	uxth	r3, r3
 8009d8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d92:	b29a      	uxth	r2, r3
 8009d94:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009d96:	801a      	strh	r2, [r3, #0]
 8009d98:	e05c      	b.n	8009e54 <USB_EPStartXfer+0xcfa>
 8009d9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d10a      	bne.n	8009db8 <USB_EPStartXfer+0xc5e>
 8009da2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009da4:	881b      	ldrh	r3, [r3, #0]
 8009da6:	b29b      	uxth	r3, r3
 8009da8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009dac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009db0:	b29a      	uxth	r2, r3
 8009db2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009db4:	801a      	strh	r2, [r3, #0]
 8009db6:	e04d      	b.n	8009e54 <USB_EPStartXfer+0xcfa>
 8009db8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dbc:	085b      	lsrs	r3, r3, #1
 8009dbe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009dc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dc6:	f003 0301 	and.w	r3, r3, #1
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d004      	beq.n	8009dd8 <USB_EPStartXfer+0xc7e>
 8009dce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009dd2:	3301      	adds	r3, #1
 8009dd4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009dd8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009dda:	881b      	ldrh	r3, [r3, #0]
 8009ddc:	b29a      	uxth	r2, r3
 8009dde:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009de2:	b29b      	uxth	r3, r3
 8009de4:	029b      	lsls	r3, r3, #10
 8009de6:	b29b      	uxth	r3, r3
 8009de8:	4313      	orrs	r3, r2
 8009dea:	b29a      	uxth	r2, r3
 8009dec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009dee:	801a      	strh	r2, [r3, #0]
 8009df0:	e030      	b.n	8009e54 <USB_EPStartXfer+0xcfa>
 8009df2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009df6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	785b      	ldrb	r3, [r3, #1]
 8009dfe:	2b01      	cmp	r3, #1
 8009e00:	d128      	bne.n	8009e54 <USB_EPStartXfer+0xcfa>
 8009e02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009e10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e14:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009e1e:	b29b      	uxth	r3, r3
 8009e20:	461a      	mov	r2, r3
 8009e22:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009e26:	4413      	add	r3, r2
 8009e28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009e2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	781b      	ldrb	r3, [r3, #0]
 8009e38:	00da      	lsls	r2, r3, #3
 8009e3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009e3e:	4413      	add	r3, r2
 8009e40:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009e44:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009e48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e4c:	b29a      	uxth	r2, r3
 8009e4e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009e52:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009e54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	891b      	ldrh	r3, [r3, #8]
 8009e60:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009e64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	6959      	ldr	r1, [r3, #20]
 8009e70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e74:	b29b      	uxth	r3, r3
 8009e76:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009e7a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009e7e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009e82:	6800      	ldr	r0, [r0, #0]
 8009e84:	f000 fe54 	bl	800ab30 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009e88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e8c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009e90:	681a      	ldr	r2, [r3, #0]
 8009e92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	781b      	ldrb	r3, [r3, #0]
 8009e9e:	009b      	lsls	r3, r3, #2
 8009ea0:	4413      	add	r3, r2
 8009ea2:	881b      	ldrh	r3, [r3, #0]
 8009ea4:	b29b      	uxth	r3, r3
 8009ea6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009eaa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009eae:	817b      	strh	r3, [r7, #10]
 8009eb0:	897b      	ldrh	r3, [r7, #10]
 8009eb2:	f083 0310 	eor.w	r3, r3, #16
 8009eb6:	817b      	strh	r3, [r7, #10]
 8009eb8:	897b      	ldrh	r3, [r7, #10]
 8009eba:	f083 0320 	eor.w	r3, r3, #32
 8009ebe:	817b      	strh	r3, [r7, #10]
 8009ec0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ec4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009ec8:	681a      	ldr	r2, [r3, #0]
 8009eca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ece:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	781b      	ldrb	r3, [r3, #0]
 8009ed6:	009b      	lsls	r3, r3, #2
 8009ed8:	441a      	add	r2, r3
 8009eda:	897b      	ldrh	r3, [r7, #10]
 8009edc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009ee0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009ee4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009ee8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009eec:	b29b      	uxth	r3, r3
 8009eee:	8013      	strh	r3, [r2, #0]
 8009ef0:	f000 bcde 	b.w	800a8b0 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009ef4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ef8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	7b1b      	ldrb	r3, [r3, #12]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	f040 80bb 	bne.w	800a07c <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009f06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	699a      	ldr	r2, [r3, #24]
 8009f12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	691b      	ldr	r3, [r3, #16]
 8009f1e:	429a      	cmp	r2, r3
 8009f20:	d917      	bls.n	8009f52 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8009f22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	691b      	ldr	r3, [r3, #16]
 8009f2e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8009f32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	699a      	ldr	r2, [r3, #24]
 8009f3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f42:	1ad2      	subs	r2, r2, r3
 8009f44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	619a      	str	r2, [r3, #24]
 8009f50:	e00e      	b.n	8009f70 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8009f52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	699b      	ldr	r3, [r3, #24]
 8009f5e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8009f62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009f70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f74:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009f7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009f8c:	b29b      	uxth	r3, r3
 8009f8e:	461a      	mov	r2, r3
 8009f90:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009f94:	4413      	add	r3, r2
 8009f96:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009f9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	781b      	ldrb	r3, [r3, #0]
 8009fa6:	00da      	lsls	r2, r3, #3
 8009fa8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009fac:	4413      	add	r3, r2
 8009fae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009fb2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009fb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009fba:	881b      	ldrh	r3, [r3, #0]
 8009fbc:	b29b      	uxth	r3, r3
 8009fbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009fc2:	b29a      	uxth	r2, r3
 8009fc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009fc8:	801a      	strh	r2, [r3, #0]
 8009fca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fce:	2b3e      	cmp	r3, #62	@ 0x3e
 8009fd0:	d924      	bls.n	800a01c <USB_EPStartXfer+0xec2>
 8009fd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fd6:	095b      	lsrs	r3, r3, #5
 8009fd8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fe0:	f003 031f 	and.w	r3, r3, #31
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d104      	bne.n	8009ff2 <USB_EPStartXfer+0xe98>
 8009fe8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8009fec:	3b01      	subs	r3, #1
 8009fee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009ff2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009ff6:	881b      	ldrh	r3, [r3, #0]
 8009ff8:	b29a      	uxth	r2, r3
 8009ffa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8009ffe:	b29b      	uxth	r3, r3
 800a000:	029b      	lsls	r3, r3, #10
 800a002:	b29b      	uxth	r3, r3
 800a004:	4313      	orrs	r3, r2
 800a006:	b29b      	uxth	r3, r3
 800a008:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a00c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a010:	b29a      	uxth	r2, r3
 800a012:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a016:	801a      	strh	r2, [r3, #0]
 800a018:	f000 bc10 	b.w	800a83c <USB_EPStartXfer+0x16e2>
 800a01c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a020:	2b00      	cmp	r3, #0
 800a022:	d10c      	bne.n	800a03e <USB_EPStartXfer+0xee4>
 800a024:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a028:	881b      	ldrh	r3, [r3, #0]
 800a02a:	b29b      	uxth	r3, r3
 800a02c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a030:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a034:	b29a      	uxth	r2, r3
 800a036:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a03a:	801a      	strh	r2, [r3, #0]
 800a03c:	e3fe      	b.n	800a83c <USB_EPStartXfer+0x16e2>
 800a03e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a042:	085b      	lsrs	r3, r3, #1
 800a044:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a048:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a04c:	f003 0301 	and.w	r3, r3, #1
 800a050:	2b00      	cmp	r3, #0
 800a052:	d004      	beq.n	800a05e <USB_EPStartXfer+0xf04>
 800a054:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a058:	3301      	adds	r3, #1
 800a05a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a05e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a062:	881b      	ldrh	r3, [r3, #0]
 800a064:	b29a      	uxth	r2, r3
 800a066:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a06a:	b29b      	uxth	r3, r3
 800a06c:	029b      	lsls	r3, r3, #10
 800a06e:	b29b      	uxth	r3, r3
 800a070:	4313      	orrs	r3, r2
 800a072:	b29a      	uxth	r2, r3
 800a074:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a078:	801a      	strh	r2, [r3, #0]
 800a07a:	e3df      	b.n	800a83c <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a07c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a080:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	78db      	ldrb	r3, [r3, #3]
 800a088:	2b02      	cmp	r3, #2
 800a08a:	f040 8218 	bne.w	800a4be <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a08e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a092:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	785b      	ldrb	r3, [r3, #1]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	f040 809d 	bne.w	800a1da <USB_EPStartXfer+0x1080>
 800a0a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a0ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a0bc:	b29b      	uxth	r3, r3
 800a0be:	461a      	mov	r2, r3
 800a0c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a0c4:	4413      	add	r3, r2
 800a0c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a0ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	781b      	ldrb	r3, [r3, #0]
 800a0d6:	00da      	lsls	r2, r3, #3
 800a0d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a0dc:	4413      	add	r3, r2
 800a0de:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a0e2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a0e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a0ea:	881b      	ldrh	r3, [r3, #0]
 800a0ec:	b29b      	uxth	r3, r3
 800a0ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a0f2:	b29a      	uxth	r2, r3
 800a0f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a0f8:	801a      	strh	r2, [r3, #0]
 800a0fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	691b      	ldr	r3, [r3, #16]
 800a106:	2b3e      	cmp	r3, #62	@ 0x3e
 800a108:	d92b      	bls.n	800a162 <USB_EPStartXfer+0x1008>
 800a10a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a10e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	691b      	ldr	r3, [r3, #16]
 800a116:	095b      	lsrs	r3, r3, #5
 800a118:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a11c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a120:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	691b      	ldr	r3, [r3, #16]
 800a128:	f003 031f 	and.w	r3, r3, #31
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d104      	bne.n	800a13a <USB_EPStartXfer+0xfe0>
 800a130:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a134:	3b01      	subs	r3, #1
 800a136:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a13a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a13e:	881b      	ldrh	r3, [r3, #0]
 800a140:	b29a      	uxth	r2, r3
 800a142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a146:	b29b      	uxth	r3, r3
 800a148:	029b      	lsls	r3, r3, #10
 800a14a:	b29b      	uxth	r3, r3
 800a14c:	4313      	orrs	r3, r2
 800a14e:	b29b      	uxth	r3, r3
 800a150:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a154:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a158:	b29a      	uxth	r2, r3
 800a15a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a15e:	801a      	strh	r2, [r3, #0]
 800a160:	e070      	b.n	800a244 <USB_EPStartXfer+0x10ea>
 800a162:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a166:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	691b      	ldr	r3, [r3, #16]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d10c      	bne.n	800a18c <USB_EPStartXfer+0x1032>
 800a172:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a176:	881b      	ldrh	r3, [r3, #0]
 800a178:	b29b      	uxth	r3, r3
 800a17a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a17e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a182:	b29a      	uxth	r2, r3
 800a184:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a188:	801a      	strh	r2, [r3, #0]
 800a18a:	e05b      	b.n	800a244 <USB_EPStartXfer+0x10ea>
 800a18c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a190:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	691b      	ldr	r3, [r3, #16]
 800a198:	085b      	lsrs	r3, r3, #1
 800a19a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a19e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	691b      	ldr	r3, [r3, #16]
 800a1aa:	f003 0301 	and.w	r3, r3, #1
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d004      	beq.n	800a1bc <USB_EPStartXfer+0x1062>
 800a1b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1b6:	3301      	adds	r3, #1
 800a1b8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a1bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a1c0:	881b      	ldrh	r3, [r3, #0]
 800a1c2:	b29a      	uxth	r2, r3
 800a1c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1c8:	b29b      	uxth	r3, r3
 800a1ca:	029b      	lsls	r3, r3, #10
 800a1cc:	b29b      	uxth	r3, r3
 800a1ce:	4313      	orrs	r3, r2
 800a1d0:	b29a      	uxth	r2, r3
 800a1d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a1d6:	801a      	strh	r2, [r3, #0]
 800a1d8:	e034      	b.n	800a244 <USB_EPStartXfer+0x10ea>
 800a1da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	785b      	ldrb	r3, [r3, #1]
 800a1e6:	2b01      	cmp	r3, #1
 800a1e8:	d12c      	bne.n	800a244 <USB_EPStartXfer+0x10ea>
 800a1ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a1f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a206:	b29b      	uxth	r3, r3
 800a208:	461a      	mov	r2, r3
 800a20a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a20e:	4413      	add	r3, r2
 800a210:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a214:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a218:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	781b      	ldrb	r3, [r3, #0]
 800a220:	00da      	lsls	r2, r3, #3
 800a222:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a226:	4413      	add	r3, r2
 800a228:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a22c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a230:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a234:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	691b      	ldr	r3, [r3, #16]
 800a23c:	b29a      	uxth	r2, r3
 800a23e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a242:	801a      	strh	r2, [r3, #0]
 800a244:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a248:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a252:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a256:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	785b      	ldrb	r3, [r3, #1]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	f040 809d 	bne.w	800a39e <USB_EPStartXfer+0x1244>
 800a264:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a268:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a272:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a276:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a280:	b29b      	uxth	r3, r3
 800a282:	461a      	mov	r2, r3
 800a284:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a288:	4413      	add	r3, r2
 800a28a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a28e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a292:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	781b      	ldrb	r3, [r3, #0]
 800a29a:	00da      	lsls	r2, r3, #3
 800a29c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a2a0:	4413      	add	r3, r2
 800a2a2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a2a6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a2aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a2ae:	881b      	ldrh	r3, [r3, #0]
 800a2b0:	b29b      	uxth	r3, r3
 800a2b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a2b6:	b29a      	uxth	r2, r3
 800a2b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a2bc:	801a      	strh	r2, [r3, #0]
 800a2be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	691b      	ldr	r3, [r3, #16]
 800a2ca:	2b3e      	cmp	r3, #62	@ 0x3e
 800a2cc:	d92b      	bls.n	800a326 <USB_EPStartXfer+0x11cc>
 800a2ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	691b      	ldr	r3, [r3, #16]
 800a2da:	095b      	lsrs	r3, r3, #5
 800a2dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a2e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	691b      	ldr	r3, [r3, #16]
 800a2ec:	f003 031f 	and.w	r3, r3, #31
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d104      	bne.n	800a2fe <USB_EPStartXfer+0x11a4>
 800a2f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a2f8:	3b01      	subs	r3, #1
 800a2fa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a2fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a302:	881b      	ldrh	r3, [r3, #0]
 800a304:	b29a      	uxth	r2, r3
 800a306:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a30a:	b29b      	uxth	r3, r3
 800a30c:	029b      	lsls	r3, r3, #10
 800a30e:	b29b      	uxth	r3, r3
 800a310:	4313      	orrs	r3, r2
 800a312:	b29b      	uxth	r3, r3
 800a314:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a318:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a31c:	b29a      	uxth	r2, r3
 800a31e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a322:	801a      	strh	r2, [r3, #0]
 800a324:	e069      	b.n	800a3fa <USB_EPStartXfer+0x12a0>
 800a326:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a32a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	691b      	ldr	r3, [r3, #16]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d10c      	bne.n	800a350 <USB_EPStartXfer+0x11f6>
 800a336:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a33a:	881b      	ldrh	r3, [r3, #0]
 800a33c:	b29b      	uxth	r3, r3
 800a33e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a342:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a346:	b29a      	uxth	r2, r3
 800a348:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a34c:	801a      	strh	r2, [r3, #0]
 800a34e:	e054      	b.n	800a3fa <USB_EPStartXfer+0x12a0>
 800a350:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a354:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	691b      	ldr	r3, [r3, #16]
 800a35c:	085b      	lsrs	r3, r3, #1
 800a35e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a362:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a366:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	691b      	ldr	r3, [r3, #16]
 800a36e:	f003 0301 	and.w	r3, r3, #1
 800a372:	2b00      	cmp	r3, #0
 800a374:	d004      	beq.n	800a380 <USB_EPStartXfer+0x1226>
 800a376:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a37a:	3301      	adds	r3, #1
 800a37c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a380:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a384:	881b      	ldrh	r3, [r3, #0]
 800a386:	b29a      	uxth	r2, r3
 800a388:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a38c:	b29b      	uxth	r3, r3
 800a38e:	029b      	lsls	r3, r3, #10
 800a390:	b29b      	uxth	r3, r3
 800a392:	4313      	orrs	r3, r2
 800a394:	b29a      	uxth	r2, r3
 800a396:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a39a:	801a      	strh	r2, [r3, #0]
 800a39c:	e02d      	b.n	800a3fa <USB_EPStartXfer+0x12a0>
 800a39e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	785b      	ldrb	r3, [r3, #1]
 800a3aa:	2b01      	cmp	r3, #1
 800a3ac:	d125      	bne.n	800a3fa <USB_EPStartXfer+0x12a0>
 800a3ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a3bc:	b29b      	uxth	r3, r3
 800a3be:	461a      	mov	r2, r3
 800a3c0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a3c4:	4413      	add	r3, r2
 800a3c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a3ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	781b      	ldrb	r3, [r3, #0]
 800a3d6:	00da      	lsls	r2, r3, #3
 800a3d8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a3dc:	4413      	add	r3, r2
 800a3de:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a3e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a3e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	691b      	ldr	r3, [r3, #16]
 800a3f2:	b29a      	uxth	r2, r3
 800a3f4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a3f8:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a3fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	69db      	ldr	r3, [r3, #28]
 800a406:	2b00      	cmp	r3, #0
 800a408:	f000 8218 	beq.w	800a83c <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a40c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a410:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a414:	681a      	ldr	r2, [r3, #0]
 800a416:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a41a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	781b      	ldrb	r3, [r3, #0]
 800a422:	009b      	lsls	r3, r3, #2
 800a424:	4413      	add	r3, r2
 800a426:	881b      	ldrh	r3, [r3, #0]
 800a428:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a42c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a430:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a434:	2b00      	cmp	r3, #0
 800a436:	d005      	beq.n	800a444 <USB_EPStartXfer+0x12ea>
 800a438:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a43c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a440:	2b00      	cmp	r3, #0
 800a442:	d10d      	bne.n	800a460 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a444:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a448:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	f040 81f5 	bne.w	800a83c <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a452:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a456:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	f040 81ee 	bne.w	800a83c <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800a460:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a464:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a468:	681a      	ldr	r2, [r3, #0]
 800a46a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a46e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	781b      	ldrb	r3, [r3, #0]
 800a476:	009b      	lsls	r3, r3, #2
 800a478:	4413      	add	r3, r2
 800a47a:	881b      	ldrh	r3, [r3, #0]
 800a47c:	b29b      	uxth	r3, r3
 800a47e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a482:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a486:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800a48a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a48e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a492:	681a      	ldr	r2, [r3, #0]
 800a494:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a498:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	781b      	ldrb	r3, [r3, #0]
 800a4a0:	009b      	lsls	r3, r3, #2
 800a4a2:	441a      	add	r2, r3
 800a4a4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800a4a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a4ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a4b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a4b4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a4b8:	b29b      	uxth	r3, r3
 800a4ba:	8013      	strh	r3, [r2, #0]
 800a4bc:	e1be      	b.n	800a83c <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a4be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	78db      	ldrb	r3, [r3, #3]
 800a4ca:	2b01      	cmp	r3, #1
 800a4cc:	f040 81b4 	bne.w	800a838 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a4d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	699a      	ldr	r2, [r3, #24]
 800a4dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	691b      	ldr	r3, [r3, #16]
 800a4e8:	429a      	cmp	r2, r3
 800a4ea:	d917      	bls.n	800a51c <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800a4ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	691b      	ldr	r3, [r3, #16]
 800a4f8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800a4fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a500:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	699a      	ldr	r2, [r3, #24]
 800a508:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a50c:	1ad2      	subs	r2, r2, r3
 800a50e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a512:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	619a      	str	r2, [r3, #24]
 800a51a:	e00e      	b.n	800a53a <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800a51c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a520:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	699b      	ldr	r3, [r3, #24]
 800a528:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800a52c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a530:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	2200      	movs	r2, #0
 800a538:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a53a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a53e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	785b      	ldrb	r3, [r3, #1]
 800a546:	2b00      	cmp	r3, #0
 800a548:	f040 8085 	bne.w	800a656 <USB_EPStartXfer+0x14fc>
 800a54c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a550:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a55a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a55e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a568:	b29b      	uxth	r3, r3
 800a56a:	461a      	mov	r2, r3
 800a56c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a570:	4413      	add	r3, r2
 800a572:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a576:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a57a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	781b      	ldrb	r3, [r3, #0]
 800a582:	00da      	lsls	r2, r3, #3
 800a584:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a588:	4413      	add	r3, r2
 800a58a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a58e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a592:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a596:	881b      	ldrh	r3, [r3, #0]
 800a598:	b29b      	uxth	r3, r3
 800a59a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a59e:	b29a      	uxth	r2, r3
 800a5a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a5a4:	801a      	strh	r2, [r3, #0]
 800a5a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5aa:	2b3e      	cmp	r3, #62	@ 0x3e
 800a5ac:	d923      	bls.n	800a5f6 <USB_EPStartXfer+0x149c>
 800a5ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5b2:	095b      	lsrs	r3, r3, #5
 800a5b4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a5b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5bc:	f003 031f 	and.w	r3, r3, #31
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d104      	bne.n	800a5ce <USB_EPStartXfer+0x1474>
 800a5c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a5c8:	3b01      	subs	r3, #1
 800a5ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a5ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a5d2:	881b      	ldrh	r3, [r3, #0]
 800a5d4:	b29a      	uxth	r2, r3
 800a5d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a5da:	b29b      	uxth	r3, r3
 800a5dc:	029b      	lsls	r3, r3, #10
 800a5de:	b29b      	uxth	r3, r3
 800a5e0:	4313      	orrs	r3, r2
 800a5e2:	b29b      	uxth	r3, r3
 800a5e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5ec:	b29a      	uxth	r2, r3
 800a5ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a5f2:	801a      	strh	r2, [r3, #0]
 800a5f4:	e060      	b.n	800a6b8 <USB_EPStartXfer+0x155e>
 800a5f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d10c      	bne.n	800a618 <USB_EPStartXfer+0x14be>
 800a5fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a602:	881b      	ldrh	r3, [r3, #0]
 800a604:	b29b      	uxth	r3, r3
 800a606:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a60a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a60e:	b29a      	uxth	r2, r3
 800a610:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a614:	801a      	strh	r2, [r3, #0]
 800a616:	e04f      	b.n	800a6b8 <USB_EPStartXfer+0x155e>
 800a618:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a61c:	085b      	lsrs	r3, r3, #1
 800a61e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a622:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a626:	f003 0301 	and.w	r3, r3, #1
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d004      	beq.n	800a638 <USB_EPStartXfer+0x14de>
 800a62e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a632:	3301      	adds	r3, #1
 800a634:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a638:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a63c:	881b      	ldrh	r3, [r3, #0]
 800a63e:	b29a      	uxth	r2, r3
 800a640:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a644:	b29b      	uxth	r3, r3
 800a646:	029b      	lsls	r3, r3, #10
 800a648:	b29b      	uxth	r3, r3
 800a64a:	4313      	orrs	r3, r2
 800a64c:	b29a      	uxth	r2, r3
 800a64e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a652:	801a      	strh	r2, [r3, #0]
 800a654:	e030      	b.n	800a6b8 <USB_EPStartXfer+0x155e>
 800a656:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a65a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	785b      	ldrb	r3, [r3, #1]
 800a662:	2b01      	cmp	r3, #1
 800a664:	d128      	bne.n	800a6b8 <USB_EPStartXfer+0x155e>
 800a666:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a66a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a674:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a678:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a682:	b29b      	uxth	r3, r3
 800a684:	461a      	mov	r2, r3
 800a686:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a68a:	4413      	add	r3, r2
 800a68c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a690:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a694:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	781b      	ldrb	r3, [r3, #0]
 800a69c:	00da      	lsls	r2, r3, #3
 800a69e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a6a2:	4413      	add	r3, r2
 800a6a4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a6a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a6ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6b0:	b29a      	uxth	r2, r3
 800a6b2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800a6b6:	801a      	strh	r2, [r3, #0]
 800a6b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a6c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	785b      	ldrb	r3, [r3, #1]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	f040 8085 	bne.w	800a7e2 <USB_EPStartXfer+0x1688>
 800a6d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a6e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a6f4:	b29b      	uxth	r3, r3
 800a6f6:	461a      	mov	r2, r3
 800a6f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a6fc:	4413      	add	r3, r2
 800a6fe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a702:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a706:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	781b      	ldrb	r3, [r3, #0]
 800a70e:	00da      	lsls	r2, r3, #3
 800a710:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a714:	4413      	add	r3, r2
 800a716:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a71a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a71e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a722:	881b      	ldrh	r3, [r3, #0]
 800a724:	b29b      	uxth	r3, r3
 800a726:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a72a:	b29a      	uxth	r2, r3
 800a72c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a730:	801a      	strh	r2, [r3, #0]
 800a732:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a736:	2b3e      	cmp	r3, #62	@ 0x3e
 800a738:	d923      	bls.n	800a782 <USB_EPStartXfer+0x1628>
 800a73a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a73e:	095b      	lsrs	r3, r3, #5
 800a740:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a744:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a748:	f003 031f 	and.w	r3, r3, #31
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d104      	bne.n	800a75a <USB_EPStartXfer+0x1600>
 800a750:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a754:	3b01      	subs	r3, #1
 800a756:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a75a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a75e:	881b      	ldrh	r3, [r3, #0]
 800a760:	b29a      	uxth	r2, r3
 800a762:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a766:	b29b      	uxth	r3, r3
 800a768:	029b      	lsls	r3, r3, #10
 800a76a:	b29b      	uxth	r3, r3
 800a76c:	4313      	orrs	r3, r2
 800a76e:	b29b      	uxth	r3, r3
 800a770:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a774:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a778:	b29a      	uxth	r2, r3
 800a77a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a77e:	801a      	strh	r2, [r3, #0]
 800a780:	e05c      	b.n	800a83c <USB_EPStartXfer+0x16e2>
 800a782:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a786:	2b00      	cmp	r3, #0
 800a788:	d10c      	bne.n	800a7a4 <USB_EPStartXfer+0x164a>
 800a78a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a78e:	881b      	ldrh	r3, [r3, #0]
 800a790:	b29b      	uxth	r3, r3
 800a792:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a796:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a79a:	b29a      	uxth	r2, r3
 800a79c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a7a0:	801a      	strh	r2, [r3, #0]
 800a7a2:	e04b      	b.n	800a83c <USB_EPStartXfer+0x16e2>
 800a7a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7a8:	085b      	lsrs	r3, r3, #1
 800a7aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a7ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7b2:	f003 0301 	and.w	r3, r3, #1
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d004      	beq.n	800a7c4 <USB_EPStartXfer+0x166a>
 800a7ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a7be:	3301      	adds	r3, #1
 800a7c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a7c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a7c8:	881b      	ldrh	r3, [r3, #0]
 800a7ca:	b29a      	uxth	r2, r3
 800a7cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a7d0:	b29b      	uxth	r3, r3
 800a7d2:	029b      	lsls	r3, r3, #10
 800a7d4:	b29b      	uxth	r3, r3
 800a7d6:	4313      	orrs	r3, r2
 800a7d8:	b29a      	uxth	r2, r3
 800a7da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a7de:	801a      	strh	r2, [r3, #0]
 800a7e0:	e02c      	b.n	800a83c <USB_EPStartXfer+0x16e2>
 800a7e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	785b      	ldrb	r3, [r3, #1]
 800a7ee:	2b01      	cmp	r3, #1
 800a7f0:	d124      	bne.n	800a83c <USB_EPStartXfer+0x16e2>
 800a7f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a800:	b29b      	uxth	r3, r3
 800a802:	461a      	mov	r2, r3
 800a804:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800a808:	4413      	add	r3, r2
 800a80a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a80e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a812:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	781b      	ldrb	r3, [r3, #0]
 800a81a:	00da      	lsls	r2, r3, #3
 800a81c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800a820:	4413      	add	r3, r2
 800a822:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a826:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a82a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a82e:	b29a      	uxth	r2, r3
 800a830:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a834:	801a      	strh	r2, [r3, #0]
 800a836:	e001      	b.n	800a83c <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800a838:	2301      	movs	r3, #1
 800a83a:	e03a      	b.n	800a8b2 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a83c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a840:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a844:	681a      	ldr	r2, [r3, #0]
 800a846:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a84a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	781b      	ldrb	r3, [r3, #0]
 800a852:	009b      	lsls	r3, r3, #2
 800a854:	4413      	add	r3, r2
 800a856:	881b      	ldrh	r3, [r3, #0]
 800a858:	b29b      	uxth	r3, r3
 800a85a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a85e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a862:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a866:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a86a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a86e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a872:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a876:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a87a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a87e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a882:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a886:	681a      	ldr	r2, [r3, #0]
 800a888:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a88c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	781b      	ldrb	r3, [r3, #0]
 800a894:	009b      	lsls	r3, r3, #2
 800a896:	441a      	add	r2, r3
 800a898:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a89c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a8a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a8a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a8a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a8ac:	b29b      	uxth	r3, r3
 800a8ae:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a8b0:	2300      	movs	r3, #0
}
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	bd80      	pop	{r7, pc}

0800a8bc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b085      	sub	sp, #20
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
 800a8c4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	785b      	ldrb	r3, [r3, #1]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d020      	beq.n	800a910 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a8ce:	687a      	ldr	r2, [r7, #4]
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	781b      	ldrb	r3, [r3, #0]
 800a8d4:	009b      	lsls	r3, r3, #2
 800a8d6:	4413      	add	r3, r2
 800a8d8:	881b      	ldrh	r3, [r3, #0]
 800a8da:	b29b      	uxth	r3, r3
 800a8dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a8e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a8e4:	81bb      	strh	r3, [r7, #12]
 800a8e6:	89bb      	ldrh	r3, [r7, #12]
 800a8e8:	f083 0310 	eor.w	r3, r3, #16
 800a8ec:	81bb      	strh	r3, [r7, #12]
 800a8ee:	687a      	ldr	r2, [r7, #4]
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	781b      	ldrb	r3, [r3, #0]
 800a8f4:	009b      	lsls	r3, r3, #2
 800a8f6:	441a      	add	r2, r3
 800a8f8:	89bb      	ldrh	r3, [r7, #12]
 800a8fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a8fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a902:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a906:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a90a:	b29b      	uxth	r3, r3
 800a90c:	8013      	strh	r3, [r2, #0]
 800a90e:	e01f      	b.n	800a950 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a910:	687a      	ldr	r2, [r7, #4]
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	781b      	ldrb	r3, [r3, #0]
 800a916:	009b      	lsls	r3, r3, #2
 800a918:	4413      	add	r3, r2
 800a91a:	881b      	ldrh	r3, [r3, #0]
 800a91c:	b29b      	uxth	r3, r3
 800a91e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a922:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a926:	81fb      	strh	r3, [r7, #14]
 800a928:	89fb      	ldrh	r3, [r7, #14]
 800a92a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a92e:	81fb      	strh	r3, [r7, #14]
 800a930:	687a      	ldr	r2, [r7, #4]
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	781b      	ldrb	r3, [r3, #0]
 800a936:	009b      	lsls	r3, r3, #2
 800a938:	441a      	add	r2, r3
 800a93a:	89fb      	ldrh	r3, [r7, #14]
 800a93c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a940:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a944:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a948:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a94c:	b29b      	uxth	r3, r3
 800a94e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a950:	2300      	movs	r3, #0
}
 800a952:	4618      	mov	r0, r3
 800a954:	3714      	adds	r7, #20
 800a956:	46bd      	mov	sp, r7
 800a958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95c:	4770      	bx	lr

0800a95e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a95e:	b480      	push	{r7}
 800a960:	b087      	sub	sp, #28
 800a962:	af00      	add	r7, sp, #0
 800a964:	6078      	str	r0, [r7, #4]
 800a966:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	7b1b      	ldrb	r3, [r3, #12]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	f040 809d 	bne.w	800aaac <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	785b      	ldrb	r3, [r3, #1]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d04c      	beq.n	800aa14 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a97a:	687a      	ldr	r2, [r7, #4]
 800a97c:	683b      	ldr	r3, [r7, #0]
 800a97e:	781b      	ldrb	r3, [r3, #0]
 800a980:	009b      	lsls	r3, r3, #2
 800a982:	4413      	add	r3, r2
 800a984:	881b      	ldrh	r3, [r3, #0]
 800a986:	823b      	strh	r3, [r7, #16]
 800a988:	8a3b      	ldrh	r3, [r7, #16]
 800a98a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d01b      	beq.n	800a9ca <USB_EPClearStall+0x6c>
 800a992:	687a      	ldr	r2, [r7, #4]
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	781b      	ldrb	r3, [r3, #0]
 800a998:	009b      	lsls	r3, r3, #2
 800a99a:	4413      	add	r3, r2
 800a99c:	881b      	ldrh	r3, [r3, #0]
 800a99e:	b29b      	uxth	r3, r3
 800a9a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a9a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a9a8:	81fb      	strh	r3, [r7, #14]
 800a9aa:	687a      	ldr	r2, [r7, #4]
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	781b      	ldrb	r3, [r3, #0]
 800a9b0:	009b      	lsls	r3, r3, #2
 800a9b2:	441a      	add	r2, r3
 800a9b4:	89fb      	ldrh	r3, [r7, #14]
 800a9b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a9ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a9be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a9c2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a9c6:	b29b      	uxth	r3, r3
 800a9c8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	78db      	ldrb	r3, [r3, #3]
 800a9ce:	2b01      	cmp	r3, #1
 800a9d0:	d06c      	beq.n	800aaac <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a9d2:	687a      	ldr	r2, [r7, #4]
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	781b      	ldrb	r3, [r3, #0]
 800a9d8:	009b      	lsls	r3, r3, #2
 800a9da:	4413      	add	r3, r2
 800a9dc:	881b      	ldrh	r3, [r3, #0]
 800a9de:	b29b      	uxth	r3, r3
 800a9e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a9e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a9e8:	81bb      	strh	r3, [r7, #12]
 800a9ea:	89bb      	ldrh	r3, [r7, #12]
 800a9ec:	f083 0320 	eor.w	r3, r3, #32
 800a9f0:	81bb      	strh	r3, [r7, #12]
 800a9f2:	687a      	ldr	r2, [r7, #4]
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	781b      	ldrb	r3, [r3, #0]
 800a9f8:	009b      	lsls	r3, r3, #2
 800a9fa:	441a      	add	r2, r3
 800a9fc:	89bb      	ldrh	r3, [r7, #12]
 800a9fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aa02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aa06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aa0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa0e:	b29b      	uxth	r3, r3
 800aa10:	8013      	strh	r3, [r2, #0]
 800aa12:	e04b      	b.n	800aaac <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800aa14:	687a      	ldr	r2, [r7, #4]
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	781b      	ldrb	r3, [r3, #0]
 800aa1a:	009b      	lsls	r3, r3, #2
 800aa1c:	4413      	add	r3, r2
 800aa1e:	881b      	ldrh	r3, [r3, #0]
 800aa20:	82fb      	strh	r3, [r7, #22]
 800aa22:	8afb      	ldrh	r3, [r7, #22]
 800aa24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d01b      	beq.n	800aa64 <USB_EPClearStall+0x106>
 800aa2c:	687a      	ldr	r2, [r7, #4]
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	781b      	ldrb	r3, [r3, #0]
 800aa32:	009b      	lsls	r3, r3, #2
 800aa34:	4413      	add	r3, r2
 800aa36:	881b      	ldrh	r3, [r3, #0]
 800aa38:	b29b      	uxth	r3, r3
 800aa3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aa3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa42:	82bb      	strh	r3, [r7, #20]
 800aa44:	687a      	ldr	r2, [r7, #4]
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	781b      	ldrb	r3, [r3, #0]
 800aa4a:	009b      	lsls	r3, r3, #2
 800aa4c:	441a      	add	r2, r3
 800aa4e:	8abb      	ldrh	r3, [r7, #20]
 800aa50:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aa54:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aa58:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800aa5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa60:	b29b      	uxth	r3, r3
 800aa62:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800aa64:	687a      	ldr	r2, [r7, #4]
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	781b      	ldrb	r3, [r3, #0]
 800aa6a:	009b      	lsls	r3, r3, #2
 800aa6c:	4413      	add	r3, r2
 800aa6e:	881b      	ldrh	r3, [r3, #0]
 800aa70:	b29b      	uxth	r3, r3
 800aa72:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800aa76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa7a:	827b      	strh	r3, [r7, #18]
 800aa7c:	8a7b      	ldrh	r3, [r7, #18]
 800aa7e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800aa82:	827b      	strh	r3, [r7, #18]
 800aa84:	8a7b      	ldrh	r3, [r7, #18]
 800aa86:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800aa8a:	827b      	strh	r3, [r7, #18]
 800aa8c:	687a      	ldr	r2, [r7, #4]
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	781b      	ldrb	r3, [r3, #0]
 800aa92:	009b      	lsls	r3, r3, #2
 800aa94:	441a      	add	r2, r3
 800aa96:	8a7b      	ldrh	r3, [r7, #18]
 800aa98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aa9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aaa0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aaa4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aaa8:	b29b      	uxth	r3, r3
 800aaaa:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800aaac:	2300      	movs	r3, #0
}
 800aaae:	4618      	mov	r0, r3
 800aab0:	371c      	adds	r7, #28
 800aab2:	46bd      	mov	sp, r7
 800aab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab8:	4770      	bx	lr

0800aaba <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800aaba:	b480      	push	{r7}
 800aabc:	b083      	sub	sp, #12
 800aabe:	af00      	add	r7, sp, #0
 800aac0:	6078      	str	r0, [r7, #4]
 800aac2:	460b      	mov	r3, r1
 800aac4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800aac6:	78fb      	ldrb	r3, [r7, #3]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d103      	bne.n	800aad4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2280      	movs	r2, #128	@ 0x80
 800aad0:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800aad4:	2300      	movs	r3, #0
}
 800aad6:	4618      	mov	r0, r3
 800aad8:	370c      	adds	r7, #12
 800aada:	46bd      	mov	sp, r7
 800aadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae0:	4770      	bx	lr

0800aae2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800aae2:	b480      	push	{r7}
 800aae4:	b083      	sub	sp, #12
 800aae6:	af00      	add	r7, sp, #0
 800aae8:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800aaf0:	b29b      	uxth	r3, r3
 800aaf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aaf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aafa:	b29a      	uxth	r2, r3
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800ab02:	2300      	movs	r3, #0
}
 800ab04:	4618      	mov	r0, r3
 800ab06:	370c      	adds	r7, #12
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0e:	4770      	bx	lr

0800ab10 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800ab10:	b480      	push	{r7}
 800ab12:	b085      	sub	sp, #20
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800ab1e:	b29b      	uxth	r3, r3
 800ab20:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800ab22:	68fb      	ldr	r3, [r7, #12]
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	3714      	adds	r7, #20
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2e:	4770      	bx	lr

0800ab30 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ab30:	b480      	push	{r7}
 800ab32:	b08b      	sub	sp, #44	@ 0x2c
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	60f8      	str	r0, [r7, #12]
 800ab38:	60b9      	str	r1, [r7, #8]
 800ab3a:	4611      	mov	r1, r2
 800ab3c:	461a      	mov	r2, r3
 800ab3e:	460b      	mov	r3, r1
 800ab40:	80fb      	strh	r3, [r7, #6]
 800ab42:	4613      	mov	r3, r2
 800ab44:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800ab46:	88bb      	ldrh	r3, [r7, #4]
 800ab48:	3301      	adds	r3, #1
 800ab4a:	085b      	lsrs	r3, r3, #1
 800ab4c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ab56:	88fa      	ldrh	r2, [r7, #6]
 800ab58:	697b      	ldr	r3, [r7, #20]
 800ab5a:	4413      	add	r3, r2
 800ab5c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ab60:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ab62:	69bb      	ldr	r3, [r7, #24]
 800ab64:	627b      	str	r3, [r7, #36]	@ 0x24
 800ab66:	e01b      	b.n	800aba0 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800ab68:	69fb      	ldr	r3, [r7, #28]
 800ab6a:	781b      	ldrb	r3, [r3, #0]
 800ab6c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800ab6e:	69fb      	ldr	r3, [r7, #28]
 800ab70:	3301      	adds	r3, #1
 800ab72:	781b      	ldrb	r3, [r3, #0]
 800ab74:	021b      	lsls	r3, r3, #8
 800ab76:	b21a      	sxth	r2, r3
 800ab78:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ab7c:	4313      	orrs	r3, r2
 800ab7e:	b21b      	sxth	r3, r3
 800ab80:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800ab82:	6a3b      	ldr	r3, [r7, #32]
 800ab84:	8a7a      	ldrh	r2, [r7, #18]
 800ab86:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800ab88:	6a3b      	ldr	r3, [r7, #32]
 800ab8a:	3302      	adds	r3, #2
 800ab8c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800ab8e:	69fb      	ldr	r3, [r7, #28]
 800ab90:	3301      	adds	r3, #1
 800ab92:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800ab94:	69fb      	ldr	r3, [r7, #28]
 800ab96:	3301      	adds	r3, #1
 800ab98:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800ab9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab9c:	3b01      	subs	r3, #1
 800ab9e:	627b      	str	r3, [r7, #36]	@ 0x24
 800aba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d1e0      	bne.n	800ab68 <USB_WritePMA+0x38>
  }
}
 800aba6:	bf00      	nop
 800aba8:	bf00      	nop
 800abaa:	372c      	adds	r7, #44	@ 0x2c
 800abac:	46bd      	mov	sp, r7
 800abae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb2:	4770      	bx	lr

0800abb4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800abb4:	b480      	push	{r7}
 800abb6:	b08b      	sub	sp, #44	@ 0x2c
 800abb8:	af00      	add	r7, sp, #0
 800abba:	60f8      	str	r0, [r7, #12]
 800abbc:	60b9      	str	r1, [r7, #8]
 800abbe:	4611      	mov	r1, r2
 800abc0:	461a      	mov	r2, r3
 800abc2:	460b      	mov	r3, r1
 800abc4:	80fb      	strh	r3, [r7, #6]
 800abc6:	4613      	mov	r3, r2
 800abc8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800abca:	88bb      	ldrh	r3, [r7, #4]
 800abcc:	085b      	lsrs	r3, r3, #1
 800abce:	b29b      	uxth	r3, r3
 800abd0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800abd6:	68bb      	ldr	r3, [r7, #8]
 800abd8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800abda:	88fa      	ldrh	r2, [r7, #6]
 800abdc:	697b      	ldr	r3, [r7, #20]
 800abde:	4413      	add	r3, r2
 800abe0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800abe4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800abe6:	69bb      	ldr	r3, [r7, #24]
 800abe8:	627b      	str	r3, [r7, #36]	@ 0x24
 800abea:	e018      	b.n	800ac1e <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800abec:	6a3b      	ldr	r3, [r7, #32]
 800abee:	881b      	ldrh	r3, [r3, #0]
 800abf0:	b29b      	uxth	r3, r3
 800abf2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800abf4:	6a3b      	ldr	r3, [r7, #32]
 800abf6:	3302      	adds	r3, #2
 800abf8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800abfa:	693b      	ldr	r3, [r7, #16]
 800abfc:	b2da      	uxtb	r2, r3
 800abfe:	69fb      	ldr	r3, [r7, #28]
 800ac00:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ac02:	69fb      	ldr	r3, [r7, #28]
 800ac04:	3301      	adds	r3, #1
 800ac06:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800ac08:	693b      	ldr	r3, [r7, #16]
 800ac0a:	0a1b      	lsrs	r3, r3, #8
 800ac0c:	b2da      	uxtb	r2, r3
 800ac0e:	69fb      	ldr	r3, [r7, #28]
 800ac10:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ac12:	69fb      	ldr	r3, [r7, #28]
 800ac14:	3301      	adds	r3, #1
 800ac16:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800ac18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac1a:	3b01      	subs	r3, #1
 800ac1c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ac1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d1e3      	bne.n	800abec <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800ac24:	88bb      	ldrh	r3, [r7, #4]
 800ac26:	f003 0301 	and.w	r3, r3, #1
 800ac2a:	b29b      	uxth	r3, r3
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d007      	beq.n	800ac40 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800ac30:	6a3b      	ldr	r3, [r7, #32]
 800ac32:	881b      	ldrh	r3, [r3, #0]
 800ac34:	b29b      	uxth	r3, r3
 800ac36:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ac38:	693b      	ldr	r3, [r7, #16]
 800ac3a:	b2da      	uxtb	r2, r3
 800ac3c:	69fb      	ldr	r3, [r7, #28]
 800ac3e:	701a      	strb	r2, [r3, #0]
  }
}
 800ac40:	bf00      	nop
 800ac42:	372c      	adds	r7, #44	@ 0x2c
 800ac44:	46bd      	mov	sp, r7
 800ac46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4a:	4770      	bx	lr

0800ac4c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b084      	sub	sp, #16
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
 800ac54:	460b      	mov	r3, r1
 800ac56:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ac58:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800ac5c:	f002 f8fa 	bl	800ce54 <USBD_static_malloc>
 800ac60:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d105      	bne.n	800ac74 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800ac70:	2302      	movs	r3, #2
 800ac72:	e066      	b.n	800ad42 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	68fa      	ldr	r2, [r7, #12]
 800ac78:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	7c1b      	ldrb	r3, [r3, #16]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d119      	bne.n	800acb8 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ac84:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ac88:	2202      	movs	r2, #2
 800ac8a:	2181      	movs	r1, #129	@ 0x81
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	f001 ff88 	bl	800cba2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	2201      	movs	r2, #1
 800ac96:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ac98:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ac9c:	2202      	movs	r2, #2
 800ac9e:	2101      	movs	r1, #1
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	f001 ff7e 	bl	800cba2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2201      	movs	r2, #1
 800acaa:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2210      	movs	r2, #16
 800acb2:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800acb6:	e016      	b.n	800ace6 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800acb8:	2340      	movs	r3, #64	@ 0x40
 800acba:	2202      	movs	r2, #2
 800acbc:	2181      	movs	r1, #129	@ 0x81
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	f001 ff6f 	bl	800cba2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2201      	movs	r2, #1
 800acc8:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800acca:	2340      	movs	r3, #64	@ 0x40
 800accc:	2202      	movs	r2, #2
 800acce:	2101      	movs	r1, #1
 800acd0:	6878      	ldr	r0, [r7, #4]
 800acd2:	f001 ff66 	bl	800cba2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	2201      	movs	r2, #1
 800acda:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	2210      	movs	r2, #16
 800ace2:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ace6:	2308      	movs	r3, #8
 800ace8:	2203      	movs	r2, #3
 800acea:	2182      	movs	r1, #130	@ 0x82
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	f001 ff58 	bl	800cba2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2201      	movs	r2, #1
 800acf6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	2200      	movs	r2, #0
 800ad08:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	2200      	movs	r2, #0
 800ad10:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	7c1b      	ldrb	r3, [r3, #16]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d109      	bne.n	800ad30 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ad22:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ad26:	2101      	movs	r1, #1
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	f002 f829 	bl	800cd80 <USBD_LL_PrepareReceive>
 800ad2e:	e007      	b.n	800ad40 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ad36:	2340      	movs	r3, #64	@ 0x40
 800ad38:	2101      	movs	r1, #1
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f002 f820 	bl	800cd80 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ad40:	2300      	movs	r3, #0
}
 800ad42:	4618      	mov	r0, r3
 800ad44:	3710      	adds	r7, #16
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd80      	pop	{r7, pc}

0800ad4a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ad4a:	b580      	push	{r7, lr}
 800ad4c:	b082      	sub	sp, #8
 800ad4e:	af00      	add	r7, sp, #0
 800ad50:	6078      	str	r0, [r7, #4]
 800ad52:	460b      	mov	r3, r1
 800ad54:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800ad56:	2181      	movs	r1, #129	@ 0x81
 800ad58:	6878      	ldr	r0, [r7, #4]
 800ad5a:	f001 ff48 	bl	800cbee <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	2200      	movs	r2, #0
 800ad62:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800ad64:	2101      	movs	r1, #1
 800ad66:	6878      	ldr	r0, [r7, #4]
 800ad68:	f001 ff41 	bl	800cbee <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2200      	movs	r2, #0
 800ad70:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800ad74:	2182      	movs	r1, #130	@ 0x82
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f001 ff39 	bl	800cbee <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2200      	movs	r2, #0
 800ad80:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2200      	movs	r2, #0
 800ad88:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d00e      	beq.n	800adb4 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ad9c:	685b      	ldr	r3, [r3, #4]
 800ad9e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ada6:	4618      	mov	r0, r3
 800ada8:	f002 f862 	bl	800ce70 <USBD_static_free>
    pdev->pClassData = NULL;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2200      	movs	r2, #0
 800adb0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800adb4:	2300      	movs	r3, #0
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	3708      	adds	r7, #8
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}
	...

0800adc0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b086      	sub	sp, #24
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
 800adc8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800add0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800add2:	2300      	movs	r3, #0
 800add4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800add6:	2300      	movs	r3, #0
 800add8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800adda:	2300      	movs	r3, #0
 800addc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800adde:	693b      	ldr	r3, [r7, #16]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d101      	bne.n	800ade8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800ade4:	2303      	movs	r3, #3
 800ade6:	e0af      	b.n	800af48 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	781b      	ldrb	r3, [r3, #0]
 800adec:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d03f      	beq.n	800ae74 <USBD_CDC_Setup+0xb4>
 800adf4:	2b20      	cmp	r3, #32
 800adf6:	f040 809f 	bne.w	800af38 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	88db      	ldrh	r3, [r3, #6]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d02e      	beq.n	800ae60 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	781b      	ldrb	r3, [r3, #0]
 800ae06:	b25b      	sxtb	r3, r3
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	da16      	bge.n	800ae3a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ae12:	689b      	ldr	r3, [r3, #8]
 800ae14:	683a      	ldr	r2, [r7, #0]
 800ae16:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800ae18:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ae1a:	683a      	ldr	r2, [r7, #0]
 800ae1c:	88d2      	ldrh	r2, [r2, #6]
 800ae1e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	88db      	ldrh	r3, [r3, #6]
 800ae24:	2b07      	cmp	r3, #7
 800ae26:	bf28      	it	cs
 800ae28:	2307      	movcs	r3, #7
 800ae2a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ae2c:	693b      	ldr	r3, [r7, #16]
 800ae2e:	89fa      	ldrh	r2, [r7, #14]
 800ae30:	4619      	mov	r1, r3
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f001 facd 	bl	800c3d2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800ae38:	e085      	b.n	800af46 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	785a      	ldrb	r2, [r3, #1]
 800ae3e:	693b      	ldr	r3, [r7, #16]
 800ae40:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	88db      	ldrh	r3, [r3, #6]
 800ae48:	b2da      	uxtb	r2, r3
 800ae4a:	693b      	ldr	r3, [r7, #16]
 800ae4c:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800ae50:	6939      	ldr	r1, [r7, #16]
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	88db      	ldrh	r3, [r3, #6]
 800ae56:	461a      	mov	r2, r3
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	f001 fae6 	bl	800c42a <USBD_CtlPrepareRx>
      break;
 800ae5e:	e072      	b.n	800af46 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ae66:	689b      	ldr	r3, [r3, #8]
 800ae68:	683a      	ldr	r2, [r7, #0]
 800ae6a:	7850      	ldrb	r0, [r2, #1]
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	6839      	ldr	r1, [r7, #0]
 800ae70:	4798      	blx	r3
      break;
 800ae72:	e068      	b.n	800af46 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	785b      	ldrb	r3, [r3, #1]
 800ae78:	2b0b      	cmp	r3, #11
 800ae7a:	d852      	bhi.n	800af22 <USBD_CDC_Setup+0x162>
 800ae7c:	a201      	add	r2, pc, #4	@ (adr r2, 800ae84 <USBD_CDC_Setup+0xc4>)
 800ae7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae82:	bf00      	nop
 800ae84:	0800aeb5 	.word	0x0800aeb5
 800ae88:	0800af31 	.word	0x0800af31
 800ae8c:	0800af23 	.word	0x0800af23
 800ae90:	0800af23 	.word	0x0800af23
 800ae94:	0800af23 	.word	0x0800af23
 800ae98:	0800af23 	.word	0x0800af23
 800ae9c:	0800af23 	.word	0x0800af23
 800aea0:	0800af23 	.word	0x0800af23
 800aea4:	0800af23 	.word	0x0800af23
 800aea8:	0800af23 	.word	0x0800af23
 800aeac:	0800aedf 	.word	0x0800aedf
 800aeb0:	0800af09 	.word	0x0800af09
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aeba:	b2db      	uxtb	r3, r3
 800aebc:	2b03      	cmp	r3, #3
 800aebe:	d107      	bne.n	800aed0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800aec0:	f107 030a 	add.w	r3, r7, #10
 800aec4:	2202      	movs	r2, #2
 800aec6:	4619      	mov	r1, r3
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f001 fa82 	bl	800c3d2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aece:	e032      	b.n	800af36 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800aed0:	6839      	ldr	r1, [r7, #0]
 800aed2:	6878      	ldr	r0, [r7, #4]
 800aed4:	f001 fa0c 	bl	800c2f0 <USBD_CtlError>
            ret = USBD_FAIL;
 800aed8:	2303      	movs	r3, #3
 800aeda:	75fb      	strb	r3, [r7, #23]
          break;
 800aedc:	e02b      	b.n	800af36 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aee4:	b2db      	uxtb	r3, r3
 800aee6:	2b03      	cmp	r3, #3
 800aee8:	d107      	bne.n	800aefa <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800aeea:	f107 030d 	add.w	r3, r7, #13
 800aeee:	2201      	movs	r2, #1
 800aef0:	4619      	mov	r1, r3
 800aef2:	6878      	ldr	r0, [r7, #4]
 800aef4:	f001 fa6d 	bl	800c3d2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aef8:	e01d      	b.n	800af36 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800aefa:	6839      	ldr	r1, [r7, #0]
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	f001 f9f7 	bl	800c2f0 <USBD_CtlError>
            ret = USBD_FAIL;
 800af02:	2303      	movs	r3, #3
 800af04:	75fb      	strb	r3, [r7, #23]
          break;
 800af06:	e016      	b.n	800af36 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af0e:	b2db      	uxtb	r3, r3
 800af10:	2b03      	cmp	r3, #3
 800af12:	d00f      	beq.n	800af34 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800af14:	6839      	ldr	r1, [r7, #0]
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	f001 f9ea 	bl	800c2f0 <USBD_CtlError>
            ret = USBD_FAIL;
 800af1c:	2303      	movs	r3, #3
 800af1e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800af20:	e008      	b.n	800af34 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800af22:	6839      	ldr	r1, [r7, #0]
 800af24:	6878      	ldr	r0, [r7, #4]
 800af26:	f001 f9e3 	bl	800c2f0 <USBD_CtlError>
          ret = USBD_FAIL;
 800af2a:	2303      	movs	r3, #3
 800af2c:	75fb      	strb	r3, [r7, #23]
          break;
 800af2e:	e002      	b.n	800af36 <USBD_CDC_Setup+0x176>
          break;
 800af30:	bf00      	nop
 800af32:	e008      	b.n	800af46 <USBD_CDC_Setup+0x186>
          break;
 800af34:	bf00      	nop
      }
      break;
 800af36:	e006      	b.n	800af46 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800af38:	6839      	ldr	r1, [r7, #0]
 800af3a:	6878      	ldr	r0, [r7, #4]
 800af3c:	f001 f9d8 	bl	800c2f0 <USBD_CtlError>
      ret = USBD_FAIL;
 800af40:	2303      	movs	r3, #3
 800af42:	75fb      	strb	r3, [r7, #23]
      break;
 800af44:	bf00      	nop
  }

  return (uint8_t)ret;
 800af46:	7dfb      	ldrb	r3, [r7, #23]
}
 800af48:	4618      	mov	r0, r3
 800af4a:	3718      	adds	r7, #24
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}

0800af50 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b084      	sub	sp, #16
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
 800af58:	460b      	mov	r3, r1
 800af5a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800af62:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d101      	bne.n	800af72 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800af6e:	2303      	movs	r3, #3
 800af70:	e04f      	b.n	800b012 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800af78:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800af7a:	78fa      	ldrb	r2, [r7, #3]
 800af7c:	6879      	ldr	r1, [r7, #4]
 800af7e:	4613      	mov	r3, r2
 800af80:	009b      	lsls	r3, r3, #2
 800af82:	4413      	add	r3, r2
 800af84:	009b      	lsls	r3, r3, #2
 800af86:	440b      	add	r3, r1
 800af88:	3318      	adds	r3, #24
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d029      	beq.n	800afe4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800af90:	78fa      	ldrb	r2, [r7, #3]
 800af92:	6879      	ldr	r1, [r7, #4]
 800af94:	4613      	mov	r3, r2
 800af96:	009b      	lsls	r3, r3, #2
 800af98:	4413      	add	r3, r2
 800af9a:	009b      	lsls	r3, r3, #2
 800af9c:	440b      	add	r3, r1
 800af9e:	3318      	adds	r3, #24
 800afa0:	681a      	ldr	r2, [r3, #0]
 800afa2:	78f9      	ldrb	r1, [r7, #3]
 800afa4:	68f8      	ldr	r0, [r7, #12]
 800afa6:	460b      	mov	r3, r1
 800afa8:	009b      	lsls	r3, r3, #2
 800afaa:	440b      	add	r3, r1
 800afac:	00db      	lsls	r3, r3, #3
 800afae:	4403      	add	r3, r0
 800afb0:	3320      	adds	r3, #32
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	fbb2 f1f3 	udiv	r1, r2, r3
 800afb8:	fb01 f303 	mul.w	r3, r1, r3
 800afbc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d110      	bne.n	800afe4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800afc2:	78fa      	ldrb	r2, [r7, #3]
 800afc4:	6879      	ldr	r1, [r7, #4]
 800afc6:	4613      	mov	r3, r2
 800afc8:	009b      	lsls	r3, r3, #2
 800afca:	4413      	add	r3, r2
 800afcc:	009b      	lsls	r3, r3, #2
 800afce:	440b      	add	r3, r1
 800afd0:	3318      	adds	r3, #24
 800afd2:	2200      	movs	r2, #0
 800afd4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800afd6:	78f9      	ldrb	r1, [r7, #3]
 800afd8:	2300      	movs	r3, #0
 800afda:	2200      	movs	r2, #0
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f001 feae 	bl	800cd3e <USBD_LL_Transmit>
 800afe2:	e015      	b.n	800b010 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800afe4:	68bb      	ldr	r3, [r7, #8]
 800afe6:	2200      	movs	r2, #0
 800afe8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800aff2:	691b      	ldr	r3, [r3, #16]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d00b      	beq.n	800b010 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800affe:	691b      	ldr	r3, [r3, #16]
 800b000:	68ba      	ldr	r2, [r7, #8]
 800b002:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b006:	68ba      	ldr	r2, [r7, #8]
 800b008:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b00c:	78fa      	ldrb	r2, [r7, #3]
 800b00e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b010:	2300      	movs	r3, #0
}
 800b012:	4618      	mov	r0, r3
 800b014:	3710      	adds	r7, #16
 800b016:	46bd      	mov	sp, r7
 800b018:	bd80      	pop	{r7, pc}

0800b01a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b01a:	b580      	push	{r7, lr}
 800b01c:	b084      	sub	sp, #16
 800b01e:	af00      	add	r7, sp, #0
 800b020:	6078      	str	r0, [r7, #4]
 800b022:	460b      	mov	r3, r1
 800b024:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b02c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b034:	2b00      	cmp	r3, #0
 800b036:	d101      	bne.n	800b03c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b038:	2303      	movs	r3, #3
 800b03a:	e015      	b.n	800b068 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b03c:	78fb      	ldrb	r3, [r7, #3]
 800b03e:	4619      	mov	r1, r3
 800b040:	6878      	ldr	r0, [r7, #4]
 800b042:	f001 febe 	bl	800cdc2 <USBD_LL_GetRxDataSize>
 800b046:	4602      	mov	r2, r0
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b054:	68db      	ldr	r3, [r3, #12]
 800b056:	68fa      	ldr	r2, [r7, #12]
 800b058:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b05c:	68fa      	ldr	r2, [r7, #12]
 800b05e:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b062:	4611      	mov	r1, r2
 800b064:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b066:	2300      	movs	r3, #0
}
 800b068:	4618      	mov	r0, r3
 800b06a:	3710      	adds	r7, #16
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bd80      	pop	{r7, pc}

0800b070 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b084      	sub	sp, #16
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b07e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d101      	bne.n	800b08a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800b086:	2303      	movs	r3, #3
 800b088:	e01a      	b.n	800b0c0 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b090:	2b00      	cmp	r3, #0
 800b092:	d014      	beq.n	800b0be <USBD_CDC_EP0_RxReady+0x4e>
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b09a:	2bff      	cmp	r3, #255	@ 0xff
 800b09c:	d00f      	beq.n	800b0be <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b0a4:	689b      	ldr	r3, [r3, #8]
 800b0a6:	68fa      	ldr	r2, [r7, #12]
 800b0a8:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800b0ac:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b0ae:	68fa      	ldr	r2, [r7, #12]
 800b0b0:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b0b4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	22ff      	movs	r2, #255	@ 0xff
 800b0ba:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b0be:	2300      	movs	r3, #0
}
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	3710      	adds	r7, #16
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	bd80      	pop	{r7, pc}

0800b0c8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b0c8:	b480      	push	{r7}
 800b0ca:	b083      	sub	sp, #12
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2243      	movs	r2, #67	@ 0x43
 800b0d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800b0d6:	4b03      	ldr	r3, [pc, #12]	@ (800b0e4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b0d8:	4618      	mov	r0, r3
 800b0da:	370c      	adds	r7, #12
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e2:	4770      	bx	lr
 800b0e4:	20000094 	.word	0x20000094

0800b0e8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b0e8:	b480      	push	{r7}
 800b0ea:	b083      	sub	sp, #12
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2243      	movs	r2, #67	@ 0x43
 800b0f4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800b0f6:	4b03      	ldr	r3, [pc, #12]	@ (800b104 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	370c      	adds	r7, #12
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b102:	4770      	bx	lr
 800b104:	20000050 	.word	0x20000050

0800b108 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b108:	b480      	push	{r7}
 800b10a:	b083      	sub	sp, #12
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2243      	movs	r2, #67	@ 0x43
 800b114:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800b116:	4b03      	ldr	r3, [pc, #12]	@ (800b124 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b118:	4618      	mov	r0, r3
 800b11a:	370c      	adds	r7, #12
 800b11c:	46bd      	mov	sp, r7
 800b11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b122:	4770      	bx	lr
 800b124:	200000d8 	.word	0x200000d8

0800b128 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b128:	b480      	push	{r7}
 800b12a:	b083      	sub	sp, #12
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	220a      	movs	r2, #10
 800b134:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b136:	4b03      	ldr	r3, [pc, #12]	@ (800b144 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b138:	4618      	mov	r0, r3
 800b13a:	370c      	adds	r7, #12
 800b13c:	46bd      	mov	sp, r7
 800b13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b142:	4770      	bx	lr
 800b144:	2000000c 	.word	0x2000000c

0800b148 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b148:	b480      	push	{r7}
 800b14a:	b083      	sub	sp, #12
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
 800b150:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d101      	bne.n	800b15c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b158:	2303      	movs	r3, #3
 800b15a:	e004      	b.n	800b166 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	683a      	ldr	r2, [r7, #0]
 800b160:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800b164:	2300      	movs	r3, #0
}
 800b166:	4618      	mov	r0, r3
 800b168:	370c      	adds	r7, #12
 800b16a:	46bd      	mov	sp, r7
 800b16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b170:	4770      	bx	lr

0800b172 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b172:	b480      	push	{r7}
 800b174:	b087      	sub	sp, #28
 800b176:	af00      	add	r7, sp, #0
 800b178:	60f8      	str	r0, [r7, #12]
 800b17a:	60b9      	str	r1, [r7, #8]
 800b17c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b184:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800b186:	697b      	ldr	r3, [r7, #20]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d101      	bne.n	800b190 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b18c:	2303      	movs	r3, #3
 800b18e:	e008      	b.n	800b1a2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800b190:	697b      	ldr	r3, [r7, #20]
 800b192:	68ba      	ldr	r2, [r7, #8]
 800b194:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b198:	697b      	ldr	r3, [r7, #20]
 800b19a:	687a      	ldr	r2, [r7, #4]
 800b19c:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b1a0:	2300      	movs	r3, #0
}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	371c      	adds	r7, #28
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ac:	4770      	bx	lr

0800b1ae <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b1ae:	b480      	push	{r7}
 800b1b0:	b085      	sub	sp, #20
 800b1b2:	af00      	add	r7, sp, #0
 800b1b4:	6078      	str	r0, [r7, #4]
 800b1b6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b1be:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d101      	bne.n	800b1ca <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800b1c6:	2303      	movs	r3, #3
 800b1c8:	e004      	b.n	800b1d4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	683a      	ldr	r2, [r7, #0]
 800b1ce:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b1d2:	2300      	movs	r3, #0
}
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	3714      	adds	r7, #20
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1de:	4770      	bx	lr

0800b1e0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b084      	sub	sp, #16
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b1ee:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800b1f0:	2301      	movs	r3, #1
 800b1f2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d101      	bne.n	800b202 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b1fe:	2303      	movs	r3, #3
 800b200:	e01a      	b.n	800b238 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800b202:	68bb      	ldr	r3, [r7, #8]
 800b204:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d114      	bne.n	800b236 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	2201      	movs	r2, #1
 800b210:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b214:	68bb      	ldr	r3, [r7, #8]
 800b216:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800b21e:	68bb      	ldr	r3, [r7, #8]
 800b220:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800b224:	68bb      	ldr	r3, [r7, #8]
 800b226:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800b22a:	2181      	movs	r1, #129	@ 0x81
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	f001 fd86 	bl	800cd3e <USBD_LL_Transmit>

    ret = USBD_OK;
 800b232:	2300      	movs	r3, #0
 800b234:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b236:	7bfb      	ldrb	r3, [r7, #15]
}
 800b238:	4618      	mov	r0, r3
 800b23a:	3710      	adds	r7, #16
 800b23c:	46bd      	mov	sp, r7
 800b23e:	bd80      	pop	{r7, pc}

0800b240 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b084      	sub	sp, #16
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b24e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b256:	2b00      	cmp	r3, #0
 800b258:	d101      	bne.n	800b25e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b25a:	2303      	movs	r3, #3
 800b25c:	e016      	b.n	800b28c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	7c1b      	ldrb	r3, [r3, #16]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d109      	bne.n	800b27a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b26c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b270:	2101      	movs	r1, #1
 800b272:	6878      	ldr	r0, [r7, #4]
 800b274:	f001 fd84 	bl	800cd80 <USBD_LL_PrepareReceive>
 800b278:	e007      	b.n	800b28a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b280:	2340      	movs	r3, #64	@ 0x40
 800b282:	2101      	movs	r1, #1
 800b284:	6878      	ldr	r0, [r7, #4]
 800b286:	f001 fd7b 	bl	800cd80 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b28a:	2300      	movs	r3, #0
}
 800b28c:	4618      	mov	r0, r3
 800b28e:	3710      	adds	r7, #16
 800b290:	46bd      	mov	sp, r7
 800b292:	bd80      	pop	{r7, pc}

0800b294 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b086      	sub	sp, #24
 800b298:	af00      	add	r7, sp, #0
 800b29a:	60f8      	str	r0, [r7, #12]
 800b29c:	60b9      	str	r1, [r7, #8]
 800b29e:	4613      	mov	r3, r2
 800b2a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d101      	bne.n	800b2ac <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b2a8:	2303      	movs	r3, #3
 800b2aa:	e01f      	b.n	800b2ec <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	2200      	movs	r2, #0
 800b2c0:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b2c4:	68bb      	ldr	r3, [r7, #8]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d003      	beq.n	800b2d2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	68ba      	ldr	r2, [r7, #8]
 800b2ce:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	2201      	movs	r2, #1
 800b2d6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	79fa      	ldrb	r2, [r7, #7]
 800b2de:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b2e0:	68f8      	ldr	r0, [r7, #12]
 800b2e2:	f001 fbe3 	bl	800caac <USBD_LL_Init>
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b2ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	3718      	adds	r7, #24
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	bd80      	pop	{r7, pc}

0800b2f4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b084      	sub	sp, #16
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
 800b2fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b2fe:	2300      	movs	r3, #0
 800b300:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b302:	683b      	ldr	r3, [r7, #0]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d101      	bne.n	800b30c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800b308:	2303      	movs	r3, #3
 800b30a:	e016      	b.n	800b33a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	683a      	ldr	r2, [r7, #0]
 800b310:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b31a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d00b      	beq.n	800b338 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b328:	f107 020e 	add.w	r2, r7, #14
 800b32c:	4610      	mov	r0, r2
 800b32e:	4798      	blx	r3
 800b330:	4602      	mov	r2, r0
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800b338:	2300      	movs	r3, #0
}
 800b33a:	4618      	mov	r0, r3
 800b33c:	3710      	adds	r7, #16
 800b33e:	46bd      	mov	sp, r7
 800b340:	bd80      	pop	{r7, pc}

0800b342 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b342:	b580      	push	{r7, lr}
 800b344:	b082      	sub	sp, #8
 800b346:	af00      	add	r7, sp, #0
 800b348:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b34a:	6878      	ldr	r0, [r7, #4]
 800b34c:	f001 fc0e 	bl	800cb6c <USBD_LL_Start>
 800b350:	4603      	mov	r3, r0
}
 800b352:	4618      	mov	r0, r3
 800b354:	3708      	adds	r7, #8
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}

0800b35a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b35a:	b480      	push	{r7}
 800b35c:	b083      	sub	sp, #12
 800b35e:	af00      	add	r7, sp, #0
 800b360:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b362:	2300      	movs	r3, #0
}
 800b364:	4618      	mov	r0, r3
 800b366:	370c      	adds	r7, #12
 800b368:	46bd      	mov	sp, r7
 800b36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36e:	4770      	bx	lr

0800b370 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b084      	sub	sp, #16
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
 800b378:	460b      	mov	r3, r1
 800b37a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b37c:	2303      	movs	r3, #3
 800b37e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b386:	2b00      	cmp	r3, #0
 800b388:	d009      	beq.n	800b39e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	78fa      	ldrb	r2, [r7, #3]
 800b394:	4611      	mov	r1, r2
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	4798      	blx	r3
 800b39a:	4603      	mov	r3, r0
 800b39c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b39e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	3710      	adds	r7, #16
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	bd80      	pop	{r7, pc}

0800b3a8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b082      	sub	sp, #8
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
 800b3b0:	460b      	mov	r3, r1
 800b3b2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d007      	beq.n	800b3ce <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3c4:	685b      	ldr	r3, [r3, #4]
 800b3c6:	78fa      	ldrb	r2, [r7, #3]
 800b3c8:	4611      	mov	r1, r2
 800b3ca:	6878      	ldr	r0, [r7, #4]
 800b3cc:	4798      	blx	r3
  }

  return USBD_OK;
 800b3ce:	2300      	movs	r3, #0
}
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	3708      	adds	r7, #8
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	bd80      	pop	{r7, pc}

0800b3d8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b084      	sub	sp, #16
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
 800b3e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b3e8:	6839      	ldr	r1, [r7, #0]
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	f000 ff46 	bl	800c27c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	2201      	movs	r2, #1
 800b3f4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b3fe:	461a      	mov	r2, r3
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b40c:	f003 031f 	and.w	r3, r3, #31
 800b410:	2b02      	cmp	r3, #2
 800b412:	d01a      	beq.n	800b44a <USBD_LL_SetupStage+0x72>
 800b414:	2b02      	cmp	r3, #2
 800b416:	d822      	bhi.n	800b45e <USBD_LL_SetupStage+0x86>
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d002      	beq.n	800b422 <USBD_LL_SetupStage+0x4a>
 800b41c:	2b01      	cmp	r3, #1
 800b41e:	d00a      	beq.n	800b436 <USBD_LL_SetupStage+0x5e>
 800b420:	e01d      	b.n	800b45e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b428:	4619      	mov	r1, r3
 800b42a:	6878      	ldr	r0, [r7, #4]
 800b42c:	f000 f9ee 	bl	800b80c <USBD_StdDevReq>
 800b430:	4603      	mov	r3, r0
 800b432:	73fb      	strb	r3, [r7, #15]
      break;
 800b434:	e020      	b.n	800b478 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b43c:	4619      	mov	r1, r3
 800b43e:	6878      	ldr	r0, [r7, #4]
 800b440:	f000 fa52 	bl	800b8e8 <USBD_StdItfReq>
 800b444:	4603      	mov	r3, r0
 800b446:	73fb      	strb	r3, [r7, #15]
      break;
 800b448:	e016      	b.n	800b478 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b450:	4619      	mov	r1, r3
 800b452:	6878      	ldr	r0, [r7, #4]
 800b454:	f000 fa91 	bl	800b97a <USBD_StdEPReq>
 800b458:	4603      	mov	r3, r0
 800b45a:	73fb      	strb	r3, [r7, #15]
      break;
 800b45c:	e00c      	b.n	800b478 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b464:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b468:	b2db      	uxtb	r3, r3
 800b46a:	4619      	mov	r1, r3
 800b46c:	6878      	ldr	r0, [r7, #4]
 800b46e:	f001 fbdd 	bl	800cc2c <USBD_LL_StallEP>
 800b472:	4603      	mov	r3, r0
 800b474:	73fb      	strb	r3, [r7, #15]
      break;
 800b476:	bf00      	nop
  }

  return ret;
 800b478:	7bfb      	ldrb	r3, [r7, #15]
}
 800b47a:	4618      	mov	r0, r3
 800b47c:	3710      	adds	r7, #16
 800b47e:	46bd      	mov	sp, r7
 800b480:	bd80      	pop	{r7, pc}

0800b482 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b482:	b580      	push	{r7, lr}
 800b484:	b086      	sub	sp, #24
 800b486:	af00      	add	r7, sp, #0
 800b488:	60f8      	str	r0, [r7, #12]
 800b48a:	460b      	mov	r3, r1
 800b48c:	607a      	str	r2, [r7, #4]
 800b48e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b490:	7afb      	ldrb	r3, [r7, #11]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d138      	bne.n	800b508 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b49c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b4a4:	2b03      	cmp	r3, #3
 800b4a6:	d14a      	bne.n	800b53e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800b4a8:	693b      	ldr	r3, [r7, #16]
 800b4aa:	689a      	ldr	r2, [r3, #8]
 800b4ac:	693b      	ldr	r3, [r7, #16]
 800b4ae:	68db      	ldr	r3, [r3, #12]
 800b4b0:	429a      	cmp	r2, r3
 800b4b2:	d913      	bls.n	800b4dc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b4b4:	693b      	ldr	r3, [r7, #16]
 800b4b6:	689a      	ldr	r2, [r3, #8]
 800b4b8:	693b      	ldr	r3, [r7, #16]
 800b4ba:	68db      	ldr	r3, [r3, #12]
 800b4bc:	1ad2      	subs	r2, r2, r3
 800b4be:	693b      	ldr	r3, [r7, #16]
 800b4c0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b4c2:	693b      	ldr	r3, [r7, #16]
 800b4c4:	68da      	ldr	r2, [r3, #12]
 800b4c6:	693b      	ldr	r3, [r7, #16]
 800b4c8:	689b      	ldr	r3, [r3, #8]
 800b4ca:	4293      	cmp	r3, r2
 800b4cc:	bf28      	it	cs
 800b4ce:	4613      	movcs	r3, r2
 800b4d0:	461a      	mov	r2, r3
 800b4d2:	6879      	ldr	r1, [r7, #4]
 800b4d4:	68f8      	ldr	r0, [r7, #12]
 800b4d6:	f000 ffc5 	bl	800c464 <USBD_CtlContinueRx>
 800b4da:	e030      	b.n	800b53e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b4e2:	b2db      	uxtb	r3, r3
 800b4e4:	2b03      	cmp	r3, #3
 800b4e6:	d10b      	bne.n	800b500 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4ee:	691b      	ldr	r3, [r3, #16]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d005      	beq.n	800b500 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4fa:	691b      	ldr	r3, [r3, #16]
 800b4fc:	68f8      	ldr	r0, [r7, #12]
 800b4fe:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b500:	68f8      	ldr	r0, [r7, #12]
 800b502:	f000 ffc0 	bl	800c486 <USBD_CtlSendStatus>
 800b506:	e01a      	b.n	800b53e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b50e:	b2db      	uxtb	r3, r3
 800b510:	2b03      	cmp	r3, #3
 800b512:	d114      	bne.n	800b53e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b51a:	699b      	ldr	r3, [r3, #24]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d00e      	beq.n	800b53e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b526:	699b      	ldr	r3, [r3, #24]
 800b528:	7afa      	ldrb	r2, [r7, #11]
 800b52a:	4611      	mov	r1, r2
 800b52c:	68f8      	ldr	r0, [r7, #12]
 800b52e:	4798      	blx	r3
 800b530:	4603      	mov	r3, r0
 800b532:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b534:	7dfb      	ldrb	r3, [r7, #23]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d001      	beq.n	800b53e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800b53a:	7dfb      	ldrb	r3, [r7, #23]
 800b53c:	e000      	b.n	800b540 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800b53e:	2300      	movs	r3, #0
}
 800b540:	4618      	mov	r0, r3
 800b542:	3718      	adds	r7, #24
 800b544:	46bd      	mov	sp, r7
 800b546:	bd80      	pop	{r7, pc}

0800b548 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b086      	sub	sp, #24
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	60f8      	str	r0, [r7, #12]
 800b550:	460b      	mov	r3, r1
 800b552:	607a      	str	r2, [r7, #4]
 800b554:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b556:	7afb      	ldrb	r3, [r7, #11]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d16b      	bne.n	800b634 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	3314      	adds	r3, #20
 800b560:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b568:	2b02      	cmp	r3, #2
 800b56a:	d156      	bne.n	800b61a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800b56c:	693b      	ldr	r3, [r7, #16]
 800b56e:	689a      	ldr	r2, [r3, #8]
 800b570:	693b      	ldr	r3, [r7, #16]
 800b572:	68db      	ldr	r3, [r3, #12]
 800b574:	429a      	cmp	r2, r3
 800b576:	d914      	bls.n	800b5a2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b578:	693b      	ldr	r3, [r7, #16]
 800b57a:	689a      	ldr	r2, [r3, #8]
 800b57c:	693b      	ldr	r3, [r7, #16]
 800b57e:	68db      	ldr	r3, [r3, #12]
 800b580:	1ad2      	subs	r2, r2, r3
 800b582:	693b      	ldr	r3, [r7, #16]
 800b584:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b586:	693b      	ldr	r3, [r7, #16]
 800b588:	689b      	ldr	r3, [r3, #8]
 800b58a:	461a      	mov	r2, r3
 800b58c:	6879      	ldr	r1, [r7, #4]
 800b58e:	68f8      	ldr	r0, [r7, #12]
 800b590:	f000 ff3a 	bl	800c408 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b594:	2300      	movs	r3, #0
 800b596:	2200      	movs	r2, #0
 800b598:	2100      	movs	r1, #0
 800b59a:	68f8      	ldr	r0, [r7, #12]
 800b59c:	f001 fbf0 	bl	800cd80 <USBD_LL_PrepareReceive>
 800b5a0:	e03b      	b.n	800b61a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b5a2:	693b      	ldr	r3, [r7, #16]
 800b5a4:	68da      	ldr	r2, [r3, #12]
 800b5a6:	693b      	ldr	r3, [r7, #16]
 800b5a8:	689b      	ldr	r3, [r3, #8]
 800b5aa:	429a      	cmp	r2, r3
 800b5ac:	d11c      	bne.n	800b5e8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b5ae:	693b      	ldr	r3, [r7, #16]
 800b5b0:	685a      	ldr	r2, [r3, #4]
 800b5b2:	693b      	ldr	r3, [r7, #16]
 800b5b4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b5b6:	429a      	cmp	r2, r3
 800b5b8:	d316      	bcc.n	800b5e8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b5ba:	693b      	ldr	r3, [r7, #16]
 800b5bc:	685a      	ldr	r2, [r3, #4]
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b5c4:	429a      	cmp	r2, r3
 800b5c6:	d20f      	bcs.n	800b5e8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	2100      	movs	r1, #0
 800b5cc:	68f8      	ldr	r0, [r7, #12]
 800b5ce:	f000 ff1b 	bl	800c408 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b5da:	2300      	movs	r3, #0
 800b5dc:	2200      	movs	r2, #0
 800b5de:	2100      	movs	r1, #0
 800b5e0:	68f8      	ldr	r0, [r7, #12]
 800b5e2:	f001 fbcd 	bl	800cd80 <USBD_LL_PrepareReceive>
 800b5e6:	e018      	b.n	800b61a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b5ee:	b2db      	uxtb	r3, r3
 800b5f0:	2b03      	cmp	r3, #3
 800b5f2:	d10b      	bne.n	800b60c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5fa:	68db      	ldr	r3, [r3, #12]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d005      	beq.n	800b60c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b606:	68db      	ldr	r3, [r3, #12]
 800b608:	68f8      	ldr	r0, [r7, #12]
 800b60a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b60c:	2180      	movs	r1, #128	@ 0x80
 800b60e:	68f8      	ldr	r0, [r7, #12]
 800b610:	f001 fb0c 	bl	800cc2c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b614:	68f8      	ldr	r0, [r7, #12]
 800b616:	f000 ff49 	bl	800c4ac <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b620:	2b01      	cmp	r3, #1
 800b622:	d122      	bne.n	800b66a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800b624:	68f8      	ldr	r0, [r7, #12]
 800b626:	f7ff fe98 	bl	800b35a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	2200      	movs	r2, #0
 800b62e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b632:	e01a      	b.n	800b66a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b63a:	b2db      	uxtb	r3, r3
 800b63c:	2b03      	cmp	r3, #3
 800b63e:	d114      	bne.n	800b66a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b646:	695b      	ldr	r3, [r3, #20]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d00e      	beq.n	800b66a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b652:	695b      	ldr	r3, [r3, #20]
 800b654:	7afa      	ldrb	r2, [r7, #11]
 800b656:	4611      	mov	r1, r2
 800b658:	68f8      	ldr	r0, [r7, #12]
 800b65a:	4798      	blx	r3
 800b65c:	4603      	mov	r3, r0
 800b65e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b660:	7dfb      	ldrb	r3, [r7, #23]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d001      	beq.n	800b66a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800b666:	7dfb      	ldrb	r3, [r7, #23]
 800b668:	e000      	b.n	800b66c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800b66a:	2300      	movs	r3, #0
}
 800b66c:	4618      	mov	r0, r3
 800b66e:	3718      	adds	r7, #24
 800b670:	46bd      	mov	sp, r7
 800b672:	bd80      	pop	{r7, pc}

0800b674 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b082      	sub	sp, #8
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2201      	movs	r2, #1
 800b680:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2200      	movs	r2, #0
 800b688:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2200      	movs	r2, #0
 800b690:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2200      	movs	r2, #0
 800b696:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d101      	bne.n	800b6a8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800b6a4:	2303      	movs	r3, #3
 800b6a6:	e02f      	b.n	800b708 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d00f      	beq.n	800b6d2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b6b8:	685b      	ldr	r3, [r3, #4]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d009      	beq.n	800b6d2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b6c4:	685b      	ldr	r3, [r3, #4]
 800b6c6:	687a      	ldr	r2, [r7, #4]
 800b6c8:	6852      	ldr	r2, [r2, #4]
 800b6ca:	b2d2      	uxtb	r2, r2
 800b6cc:	4611      	mov	r1, r2
 800b6ce:	6878      	ldr	r0, [r7, #4]
 800b6d0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b6d2:	2340      	movs	r3, #64	@ 0x40
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	2100      	movs	r1, #0
 800b6d8:	6878      	ldr	r0, [r7, #4]
 800b6da:	f001 fa62 	bl	800cba2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	2201      	movs	r2, #1
 800b6e2:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2240      	movs	r2, #64	@ 0x40
 800b6ea:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b6ee:	2340      	movs	r3, #64	@ 0x40
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	2180      	movs	r1, #128	@ 0x80
 800b6f4:	6878      	ldr	r0, [r7, #4]
 800b6f6:	f001 fa54 	bl	800cba2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2201      	movs	r2, #1
 800b6fe:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	2240      	movs	r2, #64	@ 0x40
 800b704:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800b706:	2300      	movs	r3, #0
}
 800b708:	4618      	mov	r0, r3
 800b70a:	3708      	adds	r7, #8
 800b70c:	46bd      	mov	sp, r7
 800b70e:	bd80      	pop	{r7, pc}

0800b710 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b710:	b480      	push	{r7}
 800b712:	b083      	sub	sp, #12
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
 800b718:	460b      	mov	r3, r1
 800b71a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	78fa      	ldrb	r2, [r7, #3]
 800b720:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b722:	2300      	movs	r3, #0
}
 800b724:	4618      	mov	r0, r3
 800b726:	370c      	adds	r7, #12
 800b728:	46bd      	mov	sp, r7
 800b72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72e:	4770      	bx	lr

0800b730 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b730:	b480      	push	{r7}
 800b732:	b083      	sub	sp, #12
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b73e:	b2da      	uxtb	r2, r3
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2204      	movs	r2, #4
 800b74a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b74e:	2300      	movs	r3, #0
}
 800b750:	4618      	mov	r0, r3
 800b752:	370c      	adds	r7, #12
 800b754:	46bd      	mov	sp, r7
 800b756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75a:	4770      	bx	lr

0800b75c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b75c:	b480      	push	{r7}
 800b75e:	b083      	sub	sp, #12
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b76a:	b2db      	uxtb	r3, r3
 800b76c:	2b04      	cmp	r3, #4
 800b76e:	d106      	bne.n	800b77e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800b776:	b2da      	uxtb	r2, r3
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b77e:	2300      	movs	r3, #0
}
 800b780:	4618      	mov	r0, r3
 800b782:	370c      	adds	r7, #12
 800b784:	46bd      	mov	sp, r7
 800b786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78a:	4770      	bx	lr

0800b78c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b082      	sub	sp, #8
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d101      	bne.n	800b7a2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800b79e:	2303      	movs	r3, #3
 800b7a0:	e012      	b.n	800b7c8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b7a8:	b2db      	uxtb	r3, r3
 800b7aa:	2b03      	cmp	r3, #3
 800b7ac:	d10b      	bne.n	800b7c6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b7b4:	69db      	ldr	r3, [r3, #28]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d005      	beq.n	800b7c6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b7c0:	69db      	ldr	r3, [r3, #28]
 800b7c2:	6878      	ldr	r0, [r7, #4]
 800b7c4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b7c6:	2300      	movs	r3, #0
}
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	3708      	adds	r7, #8
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bd80      	pop	{r7, pc}

0800b7d0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b7d0:	b480      	push	{r7}
 800b7d2:	b087      	sub	sp, #28
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b7dc:	697b      	ldr	r3, [r7, #20]
 800b7de:	781b      	ldrb	r3, [r3, #0]
 800b7e0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b7e2:	697b      	ldr	r3, [r7, #20]
 800b7e4:	3301      	adds	r3, #1
 800b7e6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b7e8:	697b      	ldr	r3, [r7, #20]
 800b7ea:	781b      	ldrb	r3, [r3, #0]
 800b7ec:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b7ee:	8a3b      	ldrh	r3, [r7, #16]
 800b7f0:	021b      	lsls	r3, r3, #8
 800b7f2:	b21a      	sxth	r2, r3
 800b7f4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b7f8:	4313      	orrs	r3, r2
 800b7fa:	b21b      	sxth	r3, r3
 800b7fc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b7fe:	89fb      	ldrh	r3, [r7, #14]
}
 800b800:	4618      	mov	r0, r3
 800b802:	371c      	adds	r7, #28
 800b804:	46bd      	mov	sp, r7
 800b806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80a:	4770      	bx	lr

0800b80c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b084      	sub	sp, #16
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
 800b814:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b816:	2300      	movs	r3, #0
 800b818:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	781b      	ldrb	r3, [r3, #0]
 800b81e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b822:	2b40      	cmp	r3, #64	@ 0x40
 800b824:	d005      	beq.n	800b832 <USBD_StdDevReq+0x26>
 800b826:	2b40      	cmp	r3, #64	@ 0x40
 800b828:	d853      	bhi.n	800b8d2 <USBD_StdDevReq+0xc6>
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d00b      	beq.n	800b846 <USBD_StdDevReq+0x3a>
 800b82e:	2b20      	cmp	r3, #32
 800b830:	d14f      	bne.n	800b8d2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b838:	689b      	ldr	r3, [r3, #8]
 800b83a:	6839      	ldr	r1, [r7, #0]
 800b83c:	6878      	ldr	r0, [r7, #4]
 800b83e:	4798      	blx	r3
 800b840:	4603      	mov	r3, r0
 800b842:	73fb      	strb	r3, [r7, #15]
      break;
 800b844:	e04a      	b.n	800b8dc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	785b      	ldrb	r3, [r3, #1]
 800b84a:	2b09      	cmp	r3, #9
 800b84c:	d83b      	bhi.n	800b8c6 <USBD_StdDevReq+0xba>
 800b84e:	a201      	add	r2, pc, #4	@ (adr r2, 800b854 <USBD_StdDevReq+0x48>)
 800b850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b854:	0800b8a9 	.word	0x0800b8a9
 800b858:	0800b8bd 	.word	0x0800b8bd
 800b85c:	0800b8c7 	.word	0x0800b8c7
 800b860:	0800b8b3 	.word	0x0800b8b3
 800b864:	0800b8c7 	.word	0x0800b8c7
 800b868:	0800b887 	.word	0x0800b887
 800b86c:	0800b87d 	.word	0x0800b87d
 800b870:	0800b8c7 	.word	0x0800b8c7
 800b874:	0800b89f 	.word	0x0800b89f
 800b878:	0800b891 	.word	0x0800b891
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b87c:	6839      	ldr	r1, [r7, #0]
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	f000 f9de 	bl	800bc40 <USBD_GetDescriptor>
          break;
 800b884:	e024      	b.n	800b8d0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b886:	6839      	ldr	r1, [r7, #0]
 800b888:	6878      	ldr	r0, [r7, #4]
 800b88a:	f000 fb6d 	bl	800bf68 <USBD_SetAddress>
          break;
 800b88e:	e01f      	b.n	800b8d0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b890:	6839      	ldr	r1, [r7, #0]
 800b892:	6878      	ldr	r0, [r7, #4]
 800b894:	f000 fbac 	bl	800bff0 <USBD_SetConfig>
 800b898:	4603      	mov	r3, r0
 800b89a:	73fb      	strb	r3, [r7, #15]
          break;
 800b89c:	e018      	b.n	800b8d0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b89e:	6839      	ldr	r1, [r7, #0]
 800b8a0:	6878      	ldr	r0, [r7, #4]
 800b8a2:	f000 fc4b 	bl	800c13c <USBD_GetConfig>
          break;
 800b8a6:	e013      	b.n	800b8d0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b8a8:	6839      	ldr	r1, [r7, #0]
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f000 fc7c 	bl	800c1a8 <USBD_GetStatus>
          break;
 800b8b0:	e00e      	b.n	800b8d0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b8b2:	6839      	ldr	r1, [r7, #0]
 800b8b4:	6878      	ldr	r0, [r7, #4]
 800b8b6:	f000 fcab 	bl	800c210 <USBD_SetFeature>
          break;
 800b8ba:	e009      	b.n	800b8d0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b8bc:	6839      	ldr	r1, [r7, #0]
 800b8be:	6878      	ldr	r0, [r7, #4]
 800b8c0:	f000 fcba 	bl	800c238 <USBD_ClrFeature>
          break;
 800b8c4:	e004      	b.n	800b8d0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800b8c6:	6839      	ldr	r1, [r7, #0]
 800b8c8:	6878      	ldr	r0, [r7, #4]
 800b8ca:	f000 fd11 	bl	800c2f0 <USBD_CtlError>
          break;
 800b8ce:	bf00      	nop
      }
      break;
 800b8d0:	e004      	b.n	800b8dc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800b8d2:	6839      	ldr	r1, [r7, #0]
 800b8d4:	6878      	ldr	r0, [r7, #4]
 800b8d6:	f000 fd0b 	bl	800c2f0 <USBD_CtlError>
      break;
 800b8da:	bf00      	nop
  }

  return ret;
 800b8dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8de:	4618      	mov	r0, r3
 800b8e0:	3710      	adds	r7, #16
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	bd80      	pop	{r7, pc}
 800b8e6:	bf00      	nop

0800b8e8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b084      	sub	sp, #16
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
 800b8f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b8f6:	683b      	ldr	r3, [r7, #0]
 800b8f8:	781b      	ldrb	r3, [r3, #0]
 800b8fa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b8fe:	2b40      	cmp	r3, #64	@ 0x40
 800b900:	d005      	beq.n	800b90e <USBD_StdItfReq+0x26>
 800b902:	2b40      	cmp	r3, #64	@ 0x40
 800b904:	d82f      	bhi.n	800b966 <USBD_StdItfReq+0x7e>
 800b906:	2b00      	cmp	r3, #0
 800b908:	d001      	beq.n	800b90e <USBD_StdItfReq+0x26>
 800b90a:	2b20      	cmp	r3, #32
 800b90c:	d12b      	bne.n	800b966 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b914:	b2db      	uxtb	r3, r3
 800b916:	3b01      	subs	r3, #1
 800b918:	2b02      	cmp	r3, #2
 800b91a:	d81d      	bhi.n	800b958 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b91c:	683b      	ldr	r3, [r7, #0]
 800b91e:	889b      	ldrh	r3, [r3, #4]
 800b920:	b2db      	uxtb	r3, r3
 800b922:	2b01      	cmp	r3, #1
 800b924:	d813      	bhi.n	800b94e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b92c:	689b      	ldr	r3, [r3, #8]
 800b92e:	6839      	ldr	r1, [r7, #0]
 800b930:	6878      	ldr	r0, [r7, #4]
 800b932:	4798      	blx	r3
 800b934:	4603      	mov	r3, r0
 800b936:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	88db      	ldrh	r3, [r3, #6]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d110      	bne.n	800b962 <USBD_StdItfReq+0x7a>
 800b940:	7bfb      	ldrb	r3, [r7, #15]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d10d      	bne.n	800b962 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b946:	6878      	ldr	r0, [r7, #4]
 800b948:	f000 fd9d 	bl	800c486 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b94c:	e009      	b.n	800b962 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800b94e:	6839      	ldr	r1, [r7, #0]
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	f000 fccd 	bl	800c2f0 <USBD_CtlError>
          break;
 800b956:	e004      	b.n	800b962 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800b958:	6839      	ldr	r1, [r7, #0]
 800b95a:	6878      	ldr	r0, [r7, #4]
 800b95c:	f000 fcc8 	bl	800c2f0 <USBD_CtlError>
          break;
 800b960:	e000      	b.n	800b964 <USBD_StdItfReq+0x7c>
          break;
 800b962:	bf00      	nop
      }
      break;
 800b964:	e004      	b.n	800b970 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800b966:	6839      	ldr	r1, [r7, #0]
 800b968:	6878      	ldr	r0, [r7, #4]
 800b96a:	f000 fcc1 	bl	800c2f0 <USBD_CtlError>
      break;
 800b96e:	bf00      	nop
  }

  return ret;
 800b970:	7bfb      	ldrb	r3, [r7, #15]
}
 800b972:	4618      	mov	r0, r3
 800b974:	3710      	adds	r7, #16
 800b976:	46bd      	mov	sp, r7
 800b978:	bd80      	pop	{r7, pc}

0800b97a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b97a:	b580      	push	{r7, lr}
 800b97c:	b084      	sub	sp, #16
 800b97e:	af00      	add	r7, sp, #0
 800b980:	6078      	str	r0, [r7, #4]
 800b982:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b984:	2300      	movs	r3, #0
 800b986:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	889b      	ldrh	r3, [r3, #4]
 800b98c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b98e:	683b      	ldr	r3, [r7, #0]
 800b990:	781b      	ldrb	r3, [r3, #0]
 800b992:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b996:	2b40      	cmp	r3, #64	@ 0x40
 800b998:	d007      	beq.n	800b9aa <USBD_StdEPReq+0x30>
 800b99a:	2b40      	cmp	r3, #64	@ 0x40
 800b99c:	f200 8145 	bhi.w	800bc2a <USBD_StdEPReq+0x2b0>
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d00c      	beq.n	800b9be <USBD_StdEPReq+0x44>
 800b9a4:	2b20      	cmp	r3, #32
 800b9a6:	f040 8140 	bne.w	800bc2a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b9b0:	689b      	ldr	r3, [r3, #8]
 800b9b2:	6839      	ldr	r1, [r7, #0]
 800b9b4:	6878      	ldr	r0, [r7, #4]
 800b9b6:	4798      	blx	r3
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	73fb      	strb	r3, [r7, #15]
      break;
 800b9bc:	e13a      	b.n	800bc34 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	785b      	ldrb	r3, [r3, #1]
 800b9c2:	2b03      	cmp	r3, #3
 800b9c4:	d007      	beq.n	800b9d6 <USBD_StdEPReq+0x5c>
 800b9c6:	2b03      	cmp	r3, #3
 800b9c8:	f300 8129 	bgt.w	800bc1e <USBD_StdEPReq+0x2a4>
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d07f      	beq.n	800bad0 <USBD_StdEPReq+0x156>
 800b9d0:	2b01      	cmp	r3, #1
 800b9d2:	d03c      	beq.n	800ba4e <USBD_StdEPReq+0xd4>
 800b9d4:	e123      	b.n	800bc1e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b9dc:	b2db      	uxtb	r3, r3
 800b9de:	2b02      	cmp	r3, #2
 800b9e0:	d002      	beq.n	800b9e8 <USBD_StdEPReq+0x6e>
 800b9e2:	2b03      	cmp	r3, #3
 800b9e4:	d016      	beq.n	800ba14 <USBD_StdEPReq+0x9a>
 800b9e6:	e02c      	b.n	800ba42 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b9e8:	7bbb      	ldrb	r3, [r7, #14]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d00d      	beq.n	800ba0a <USBD_StdEPReq+0x90>
 800b9ee:	7bbb      	ldrb	r3, [r7, #14]
 800b9f0:	2b80      	cmp	r3, #128	@ 0x80
 800b9f2:	d00a      	beq.n	800ba0a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b9f4:	7bbb      	ldrb	r3, [r7, #14]
 800b9f6:	4619      	mov	r1, r3
 800b9f8:	6878      	ldr	r0, [r7, #4]
 800b9fa:	f001 f917 	bl	800cc2c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b9fe:	2180      	movs	r1, #128	@ 0x80
 800ba00:	6878      	ldr	r0, [r7, #4]
 800ba02:	f001 f913 	bl	800cc2c <USBD_LL_StallEP>
 800ba06:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ba08:	e020      	b.n	800ba4c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800ba0a:	6839      	ldr	r1, [r7, #0]
 800ba0c:	6878      	ldr	r0, [r7, #4]
 800ba0e:	f000 fc6f 	bl	800c2f0 <USBD_CtlError>
              break;
 800ba12:	e01b      	b.n	800ba4c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ba14:	683b      	ldr	r3, [r7, #0]
 800ba16:	885b      	ldrh	r3, [r3, #2]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d10e      	bne.n	800ba3a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ba1c:	7bbb      	ldrb	r3, [r7, #14]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d00b      	beq.n	800ba3a <USBD_StdEPReq+0xc0>
 800ba22:	7bbb      	ldrb	r3, [r7, #14]
 800ba24:	2b80      	cmp	r3, #128	@ 0x80
 800ba26:	d008      	beq.n	800ba3a <USBD_StdEPReq+0xc0>
 800ba28:	683b      	ldr	r3, [r7, #0]
 800ba2a:	88db      	ldrh	r3, [r3, #6]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d104      	bne.n	800ba3a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ba30:	7bbb      	ldrb	r3, [r7, #14]
 800ba32:	4619      	mov	r1, r3
 800ba34:	6878      	ldr	r0, [r7, #4]
 800ba36:	f001 f8f9 	bl	800cc2c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ba3a:	6878      	ldr	r0, [r7, #4]
 800ba3c:	f000 fd23 	bl	800c486 <USBD_CtlSendStatus>

              break;
 800ba40:	e004      	b.n	800ba4c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800ba42:	6839      	ldr	r1, [r7, #0]
 800ba44:	6878      	ldr	r0, [r7, #4]
 800ba46:	f000 fc53 	bl	800c2f0 <USBD_CtlError>
              break;
 800ba4a:	bf00      	nop
          }
          break;
 800ba4c:	e0ec      	b.n	800bc28 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba54:	b2db      	uxtb	r3, r3
 800ba56:	2b02      	cmp	r3, #2
 800ba58:	d002      	beq.n	800ba60 <USBD_StdEPReq+0xe6>
 800ba5a:	2b03      	cmp	r3, #3
 800ba5c:	d016      	beq.n	800ba8c <USBD_StdEPReq+0x112>
 800ba5e:	e030      	b.n	800bac2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ba60:	7bbb      	ldrb	r3, [r7, #14]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d00d      	beq.n	800ba82 <USBD_StdEPReq+0x108>
 800ba66:	7bbb      	ldrb	r3, [r7, #14]
 800ba68:	2b80      	cmp	r3, #128	@ 0x80
 800ba6a:	d00a      	beq.n	800ba82 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ba6c:	7bbb      	ldrb	r3, [r7, #14]
 800ba6e:	4619      	mov	r1, r3
 800ba70:	6878      	ldr	r0, [r7, #4]
 800ba72:	f001 f8db 	bl	800cc2c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ba76:	2180      	movs	r1, #128	@ 0x80
 800ba78:	6878      	ldr	r0, [r7, #4]
 800ba7a:	f001 f8d7 	bl	800cc2c <USBD_LL_StallEP>
 800ba7e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ba80:	e025      	b.n	800bace <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800ba82:	6839      	ldr	r1, [r7, #0]
 800ba84:	6878      	ldr	r0, [r7, #4]
 800ba86:	f000 fc33 	bl	800c2f0 <USBD_CtlError>
              break;
 800ba8a:	e020      	b.n	800bace <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ba8c:	683b      	ldr	r3, [r7, #0]
 800ba8e:	885b      	ldrh	r3, [r3, #2]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d11b      	bne.n	800bacc <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ba94:	7bbb      	ldrb	r3, [r7, #14]
 800ba96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d004      	beq.n	800baa8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ba9e:	7bbb      	ldrb	r3, [r7, #14]
 800baa0:	4619      	mov	r1, r3
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	f001 f8e1 	bl	800cc6a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800baa8:	6878      	ldr	r0, [r7, #4]
 800baaa:	f000 fcec 	bl	800c486 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bab4:	689b      	ldr	r3, [r3, #8]
 800bab6:	6839      	ldr	r1, [r7, #0]
 800bab8:	6878      	ldr	r0, [r7, #4]
 800baba:	4798      	blx	r3
 800babc:	4603      	mov	r3, r0
 800babe:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800bac0:	e004      	b.n	800bacc <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800bac2:	6839      	ldr	r1, [r7, #0]
 800bac4:	6878      	ldr	r0, [r7, #4]
 800bac6:	f000 fc13 	bl	800c2f0 <USBD_CtlError>
              break;
 800baca:	e000      	b.n	800bace <USBD_StdEPReq+0x154>
              break;
 800bacc:	bf00      	nop
          }
          break;
 800bace:	e0ab      	b.n	800bc28 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bad6:	b2db      	uxtb	r3, r3
 800bad8:	2b02      	cmp	r3, #2
 800bada:	d002      	beq.n	800bae2 <USBD_StdEPReq+0x168>
 800badc:	2b03      	cmp	r3, #3
 800bade:	d032      	beq.n	800bb46 <USBD_StdEPReq+0x1cc>
 800bae0:	e097      	b.n	800bc12 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bae2:	7bbb      	ldrb	r3, [r7, #14]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d007      	beq.n	800baf8 <USBD_StdEPReq+0x17e>
 800bae8:	7bbb      	ldrb	r3, [r7, #14]
 800baea:	2b80      	cmp	r3, #128	@ 0x80
 800baec:	d004      	beq.n	800baf8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800baee:	6839      	ldr	r1, [r7, #0]
 800baf0:	6878      	ldr	r0, [r7, #4]
 800baf2:	f000 fbfd 	bl	800c2f0 <USBD_CtlError>
                break;
 800baf6:	e091      	b.n	800bc1c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800baf8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	da0b      	bge.n	800bb18 <USBD_StdEPReq+0x19e>
 800bb00:	7bbb      	ldrb	r3, [r7, #14]
 800bb02:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bb06:	4613      	mov	r3, r2
 800bb08:	009b      	lsls	r3, r3, #2
 800bb0a:	4413      	add	r3, r2
 800bb0c:	009b      	lsls	r3, r3, #2
 800bb0e:	3310      	adds	r3, #16
 800bb10:	687a      	ldr	r2, [r7, #4]
 800bb12:	4413      	add	r3, r2
 800bb14:	3304      	adds	r3, #4
 800bb16:	e00b      	b.n	800bb30 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bb18:	7bbb      	ldrb	r3, [r7, #14]
 800bb1a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bb1e:	4613      	mov	r3, r2
 800bb20:	009b      	lsls	r3, r3, #2
 800bb22:	4413      	add	r3, r2
 800bb24:	009b      	lsls	r3, r3, #2
 800bb26:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bb2a:	687a      	ldr	r2, [r7, #4]
 800bb2c:	4413      	add	r3, r2
 800bb2e:	3304      	adds	r3, #4
 800bb30:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bb32:	68bb      	ldr	r3, [r7, #8]
 800bb34:	2200      	movs	r2, #0
 800bb36:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bb38:	68bb      	ldr	r3, [r7, #8]
 800bb3a:	2202      	movs	r2, #2
 800bb3c:	4619      	mov	r1, r3
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	f000 fc47 	bl	800c3d2 <USBD_CtlSendData>
              break;
 800bb44:	e06a      	b.n	800bc1c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bb46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	da11      	bge.n	800bb72 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bb4e:	7bbb      	ldrb	r3, [r7, #14]
 800bb50:	f003 020f 	and.w	r2, r3, #15
 800bb54:	6879      	ldr	r1, [r7, #4]
 800bb56:	4613      	mov	r3, r2
 800bb58:	009b      	lsls	r3, r3, #2
 800bb5a:	4413      	add	r3, r2
 800bb5c:	009b      	lsls	r3, r3, #2
 800bb5e:	440b      	add	r3, r1
 800bb60:	3324      	adds	r3, #36	@ 0x24
 800bb62:	881b      	ldrh	r3, [r3, #0]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d117      	bne.n	800bb98 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800bb68:	6839      	ldr	r1, [r7, #0]
 800bb6a:	6878      	ldr	r0, [r7, #4]
 800bb6c:	f000 fbc0 	bl	800c2f0 <USBD_CtlError>
                  break;
 800bb70:	e054      	b.n	800bc1c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bb72:	7bbb      	ldrb	r3, [r7, #14]
 800bb74:	f003 020f 	and.w	r2, r3, #15
 800bb78:	6879      	ldr	r1, [r7, #4]
 800bb7a:	4613      	mov	r3, r2
 800bb7c:	009b      	lsls	r3, r3, #2
 800bb7e:	4413      	add	r3, r2
 800bb80:	009b      	lsls	r3, r3, #2
 800bb82:	440b      	add	r3, r1
 800bb84:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bb88:	881b      	ldrh	r3, [r3, #0]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d104      	bne.n	800bb98 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800bb8e:	6839      	ldr	r1, [r7, #0]
 800bb90:	6878      	ldr	r0, [r7, #4]
 800bb92:	f000 fbad 	bl	800c2f0 <USBD_CtlError>
                  break;
 800bb96:	e041      	b.n	800bc1c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bb98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	da0b      	bge.n	800bbb8 <USBD_StdEPReq+0x23e>
 800bba0:	7bbb      	ldrb	r3, [r7, #14]
 800bba2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bba6:	4613      	mov	r3, r2
 800bba8:	009b      	lsls	r3, r3, #2
 800bbaa:	4413      	add	r3, r2
 800bbac:	009b      	lsls	r3, r3, #2
 800bbae:	3310      	adds	r3, #16
 800bbb0:	687a      	ldr	r2, [r7, #4]
 800bbb2:	4413      	add	r3, r2
 800bbb4:	3304      	adds	r3, #4
 800bbb6:	e00b      	b.n	800bbd0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bbb8:	7bbb      	ldrb	r3, [r7, #14]
 800bbba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bbbe:	4613      	mov	r3, r2
 800bbc0:	009b      	lsls	r3, r3, #2
 800bbc2:	4413      	add	r3, r2
 800bbc4:	009b      	lsls	r3, r3, #2
 800bbc6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bbca:	687a      	ldr	r2, [r7, #4]
 800bbcc:	4413      	add	r3, r2
 800bbce:	3304      	adds	r3, #4
 800bbd0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bbd2:	7bbb      	ldrb	r3, [r7, #14]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d002      	beq.n	800bbde <USBD_StdEPReq+0x264>
 800bbd8:	7bbb      	ldrb	r3, [r7, #14]
 800bbda:	2b80      	cmp	r3, #128	@ 0x80
 800bbdc:	d103      	bne.n	800bbe6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800bbde:	68bb      	ldr	r3, [r7, #8]
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	601a      	str	r2, [r3, #0]
 800bbe4:	e00e      	b.n	800bc04 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bbe6:	7bbb      	ldrb	r3, [r7, #14]
 800bbe8:	4619      	mov	r1, r3
 800bbea:	6878      	ldr	r0, [r7, #4]
 800bbec:	f001 f85c 	bl	800cca8 <USBD_LL_IsStallEP>
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d003      	beq.n	800bbfe <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800bbf6:	68bb      	ldr	r3, [r7, #8]
 800bbf8:	2201      	movs	r2, #1
 800bbfa:	601a      	str	r2, [r3, #0]
 800bbfc:	e002      	b.n	800bc04 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800bbfe:	68bb      	ldr	r3, [r7, #8]
 800bc00:	2200      	movs	r2, #0
 800bc02:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bc04:	68bb      	ldr	r3, [r7, #8]
 800bc06:	2202      	movs	r2, #2
 800bc08:	4619      	mov	r1, r3
 800bc0a:	6878      	ldr	r0, [r7, #4]
 800bc0c:	f000 fbe1 	bl	800c3d2 <USBD_CtlSendData>
              break;
 800bc10:	e004      	b.n	800bc1c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800bc12:	6839      	ldr	r1, [r7, #0]
 800bc14:	6878      	ldr	r0, [r7, #4]
 800bc16:	f000 fb6b 	bl	800c2f0 <USBD_CtlError>
              break;
 800bc1a:	bf00      	nop
          }
          break;
 800bc1c:	e004      	b.n	800bc28 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800bc1e:	6839      	ldr	r1, [r7, #0]
 800bc20:	6878      	ldr	r0, [r7, #4]
 800bc22:	f000 fb65 	bl	800c2f0 <USBD_CtlError>
          break;
 800bc26:	bf00      	nop
      }
      break;
 800bc28:	e004      	b.n	800bc34 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800bc2a:	6839      	ldr	r1, [r7, #0]
 800bc2c:	6878      	ldr	r0, [r7, #4]
 800bc2e:	f000 fb5f 	bl	800c2f0 <USBD_CtlError>
      break;
 800bc32:	bf00      	nop
  }

  return ret;
 800bc34:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc36:	4618      	mov	r0, r3
 800bc38:	3710      	adds	r7, #16
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	bd80      	pop	{r7, pc}
	...

0800bc40 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b084      	sub	sp, #16
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
 800bc48:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bc4e:	2300      	movs	r3, #0
 800bc50:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bc52:	2300      	movs	r3, #0
 800bc54:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bc56:	683b      	ldr	r3, [r7, #0]
 800bc58:	885b      	ldrh	r3, [r3, #2]
 800bc5a:	0a1b      	lsrs	r3, r3, #8
 800bc5c:	b29b      	uxth	r3, r3
 800bc5e:	3b01      	subs	r3, #1
 800bc60:	2b0e      	cmp	r3, #14
 800bc62:	f200 8152 	bhi.w	800bf0a <USBD_GetDescriptor+0x2ca>
 800bc66:	a201      	add	r2, pc, #4	@ (adr r2, 800bc6c <USBD_GetDescriptor+0x2c>)
 800bc68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc6c:	0800bcdd 	.word	0x0800bcdd
 800bc70:	0800bcf5 	.word	0x0800bcf5
 800bc74:	0800bd35 	.word	0x0800bd35
 800bc78:	0800bf0b 	.word	0x0800bf0b
 800bc7c:	0800bf0b 	.word	0x0800bf0b
 800bc80:	0800beab 	.word	0x0800beab
 800bc84:	0800bed7 	.word	0x0800bed7
 800bc88:	0800bf0b 	.word	0x0800bf0b
 800bc8c:	0800bf0b 	.word	0x0800bf0b
 800bc90:	0800bf0b 	.word	0x0800bf0b
 800bc94:	0800bf0b 	.word	0x0800bf0b
 800bc98:	0800bf0b 	.word	0x0800bf0b
 800bc9c:	0800bf0b 	.word	0x0800bf0b
 800bca0:	0800bf0b 	.word	0x0800bf0b
 800bca4:	0800bca9 	.word	0x0800bca9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bcae:	69db      	ldr	r3, [r3, #28]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d00b      	beq.n	800bccc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bcba:	69db      	ldr	r3, [r3, #28]
 800bcbc:	687a      	ldr	r2, [r7, #4]
 800bcbe:	7c12      	ldrb	r2, [r2, #16]
 800bcc0:	f107 0108 	add.w	r1, r7, #8
 800bcc4:	4610      	mov	r0, r2
 800bcc6:	4798      	blx	r3
 800bcc8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bcca:	e126      	b.n	800bf1a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bccc:	6839      	ldr	r1, [r7, #0]
 800bcce:	6878      	ldr	r0, [r7, #4]
 800bcd0:	f000 fb0e 	bl	800c2f0 <USBD_CtlError>
        err++;
 800bcd4:	7afb      	ldrb	r3, [r7, #11]
 800bcd6:	3301      	adds	r3, #1
 800bcd8:	72fb      	strb	r3, [r7, #11]
      break;
 800bcda:	e11e      	b.n	800bf1a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	687a      	ldr	r2, [r7, #4]
 800bce6:	7c12      	ldrb	r2, [r2, #16]
 800bce8:	f107 0108 	add.w	r1, r7, #8
 800bcec:	4610      	mov	r0, r2
 800bcee:	4798      	blx	r3
 800bcf0:	60f8      	str	r0, [r7, #12]
      break;
 800bcf2:	e112      	b.n	800bf1a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	7c1b      	ldrb	r3, [r3, #16]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d10d      	bne.n	800bd18 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd04:	f107 0208 	add.w	r2, r7, #8
 800bd08:	4610      	mov	r0, r2
 800bd0a:	4798      	blx	r3
 800bd0c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	3301      	adds	r3, #1
 800bd12:	2202      	movs	r2, #2
 800bd14:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bd16:	e100      	b.n	800bf1a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd20:	f107 0208 	add.w	r2, r7, #8
 800bd24:	4610      	mov	r0, r2
 800bd26:	4798      	blx	r3
 800bd28:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	3301      	adds	r3, #1
 800bd2e:	2202      	movs	r2, #2
 800bd30:	701a      	strb	r2, [r3, #0]
      break;
 800bd32:	e0f2      	b.n	800bf1a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	885b      	ldrh	r3, [r3, #2]
 800bd38:	b2db      	uxtb	r3, r3
 800bd3a:	2b05      	cmp	r3, #5
 800bd3c:	f200 80ac 	bhi.w	800be98 <USBD_GetDescriptor+0x258>
 800bd40:	a201      	add	r2, pc, #4	@ (adr r2, 800bd48 <USBD_GetDescriptor+0x108>)
 800bd42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd46:	bf00      	nop
 800bd48:	0800bd61 	.word	0x0800bd61
 800bd4c:	0800bd95 	.word	0x0800bd95
 800bd50:	0800bdc9 	.word	0x0800bdc9
 800bd54:	0800bdfd 	.word	0x0800bdfd
 800bd58:	0800be31 	.word	0x0800be31
 800bd5c:	0800be65 	.word	0x0800be65
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd66:	685b      	ldr	r3, [r3, #4]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d00b      	beq.n	800bd84 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd72:	685b      	ldr	r3, [r3, #4]
 800bd74:	687a      	ldr	r2, [r7, #4]
 800bd76:	7c12      	ldrb	r2, [r2, #16]
 800bd78:	f107 0108 	add.w	r1, r7, #8
 800bd7c:	4610      	mov	r0, r2
 800bd7e:	4798      	blx	r3
 800bd80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd82:	e091      	b.n	800bea8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bd84:	6839      	ldr	r1, [r7, #0]
 800bd86:	6878      	ldr	r0, [r7, #4]
 800bd88:	f000 fab2 	bl	800c2f0 <USBD_CtlError>
            err++;
 800bd8c:	7afb      	ldrb	r3, [r7, #11]
 800bd8e:	3301      	adds	r3, #1
 800bd90:	72fb      	strb	r3, [r7, #11]
          break;
 800bd92:	e089      	b.n	800bea8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd9a:	689b      	ldr	r3, [r3, #8]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d00b      	beq.n	800bdb8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bda6:	689b      	ldr	r3, [r3, #8]
 800bda8:	687a      	ldr	r2, [r7, #4]
 800bdaa:	7c12      	ldrb	r2, [r2, #16]
 800bdac:	f107 0108 	add.w	r1, r7, #8
 800bdb0:	4610      	mov	r0, r2
 800bdb2:	4798      	blx	r3
 800bdb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bdb6:	e077      	b.n	800bea8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bdb8:	6839      	ldr	r1, [r7, #0]
 800bdba:	6878      	ldr	r0, [r7, #4]
 800bdbc:	f000 fa98 	bl	800c2f0 <USBD_CtlError>
            err++;
 800bdc0:	7afb      	ldrb	r3, [r7, #11]
 800bdc2:	3301      	adds	r3, #1
 800bdc4:	72fb      	strb	r3, [r7, #11]
          break;
 800bdc6:	e06f      	b.n	800bea8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bdce:	68db      	ldr	r3, [r3, #12]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d00b      	beq.n	800bdec <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bdda:	68db      	ldr	r3, [r3, #12]
 800bddc:	687a      	ldr	r2, [r7, #4]
 800bdde:	7c12      	ldrb	r2, [r2, #16]
 800bde0:	f107 0108 	add.w	r1, r7, #8
 800bde4:	4610      	mov	r0, r2
 800bde6:	4798      	blx	r3
 800bde8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bdea:	e05d      	b.n	800bea8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bdec:	6839      	ldr	r1, [r7, #0]
 800bdee:	6878      	ldr	r0, [r7, #4]
 800bdf0:	f000 fa7e 	bl	800c2f0 <USBD_CtlError>
            err++;
 800bdf4:	7afb      	ldrb	r3, [r7, #11]
 800bdf6:	3301      	adds	r3, #1
 800bdf8:	72fb      	strb	r3, [r7, #11]
          break;
 800bdfa:	e055      	b.n	800bea8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be02:	691b      	ldr	r3, [r3, #16]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d00b      	beq.n	800be20 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be0e:	691b      	ldr	r3, [r3, #16]
 800be10:	687a      	ldr	r2, [r7, #4]
 800be12:	7c12      	ldrb	r2, [r2, #16]
 800be14:	f107 0108 	add.w	r1, r7, #8
 800be18:	4610      	mov	r0, r2
 800be1a:	4798      	blx	r3
 800be1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be1e:	e043      	b.n	800bea8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800be20:	6839      	ldr	r1, [r7, #0]
 800be22:	6878      	ldr	r0, [r7, #4]
 800be24:	f000 fa64 	bl	800c2f0 <USBD_CtlError>
            err++;
 800be28:	7afb      	ldrb	r3, [r7, #11]
 800be2a:	3301      	adds	r3, #1
 800be2c:	72fb      	strb	r3, [r7, #11]
          break;
 800be2e:	e03b      	b.n	800bea8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be36:	695b      	ldr	r3, [r3, #20]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d00b      	beq.n	800be54 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be42:	695b      	ldr	r3, [r3, #20]
 800be44:	687a      	ldr	r2, [r7, #4]
 800be46:	7c12      	ldrb	r2, [r2, #16]
 800be48:	f107 0108 	add.w	r1, r7, #8
 800be4c:	4610      	mov	r0, r2
 800be4e:	4798      	blx	r3
 800be50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be52:	e029      	b.n	800bea8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800be54:	6839      	ldr	r1, [r7, #0]
 800be56:	6878      	ldr	r0, [r7, #4]
 800be58:	f000 fa4a 	bl	800c2f0 <USBD_CtlError>
            err++;
 800be5c:	7afb      	ldrb	r3, [r7, #11]
 800be5e:	3301      	adds	r3, #1
 800be60:	72fb      	strb	r3, [r7, #11]
          break;
 800be62:	e021      	b.n	800bea8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be6a:	699b      	ldr	r3, [r3, #24]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d00b      	beq.n	800be88 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be76:	699b      	ldr	r3, [r3, #24]
 800be78:	687a      	ldr	r2, [r7, #4]
 800be7a:	7c12      	ldrb	r2, [r2, #16]
 800be7c:	f107 0108 	add.w	r1, r7, #8
 800be80:	4610      	mov	r0, r2
 800be82:	4798      	blx	r3
 800be84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be86:	e00f      	b.n	800bea8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800be88:	6839      	ldr	r1, [r7, #0]
 800be8a:	6878      	ldr	r0, [r7, #4]
 800be8c:	f000 fa30 	bl	800c2f0 <USBD_CtlError>
            err++;
 800be90:	7afb      	ldrb	r3, [r7, #11]
 800be92:	3301      	adds	r3, #1
 800be94:	72fb      	strb	r3, [r7, #11]
          break;
 800be96:	e007      	b.n	800bea8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800be98:	6839      	ldr	r1, [r7, #0]
 800be9a:	6878      	ldr	r0, [r7, #4]
 800be9c:	f000 fa28 	bl	800c2f0 <USBD_CtlError>
          err++;
 800bea0:	7afb      	ldrb	r3, [r7, #11]
 800bea2:	3301      	adds	r3, #1
 800bea4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800bea6:	bf00      	nop
      }
      break;
 800bea8:	e037      	b.n	800bf1a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	7c1b      	ldrb	r3, [r3, #16]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d109      	bne.n	800bec6 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800beb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800beba:	f107 0208 	add.w	r2, r7, #8
 800bebe:	4610      	mov	r0, r2
 800bec0:	4798      	blx	r3
 800bec2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bec4:	e029      	b.n	800bf1a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bec6:	6839      	ldr	r1, [r7, #0]
 800bec8:	6878      	ldr	r0, [r7, #4]
 800beca:	f000 fa11 	bl	800c2f0 <USBD_CtlError>
        err++;
 800bece:	7afb      	ldrb	r3, [r7, #11]
 800bed0:	3301      	adds	r3, #1
 800bed2:	72fb      	strb	r3, [r7, #11]
      break;
 800bed4:	e021      	b.n	800bf1a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	7c1b      	ldrb	r3, [r3, #16]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d10d      	bne.n	800befa <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bee6:	f107 0208 	add.w	r2, r7, #8
 800beea:	4610      	mov	r0, r2
 800beec:	4798      	blx	r3
 800beee:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	3301      	adds	r3, #1
 800bef4:	2207      	movs	r2, #7
 800bef6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bef8:	e00f      	b.n	800bf1a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800befa:	6839      	ldr	r1, [r7, #0]
 800befc:	6878      	ldr	r0, [r7, #4]
 800befe:	f000 f9f7 	bl	800c2f0 <USBD_CtlError>
        err++;
 800bf02:	7afb      	ldrb	r3, [r7, #11]
 800bf04:	3301      	adds	r3, #1
 800bf06:	72fb      	strb	r3, [r7, #11]
      break;
 800bf08:	e007      	b.n	800bf1a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800bf0a:	6839      	ldr	r1, [r7, #0]
 800bf0c:	6878      	ldr	r0, [r7, #4]
 800bf0e:	f000 f9ef 	bl	800c2f0 <USBD_CtlError>
      err++;
 800bf12:	7afb      	ldrb	r3, [r7, #11]
 800bf14:	3301      	adds	r3, #1
 800bf16:	72fb      	strb	r3, [r7, #11]
      break;
 800bf18:	bf00      	nop
  }

  if (err != 0U)
 800bf1a:	7afb      	ldrb	r3, [r7, #11]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d11e      	bne.n	800bf5e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800bf20:	683b      	ldr	r3, [r7, #0]
 800bf22:	88db      	ldrh	r3, [r3, #6]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d016      	beq.n	800bf56 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800bf28:	893b      	ldrh	r3, [r7, #8]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d00e      	beq.n	800bf4c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	88da      	ldrh	r2, [r3, #6]
 800bf32:	893b      	ldrh	r3, [r7, #8]
 800bf34:	4293      	cmp	r3, r2
 800bf36:	bf28      	it	cs
 800bf38:	4613      	movcs	r3, r2
 800bf3a:	b29b      	uxth	r3, r3
 800bf3c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bf3e:	893b      	ldrh	r3, [r7, #8]
 800bf40:	461a      	mov	r2, r3
 800bf42:	68f9      	ldr	r1, [r7, #12]
 800bf44:	6878      	ldr	r0, [r7, #4]
 800bf46:	f000 fa44 	bl	800c3d2 <USBD_CtlSendData>
 800bf4a:	e009      	b.n	800bf60 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800bf4c:	6839      	ldr	r1, [r7, #0]
 800bf4e:	6878      	ldr	r0, [r7, #4]
 800bf50:	f000 f9ce 	bl	800c2f0 <USBD_CtlError>
 800bf54:	e004      	b.n	800bf60 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800bf56:	6878      	ldr	r0, [r7, #4]
 800bf58:	f000 fa95 	bl	800c486 <USBD_CtlSendStatus>
 800bf5c:	e000      	b.n	800bf60 <USBD_GetDescriptor+0x320>
    return;
 800bf5e:	bf00      	nop
  }
}
 800bf60:	3710      	adds	r7, #16
 800bf62:	46bd      	mov	sp, r7
 800bf64:	bd80      	pop	{r7, pc}
 800bf66:	bf00      	nop

0800bf68 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b084      	sub	sp, #16
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
 800bf70:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bf72:	683b      	ldr	r3, [r7, #0]
 800bf74:	889b      	ldrh	r3, [r3, #4]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d131      	bne.n	800bfde <USBD_SetAddress+0x76>
 800bf7a:	683b      	ldr	r3, [r7, #0]
 800bf7c:	88db      	ldrh	r3, [r3, #6]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d12d      	bne.n	800bfde <USBD_SetAddress+0x76>
 800bf82:	683b      	ldr	r3, [r7, #0]
 800bf84:	885b      	ldrh	r3, [r3, #2]
 800bf86:	2b7f      	cmp	r3, #127	@ 0x7f
 800bf88:	d829      	bhi.n	800bfde <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	885b      	ldrh	r3, [r3, #2]
 800bf8e:	b2db      	uxtb	r3, r3
 800bf90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bf94:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf9c:	b2db      	uxtb	r3, r3
 800bf9e:	2b03      	cmp	r3, #3
 800bfa0:	d104      	bne.n	800bfac <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800bfa2:	6839      	ldr	r1, [r7, #0]
 800bfa4:	6878      	ldr	r0, [r7, #4]
 800bfa6:	f000 f9a3 	bl	800c2f0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfaa:	e01d      	b.n	800bfe8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	7bfa      	ldrb	r2, [r7, #15]
 800bfb0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bfb4:	7bfb      	ldrb	r3, [r7, #15]
 800bfb6:	4619      	mov	r1, r3
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	f000 fea1 	bl	800cd00 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800bfbe:	6878      	ldr	r0, [r7, #4]
 800bfc0:	f000 fa61 	bl	800c486 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bfc4:	7bfb      	ldrb	r3, [r7, #15]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d004      	beq.n	800bfd4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	2202      	movs	r2, #2
 800bfce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfd2:	e009      	b.n	800bfe8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2201      	movs	r2, #1
 800bfd8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfdc:	e004      	b.n	800bfe8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bfde:	6839      	ldr	r1, [r7, #0]
 800bfe0:	6878      	ldr	r0, [r7, #4]
 800bfe2:	f000 f985 	bl	800c2f0 <USBD_CtlError>
  }
}
 800bfe6:	bf00      	nop
 800bfe8:	bf00      	nop
 800bfea:	3710      	adds	r7, #16
 800bfec:	46bd      	mov	sp, r7
 800bfee:	bd80      	pop	{r7, pc}

0800bff0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b084      	sub	sp, #16
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
 800bff8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bffa:	2300      	movs	r3, #0
 800bffc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bffe:	683b      	ldr	r3, [r7, #0]
 800c000:	885b      	ldrh	r3, [r3, #2]
 800c002:	b2da      	uxtb	r2, r3
 800c004:	4b4c      	ldr	r3, [pc, #304]	@ (800c138 <USBD_SetConfig+0x148>)
 800c006:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c008:	4b4b      	ldr	r3, [pc, #300]	@ (800c138 <USBD_SetConfig+0x148>)
 800c00a:	781b      	ldrb	r3, [r3, #0]
 800c00c:	2b01      	cmp	r3, #1
 800c00e:	d905      	bls.n	800c01c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c010:	6839      	ldr	r1, [r7, #0]
 800c012:	6878      	ldr	r0, [r7, #4]
 800c014:	f000 f96c 	bl	800c2f0 <USBD_CtlError>
    return USBD_FAIL;
 800c018:	2303      	movs	r3, #3
 800c01a:	e088      	b.n	800c12e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c022:	b2db      	uxtb	r3, r3
 800c024:	2b02      	cmp	r3, #2
 800c026:	d002      	beq.n	800c02e <USBD_SetConfig+0x3e>
 800c028:	2b03      	cmp	r3, #3
 800c02a:	d025      	beq.n	800c078 <USBD_SetConfig+0x88>
 800c02c:	e071      	b.n	800c112 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c02e:	4b42      	ldr	r3, [pc, #264]	@ (800c138 <USBD_SetConfig+0x148>)
 800c030:	781b      	ldrb	r3, [r3, #0]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d01c      	beq.n	800c070 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800c036:	4b40      	ldr	r3, [pc, #256]	@ (800c138 <USBD_SetConfig+0x148>)
 800c038:	781b      	ldrb	r3, [r3, #0]
 800c03a:	461a      	mov	r2, r3
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c040:	4b3d      	ldr	r3, [pc, #244]	@ (800c138 <USBD_SetConfig+0x148>)
 800c042:	781b      	ldrb	r3, [r3, #0]
 800c044:	4619      	mov	r1, r3
 800c046:	6878      	ldr	r0, [r7, #4]
 800c048:	f7ff f992 	bl	800b370 <USBD_SetClassConfig>
 800c04c:	4603      	mov	r3, r0
 800c04e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c050:	7bfb      	ldrb	r3, [r7, #15]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d004      	beq.n	800c060 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800c056:	6839      	ldr	r1, [r7, #0]
 800c058:	6878      	ldr	r0, [r7, #4]
 800c05a:	f000 f949 	bl	800c2f0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c05e:	e065      	b.n	800c12c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c060:	6878      	ldr	r0, [r7, #4]
 800c062:	f000 fa10 	bl	800c486 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	2203      	movs	r2, #3
 800c06a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c06e:	e05d      	b.n	800c12c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c070:	6878      	ldr	r0, [r7, #4]
 800c072:	f000 fa08 	bl	800c486 <USBD_CtlSendStatus>
      break;
 800c076:	e059      	b.n	800c12c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c078:	4b2f      	ldr	r3, [pc, #188]	@ (800c138 <USBD_SetConfig+0x148>)
 800c07a:	781b      	ldrb	r3, [r3, #0]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d112      	bne.n	800c0a6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	2202      	movs	r2, #2
 800c084:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c088:	4b2b      	ldr	r3, [pc, #172]	@ (800c138 <USBD_SetConfig+0x148>)
 800c08a:	781b      	ldrb	r3, [r3, #0]
 800c08c:	461a      	mov	r2, r3
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c092:	4b29      	ldr	r3, [pc, #164]	@ (800c138 <USBD_SetConfig+0x148>)
 800c094:	781b      	ldrb	r3, [r3, #0]
 800c096:	4619      	mov	r1, r3
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	f7ff f985 	bl	800b3a8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c09e:	6878      	ldr	r0, [r7, #4]
 800c0a0:	f000 f9f1 	bl	800c486 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c0a4:	e042      	b.n	800c12c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800c0a6:	4b24      	ldr	r3, [pc, #144]	@ (800c138 <USBD_SetConfig+0x148>)
 800c0a8:	781b      	ldrb	r3, [r3, #0]
 800c0aa:	461a      	mov	r2, r3
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	685b      	ldr	r3, [r3, #4]
 800c0b0:	429a      	cmp	r2, r3
 800c0b2:	d02a      	beq.n	800c10a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	685b      	ldr	r3, [r3, #4]
 800c0b8:	b2db      	uxtb	r3, r3
 800c0ba:	4619      	mov	r1, r3
 800c0bc:	6878      	ldr	r0, [r7, #4]
 800c0be:	f7ff f973 	bl	800b3a8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c0c2:	4b1d      	ldr	r3, [pc, #116]	@ (800c138 <USBD_SetConfig+0x148>)
 800c0c4:	781b      	ldrb	r3, [r3, #0]
 800c0c6:	461a      	mov	r2, r3
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c0cc:	4b1a      	ldr	r3, [pc, #104]	@ (800c138 <USBD_SetConfig+0x148>)
 800c0ce:	781b      	ldrb	r3, [r3, #0]
 800c0d0:	4619      	mov	r1, r3
 800c0d2:	6878      	ldr	r0, [r7, #4]
 800c0d4:	f7ff f94c 	bl	800b370 <USBD_SetClassConfig>
 800c0d8:	4603      	mov	r3, r0
 800c0da:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c0dc:	7bfb      	ldrb	r3, [r7, #15]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d00f      	beq.n	800c102 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800c0e2:	6839      	ldr	r1, [r7, #0]
 800c0e4:	6878      	ldr	r0, [r7, #4]
 800c0e6:	f000 f903 	bl	800c2f0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	685b      	ldr	r3, [r3, #4]
 800c0ee:	b2db      	uxtb	r3, r3
 800c0f0:	4619      	mov	r1, r3
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	f7ff f958 	bl	800b3a8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2202      	movs	r2, #2
 800c0fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c100:	e014      	b.n	800c12c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c102:	6878      	ldr	r0, [r7, #4]
 800c104:	f000 f9bf 	bl	800c486 <USBD_CtlSendStatus>
      break;
 800c108:	e010      	b.n	800c12c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c10a:	6878      	ldr	r0, [r7, #4]
 800c10c:	f000 f9bb 	bl	800c486 <USBD_CtlSendStatus>
      break;
 800c110:	e00c      	b.n	800c12c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800c112:	6839      	ldr	r1, [r7, #0]
 800c114:	6878      	ldr	r0, [r7, #4]
 800c116:	f000 f8eb 	bl	800c2f0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c11a:	4b07      	ldr	r3, [pc, #28]	@ (800c138 <USBD_SetConfig+0x148>)
 800c11c:	781b      	ldrb	r3, [r3, #0]
 800c11e:	4619      	mov	r1, r3
 800c120:	6878      	ldr	r0, [r7, #4]
 800c122:	f7ff f941 	bl	800b3a8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c126:	2303      	movs	r3, #3
 800c128:	73fb      	strb	r3, [r7, #15]
      break;
 800c12a:	bf00      	nop
  }

  return ret;
 800c12c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c12e:	4618      	mov	r0, r3
 800c130:	3710      	adds	r7, #16
 800c132:	46bd      	mov	sp, r7
 800c134:	bd80      	pop	{r7, pc}
 800c136:	bf00      	nop
 800c138:	20002a30 	.word	0x20002a30

0800c13c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b082      	sub	sp, #8
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
 800c144:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c146:	683b      	ldr	r3, [r7, #0]
 800c148:	88db      	ldrh	r3, [r3, #6]
 800c14a:	2b01      	cmp	r3, #1
 800c14c:	d004      	beq.n	800c158 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c14e:	6839      	ldr	r1, [r7, #0]
 800c150:	6878      	ldr	r0, [r7, #4]
 800c152:	f000 f8cd 	bl	800c2f0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c156:	e023      	b.n	800c1a0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c15e:	b2db      	uxtb	r3, r3
 800c160:	2b02      	cmp	r3, #2
 800c162:	dc02      	bgt.n	800c16a <USBD_GetConfig+0x2e>
 800c164:	2b00      	cmp	r3, #0
 800c166:	dc03      	bgt.n	800c170 <USBD_GetConfig+0x34>
 800c168:	e015      	b.n	800c196 <USBD_GetConfig+0x5a>
 800c16a:	2b03      	cmp	r3, #3
 800c16c:	d00b      	beq.n	800c186 <USBD_GetConfig+0x4a>
 800c16e:	e012      	b.n	800c196 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2200      	movs	r2, #0
 800c174:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	3308      	adds	r3, #8
 800c17a:	2201      	movs	r2, #1
 800c17c:	4619      	mov	r1, r3
 800c17e:	6878      	ldr	r0, [r7, #4]
 800c180:	f000 f927 	bl	800c3d2 <USBD_CtlSendData>
        break;
 800c184:	e00c      	b.n	800c1a0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	3304      	adds	r3, #4
 800c18a:	2201      	movs	r2, #1
 800c18c:	4619      	mov	r1, r3
 800c18e:	6878      	ldr	r0, [r7, #4]
 800c190:	f000 f91f 	bl	800c3d2 <USBD_CtlSendData>
        break;
 800c194:	e004      	b.n	800c1a0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c196:	6839      	ldr	r1, [r7, #0]
 800c198:	6878      	ldr	r0, [r7, #4]
 800c19a:	f000 f8a9 	bl	800c2f0 <USBD_CtlError>
        break;
 800c19e:	bf00      	nop
}
 800c1a0:	bf00      	nop
 800c1a2:	3708      	adds	r7, #8
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	bd80      	pop	{r7, pc}

0800c1a8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b082      	sub	sp, #8
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
 800c1b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c1b8:	b2db      	uxtb	r3, r3
 800c1ba:	3b01      	subs	r3, #1
 800c1bc:	2b02      	cmp	r3, #2
 800c1be:	d81e      	bhi.n	800c1fe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c1c0:	683b      	ldr	r3, [r7, #0]
 800c1c2:	88db      	ldrh	r3, [r3, #6]
 800c1c4:	2b02      	cmp	r3, #2
 800c1c6:	d004      	beq.n	800c1d2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c1c8:	6839      	ldr	r1, [r7, #0]
 800c1ca:	6878      	ldr	r0, [r7, #4]
 800c1cc:	f000 f890 	bl	800c2f0 <USBD_CtlError>
        break;
 800c1d0:	e01a      	b.n	800c208 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	2201      	movs	r2, #1
 800c1d6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d005      	beq.n	800c1ee <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	68db      	ldr	r3, [r3, #12]
 800c1e6:	f043 0202 	orr.w	r2, r3, #2
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	330c      	adds	r3, #12
 800c1f2:	2202      	movs	r2, #2
 800c1f4:	4619      	mov	r1, r3
 800c1f6:	6878      	ldr	r0, [r7, #4]
 800c1f8:	f000 f8eb 	bl	800c3d2 <USBD_CtlSendData>
      break;
 800c1fc:	e004      	b.n	800c208 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c1fe:	6839      	ldr	r1, [r7, #0]
 800c200:	6878      	ldr	r0, [r7, #4]
 800c202:	f000 f875 	bl	800c2f0 <USBD_CtlError>
      break;
 800c206:	bf00      	nop
  }
}
 800c208:	bf00      	nop
 800c20a:	3708      	adds	r7, #8
 800c20c:	46bd      	mov	sp, r7
 800c20e:	bd80      	pop	{r7, pc}

0800c210 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b082      	sub	sp, #8
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
 800c218:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	885b      	ldrh	r3, [r3, #2]
 800c21e:	2b01      	cmp	r3, #1
 800c220:	d106      	bne.n	800c230 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	2201      	movs	r2, #1
 800c226:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c22a:	6878      	ldr	r0, [r7, #4]
 800c22c:	f000 f92b 	bl	800c486 <USBD_CtlSendStatus>
  }
}
 800c230:	bf00      	nop
 800c232:	3708      	adds	r7, #8
 800c234:	46bd      	mov	sp, r7
 800c236:	bd80      	pop	{r7, pc}

0800c238 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b082      	sub	sp, #8
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
 800c240:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c248:	b2db      	uxtb	r3, r3
 800c24a:	3b01      	subs	r3, #1
 800c24c:	2b02      	cmp	r3, #2
 800c24e:	d80b      	bhi.n	800c268 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c250:	683b      	ldr	r3, [r7, #0]
 800c252:	885b      	ldrh	r3, [r3, #2]
 800c254:	2b01      	cmp	r3, #1
 800c256:	d10c      	bne.n	800c272 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	2200      	movs	r2, #0
 800c25c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c260:	6878      	ldr	r0, [r7, #4]
 800c262:	f000 f910 	bl	800c486 <USBD_CtlSendStatus>
      }
      break;
 800c266:	e004      	b.n	800c272 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c268:	6839      	ldr	r1, [r7, #0]
 800c26a:	6878      	ldr	r0, [r7, #4]
 800c26c:	f000 f840 	bl	800c2f0 <USBD_CtlError>
      break;
 800c270:	e000      	b.n	800c274 <USBD_ClrFeature+0x3c>
      break;
 800c272:	bf00      	nop
  }
}
 800c274:	bf00      	nop
 800c276:	3708      	adds	r7, #8
 800c278:	46bd      	mov	sp, r7
 800c27a:	bd80      	pop	{r7, pc}

0800c27c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b084      	sub	sp, #16
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
 800c284:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c286:	683b      	ldr	r3, [r7, #0]
 800c288:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	781a      	ldrb	r2, [r3, #0]
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	3301      	adds	r3, #1
 800c296:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	781a      	ldrb	r2, [r3, #0]
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	3301      	adds	r3, #1
 800c2a4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c2a6:	68f8      	ldr	r0, [r7, #12]
 800c2a8:	f7ff fa92 	bl	800b7d0 <SWAPBYTE>
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	461a      	mov	r2, r3
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	3301      	adds	r3, #1
 800c2b8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	3301      	adds	r3, #1
 800c2be:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c2c0:	68f8      	ldr	r0, [r7, #12]
 800c2c2:	f7ff fa85 	bl	800b7d0 <SWAPBYTE>
 800c2c6:	4603      	mov	r3, r0
 800c2c8:	461a      	mov	r2, r3
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	3301      	adds	r3, #1
 800c2d2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	3301      	adds	r3, #1
 800c2d8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c2da:	68f8      	ldr	r0, [r7, #12]
 800c2dc:	f7ff fa78 	bl	800b7d0 <SWAPBYTE>
 800c2e0:	4603      	mov	r3, r0
 800c2e2:	461a      	mov	r2, r3
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	80da      	strh	r2, [r3, #6]
}
 800c2e8:	bf00      	nop
 800c2ea:	3710      	adds	r7, #16
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	bd80      	pop	{r7, pc}

0800c2f0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b082      	sub	sp, #8
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
 800c2f8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c2fa:	2180      	movs	r1, #128	@ 0x80
 800c2fc:	6878      	ldr	r0, [r7, #4]
 800c2fe:	f000 fc95 	bl	800cc2c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c302:	2100      	movs	r1, #0
 800c304:	6878      	ldr	r0, [r7, #4]
 800c306:	f000 fc91 	bl	800cc2c <USBD_LL_StallEP>
}
 800c30a:	bf00      	nop
 800c30c:	3708      	adds	r7, #8
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd80      	pop	{r7, pc}

0800c312 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c312:	b580      	push	{r7, lr}
 800c314:	b086      	sub	sp, #24
 800c316:	af00      	add	r7, sp, #0
 800c318:	60f8      	str	r0, [r7, #12]
 800c31a:	60b9      	str	r1, [r7, #8]
 800c31c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c31e:	2300      	movs	r3, #0
 800c320:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d036      	beq.n	800c396 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c32c:	6938      	ldr	r0, [r7, #16]
 800c32e:	f000 f836 	bl	800c39e <USBD_GetLen>
 800c332:	4603      	mov	r3, r0
 800c334:	3301      	adds	r3, #1
 800c336:	b29b      	uxth	r3, r3
 800c338:	005b      	lsls	r3, r3, #1
 800c33a:	b29a      	uxth	r2, r3
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c340:	7dfb      	ldrb	r3, [r7, #23]
 800c342:	68ba      	ldr	r2, [r7, #8]
 800c344:	4413      	add	r3, r2
 800c346:	687a      	ldr	r2, [r7, #4]
 800c348:	7812      	ldrb	r2, [r2, #0]
 800c34a:	701a      	strb	r2, [r3, #0]
  idx++;
 800c34c:	7dfb      	ldrb	r3, [r7, #23]
 800c34e:	3301      	adds	r3, #1
 800c350:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c352:	7dfb      	ldrb	r3, [r7, #23]
 800c354:	68ba      	ldr	r2, [r7, #8]
 800c356:	4413      	add	r3, r2
 800c358:	2203      	movs	r2, #3
 800c35a:	701a      	strb	r2, [r3, #0]
  idx++;
 800c35c:	7dfb      	ldrb	r3, [r7, #23]
 800c35e:	3301      	adds	r3, #1
 800c360:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c362:	e013      	b.n	800c38c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c364:	7dfb      	ldrb	r3, [r7, #23]
 800c366:	68ba      	ldr	r2, [r7, #8]
 800c368:	4413      	add	r3, r2
 800c36a:	693a      	ldr	r2, [r7, #16]
 800c36c:	7812      	ldrb	r2, [r2, #0]
 800c36e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c370:	693b      	ldr	r3, [r7, #16]
 800c372:	3301      	adds	r3, #1
 800c374:	613b      	str	r3, [r7, #16]
    idx++;
 800c376:	7dfb      	ldrb	r3, [r7, #23]
 800c378:	3301      	adds	r3, #1
 800c37a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c37c:	7dfb      	ldrb	r3, [r7, #23]
 800c37e:	68ba      	ldr	r2, [r7, #8]
 800c380:	4413      	add	r3, r2
 800c382:	2200      	movs	r2, #0
 800c384:	701a      	strb	r2, [r3, #0]
    idx++;
 800c386:	7dfb      	ldrb	r3, [r7, #23]
 800c388:	3301      	adds	r3, #1
 800c38a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c38c:	693b      	ldr	r3, [r7, #16]
 800c38e:	781b      	ldrb	r3, [r3, #0]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d1e7      	bne.n	800c364 <USBD_GetString+0x52>
 800c394:	e000      	b.n	800c398 <USBD_GetString+0x86>
    return;
 800c396:	bf00      	nop
  }
}
 800c398:	3718      	adds	r7, #24
 800c39a:	46bd      	mov	sp, r7
 800c39c:	bd80      	pop	{r7, pc}

0800c39e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c39e:	b480      	push	{r7}
 800c3a0:	b085      	sub	sp, #20
 800c3a2:	af00      	add	r7, sp, #0
 800c3a4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c3ae:	e005      	b.n	800c3bc <USBD_GetLen+0x1e>
  {
    len++;
 800c3b0:	7bfb      	ldrb	r3, [r7, #15]
 800c3b2:	3301      	adds	r3, #1
 800c3b4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c3b6:	68bb      	ldr	r3, [r7, #8]
 800c3b8:	3301      	adds	r3, #1
 800c3ba:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c3bc:	68bb      	ldr	r3, [r7, #8]
 800c3be:	781b      	ldrb	r3, [r3, #0]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d1f5      	bne.n	800c3b0 <USBD_GetLen+0x12>
  }

  return len;
 800c3c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	3714      	adds	r7, #20
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d0:	4770      	bx	lr

0800c3d2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c3d2:	b580      	push	{r7, lr}
 800c3d4:	b084      	sub	sp, #16
 800c3d6:	af00      	add	r7, sp, #0
 800c3d8:	60f8      	str	r0, [r7, #12]
 800c3da:	60b9      	str	r1, [r7, #8]
 800c3dc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	2202      	movs	r2, #2
 800c3e2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	687a      	ldr	r2, [r7, #4]
 800c3ea:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	687a      	ldr	r2, [r7, #4]
 800c3f0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	68ba      	ldr	r2, [r7, #8]
 800c3f6:	2100      	movs	r1, #0
 800c3f8:	68f8      	ldr	r0, [r7, #12]
 800c3fa:	f000 fca0 	bl	800cd3e <USBD_LL_Transmit>

  return USBD_OK;
 800c3fe:	2300      	movs	r3, #0
}
 800c400:	4618      	mov	r0, r3
 800c402:	3710      	adds	r7, #16
 800c404:	46bd      	mov	sp, r7
 800c406:	bd80      	pop	{r7, pc}

0800c408 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b084      	sub	sp, #16
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	60f8      	str	r0, [r7, #12]
 800c410:	60b9      	str	r1, [r7, #8]
 800c412:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	68ba      	ldr	r2, [r7, #8]
 800c418:	2100      	movs	r1, #0
 800c41a:	68f8      	ldr	r0, [r7, #12]
 800c41c:	f000 fc8f 	bl	800cd3e <USBD_LL_Transmit>

  return USBD_OK;
 800c420:	2300      	movs	r3, #0
}
 800c422:	4618      	mov	r0, r3
 800c424:	3710      	adds	r7, #16
 800c426:	46bd      	mov	sp, r7
 800c428:	bd80      	pop	{r7, pc}

0800c42a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c42a:	b580      	push	{r7, lr}
 800c42c:	b084      	sub	sp, #16
 800c42e:	af00      	add	r7, sp, #0
 800c430:	60f8      	str	r0, [r7, #12]
 800c432:	60b9      	str	r1, [r7, #8]
 800c434:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	2203      	movs	r2, #3
 800c43a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	687a      	ldr	r2, [r7, #4]
 800c442:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	687a      	ldr	r2, [r7, #4]
 800c44a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	68ba      	ldr	r2, [r7, #8]
 800c452:	2100      	movs	r1, #0
 800c454:	68f8      	ldr	r0, [r7, #12]
 800c456:	f000 fc93 	bl	800cd80 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c45a:	2300      	movs	r3, #0
}
 800c45c:	4618      	mov	r0, r3
 800c45e:	3710      	adds	r7, #16
 800c460:	46bd      	mov	sp, r7
 800c462:	bd80      	pop	{r7, pc}

0800c464 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b084      	sub	sp, #16
 800c468:	af00      	add	r7, sp, #0
 800c46a:	60f8      	str	r0, [r7, #12]
 800c46c:	60b9      	str	r1, [r7, #8]
 800c46e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	68ba      	ldr	r2, [r7, #8]
 800c474:	2100      	movs	r1, #0
 800c476:	68f8      	ldr	r0, [r7, #12]
 800c478:	f000 fc82 	bl	800cd80 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c47c:	2300      	movs	r3, #0
}
 800c47e:	4618      	mov	r0, r3
 800c480:	3710      	adds	r7, #16
 800c482:	46bd      	mov	sp, r7
 800c484:	bd80      	pop	{r7, pc}

0800c486 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c486:	b580      	push	{r7, lr}
 800c488:	b082      	sub	sp, #8
 800c48a:	af00      	add	r7, sp, #0
 800c48c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	2204      	movs	r2, #4
 800c492:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c496:	2300      	movs	r3, #0
 800c498:	2200      	movs	r2, #0
 800c49a:	2100      	movs	r1, #0
 800c49c:	6878      	ldr	r0, [r7, #4]
 800c49e:	f000 fc4e 	bl	800cd3e <USBD_LL_Transmit>

  return USBD_OK;
 800c4a2:	2300      	movs	r3, #0
}
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	3708      	adds	r7, #8
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	bd80      	pop	{r7, pc}

0800c4ac <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b082      	sub	sp, #8
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	2205      	movs	r2, #5
 800c4b8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c4bc:	2300      	movs	r3, #0
 800c4be:	2200      	movs	r2, #0
 800c4c0:	2100      	movs	r1, #0
 800c4c2:	6878      	ldr	r0, [r7, #4]
 800c4c4:	f000 fc5c 	bl	800cd80 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c4c8:	2300      	movs	r3, #0
}
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	3708      	adds	r7, #8
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	bd80      	pop	{r7, pc}
	...

0800c4d4 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800c4d8:	2200      	movs	r2, #0
 800c4da:	4912      	ldr	r1, [pc, #72]	@ (800c524 <MX_USB_Device_Init+0x50>)
 800c4dc:	4812      	ldr	r0, [pc, #72]	@ (800c528 <MX_USB_Device_Init+0x54>)
 800c4de:	f7fe fed9 	bl	800b294 <USBD_Init>
 800c4e2:	4603      	mov	r3, r0
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d001      	beq.n	800c4ec <MX_USB_Device_Init+0x18>
    Error_Handler();
 800c4e8:	f7f4 fc3a 	bl	8000d60 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800c4ec:	490f      	ldr	r1, [pc, #60]	@ (800c52c <MX_USB_Device_Init+0x58>)
 800c4ee:	480e      	ldr	r0, [pc, #56]	@ (800c528 <MX_USB_Device_Init+0x54>)
 800c4f0:	f7fe ff00 	bl	800b2f4 <USBD_RegisterClass>
 800c4f4:	4603      	mov	r3, r0
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d001      	beq.n	800c4fe <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800c4fa:	f7f4 fc31 	bl	8000d60 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800c4fe:	490c      	ldr	r1, [pc, #48]	@ (800c530 <MX_USB_Device_Init+0x5c>)
 800c500:	4809      	ldr	r0, [pc, #36]	@ (800c528 <MX_USB_Device_Init+0x54>)
 800c502:	f7fe fe21 	bl	800b148 <USBD_CDC_RegisterInterface>
 800c506:	4603      	mov	r3, r0
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d001      	beq.n	800c510 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800c50c:	f7f4 fc28 	bl	8000d60 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800c510:	4805      	ldr	r0, [pc, #20]	@ (800c528 <MX_USB_Device_Init+0x54>)
 800c512:	f7fe ff16 	bl	800b342 <USBD_Start>
 800c516:	4603      	mov	r3, r0
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d001      	beq.n	800c520 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800c51c:	f7f4 fc20 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800c520:	bf00      	nop
 800c522:	bd80      	pop	{r7, pc}
 800c524:	20000130 	.word	0x20000130
 800c528:	20002a34 	.word	0x20002a34
 800c52c:	20000018 	.word	0x20000018
 800c530:	2000011c 	.word	0x2000011c

0800c534 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c534:	b580      	push	{r7, lr}
 800c536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c538:	2200      	movs	r2, #0
 800c53a:	4905      	ldr	r1, [pc, #20]	@ (800c550 <CDC_Init_FS+0x1c>)
 800c53c:	4805      	ldr	r0, [pc, #20]	@ (800c554 <CDC_Init_FS+0x20>)
 800c53e:	f7fe fe18 	bl	800b172 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c542:	4905      	ldr	r1, [pc, #20]	@ (800c558 <CDC_Init_FS+0x24>)
 800c544:	4803      	ldr	r0, [pc, #12]	@ (800c554 <CDC_Init_FS+0x20>)
 800c546:	f7fe fe32 	bl	800b1ae <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c54a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c54c:	4618      	mov	r0, r3
 800c54e:	bd80      	pop	{r7, pc}
 800c550:	20003504 	.word	0x20003504
 800c554:	20002a34 	.word	0x20002a34
 800c558:	20002d04 	.word	0x20002d04

0800c55c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c55c:	b480      	push	{r7}
 800c55e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c560:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c562:	4618      	mov	r0, r3
 800c564:	46bd      	mov	sp, r7
 800c566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56a:	4770      	bx	lr

0800c56c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c56c:	b480      	push	{r7}
 800c56e:	b083      	sub	sp, #12
 800c570:	af00      	add	r7, sp, #0
 800c572:	4603      	mov	r3, r0
 800c574:	6039      	str	r1, [r7, #0]
 800c576:	71fb      	strb	r3, [r7, #7]
 800c578:	4613      	mov	r3, r2
 800c57a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c57c:	79fb      	ldrb	r3, [r7, #7]
 800c57e:	2b23      	cmp	r3, #35	@ 0x23
 800c580:	d84a      	bhi.n	800c618 <CDC_Control_FS+0xac>
 800c582:	a201      	add	r2, pc, #4	@ (adr r2, 800c588 <CDC_Control_FS+0x1c>)
 800c584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c588:	0800c619 	.word	0x0800c619
 800c58c:	0800c619 	.word	0x0800c619
 800c590:	0800c619 	.word	0x0800c619
 800c594:	0800c619 	.word	0x0800c619
 800c598:	0800c619 	.word	0x0800c619
 800c59c:	0800c619 	.word	0x0800c619
 800c5a0:	0800c619 	.word	0x0800c619
 800c5a4:	0800c619 	.word	0x0800c619
 800c5a8:	0800c619 	.word	0x0800c619
 800c5ac:	0800c619 	.word	0x0800c619
 800c5b0:	0800c619 	.word	0x0800c619
 800c5b4:	0800c619 	.word	0x0800c619
 800c5b8:	0800c619 	.word	0x0800c619
 800c5bc:	0800c619 	.word	0x0800c619
 800c5c0:	0800c619 	.word	0x0800c619
 800c5c4:	0800c619 	.word	0x0800c619
 800c5c8:	0800c619 	.word	0x0800c619
 800c5cc:	0800c619 	.word	0x0800c619
 800c5d0:	0800c619 	.word	0x0800c619
 800c5d4:	0800c619 	.word	0x0800c619
 800c5d8:	0800c619 	.word	0x0800c619
 800c5dc:	0800c619 	.word	0x0800c619
 800c5e0:	0800c619 	.word	0x0800c619
 800c5e4:	0800c619 	.word	0x0800c619
 800c5e8:	0800c619 	.word	0x0800c619
 800c5ec:	0800c619 	.word	0x0800c619
 800c5f0:	0800c619 	.word	0x0800c619
 800c5f4:	0800c619 	.word	0x0800c619
 800c5f8:	0800c619 	.word	0x0800c619
 800c5fc:	0800c619 	.word	0x0800c619
 800c600:	0800c619 	.word	0x0800c619
 800c604:	0800c619 	.word	0x0800c619
 800c608:	0800c619 	.word	0x0800c619
 800c60c:	0800c619 	.word	0x0800c619
 800c610:	0800c619 	.word	0x0800c619
 800c614:	0800c619 	.word	0x0800c619
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c618:	bf00      	nop
  }

  return (USBD_OK);
 800c61a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c61c:	4618      	mov	r0, r3
 800c61e:	370c      	adds	r7, #12
 800c620:	46bd      	mov	sp, r7
 800c622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c626:	4770      	bx	lr

0800c628 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	b082      	sub	sp, #8
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
 800c630:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c632:	6879      	ldr	r1, [r7, #4]
 800c634:	4805      	ldr	r0, [pc, #20]	@ (800c64c <CDC_Receive_FS+0x24>)
 800c636:	f7fe fdba 	bl	800b1ae <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c63a:	4804      	ldr	r0, [pc, #16]	@ (800c64c <CDC_Receive_FS+0x24>)
 800c63c:	f7fe fe00 	bl	800b240 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c640:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c642:	4618      	mov	r0, r3
 800c644:	3708      	adds	r7, #8
 800c646:	46bd      	mov	sp, r7
 800c648:	bd80      	pop	{r7, pc}
 800c64a:	bf00      	nop
 800c64c:	20002a34 	.word	0x20002a34

0800c650 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b084      	sub	sp, #16
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
 800c658:	460b      	mov	r3, r1
 800c65a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c65c:	2300      	movs	r3, #0
 800c65e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c660:	4b0d      	ldr	r3, [pc, #52]	@ (800c698 <CDC_Transmit_FS+0x48>)
 800c662:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c666:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c668:	68bb      	ldr	r3, [r7, #8]
 800c66a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d001      	beq.n	800c676 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c672:	2301      	movs	r3, #1
 800c674:	e00b      	b.n	800c68e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c676:	887b      	ldrh	r3, [r7, #2]
 800c678:	461a      	mov	r2, r3
 800c67a:	6879      	ldr	r1, [r7, #4]
 800c67c:	4806      	ldr	r0, [pc, #24]	@ (800c698 <CDC_Transmit_FS+0x48>)
 800c67e:	f7fe fd78 	bl	800b172 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c682:	4805      	ldr	r0, [pc, #20]	@ (800c698 <CDC_Transmit_FS+0x48>)
 800c684:	f7fe fdac 	bl	800b1e0 <USBD_CDC_TransmitPacket>
 800c688:	4603      	mov	r3, r0
 800c68a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c68c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c68e:	4618      	mov	r0, r3
 800c690:	3710      	adds	r7, #16
 800c692:	46bd      	mov	sp, r7
 800c694:	bd80      	pop	{r7, pc}
 800c696:	bf00      	nop
 800c698:	20002a34 	.word	0x20002a34

0800c69c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c69c:	b480      	push	{r7}
 800c69e:	b087      	sub	sp, #28
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	60f8      	str	r0, [r7, #12]
 800c6a4:	60b9      	str	r1, [r7, #8]
 800c6a6:	4613      	mov	r3, r2
 800c6a8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c6ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	371c      	adds	r7, #28
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6bc:	4770      	bx	lr
	...

0800c6c0 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c6c0:	b480      	push	{r7}
 800c6c2:	b083      	sub	sp, #12
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	4603      	mov	r3, r0
 800c6c8:	6039      	str	r1, [r7, #0]
 800c6ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	2212      	movs	r2, #18
 800c6d0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800c6d2:	4b03      	ldr	r3, [pc, #12]	@ (800c6e0 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	370c      	adds	r7, #12
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6de:	4770      	bx	lr
 800c6e0:	20000150 	.word	0x20000150

0800c6e4 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c6e4:	b480      	push	{r7}
 800c6e6:	b083      	sub	sp, #12
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	6039      	str	r1, [r7, #0]
 800c6ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	2204      	movs	r2, #4
 800c6f4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c6f6:	4b03      	ldr	r3, [pc, #12]	@ (800c704 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	370c      	adds	r7, #12
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c702:	4770      	bx	lr
 800c704:	20000164 	.word	0x20000164

0800c708 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b082      	sub	sp, #8
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	4603      	mov	r3, r0
 800c710:	6039      	str	r1, [r7, #0]
 800c712:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c714:	79fb      	ldrb	r3, [r7, #7]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d105      	bne.n	800c726 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800c71a:	683a      	ldr	r2, [r7, #0]
 800c71c:	4907      	ldr	r1, [pc, #28]	@ (800c73c <USBD_CDC_ProductStrDescriptor+0x34>)
 800c71e:	4808      	ldr	r0, [pc, #32]	@ (800c740 <USBD_CDC_ProductStrDescriptor+0x38>)
 800c720:	f7ff fdf7 	bl	800c312 <USBD_GetString>
 800c724:	e004      	b.n	800c730 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800c726:	683a      	ldr	r2, [r7, #0]
 800c728:	4904      	ldr	r1, [pc, #16]	@ (800c73c <USBD_CDC_ProductStrDescriptor+0x34>)
 800c72a:	4805      	ldr	r0, [pc, #20]	@ (800c740 <USBD_CDC_ProductStrDescriptor+0x38>)
 800c72c:	f7ff fdf1 	bl	800c312 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c730:	4b02      	ldr	r3, [pc, #8]	@ (800c73c <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800c732:	4618      	mov	r0, r3
 800c734:	3708      	adds	r7, #8
 800c736:	46bd      	mov	sp, r7
 800c738:	bd80      	pop	{r7, pc}
 800c73a:	bf00      	nop
 800c73c:	20003d04 	.word	0x20003d04
 800c740:	0800d864 	.word	0x0800d864

0800c744 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c744:	b580      	push	{r7, lr}
 800c746:	b082      	sub	sp, #8
 800c748:	af00      	add	r7, sp, #0
 800c74a:	4603      	mov	r3, r0
 800c74c:	6039      	str	r1, [r7, #0]
 800c74e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c750:	683a      	ldr	r2, [r7, #0]
 800c752:	4904      	ldr	r1, [pc, #16]	@ (800c764 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800c754:	4804      	ldr	r0, [pc, #16]	@ (800c768 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800c756:	f7ff fddc 	bl	800c312 <USBD_GetString>
  return USBD_StrDesc;
 800c75a:	4b02      	ldr	r3, [pc, #8]	@ (800c764 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800c75c:	4618      	mov	r0, r3
 800c75e:	3708      	adds	r7, #8
 800c760:	46bd      	mov	sp, r7
 800c762:	bd80      	pop	{r7, pc}
 800c764:	20003d04 	.word	0x20003d04
 800c768:	0800d87c 	.word	0x0800d87c

0800c76c <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b082      	sub	sp, #8
 800c770:	af00      	add	r7, sp, #0
 800c772:	4603      	mov	r3, r0
 800c774:	6039      	str	r1, [r7, #0]
 800c776:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c778:	683b      	ldr	r3, [r7, #0]
 800c77a:	221a      	movs	r2, #26
 800c77c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c77e:	f000 f843 	bl	800c808 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800c782:	4b02      	ldr	r3, [pc, #8]	@ (800c78c <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800c784:	4618      	mov	r0, r3
 800c786:	3708      	adds	r7, #8
 800c788:	46bd      	mov	sp, r7
 800c78a:	bd80      	pop	{r7, pc}
 800c78c:	20000168 	.word	0x20000168

0800c790 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c790:	b580      	push	{r7, lr}
 800c792:	b082      	sub	sp, #8
 800c794:	af00      	add	r7, sp, #0
 800c796:	4603      	mov	r3, r0
 800c798:	6039      	str	r1, [r7, #0]
 800c79a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c79c:	79fb      	ldrb	r3, [r7, #7]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d105      	bne.n	800c7ae <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800c7a2:	683a      	ldr	r2, [r7, #0]
 800c7a4:	4907      	ldr	r1, [pc, #28]	@ (800c7c4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800c7a6:	4808      	ldr	r0, [pc, #32]	@ (800c7c8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800c7a8:	f7ff fdb3 	bl	800c312 <USBD_GetString>
 800c7ac:	e004      	b.n	800c7b8 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800c7ae:	683a      	ldr	r2, [r7, #0]
 800c7b0:	4904      	ldr	r1, [pc, #16]	@ (800c7c4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800c7b2:	4805      	ldr	r0, [pc, #20]	@ (800c7c8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800c7b4:	f7ff fdad 	bl	800c312 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c7b8:	4b02      	ldr	r3, [pc, #8]	@ (800c7c4 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	3708      	adds	r7, #8
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	bd80      	pop	{r7, pc}
 800c7c2:	bf00      	nop
 800c7c4:	20003d04 	.word	0x20003d04
 800c7c8:	0800d890 	.word	0x0800d890

0800c7cc <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b082      	sub	sp, #8
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	4603      	mov	r3, r0
 800c7d4:	6039      	str	r1, [r7, #0]
 800c7d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c7d8:	79fb      	ldrb	r3, [r7, #7]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d105      	bne.n	800c7ea <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800c7de:	683a      	ldr	r2, [r7, #0]
 800c7e0:	4907      	ldr	r1, [pc, #28]	@ (800c800 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800c7e2:	4808      	ldr	r0, [pc, #32]	@ (800c804 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800c7e4:	f7ff fd95 	bl	800c312 <USBD_GetString>
 800c7e8:	e004      	b.n	800c7f4 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800c7ea:	683a      	ldr	r2, [r7, #0]
 800c7ec:	4904      	ldr	r1, [pc, #16]	@ (800c800 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800c7ee:	4805      	ldr	r0, [pc, #20]	@ (800c804 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800c7f0:	f7ff fd8f 	bl	800c312 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c7f4:	4b02      	ldr	r3, [pc, #8]	@ (800c800 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	3708      	adds	r7, #8
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	bd80      	pop	{r7, pc}
 800c7fe:	bf00      	nop
 800c800:	20003d04 	.word	0x20003d04
 800c804:	0800d89c 	.word	0x0800d89c

0800c808 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c808:	b580      	push	{r7, lr}
 800c80a:	b084      	sub	sp, #16
 800c80c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c80e:	4b0f      	ldr	r3, [pc, #60]	@ (800c84c <Get_SerialNum+0x44>)
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c814:	4b0e      	ldr	r3, [pc, #56]	@ (800c850 <Get_SerialNum+0x48>)
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c81a:	4b0e      	ldr	r3, [pc, #56]	@ (800c854 <Get_SerialNum+0x4c>)
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c820:	68fa      	ldr	r2, [r7, #12]
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	4413      	add	r3, r2
 800c826:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d009      	beq.n	800c842 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c82e:	2208      	movs	r2, #8
 800c830:	4909      	ldr	r1, [pc, #36]	@ (800c858 <Get_SerialNum+0x50>)
 800c832:	68f8      	ldr	r0, [r7, #12]
 800c834:	f000 f814 	bl	800c860 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c838:	2204      	movs	r2, #4
 800c83a:	4908      	ldr	r1, [pc, #32]	@ (800c85c <Get_SerialNum+0x54>)
 800c83c:	68b8      	ldr	r0, [r7, #8]
 800c83e:	f000 f80f 	bl	800c860 <IntToUnicode>
  }
}
 800c842:	bf00      	nop
 800c844:	3710      	adds	r7, #16
 800c846:	46bd      	mov	sp, r7
 800c848:	bd80      	pop	{r7, pc}
 800c84a:	bf00      	nop
 800c84c:	1fff7590 	.word	0x1fff7590
 800c850:	1fff7594 	.word	0x1fff7594
 800c854:	1fff7598 	.word	0x1fff7598
 800c858:	2000016a 	.word	0x2000016a
 800c85c:	2000017a 	.word	0x2000017a

0800c860 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c860:	b480      	push	{r7}
 800c862:	b087      	sub	sp, #28
 800c864:	af00      	add	r7, sp, #0
 800c866:	60f8      	str	r0, [r7, #12]
 800c868:	60b9      	str	r1, [r7, #8]
 800c86a:	4613      	mov	r3, r2
 800c86c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c86e:	2300      	movs	r3, #0
 800c870:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c872:	2300      	movs	r3, #0
 800c874:	75fb      	strb	r3, [r7, #23]
 800c876:	e027      	b.n	800c8c8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	0f1b      	lsrs	r3, r3, #28
 800c87c:	2b09      	cmp	r3, #9
 800c87e:	d80b      	bhi.n	800c898 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	0f1b      	lsrs	r3, r3, #28
 800c884:	b2da      	uxtb	r2, r3
 800c886:	7dfb      	ldrb	r3, [r7, #23]
 800c888:	005b      	lsls	r3, r3, #1
 800c88a:	4619      	mov	r1, r3
 800c88c:	68bb      	ldr	r3, [r7, #8]
 800c88e:	440b      	add	r3, r1
 800c890:	3230      	adds	r2, #48	@ 0x30
 800c892:	b2d2      	uxtb	r2, r2
 800c894:	701a      	strb	r2, [r3, #0]
 800c896:	e00a      	b.n	800c8ae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	0f1b      	lsrs	r3, r3, #28
 800c89c:	b2da      	uxtb	r2, r3
 800c89e:	7dfb      	ldrb	r3, [r7, #23]
 800c8a0:	005b      	lsls	r3, r3, #1
 800c8a2:	4619      	mov	r1, r3
 800c8a4:	68bb      	ldr	r3, [r7, #8]
 800c8a6:	440b      	add	r3, r1
 800c8a8:	3237      	adds	r2, #55	@ 0x37
 800c8aa:	b2d2      	uxtb	r2, r2
 800c8ac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	011b      	lsls	r3, r3, #4
 800c8b2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c8b4:	7dfb      	ldrb	r3, [r7, #23]
 800c8b6:	005b      	lsls	r3, r3, #1
 800c8b8:	3301      	adds	r3, #1
 800c8ba:	68ba      	ldr	r2, [r7, #8]
 800c8bc:	4413      	add	r3, r2
 800c8be:	2200      	movs	r2, #0
 800c8c0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c8c2:	7dfb      	ldrb	r3, [r7, #23]
 800c8c4:	3301      	adds	r3, #1
 800c8c6:	75fb      	strb	r3, [r7, #23]
 800c8c8:	7dfa      	ldrb	r2, [r7, #23]
 800c8ca:	79fb      	ldrb	r3, [r7, #7]
 800c8cc:	429a      	cmp	r2, r3
 800c8ce:	d3d3      	bcc.n	800c878 <IntToUnicode+0x18>
  }
}
 800c8d0:	bf00      	nop
 800c8d2:	bf00      	nop
 800c8d4:	371c      	adds	r7, #28
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8dc:	4770      	bx	lr
	...

0800c8e0 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	b098      	sub	sp, #96	@ 0x60
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c8e8:	f107 030c 	add.w	r3, r7, #12
 800c8ec:	2254      	movs	r2, #84	@ 0x54
 800c8ee:	2100      	movs	r1, #0
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	f000 fb19 	bl	800cf28 <memset>
  if(pcdHandle->Instance==USB)
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	4a15      	ldr	r2, [pc, #84]	@ (800c950 <HAL_PCD_MspInit+0x70>)
 800c8fc:	4293      	cmp	r3, r2
 800c8fe:	d122      	bne.n	800c946 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800c900:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c904:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800c906:	2300      	movs	r3, #0
 800c908:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c90a:	f107 030c 	add.w	r3, r7, #12
 800c90e:	4618      	mov	r0, r3
 800c910:	f7f9 fa64 	bl	8005ddc <HAL_RCCEx_PeriphCLKConfig>
 800c914:	4603      	mov	r3, r0
 800c916:	2b00      	cmp	r3, #0
 800c918:	d001      	beq.n	800c91e <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800c91a:	f7f4 fa21 	bl	8000d60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c91e:	4b0d      	ldr	r3, [pc, #52]	@ (800c954 <HAL_PCD_MspInit+0x74>)
 800c920:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c922:	4a0c      	ldr	r2, [pc, #48]	@ (800c954 <HAL_PCD_MspInit+0x74>)
 800c924:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c928:	6593      	str	r3, [r2, #88]	@ 0x58
 800c92a:	4b0a      	ldr	r3, [pc, #40]	@ (800c954 <HAL_PCD_MspInit+0x74>)
 800c92c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c92e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c932:	60bb      	str	r3, [r7, #8]
 800c934:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800c936:	2200      	movs	r2, #0
 800c938:	2100      	movs	r1, #0
 800c93a:	2014      	movs	r0, #20
 800c93c:	f7f6 fa2f 	bl	8002d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800c940:	2014      	movs	r0, #20
 800c942:	f7f6 fa46 	bl	8002dd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c946:	bf00      	nop
 800c948:	3760      	adds	r7, #96	@ 0x60
 800c94a:	46bd      	mov	sp, r7
 800c94c:	bd80      	pop	{r7, pc}
 800c94e:	bf00      	nop
 800c950:	40005c00 	.word	0x40005c00
 800c954:	40021000 	.word	0x40021000

0800c958 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b082      	sub	sp, #8
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800c96c:	4619      	mov	r1, r3
 800c96e:	4610      	mov	r0, r2
 800c970:	f7fe fd32 	bl	800b3d8 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800c974:	bf00      	nop
 800c976:	3708      	adds	r7, #8
 800c978:	46bd      	mov	sp, r7
 800c97a:	bd80      	pop	{r7, pc}

0800c97c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b082      	sub	sp, #8
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
 800c984:	460b      	mov	r3, r1
 800c986:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800c98e:	78fa      	ldrb	r2, [r7, #3]
 800c990:	6879      	ldr	r1, [r7, #4]
 800c992:	4613      	mov	r3, r2
 800c994:	009b      	lsls	r3, r3, #2
 800c996:	4413      	add	r3, r2
 800c998:	00db      	lsls	r3, r3, #3
 800c99a:	440b      	add	r3, r1
 800c99c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c9a0:	681a      	ldr	r2, [r3, #0]
 800c9a2:	78fb      	ldrb	r3, [r7, #3]
 800c9a4:	4619      	mov	r1, r3
 800c9a6:	f7fe fd6c 	bl	800b482 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800c9aa:	bf00      	nop
 800c9ac:	3708      	adds	r7, #8
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	bd80      	pop	{r7, pc}

0800c9b2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9b2:	b580      	push	{r7, lr}
 800c9b4:	b082      	sub	sp, #8
 800c9b6:	af00      	add	r7, sp, #0
 800c9b8:	6078      	str	r0, [r7, #4]
 800c9ba:	460b      	mov	r3, r1
 800c9bc:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800c9c4:	78fa      	ldrb	r2, [r7, #3]
 800c9c6:	6879      	ldr	r1, [r7, #4]
 800c9c8:	4613      	mov	r3, r2
 800c9ca:	009b      	lsls	r3, r3, #2
 800c9cc:	4413      	add	r3, r2
 800c9ce:	00db      	lsls	r3, r3, #3
 800c9d0:	440b      	add	r3, r1
 800c9d2:	3324      	adds	r3, #36	@ 0x24
 800c9d4:	681a      	ldr	r2, [r3, #0]
 800c9d6:	78fb      	ldrb	r3, [r7, #3]
 800c9d8:	4619      	mov	r1, r3
 800c9da:	f7fe fdb5 	bl	800b548 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800c9de:	bf00      	nop
 800c9e0:	3708      	adds	r7, #8
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	bd80      	pop	{r7, pc}

0800c9e6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9e6:	b580      	push	{r7, lr}
 800c9e8:	b082      	sub	sp, #8
 800c9ea:	af00      	add	r7, sp, #0
 800c9ec:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	f7fe fec9 	bl	800b78c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800c9fa:	bf00      	nop
 800c9fc:	3708      	adds	r7, #8
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	bd80      	pop	{r7, pc}

0800ca02 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca02:	b580      	push	{r7, lr}
 800ca04:	b084      	sub	sp, #16
 800ca06:	af00      	add	r7, sp, #0
 800ca08:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ca0a:	2301      	movs	r3, #1
 800ca0c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	795b      	ldrb	r3, [r3, #5]
 800ca12:	2b02      	cmp	r3, #2
 800ca14:	d001      	beq.n	800ca1a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ca16:	f7f4 f9a3 	bl	8000d60 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ca20:	7bfa      	ldrb	r2, [r7, #15]
 800ca22:	4611      	mov	r1, r2
 800ca24:	4618      	mov	r0, r3
 800ca26:	f7fe fe73 	bl	800b710 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ca30:	4618      	mov	r0, r3
 800ca32:	f7fe fe1f 	bl	800b674 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800ca36:	bf00      	nop
 800ca38:	3710      	adds	r7, #16
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	bd80      	pop	{r7, pc}
	...

0800ca40 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b082      	sub	sp, #8
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ca4e:	4618      	mov	r0, r3
 800ca50:	f7fe fe6e 	bl	800b730 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	7a5b      	ldrb	r3, [r3, #9]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d005      	beq.n	800ca68 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ca5c:	4b04      	ldr	r3, [pc, #16]	@ (800ca70 <HAL_PCD_SuspendCallback+0x30>)
 800ca5e:	691b      	ldr	r3, [r3, #16]
 800ca60:	4a03      	ldr	r2, [pc, #12]	@ (800ca70 <HAL_PCD_SuspendCallback+0x30>)
 800ca62:	f043 0306 	orr.w	r3, r3, #6
 800ca66:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800ca68:	bf00      	nop
 800ca6a:	3708      	adds	r7, #8
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	bd80      	pop	{r7, pc}
 800ca70:	e000ed00 	.word	0xe000ed00

0800ca74 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b082      	sub	sp, #8
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	7a5b      	ldrb	r3, [r3, #9]
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d007      	beq.n	800ca94 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ca84:	4b08      	ldr	r3, [pc, #32]	@ (800caa8 <HAL_PCD_ResumeCallback+0x34>)
 800ca86:	691b      	ldr	r3, [r3, #16]
 800ca88:	4a07      	ldr	r2, [pc, #28]	@ (800caa8 <HAL_PCD_ResumeCallback+0x34>)
 800ca8a:	f023 0306 	bic.w	r3, r3, #6
 800ca8e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800ca90:	f000 f9f8 	bl	800ce84 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	f7fe fe5e 	bl	800b75c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800caa0:	bf00      	nop
 800caa2:	3708      	adds	r7, #8
 800caa4:	46bd      	mov	sp, r7
 800caa6:	bd80      	pop	{r7, pc}
 800caa8:	e000ed00 	.word	0xe000ed00

0800caac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800caac:	b580      	push	{r7, lr}
 800caae:	b082      	sub	sp, #8
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800cab4:	4a2b      	ldr	r2, [pc, #172]	@ (800cb64 <USBD_LL_Init+0xb8>)
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	4a29      	ldr	r2, [pc, #164]	@ (800cb64 <USBD_LL_Init+0xb8>)
 800cac0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800cac4:	4b27      	ldr	r3, [pc, #156]	@ (800cb64 <USBD_LL_Init+0xb8>)
 800cac6:	4a28      	ldr	r2, [pc, #160]	@ (800cb68 <USBD_LL_Init+0xbc>)
 800cac8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800caca:	4b26      	ldr	r3, [pc, #152]	@ (800cb64 <USBD_LL_Init+0xb8>)
 800cacc:	2208      	movs	r2, #8
 800cace:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800cad0:	4b24      	ldr	r3, [pc, #144]	@ (800cb64 <USBD_LL_Init+0xb8>)
 800cad2:	2202      	movs	r2, #2
 800cad4:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800cad6:	4b23      	ldr	r3, [pc, #140]	@ (800cb64 <USBD_LL_Init+0xb8>)
 800cad8:	2202      	movs	r2, #2
 800cada:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800cadc:	4b21      	ldr	r3, [pc, #132]	@ (800cb64 <USBD_LL_Init+0xb8>)
 800cade:	2200      	movs	r2, #0
 800cae0:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800cae2:	4b20      	ldr	r3, [pc, #128]	@ (800cb64 <USBD_LL_Init+0xb8>)
 800cae4:	2200      	movs	r2, #0
 800cae6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800cae8:	4b1e      	ldr	r3, [pc, #120]	@ (800cb64 <USBD_LL_Init+0xb8>)
 800caea:	2200      	movs	r2, #0
 800caec:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800caee:	4b1d      	ldr	r3, [pc, #116]	@ (800cb64 <USBD_LL_Init+0xb8>)
 800caf0:	2200      	movs	r2, #0
 800caf2:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800caf4:	481b      	ldr	r0, [pc, #108]	@ (800cb64 <USBD_LL_Init+0xb8>)
 800caf6:	f7f6 fe94 	bl	8003822 <HAL_PCD_Init>
 800cafa:	4603      	mov	r3, r0
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d001      	beq.n	800cb04 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800cb00:	f7f4 f92e 	bl	8000d60 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800cb0a:	2318      	movs	r3, #24
 800cb0c:	2200      	movs	r2, #0
 800cb0e:	2100      	movs	r1, #0
 800cb10:	f7f8 fb4d 	bl	80051ae <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800cb1a:	2358      	movs	r3, #88	@ 0x58
 800cb1c:	2200      	movs	r2, #0
 800cb1e:	2180      	movs	r1, #128	@ 0x80
 800cb20:	f7f8 fb45 	bl	80051ae <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800cb2a:	23c0      	movs	r3, #192	@ 0xc0
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	2181      	movs	r1, #129	@ 0x81
 800cb30:	f7f8 fb3d 	bl	80051ae <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800cb3a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800cb3e:	2200      	movs	r2, #0
 800cb40:	2101      	movs	r1, #1
 800cb42:	f7f8 fb34 	bl	80051ae <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800cb4c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cb50:	2200      	movs	r2, #0
 800cb52:	2182      	movs	r1, #130	@ 0x82
 800cb54:	f7f8 fb2b 	bl	80051ae <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800cb58:	2300      	movs	r3, #0
}
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	3708      	adds	r7, #8
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	bd80      	pop	{r7, pc}
 800cb62:	bf00      	nop
 800cb64:	20003f04 	.word	0x20003f04
 800cb68:	40005c00 	.word	0x40005c00

0800cb6c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b084      	sub	sp, #16
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb74:	2300      	movs	r3, #0
 800cb76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb78:	2300      	movs	r3, #0
 800cb7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800cb82:	4618      	mov	r0, r3
 800cb84:	f7f6 ff1b 	bl	80039be <HAL_PCD_Start>
 800cb88:	4603      	mov	r3, r0
 800cb8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb8c:	7bfb      	ldrb	r3, [r7, #15]
 800cb8e:	4618      	mov	r0, r3
 800cb90:	f000 f97e 	bl	800ce90 <USBD_Get_USB_Status>
 800cb94:	4603      	mov	r3, r0
 800cb96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb98:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	3710      	adds	r7, #16
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	bd80      	pop	{r7, pc}

0800cba2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cba2:	b580      	push	{r7, lr}
 800cba4:	b084      	sub	sp, #16
 800cba6:	af00      	add	r7, sp, #0
 800cba8:	6078      	str	r0, [r7, #4]
 800cbaa:	4608      	mov	r0, r1
 800cbac:	4611      	mov	r1, r2
 800cbae:	461a      	mov	r2, r3
 800cbb0:	4603      	mov	r3, r0
 800cbb2:	70fb      	strb	r3, [r7, #3]
 800cbb4:	460b      	mov	r3, r1
 800cbb6:	70bb      	strb	r3, [r7, #2]
 800cbb8:	4613      	mov	r3, r2
 800cbba:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800cbca:	78bb      	ldrb	r3, [r7, #2]
 800cbcc:	883a      	ldrh	r2, [r7, #0]
 800cbce:	78f9      	ldrb	r1, [r7, #3]
 800cbd0:	f7f7 f862 	bl	8003c98 <HAL_PCD_EP_Open>
 800cbd4:	4603      	mov	r3, r0
 800cbd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cbd8:	7bfb      	ldrb	r3, [r7, #15]
 800cbda:	4618      	mov	r0, r3
 800cbdc:	f000 f958 	bl	800ce90 <USBD_Get_USB_Status>
 800cbe0:	4603      	mov	r3, r0
 800cbe2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cbe4:	7bbb      	ldrb	r3, [r7, #14]
}
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	3710      	adds	r7, #16
 800cbea:	46bd      	mov	sp, r7
 800cbec:	bd80      	pop	{r7, pc}

0800cbee <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cbee:	b580      	push	{r7, lr}
 800cbf0:	b084      	sub	sp, #16
 800cbf2:	af00      	add	r7, sp, #0
 800cbf4:	6078      	str	r0, [r7, #4]
 800cbf6:	460b      	mov	r3, r1
 800cbf8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbfe:	2300      	movs	r3, #0
 800cc00:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800cc08:	78fa      	ldrb	r2, [r7, #3]
 800cc0a:	4611      	mov	r1, r2
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	f7f7 f8a0 	bl	8003d52 <HAL_PCD_EP_Close>
 800cc12:	4603      	mov	r3, r0
 800cc14:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc16:	7bfb      	ldrb	r3, [r7, #15]
 800cc18:	4618      	mov	r0, r3
 800cc1a:	f000 f939 	bl	800ce90 <USBD_Get_USB_Status>
 800cc1e:	4603      	mov	r3, r0
 800cc20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc22:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc24:	4618      	mov	r0, r3
 800cc26:	3710      	adds	r7, #16
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	bd80      	pop	{r7, pc}

0800cc2c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b084      	sub	sp, #16
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
 800cc34:	460b      	mov	r3, r1
 800cc36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc38:	2300      	movs	r3, #0
 800cc3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800cc46:	78fa      	ldrb	r2, [r7, #3]
 800cc48:	4611      	mov	r1, r2
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	f7f7 f949 	bl	8003ee2 <HAL_PCD_EP_SetStall>
 800cc50:	4603      	mov	r3, r0
 800cc52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc54:	7bfb      	ldrb	r3, [r7, #15]
 800cc56:	4618      	mov	r0, r3
 800cc58:	f000 f91a 	bl	800ce90 <USBD_Get_USB_Status>
 800cc5c:	4603      	mov	r3, r0
 800cc5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc60:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc62:	4618      	mov	r0, r3
 800cc64:	3710      	adds	r7, #16
 800cc66:	46bd      	mov	sp, r7
 800cc68:	bd80      	pop	{r7, pc}

0800cc6a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc6a:	b580      	push	{r7, lr}
 800cc6c:	b084      	sub	sp, #16
 800cc6e:	af00      	add	r7, sp, #0
 800cc70:	6078      	str	r0, [r7, #4]
 800cc72:	460b      	mov	r3, r1
 800cc74:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc76:	2300      	movs	r3, #0
 800cc78:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800cc84:	78fa      	ldrb	r2, [r7, #3]
 800cc86:	4611      	mov	r1, r2
 800cc88:	4618      	mov	r0, r3
 800cc8a:	f7f7 f97c 	bl	8003f86 <HAL_PCD_EP_ClrStall>
 800cc8e:	4603      	mov	r3, r0
 800cc90:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc92:	7bfb      	ldrb	r3, [r7, #15]
 800cc94:	4618      	mov	r0, r3
 800cc96:	f000 f8fb 	bl	800ce90 <USBD_Get_USB_Status>
 800cc9a:	4603      	mov	r3, r0
 800cc9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc9e:	7bbb      	ldrb	r3, [r7, #14]
}
 800cca0:	4618      	mov	r0, r3
 800cca2:	3710      	adds	r7, #16
 800cca4:	46bd      	mov	sp, r7
 800cca6:	bd80      	pop	{r7, pc}

0800cca8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cca8:	b480      	push	{r7}
 800ccaa:	b085      	sub	sp, #20
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
 800ccb0:	460b      	mov	r3, r1
 800ccb2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ccba:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ccbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	da0b      	bge.n	800ccdc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ccc4:	78fb      	ldrb	r3, [r7, #3]
 800ccc6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ccca:	68f9      	ldr	r1, [r7, #12]
 800cccc:	4613      	mov	r3, r2
 800ccce:	009b      	lsls	r3, r3, #2
 800ccd0:	4413      	add	r3, r2
 800ccd2:	00db      	lsls	r3, r3, #3
 800ccd4:	440b      	add	r3, r1
 800ccd6:	3312      	adds	r3, #18
 800ccd8:	781b      	ldrb	r3, [r3, #0]
 800ccda:	e00b      	b.n	800ccf4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ccdc:	78fb      	ldrb	r3, [r7, #3]
 800ccde:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cce2:	68f9      	ldr	r1, [r7, #12]
 800cce4:	4613      	mov	r3, r2
 800cce6:	009b      	lsls	r3, r3, #2
 800cce8:	4413      	add	r3, r2
 800ccea:	00db      	lsls	r3, r3, #3
 800ccec:	440b      	add	r3, r1
 800ccee:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800ccf2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	3714      	adds	r7, #20
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfe:	4770      	bx	lr

0800cd00 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cd00:	b580      	push	{r7, lr}
 800cd02:	b084      	sub	sp, #16
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	6078      	str	r0, [r7, #4]
 800cd08:	460b      	mov	r3, r1
 800cd0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd10:	2300      	movs	r3, #0
 800cd12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800cd1a:	78fa      	ldrb	r2, [r7, #3]
 800cd1c:	4611      	mov	r1, r2
 800cd1e:	4618      	mov	r0, r3
 800cd20:	f7f6 ff96 	bl	8003c50 <HAL_PCD_SetAddress>
 800cd24:	4603      	mov	r3, r0
 800cd26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd28:	7bfb      	ldrb	r3, [r7, #15]
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	f000 f8b0 	bl	800ce90 <USBD_Get_USB_Status>
 800cd30:	4603      	mov	r3, r0
 800cd32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd34:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd36:	4618      	mov	r0, r3
 800cd38:	3710      	adds	r7, #16
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	bd80      	pop	{r7, pc}

0800cd3e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cd3e:	b580      	push	{r7, lr}
 800cd40:	b086      	sub	sp, #24
 800cd42:	af00      	add	r7, sp, #0
 800cd44:	60f8      	str	r0, [r7, #12]
 800cd46:	607a      	str	r2, [r7, #4]
 800cd48:	603b      	str	r3, [r7, #0]
 800cd4a:	460b      	mov	r3, r1
 800cd4c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd4e:	2300      	movs	r3, #0
 800cd50:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd52:	2300      	movs	r3, #0
 800cd54:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800cd5c:	7af9      	ldrb	r1, [r7, #11]
 800cd5e:	683b      	ldr	r3, [r7, #0]
 800cd60:	687a      	ldr	r2, [r7, #4]
 800cd62:	f7f7 f887 	bl	8003e74 <HAL_PCD_EP_Transmit>
 800cd66:	4603      	mov	r3, r0
 800cd68:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd6a:	7dfb      	ldrb	r3, [r7, #23]
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	f000 f88f 	bl	800ce90 <USBD_Get_USB_Status>
 800cd72:	4603      	mov	r3, r0
 800cd74:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cd76:	7dbb      	ldrb	r3, [r7, #22]
}
 800cd78:	4618      	mov	r0, r3
 800cd7a:	3718      	adds	r7, #24
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	bd80      	pop	{r7, pc}

0800cd80 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b086      	sub	sp, #24
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	60f8      	str	r0, [r7, #12]
 800cd88:	607a      	str	r2, [r7, #4]
 800cd8a:	603b      	str	r3, [r7, #0]
 800cd8c:	460b      	mov	r3, r1
 800cd8e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd90:	2300      	movs	r3, #0
 800cd92:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd94:	2300      	movs	r3, #0
 800cd96:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800cd9e:	7af9      	ldrb	r1, [r7, #11]
 800cda0:	683b      	ldr	r3, [r7, #0]
 800cda2:	687a      	ldr	r2, [r7, #4]
 800cda4:	f7f7 f81d 	bl	8003de2 <HAL_PCD_EP_Receive>
 800cda8:	4603      	mov	r3, r0
 800cdaa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cdac:	7dfb      	ldrb	r3, [r7, #23]
 800cdae:	4618      	mov	r0, r3
 800cdb0:	f000 f86e 	bl	800ce90 <USBD_Get_USB_Status>
 800cdb4:	4603      	mov	r3, r0
 800cdb6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cdb8:	7dbb      	ldrb	r3, [r7, #22]
}
 800cdba:	4618      	mov	r0, r3
 800cdbc:	3718      	adds	r7, #24
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	bd80      	pop	{r7, pc}

0800cdc2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cdc2:	b580      	push	{r7, lr}
 800cdc4:	b082      	sub	sp, #8
 800cdc6:	af00      	add	r7, sp, #0
 800cdc8:	6078      	str	r0, [r7, #4]
 800cdca:	460b      	mov	r3, r1
 800cdcc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800cdd4:	78fa      	ldrb	r2, [r7, #3]
 800cdd6:	4611      	mov	r1, r2
 800cdd8:	4618      	mov	r0, r3
 800cdda:	f7f7 f833 	bl	8003e44 <HAL_PCD_EP_GetRxCount>
 800cdde:	4603      	mov	r3, r0
}
 800cde0:	4618      	mov	r0, r3
 800cde2:	3708      	adds	r7, #8
 800cde4:	46bd      	mov	sp, r7
 800cde6:	bd80      	pop	{r7, pc}

0800cde8 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b082      	sub	sp, #8
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
 800cdf0:	460b      	mov	r3, r1
 800cdf2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800cdf4:	78fb      	ldrb	r3, [r7, #3]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d002      	beq.n	800ce00 <HAL_PCDEx_LPM_Callback+0x18>
 800cdfa:	2b01      	cmp	r3, #1
 800cdfc:	d013      	beq.n	800ce26 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800cdfe:	e023      	b.n	800ce48 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	7a5b      	ldrb	r3, [r3, #9]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d007      	beq.n	800ce18 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800ce08:	f000 f83c 	bl	800ce84 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ce0c:	4b10      	ldr	r3, [pc, #64]	@ (800ce50 <HAL_PCDEx_LPM_Callback+0x68>)
 800ce0e:	691b      	ldr	r3, [r3, #16]
 800ce10:	4a0f      	ldr	r2, [pc, #60]	@ (800ce50 <HAL_PCDEx_LPM_Callback+0x68>)
 800ce12:	f023 0306 	bic.w	r3, r3, #6
 800ce16:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ce1e:	4618      	mov	r0, r3
 800ce20:	f7fe fc9c 	bl	800b75c <USBD_LL_Resume>
    break;
 800ce24:	e010      	b.n	800ce48 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	f7fe fc7f 	bl	800b730 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	7a5b      	ldrb	r3, [r3, #9]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d005      	beq.n	800ce46 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ce3a:	4b05      	ldr	r3, [pc, #20]	@ (800ce50 <HAL_PCDEx_LPM_Callback+0x68>)
 800ce3c:	691b      	ldr	r3, [r3, #16]
 800ce3e:	4a04      	ldr	r2, [pc, #16]	@ (800ce50 <HAL_PCDEx_LPM_Callback+0x68>)
 800ce40:	f043 0306 	orr.w	r3, r3, #6
 800ce44:	6113      	str	r3, [r2, #16]
    break;
 800ce46:	bf00      	nop
}
 800ce48:	bf00      	nop
 800ce4a:	3708      	adds	r7, #8
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	bd80      	pop	{r7, pc}
 800ce50:	e000ed00 	.word	0xe000ed00

0800ce54 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ce54:	b480      	push	{r7}
 800ce56:	b083      	sub	sp, #12
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ce5c:	4b03      	ldr	r3, [pc, #12]	@ (800ce6c <USBD_static_malloc+0x18>)
}
 800ce5e:	4618      	mov	r0, r3
 800ce60:	370c      	adds	r7, #12
 800ce62:	46bd      	mov	sp, r7
 800ce64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce68:	4770      	bx	lr
 800ce6a:	bf00      	nop
 800ce6c:	200041e0 	.word	0x200041e0

0800ce70 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ce70:	b480      	push	{r7}
 800ce72:	b083      	sub	sp, #12
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]

}
 800ce78:	bf00      	nop
 800ce7a:	370c      	adds	r7, #12
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce82:	4770      	bx	lr

0800ce84 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800ce88:	f7f3 fab0 	bl	80003ec <SystemClock_Config>
}
 800ce8c:	bf00      	nop
 800ce8e:	bd80      	pop	{r7, pc}

0800ce90 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ce90:	b480      	push	{r7}
 800ce92:	b085      	sub	sp, #20
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	4603      	mov	r3, r0
 800ce98:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ce9e:	79fb      	ldrb	r3, [r7, #7]
 800cea0:	2b03      	cmp	r3, #3
 800cea2:	d817      	bhi.n	800ced4 <USBD_Get_USB_Status+0x44>
 800cea4:	a201      	add	r2, pc, #4	@ (adr r2, 800ceac <USBD_Get_USB_Status+0x1c>)
 800cea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ceaa:	bf00      	nop
 800ceac:	0800cebd 	.word	0x0800cebd
 800ceb0:	0800cec3 	.word	0x0800cec3
 800ceb4:	0800cec9 	.word	0x0800cec9
 800ceb8:	0800cecf 	.word	0x0800cecf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cebc:	2300      	movs	r3, #0
 800cebe:	73fb      	strb	r3, [r7, #15]
    break;
 800cec0:	e00b      	b.n	800ceda <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cec2:	2303      	movs	r3, #3
 800cec4:	73fb      	strb	r3, [r7, #15]
    break;
 800cec6:	e008      	b.n	800ceda <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cec8:	2301      	movs	r3, #1
 800ceca:	73fb      	strb	r3, [r7, #15]
    break;
 800cecc:	e005      	b.n	800ceda <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cece:	2303      	movs	r3, #3
 800ced0:	73fb      	strb	r3, [r7, #15]
    break;
 800ced2:	e002      	b.n	800ceda <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ced4:	2303      	movs	r3, #3
 800ced6:	73fb      	strb	r3, [r7, #15]
    break;
 800ced8:	bf00      	nop
  }
  return usb_status;
 800ceda:	7bfb      	ldrb	r3, [r7, #15]
}
 800cedc:	4618      	mov	r0, r3
 800cede:	3714      	adds	r7, #20
 800cee0:	46bd      	mov	sp, r7
 800cee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee6:	4770      	bx	lr

0800cee8 <siprintf>:
 800cee8:	b40e      	push	{r1, r2, r3}
 800ceea:	b500      	push	{lr}
 800ceec:	b09c      	sub	sp, #112	@ 0x70
 800ceee:	ab1d      	add	r3, sp, #116	@ 0x74
 800cef0:	9002      	str	r0, [sp, #8]
 800cef2:	9006      	str	r0, [sp, #24]
 800cef4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800cef8:	4809      	ldr	r0, [pc, #36]	@ (800cf20 <siprintf+0x38>)
 800cefa:	9107      	str	r1, [sp, #28]
 800cefc:	9104      	str	r1, [sp, #16]
 800cefe:	4909      	ldr	r1, [pc, #36]	@ (800cf24 <siprintf+0x3c>)
 800cf00:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf04:	9105      	str	r1, [sp, #20]
 800cf06:	6800      	ldr	r0, [r0, #0]
 800cf08:	9301      	str	r3, [sp, #4]
 800cf0a:	a902      	add	r1, sp, #8
 800cf0c:	f000 f994 	bl	800d238 <_svfiprintf_r>
 800cf10:	9b02      	ldr	r3, [sp, #8]
 800cf12:	2200      	movs	r2, #0
 800cf14:	701a      	strb	r2, [r3, #0]
 800cf16:	b01c      	add	sp, #112	@ 0x70
 800cf18:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf1c:	b003      	add	sp, #12
 800cf1e:	4770      	bx	lr
 800cf20:	20000184 	.word	0x20000184
 800cf24:	ffff0208 	.word	0xffff0208

0800cf28 <memset>:
 800cf28:	4402      	add	r2, r0
 800cf2a:	4603      	mov	r3, r0
 800cf2c:	4293      	cmp	r3, r2
 800cf2e:	d100      	bne.n	800cf32 <memset+0xa>
 800cf30:	4770      	bx	lr
 800cf32:	f803 1b01 	strb.w	r1, [r3], #1
 800cf36:	e7f9      	b.n	800cf2c <memset+0x4>

0800cf38 <__errno>:
 800cf38:	4b01      	ldr	r3, [pc, #4]	@ (800cf40 <__errno+0x8>)
 800cf3a:	6818      	ldr	r0, [r3, #0]
 800cf3c:	4770      	bx	lr
 800cf3e:	bf00      	nop
 800cf40:	20000184 	.word	0x20000184

0800cf44 <__libc_init_array>:
 800cf44:	b570      	push	{r4, r5, r6, lr}
 800cf46:	4d0d      	ldr	r5, [pc, #52]	@ (800cf7c <__libc_init_array+0x38>)
 800cf48:	4c0d      	ldr	r4, [pc, #52]	@ (800cf80 <__libc_init_array+0x3c>)
 800cf4a:	1b64      	subs	r4, r4, r5
 800cf4c:	10a4      	asrs	r4, r4, #2
 800cf4e:	2600      	movs	r6, #0
 800cf50:	42a6      	cmp	r6, r4
 800cf52:	d109      	bne.n	800cf68 <__libc_init_array+0x24>
 800cf54:	4d0b      	ldr	r5, [pc, #44]	@ (800cf84 <__libc_init_array+0x40>)
 800cf56:	4c0c      	ldr	r4, [pc, #48]	@ (800cf88 <__libc_init_array+0x44>)
 800cf58:	f000 fc66 	bl	800d828 <_init>
 800cf5c:	1b64      	subs	r4, r4, r5
 800cf5e:	10a4      	asrs	r4, r4, #2
 800cf60:	2600      	movs	r6, #0
 800cf62:	42a6      	cmp	r6, r4
 800cf64:	d105      	bne.n	800cf72 <__libc_init_array+0x2e>
 800cf66:	bd70      	pop	{r4, r5, r6, pc}
 800cf68:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf6c:	4798      	blx	r3
 800cf6e:	3601      	adds	r6, #1
 800cf70:	e7ee      	b.n	800cf50 <__libc_init_array+0xc>
 800cf72:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf76:	4798      	blx	r3
 800cf78:	3601      	adds	r6, #1
 800cf7a:	e7f2      	b.n	800cf62 <__libc_init_array+0x1e>
 800cf7c:	0800d8f8 	.word	0x0800d8f8
 800cf80:	0800d8f8 	.word	0x0800d8f8
 800cf84:	0800d8f8 	.word	0x0800d8f8
 800cf88:	0800d8fc 	.word	0x0800d8fc

0800cf8c <__retarget_lock_acquire_recursive>:
 800cf8c:	4770      	bx	lr

0800cf8e <__retarget_lock_release_recursive>:
 800cf8e:	4770      	bx	lr

0800cf90 <_free_r>:
 800cf90:	b538      	push	{r3, r4, r5, lr}
 800cf92:	4605      	mov	r5, r0
 800cf94:	2900      	cmp	r1, #0
 800cf96:	d041      	beq.n	800d01c <_free_r+0x8c>
 800cf98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf9c:	1f0c      	subs	r4, r1, #4
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	bfb8      	it	lt
 800cfa2:	18e4      	addlt	r4, r4, r3
 800cfa4:	f000 f8e0 	bl	800d168 <__malloc_lock>
 800cfa8:	4a1d      	ldr	r2, [pc, #116]	@ (800d020 <_free_r+0x90>)
 800cfaa:	6813      	ldr	r3, [r2, #0]
 800cfac:	b933      	cbnz	r3, 800cfbc <_free_r+0x2c>
 800cfae:	6063      	str	r3, [r4, #4]
 800cfb0:	6014      	str	r4, [r2, #0]
 800cfb2:	4628      	mov	r0, r5
 800cfb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cfb8:	f000 b8dc 	b.w	800d174 <__malloc_unlock>
 800cfbc:	42a3      	cmp	r3, r4
 800cfbe:	d908      	bls.n	800cfd2 <_free_r+0x42>
 800cfc0:	6820      	ldr	r0, [r4, #0]
 800cfc2:	1821      	adds	r1, r4, r0
 800cfc4:	428b      	cmp	r3, r1
 800cfc6:	bf01      	itttt	eq
 800cfc8:	6819      	ldreq	r1, [r3, #0]
 800cfca:	685b      	ldreq	r3, [r3, #4]
 800cfcc:	1809      	addeq	r1, r1, r0
 800cfce:	6021      	streq	r1, [r4, #0]
 800cfd0:	e7ed      	b.n	800cfae <_free_r+0x1e>
 800cfd2:	461a      	mov	r2, r3
 800cfd4:	685b      	ldr	r3, [r3, #4]
 800cfd6:	b10b      	cbz	r3, 800cfdc <_free_r+0x4c>
 800cfd8:	42a3      	cmp	r3, r4
 800cfda:	d9fa      	bls.n	800cfd2 <_free_r+0x42>
 800cfdc:	6811      	ldr	r1, [r2, #0]
 800cfde:	1850      	adds	r0, r2, r1
 800cfe0:	42a0      	cmp	r0, r4
 800cfe2:	d10b      	bne.n	800cffc <_free_r+0x6c>
 800cfe4:	6820      	ldr	r0, [r4, #0]
 800cfe6:	4401      	add	r1, r0
 800cfe8:	1850      	adds	r0, r2, r1
 800cfea:	4283      	cmp	r3, r0
 800cfec:	6011      	str	r1, [r2, #0]
 800cfee:	d1e0      	bne.n	800cfb2 <_free_r+0x22>
 800cff0:	6818      	ldr	r0, [r3, #0]
 800cff2:	685b      	ldr	r3, [r3, #4]
 800cff4:	6053      	str	r3, [r2, #4]
 800cff6:	4408      	add	r0, r1
 800cff8:	6010      	str	r0, [r2, #0]
 800cffa:	e7da      	b.n	800cfb2 <_free_r+0x22>
 800cffc:	d902      	bls.n	800d004 <_free_r+0x74>
 800cffe:	230c      	movs	r3, #12
 800d000:	602b      	str	r3, [r5, #0]
 800d002:	e7d6      	b.n	800cfb2 <_free_r+0x22>
 800d004:	6820      	ldr	r0, [r4, #0]
 800d006:	1821      	adds	r1, r4, r0
 800d008:	428b      	cmp	r3, r1
 800d00a:	bf04      	itt	eq
 800d00c:	6819      	ldreq	r1, [r3, #0]
 800d00e:	685b      	ldreq	r3, [r3, #4]
 800d010:	6063      	str	r3, [r4, #4]
 800d012:	bf04      	itt	eq
 800d014:	1809      	addeq	r1, r1, r0
 800d016:	6021      	streq	r1, [r4, #0]
 800d018:	6054      	str	r4, [r2, #4]
 800d01a:	e7ca      	b.n	800cfb2 <_free_r+0x22>
 800d01c:	bd38      	pop	{r3, r4, r5, pc}
 800d01e:	bf00      	nop
 800d020:	20004544 	.word	0x20004544

0800d024 <sbrk_aligned>:
 800d024:	b570      	push	{r4, r5, r6, lr}
 800d026:	4e0f      	ldr	r6, [pc, #60]	@ (800d064 <sbrk_aligned+0x40>)
 800d028:	460c      	mov	r4, r1
 800d02a:	6831      	ldr	r1, [r6, #0]
 800d02c:	4605      	mov	r5, r0
 800d02e:	b911      	cbnz	r1, 800d036 <sbrk_aligned+0x12>
 800d030:	f000 fba6 	bl	800d780 <_sbrk_r>
 800d034:	6030      	str	r0, [r6, #0]
 800d036:	4621      	mov	r1, r4
 800d038:	4628      	mov	r0, r5
 800d03a:	f000 fba1 	bl	800d780 <_sbrk_r>
 800d03e:	1c43      	adds	r3, r0, #1
 800d040:	d103      	bne.n	800d04a <sbrk_aligned+0x26>
 800d042:	f04f 34ff 	mov.w	r4, #4294967295
 800d046:	4620      	mov	r0, r4
 800d048:	bd70      	pop	{r4, r5, r6, pc}
 800d04a:	1cc4      	adds	r4, r0, #3
 800d04c:	f024 0403 	bic.w	r4, r4, #3
 800d050:	42a0      	cmp	r0, r4
 800d052:	d0f8      	beq.n	800d046 <sbrk_aligned+0x22>
 800d054:	1a21      	subs	r1, r4, r0
 800d056:	4628      	mov	r0, r5
 800d058:	f000 fb92 	bl	800d780 <_sbrk_r>
 800d05c:	3001      	adds	r0, #1
 800d05e:	d1f2      	bne.n	800d046 <sbrk_aligned+0x22>
 800d060:	e7ef      	b.n	800d042 <sbrk_aligned+0x1e>
 800d062:	bf00      	nop
 800d064:	20004540 	.word	0x20004540

0800d068 <_malloc_r>:
 800d068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d06c:	1ccd      	adds	r5, r1, #3
 800d06e:	f025 0503 	bic.w	r5, r5, #3
 800d072:	3508      	adds	r5, #8
 800d074:	2d0c      	cmp	r5, #12
 800d076:	bf38      	it	cc
 800d078:	250c      	movcc	r5, #12
 800d07a:	2d00      	cmp	r5, #0
 800d07c:	4606      	mov	r6, r0
 800d07e:	db01      	blt.n	800d084 <_malloc_r+0x1c>
 800d080:	42a9      	cmp	r1, r5
 800d082:	d904      	bls.n	800d08e <_malloc_r+0x26>
 800d084:	230c      	movs	r3, #12
 800d086:	6033      	str	r3, [r6, #0]
 800d088:	2000      	movs	r0, #0
 800d08a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d08e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d164 <_malloc_r+0xfc>
 800d092:	f000 f869 	bl	800d168 <__malloc_lock>
 800d096:	f8d8 3000 	ldr.w	r3, [r8]
 800d09a:	461c      	mov	r4, r3
 800d09c:	bb44      	cbnz	r4, 800d0f0 <_malloc_r+0x88>
 800d09e:	4629      	mov	r1, r5
 800d0a0:	4630      	mov	r0, r6
 800d0a2:	f7ff ffbf 	bl	800d024 <sbrk_aligned>
 800d0a6:	1c43      	adds	r3, r0, #1
 800d0a8:	4604      	mov	r4, r0
 800d0aa:	d158      	bne.n	800d15e <_malloc_r+0xf6>
 800d0ac:	f8d8 4000 	ldr.w	r4, [r8]
 800d0b0:	4627      	mov	r7, r4
 800d0b2:	2f00      	cmp	r7, #0
 800d0b4:	d143      	bne.n	800d13e <_malloc_r+0xd6>
 800d0b6:	2c00      	cmp	r4, #0
 800d0b8:	d04b      	beq.n	800d152 <_malloc_r+0xea>
 800d0ba:	6823      	ldr	r3, [r4, #0]
 800d0bc:	4639      	mov	r1, r7
 800d0be:	4630      	mov	r0, r6
 800d0c0:	eb04 0903 	add.w	r9, r4, r3
 800d0c4:	f000 fb5c 	bl	800d780 <_sbrk_r>
 800d0c8:	4581      	cmp	r9, r0
 800d0ca:	d142      	bne.n	800d152 <_malloc_r+0xea>
 800d0cc:	6821      	ldr	r1, [r4, #0]
 800d0ce:	1a6d      	subs	r5, r5, r1
 800d0d0:	4629      	mov	r1, r5
 800d0d2:	4630      	mov	r0, r6
 800d0d4:	f7ff ffa6 	bl	800d024 <sbrk_aligned>
 800d0d8:	3001      	adds	r0, #1
 800d0da:	d03a      	beq.n	800d152 <_malloc_r+0xea>
 800d0dc:	6823      	ldr	r3, [r4, #0]
 800d0de:	442b      	add	r3, r5
 800d0e0:	6023      	str	r3, [r4, #0]
 800d0e2:	f8d8 3000 	ldr.w	r3, [r8]
 800d0e6:	685a      	ldr	r2, [r3, #4]
 800d0e8:	bb62      	cbnz	r2, 800d144 <_malloc_r+0xdc>
 800d0ea:	f8c8 7000 	str.w	r7, [r8]
 800d0ee:	e00f      	b.n	800d110 <_malloc_r+0xa8>
 800d0f0:	6822      	ldr	r2, [r4, #0]
 800d0f2:	1b52      	subs	r2, r2, r5
 800d0f4:	d420      	bmi.n	800d138 <_malloc_r+0xd0>
 800d0f6:	2a0b      	cmp	r2, #11
 800d0f8:	d917      	bls.n	800d12a <_malloc_r+0xc2>
 800d0fa:	1961      	adds	r1, r4, r5
 800d0fc:	42a3      	cmp	r3, r4
 800d0fe:	6025      	str	r5, [r4, #0]
 800d100:	bf18      	it	ne
 800d102:	6059      	strne	r1, [r3, #4]
 800d104:	6863      	ldr	r3, [r4, #4]
 800d106:	bf08      	it	eq
 800d108:	f8c8 1000 	streq.w	r1, [r8]
 800d10c:	5162      	str	r2, [r4, r5]
 800d10e:	604b      	str	r3, [r1, #4]
 800d110:	4630      	mov	r0, r6
 800d112:	f000 f82f 	bl	800d174 <__malloc_unlock>
 800d116:	f104 000b 	add.w	r0, r4, #11
 800d11a:	1d23      	adds	r3, r4, #4
 800d11c:	f020 0007 	bic.w	r0, r0, #7
 800d120:	1ac2      	subs	r2, r0, r3
 800d122:	bf1c      	itt	ne
 800d124:	1a1b      	subne	r3, r3, r0
 800d126:	50a3      	strne	r3, [r4, r2]
 800d128:	e7af      	b.n	800d08a <_malloc_r+0x22>
 800d12a:	6862      	ldr	r2, [r4, #4]
 800d12c:	42a3      	cmp	r3, r4
 800d12e:	bf0c      	ite	eq
 800d130:	f8c8 2000 	streq.w	r2, [r8]
 800d134:	605a      	strne	r2, [r3, #4]
 800d136:	e7eb      	b.n	800d110 <_malloc_r+0xa8>
 800d138:	4623      	mov	r3, r4
 800d13a:	6864      	ldr	r4, [r4, #4]
 800d13c:	e7ae      	b.n	800d09c <_malloc_r+0x34>
 800d13e:	463c      	mov	r4, r7
 800d140:	687f      	ldr	r7, [r7, #4]
 800d142:	e7b6      	b.n	800d0b2 <_malloc_r+0x4a>
 800d144:	461a      	mov	r2, r3
 800d146:	685b      	ldr	r3, [r3, #4]
 800d148:	42a3      	cmp	r3, r4
 800d14a:	d1fb      	bne.n	800d144 <_malloc_r+0xdc>
 800d14c:	2300      	movs	r3, #0
 800d14e:	6053      	str	r3, [r2, #4]
 800d150:	e7de      	b.n	800d110 <_malloc_r+0xa8>
 800d152:	230c      	movs	r3, #12
 800d154:	6033      	str	r3, [r6, #0]
 800d156:	4630      	mov	r0, r6
 800d158:	f000 f80c 	bl	800d174 <__malloc_unlock>
 800d15c:	e794      	b.n	800d088 <_malloc_r+0x20>
 800d15e:	6005      	str	r5, [r0, #0]
 800d160:	e7d6      	b.n	800d110 <_malloc_r+0xa8>
 800d162:	bf00      	nop
 800d164:	20004544 	.word	0x20004544

0800d168 <__malloc_lock>:
 800d168:	4801      	ldr	r0, [pc, #4]	@ (800d170 <__malloc_lock+0x8>)
 800d16a:	f7ff bf0f 	b.w	800cf8c <__retarget_lock_acquire_recursive>
 800d16e:	bf00      	nop
 800d170:	2000453c 	.word	0x2000453c

0800d174 <__malloc_unlock>:
 800d174:	4801      	ldr	r0, [pc, #4]	@ (800d17c <__malloc_unlock+0x8>)
 800d176:	f7ff bf0a 	b.w	800cf8e <__retarget_lock_release_recursive>
 800d17a:	bf00      	nop
 800d17c:	2000453c 	.word	0x2000453c

0800d180 <__ssputs_r>:
 800d180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d184:	688e      	ldr	r6, [r1, #8]
 800d186:	461f      	mov	r7, r3
 800d188:	42be      	cmp	r6, r7
 800d18a:	680b      	ldr	r3, [r1, #0]
 800d18c:	4682      	mov	sl, r0
 800d18e:	460c      	mov	r4, r1
 800d190:	4690      	mov	r8, r2
 800d192:	d82d      	bhi.n	800d1f0 <__ssputs_r+0x70>
 800d194:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d198:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d19c:	d026      	beq.n	800d1ec <__ssputs_r+0x6c>
 800d19e:	6965      	ldr	r5, [r4, #20]
 800d1a0:	6909      	ldr	r1, [r1, #16]
 800d1a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d1a6:	eba3 0901 	sub.w	r9, r3, r1
 800d1aa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d1ae:	1c7b      	adds	r3, r7, #1
 800d1b0:	444b      	add	r3, r9
 800d1b2:	106d      	asrs	r5, r5, #1
 800d1b4:	429d      	cmp	r5, r3
 800d1b6:	bf38      	it	cc
 800d1b8:	461d      	movcc	r5, r3
 800d1ba:	0553      	lsls	r3, r2, #21
 800d1bc:	d527      	bpl.n	800d20e <__ssputs_r+0x8e>
 800d1be:	4629      	mov	r1, r5
 800d1c0:	f7ff ff52 	bl	800d068 <_malloc_r>
 800d1c4:	4606      	mov	r6, r0
 800d1c6:	b360      	cbz	r0, 800d222 <__ssputs_r+0xa2>
 800d1c8:	6921      	ldr	r1, [r4, #16]
 800d1ca:	464a      	mov	r2, r9
 800d1cc:	f000 fae8 	bl	800d7a0 <memcpy>
 800d1d0:	89a3      	ldrh	r3, [r4, #12]
 800d1d2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d1d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d1da:	81a3      	strh	r3, [r4, #12]
 800d1dc:	6126      	str	r6, [r4, #16]
 800d1de:	6165      	str	r5, [r4, #20]
 800d1e0:	444e      	add	r6, r9
 800d1e2:	eba5 0509 	sub.w	r5, r5, r9
 800d1e6:	6026      	str	r6, [r4, #0]
 800d1e8:	60a5      	str	r5, [r4, #8]
 800d1ea:	463e      	mov	r6, r7
 800d1ec:	42be      	cmp	r6, r7
 800d1ee:	d900      	bls.n	800d1f2 <__ssputs_r+0x72>
 800d1f0:	463e      	mov	r6, r7
 800d1f2:	6820      	ldr	r0, [r4, #0]
 800d1f4:	4632      	mov	r2, r6
 800d1f6:	4641      	mov	r1, r8
 800d1f8:	f000 faa8 	bl	800d74c <memmove>
 800d1fc:	68a3      	ldr	r3, [r4, #8]
 800d1fe:	1b9b      	subs	r3, r3, r6
 800d200:	60a3      	str	r3, [r4, #8]
 800d202:	6823      	ldr	r3, [r4, #0]
 800d204:	4433      	add	r3, r6
 800d206:	6023      	str	r3, [r4, #0]
 800d208:	2000      	movs	r0, #0
 800d20a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d20e:	462a      	mov	r2, r5
 800d210:	f000 fad4 	bl	800d7bc <_realloc_r>
 800d214:	4606      	mov	r6, r0
 800d216:	2800      	cmp	r0, #0
 800d218:	d1e0      	bne.n	800d1dc <__ssputs_r+0x5c>
 800d21a:	6921      	ldr	r1, [r4, #16]
 800d21c:	4650      	mov	r0, sl
 800d21e:	f7ff feb7 	bl	800cf90 <_free_r>
 800d222:	230c      	movs	r3, #12
 800d224:	f8ca 3000 	str.w	r3, [sl]
 800d228:	89a3      	ldrh	r3, [r4, #12]
 800d22a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d22e:	81a3      	strh	r3, [r4, #12]
 800d230:	f04f 30ff 	mov.w	r0, #4294967295
 800d234:	e7e9      	b.n	800d20a <__ssputs_r+0x8a>
	...

0800d238 <_svfiprintf_r>:
 800d238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d23c:	4698      	mov	r8, r3
 800d23e:	898b      	ldrh	r3, [r1, #12]
 800d240:	061b      	lsls	r3, r3, #24
 800d242:	b09d      	sub	sp, #116	@ 0x74
 800d244:	4607      	mov	r7, r0
 800d246:	460d      	mov	r5, r1
 800d248:	4614      	mov	r4, r2
 800d24a:	d510      	bpl.n	800d26e <_svfiprintf_r+0x36>
 800d24c:	690b      	ldr	r3, [r1, #16]
 800d24e:	b973      	cbnz	r3, 800d26e <_svfiprintf_r+0x36>
 800d250:	2140      	movs	r1, #64	@ 0x40
 800d252:	f7ff ff09 	bl	800d068 <_malloc_r>
 800d256:	6028      	str	r0, [r5, #0]
 800d258:	6128      	str	r0, [r5, #16]
 800d25a:	b930      	cbnz	r0, 800d26a <_svfiprintf_r+0x32>
 800d25c:	230c      	movs	r3, #12
 800d25e:	603b      	str	r3, [r7, #0]
 800d260:	f04f 30ff 	mov.w	r0, #4294967295
 800d264:	b01d      	add	sp, #116	@ 0x74
 800d266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d26a:	2340      	movs	r3, #64	@ 0x40
 800d26c:	616b      	str	r3, [r5, #20]
 800d26e:	2300      	movs	r3, #0
 800d270:	9309      	str	r3, [sp, #36]	@ 0x24
 800d272:	2320      	movs	r3, #32
 800d274:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d278:	f8cd 800c 	str.w	r8, [sp, #12]
 800d27c:	2330      	movs	r3, #48	@ 0x30
 800d27e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d41c <_svfiprintf_r+0x1e4>
 800d282:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d286:	f04f 0901 	mov.w	r9, #1
 800d28a:	4623      	mov	r3, r4
 800d28c:	469a      	mov	sl, r3
 800d28e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d292:	b10a      	cbz	r2, 800d298 <_svfiprintf_r+0x60>
 800d294:	2a25      	cmp	r2, #37	@ 0x25
 800d296:	d1f9      	bne.n	800d28c <_svfiprintf_r+0x54>
 800d298:	ebba 0b04 	subs.w	fp, sl, r4
 800d29c:	d00b      	beq.n	800d2b6 <_svfiprintf_r+0x7e>
 800d29e:	465b      	mov	r3, fp
 800d2a0:	4622      	mov	r2, r4
 800d2a2:	4629      	mov	r1, r5
 800d2a4:	4638      	mov	r0, r7
 800d2a6:	f7ff ff6b 	bl	800d180 <__ssputs_r>
 800d2aa:	3001      	adds	r0, #1
 800d2ac:	f000 80a7 	beq.w	800d3fe <_svfiprintf_r+0x1c6>
 800d2b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d2b2:	445a      	add	r2, fp
 800d2b4:	9209      	str	r2, [sp, #36]	@ 0x24
 800d2b6:	f89a 3000 	ldrb.w	r3, [sl]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	f000 809f 	beq.w	800d3fe <_svfiprintf_r+0x1c6>
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	f04f 32ff 	mov.w	r2, #4294967295
 800d2c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d2ca:	f10a 0a01 	add.w	sl, sl, #1
 800d2ce:	9304      	str	r3, [sp, #16]
 800d2d0:	9307      	str	r3, [sp, #28]
 800d2d2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d2d6:	931a      	str	r3, [sp, #104]	@ 0x68
 800d2d8:	4654      	mov	r4, sl
 800d2da:	2205      	movs	r2, #5
 800d2dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2e0:	484e      	ldr	r0, [pc, #312]	@ (800d41c <_svfiprintf_r+0x1e4>)
 800d2e2:	f7f2 ff9d 	bl	8000220 <memchr>
 800d2e6:	9a04      	ldr	r2, [sp, #16]
 800d2e8:	b9d8      	cbnz	r0, 800d322 <_svfiprintf_r+0xea>
 800d2ea:	06d0      	lsls	r0, r2, #27
 800d2ec:	bf44      	itt	mi
 800d2ee:	2320      	movmi	r3, #32
 800d2f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d2f4:	0711      	lsls	r1, r2, #28
 800d2f6:	bf44      	itt	mi
 800d2f8:	232b      	movmi	r3, #43	@ 0x2b
 800d2fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d2fe:	f89a 3000 	ldrb.w	r3, [sl]
 800d302:	2b2a      	cmp	r3, #42	@ 0x2a
 800d304:	d015      	beq.n	800d332 <_svfiprintf_r+0xfa>
 800d306:	9a07      	ldr	r2, [sp, #28]
 800d308:	4654      	mov	r4, sl
 800d30a:	2000      	movs	r0, #0
 800d30c:	f04f 0c0a 	mov.w	ip, #10
 800d310:	4621      	mov	r1, r4
 800d312:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d316:	3b30      	subs	r3, #48	@ 0x30
 800d318:	2b09      	cmp	r3, #9
 800d31a:	d94b      	bls.n	800d3b4 <_svfiprintf_r+0x17c>
 800d31c:	b1b0      	cbz	r0, 800d34c <_svfiprintf_r+0x114>
 800d31e:	9207      	str	r2, [sp, #28]
 800d320:	e014      	b.n	800d34c <_svfiprintf_r+0x114>
 800d322:	eba0 0308 	sub.w	r3, r0, r8
 800d326:	fa09 f303 	lsl.w	r3, r9, r3
 800d32a:	4313      	orrs	r3, r2
 800d32c:	9304      	str	r3, [sp, #16]
 800d32e:	46a2      	mov	sl, r4
 800d330:	e7d2      	b.n	800d2d8 <_svfiprintf_r+0xa0>
 800d332:	9b03      	ldr	r3, [sp, #12]
 800d334:	1d19      	adds	r1, r3, #4
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	9103      	str	r1, [sp, #12]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	bfbb      	ittet	lt
 800d33e:	425b      	neglt	r3, r3
 800d340:	f042 0202 	orrlt.w	r2, r2, #2
 800d344:	9307      	strge	r3, [sp, #28]
 800d346:	9307      	strlt	r3, [sp, #28]
 800d348:	bfb8      	it	lt
 800d34a:	9204      	strlt	r2, [sp, #16]
 800d34c:	7823      	ldrb	r3, [r4, #0]
 800d34e:	2b2e      	cmp	r3, #46	@ 0x2e
 800d350:	d10a      	bne.n	800d368 <_svfiprintf_r+0x130>
 800d352:	7863      	ldrb	r3, [r4, #1]
 800d354:	2b2a      	cmp	r3, #42	@ 0x2a
 800d356:	d132      	bne.n	800d3be <_svfiprintf_r+0x186>
 800d358:	9b03      	ldr	r3, [sp, #12]
 800d35a:	1d1a      	adds	r2, r3, #4
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	9203      	str	r2, [sp, #12]
 800d360:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d364:	3402      	adds	r4, #2
 800d366:	9305      	str	r3, [sp, #20]
 800d368:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d42c <_svfiprintf_r+0x1f4>
 800d36c:	7821      	ldrb	r1, [r4, #0]
 800d36e:	2203      	movs	r2, #3
 800d370:	4650      	mov	r0, sl
 800d372:	f7f2 ff55 	bl	8000220 <memchr>
 800d376:	b138      	cbz	r0, 800d388 <_svfiprintf_r+0x150>
 800d378:	9b04      	ldr	r3, [sp, #16]
 800d37a:	eba0 000a 	sub.w	r0, r0, sl
 800d37e:	2240      	movs	r2, #64	@ 0x40
 800d380:	4082      	lsls	r2, r0
 800d382:	4313      	orrs	r3, r2
 800d384:	3401      	adds	r4, #1
 800d386:	9304      	str	r3, [sp, #16]
 800d388:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d38c:	4824      	ldr	r0, [pc, #144]	@ (800d420 <_svfiprintf_r+0x1e8>)
 800d38e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d392:	2206      	movs	r2, #6
 800d394:	f7f2 ff44 	bl	8000220 <memchr>
 800d398:	2800      	cmp	r0, #0
 800d39a:	d036      	beq.n	800d40a <_svfiprintf_r+0x1d2>
 800d39c:	4b21      	ldr	r3, [pc, #132]	@ (800d424 <_svfiprintf_r+0x1ec>)
 800d39e:	bb1b      	cbnz	r3, 800d3e8 <_svfiprintf_r+0x1b0>
 800d3a0:	9b03      	ldr	r3, [sp, #12]
 800d3a2:	3307      	adds	r3, #7
 800d3a4:	f023 0307 	bic.w	r3, r3, #7
 800d3a8:	3308      	adds	r3, #8
 800d3aa:	9303      	str	r3, [sp, #12]
 800d3ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3ae:	4433      	add	r3, r6
 800d3b0:	9309      	str	r3, [sp, #36]	@ 0x24
 800d3b2:	e76a      	b.n	800d28a <_svfiprintf_r+0x52>
 800d3b4:	fb0c 3202 	mla	r2, ip, r2, r3
 800d3b8:	460c      	mov	r4, r1
 800d3ba:	2001      	movs	r0, #1
 800d3bc:	e7a8      	b.n	800d310 <_svfiprintf_r+0xd8>
 800d3be:	2300      	movs	r3, #0
 800d3c0:	3401      	adds	r4, #1
 800d3c2:	9305      	str	r3, [sp, #20]
 800d3c4:	4619      	mov	r1, r3
 800d3c6:	f04f 0c0a 	mov.w	ip, #10
 800d3ca:	4620      	mov	r0, r4
 800d3cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d3d0:	3a30      	subs	r2, #48	@ 0x30
 800d3d2:	2a09      	cmp	r2, #9
 800d3d4:	d903      	bls.n	800d3de <_svfiprintf_r+0x1a6>
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d0c6      	beq.n	800d368 <_svfiprintf_r+0x130>
 800d3da:	9105      	str	r1, [sp, #20]
 800d3dc:	e7c4      	b.n	800d368 <_svfiprintf_r+0x130>
 800d3de:	fb0c 2101 	mla	r1, ip, r1, r2
 800d3e2:	4604      	mov	r4, r0
 800d3e4:	2301      	movs	r3, #1
 800d3e6:	e7f0      	b.n	800d3ca <_svfiprintf_r+0x192>
 800d3e8:	ab03      	add	r3, sp, #12
 800d3ea:	9300      	str	r3, [sp, #0]
 800d3ec:	462a      	mov	r2, r5
 800d3ee:	4b0e      	ldr	r3, [pc, #56]	@ (800d428 <_svfiprintf_r+0x1f0>)
 800d3f0:	a904      	add	r1, sp, #16
 800d3f2:	4638      	mov	r0, r7
 800d3f4:	f3af 8000 	nop.w
 800d3f8:	1c42      	adds	r2, r0, #1
 800d3fa:	4606      	mov	r6, r0
 800d3fc:	d1d6      	bne.n	800d3ac <_svfiprintf_r+0x174>
 800d3fe:	89ab      	ldrh	r3, [r5, #12]
 800d400:	065b      	lsls	r3, r3, #25
 800d402:	f53f af2d 	bmi.w	800d260 <_svfiprintf_r+0x28>
 800d406:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d408:	e72c      	b.n	800d264 <_svfiprintf_r+0x2c>
 800d40a:	ab03      	add	r3, sp, #12
 800d40c:	9300      	str	r3, [sp, #0]
 800d40e:	462a      	mov	r2, r5
 800d410:	4b05      	ldr	r3, [pc, #20]	@ (800d428 <_svfiprintf_r+0x1f0>)
 800d412:	a904      	add	r1, sp, #16
 800d414:	4638      	mov	r0, r7
 800d416:	f000 f879 	bl	800d50c <_printf_i>
 800d41a:	e7ed      	b.n	800d3f8 <_svfiprintf_r+0x1c0>
 800d41c:	0800d8bc 	.word	0x0800d8bc
 800d420:	0800d8c6 	.word	0x0800d8c6
 800d424:	00000000 	.word	0x00000000
 800d428:	0800d181 	.word	0x0800d181
 800d42c:	0800d8c2 	.word	0x0800d8c2

0800d430 <_printf_common>:
 800d430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d434:	4616      	mov	r6, r2
 800d436:	4698      	mov	r8, r3
 800d438:	688a      	ldr	r2, [r1, #8]
 800d43a:	690b      	ldr	r3, [r1, #16]
 800d43c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d440:	4293      	cmp	r3, r2
 800d442:	bfb8      	it	lt
 800d444:	4613      	movlt	r3, r2
 800d446:	6033      	str	r3, [r6, #0]
 800d448:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d44c:	4607      	mov	r7, r0
 800d44e:	460c      	mov	r4, r1
 800d450:	b10a      	cbz	r2, 800d456 <_printf_common+0x26>
 800d452:	3301      	adds	r3, #1
 800d454:	6033      	str	r3, [r6, #0]
 800d456:	6823      	ldr	r3, [r4, #0]
 800d458:	0699      	lsls	r1, r3, #26
 800d45a:	bf42      	ittt	mi
 800d45c:	6833      	ldrmi	r3, [r6, #0]
 800d45e:	3302      	addmi	r3, #2
 800d460:	6033      	strmi	r3, [r6, #0]
 800d462:	6825      	ldr	r5, [r4, #0]
 800d464:	f015 0506 	ands.w	r5, r5, #6
 800d468:	d106      	bne.n	800d478 <_printf_common+0x48>
 800d46a:	f104 0a19 	add.w	sl, r4, #25
 800d46e:	68e3      	ldr	r3, [r4, #12]
 800d470:	6832      	ldr	r2, [r6, #0]
 800d472:	1a9b      	subs	r3, r3, r2
 800d474:	42ab      	cmp	r3, r5
 800d476:	dc26      	bgt.n	800d4c6 <_printf_common+0x96>
 800d478:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d47c:	6822      	ldr	r2, [r4, #0]
 800d47e:	3b00      	subs	r3, #0
 800d480:	bf18      	it	ne
 800d482:	2301      	movne	r3, #1
 800d484:	0692      	lsls	r2, r2, #26
 800d486:	d42b      	bmi.n	800d4e0 <_printf_common+0xb0>
 800d488:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d48c:	4641      	mov	r1, r8
 800d48e:	4638      	mov	r0, r7
 800d490:	47c8      	blx	r9
 800d492:	3001      	adds	r0, #1
 800d494:	d01e      	beq.n	800d4d4 <_printf_common+0xa4>
 800d496:	6823      	ldr	r3, [r4, #0]
 800d498:	6922      	ldr	r2, [r4, #16]
 800d49a:	f003 0306 	and.w	r3, r3, #6
 800d49e:	2b04      	cmp	r3, #4
 800d4a0:	bf02      	ittt	eq
 800d4a2:	68e5      	ldreq	r5, [r4, #12]
 800d4a4:	6833      	ldreq	r3, [r6, #0]
 800d4a6:	1aed      	subeq	r5, r5, r3
 800d4a8:	68a3      	ldr	r3, [r4, #8]
 800d4aa:	bf0c      	ite	eq
 800d4ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d4b0:	2500      	movne	r5, #0
 800d4b2:	4293      	cmp	r3, r2
 800d4b4:	bfc4      	itt	gt
 800d4b6:	1a9b      	subgt	r3, r3, r2
 800d4b8:	18ed      	addgt	r5, r5, r3
 800d4ba:	2600      	movs	r6, #0
 800d4bc:	341a      	adds	r4, #26
 800d4be:	42b5      	cmp	r5, r6
 800d4c0:	d11a      	bne.n	800d4f8 <_printf_common+0xc8>
 800d4c2:	2000      	movs	r0, #0
 800d4c4:	e008      	b.n	800d4d8 <_printf_common+0xa8>
 800d4c6:	2301      	movs	r3, #1
 800d4c8:	4652      	mov	r2, sl
 800d4ca:	4641      	mov	r1, r8
 800d4cc:	4638      	mov	r0, r7
 800d4ce:	47c8      	blx	r9
 800d4d0:	3001      	adds	r0, #1
 800d4d2:	d103      	bne.n	800d4dc <_printf_common+0xac>
 800d4d4:	f04f 30ff 	mov.w	r0, #4294967295
 800d4d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4dc:	3501      	adds	r5, #1
 800d4de:	e7c6      	b.n	800d46e <_printf_common+0x3e>
 800d4e0:	18e1      	adds	r1, r4, r3
 800d4e2:	1c5a      	adds	r2, r3, #1
 800d4e4:	2030      	movs	r0, #48	@ 0x30
 800d4e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d4ea:	4422      	add	r2, r4
 800d4ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d4f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d4f4:	3302      	adds	r3, #2
 800d4f6:	e7c7      	b.n	800d488 <_printf_common+0x58>
 800d4f8:	2301      	movs	r3, #1
 800d4fa:	4622      	mov	r2, r4
 800d4fc:	4641      	mov	r1, r8
 800d4fe:	4638      	mov	r0, r7
 800d500:	47c8      	blx	r9
 800d502:	3001      	adds	r0, #1
 800d504:	d0e6      	beq.n	800d4d4 <_printf_common+0xa4>
 800d506:	3601      	adds	r6, #1
 800d508:	e7d9      	b.n	800d4be <_printf_common+0x8e>
	...

0800d50c <_printf_i>:
 800d50c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d510:	7e0f      	ldrb	r7, [r1, #24]
 800d512:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d514:	2f78      	cmp	r7, #120	@ 0x78
 800d516:	4691      	mov	r9, r2
 800d518:	4680      	mov	r8, r0
 800d51a:	460c      	mov	r4, r1
 800d51c:	469a      	mov	sl, r3
 800d51e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d522:	d807      	bhi.n	800d534 <_printf_i+0x28>
 800d524:	2f62      	cmp	r7, #98	@ 0x62
 800d526:	d80a      	bhi.n	800d53e <_printf_i+0x32>
 800d528:	2f00      	cmp	r7, #0
 800d52a:	f000 80d2 	beq.w	800d6d2 <_printf_i+0x1c6>
 800d52e:	2f58      	cmp	r7, #88	@ 0x58
 800d530:	f000 80b9 	beq.w	800d6a6 <_printf_i+0x19a>
 800d534:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d538:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d53c:	e03a      	b.n	800d5b4 <_printf_i+0xa8>
 800d53e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d542:	2b15      	cmp	r3, #21
 800d544:	d8f6      	bhi.n	800d534 <_printf_i+0x28>
 800d546:	a101      	add	r1, pc, #4	@ (adr r1, 800d54c <_printf_i+0x40>)
 800d548:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d54c:	0800d5a5 	.word	0x0800d5a5
 800d550:	0800d5b9 	.word	0x0800d5b9
 800d554:	0800d535 	.word	0x0800d535
 800d558:	0800d535 	.word	0x0800d535
 800d55c:	0800d535 	.word	0x0800d535
 800d560:	0800d535 	.word	0x0800d535
 800d564:	0800d5b9 	.word	0x0800d5b9
 800d568:	0800d535 	.word	0x0800d535
 800d56c:	0800d535 	.word	0x0800d535
 800d570:	0800d535 	.word	0x0800d535
 800d574:	0800d535 	.word	0x0800d535
 800d578:	0800d6b9 	.word	0x0800d6b9
 800d57c:	0800d5e3 	.word	0x0800d5e3
 800d580:	0800d673 	.word	0x0800d673
 800d584:	0800d535 	.word	0x0800d535
 800d588:	0800d535 	.word	0x0800d535
 800d58c:	0800d6db 	.word	0x0800d6db
 800d590:	0800d535 	.word	0x0800d535
 800d594:	0800d5e3 	.word	0x0800d5e3
 800d598:	0800d535 	.word	0x0800d535
 800d59c:	0800d535 	.word	0x0800d535
 800d5a0:	0800d67b 	.word	0x0800d67b
 800d5a4:	6833      	ldr	r3, [r6, #0]
 800d5a6:	1d1a      	adds	r2, r3, #4
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	6032      	str	r2, [r6, #0]
 800d5ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d5b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d5b4:	2301      	movs	r3, #1
 800d5b6:	e09d      	b.n	800d6f4 <_printf_i+0x1e8>
 800d5b8:	6833      	ldr	r3, [r6, #0]
 800d5ba:	6820      	ldr	r0, [r4, #0]
 800d5bc:	1d19      	adds	r1, r3, #4
 800d5be:	6031      	str	r1, [r6, #0]
 800d5c0:	0606      	lsls	r6, r0, #24
 800d5c2:	d501      	bpl.n	800d5c8 <_printf_i+0xbc>
 800d5c4:	681d      	ldr	r5, [r3, #0]
 800d5c6:	e003      	b.n	800d5d0 <_printf_i+0xc4>
 800d5c8:	0645      	lsls	r5, r0, #25
 800d5ca:	d5fb      	bpl.n	800d5c4 <_printf_i+0xb8>
 800d5cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d5d0:	2d00      	cmp	r5, #0
 800d5d2:	da03      	bge.n	800d5dc <_printf_i+0xd0>
 800d5d4:	232d      	movs	r3, #45	@ 0x2d
 800d5d6:	426d      	negs	r5, r5
 800d5d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d5dc:	4859      	ldr	r0, [pc, #356]	@ (800d744 <_printf_i+0x238>)
 800d5de:	230a      	movs	r3, #10
 800d5e0:	e011      	b.n	800d606 <_printf_i+0xfa>
 800d5e2:	6821      	ldr	r1, [r4, #0]
 800d5e4:	6833      	ldr	r3, [r6, #0]
 800d5e6:	0608      	lsls	r0, r1, #24
 800d5e8:	f853 5b04 	ldr.w	r5, [r3], #4
 800d5ec:	d402      	bmi.n	800d5f4 <_printf_i+0xe8>
 800d5ee:	0649      	lsls	r1, r1, #25
 800d5f0:	bf48      	it	mi
 800d5f2:	b2ad      	uxthmi	r5, r5
 800d5f4:	2f6f      	cmp	r7, #111	@ 0x6f
 800d5f6:	4853      	ldr	r0, [pc, #332]	@ (800d744 <_printf_i+0x238>)
 800d5f8:	6033      	str	r3, [r6, #0]
 800d5fa:	bf14      	ite	ne
 800d5fc:	230a      	movne	r3, #10
 800d5fe:	2308      	moveq	r3, #8
 800d600:	2100      	movs	r1, #0
 800d602:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d606:	6866      	ldr	r6, [r4, #4]
 800d608:	60a6      	str	r6, [r4, #8]
 800d60a:	2e00      	cmp	r6, #0
 800d60c:	bfa2      	ittt	ge
 800d60e:	6821      	ldrge	r1, [r4, #0]
 800d610:	f021 0104 	bicge.w	r1, r1, #4
 800d614:	6021      	strge	r1, [r4, #0]
 800d616:	b90d      	cbnz	r5, 800d61c <_printf_i+0x110>
 800d618:	2e00      	cmp	r6, #0
 800d61a:	d04b      	beq.n	800d6b4 <_printf_i+0x1a8>
 800d61c:	4616      	mov	r6, r2
 800d61e:	fbb5 f1f3 	udiv	r1, r5, r3
 800d622:	fb03 5711 	mls	r7, r3, r1, r5
 800d626:	5dc7      	ldrb	r7, [r0, r7]
 800d628:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d62c:	462f      	mov	r7, r5
 800d62e:	42bb      	cmp	r3, r7
 800d630:	460d      	mov	r5, r1
 800d632:	d9f4      	bls.n	800d61e <_printf_i+0x112>
 800d634:	2b08      	cmp	r3, #8
 800d636:	d10b      	bne.n	800d650 <_printf_i+0x144>
 800d638:	6823      	ldr	r3, [r4, #0]
 800d63a:	07df      	lsls	r7, r3, #31
 800d63c:	d508      	bpl.n	800d650 <_printf_i+0x144>
 800d63e:	6923      	ldr	r3, [r4, #16]
 800d640:	6861      	ldr	r1, [r4, #4]
 800d642:	4299      	cmp	r1, r3
 800d644:	bfde      	ittt	le
 800d646:	2330      	movle	r3, #48	@ 0x30
 800d648:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d64c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d650:	1b92      	subs	r2, r2, r6
 800d652:	6122      	str	r2, [r4, #16]
 800d654:	f8cd a000 	str.w	sl, [sp]
 800d658:	464b      	mov	r3, r9
 800d65a:	aa03      	add	r2, sp, #12
 800d65c:	4621      	mov	r1, r4
 800d65e:	4640      	mov	r0, r8
 800d660:	f7ff fee6 	bl	800d430 <_printf_common>
 800d664:	3001      	adds	r0, #1
 800d666:	d14a      	bne.n	800d6fe <_printf_i+0x1f2>
 800d668:	f04f 30ff 	mov.w	r0, #4294967295
 800d66c:	b004      	add	sp, #16
 800d66e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d672:	6823      	ldr	r3, [r4, #0]
 800d674:	f043 0320 	orr.w	r3, r3, #32
 800d678:	6023      	str	r3, [r4, #0]
 800d67a:	4833      	ldr	r0, [pc, #204]	@ (800d748 <_printf_i+0x23c>)
 800d67c:	2778      	movs	r7, #120	@ 0x78
 800d67e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d682:	6823      	ldr	r3, [r4, #0]
 800d684:	6831      	ldr	r1, [r6, #0]
 800d686:	061f      	lsls	r7, r3, #24
 800d688:	f851 5b04 	ldr.w	r5, [r1], #4
 800d68c:	d402      	bmi.n	800d694 <_printf_i+0x188>
 800d68e:	065f      	lsls	r7, r3, #25
 800d690:	bf48      	it	mi
 800d692:	b2ad      	uxthmi	r5, r5
 800d694:	6031      	str	r1, [r6, #0]
 800d696:	07d9      	lsls	r1, r3, #31
 800d698:	bf44      	itt	mi
 800d69a:	f043 0320 	orrmi.w	r3, r3, #32
 800d69e:	6023      	strmi	r3, [r4, #0]
 800d6a0:	b11d      	cbz	r5, 800d6aa <_printf_i+0x19e>
 800d6a2:	2310      	movs	r3, #16
 800d6a4:	e7ac      	b.n	800d600 <_printf_i+0xf4>
 800d6a6:	4827      	ldr	r0, [pc, #156]	@ (800d744 <_printf_i+0x238>)
 800d6a8:	e7e9      	b.n	800d67e <_printf_i+0x172>
 800d6aa:	6823      	ldr	r3, [r4, #0]
 800d6ac:	f023 0320 	bic.w	r3, r3, #32
 800d6b0:	6023      	str	r3, [r4, #0]
 800d6b2:	e7f6      	b.n	800d6a2 <_printf_i+0x196>
 800d6b4:	4616      	mov	r6, r2
 800d6b6:	e7bd      	b.n	800d634 <_printf_i+0x128>
 800d6b8:	6833      	ldr	r3, [r6, #0]
 800d6ba:	6825      	ldr	r5, [r4, #0]
 800d6bc:	6961      	ldr	r1, [r4, #20]
 800d6be:	1d18      	adds	r0, r3, #4
 800d6c0:	6030      	str	r0, [r6, #0]
 800d6c2:	062e      	lsls	r6, r5, #24
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	d501      	bpl.n	800d6cc <_printf_i+0x1c0>
 800d6c8:	6019      	str	r1, [r3, #0]
 800d6ca:	e002      	b.n	800d6d2 <_printf_i+0x1c6>
 800d6cc:	0668      	lsls	r0, r5, #25
 800d6ce:	d5fb      	bpl.n	800d6c8 <_printf_i+0x1bc>
 800d6d0:	8019      	strh	r1, [r3, #0]
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	6123      	str	r3, [r4, #16]
 800d6d6:	4616      	mov	r6, r2
 800d6d8:	e7bc      	b.n	800d654 <_printf_i+0x148>
 800d6da:	6833      	ldr	r3, [r6, #0]
 800d6dc:	1d1a      	adds	r2, r3, #4
 800d6de:	6032      	str	r2, [r6, #0]
 800d6e0:	681e      	ldr	r6, [r3, #0]
 800d6e2:	6862      	ldr	r2, [r4, #4]
 800d6e4:	2100      	movs	r1, #0
 800d6e6:	4630      	mov	r0, r6
 800d6e8:	f7f2 fd9a 	bl	8000220 <memchr>
 800d6ec:	b108      	cbz	r0, 800d6f2 <_printf_i+0x1e6>
 800d6ee:	1b80      	subs	r0, r0, r6
 800d6f0:	6060      	str	r0, [r4, #4]
 800d6f2:	6863      	ldr	r3, [r4, #4]
 800d6f4:	6123      	str	r3, [r4, #16]
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d6fc:	e7aa      	b.n	800d654 <_printf_i+0x148>
 800d6fe:	6923      	ldr	r3, [r4, #16]
 800d700:	4632      	mov	r2, r6
 800d702:	4649      	mov	r1, r9
 800d704:	4640      	mov	r0, r8
 800d706:	47d0      	blx	sl
 800d708:	3001      	adds	r0, #1
 800d70a:	d0ad      	beq.n	800d668 <_printf_i+0x15c>
 800d70c:	6823      	ldr	r3, [r4, #0]
 800d70e:	079b      	lsls	r3, r3, #30
 800d710:	d413      	bmi.n	800d73a <_printf_i+0x22e>
 800d712:	68e0      	ldr	r0, [r4, #12]
 800d714:	9b03      	ldr	r3, [sp, #12]
 800d716:	4298      	cmp	r0, r3
 800d718:	bfb8      	it	lt
 800d71a:	4618      	movlt	r0, r3
 800d71c:	e7a6      	b.n	800d66c <_printf_i+0x160>
 800d71e:	2301      	movs	r3, #1
 800d720:	4632      	mov	r2, r6
 800d722:	4649      	mov	r1, r9
 800d724:	4640      	mov	r0, r8
 800d726:	47d0      	blx	sl
 800d728:	3001      	adds	r0, #1
 800d72a:	d09d      	beq.n	800d668 <_printf_i+0x15c>
 800d72c:	3501      	adds	r5, #1
 800d72e:	68e3      	ldr	r3, [r4, #12]
 800d730:	9903      	ldr	r1, [sp, #12]
 800d732:	1a5b      	subs	r3, r3, r1
 800d734:	42ab      	cmp	r3, r5
 800d736:	dcf2      	bgt.n	800d71e <_printf_i+0x212>
 800d738:	e7eb      	b.n	800d712 <_printf_i+0x206>
 800d73a:	2500      	movs	r5, #0
 800d73c:	f104 0619 	add.w	r6, r4, #25
 800d740:	e7f5      	b.n	800d72e <_printf_i+0x222>
 800d742:	bf00      	nop
 800d744:	0800d8cd 	.word	0x0800d8cd
 800d748:	0800d8de 	.word	0x0800d8de

0800d74c <memmove>:
 800d74c:	4288      	cmp	r0, r1
 800d74e:	b510      	push	{r4, lr}
 800d750:	eb01 0402 	add.w	r4, r1, r2
 800d754:	d902      	bls.n	800d75c <memmove+0x10>
 800d756:	4284      	cmp	r4, r0
 800d758:	4623      	mov	r3, r4
 800d75a:	d807      	bhi.n	800d76c <memmove+0x20>
 800d75c:	1e43      	subs	r3, r0, #1
 800d75e:	42a1      	cmp	r1, r4
 800d760:	d008      	beq.n	800d774 <memmove+0x28>
 800d762:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d766:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d76a:	e7f8      	b.n	800d75e <memmove+0x12>
 800d76c:	4402      	add	r2, r0
 800d76e:	4601      	mov	r1, r0
 800d770:	428a      	cmp	r2, r1
 800d772:	d100      	bne.n	800d776 <memmove+0x2a>
 800d774:	bd10      	pop	{r4, pc}
 800d776:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d77a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d77e:	e7f7      	b.n	800d770 <memmove+0x24>

0800d780 <_sbrk_r>:
 800d780:	b538      	push	{r3, r4, r5, lr}
 800d782:	4d06      	ldr	r5, [pc, #24]	@ (800d79c <_sbrk_r+0x1c>)
 800d784:	2300      	movs	r3, #0
 800d786:	4604      	mov	r4, r0
 800d788:	4608      	mov	r0, r1
 800d78a:	602b      	str	r3, [r5, #0]
 800d78c:	f7f3 fe3c 	bl	8001408 <_sbrk>
 800d790:	1c43      	adds	r3, r0, #1
 800d792:	d102      	bne.n	800d79a <_sbrk_r+0x1a>
 800d794:	682b      	ldr	r3, [r5, #0]
 800d796:	b103      	cbz	r3, 800d79a <_sbrk_r+0x1a>
 800d798:	6023      	str	r3, [r4, #0]
 800d79a:	bd38      	pop	{r3, r4, r5, pc}
 800d79c:	20004538 	.word	0x20004538

0800d7a0 <memcpy>:
 800d7a0:	440a      	add	r2, r1
 800d7a2:	4291      	cmp	r1, r2
 800d7a4:	f100 33ff 	add.w	r3, r0, #4294967295
 800d7a8:	d100      	bne.n	800d7ac <memcpy+0xc>
 800d7aa:	4770      	bx	lr
 800d7ac:	b510      	push	{r4, lr}
 800d7ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d7b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d7b6:	4291      	cmp	r1, r2
 800d7b8:	d1f9      	bne.n	800d7ae <memcpy+0xe>
 800d7ba:	bd10      	pop	{r4, pc}

0800d7bc <_realloc_r>:
 800d7bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7c0:	4680      	mov	r8, r0
 800d7c2:	4615      	mov	r5, r2
 800d7c4:	460c      	mov	r4, r1
 800d7c6:	b921      	cbnz	r1, 800d7d2 <_realloc_r+0x16>
 800d7c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d7cc:	4611      	mov	r1, r2
 800d7ce:	f7ff bc4b 	b.w	800d068 <_malloc_r>
 800d7d2:	b92a      	cbnz	r2, 800d7e0 <_realloc_r+0x24>
 800d7d4:	f7ff fbdc 	bl	800cf90 <_free_r>
 800d7d8:	2400      	movs	r4, #0
 800d7da:	4620      	mov	r0, r4
 800d7dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7e0:	f000 f81a 	bl	800d818 <_malloc_usable_size_r>
 800d7e4:	4285      	cmp	r5, r0
 800d7e6:	4606      	mov	r6, r0
 800d7e8:	d802      	bhi.n	800d7f0 <_realloc_r+0x34>
 800d7ea:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d7ee:	d8f4      	bhi.n	800d7da <_realloc_r+0x1e>
 800d7f0:	4629      	mov	r1, r5
 800d7f2:	4640      	mov	r0, r8
 800d7f4:	f7ff fc38 	bl	800d068 <_malloc_r>
 800d7f8:	4607      	mov	r7, r0
 800d7fa:	2800      	cmp	r0, #0
 800d7fc:	d0ec      	beq.n	800d7d8 <_realloc_r+0x1c>
 800d7fe:	42b5      	cmp	r5, r6
 800d800:	462a      	mov	r2, r5
 800d802:	4621      	mov	r1, r4
 800d804:	bf28      	it	cs
 800d806:	4632      	movcs	r2, r6
 800d808:	f7ff ffca 	bl	800d7a0 <memcpy>
 800d80c:	4621      	mov	r1, r4
 800d80e:	4640      	mov	r0, r8
 800d810:	f7ff fbbe 	bl	800cf90 <_free_r>
 800d814:	463c      	mov	r4, r7
 800d816:	e7e0      	b.n	800d7da <_realloc_r+0x1e>

0800d818 <_malloc_usable_size_r>:
 800d818:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d81c:	1f18      	subs	r0, r3, #4
 800d81e:	2b00      	cmp	r3, #0
 800d820:	bfbc      	itt	lt
 800d822:	580b      	ldrlt	r3, [r1, r0]
 800d824:	18c0      	addlt	r0, r0, r3
 800d826:	4770      	bx	lr

0800d828 <_init>:
 800d828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d82a:	bf00      	nop
 800d82c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d82e:	bc08      	pop	{r3}
 800d830:	469e      	mov	lr, r3
 800d832:	4770      	bx	lr

0800d834 <_fini>:
 800d834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d836:	bf00      	nop
 800d838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d83a:	bc08      	pop	{r3}
 800d83c:	469e      	mov	lr, r3
 800d83e:	4770      	bx	lr
