
ETR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fcb0  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000047c  0800fe90  0800fe90  00010e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801030c  0801030c  000121d4  2**0
                  CONTENTS
  4 .ARM          00000008  0801030c  0801030c  0001130c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010314  08010314  000121d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010314  08010314  00011314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010318  08010318  00011318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0801031c  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004e34  200001d4  080104f0  000121d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005008  080104f0  00013008  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000121d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d3a0  00000000  00000000  00012204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004401  00000000  00000000  0002f5a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001960  00000000  00000000  000339a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001357  00000000  00000000  00035308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b4b8  00000000  00000000  0003665f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ef2a  00000000  00000000  00061b17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00112ceb  00000000  00000000  00080a41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019372c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007148  00000000  00000000  00193770  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  0019a8b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800fe78 	.word	0x0800fe78

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	0800fe78 	.word	0x0800fe78

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <SysTick_GetValue>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t SysTick_GetValue(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0
    return SysTick->VAL;
 80002c4:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <SysTick_GetValue+0x14>)
 80002c6:	689b      	ldr	r3, [r3, #8]
}
 80002c8:	4618      	mov	r0, r3
 80002ca:	46bd      	mov	sp, r7
 80002cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d0:	4770      	bx	lr
 80002d2:	bf00      	nop
 80002d4:	e000e010 	.word	0xe000e010

080002d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002da:	b08d      	sub	sp, #52	@ 0x34
 80002dc:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002de:	f001 fe78 	bl	8001fd2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e2:	f000 f8f7 	bl	80004d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002e6:	f000 fdf5 	bl	8000ed4 <MX_GPIO_Init>
  MX_DMA_Init();
 80002ea:	f000 fdb1 	bl	8000e50 <MX_DMA_Init>
  MX_TIM2_Init();
 80002ee:	f000 fbbf 	bl	8000a70 <MX_TIM2_Init>
  MX_TIM4_Init();
 80002f2:	f000 fcbf 	bl	8000c74 <MX_TIM4_Init>
  MX_USB_Device_Init();
 80002f6:	f00d fedb 	bl	800e0b0 <MX_USB_Device_Init>
  MX_TIM3_Init();
 80002fa:	f000 fc45 	bl	8000b88 <MX_TIM3_Init>
  MX_ADC1_Init();
 80002fe:	f000 f935 	bl	800056c <MX_ADC1_Init>
  MX_ADC2_Init();
 8000302:	f000 f9ad 	bl	8000660 <MX_ADC2_Init>
  MX_ADC3_Init();
 8000306:	f000 fa13 	bl	8000730 <MX_ADC3_Init>
  MX_OPAMP1_Init();
 800030a:	f000 fa8b 	bl	8000824 <MX_OPAMP1_Init>
  MX_OPAMP3_Init();
 800030e:	f000 faaf 	bl	8000870 <MX_OPAMP3_Init>
  MX_TIM1_Init();
 8000312:	f000 fad3 	bl	80008bc <MX_TIM1_Init>
  MX_TIM15_Init();
 8000316:	f000 fcfd 	bl	8000d14 <MX_TIM15_Init>





  HAL_OPAMP_Start(&hopamp1);
 800031a:	485c      	ldr	r0, [pc, #368]	@ (800048c <main+0x1b4>)
 800031c:	f004 fb6a 	bl	80049f4 <HAL_OPAMP_Start>
  HAL_OPAMP_Start(&hopamp3);
 8000320:	485b      	ldr	r0, [pc, #364]	@ (8000490 <main+0x1b8>)
 8000322:	f004 fb67 	bl	80049f4 <HAL_OPAMP_Start>

  HAL_ADC_Start_DMA(&hadc2, ADC_BUFFER, BUFFER_SIZE);
 8000326:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800032a:	495a      	ldr	r1, [pc, #360]	@ (8000494 <main+0x1bc>)
 800032c:	485a      	ldr	r0, [pc, #360]	@ (8000498 <main+0x1c0>)
 800032e:	f002 fb3f 	bl	80029b0 <HAL_ADC_Start_DMA>

  HAL_TIM_Base_Start(&htim1);
 8000332:	485a      	ldr	r0, [pc, #360]	@ (800049c <main+0x1c4>)
 8000334:	f007 f912 	bl	800755c <HAL_TIM_Base_Start>

  HAL_TIM_Base_Start(&htim2);
 8000338:	4859      	ldr	r0, [pc, #356]	@ (80004a0 <main+0x1c8>)
 800033a:	f007 f90f 	bl	800755c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);
 800033e:	4859      	ldr	r0, [pc, #356]	@ (80004a4 <main+0x1cc>)
 8000340:	f007 f90c 	bl	800755c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim4);
 8000344:	4858      	ldr	r0, [pc, #352]	@ (80004a8 <main+0x1d0>)
 8000346:	f007 f979 	bl	800763c <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800034a:	210c      	movs	r1, #12
 800034c:	4854      	ldr	r0, [pc, #336]	@ (80004a0 <main+0x1c8>)
 800034e:	f007 fbc3 	bl	8007ad8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000352:	2108      	movs	r1, #8
 8000354:	4852      	ldr	r0, [pc, #328]	@ (80004a0 <main+0x1c8>)
 8000356:	f007 fbbf 	bl	8007ad8 <HAL_TIM_PWM_Start>



  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_1);
 800035a:	2100      	movs	r1, #0
 800035c:	484f      	ldr	r0, [pc, #316]	@ (800049c <main+0x1c4>)
 800035e:	f007 fa47 	bl	80077f0 <HAL_TIM_OC_Start>
  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_2);
 8000362:	2104      	movs	r1, #4
 8000364:	484d      	ldr	r0, [pc, #308]	@ (800049c <main+0x1c4>)
 8000366:	f007 fa43 	bl	80077f0 <HAL_TIM_OC_Start>
  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_3);
 800036a:	2108      	movs	r1, #8
 800036c:	484b      	ldr	r0, [pc, #300]	@ (800049c <main+0x1c4>)
 800036e:	f007 fa3f 	bl	80077f0 <HAL_TIM_OC_Start>
  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_4);
 8000372:	210c      	movs	r1, #12
 8000374:	4849      	ldr	r0, [pc, #292]	@ (800049c <main+0x1c4>)
 8000376:	f007 fa3b 	bl	80077f0 <HAL_TIM_OC_Start>

  HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_1);
 800037a:	2100      	movs	r1, #0
 800037c:	484b      	ldr	r0, [pc, #300]	@ (80004ac <main+0x1d4>)
 800037e:	f007 ff4b 	bl	8008218 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_2);
 8000382:	2104      	movs	r1, #4
 8000384:	4849      	ldr	r0, [pc, #292]	@ (80004ac <main+0x1d4>)
 8000386:	f007 ff47 	bl	8008218 <HAL_TIM_IC_Start_IT>

  HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, 1);
 800038a:	2201      	movs	r2, #1
 800038c:	2110      	movs	r1, #16
 800038e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000392:	f004 fa23 	bl	80047dc <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  __HAL_TIM_PRESCALER(&htim1,BOOT0_BTN_COUNT);//when 170Mhz 9 is best
 8000396:	4b41      	ldr	r3, [pc, #260]	@ (800049c <main+0x1c4>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	4a45      	ldr	r2, [pc, #276]	@ (80004b0 <main+0x1d8>)
 800039c:	6812      	ldr	r2, [r2, #0]
 800039e:	629a      	str	r2, [r3, #40]	@ 0x28

//	  WS2812_BRIGHTNESS=BOOT0_BTN_COUNT;
		if (WHILE_FLAG==2) {
 80003a0:	4b44      	ldr	r3, [pc, #272]	@ (80004b4 <main+0x1dc>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	2b02      	cmp	r3, #2
 80003a6:	d1f6      	bne.n	8000396 <main+0xbe>

		 ws2812_set_all(rgb_to_color(0x00, 0x00, 0x0f));
 80003a8:	220f      	movs	r2, #15
 80003aa:	2100      	movs	r1, #0
 80003ac:	2000      	movs	r0, #0
 80003ae:	f001 fc7f 	bl	8001cb0 <rgb_to_color>
 80003b2:	4603      	mov	r3, r0
 80003b4:	4618      	mov	r0, r3
 80003b6:	f001 fc5f 	bl	8001c78 <ws2812_set_all>
		 ws2812_gradient(100, 10);
 80003ba:	210a      	movs	r1, #10
 80003bc:	2064      	movs	r0, #100	@ 0x64
 80003be:	f001 fb4b 	bl	8001a58 <ws2812_gradient>
		 ws2812_set_all(rgb_to_color(0x00, 0x0f, 0x00));
 80003c2:	2200      	movs	r2, #0
 80003c4:	210f      	movs	r1, #15
 80003c6:	2000      	movs	r0, #0
 80003c8:	f001 fc72 	bl	8001cb0 <rgb_to_color>
 80003cc:	4603      	mov	r3, r0
 80003ce:	4618      	mov	r0, r3
 80003d0:	f001 fc52 	bl	8001c78 <ws2812_set_all>
		 ws2812_gradient(100, 10);
 80003d4:	210a      	movs	r1, #10
 80003d6:	2064      	movs	r0, #100	@ 0x64
 80003d8:	f001 fb3e 	bl	8001a58 <ws2812_gradient>
		 ws2812_set_all(rgb_to_color(0x0f, 0x00, 0x00));
 80003dc:	2200      	movs	r2, #0
 80003de:	2100      	movs	r1, #0
 80003e0:	200f      	movs	r0, #15
 80003e2:	f001 fc65 	bl	8001cb0 <rgb_to_color>
 80003e6:	4603      	mov	r3, r0
 80003e8:	4618      	mov	r0, r3
 80003ea:	f001 fc45 	bl	8001c78 <ws2812_set_all>
		 ws2812_gradient(100, 10);
 80003ee:	210a      	movs	r1, #10
 80003f0:	2064      	movs	r0, #100	@ 0x64
 80003f2:	f001 fb31 	bl	8001a58 <ws2812_gradient>


//	  sprintf(CDC_BUFFER,"-----WHILE-----      \r\n");
//	  CDC_Transmit_FS(CDC_BUFFER, 50);

			rainbow_effect(255, 10);
 80003f6:	210a      	movs	r1, #10
 80003f8:	20ff      	movs	r0, #255	@ 0xff
 80003fa:	f001 fd81 	bl	8001f00 <rainbow_effect>

		for (int i = 0; i < BUFFER_SIZE; ++i) {
 80003fe:	2300      	movs	r3, #0
 8000400:	617b      	str	r3, [r7, #20]
 8000402:	e038      	b.n	8000476 <main+0x19e>


		ws2812_set_all(rgb_to_color(255-uwDutyCycle, uwDutyCycle, 0x00));
 8000404:	4b2c      	ldr	r3, [pc, #176]	@ (80004b8 <main+0x1e0>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 800040c:	4a2a      	ldr	r2, [pc, #168]	@ (80004b8 <main+0x1e0>)
 800040e:	6811      	ldr	r1, [r2, #0]
 8000410:	2200      	movs	r2, #0
 8000412:	4618      	mov	r0, r3
 8000414:	f001 fc4c 	bl	8001cb0 <rgb_to_color>
 8000418:	4603      	mov	r3, r0
 800041a:	4618      	mov	r0, r3
 800041c:	f001 fc2c 	bl	8001c78 <ws2812_set_all>
		ws2812_update_force();
 8000420:	f001 fa96 	bl	8001950 <ws2812_update_force>
		  sprintf(CDC_BUFFER,"Val:%d,%d,%d,%d,%d,%d,%d,%d\r\n",WHILE_BUFFER[i],i,USER_CounterTicks,uwDutyCycle,uwFrequency,uwIC2Value,BOOT0_BTN_COUNT,SysTick_GetValue());
 8000424:	4a25      	ldr	r2, [pc, #148]	@ (80004bc <main+0x1e4>)
 8000426:	697b      	ldr	r3, [r7, #20]
 8000428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800042c:	60fb      	str	r3, [r7, #12]
 800042e:	4b24      	ldr	r3, [pc, #144]	@ (80004c0 <main+0x1e8>)
 8000430:	681c      	ldr	r4, [r3, #0]
 8000432:	4b21      	ldr	r3, [pc, #132]	@ (80004b8 <main+0x1e0>)
 8000434:	681d      	ldr	r5, [r3, #0]
 8000436:	4b23      	ldr	r3, [pc, #140]	@ (80004c4 <main+0x1ec>)
 8000438:	681e      	ldr	r6, [r3, #0]
 800043a:	4b23      	ldr	r3, [pc, #140]	@ (80004c8 <main+0x1f0>)
 800043c:	6819      	ldr	r1, [r3, #0]
 800043e:	60b9      	str	r1, [r7, #8]
 8000440:	4b1b      	ldr	r3, [pc, #108]	@ (80004b0 <main+0x1d8>)
 8000442:	6818      	ldr	r0, [r3, #0]
 8000444:	6078      	str	r0, [r7, #4]
 8000446:	f7ff ff3b 	bl	80002c0 <SysTick_GetValue>
 800044a:	4603      	mov	r3, r0
 800044c:	9305      	str	r3, [sp, #20]
 800044e:	6878      	ldr	r0, [r7, #4]
 8000450:	9004      	str	r0, [sp, #16]
 8000452:	68b9      	ldr	r1, [r7, #8]
 8000454:	9103      	str	r1, [sp, #12]
 8000456:	9602      	str	r6, [sp, #8]
 8000458:	9501      	str	r5, [sp, #4]
 800045a:	9400      	str	r4, [sp, #0]
 800045c:	697b      	ldr	r3, [r7, #20]
 800045e:	68fa      	ldr	r2, [r7, #12]
 8000460:	491a      	ldr	r1, [pc, #104]	@ (80004cc <main+0x1f4>)
 8000462:	481b      	ldr	r0, [pc, #108]	@ (80004d0 <main+0x1f8>)
 8000464:	f00e fb2e 	bl	800eac4 <siprintf>
		  CDC_Transmit_FS(CDC_BUFFER, CDC_BUFFER_SIZE);
 8000468:	2132      	movs	r1, #50	@ 0x32
 800046a:	4819      	ldr	r0, [pc, #100]	@ (80004d0 <main+0x1f8>)
 800046c:	f00d fede 	bl	800e22c <CDC_Transmit_FS>
		for (int i = 0; i < BUFFER_SIZE; ++i) {
 8000470:	697b      	ldr	r3, [r7, #20]
 8000472:	3301      	adds	r3, #1
 8000474:	617b      	str	r3, [r7, #20]
 8000476:	697b      	ldr	r3, [r7, #20]
 8000478:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800047c:	dbc2      	blt.n	8000404 <main+0x12c>



		}

		HAL_Delay(10);
 800047e:	200a      	movs	r0, #10
 8000480:	f001 fe18 	bl	80020b4 <HAL_Delay>
		  WHILE_FLAG=0;
 8000484:	4b0b      	ldr	r3, [pc, #44]	@ (80004b4 <main+0x1dc>)
 8000486:	2200      	movs	r2, #0
 8000488:	601a      	str	r2, [r3, #0]
	  __HAL_TIM_PRESCALER(&htim1,BOOT0_BTN_COUNT);//when 170Mhz 9 is best
 800048a:	e784      	b.n	8000396 <main+0xbe>
 800048c:	20000454 	.word	0x20000454
 8000490:	20000490 	.word	0x20000490
 8000494:	200006b8 	.word	0x200006b8
 8000498:	2000025c 	.word	0x2000025c
 800049c:	200004cc 	.word	0x200004cc
 80004a0:	20000518 	.word	0x20000518
 80004a4:	20000564 	.word	0x20000564
 80004a8:	200005b0 	.word	0x200005b0
 80004ac:	200005fc 	.word	0x200005fc
 80004b0:	20002630 	.word	0x20002630
 80004b4:	2000262c 	.word	0x2000262c
 80004b8:	200006ac 	.word	0x200006ac
 80004bc:	20001658 	.word	0x20001658
 80004c0:	200006b4 	.word	0x200006b4
 80004c4:	200006b0 	.word	0x200006b0
 80004c8:	200006a8 	.word	0x200006a8
 80004cc:	0800fe90 	.word	0x0800fe90
 80004d0:	200025f8 	.word	0x200025f8

080004d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b094      	sub	sp, #80	@ 0x50
 80004d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004da:	f107 0318 	add.w	r3, r7, #24
 80004de:	2238      	movs	r2, #56	@ 0x38
 80004e0:	2100      	movs	r1, #0
 80004e2:	4618      	mov	r0, r3
 80004e4:	f00e fb0e 	bl	800eb04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e8:	1d3b      	adds	r3, r7, #4
 80004ea:	2200      	movs	r2, #0
 80004ec:	601a      	str	r2, [r3, #0]
 80004ee:	605a      	str	r2, [r3, #4]
 80004f0:	609a      	str	r2, [r3, #8]
 80004f2:	60da      	str	r2, [r3, #12]
 80004f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80004f6:	2000      	movs	r0, #0
 80004f8:	f005 ffe0 	bl	80064bc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80004fc:	2321      	movs	r3, #33	@ 0x21
 80004fe:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000500:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000504:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000506:	2301      	movs	r3, #1
 8000508:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800050a:	2302      	movs	r3, #2
 800050c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800050e:	2303      	movs	r3, #3
 8000510:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000512:	2302      	movs	r3, #2
 8000514:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000516:	2355      	movs	r3, #85	@ 0x55
 8000518:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800051a:	2302      	movs	r3, #2
 800051c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800051e:	2302      	movs	r3, #2
 8000520:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000522:	2302      	movs	r3, #2
 8000524:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000526:	f107 0318 	add.w	r3, r7, #24
 800052a:	4618      	mov	r0, r3
 800052c:	f006 f87a 	bl	8006624 <HAL_RCC_OscConfig>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000536:	f000 fdd5 	bl	80010e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800053a:	230f      	movs	r3, #15
 800053c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800053e:	2303      	movs	r3, #3
 8000540:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000542:	2300      	movs	r3, #0
 8000544:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000546:	2300      	movs	r3, #0
 8000548:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800054a:	2300      	movs	r3, #0
 800054c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800054e:	1d3b      	adds	r3, r7, #4
 8000550:	2104      	movs	r1, #4
 8000552:	4618      	mov	r0, r3
 8000554:	f006 fb78 	bl	8006c48 <HAL_RCC_ClockConfig>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800055e:	f000 fdc1 	bl	80010e4 <Error_Handler>
  }
}
 8000562:	bf00      	nop
 8000564:	3750      	adds	r7, #80	@ 0x50
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
	...

0800056c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b08c      	sub	sp, #48	@ 0x30
 8000570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000572:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800057e:	1d3b      	adds	r3, r7, #4
 8000580:	2220      	movs	r2, #32
 8000582:	2100      	movs	r1, #0
 8000584:	4618      	mov	r0, r3
 8000586:	f00e fabd 	bl	800eb04 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800058a:	4b33      	ldr	r3, [pc, #204]	@ (8000658 <MX_ADC1_Init+0xec>)
 800058c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000590:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000592:	4b31      	ldr	r3, [pc, #196]	@ (8000658 <MX_ADC1_Init+0xec>)
 8000594:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000598:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800059a:	4b2f      	ldr	r3, [pc, #188]	@ (8000658 <MX_ADC1_Init+0xec>)
 800059c:	2200      	movs	r2, #0
 800059e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005a0:	4b2d      	ldr	r3, [pc, #180]	@ (8000658 <MX_ADC1_Init+0xec>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80005a6:	4b2c      	ldr	r3, [pc, #176]	@ (8000658 <MX_ADC1_Init+0xec>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005ac:	4b2a      	ldr	r3, [pc, #168]	@ (8000658 <MX_ADC1_Init+0xec>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005b2:	4b29      	ldr	r3, [pc, #164]	@ (8000658 <MX_ADC1_Init+0xec>)
 80005b4:	2204      	movs	r2, #4
 80005b6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005b8:	4b27      	ldr	r3, [pc, #156]	@ (8000658 <MX_ADC1_Init+0xec>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005be:	4b26      	ldr	r3, [pc, #152]	@ (8000658 <MX_ADC1_Init+0xec>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80005c4:	4b24      	ldr	r3, [pc, #144]	@ (8000658 <MX_ADC1_Init+0xec>)
 80005c6:	2201      	movs	r2, #1
 80005c8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005ca:	4b23      	ldr	r3, [pc, #140]	@ (8000658 <MX_ADC1_Init+0xec>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_CC1;
 80005d2:	4b21      	ldr	r3, [pc, #132]	@ (8000658 <MX_ADC1_Init+0xec>)
 80005d4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80005d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80005da:	4b1f      	ldr	r3, [pc, #124]	@ (8000658 <MX_ADC1_Init+0xec>)
 80005dc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80005e0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000658 <MX_ADC1_Init+0xec>)
 80005e4:	2201      	movs	r2, #1
 80005e6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005ea:	4b1b      	ldr	r3, [pc, #108]	@ (8000658 <MX_ADC1_Init+0xec>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80005f0:	4b19      	ldr	r3, [pc, #100]	@ (8000658 <MX_ADC1_Init+0xec>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005f8:	4817      	ldr	r0, [pc, #92]	@ (8000658 <MX_ADC1_Init+0xec>)
 80005fa:	f002 f81d 	bl	8002638 <HAL_ADC_Init>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000604:	f000 fd6e 	bl	80010e4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000608:	2300      	movs	r3, #0
 800060a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800060c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000610:	4619      	mov	r1, r3
 8000612:	4811      	ldr	r0, [pc, #68]	@ (8000658 <MX_ADC1_Init+0xec>)
 8000614:	f003 fad6 	bl	8003bc4 <HAL_ADCEx_MultiModeConfigChannel>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800061e:	f000 fd61 	bl	80010e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP1;
 8000622:	4b0e      	ldr	r3, [pc, #56]	@ (800065c <MX_ADC1_Init+0xf0>)
 8000624:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000626:	2306      	movs	r3, #6
 8000628:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800062a:	2300      	movs	r3, #0
 800062c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800062e:	237f      	movs	r3, #127	@ 0x7f
 8000630:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000632:	2304      	movs	r3, #4
 8000634:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000636:	2300      	movs	r3, #0
 8000638:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	4619      	mov	r1, r3
 800063e:	4806      	ldr	r0, [pc, #24]	@ (8000658 <MX_ADC1_Init+0xec>)
 8000640:	f002 fcfe 	bl	8003040 <HAL_ADC_ConfigChannel>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800064a:	f000 fd4b 	bl	80010e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800064e:	bf00      	nop
 8000650:	3730      	adds	r7, #48	@ 0x30
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	200001f0 	.word	0x200001f0
 800065c:	b6902000 	.word	0xb6902000

08000660 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b088      	sub	sp, #32
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000666:	463b      	mov	r3, r7
 8000668:	2220      	movs	r2, #32
 800066a:	2100      	movs	r1, #0
 800066c:	4618      	mov	r0, r3
 800066e:	f00e fa49 	bl	800eb04 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000672:	4b2c      	ldr	r3, [pc, #176]	@ (8000724 <MX_ADC2_Init+0xc4>)
 8000674:	4a2c      	ldr	r2, [pc, #176]	@ (8000728 <MX_ADC2_Init+0xc8>)
 8000676:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000678:	4b2a      	ldr	r3, [pc, #168]	@ (8000724 <MX_ADC2_Init+0xc4>)
 800067a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800067e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000680:	4b28      	ldr	r3, [pc, #160]	@ (8000724 <MX_ADC2_Init+0xc4>)
 8000682:	2200      	movs	r2, #0
 8000684:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000686:	4b27      	ldr	r3, [pc, #156]	@ (8000724 <MX_ADC2_Init+0xc4>)
 8000688:	2200      	movs	r2, #0
 800068a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800068c:	4b25      	ldr	r3, [pc, #148]	@ (8000724 <MX_ADC2_Init+0xc4>)
 800068e:	2200      	movs	r2, #0
 8000690:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000692:	4b24      	ldr	r3, [pc, #144]	@ (8000724 <MX_ADC2_Init+0xc4>)
 8000694:	2200      	movs	r2, #0
 8000696:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000698:	4b22      	ldr	r3, [pc, #136]	@ (8000724 <MX_ADC2_Init+0xc4>)
 800069a:	2204      	movs	r2, #4
 800069c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800069e:	4b21      	ldr	r3, [pc, #132]	@ (8000724 <MX_ADC2_Init+0xc4>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80006a4:	4b1f      	ldr	r3, [pc, #124]	@ (8000724 <MX_ADC2_Init+0xc4>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80006aa:	4b1e      	ldr	r3, [pc, #120]	@ (8000724 <MX_ADC2_Init+0xc4>)
 80006ac:	2201      	movs	r2, #1
 80006ae:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80006b0:	4b1c      	ldr	r3, [pc, #112]	@ (8000724 <MX_ADC2_Init+0xc4>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_CC2;
 80006b8:	4b1a      	ldr	r3, [pc, #104]	@ (8000724 <MX_ADC2_Init+0xc4>)
 80006ba:	f44f 6284 	mov.w	r2, #1056	@ 0x420
 80006be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80006c0:	4b18      	ldr	r3, [pc, #96]	@ (8000724 <MX_ADC2_Init+0xc4>)
 80006c2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80006c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80006c8:	4b16      	ldr	r3, [pc, #88]	@ (8000724 <MX_ADC2_Init+0xc4>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006d0:	4b14      	ldr	r3, [pc, #80]	@ (8000724 <MX_ADC2_Init+0xc4>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80006d6:	4b13      	ldr	r3, [pc, #76]	@ (8000724 <MX_ADC2_Init+0xc4>)
 80006d8:	2200      	movs	r2, #0
 80006da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80006de:	4811      	ldr	r0, [pc, #68]	@ (8000724 <MX_ADC2_Init+0xc4>)
 80006e0:	f001 ffaa 	bl	8002638 <HAL_ADC_Init>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80006ea:	f000 fcfb 	bl	80010e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP3_ADC2;
 80006ee:	4b0f      	ldr	r3, [pc, #60]	@ (800072c <MX_ADC2_Init+0xcc>)
 80006f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006f2:	2306      	movs	r3, #6
 80006f4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006f6:	2300      	movs	r3, #0
 80006f8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006fa:	237f      	movs	r3, #127	@ 0x7f
 80006fc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006fe:	2304      	movs	r3, #4
 8000700:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000706:	463b      	mov	r3, r7
 8000708:	4619      	mov	r1, r3
 800070a:	4806      	ldr	r0, [pc, #24]	@ (8000724 <MX_ADC2_Init+0xc4>)
 800070c:	f002 fc98 	bl	8003040 <HAL_ADC_ConfigChannel>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 8000716:	f000 fce5 	bl	80010e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800071a:	bf00      	nop
 800071c:	3720      	adds	r7, #32
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	2000025c 	.word	0x2000025c
 8000728:	50000100 	.word	0x50000100
 800072c:	cb8c0000 	.word	0xcb8c0000

08000730 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08c      	sub	sp, #48	@ 0x30
 8000734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000736:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	2220      	movs	r2, #32
 8000746:	2100      	movs	r1, #0
 8000748:	4618      	mov	r0, r3
 800074a:	f00e f9db 	bl	800eb04 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800074e:	4b32      	ldr	r3, [pc, #200]	@ (8000818 <MX_ADC3_Init+0xe8>)
 8000750:	4a32      	ldr	r2, [pc, #200]	@ (800081c <MX_ADC3_Init+0xec>)
 8000752:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000754:	4b30      	ldr	r3, [pc, #192]	@ (8000818 <MX_ADC3_Init+0xe8>)
 8000756:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800075a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800075c:	4b2e      	ldr	r3, [pc, #184]	@ (8000818 <MX_ADC3_Init+0xe8>)
 800075e:	2200      	movs	r2, #0
 8000760:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000762:	4b2d      	ldr	r3, [pc, #180]	@ (8000818 <MX_ADC3_Init+0xe8>)
 8000764:	2200      	movs	r2, #0
 8000766:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8000768:	4b2b      	ldr	r3, [pc, #172]	@ (8000818 <MX_ADC3_Init+0xe8>)
 800076a:	2200      	movs	r2, #0
 800076c:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800076e:	4b2a      	ldr	r3, [pc, #168]	@ (8000818 <MX_ADC3_Init+0xe8>)
 8000770:	2200      	movs	r2, #0
 8000772:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000774:	4b28      	ldr	r3, [pc, #160]	@ (8000818 <MX_ADC3_Init+0xe8>)
 8000776:	2204      	movs	r2, #4
 8000778:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800077a:	4b27      	ldr	r3, [pc, #156]	@ (8000818 <MX_ADC3_Init+0xe8>)
 800077c:	2200      	movs	r2, #0
 800077e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000780:	4b25      	ldr	r3, [pc, #148]	@ (8000818 <MX_ADC3_Init+0xe8>)
 8000782:	2200      	movs	r2, #0
 8000784:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8000786:	4b24      	ldr	r3, [pc, #144]	@ (8000818 <MX_ADC3_Init+0xe8>)
 8000788:	2201      	movs	r2, #1
 800078a:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800078c:	4b22      	ldr	r3, [pc, #136]	@ (8000818 <MX_ADC3_Init+0xe8>)
 800078e:	2200      	movs	r2, #0
 8000790:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_CC3;
 8000794:	4b20      	ldr	r3, [pc, #128]	@ (8000818 <MX_ADC3_Init+0xe8>)
 8000796:	f44f 6288 	mov.w	r2, #1088	@ 0x440
 800079a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800079c:	4b1e      	ldr	r3, [pc, #120]	@ (8000818 <MX_ADC3_Init+0xe8>)
 800079e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80007a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80007a4:	4b1c      	ldr	r3, [pc, #112]	@ (8000818 <MX_ADC3_Init+0xe8>)
 80007a6:	2201      	movs	r2, #1
 80007a8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007ac:	4b1a      	ldr	r3, [pc, #104]	@ (8000818 <MX_ADC3_Init+0xe8>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 80007b2:	4b19      	ldr	r3, [pc, #100]	@ (8000818 <MX_ADC3_Init+0xe8>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80007ba:	4817      	ldr	r0, [pc, #92]	@ (8000818 <MX_ADC3_Init+0xe8>)
 80007bc:	f001 ff3c 	bl	8002638 <HAL_ADC_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_ADC3_Init+0x9a>
  {
    Error_Handler();
 80007c6:	f000 fc8d 	bl	80010e4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007ca:	2300      	movs	r3, #0
 80007cc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80007ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007d2:	4619      	mov	r1, r3
 80007d4:	4810      	ldr	r0, [pc, #64]	@ (8000818 <MX_ADC3_Init+0xe8>)
 80007d6:	f003 f9f5 	bl	8003bc4 <HAL_ADCEx_MultiModeConfigChannel>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 80007e0:	f000 fc80 	bl	80010e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP3_ADC3;
 80007e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000820 <MX_ADC3_Init+0xf0>)
 80007e6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007e8:	2306      	movs	r3, #6
 80007ea:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007ec:	2300      	movs	r3, #0
 80007ee:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007f0:	237f      	movs	r3, #127	@ 0x7f
 80007f2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007f4:	2304      	movs	r3, #4
 80007f6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	4619      	mov	r1, r3
 8000800:	4805      	ldr	r0, [pc, #20]	@ (8000818 <MX_ADC3_Init+0xe8>)
 8000802:	f002 fc1d 	bl	8003040 <HAL_ADC_ConfigChannel>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_ADC3_Init+0xe0>
  {
    Error_Handler();
 800080c:	f000 fc6a 	bl	80010e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000810:	bf00      	nop
 8000812:	3730      	adds	r7, #48	@ 0x30
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	200002c8 	.word	0x200002c8
 800081c:	50000400 	.word	0x50000400
 8000820:	b6982000 	.word	0xb6982000

08000824 <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8000828:	4b0f      	ldr	r3, [pc, #60]	@ (8000868 <MX_OPAMP1_Init+0x44>)
 800082a:	4a10      	ldr	r2, [pc, #64]	@ (800086c <MX_OPAMP1_Init+0x48>)
 800082c:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 800082e:	4b0e      	ldr	r3, [pc, #56]	@ (8000868 <MX_OPAMP1_Init+0x44>)
 8000830:	2280      	movs	r2, #128	@ 0x80
 8000832:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_FOLLOWER_MODE;
 8000834:	4b0c      	ldr	r3, [pc, #48]	@ (8000868 <MX_OPAMP1_Init+0x44>)
 8000836:	2260      	movs	r2, #96	@ 0x60
 8000838:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800083a:	4b0b      	ldr	r3, [pc, #44]	@ (8000868 <MX_OPAMP1_Init+0x44>)
 800083c:	2200      	movs	r2, #0
 800083e:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = ENABLE;
 8000840:	4b09      	ldr	r3, [pc, #36]	@ (8000868 <MX_OPAMP1_Init+0x44>)
 8000842:	2201      	movs	r2, #1
 8000844:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000846:	4b08      	ldr	r3, [pc, #32]	@ (8000868 <MX_OPAMP1_Init+0x44>)
 8000848:	2200      	movs	r2, #0
 800084a:	619a      	str	r2, [r3, #24]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800084c:	4b06      	ldr	r3, [pc, #24]	@ (8000868 <MX_OPAMP1_Init+0x44>)
 800084e:	2200      	movs	r2, #0
 8000850:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8000852:	4805      	ldr	r0, [pc, #20]	@ (8000868 <MX_OPAMP1_Init+0x44>)
 8000854:	f003 fffe 	bl	8004854 <HAL_OPAMP_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_OPAMP1_Init+0x3e>
  {
    Error_Handler();
 800085e:	f000 fc41 	bl	80010e4 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20000454 	.word	0x20000454
 800086c:	40010300 	.word	0x40010300

08000870 <MX_OPAMP3_Init>:
  * @brief OPAMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP3_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 8000874:	4b0f      	ldr	r3, [pc, #60]	@ (80008b4 <MX_OPAMP3_Init+0x44>)
 8000876:	4a10      	ldr	r2, [pc, #64]	@ (80008b8 <MX_OPAMP3_Init+0x48>)
 8000878:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 800087a:	4b0e      	ldr	r3, [pc, #56]	@ (80008b4 <MX_OPAMP3_Init+0x44>)
 800087c:	2280      	movs	r2, #128	@ 0x80
 800087e:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_FOLLOWER_MODE;
 8000880:	4b0c      	ldr	r3, [pc, #48]	@ (80008b4 <MX_OPAMP3_Init+0x44>)
 8000882:	2260      	movs	r2, #96	@ 0x60
 8000884:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 8000886:	4b0b      	ldr	r3, [pc, #44]	@ (80008b4 <MX_OPAMP3_Init+0x44>)
 8000888:	2208      	movs	r2, #8
 800088a:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = ENABLE;
 800088c:	4b09      	ldr	r3, [pc, #36]	@ (80008b4 <MX_OPAMP3_Init+0x44>)
 800088e:	2201      	movs	r2, #1
 8000890:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000892:	4b08      	ldr	r3, [pc, #32]	@ (80008b4 <MX_OPAMP3_Init+0x44>)
 8000894:	2200      	movs	r2, #0
 8000896:	619a      	str	r2, [r3, #24]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000898:	4b06      	ldr	r3, [pc, #24]	@ (80008b4 <MX_OPAMP3_Init+0x44>)
 800089a:	2200      	movs	r2, #0
 800089c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 800089e:	4805      	ldr	r0, [pc, #20]	@ (80008b4 <MX_OPAMP3_Init+0x44>)
 80008a0:	f003 ffd8 	bl	8004854 <HAL_OPAMP_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_OPAMP3_Init+0x3e>
  {
    Error_Handler();
 80008aa:	f000 fc1b 	bl	80010e4 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000490 	.word	0x20000490
 80008b8:	40010308 	.word	0x40010308

080008bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b09c      	sub	sp, #112	@ 0x70
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008c2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008d0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008dc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]
 80008e8:	60da      	str	r2, [r3, #12]
 80008ea:	611a      	str	r2, [r3, #16]
 80008ec:	615a      	str	r2, [r3, #20]
 80008ee:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008f0:	1d3b      	adds	r3, r7, #4
 80008f2:	2234      	movs	r2, #52	@ 0x34
 80008f4:	2100      	movs	r1, #0
 80008f6:	4618      	mov	r0, r3
 80008f8:	f00e f904 	bl	800eb04 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008fc:	4b5a      	ldr	r3, [pc, #360]	@ (8000a68 <MX_TIM1_Init+0x1ac>)
 80008fe:	4a5b      	ldr	r2, [pc, #364]	@ (8000a6c <MX_TIM1_Init+0x1b0>)
 8000900:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15-1;
 8000902:	4b59      	ldr	r3, [pc, #356]	@ (8000a68 <MX_TIM1_Init+0x1ac>)
 8000904:	220e      	movs	r2, #14
 8000906:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000908:	4b57      	ldr	r3, [pc, #348]	@ (8000a68 <MX_TIM1_Init+0x1ac>)
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2;
 800090e:	4b56      	ldr	r3, [pc, #344]	@ (8000a68 <MX_TIM1_Init+0x1ac>)
 8000910:	2202      	movs	r2, #2
 8000912:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000914:	4b54      	ldr	r3, [pc, #336]	@ (8000a68 <MX_TIM1_Init+0x1ac>)
 8000916:	2200      	movs	r2, #0
 8000918:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800091a:	4b53      	ldr	r3, [pc, #332]	@ (8000a68 <MX_TIM1_Init+0x1ac>)
 800091c:	2200      	movs	r2, #0
 800091e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000920:	4b51      	ldr	r3, [pc, #324]	@ (8000a68 <MX_TIM1_Init+0x1ac>)
 8000922:	2200      	movs	r2, #0
 8000924:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000926:	4850      	ldr	r0, [pc, #320]	@ (8000a68 <MX_TIM1_Init+0x1ac>)
 8000928:	f006 fdc0 	bl	80074ac <HAL_TIM_Base_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000932:	f000 fbd7 	bl	80010e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000936:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800093a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800093c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000940:	4619      	mov	r1, r3
 8000942:	4849      	ldr	r0, [pc, #292]	@ (8000a68 <MX_TIM1_Init+0x1ac>)
 8000944:	f008 f932 	bl	8008bac <HAL_TIM_ConfigClockSource>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800094e:	f000 fbc9 	bl	80010e4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000952:	4845      	ldr	r0, [pc, #276]	@ (8000a68 <MX_TIM1_Init+0x1ac>)
 8000954:	f006 feea 	bl	800772c <HAL_TIM_OC_Init>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800095e:	f000 fbc1 	bl	80010e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000962:	2320      	movs	r3, #32
 8000964:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000966:	2300      	movs	r3, #0
 8000968:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800096a:	2300      	movs	r3, #0
 800096c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800096e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000972:	4619      	mov	r1, r3
 8000974:	483c      	ldr	r0, [pc, #240]	@ (8000a68 <MX_TIM1_Init+0x1ac>)
 8000976:	f009 fa6d 	bl	8009e54 <HAL_TIMEx_MasterConfigSynchronization>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000980:	f000 fbb0 	bl	80010e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000984:	2330      	movs	r3, #48	@ 0x30
 8000986:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000988:	2300      	movs	r3, #0
 800098a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800098c:	2300      	movs	r3, #0
 800098e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000990:	2300      	movs	r3, #0
 8000992:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000994:	2300      	movs	r3, #0
 8000996:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000998:	2300      	movs	r3, #0
 800099a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800099c:	2300      	movs	r3, #0
 800099e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009a0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80009a4:	2200      	movs	r2, #0
 80009a6:	4619      	mov	r1, r3
 80009a8:	482f      	ldr	r0, [pc, #188]	@ (8000a68 <MX_TIM1_Init+0x1ac>)
 80009aa:	f007 fed5 	bl	8008758 <HAL_TIM_OC_ConfigChannel>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80009b4:	f000 fb96 	bl	80010e4 <Error_Handler>
  }
  sConfigOC.Pulse = 1;
 80009b8:	2301      	movs	r3, #1
 80009ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009bc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80009c0:	2204      	movs	r2, #4
 80009c2:	4619      	mov	r1, r3
 80009c4:	4828      	ldr	r0, [pc, #160]	@ (8000a68 <MX_TIM1_Init+0x1ac>)
 80009c6:	f007 fec7 	bl	8008758 <HAL_TIM_OC_ConfigChannel>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 80009d0:	f000 fb88 	bl	80010e4 <Error_Handler>
  }
  sConfigOC.Pulse = 2;
 80009d4:	2302      	movs	r3, #2
 80009d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80009d8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80009dc:	2208      	movs	r2, #8
 80009de:	4619      	mov	r1, r3
 80009e0:	4821      	ldr	r0, [pc, #132]	@ (8000a68 <MX_TIM1_Init+0x1ac>)
 80009e2:	f007 feb9 	bl	8008758 <HAL_TIM_OC_ConfigChannel>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_TIM1_Init+0x134>
  {
    Error_Handler();
 80009ec:	f000 fb7a 	bl	80010e4 <Error_Handler>
  }
  sConfigOC.Pulse = 3;
 80009f0:	2303      	movs	r3, #3
 80009f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80009f4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80009f8:	220c      	movs	r2, #12
 80009fa:	4619      	mov	r1, r3
 80009fc:	481a      	ldr	r0, [pc, #104]	@ (8000a68 <MX_TIM1_Init+0x1ac>)
 80009fe:	f007 feab 	bl	8008758 <HAL_TIM_OC_ConfigChannel>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 8000a08:	f000 fb6c 	bl	80010e4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a10:	2300      	movs	r3, #0
 8000a12:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a14:	2300      	movs	r3, #0
 8000a16:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a20:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a24:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a26:	2300      	movs	r3, #0
 8000a28:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a32:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000a36:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a40:	2300      	movs	r3, #0
 8000a42:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a44:	1d3b      	adds	r3, r7, #4
 8000a46:	4619      	mov	r1, r3
 8000a48:	4807      	ldr	r0, [pc, #28]	@ (8000a68 <MX_TIM1_Init+0x1ac>)
 8000a4a:	f009 fa99 	bl	8009f80 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_TIM1_Init+0x19c>
  {
    Error_Handler();
 8000a54:	f000 fb46 	bl	80010e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a58:	4803      	ldr	r0, [pc, #12]	@ (8000a68 <MX_TIM1_Init+0x1ac>)
 8000a5a:	f000 fe0f 	bl	800167c <HAL_TIM_MspPostInit>

}
 8000a5e:	bf00      	nop
 8000a60:	3770      	adds	r7, #112	@ 0x70
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	200004cc 	.word	0x200004cc
 8000a6c:	40012c00 	.word	0x40012c00

08000a70 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08e      	sub	sp, #56	@ 0x38
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a76:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
 8000a80:	609a      	str	r2, [r3, #8]
 8000a82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a84:	f107 031c 	add.w	r3, r7, #28
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a90:	463b      	mov	r3, r7
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]
 8000a9c:	611a      	str	r2, [r3, #16]
 8000a9e:	615a      	str	r2, [r3, #20]
 8000aa0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000aa2:	4b37      	ldr	r3, [pc, #220]	@ (8000b80 <MX_TIM2_Init+0x110>)
 8000aa4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000aa8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000aaa:	4b35      	ldr	r3, [pc, #212]	@ (8000b80 <MX_TIM2_Init+0x110>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab0:	4b33      	ldr	r3, [pc, #204]	@ (8000b80 <MX_TIM2_Init+0x110>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000ab6:	4b32      	ldr	r3, [pc, #200]	@ (8000b80 <MX_TIM2_Init+0x110>)
 8000ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8000abc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000abe:	4b30      	ldr	r3, [pc, #192]	@ (8000b80 <MX_TIM2_Init+0x110>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac4:	4b2e      	ldr	r3, [pc, #184]	@ (8000b80 <MX_TIM2_Init+0x110>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000aca:	482d      	ldr	r0, [pc, #180]	@ (8000b80 <MX_TIM2_Init+0x110>)
 8000acc:	f006 fcee 	bl	80074ac <HAL_TIM_Base_Init>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000ad6:	f000 fb05 	bl	80010e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8000ada:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ade:	62bb      	str	r3, [r7, #40]	@ 0x28
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	633b      	str	r3, [r7, #48]	@ 0x30
  sClockSourceConfig.ClockFilter = 0;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000aec:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000af0:	4619      	mov	r1, r3
 8000af2:	4823      	ldr	r0, [pc, #140]	@ (8000b80 <MX_TIM2_Init+0x110>)
 8000af4:	f008 f85a 	bl	8008bac <HAL_TIM_ConfigClockSource>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000afe:	f000 faf1 	bl	80010e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b02:	481f      	ldr	r0, [pc, #124]	@ (8000b80 <MX_TIM2_Init+0x110>)
 8000b04:	f006 ff86 	bl	8007a14 <HAL_TIM_PWM_Init>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8000b0e:	f000 fae9 	bl	80010e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b12:	2300      	movs	r3, #0
 8000b14:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b16:	2300      	movs	r3, #0
 8000b18:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b1a:	f107 031c 	add.w	r3, r7, #28
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4817      	ldr	r0, [pc, #92]	@ (8000b80 <MX_TIM2_Init+0x110>)
 8000b22:	f009 f997 	bl	8009e54 <HAL_TIMEx_MasterConfigSynchronization>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_TIM2_Init+0xc0>
  {
    Error_Handler();
 8000b2c:	f000 fada 	bl	80010e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b30:	2360      	movs	r3, #96	@ 0x60
 8000b32:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 8000b34:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b38:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b42:	463b      	mov	r3, r7
 8000b44:	2208      	movs	r2, #8
 8000b46:	4619      	mov	r1, r3
 8000b48:	480d      	ldr	r0, [pc, #52]	@ (8000b80 <MX_TIM2_Init+0x110>)
 8000b4a:	f007 ff1b 	bl	8008984 <HAL_TIM_PWM_ConfigChannel>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8000b54:	f000 fac6 	bl	80010e4 <Error_Handler>
  }
  sConfigOC.Pulse = 1000000;
 8000b58:	4b0a      	ldr	r3, [pc, #40]	@ (8000b84 <MX_TIM2_Init+0x114>)
 8000b5a:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b5c:	463b      	mov	r3, r7
 8000b5e:	220c      	movs	r2, #12
 8000b60:	4619      	mov	r1, r3
 8000b62:	4807      	ldr	r0, [pc, #28]	@ (8000b80 <MX_TIM2_Init+0x110>)
 8000b64:	f007 ff0e 	bl	8008984 <HAL_TIM_PWM_ConfigChannel>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_TIM2_Init+0x102>
  {
    Error_Handler();
 8000b6e:	f000 fab9 	bl	80010e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b72:	4803      	ldr	r0, [pc, #12]	@ (8000b80 <MX_TIM2_Init+0x110>)
 8000b74:	f000 fd82 	bl	800167c <HAL_TIM_MspPostInit>

}
 8000b78:	bf00      	nop
 8000b7a:	3738      	adds	r7, #56	@ 0x38
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20000518 	.word	0x20000518
 8000b84:	000f4240 	.word	0x000f4240

08000b88 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08e      	sub	sp, #56	@ 0x38
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b8e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	605a      	str	r2, [r3, #4]
 8000b98:	609a      	str	r2, [r3, #8]
 8000b9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b9c:	f107 031c 	add.w	r3, r7, #28
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ba8:	463b      	mov	r3, r7
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
 8000bb2:	60da      	str	r2, [r3, #12]
 8000bb4:	611a      	str	r2, [r3, #16]
 8000bb6:	615a      	str	r2, [r3, #20]
 8000bb8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bba:	4b2c      	ldr	r3, [pc, #176]	@ (8000c6c <MX_TIM3_Init+0xe4>)
 8000bbc:	4a2c      	ldr	r2, [pc, #176]	@ (8000c70 <MX_TIM3_Init+0xe8>)
 8000bbe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000bc0:	4b2a      	ldr	r3, [pc, #168]	@ (8000c6c <MX_TIM3_Init+0xe4>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc6:	4b29      	ldr	r3, [pc, #164]	@ (8000c6c <MX_TIM3_Init+0xe4>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 200;
 8000bcc:	4b27      	ldr	r3, [pc, #156]	@ (8000c6c <MX_TIM3_Init+0xe4>)
 8000bce:	22c8      	movs	r2, #200	@ 0xc8
 8000bd0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bd2:	4b26      	ldr	r3, [pc, #152]	@ (8000c6c <MX_TIM3_Init+0xe4>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bd8:	4b24      	ldr	r3, [pc, #144]	@ (8000c6c <MX_TIM3_Init+0xe4>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000bde:	4823      	ldr	r0, [pc, #140]	@ (8000c6c <MX_TIM3_Init+0xe4>)
 8000be0:	f006 fc64 	bl	80074ac <HAL_TIM_Base_Init>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000bea:	f000 fa7b 	bl	80010e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bf2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000bf4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	481c      	ldr	r0, [pc, #112]	@ (8000c6c <MX_TIM3_Init+0xe4>)
 8000bfc:	f007 ffd6 	bl	8008bac <HAL_TIM_ConfigClockSource>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000c06:	f000 fa6d 	bl	80010e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c0a:	4818      	ldr	r0, [pc, #96]	@ (8000c6c <MX_TIM3_Init+0xe4>)
 8000c0c:	f006 ff02 	bl	8007a14 <HAL_TIM_PWM_Init>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000c16:	f000 fa65 	bl	80010e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c22:	f107 031c 	add.w	r3, r7, #28
 8000c26:	4619      	mov	r1, r3
 8000c28:	4810      	ldr	r0, [pc, #64]	@ (8000c6c <MX_TIM3_Init+0xe4>)
 8000c2a:	f009 f913 	bl	8009e54 <HAL_TIMEx_MasterConfigSynchronization>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000c34:	f000 fa56 	bl	80010e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c38:	2360      	movs	r3, #96	@ 0x60
 8000c3a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c40:	2300      	movs	r3, #0
 8000c42:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c44:	2300      	movs	r3, #0
 8000c46:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c48:	463b      	mov	r3, r7
 8000c4a:	220c      	movs	r2, #12
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4807      	ldr	r0, [pc, #28]	@ (8000c6c <MX_TIM3_Init+0xe4>)
 8000c50:	f007 fe98 	bl	8008984 <HAL_TIM_PWM_ConfigChannel>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000c5a:	f000 fa43 	bl	80010e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c5e:	4803      	ldr	r0, [pc, #12]	@ (8000c6c <MX_TIM3_Init+0xe4>)
 8000c60:	f000 fd0c 	bl	800167c <HAL_TIM_MspPostInit>

}
 8000c64:	bf00      	nop
 8000c66:	3738      	adds	r7, #56	@ 0x38
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20000564 	.word	0x20000564
 8000c70:	40000400 	.word	0x40000400

08000c74 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b088      	sub	sp, #32
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c7a:	f107 0310 	add.w	r3, r7, #16
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]
 8000c84:	609a      	str	r2, [r3, #8]
 8000c86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c88:	1d3b      	adds	r3, r7, #4
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	605a      	str	r2, [r3, #4]
 8000c90:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c92:	4b1e      	ldr	r3, [pc, #120]	@ (8000d0c <MX_TIM4_Init+0x98>)
 8000c94:	4a1e      	ldr	r2, [pc, #120]	@ (8000d10 <MX_TIM4_Init+0x9c>)
 8000c96:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 17000-1;
 8000c98:	4b1c      	ldr	r3, [pc, #112]	@ (8000d0c <MX_TIM4_Init+0x98>)
 8000c9a:	f244 2267 	movw	r2, #16999	@ 0x4267
 8000c9e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d0c <MX_TIM4_Init+0x98>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8000ca6:	4b19      	ldr	r3, [pc, #100]	@ (8000d0c <MX_TIM4_Init+0x98>)
 8000ca8:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000cac:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cae:	4b17      	ldr	r3, [pc, #92]	@ (8000d0c <MX_TIM4_Init+0x98>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000cb4:	4b15      	ldr	r3, [pc, #84]	@ (8000d0c <MX_TIM4_Init+0x98>)
 8000cb6:	2280      	movs	r2, #128	@ 0x80
 8000cb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000cba:	4814      	ldr	r0, [pc, #80]	@ (8000d0c <MX_TIM4_Init+0x98>)
 8000cbc:	f006 fbf6 	bl	80074ac <HAL_TIM_Base_Init>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8000cc6:	f000 fa0d 	bl	80010e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000cd0:	f107 0310 	add.w	r3, r7, #16
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	480d      	ldr	r0, [pc, #52]	@ (8000d0c <MX_TIM4_Init+0x98>)
 8000cd8:	f007 ff68 	bl	8008bac <HAL_TIM_ConfigClockSource>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8000ce2:	f000 f9ff 	bl	80010e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cea:	2300      	movs	r3, #0
 8000cec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000cee:	1d3b      	adds	r3, r7, #4
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4806      	ldr	r0, [pc, #24]	@ (8000d0c <MX_TIM4_Init+0x98>)
 8000cf4:	f009 f8ae 	bl	8009e54 <HAL_TIMEx_MasterConfigSynchronization>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8000cfe:	f000 f9f1 	bl	80010e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000d02:	bf00      	nop
 8000d04:	3720      	adds	r7, #32
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	200005b0 	.word	0x200005b0
 8000d10:	40000800 	.word	0x40000800

08000d14 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b090      	sub	sp, #64	@ 0x40
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d1a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	605a      	str	r2, [r3, #4]
 8000d24:	609a      	str	r2, [r3, #8]
 8000d26:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000d28:	f107 031c 	add.w	r3, r7, #28
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]
 8000d36:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d38:	f107 0310 	add.w	r3, r7, #16
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000d44:	463b      	mov	r3, r7
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
 8000d4c:	609a      	str	r2, [r3, #8]
 8000d4e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000d50:	4b3d      	ldr	r3, [pc, #244]	@ (8000e48 <MX_TIM15_Init+0x134>)
 8000d52:	4a3e      	ldr	r2, [pc, #248]	@ (8000e4c <MX_TIM15_Init+0x138>)
 8000d54:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000d56:	4b3c      	ldr	r3, [pc, #240]	@ (8000e48 <MX_TIM15_Init+0x134>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d5c:	4b3a      	ldr	r3, [pc, #232]	@ (8000e48 <MX_TIM15_Init+0x134>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000d62:	4b39      	ldr	r3, [pc, #228]	@ (8000e48 <MX_TIM15_Init+0x134>)
 8000d64:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d68:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d6a:	4b37      	ldr	r3, [pc, #220]	@ (8000e48 <MX_TIM15_Init+0x134>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000d70:	4b35      	ldr	r3, [pc, #212]	@ (8000e48 <MX_TIM15_Init+0x134>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d76:	4b34      	ldr	r3, [pc, #208]	@ (8000e48 <MX_TIM15_Init+0x134>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000d7c:	4832      	ldr	r0, [pc, #200]	@ (8000e48 <MX_TIM15_Init+0x134>)
 8000d7e:	f006 fb95 	bl	80074ac <HAL_TIM_Base_Init>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8000d88:	f000 f9ac 	bl	80010e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d8c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d90:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000d92:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d96:	4619      	mov	r1, r3
 8000d98:	482b      	ldr	r0, [pc, #172]	@ (8000e48 <MX_TIM15_Init+0x134>)
 8000d9a:	f007 ff07 	bl	8008bac <HAL_TIM_ConfigClockSource>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8000da4:	f000 f99e 	bl	80010e4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8000da8:	4827      	ldr	r0, [pc, #156]	@ (8000e48 <MX_TIM15_Init+0x134>)
 8000daa:	f007 f9d3 	bl	8008154 <HAL_TIM_IC_Init>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_TIM15_Init+0xa4>
  {
    Error_Handler();
 8000db4:	f000 f996 	bl	80010e4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000db8:	2304      	movs	r3, #4
 8000dba:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000dbc:	2350      	movs	r3, #80	@ 0x50
 8000dbe:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerFilter = 0;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim15, &sSlaveConfig) != HAL_OK)
 8000dc8:	f107 031c 	add.w	r3, r7, #28
 8000dcc:	4619      	mov	r1, r3
 8000dce:	481e      	ldr	r0, [pc, #120]	@ (8000e48 <MX_TIM15_Init+0x134>)
 8000dd0:	f008 f802 	bl	8008dd8 <HAL_TIM_SlaveConfigSynchro>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_TIM15_Init+0xca>
  {
    Error_Handler();
 8000dda:	f000 f983 	bl	80010e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dde:	2300      	movs	r3, #0
 8000de0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000de2:	2300      	movs	r3, #0
 8000de4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000de6:	f107 0310 	add.w	r3, r7, #16
 8000dea:	4619      	mov	r1, r3
 8000dec:	4816      	ldr	r0, [pc, #88]	@ (8000e48 <MX_TIM15_Init+0x134>)
 8000dee:	f009 f831 	bl	8009e54 <HAL_TIMEx_MasterConfigSynchronization>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_TIM15_Init+0xe8>
  {
    Error_Handler();
 8000df8:	f000 f974 	bl	80010e4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000e00:	2301      	movs	r3, #1
 8000e02:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000e04:	2300      	movs	r3, #0
 8000e06:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000e0c:	463b      	mov	r3, r7
 8000e0e:	2200      	movs	r2, #0
 8000e10:	4619      	mov	r1, r3
 8000e12:	480d      	ldr	r0, [pc, #52]	@ (8000e48 <MX_TIM15_Init+0x134>)
 8000e14:	f007 fd1a 	bl	800884c <HAL_TIM_IC_ConfigChannel>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8000e1e:	f000 f961 	bl	80010e4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000e22:	2300      	movs	r3, #0
 8000e24:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000e26:	2302      	movs	r3, #2
 8000e28:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	2204      	movs	r2, #4
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4805      	ldr	r0, [pc, #20]	@ (8000e48 <MX_TIM15_Init+0x134>)
 8000e32:	f007 fd0b 	bl	800884c <HAL_TIM_IC_ConfigChannel>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_TIM15_Init+0x12c>
  {
    Error_Handler();
 8000e3c:	f000 f952 	bl	80010e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8000e40:	bf00      	nop
 8000e42:	3740      	adds	r7, #64	@ 0x40
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	200005fc 	.word	0x200005fc
 8000e4c:	40014000 	.word	0x40014000

08000e50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000e56:	4b1e      	ldr	r3, [pc, #120]	@ (8000ed0 <MX_DMA_Init+0x80>)
 8000e58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e5a:	4a1d      	ldr	r2, [pc, #116]	@ (8000ed0 <MX_DMA_Init+0x80>)
 8000e5c:	f043 0304 	orr.w	r3, r3, #4
 8000e60:	6493      	str	r3, [r2, #72]	@ 0x48
 8000e62:	4b1b      	ldr	r3, [pc, #108]	@ (8000ed0 <MX_DMA_Init+0x80>)
 8000e64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e66:	f003 0304 	and.w	r3, r3, #4
 8000e6a:	607b      	str	r3, [r7, #4]
 8000e6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e6e:	4b18      	ldr	r3, [pc, #96]	@ (8000ed0 <MX_DMA_Init+0x80>)
 8000e70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e72:	4a17      	ldr	r2, [pc, #92]	@ (8000ed0 <MX_DMA_Init+0x80>)
 8000e74:	f043 0301 	orr.w	r3, r3, #1
 8000e78:	6493      	str	r3, [r2, #72]	@ 0x48
 8000e7a:	4b15      	ldr	r3, [pc, #84]	@ (8000ed0 <MX_DMA_Init+0x80>)
 8000e7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	603b      	str	r3, [r7, #0]
 8000e84:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000e86:	2200      	movs	r2, #0
 8000e88:	2100      	movs	r1, #0
 8000e8a:	200b      	movs	r0, #11
 8000e8c:	f003 f87d 	bl	8003f8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e90:	200b      	movs	r0, #11
 8000e92:	f003 f894 	bl	8003fbe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000e96:	2200      	movs	r2, #0
 8000e98:	2100      	movs	r1, #0
 8000e9a:	200c      	movs	r0, #12
 8000e9c:	f003 f875 	bl	8003f8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000ea0:	200c      	movs	r0, #12
 8000ea2:	f003 f88c 	bl	8003fbe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	200d      	movs	r0, #13
 8000eac:	f003 f86d 	bl	8003f8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000eb0:	200d      	movs	r0, #13
 8000eb2:	f003 f884 	bl	8003fbe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2100      	movs	r1, #0
 8000eba:	200e      	movs	r0, #14
 8000ebc:	f003 f865 	bl	8003f8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000ec0:	200e      	movs	r0, #14
 8000ec2:	f003 f87c 	bl	8003fbe <HAL_NVIC_EnableIRQ>

}
 8000ec6:	bf00      	nop
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40021000 	.word	0x40021000

08000ed4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08a      	sub	sp, #40	@ 0x28
 8000ed8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eda:	f107 0314 	add.w	r3, r7, #20
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	605a      	str	r2, [r3, #4]
 8000ee4:	609a      	str	r2, [r3, #8]
 8000ee6:	60da      	str	r2, [r3, #12]
 8000ee8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000eea:	4b30      	ldr	r3, [pc, #192]	@ (8000fac <MX_GPIO_Init+0xd8>)
 8000eec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eee:	4a2f      	ldr	r2, [pc, #188]	@ (8000fac <MX_GPIO_Init+0xd8>)
 8000ef0:	f043 0320 	orr.w	r3, r3, #32
 8000ef4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ef6:	4b2d      	ldr	r3, [pc, #180]	@ (8000fac <MX_GPIO_Init+0xd8>)
 8000ef8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000efa:	f003 0320 	and.w	r3, r3, #32
 8000efe:	613b      	str	r3, [r7, #16]
 8000f00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f02:	4b2a      	ldr	r3, [pc, #168]	@ (8000fac <MX_GPIO_Init+0xd8>)
 8000f04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f06:	4a29      	ldr	r2, [pc, #164]	@ (8000fac <MX_GPIO_Init+0xd8>)
 8000f08:	f043 0304 	orr.w	r3, r3, #4
 8000f0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f0e:	4b27      	ldr	r3, [pc, #156]	@ (8000fac <MX_GPIO_Init+0xd8>)
 8000f10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f12:	f003 0304 	and.w	r3, r3, #4
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1a:	4b24      	ldr	r3, [pc, #144]	@ (8000fac <MX_GPIO_Init+0xd8>)
 8000f1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f1e:	4a23      	ldr	r2, [pc, #140]	@ (8000fac <MX_GPIO_Init+0xd8>)
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f26:	4b21      	ldr	r3, [pc, #132]	@ (8000fac <MX_GPIO_Init+0xd8>)
 8000f28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	60bb      	str	r3, [r7, #8]
 8000f30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f32:	4b1e      	ldr	r3, [pc, #120]	@ (8000fac <MX_GPIO_Init+0xd8>)
 8000f34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f36:	4a1d      	ldr	r2, [pc, #116]	@ (8000fac <MX_GPIO_Init+0xd8>)
 8000f38:	f043 0302 	orr.w	r3, r3, #2
 8000f3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f3e:	4b1b      	ldr	r3, [pc, #108]	@ (8000fac <MX_GPIO_Init+0xd8>)
 8000f40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f42:	f003 0302 	and.w	r3, r3, #2
 8000f46:	607b      	str	r3, [r7, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ERROR_LED_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8000f50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f54:	f003 fc42 	bl	80047dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ERROR_LED_Pin PA10 */
  GPIO_InitStruct.Pin = ERROR_LED_Pin|GPIO_PIN_10;
 8000f58:	f44f 6382 	mov.w	r3, #1040	@ 0x410
 8000f5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f66:	2300      	movs	r3, #0
 8000f68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6a:	f107 0314 	add.w	r3, r7, #20
 8000f6e:	4619      	mov	r1, r3
 8000f70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f74:	f003 fab0 	bl	80044d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f78:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f7e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f88:	f107 0314 	add.w	r3, r7, #20
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4808      	ldr	r0, [pc, #32]	@ (8000fb0 <MX_GPIO_Init+0xdc>)
 8000f90:	f003 faa2 	bl	80044d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000f94:	2200      	movs	r2, #0
 8000f96:	2100      	movs	r1, #0
 8000f98:	2017      	movs	r0, #23
 8000f9a:	f002 fff6 	bl	8003f8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f9e:	2017      	movs	r0, #23
 8000fa0:	f003 f80d 	bl	8003fbe <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fa4:	bf00      	nop
 8000fa6:	3728      	adds	r7, #40	@ 0x28
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	40021000 	.word	0x40021000
 8000fb0:	48000400 	.word	0x48000400

08000fb4 <HAL_ADC_ConvHalfCpltCallback>:



//delay
 void HAL_ADC_ConvHalfCpltCallback	(ADC_HandleTypeDef *hadc)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]


#if TOWHILE

	//抓数据进while
	if (WHILE_FLAG==0) {
 8000fbc:	4b0f      	ldr	r3, [pc, #60]	@ (8000ffc <HAL_ADC_ConvHalfCpltCallback+0x48>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d114      	bne.n	8000fee <HAL_ADC_ConvHalfCpltCallback+0x3a>
		for (size_t i = 0; i < BUFFER_SIZE_HALF; i++)
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	e00a      	b.n	8000fe0 <HAL_ADC_ConvHalfCpltCallback+0x2c>
		{		WHILE_BUFFER[i] = ADC_BUFFER[i];	}
 8000fca:	4a0d      	ldr	r2, [pc, #52]	@ (8001000 <HAL_ADC_ConvHalfCpltCallback+0x4c>)
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000fd2:	490c      	ldr	r1, [pc, #48]	@ (8001004 <HAL_ADC_ConvHalfCpltCallback+0x50>)
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (size_t i = 0; i < BUFFER_SIZE_HALF; i++)
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000fe6:	d3f0      	bcc.n	8000fca <HAL_ADC_ConvHalfCpltCallback+0x16>
		WHILE_FLAG=1;
 8000fe8:	4b04      	ldr	r3, [pc, #16]	@ (8000ffc <HAL_ADC_ConvHalfCpltCallback+0x48>)
 8000fea:	2201      	movs	r2, #1
 8000fec:	601a      	str	r2, [r3, #0]


#endif


}
 8000fee:	bf00      	nop
 8000ff0:	3714      	adds	r7, #20
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	2000262c 	.word	0x2000262c
 8001000:	200006b8 	.word	0x200006b8
 8001004:	20001658 	.word	0x20001658

08001008 <HAL_ADC_ConvCpltCallback>:
 void HAL_ADC_ConvCpltCallback		(ADC_HandleTypeDef *hadc)
{
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
#endif

#if TOWHILE

//	抓数据进while
	if (WHILE_FLAG==1) {
 8001010:	4b0f      	ldr	r3, [pc, #60]	@ (8001050 <HAL_ADC_ConvCpltCallback+0x48>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2b01      	cmp	r3, #1
 8001016:	d115      	bne.n	8001044 <HAL_ADC_ConvCpltCallback+0x3c>
		for (size_t i = BUFFER_SIZE_HALF; i < BUFFER_SIZE; i++)
 8001018:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	e00a      	b.n	8001036 <HAL_ADC_ConvCpltCallback+0x2e>
		{		WHILE_BUFFER[i] = ADC_BUFFER[i];	}
 8001020:	4a0c      	ldr	r2, [pc, #48]	@ (8001054 <HAL_ADC_ConvCpltCallback+0x4c>)
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001028:	490b      	ldr	r1, [pc, #44]	@ (8001058 <HAL_ADC_ConvCpltCallback+0x50>)
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (size_t i = BUFFER_SIZE_HALF; i < BUFFER_SIZE; i++)
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	3301      	adds	r3, #1
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800103c:	d3f0      	bcc.n	8001020 <HAL_ADC_ConvCpltCallback+0x18>
		WHILE_FLAG=2;
 800103e:	4b04      	ldr	r3, [pc, #16]	@ (8001050 <HAL_ADC_ConvCpltCallback+0x48>)
 8001040:	2202      	movs	r2, #2
 8001042:	601a      	str	r2, [r3, #0]
	}

#endif
}
 8001044:	bf00      	nop
 8001046:	3714      	adds	r7, #20
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	2000262c 	.word	0x2000262c
 8001054:	200006b8 	.word	0x200006b8
 8001058:	20001658 	.word	0x20001658

0800105c <HAL_TIM_IC_CaptureCallback>:




 void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 {
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]

   if (htim->Instance == TIM15) // 判断是否为TIM15
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a1a      	ldr	r2, [pc, #104]	@ (80010d4 <HAL_TIM_IC_CaptureCallback+0x78>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d12e      	bne.n	80010cc <HAL_TIM_IC_CaptureCallback+0x70>
   {


     if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	7f1b      	ldrb	r3, [r3, #28]
 8001072:	2b01      	cmp	r3, #1
 8001074:	d12a      	bne.n	80010cc <HAL_TIM_IC_CaptureCallback+0x70>
     {

//  	   HAL_GPIO_TogglePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin);

       /* Get the Input Capture value */
       uwIC2Value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001076:	2100      	movs	r1, #0
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f007 feef 	bl	8008e5c <HAL_TIM_ReadCapturedValue>
 800107e:	4603      	mov	r3, r0
 8001080:	4a15      	ldr	r2, [pc, #84]	@ (80010d8 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8001082:	6013      	str	r3, [r2, #0]

       if (uwIC2Value != 0)
 8001084:	4b14      	ldr	r3, [pc, #80]	@ (80010d8 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d019      	beq.n	80010c0 <HAL_TIM_IC_CaptureCallback+0x64>
       {
         /* Duty cycle computation */
         uwDutyCycle = 255-((HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2)) * 255) / uwIC2Value;
 800108c:	2104      	movs	r1, #4
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f007 fee4 	bl	8008e5c <HAL_TIM_ReadCapturedValue>
 8001094:	4602      	mov	r2, r0
 8001096:	4613      	mov	r3, r2
 8001098:	021b      	lsls	r3, r3, #8
 800109a:	1a9a      	subs	r2, r3, r2
 800109c:	4b0e      	ldr	r3, [pc, #56]	@ (80010d8 <HAL_TIM_IC_CaptureCallback+0x7c>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80010a4:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 80010a8:	4a0c      	ldr	r2, [pc, #48]	@ (80010dc <HAL_TIM_IC_CaptureCallback+0x80>)
 80010aa:	6013      	str	r3, [r2, #0]

         /* uwFrequency computation
         TIM1 counter clock = (System Clock) */
         uwFrequency = ( HAL_RCC_GetSysClockFreq()  ) / uwIC2Value;
 80010ac:	f005 ff08 	bl	8006ec0 <HAL_RCC_GetSysClockFreq>
 80010b0:	4602      	mov	r2, r0
 80010b2:	4b09      	ldr	r3, [pc, #36]	@ (80010d8 <HAL_TIM_IC_CaptureCallback+0x7c>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ba:	4a09      	ldr	r2, [pc, #36]	@ (80010e0 <HAL_TIM_IC_CaptureCallback+0x84>)
 80010bc:	6013      	str	r3, [r2, #0]
         uwDutyCycle = 0;
         uwFrequency = 0;
       }
     }
   }
 }
 80010be:	e005      	b.n	80010cc <HAL_TIM_IC_CaptureCallback+0x70>
         uwDutyCycle = 0;
 80010c0:	4b06      	ldr	r3, [pc, #24]	@ (80010dc <HAL_TIM_IC_CaptureCallback+0x80>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
         uwFrequency = 0;
 80010c6:	4b06      	ldr	r3, [pc, #24]	@ (80010e0 <HAL_TIM_IC_CaptureCallback+0x84>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 }
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40014000 	.word	0x40014000
 80010d8:	200006a8 	.word	0x200006a8
 80010dc:	200006ac 	.word	0x200006ac
 80010e0:	200006b0 	.word	0x200006b0

080010e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* User can add his own implementation to report the HAL error return state */



//  __disable_irq();
  HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, 0);
 80010e8:	2200      	movs	r2, #0
 80010ea:	2110      	movs	r1, #16
 80010ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010f0:	f003 fb74 	bl	80047dc <HAL_GPIO_WritePin>
//  while (1)
//  {
//
//  }
  /* USER CODE END Error_Handler_Debug */
}
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010fe:	4b14      	ldr	r3, [pc, #80]	@ (8001150 <HAL_MspInit+0x58>)
 8001100:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001102:	4a13      	ldr	r2, [pc, #76]	@ (8001150 <HAL_MspInit+0x58>)
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	6613      	str	r3, [r2, #96]	@ 0x60
 800110a:	4b11      	ldr	r3, [pc, #68]	@ (8001150 <HAL_MspInit+0x58>)
 800110c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	607b      	str	r3, [r7, #4]
 8001114:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001116:	4b0e      	ldr	r3, [pc, #56]	@ (8001150 <HAL_MspInit+0x58>)
 8001118:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800111a:	4a0d      	ldr	r2, [pc, #52]	@ (8001150 <HAL_MspInit+0x58>)
 800111c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001120:	6593      	str	r3, [r2, #88]	@ 0x58
 8001122:	4b0b      	ldr	r3, [pc, #44]	@ (8001150 <HAL_MspInit+0x58>)
 8001124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001126:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800112a:	603b      	str	r3, [r7, #0]
 800112c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Tune the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_VREFBUF_TrimmingConfig(0);
 800112e:	2000      	movs	r0, #0
 8001130:	f001 f80a 	bl	8002148 <HAL_SYSCFG_VREFBUF_TrimmingConfig>

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 8001134:	2000      	movs	r0, #0
 8001136:	f000 ffdf 	bl	80020f8 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 800113a:	f001 f819 	bl	8002170 <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 800113e:	2000      	movs	r0, #0
 8001140:	f000 ffee 	bl	8002120 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001144:	f005 fa5e 	bl	8006604 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001148:	bf00      	nop
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40021000 	.word	0x40021000

08001154 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b0a0      	sub	sp, #128	@ 0x80
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800116c:	f107 0318 	add.w	r3, r7, #24
 8001170:	2254      	movs	r2, #84	@ 0x54
 8001172:	2100      	movs	r1, #0
 8001174:	4618      	mov	r0, r3
 8001176:	f00d fcc5 	bl	800eb04 <memset>
  if(hadc->Instance==ADC1)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001182:	d158      	bne.n	8001236 <HAL_ADC_MspInit+0xe2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001184:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001188:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800118a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800118e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001190:	f107 0318 	add.w	r3, r7, #24
 8001194:	4618      	mov	r0, r3
 8001196:	f005 ff3b 	bl	8007010 <HAL_RCCEx_PeriphCLKConfig>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80011a0:	f7ff ffa0 	bl	80010e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80011a4:	4b87      	ldr	r3, [pc, #540]	@ (80013c4 <HAL_ADC_MspInit+0x270>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	3301      	adds	r3, #1
 80011aa:	4a86      	ldr	r2, [pc, #536]	@ (80013c4 <HAL_ADC_MspInit+0x270>)
 80011ac:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80011ae:	4b85      	ldr	r3, [pc, #532]	@ (80013c4 <HAL_ADC_MspInit+0x270>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d10b      	bne.n	80011ce <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80011b6:	4b84      	ldr	r3, [pc, #528]	@ (80013c8 <HAL_ADC_MspInit+0x274>)
 80011b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ba:	4a83      	ldr	r2, [pc, #524]	@ (80013c8 <HAL_ADC_MspInit+0x274>)
 80011bc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80011c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011c2:	4b81      	ldr	r3, [pc, #516]	@ (80013c8 <HAL_ADC_MspInit+0x274>)
 80011c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011ca:	617b      	str	r3, [r7, #20]
 80011cc:	697b      	ldr	r3, [r7, #20]
    }

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 80011ce:	4b7f      	ldr	r3, [pc, #508]	@ (80013cc <HAL_ADC_MspInit+0x278>)
 80011d0:	4a7f      	ldr	r2, [pc, #508]	@ (80013d0 <HAL_ADC_MspInit+0x27c>)
 80011d2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80011d4:	4b7d      	ldr	r3, [pc, #500]	@ (80013cc <HAL_ADC_MspInit+0x278>)
 80011d6:	2205      	movs	r2, #5
 80011d8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011da:	4b7c      	ldr	r3, [pc, #496]	@ (80013cc <HAL_ADC_MspInit+0x278>)
 80011dc:	2200      	movs	r2, #0
 80011de:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011e0:	4b7a      	ldr	r3, [pc, #488]	@ (80013cc <HAL_ADC_MspInit+0x278>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011e6:	4b79      	ldr	r3, [pc, #484]	@ (80013cc <HAL_ADC_MspInit+0x278>)
 80011e8:	2280      	movs	r2, #128	@ 0x80
 80011ea:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80011ec:	4b77      	ldr	r3, [pc, #476]	@ (80013cc <HAL_ADC_MspInit+0x278>)
 80011ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011f2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80011f4:	4b75      	ldr	r3, [pc, #468]	@ (80013cc <HAL_ADC_MspInit+0x278>)
 80011f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80011fa:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80011fc:	4b73      	ldr	r3, [pc, #460]	@ (80013cc <HAL_ADC_MspInit+0x278>)
 80011fe:	2220      	movs	r2, #32
 8001200:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001202:	4b72      	ldr	r3, [pc, #456]	@ (80013cc <HAL_ADC_MspInit+0x278>)
 8001204:	2200      	movs	r2, #0
 8001206:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001208:	4870      	ldr	r0, [pc, #448]	@ (80013cc <HAL_ADC_MspInit+0x278>)
 800120a:	f002 fef3 	bl	8003ff4 <HAL_DMA_Init>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001214:	f7ff ff66 	bl	80010e4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	4a6c      	ldr	r2, [pc, #432]	@ (80013cc <HAL_ADC_MspInit+0x278>)
 800121c:	655a      	str	r2, [r3, #84]	@ 0x54
 800121e:	4a6b      	ldr	r2, [pc, #428]	@ (80013cc <HAL_ADC_MspInit+0x278>)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001224:	2200      	movs	r2, #0
 8001226:	2100      	movs	r1, #0
 8001228:	2012      	movs	r0, #18
 800122a:	f002 feae 	bl	8003f8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800122e:	2012      	movs	r0, #18
 8001230:	f002 fec5 	bl	8003fbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001234:	e0c2      	b.n	80013bc <HAL_ADC_MspInit+0x268>
  else if(hadc->Instance==ADC2)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a66      	ldr	r2, [pc, #408]	@ (80013d4 <HAL_ADC_MspInit+0x280>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d171      	bne.n	8001324 <HAL_ADC_MspInit+0x1d0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001240:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001244:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001246:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800124a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800124c:	f107 0318 	add.w	r3, r7, #24
 8001250:	4618      	mov	r0, r3
 8001252:	f005 fedd 	bl	8007010 <HAL_RCCEx_PeriphCLKConfig>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <HAL_ADC_MspInit+0x10c>
      Error_Handler();
 800125c:	f7ff ff42 	bl	80010e4 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001260:	4b58      	ldr	r3, [pc, #352]	@ (80013c4 <HAL_ADC_MspInit+0x270>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	3301      	adds	r3, #1
 8001266:	4a57      	ldr	r2, [pc, #348]	@ (80013c4 <HAL_ADC_MspInit+0x270>)
 8001268:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800126a:	4b56      	ldr	r3, [pc, #344]	@ (80013c4 <HAL_ADC_MspInit+0x270>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d10b      	bne.n	800128a <HAL_ADC_MspInit+0x136>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001272:	4b55      	ldr	r3, [pc, #340]	@ (80013c8 <HAL_ADC_MspInit+0x274>)
 8001274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001276:	4a54      	ldr	r2, [pc, #336]	@ (80013c8 <HAL_ADC_MspInit+0x274>)
 8001278:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800127c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800127e:	4b52      	ldr	r3, [pc, #328]	@ (80013c8 <HAL_ADC_MspInit+0x274>)
 8001280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001282:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001286:	613b      	str	r3, [r7, #16]
 8001288:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800128a:	4b4f      	ldr	r3, [pc, #316]	@ (80013c8 <HAL_ADC_MspInit+0x274>)
 800128c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800128e:	4a4e      	ldr	r2, [pc, #312]	@ (80013c8 <HAL_ADC_MspInit+0x274>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001296:	4b4c      	ldr	r3, [pc, #304]	@ (80013c8 <HAL_ADC_MspInit+0x274>)
 8001298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80012a2:	2302      	movs	r3, #2
 80012a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012a6:	2303      	movs	r3, #3
 80012a8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ae:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80012b2:	4619      	mov	r1, r3
 80012b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012b8:	f003 f90e 	bl	80044d8 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel3;
 80012bc:	4b46      	ldr	r3, [pc, #280]	@ (80013d8 <HAL_ADC_MspInit+0x284>)
 80012be:	4a47      	ldr	r2, [pc, #284]	@ (80013dc <HAL_ADC_MspInit+0x288>)
 80012c0:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80012c2:	4b45      	ldr	r3, [pc, #276]	@ (80013d8 <HAL_ADC_MspInit+0x284>)
 80012c4:	2224      	movs	r2, #36	@ 0x24
 80012c6:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012c8:	4b43      	ldr	r3, [pc, #268]	@ (80013d8 <HAL_ADC_MspInit+0x284>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80012ce:	4b42      	ldr	r3, [pc, #264]	@ (80013d8 <HAL_ADC_MspInit+0x284>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80012d4:	4b40      	ldr	r3, [pc, #256]	@ (80013d8 <HAL_ADC_MspInit+0x284>)
 80012d6:	2280      	movs	r2, #128	@ 0x80
 80012d8:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80012da:	4b3f      	ldr	r3, [pc, #252]	@ (80013d8 <HAL_ADC_MspInit+0x284>)
 80012dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012e0:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80012e2:	4b3d      	ldr	r3, [pc, #244]	@ (80013d8 <HAL_ADC_MspInit+0x284>)
 80012e4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80012e8:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80012ea:	4b3b      	ldr	r3, [pc, #236]	@ (80013d8 <HAL_ADC_MspInit+0x284>)
 80012ec:	2220      	movs	r2, #32
 80012ee:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80012f0:	4b39      	ldr	r3, [pc, #228]	@ (80013d8 <HAL_ADC_MspInit+0x284>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80012f6:	4838      	ldr	r0, [pc, #224]	@ (80013d8 <HAL_ADC_MspInit+0x284>)
 80012f8:	f002 fe7c 	bl	8003ff4 <HAL_DMA_Init>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <HAL_ADC_MspInit+0x1b2>
      Error_Handler();
 8001302:	f7ff feef 	bl	80010e4 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a33      	ldr	r2, [pc, #204]	@ (80013d8 <HAL_ADC_MspInit+0x284>)
 800130a:	655a      	str	r2, [r3, #84]	@ 0x54
 800130c:	4a32      	ldr	r2, [pc, #200]	@ (80013d8 <HAL_ADC_MspInit+0x284>)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001312:	2200      	movs	r2, #0
 8001314:	2100      	movs	r1, #0
 8001316:	2012      	movs	r0, #18
 8001318:	f002 fe37 	bl	8003f8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800131c:	2012      	movs	r0, #18
 800131e:	f002 fe4e 	bl	8003fbe <HAL_NVIC_EnableIRQ>
}
 8001322:	e04b      	b.n	80013bc <HAL_ADC_MspInit+0x268>
  else if(hadc->Instance==ADC3)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a2d      	ldr	r2, [pc, #180]	@ (80013e0 <HAL_ADC_MspInit+0x28c>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d146      	bne.n	80013bc <HAL_ADC_MspInit+0x268>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800132e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001332:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001334:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001338:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800133a:	f107 0318 	add.w	r3, r7, #24
 800133e:	4618      	mov	r0, r3
 8001340:	f005 fe66 	bl	8007010 <HAL_RCCEx_PeriphCLKConfig>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <HAL_ADC_MspInit+0x1fa>
      Error_Handler();
 800134a:	f7ff fecb 	bl	80010e4 <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 800134e:	4b1e      	ldr	r3, [pc, #120]	@ (80013c8 <HAL_ADC_MspInit+0x274>)
 8001350:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001352:	4a1d      	ldr	r2, [pc, #116]	@ (80013c8 <HAL_ADC_MspInit+0x274>)
 8001354:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001358:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800135a:	4b1b      	ldr	r3, [pc, #108]	@ (80013c8 <HAL_ADC_MspInit+0x274>)
 800135c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800135e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001362:	60bb      	str	r3, [r7, #8]
 8001364:	68bb      	ldr	r3, [r7, #8]
    hdma_adc3.Instance = DMA1_Channel4;
 8001366:	4b1f      	ldr	r3, [pc, #124]	@ (80013e4 <HAL_ADC_MspInit+0x290>)
 8001368:	4a1f      	ldr	r2, [pc, #124]	@ (80013e8 <HAL_ADC_MspInit+0x294>)
 800136a:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 800136c:	4b1d      	ldr	r3, [pc, #116]	@ (80013e4 <HAL_ADC_MspInit+0x290>)
 800136e:	2225      	movs	r2, #37	@ 0x25
 8001370:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001372:	4b1c      	ldr	r3, [pc, #112]	@ (80013e4 <HAL_ADC_MspInit+0x290>)
 8001374:	2200      	movs	r2, #0
 8001376:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001378:	4b1a      	ldr	r3, [pc, #104]	@ (80013e4 <HAL_ADC_MspInit+0x290>)
 800137a:	2200      	movs	r2, #0
 800137c:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800137e:	4b19      	ldr	r3, [pc, #100]	@ (80013e4 <HAL_ADC_MspInit+0x290>)
 8001380:	2280      	movs	r2, #128	@ 0x80
 8001382:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001384:	4b17      	ldr	r3, [pc, #92]	@ (80013e4 <HAL_ADC_MspInit+0x290>)
 8001386:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800138a:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800138c:	4b15      	ldr	r3, [pc, #84]	@ (80013e4 <HAL_ADC_MspInit+0x290>)
 800138e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001392:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8001394:	4b13      	ldr	r3, [pc, #76]	@ (80013e4 <HAL_ADC_MspInit+0x290>)
 8001396:	2200      	movs	r2, #0
 8001398:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800139a:	4b12      	ldr	r3, [pc, #72]	@ (80013e4 <HAL_ADC_MspInit+0x290>)
 800139c:	2200      	movs	r2, #0
 800139e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80013a0:	4810      	ldr	r0, [pc, #64]	@ (80013e4 <HAL_ADC_MspInit+0x290>)
 80013a2:	f002 fe27 	bl	8003ff4 <HAL_DMA_Init>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <HAL_ADC_MspInit+0x25c>
      Error_Handler();
 80013ac:	f7ff fe9a 	bl	80010e4 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4a0c      	ldr	r2, [pc, #48]	@ (80013e4 <HAL_ADC_MspInit+0x290>)
 80013b4:	655a      	str	r2, [r3, #84]	@ 0x54
 80013b6:	4a0b      	ldr	r2, [pc, #44]	@ (80013e4 <HAL_ADC_MspInit+0x290>)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80013bc:	bf00      	nop
 80013be:	3780      	adds	r7, #128	@ 0x80
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	20002634 	.word	0x20002634
 80013c8:	40021000 	.word	0x40021000
 80013cc:	20000334 	.word	0x20000334
 80013d0:	4002001c 	.word	0x4002001c
 80013d4:	50000100 	.word	0x50000100
 80013d8:	20000394 	.word	0x20000394
 80013dc:	40020030 	.word	0x40020030
 80013e0:	50000400 	.word	0x50000400
 80013e4:	200003f4 	.word	0x200003f4
 80013e8:	40020044 	.word	0x40020044

080013ec <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08a      	sub	sp, #40	@ 0x28
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f4:	f107 0314 	add.w	r3, r7, #20
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a1f      	ldr	r2, [pc, #124]	@ (8001488 <HAL_OPAMP_MspInit+0x9c>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d119      	bne.n	8001442 <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800140e:	4b1f      	ldr	r3, [pc, #124]	@ (800148c <HAL_OPAMP_MspInit+0xa0>)
 8001410:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001412:	4a1e      	ldr	r2, [pc, #120]	@ (800148c <HAL_OPAMP_MspInit+0xa0>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800141a:	4b1c      	ldr	r3, [pc, #112]	@ (800148c <HAL_OPAMP_MspInit+0xa0>)
 800141c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	613b      	str	r3, [r7, #16]
 8001424:	693b      	ldr	r3, [r7, #16]
    /**OPAMP1 GPIO Configuration
    PA1     ------> OPAMP1_VINP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001426:	2302      	movs	r3, #2
 8001428:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800142a:	2303      	movs	r3, #3
 800142c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001432:	f107 0314 	add.w	r3, r7, #20
 8001436:	4619      	mov	r1, r3
 8001438:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800143c:	f003 f84c 	bl	80044d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }

}
 8001440:	e01d      	b.n	800147e <HAL_OPAMP_MspInit+0x92>
  else if(hopamp->Instance==OPAMP3)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a12      	ldr	r2, [pc, #72]	@ (8001490 <HAL_OPAMP_MspInit+0xa4>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d118      	bne.n	800147e <HAL_OPAMP_MspInit+0x92>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800144c:	4b0f      	ldr	r3, [pc, #60]	@ (800148c <HAL_OPAMP_MspInit+0xa0>)
 800144e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001450:	4a0e      	ldr	r2, [pc, #56]	@ (800148c <HAL_OPAMP_MspInit+0xa0>)
 8001452:	f043 0301 	orr.w	r3, r3, #1
 8001456:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001458:	4b0c      	ldr	r3, [pc, #48]	@ (800148c <HAL_OPAMP_MspInit+0xa0>)
 800145a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800145c:	f003 0301 	and.w	r3, r3, #1
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001464:	2302      	movs	r3, #2
 8001466:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001468:	2303      	movs	r3, #3
 800146a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001470:	f107 0314 	add.w	r3, r7, #20
 8001474:	4619      	mov	r1, r3
 8001476:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800147a:	f003 f82d 	bl	80044d8 <HAL_GPIO_Init>
}
 800147e:	bf00      	nop
 8001480:	3728      	adds	r7, #40	@ 0x28
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40010300 	.word	0x40010300
 800148c:	40021000 	.word	0x40021000
 8001490:	40010308 	.word	0x40010308

08001494 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b08e      	sub	sp, #56	@ 0x38
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
 80014aa:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a6b      	ldr	r2, [pc, #428]	@ (8001660 <HAL_TIM_Base_MspInit+0x1cc>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d114      	bne.n	80014e0 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014b6:	4b6b      	ldr	r3, [pc, #428]	@ (8001664 <HAL_TIM_Base_MspInit+0x1d0>)
 80014b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014ba:	4a6a      	ldr	r2, [pc, #424]	@ (8001664 <HAL_TIM_Base_MspInit+0x1d0>)
 80014bc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80014c0:	6613      	str	r3, [r2, #96]	@ 0x60
 80014c2:	4b68      	ldr	r3, [pc, #416]	@ (8001664 <HAL_TIM_Base_MspInit+0x1d0>)
 80014c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80014ca:	623b      	str	r3, [r7, #32]
 80014cc:	6a3b      	ldr	r3, [r7, #32]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80014ce:	2200      	movs	r2, #0
 80014d0:	2100      	movs	r1, #0
 80014d2:	2018      	movs	r0, #24
 80014d4:	f002 fd59 	bl	8003f8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80014d8:	2018      	movs	r0, #24
 80014da:	f002 fd70 	bl	8003fbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80014de:	e0bb      	b.n	8001658 <HAL_TIM_Base_MspInit+0x1c4>
  else if(htim_base->Instance==TIM2)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014e8:	d129      	bne.n	800153e <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014ea:	4b5e      	ldr	r3, [pc, #376]	@ (8001664 <HAL_TIM_Base_MspInit+0x1d0>)
 80014ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ee:	4a5d      	ldr	r2, [pc, #372]	@ (8001664 <HAL_TIM_Base_MspInit+0x1d0>)
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80014f6:	4b5b      	ldr	r3, [pc, #364]	@ (8001664 <HAL_TIM_Base_MspInit+0x1d0>)
 80014f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	61fb      	str	r3, [r7, #28]
 8001500:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001502:	4b58      	ldr	r3, [pc, #352]	@ (8001664 <HAL_TIM_Base_MspInit+0x1d0>)
 8001504:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001506:	4a57      	ldr	r2, [pc, #348]	@ (8001664 <HAL_TIM_Base_MspInit+0x1d0>)
 8001508:	f043 0301 	orr.w	r3, r3, #1
 800150c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800150e:	4b55      	ldr	r3, [pc, #340]	@ (8001664 <HAL_TIM_Base_MspInit+0x1d0>)
 8001510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	61bb      	str	r3, [r7, #24]
 8001518:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800151a:	2301      	movs	r3, #1
 800151c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151e:	2302      	movs	r3, #2
 8001520:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001526:	2300      	movs	r3, #0
 8001528:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM2;
 800152a:	230e      	movs	r3, #14
 800152c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001532:	4619      	mov	r1, r3
 8001534:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001538:	f002 ffce 	bl	80044d8 <HAL_GPIO_Init>
}
 800153c:	e08c      	b.n	8001658 <HAL_TIM_Base_MspInit+0x1c4>
  else if(htim_base->Instance==TIM3)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a49      	ldr	r2, [pc, #292]	@ (8001668 <HAL_TIM_Base_MspInit+0x1d4>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d137      	bne.n	80015b8 <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001548:	4b46      	ldr	r3, [pc, #280]	@ (8001664 <HAL_TIM_Base_MspInit+0x1d0>)
 800154a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800154c:	4a45      	ldr	r2, [pc, #276]	@ (8001664 <HAL_TIM_Base_MspInit+0x1d0>)
 800154e:	f043 0302 	orr.w	r3, r3, #2
 8001552:	6593      	str	r3, [r2, #88]	@ 0x58
 8001554:	4b43      	ldr	r3, [pc, #268]	@ (8001664 <HAL_TIM_Base_MspInit+0x1d0>)
 8001556:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001558:	f003 0302 	and.w	r3, r3, #2
 800155c:	617b      	str	r3, [r7, #20]
 800155e:	697b      	ldr	r3, [r7, #20]
    hdma_tim3_ch4.Instance = DMA1_Channel1;
 8001560:	4b42      	ldr	r3, [pc, #264]	@ (800166c <HAL_TIM_Base_MspInit+0x1d8>)
 8001562:	4a43      	ldr	r2, [pc, #268]	@ (8001670 <HAL_TIM_Base_MspInit+0x1dc>)
 8001564:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4.Init.Request = DMA_REQUEST_TIM3_CH4;
 8001566:	4b41      	ldr	r3, [pc, #260]	@ (800166c <HAL_TIM_Base_MspInit+0x1d8>)
 8001568:	2240      	movs	r2, #64	@ 0x40
 800156a:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800156c:	4b3f      	ldr	r3, [pc, #252]	@ (800166c <HAL_TIM_Base_MspInit+0x1d8>)
 800156e:	2210      	movs	r2, #16
 8001570:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8001572:	4b3e      	ldr	r3, [pc, #248]	@ (800166c <HAL_TIM_Base_MspInit+0x1d8>)
 8001574:	2200      	movs	r2, #0
 8001576:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8001578:	4b3c      	ldr	r3, [pc, #240]	@ (800166c <HAL_TIM_Base_MspInit+0x1d8>)
 800157a:	2280      	movs	r2, #128	@ 0x80
 800157c:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800157e:	4b3b      	ldr	r3, [pc, #236]	@ (800166c <HAL_TIM_Base_MspInit+0x1d8>)
 8001580:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001584:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001586:	4b39      	ldr	r3, [pc, #228]	@ (800166c <HAL_TIM_Base_MspInit+0x1d8>)
 8001588:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800158c:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4.Init.Mode = DMA_NORMAL;
 800158e:	4b37      	ldr	r3, [pc, #220]	@ (800166c <HAL_TIM_Base_MspInit+0x1d8>)
 8001590:	2200      	movs	r2, #0
 8001592:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8001594:	4b35      	ldr	r3, [pc, #212]	@ (800166c <HAL_TIM_Base_MspInit+0x1d8>)
 8001596:	2200      	movs	r2, #0
 8001598:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch4) != HAL_OK)
 800159a:	4834      	ldr	r0, [pc, #208]	@ (800166c <HAL_TIM_Base_MspInit+0x1d8>)
 800159c:	f002 fd2a 	bl	8003ff4 <HAL_DMA_Init>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <HAL_TIM_Base_MspInit+0x116>
      Error_Handler();
 80015a6:	f7ff fd9d 	bl	80010e4 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a2f      	ldr	r2, [pc, #188]	@ (800166c <HAL_TIM_Base_MspInit+0x1d8>)
 80015ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80015b0:	4a2e      	ldr	r2, [pc, #184]	@ (800166c <HAL_TIM_Base_MspInit+0x1d8>)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80015b6:	e04f      	b.n	8001658 <HAL_TIM_Base_MspInit+0x1c4>
  else if(htim_base->Instance==TIM4)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a2d      	ldr	r2, [pc, #180]	@ (8001674 <HAL_TIM_Base_MspInit+0x1e0>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d114      	bne.n	80015ec <HAL_TIM_Base_MspInit+0x158>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80015c2:	4b28      	ldr	r3, [pc, #160]	@ (8001664 <HAL_TIM_Base_MspInit+0x1d0>)
 80015c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015c6:	4a27      	ldr	r2, [pc, #156]	@ (8001664 <HAL_TIM_Base_MspInit+0x1d0>)
 80015c8:	f043 0304 	orr.w	r3, r3, #4
 80015cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80015ce:	4b25      	ldr	r3, [pc, #148]	@ (8001664 <HAL_TIM_Base_MspInit+0x1d0>)
 80015d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015d2:	f003 0304 	and.w	r3, r3, #4
 80015d6:	613b      	str	r3, [r7, #16]
 80015d8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80015da:	2200      	movs	r2, #0
 80015dc:	2100      	movs	r1, #0
 80015de:	201e      	movs	r0, #30
 80015e0:	f002 fcd3 	bl	8003f8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80015e4:	201e      	movs	r0, #30
 80015e6:	f002 fcea 	bl	8003fbe <HAL_NVIC_EnableIRQ>
}
 80015ea:	e035      	b.n	8001658 <HAL_TIM_Base_MspInit+0x1c4>
  else if(htim_base->Instance==TIM15)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a21      	ldr	r2, [pc, #132]	@ (8001678 <HAL_TIM_Base_MspInit+0x1e4>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d130      	bne.n	8001658 <HAL_TIM_Base_MspInit+0x1c4>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80015f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001664 <HAL_TIM_Base_MspInit+0x1d0>)
 80015f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015fa:	4a1a      	ldr	r2, [pc, #104]	@ (8001664 <HAL_TIM_Base_MspInit+0x1d0>)
 80015fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001600:	6613      	str	r3, [r2, #96]	@ 0x60
 8001602:	4b18      	ldr	r3, [pc, #96]	@ (8001664 <HAL_TIM_Base_MspInit+0x1d0>)
 8001604:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001606:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800160e:	4b15      	ldr	r3, [pc, #84]	@ (8001664 <HAL_TIM_Base_MspInit+0x1d0>)
 8001610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001612:	4a14      	ldr	r2, [pc, #80]	@ (8001664 <HAL_TIM_Base_MspInit+0x1d0>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800161a:	4b12      	ldr	r3, [pc, #72]	@ (8001664 <HAL_TIM_Base_MspInit+0x1d0>)
 800161c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	60bb      	str	r3, [r7, #8]
 8001624:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001626:	2304      	movs	r3, #4
 8001628:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162a:	2302      	movs	r3, #2
 800162c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	2300      	movs	r3, #0
 8001630:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001632:	2300      	movs	r3, #0
 8001634:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 8001636:	2309      	movs	r3, #9
 8001638:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800163e:	4619      	mov	r1, r3
 8001640:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001644:	f002 ff48 	bl	80044d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001648:	2200      	movs	r2, #0
 800164a:	2100      	movs	r1, #0
 800164c:	2018      	movs	r0, #24
 800164e:	f002 fc9c 	bl	8003f8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001652:	2018      	movs	r0, #24
 8001654:	f002 fcb3 	bl	8003fbe <HAL_NVIC_EnableIRQ>
}
 8001658:	bf00      	nop
 800165a:	3738      	adds	r7, #56	@ 0x38
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40012c00 	.word	0x40012c00
 8001664:	40021000 	.word	0x40021000
 8001668:	40000400 	.word	0x40000400
 800166c:	20000648 	.word	0x20000648
 8001670:	40020008 	.word	0x40020008
 8001674:	40000800 	.word	0x40000800
 8001678:	40014000 	.word	0x40014000

0800167c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b08a      	sub	sp, #40	@ 0x28
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001684:	f107 0314 	add.w	r3, r7, #20
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	60da      	str	r2, [r3, #12]
 8001692:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a33      	ldr	r2, [pc, #204]	@ (8001768 <HAL_TIM_MspPostInit+0xec>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d11c      	bne.n	80016d8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800169e:	4b33      	ldr	r3, [pc, #204]	@ (800176c <HAL_TIM_MspPostInit+0xf0>)
 80016a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016a2:	4a32      	ldr	r2, [pc, #200]	@ (800176c <HAL_TIM_MspPostInit+0xf0>)
 80016a4:	f043 0304 	orr.w	r3, r3, #4
 80016a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016aa:	4b30      	ldr	r3, [pc, #192]	@ (800176c <HAL_TIM_MspPostInit+0xf0>)
 80016ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ae:	f003 0304 	and.w	r3, r3, #4
 80016b2:	613b      	str	r3, [r7, #16]
 80016b4:	693b      	ldr	r3, [r7, #16]
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80016b6:	230f      	movs	r3, #15
 80016b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ba:	2302      	movs	r3, #2
 80016bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c2:	2303      	movs	r3, #3
 80016c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80016c6:	2302      	movs	r3, #2
 80016c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ca:	f107 0314 	add.w	r3, r7, #20
 80016ce:	4619      	mov	r1, r3
 80016d0:	4827      	ldr	r0, [pc, #156]	@ (8001770 <HAL_TIM_MspPostInit+0xf4>)
 80016d2:	f002 ff01 	bl	80044d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80016d6:	e043      	b.n	8001760 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM2)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016e0:	d11d      	bne.n	800171e <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e2:	4b22      	ldr	r3, [pc, #136]	@ (800176c <HAL_TIM_MspPostInit+0xf0>)
 80016e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016e6:	4a21      	ldr	r2, [pc, #132]	@ (800176c <HAL_TIM_MspPostInit+0xf0>)
 80016e8:	f043 0302 	orr.w	r3, r3, #2
 80016ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016ee:	4b1f      	ldr	r3, [pc, #124]	@ (800176c <HAL_TIM_MspPostInit+0xf0>)
 80016f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80016fa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80016fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001700:	2302      	movs	r3, #2
 8001702:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001704:	2300      	movs	r3, #0
 8001706:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001708:	2300      	movs	r3, #0
 800170a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800170c:	2301      	movs	r3, #1
 800170e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001710:	f107 0314 	add.w	r3, r7, #20
 8001714:	4619      	mov	r1, r3
 8001716:	4817      	ldr	r0, [pc, #92]	@ (8001774 <HAL_TIM_MspPostInit+0xf8>)
 8001718:	f002 fede 	bl	80044d8 <HAL_GPIO_Init>
}
 800171c:	e020      	b.n	8001760 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a15      	ldr	r2, [pc, #84]	@ (8001778 <HAL_TIM_MspPostInit+0xfc>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d11b      	bne.n	8001760 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001728:	4b10      	ldr	r3, [pc, #64]	@ (800176c <HAL_TIM_MspPostInit+0xf0>)
 800172a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800172c:	4a0f      	ldr	r2, [pc, #60]	@ (800176c <HAL_TIM_MspPostInit+0xf0>)
 800172e:	f043 0302 	orr.w	r3, r3, #2
 8001732:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001734:	4b0d      	ldr	r3, [pc, #52]	@ (800176c <HAL_TIM_MspPostInit+0xf0>)
 8001736:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001738:	f003 0302 	and.w	r3, r3, #2
 800173c:	60bb      	str	r3, [r7, #8]
 800173e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001740:	2380      	movs	r3, #128	@ 0x80
 8001742:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001744:	2302      	movs	r3, #2
 8001746:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174c:	2300      	movs	r3, #0
 800174e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM3;
 8001750:	230a      	movs	r3, #10
 8001752:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001754:	f107 0314 	add.w	r3, r7, #20
 8001758:	4619      	mov	r1, r3
 800175a:	4806      	ldr	r0, [pc, #24]	@ (8001774 <HAL_TIM_MspPostInit+0xf8>)
 800175c:	f002 febc 	bl	80044d8 <HAL_GPIO_Init>
}
 8001760:	bf00      	nop
 8001762:	3728      	adds	r7, #40	@ 0x28
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	40012c00 	.word	0x40012c00
 800176c:	40021000 	.word	0x40021000
 8001770:	48000800 	.word	0x48000800
 8001774:	48000400 	.word	0x48000400
 8001778:	40000400 	.word	0x40000400

0800177c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001780:	bf00      	nop
 8001782:	e7fd      	b.n	8001780 <NMI_Handler+0x4>

08001784 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001788:	bf00      	nop
 800178a:	e7fd      	b.n	8001788 <HardFault_Handler+0x4>

0800178c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001790:	bf00      	nop
 8001792:	e7fd      	b.n	8001790 <MemManage_Handler+0x4>

08001794 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001798:	bf00      	nop
 800179a:	e7fd      	b.n	8001798 <BusFault_Handler+0x4>

0800179c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017a0:	bf00      	nop
 80017a2:	e7fd      	b.n	80017a0 <UsageFault_Handler+0x4>

080017a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr

080017b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017b2:	b480      	push	{r7}
 80017b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017d2:	f000 fc51 	bl	8002078 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
	...

080017dc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4);
 80017e0:	4802      	ldr	r0, [pc, #8]	@ (80017ec <DMA1_Channel1_IRQHandler+0x10>)
 80017e2:	f002 fd2a 	bl	800423a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000648 	.word	0x20000648

080017f0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80017f4:	4802      	ldr	r0, [pc, #8]	@ (8001800 <DMA1_Channel2_IRQHandler+0x10>)
 80017f6:	f002 fd20 	bl	800423a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000334 	.word	0x20000334

08001804 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001808:	4802      	ldr	r0, [pc, #8]	@ (8001814 <DMA1_Channel3_IRQHandler+0x10>)
 800180a:	f002 fd16 	bl	800423a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20000394 	.word	0x20000394

08001818 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800181c:	4802      	ldr	r0, [pc, #8]	@ (8001828 <DMA1_Channel4_IRQHandler+0x10>)
 800181e:	f002 fd0c 	bl	800423a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	200003f4 	.word	0x200003f4

0800182c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001830:	4803      	ldr	r0, [pc, #12]	@ (8001840 <ADC1_2_IRQHandler+0x14>)
 8001832:	f001 f991 	bl	8002b58 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001836:	4803      	ldr	r0, [pc, #12]	@ (8001844 <ADC1_2_IRQHandler+0x18>)
 8001838:	f001 f98e 	bl	8002b58 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800183c:	bf00      	nop
 800183e:	bd80      	pop	{r7, pc}
 8001840:	200001f0 	.word	0x200001f0
 8001844:	2000025c 	.word	0x2000025c

08001848 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800184c:	4802      	ldr	r0, [pc, #8]	@ (8001858 <USB_LP_IRQHandler+0x10>)
 800184e:	f003 f9f2 	bl	8004c36 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	200049c4 	.word	0x200049c4

0800185c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	BOOT0_BTN_COUNT=BOOT0_BTN_COUNT+1;
 8001860:	4b05      	ldr	r3, [pc, #20]	@ (8001878 <EXTI9_5_IRQHandler+0x1c>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	3301      	adds	r3, #1
 8001866:	4a04      	ldr	r2, [pc, #16]	@ (8001878 <EXTI9_5_IRQHandler+0x1c>)
 8001868:	6013      	str	r3, [r2, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800186a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800186e:	f002 ffcd 	bl	800480c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20002630 	.word	0x20002630

0800187c <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001880:	4803      	ldr	r0, [pc, #12]	@ (8001890 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 8001882:	f006 fe19 	bl	80084b8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8001886:	4803      	ldr	r0, [pc, #12]	@ (8001894 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 8001888:	f006 fe16 	bl	80084b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800188c:	bf00      	nop
 800188e:	bd80      	pop	{r7, pc}
 8001890:	200004cc 	.word	0x200004cc
 8001894:	200005fc 	.word	0x200005fc

08001898 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	USER_CounterTicks= TIM2->CNT;
 800189c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80018a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018a2:	4a05      	ldr	r2, [pc, #20]	@ (80018b8 <TIM4_IRQHandler+0x20>)
 80018a4:	6013      	str	r3, [r2, #0]
  	TIM2->CNT=0;
 80018a6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80018aa:	2200      	movs	r2, #0
 80018ac:	625a      	str	r2, [r3, #36]	@ 0x24
//	  sprintf(&CDC_BUFFER,"FRRQ: %d \r\n",USER_CounterTicks);
//	  CDC_Transmit_FS(&CDC_BUFFER, 50);

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80018ae:	4803      	ldr	r0, [pc, #12]	@ (80018bc <TIM4_IRQHandler+0x24>)
 80018b0:	f006 fe02 	bl	80084b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */


  /* USER CODE END TIM4_IRQn 1 */
}
 80018b4:	bf00      	nop
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	200006b4 	.word	0x200006b4
 80018bc:	200005b0 	.word	0x200005b0

080018c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018c8:	4a14      	ldr	r2, [pc, #80]	@ (800191c <_sbrk+0x5c>)
 80018ca:	4b15      	ldr	r3, [pc, #84]	@ (8001920 <_sbrk+0x60>)
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018d4:	4b13      	ldr	r3, [pc, #76]	@ (8001924 <_sbrk+0x64>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d102      	bne.n	80018e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018dc:	4b11      	ldr	r3, [pc, #68]	@ (8001924 <_sbrk+0x64>)
 80018de:	4a12      	ldr	r2, [pc, #72]	@ (8001928 <_sbrk+0x68>)
 80018e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018e2:	4b10      	ldr	r3, [pc, #64]	@ (8001924 <_sbrk+0x64>)
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4413      	add	r3, r2
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d207      	bcs.n	8001900 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018f0:	f00d f910 	bl	800eb14 <__errno>
 80018f4:	4603      	mov	r3, r0
 80018f6:	220c      	movs	r2, #12
 80018f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018fa:	f04f 33ff 	mov.w	r3, #4294967295
 80018fe:	e009      	b.n	8001914 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001900:	4b08      	ldr	r3, [pc, #32]	@ (8001924 <_sbrk+0x64>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001906:	4b07      	ldr	r3, [pc, #28]	@ (8001924 <_sbrk+0x64>)
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4413      	add	r3, r2
 800190e:	4a05      	ldr	r2, [pc, #20]	@ (8001924 <_sbrk+0x64>)
 8001910:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001912:	68fb      	ldr	r3, [r7, #12]
}
 8001914:	4618      	mov	r0, r3
 8001916:	3718      	adds	r7, #24
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	20020000 	.word	0x20020000
 8001920:	00000400 	.word	0x00000400
 8001924:	20002638 	.word	0x20002638
 8001928:	20005008 	.word	0x20005008

0800192c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001930:	4b06      	ldr	r3, [pc, #24]	@ (800194c <SystemInit+0x20>)
 8001932:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001936:	4a05      	ldr	r2, [pc, #20]	@ (800194c <SystemInit+0x20>)
 8001938:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800193c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001940:	bf00      	nop
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	e000ed00 	.word	0xe000ed00

08001950 <ws2812_update_force>:

/**
 * @brief  直接更新LED颜色
 */
void ws2812_update_force(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
	// 数据缓冲，每个LED占用24个字节，共10个LED，前100个字节用于复位信号
	static uint16_t ws2812_data[RST_PERIOD_NUM + WS2812_NUM * 24];

	for (uint8_t led_id = 0; led_id < WS2812_NUM; led_id++)
 8001956:	2300      	movs	r3, #0
 8001958:	71fb      	strb	r3, [r7, #7]
 800195a:	e060      	b.n	8001a1e <ws2812_update_force+0xce>
	{
		_ws2812_color_current[led_id] = ws2812_color[led_id];
 800195c:	79fa      	ldrb	r2, [r7, #7]
 800195e:	79fb      	ldrb	r3, [r7, #7]
 8001960:	4936      	ldr	r1, [pc, #216]	@ (8001a3c <ws2812_update_force+0xec>)
 8001962:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001966:	4936      	ldr	r1, [pc, #216]	@ (8001a40 <ws2812_update_force+0xf0>)
 8001968:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		static uint8_t r, g, b;
		color_to_rgb(_ws2812_color_current[led_id], &r, &g, &b);
 800196c:	79fb      	ldrb	r3, [r7, #7]
 800196e:	4a34      	ldr	r2, [pc, #208]	@ (8001a40 <ws2812_update_force+0xf0>)
 8001970:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001974:	4b33      	ldr	r3, [pc, #204]	@ (8001a44 <ws2812_update_force+0xf4>)
 8001976:	4a34      	ldr	r2, [pc, #208]	@ (8001a48 <ws2812_update_force+0xf8>)
 8001978:	4934      	ldr	r1, [pc, #208]	@ (8001a4c <ws2812_update_force+0xfc>)
 800197a:	f000 f9f1 	bl	8001d60 <color_to_rgb>
		uint16_t *p = ws2812_data + RST_PERIOD_NUM + led_id * 24;
 800197e:	79fa      	ldrb	r2, [r7, #7]
 8001980:	4613      	mov	r3, r2
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	4413      	add	r3, r2
 8001986:	011b      	lsls	r3, r3, #4
 8001988:	33c8      	adds	r3, #200	@ 0xc8
 800198a:	4a31      	ldr	r2, [pc, #196]	@ (8001a50 <ws2812_update_force+0x100>)
 800198c:	4413      	add	r3, r2
 800198e:	603b      	str	r3, [r7, #0]
		for (uint8_t i = 0; i < 8; i++)
 8001990:	2300      	movs	r3, #0
 8001992:	71bb      	strb	r3, [r7, #6]
 8001994:	e03d      	b.n	8001a12 <ws2812_update_force+0xc2>
		{
			p[i] = (r << i) & (0x80) ? CODE_ONE_DUTY : CODE_ZERO_DUTY;
 8001996:	4b2d      	ldr	r3, [pc, #180]	@ (8001a4c <ws2812_update_force+0xfc>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	461a      	mov	r2, r3
 800199c:	79bb      	ldrb	r3, [r7, #6]
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <ws2812_update_force+0x5e>
 80019aa:	2185      	movs	r1, #133	@ 0x85
 80019ac:	e000      	b.n	80019b0 <ws2812_update_force+0x60>
 80019ae:	2142      	movs	r1, #66	@ 0x42
 80019b0:	79bb      	ldrb	r3, [r7, #6]
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	683a      	ldr	r2, [r7, #0]
 80019b6:	4413      	add	r3, r2
 80019b8:	460a      	mov	r2, r1
 80019ba:	801a      	strh	r2, [r3, #0]
			p[i + 8] = (g << i) & (0x80) ? CODE_ONE_DUTY : CODE_ZERO_DUTY;
 80019bc:	4b22      	ldr	r3, [pc, #136]	@ (8001a48 <ws2812_update_force+0xf8>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	461a      	mov	r2, r3
 80019c2:	79bb      	ldrb	r3, [r7, #6]
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <ws2812_update_force+0x84>
 80019d0:	2185      	movs	r1, #133	@ 0x85
 80019d2:	e000      	b.n	80019d6 <ws2812_update_force+0x86>
 80019d4:	2142      	movs	r1, #66	@ 0x42
 80019d6:	79bb      	ldrb	r3, [r7, #6]
 80019d8:	3308      	adds	r3, #8
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	683a      	ldr	r2, [r7, #0]
 80019de:	4413      	add	r3, r2
 80019e0:	460a      	mov	r2, r1
 80019e2:	801a      	strh	r2, [r3, #0]
			p[i + 16] = (b << i) & (0x80) ? CODE_ONE_DUTY : CODE_ZERO_DUTY;
 80019e4:	4b17      	ldr	r3, [pc, #92]	@ (8001a44 <ws2812_update_force+0xf4>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	461a      	mov	r2, r3
 80019ea:	79bb      	ldrb	r3, [r7, #6]
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <ws2812_update_force+0xac>
 80019f8:	2185      	movs	r1, #133	@ 0x85
 80019fa:	e000      	b.n	80019fe <ws2812_update_force+0xae>
 80019fc:	2142      	movs	r1, #66	@ 0x42
 80019fe:	79bb      	ldrb	r3, [r7, #6]
 8001a00:	3310      	adds	r3, #16
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	683a      	ldr	r2, [r7, #0]
 8001a06:	4413      	add	r3, r2
 8001a08:	460a      	mov	r2, r1
 8001a0a:	801a      	strh	r2, [r3, #0]
		for (uint8_t i = 0; i < 8; i++)
 8001a0c:	79bb      	ldrb	r3, [r7, #6]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	71bb      	strb	r3, [r7, #6]
 8001a12:	79bb      	ldrb	r3, [r7, #6]
 8001a14:	2b07      	cmp	r3, #7
 8001a16:	d9be      	bls.n	8001996 <ws2812_update_force+0x46>
	for (uint8_t led_id = 0; led_id < WS2812_NUM; led_id++)
 8001a18:	79fb      	ldrb	r3, [r7, #7]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	71fb      	strb	r3, [r7, #7]
 8001a1e:	79fb      	ldrb	r3, [r7, #7]
 8001a20:	2b31      	cmp	r3, #49	@ 0x31
 8001a22:	d99b      	bls.n	800195c <ws2812_update_force+0xc>
		}
	}
	HAL_TIM_PWM_Start_DMA(&WS2812TIM, TIM_CHANNEL_4, (uint32_t *)ws2812_data,
 8001a24:	f240 5314 	movw	r3, #1300	@ 0x514
 8001a28:	4a09      	ldr	r2, [pc, #36]	@ (8001a50 <ws2812_update_force+0x100>)
 8001a2a:	210c      	movs	r1, #12
 8001a2c:	4809      	ldr	r0, [pc, #36]	@ (8001a54 <ws2812_update_force+0x104>)
 8001a2e:	f006 f965 	bl	8007cfc <HAL_TIM_PWM_Start_DMA>
						  RST_PERIOD_NUM + WS2812_NUM * 24);
}
 8001a32:	bf00      	nop
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	2000263c 	.word	0x2000263c
 8001a40:	20002704 	.word	0x20002704
 8001a44:	200027ce 	.word	0x200027ce
 8001a48:	200027cd 	.word	0x200027cd
 8001a4c:	200027cc 	.word	0x200027cc
 8001a50:	200027d0 	.word	0x200027d0
 8001a54:	20000564 	.word	0x20000564

08001a58 <ws2812_gradient>:
 * @brief  通过渐变方式更新LED颜色（线性插值）
 * @param  steps: 渐变步数
 * @param  delay_ms: 每步之间的延迟时间（毫秒）
 */
void ws2812_gradient(uint8_t steps, uint16_t delay_ms)
{
 8001a58:	b590      	push	{r4, r7, lr}
 8001a5a:	b089      	sub	sp, #36	@ 0x24
 8001a5c:	af02      	add	r7, sp, #8
 8001a5e:	4603      	mov	r3, r0
 8001a60:	460a      	mov	r2, r1
 8001a62:	71fb      	strb	r3, [r7, #7]
 8001a64:	4613      	mov	r3, r2
 8001a66:	80bb      	strh	r3, [r7, #4]
	static uint8_t start_r[WS2812_NUM], start_g[WS2812_NUM], start_b[WS2812_NUM];
	static float r_step[WS2812_NUM], g_step[WS2812_NUM], b_step[WS2812_NUM];

	// 提取初始颜色，并计算每步的渐变步长
	for (uint8_t i = 0; i < WS2812_NUM; i++)
 8001a68:	2300      	movs	r3, #0
 8001a6a:	75fb      	strb	r3, [r7, #23]
 8001a6c:	e062      	b.n	8001b34 <ws2812_gradient+0xdc>
	{
		color_to_rgb(_ws2812_color_current[i], &start_r[i], &start_g[i], &start_b[i]);
 8001a6e:	7dfb      	ldrb	r3, [r7, #23]
 8001a70:	4a6f      	ldr	r2, [pc, #444]	@ (8001c30 <ws2812_gradient+0x1d8>)
 8001a72:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001a76:	7dfb      	ldrb	r3, [r7, #23]
 8001a78:	4a6e      	ldr	r2, [pc, #440]	@ (8001c34 <ws2812_gradient+0x1dc>)
 8001a7a:	1899      	adds	r1, r3, r2
 8001a7c:	7dfb      	ldrb	r3, [r7, #23]
 8001a7e:	4a6e      	ldr	r2, [pc, #440]	@ (8001c38 <ws2812_gradient+0x1e0>)
 8001a80:	441a      	add	r2, r3
 8001a82:	7dfb      	ldrb	r3, [r7, #23]
 8001a84:	4c6d      	ldr	r4, [pc, #436]	@ (8001c3c <ws2812_gradient+0x1e4>)
 8001a86:	4423      	add	r3, r4
 8001a88:	f000 f96a 	bl	8001d60 <color_to_rgb>
		uint8_t target_r, target_g, target_b;
		color_to_rgb(ws2812_color[i], &target_r, &target_g, &target_b);
 8001a8c:	7dfb      	ldrb	r3, [r7, #23]
 8001a8e:	4a6c      	ldr	r2, [pc, #432]	@ (8001c40 <ws2812_gradient+0x1e8>)
 8001a90:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001a94:	f107 030f 	add.w	r3, r7, #15
 8001a98:	f107 0210 	add.w	r2, r7, #16
 8001a9c:	f107 0111 	add.w	r1, r7, #17
 8001aa0:	f000 f95e 	bl	8001d60 <color_to_rgb>

		r_step[i] = (float)(target_r - start_r[i]) / steps;
 8001aa4:	7c7b      	ldrb	r3, [r7, #17]
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	7dfb      	ldrb	r3, [r7, #23]
 8001aaa:	4a62      	ldr	r2, [pc, #392]	@ (8001c34 <ws2812_gradient+0x1dc>)
 8001aac:	5cd3      	ldrb	r3, [r2, r3]
 8001aae:	1acb      	subs	r3, r1, r3
 8001ab0:	ee07 3a90 	vmov	s15, r3
 8001ab4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001ab8:	79fb      	ldrb	r3, [r7, #7]
 8001aba:	ee07 3a90 	vmov	s15, r3
 8001abe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ac2:	7dfb      	ldrb	r3, [r7, #23]
 8001ac4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ac8:	4a5e      	ldr	r2, [pc, #376]	@ (8001c44 <ws2812_gradient+0x1ec>)
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	4413      	add	r3, r2
 8001ace:	edc3 7a00 	vstr	s15, [r3]
		g_step[i] = (float)(target_g - start_g[i]) / steps;
 8001ad2:	7c3b      	ldrb	r3, [r7, #16]
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	7dfb      	ldrb	r3, [r7, #23]
 8001ad8:	4a57      	ldr	r2, [pc, #348]	@ (8001c38 <ws2812_gradient+0x1e0>)
 8001ada:	5cd3      	ldrb	r3, [r2, r3]
 8001adc:	1acb      	subs	r3, r1, r3
 8001ade:	ee07 3a90 	vmov	s15, r3
 8001ae2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001ae6:	79fb      	ldrb	r3, [r7, #7]
 8001ae8:	ee07 3a90 	vmov	s15, r3
 8001aec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001af0:	7dfb      	ldrb	r3, [r7, #23]
 8001af2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001af6:	4a54      	ldr	r2, [pc, #336]	@ (8001c48 <ws2812_gradient+0x1f0>)
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	4413      	add	r3, r2
 8001afc:	edc3 7a00 	vstr	s15, [r3]
		b_step[i] = (float)(target_b - start_b[i]) / steps;
 8001b00:	7bfb      	ldrb	r3, [r7, #15]
 8001b02:	4619      	mov	r1, r3
 8001b04:	7dfb      	ldrb	r3, [r7, #23]
 8001b06:	4a4d      	ldr	r2, [pc, #308]	@ (8001c3c <ws2812_gradient+0x1e4>)
 8001b08:	5cd3      	ldrb	r3, [r2, r3]
 8001b0a:	1acb      	subs	r3, r1, r3
 8001b0c:	ee07 3a90 	vmov	s15, r3
 8001b10:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001b14:	79fb      	ldrb	r3, [r7, #7]
 8001b16:	ee07 3a90 	vmov	s15, r3
 8001b1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b1e:	7dfb      	ldrb	r3, [r7, #23]
 8001b20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b24:	4a49      	ldr	r2, [pc, #292]	@ (8001c4c <ws2812_gradient+0x1f4>)
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	4413      	add	r3, r2
 8001b2a:	edc3 7a00 	vstr	s15, [r3]
	for (uint8_t i = 0; i < WS2812_NUM; i++)
 8001b2e:	7dfb      	ldrb	r3, [r7, #23]
 8001b30:	3301      	adds	r3, #1
 8001b32:	75fb      	strb	r3, [r7, #23]
 8001b34:	7dfb      	ldrb	r3, [r7, #23]
 8001b36:	2b31      	cmp	r3, #49	@ 0x31
 8001b38:	d999      	bls.n	8001a6e <ws2812_gradient+0x16>
	}

	// 逐步渐变
	for (uint8_t step = 1; step <= steps; step++)
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	75bb      	strb	r3, [r7, #22]
 8001b3e:	e06d      	b.n	8001c1c <ws2812_gradient+0x1c4>
	{
		for (uint8_t led_id = 0; led_id < WS2812_NUM; led_id++)
 8001b40:	2300      	movs	r3, #0
 8001b42:	757b      	strb	r3, [r7, #21]
 8001b44:	e05e      	b.n	8001c04 <ws2812_gradient+0x1ac>
		{
			// 计算当前步的颜色
			uint8_t r = (uint8_t)(start_r[led_id] + r_step[led_id] * step);
 8001b46:	7d7b      	ldrb	r3, [r7, #21]
 8001b48:	4a3a      	ldr	r2, [pc, #232]	@ (8001c34 <ws2812_gradient+0x1dc>)
 8001b4a:	5cd3      	ldrb	r3, [r2, r3]
 8001b4c:	ee07 3a90 	vmov	s15, r3
 8001b50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b54:	7d7b      	ldrb	r3, [r7, #21]
 8001b56:	4a3b      	ldr	r2, [pc, #236]	@ (8001c44 <ws2812_gradient+0x1ec>)
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	4413      	add	r3, r2
 8001b5c:	edd3 6a00 	vldr	s13, [r3]
 8001b60:	7dbb      	ldrb	r3, [r7, #22]
 8001b62:	ee07 3a90 	vmov	s15, r3
 8001b66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b76:	edc7 7a00 	vstr	s15, [r7]
 8001b7a:	783b      	ldrb	r3, [r7, #0]
 8001b7c:	753b      	strb	r3, [r7, #20]
			uint8_t g = (uint8_t)(start_g[led_id] + g_step[led_id] * step);
 8001b7e:	7d7b      	ldrb	r3, [r7, #21]
 8001b80:	4a2d      	ldr	r2, [pc, #180]	@ (8001c38 <ws2812_gradient+0x1e0>)
 8001b82:	5cd3      	ldrb	r3, [r2, r3]
 8001b84:	ee07 3a90 	vmov	s15, r3
 8001b88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b8c:	7d7b      	ldrb	r3, [r7, #21]
 8001b8e:	4a2e      	ldr	r2, [pc, #184]	@ (8001c48 <ws2812_gradient+0x1f0>)
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	4413      	add	r3, r2
 8001b94:	edd3 6a00 	vldr	s13, [r3]
 8001b98:	7dbb      	ldrb	r3, [r7, #22]
 8001b9a:	ee07 3a90 	vmov	s15, r3
 8001b9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ba2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ba6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001baa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bae:	edc7 7a00 	vstr	s15, [r7]
 8001bb2:	783b      	ldrb	r3, [r7, #0]
 8001bb4:	74fb      	strb	r3, [r7, #19]
			uint8_t b = (uint8_t)(start_b[led_id] + b_step[led_id] * step);
 8001bb6:	7d7b      	ldrb	r3, [r7, #21]
 8001bb8:	4a20      	ldr	r2, [pc, #128]	@ (8001c3c <ws2812_gradient+0x1e4>)
 8001bba:	5cd3      	ldrb	r3, [r2, r3]
 8001bbc:	ee07 3a90 	vmov	s15, r3
 8001bc0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bc4:	7d7b      	ldrb	r3, [r7, #21]
 8001bc6:	4a21      	ldr	r2, [pc, #132]	@ (8001c4c <ws2812_gradient+0x1f4>)
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	4413      	add	r3, r2
 8001bcc:	edd3 6a00 	vldr	s13, [r3]
 8001bd0:	7dbb      	ldrb	r3, [r7, #22]
 8001bd2:	ee07 3a90 	vmov	s15, r3
 8001bd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001be2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001be6:	edc7 7a00 	vstr	s15, [r7]
 8001bea:	783b      	ldrb	r3, [r7, #0]
 8001bec:	74bb      	strb	r3, [r7, #18]

			ws2812_set_rgba(led_id, r, g, b , 255);
 8001bee:	7cbb      	ldrb	r3, [r7, #18]
 8001bf0:	7cfa      	ldrb	r2, [r7, #19]
 8001bf2:	7d39      	ldrb	r1, [r7, #20]
 8001bf4:	7d78      	ldrb	r0, [r7, #21]
 8001bf6:	24ff      	movs	r4, #255	@ 0xff
 8001bf8:	9400      	str	r4, [sp, #0]
 8001bfa:	f000 f8cd 	bl	8001d98 <ws2812_set_rgba>
		for (uint8_t led_id = 0; led_id < WS2812_NUM; led_id++)
 8001bfe:	7d7b      	ldrb	r3, [r7, #21]
 8001c00:	3301      	adds	r3, #1
 8001c02:	757b      	strb	r3, [r7, #21]
 8001c04:	7d7b      	ldrb	r3, [r7, #21]
 8001c06:	2b31      	cmp	r3, #49	@ 0x31
 8001c08:	d99d      	bls.n	8001b46 <ws2812_gradient+0xee>
		}

		ws2812_update_force();
 8001c0a:	f7ff fea1 	bl	8001950 <ws2812_update_force>
		HAL_Delay(delay_ms);
 8001c0e:	88bb      	ldrh	r3, [r7, #4]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f000 fa4f 	bl	80020b4 <HAL_Delay>
	for (uint8_t step = 1; step <= steps; step++)
 8001c16:	7dbb      	ldrb	r3, [r7, #22]
 8001c18:	3301      	adds	r3, #1
 8001c1a:	75bb      	strb	r3, [r7, #22]
 8001c1c:	7dba      	ldrb	r2, [r7, #22]
 8001c1e:	79fb      	ldrb	r3, [r7, #7]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d98d      	bls.n	8001b40 <ws2812_gradient+0xe8>
	}
}
 8001c24:	bf00      	nop
 8001c26:	bf00      	nop
 8001c28:	371c      	adds	r7, #28
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd90      	pop	{r4, r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	20002704 	.word	0x20002704
 8001c34:	200031f8 	.word	0x200031f8
 8001c38:	2000322c 	.word	0x2000322c
 8001c3c:	20003260 	.word	0x20003260
 8001c40:	2000263c 	.word	0x2000263c
 8001c44:	20003294 	.word	0x20003294
 8001c48:	2000335c 	.word	0x2000335c
 8001c4c:	20003424 	.word	0x20003424

08001c50 <ws2812_set_24bit>:
 * @brief  设置LED颜色（24bit颜色格式）
 * @param  led_id: LED编号（学习板一共有10个LED，编号范围0-9）
 * @param  color: 24bit颜色
 */
void ws2812_set_24bit(uint8_t led_id, uint32_t color)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	4603      	mov	r3, r0
 8001c58:	6039      	str	r1, [r7, #0]
 8001c5a:	71fb      	strb	r3, [r7, #7]
	ws2812_color[led_id] = color;
 8001c5c:	79fb      	ldrb	r3, [r7, #7]
 8001c5e:	4905      	ldr	r1, [pc, #20]	@ (8001c74 <ws2812_set_24bit+0x24>)
 8001c60:	683a      	ldr	r2, [r7, #0]
 8001c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001c66:	bf00      	nop
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	2000263c 	.word	0x2000263c

08001c78 <ws2812_set_all>:
/**
 * @brief  设置所有LED颜色（24bit颜色格式）
 * @param  color: 24bit颜色
 */
void ws2812_set_all(uint32_t color)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
	for (uint8_t led_id = 0; led_id < WS2812_NUM; led_id++)
 8001c80:	2300      	movs	r3, #0
 8001c82:	73fb      	strb	r3, [r7, #15]
 8001c84:	e007      	b.n	8001c96 <ws2812_set_all+0x1e>
	{
		ws2812_color[led_id] = color;
 8001c86:	7bfb      	ldrb	r3, [r7, #15]
 8001c88:	4908      	ldr	r1, [pc, #32]	@ (8001cac <ws2812_set_all+0x34>)
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (uint8_t led_id = 0; led_id < WS2812_NUM; led_id++)
 8001c90:	7bfb      	ldrb	r3, [r7, #15]
 8001c92:	3301      	adds	r3, #1
 8001c94:	73fb      	strb	r3, [r7, #15]
 8001c96:	7bfb      	ldrb	r3, [r7, #15]
 8001c98:	2b31      	cmp	r3, #49	@ 0x31
 8001c9a:	d9f4      	bls.n	8001c86 <ws2812_set_all+0xe>
	}
}
 8001c9c:	bf00      	nop
 8001c9e:	bf00      	nop
 8001ca0:	3714      	adds	r7, #20
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	2000263c 	.word	0x2000263c

08001cb0 <rgb_to_color>:
 * @param  g: 绿色亮度（0-255）
 * @param  b: 蓝色亮度（0-255）
 * @retval 24bit颜色
 */
uint32_t rgb_to_color(uint8_t r, uint8_t g, uint8_t b)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	71fb      	strb	r3, [r7, #7]
 8001cba:	460b      	mov	r3, r1
 8001cbc:	71bb      	strb	r3, [r7, #6]
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	717b      	strb	r3, [r7, #5]
	return (r << 16) | (g << 8) | b;
 8001cc2:	79fb      	ldrb	r3, [r7, #7]
 8001cc4:	041a      	lsls	r2, r3, #16
 8001cc6:	79bb      	ldrb	r3, [r7, #6]
 8001cc8:	021b      	lsls	r3, r3, #8
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	797b      	ldrb	r3, [r7, #5]
 8001cce:	4313      	orrs	r3, r2
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <rgba_to_color>:
 * @param  b: 蓝色亮度（0-255）
 * @param  a: 透明度  （0-255）
 * @retval 24bit颜色
 */
uint32_t rgba_to_color(uint8_t r, uint8_t g, uint8_t b, uint8_t a)
{
 8001cdc:	b490      	push	{r4, r7}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4604      	mov	r4, r0
 8001ce4:	4608      	mov	r0, r1
 8001ce6:	4611      	mov	r1, r2
 8001ce8:	461a      	mov	r2, r3
 8001cea:	4623      	mov	r3, r4
 8001cec:	71fb      	strb	r3, [r7, #7]
 8001cee:	4603      	mov	r3, r0
 8001cf0:	71bb      	strb	r3, [r7, #6]
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	717b      	strb	r3, [r7, #5]
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	713b      	strb	r3, [r7, #4]
	r=r*a/255;
 8001cfa:	79fb      	ldrb	r3, [r7, #7]
 8001cfc:	793a      	ldrb	r2, [r7, #4]
 8001cfe:	fb02 f303 	mul.w	r3, r2, r3
 8001d02:	4a16      	ldr	r2, [pc, #88]	@ (8001d5c <rgba_to_color+0x80>)
 8001d04:	fb82 1203 	smull	r1, r2, r2, r3
 8001d08:	441a      	add	r2, r3
 8001d0a:	11d2      	asrs	r2, r2, #7
 8001d0c:	17db      	asrs	r3, r3, #31
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	71fb      	strb	r3, [r7, #7]
	g=g*a/255;
 8001d12:	79bb      	ldrb	r3, [r7, #6]
 8001d14:	793a      	ldrb	r2, [r7, #4]
 8001d16:	fb02 f303 	mul.w	r3, r2, r3
 8001d1a:	4a10      	ldr	r2, [pc, #64]	@ (8001d5c <rgba_to_color+0x80>)
 8001d1c:	fb82 1203 	smull	r1, r2, r2, r3
 8001d20:	441a      	add	r2, r3
 8001d22:	11d2      	asrs	r2, r2, #7
 8001d24:	17db      	asrs	r3, r3, #31
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	71bb      	strb	r3, [r7, #6]
	b=b*a/255;
 8001d2a:	797b      	ldrb	r3, [r7, #5]
 8001d2c:	793a      	ldrb	r2, [r7, #4]
 8001d2e:	fb02 f303 	mul.w	r3, r2, r3
 8001d32:	4a0a      	ldr	r2, [pc, #40]	@ (8001d5c <rgba_to_color+0x80>)
 8001d34:	fb82 1203 	smull	r1, r2, r2, r3
 8001d38:	441a      	add	r2, r3
 8001d3a:	11d2      	asrs	r2, r2, #7
 8001d3c:	17db      	asrs	r3, r3, #31
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	717b      	strb	r3, [r7, #5]
	return (r << 16) | (g << 8) | b;
 8001d42:	79fb      	ldrb	r3, [r7, #7]
 8001d44:	041a      	lsls	r2, r3, #16
 8001d46:	79bb      	ldrb	r3, [r7, #6]
 8001d48:	021b      	lsls	r3, r3, #8
 8001d4a:	431a      	orrs	r2, r3
 8001d4c:	797b      	ldrb	r3, [r7, #5]
 8001d4e:	4313      	orrs	r3, r2
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3708      	adds	r7, #8
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bc90      	pop	{r4, r7}
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	80808081 	.word	0x80808081

08001d60 <color_to_rgb>:
 * @param  r: 红色亮度（0-255）
 * @param  g: 绿色亮度（0-255）
 * @param  b: 蓝色亮度（0-255）
 */
void color_to_rgb(uint32_t color, uint8_t *r, uint8_t *g, uint8_t *b)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	607a      	str	r2, [r7, #4]
 8001d6c:	603b      	str	r3, [r7, #0]
	*r = (color >> 16) & 0xFF;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	0c1b      	lsrs	r3, r3, #16
 8001d72:	b2da      	uxtb	r2, r3
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	701a      	strb	r2, [r3, #0]
	*g = (color >> 8) & 0xFF;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	0a1b      	lsrs	r3, r3, #8
 8001d7c:	b2da      	uxtb	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	701a      	strb	r2, [r3, #0]
	*b = color & 0xFF;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	b2da      	uxtb	r2, r3
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	701a      	strb	r2, [r3, #0]
}
 8001d8a:	bf00      	nop
 8001d8c:	3714      	adds	r7, #20
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
	...

08001d98 <ws2812_set_rgba>:
 * @param  g: 绿色亮度（0-255）
 * @param  b: 蓝色亮度（0-255）
 * @param  a: 透明度  （0-255）
 */
void ws2812_set_rgba(uint8_t led_id, uint8_t r, uint8_t g, uint8_t b, uint8_t a)
{
 8001d98:	b590      	push	{r4, r7, lr}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4604      	mov	r4, r0
 8001da0:	4608      	mov	r0, r1
 8001da2:	4611      	mov	r1, r2
 8001da4:	461a      	mov	r2, r3
 8001da6:	4623      	mov	r3, r4
 8001da8:	71fb      	strb	r3, [r7, #7]
 8001daa:	4603      	mov	r3, r0
 8001dac:	71bb      	strb	r3, [r7, #6]
 8001dae:	460b      	mov	r3, r1
 8001db0:	717b      	strb	r3, [r7, #5]
 8001db2:	4613      	mov	r3, r2
 8001db4:	713b      	strb	r3, [r7, #4]
	ws2812_color[led_id] = rgba_to_color(r, g, b, a);
 8001db6:	79fc      	ldrb	r4, [r7, #7]
 8001db8:	7e3b      	ldrb	r3, [r7, #24]
 8001dba:	793a      	ldrb	r2, [r7, #4]
 8001dbc:	7979      	ldrb	r1, [r7, #5]
 8001dbe:	79b8      	ldrb	r0, [r7, #6]
 8001dc0:	f7ff ff8c 	bl	8001cdc <rgba_to_color>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	4a03      	ldr	r2, [pc, #12]	@ (8001dd4 <ws2812_set_rgba+0x3c>)
 8001dc8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd90      	pop	{r4, r7, pc}
 8001dd4:	2000263c 	.word	0x2000263c

08001dd8 <rainbow_color>:
}

// =============== 以下为额外的效果演示函数 ================

uint32_t rainbow_color(float frequency, int phase, int center, int width)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b08a      	sub	sp, #40	@ 0x28
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	ed87 0a05 	vstr	s0, [r7, #20]
 8001de2:	6138      	str	r0, [r7, #16]
 8001de4:	60f9      	str	r1, [r7, #12]
 8001de6:	60ba      	str	r2, [r7, #8]
	float r = sinf(frequency * phase + 0) * width + center;
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	ee07 3a90 	vmov	s15, r3
 8001dee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001df2:	edd7 7a05 	vldr	s15, [r7, #20]
 8001df6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dfa:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8001efc <rainbow_color+0x124>
 8001dfe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e02:	eeb0 0a67 	vmov.f32	s0, s15
 8001e06:	f00d fafd 	bl	800f404 <sinf>
 8001e0a:	eeb0 7a40 	vmov.f32	s14, s0
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	ee07 3a90 	vmov	s15, r3
 8001e14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	ee07 3a90 	vmov	s15, r3
 8001e22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e2a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	float g = sinf(frequency * phase + 2) * width + center;
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	ee07 3a90 	vmov	s15, r3
 8001e34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e38:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e40:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001e44:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e48:	eeb0 0a67 	vmov.f32	s0, s15
 8001e4c:	f00d fada 	bl	800f404 <sinf>
 8001e50:	eeb0 7a40 	vmov.f32	s14, s0
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	ee07 3a90 	vmov	s15, r3
 8001e5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	ee07 3a90 	vmov	s15, r3
 8001e68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e70:	edc7 7a08 	vstr	s15, [r7, #32]
	float b = sinf(frequency * phase + 4) * width + center;
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	ee07 3a90 	vmov	s15, r3
 8001e7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e7e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e86:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001e8a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e8e:	eeb0 0a67 	vmov.f32	s0, s15
 8001e92:	f00d fab7 	bl	800f404 <sinf>
 8001e96:	eeb0 7a40 	vmov.f32	s14, s0
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	ee07 3a90 	vmov	s15, r3
 8001ea0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ea4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	ee07 3a90 	vmov	s15, r3
 8001eae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eb6:	edc7 7a07 	vstr	s15, [r7, #28]
	return rgb_to_color((uint8_t)r, (uint8_t)g, (uint8_t)b);
 8001eba:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001ebe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ec2:	edc7 7a01 	vstr	s15, [r7, #4]
 8001ec6:	793b      	ldrb	r3, [r7, #4]
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	edd7 7a08 	vldr	s15, [r7, #32]
 8001ece:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ed2:	edc7 7a01 	vstr	s15, [r7, #4]
 8001ed6:	793a      	ldrb	r2, [r7, #4]
 8001ed8:	b2d1      	uxtb	r1, r2
 8001eda:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ede:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ee2:	edc7 7a01 	vstr	s15, [r7, #4]
 8001ee6:	793a      	ldrb	r2, [r7, #4]
 8001ee8:	b2d2      	uxtb	r2, r2
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff fee0 	bl	8001cb0 <rgb_to_color>
 8001ef0:	4603      	mov	r3, r0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3728      	adds	r7, #40	@ 0x28
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	00000000 	.word	0x00000000

08001f00 <rainbow_effect>:

void rainbow_effect(uint8_t steps, uint16_t delay_ms)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b088      	sub	sp, #32
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	4603      	mov	r3, r0
 8001f08:	460a      	mov	r2, r1
 8001f0a:	71fb      	strb	r3, [r7, #7]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	80bb      	strh	r3, [r7, #4]
	float frequency = 0.1;
 8001f10:	4b1a      	ldr	r3, [pc, #104]	@ (8001f7c <rainbow_effect+0x7c>)
 8001f12:	617b      	str	r3, [r7, #20]
	int center = 128;
 8001f14:	2380      	movs	r3, #128	@ 0x80
 8001f16:	613b      	str	r3, [r7, #16]
	int width = 127;
 8001f18:	237f      	movs	r3, #127	@ 0x7f
 8001f1a:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < steps; i++)
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	61fb      	str	r3, [r7, #28]
 8001f20:	e022      	b.n	8001f68 <rainbow_effect+0x68>
	{
		for (uint8_t led_id = 0; led_id < WS2812_NUM; led_id++)
 8001f22:	2300      	movs	r3, #0
 8001f24:	76fb      	strb	r3, [r7, #27]
 8001f26:	e013      	b.n	8001f50 <rainbow_effect+0x50>
		{
			uint32_t color = rainbow_color(frequency, i + led_id * 2, center, width);
 8001f28:	7efb      	ldrb	r3, [r7, #27]
 8001f2a:	005a      	lsls	r2, r3, #1
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	4413      	add	r3, r2
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	6939      	ldr	r1, [r7, #16]
 8001f34:	4618      	mov	r0, r3
 8001f36:	ed97 0a05 	vldr	s0, [r7, #20]
 8001f3a:	f7ff ff4d 	bl	8001dd8 <rainbow_color>
 8001f3e:	60b8      	str	r0, [r7, #8]
			ws2812_set_24bit(led_id, color);
 8001f40:	7efb      	ldrb	r3, [r7, #27]
 8001f42:	68b9      	ldr	r1, [r7, #8]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff fe83 	bl	8001c50 <ws2812_set_24bit>
		for (uint8_t led_id = 0; led_id < WS2812_NUM; led_id++)
 8001f4a:	7efb      	ldrb	r3, [r7, #27]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	76fb      	strb	r3, [r7, #27]
 8001f50:	7efb      	ldrb	r3, [r7, #27]
 8001f52:	2b31      	cmp	r3, #49	@ 0x31
 8001f54:	d9e8      	bls.n	8001f28 <rainbow_effect+0x28>
		}
		ws2812_update_force();
 8001f56:	f7ff fcfb 	bl	8001950 <ws2812_update_force>
		HAL_Delay(delay_ms);
 8001f5a:	88bb      	ldrh	r3, [r7, #4]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f000 f8a9 	bl	80020b4 <HAL_Delay>
	for (int i = 0; i < steps; i++)
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	3301      	adds	r3, #1
 8001f66:	61fb      	str	r3, [r7, #28]
 8001f68:	79fb      	ldrb	r3, [r7, #7]
 8001f6a:	69fa      	ldr	r2, [r7, #28]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	dbd8      	blt.n	8001f22 <rainbow_effect+0x22>
	}
}
 8001f70:	bf00      	nop
 8001f72:	bf00      	nop
 8001f74:	3720      	adds	r7, #32
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	3dcccccd 	.word	0x3dcccccd

08001f80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f80:	480d      	ldr	r0, [pc, #52]	@ (8001fb8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f82:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f84:	f7ff fcd2 	bl	800192c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f88:	480c      	ldr	r0, [pc, #48]	@ (8001fbc <LoopForever+0x6>)
  ldr r1, =_edata
 8001f8a:	490d      	ldr	r1, [pc, #52]	@ (8001fc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f8c:	4a0d      	ldr	r2, [pc, #52]	@ (8001fc4 <LoopForever+0xe>)
  movs r3, #0
 8001f8e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001f90:	e002      	b.n	8001f98 <LoopCopyDataInit>

08001f92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f96:	3304      	adds	r3, #4

08001f98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f9c:	d3f9      	bcc.n	8001f92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f9e:	4a0a      	ldr	r2, [pc, #40]	@ (8001fc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fa0:	4c0a      	ldr	r4, [pc, #40]	@ (8001fcc <LoopForever+0x16>)
  movs r3, #0
 8001fa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fa4:	e001      	b.n	8001faa <LoopFillZerobss>

08001fa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fa8:	3204      	adds	r2, #4

08001faa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001faa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fac:	d3fb      	bcc.n	8001fa6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fae:	f00c fdb7 	bl	800eb20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001fb2:	f7fe f991 	bl	80002d8 <main>

08001fb6 <LoopForever>:

LoopForever:
    b LoopForever
 8001fb6:	e7fe      	b.n	8001fb6 <LoopForever>
  ldr   r0, =_estack
 8001fb8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001fbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fc0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001fc4:	0801031c 	.word	0x0801031c
  ldr r2, =_sbss
 8001fc8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001fcc:	20005008 	.word	0x20005008

08001fd0 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fd0:	e7fe      	b.n	8001fd0 <ADC3_IRQHandler>

08001fd2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b082      	sub	sp, #8
 8001fd6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fdc:	2003      	movs	r0, #3
 8001fde:	f001 ffc9 	bl	8003f74 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fe2:	200f      	movs	r0, #15
 8001fe4:	f000 f80e 	bl	8002004 <HAL_InitTick>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d002      	beq.n	8001ff4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	71fb      	strb	r3, [r7, #7]
 8001ff2:	e001      	b.n	8001ff8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ff4:	f7ff f880 	bl	80010f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ff8:	79fb      	ldrb	r3, [r7, #7]

}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
	...

08002004 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800200c:	2300      	movs	r3, #0
 800200e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002010:	4b16      	ldr	r3, [pc, #88]	@ (800206c <HAL_InitTick+0x68>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d022      	beq.n	800205e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002018:	4b15      	ldr	r3, [pc, #84]	@ (8002070 <HAL_InitTick+0x6c>)
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	4b13      	ldr	r3, [pc, #76]	@ (800206c <HAL_InitTick+0x68>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002024:	fbb1 f3f3 	udiv	r3, r1, r3
 8002028:	fbb2 f3f3 	udiv	r3, r2, r3
 800202c:	4618      	mov	r0, r3
 800202e:	f001 ffd4 	bl	8003fda <HAL_SYSTICK_Config>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d10f      	bne.n	8002058 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2b0f      	cmp	r3, #15
 800203c:	d809      	bhi.n	8002052 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800203e:	2200      	movs	r2, #0
 8002040:	6879      	ldr	r1, [r7, #4]
 8002042:	f04f 30ff 	mov.w	r0, #4294967295
 8002046:	f001 ffa0 	bl	8003f8a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800204a:	4a0a      	ldr	r2, [pc, #40]	@ (8002074 <HAL_InitTick+0x70>)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6013      	str	r3, [r2, #0]
 8002050:	e007      	b.n	8002062 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	73fb      	strb	r3, [r7, #15]
 8002056:	e004      	b.n	8002062 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	73fb      	strb	r3, [r7, #15]
 800205c:	e001      	b.n	8002062 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002062:	7bfb      	ldrb	r3, [r7, #15]
}
 8002064:	4618      	mov	r0, r3
 8002066:	3710      	adds	r7, #16
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	20000008 	.word	0x20000008
 8002070:	20000000 	.word	0x20000000
 8002074:	20000004 	.word	0x20000004

08002078 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800207c:	4b05      	ldr	r3, [pc, #20]	@ (8002094 <HAL_IncTick+0x1c>)
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	4b05      	ldr	r3, [pc, #20]	@ (8002098 <HAL_IncTick+0x20>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4413      	add	r3, r2
 8002086:	4a03      	ldr	r2, [pc, #12]	@ (8002094 <HAL_IncTick+0x1c>)
 8002088:	6013      	str	r3, [r2, #0]
}
 800208a:	bf00      	nop
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	200034ec 	.word	0x200034ec
 8002098:	20000008 	.word	0x20000008

0800209c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  return uwTick;
 80020a0:	4b03      	ldr	r3, [pc, #12]	@ (80020b0 <HAL_GetTick+0x14>)
 80020a2:	681b      	ldr	r3, [r3, #0]
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	200034ec 	.word	0x200034ec

080020b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020bc:	f7ff ffee 	bl	800209c <HAL_GetTick>
 80020c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020cc:	d004      	beq.n	80020d8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80020ce:	4b09      	ldr	r3, [pc, #36]	@ (80020f4 <HAL_Delay+0x40>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	4413      	add	r3, r2
 80020d6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020d8:	bf00      	nop
 80020da:	f7ff ffdf 	bl	800209c <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	68fa      	ldr	r2, [r7, #12]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d8f7      	bhi.n	80020da <HAL_Delay+0x26>
  {
  }
}
 80020ea:	bf00      	nop
 80020ec:	bf00      	nop
 80020ee:	3710      	adds	r7, #16
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	20000008 	.word	0x20000008

080020f8 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE2: VREFBUF_OUT around 2.9 V.
  *                                                This requires VDDA equal to or higher than 3.15 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8002100:	4b06      	ldr	r3, [pc, #24]	@ (800211c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002108:	4904      	ldr	r1, [pc, #16]	@ (800211c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4313      	orrs	r3, r2
 800210e:	600b      	str	r3, [r1, #0]
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr
 800211c:	40010030 	.word	0x40010030

08002120 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8002128:	4b06      	ldr	r3, [pc, #24]	@ (8002144 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f023 0202 	bic.w	r2, r3, #2
 8002130:	4904      	ldr	r1, [pc, #16]	@ (8002144 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4313      	orrs	r3, r2
 8002136:	600b      	str	r3, [r1, #0]
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	40010030 	.word	0x40010030

08002148 <HAL_SYSCFG_VREFBUF_TrimmingConfig>:
  * @param TrimmingValue specifies trimming code for VREFBUF calibration
  *        This parameter can be a number between Min_Data = 0x00 and Max_Data = 0x3F
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_TrimmingConfig(uint32_t TrimmingValue)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_TRIMMING(TrimmingValue));

  MODIFY_REG(VREFBUF->CCR, VREFBUF_CCR_TRIM, TrimmingValue);
 8002150:	4b06      	ldr	r3, [pc, #24]	@ (800216c <HAL_SYSCFG_VREFBUF_TrimmingConfig+0x24>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8002158:	4904      	ldr	r1, [pc, #16]	@ (800216c <HAL_SYSCFG_VREFBUF_TrimmingConfig+0x24>)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4313      	orrs	r3, r2
 800215e:	604b      	str	r3, [r1, #4]
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr
 800216c:	40010030 	.word	0x40010030

08002170 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8002176:	4b0f      	ldr	r3, [pc, #60]	@ (80021b4 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a0e      	ldr	r2, [pc, #56]	@ (80021b4 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 800217c:	f043 0301 	orr.w	r3, r3, #1
 8002180:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002182:	f7ff ff8b 	bl	800209c <HAL_GetTick>
 8002186:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8002188:	e008      	b.n	800219c <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 800218a:	f7ff ff87 	bl	800209c <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	2b0a      	cmp	r3, #10
 8002196:	d901      	bls.n	800219c <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e006      	b.n	80021aa <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 800219c:	4b05      	ldr	r3, [pc, #20]	@ (80021b4 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0308 	and.w	r3, r3, #8
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d0f0      	beq.n	800218a <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40010030 	.word	0x40010030

080021b8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	431a      	orrs	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	609a      	str	r2, [r3, #8]
}
 80021d2:	bf00      	nop
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
 80021e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	431a      	orrs	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	609a      	str	r2, [r3, #8]
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002214:	4618      	mov	r0, r3
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002220:	b480      	push	{r7}
 8002222:	b087      	sub	sp, #28
 8002224:	af00      	add	r7, sp, #0
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	607a      	str	r2, [r7, #4]
 800222c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	3360      	adds	r3, #96	@ 0x60
 8002232:	461a      	mov	r2, r3
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	4413      	add	r3, r2
 800223a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	4b08      	ldr	r3, [pc, #32]	@ (8002264 <LL_ADC_SetOffset+0x44>)
 8002242:	4013      	ands	r3, r2
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800224a:	683a      	ldr	r2, [r7, #0]
 800224c:	430a      	orrs	r2, r1
 800224e:	4313      	orrs	r3, r2
 8002250:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002258:	bf00      	nop
 800225a:	371c      	adds	r7, #28
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr
 8002264:	03fff000 	.word	0x03fff000

08002268 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	3360      	adds	r3, #96	@ 0x60
 8002276:	461a      	mov	r2, r3
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	4413      	add	r3, r2
 800227e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002288:	4618      	mov	r0, r3
 800228a:	3714      	adds	r7, #20
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002294:	b480      	push	{r7}
 8002296:	b087      	sub	sp, #28
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	3360      	adds	r3, #96	@ 0x60
 80022a4:	461a      	mov	r2, r3
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	4413      	add	r3, r2
 80022ac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	431a      	orrs	r2, r3
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80022be:	bf00      	nop
 80022c0:	371c      	adds	r7, #28
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr

080022ca <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80022ca:	b480      	push	{r7}
 80022cc:	b087      	sub	sp, #28
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	60f8      	str	r0, [r7, #12]
 80022d2:	60b9      	str	r1, [r7, #8]
 80022d4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	3360      	adds	r3, #96	@ 0x60
 80022da:	461a      	mov	r2, r3
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4413      	add	r3, r2
 80022e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	431a      	orrs	r2, r3
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80022f4:	bf00      	nop
 80022f6:	371c      	adds	r7, #28
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002300:	b480      	push	{r7}
 8002302:	b087      	sub	sp, #28
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	3360      	adds	r3, #96	@ 0x60
 8002310:	461a      	mov	r2, r3
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	4413      	add	r3, r2
 8002318:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	431a      	orrs	r2, r3
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800232a:	bf00      	nop
 800232c:	371c      	adds	r7, #28
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr

08002336 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002336:	b480      	push	{r7}
 8002338:	b083      	sub	sp, #12
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
 800233e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	695b      	ldr	r3, [r3, #20]
 8002344:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	431a      	orrs	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	615a      	str	r2, [r3, #20]
}
 8002350:	bf00      	nop
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800236c:	2b00      	cmp	r3, #0
 800236e:	d101      	bne.n	8002374 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002370:	2301      	movs	r3, #1
 8002372:	e000      	b.n	8002376 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr

08002382 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002382:	b480      	push	{r7}
 8002384:	b087      	sub	sp, #28
 8002386:	af00      	add	r7, sp, #0
 8002388:	60f8      	str	r0, [r7, #12]
 800238a:	60b9      	str	r1, [r7, #8]
 800238c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	3330      	adds	r3, #48	@ 0x30
 8002392:	461a      	mov	r2, r3
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	0a1b      	lsrs	r3, r3, #8
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	f003 030c 	and.w	r3, r3, #12
 800239e:	4413      	add	r3, r2
 80023a0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	f003 031f 	and.w	r3, r3, #31
 80023ac:	211f      	movs	r1, #31
 80023ae:	fa01 f303 	lsl.w	r3, r1, r3
 80023b2:	43db      	mvns	r3, r3
 80023b4:	401a      	ands	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	0e9b      	lsrs	r3, r3, #26
 80023ba:	f003 011f 	and.w	r1, r3, #31
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	f003 031f 	and.w	r3, r3, #31
 80023c4:	fa01 f303 	lsl.w	r3, r1, r3
 80023c8:	431a      	orrs	r2, r3
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80023ce:	bf00      	nop
 80023d0:	371c      	adds	r7, #28
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr

080023da <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80023da:	b480      	push	{r7}
 80023dc:	b083      	sub	sp, #12
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023e6:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80023ee:	2301      	movs	r3, #1
 80023f0:	e000      	b.n	80023f4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002400:	b480      	push	{r7}
 8002402:	b087      	sub	sp, #28
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	3314      	adds	r3, #20
 8002410:	461a      	mov	r2, r3
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	0e5b      	lsrs	r3, r3, #25
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	f003 0304 	and.w	r3, r3, #4
 800241c:	4413      	add	r3, r2
 800241e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	0d1b      	lsrs	r3, r3, #20
 8002428:	f003 031f 	and.w	r3, r3, #31
 800242c:	2107      	movs	r1, #7
 800242e:	fa01 f303 	lsl.w	r3, r1, r3
 8002432:	43db      	mvns	r3, r3
 8002434:	401a      	ands	r2, r3
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	0d1b      	lsrs	r3, r3, #20
 800243a:	f003 031f 	and.w	r3, r3, #31
 800243e:	6879      	ldr	r1, [r7, #4]
 8002440:	fa01 f303 	lsl.w	r3, r1, r3
 8002444:	431a      	orrs	r2, r3
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800244a:	bf00      	nop
 800244c:	371c      	adds	r7, #28
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
	...

08002458 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002470:	43db      	mvns	r3, r3
 8002472:	401a      	ands	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f003 0318 	and.w	r3, r3, #24
 800247a:	4908      	ldr	r1, [pc, #32]	@ (800249c <LL_ADC_SetChannelSingleDiff+0x44>)
 800247c:	40d9      	lsrs	r1, r3
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	400b      	ands	r3, r1
 8002482:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002486:	431a      	orrs	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800248e:	bf00      	nop
 8002490:	3714      	adds	r7, #20
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	0007ffff 	.word	0x0007ffff

080024a0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f003 031f 	and.w	r3, r3, #31
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80024e8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	6093      	str	r3, [r2, #8]
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800250c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002510:	d101      	bne.n	8002516 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002512:	2301      	movs	r3, #1
 8002514:	e000      	b.n	8002518 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002516:	2300      	movs	r3, #0
}
 8002518:	4618      	mov	r0, r3
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002534:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002538:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002540:	bf00      	nop
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800255c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002560:	d101      	bne.n	8002566 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002562:	2301      	movs	r3, #1
 8002564:	e000      	b.n	8002568 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002584:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002588:	f043 0201 	orr.w	r2, r3, #1
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002590:	bf00      	nop
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d101      	bne.n	80025b4 <LL_ADC_IsEnabled+0x18>
 80025b0:	2301      	movs	r3, #1
 80025b2:	e000      	b.n	80025b6 <LL_ADC_IsEnabled+0x1a>
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr

080025c2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80025c2:	b480      	push	{r7}
 80025c4:	b083      	sub	sp, #12
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80025d2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80025d6:	f043 0204 	orr.w	r2, r3, #4
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80025de:	bf00      	nop
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr

080025ea <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80025ea:	b480      	push	{r7}
 80025ec:	b083      	sub	sp, #12
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f003 0304 	and.w	r3, r3, #4
 80025fa:	2b04      	cmp	r3, #4
 80025fc:	d101      	bne.n	8002602 <LL_ADC_REG_IsConversionOngoing+0x18>
 80025fe:	2301      	movs	r3, #1
 8002600:	e000      	b.n	8002604 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002602:	2300      	movs	r3, #0
}
 8002604:	4618      	mov	r0, r3
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f003 0308 	and.w	r3, r3, #8
 8002620:	2b08      	cmp	r3, #8
 8002622:	d101      	bne.n	8002628 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002624:	2301      	movs	r3, #1
 8002626:	e000      	b.n	800262a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
	...

08002638 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002638:	b590      	push	{r4, r7, lr}
 800263a:	b089      	sub	sp, #36	@ 0x24
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002640:	2300      	movs	r3, #0
 8002642:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002644:	2300      	movs	r3, #0
 8002646:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e1a9      	b.n	80029a6 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800265c:	2b00      	cmp	r3, #0
 800265e:	d109      	bne.n	8002674 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f7fe fd77 	bl	8001154 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4618      	mov	r0, r3
 800267a:	f7ff ff3f 	bl	80024fc <LL_ADC_IsDeepPowerDownEnabled>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d004      	beq.n	800268e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4618      	mov	r0, r3
 800268a:	f7ff ff25 	bl	80024d8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	f7ff ff5a 	bl	800254c <LL_ADC_IsInternalRegulatorEnabled>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d115      	bne.n	80026ca <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7ff ff3e 	bl	8002524 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026a8:	4b9c      	ldr	r3, [pc, #624]	@ (800291c <HAL_ADC_Init+0x2e4>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	099b      	lsrs	r3, r3, #6
 80026ae:	4a9c      	ldr	r2, [pc, #624]	@ (8002920 <HAL_ADC_Init+0x2e8>)
 80026b0:	fba2 2303 	umull	r2, r3, r2, r3
 80026b4:	099b      	lsrs	r3, r3, #6
 80026b6:	3301      	adds	r3, #1
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80026bc:	e002      	b.n	80026c4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	3b01      	subs	r3, #1
 80026c2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1f9      	bne.n	80026be <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7ff ff3c 	bl	800254c <LL_ADC_IsInternalRegulatorEnabled>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10d      	bne.n	80026f6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026de:	f043 0210 	orr.w	r2, r3, #16
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026ea:	f043 0201 	orr.w	r2, r3, #1
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7ff ff75 	bl	80025ea <LL_ADC_REG_IsConversionOngoing>
 8002700:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002706:	f003 0310 	and.w	r3, r3, #16
 800270a:	2b00      	cmp	r3, #0
 800270c:	f040 8142 	bne.w	8002994 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	2b00      	cmp	r3, #0
 8002714:	f040 813e 	bne.w	8002994 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800271c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002720:	f043 0202 	orr.w	r2, r3, #2
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4618      	mov	r0, r3
 800272e:	f7ff ff35 	bl	800259c <LL_ADC_IsEnabled>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d141      	bne.n	80027bc <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002740:	d004      	beq.n	800274c <HAL_ADC_Init+0x114>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a77      	ldr	r2, [pc, #476]	@ (8002924 <HAL_ADC_Init+0x2ec>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d10f      	bne.n	800276c <HAL_ADC_Init+0x134>
 800274c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002750:	f7ff ff24 	bl	800259c <LL_ADC_IsEnabled>
 8002754:	4604      	mov	r4, r0
 8002756:	4873      	ldr	r0, [pc, #460]	@ (8002924 <HAL_ADC_Init+0x2ec>)
 8002758:	f7ff ff20 	bl	800259c <LL_ADC_IsEnabled>
 800275c:	4603      	mov	r3, r0
 800275e:	4323      	orrs	r3, r4
 8002760:	2b00      	cmp	r3, #0
 8002762:	bf0c      	ite	eq
 8002764:	2301      	moveq	r3, #1
 8002766:	2300      	movne	r3, #0
 8002768:	b2db      	uxtb	r3, r3
 800276a:	e012      	b.n	8002792 <HAL_ADC_Init+0x15a>
 800276c:	486e      	ldr	r0, [pc, #440]	@ (8002928 <HAL_ADC_Init+0x2f0>)
 800276e:	f7ff ff15 	bl	800259c <LL_ADC_IsEnabled>
 8002772:	4604      	mov	r4, r0
 8002774:	486d      	ldr	r0, [pc, #436]	@ (800292c <HAL_ADC_Init+0x2f4>)
 8002776:	f7ff ff11 	bl	800259c <LL_ADC_IsEnabled>
 800277a:	4603      	mov	r3, r0
 800277c:	431c      	orrs	r4, r3
 800277e:	486c      	ldr	r0, [pc, #432]	@ (8002930 <HAL_ADC_Init+0x2f8>)
 8002780:	f7ff ff0c 	bl	800259c <LL_ADC_IsEnabled>
 8002784:	4603      	mov	r3, r0
 8002786:	4323      	orrs	r3, r4
 8002788:	2b00      	cmp	r3, #0
 800278a:	bf0c      	ite	eq
 800278c:	2301      	moveq	r3, #1
 800278e:	2300      	movne	r3, #0
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b00      	cmp	r3, #0
 8002794:	d012      	beq.n	80027bc <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800279e:	d004      	beq.n	80027aa <HAL_ADC_Init+0x172>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a5f      	ldr	r2, [pc, #380]	@ (8002924 <HAL_ADC_Init+0x2ec>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d101      	bne.n	80027ae <HAL_ADC_Init+0x176>
 80027aa:	4a62      	ldr	r2, [pc, #392]	@ (8002934 <HAL_ADC_Init+0x2fc>)
 80027ac:	e000      	b.n	80027b0 <HAL_ADC_Init+0x178>
 80027ae:	4a62      	ldr	r2, [pc, #392]	@ (8002938 <HAL_ADC_Init+0x300>)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	4619      	mov	r1, r3
 80027b6:	4610      	mov	r0, r2
 80027b8:	f7ff fcfe 	bl	80021b8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	7f5b      	ldrb	r3, [r3, #29]
 80027c0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80027c6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80027cc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80027d2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80027da:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80027dc:	4313      	orrs	r3, r2
 80027de:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d106      	bne.n	80027f8 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ee:	3b01      	subs	r3, #1
 80027f0:	045b      	lsls	r3, r3, #17
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d009      	beq.n	8002814 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002804:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800280c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	4313      	orrs	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68da      	ldr	r2, [r3, #12]
 800281a:	4b48      	ldr	r3, [pc, #288]	@ (800293c <HAL_ADC_Init+0x304>)
 800281c:	4013      	ands	r3, r2
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	6812      	ldr	r2, [r2, #0]
 8002822:	69b9      	ldr	r1, [r7, #24]
 8002824:	430b      	orrs	r3, r1
 8002826:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	430a      	orrs	r2, r1
 800283c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4618      	mov	r0, r3
 8002844:	f7ff fee4 	bl	8002610 <LL_ADC_INJ_IsConversionOngoing>
 8002848:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d17f      	bne.n	8002950 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d17c      	bne.n	8002950 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800285a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002862:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002864:	4313      	orrs	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002872:	f023 0302 	bic.w	r3, r3, #2
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	6812      	ldr	r2, [r2, #0]
 800287a:	69b9      	ldr	r1, [r7, #24]
 800287c:	430b      	orrs	r3, r1
 800287e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d017      	beq.n	80028b8 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	691a      	ldr	r2, [r3, #16]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002896:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80028a0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80028a4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	6911      	ldr	r1, [r2, #16]
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	6812      	ldr	r2, [r2, #0]
 80028b0:	430b      	orrs	r3, r1
 80028b2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80028b6:	e013      	b.n	80028e0 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	691a      	ldr	r2, [r3, #16]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80028c6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	6812      	ldr	r2, [r2, #0]
 80028d4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80028d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80028dc:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d12a      	bne.n	8002940 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	691b      	ldr	r3, [r3, #16]
 80028f0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80028f4:	f023 0304 	bic.w	r3, r3, #4
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002900:	4311      	orrs	r1, r2
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002906:	4311      	orrs	r1, r2
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800290c:	430a      	orrs	r2, r1
 800290e:	431a      	orrs	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f042 0201 	orr.w	r2, r2, #1
 8002918:	611a      	str	r2, [r3, #16]
 800291a:	e019      	b.n	8002950 <HAL_ADC_Init+0x318>
 800291c:	20000000 	.word	0x20000000
 8002920:	053e2d63 	.word	0x053e2d63
 8002924:	50000100 	.word	0x50000100
 8002928:	50000400 	.word	0x50000400
 800292c:	50000500 	.word	0x50000500
 8002930:	50000600 	.word	0x50000600
 8002934:	50000300 	.word	0x50000300
 8002938:	50000700 	.word	0x50000700
 800293c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	691a      	ldr	r2, [r3, #16]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f022 0201 	bic.w	r2, r2, #1
 800294e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	695b      	ldr	r3, [r3, #20]
 8002954:	2b01      	cmp	r3, #1
 8002956:	d10c      	bne.n	8002972 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800295e:	f023 010f 	bic.w	r1, r3, #15
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a1b      	ldr	r3, [r3, #32]
 8002966:	1e5a      	subs	r2, r3, #1
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	430a      	orrs	r2, r1
 800296e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002970:	e007      	b.n	8002982 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 020f 	bic.w	r2, r2, #15
 8002980:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002986:	f023 0303 	bic.w	r3, r3, #3
 800298a:	f043 0201 	orr.w	r2, r3, #1
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002992:	e007      	b.n	80029a4 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002998:	f043 0210 	orr.w	r2, r3, #16
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80029a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3724      	adds	r7, #36	@ 0x24
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd90      	pop	{r4, r7, pc}
 80029ae:	bf00      	nop

080029b0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80029c4:	d004      	beq.n	80029d0 <HAL_ADC_Start_DMA+0x20>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a5a      	ldr	r2, [pc, #360]	@ (8002b34 <HAL_ADC_Start_DMA+0x184>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d101      	bne.n	80029d4 <HAL_ADC_Start_DMA+0x24>
 80029d0:	4b59      	ldr	r3, [pc, #356]	@ (8002b38 <HAL_ADC_Start_DMA+0x188>)
 80029d2:	e000      	b.n	80029d6 <HAL_ADC_Start_DMA+0x26>
 80029d4:	4b59      	ldr	r3, [pc, #356]	@ (8002b3c <HAL_ADC_Start_DMA+0x18c>)
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7ff fd62 	bl	80024a0 <LL_ADC_GetMultimode>
 80029dc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7ff fe01 	bl	80025ea <LL_ADC_REG_IsConversionOngoing>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	f040 809b 	bne.w	8002b26 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d101      	bne.n	80029fe <HAL_ADC_Start_DMA+0x4e>
 80029fa:	2302      	movs	r3, #2
 80029fc:	e096      	b.n	8002b2c <HAL_ADC_Start_DMA+0x17c>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a4d      	ldr	r2, [pc, #308]	@ (8002b40 <HAL_ADC_Start_DMA+0x190>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d008      	beq.n	8002a22 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d005      	beq.n	8002a22 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	2b05      	cmp	r3, #5
 8002a1a:	d002      	beq.n	8002a22 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	2b09      	cmp	r3, #9
 8002a20:	d17a      	bne.n	8002b18 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002a22:	68f8      	ldr	r0, [r7, #12]
 8002a24:	f000 ff4c 	bl	80038c0 <ADC_Enable>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002a2c:	7dfb      	ldrb	r3, [r7, #23]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d16d      	bne.n	8002b0e <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a36:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002a3a:	f023 0301 	bic.w	r3, r3, #1
 8002a3e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a3a      	ldr	r2, [pc, #232]	@ (8002b34 <HAL_ADC_Start_DMA+0x184>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d009      	beq.n	8002a64 <HAL_ADC_Start_DMA+0xb4>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a3b      	ldr	r2, [pc, #236]	@ (8002b44 <HAL_ADC_Start_DMA+0x194>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d002      	beq.n	8002a60 <HAL_ADC_Start_DMA+0xb0>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	e003      	b.n	8002a68 <HAL_ADC_Start_DMA+0xb8>
 8002a60:	4b39      	ldr	r3, [pc, #228]	@ (8002b48 <HAL_ADC_Start_DMA+0x198>)
 8002a62:	e001      	b.n	8002a68 <HAL_ADC_Start_DMA+0xb8>
 8002a64:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	6812      	ldr	r2, [r2, #0]
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d002      	beq.n	8002a76 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d105      	bne.n	8002a82 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a7a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a86:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d006      	beq.n	8002a9c <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a92:	f023 0206 	bic.w	r2, r3, #6
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	661a      	str	r2, [r3, #96]	@ 0x60
 8002a9a:	e002      	b.n	8002aa2 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aa6:	4a29      	ldr	r2, [pc, #164]	@ (8002b4c <HAL_ADC_Start_DMA+0x19c>)
 8002aa8:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aae:	4a28      	ldr	r2, [pc, #160]	@ (8002b50 <HAL_ADC_Start_DMA+0x1a0>)
 8002ab0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ab6:	4a27      	ldr	r2, [pc, #156]	@ (8002b54 <HAL_ADC_Start_DMA+0x1a4>)
 8002ab8:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	221c      	movs	r2, #28
 8002ac0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	685a      	ldr	r2, [r3, #4]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f042 0210 	orr.w	r2, r2, #16
 8002ad8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68da      	ldr	r2, [r3, #12]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f042 0201 	orr.w	r2, r2, #1
 8002ae8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	3340      	adds	r3, #64	@ 0x40
 8002af4:	4619      	mov	r1, r3
 8002af6:	68ba      	ldr	r2, [r7, #8]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f001 fb23 	bl	8004144 <HAL_DMA_Start_IT>
 8002afe:	4603      	mov	r3, r0
 8002b00:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7ff fd5b 	bl	80025c2 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002b0c:	e00d      	b.n	8002b2a <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8002b16:	e008      	b.n	8002b2a <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002b24:	e001      	b.n	8002b2a <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002b26:	2302      	movs	r3, #2
 8002b28:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3718      	adds	r7, #24
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	50000100 	.word	0x50000100
 8002b38:	50000300 	.word	0x50000300
 8002b3c:	50000700 	.word	0x50000700
 8002b40:	50000600 	.word	0x50000600
 8002b44:	50000500 	.word	0x50000500
 8002b48:	50000400 	.word	0x50000400
 8002b4c:	080039ed 	.word	0x080039ed
 8002b50:	08003ac5 	.word	0x08003ac5
 8002b54:	08003ae1 	.word	0x08003ae1

08002b58 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b08a      	sub	sp, #40	@ 0x28
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002b60:	2300      	movs	r3, #0
 8002b62:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b7c:	d004      	beq.n	8002b88 <HAL_ADC_IRQHandler+0x30>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a8e      	ldr	r2, [pc, #568]	@ (8002dbc <HAL_ADC_IRQHandler+0x264>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d101      	bne.n	8002b8c <HAL_ADC_IRQHandler+0x34>
 8002b88:	4b8d      	ldr	r3, [pc, #564]	@ (8002dc0 <HAL_ADC_IRQHandler+0x268>)
 8002b8a:	e000      	b.n	8002b8e <HAL_ADC_IRQHandler+0x36>
 8002b8c:	4b8d      	ldr	r3, [pc, #564]	@ (8002dc4 <HAL_ADC_IRQHandler+0x26c>)
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7ff fc86 	bl	80024a0 <LL_ADC_GetMultimode>
 8002b94:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d017      	beq.n	8002bd0 <HAL_ADC_IRQHandler+0x78>
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d012      	beq.n	8002bd0 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bae:	f003 0310 	and.w	r3, r3, #16
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d105      	bne.n	8002bc2 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bba:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 fff4 	bl	8003bb0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2202      	movs	r2, #2
 8002bce:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	f003 0304 	and.w	r3, r3, #4
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d004      	beq.n	8002be4 <HAL_ADC_IRQHandler+0x8c>
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	f003 0304 	and.w	r3, r3, #4
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d10b      	bne.n	8002bfc <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f000 8094 	beq.w	8002d18 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	f003 0308 	and.w	r3, r3, #8
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f000 808e 	beq.w	8002d18 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c00:	f003 0310 	and.w	r3, r3, #16
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d105      	bne.n	8002c14 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c0c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7ff fb9f 	bl	800235c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d072      	beq.n	8002d0a <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a64      	ldr	r2, [pc, #400]	@ (8002dbc <HAL_ADC_IRQHandler+0x264>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d009      	beq.n	8002c42 <HAL_ADC_IRQHandler+0xea>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a65      	ldr	r2, [pc, #404]	@ (8002dc8 <HAL_ADC_IRQHandler+0x270>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d002      	beq.n	8002c3e <HAL_ADC_IRQHandler+0xe6>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	e003      	b.n	8002c46 <HAL_ADC_IRQHandler+0xee>
 8002c3e:	4b63      	ldr	r3, [pc, #396]	@ (8002dcc <HAL_ADC_IRQHandler+0x274>)
 8002c40:	e001      	b.n	8002c46 <HAL_ADC_IRQHandler+0xee>
 8002c42:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	6812      	ldr	r2, [r2, #0]
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d008      	beq.n	8002c60 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d005      	beq.n	8002c60 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	2b05      	cmp	r3, #5
 8002c58:	d002      	beq.n	8002c60 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	2b09      	cmp	r3, #9
 8002c5e:	d104      	bne.n	8002c6a <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	623b      	str	r3, [r7, #32]
 8002c68:	e014      	b.n	8002c94 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a53      	ldr	r2, [pc, #332]	@ (8002dbc <HAL_ADC_IRQHandler+0x264>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d009      	beq.n	8002c88 <HAL_ADC_IRQHandler+0x130>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a53      	ldr	r2, [pc, #332]	@ (8002dc8 <HAL_ADC_IRQHandler+0x270>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d002      	beq.n	8002c84 <HAL_ADC_IRQHandler+0x12c>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	e003      	b.n	8002c8c <HAL_ADC_IRQHandler+0x134>
 8002c84:	4b51      	ldr	r3, [pc, #324]	@ (8002dcc <HAL_ADC_IRQHandler+0x274>)
 8002c86:	e001      	b.n	8002c8c <HAL_ADC_IRQHandler+0x134>
 8002c88:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002c8c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002c94:	6a3b      	ldr	r3, [r7, #32]
 8002c96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d135      	bne.n	8002d0a <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0308 	and.w	r3, r3, #8
 8002ca8:	2b08      	cmp	r3, #8
 8002caa:	d12e      	bne.n	8002d0a <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7ff fc9a 	bl	80025ea <LL_ADC_REG_IsConversionOngoing>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d11a      	bne.n	8002cf2 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	685a      	ldr	r2, [r3, #4]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f022 020c 	bic.w	r2, r2, #12
 8002cca:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cd0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cdc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d112      	bne.n	8002d0a <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ce8:	f043 0201 	orr.w	r2, r3, #1
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002cf0:	e00b      	b.n	8002d0a <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cf6:	f043 0210 	orr.w	r2, r3, #16
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d02:	f043 0201 	orr.w	r2, r3, #1
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f7fe f97c 	bl	8001008 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	220c      	movs	r2, #12
 8002d16:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	f003 0320 	and.w	r3, r3, #32
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d004      	beq.n	8002d2c <HAL_ADC_IRQHandler+0x1d4>
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	f003 0320 	and.w	r3, r3, #32
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d10b      	bne.n	8002d44 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	f000 80b3 	beq.w	8002e9e <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	f000 80ad 	beq.w	8002e9e <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d48:	f003 0310 	and.w	r3, r3, #16
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d105      	bne.n	8002d5c <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d54:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff fb3a 	bl	80023da <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002d66:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7ff faf5 	bl	800235c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002d72:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a10      	ldr	r2, [pc, #64]	@ (8002dbc <HAL_ADC_IRQHandler+0x264>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d009      	beq.n	8002d92 <HAL_ADC_IRQHandler+0x23a>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a11      	ldr	r2, [pc, #68]	@ (8002dc8 <HAL_ADC_IRQHandler+0x270>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d002      	beq.n	8002d8e <HAL_ADC_IRQHandler+0x236>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	e003      	b.n	8002d96 <HAL_ADC_IRQHandler+0x23e>
 8002d8e:	4b0f      	ldr	r3, [pc, #60]	@ (8002dcc <HAL_ADC_IRQHandler+0x274>)
 8002d90:	e001      	b.n	8002d96 <HAL_ADC_IRQHandler+0x23e>
 8002d92:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	6812      	ldr	r2, [r2, #0]
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d008      	beq.n	8002db0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d005      	beq.n	8002db0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	2b06      	cmp	r3, #6
 8002da8:	d002      	beq.n	8002db0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	2b07      	cmp	r3, #7
 8002dae:	d10f      	bne.n	8002dd0 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	623b      	str	r3, [r7, #32]
 8002db8:	e01f      	b.n	8002dfa <HAL_ADC_IRQHandler+0x2a2>
 8002dba:	bf00      	nop
 8002dbc:	50000100 	.word	0x50000100
 8002dc0:	50000300 	.word	0x50000300
 8002dc4:	50000700 	.word	0x50000700
 8002dc8:	50000500 	.word	0x50000500
 8002dcc:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a8b      	ldr	r2, [pc, #556]	@ (8003004 <HAL_ADC_IRQHandler+0x4ac>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d009      	beq.n	8002dee <HAL_ADC_IRQHandler+0x296>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a8a      	ldr	r2, [pc, #552]	@ (8003008 <HAL_ADC_IRQHandler+0x4b0>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d002      	beq.n	8002dea <HAL_ADC_IRQHandler+0x292>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	e003      	b.n	8002df2 <HAL_ADC_IRQHandler+0x29a>
 8002dea:	4b88      	ldr	r3, [pc, #544]	@ (800300c <HAL_ADC_IRQHandler+0x4b4>)
 8002dec:	e001      	b.n	8002df2 <HAL_ADC_IRQHandler+0x29a>
 8002dee:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002df2:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d047      	beq.n	8002e90 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002e00:	6a3b      	ldr	r3, [r7, #32]
 8002e02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d007      	beq.n	8002e1a <HAL_ADC_IRQHandler+0x2c2>
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d03f      	beq.n	8002e90 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002e10:	6a3b      	ldr	r3, [r7, #32]
 8002e12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d13a      	bne.n	8002e90 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e24:	2b40      	cmp	r3, #64	@ 0x40
 8002e26:	d133      	bne.n	8002e90 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002e28:	6a3b      	ldr	r3, [r7, #32]
 8002e2a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d12e      	bne.n	8002e90 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7ff fbea 	bl	8002610 <LL_ADC_INJ_IsConversionOngoing>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d11a      	bne.n	8002e78 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	685a      	ldr	r2, [r3, #4]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002e50:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e56:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d112      	bne.n	8002e90 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e6e:	f043 0201 	orr.w	r2, r3, #1
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002e76:	e00b      	b.n	8002e90 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e7c:	f043 0210 	orr.w	r2, r3, #16
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e88:	f043 0201 	orr.w	r2, r3, #1
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f000 fe65 	bl	8003b60 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2260      	movs	r2, #96	@ 0x60
 8002e9c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d011      	beq.n	8002ecc <HAL_ADC_IRQHandler+0x374>
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d00c      	beq.n	8002ecc <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eb6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 f8aa 	bl	8003018 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2280      	movs	r2, #128	@ 0x80
 8002eca:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d012      	beq.n	8002efc <HAL_ADC_IRQHandler+0x3a4>
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d00d      	beq.n	8002efc <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ee4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f000 fe4b 	bl	8003b88 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002efa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d012      	beq.n	8002f2c <HAL_ADC_IRQHandler+0x3d4>
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d00d      	beq.n	8002f2c <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f14:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f000 fe3d 	bl	8003b9c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f2a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	f003 0310 	and.w	r3, r3, #16
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d043      	beq.n	8002fbe <HAL_ADC_IRQHandler+0x466>
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	f003 0310 	and.w	r3, r3, #16
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d03e      	beq.n	8002fbe <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d102      	bne.n	8002f4e <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f4c:	e021      	b.n	8002f92 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d015      	beq.n	8002f80 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f5c:	d004      	beq.n	8002f68 <HAL_ADC_IRQHandler+0x410>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a28      	ldr	r2, [pc, #160]	@ (8003004 <HAL_ADC_IRQHandler+0x4ac>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d101      	bne.n	8002f6c <HAL_ADC_IRQHandler+0x414>
 8002f68:	4b29      	ldr	r3, [pc, #164]	@ (8003010 <HAL_ADC_IRQHandler+0x4b8>)
 8002f6a:	e000      	b.n	8002f6e <HAL_ADC_IRQHandler+0x416>
 8002f6c:	4b29      	ldr	r3, [pc, #164]	@ (8003014 <HAL_ADC_IRQHandler+0x4bc>)
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7ff faa4 	bl	80024bc <LL_ADC_GetMultiDMATransfer>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00b      	beq.n	8002f92 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f7e:	e008      	b.n	8002f92 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d10e      	bne.n	8002fb6 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f9c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fa8:	f043 0202 	orr.w	r2, r3, #2
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f000 f83b 	bl	800302c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2210      	movs	r2, #16
 8002fbc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d018      	beq.n	8002ffa <HAL_ADC_IRQHandler+0x4a2>
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d013      	beq.n	8002ffa <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fd6:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fe2:	f043 0208 	orr.w	r2, r3, #8
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ff2:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f000 fdbd 	bl	8003b74 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002ffa:	bf00      	nop
 8002ffc:	3728      	adds	r7, #40	@ 0x28
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	50000100 	.word	0x50000100
 8003008:	50000500 	.word	0x50000500
 800300c:	50000400 	.word	0x50000400
 8003010:	50000300 	.word	0x50000300
 8003014:	50000700 	.word	0x50000700

08003018 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003020:	bf00      	nop
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003034:	bf00      	nop
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b0b6      	sub	sp, #216	@ 0xd8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800304a:	2300      	movs	r3, #0
 800304c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003050:	2300      	movs	r3, #0
 8003052:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800305a:	2b01      	cmp	r3, #1
 800305c:	d102      	bne.n	8003064 <HAL_ADC_ConfigChannel+0x24>
 800305e:	2302      	movs	r3, #2
 8003060:	f000 bc13 	b.w	800388a <HAL_ADC_ConfigChannel+0x84a>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4618      	mov	r0, r3
 8003072:	f7ff faba 	bl	80025ea <LL_ADC_REG_IsConversionOngoing>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	f040 83f3 	bne.w	8003864 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6818      	ldr	r0, [r3, #0]
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	6859      	ldr	r1, [r3, #4]
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	461a      	mov	r2, r3
 800308c:	f7ff f979 	bl	8002382 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4618      	mov	r0, r3
 8003096:	f7ff faa8 	bl	80025ea <LL_ADC_REG_IsConversionOngoing>
 800309a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7ff fab4 	bl	8002610 <LL_ADC_INJ_IsConversionOngoing>
 80030a8:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80030ac:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f040 81d9 	bne.w	8003468 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80030b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f040 81d4 	bne.w	8003468 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80030c8:	d10f      	bne.n	80030ea <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6818      	ldr	r0, [r3, #0]
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2200      	movs	r2, #0
 80030d4:	4619      	mov	r1, r3
 80030d6:	f7ff f993 	bl	8002400 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7ff f927 	bl	8002336 <LL_ADC_SetSamplingTimeCommonConfig>
 80030e8:	e00e      	b.n	8003108 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6818      	ldr	r0, [r3, #0]
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	6819      	ldr	r1, [r3, #0]
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	461a      	mov	r2, r3
 80030f8:	f7ff f982 	bl	8002400 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2100      	movs	r1, #0
 8003102:	4618      	mov	r0, r3
 8003104:	f7ff f917 	bl	8002336 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	695a      	ldr	r2, [r3, #20]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	08db      	lsrs	r3, r3, #3
 8003114:	f003 0303 	and.w	r3, r3, #3
 8003118:	005b      	lsls	r3, r3, #1
 800311a:	fa02 f303 	lsl.w	r3, r2, r3
 800311e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	2b04      	cmp	r3, #4
 8003128:	d022      	beq.n	8003170 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6818      	ldr	r0, [r3, #0]
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	6919      	ldr	r1, [r3, #16]
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800313a:	f7ff f871 	bl	8002220 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6818      	ldr	r0, [r3, #0]
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	6919      	ldr	r1, [r3, #16]
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	461a      	mov	r2, r3
 800314c:	f7ff f8bd 	bl	80022ca <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6818      	ldr	r0, [r3, #0]
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800315c:	2b01      	cmp	r3, #1
 800315e:	d102      	bne.n	8003166 <HAL_ADC_ConfigChannel+0x126>
 8003160:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003164:	e000      	b.n	8003168 <HAL_ADC_ConfigChannel+0x128>
 8003166:	2300      	movs	r3, #0
 8003168:	461a      	mov	r2, r3
 800316a:	f7ff f8c9 	bl	8002300 <LL_ADC_SetOffsetSaturation>
 800316e:	e17b      	b.n	8003468 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2100      	movs	r1, #0
 8003176:	4618      	mov	r0, r3
 8003178:	f7ff f876 	bl	8002268 <LL_ADC_GetOffsetChannel>
 800317c:	4603      	mov	r3, r0
 800317e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003182:	2b00      	cmp	r3, #0
 8003184:	d10a      	bne.n	800319c <HAL_ADC_ConfigChannel+0x15c>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2100      	movs	r1, #0
 800318c:	4618      	mov	r0, r3
 800318e:	f7ff f86b 	bl	8002268 <LL_ADC_GetOffsetChannel>
 8003192:	4603      	mov	r3, r0
 8003194:	0e9b      	lsrs	r3, r3, #26
 8003196:	f003 021f 	and.w	r2, r3, #31
 800319a:	e01e      	b.n	80031da <HAL_ADC_ConfigChannel+0x19a>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2100      	movs	r1, #0
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7ff f860 	bl	8002268 <LL_ADC_GetOffsetChannel>
 80031a8:	4603      	mov	r3, r0
 80031aa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80031b2:	fa93 f3a3 	rbit	r3, r3
 80031b6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80031ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80031be:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80031c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80031ca:	2320      	movs	r3, #32
 80031cc:	e004      	b.n	80031d8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80031ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80031d2:	fab3 f383 	clz	r3, r3
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d105      	bne.n	80031f2 <HAL_ADC_ConfigChannel+0x1b2>
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	0e9b      	lsrs	r3, r3, #26
 80031ec:	f003 031f 	and.w	r3, r3, #31
 80031f0:	e018      	b.n	8003224 <HAL_ADC_ConfigChannel+0x1e4>
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80031fe:	fa93 f3a3 	rbit	r3, r3
 8003202:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003206:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800320a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800320e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003212:	2b00      	cmp	r3, #0
 8003214:	d101      	bne.n	800321a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003216:	2320      	movs	r3, #32
 8003218:	e004      	b.n	8003224 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800321a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800321e:	fab3 f383 	clz	r3, r3
 8003222:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003224:	429a      	cmp	r2, r3
 8003226:	d106      	bne.n	8003236 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2200      	movs	r2, #0
 800322e:	2100      	movs	r1, #0
 8003230:	4618      	mov	r0, r3
 8003232:	f7ff f82f 	bl	8002294 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2101      	movs	r1, #1
 800323c:	4618      	mov	r0, r3
 800323e:	f7ff f813 	bl	8002268 <LL_ADC_GetOffsetChannel>
 8003242:	4603      	mov	r3, r0
 8003244:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003248:	2b00      	cmp	r3, #0
 800324a:	d10a      	bne.n	8003262 <HAL_ADC_ConfigChannel+0x222>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2101      	movs	r1, #1
 8003252:	4618      	mov	r0, r3
 8003254:	f7ff f808 	bl	8002268 <LL_ADC_GetOffsetChannel>
 8003258:	4603      	mov	r3, r0
 800325a:	0e9b      	lsrs	r3, r3, #26
 800325c:	f003 021f 	and.w	r2, r3, #31
 8003260:	e01e      	b.n	80032a0 <HAL_ADC_ConfigChannel+0x260>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2101      	movs	r1, #1
 8003268:	4618      	mov	r0, r3
 800326a:	f7fe fffd 	bl	8002268 <LL_ADC_GetOffsetChannel>
 800326e:	4603      	mov	r3, r0
 8003270:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003274:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003278:	fa93 f3a3 	rbit	r3, r3
 800327c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003280:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003284:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003288:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800328c:	2b00      	cmp	r3, #0
 800328e:	d101      	bne.n	8003294 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003290:	2320      	movs	r3, #32
 8003292:	e004      	b.n	800329e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003294:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003298:	fab3 f383 	clz	r3, r3
 800329c:	b2db      	uxtb	r3, r3
 800329e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d105      	bne.n	80032b8 <HAL_ADC_ConfigChannel+0x278>
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	0e9b      	lsrs	r3, r3, #26
 80032b2:	f003 031f 	and.w	r3, r3, #31
 80032b6:	e018      	b.n	80032ea <HAL_ADC_ConfigChannel+0x2aa>
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80032c4:	fa93 f3a3 	rbit	r3, r3
 80032c8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80032cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80032d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80032d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d101      	bne.n	80032e0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80032dc:	2320      	movs	r3, #32
 80032de:	e004      	b.n	80032ea <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80032e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80032e4:	fab3 f383 	clz	r3, r3
 80032e8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d106      	bne.n	80032fc <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2200      	movs	r2, #0
 80032f4:	2101      	movs	r1, #1
 80032f6:	4618      	mov	r0, r3
 80032f8:	f7fe ffcc 	bl	8002294 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2102      	movs	r1, #2
 8003302:	4618      	mov	r0, r3
 8003304:	f7fe ffb0 	bl	8002268 <LL_ADC_GetOffsetChannel>
 8003308:	4603      	mov	r3, r0
 800330a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800330e:	2b00      	cmp	r3, #0
 8003310:	d10a      	bne.n	8003328 <HAL_ADC_ConfigChannel+0x2e8>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2102      	movs	r1, #2
 8003318:	4618      	mov	r0, r3
 800331a:	f7fe ffa5 	bl	8002268 <LL_ADC_GetOffsetChannel>
 800331e:	4603      	mov	r3, r0
 8003320:	0e9b      	lsrs	r3, r3, #26
 8003322:	f003 021f 	and.w	r2, r3, #31
 8003326:	e01e      	b.n	8003366 <HAL_ADC_ConfigChannel+0x326>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2102      	movs	r1, #2
 800332e:	4618      	mov	r0, r3
 8003330:	f7fe ff9a 	bl	8002268 <LL_ADC_GetOffsetChannel>
 8003334:	4603      	mov	r3, r0
 8003336:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800333a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800333e:	fa93 f3a3 	rbit	r3, r3
 8003342:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003346:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800334a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800334e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003352:	2b00      	cmp	r3, #0
 8003354:	d101      	bne.n	800335a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003356:	2320      	movs	r3, #32
 8003358:	e004      	b.n	8003364 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800335a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800335e:	fab3 f383 	clz	r3, r3
 8003362:	b2db      	uxtb	r3, r3
 8003364:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800336e:	2b00      	cmp	r3, #0
 8003370:	d105      	bne.n	800337e <HAL_ADC_ConfigChannel+0x33e>
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	0e9b      	lsrs	r3, r3, #26
 8003378:	f003 031f 	and.w	r3, r3, #31
 800337c:	e016      	b.n	80033ac <HAL_ADC_ConfigChannel+0x36c>
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003386:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800338a:	fa93 f3a3 	rbit	r3, r3
 800338e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003390:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003392:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003396:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800339e:	2320      	movs	r3, #32
 80033a0:	e004      	b.n	80033ac <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80033a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80033a6:	fab3 f383 	clz	r3, r3
 80033aa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d106      	bne.n	80033be <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2200      	movs	r2, #0
 80033b6:	2102      	movs	r1, #2
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7fe ff6b 	bl	8002294 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2103      	movs	r1, #3
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7fe ff4f 	bl	8002268 <LL_ADC_GetOffsetChannel>
 80033ca:	4603      	mov	r3, r0
 80033cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d10a      	bne.n	80033ea <HAL_ADC_ConfigChannel+0x3aa>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2103      	movs	r1, #3
 80033da:	4618      	mov	r0, r3
 80033dc:	f7fe ff44 	bl	8002268 <LL_ADC_GetOffsetChannel>
 80033e0:	4603      	mov	r3, r0
 80033e2:	0e9b      	lsrs	r3, r3, #26
 80033e4:	f003 021f 	and.w	r2, r3, #31
 80033e8:	e017      	b.n	800341a <HAL_ADC_ConfigChannel+0x3da>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2103      	movs	r1, #3
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7fe ff39 	bl	8002268 <LL_ADC_GetOffsetChannel>
 80033f6:	4603      	mov	r3, r0
 80033f8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033fc:	fa93 f3a3 	rbit	r3, r3
 8003400:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003402:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003404:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003406:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003408:	2b00      	cmp	r3, #0
 800340a:	d101      	bne.n	8003410 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800340c:	2320      	movs	r3, #32
 800340e:	e003      	b.n	8003418 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003410:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003412:	fab3 f383 	clz	r3, r3
 8003416:	b2db      	uxtb	r3, r3
 8003418:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003422:	2b00      	cmp	r3, #0
 8003424:	d105      	bne.n	8003432 <HAL_ADC_ConfigChannel+0x3f2>
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	0e9b      	lsrs	r3, r3, #26
 800342c:	f003 031f 	and.w	r3, r3, #31
 8003430:	e011      	b.n	8003456 <HAL_ADC_ConfigChannel+0x416>
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003438:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800343a:	fa93 f3a3 	rbit	r3, r3
 800343e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003440:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003442:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003444:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800344a:	2320      	movs	r3, #32
 800344c:	e003      	b.n	8003456 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800344e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003450:	fab3 f383 	clz	r3, r3
 8003454:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003456:	429a      	cmp	r2, r3
 8003458:	d106      	bne.n	8003468 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2200      	movs	r2, #0
 8003460:	2103      	movs	r1, #3
 8003462:	4618      	mov	r0, r3
 8003464:	f7fe ff16 	bl	8002294 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4618      	mov	r0, r3
 800346e:	f7ff f895 	bl	800259c <LL_ADC_IsEnabled>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	f040 813d 	bne.w	80036f4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6818      	ldr	r0, [r3, #0]
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	6819      	ldr	r1, [r3, #0]
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	461a      	mov	r2, r3
 8003488:	f7fe ffe6 	bl	8002458 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	4aa2      	ldr	r2, [pc, #648]	@ (800371c <HAL_ADC_ConfigChannel+0x6dc>)
 8003492:	4293      	cmp	r3, r2
 8003494:	f040 812e 	bne.w	80036f4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d10b      	bne.n	80034c0 <HAL_ADC_ConfigChannel+0x480>
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	0e9b      	lsrs	r3, r3, #26
 80034ae:	3301      	adds	r3, #1
 80034b0:	f003 031f 	and.w	r3, r3, #31
 80034b4:	2b09      	cmp	r3, #9
 80034b6:	bf94      	ite	ls
 80034b8:	2301      	movls	r3, #1
 80034ba:	2300      	movhi	r3, #0
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	e019      	b.n	80034f4 <HAL_ADC_ConfigChannel+0x4b4>
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034c8:	fa93 f3a3 	rbit	r3, r3
 80034cc:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80034ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80034d0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80034d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d101      	bne.n	80034dc <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80034d8:	2320      	movs	r3, #32
 80034da:	e003      	b.n	80034e4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80034dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80034de:	fab3 f383 	clz	r3, r3
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	3301      	adds	r3, #1
 80034e6:	f003 031f 	and.w	r3, r3, #31
 80034ea:	2b09      	cmp	r3, #9
 80034ec:	bf94      	ite	ls
 80034ee:	2301      	movls	r3, #1
 80034f0:	2300      	movhi	r3, #0
 80034f2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d079      	beq.n	80035ec <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003500:	2b00      	cmp	r3, #0
 8003502:	d107      	bne.n	8003514 <HAL_ADC_ConfigChannel+0x4d4>
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	0e9b      	lsrs	r3, r3, #26
 800350a:	3301      	adds	r3, #1
 800350c:	069b      	lsls	r3, r3, #26
 800350e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003512:	e015      	b.n	8003540 <HAL_ADC_ConfigChannel+0x500>
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800351a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800351c:	fa93 f3a3 	rbit	r3, r3
 8003520:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003522:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003524:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003526:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003528:	2b00      	cmp	r3, #0
 800352a:	d101      	bne.n	8003530 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800352c:	2320      	movs	r3, #32
 800352e:	e003      	b.n	8003538 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003530:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003532:	fab3 f383 	clz	r3, r3
 8003536:	b2db      	uxtb	r3, r3
 8003538:	3301      	adds	r3, #1
 800353a:	069b      	lsls	r3, r3, #26
 800353c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003548:	2b00      	cmp	r3, #0
 800354a:	d109      	bne.n	8003560 <HAL_ADC_ConfigChannel+0x520>
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	0e9b      	lsrs	r3, r3, #26
 8003552:	3301      	adds	r3, #1
 8003554:	f003 031f 	and.w	r3, r3, #31
 8003558:	2101      	movs	r1, #1
 800355a:	fa01 f303 	lsl.w	r3, r1, r3
 800355e:	e017      	b.n	8003590 <HAL_ADC_ConfigChannel+0x550>
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003566:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003568:	fa93 f3a3 	rbit	r3, r3
 800356c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800356e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003570:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003572:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003574:	2b00      	cmp	r3, #0
 8003576:	d101      	bne.n	800357c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003578:	2320      	movs	r3, #32
 800357a:	e003      	b.n	8003584 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800357c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800357e:	fab3 f383 	clz	r3, r3
 8003582:	b2db      	uxtb	r3, r3
 8003584:	3301      	adds	r3, #1
 8003586:	f003 031f 	and.w	r3, r3, #31
 800358a:	2101      	movs	r1, #1
 800358c:	fa01 f303 	lsl.w	r3, r1, r3
 8003590:	ea42 0103 	orr.w	r1, r2, r3
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800359c:	2b00      	cmp	r3, #0
 800359e:	d10a      	bne.n	80035b6 <HAL_ADC_ConfigChannel+0x576>
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	0e9b      	lsrs	r3, r3, #26
 80035a6:	3301      	adds	r3, #1
 80035a8:	f003 021f 	and.w	r2, r3, #31
 80035ac:	4613      	mov	r3, r2
 80035ae:	005b      	lsls	r3, r3, #1
 80035b0:	4413      	add	r3, r2
 80035b2:	051b      	lsls	r3, r3, #20
 80035b4:	e018      	b.n	80035e8 <HAL_ADC_ConfigChannel+0x5a8>
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035be:	fa93 f3a3 	rbit	r3, r3
 80035c2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80035c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80035c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80035ce:	2320      	movs	r3, #32
 80035d0:	e003      	b.n	80035da <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80035d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035d4:	fab3 f383 	clz	r3, r3
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	3301      	adds	r3, #1
 80035dc:	f003 021f 	and.w	r2, r3, #31
 80035e0:	4613      	mov	r3, r2
 80035e2:	005b      	lsls	r3, r3, #1
 80035e4:	4413      	add	r3, r2
 80035e6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035e8:	430b      	orrs	r3, r1
 80035ea:	e07e      	b.n	80036ea <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d107      	bne.n	8003608 <HAL_ADC_ConfigChannel+0x5c8>
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	0e9b      	lsrs	r3, r3, #26
 80035fe:	3301      	adds	r3, #1
 8003600:	069b      	lsls	r3, r3, #26
 8003602:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003606:	e015      	b.n	8003634 <HAL_ADC_ConfigChannel+0x5f4>
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800360e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003610:	fa93 f3a3 	rbit	r3, r3
 8003614:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003618:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800361a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800361c:	2b00      	cmp	r3, #0
 800361e:	d101      	bne.n	8003624 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003620:	2320      	movs	r3, #32
 8003622:	e003      	b.n	800362c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003626:	fab3 f383 	clz	r3, r3
 800362a:	b2db      	uxtb	r3, r3
 800362c:	3301      	adds	r3, #1
 800362e:	069b      	lsls	r3, r3, #26
 8003630:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800363c:	2b00      	cmp	r3, #0
 800363e:	d109      	bne.n	8003654 <HAL_ADC_ConfigChannel+0x614>
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	0e9b      	lsrs	r3, r3, #26
 8003646:	3301      	adds	r3, #1
 8003648:	f003 031f 	and.w	r3, r3, #31
 800364c:	2101      	movs	r1, #1
 800364e:	fa01 f303 	lsl.w	r3, r1, r3
 8003652:	e017      	b.n	8003684 <HAL_ADC_ConfigChannel+0x644>
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800365a:	6a3b      	ldr	r3, [r7, #32]
 800365c:	fa93 f3a3 	rbit	r3, r3
 8003660:	61fb      	str	r3, [r7, #28]
  return result;
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003668:	2b00      	cmp	r3, #0
 800366a:	d101      	bne.n	8003670 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800366c:	2320      	movs	r3, #32
 800366e:	e003      	b.n	8003678 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003672:	fab3 f383 	clz	r3, r3
 8003676:	b2db      	uxtb	r3, r3
 8003678:	3301      	adds	r3, #1
 800367a:	f003 031f 	and.w	r3, r3, #31
 800367e:	2101      	movs	r1, #1
 8003680:	fa01 f303 	lsl.w	r3, r1, r3
 8003684:	ea42 0103 	orr.w	r1, r2, r3
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003690:	2b00      	cmp	r3, #0
 8003692:	d10d      	bne.n	80036b0 <HAL_ADC_ConfigChannel+0x670>
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	0e9b      	lsrs	r3, r3, #26
 800369a:	3301      	adds	r3, #1
 800369c:	f003 021f 	and.w	r2, r3, #31
 80036a0:	4613      	mov	r3, r2
 80036a2:	005b      	lsls	r3, r3, #1
 80036a4:	4413      	add	r3, r2
 80036a6:	3b1e      	subs	r3, #30
 80036a8:	051b      	lsls	r3, r3, #20
 80036aa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80036ae:	e01b      	b.n	80036e8 <HAL_ADC_ConfigChannel+0x6a8>
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	fa93 f3a3 	rbit	r3, r3
 80036bc:	613b      	str	r3, [r7, #16]
  return result;
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d101      	bne.n	80036cc <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80036c8:	2320      	movs	r3, #32
 80036ca:	e003      	b.n	80036d4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	fab3 f383 	clz	r3, r3
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	3301      	adds	r3, #1
 80036d6:	f003 021f 	and.w	r2, r3, #31
 80036da:	4613      	mov	r3, r2
 80036dc:	005b      	lsls	r3, r3, #1
 80036de:	4413      	add	r3, r2
 80036e0:	3b1e      	subs	r3, #30
 80036e2:	051b      	lsls	r3, r3, #20
 80036e4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036e8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80036ea:	683a      	ldr	r2, [r7, #0]
 80036ec:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036ee:	4619      	mov	r1, r3
 80036f0:	f7fe fe86 	bl	8002400 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	4b09      	ldr	r3, [pc, #36]	@ (8003720 <HAL_ADC_ConfigChannel+0x6e0>)
 80036fa:	4013      	ands	r3, r2
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	f000 80be 	beq.w	800387e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800370a:	d004      	beq.n	8003716 <HAL_ADC_ConfigChannel+0x6d6>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a04      	ldr	r2, [pc, #16]	@ (8003724 <HAL_ADC_ConfigChannel+0x6e4>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d10a      	bne.n	800372c <HAL_ADC_ConfigChannel+0x6ec>
 8003716:	4b04      	ldr	r3, [pc, #16]	@ (8003728 <HAL_ADC_ConfigChannel+0x6e8>)
 8003718:	e009      	b.n	800372e <HAL_ADC_ConfigChannel+0x6ee>
 800371a:	bf00      	nop
 800371c:	407f0000 	.word	0x407f0000
 8003720:	80080000 	.word	0x80080000
 8003724:	50000100 	.word	0x50000100
 8003728:	50000300 	.word	0x50000300
 800372c:	4b59      	ldr	r3, [pc, #356]	@ (8003894 <HAL_ADC_ConfigChannel+0x854>)
 800372e:	4618      	mov	r0, r3
 8003730:	f7fe fd68 	bl	8002204 <LL_ADC_GetCommonPathInternalCh>
 8003734:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a56      	ldr	r2, [pc, #344]	@ (8003898 <HAL_ADC_ConfigChannel+0x858>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d004      	beq.n	800374c <HAL_ADC_ConfigChannel+0x70c>
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a55      	ldr	r2, [pc, #340]	@ (800389c <HAL_ADC_ConfigChannel+0x85c>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d13a      	bne.n	80037c2 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800374c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003750:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d134      	bne.n	80037c2 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003760:	d005      	beq.n	800376e <HAL_ADC_ConfigChannel+0x72e>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a4e      	ldr	r2, [pc, #312]	@ (80038a0 <HAL_ADC_ConfigChannel+0x860>)
 8003768:	4293      	cmp	r3, r2
 800376a:	f040 8085 	bne.w	8003878 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003776:	d004      	beq.n	8003782 <HAL_ADC_ConfigChannel+0x742>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a49      	ldr	r2, [pc, #292]	@ (80038a4 <HAL_ADC_ConfigChannel+0x864>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d101      	bne.n	8003786 <HAL_ADC_ConfigChannel+0x746>
 8003782:	4a49      	ldr	r2, [pc, #292]	@ (80038a8 <HAL_ADC_ConfigChannel+0x868>)
 8003784:	e000      	b.n	8003788 <HAL_ADC_ConfigChannel+0x748>
 8003786:	4a43      	ldr	r2, [pc, #268]	@ (8003894 <HAL_ADC_ConfigChannel+0x854>)
 8003788:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800378c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003790:	4619      	mov	r1, r3
 8003792:	4610      	mov	r0, r2
 8003794:	f7fe fd23 	bl	80021de <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003798:	4b44      	ldr	r3, [pc, #272]	@ (80038ac <HAL_ADC_ConfigChannel+0x86c>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	099b      	lsrs	r3, r3, #6
 800379e:	4a44      	ldr	r2, [pc, #272]	@ (80038b0 <HAL_ADC_ConfigChannel+0x870>)
 80037a0:	fba2 2303 	umull	r2, r3, r2, r3
 80037a4:	099b      	lsrs	r3, r3, #6
 80037a6:	1c5a      	adds	r2, r3, #1
 80037a8:	4613      	mov	r3, r2
 80037aa:	005b      	lsls	r3, r3, #1
 80037ac:	4413      	add	r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80037b2:	e002      	b.n	80037ba <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	3b01      	subs	r3, #1
 80037b8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d1f9      	bne.n	80037b4 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80037c0:	e05a      	b.n	8003878 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a3b      	ldr	r2, [pc, #236]	@ (80038b4 <HAL_ADC_ConfigChannel+0x874>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d125      	bne.n	8003818 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80037cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80037d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d11f      	bne.n	8003818 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a31      	ldr	r2, [pc, #196]	@ (80038a4 <HAL_ADC_ConfigChannel+0x864>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d104      	bne.n	80037ec <HAL_ADC_ConfigChannel+0x7ac>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a34      	ldr	r2, [pc, #208]	@ (80038b8 <HAL_ADC_ConfigChannel+0x878>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d047      	beq.n	800387c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037f4:	d004      	beq.n	8003800 <HAL_ADC_ConfigChannel+0x7c0>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a2a      	ldr	r2, [pc, #168]	@ (80038a4 <HAL_ADC_ConfigChannel+0x864>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d101      	bne.n	8003804 <HAL_ADC_ConfigChannel+0x7c4>
 8003800:	4a29      	ldr	r2, [pc, #164]	@ (80038a8 <HAL_ADC_ConfigChannel+0x868>)
 8003802:	e000      	b.n	8003806 <HAL_ADC_ConfigChannel+0x7c6>
 8003804:	4a23      	ldr	r2, [pc, #140]	@ (8003894 <HAL_ADC_ConfigChannel+0x854>)
 8003806:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800380a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800380e:	4619      	mov	r1, r3
 8003810:	4610      	mov	r0, r2
 8003812:	f7fe fce4 	bl	80021de <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003816:	e031      	b.n	800387c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a27      	ldr	r2, [pc, #156]	@ (80038bc <HAL_ADC_ConfigChannel+0x87c>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d12d      	bne.n	800387e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003822:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003826:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d127      	bne.n	800387e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a1c      	ldr	r2, [pc, #112]	@ (80038a4 <HAL_ADC_ConfigChannel+0x864>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d022      	beq.n	800387e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003840:	d004      	beq.n	800384c <HAL_ADC_ConfigChannel+0x80c>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a17      	ldr	r2, [pc, #92]	@ (80038a4 <HAL_ADC_ConfigChannel+0x864>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d101      	bne.n	8003850 <HAL_ADC_ConfigChannel+0x810>
 800384c:	4a16      	ldr	r2, [pc, #88]	@ (80038a8 <HAL_ADC_ConfigChannel+0x868>)
 800384e:	e000      	b.n	8003852 <HAL_ADC_ConfigChannel+0x812>
 8003850:	4a10      	ldr	r2, [pc, #64]	@ (8003894 <HAL_ADC_ConfigChannel+0x854>)
 8003852:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003856:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800385a:	4619      	mov	r1, r3
 800385c:	4610      	mov	r0, r2
 800385e:	f7fe fcbe 	bl	80021de <LL_ADC_SetCommonPathInternalCh>
 8003862:	e00c      	b.n	800387e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003868:	f043 0220 	orr.w	r2, r3, #32
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003876:	e002      	b.n	800387e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003878:	bf00      	nop
 800387a:	e000      	b.n	800387e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800387c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003886:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800388a:	4618      	mov	r0, r3
 800388c:	37d8      	adds	r7, #216	@ 0xd8
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	50000700 	.word	0x50000700
 8003898:	c3210000 	.word	0xc3210000
 800389c:	90c00010 	.word	0x90c00010
 80038a0:	50000600 	.word	0x50000600
 80038a4:	50000100 	.word	0x50000100
 80038a8:	50000300 	.word	0x50000300
 80038ac:	20000000 	.word	0x20000000
 80038b0:	053e2d63 	.word	0x053e2d63
 80038b4:	c7520000 	.word	0xc7520000
 80038b8:	50000500 	.word	0x50000500
 80038bc:	cb840000 	.word	0xcb840000

080038c0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80038c8:	2300      	movs	r3, #0
 80038ca:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7fe fe63 	bl	800259c <LL_ADC_IsEnabled>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d176      	bne.n	80039ca <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	689a      	ldr	r2, [r3, #8]
 80038e2:	4b3c      	ldr	r3, [pc, #240]	@ (80039d4 <ADC_Enable+0x114>)
 80038e4:	4013      	ands	r3, r2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00d      	beq.n	8003906 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ee:	f043 0210 	orr.w	r2, r3, #16
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038fa:	f043 0201 	orr.w	r2, r3, #1
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e062      	b.n	80039cc <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4618      	mov	r0, r3
 800390c:	f7fe fe32 	bl	8002574 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003918:	d004      	beq.n	8003924 <ADC_Enable+0x64>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a2e      	ldr	r2, [pc, #184]	@ (80039d8 <ADC_Enable+0x118>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d101      	bne.n	8003928 <ADC_Enable+0x68>
 8003924:	4b2d      	ldr	r3, [pc, #180]	@ (80039dc <ADC_Enable+0x11c>)
 8003926:	e000      	b.n	800392a <ADC_Enable+0x6a>
 8003928:	4b2d      	ldr	r3, [pc, #180]	@ (80039e0 <ADC_Enable+0x120>)
 800392a:	4618      	mov	r0, r3
 800392c:	f7fe fc6a 	bl	8002204 <LL_ADC_GetCommonPathInternalCh>
 8003930:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003932:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003936:	2b00      	cmp	r3, #0
 8003938:	d013      	beq.n	8003962 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800393a:	4b2a      	ldr	r3, [pc, #168]	@ (80039e4 <ADC_Enable+0x124>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	099b      	lsrs	r3, r3, #6
 8003940:	4a29      	ldr	r2, [pc, #164]	@ (80039e8 <ADC_Enable+0x128>)
 8003942:	fba2 2303 	umull	r2, r3, r2, r3
 8003946:	099b      	lsrs	r3, r3, #6
 8003948:	1c5a      	adds	r2, r3, #1
 800394a:	4613      	mov	r3, r2
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	4413      	add	r3, r2
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003954:	e002      	b.n	800395c <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	3b01      	subs	r3, #1
 800395a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1f9      	bne.n	8003956 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003962:	f7fe fb9b 	bl	800209c <HAL_GetTick>
 8003966:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003968:	e028      	b.n	80039bc <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4618      	mov	r0, r3
 8003970:	f7fe fe14 	bl	800259c <LL_ADC_IsEnabled>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d104      	bne.n	8003984 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4618      	mov	r0, r3
 8003980:	f7fe fdf8 	bl	8002574 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003984:	f7fe fb8a 	bl	800209c <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b02      	cmp	r3, #2
 8003990:	d914      	bls.n	80039bc <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0301 	and.w	r3, r3, #1
 800399c:	2b01      	cmp	r3, #1
 800399e:	d00d      	beq.n	80039bc <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039a4:	f043 0210 	orr.w	r2, r3, #16
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039b0:	f043 0201 	orr.w	r2, r3, #1
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e007      	b.n	80039cc <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0301 	and.w	r3, r3, #1
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d1cf      	bne.n	800396a <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3710      	adds	r7, #16
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	8000003f 	.word	0x8000003f
 80039d8:	50000100 	.word	0x50000100
 80039dc:	50000300 	.word	0x50000300
 80039e0:	50000700 	.word	0x50000700
 80039e4:	20000000 	.word	0x20000000
 80039e8:	053e2d63 	.word	0x053e2d63

080039ec <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039f8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039fe:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d14b      	bne.n	8003a9e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a0a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0308 	and.w	r3, r3, #8
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d021      	beq.n	8003a64 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4618      	mov	r0, r3
 8003a26:	f7fe fc99 	bl	800235c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d032      	beq.n	8003a96 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d12b      	bne.n	8003a96 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a42:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a4e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d11f      	bne.n	8003a96 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a5a:	f043 0201 	orr.w	r2, r3, #1
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003a62:	e018      	b.n	8003a96 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d111      	bne.n	8003a96 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a76:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a82:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d105      	bne.n	8003a96 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a8e:	f043 0201 	orr.w	r2, r3, #1
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003a96:	68f8      	ldr	r0, [r7, #12]
 8003a98:	f7fd fab6 	bl	8001008 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003a9c:	e00e      	b.n	8003abc <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aa2:	f003 0310 	and.w	r3, r3, #16
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d003      	beq.n	8003ab2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003aaa:	68f8      	ldr	r0, [r7, #12]
 8003aac:	f7ff fabe 	bl	800302c <HAL_ADC_ErrorCallback>
}
 8003ab0:	e004      	b.n	8003abc <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ab6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	4798      	blx	r3
}
 8003abc:	bf00      	nop
 8003abe:	3710      	adds	r7, #16
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ad0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003ad2:	68f8      	ldr	r0, [r7, #12]
 8003ad4:	f7fd fa6e 	bl	8000fb4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003ad8:	bf00      	nop
 8003ada:	3710      	adds	r7, #16
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aec:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003af2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003afe:	f043 0204 	orr.w	r2, r3, #4
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003b06:	68f8      	ldr	r0, [r7, #12]
 8003b08:	f7ff fa90 	bl	800302c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003b0c:	bf00      	nop
 8003b0e:	3710      	adds	r7, #16
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <LL_ADC_IsEnabled>:
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f003 0301 	and.w	r3, r3, #1
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d101      	bne.n	8003b2c <LL_ADC_IsEnabled+0x18>
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e000      	b.n	8003b2e <LL_ADC_IsEnabled+0x1a>
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	370c      	adds	r7, #12
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr

08003b3a <LL_ADC_REG_IsConversionOngoing>:
{
 8003b3a:	b480      	push	{r7}
 8003b3c:	b083      	sub	sp, #12
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f003 0304 	and.w	r3, r3, #4
 8003b4a:	2b04      	cmp	r3, #4
 8003b4c:	d101      	bne.n	8003b52 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e000      	b.n	8003b54 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003b68:	bf00      	nop
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003b7c:	bf00      	nop
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003b90:	bf00      	nop
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003bc4:	b590      	push	{r4, r7, lr}
 8003bc6:	b0a1      	sub	sp, #132	@ 0x84
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d101      	bne.n	8003be2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003bde:	2302      	movs	r3, #2
 8003be0:	e0e7      	b.n	8003db2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2201      	movs	r2, #1
 8003be6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003bea:	2300      	movs	r3, #0
 8003bec:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003bee:	2300      	movs	r3, #0
 8003bf0:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003bfa:	d102      	bne.n	8003c02 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003bfc:	4b6f      	ldr	r3, [pc, #444]	@ (8003dbc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003bfe:	60bb      	str	r3, [r7, #8]
 8003c00:	e009      	b.n	8003c16 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a6e      	ldr	r2, [pc, #440]	@ (8003dc0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d102      	bne.n	8003c12 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003c0c:	4b6d      	ldr	r3, [pc, #436]	@ (8003dc4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003c0e:	60bb      	str	r3, [r7, #8]
 8003c10:	e001      	b.n	8003c16 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003c12:	2300      	movs	r3, #0
 8003c14:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d10b      	bne.n	8003c34 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c20:	f043 0220 	orr.w	r2, r3, #32
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e0be      	b.n	8003db2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7ff ff7f 	bl	8003b3a <LL_ADC_REG_IsConversionOngoing>
 8003c3c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7ff ff79 	bl	8003b3a <LL_ADC_REG_IsConversionOngoing>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	f040 80a0 	bne.w	8003d90 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003c50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	f040 809c 	bne.w	8003d90 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c60:	d004      	beq.n	8003c6c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a55      	ldr	r2, [pc, #340]	@ (8003dbc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d101      	bne.n	8003c70 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003c6c:	4b56      	ldr	r3, [pc, #344]	@ (8003dc8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003c6e:	e000      	b.n	8003c72 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003c70:	4b56      	ldr	r3, [pc, #344]	@ (8003dcc <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003c72:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d04b      	beq.n	8003d14 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003c7c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	6859      	ldr	r1, [r3, #4]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003c8e:	035b      	lsls	r3, r3, #13
 8003c90:	430b      	orrs	r3, r1
 8003c92:	431a      	orrs	r2, r3
 8003c94:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c96:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ca0:	d004      	beq.n	8003cac <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a45      	ldr	r2, [pc, #276]	@ (8003dbc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d10f      	bne.n	8003ccc <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003cac:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003cb0:	f7ff ff30 	bl	8003b14 <LL_ADC_IsEnabled>
 8003cb4:	4604      	mov	r4, r0
 8003cb6:	4841      	ldr	r0, [pc, #260]	@ (8003dbc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003cb8:	f7ff ff2c 	bl	8003b14 <LL_ADC_IsEnabled>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	4323      	orrs	r3, r4
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	bf0c      	ite	eq
 8003cc4:	2301      	moveq	r3, #1
 8003cc6:	2300      	movne	r3, #0
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	e012      	b.n	8003cf2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003ccc:	483c      	ldr	r0, [pc, #240]	@ (8003dc0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003cce:	f7ff ff21 	bl	8003b14 <LL_ADC_IsEnabled>
 8003cd2:	4604      	mov	r4, r0
 8003cd4:	483b      	ldr	r0, [pc, #236]	@ (8003dc4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003cd6:	f7ff ff1d 	bl	8003b14 <LL_ADC_IsEnabled>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	431c      	orrs	r4, r3
 8003cde:	483c      	ldr	r0, [pc, #240]	@ (8003dd0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003ce0:	f7ff ff18 	bl	8003b14 <LL_ADC_IsEnabled>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	4323      	orrs	r3, r4
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	bf0c      	ite	eq
 8003cec:	2301      	moveq	r3, #1
 8003cee:	2300      	movne	r3, #0
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d056      	beq.n	8003da4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003cf6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003cfe:	f023 030f 	bic.w	r3, r3, #15
 8003d02:	683a      	ldr	r2, [r7, #0]
 8003d04:	6811      	ldr	r1, [r2, #0]
 8003d06:	683a      	ldr	r2, [r7, #0]
 8003d08:	6892      	ldr	r2, [r2, #8]
 8003d0a:	430a      	orrs	r2, r1
 8003d0c:	431a      	orrs	r2, r3
 8003d0e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d10:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003d12:	e047      	b.n	8003da4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003d14:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003d1c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d1e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d28:	d004      	beq.n	8003d34 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a23      	ldr	r2, [pc, #140]	@ (8003dbc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d10f      	bne.n	8003d54 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003d34:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003d38:	f7ff feec 	bl	8003b14 <LL_ADC_IsEnabled>
 8003d3c:	4604      	mov	r4, r0
 8003d3e:	481f      	ldr	r0, [pc, #124]	@ (8003dbc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003d40:	f7ff fee8 	bl	8003b14 <LL_ADC_IsEnabled>
 8003d44:	4603      	mov	r3, r0
 8003d46:	4323      	orrs	r3, r4
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	bf0c      	ite	eq
 8003d4c:	2301      	moveq	r3, #1
 8003d4e:	2300      	movne	r3, #0
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	e012      	b.n	8003d7a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003d54:	481a      	ldr	r0, [pc, #104]	@ (8003dc0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003d56:	f7ff fedd 	bl	8003b14 <LL_ADC_IsEnabled>
 8003d5a:	4604      	mov	r4, r0
 8003d5c:	4819      	ldr	r0, [pc, #100]	@ (8003dc4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003d5e:	f7ff fed9 	bl	8003b14 <LL_ADC_IsEnabled>
 8003d62:	4603      	mov	r3, r0
 8003d64:	431c      	orrs	r4, r3
 8003d66:	481a      	ldr	r0, [pc, #104]	@ (8003dd0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003d68:	f7ff fed4 	bl	8003b14 <LL_ADC_IsEnabled>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	4323      	orrs	r3, r4
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	bf0c      	ite	eq
 8003d74:	2301      	moveq	r3, #1
 8003d76:	2300      	movne	r3, #0
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d012      	beq.n	8003da4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003d7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003d86:	f023 030f 	bic.w	r3, r3, #15
 8003d8a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003d8c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003d8e:	e009      	b.n	8003da4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d94:	f043 0220 	orr.w	r2, r3, #32
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003da2:	e000      	b.n	8003da6 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003da4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003dae:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3784      	adds	r7, #132	@ 0x84
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd90      	pop	{r4, r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	50000100 	.word	0x50000100
 8003dc0:	50000400 	.word	0x50000400
 8003dc4:	50000500 	.word	0x50000500
 8003dc8:	50000300 	.word	0x50000300
 8003dcc:	50000700 	.word	0x50000700
 8003dd0:	50000600 	.word	0x50000600

08003dd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b085      	sub	sp, #20
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f003 0307 	and.w	r3, r3, #7
 8003de2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003de4:	4b0c      	ldr	r3, [pc, #48]	@ (8003e18 <__NVIC_SetPriorityGrouping+0x44>)
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dea:	68ba      	ldr	r2, [r7, #8]
 8003dec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003df0:	4013      	ands	r3, r2
 8003df2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003dfc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003e00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e06:	4a04      	ldr	r2, [pc, #16]	@ (8003e18 <__NVIC_SetPriorityGrouping+0x44>)
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	60d3      	str	r3, [r2, #12]
}
 8003e0c:	bf00      	nop
 8003e0e:	3714      	adds	r7, #20
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr
 8003e18:	e000ed00 	.word	0xe000ed00

08003e1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e20:	4b04      	ldr	r3, [pc, #16]	@ (8003e34 <__NVIC_GetPriorityGrouping+0x18>)
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	0a1b      	lsrs	r3, r3, #8
 8003e26:	f003 0307 	and.w	r3, r3, #7
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr
 8003e34:	e000ed00 	.word	0xe000ed00

08003e38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	4603      	mov	r3, r0
 8003e40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	db0b      	blt.n	8003e62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e4a:	79fb      	ldrb	r3, [r7, #7]
 8003e4c:	f003 021f 	and.w	r2, r3, #31
 8003e50:	4907      	ldr	r1, [pc, #28]	@ (8003e70 <__NVIC_EnableIRQ+0x38>)
 8003e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e56:	095b      	lsrs	r3, r3, #5
 8003e58:	2001      	movs	r0, #1
 8003e5a:	fa00 f202 	lsl.w	r2, r0, r2
 8003e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003e62:	bf00      	nop
 8003e64:	370c      	adds	r7, #12
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	e000e100 	.word	0xe000e100

08003e74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	6039      	str	r1, [r7, #0]
 8003e7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	db0a      	blt.n	8003e9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	b2da      	uxtb	r2, r3
 8003e8c:	490c      	ldr	r1, [pc, #48]	@ (8003ec0 <__NVIC_SetPriority+0x4c>)
 8003e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e92:	0112      	lsls	r2, r2, #4
 8003e94:	b2d2      	uxtb	r2, r2
 8003e96:	440b      	add	r3, r1
 8003e98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e9c:	e00a      	b.n	8003eb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	b2da      	uxtb	r2, r3
 8003ea2:	4908      	ldr	r1, [pc, #32]	@ (8003ec4 <__NVIC_SetPriority+0x50>)
 8003ea4:	79fb      	ldrb	r3, [r7, #7]
 8003ea6:	f003 030f 	and.w	r3, r3, #15
 8003eaa:	3b04      	subs	r3, #4
 8003eac:	0112      	lsls	r2, r2, #4
 8003eae:	b2d2      	uxtb	r2, r2
 8003eb0:	440b      	add	r3, r1
 8003eb2:	761a      	strb	r2, [r3, #24]
}
 8003eb4:	bf00      	nop
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr
 8003ec0:	e000e100 	.word	0xe000e100
 8003ec4:	e000ed00 	.word	0xe000ed00

08003ec8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b089      	sub	sp, #36	@ 0x24
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f003 0307 	and.w	r3, r3, #7
 8003eda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	f1c3 0307 	rsb	r3, r3, #7
 8003ee2:	2b04      	cmp	r3, #4
 8003ee4:	bf28      	it	cs
 8003ee6:	2304      	movcs	r3, #4
 8003ee8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	3304      	adds	r3, #4
 8003eee:	2b06      	cmp	r3, #6
 8003ef0:	d902      	bls.n	8003ef8 <NVIC_EncodePriority+0x30>
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	3b03      	subs	r3, #3
 8003ef6:	e000      	b.n	8003efa <NVIC_EncodePriority+0x32>
 8003ef8:	2300      	movs	r3, #0
 8003efa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003efc:	f04f 32ff 	mov.w	r2, #4294967295
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	fa02 f303 	lsl.w	r3, r2, r3
 8003f06:	43da      	mvns	r2, r3
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	401a      	ands	r2, r3
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f10:	f04f 31ff 	mov.w	r1, #4294967295
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	fa01 f303 	lsl.w	r3, r1, r3
 8003f1a:	43d9      	mvns	r1, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f20:	4313      	orrs	r3, r2
         );
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3724      	adds	r7, #36	@ 0x24
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
	...

08003f30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f40:	d301      	bcc.n	8003f46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f42:	2301      	movs	r3, #1
 8003f44:	e00f      	b.n	8003f66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f46:	4a0a      	ldr	r2, [pc, #40]	@ (8003f70 <SysTick_Config+0x40>)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	3b01      	subs	r3, #1
 8003f4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f4e:	210f      	movs	r1, #15
 8003f50:	f04f 30ff 	mov.w	r0, #4294967295
 8003f54:	f7ff ff8e 	bl	8003e74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f58:	4b05      	ldr	r3, [pc, #20]	@ (8003f70 <SysTick_Config+0x40>)
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f5e:	4b04      	ldr	r3, [pc, #16]	@ (8003f70 <SysTick_Config+0x40>)
 8003f60:	2207      	movs	r2, #7
 8003f62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3708      	adds	r7, #8
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	e000e010 	.word	0xe000e010

08003f74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f7ff ff29 	bl	8003dd4 <__NVIC_SetPriorityGrouping>
}
 8003f82:	bf00      	nop
 8003f84:	3708      	adds	r7, #8
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f8a:	b580      	push	{r7, lr}
 8003f8c:	b086      	sub	sp, #24
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	4603      	mov	r3, r0
 8003f92:	60b9      	str	r1, [r7, #8]
 8003f94:	607a      	str	r2, [r7, #4]
 8003f96:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f98:	f7ff ff40 	bl	8003e1c <__NVIC_GetPriorityGrouping>
 8003f9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	68b9      	ldr	r1, [r7, #8]
 8003fa2:	6978      	ldr	r0, [r7, #20]
 8003fa4:	f7ff ff90 	bl	8003ec8 <NVIC_EncodePriority>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fae:	4611      	mov	r1, r2
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7ff ff5f 	bl	8003e74 <__NVIC_SetPriority>
}
 8003fb6:	bf00      	nop
 8003fb8:	3718      	adds	r7, #24
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	b082      	sub	sp, #8
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f7ff ff33 	bl	8003e38 <__NVIC_EnableIRQ>
}
 8003fd2:	bf00      	nop
 8003fd4:	3708      	adds	r7, #8
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}

08003fda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003fda:	b580      	push	{r7, lr}
 8003fdc:	b082      	sub	sp, #8
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f7ff ffa4 	bl	8003f30 <SysTick_Config>
 8003fe8:	4603      	mov	r3, r0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3708      	adds	r7, #8
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
	...

08003ff4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d101      	bne.n	8004006 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e08d      	b.n	8004122 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	461a      	mov	r2, r3
 800400c:	4b47      	ldr	r3, [pc, #284]	@ (800412c <HAL_DMA_Init+0x138>)
 800400e:	429a      	cmp	r2, r3
 8004010:	d80f      	bhi.n	8004032 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	461a      	mov	r2, r3
 8004018:	4b45      	ldr	r3, [pc, #276]	@ (8004130 <HAL_DMA_Init+0x13c>)
 800401a:	4413      	add	r3, r2
 800401c:	4a45      	ldr	r2, [pc, #276]	@ (8004134 <HAL_DMA_Init+0x140>)
 800401e:	fba2 2303 	umull	r2, r3, r2, r3
 8004022:	091b      	lsrs	r3, r3, #4
 8004024:	009a      	lsls	r2, r3, #2
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a42      	ldr	r2, [pc, #264]	@ (8004138 <HAL_DMA_Init+0x144>)
 800402e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004030:	e00e      	b.n	8004050 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	461a      	mov	r2, r3
 8004038:	4b40      	ldr	r3, [pc, #256]	@ (800413c <HAL_DMA_Init+0x148>)
 800403a:	4413      	add	r3, r2
 800403c:	4a3d      	ldr	r2, [pc, #244]	@ (8004134 <HAL_DMA_Init+0x140>)
 800403e:	fba2 2303 	umull	r2, r3, r2, r3
 8004042:	091b      	lsrs	r3, r3, #4
 8004044:	009a      	lsls	r2, r3, #2
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a3c      	ldr	r2, [pc, #240]	@ (8004140 <HAL_DMA_Init+0x14c>)
 800404e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2202      	movs	r2, #2
 8004054:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004066:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800406a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004074:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004080:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	699b      	ldr	r3, [r3, #24]
 8004086:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800408c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a1b      	ldr	r3, [r3, #32]
 8004092:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	4313      	orrs	r3, r2
 8004098:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68fa      	ldr	r2, [r7, #12]
 80040a0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 f9b6 	bl	8004414 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040b0:	d102      	bne.n	80040b8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685a      	ldr	r2, [r3, #4]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040c0:	b2d2      	uxtb	r2, r2
 80040c2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80040cc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d010      	beq.n	80040f8 <HAL_DMA_Init+0x104>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	2b04      	cmp	r3, #4
 80040dc:	d80c      	bhi.n	80040f8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 f9d6 	bl	8004490 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040e8:	2200      	movs	r2, #0
 80040ea:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80040f4:	605a      	str	r2, [r3, #4]
 80040f6:	e008      	b.n	800410a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3710      	adds	r7, #16
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	40020407 	.word	0x40020407
 8004130:	bffdfff8 	.word	0xbffdfff8
 8004134:	cccccccd 	.word	0xcccccccd
 8004138:	40020000 	.word	0x40020000
 800413c:	bffdfbf8 	.word	0xbffdfbf8
 8004140:	40020400 	.word	0x40020400

08004144 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	607a      	str	r2, [r7, #4]
 8004150:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004152:	2300      	movs	r3, #0
 8004154:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800415c:	2b01      	cmp	r3, #1
 800415e:	d101      	bne.n	8004164 <HAL_DMA_Start_IT+0x20>
 8004160:	2302      	movs	r3, #2
 8004162:	e066      	b.n	8004232 <HAL_DMA_Start_IT+0xee>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004172:	b2db      	uxtb	r3, r3
 8004174:	2b01      	cmp	r3, #1
 8004176:	d155      	bne.n	8004224 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2202      	movs	r2, #2
 800417c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2200      	movs	r2, #0
 8004184:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f022 0201 	bic.w	r2, r2, #1
 8004194:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	68b9      	ldr	r1, [r7, #8]
 800419c:	68f8      	ldr	r0, [r7, #12]
 800419e:	f000 f8fb 	bl	8004398 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d008      	beq.n	80041bc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f042 020e 	orr.w	r2, r2, #14
 80041b8:	601a      	str	r2, [r3, #0]
 80041ba:	e00f      	b.n	80041dc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f022 0204 	bic.w	r2, r2, #4
 80041ca:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f042 020a 	orr.w	r2, r2, #10
 80041da:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d007      	beq.n	80041fa <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041f8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d007      	beq.n	8004212 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800420c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004210:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f042 0201 	orr.w	r2, r2, #1
 8004220:	601a      	str	r2, [r3, #0]
 8004222:	e005      	b.n	8004230 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800422c:	2302      	movs	r3, #2
 800422e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004230:	7dfb      	ldrb	r3, [r7, #23]
}
 8004232:	4618      	mov	r0, r3
 8004234:	3718      	adds	r7, #24
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}

0800423a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800423a:	b580      	push	{r7, lr}
 800423c:	b084      	sub	sp, #16
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004256:	f003 031f 	and.w	r3, r3, #31
 800425a:	2204      	movs	r2, #4
 800425c:	409a      	lsls	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	4013      	ands	r3, r2
 8004262:	2b00      	cmp	r3, #0
 8004264:	d026      	beq.n	80042b4 <HAL_DMA_IRQHandler+0x7a>
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	f003 0304 	and.w	r3, r3, #4
 800426c:	2b00      	cmp	r3, #0
 800426e:	d021      	beq.n	80042b4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0320 	and.w	r3, r3, #32
 800427a:	2b00      	cmp	r3, #0
 800427c:	d107      	bne.n	800428e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f022 0204 	bic.w	r2, r2, #4
 800428c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004292:	f003 021f 	and.w	r2, r3, #31
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800429a:	2104      	movs	r1, #4
 800429c:	fa01 f202 	lsl.w	r2, r1, r2
 80042a0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d071      	beq.n	800438e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80042b2:	e06c      	b.n	800438e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042b8:	f003 031f 	and.w	r3, r3, #31
 80042bc:	2202      	movs	r2, #2
 80042be:	409a      	lsls	r2, r3
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	4013      	ands	r3, r2
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d02e      	beq.n	8004326 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d029      	beq.n	8004326 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0320 	and.w	r3, r3, #32
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d10b      	bne.n	80042f8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f022 020a 	bic.w	r2, r2, #10
 80042ee:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042fc:	f003 021f 	and.w	r2, r3, #31
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004304:	2102      	movs	r1, #2
 8004306:	fa01 f202 	lsl.w	r2, r1, r2
 800430a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004318:	2b00      	cmp	r3, #0
 800431a:	d038      	beq.n	800438e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004324:	e033      	b.n	800438e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800432a:	f003 031f 	and.w	r3, r3, #31
 800432e:	2208      	movs	r2, #8
 8004330:	409a      	lsls	r2, r3
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	4013      	ands	r3, r2
 8004336:	2b00      	cmp	r3, #0
 8004338:	d02a      	beq.n	8004390 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	f003 0308 	and.w	r3, r3, #8
 8004340:	2b00      	cmp	r3, #0
 8004342:	d025      	beq.n	8004390 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f022 020e 	bic.w	r2, r2, #14
 8004352:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004358:	f003 021f 	and.w	r2, r3, #31
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004360:	2101      	movs	r1, #1
 8004362:	fa01 f202 	lsl.w	r2, r1, r2
 8004366:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2201      	movs	r2, #1
 8004372:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004382:	2b00      	cmp	r3, #0
 8004384:	d004      	beq.n	8004390 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800438e:	bf00      	nop
 8004390:	bf00      	nop
}
 8004392:	3710      	adds	r7, #16
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004398:	b480      	push	{r7}
 800439a:	b085      	sub	sp, #20
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
 80043a4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043aa:	68fa      	ldr	r2, [r7, #12]
 80043ac:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80043ae:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d004      	beq.n	80043c2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80043c0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043c6:	f003 021f 	and.w	r2, r3, #31
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ce:	2101      	movs	r1, #1
 80043d0:	fa01 f202 	lsl.w	r2, r1, r2
 80043d4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	683a      	ldr	r2, [r7, #0]
 80043dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	2b10      	cmp	r3, #16
 80043e4:	d108      	bne.n	80043f8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68ba      	ldr	r2, [r7, #8]
 80043f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80043f6:	e007      	b.n	8004408 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68ba      	ldr	r2, [r7, #8]
 80043fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	60da      	str	r2, [r3, #12]
}
 8004408:	bf00      	nop
 800440a:	3714      	adds	r7, #20
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004414:	b480      	push	{r7}
 8004416:	b087      	sub	sp, #28
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	461a      	mov	r2, r3
 8004422:	4b16      	ldr	r3, [pc, #88]	@ (800447c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004424:	429a      	cmp	r2, r3
 8004426:	d802      	bhi.n	800442e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004428:	4b15      	ldr	r3, [pc, #84]	@ (8004480 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800442a:	617b      	str	r3, [r7, #20]
 800442c:	e001      	b.n	8004432 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800442e:	4b15      	ldr	r3, [pc, #84]	@ (8004484 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004430:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	b2db      	uxtb	r3, r3
 800443c:	3b08      	subs	r3, #8
 800443e:	4a12      	ldr	r2, [pc, #72]	@ (8004488 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004440:	fba2 2303 	umull	r2, r3, r2, r3
 8004444:	091b      	lsrs	r3, r3, #4
 8004446:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800444c:	089b      	lsrs	r3, r3, #2
 800444e:	009a      	lsls	r2, r3, #2
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	4413      	add	r3, r2
 8004454:	461a      	mov	r2, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a0b      	ldr	r2, [pc, #44]	@ (800448c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800445e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f003 031f 	and.w	r3, r3, #31
 8004466:	2201      	movs	r2, #1
 8004468:	409a      	lsls	r2, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800446e:	bf00      	nop
 8004470:	371c      	adds	r7, #28
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	40020407 	.word	0x40020407
 8004480:	40020800 	.word	0x40020800
 8004484:	40020820 	.word	0x40020820
 8004488:	cccccccd 	.word	0xcccccccd
 800448c:	40020880 	.word	0x40020880

08004490 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004490:	b480      	push	{r7}
 8004492:	b085      	sub	sp, #20
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	b2db      	uxtb	r3, r3
 800449e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	4b0b      	ldr	r3, [pc, #44]	@ (80044d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80044a4:	4413      	add	r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	461a      	mov	r2, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a08      	ldr	r2, [pc, #32]	@ (80044d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80044b2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	3b01      	subs	r3, #1
 80044b8:	f003 031f 	and.w	r3, r3, #31
 80044bc:	2201      	movs	r2, #1
 80044be:	409a      	lsls	r2, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80044c4:	bf00      	nop
 80044c6:	3714      	adds	r7, #20
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr
 80044d0:	1000823f 	.word	0x1000823f
 80044d4:	40020940 	.word	0x40020940

080044d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044d8:	b480      	push	{r7}
 80044da:	b087      	sub	sp, #28
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80044e2:	2300      	movs	r3, #0
 80044e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80044e6:	e15a      	b.n	800479e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	2101      	movs	r1, #1
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	fa01 f303 	lsl.w	r3, r1, r3
 80044f4:	4013      	ands	r3, r2
 80044f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	f000 814c 	beq.w	8004798 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f003 0303 	and.w	r3, r3, #3
 8004508:	2b01      	cmp	r3, #1
 800450a:	d005      	beq.n	8004518 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004514:	2b02      	cmp	r3, #2
 8004516:	d130      	bne.n	800457a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	005b      	lsls	r3, r3, #1
 8004522:	2203      	movs	r2, #3
 8004524:	fa02 f303 	lsl.w	r3, r2, r3
 8004528:	43db      	mvns	r3, r3
 800452a:	693a      	ldr	r2, [r7, #16]
 800452c:	4013      	ands	r3, r2
 800452e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	68da      	ldr	r2, [r3, #12]
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	005b      	lsls	r3, r3, #1
 8004538:	fa02 f303 	lsl.w	r3, r2, r3
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	4313      	orrs	r3, r2
 8004540:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	693a      	ldr	r2, [r7, #16]
 8004546:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800454e:	2201      	movs	r2, #1
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	fa02 f303 	lsl.w	r3, r2, r3
 8004556:	43db      	mvns	r3, r3
 8004558:	693a      	ldr	r2, [r7, #16]
 800455a:	4013      	ands	r3, r2
 800455c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	091b      	lsrs	r3, r3, #4
 8004564:	f003 0201 	and.w	r2, r3, #1
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	fa02 f303 	lsl.w	r3, r2, r3
 800456e:	693a      	ldr	r2, [r7, #16]
 8004570:	4313      	orrs	r3, r2
 8004572:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	693a      	ldr	r2, [r7, #16]
 8004578:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	f003 0303 	and.w	r3, r3, #3
 8004582:	2b03      	cmp	r3, #3
 8004584:	d017      	beq.n	80045b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	005b      	lsls	r3, r3, #1
 8004590:	2203      	movs	r2, #3
 8004592:	fa02 f303 	lsl.w	r3, r2, r3
 8004596:	43db      	mvns	r3, r3
 8004598:	693a      	ldr	r2, [r7, #16]
 800459a:	4013      	ands	r3, r2
 800459c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	689a      	ldr	r2, [r3, #8]
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	005b      	lsls	r3, r3, #1
 80045a6:	fa02 f303 	lsl.w	r3, r2, r3
 80045aa:	693a      	ldr	r2, [r7, #16]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	693a      	ldr	r2, [r7, #16]
 80045b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f003 0303 	and.w	r3, r3, #3
 80045be:	2b02      	cmp	r3, #2
 80045c0:	d123      	bne.n	800460a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	08da      	lsrs	r2, r3, #3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	3208      	adds	r2, #8
 80045ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	f003 0307 	and.w	r3, r3, #7
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	220f      	movs	r2, #15
 80045da:	fa02 f303 	lsl.w	r3, r2, r3
 80045de:	43db      	mvns	r3, r3
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	4013      	ands	r3, r2
 80045e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	691a      	ldr	r2, [r3, #16]
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	f003 0307 	and.w	r3, r3, #7
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	fa02 f303 	lsl.w	r3, r2, r3
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	08da      	lsrs	r2, r3, #3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	3208      	adds	r2, #8
 8004604:	6939      	ldr	r1, [r7, #16]
 8004606:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	005b      	lsls	r3, r3, #1
 8004614:	2203      	movs	r2, #3
 8004616:	fa02 f303 	lsl.w	r3, r2, r3
 800461a:	43db      	mvns	r3, r3
 800461c:	693a      	ldr	r2, [r7, #16]
 800461e:	4013      	ands	r3, r2
 8004620:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f003 0203 	and.w	r2, r3, #3
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	005b      	lsls	r3, r3, #1
 800462e:	fa02 f303 	lsl.w	r3, r2, r3
 8004632:	693a      	ldr	r2, [r7, #16]
 8004634:	4313      	orrs	r3, r2
 8004636:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004646:	2b00      	cmp	r3, #0
 8004648:	f000 80a6 	beq.w	8004798 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800464c:	4b5b      	ldr	r3, [pc, #364]	@ (80047bc <HAL_GPIO_Init+0x2e4>)
 800464e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004650:	4a5a      	ldr	r2, [pc, #360]	@ (80047bc <HAL_GPIO_Init+0x2e4>)
 8004652:	f043 0301 	orr.w	r3, r3, #1
 8004656:	6613      	str	r3, [r2, #96]	@ 0x60
 8004658:	4b58      	ldr	r3, [pc, #352]	@ (80047bc <HAL_GPIO_Init+0x2e4>)
 800465a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800465c:	f003 0301 	and.w	r3, r3, #1
 8004660:	60bb      	str	r3, [r7, #8]
 8004662:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004664:	4a56      	ldr	r2, [pc, #344]	@ (80047c0 <HAL_GPIO_Init+0x2e8>)
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	089b      	lsrs	r3, r3, #2
 800466a:	3302      	adds	r3, #2
 800466c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004670:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	f003 0303 	and.w	r3, r3, #3
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	220f      	movs	r2, #15
 800467c:	fa02 f303 	lsl.w	r3, r2, r3
 8004680:	43db      	mvns	r3, r3
 8004682:	693a      	ldr	r2, [r7, #16]
 8004684:	4013      	ands	r3, r2
 8004686:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800468e:	d01f      	beq.n	80046d0 <HAL_GPIO_Init+0x1f8>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a4c      	ldr	r2, [pc, #304]	@ (80047c4 <HAL_GPIO_Init+0x2ec>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d019      	beq.n	80046cc <HAL_GPIO_Init+0x1f4>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4a4b      	ldr	r2, [pc, #300]	@ (80047c8 <HAL_GPIO_Init+0x2f0>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d013      	beq.n	80046c8 <HAL_GPIO_Init+0x1f0>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a4a      	ldr	r2, [pc, #296]	@ (80047cc <HAL_GPIO_Init+0x2f4>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d00d      	beq.n	80046c4 <HAL_GPIO_Init+0x1ec>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a49      	ldr	r2, [pc, #292]	@ (80047d0 <HAL_GPIO_Init+0x2f8>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d007      	beq.n	80046c0 <HAL_GPIO_Init+0x1e8>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a48      	ldr	r2, [pc, #288]	@ (80047d4 <HAL_GPIO_Init+0x2fc>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d101      	bne.n	80046bc <HAL_GPIO_Init+0x1e4>
 80046b8:	2305      	movs	r3, #5
 80046ba:	e00a      	b.n	80046d2 <HAL_GPIO_Init+0x1fa>
 80046bc:	2306      	movs	r3, #6
 80046be:	e008      	b.n	80046d2 <HAL_GPIO_Init+0x1fa>
 80046c0:	2304      	movs	r3, #4
 80046c2:	e006      	b.n	80046d2 <HAL_GPIO_Init+0x1fa>
 80046c4:	2303      	movs	r3, #3
 80046c6:	e004      	b.n	80046d2 <HAL_GPIO_Init+0x1fa>
 80046c8:	2302      	movs	r3, #2
 80046ca:	e002      	b.n	80046d2 <HAL_GPIO_Init+0x1fa>
 80046cc:	2301      	movs	r3, #1
 80046ce:	e000      	b.n	80046d2 <HAL_GPIO_Init+0x1fa>
 80046d0:	2300      	movs	r3, #0
 80046d2:	697a      	ldr	r2, [r7, #20]
 80046d4:	f002 0203 	and.w	r2, r2, #3
 80046d8:	0092      	lsls	r2, r2, #2
 80046da:	4093      	lsls	r3, r2
 80046dc:	693a      	ldr	r2, [r7, #16]
 80046de:	4313      	orrs	r3, r2
 80046e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80046e2:	4937      	ldr	r1, [pc, #220]	@ (80047c0 <HAL_GPIO_Init+0x2e8>)
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	089b      	lsrs	r3, r3, #2
 80046e8:	3302      	adds	r3, #2
 80046ea:	693a      	ldr	r2, [r7, #16]
 80046ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80046f0:	4b39      	ldr	r3, [pc, #228]	@ (80047d8 <HAL_GPIO_Init+0x300>)
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	43db      	mvns	r3, r3
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	4013      	ands	r3, r2
 80046fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d003      	beq.n	8004714 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800470c:	693a      	ldr	r2, [r7, #16]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	4313      	orrs	r3, r2
 8004712:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004714:	4a30      	ldr	r2, [pc, #192]	@ (80047d8 <HAL_GPIO_Init+0x300>)
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800471a:	4b2f      	ldr	r3, [pc, #188]	@ (80047d8 <HAL_GPIO_Init+0x300>)
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	43db      	mvns	r3, r3
 8004724:	693a      	ldr	r2, [r7, #16]
 8004726:	4013      	ands	r3, r2
 8004728:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d003      	beq.n	800473e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004736:	693a      	ldr	r2, [r7, #16]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	4313      	orrs	r3, r2
 800473c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800473e:	4a26      	ldr	r2, [pc, #152]	@ (80047d8 <HAL_GPIO_Init+0x300>)
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004744:	4b24      	ldr	r3, [pc, #144]	@ (80047d8 <HAL_GPIO_Init+0x300>)
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	43db      	mvns	r3, r3
 800474e:	693a      	ldr	r2, [r7, #16]
 8004750:	4013      	ands	r3, r2
 8004752:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d003      	beq.n	8004768 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004760:	693a      	ldr	r2, [r7, #16]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	4313      	orrs	r3, r2
 8004766:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004768:	4a1b      	ldr	r2, [pc, #108]	@ (80047d8 <HAL_GPIO_Init+0x300>)
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800476e:	4b1a      	ldr	r3, [pc, #104]	@ (80047d8 <HAL_GPIO_Init+0x300>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	43db      	mvns	r3, r3
 8004778:	693a      	ldr	r2, [r7, #16]
 800477a:	4013      	ands	r3, r2
 800477c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d003      	beq.n	8004792 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800478a:	693a      	ldr	r2, [r7, #16]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	4313      	orrs	r3, r2
 8004790:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004792:	4a11      	ldr	r2, [pc, #68]	@ (80047d8 <HAL_GPIO_Init+0x300>)
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	3301      	adds	r3, #1
 800479c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	fa22 f303 	lsr.w	r3, r2, r3
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	f47f ae9d 	bne.w	80044e8 <HAL_GPIO_Init+0x10>
  }
}
 80047ae:	bf00      	nop
 80047b0:	bf00      	nop
 80047b2:	371c      	adds	r7, #28
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr
 80047bc:	40021000 	.word	0x40021000
 80047c0:	40010000 	.word	0x40010000
 80047c4:	48000400 	.word	0x48000400
 80047c8:	48000800 	.word	0x48000800
 80047cc:	48000c00 	.word	0x48000c00
 80047d0:	48001000 	.word	0x48001000
 80047d4:	48001400 	.word	0x48001400
 80047d8:	40010400 	.word	0x40010400

080047dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	460b      	mov	r3, r1
 80047e6:	807b      	strh	r3, [r7, #2]
 80047e8:	4613      	mov	r3, r2
 80047ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80047ec:	787b      	ldrb	r3, [r7, #1]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d003      	beq.n	80047fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80047f2:	887a      	ldrh	r2, [r7, #2]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80047f8:	e002      	b.n	8004800 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80047fa:	887a      	ldrh	r2, [r7, #2]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004800:	bf00      	nop
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b082      	sub	sp, #8
 8004810:	af00      	add	r7, sp, #0
 8004812:	4603      	mov	r3, r0
 8004814:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004816:	4b08      	ldr	r3, [pc, #32]	@ (8004838 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004818:	695a      	ldr	r2, [r3, #20]
 800481a:	88fb      	ldrh	r3, [r7, #6]
 800481c:	4013      	ands	r3, r2
 800481e:	2b00      	cmp	r3, #0
 8004820:	d006      	beq.n	8004830 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004822:	4a05      	ldr	r2, [pc, #20]	@ (8004838 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004824:	88fb      	ldrh	r3, [r7, #6]
 8004826:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004828:	88fb      	ldrh	r3, [r7, #6]
 800482a:	4618      	mov	r0, r3
 800482c:	f000 f806 	bl	800483c <HAL_GPIO_EXTI_Callback>
  }
}
 8004830:	bf00      	nop
 8004832:	3708      	adds	r7, #8
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	40010400 	.word	0x40010400

0800483c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	4603      	mov	r3, r0
 8004844:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004846:	bf00      	nop
 8004848:	370c      	adds	r7, #12
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr
	...

08004854 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800485c:	2300      	movs	r3, #0
 800485e:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d101      	bne.n	800486a <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e0bb      	b.n	80049e2 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8004870:	b2db      	uxtb	r3, r3
 8004872:	2b05      	cmp	r3, #5
 8004874:	d101      	bne.n	800487a <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e0b3      	b.n	80049e2 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8004880:	b2db      	uxtb	r3, r3
 8004882:	2b02      	cmp	r3, #2
 8004884:	d101      	bne.n	800488a <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e0ab      	b.n	80049e2 <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800488a:	4b58      	ldr	r3, [pc, #352]	@ (80049ec <HAL_OPAMP_Init+0x198>)
 800488c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800488e:	4a57      	ldr	r2, [pc, #348]	@ (80049ec <HAL_OPAMP_Init+0x198>)
 8004890:	f043 0301 	orr.w	r3, r3, #1
 8004894:	6613      	str	r3, [r2, #96]	@ 0x60
 8004896:	4b55      	ldr	r3, [pc, #340]	@ (80049ec <HAL_OPAMP_Init+0x198>)
 8004898:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800489a:	f003 0301 	and.w	r3, r3, #1
 800489e:	60bb      	str	r3, [r7, #8]
 80048a0:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d103      	bne.n	80048b6 <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f7fc fd98 	bl	80013ec <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	2b40      	cmp	r3, #64	@ 0x40
 80048c2:	d003      	beq.n	80048cc <HAL_OPAMP_Init+0x78>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	2b60      	cmp	r3, #96	@ 0x60
 80048ca:	d133      	bne.n	8004934 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f023 0110 	bic.w	r1, r3, #16
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	430a      	orrs	r2, r1
 80048e0:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	4b41      	ldr	r3, [pc, #260]	@ (80049f0 <HAL_OPAMP_Init+0x19c>)
 80048ea:	4013      	ands	r3, r2
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	6851      	ldr	r1, [r2, #4]
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	6892      	ldr	r2, [r2, #8]
 80048f4:	4311      	orrs	r1, r2
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	6912      	ldr	r2, [r2, #16]
 80048fa:	430a      	orrs	r2, r1
 80048fc:	6879      	ldr	r1, [r7, #4]
 80048fe:	7d09      	ldrb	r1, [r1, #20]
 8004900:	2901      	cmp	r1, #1
 8004902:	d102      	bne.n	800490a <HAL_OPAMP_Init+0xb6>
 8004904:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004908:	e000      	b.n	800490c <HAL_OPAMP_Init+0xb8>
 800490a:	2100      	movs	r1, #0
 800490c:	4311      	orrs	r1, r2
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004912:	4311      	orrs	r1, r2
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004918:	4311      	orrs	r1, r2
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800491e:	04d2      	lsls	r2, r2, #19
 8004920:	4311      	orrs	r1, r2
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004926:	0612      	lsls	r2, r2, #24
 8004928:	4311      	orrs	r1, r2
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	6812      	ldr	r2, [r2, #0]
 800492e:	430b      	orrs	r3, r1
 8004930:	6013      	str	r3, [r2, #0]
 8004932:	e035      	b.n	80049a0 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f023 0110 	bic.w	r1, r3, #16
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	430a      	orrs	r2, r1
 8004948:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	4b27      	ldr	r3, [pc, #156]	@ (80049f0 <HAL_OPAMP_Init+0x19c>)
 8004952:	4013      	ands	r3, r2
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	6851      	ldr	r1, [r2, #4]
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	6892      	ldr	r2, [r2, #8]
 800495c:	4311      	orrs	r1, r2
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	68d2      	ldr	r2, [r2, #12]
 8004962:	4311      	orrs	r1, r2
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	6912      	ldr	r2, [r2, #16]
 8004968:	430a      	orrs	r2, r1
 800496a:	6879      	ldr	r1, [r7, #4]
 800496c:	7d09      	ldrb	r1, [r1, #20]
 800496e:	2901      	cmp	r1, #1
 8004970:	d102      	bne.n	8004978 <HAL_OPAMP_Init+0x124>
 8004972:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004976:	e000      	b.n	800497a <HAL_OPAMP_Init+0x126>
 8004978:	2100      	movs	r1, #0
 800497a:	4311      	orrs	r1, r2
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004980:	4311      	orrs	r1, r2
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004986:	4311      	orrs	r1, r2
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800498c:	04d2      	lsls	r2, r2, #19
 800498e:	4311      	orrs	r1, r2
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004994:	0612      	lsls	r2, r2, #24
 8004996:	4311      	orrs	r1, r2
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	6812      	ldr	r2, [r2, #0]
 800499c:	430b      	orrs	r3, r1
 800499e:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	db10      	blt.n	80049cc <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	699b      	ldr	r3, [r3, #24]
 80049b0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	699a      	ldr	r2, [r3, #24]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	69db      	ldr	r3, [r3, #28]
 80049bc:	431a      	orrs	r2, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a1b      	ldr	r3, [r3, #32]
 80049c2:	431a      	orrs	r2, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	430a      	orrs	r2, r1
 80049ca:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d103      	bne.n	80049e0 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 80049e0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3710      	adds	r7, #16
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	40021000 	.word	0x40021000
 80049f0:	e0003e11 	.word	0xe0003e11

080049f4 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b085      	sub	sp, #20
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049fc:	2300      	movs	r3, #0
 80049fe:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d102      	bne.n	8004a0c <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	73fb      	strb	r3, [r7, #15]
 8004a0a:	e01d      	b.n	8004a48 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	2b05      	cmp	r3, #5
 8004a16:	d102      	bne.n	8004a1e <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	73fb      	strb	r3, [r7, #15]
 8004a1c:	e014      	b.n	8004a48 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d10c      	bne.n	8004a44 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f042 0201 	orr.w	r2, r2, #1
 8004a38:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2204      	movs	r2, #4
 8004a3e:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8004a42:	e001      	b.n	8004a48 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 8004a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3714      	adds	r7, #20
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr

08004a56 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004a56:	b580      	push	{r7, lr}
 8004a58:	b084      	sub	sp, #16
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d101      	bne.n	8004a68 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e0c0      	b.n	8004bea <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d106      	bne.n	8004a82 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f009 fd1d 	bl	800e4bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2203      	movs	r2, #3
 8004a86:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f005 fb67 	bl	800a162 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a94:	2300      	movs	r3, #0
 8004a96:	73fb      	strb	r3, [r7, #15]
 8004a98:	e03e      	b.n	8004b18 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004a9a:	7bfa      	ldrb	r2, [r7, #15]
 8004a9c:	6879      	ldr	r1, [r7, #4]
 8004a9e:	4613      	mov	r3, r2
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	4413      	add	r3, r2
 8004aa4:	00db      	lsls	r3, r3, #3
 8004aa6:	440b      	add	r3, r1
 8004aa8:	3311      	adds	r3, #17
 8004aaa:	2201      	movs	r2, #1
 8004aac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004aae:	7bfa      	ldrb	r2, [r7, #15]
 8004ab0:	6879      	ldr	r1, [r7, #4]
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	4413      	add	r3, r2
 8004ab8:	00db      	lsls	r3, r3, #3
 8004aba:	440b      	add	r3, r1
 8004abc:	3310      	adds	r3, #16
 8004abe:	7bfa      	ldrb	r2, [r7, #15]
 8004ac0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004ac2:	7bfa      	ldrb	r2, [r7, #15]
 8004ac4:	6879      	ldr	r1, [r7, #4]
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	4413      	add	r3, r2
 8004acc:	00db      	lsls	r3, r3, #3
 8004ace:	440b      	add	r3, r1
 8004ad0:	3313      	adds	r3, #19
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004ad6:	7bfa      	ldrb	r2, [r7, #15]
 8004ad8:	6879      	ldr	r1, [r7, #4]
 8004ada:	4613      	mov	r3, r2
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	4413      	add	r3, r2
 8004ae0:	00db      	lsls	r3, r3, #3
 8004ae2:	440b      	add	r3, r1
 8004ae4:	3320      	adds	r3, #32
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004aea:	7bfa      	ldrb	r2, [r7, #15]
 8004aec:	6879      	ldr	r1, [r7, #4]
 8004aee:	4613      	mov	r3, r2
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	4413      	add	r3, r2
 8004af4:	00db      	lsls	r3, r3, #3
 8004af6:	440b      	add	r3, r1
 8004af8:	3324      	adds	r3, #36	@ 0x24
 8004afa:	2200      	movs	r2, #0
 8004afc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004afe:	7bfb      	ldrb	r3, [r7, #15]
 8004b00:	6879      	ldr	r1, [r7, #4]
 8004b02:	1c5a      	adds	r2, r3, #1
 8004b04:	4613      	mov	r3, r2
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	4413      	add	r3, r2
 8004b0a:	00db      	lsls	r3, r3, #3
 8004b0c:	440b      	add	r3, r1
 8004b0e:	2200      	movs	r2, #0
 8004b10:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b12:	7bfb      	ldrb	r3, [r7, #15]
 8004b14:	3301      	adds	r3, #1
 8004b16:	73fb      	strb	r3, [r7, #15]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	791b      	ldrb	r3, [r3, #4]
 8004b1c:	7bfa      	ldrb	r2, [r7, #15]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d3bb      	bcc.n	8004a9a <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b22:	2300      	movs	r3, #0
 8004b24:	73fb      	strb	r3, [r7, #15]
 8004b26:	e044      	b.n	8004bb2 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004b28:	7bfa      	ldrb	r2, [r7, #15]
 8004b2a:	6879      	ldr	r1, [r7, #4]
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	4413      	add	r3, r2
 8004b32:	00db      	lsls	r3, r3, #3
 8004b34:	440b      	add	r3, r1
 8004b36:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004b3e:	7bfa      	ldrb	r2, [r7, #15]
 8004b40:	6879      	ldr	r1, [r7, #4]
 8004b42:	4613      	mov	r3, r2
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	4413      	add	r3, r2
 8004b48:	00db      	lsls	r3, r3, #3
 8004b4a:	440b      	add	r3, r1
 8004b4c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004b50:	7bfa      	ldrb	r2, [r7, #15]
 8004b52:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004b54:	7bfa      	ldrb	r2, [r7, #15]
 8004b56:	6879      	ldr	r1, [r7, #4]
 8004b58:	4613      	mov	r3, r2
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	4413      	add	r3, r2
 8004b5e:	00db      	lsls	r3, r3, #3
 8004b60:	440b      	add	r3, r1
 8004b62:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8004b66:	2200      	movs	r2, #0
 8004b68:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004b6a:	7bfa      	ldrb	r2, [r7, #15]
 8004b6c:	6879      	ldr	r1, [r7, #4]
 8004b6e:	4613      	mov	r3, r2
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	4413      	add	r3, r2
 8004b74:	00db      	lsls	r3, r3, #3
 8004b76:	440b      	add	r3, r1
 8004b78:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004b80:	7bfa      	ldrb	r2, [r7, #15]
 8004b82:	6879      	ldr	r1, [r7, #4]
 8004b84:	4613      	mov	r3, r2
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	4413      	add	r3, r2
 8004b8a:	00db      	lsls	r3, r3, #3
 8004b8c:	440b      	add	r3, r1
 8004b8e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004b92:	2200      	movs	r2, #0
 8004b94:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004b96:	7bfa      	ldrb	r2, [r7, #15]
 8004b98:	6879      	ldr	r1, [r7, #4]
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	4413      	add	r3, r2
 8004ba0:	00db      	lsls	r3, r3, #3
 8004ba2:	440b      	add	r3, r1
 8004ba4:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004ba8:	2200      	movs	r2, #0
 8004baa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004bac:	7bfb      	ldrb	r3, [r7, #15]
 8004bae:	3301      	adds	r3, #1
 8004bb0:	73fb      	strb	r3, [r7, #15]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	791b      	ldrb	r3, [r3, #4]
 8004bb6:	7bfa      	ldrb	r2, [r7, #15]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d3b5      	bcc.n	8004b28 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6818      	ldr	r0, [r3, #0]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	3304      	adds	r3, #4
 8004bc4:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004bc8:	f005 fae6 	bl	800a198 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	7a9b      	ldrb	r3, [r3, #10]
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d102      	bne.n	8004be8 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f001 fc40 	bl	8006468 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3710      	adds	r7, #16
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}

08004bf2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004bf2:	b580      	push	{r7, lr}
 8004bf4:	b082      	sub	sp, #8
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d101      	bne.n	8004c08 <HAL_PCD_Start+0x16>
 8004c04:	2302      	movs	r3, #2
 8004c06:	e012      	b.n	8004c2e <HAL_PCD_Start+0x3c>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4618      	mov	r0, r3
 8004c16:	f005 fa8d 	bl	800a134 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f007 fd4d 	bl	800c6be <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3708      	adds	r7, #8
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}

08004c36 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004c36:	b580      	push	{r7, lr}
 8004c38:	b084      	sub	sp, #16
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4618      	mov	r0, r3
 8004c44:	f007 fd52 	bl	800c6ec <USB_ReadInterrupts>
 8004c48:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d003      	beq.n	8004c5c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f000 fb04 	bl	8005262 <PCD_EP_ISR_Handler>

    return;
 8004c5a:	e110      	b.n	8004e7e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d013      	beq.n	8004c8e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c78:	b292      	uxth	r2, r2
 8004c7a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f009 fcad 	bl	800e5de <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004c84:	2100      	movs	r1, #0
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 f8fc 	bl	8004e84 <HAL_PCD_SetAddress>

    return;
 8004c8c:	e0f7      	b.n	8004e7e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d00c      	beq.n	8004cb2 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004ca0:	b29a      	uxth	r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004caa:	b292      	uxth	r2, r2
 8004cac:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004cb0:	e0e5      	b.n	8004e7e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d00c      	beq.n	8004cd6 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004cc4:	b29a      	uxth	r2, r3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004cce:	b292      	uxth	r2, r2
 8004cd0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004cd4:	e0d3      	b.n	8004e7e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d034      	beq.n	8004d4a <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004ce8:	b29a      	uxth	r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f022 0204 	bic.w	r2, r2, #4
 8004cf2:	b292      	uxth	r2, r2
 8004cf4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f022 0208 	bic.w	r2, r2, #8
 8004d0a:	b292      	uxth	r2, r2
 8004d0c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d107      	bne.n	8004d2a <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004d22:	2100      	movs	r1, #0
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f009 fe4d 	bl	800e9c4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f009 fc90 	bl	800e650 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004d38:	b29a      	uxth	r2, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004d42:	b292      	uxth	r2, r2
 8004d44:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004d48:	e099      	b.n	8004e7e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d027      	beq.n	8004da4 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004d5c:	b29a      	uxth	r2, r3
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f042 0208 	orr.w	r2, r2, #8
 8004d66:	b292      	uxth	r2, r2
 8004d68:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004d74:	b29a      	uxth	r2, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d7e:	b292      	uxth	r2, r2
 8004d80:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004d8c:	b29a      	uxth	r2, r3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f042 0204 	orr.w	r2, r2, #4
 8004d96:	b292      	uxth	r2, r2
 8004d98:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f009 fc3d 	bl	800e61c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004da2:	e06c      	b.n	8004e7e <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d040      	beq.n	8004e30 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004db6:	b29a      	uxth	r2, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004dc0:	b292      	uxth	r2, r2
 8004dc2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d12b      	bne.n	8004e28 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004dd8:	b29a      	uxth	r2, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f042 0204 	orr.w	r2, r2, #4
 8004de2:	b292      	uxth	r2, r2
 8004de4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004df0:	b29a      	uxth	r2, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f042 0208 	orr.w	r2, r2, #8
 8004dfa:	b292      	uxth	r2, r2
 8004dfc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	089b      	lsrs	r3, r3, #2
 8004e14:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004e1e:	2101      	movs	r1, #1
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f009 fdcf 	bl	800e9c4 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8004e26:	e02a      	b.n	8004e7e <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f009 fbf7 	bl	800e61c <HAL_PCD_SuspendCallback>
    return;
 8004e2e:	e026      	b.n	8004e7e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00f      	beq.n	8004e5a <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004e42:	b29a      	uxth	r2, r3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004e4c:	b292      	uxth	r2, r2
 8004e4e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f009 fbb5 	bl	800e5c2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004e58:	e011      	b.n	8004e7e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d00c      	beq.n	8004e7e <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004e6c:	b29a      	uxth	r2, r3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004e76:	b292      	uxth	r2, r2
 8004e78:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004e7c:	bf00      	nop
  }
}
 8004e7e:	3710      	adds	r7, #16
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b082      	sub	sp, #8
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d101      	bne.n	8004e9e <HAL_PCD_SetAddress+0x1a>
 8004e9a:	2302      	movs	r3, #2
 8004e9c:	e012      	b.n	8004ec4 <HAL_PCD_SetAddress+0x40>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	78fa      	ldrb	r2, [r7, #3]
 8004eaa:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	78fa      	ldrb	r2, [r7, #3]
 8004eb2:	4611      	mov	r1, r2
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f007 fbee 	bl	800c696 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004ec2:	2300      	movs	r3, #0
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3708      	adds	r7, #8
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	4608      	mov	r0, r1
 8004ed6:	4611      	mov	r1, r2
 8004ed8:	461a      	mov	r2, r3
 8004eda:	4603      	mov	r3, r0
 8004edc:	70fb      	strb	r3, [r7, #3]
 8004ede:	460b      	mov	r3, r1
 8004ee0:	803b      	strh	r3, [r7, #0]
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004eea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	da0e      	bge.n	8004f10 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ef2:	78fb      	ldrb	r3, [r7, #3]
 8004ef4:	f003 0207 	and.w	r2, r3, #7
 8004ef8:	4613      	mov	r3, r2
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	4413      	add	r3, r2
 8004efe:	00db      	lsls	r3, r3, #3
 8004f00:	3310      	adds	r3, #16
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	4413      	add	r3, r2
 8004f06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	705a      	strb	r2, [r3, #1]
 8004f0e:	e00e      	b.n	8004f2e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f10:	78fb      	ldrb	r3, [r7, #3]
 8004f12:	f003 0207 	and.w	r2, r3, #7
 8004f16:	4613      	mov	r3, r2
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	4413      	add	r3, r2
 8004f1c:	00db      	lsls	r3, r3, #3
 8004f1e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	4413      	add	r3, r2
 8004f26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004f2e:	78fb      	ldrb	r3, [r7, #3]
 8004f30:	f003 0307 	and.w	r3, r3, #7
 8004f34:	b2da      	uxtb	r2, r3
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004f3a:	883a      	ldrh	r2, [r7, #0]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	78ba      	ldrb	r2, [r7, #2]
 8004f44:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004f46:	78bb      	ldrb	r3, [r7, #2]
 8004f48:	2b02      	cmp	r3, #2
 8004f4a:	d102      	bne.n	8004f52 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d101      	bne.n	8004f60 <HAL_PCD_EP_Open+0x94>
 8004f5c:	2302      	movs	r3, #2
 8004f5e:	e00e      	b.n	8004f7e <HAL_PCD_EP_Open+0xb2>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68f9      	ldr	r1, [r7, #12]
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f005 f930 	bl	800a1d4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8004f7c:	7afb      	ldrb	r3, [r7, #11]
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3710      	adds	r7, #16
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}

08004f86 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f86:	b580      	push	{r7, lr}
 8004f88:	b084      	sub	sp, #16
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
 8004f8e:	460b      	mov	r3, r1
 8004f90:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004f92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	da0e      	bge.n	8004fb8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f9a:	78fb      	ldrb	r3, [r7, #3]
 8004f9c:	f003 0207 	and.w	r2, r3, #7
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	4413      	add	r3, r2
 8004fa6:	00db      	lsls	r3, r3, #3
 8004fa8:	3310      	adds	r3, #16
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	4413      	add	r3, r2
 8004fae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	705a      	strb	r2, [r3, #1]
 8004fb6:	e00e      	b.n	8004fd6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004fb8:	78fb      	ldrb	r3, [r7, #3]
 8004fba:	f003 0207 	and.w	r2, r3, #7
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	4413      	add	r3, r2
 8004fc4:	00db      	lsls	r3, r3, #3
 8004fc6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	4413      	add	r3, r2
 8004fce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004fd6:	78fb      	ldrb	r3, [r7, #3]
 8004fd8:	f003 0307 	and.w	r3, r3, #7
 8004fdc:	b2da      	uxtb	r2, r3
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d101      	bne.n	8004ff0 <HAL_PCD_EP_Close+0x6a>
 8004fec:	2302      	movs	r3, #2
 8004fee:	e00e      	b.n	800500e <HAL_PCD_EP_Close+0x88>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68f9      	ldr	r1, [r7, #12]
 8004ffe:	4618      	mov	r0, r3
 8005000:	f005 fcac 	bl	800a95c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3710      	adds	r7, #16
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}

08005016 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005016:	b580      	push	{r7, lr}
 8005018:	b086      	sub	sp, #24
 800501a:	af00      	add	r7, sp, #0
 800501c:	60f8      	str	r0, [r7, #12]
 800501e:	607a      	str	r2, [r7, #4]
 8005020:	603b      	str	r3, [r7, #0]
 8005022:	460b      	mov	r3, r1
 8005024:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005026:	7afb      	ldrb	r3, [r7, #11]
 8005028:	f003 0207 	and.w	r2, r3, #7
 800502c:	4613      	mov	r3, r2
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	4413      	add	r3, r2
 8005032:	00db      	lsls	r3, r3, #3
 8005034:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	4413      	add	r3, r2
 800503c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	683a      	ldr	r2, [r7, #0]
 8005048:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	2200      	movs	r2, #0
 800504e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	2200      	movs	r2, #0
 8005054:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005056:	7afb      	ldrb	r3, [r7, #11]
 8005058:	f003 0307 	and.w	r3, r3, #7
 800505c:	b2da      	uxtb	r2, r3
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	6979      	ldr	r1, [r7, #20]
 8005068:	4618      	mov	r0, r3
 800506a:	f005 fe64 	bl	800ad36 <USB_EPStartXfer>

  return HAL_OK;
 800506e:	2300      	movs	r3, #0
}
 8005070:	4618      	mov	r0, r3
 8005072:	3718      	adds	r7, #24
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	460b      	mov	r3, r1
 8005082:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005084:	78fb      	ldrb	r3, [r7, #3]
 8005086:	f003 0207 	and.w	r2, r3, #7
 800508a:	6879      	ldr	r1, [r7, #4]
 800508c:	4613      	mov	r3, r2
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	4413      	add	r3, r2
 8005092:	00db      	lsls	r3, r3, #3
 8005094:	440b      	add	r3, r1
 8005096:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800509a:	681b      	ldr	r3, [r3, #0]
}
 800509c:	4618      	mov	r0, r3
 800509e:	370c      	adds	r7, #12
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b086      	sub	sp, #24
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	607a      	str	r2, [r7, #4]
 80050b2:	603b      	str	r3, [r7, #0]
 80050b4:	460b      	mov	r3, r1
 80050b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80050b8:	7afb      	ldrb	r3, [r7, #11]
 80050ba:	f003 0207 	and.w	r2, r3, #7
 80050be:	4613      	mov	r3, r2
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	4413      	add	r3, r2
 80050c4:	00db      	lsls	r3, r3, #3
 80050c6:	3310      	adds	r3, #16
 80050c8:	68fa      	ldr	r2, [r7, #12]
 80050ca:	4413      	add	r3, r2
 80050cc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	683a      	ldr	r2, [r7, #0]
 80050d8:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	2201      	movs	r2, #1
 80050de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	683a      	ldr	r2, [r7, #0]
 80050e6:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	2200      	movs	r2, #0
 80050ec:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	2201      	movs	r2, #1
 80050f2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80050f4:	7afb      	ldrb	r3, [r7, #11]
 80050f6:	f003 0307 	and.w	r3, r3, #7
 80050fa:	b2da      	uxtb	r2, r3
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	6979      	ldr	r1, [r7, #20]
 8005106:	4618      	mov	r0, r3
 8005108:	f005 fe15 	bl	800ad36 <USB_EPStartXfer>

  return HAL_OK;
 800510c:	2300      	movs	r3, #0
}
 800510e:	4618      	mov	r0, r3
 8005110:	3718      	adds	r7, #24
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}

08005116 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005116:	b580      	push	{r7, lr}
 8005118:	b084      	sub	sp, #16
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
 800511e:	460b      	mov	r3, r1
 8005120:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005122:	78fb      	ldrb	r3, [r7, #3]
 8005124:	f003 0307 	and.w	r3, r3, #7
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	7912      	ldrb	r2, [r2, #4]
 800512c:	4293      	cmp	r3, r2
 800512e:	d901      	bls.n	8005134 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e03e      	b.n	80051b2 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005134:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005138:	2b00      	cmp	r3, #0
 800513a:	da0e      	bge.n	800515a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800513c:	78fb      	ldrb	r3, [r7, #3]
 800513e:	f003 0207 	and.w	r2, r3, #7
 8005142:	4613      	mov	r3, r2
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	4413      	add	r3, r2
 8005148:	00db      	lsls	r3, r3, #3
 800514a:	3310      	adds	r3, #16
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	4413      	add	r3, r2
 8005150:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2201      	movs	r2, #1
 8005156:	705a      	strb	r2, [r3, #1]
 8005158:	e00c      	b.n	8005174 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800515a:	78fa      	ldrb	r2, [r7, #3]
 800515c:	4613      	mov	r3, r2
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	4413      	add	r3, r2
 8005162:	00db      	lsls	r3, r3, #3
 8005164:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	4413      	add	r3, r2
 800516c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2200      	movs	r2, #0
 8005172:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2201      	movs	r2, #1
 8005178:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800517a:	78fb      	ldrb	r3, [r7, #3]
 800517c:	f003 0307 	and.w	r3, r3, #7
 8005180:	b2da      	uxtb	r2, r3
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800518c:	2b01      	cmp	r3, #1
 800518e:	d101      	bne.n	8005194 <HAL_PCD_EP_SetStall+0x7e>
 8005190:	2302      	movs	r3, #2
 8005192:	e00e      	b.n	80051b2 <HAL_PCD_EP_SetStall+0x9c>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68f9      	ldr	r1, [r7, #12]
 80051a2:	4618      	mov	r0, r3
 80051a4:	f007 f978 	bl	800c498 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3710      	adds	r7, #16
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}

080051ba <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80051ba:	b580      	push	{r7, lr}
 80051bc:	b084      	sub	sp, #16
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
 80051c2:	460b      	mov	r3, r1
 80051c4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80051c6:	78fb      	ldrb	r3, [r7, #3]
 80051c8:	f003 030f 	and.w	r3, r3, #15
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	7912      	ldrb	r2, [r2, #4]
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d901      	bls.n	80051d8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e040      	b.n	800525a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80051d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	da0e      	bge.n	80051fe <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80051e0:	78fb      	ldrb	r3, [r7, #3]
 80051e2:	f003 0207 	and.w	r2, r3, #7
 80051e6:	4613      	mov	r3, r2
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	4413      	add	r3, r2
 80051ec:	00db      	lsls	r3, r3, #3
 80051ee:	3310      	adds	r3, #16
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	4413      	add	r3, r2
 80051f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2201      	movs	r2, #1
 80051fa:	705a      	strb	r2, [r3, #1]
 80051fc:	e00e      	b.n	800521c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80051fe:	78fb      	ldrb	r3, [r7, #3]
 8005200:	f003 0207 	and.w	r2, r3, #7
 8005204:	4613      	mov	r3, r2
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	4413      	add	r3, r2
 800520a:	00db      	lsls	r3, r3, #3
 800520c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	4413      	add	r3, r2
 8005214:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2200      	movs	r2, #0
 800521a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2200      	movs	r2, #0
 8005220:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005222:	78fb      	ldrb	r3, [r7, #3]
 8005224:	f003 0307 	and.w	r3, r3, #7
 8005228:	b2da      	uxtb	r2, r3
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005234:	2b01      	cmp	r3, #1
 8005236:	d101      	bne.n	800523c <HAL_PCD_EP_ClrStall+0x82>
 8005238:	2302      	movs	r3, #2
 800523a:	e00e      	b.n	800525a <HAL_PCD_EP_ClrStall+0xa0>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68f9      	ldr	r1, [r7, #12]
 800524a:	4618      	mov	r0, r3
 800524c:	f007 f975 	bl	800c53a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	3710      	adds	r7, #16
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}

08005262 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005262:	b580      	push	{r7, lr}
 8005264:	b096      	sub	sp, #88	@ 0x58
 8005266:	af00      	add	r7, sp, #0
 8005268:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800526a:	e3ad      	b.n	80059c8 <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005274:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005278:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800527c:	b2db      	uxtb	r3, r3
 800527e:	f003 030f 	and.w	r3, r3, #15
 8005282:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8005286:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800528a:	2b00      	cmp	r3, #0
 800528c:	f040 816f 	bne.w	800556e <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005290:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005294:	f003 0310 	and.w	r3, r3, #16
 8005298:	2b00      	cmp	r3, #0
 800529a:	d14c      	bne.n	8005336 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	881b      	ldrh	r3, [r3, #0]
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80052a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052ac:	81fb      	strh	r3, [r7, #14]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	89fb      	ldrh	r3, [r7, #14]
 80052b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052bc:	b29b      	uxth	r3, r3
 80052be:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	3310      	adds	r3, #16
 80052c4:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	461a      	mov	r2, r3
 80052d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	00db      	lsls	r3, r3, #3
 80052d8:	4413      	add	r3, r2
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	6812      	ldr	r2, [r2, #0]
 80052de:	4413      	add	r3, r2
 80052e0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80052e4:	881b      	ldrh	r3, [r3, #0]
 80052e6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80052ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052ec:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80052ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052f0:	695a      	ldr	r2, [r3, #20]
 80052f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052f4:	69db      	ldr	r3, [r3, #28]
 80052f6:	441a      	add	r2, r3
 80052f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052fa:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80052fc:	2100      	movs	r1, #0
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f009 f945 	bl	800e58e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	7b1b      	ldrb	r3, [r3, #12]
 8005308:	b2db      	uxtb	r3, r3
 800530a:	2b00      	cmp	r3, #0
 800530c:	f000 835c 	beq.w	80059c8 <PCD_EP_ISR_Handler+0x766>
 8005310:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005312:	699b      	ldr	r3, [r3, #24]
 8005314:	2b00      	cmp	r3, #0
 8005316:	f040 8357 	bne.w	80059c8 <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	7b1b      	ldrb	r3, [r3, #12]
 800531e:	b2db      	uxtb	r3, r3
 8005320:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005324:	b2da      	uxtb	r2, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	731a      	strb	r2, [r3, #12]
 8005334:	e348      	b.n	80059c8 <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800533c:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	881b      	ldrh	r3, [r3, #0]
 8005344:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005348:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800534c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005350:	2b00      	cmp	r3, #0
 8005352:	d032      	beq.n	80053ba <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800535c:	b29b      	uxth	r3, r3
 800535e:	461a      	mov	r2, r3
 8005360:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	00db      	lsls	r3, r3, #3
 8005366:	4413      	add	r3, r2
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	6812      	ldr	r2, [r2, #0]
 800536c:	4413      	add	r3, r2
 800536e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005372:	881b      	ldrh	r3, [r3, #0]
 8005374:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005378:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800537a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6818      	ldr	r0, [r3, #0]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8005386:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005388:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800538a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800538c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800538e:	b29b      	uxth	r3, r3
 8005390:	f007 f9fe 	bl	800c790 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	881b      	ldrh	r3, [r3, #0]
 800539a:	b29a      	uxth	r2, r3
 800539c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80053a0:	4013      	ands	r3, r2
 80053a2:	823b      	strh	r3, [r7, #16]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	8a3a      	ldrh	r2, [r7, #16]
 80053aa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80053ae:	b292      	uxth	r2, r2
 80053b0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f009 f8be 	bl	800e534 <HAL_PCD_SetupStageCallback>
 80053b8:	e306      	b.n	80059c8 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80053ba:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80053be:	2b00      	cmp	r3, #0
 80053c0:	f280 8302 	bge.w	80059c8 <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	881b      	ldrh	r3, [r3, #0]
 80053ca:	b29a      	uxth	r2, r3
 80053cc:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80053d0:	4013      	ands	r3, r2
 80053d2:	83fb      	strh	r3, [r7, #30]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	8bfa      	ldrh	r2, [r7, #30]
 80053da:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80053de:	b292      	uxth	r2, r2
 80053e0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	461a      	mov	r2, r3
 80053ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	00db      	lsls	r3, r3, #3
 80053f4:	4413      	add	r3, r2
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	6812      	ldr	r2, [r2, #0]
 80053fa:	4413      	add	r3, r2
 80053fc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005400:	881b      	ldrh	r3, [r3, #0]
 8005402:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005406:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005408:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800540a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800540c:	69db      	ldr	r3, [r3, #28]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d019      	beq.n	8005446 <PCD_EP_ISR_Handler+0x1e4>
 8005412:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005414:	695b      	ldr	r3, [r3, #20]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d015      	beq.n	8005446 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6818      	ldr	r0, [r3, #0]
 800541e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005420:	6959      	ldr	r1, [r3, #20]
 8005422:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005424:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005426:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005428:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800542a:	b29b      	uxth	r3, r3
 800542c:	f007 f9b0 	bl	800c790 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005430:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005432:	695a      	ldr	r2, [r3, #20]
 8005434:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005436:	69db      	ldr	r3, [r3, #28]
 8005438:	441a      	add	r2, r3
 800543a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800543c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800543e:	2100      	movs	r1, #0
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f009 f889 	bl	800e558 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	881b      	ldrh	r3, [r3, #0]
 800544c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8005450:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005454:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005458:	2b00      	cmp	r3, #0
 800545a:	f040 82b5 	bne.w	80059c8 <PCD_EP_ISR_Handler+0x766>
 800545e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005462:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005466:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800546a:	f000 82ad 	beq.w	80059c8 <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	61bb      	str	r3, [r7, #24]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800547c:	b29b      	uxth	r3, r3
 800547e:	461a      	mov	r2, r3
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	4413      	add	r3, r2
 8005484:	61bb      	str	r3, [r7, #24]
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800548c:	617b      	str	r3, [r7, #20]
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	881b      	ldrh	r3, [r3, #0]
 8005492:	b29b      	uxth	r3, r3
 8005494:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005498:	b29a      	uxth	r2, r3
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	801a      	strh	r2, [r3, #0]
 800549e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	2b3e      	cmp	r3, #62	@ 0x3e
 80054a4:	d91d      	bls.n	80054e2 <PCD_EP_ISR_Handler+0x280>
 80054a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	095b      	lsrs	r3, r3, #5
 80054ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80054ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	f003 031f 	and.w	r3, r3, #31
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d102      	bne.n	80054c0 <PCD_EP_ISR_Handler+0x25e>
 80054ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054bc:	3b01      	subs	r3, #1
 80054be:	647b      	str	r3, [r7, #68]	@ 0x44
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	881b      	ldrh	r3, [r3, #0]
 80054c4:	b29a      	uxth	r2, r3
 80054c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	029b      	lsls	r3, r3, #10
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	4313      	orrs	r3, r2
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054da:	b29a      	uxth	r2, r3
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	801a      	strh	r2, [r3, #0]
 80054e0:	e026      	b.n	8005530 <PCD_EP_ISR_Handler+0x2ce>
 80054e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d10a      	bne.n	8005500 <PCD_EP_ISR_Handler+0x29e>
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	881b      	ldrh	r3, [r3, #0]
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054f8:	b29a      	uxth	r2, r3
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	801a      	strh	r2, [r3, #0]
 80054fe:	e017      	b.n	8005530 <PCD_EP_ISR_Handler+0x2ce>
 8005500:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005502:	691b      	ldr	r3, [r3, #16]
 8005504:	085b      	lsrs	r3, r3, #1
 8005506:	647b      	str	r3, [r7, #68]	@ 0x44
 8005508:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800550a:	691b      	ldr	r3, [r3, #16]
 800550c:	f003 0301 	and.w	r3, r3, #1
 8005510:	2b00      	cmp	r3, #0
 8005512:	d002      	beq.n	800551a <PCD_EP_ISR_Handler+0x2b8>
 8005514:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005516:	3301      	adds	r3, #1
 8005518:	647b      	str	r3, [r7, #68]	@ 0x44
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	881b      	ldrh	r3, [r3, #0]
 800551e:	b29a      	uxth	r2, r3
 8005520:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005522:	b29b      	uxth	r3, r3
 8005524:	029b      	lsls	r3, r3, #10
 8005526:	b29b      	uxth	r3, r3
 8005528:	4313      	orrs	r3, r2
 800552a:	b29a      	uxth	r2, r3
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	881b      	ldrh	r3, [r3, #0]
 8005536:	b29b      	uxth	r3, r3
 8005538:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800553c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005540:	827b      	strh	r3, [r7, #18]
 8005542:	8a7b      	ldrh	r3, [r7, #18]
 8005544:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005548:	827b      	strh	r3, [r7, #18]
 800554a:	8a7b      	ldrh	r3, [r7, #18]
 800554c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005550:	827b      	strh	r3, [r7, #18]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	8a7b      	ldrh	r3, [r7, #18]
 8005558:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800555c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005560:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005564:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005568:	b29b      	uxth	r3, r3
 800556a:	8013      	strh	r3, [r2, #0]
 800556c:	e22c      	b.n	80059c8 <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	461a      	mov	r2, r3
 8005574:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	4413      	add	r3, r2
 800557c:	881b      	ldrh	r3, [r3, #0]
 800557e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005582:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8005586:	2b00      	cmp	r3, #0
 8005588:	f280 80f6 	bge.w	8005778 <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	461a      	mov	r2, r3
 8005592:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	4413      	add	r3, r2
 800559a:	881b      	ldrh	r3, [r3, #0]
 800559c:	b29a      	uxth	r2, r3
 800559e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80055a2:	4013      	ands	r3, r2
 80055a4:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	461a      	mov	r2, r3
 80055ae:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	4413      	add	r3, r2
 80055b6:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80055ba:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80055be:	b292      	uxth	r2, r2
 80055c0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80055c2:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80055c6:	4613      	mov	r3, r2
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	4413      	add	r3, r2
 80055cc:	00db      	lsls	r3, r3, #3
 80055ce:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	4413      	add	r3, r2
 80055d6:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80055d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055da:	7b1b      	ldrb	r3, [r3, #12]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d123      	bne.n	8005628 <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	461a      	mov	r2, r3
 80055ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	00db      	lsls	r3, r3, #3
 80055f2:	4413      	add	r3, r2
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	6812      	ldr	r2, [r2, #0]
 80055f8:	4413      	add	r3, r2
 80055fa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80055fe:	881b      	ldrh	r3, [r3, #0]
 8005600:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005604:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8005608:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800560c:	2b00      	cmp	r3, #0
 800560e:	f000 808e 	beq.w	800572e <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6818      	ldr	r0, [r3, #0]
 8005616:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005618:	6959      	ldr	r1, [r3, #20]
 800561a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800561c:	88da      	ldrh	r2, [r3, #6]
 800561e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005622:	f007 f8b5 	bl	800c790 <USB_ReadPMA>
 8005626:	e082      	b.n	800572e <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005628:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800562a:	78db      	ldrb	r3, [r3, #3]
 800562c:	2b02      	cmp	r3, #2
 800562e:	d10a      	bne.n	8005646 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005630:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005634:	461a      	mov	r2, r3
 8005636:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f000 f9d3 	bl	80059e4 <HAL_PCD_EP_DB_Receive>
 800563e:	4603      	mov	r3, r0
 8005640:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8005644:	e073      	b.n	800572e <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	461a      	mov	r2, r3
 800564c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	4413      	add	r3, r2
 8005654:	881b      	ldrh	r3, [r3, #0]
 8005656:	b29b      	uxth	r3, r3
 8005658:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800565c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005660:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	461a      	mov	r2, r3
 800566a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	441a      	add	r2, r3
 8005672:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8005676:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800567a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800567e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005682:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005686:	b29b      	uxth	r3, r3
 8005688:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	461a      	mov	r2, r3
 8005690:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	4413      	add	r3, r2
 8005698:	881b      	ldrh	r3, [r3, #0]
 800569a:	b29b      	uxth	r3, r3
 800569c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d022      	beq.n	80056ea <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	461a      	mov	r2, r3
 80056b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	00db      	lsls	r3, r3, #3
 80056b6:	4413      	add	r3, r2
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	6812      	ldr	r2, [r2, #0]
 80056bc:	4413      	add	r3, r2
 80056be:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80056c2:	881b      	ldrh	r3, [r3, #0]
 80056c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056c8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80056cc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d02c      	beq.n	800572e <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6818      	ldr	r0, [r3, #0]
 80056d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056da:	6959      	ldr	r1, [r3, #20]
 80056dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056de:	891a      	ldrh	r2, [r3, #8]
 80056e0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80056e4:	f007 f854 	bl	800c790 <USB_ReadPMA>
 80056e8:	e021      	b.n	800572e <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	461a      	mov	r2, r3
 80056f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	00db      	lsls	r3, r3, #3
 80056fc:	4413      	add	r3, r2
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	6812      	ldr	r2, [r2, #0]
 8005702:	4413      	add	r3, r2
 8005704:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005708:	881b      	ldrh	r3, [r3, #0]
 800570a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800570e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8005712:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005716:	2b00      	cmp	r3, #0
 8005718:	d009      	beq.n	800572e <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6818      	ldr	r0, [r3, #0]
 800571e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005720:	6959      	ldr	r1, [r3, #20]
 8005722:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005724:	895a      	ldrh	r2, [r3, #10]
 8005726:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800572a:	f007 f831 	bl	800c790 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800572e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005730:	69da      	ldr	r2, [r3, #28]
 8005732:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005736:	441a      	add	r2, r3
 8005738:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800573a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800573c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800573e:	695a      	ldr	r2, [r3, #20]
 8005740:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005744:	441a      	add	r2, r3
 8005746:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005748:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800574a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800574c:	699b      	ldr	r3, [r3, #24]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d005      	beq.n	800575e <PCD_EP_ISR_Handler+0x4fc>
 8005752:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8005756:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	429a      	cmp	r2, r3
 800575c:	d206      	bcs.n	800576c <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800575e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	4619      	mov	r1, r3
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f008 fef7 	bl	800e558 <HAL_PCD_DataOutStageCallback>
 800576a:	e005      	b.n	8005778 <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005772:	4618      	mov	r0, r3
 8005774:	f005 fadf 	bl	800ad36 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005778:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800577c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005780:	2b00      	cmp	r3, #0
 8005782:	f000 8121 	beq.w	80059c8 <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 8005786:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800578a:	4613      	mov	r3, r2
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	4413      	add	r3, r2
 8005790:	00db      	lsls	r3, r3, #3
 8005792:	3310      	adds	r3, #16
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	4413      	add	r3, r2
 8005798:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	461a      	mov	r2, r3
 80057a0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	4413      	add	r3, r2
 80057a8:	881b      	ldrh	r3, [r3, #0]
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80057b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057b4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	461a      	mov	r2, r3
 80057be:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	441a      	add	r2, r3
 80057c6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80057ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80057d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057d8:	78db      	ldrb	r3, [r3, #3]
 80057da:	2b01      	cmp	r3, #1
 80057dc:	f040 80a2 	bne.w	8005924 <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 80057e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057e2:	2200      	movs	r2, #0
 80057e4:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80057e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057e8:	7b1b      	ldrb	r3, [r3, #12]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	f000 8093 	beq.w	8005916 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80057f0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80057f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d046      	beq.n	800588a <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80057fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057fe:	785b      	ldrb	r3, [r3, #1]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d126      	bne.n	8005852 <PCD_EP_ISR_Handler+0x5f0>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	627b      	str	r3, [r7, #36]	@ 0x24
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005812:	b29b      	uxth	r3, r3
 8005814:	461a      	mov	r2, r3
 8005816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005818:	4413      	add	r3, r2
 800581a:	627b      	str	r3, [r7, #36]	@ 0x24
 800581c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	00da      	lsls	r2, r3, #3
 8005822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005824:	4413      	add	r3, r2
 8005826:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800582a:	623b      	str	r3, [r7, #32]
 800582c:	6a3b      	ldr	r3, [r7, #32]
 800582e:	881b      	ldrh	r3, [r3, #0]
 8005830:	b29b      	uxth	r3, r3
 8005832:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005836:	b29a      	uxth	r2, r3
 8005838:	6a3b      	ldr	r3, [r7, #32]
 800583a:	801a      	strh	r2, [r3, #0]
 800583c:	6a3b      	ldr	r3, [r7, #32]
 800583e:	881b      	ldrh	r3, [r3, #0]
 8005840:	b29b      	uxth	r3, r3
 8005842:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005846:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800584a:	b29a      	uxth	r2, r3
 800584c:	6a3b      	ldr	r3, [r7, #32]
 800584e:	801a      	strh	r2, [r3, #0]
 8005850:	e061      	b.n	8005916 <PCD_EP_ISR_Handler+0x6b4>
 8005852:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005854:	785b      	ldrb	r3, [r3, #1]
 8005856:	2b01      	cmp	r3, #1
 8005858:	d15d      	bne.n	8005916 <PCD_EP_ISR_Handler+0x6b4>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005868:	b29b      	uxth	r3, r3
 800586a:	461a      	mov	r2, r3
 800586c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800586e:	4413      	add	r3, r2
 8005870:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005872:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	00da      	lsls	r2, r3, #3
 8005878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800587a:	4413      	add	r3, r2
 800587c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005880:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005884:	2200      	movs	r2, #0
 8005886:	801a      	strh	r2, [r3, #0]
 8005888:	e045      	b.n	8005916 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005890:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005892:	785b      	ldrb	r3, [r3, #1]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d126      	bne.n	80058e6 <PCD_EP_ISR_Handler+0x684>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	637b      	str	r3, [r7, #52]	@ 0x34
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	461a      	mov	r2, r3
 80058aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058ac:	4413      	add	r3, r2
 80058ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80058b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	00da      	lsls	r2, r3, #3
 80058b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058b8:	4413      	add	r3, r2
 80058ba:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80058be:	633b      	str	r3, [r7, #48]	@ 0x30
 80058c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058c2:	881b      	ldrh	r3, [r3, #0]
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058ca:	b29a      	uxth	r2, r3
 80058cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ce:	801a      	strh	r2, [r3, #0]
 80058d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058d2:	881b      	ldrh	r3, [r3, #0]
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058de:	b29a      	uxth	r2, r3
 80058e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058e2:	801a      	strh	r2, [r3, #0]
 80058e4:	e017      	b.n	8005916 <PCD_EP_ISR_Handler+0x6b4>
 80058e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058e8:	785b      	ldrb	r3, [r3, #1]
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d113      	bne.n	8005916 <PCD_EP_ISR_Handler+0x6b4>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	461a      	mov	r2, r3
 80058fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058fc:	4413      	add	r3, r2
 80058fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005900:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	00da      	lsls	r2, r3, #3
 8005906:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005908:	4413      	add	r3, r2
 800590a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800590e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005912:	2200      	movs	r2, #0
 8005914:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005916:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	4619      	mov	r1, r3
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f008 fe36 	bl	800e58e <HAL_PCD_DataInStageCallback>
 8005922:	e051      	b.n	80059c8 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8005924:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005928:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800592c:	2b00      	cmp	r3, #0
 800592e:	d144      	bne.n	80059ba <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005938:	b29b      	uxth	r3, r3
 800593a:	461a      	mov	r2, r3
 800593c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	00db      	lsls	r3, r3, #3
 8005942:	4413      	add	r3, r2
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	6812      	ldr	r2, [r2, #0]
 8005948:	4413      	add	r3, r2
 800594a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800594e:	881b      	ldrh	r3, [r3, #0]
 8005950:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005954:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8005958:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800595a:	699a      	ldr	r2, [r3, #24]
 800595c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005960:	429a      	cmp	r2, r3
 8005962:	d907      	bls.n	8005974 <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 8005964:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005966:	699a      	ldr	r2, [r3, #24]
 8005968:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800596c:	1ad2      	subs	r2, r2, r3
 800596e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005970:	619a      	str	r2, [r3, #24]
 8005972:	e002      	b.n	800597a <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 8005974:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005976:	2200      	movs	r2, #0
 8005978:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800597a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800597c:	699b      	ldr	r3, [r3, #24]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d106      	bne.n	8005990 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005982:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	4619      	mov	r1, r3
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f008 fe00 	bl	800e58e <HAL_PCD_DataInStageCallback>
 800598e:	e01b      	b.n	80059c8 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8005990:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005992:	695a      	ldr	r2, [r3, #20]
 8005994:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005998:	441a      	add	r2, r3
 800599a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800599c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800599e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059a0:	69da      	ldr	r2, [r3, #28]
 80059a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80059a6:	441a      	add	r2, r3
 80059a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059aa:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80059b2:	4618      	mov	r0, r3
 80059b4:	f005 f9bf 	bl	800ad36 <USB_EPStartXfer>
 80059b8:	e006      	b.n	80059c8 <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80059ba:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80059be:	461a      	mov	r2, r3
 80059c0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 f917 	bl	8005bf6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	b21b      	sxth	r3, r3
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	f6ff ac49 	blt.w	800526c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80059da:	2300      	movs	r3, #0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3758      	adds	r7, #88	@ 0x58
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b088      	sub	sp, #32
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	4613      	mov	r3, r2
 80059f0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80059f2:	88fb      	ldrh	r3, [r7, #6]
 80059f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d07c      	beq.n	8005af6 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	461a      	mov	r2, r3
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	00db      	lsls	r3, r3, #3
 8005a0e:	4413      	add	r3, r2
 8005a10:	68fa      	ldr	r2, [r7, #12]
 8005a12:	6812      	ldr	r2, [r2, #0]
 8005a14:	4413      	add	r3, r2
 8005a16:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005a1a:	881b      	ldrh	r3, [r3, #0]
 8005a1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a20:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	699a      	ldr	r2, [r3, #24]
 8005a26:	8b7b      	ldrh	r3, [r7, #26]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d306      	bcc.n	8005a3a <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	699a      	ldr	r2, [r3, #24]
 8005a30:	8b7b      	ldrh	r3, [r7, #26]
 8005a32:	1ad2      	subs	r2, r2, r3
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	619a      	str	r2, [r3, #24]
 8005a38:	e002      	b.n	8005a40 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	699b      	ldr	r3, [r3, #24]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d123      	bne.n	8005a90 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	4413      	add	r3, r2
 8005a56:	881b      	ldrh	r3, [r3, #0]
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a62:	833b      	strh	r3, [r7, #24]
 8005a64:	8b3b      	ldrh	r3, [r7, #24]
 8005a66:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005a6a:	833b      	strh	r3, [r7, #24]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	461a      	mov	r2, r3
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	441a      	add	r2, r3
 8005a7a:	8b3b      	ldrh	r3, [r7, #24]
 8005a7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005a90:	88fb      	ldrh	r3, [r7, #6]
 8005a92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d01f      	beq.n	8005ada <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	4413      	add	r3, r2
 8005aa8:	881b      	ldrh	r3, [r3, #0]
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ab0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ab4:	82fb      	strh	r3, [r7, #22]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	461a      	mov	r2, r3
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	441a      	add	r2, r3
 8005ac4:	8afb      	ldrh	r3, [r7, #22]
 8005ac6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005aca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ace:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ad2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005ada:	8b7b      	ldrh	r3, [r7, #26]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	f000 8085 	beq.w	8005bec <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6818      	ldr	r0, [r3, #0]
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	6959      	ldr	r1, [r3, #20]
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	891a      	ldrh	r2, [r3, #8]
 8005aee:	8b7b      	ldrh	r3, [r7, #26]
 8005af0:	f006 fe4e 	bl	800c790 <USB_ReadPMA>
 8005af4:	e07a      	b.n	8005bec <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	461a      	mov	r2, r3
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	00db      	lsls	r3, r3, #3
 8005b08:	4413      	add	r3, r2
 8005b0a:	68fa      	ldr	r2, [r7, #12]
 8005b0c:	6812      	ldr	r2, [r2, #0]
 8005b0e:	4413      	add	r3, r2
 8005b10:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005b14:	881b      	ldrh	r3, [r3, #0]
 8005b16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b1a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	699a      	ldr	r2, [r3, #24]
 8005b20:	8b7b      	ldrh	r3, [r7, #26]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d306      	bcc.n	8005b34 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	699a      	ldr	r2, [r3, #24]
 8005b2a:	8b7b      	ldrh	r3, [r7, #26]
 8005b2c:	1ad2      	subs	r2, r2, r3
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	619a      	str	r2, [r3, #24]
 8005b32:	e002      	b.n	8005b3a <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	2200      	movs	r2, #0
 8005b38:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	699b      	ldr	r3, [r3, #24]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d123      	bne.n	8005b8a <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	461a      	mov	r2, r3
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	4413      	add	r3, r2
 8005b50:	881b      	ldrh	r3, [r3, #0]
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b5c:	83fb      	strh	r3, [r7, #30]
 8005b5e:	8bfb      	ldrh	r3, [r7, #30]
 8005b60:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005b64:	83fb      	strh	r3, [r7, #30]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	441a      	add	r2, r3
 8005b74:	8bfb      	ldrh	r3, [r7, #30]
 8005b76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005b8a:	88fb      	ldrh	r3, [r7, #6]
 8005b8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d11f      	bne.n	8005bd4 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	461a      	mov	r2, r3
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	4413      	add	r3, r2
 8005ba2:	881b      	ldrh	r3, [r3, #0]
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005baa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bae:	83bb      	strh	r3, [r7, #28]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	441a      	add	r2, r3
 8005bbe:	8bbb      	ldrh	r3, [r7, #28]
 8005bc0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005bc4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bc8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bcc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005bd4:	8b7b      	ldrh	r3, [r7, #26]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d008      	beq.n	8005bec <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6818      	ldr	r0, [r3, #0]
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	6959      	ldr	r1, [r3, #20]
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	895a      	ldrh	r2, [r3, #10]
 8005be6:	8b7b      	ldrh	r3, [r7, #26]
 8005be8:	f006 fdd2 	bl	800c790 <USB_ReadPMA>
    }
  }

  return count;
 8005bec:	8b7b      	ldrh	r3, [r7, #26]
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3720      	adds	r7, #32
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}

08005bf6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005bf6:	b580      	push	{r7, lr}
 8005bf8:	b0a4      	sub	sp, #144	@ 0x90
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	60f8      	str	r0, [r7, #12]
 8005bfe:	60b9      	str	r1, [r7, #8]
 8005c00:	4613      	mov	r3, r2
 8005c02:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005c04:	88fb      	ldrh	r3, [r7, #6]
 8005c06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	f000 81db 	beq.w	8005fc6 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	00db      	lsls	r3, r3, #3
 8005c22:	4413      	add	r3, r2
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	6812      	ldr	r2, [r2, #0]
 8005c28:	4413      	add	r3, r2
 8005c2a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005c2e:	881b      	ldrh	r3, [r3, #0]
 8005c30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c34:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	699a      	ldr	r2, [r3, #24]
 8005c3c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d907      	bls.n	8005c54 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	699a      	ldr	r2, [r3, #24]
 8005c48:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005c4c:	1ad2      	subs	r2, r2, r3
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	619a      	str	r2, [r3, #24]
 8005c52:	e002      	b.n	8005c5a <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	2200      	movs	r2, #0
 8005c58:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	699b      	ldr	r3, [r3, #24]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	f040 80b9 	bne.w	8005dd6 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	785b      	ldrb	r3, [r3, #1]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d126      	bne.n	8005cba <HAL_PCD_EP_DB_Transmit+0xc4>
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c80:	4413      	add	r3, r2
 8005c82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	00da      	lsls	r2, r3, #3
 8005c8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c8c:	4413      	add	r3, r2
 8005c8e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005c92:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c96:	881b      	ldrh	r3, [r3, #0]
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c9e:	b29a      	uxth	r2, r3
 8005ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ca2:	801a      	strh	r2, [r3, #0]
 8005ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ca6:	881b      	ldrh	r3, [r3, #0]
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cb2:	b29a      	uxth	r2, r3
 8005cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cb6:	801a      	strh	r2, [r3, #0]
 8005cb8:	e01a      	b.n	8005cf0 <HAL_PCD_EP_DB_Transmit+0xfa>
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	785b      	ldrb	r3, [r3, #1]
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d116      	bne.n	8005cf0 <HAL_PCD_EP_DB_Transmit+0xfa>
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cd6:	4413      	add	r3, r2
 8005cd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	00da      	lsls	r2, r3, #3
 8005ce0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ce2:	4413      	add	r3, r2
 8005ce4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005ce8:	633b      	str	r3, [r7, #48]	@ 0x30
 8005cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cec:	2200      	movs	r2, #0
 8005cee:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	785b      	ldrb	r3, [r3, #1]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d126      	bne.n	8005d4c <HAL_PCD_EP_DB_Transmit+0x156>
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	61fb      	str	r3, [r7, #28]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	461a      	mov	r2, r3
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	4413      	add	r3, r2
 8005d14:	61fb      	str	r3, [r7, #28]
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	00da      	lsls	r2, r3, #3
 8005d1c:	69fb      	ldr	r3, [r7, #28]
 8005d1e:	4413      	add	r3, r2
 8005d20:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005d24:	61bb      	str	r3, [r7, #24]
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	881b      	ldrh	r3, [r3, #0]
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d30:	b29a      	uxth	r2, r3
 8005d32:	69bb      	ldr	r3, [r7, #24]
 8005d34:	801a      	strh	r2, [r3, #0]
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	881b      	ldrh	r3, [r3, #0]
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d44:	b29a      	uxth	r2, r3
 8005d46:	69bb      	ldr	r3, [r7, #24]
 8005d48:	801a      	strh	r2, [r3, #0]
 8005d4a:	e017      	b.n	8005d7c <HAL_PCD_EP_DB_Transmit+0x186>
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	785b      	ldrb	r3, [r3, #1]
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d113      	bne.n	8005d7c <HAL_PCD_EP_DB_Transmit+0x186>
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	461a      	mov	r2, r3
 8005d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d62:	4413      	add	r3, r2
 8005d64:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	00da      	lsls	r2, r3, #3
 8005d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d6e:	4413      	add	r3, r2
 8005d70:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005d74:	623b      	str	r3, [r7, #32]
 8005d76:	6a3b      	ldr	r3, [r7, #32]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	4619      	mov	r1, r3
 8005d82:	68f8      	ldr	r0, [r7, #12]
 8005d84:	f008 fc03 	bl	800e58e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005d88:	88fb      	ldrh	r3, [r7, #6]
 8005d8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	f000 82fa 	beq.w	8006388 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	461a      	mov	r2, r3
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	4413      	add	r3, r2
 8005da2:	881b      	ldrh	r3, [r3, #0]
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005daa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dae:	82fb      	strh	r3, [r7, #22]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	461a      	mov	r2, r3
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	441a      	add	r2, r3
 8005dbe:	8afb      	ldrh	r3, [r7, #22]
 8005dc0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005dc4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005dc8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005dcc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	8013      	strh	r3, [r2, #0]
 8005dd4:	e2d8      	b.n	8006388 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005dd6:	88fb      	ldrh	r3, [r7, #6]
 8005dd8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d021      	beq.n	8005e24 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	461a      	mov	r2, r3
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	4413      	add	r3, r2
 8005dee:	881b      	ldrh	r3, [r3, #0]
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005df6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dfa:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	461a      	mov	r2, r3
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	441a      	add	r2, r3
 8005e0c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005e10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e18:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005e1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	f040 82ac 	bne.w	8006388 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	695a      	ldr	r2, [r3, #20]
 8005e34:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005e38:	441a      	add	r2, r3
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	69da      	ldr	r2, [r3, #28]
 8005e42:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005e46:	441a      	add	r2, r3
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	6a1a      	ldr	r2, [r3, #32]
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	691b      	ldr	r3, [r3, #16]
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d30b      	bcc.n	8005e70 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	6a1a      	ldr	r2, [r3, #32]
 8005e64:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005e68:	1ad2      	subs	r2, r2, r3
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	621a      	str	r2, [r3, #32]
 8005e6e:	e017      	b.n	8005ea0 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	6a1b      	ldr	r3, [r3, #32]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d108      	bne.n	8005e8a <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8005e78:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005e7c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005e88:	e00a      	b.n	8005ea0 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	6a1b      	ldr	r3, [r3, #32]
 8005e96:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	785b      	ldrb	r3, [r3, #1]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d165      	bne.n	8005f74 <HAL_PCD_EP_DB_Transmit+0x37e>
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	461a      	mov	r2, r3
 8005eba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ebc:	4413      	add	r3, r2
 8005ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	00da      	lsls	r2, r3, #3
 8005ec6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ec8:	4413      	add	r3, r2
 8005eca:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005ece:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005ed0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ed2:	881b      	ldrh	r3, [r3, #0]
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005eda:	b29a      	uxth	r2, r3
 8005edc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ede:	801a      	strh	r2, [r3, #0]
 8005ee0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ee4:	2b3e      	cmp	r3, #62	@ 0x3e
 8005ee6:	d91d      	bls.n	8005f24 <HAL_PCD_EP_DB_Transmit+0x32e>
 8005ee8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005eec:	095b      	lsrs	r3, r3, #5
 8005eee:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ef0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ef4:	f003 031f 	and.w	r3, r3, #31
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d102      	bne.n	8005f02 <HAL_PCD_EP_DB_Transmit+0x30c>
 8005efc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005efe:	3b01      	subs	r3, #1
 8005f00:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f04:	881b      	ldrh	r3, [r3, #0]
 8005f06:	b29a      	uxth	r2, r3
 8005f08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	029b      	lsls	r3, r3, #10
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	4313      	orrs	r3, r2
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f1c:	b29a      	uxth	r2, r3
 8005f1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f20:	801a      	strh	r2, [r3, #0]
 8005f22:	e044      	b.n	8005fae <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005f24:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d10a      	bne.n	8005f42 <HAL_PCD_EP_DB_Transmit+0x34c>
 8005f2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f2e:	881b      	ldrh	r3, [r3, #0]
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f3a:	b29a      	uxth	r2, r3
 8005f3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f3e:	801a      	strh	r2, [r3, #0]
 8005f40:	e035      	b.n	8005fae <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005f42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f46:	085b      	lsrs	r3, r3, #1
 8005f48:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f4e:	f003 0301 	and.w	r3, r3, #1
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d002      	beq.n	8005f5c <HAL_PCD_EP_DB_Transmit+0x366>
 8005f56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f58:	3301      	adds	r3, #1
 8005f5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f5e:	881b      	ldrh	r3, [r3, #0]
 8005f60:	b29a      	uxth	r2, r3
 8005f62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	029b      	lsls	r3, r3, #10
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	b29a      	uxth	r2, r3
 8005f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f70:	801a      	strh	r2, [r3, #0]
 8005f72:	e01c      	b.n	8005fae <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	785b      	ldrb	r3, [r3, #1]
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d118      	bne.n	8005fae <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f90:	4413      	add	r3, r2
 8005f92:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	00da      	lsls	r2, r3, #3
 8005f9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f9c:	4413      	add	r3, r2
 8005f9e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005fa2:	643b      	str	r3, [r7, #64]	@ 0x40
 8005fa4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005fa8:	b29a      	uxth	r2, r3
 8005faa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fac:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6818      	ldr	r0, [r3, #0]
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	6959      	ldr	r1, [r3, #20]
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	891a      	ldrh	r2, [r3, #8]
 8005fba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	f006 fba4 	bl	800c70c <USB_WritePMA>
 8005fc4:	e1e0      	b.n	8006388 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	00db      	lsls	r3, r3, #3
 8005fd8:	4413      	add	r3, r2
 8005fda:	68fa      	ldr	r2, [r7, #12]
 8005fdc:	6812      	ldr	r2, [r2, #0]
 8005fde:	4413      	add	r3, r2
 8005fe0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005fe4:	881b      	ldrh	r3, [r3, #0]
 8005fe6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fea:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	699a      	ldr	r2, [r3, #24]
 8005ff2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d307      	bcc.n	800600a <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	699a      	ldr	r2, [r3, #24]
 8005ffe:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006002:	1ad2      	subs	r2, r2, r3
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	619a      	str	r2, [r3, #24]
 8006008:	e002      	b.n	8006010 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	2200      	movs	r2, #0
 800600e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	699b      	ldr	r3, [r3, #24]
 8006014:	2b00      	cmp	r3, #0
 8006016:	f040 80c0 	bne.w	800619a <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	785b      	ldrb	r3, [r3, #1]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d126      	bne.n	8006070 <HAL_PCD_EP_DB_Transmit+0x47a>
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006030:	b29b      	uxth	r3, r3
 8006032:	461a      	mov	r2, r3
 8006034:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006036:	4413      	add	r3, r2
 8006038:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	00da      	lsls	r2, r3, #3
 8006040:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006042:	4413      	add	r3, r2
 8006044:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006048:	67bb      	str	r3, [r7, #120]	@ 0x78
 800604a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800604c:	881b      	ldrh	r3, [r3, #0]
 800604e:	b29b      	uxth	r3, r3
 8006050:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006054:	b29a      	uxth	r2, r3
 8006056:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006058:	801a      	strh	r2, [r3, #0]
 800605a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800605c:	881b      	ldrh	r3, [r3, #0]
 800605e:	b29b      	uxth	r3, r3
 8006060:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006064:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006068:	b29a      	uxth	r2, r3
 800606a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800606c:	801a      	strh	r2, [r3, #0]
 800606e:	e01a      	b.n	80060a6 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	785b      	ldrb	r3, [r3, #1]
 8006074:	2b01      	cmp	r3, #1
 8006076:	d116      	bne.n	80060a6 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	667b      	str	r3, [r7, #100]	@ 0x64
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006086:	b29b      	uxth	r3, r3
 8006088:	461a      	mov	r2, r3
 800608a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800608c:	4413      	add	r3, r2
 800608e:	667b      	str	r3, [r7, #100]	@ 0x64
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	00da      	lsls	r2, r3, #3
 8006096:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006098:	4413      	add	r3, r2
 800609a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800609e:	663b      	str	r3, [r7, #96]	@ 0x60
 80060a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80060a2:	2200      	movs	r2, #0
 80060a4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	677b      	str	r3, [r7, #116]	@ 0x74
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	785b      	ldrb	r3, [r3, #1]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d12b      	bne.n	800610c <HAL_PCD_EP_DB_Transmit+0x516>
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	461a      	mov	r2, r3
 80060c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060c8:	4413      	add	r3, r2
 80060ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	00da      	lsls	r2, r3, #3
 80060d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060d4:	4413      	add	r3, r2
 80060d6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80060da:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80060de:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80060e2:	881b      	ldrh	r3, [r3, #0]
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060ea:	b29a      	uxth	r2, r3
 80060ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80060f0:	801a      	strh	r2, [r3, #0]
 80060f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80060f6:	881b      	ldrh	r3, [r3, #0]
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006102:	b29a      	uxth	r2, r3
 8006104:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006108:	801a      	strh	r2, [r3, #0]
 800610a:	e017      	b.n	800613c <HAL_PCD_EP_DB_Transmit+0x546>
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	785b      	ldrb	r3, [r3, #1]
 8006110:	2b01      	cmp	r3, #1
 8006112:	d113      	bne.n	800613c <HAL_PCD_EP_DB_Transmit+0x546>
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800611c:	b29b      	uxth	r3, r3
 800611e:	461a      	mov	r2, r3
 8006120:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006122:	4413      	add	r3, r2
 8006124:	677b      	str	r3, [r7, #116]	@ 0x74
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	00da      	lsls	r2, r3, #3
 800612c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800612e:	4413      	add	r3, r2
 8006130:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006134:	673b      	str	r3, [r7, #112]	@ 0x70
 8006136:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006138:	2200      	movs	r2, #0
 800613a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	4619      	mov	r1, r3
 8006142:	68f8      	ldr	r0, [r7, #12]
 8006144:	f008 fa23 	bl	800e58e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006148:	88fb      	ldrh	r3, [r7, #6]
 800614a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800614e:	2b00      	cmp	r3, #0
 8006150:	f040 811a 	bne.w	8006388 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	461a      	mov	r2, r3
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	4413      	add	r3, r2
 8006162:	881b      	ldrh	r3, [r3, #0]
 8006164:	b29b      	uxth	r3, r3
 8006166:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800616a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800616e:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	461a      	mov	r2, r3
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	441a      	add	r2, r3
 8006180:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8006184:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006188:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800618c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006190:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006194:	b29b      	uxth	r3, r3
 8006196:	8013      	strh	r3, [r2, #0]
 8006198:	e0f6      	b.n	8006388 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800619a:	88fb      	ldrh	r3, [r7, #6]
 800619c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d121      	bne.n	80061e8 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	461a      	mov	r2, r3
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	4413      	add	r3, r2
 80061b2:	881b      	ldrh	r3, [r3, #0]
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061be:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	461a      	mov	r2, r3
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	441a      	add	r2, r3
 80061d0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80061d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80061e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	f040 80ca 	bne.w	8006388 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	695a      	ldr	r2, [r3, #20]
 80061f8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80061fc:	441a      	add	r2, r3
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	69da      	ldr	r2, [r3, #28]
 8006206:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800620a:	441a      	add	r2, r3
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	6a1a      	ldr	r2, [r3, #32]
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	691b      	ldr	r3, [r3, #16]
 8006218:	429a      	cmp	r2, r3
 800621a:	d30b      	bcc.n	8006234 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	691b      	ldr	r3, [r3, #16]
 8006220:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	6a1a      	ldr	r2, [r3, #32]
 8006228:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800622c:	1ad2      	subs	r2, r2, r3
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	621a      	str	r2, [r3, #32]
 8006232:	e017      	b.n	8006264 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	6a1b      	ldr	r3, [r3, #32]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d108      	bne.n	800624e <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 800623c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006240:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	2200      	movs	r2, #0
 8006248:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800624c:	e00a      	b.n	8006264 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	6a1b      	ldr	r3, [r3, #32]
 8006252:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	2200      	movs	r2, #0
 800625a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	2200      	movs	r2, #0
 8006260:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	657b      	str	r3, [r7, #84]	@ 0x54
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	785b      	ldrb	r3, [r3, #1]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d165      	bne.n	800633e <HAL_PCD_EP_DB_Transmit+0x748>
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006280:	b29b      	uxth	r3, r3
 8006282:	461a      	mov	r2, r3
 8006284:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006286:	4413      	add	r3, r2
 8006288:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	00da      	lsls	r2, r3, #3
 8006290:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006292:	4413      	add	r3, r2
 8006294:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006298:	65bb      	str	r3, [r7, #88]	@ 0x58
 800629a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800629c:	881b      	ldrh	r3, [r3, #0]
 800629e:	b29b      	uxth	r3, r3
 80062a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062a4:	b29a      	uxth	r2, r3
 80062a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80062a8:	801a      	strh	r2, [r3, #0]
 80062aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80062ae:	2b3e      	cmp	r3, #62	@ 0x3e
 80062b0:	d91d      	bls.n	80062ee <HAL_PCD_EP_DB_Transmit+0x6f8>
 80062b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80062b6:	095b      	lsrs	r3, r3, #5
 80062b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80062ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80062be:	f003 031f 	and.w	r3, r3, #31
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d102      	bne.n	80062cc <HAL_PCD_EP_DB_Transmit+0x6d6>
 80062c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80062c8:	3b01      	subs	r3, #1
 80062ca:	66bb      	str	r3, [r7, #104]	@ 0x68
 80062cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80062ce:	881b      	ldrh	r3, [r3, #0]
 80062d0:	b29a      	uxth	r2, r3
 80062d2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	029b      	lsls	r3, r3, #10
 80062d8:	b29b      	uxth	r3, r3
 80062da:	4313      	orrs	r3, r2
 80062dc:	b29b      	uxth	r3, r3
 80062de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062e6:	b29a      	uxth	r2, r3
 80062e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80062ea:	801a      	strh	r2, [r3, #0]
 80062ec:	e041      	b.n	8006372 <HAL_PCD_EP_DB_Transmit+0x77c>
 80062ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d10a      	bne.n	800630c <HAL_PCD_EP_DB_Transmit+0x716>
 80062f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80062f8:	881b      	ldrh	r3, [r3, #0]
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006300:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006304:	b29a      	uxth	r2, r3
 8006306:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006308:	801a      	strh	r2, [r3, #0]
 800630a:	e032      	b.n	8006372 <HAL_PCD_EP_DB_Transmit+0x77c>
 800630c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006310:	085b      	lsrs	r3, r3, #1
 8006312:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006314:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006318:	f003 0301 	and.w	r3, r3, #1
 800631c:	2b00      	cmp	r3, #0
 800631e:	d002      	beq.n	8006326 <HAL_PCD_EP_DB_Transmit+0x730>
 8006320:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006322:	3301      	adds	r3, #1
 8006324:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006326:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006328:	881b      	ldrh	r3, [r3, #0]
 800632a:	b29a      	uxth	r2, r3
 800632c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800632e:	b29b      	uxth	r3, r3
 8006330:	029b      	lsls	r3, r3, #10
 8006332:	b29b      	uxth	r3, r3
 8006334:	4313      	orrs	r3, r2
 8006336:	b29a      	uxth	r2, r3
 8006338:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800633a:	801a      	strh	r2, [r3, #0]
 800633c:	e019      	b.n	8006372 <HAL_PCD_EP_DB_Transmit+0x77c>
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	785b      	ldrb	r3, [r3, #1]
 8006342:	2b01      	cmp	r3, #1
 8006344:	d115      	bne.n	8006372 <HAL_PCD_EP_DB_Transmit+0x77c>
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800634e:	b29b      	uxth	r3, r3
 8006350:	461a      	mov	r2, r3
 8006352:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006354:	4413      	add	r3, r2
 8006356:	657b      	str	r3, [r7, #84]	@ 0x54
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	00da      	lsls	r2, r3, #3
 800635e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006360:	4413      	add	r3, r2
 8006362:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006366:	653b      	str	r3, [r7, #80]	@ 0x50
 8006368:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800636c:	b29a      	uxth	r2, r3
 800636e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006370:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	6818      	ldr	r0, [r3, #0]
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	6959      	ldr	r1, [r3, #20]
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	895a      	ldrh	r2, [r3, #10]
 800637e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006382:	b29b      	uxth	r3, r3
 8006384:	f006 f9c2 	bl	800c70c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	461a      	mov	r2, r3
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	009b      	lsls	r3, r3, #2
 8006394:	4413      	add	r3, r2
 8006396:	881b      	ldrh	r3, [r3, #0]
 8006398:	b29b      	uxth	r3, r3
 800639a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800639e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063a2:	82bb      	strh	r3, [r7, #20]
 80063a4:	8abb      	ldrh	r3, [r7, #20]
 80063a6:	f083 0310 	eor.w	r3, r3, #16
 80063aa:	82bb      	strh	r3, [r7, #20]
 80063ac:	8abb      	ldrh	r3, [r7, #20]
 80063ae:	f083 0320 	eor.w	r3, r3, #32
 80063b2:	82bb      	strh	r3, [r7, #20]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	461a      	mov	r2, r3
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	441a      	add	r2, r3
 80063c2:	8abb      	ldrh	r3, [r7, #20]
 80063c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3790      	adds	r7, #144	@ 0x90
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}

080063e2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80063e2:	b480      	push	{r7}
 80063e4:	b087      	sub	sp, #28
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	60f8      	str	r0, [r7, #12]
 80063ea:	607b      	str	r3, [r7, #4]
 80063ec:	460b      	mov	r3, r1
 80063ee:	817b      	strh	r3, [r7, #10]
 80063f0:	4613      	mov	r3, r2
 80063f2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80063f4:	897b      	ldrh	r3, [r7, #10]
 80063f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d00b      	beq.n	8006418 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006400:	897b      	ldrh	r3, [r7, #10]
 8006402:	f003 0207 	and.w	r2, r3, #7
 8006406:	4613      	mov	r3, r2
 8006408:	009b      	lsls	r3, r3, #2
 800640a:	4413      	add	r3, r2
 800640c:	00db      	lsls	r3, r3, #3
 800640e:	3310      	adds	r3, #16
 8006410:	68fa      	ldr	r2, [r7, #12]
 8006412:	4413      	add	r3, r2
 8006414:	617b      	str	r3, [r7, #20]
 8006416:	e009      	b.n	800642c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006418:	897a      	ldrh	r2, [r7, #10]
 800641a:	4613      	mov	r3, r2
 800641c:	009b      	lsls	r3, r3, #2
 800641e:	4413      	add	r3, r2
 8006420:	00db      	lsls	r3, r3, #3
 8006422:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	4413      	add	r3, r2
 800642a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800642c:	893b      	ldrh	r3, [r7, #8]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d107      	bne.n	8006442 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	2200      	movs	r2, #0
 8006436:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	b29a      	uxth	r2, r3
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	80da      	strh	r2, [r3, #6]
 8006440:	e00b      	b.n	800645a <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	2201      	movs	r2, #1
 8006446:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	b29a      	uxth	r2, r3
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	0c1b      	lsrs	r3, r3, #16
 8006454:	b29a      	uxth	r2, r3
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800645a:	2300      	movs	r3, #0
}
 800645c:	4618      	mov	r0, r3
 800645e:	371c      	adds	r7, #28
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr

08006468 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006468:	b480      	push	{r7}
 800646a:	b085      	sub	sp, #20
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2201      	movs	r2, #1
 800647a:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800648c:	b29b      	uxth	r3, r3
 800648e:	f043 0301 	orr.w	r3, r3, #1
 8006492:	b29a      	uxth	r2, r3
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	f043 0302 	orr.w	r3, r3, #2
 80064a6:	b29a      	uxth	r2, r3
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80064ae:	2300      	movs	r3, #0
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3714      	adds	r7, #20
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80064bc:	b480      	push	{r7}
 80064be:	b085      	sub	sp, #20
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d141      	bne.n	800654e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80064ca:	4b4b      	ldr	r3, [pc, #300]	@ (80065f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80064d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064d6:	d131      	bne.n	800653c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80064d8:	4b47      	ldr	r3, [pc, #284]	@ (80065f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064de:	4a46      	ldr	r2, [pc, #280]	@ (80065f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80064e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80064e8:	4b43      	ldr	r3, [pc, #268]	@ (80065f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80064f0:	4a41      	ldr	r2, [pc, #260]	@ (80065f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80064f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80064f8:	4b40      	ldr	r3, [pc, #256]	@ (80065fc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	2232      	movs	r2, #50	@ 0x32
 80064fe:	fb02 f303 	mul.w	r3, r2, r3
 8006502:	4a3f      	ldr	r2, [pc, #252]	@ (8006600 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006504:	fba2 2303 	umull	r2, r3, r2, r3
 8006508:	0c9b      	lsrs	r3, r3, #18
 800650a:	3301      	adds	r3, #1
 800650c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800650e:	e002      	b.n	8006516 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	3b01      	subs	r3, #1
 8006514:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006516:	4b38      	ldr	r3, [pc, #224]	@ (80065f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006518:	695b      	ldr	r3, [r3, #20]
 800651a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800651e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006522:	d102      	bne.n	800652a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d1f2      	bne.n	8006510 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800652a:	4b33      	ldr	r3, [pc, #204]	@ (80065f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800652c:	695b      	ldr	r3, [r3, #20]
 800652e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006532:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006536:	d158      	bne.n	80065ea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006538:	2303      	movs	r3, #3
 800653a:	e057      	b.n	80065ec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800653c:	4b2e      	ldr	r3, [pc, #184]	@ (80065f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800653e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006542:	4a2d      	ldr	r2, [pc, #180]	@ (80065f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006544:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006548:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800654c:	e04d      	b.n	80065ea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006554:	d141      	bne.n	80065da <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006556:	4b28      	ldr	r3, [pc, #160]	@ (80065f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800655e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006562:	d131      	bne.n	80065c8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006564:	4b24      	ldr	r3, [pc, #144]	@ (80065f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006566:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800656a:	4a23      	ldr	r2, [pc, #140]	@ (80065f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800656c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006570:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006574:	4b20      	ldr	r3, [pc, #128]	@ (80065f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800657c:	4a1e      	ldr	r2, [pc, #120]	@ (80065f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800657e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006582:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006584:	4b1d      	ldr	r3, [pc, #116]	@ (80065fc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	2232      	movs	r2, #50	@ 0x32
 800658a:	fb02 f303 	mul.w	r3, r2, r3
 800658e:	4a1c      	ldr	r2, [pc, #112]	@ (8006600 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006590:	fba2 2303 	umull	r2, r3, r2, r3
 8006594:	0c9b      	lsrs	r3, r3, #18
 8006596:	3301      	adds	r3, #1
 8006598:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800659a:	e002      	b.n	80065a2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	3b01      	subs	r3, #1
 80065a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80065a2:	4b15      	ldr	r3, [pc, #84]	@ (80065f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065a4:	695b      	ldr	r3, [r3, #20]
 80065a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065ae:	d102      	bne.n	80065b6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d1f2      	bne.n	800659c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80065b6:	4b10      	ldr	r3, [pc, #64]	@ (80065f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065b8:	695b      	ldr	r3, [r3, #20]
 80065ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065c2:	d112      	bne.n	80065ea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80065c4:	2303      	movs	r3, #3
 80065c6:	e011      	b.n	80065ec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80065c8:	4b0b      	ldr	r3, [pc, #44]	@ (80065f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065ce:	4a0a      	ldr	r2, [pc, #40]	@ (80065f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065d4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80065d8:	e007      	b.n	80065ea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80065da:	4b07      	ldr	r3, [pc, #28]	@ (80065f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80065e2:	4a05      	ldr	r2, [pc, #20]	@ (80065f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065e4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80065e8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80065ea:	2300      	movs	r3, #0
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3714      	adds	r7, #20
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr
 80065f8:	40007000 	.word	0x40007000
 80065fc:	20000000 	.word	0x20000000
 8006600:	431bde83 	.word	0x431bde83

08006604 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006604:	b480      	push	{r7}
 8006606:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006608:	4b05      	ldr	r3, [pc, #20]	@ (8006620 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	4a04      	ldr	r2, [pc, #16]	@ (8006620 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800660e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006612:	6093      	str	r3, [r2, #8]
}
 8006614:	bf00      	nop
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr
 800661e:	bf00      	nop
 8006620:	40007000 	.word	0x40007000

08006624 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b088      	sub	sp, #32
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d101      	bne.n	8006636 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006632:	2301      	movs	r3, #1
 8006634:	e2fe      	b.n	8006c34 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f003 0301 	and.w	r3, r3, #1
 800663e:	2b00      	cmp	r3, #0
 8006640:	d075      	beq.n	800672e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006642:	4b97      	ldr	r3, [pc, #604]	@ (80068a0 <HAL_RCC_OscConfig+0x27c>)
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	f003 030c 	and.w	r3, r3, #12
 800664a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800664c:	4b94      	ldr	r3, [pc, #592]	@ (80068a0 <HAL_RCC_OscConfig+0x27c>)
 800664e:	68db      	ldr	r3, [r3, #12]
 8006650:	f003 0303 	and.w	r3, r3, #3
 8006654:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006656:	69bb      	ldr	r3, [r7, #24]
 8006658:	2b0c      	cmp	r3, #12
 800665a:	d102      	bne.n	8006662 <HAL_RCC_OscConfig+0x3e>
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	2b03      	cmp	r3, #3
 8006660:	d002      	beq.n	8006668 <HAL_RCC_OscConfig+0x44>
 8006662:	69bb      	ldr	r3, [r7, #24]
 8006664:	2b08      	cmp	r3, #8
 8006666:	d10b      	bne.n	8006680 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006668:	4b8d      	ldr	r3, [pc, #564]	@ (80068a0 <HAL_RCC_OscConfig+0x27c>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006670:	2b00      	cmp	r3, #0
 8006672:	d05b      	beq.n	800672c <HAL_RCC_OscConfig+0x108>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d157      	bne.n	800672c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	e2d9      	b.n	8006c34 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006688:	d106      	bne.n	8006698 <HAL_RCC_OscConfig+0x74>
 800668a:	4b85      	ldr	r3, [pc, #532]	@ (80068a0 <HAL_RCC_OscConfig+0x27c>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a84      	ldr	r2, [pc, #528]	@ (80068a0 <HAL_RCC_OscConfig+0x27c>)
 8006690:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006694:	6013      	str	r3, [r2, #0]
 8006696:	e01d      	b.n	80066d4 <HAL_RCC_OscConfig+0xb0>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80066a0:	d10c      	bne.n	80066bc <HAL_RCC_OscConfig+0x98>
 80066a2:	4b7f      	ldr	r3, [pc, #508]	@ (80068a0 <HAL_RCC_OscConfig+0x27c>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a7e      	ldr	r2, [pc, #504]	@ (80068a0 <HAL_RCC_OscConfig+0x27c>)
 80066a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80066ac:	6013      	str	r3, [r2, #0]
 80066ae:	4b7c      	ldr	r3, [pc, #496]	@ (80068a0 <HAL_RCC_OscConfig+0x27c>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a7b      	ldr	r2, [pc, #492]	@ (80068a0 <HAL_RCC_OscConfig+0x27c>)
 80066b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066b8:	6013      	str	r3, [r2, #0]
 80066ba:	e00b      	b.n	80066d4 <HAL_RCC_OscConfig+0xb0>
 80066bc:	4b78      	ldr	r3, [pc, #480]	@ (80068a0 <HAL_RCC_OscConfig+0x27c>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a77      	ldr	r2, [pc, #476]	@ (80068a0 <HAL_RCC_OscConfig+0x27c>)
 80066c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066c6:	6013      	str	r3, [r2, #0]
 80066c8:	4b75      	ldr	r3, [pc, #468]	@ (80068a0 <HAL_RCC_OscConfig+0x27c>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a74      	ldr	r2, [pc, #464]	@ (80068a0 <HAL_RCC_OscConfig+0x27c>)
 80066ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80066d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d013      	beq.n	8006704 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066dc:	f7fb fcde 	bl	800209c <HAL_GetTick>
 80066e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80066e2:	e008      	b.n	80066f6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066e4:	f7fb fcda 	bl	800209c <HAL_GetTick>
 80066e8:	4602      	mov	r2, r0
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	1ad3      	subs	r3, r2, r3
 80066ee:	2b64      	cmp	r3, #100	@ 0x64
 80066f0:	d901      	bls.n	80066f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80066f2:	2303      	movs	r3, #3
 80066f4:	e29e      	b.n	8006c34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80066f6:	4b6a      	ldr	r3, [pc, #424]	@ (80068a0 <HAL_RCC_OscConfig+0x27c>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d0f0      	beq.n	80066e4 <HAL_RCC_OscConfig+0xc0>
 8006702:	e014      	b.n	800672e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006704:	f7fb fcca 	bl	800209c <HAL_GetTick>
 8006708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800670a:	e008      	b.n	800671e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800670c:	f7fb fcc6 	bl	800209c <HAL_GetTick>
 8006710:	4602      	mov	r2, r0
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	1ad3      	subs	r3, r2, r3
 8006716:	2b64      	cmp	r3, #100	@ 0x64
 8006718:	d901      	bls.n	800671e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800671a:	2303      	movs	r3, #3
 800671c:	e28a      	b.n	8006c34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800671e:	4b60      	ldr	r3, [pc, #384]	@ (80068a0 <HAL_RCC_OscConfig+0x27c>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006726:	2b00      	cmp	r3, #0
 8006728:	d1f0      	bne.n	800670c <HAL_RCC_OscConfig+0xe8>
 800672a:	e000      	b.n	800672e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800672c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f003 0302 	and.w	r3, r3, #2
 8006736:	2b00      	cmp	r3, #0
 8006738:	d075      	beq.n	8006826 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800673a:	4b59      	ldr	r3, [pc, #356]	@ (80068a0 <HAL_RCC_OscConfig+0x27c>)
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	f003 030c 	and.w	r3, r3, #12
 8006742:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006744:	4b56      	ldr	r3, [pc, #344]	@ (80068a0 <HAL_RCC_OscConfig+0x27c>)
 8006746:	68db      	ldr	r3, [r3, #12]
 8006748:	f003 0303 	and.w	r3, r3, #3
 800674c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	2b0c      	cmp	r3, #12
 8006752:	d102      	bne.n	800675a <HAL_RCC_OscConfig+0x136>
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	2b02      	cmp	r3, #2
 8006758:	d002      	beq.n	8006760 <HAL_RCC_OscConfig+0x13c>
 800675a:	69bb      	ldr	r3, [r7, #24]
 800675c:	2b04      	cmp	r3, #4
 800675e:	d11f      	bne.n	80067a0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006760:	4b4f      	ldr	r3, [pc, #316]	@ (80068a0 <HAL_RCC_OscConfig+0x27c>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006768:	2b00      	cmp	r3, #0
 800676a:	d005      	beq.n	8006778 <HAL_RCC_OscConfig+0x154>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d101      	bne.n	8006778 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	e25d      	b.n	8006c34 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006778:	4b49      	ldr	r3, [pc, #292]	@ (80068a0 <HAL_RCC_OscConfig+0x27c>)
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	691b      	ldr	r3, [r3, #16]
 8006784:	061b      	lsls	r3, r3, #24
 8006786:	4946      	ldr	r1, [pc, #280]	@ (80068a0 <HAL_RCC_OscConfig+0x27c>)
 8006788:	4313      	orrs	r3, r2
 800678a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800678c:	4b45      	ldr	r3, [pc, #276]	@ (80068a4 <HAL_RCC_OscConfig+0x280>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4618      	mov	r0, r3
 8006792:	f7fb fc37 	bl	8002004 <HAL_InitTick>
 8006796:	4603      	mov	r3, r0
 8006798:	2b00      	cmp	r3, #0
 800679a:	d043      	beq.n	8006824 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800679c:	2301      	movs	r3, #1
 800679e:	e249      	b.n	8006c34 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d023      	beq.n	80067f0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80067a8:	4b3d      	ldr	r3, [pc, #244]	@ (80068a0 <HAL_RCC_OscConfig+0x27c>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a3c      	ldr	r2, [pc, #240]	@ (80068a0 <HAL_RCC_OscConfig+0x27c>)
 80067ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067b4:	f7fb fc72 	bl	800209c <HAL_GetTick>
 80067b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80067ba:	e008      	b.n	80067ce <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067bc:	f7fb fc6e 	bl	800209c <HAL_GetTick>
 80067c0:	4602      	mov	r2, r0
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	1ad3      	subs	r3, r2, r3
 80067c6:	2b02      	cmp	r3, #2
 80067c8:	d901      	bls.n	80067ce <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80067ca:	2303      	movs	r3, #3
 80067cc:	e232      	b.n	8006c34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80067ce:	4b34      	ldr	r3, [pc, #208]	@ (80068a0 <HAL_RCC_OscConfig+0x27c>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d0f0      	beq.n	80067bc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067da:	4b31      	ldr	r3, [pc, #196]	@ (80068a0 <HAL_RCC_OscConfig+0x27c>)
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	691b      	ldr	r3, [r3, #16]
 80067e6:	061b      	lsls	r3, r3, #24
 80067e8:	492d      	ldr	r1, [pc, #180]	@ (80068a0 <HAL_RCC_OscConfig+0x27c>)
 80067ea:	4313      	orrs	r3, r2
 80067ec:	604b      	str	r3, [r1, #4]
 80067ee:	e01a      	b.n	8006826 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80067f0:	4b2b      	ldr	r3, [pc, #172]	@ (80068a0 <HAL_RCC_OscConfig+0x27c>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a2a      	ldr	r2, [pc, #168]	@ (80068a0 <HAL_RCC_OscConfig+0x27c>)
 80067f6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80067fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067fc:	f7fb fc4e 	bl	800209c <HAL_GetTick>
 8006800:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006802:	e008      	b.n	8006816 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006804:	f7fb fc4a 	bl	800209c <HAL_GetTick>
 8006808:	4602      	mov	r2, r0
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	1ad3      	subs	r3, r2, r3
 800680e:	2b02      	cmp	r3, #2
 8006810:	d901      	bls.n	8006816 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006812:	2303      	movs	r3, #3
 8006814:	e20e      	b.n	8006c34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006816:	4b22      	ldr	r3, [pc, #136]	@ (80068a0 <HAL_RCC_OscConfig+0x27c>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800681e:	2b00      	cmp	r3, #0
 8006820:	d1f0      	bne.n	8006804 <HAL_RCC_OscConfig+0x1e0>
 8006822:	e000      	b.n	8006826 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006824:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f003 0308 	and.w	r3, r3, #8
 800682e:	2b00      	cmp	r3, #0
 8006830:	d041      	beq.n	80068b6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	695b      	ldr	r3, [r3, #20]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d01c      	beq.n	8006874 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800683a:	4b19      	ldr	r3, [pc, #100]	@ (80068a0 <HAL_RCC_OscConfig+0x27c>)
 800683c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006840:	4a17      	ldr	r2, [pc, #92]	@ (80068a0 <HAL_RCC_OscConfig+0x27c>)
 8006842:	f043 0301 	orr.w	r3, r3, #1
 8006846:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800684a:	f7fb fc27 	bl	800209c <HAL_GetTick>
 800684e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006850:	e008      	b.n	8006864 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006852:	f7fb fc23 	bl	800209c <HAL_GetTick>
 8006856:	4602      	mov	r2, r0
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	1ad3      	subs	r3, r2, r3
 800685c:	2b02      	cmp	r3, #2
 800685e:	d901      	bls.n	8006864 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006860:	2303      	movs	r3, #3
 8006862:	e1e7      	b.n	8006c34 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006864:	4b0e      	ldr	r3, [pc, #56]	@ (80068a0 <HAL_RCC_OscConfig+0x27c>)
 8006866:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800686a:	f003 0302 	and.w	r3, r3, #2
 800686e:	2b00      	cmp	r3, #0
 8006870:	d0ef      	beq.n	8006852 <HAL_RCC_OscConfig+0x22e>
 8006872:	e020      	b.n	80068b6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006874:	4b0a      	ldr	r3, [pc, #40]	@ (80068a0 <HAL_RCC_OscConfig+0x27c>)
 8006876:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800687a:	4a09      	ldr	r2, [pc, #36]	@ (80068a0 <HAL_RCC_OscConfig+0x27c>)
 800687c:	f023 0301 	bic.w	r3, r3, #1
 8006880:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006884:	f7fb fc0a 	bl	800209c <HAL_GetTick>
 8006888:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800688a:	e00d      	b.n	80068a8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800688c:	f7fb fc06 	bl	800209c <HAL_GetTick>
 8006890:	4602      	mov	r2, r0
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	1ad3      	subs	r3, r2, r3
 8006896:	2b02      	cmp	r3, #2
 8006898:	d906      	bls.n	80068a8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800689a:	2303      	movs	r3, #3
 800689c:	e1ca      	b.n	8006c34 <HAL_RCC_OscConfig+0x610>
 800689e:	bf00      	nop
 80068a0:	40021000 	.word	0x40021000
 80068a4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80068a8:	4b8c      	ldr	r3, [pc, #560]	@ (8006adc <HAL_RCC_OscConfig+0x4b8>)
 80068aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80068ae:	f003 0302 	and.w	r3, r3, #2
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d1ea      	bne.n	800688c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f003 0304 	and.w	r3, r3, #4
 80068be:	2b00      	cmp	r3, #0
 80068c0:	f000 80a6 	beq.w	8006a10 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068c4:	2300      	movs	r3, #0
 80068c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80068c8:	4b84      	ldr	r3, [pc, #528]	@ (8006adc <HAL_RCC_OscConfig+0x4b8>)
 80068ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d101      	bne.n	80068d8 <HAL_RCC_OscConfig+0x2b4>
 80068d4:	2301      	movs	r3, #1
 80068d6:	e000      	b.n	80068da <HAL_RCC_OscConfig+0x2b6>
 80068d8:	2300      	movs	r3, #0
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d00d      	beq.n	80068fa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068de:	4b7f      	ldr	r3, [pc, #508]	@ (8006adc <HAL_RCC_OscConfig+0x4b8>)
 80068e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068e2:	4a7e      	ldr	r2, [pc, #504]	@ (8006adc <HAL_RCC_OscConfig+0x4b8>)
 80068e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80068ea:	4b7c      	ldr	r3, [pc, #496]	@ (8006adc <HAL_RCC_OscConfig+0x4b8>)
 80068ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068f2:	60fb      	str	r3, [r7, #12]
 80068f4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80068f6:	2301      	movs	r3, #1
 80068f8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80068fa:	4b79      	ldr	r3, [pc, #484]	@ (8006ae0 <HAL_RCC_OscConfig+0x4bc>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006902:	2b00      	cmp	r3, #0
 8006904:	d118      	bne.n	8006938 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006906:	4b76      	ldr	r3, [pc, #472]	@ (8006ae0 <HAL_RCC_OscConfig+0x4bc>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a75      	ldr	r2, [pc, #468]	@ (8006ae0 <HAL_RCC_OscConfig+0x4bc>)
 800690c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006910:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006912:	f7fb fbc3 	bl	800209c <HAL_GetTick>
 8006916:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006918:	e008      	b.n	800692c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800691a:	f7fb fbbf 	bl	800209c <HAL_GetTick>
 800691e:	4602      	mov	r2, r0
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	1ad3      	subs	r3, r2, r3
 8006924:	2b02      	cmp	r3, #2
 8006926:	d901      	bls.n	800692c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006928:	2303      	movs	r3, #3
 800692a:	e183      	b.n	8006c34 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800692c:	4b6c      	ldr	r3, [pc, #432]	@ (8006ae0 <HAL_RCC_OscConfig+0x4bc>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006934:	2b00      	cmp	r3, #0
 8006936:	d0f0      	beq.n	800691a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	2b01      	cmp	r3, #1
 800693e:	d108      	bne.n	8006952 <HAL_RCC_OscConfig+0x32e>
 8006940:	4b66      	ldr	r3, [pc, #408]	@ (8006adc <HAL_RCC_OscConfig+0x4b8>)
 8006942:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006946:	4a65      	ldr	r2, [pc, #404]	@ (8006adc <HAL_RCC_OscConfig+0x4b8>)
 8006948:	f043 0301 	orr.w	r3, r3, #1
 800694c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006950:	e024      	b.n	800699c <HAL_RCC_OscConfig+0x378>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	2b05      	cmp	r3, #5
 8006958:	d110      	bne.n	800697c <HAL_RCC_OscConfig+0x358>
 800695a:	4b60      	ldr	r3, [pc, #384]	@ (8006adc <HAL_RCC_OscConfig+0x4b8>)
 800695c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006960:	4a5e      	ldr	r2, [pc, #376]	@ (8006adc <HAL_RCC_OscConfig+0x4b8>)
 8006962:	f043 0304 	orr.w	r3, r3, #4
 8006966:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800696a:	4b5c      	ldr	r3, [pc, #368]	@ (8006adc <HAL_RCC_OscConfig+0x4b8>)
 800696c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006970:	4a5a      	ldr	r2, [pc, #360]	@ (8006adc <HAL_RCC_OscConfig+0x4b8>)
 8006972:	f043 0301 	orr.w	r3, r3, #1
 8006976:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800697a:	e00f      	b.n	800699c <HAL_RCC_OscConfig+0x378>
 800697c:	4b57      	ldr	r3, [pc, #348]	@ (8006adc <HAL_RCC_OscConfig+0x4b8>)
 800697e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006982:	4a56      	ldr	r2, [pc, #344]	@ (8006adc <HAL_RCC_OscConfig+0x4b8>)
 8006984:	f023 0301 	bic.w	r3, r3, #1
 8006988:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800698c:	4b53      	ldr	r3, [pc, #332]	@ (8006adc <HAL_RCC_OscConfig+0x4b8>)
 800698e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006992:	4a52      	ldr	r2, [pc, #328]	@ (8006adc <HAL_RCC_OscConfig+0x4b8>)
 8006994:	f023 0304 	bic.w	r3, r3, #4
 8006998:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d016      	beq.n	80069d2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069a4:	f7fb fb7a 	bl	800209c <HAL_GetTick>
 80069a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80069aa:	e00a      	b.n	80069c2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069ac:	f7fb fb76 	bl	800209c <HAL_GetTick>
 80069b0:	4602      	mov	r2, r0
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	1ad3      	subs	r3, r2, r3
 80069b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d901      	bls.n	80069c2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80069be:	2303      	movs	r3, #3
 80069c0:	e138      	b.n	8006c34 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80069c2:	4b46      	ldr	r3, [pc, #280]	@ (8006adc <HAL_RCC_OscConfig+0x4b8>)
 80069c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069c8:	f003 0302 	and.w	r3, r3, #2
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d0ed      	beq.n	80069ac <HAL_RCC_OscConfig+0x388>
 80069d0:	e015      	b.n	80069fe <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069d2:	f7fb fb63 	bl	800209c <HAL_GetTick>
 80069d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80069d8:	e00a      	b.n	80069f0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069da:	f7fb fb5f 	bl	800209c <HAL_GetTick>
 80069de:	4602      	mov	r2, r0
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	1ad3      	subs	r3, r2, r3
 80069e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d901      	bls.n	80069f0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80069ec:	2303      	movs	r3, #3
 80069ee:	e121      	b.n	8006c34 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80069f0:	4b3a      	ldr	r3, [pc, #232]	@ (8006adc <HAL_RCC_OscConfig+0x4b8>)
 80069f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069f6:	f003 0302 	and.w	r3, r3, #2
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d1ed      	bne.n	80069da <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80069fe:	7ffb      	ldrb	r3, [r7, #31]
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d105      	bne.n	8006a10 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a04:	4b35      	ldr	r3, [pc, #212]	@ (8006adc <HAL_RCC_OscConfig+0x4b8>)
 8006a06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a08:	4a34      	ldr	r2, [pc, #208]	@ (8006adc <HAL_RCC_OscConfig+0x4b8>)
 8006a0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006a0e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f003 0320 	and.w	r3, r3, #32
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d03c      	beq.n	8006a96 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	699b      	ldr	r3, [r3, #24]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d01c      	beq.n	8006a5e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006a24:	4b2d      	ldr	r3, [pc, #180]	@ (8006adc <HAL_RCC_OscConfig+0x4b8>)
 8006a26:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a2a:	4a2c      	ldr	r2, [pc, #176]	@ (8006adc <HAL_RCC_OscConfig+0x4b8>)
 8006a2c:	f043 0301 	orr.w	r3, r3, #1
 8006a30:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a34:	f7fb fb32 	bl	800209c <HAL_GetTick>
 8006a38:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006a3a:	e008      	b.n	8006a4e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006a3c:	f7fb fb2e 	bl	800209c <HAL_GetTick>
 8006a40:	4602      	mov	r2, r0
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	1ad3      	subs	r3, r2, r3
 8006a46:	2b02      	cmp	r3, #2
 8006a48:	d901      	bls.n	8006a4e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006a4a:	2303      	movs	r3, #3
 8006a4c:	e0f2      	b.n	8006c34 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006a4e:	4b23      	ldr	r3, [pc, #140]	@ (8006adc <HAL_RCC_OscConfig+0x4b8>)
 8006a50:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a54:	f003 0302 	and.w	r3, r3, #2
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d0ef      	beq.n	8006a3c <HAL_RCC_OscConfig+0x418>
 8006a5c:	e01b      	b.n	8006a96 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006a5e:	4b1f      	ldr	r3, [pc, #124]	@ (8006adc <HAL_RCC_OscConfig+0x4b8>)
 8006a60:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a64:	4a1d      	ldr	r2, [pc, #116]	@ (8006adc <HAL_RCC_OscConfig+0x4b8>)
 8006a66:	f023 0301 	bic.w	r3, r3, #1
 8006a6a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a6e:	f7fb fb15 	bl	800209c <HAL_GetTick>
 8006a72:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006a74:	e008      	b.n	8006a88 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006a76:	f7fb fb11 	bl	800209c <HAL_GetTick>
 8006a7a:	4602      	mov	r2, r0
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	1ad3      	subs	r3, r2, r3
 8006a80:	2b02      	cmp	r3, #2
 8006a82:	d901      	bls.n	8006a88 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006a84:	2303      	movs	r3, #3
 8006a86:	e0d5      	b.n	8006c34 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006a88:	4b14      	ldr	r3, [pc, #80]	@ (8006adc <HAL_RCC_OscConfig+0x4b8>)
 8006a8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a8e:	f003 0302 	and.w	r3, r3, #2
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d1ef      	bne.n	8006a76 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	69db      	ldr	r3, [r3, #28]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	f000 80c9 	beq.w	8006c32 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006aa0:	4b0e      	ldr	r3, [pc, #56]	@ (8006adc <HAL_RCC_OscConfig+0x4b8>)
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	f003 030c 	and.w	r3, r3, #12
 8006aa8:	2b0c      	cmp	r3, #12
 8006aaa:	f000 8083 	beq.w	8006bb4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	69db      	ldr	r3, [r3, #28]
 8006ab2:	2b02      	cmp	r3, #2
 8006ab4:	d15e      	bne.n	8006b74 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ab6:	4b09      	ldr	r3, [pc, #36]	@ (8006adc <HAL_RCC_OscConfig+0x4b8>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a08      	ldr	r2, [pc, #32]	@ (8006adc <HAL_RCC_OscConfig+0x4b8>)
 8006abc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006ac0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ac2:	f7fb faeb 	bl	800209c <HAL_GetTick>
 8006ac6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ac8:	e00c      	b.n	8006ae4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006aca:	f7fb fae7 	bl	800209c <HAL_GetTick>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	1ad3      	subs	r3, r2, r3
 8006ad4:	2b02      	cmp	r3, #2
 8006ad6:	d905      	bls.n	8006ae4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006ad8:	2303      	movs	r3, #3
 8006ada:	e0ab      	b.n	8006c34 <HAL_RCC_OscConfig+0x610>
 8006adc:	40021000 	.word	0x40021000
 8006ae0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ae4:	4b55      	ldr	r3, [pc, #340]	@ (8006c3c <HAL_RCC_OscConfig+0x618>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d1ec      	bne.n	8006aca <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006af0:	4b52      	ldr	r3, [pc, #328]	@ (8006c3c <HAL_RCC_OscConfig+0x618>)
 8006af2:	68da      	ldr	r2, [r3, #12]
 8006af4:	4b52      	ldr	r3, [pc, #328]	@ (8006c40 <HAL_RCC_OscConfig+0x61c>)
 8006af6:	4013      	ands	r3, r2
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	6a11      	ldr	r1, [r2, #32]
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006b00:	3a01      	subs	r2, #1
 8006b02:	0112      	lsls	r2, r2, #4
 8006b04:	4311      	orrs	r1, r2
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006b0a:	0212      	lsls	r2, r2, #8
 8006b0c:	4311      	orrs	r1, r2
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006b12:	0852      	lsrs	r2, r2, #1
 8006b14:	3a01      	subs	r2, #1
 8006b16:	0552      	lsls	r2, r2, #21
 8006b18:	4311      	orrs	r1, r2
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006b1e:	0852      	lsrs	r2, r2, #1
 8006b20:	3a01      	subs	r2, #1
 8006b22:	0652      	lsls	r2, r2, #25
 8006b24:	4311      	orrs	r1, r2
 8006b26:	687a      	ldr	r2, [r7, #4]
 8006b28:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006b2a:	06d2      	lsls	r2, r2, #27
 8006b2c:	430a      	orrs	r2, r1
 8006b2e:	4943      	ldr	r1, [pc, #268]	@ (8006c3c <HAL_RCC_OscConfig+0x618>)
 8006b30:	4313      	orrs	r3, r2
 8006b32:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b34:	4b41      	ldr	r3, [pc, #260]	@ (8006c3c <HAL_RCC_OscConfig+0x618>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a40      	ldr	r2, [pc, #256]	@ (8006c3c <HAL_RCC_OscConfig+0x618>)
 8006b3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006b3e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006b40:	4b3e      	ldr	r3, [pc, #248]	@ (8006c3c <HAL_RCC_OscConfig+0x618>)
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	4a3d      	ldr	r2, [pc, #244]	@ (8006c3c <HAL_RCC_OscConfig+0x618>)
 8006b46:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006b4a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b4c:	f7fb faa6 	bl	800209c <HAL_GetTick>
 8006b50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b52:	e008      	b.n	8006b66 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b54:	f7fb faa2 	bl	800209c <HAL_GetTick>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	1ad3      	subs	r3, r2, r3
 8006b5e:	2b02      	cmp	r3, #2
 8006b60:	d901      	bls.n	8006b66 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006b62:	2303      	movs	r3, #3
 8006b64:	e066      	b.n	8006c34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b66:	4b35      	ldr	r3, [pc, #212]	@ (8006c3c <HAL_RCC_OscConfig+0x618>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d0f0      	beq.n	8006b54 <HAL_RCC_OscConfig+0x530>
 8006b72:	e05e      	b.n	8006c32 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b74:	4b31      	ldr	r3, [pc, #196]	@ (8006c3c <HAL_RCC_OscConfig+0x618>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a30      	ldr	r2, [pc, #192]	@ (8006c3c <HAL_RCC_OscConfig+0x618>)
 8006b7a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006b7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b80:	f7fb fa8c 	bl	800209c <HAL_GetTick>
 8006b84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b86:	e008      	b.n	8006b9a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b88:	f7fb fa88 	bl	800209c <HAL_GetTick>
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	1ad3      	subs	r3, r2, r3
 8006b92:	2b02      	cmp	r3, #2
 8006b94:	d901      	bls.n	8006b9a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006b96:	2303      	movs	r3, #3
 8006b98:	e04c      	b.n	8006c34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b9a:	4b28      	ldr	r3, [pc, #160]	@ (8006c3c <HAL_RCC_OscConfig+0x618>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d1f0      	bne.n	8006b88 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006ba6:	4b25      	ldr	r3, [pc, #148]	@ (8006c3c <HAL_RCC_OscConfig+0x618>)
 8006ba8:	68da      	ldr	r2, [r3, #12]
 8006baa:	4924      	ldr	r1, [pc, #144]	@ (8006c3c <HAL_RCC_OscConfig+0x618>)
 8006bac:	4b25      	ldr	r3, [pc, #148]	@ (8006c44 <HAL_RCC_OscConfig+0x620>)
 8006bae:	4013      	ands	r3, r2
 8006bb0:	60cb      	str	r3, [r1, #12]
 8006bb2:	e03e      	b.n	8006c32 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	69db      	ldr	r3, [r3, #28]
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d101      	bne.n	8006bc0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	e039      	b.n	8006c34 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006bc0:	4b1e      	ldr	r3, [pc, #120]	@ (8006c3c <HAL_RCC_OscConfig+0x618>)
 8006bc2:	68db      	ldr	r3, [r3, #12]
 8006bc4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	f003 0203 	and.w	r2, r3, #3
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6a1b      	ldr	r3, [r3, #32]
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d12c      	bne.n	8006c2e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bde:	3b01      	subs	r3, #1
 8006be0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d123      	bne.n	8006c2e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bf0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d11b      	bne.n	8006c2e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c00:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d113      	bne.n	8006c2e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c10:	085b      	lsrs	r3, r3, #1
 8006c12:	3b01      	subs	r3, #1
 8006c14:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006c16:	429a      	cmp	r2, r3
 8006c18:	d109      	bne.n	8006c2e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c24:	085b      	lsrs	r3, r3, #1
 8006c26:	3b01      	subs	r3, #1
 8006c28:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d001      	beq.n	8006c32 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e000      	b.n	8006c34 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006c32:	2300      	movs	r3, #0
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3720      	adds	r7, #32
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}
 8006c3c:	40021000 	.word	0x40021000
 8006c40:	019f800c 	.word	0x019f800c
 8006c44:	feeefffc 	.word	0xfeeefffc

08006c48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b086      	sub	sp, #24
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006c52:	2300      	movs	r3, #0
 8006c54:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d101      	bne.n	8006c60 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e11e      	b.n	8006e9e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006c60:	4b91      	ldr	r3, [pc, #580]	@ (8006ea8 <HAL_RCC_ClockConfig+0x260>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f003 030f 	and.w	r3, r3, #15
 8006c68:	683a      	ldr	r2, [r7, #0]
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d910      	bls.n	8006c90 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c6e:	4b8e      	ldr	r3, [pc, #568]	@ (8006ea8 <HAL_RCC_ClockConfig+0x260>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f023 020f 	bic.w	r2, r3, #15
 8006c76:	498c      	ldr	r1, [pc, #560]	@ (8006ea8 <HAL_RCC_ClockConfig+0x260>)
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c7e:	4b8a      	ldr	r3, [pc, #552]	@ (8006ea8 <HAL_RCC_ClockConfig+0x260>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f003 030f 	and.w	r3, r3, #15
 8006c86:	683a      	ldr	r2, [r7, #0]
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d001      	beq.n	8006c90 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	e106      	b.n	8006e9e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f003 0301 	and.w	r3, r3, #1
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d073      	beq.n	8006d84 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	2b03      	cmp	r3, #3
 8006ca2:	d129      	bne.n	8006cf8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ca4:	4b81      	ldr	r3, [pc, #516]	@ (8006eac <HAL_RCC_ClockConfig+0x264>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d101      	bne.n	8006cb4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	e0f4      	b.n	8006e9e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006cb4:	f000 f966 	bl	8006f84 <RCC_GetSysClockFreqFromPLLSource>
 8006cb8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	4a7c      	ldr	r2, [pc, #496]	@ (8006eb0 <HAL_RCC_ClockConfig+0x268>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d93f      	bls.n	8006d42 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006cc2:	4b7a      	ldr	r3, [pc, #488]	@ (8006eac <HAL_RCC_ClockConfig+0x264>)
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d009      	beq.n	8006ce2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d033      	beq.n	8006d42 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d12f      	bne.n	8006d42 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006ce2:	4b72      	ldr	r3, [pc, #456]	@ (8006eac <HAL_RCC_ClockConfig+0x264>)
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006cea:	4a70      	ldr	r2, [pc, #448]	@ (8006eac <HAL_RCC_ClockConfig+0x264>)
 8006cec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cf0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006cf2:	2380      	movs	r3, #128	@ 0x80
 8006cf4:	617b      	str	r3, [r7, #20]
 8006cf6:	e024      	b.n	8006d42 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	2b02      	cmp	r3, #2
 8006cfe:	d107      	bne.n	8006d10 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006d00:	4b6a      	ldr	r3, [pc, #424]	@ (8006eac <HAL_RCC_ClockConfig+0x264>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d109      	bne.n	8006d20 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	e0c6      	b.n	8006e9e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006d10:	4b66      	ldr	r3, [pc, #408]	@ (8006eac <HAL_RCC_ClockConfig+0x264>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d101      	bne.n	8006d20 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	e0be      	b.n	8006e9e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006d20:	f000 f8ce 	bl	8006ec0 <HAL_RCC_GetSysClockFreq>
 8006d24:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	4a61      	ldr	r2, [pc, #388]	@ (8006eb0 <HAL_RCC_ClockConfig+0x268>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d909      	bls.n	8006d42 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006d2e:	4b5f      	ldr	r3, [pc, #380]	@ (8006eac <HAL_RCC_ClockConfig+0x264>)
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006d36:	4a5d      	ldr	r2, [pc, #372]	@ (8006eac <HAL_RCC_ClockConfig+0x264>)
 8006d38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d3c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006d3e:	2380      	movs	r3, #128	@ 0x80
 8006d40:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006d42:	4b5a      	ldr	r3, [pc, #360]	@ (8006eac <HAL_RCC_ClockConfig+0x264>)
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	f023 0203 	bic.w	r2, r3, #3
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	4957      	ldr	r1, [pc, #348]	@ (8006eac <HAL_RCC_ClockConfig+0x264>)
 8006d50:	4313      	orrs	r3, r2
 8006d52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d54:	f7fb f9a2 	bl	800209c <HAL_GetTick>
 8006d58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d5a:	e00a      	b.n	8006d72 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d5c:	f7fb f99e 	bl	800209c <HAL_GetTick>
 8006d60:	4602      	mov	r2, r0
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	1ad3      	subs	r3, r2, r3
 8006d66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d901      	bls.n	8006d72 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006d6e:	2303      	movs	r3, #3
 8006d70:	e095      	b.n	8006e9e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d72:	4b4e      	ldr	r3, [pc, #312]	@ (8006eac <HAL_RCC_ClockConfig+0x264>)
 8006d74:	689b      	ldr	r3, [r3, #8]
 8006d76:	f003 020c 	and.w	r2, r3, #12
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d1eb      	bne.n	8006d5c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f003 0302 	and.w	r3, r3, #2
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d023      	beq.n	8006dd8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f003 0304 	and.w	r3, r3, #4
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d005      	beq.n	8006da8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d9c:	4b43      	ldr	r3, [pc, #268]	@ (8006eac <HAL_RCC_ClockConfig+0x264>)
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	4a42      	ldr	r2, [pc, #264]	@ (8006eac <HAL_RCC_ClockConfig+0x264>)
 8006da2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006da6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f003 0308 	and.w	r3, r3, #8
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d007      	beq.n	8006dc4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006db4:	4b3d      	ldr	r3, [pc, #244]	@ (8006eac <HAL_RCC_ClockConfig+0x264>)
 8006db6:	689b      	ldr	r3, [r3, #8]
 8006db8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006dbc:	4a3b      	ldr	r2, [pc, #236]	@ (8006eac <HAL_RCC_ClockConfig+0x264>)
 8006dbe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006dc2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006dc4:	4b39      	ldr	r3, [pc, #228]	@ (8006eac <HAL_RCC_ClockConfig+0x264>)
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	4936      	ldr	r1, [pc, #216]	@ (8006eac <HAL_RCC_ClockConfig+0x264>)
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	608b      	str	r3, [r1, #8]
 8006dd6:	e008      	b.n	8006dea <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	2b80      	cmp	r3, #128	@ 0x80
 8006ddc:	d105      	bne.n	8006dea <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006dde:	4b33      	ldr	r3, [pc, #204]	@ (8006eac <HAL_RCC_ClockConfig+0x264>)
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	4a32      	ldr	r2, [pc, #200]	@ (8006eac <HAL_RCC_ClockConfig+0x264>)
 8006de4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006de8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006dea:	4b2f      	ldr	r3, [pc, #188]	@ (8006ea8 <HAL_RCC_ClockConfig+0x260>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f003 030f 	and.w	r3, r3, #15
 8006df2:	683a      	ldr	r2, [r7, #0]
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d21d      	bcs.n	8006e34 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006df8:	4b2b      	ldr	r3, [pc, #172]	@ (8006ea8 <HAL_RCC_ClockConfig+0x260>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f023 020f 	bic.w	r2, r3, #15
 8006e00:	4929      	ldr	r1, [pc, #164]	@ (8006ea8 <HAL_RCC_ClockConfig+0x260>)
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	4313      	orrs	r3, r2
 8006e06:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006e08:	f7fb f948 	bl	800209c <HAL_GetTick>
 8006e0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e0e:	e00a      	b.n	8006e26 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e10:	f7fb f944 	bl	800209c <HAL_GetTick>
 8006e14:	4602      	mov	r2, r0
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	1ad3      	subs	r3, r2, r3
 8006e1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d901      	bls.n	8006e26 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006e22:	2303      	movs	r3, #3
 8006e24:	e03b      	b.n	8006e9e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e26:	4b20      	ldr	r3, [pc, #128]	@ (8006ea8 <HAL_RCC_ClockConfig+0x260>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f003 030f 	and.w	r3, r3, #15
 8006e2e:	683a      	ldr	r2, [r7, #0]
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d1ed      	bne.n	8006e10 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f003 0304 	and.w	r3, r3, #4
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d008      	beq.n	8006e52 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e40:	4b1a      	ldr	r3, [pc, #104]	@ (8006eac <HAL_RCC_ClockConfig+0x264>)
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	4917      	ldr	r1, [pc, #92]	@ (8006eac <HAL_RCC_ClockConfig+0x264>)
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f003 0308 	and.w	r3, r3, #8
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d009      	beq.n	8006e72 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006e5e:	4b13      	ldr	r3, [pc, #76]	@ (8006eac <HAL_RCC_ClockConfig+0x264>)
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	691b      	ldr	r3, [r3, #16]
 8006e6a:	00db      	lsls	r3, r3, #3
 8006e6c:	490f      	ldr	r1, [pc, #60]	@ (8006eac <HAL_RCC_ClockConfig+0x264>)
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006e72:	f000 f825 	bl	8006ec0 <HAL_RCC_GetSysClockFreq>
 8006e76:	4602      	mov	r2, r0
 8006e78:	4b0c      	ldr	r3, [pc, #48]	@ (8006eac <HAL_RCC_ClockConfig+0x264>)
 8006e7a:	689b      	ldr	r3, [r3, #8]
 8006e7c:	091b      	lsrs	r3, r3, #4
 8006e7e:	f003 030f 	and.w	r3, r3, #15
 8006e82:	490c      	ldr	r1, [pc, #48]	@ (8006eb4 <HAL_RCC_ClockConfig+0x26c>)
 8006e84:	5ccb      	ldrb	r3, [r1, r3]
 8006e86:	f003 031f 	and.w	r3, r3, #31
 8006e8a:	fa22 f303 	lsr.w	r3, r2, r3
 8006e8e:	4a0a      	ldr	r2, [pc, #40]	@ (8006eb8 <HAL_RCC_ClockConfig+0x270>)
 8006e90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006e92:	4b0a      	ldr	r3, [pc, #40]	@ (8006ebc <HAL_RCC_ClockConfig+0x274>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4618      	mov	r0, r3
 8006e98:	f7fb f8b4 	bl	8002004 <HAL_InitTick>
 8006e9c:	4603      	mov	r3, r0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3718      	adds	r7, #24
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	bf00      	nop
 8006ea8:	40022000 	.word	0x40022000
 8006eac:	40021000 	.word	0x40021000
 8006eb0:	04c4b400 	.word	0x04c4b400
 8006eb4:	0800fef8 	.word	0x0800fef8
 8006eb8:	20000000 	.word	0x20000000
 8006ebc:	20000004 	.word	0x20000004

08006ec0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b087      	sub	sp, #28
 8006ec4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006ec6:	4b2c      	ldr	r3, [pc, #176]	@ (8006f78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ec8:	689b      	ldr	r3, [r3, #8]
 8006eca:	f003 030c 	and.w	r3, r3, #12
 8006ece:	2b04      	cmp	r3, #4
 8006ed0:	d102      	bne.n	8006ed8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006ed2:	4b2a      	ldr	r3, [pc, #168]	@ (8006f7c <HAL_RCC_GetSysClockFreq+0xbc>)
 8006ed4:	613b      	str	r3, [r7, #16]
 8006ed6:	e047      	b.n	8006f68 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006ed8:	4b27      	ldr	r3, [pc, #156]	@ (8006f78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006eda:	689b      	ldr	r3, [r3, #8]
 8006edc:	f003 030c 	and.w	r3, r3, #12
 8006ee0:	2b08      	cmp	r3, #8
 8006ee2:	d102      	bne.n	8006eea <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006ee4:	4b26      	ldr	r3, [pc, #152]	@ (8006f80 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006ee6:	613b      	str	r3, [r7, #16]
 8006ee8:	e03e      	b.n	8006f68 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006eea:	4b23      	ldr	r3, [pc, #140]	@ (8006f78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	f003 030c 	and.w	r3, r3, #12
 8006ef2:	2b0c      	cmp	r3, #12
 8006ef4:	d136      	bne.n	8006f64 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006ef6:	4b20      	ldr	r3, [pc, #128]	@ (8006f78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ef8:	68db      	ldr	r3, [r3, #12]
 8006efa:	f003 0303 	and.w	r3, r3, #3
 8006efe:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006f00:	4b1d      	ldr	r3, [pc, #116]	@ (8006f78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006f02:	68db      	ldr	r3, [r3, #12]
 8006f04:	091b      	lsrs	r3, r3, #4
 8006f06:	f003 030f 	and.w	r3, r3, #15
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2b03      	cmp	r3, #3
 8006f12:	d10c      	bne.n	8006f2e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006f14:	4a1a      	ldr	r2, [pc, #104]	@ (8006f80 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f1c:	4a16      	ldr	r2, [pc, #88]	@ (8006f78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006f1e:	68d2      	ldr	r2, [r2, #12]
 8006f20:	0a12      	lsrs	r2, r2, #8
 8006f22:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006f26:	fb02 f303 	mul.w	r3, r2, r3
 8006f2a:	617b      	str	r3, [r7, #20]
      break;
 8006f2c:	e00c      	b.n	8006f48 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006f2e:	4a13      	ldr	r2, [pc, #76]	@ (8006f7c <HAL_RCC_GetSysClockFreq+0xbc>)
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f36:	4a10      	ldr	r2, [pc, #64]	@ (8006f78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006f38:	68d2      	ldr	r2, [r2, #12]
 8006f3a:	0a12      	lsrs	r2, r2, #8
 8006f3c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006f40:	fb02 f303 	mul.w	r3, r2, r3
 8006f44:	617b      	str	r3, [r7, #20]
      break;
 8006f46:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006f48:	4b0b      	ldr	r3, [pc, #44]	@ (8006f78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	0e5b      	lsrs	r3, r3, #25
 8006f4e:	f003 0303 	and.w	r3, r3, #3
 8006f52:	3301      	adds	r3, #1
 8006f54:	005b      	lsls	r3, r3, #1
 8006f56:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006f58:	697a      	ldr	r2, [r7, #20]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f60:	613b      	str	r3, [r7, #16]
 8006f62:	e001      	b.n	8006f68 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006f64:	2300      	movs	r3, #0
 8006f66:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006f68:	693b      	ldr	r3, [r7, #16]
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	371c      	adds	r7, #28
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr
 8006f76:	bf00      	nop
 8006f78:	40021000 	.word	0x40021000
 8006f7c:	00f42400 	.word	0x00f42400
 8006f80:	007a1200 	.word	0x007a1200

08006f84 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b087      	sub	sp, #28
 8006f88:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006f8a:	4b1e      	ldr	r3, [pc, #120]	@ (8007004 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	f003 0303 	and.w	r3, r3, #3
 8006f92:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006f94:	4b1b      	ldr	r3, [pc, #108]	@ (8007004 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006f96:	68db      	ldr	r3, [r3, #12]
 8006f98:	091b      	lsrs	r3, r3, #4
 8006f9a:	f003 030f 	and.w	r3, r3, #15
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	2b03      	cmp	r3, #3
 8006fa6:	d10c      	bne.n	8006fc2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006fa8:	4a17      	ldr	r2, [pc, #92]	@ (8007008 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fb0:	4a14      	ldr	r2, [pc, #80]	@ (8007004 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006fb2:	68d2      	ldr	r2, [r2, #12]
 8006fb4:	0a12      	lsrs	r2, r2, #8
 8006fb6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006fba:	fb02 f303 	mul.w	r3, r2, r3
 8006fbe:	617b      	str	r3, [r7, #20]
    break;
 8006fc0:	e00c      	b.n	8006fdc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006fc2:	4a12      	ldr	r2, [pc, #72]	@ (800700c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fca:	4a0e      	ldr	r2, [pc, #56]	@ (8007004 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006fcc:	68d2      	ldr	r2, [r2, #12]
 8006fce:	0a12      	lsrs	r2, r2, #8
 8006fd0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006fd4:	fb02 f303 	mul.w	r3, r2, r3
 8006fd8:	617b      	str	r3, [r7, #20]
    break;
 8006fda:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006fdc:	4b09      	ldr	r3, [pc, #36]	@ (8007004 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	0e5b      	lsrs	r3, r3, #25
 8006fe2:	f003 0303 	and.w	r3, r3, #3
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	005b      	lsls	r3, r3, #1
 8006fea:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006fec:	697a      	ldr	r2, [r7, #20]
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ff4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006ff6:	687b      	ldr	r3, [r7, #4]
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	371c      	adds	r7, #28
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr
 8007004:	40021000 	.word	0x40021000
 8007008:	007a1200 	.word	0x007a1200
 800700c:	00f42400 	.word	0x00f42400

08007010 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b086      	sub	sp, #24
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007018:	2300      	movs	r3, #0
 800701a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800701c:	2300      	movs	r3, #0
 800701e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007028:	2b00      	cmp	r3, #0
 800702a:	f000 8098 	beq.w	800715e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800702e:	2300      	movs	r3, #0
 8007030:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007032:	4b43      	ldr	r3, [pc, #268]	@ (8007140 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007034:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007036:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800703a:	2b00      	cmp	r3, #0
 800703c:	d10d      	bne.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800703e:	4b40      	ldr	r3, [pc, #256]	@ (8007140 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007040:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007042:	4a3f      	ldr	r2, [pc, #252]	@ (8007140 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007044:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007048:	6593      	str	r3, [r2, #88]	@ 0x58
 800704a:	4b3d      	ldr	r3, [pc, #244]	@ (8007140 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800704c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800704e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007052:	60bb      	str	r3, [r7, #8]
 8007054:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007056:	2301      	movs	r3, #1
 8007058:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800705a:	4b3a      	ldr	r3, [pc, #232]	@ (8007144 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a39      	ldr	r2, [pc, #228]	@ (8007144 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007060:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007064:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007066:	f7fb f819 	bl	800209c <HAL_GetTick>
 800706a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800706c:	e009      	b.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800706e:	f7fb f815 	bl	800209c <HAL_GetTick>
 8007072:	4602      	mov	r2, r0
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	1ad3      	subs	r3, r2, r3
 8007078:	2b02      	cmp	r3, #2
 800707a:	d902      	bls.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800707c:	2303      	movs	r3, #3
 800707e:	74fb      	strb	r3, [r7, #19]
        break;
 8007080:	e005      	b.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007082:	4b30      	ldr	r3, [pc, #192]	@ (8007144 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800708a:	2b00      	cmp	r3, #0
 800708c:	d0ef      	beq.n	800706e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800708e:	7cfb      	ldrb	r3, [r7, #19]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d159      	bne.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007094:	4b2a      	ldr	r3, [pc, #168]	@ (8007140 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007096:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800709a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800709e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d01e      	beq.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070aa:	697a      	ldr	r2, [r7, #20]
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d019      	beq.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80070b0:	4b23      	ldr	r3, [pc, #140]	@ (8007140 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80070b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80070ba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80070bc:	4b20      	ldr	r3, [pc, #128]	@ (8007140 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80070be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070c2:	4a1f      	ldr	r2, [pc, #124]	@ (8007140 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80070c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80070c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80070cc:	4b1c      	ldr	r3, [pc, #112]	@ (8007140 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80070ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070d2:	4a1b      	ldr	r2, [pc, #108]	@ (8007140 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80070d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80070d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80070dc:	4a18      	ldr	r2, [pc, #96]	@ (8007140 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	f003 0301 	and.w	r3, r3, #1
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d016      	beq.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070ee:	f7fa ffd5 	bl	800209c <HAL_GetTick>
 80070f2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80070f4:	e00b      	b.n	800710e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070f6:	f7fa ffd1 	bl	800209c <HAL_GetTick>
 80070fa:	4602      	mov	r2, r0
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	1ad3      	subs	r3, r2, r3
 8007100:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007104:	4293      	cmp	r3, r2
 8007106:	d902      	bls.n	800710e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007108:	2303      	movs	r3, #3
 800710a:	74fb      	strb	r3, [r7, #19]
            break;
 800710c:	e006      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800710e:	4b0c      	ldr	r3, [pc, #48]	@ (8007140 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007110:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007114:	f003 0302 	and.w	r3, r3, #2
 8007118:	2b00      	cmp	r3, #0
 800711a:	d0ec      	beq.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800711c:	7cfb      	ldrb	r3, [r7, #19]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d10b      	bne.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007122:	4b07      	ldr	r3, [pc, #28]	@ (8007140 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007124:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007128:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007130:	4903      	ldr	r1, [pc, #12]	@ (8007140 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007132:	4313      	orrs	r3, r2
 8007134:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007138:	e008      	b.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800713a:	7cfb      	ldrb	r3, [r7, #19]
 800713c:	74bb      	strb	r3, [r7, #18]
 800713e:	e005      	b.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007140:	40021000 	.word	0x40021000
 8007144:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007148:	7cfb      	ldrb	r3, [r7, #19]
 800714a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800714c:	7c7b      	ldrb	r3, [r7, #17]
 800714e:	2b01      	cmp	r3, #1
 8007150:	d105      	bne.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007152:	4ba7      	ldr	r3, [pc, #668]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007154:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007156:	4aa6      	ldr	r2, [pc, #664]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007158:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800715c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f003 0301 	and.w	r3, r3, #1
 8007166:	2b00      	cmp	r3, #0
 8007168:	d00a      	beq.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800716a:	4ba1      	ldr	r3, [pc, #644]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800716c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007170:	f023 0203 	bic.w	r2, r3, #3
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	499d      	ldr	r1, [pc, #628]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800717a:	4313      	orrs	r3, r2
 800717c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f003 0302 	and.w	r3, r3, #2
 8007188:	2b00      	cmp	r3, #0
 800718a:	d00a      	beq.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800718c:	4b98      	ldr	r3, [pc, #608]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800718e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007192:	f023 020c 	bic.w	r2, r3, #12
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	4995      	ldr	r1, [pc, #596]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800719c:	4313      	orrs	r3, r2
 800719e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f003 0304 	and.w	r3, r3, #4
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d00a      	beq.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80071ae:	4b90      	ldr	r3, [pc, #576]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071b4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	68db      	ldr	r3, [r3, #12]
 80071bc:	498c      	ldr	r1, [pc, #560]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071be:	4313      	orrs	r3, r2
 80071c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f003 0308 	and.w	r3, r3, #8
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d00a      	beq.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80071d0:	4b87      	ldr	r3, [pc, #540]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071d6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	691b      	ldr	r3, [r3, #16]
 80071de:	4984      	ldr	r1, [pc, #528]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071e0:	4313      	orrs	r3, r2
 80071e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f003 0310 	and.w	r3, r3, #16
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d00a      	beq.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80071f2:	4b7f      	ldr	r3, [pc, #508]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	695b      	ldr	r3, [r3, #20]
 8007200:	497b      	ldr	r1, [pc, #492]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007202:	4313      	orrs	r3, r2
 8007204:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f003 0320 	and.w	r3, r3, #32
 8007210:	2b00      	cmp	r3, #0
 8007212:	d00a      	beq.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007214:	4b76      	ldr	r3, [pc, #472]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007216:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800721a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	699b      	ldr	r3, [r3, #24]
 8007222:	4973      	ldr	r1, [pc, #460]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007224:	4313      	orrs	r3, r2
 8007226:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007232:	2b00      	cmp	r3, #0
 8007234:	d00a      	beq.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007236:	4b6e      	ldr	r3, [pc, #440]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007238:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800723c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	69db      	ldr	r3, [r3, #28]
 8007244:	496a      	ldr	r1, [pc, #424]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007246:	4313      	orrs	r3, r2
 8007248:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007254:	2b00      	cmp	r3, #0
 8007256:	d00a      	beq.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007258:	4b65      	ldr	r3, [pc, #404]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800725a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800725e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6a1b      	ldr	r3, [r3, #32]
 8007266:	4962      	ldr	r1, [pc, #392]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007268:	4313      	orrs	r3, r2
 800726a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007276:	2b00      	cmp	r3, #0
 8007278:	d00a      	beq.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800727a:	4b5d      	ldr	r3, [pc, #372]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800727c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007280:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007288:	4959      	ldr	r1, [pc, #356]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800728a:	4313      	orrs	r3, r2
 800728c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007298:	2b00      	cmp	r3, #0
 800729a:	d00a      	beq.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800729c:	4b54      	ldr	r3, [pc, #336]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800729e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80072a2:	f023 0203 	bic.w	r2, r3, #3
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072aa:	4951      	ldr	r1, [pc, #324]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072ac:	4313      	orrs	r3, r2
 80072ae:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d00a      	beq.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80072be:	4b4c      	ldr	r3, [pc, #304]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072c4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072cc:	4948      	ldr	r1, [pc, #288]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072ce:	4313      	orrs	r3, r2
 80072d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d015      	beq.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80072e0:	4b43      	ldr	r3, [pc, #268]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072e6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072ee:	4940      	ldr	r1, [pc, #256]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072f0:	4313      	orrs	r3, r2
 80072f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80072fe:	d105      	bne.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007300:	4b3b      	ldr	r3, [pc, #236]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007302:	68db      	ldr	r3, [r3, #12]
 8007304:	4a3a      	ldr	r2, [pc, #232]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007306:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800730a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007314:	2b00      	cmp	r3, #0
 8007316:	d015      	beq.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007318:	4b35      	ldr	r3, [pc, #212]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800731a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800731e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007326:	4932      	ldr	r1, [pc, #200]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007328:	4313      	orrs	r3, r2
 800732a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007332:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007336:	d105      	bne.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007338:	4b2d      	ldr	r3, [pc, #180]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800733a:	68db      	ldr	r3, [r3, #12]
 800733c:	4a2c      	ldr	r2, [pc, #176]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800733e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007342:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800734c:	2b00      	cmp	r3, #0
 800734e:	d015      	beq.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007350:	4b27      	ldr	r3, [pc, #156]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007352:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007356:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800735e:	4924      	ldr	r1, [pc, #144]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007360:	4313      	orrs	r3, r2
 8007362:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800736a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800736e:	d105      	bne.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007370:	4b1f      	ldr	r3, [pc, #124]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007372:	68db      	ldr	r3, [r3, #12]
 8007374:	4a1e      	ldr	r2, [pc, #120]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007376:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800737a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007384:	2b00      	cmp	r3, #0
 8007386:	d015      	beq.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007388:	4b19      	ldr	r3, [pc, #100]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800738a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800738e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007396:	4916      	ldr	r1, [pc, #88]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007398:	4313      	orrs	r3, r2
 800739a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80073a6:	d105      	bne.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80073a8:	4b11      	ldr	r3, [pc, #68]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073aa:	68db      	ldr	r3, [r3, #12]
 80073ac:	4a10      	ldr	r2, [pc, #64]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80073b2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d019      	beq.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80073c0:	4b0b      	ldr	r3, [pc, #44]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073c6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073ce:	4908      	ldr	r1, [pc, #32]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073d0:	4313      	orrs	r3, r2
 80073d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80073de:	d109      	bne.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80073e0:	4b03      	ldr	r3, [pc, #12]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073e2:	68db      	ldr	r3, [r3, #12]
 80073e4:	4a02      	ldr	r2, [pc, #8]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80073ea:	60d3      	str	r3, [r2, #12]
 80073ec:	e002      	b.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80073ee:	bf00      	nop
 80073f0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d015      	beq.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007400:	4b29      	ldr	r3, [pc, #164]	@ (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007402:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007406:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800740e:	4926      	ldr	r1, [pc, #152]	@ (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007410:	4313      	orrs	r3, r2
 8007412:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800741a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800741e:	d105      	bne.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007420:	4b21      	ldr	r3, [pc, #132]	@ (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007422:	68db      	ldr	r3, [r3, #12]
 8007424:	4a20      	ldr	r2, [pc, #128]	@ (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007426:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800742a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007434:	2b00      	cmp	r3, #0
 8007436:	d015      	beq.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007438:	4b1b      	ldr	r3, [pc, #108]	@ (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800743a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800743e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007446:	4918      	ldr	r1, [pc, #96]	@ (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007448:	4313      	orrs	r3, r2
 800744a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007452:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007456:	d105      	bne.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007458:	4b13      	ldr	r3, [pc, #76]	@ (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800745a:	68db      	ldr	r3, [r3, #12]
 800745c:	4a12      	ldr	r2, [pc, #72]	@ (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800745e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007462:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800746c:	2b00      	cmp	r3, #0
 800746e:	d015      	beq.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007470:	4b0d      	ldr	r3, [pc, #52]	@ (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007472:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007476:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800747e:	490a      	ldr	r1, [pc, #40]	@ (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007480:	4313      	orrs	r3, r2
 8007482:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800748a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800748e:	d105      	bne.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007490:	4b05      	ldr	r3, [pc, #20]	@ (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007492:	68db      	ldr	r3, [r3, #12]
 8007494:	4a04      	ldr	r2, [pc, #16]	@ (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007496:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800749a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800749c:	7cbb      	ldrb	r3, [r7, #18]
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3718      	adds	r7, #24
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}
 80074a6:	bf00      	nop
 80074a8:	40021000 	.word	0x40021000

080074ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b082      	sub	sp, #8
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d101      	bne.n	80074be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	e049      	b.n	8007552 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80074c4:	b2db      	uxtb	r3, r3
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d106      	bne.n	80074d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f7f9 ffde 	bl	8001494 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2202      	movs	r2, #2
 80074dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681a      	ldr	r2, [r3, #0]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	3304      	adds	r3, #4
 80074e8:	4619      	mov	r1, r3
 80074ea:	4610      	mov	r0, r2
 80074ec:	f001 fe08 	bl	8009100 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2201      	movs	r2, #1
 80074f4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2201      	movs	r2, #1
 80074fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2201      	movs	r2, #1
 8007504:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2201      	movs	r2, #1
 800750c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2201      	movs	r2, #1
 800751c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2201      	movs	r2, #1
 8007524:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2201      	movs	r2, #1
 800752c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2201      	movs	r2, #1
 8007534:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2201      	movs	r2, #1
 800753c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2201      	movs	r2, #1
 8007544:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2201      	movs	r2, #1
 800754c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007550:	2300      	movs	r3, #0
}
 8007552:	4618      	mov	r0, r3
 8007554:	3708      	adds	r7, #8
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}
	...

0800755c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800755c:	b480      	push	{r7}
 800755e:	b085      	sub	sp, #20
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800756a:	b2db      	uxtb	r3, r3
 800756c:	2b01      	cmp	r3, #1
 800756e:	d001      	beq.n	8007574 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007570:	2301      	movs	r3, #1
 8007572:	e04c      	b.n	800760e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2202      	movs	r2, #2
 8007578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a26      	ldr	r2, [pc, #152]	@ (800761c <HAL_TIM_Base_Start+0xc0>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d022      	beq.n	80075cc <HAL_TIM_Base_Start+0x70>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800758e:	d01d      	beq.n	80075cc <HAL_TIM_Base_Start+0x70>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a22      	ldr	r2, [pc, #136]	@ (8007620 <HAL_TIM_Base_Start+0xc4>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d018      	beq.n	80075cc <HAL_TIM_Base_Start+0x70>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a21      	ldr	r2, [pc, #132]	@ (8007624 <HAL_TIM_Base_Start+0xc8>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d013      	beq.n	80075cc <HAL_TIM_Base_Start+0x70>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a1f      	ldr	r2, [pc, #124]	@ (8007628 <HAL_TIM_Base_Start+0xcc>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d00e      	beq.n	80075cc <HAL_TIM_Base_Start+0x70>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a1e      	ldr	r2, [pc, #120]	@ (800762c <HAL_TIM_Base_Start+0xd0>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d009      	beq.n	80075cc <HAL_TIM_Base_Start+0x70>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a1c      	ldr	r2, [pc, #112]	@ (8007630 <HAL_TIM_Base_Start+0xd4>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d004      	beq.n	80075cc <HAL_TIM_Base_Start+0x70>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a1b      	ldr	r2, [pc, #108]	@ (8007634 <HAL_TIM_Base_Start+0xd8>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d115      	bne.n	80075f8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	689a      	ldr	r2, [r3, #8]
 80075d2:	4b19      	ldr	r3, [pc, #100]	@ (8007638 <HAL_TIM_Base_Start+0xdc>)
 80075d4:	4013      	ands	r3, r2
 80075d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2b06      	cmp	r3, #6
 80075dc:	d015      	beq.n	800760a <HAL_TIM_Base_Start+0xae>
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075e4:	d011      	beq.n	800760a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	681a      	ldr	r2, [r3, #0]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f042 0201 	orr.w	r2, r2, #1
 80075f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075f6:	e008      	b.n	800760a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	681a      	ldr	r2, [r3, #0]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f042 0201 	orr.w	r2, r2, #1
 8007606:	601a      	str	r2, [r3, #0]
 8007608:	e000      	b.n	800760c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800760a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800760c:	2300      	movs	r3, #0
}
 800760e:	4618      	mov	r0, r3
 8007610:	3714      	adds	r7, #20
 8007612:	46bd      	mov	sp, r7
 8007614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007618:	4770      	bx	lr
 800761a:	bf00      	nop
 800761c:	40012c00 	.word	0x40012c00
 8007620:	40000400 	.word	0x40000400
 8007624:	40000800 	.word	0x40000800
 8007628:	40000c00 	.word	0x40000c00
 800762c:	40013400 	.word	0x40013400
 8007630:	40014000 	.word	0x40014000
 8007634:	40015000 	.word	0x40015000
 8007638:	00010007 	.word	0x00010007

0800763c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800763c:	b480      	push	{r7}
 800763e:	b085      	sub	sp, #20
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800764a:	b2db      	uxtb	r3, r3
 800764c:	2b01      	cmp	r3, #1
 800764e:	d001      	beq.n	8007654 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007650:	2301      	movs	r3, #1
 8007652:	e054      	b.n	80076fe <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2202      	movs	r2, #2
 8007658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	68da      	ldr	r2, [r3, #12]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f042 0201 	orr.w	r2, r2, #1
 800766a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a26      	ldr	r2, [pc, #152]	@ (800770c <HAL_TIM_Base_Start_IT+0xd0>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d022      	beq.n	80076bc <HAL_TIM_Base_Start_IT+0x80>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800767e:	d01d      	beq.n	80076bc <HAL_TIM_Base_Start_IT+0x80>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a22      	ldr	r2, [pc, #136]	@ (8007710 <HAL_TIM_Base_Start_IT+0xd4>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d018      	beq.n	80076bc <HAL_TIM_Base_Start_IT+0x80>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a21      	ldr	r2, [pc, #132]	@ (8007714 <HAL_TIM_Base_Start_IT+0xd8>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d013      	beq.n	80076bc <HAL_TIM_Base_Start_IT+0x80>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a1f      	ldr	r2, [pc, #124]	@ (8007718 <HAL_TIM_Base_Start_IT+0xdc>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d00e      	beq.n	80076bc <HAL_TIM_Base_Start_IT+0x80>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a1e      	ldr	r2, [pc, #120]	@ (800771c <HAL_TIM_Base_Start_IT+0xe0>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d009      	beq.n	80076bc <HAL_TIM_Base_Start_IT+0x80>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a1c      	ldr	r2, [pc, #112]	@ (8007720 <HAL_TIM_Base_Start_IT+0xe4>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d004      	beq.n	80076bc <HAL_TIM_Base_Start_IT+0x80>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a1b      	ldr	r2, [pc, #108]	@ (8007724 <HAL_TIM_Base_Start_IT+0xe8>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d115      	bne.n	80076e8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	689a      	ldr	r2, [r3, #8]
 80076c2:	4b19      	ldr	r3, [pc, #100]	@ (8007728 <HAL_TIM_Base_Start_IT+0xec>)
 80076c4:	4013      	ands	r3, r2
 80076c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2b06      	cmp	r3, #6
 80076cc:	d015      	beq.n	80076fa <HAL_TIM_Base_Start_IT+0xbe>
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076d4:	d011      	beq.n	80076fa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	681a      	ldr	r2, [r3, #0]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f042 0201 	orr.w	r2, r2, #1
 80076e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076e6:	e008      	b.n	80076fa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	681a      	ldr	r2, [r3, #0]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f042 0201 	orr.w	r2, r2, #1
 80076f6:	601a      	str	r2, [r3, #0]
 80076f8:	e000      	b.n	80076fc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076fa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80076fc:	2300      	movs	r3, #0
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3714      	adds	r7, #20
 8007702:	46bd      	mov	sp, r7
 8007704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007708:	4770      	bx	lr
 800770a:	bf00      	nop
 800770c:	40012c00 	.word	0x40012c00
 8007710:	40000400 	.word	0x40000400
 8007714:	40000800 	.word	0x40000800
 8007718:	40000c00 	.word	0x40000c00
 800771c:	40013400 	.word	0x40013400
 8007720:	40014000 	.word	0x40014000
 8007724:	40015000 	.word	0x40015000
 8007728:	00010007 	.word	0x00010007

0800772c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b082      	sub	sp, #8
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d101      	bne.n	800773e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800773a:	2301      	movs	r3, #1
 800773c:	e049      	b.n	80077d2 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007744:	b2db      	uxtb	r3, r3
 8007746:	2b00      	cmp	r3, #0
 8007748:	d106      	bne.n	8007758 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2200      	movs	r2, #0
 800774e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 f841 	bl	80077da <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2202      	movs	r2, #2
 800775c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	3304      	adds	r3, #4
 8007768:	4619      	mov	r1, r3
 800776a:	4610      	mov	r0, r2
 800776c:	f001 fcc8 	bl	8009100 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2201      	movs	r2, #1
 8007774:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2201      	movs	r2, #1
 800777c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2201      	movs	r2, #1
 8007784:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2201      	movs	r2, #1
 800778c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2201      	movs	r2, #1
 8007794:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2201      	movs	r2, #1
 800779c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2201      	movs	r2, #1
 80077a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2201      	movs	r2, #1
 80077ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2201      	movs	r2, #1
 80077b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2201      	movs	r2, #1
 80077bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2201      	movs	r2, #1
 80077c4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2201      	movs	r2, #1
 80077cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80077d0:	2300      	movs	r3, #0
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3708      	adds	r7, #8
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}

080077da <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80077da:	b480      	push	{r7}
 80077dc:	b083      	sub	sp, #12
 80077de:	af00      	add	r7, sp, #0
 80077e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80077e2:	bf00      	nop
 80077e4:	370c      	adds	r7, #12
 80077e6:	46bd      	mov	sp, r7
 80077e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ec:	4770      	bx	lr
	...

080077f0 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b084      	sub	sp, #16
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d109      	bne.n	8007814 <HAL_TIM_OC_Start+0x24>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007806:	b2db      	uxtb	r3, r3
 8007808:	2b01      	cmp	r3, #1
 800780a:	bf14      	ite	ne
 800780c:	2301      	movne	r3, #1
 800780e:	2300      	moveq	r3, #0
 8007810:	b2db      	uxtb	r3, r3
 8007812:	e03c      	b.n	800788e <HAL_TIM_OC_Start+0x9e>
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	2b04      	cmp	r3, #4
 8007818:	d109      	bne.n	800782e <HAL_TIM_OC_Start+0x3e>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007820:	b2db      	uxtb	r3, r3
 8007822:	2b01      	cmp	r3, #1
 8007824:	bf14      	ite	ne
 8007826:	2301      	movne	r3, #1
 8007828:	2300      	moveq	r3, #0
 800782a:	b2db      	uxtb	r3, r3
 800782c:	e02f      	b.n	800788e <HAL_TIM_OC_Start+0x9e>
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	2b08      	cmp	r3, #8
 8007832:	d109      	bne.n	8007848 <HAL_TIM_OC_Start+0x58>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800783a:	b2db      	uxtb	r3, r3
 800783c:	2b01      	cmp	r3, #1
 800783e:	bf14      	ite	ne
 8007840:	2301      	movne	r3, #1
 8007842:	2300      	moveq	r3, #0
 8007844:	b2db      	uxtb	r3, r3
 8007846:	e022      	b.n	800788e <HAL_TIM_OC_Start+0x9e>
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	2b0c      	cmp	r3, #12
 800784c:	d109      	bne.n	8007862 <HAL_TIM_OC_Start+0x72>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007854:	b2db      	uxtb	r3, r3
 8007856:	2b01      	cmp	r3, #1
 8007858:	bf14      	ite	ne
 800785a:	2301      	movne	r3, #1
 800785c:	2300      	moveq	r3, #0
 800785e:	b2db      	uxtb	r3, r3
 8007860:	e015      	b.n	800788e <HAL_TIM_OC_Start+0x9e>
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	2b10      	cmp	r3, #16
 8007866:	d109      	bne.n	800787c <HAL_TIM_OC_Start+0x8c>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800786e:	b2db      	uxtb	r3, r3
 8007870:	2b01      	cmp	r3, #1
 8007872:	bf14      	ite	ne
 8007874:	2301      	movne	r3, #1
 8007876:	2300      	moveq	r3, #0
 8007878:	b2db      	uxtb	r3, r3
 800787a:	e008      	b.n	800788e <HAL_TIM_OC_Start+0x9e>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007882:	b2db      	uxtb	r3, r3
 8007884:	2b01      	cmp	r3, #1
 8007886:	bf14      	ite	ne
 8007888:	2301      	movne	r3, #1
 800788a:	2300      	moveq	r3, #0
 800788c:	b2db      	uxtb	r3, r3
 800788e:	2b00      	cmp	r3, #0
 8007890:	d001      	beq.n	8007896 <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 8007892:	2301      	movs	r3, #1
 8007894:	e0a6      	b.n	80079e4 <HAL_TIM_OC_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d104      	bne.n	80078a6 <HAL_TIM_OC_Start+0xb6>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2202      	movs	r2, #2
 80078a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80078a4:	e023      	b.n	80078ee <HAL_TIM_OC_Start+0xfe>
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	2b04      	cmp	r3, #4
 80078aa:	d104      	bne.n	80078b6 <HAL_TIM_OC_Start+0xc6>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2202      	movs	r2, #2
 80078b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80078b4:	e01b      	b.n	80078ee <HAL_TIM_OC_Start+0xfe>
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	2b08      	cmp	r3, #8
 80078ba:	d104      	bne.n	80078c6 <HAL_TIM_OC_Start+0xd6>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2202      	movs	r2, #2
 80078c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80078c4:	e013      	b.n	80078ee <HAL_TIM_OC_Start+0xfe>
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	2b0c      	cmp	r3, #12
 80078ca:	d104      	bne.n	80078d6 <HAL_TIM_OC_Start+0xe6>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2202      	movs	r2, #2
 80078d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80078d4:	e00b      	b.n	80078ee <HAL_TIM_OC_Start+0xfe>
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	2b10      	cmp	r3, #16
 80078da:	d104      	bne.n	80078e6 <HAL_TIM_OC_Start+0xf6>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2202      	movs	r2, #2
 80078e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80078e4:	e003      	b.n	80078ee <HAL_TIM_OC_Start+0xfe>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2202      	movs	r2, #2
 80078ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	2201      	movs	r2, #1
 80078f4:	6839      	ldr	r1, [r7, #0]
 80078f6:	4618      	mov	r0, r3
 80078f8:	f002 fa86 	bl	8009e08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a3a      	ldr	r2, [pc, #232]	@ (80079ec <HAL_TIM_OC_Start+0x1fc>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d018      	beq.n	8007938 <HAL_TIM_OC_Start+0x148>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a39      	ldr	r2, [pc, #228]	@ (80079f0 <HAL_TIM_OC_Start+0x200>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d013      	beq.n	8007938 <HAL_TIM_OC_Start+0x148>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a37      	ldr	r2, [pc, #220]	@ (80079f4 <HAL_TIM_OC_Start+0x204>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d00e      	beq.n	8007938 <HAL_TIM_OC_Start+0x148>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a36      	ldr	r2, [pc, #216]	@ (80079f8 <HAL_TIM_OC_Start+0x208>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d009      	beq.n	8007938 <HAL_TIM_OC_Start+0x148>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a34      	ldr	r2, [pc, #208]	@ (80079fc <HAL_TIM_OC_Start+0x20c>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d004      	beq.n	8007938 <HAL_TIM_OC_Start+0x148>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a33      	ldr	r2, [pc, #204]	@ (8007a00 <HAL_TIM_OC_Start+0x210>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d101      	bne.n	800793c <HAL_TIM_OC_Start+0x14c>
 8007938:	2301      	movs	r3, #1
 800793a:	e000      	b.n	800793e <HAL_TIM_OC_Start+0x14e>
 800793c:	2300      	movs	r3, #0
 800793e:	2b00      	cmp	r3, #0
 8007940:	d007      	beq.n	8007952 <HAL_TIM_OC_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007950:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4a25      	ldr	r2, [pc, #148]	@ (80079ec <HAL_TIM_OC_Start+0x1fc>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d022      	beq.n	80079a2 <HAL_TIM_OC_Start+0x1b2>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007964:	d01d      	beq.n	80079a2 <HAL_TIM_OC_Start+0x1b2>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a26      	ldr	r2, [pc, #152]	@ (8007a04 <HAL_TIM_OC_Start+0x214>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d018      	beq.n	80079a2 <HAL_TIM_OC_Start+0x1b2>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a24      	ldr	r2, [pc, #144]	@ (8007a08 <HAL_TIM_OC_Start+0x218>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d013      	beq.n	80079a2 <HAL_TIM_OC_Start+0x1b2>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4a23      	ldr	r2, [pc, #140]	@ (8007a0c <HAL_TIM_OC_Start+0x21c>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d00e      	beq.n	80079a2 <HAL_TIM_OC_Start+0x1b2>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4a19      	ldr	r2, [pc, #100]	@ (80079f0 <HAL_TIM_OC_Start+0x200>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d009      	beq.n	80079a2 <HAL_TIM_OC_Start+0x1b2>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4a18      	ldr	r2, [pc, #96]	@ (80079f4 <HAL_TIM_OC_Start+0x204>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d004      	beq.n	80079a2 <HAL_TIM_OC_Start+0x1b2>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a18      	ldr	r2, [pc, #96]	@ (8007a00 <HAL_TIM_OC_Start+0x210>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d115      	bne.n	80079ce <HAL_TIM_OC_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	689a      	ldr	r2, [r3, #8]
 80079a8:	4b19      	ldr	r3, [pc, #100]	@ (8007a10 <HAL_TIM_OC_Start+0x220>)
 80079aa:	4013      	ands	r3, r2
 80079ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2b06      	cmp	r3, #6
 80079b2:	d015      	beq.n	80079e0 <HAL_TIM_OC_Start+0x1f0>
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079ba:	d011      	beq.n	80079e0 <HAL_TIM_OC_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	681a      	ldr	r2, [r3, #0]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f042 0201 	orr.w	r2, r2, #1
 80079ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079cc:	e008      	b.n	80079e0 <HAL_TIM_OC_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	681a      	ldr	r2, [r3, #0]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f042 0201 	orr.w	r2, r2, #1
 80079dc:	601a      	str	r2, [r3, #0]
 80079de:	e000      	b.n	80079e2 <HAL_TIM_OC_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079e0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80079e2:	2300      	movs	r3, #0
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3710      	adds	r7, #16
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}
 80079ec:	40012c00 	.word	0x40012c00
 80079f0:	40013400 	.word	0x40013400
 80079f4:	40014000 	.word	0x40014000
 80079f8:	40014400 	.word	0x40014400
 80079fc:	40014800 	.word	0x40014800
 8007a00:	40015000 	.word	0x40015000
 8007a04:	40000400 	.word	0x40000400
 8007a08:	40000800 	.word	0x40000800
 8007a0c:	40000c00 	.word	0x40000c00
 8007a10:	00010007 	.word	0x00010007

08007a14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b082      	sub	sp, #8
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d101      	bne.n	8007a26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007a22:	2301      	movs	r3, #1
 8007a24:	e049      	b.n	8007aba <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a2c:	b2db      	uxtb	r3, r3
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d106      	bne.n	8007a40 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2200      	movs	r2, #0
 8007a36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 f841 	bl	8007ac2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2202      	movs	r2, #2
 8007a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681a      	ldr	r2, [r3, #0]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	3304      	adds	r3, #4
 8007a50:	4619      	mov	r1, r3
 8007a52:	4610      	mov	r0, r2
 8007a54:	f001 fb54 	bl	8009100 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2201      	movs	r2, #1
 8007a64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2201      	movs	r2, #1
 8007a74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2201      	movs	r2, #1
 8007a84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2201      	movs	r2, #1
 8007a94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2201      	movs	r2, #1
 8007aac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007ab8:	2300      	movs	r3, #0
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3708      	adds	r7, #8
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}

08007ac2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007ac2:	b480      	push	{r7}
 8007ac4:	b083      	sub	sp, #12
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007aca:	bf00      	nop
 8007acc:	370c      	adds	r7, #12
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad4:	4770      	bx	lr
	...

08007ad8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d109      	bne.n	8007afc <HAL_TIM_PWM_Start+0x24>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007aee:	b2db      	uxtb	r3, r3
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	bf14      	ite	ne
 8007af4:	2301      	movne	r3, #1
 8007af6:	2300      	moveq	r3, #0
 8007af8:	b2db      	uxtb	r3, r3
 8007afa:	e03c      	b.n	8007b76 <HAL_TIM_PWM_Start+0x9e>
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	2b04      	cmp	r3, #4
 8007b00:	d109      	bne.n	8007b16 <HAL_TIM_PWM_Start+0x3e>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007b08:	b2db      	uxtb	r3, r3
 8007b0a:	2b01      	cmp	r3, #1
 8007b0c:	bf14      	ite	ne
 8007b0e:	2301      	movne	r3, #1
 8007b10:	2300      	moveq	r3, #0
 8007b12:	b2db      	uxtb	r3, r3
 8007b14:	e02f      	b.n	8007b76 <HAL_TIM_PWM_Start+0x9e>
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	2b08      	cmp	r3, #8
 8007b1a:	d109      	bne.n	8007b30 <HAL_TIM_PWM_Start+0x58>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007b22:	b2db      	uxtb	r3, r3
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	bf14      	ite	ne
 8007b28:	2301      	movne	r3, #1
 8007b2a:	2300      	moveq	r3, #0
 8007b2c:	b2db      	uxtb	r3, r3
 8007b2e:	e022      	b.n	8007b76 <HAL_TIM_PWM_Start+0x9e>
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	2b0c      	cmp	r3, #12
 8007b34:	d109      	bne.n	8007b4a <HAL_TIM_PWM_Start+0x72>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	bf14      	ite	ne
 8007b42:	2301      	movne	r3, #1
 8007b44:	2300      	moveq	r3, #0
 8007b46:	b2db      	uxtb	r3, r3
 8007b48:	e015      	b.n	8007b76 <HAL_TIM_PWM_Start+0x9e>
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	2b10      	cmp	r3, #16
 8007b4e:	d109      	bne.n	8007b64 <HAL_TIM_PWM_Start+0x8c>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007b56:	b2db      	uxtb	r3, r3
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	bf14      	ite	ne
 8007b5c:	2301      	movne	r3, #1
 8007b5e:	2300      	moveq	r3, #0
 8007b60:	b2db      	uxtb	r3, r3
 8007b62:	e008      	b.n	8007b76 <HAL_TIM_PWM_Start+0x9e>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	2b01      	cmp	r3, #1
 8007b6e:	bf14      	ite	ne
 8007b70:	2301      	movne	r3, #1
 8007b72:	2300      	moveq	r3, #0
 8007b74:	b2db      	uxtb	r3, r3
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d001      	beq.n	8007b7e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	e0a6      	b.n	8007ccc <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d104      	bne.n	8007b8e <HAL_TIM_PWM_Start+0xb6>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2202      	movs	r2, #2
 8007b88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007b8c:	e023      	b.n	8007bd6 <HAL_TIM_PWM_Start+0xfe>
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	2b04      	cmp	r3, #4
 8007b92:	d104      	bne.n	8007b9e <HAL_TIM_PWM_Start+0xc6>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2202      	movs	r2, #2
 8007b98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007b9c:	e01b      	b.n	8007bd6 <HAL_TIM_PWM_Start+0xfe>
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	2b08      	cmp	r3, #8
 8007ba2:	d104      	bne.n	8007bae <HAL_TIM_PWM_Start+0xd6>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2202      	movs	r2, #2
 8007ba8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007bac:	e013      	b.n	8007bd6 <HAL_TIM_PWM_Start+0xfe>
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	2b0c      	cmp	r3, #12
 8007bb2:	d104      	bne.n	8007bbe <HAL_TIM_PWM_Start+0xe6>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2202      	movs	r2, #2
 8007bb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007bbc:	e00b      	b.n	8007bd6 <HAL_TIM_PWM_Start+0xfe>
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	2b10      	cmp	r3, #16
 8007bc2:	d104      	bne.n	8007bce <HAL_TIM_PWM_Start+0xf6>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2202      	movs	r2, #2
 8007bc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007bcc:	e003      	b.n	8007bd6 <HAL_TIM_PWM_Start+0xfe>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2202      	movs	r2, #2
 8007bd2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	2201      	movs	r2, #1
 8007bdc:	6839      	ldr	r1, [r7, #0]
 8007bde:	4618      	mov	r0, r3
 8007be0:	f002 f912 	bl	8009e08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a3a      	ldr	r2, [pc, #232]	@ (8007cd4 <HAL_TIM_PWM_Start+0x1fc>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d018      	beq.n	8007c20 <HAL_TIM_PWM_Start+0x148>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a39      	ldr	r2, [pc, #228]	@ (8007cd8 <HAL_TIM_PWM_Start+0x200>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d013      	beq.n	8007c20 <HAL_TIM_PWM_Start+0x148>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a37      	ldr	r2, [pc, #220]	@ (8007cdc <HAL_TIM_PWM_Start+0x204>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d00e      	beq.n	8007c20 <HAL_TIM_PWM_Start+0x148>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a36      	ldr	r2, [pc, #216]	@ (8007ce0 <HAL_TIM_PWM_Start+0x208>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d009      	beq.n	8007c20 <HAL_TIM_PWM_Start+0x148>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a34      	ldr	r2, [pc, #208]	@ (8007ce4 <HAL_TIM_PWM_Start+0x20c>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d004      	beq.n	8007c20 <HAL_TIM_PWM_Start+0x148>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a33      	ldr	r2, [pc, #204]	@ (8007ce8 <HAL_TIM_PWM_Start+0x210>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d101      	bne.n	8007c24 <HAL_TIM_PWM_Start+0x14c>
 8007c20:	2301      	movs	r3, #1
 8007c22:	e000      	b.n	8007c26 <HAL_TIM_PWM_Start+0x14e>
 8007c24:	2300      	movs	r3, #0
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d007      	beq.n	8007c3a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007c38:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a25      	ldr	r2, [pc, #148]	@ (8007cd4 <HAL_TIM_PWM_Start+0x1fc>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d022      	beq.n	8007c8a <HAL_TIM_PWM_Start+0x1b2>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c4c:	d01d      	beq.n	8007c8a <HAL_TIM_PWM_Start+0x1b2>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4a26      	ldr	r2, [pc, #152]	@ (8007cec <HAL_TIM_PWM_Start+0x214>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d018      	beq.n	8007c8a <HAL_TIM_PWM_Start+0x1b2>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4a24      	ldr	r2, [pc, #144]	@ (8007cf0 <HAL_TIM_PWM_Start+0x218>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d013      	beq.n	8007c8a <HAL_TIM_PWM_Start+0x1b2>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4a23      	ldr	r2, [pc, #140]	@ (8007cf4 <HAL_TIM_PWM_Start+0x21c>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d00e      	beq.n	8007c8a <HAL_TIM_PWM_Start+0x1b2>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a19      	ldr	r2, [pc, #100]	@ (8007cd8 <HAL_TIM_PWM_Start+0x200>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d009      	beq.n	8007c8a <HAL_TIM_PWM_Start+0x1b2>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a18      	ldr	r2, [pc, #96]	@ (8007cdc <HAL_TIM_PWM_Start+0x204>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d004      	beq.n	8007c8a <HAL_TIM_PWM_Start+0x1b2>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a18      	ldr	r2, [pc, #96]	@ (8007ce8 <HAL_TIM_PWM_Start+0x210>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d115      	bne.n	8007cb6 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	689a      	ldr	r2, [r3, #8]
 8007c90:	4b19      	ldr	r3, [pc, #100]	@ (8007cf8 <HAL_TIM_PWM_Start+0x220>)
 8007c92:	4013      	ands	r3, r2
 8007c94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2b06      	cmp	r3, #6
 8007c9a:	d015      	beq.n	8007cc8 <HAL_TIM_PWM_Start+0x1f0>
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ca2:	d011      	beq.n	8007cc8 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f042 0201 	orr.w	r2, r2, #1
 8007cb2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cb4:	e008      	b.n	8007cc8 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f042 0201 	orr.w	r2, r2, #1
 8007cc4:	601a      	str	r2, [r3, #0]
 8007cc6:	e000      	b.n	8007cca <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cc8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007cca:	2300      	movs	r3, #0
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3710      	adds	r7, #16
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}
 8007cd4:	40012c00 	.word	0x40012c00
 8007cd8:	40013400 	.word	0x40013400
 8007cdc:	40014000 	.word	0x40014000
 8007ce0:	40014400 	.word	0x40014400
 8007ce4:	40014800 	.word	0x40014800
 8007ce8:	40015000 	.word	0x40015000
 8007cec:	40000400 	.word	0x40000400
 8007cf0:	40000800 	.word	0x40000800
 8007cf4:	40000c00 	.word	0x40000c00
 8007cf8:	00010007 	.word	0x00010007

08007cfc <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b086      	sub	sp, #24
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	60f8      	str	r0, [r7, #12]
 8007d04:	60b9      	str	r1, [r7, #8]
 8007d06:	607a      	str	r2, [r7, #4]
 8007d08:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d109      	bne.n	8007d28 <HAL_TIM_PWM_Start_DMA+0x2c>
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007d1a:	b2db      	uxtb	r3, r3
 8007d1c:	2b02      	cmp	r3, #2
 8007d1e:	bf0c      	ite	eq
 8007d20:	2301      	moveq	r3, #1
 8007d22:	2300      	movne	r3, #0
 8007d24:	b2db      	uxtb	r3, r3
 8007d26:	e03c      	b.n	8007da2 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	2b04      	cmp	r3, #4
 8007d2c:	d109      	bne.n	8007d42 <HAL_TIM_PWM_Start_DMA+0x46>
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007d34:	b2db      	uxtb	r3, r3
 8007d36:	2b02      	cmp	r3, #2
 8007d38:	bf0c      	ite	eq
 8007d3a:	2301      	moveq	r3, #1
 8007d3c:	2300      	movne	r3, #0
 8007d3e:	b2db      	uxtb	r3, r3
 8007d40:	e02f      	b.n	8007da2 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	2b08      	cmp	r3, #8
 8007d46:	d109      	bne.n	8007d5c <HAL_TIM_PWM_Start_DMA+0x60>
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007d4e:	b2db      	uxtb	r3, r3
 8007d50:	2b02      	cmp	r3, #2
 8007d52:	bf0c      	ite	eq
 8007d54:	2301      	moveq	r3, #1
 8007d56:	2300      	movne	r3, #0
 8007d58:	b2db      	uxtb	r3, r3
 8007d5a:	e022      	b.n	8007da2 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	2b0c      	cmp	r3, #12
 8007d60:	d109      	bne.n	8007d76 <HAL_TIM_PWM_Start_DMA+0x7a>
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d68:	b2db      	uxtb	r3, r3
 8007d6a:	2b02      	cmp	r3, #2
 8007d6c:	bf0c      	ite	eq
 8007d6e:	2301      	moveq	r3, #1
 8007d70:	2300      	movne	r3, #0
 8007d72:	b2db      	uxtb	r3, r3
 8007d74:	e015      	b.n	8007da2 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	2b10      	cmp	r3, #16
 8007d7a:	d109      	bne.n	8007d90 <HAL_TIM_PWM_Start_DMA+0x94>
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007d82:	b2db      	uxtb	r3, r3
 8007d84:	2b02      	cmp	r3, #2
 8007d86:	bf0c      	ite	eq
 8007d88:	2301      	moveq	r3, #1
 8007d8a:	2300      	movne	r3, #0
 8007d8c:	b2db      	uxtb	r3, r3
 8007d8e:	e008      	b.n	8007da2 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007d96:	b2db      	uxtb	r3, r3
 8007d98:	2b02      	cmp	r3, #2
 8007d9a:	bf0c      	ite	eq
 8007d9c:	2301      	moveq	r3, #1
 8007d9e:	2300      	movne	r3, #0
 8007da0:	b2db      	uxtb	r3, r3
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d001      	beq.n	8007daa <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8007da6:	2302      	movs	r3, #2
 8007da8:	e1b5      	b.n	8008116 <HAL_TIM_PWM_Start_DMA+0x41a>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d109      	bne.n	8007dc4 <HAL_TIM_PWM_Start_DMA+0xc8>
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007db6:	b2db      	uxtb	r3, r3
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	bf0c      	ite	eq
 8007dbc:	2301      	moveq	r3, #1
 8007dbe:	2300      	movne	r3, #0
 8007dc0:	b2db      	uxtb	r3, r3
 8007dc2:	e03c      	b.n	8007e3e <HAL_TIM_PWM_Start_DMA+0x142>
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	2b04      	cmp	r3, #4
 8007dc8:	d109      	bne.n	8007dde <HAL_TIM_PWM_Start_DMA+0xe2>
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007dd0:	b2db      	uxtb	r3, r3
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	bf0c      	ite	eq
 8007dd6:	2301      	moveq	r3, #1
 8007dd8:	2300      	movne	r3, #0
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	e02f      	b.n	8007e3e <HAL_TIM_PWM_Start_DMA+0x142>
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	2b08      	cmp	r3, #8
 8007de2:	d109      	bne.n	8007df8 <HAL_TIM_PWM_Start_DMA+0xfc>
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007dea:	b2db      	uxtb	r3, r3
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	bf0c      	ite	eq
 8007df0:	2301      	moveq	r3, #1
 8007df2:	2300      	movne	r3, #0
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	e022      	b.n	8007e3e <HAL_TIM_PWM_Start_DMA+0x142>
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	2b0c      	cmp	r3, #12
 8007dfc:	d109      	bne.n	8007e12 <HAL_TIM_PWM_Start_DMA+0x116>
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e04:	b2db      	uxtb	r3, r3
 8007e06:	2b01      	cmp	r3, #1
 8007e08:	bf0c      	ite	eq
 8007e0a:	2301      	moveq	r3, #1
 8007e0c:	2300      	movne	r3, #0
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	e015      	b.n	8007e3e <HAL_TIM_PWM_Start_DMA+0x142>
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	2b10      	cmp	r3, #16
 8007e16:	d109      	bne.n	8007e2c <HAL_TIM_PWM_Start_DMA+0x130>
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007e1e:	b2db      	uxtb	r3, r3
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	bf0c      	ite	eq
 8007e24:	2301      	moveq	r3, #1
 8007e26:	2300      	movne	r3, #0
 8007e28:	b2db      	uxtb	r3, r3
 8007e2a:	e008      	b.n	8007e3e <HAL_TIM_PWM_Start_DMA+0x142>
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007e32:	b2db      	uxtb	r3, r3
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	bf0c      	ite	eq
 8007e38:	2301      	moveq	r3, #1
 8007e3a:	2300      	movne	r3, #0
 8007e3c:	b2db      	uxtb	r3, r3
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d034      	beq.n	8007eac <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d002      	beq.n	8007e4e <HAL_TIM_PWM_Start_DMA+0x152>
 8007e48:	887b      	ldrh	r3, [r7, #2]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d101      	bne.n	8007e52 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8007e4e:	2301      	movs	r3, #1
 8007e50:	e161      	b.n	8008116 <HAL_TIM_PWM_Start_DMA+0x41a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d104      	bne.n	8007e62 <HAL_TIM_PWM_Start_DMA+0x166>
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2202      	movs	r2, #2
 8007e5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007e60:	e026      	b.n	8007eb0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	2b04      	cmp	r3, #4
 8007e66:	d104      	bne.n	8007e72 <HAL_TIM_PWM_Start_DMA+0x176>
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	2202      	movs	r2, #2
 8007e6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007e70:	e01e      	b.n	8007eb0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	2b08      	cmp	r3, #8
 8007e76:	d104      	bne.n	8007e82 <HAL_TIM_PWM_Start_DMA+0x186>
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	2202      	movs	r2, #2
 8007e7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007e80:	e016      	b.n	8007eb0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	2b0c      	cmp	r3, #12
 8007e86:	d104      	bne.n	8007e92 <HAL_TIM_PWM_Start_DMA+0x196>
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2202      	movs	r2, #2
 8007e8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007e90:	e00e      	b.n	8007eb0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	2b10      	cmp	r3, #16
 8007e96:	d104      	bne.n	8007ea2 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2202      	movs	r2, #2
 8007e9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007ea0:	e006      	b.n	8007eb0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2202      	movs	r2, #2
 8007ea6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007eaa:	e001      	b.n	8007eb0 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8007eac:	2301      	movs	r3, #1
 8007eae:	e132      	b.n	8008116 <HAL_TIM_PWM_Start_DMA+0x41a>
  }

  switch (Channel)
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	2b0c      	cmp	r3, #12
 8007eb4:	f200 80ae 	bhi.w	8008014 <HAL_TIM_PWM_Start_DMA+0x318>
 8007eb8:	a201      	add	r2, pc, #4	@ (adr r2, 8007ec0 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8007eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ebe:	bf00      	nop
 8007ec0:	08007ef5 	.word	0x08007ef5
 8007ec4:	08008015 	.word	0x08008015
 8007ec8:	08008015 	.word	0x08008015
 8007ecc:	08008015 	.word	0x08008015
 8007ed0:	08007f3d 	.word	0x08007f3d
 8007ed4:	08008015 	.word	0x08008015
 8007ed8:	08008015 	.word	0x08008015
 8007edc:	08008015 	.word	0x08008015
 8007ee0:	08007f85 	.word	0x08007f85
 8007ee4:	08008015 	.word	0x08008015
 8007ee8:	08008015 	.word	0x08008015
 8007eec:	08008015 	.word	0x08008015
 8007ef0:	08007fcd 	.word	0x08007fcd
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ef8:	4a89      	ldr	r2, [pc, #548]	@ (8008120 <HAL_TIM_PWM_Start_DMA+0x424>)
 8007efa:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f00:	4a88      	ldr	r2, [pc, #544]	@ (8008124 <HAL_TIM_PWM_Start_DMA+0x428>)
 8007f02:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f08:	4a87      	ldr	r2, [pc, #540]	@ (8008128 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8007f0a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8007f10:	6879      	ldr	r1, [r7, #4]
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	3334      	adds	r3, #52	@ 0x34
 8007f18:	461a      	mov	r2, r3
 8007f1a:	887b      	ldrh	r3, [r7, #2]
 8007f1c:	f7fc f912 	bl	8004144 <HAL_DMA_Start_IT>
 8007f20:	4603      	mov	r3, r0
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d001      	beq.n	8007f2a <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007f26:	2301      	movs	r3, #1
 8007f28:	e0f5      	b.n	8008116 <HAL_TIM_PWM_Start_DMA+0x41a>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	68da      	ldr	r2, [r3, #12]
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007f38:	60da      	str	r2, [r3, #12]
      break;
 8007f3a:	e06e      	b.n	800801a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f40:	4a77      	ldr	r2, [pc, #476]	@ (8008120 <HAL_TIM_PWM_Start_DMA+0x424>)
 8007f42:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f48:	4a76      	ldr	r2, [pc, #472]	@ (8008124 <HAL_TIM_PWM_Start_DMA+0x428>)
 8007f4a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f50:	4a75      	ldr	r2, [pc, #468]	@ (8008128 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8007f52:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8007f58:	6879      	ldr	r1, [r7, #4]
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	3338      	adds	r3, #56	@ 0x38
 8007f60:	461a      	mov	r2, r3
 8007f62:	887b      	ldrh	r3, [r7, #2]
 8007f64:	f7fc f8ee 	bl	8004144 <HAL_DMA_Start_IT>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d001      	beq.n	8007f72 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007f6e:	2301      	movs	r3, #1
 8007f70:	e0d1      	b.n	8008116 <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	68da      	ldr	r2, [r3, #12]
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007f80:	60da      	str	r2, [r3, #12]
      break;
 8007f82:	e04a      	b.n	800801a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f88:	4a65      	ldr	r2, [pc, #404]	@ (8008120 <HAL_TIM_PWM_Start_DMA+0x424>)
 8007f8a:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f90:	4a64      	ldr	r2, [pc, #400]	@ (8008124 <HAL_TIM_PWM_Start_DMA+0x428>)
 8007f92:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f98:	4a63      	ldr	r2, [pc, #396]	@ (8008128 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8007f9a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8007fa0:	6879      	ldr	r1, [r7, #4]
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	333c      	adds	r3, #60	@ 0x3c
 8007fa8:	461a      	mov	r2, r3
 8007faa:	887b      	ldrh	r3, [r7, #2]
 8007fac:	f7fc f8ca 	bl	8004144 <HAL_DMA_Start_IT>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d001      	beq.n	8007fba <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	e0ad      	b.n	8008116 <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	68da      	ldr	r2, [r3, #12]
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007fc8:	60da      	str	r2, [r3, #12]
      break;
 8007fca:	e026      	b.n	800801a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fd0:	4a53      	ldr	r2, [pc, #332]	@ (8008120 <HAL_TIM_PWM_Start_DMA+0x424>)
 8007fd2:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fd8:	4a52      	ldr	r2, [pc, #328]	@ (8008124 <HAL_TIM_PWM_Start_DMA+0x428>)
 8007fda:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fe0:	4a51      	ldr	r2, [pc, #324]	@ (8008128 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8007fe2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007fe8:	6879      	ldr	r1, [r7, #4]
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	3340      	adds	r3, #64	@ 0x40
 8007ff0:	461a      	mov	r2, r3
 8007ff2:	887b      	ldrh	r3, [r7, #2]
 8007ff4:	f7fc f8a6 	bl	8004144 <HAL_DMA_Start_IT>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d001      	beq.n	8008002 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007ffe:	2301      	movs	r3, #1
 8008000:	e089      	b.n	8008116 <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	68da      	ldr	r2, [r3, #12]
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008010:	60da      	str	r2, [r3, #12]
      break;
 8008012:	e002      	b.n	800801a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8008014:	2301      	movs	r3, #1
 8008016:	75fb      	strb	r3, [r7, #23]
      break;
 8008018:	bf00      	nop
  }

  if (status == HAL_OK)
 800801a:	7dfb      	ldrb	r3, [r7, #23]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d179      	bne.n	8008114 <HAL_TIM_PWM_Start_DMA+0x418>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	2201      	movs	r2, #1
 8008026:	68b9      	ldr	r1, [r7, #8]
 8008028:	4618      	mov	r0, r3
 800802a:	f001 feed 	bl	8009e08 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4a3e      	ldr	r2, [pc, #248]	@ (800812c <HAL_TIM_PWM_Start_DMA+0x430>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d018      	beq.n	800806a <HAL_TIM_PWM_Start_DMA+0x36e>
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a3c      	ldr	r2, [pc, #240]	@ (8008130 <HAL_TIM_PWM_Start_DMA+0x434>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d013      	beq.n	800806a <HAL_TIM_PWM_Start_DMA+0x36e>
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a3b      	ldr	r2, [pc, #236]	@ (8008134 <HAL_TIM_PWM_Start_DMA+0x438>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d00e      	beq.n	800806a <HAL_TIM_PWM_Start_DMA+0x36e>
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a39      	ldr	r2, [pc, #228]	@ (8008138 <HAL_TIM_PWM_Start_DMA+0x43c>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d009      	beq.n	800806a <HAL_TIM_PWM_Start_DMA+0x36e>
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a38      	ldr	r2, [pc, #224]	@ (800813c <HAL_TIM_PWM_Start_DMA+0x440>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d004      	beq.n	800806a <HAL_TIM_PWM_Start_DMA+0x36e>
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4a36      	ldr	r2, [pc, #216]	@ (8008140 <HAL_TIM_PWM_Start_DMA+0x444>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d101      	bne.n	800806e <HAL_TIM_PWM_Start_DMA+0x372>
 800806a:	2301      	movs	r3, #1
 800806c:	e000      	b.n	8008070 <HAL_TIM_PWM_Start_DMA+0x374>
 800806e:	2300      	movs	r3, #0
 8008070:	2b00      	cmp	r3, #0
 8008072:	d007      	beq.n	8008084 <HAL_TIM_PWM_Start_DMA+0x388>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008082:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4a28      	ldr	r2, [pc, #160]	@ (800812c <HAL_TIM_PWM_Start_DMA+0x430>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d022      	beq.n	80080d4 <HAL_TIM_PWM_Start_DMA+0x3d8>
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008096:	d01d      	beq.n	80080d4 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a29      	ldr	r2, [pc, #164]	@ (8008144 <HAL_TIM_PWM_Start_DMA+0x448>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d018      	beq.n	80080d4 <HAL_TIM_PWM_Start_DMA+0x3d8>
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4a28      	ldr	r2, [pc, #160]	@ (8008148 <HAL_TIM_PWM_Start_DMA+0x44c>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d013      	beq.n	80080d4 <HAL_TIM_PWM_Start_DMA+0x3d8>
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a26      	ldr	r2, [pc, #152]	@ (800814c <HAL_TIM_PWM_Start_DMA+0x450>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d00e      	beq.n	80080d4 <HAL_TIM_PWM_Start_DMA+0x3d8>
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4a1d      	ldr	r2, [pc, #116]	@ (8008130 <HAL_TIM_PWM_Start_DMA+0x434>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d009      	beq.n	80080d4 <HAL_TIM_PWM_Start_DMA+0x3d8>
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a1b      	ldr	r2, [pc, #108]	@ (8008134 <HAL_TIM_PWM_Start_DMA+0x438>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d004      	beq.n	80080d4 <HAL_TIM_PWM_Start_DMA+0x3d8>
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4a1c      	ldr	r2, [pc, #112]	@ (8008140 <HAL_TIM_PWM_Start_DMA+0x444>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d115      	bne.n	8008100 <HAL_TIM_PWM_Start_DMA+0x404>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	689a      	ldr	r2, [r3, #8]
 80080da:	4b1d      	ldr	r3, [pc, #116]	@ (8008150 <HAL_TIM_PWM_Start_DMA+0x454>)
 80080dc:	4013      	ands	r3, r2
 80080de:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	2b06      	cmp	r3, #6
 80080e4:	d015      	beq.n	8008112 <HAL_TIM_PWM_Start_DMA+0x416>
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80080ec:	d011      	beq.n	8008112 <HAL_TIM_PWM_Start_DMA+0x416>
      {
        __HAL_TIM_ENABLE(htim);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	681a      	ldr	r2, [r3, #0]
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f042 0201 	orr.w	r2, r2, #1
 80080fc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080fe:	e008      	b.n	8008112 <HAL_TIM_PWM_Start_DMA+0x416>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	681a      	ldr	r2, [r3, #0]
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f042 0201 	orr.w	r2, r2, #1
 800810e:	601a      	str	r2, [r3, #0]
 8008110:	e000      	b.n	8008114 <HAL_TIM_PWM_Start_DMA+0x418>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008112:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8008114:	7dfb      	ldrb	r3, [r7, #23]
}
 8008116:	4618      	mov	r0, r3
 8008118:	3718      	adds	r7, #24
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}
 800811e:	bf00      	nop
 8008120:	08008fef 	.word	0x08008fef
 8008124:	08009097 	.word	0x08009097
 8008128:	08008f5d 	.word	0x08008f5d
 800812c:	40012c00 	.word	0x40012c00
 8008130:	40013400 	.word	0x40013400
 8008134:	40014000 	.word	0x40014000
 8008138:	40014400 	.word	0x40014400
 800813c:	40014800 	.word	0x40014800
 8008140:	40015000 	.word	0x40015000
 8008144:	40000400 	.word	0x40000400
 8008148:	40000800 	.word	0x40000800
 800814c:	40000c00 	.word	0x40000c00
 8008150:	00010007 	.word	0x00010007

08008154 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b082      	sub	sp, #8
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d101      	bne.n	8008166 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008162:	2301      	movs	r3, #1
 8008164:	e049      	b.n	80081fa <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800816c:	b2db      	uxtb	r3, r3
 800816e:	2b00      	cmp	r3, #0
 8008170:	d106      	bne.n	8008180 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2200      	movs	r2, #0
 8008176:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 f841 	bl	8008202 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2202      	movs	r2, #2
 8008184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681a      	ldr	r2, [r3, #0]
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	3304      	adds	r3, #4
 8008190:	4619      	mov	r1, r3
 8008192:	4610      	mov	r0, r2
 8008194:	f000 ffb4 	bl	8009100 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2201      	movs	r2, #1
 800819c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2201      	movs	r2, #1
 80081a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2201      	movs	r2, #1
 80081ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2201      	movs	r2, #1
 80081b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2201      	movs	r2, #1
 80081bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2201      	movs	r2, #1
 80081c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2201      	movs	r2, #1
 80081cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2201      	movs	r2, #1
 80081d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2201      	movs	r2, #1
 80081dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2201      	movs	r2, #1
 80081e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2201      	movs	r2, #1
 80081ec:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2201      	movs	r2, #1
 80081f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80081f8:	2300      	movs	r3, #0
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3708      	adds	r7, #8
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}

08008202 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8008202:	b480      	push	{r7}
 8008204:	b083      	sub	sp, #12
 8008206:	af00      	add	r7, sp, #0
 8008208:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800820a:	bf00      	nop
 800820c:	370c      	adds	r7, #12
 800820e:	46bd      	mov	sp, r7
 8008210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008214:	4770      	bx	lr
	...

08008218 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b084      	sub	sp, #16
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008222:	2300      	movs	r3, #0
 8008224:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d104      	bne.n	8008236 <HAL_TIM_IC_Start_IT+0x1e>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008232:	b2db      	uxtb	r3, r3
 8008234:	e023      	b.n	800827e <HAL_TIM_IC_Start_IT+0x66>
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	2b04      	cmp	r3, #4
 800823a:	d104      	bne.n	8008246 <HAL_TIM_IC_Start_IT+0x2e>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008242:	b2db      	uxtb	r3, r3
 8008244:	e01b      	b.n	800827e <HAL_TIM_IC_Start_IT+0x66>
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	2b08      	cmp	r3, #8
 800824a:	d104      	bne.n	8008256 <HAL_TIM_IC_Start_IT+0x3e>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008252:	b2db      	uxtb	r3, r3
 8008254:	e013      	b.n	800827e <HAL_TIM_IC_Start_IT+0x66>
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	2b0c      	cmp	r3, #12
 800825a:	d104      	bne.n	8008266 <HAL_TIM_IC_Start_IT+0x4e>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008262:	b2db      	uxtb	r3, r3
 8008264:	e00b      	b.n	800827e <HAL_TIM_IC_Start_IT+0x66>
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	2b10      	cmp	r3, #16
 800826a:	d104      	bne.n	8008276 <HAL_TIM_IC_Start_IT+0x5e>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008272:	b2db      	uxtb	r3, r3
 8008274:	e003      	b.n	800827e <HAL_TIM_IC_Start_IT+0x66>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800827c:	b2db      	uxtb	r3, r3
 800827e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d104      	bne.n	8008290 <HAL_TIM_IC_Start_IT+0x78>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800828c:	b2db      	uxtb	r3, r3
 800828e:	e013      	b.n	80082b8 <HAL_TIM_IC_Start_IT+0xa0>
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	2b04      	cmp	r3, #4
 8008294:	d104      	bne.n	80082a0 <HAL_TIM_IC_Start_IT+0x88>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800829c:	b2db      	uxtb	r3, r3
 800829e:	e00b      	b.n	80082b8 <HAL_TIM_IC_Start_IT+0xa0>
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	2b08      	cmp	r3, #8
 80082a4:	d104      	bne.n	80082b0 <HAL_TIM_IC_Start_IT+0x98>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80082ac:	b2db      	uxtb	r3, r3
 80082ae:	e003      	b.n	80082b8 <HAL_TIM_IC_Start_IT+0xa0>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80082b6:	b2db      	uxtb	r3, r3
 80082b8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80082ba:	7bbb      	ldrb	r3, [r7, #14]
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d102      	bne.n	80082c6 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80082c0:	7b7b      	ldrb	r3, [r7, #13]
 80082c2:	2b01      	cmp	r3, #1
 80082c4:	d001      	beq.n	80082ca <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80082c6:	2301      	movs	r3, #1
 80082c8:	e0e2      	b.n	8008490 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d104      	bne.n	80082da <HAL_TIM_IC_Start_IT+0xc2>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2202      	movs	r2, #2
 80082d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80082d8:	e023      	b.n	8008322 <HAL_TIM_IC_Start_IT+0x10a>
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	2b04      	cmp	r3, #4
 80082de:	d104      	bne.n	80082ea <HAL_TIM_IC_Start_IT+0xd2>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2202      	movs	r2, #2
 80082e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80082e8:	e01b      	b.n	8008322 <HAL_TIM_IC_Start_IT+0x10a>
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	2b08      	cmp	r3, #8
 80082ee:	d104      	bne.n	80082fa <HAL_TIM_IC_Start_IT+0xe2>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2202      	movs	r2, #2
 80082f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80082f8:	e013      	b.n	8008322 <HAL_TIM_IC_Start_IT+0x10a>
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	2b0c      	cmp	r3, #12
 80082fe:	d104      	bne.n	800830a <HAL_TIM_IC_Start_IT+0xf2>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2202      	movs	r2, #2
 8008304:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008308:	e00b      	b.n	8008322 <HAL_TIM_IC_Start_IT+0x10a>
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	2b10      	cmp	r3, #16
 800830e:	d104      	bne.n	800831a <HAL_TIM_IC_Start_IT+0x102>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2202      	movs	r2, #2
 8008314:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008318:	e003      	b.n	8008322 <HAL_TIM_IC_Start_IT+0x10a>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2202      	movs	r2, #2
 800831e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d104      	bne.n	8008332 <HAL_TIM_IC_Start_IT+0x11a>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2202      	movs	r2, #2
 800832c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008330:	e013      	b.n	800835a <HAL_TIM_IC_Start_IT+0x142>
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	2b04      	cmp	r3, #4
 8008336:	d104      	bne.n	8008342 <HAL_TIM_IC_Start_IT+0x12a>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2202      	movs	r2, #2
 800833c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008340:	e00b      	b.n	800835a <HAL_TIM_IC_Start_IT+0x142>
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	2b08      	cmp	r3, #8
 8008346:	d104      	bne.n	8008352 <HAL_TIM_IC_Start_IT+0x13a>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2202      	movs	r2, #2
 800834c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008350:	e003      	b.n	800835a <HAL_TIM_IC_Start_IT+0x142>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2202      	movs	r2, #2
 8008356:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	2b0c      	cmp	r3, #12
 800835e:	d841      	bhi.n	80083e4 <HAL_TIM_IC_Start_IT+0x1cc>
 8008360:	a201      	add	r2, pc, #4	@ (adr r2, 8008368 <HAL_TIM_IC_Start_IT+0x150>)
 8008362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008366:	bf00      	nop
 8008368:	0800839d 	.word	0x0800839d
 800836c:	080083e5 	.word	0x080083e5
 8008370:	080083e5 	.word	0x080083e5
 8008374:	080083e5 	.word	0x080083e5
 8008378:	080083af 	.word	0x080083af
 800837c:	080083e5 	.word	0x080083e5
 8008380:	080083e5 	.word	0x080083e5
 8008384:	080083e5 	.word	0x080083e5
 8008388:	080083c1 	.word	0x080083c1
 800838c:	080083e5 	.word	0x080083e5
 8008390:	080083e5 	.word	0x080083e5
 8008394:	080083e5 	.word	0x080083e5
 8008398:	080083d3 	.word	0x080083d3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	68da      	ldr	r2, [r3, #12]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f042 0202 	orr.w	r2, r2, #2
 80083aa:	60da      	str	r2, [r3, #12]
      break;
 80083ac:	e01d      	b.n	80083ea <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	68da      	ldr	r2, [r3, #12]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f042 0204 	orr.w	r2, r2, #4
 80083bc:	60da      	str	r2, [r3, #12]
      break;
 80083be:	e014      	b.n	80083ea <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	68da      	ldr	r2, [r3, #12]
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f042 0208 	orr.w	r2, r2, #8
 80083ce:	60da      	str	r2, [r3, #12]
      break;
 80083d0:	e00b      	b.n	80083ea <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	68da      	ldr	r2, [r3, #12]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f042 0210 	orr.w	r2, r2, #16
 80083e0:	60da      	str	r2, [r3, #12]
      break;
 80083e2:	e002      	b.n	80083ea <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80083e4:	2301      	movs	r3, #1
 80083e6:	73fb      	strb	r3, [r7, #15]
      break;
 80083e8:	bf00      	nop
  }

  if (status == HAL_OK)
 80083ea:	7bfb      	ldrb	r3, [r7, #15]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d14e      	bne.n	800848e <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	2201      	movs	r2, #1
 80083f6:	6839      	ldr	r1, [r7, #0]
 80083f8:	4618      	mov	r0, r3
 80083fa:	f001 fd05 	bl	8009e08 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4a25      	ldr	r2, [pc, #148]	@ (8008498 <HAL_TIM_IC_Start_IT+0x280>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d022      	beq.n	800844e <HAL_TIM_IC_Start_IT+0x236>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008410:	d01d      	beq.n	800844e <HAL_TIM_IC_Start_IT+0x236>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4a21      	ldr	r2, [pc, #132]	@ (800849c <HAL_TIM_IC_Start_IT+0x284>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d018      	beq.n	800844e <HAL_TIM_IC_Start_IT+0x236>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a1f      	ldr	r2, [pc, #124]	@ (80084a0 <HAL_TIM_IC_Start_IT+0x288>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d013      	beq.n	800844e <HAL_TIM_IC_Start_IT+0x236>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a1e      	ldr	r2, [pc, #120]	@ (80084a4 <HAL_TIM_IC_Start_IT+0x28c>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d00e      	beq.n	800844e <HAL_TIM_IC_Start_IT+0x236>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4a1c      	ldr	r2, [pc, #112]	@ (80084a8 <HAL_TIM_IC_Start_IT+0x290>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d009      	beq.n	800844e <HAL_TIM_IC_Start_IT+0x236>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4a1b      	ldr	r2, [pc, #108]	@ (80084ac <HAL_TIM_IC_Start_IT+0x294>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d004      	beq.n	800844e <HAL_TIM_IC_Start_IT+0x236>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a19      	ldr	r2, [pc, #100]	@ (80084b0 <HAL_TIM_IC_Start_IT+0x298>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d115      	bne.n	800847a <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	689a      	ldr	r2, [r3, #8]
 8008454:	4b17      	ldr	r3, [pc, #92]	@ (80084b4 <HAL_TIM_IC_Start_IT+0x29c>)
 8008456:	4013      	ands	r3, r2
 8008458:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	2b06      	cmp	r3, #6
 800845e:	d015      	beq.n	800848c <HAL_TIM_IC_Start_IT+0x274>
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008466:	d011      	beq.n	800848c <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	681a      	ldr	r2, [r3, #0]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f042 0201 	orr.w	r2, r2, #1
 8008476:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008478:	e008      	b.n	800848c <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	681a      	ldr	r2, [r3, #0]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f042 0201 	orr.w	r2, r2, #1
 8008488:	601a      	str	r2, [r3, #0]
 800848a:	e000      	b.n	800848e <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800848c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800848e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008490:	4618      	mov	r0, r3
 8008492:	3710      	adds	r7, #16
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}
 8008498:	40012c00 	.word	0x40012c00
 800849c:	40000400 	.word	0x40000400
 80084a0:	40000800 	.word	0x40000800
 80084a4:	40000c00 	.word	0x40000c00
 80084a8:	40013400 	.word	0x40013400
 80084ac:	40014000 	.word	0x40014000
 80084b0:	40015000 	.word	0x40015000
 80084b4:	00010007 	.word	0x00010007

080084b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b084      	sub	sp, #16
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	68db      	ldr	r3, [r3, #12]
 80084c6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	691b      	ldr	r3, [r3, #16]
 80084ce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	f003 0302 	and.w	r3, r3, #2
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d020      	beq.n	800851c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	f003 0302 	and.w	r3, r3, #2
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d01b      	beq.n	800851c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f06f 0202 	mvn.w	r2, #2
 80084ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2201      	movs	r2, #1
 80084f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	699b      	ldr	r3, [r3, #24]
 80084fa:	f003 0303 	and.w	r3, r3, #3
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d003      	beq.n	800850a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f7f8 fdaa 	bl	800105c <HAL_TIM_IC_CaptureCallback>
 8008508:	e005      	b.n	8008516 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f000 fcf4 	bl	8008ef8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 fcfb 	bl	8008f0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2200      	movs	r2, #0
 800851a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	f003 0304 	and.w	r3, r3, #4
 8008522:	2b00      	cmp	r3, #0
 8008524:	d020      	beq.n	8008568 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	f003 0304 	and.w	r3, r3, #4
 800852c:	2b00      	cmp	r3, #0
 800852e:	d01b      	beq.n	8008568 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f06f 0204 	mvn.w	r2, #4
 8008538:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2202      	movs	r2, #2
 800853e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	699b      	ldr	r3, [r3, #24]
 8008546:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800854a:	2b00      	cmp	r3, #0
 800854c:	d003      	beq.n	8008556 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f7f8 fd84 	bl	800105c <HAL_TIM_IC_CaptureCallback>
 8008554:	e005      	b.n	8008562 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f000 fcce 	bl	8008ef8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f000 fcd5 	bl	8008f0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2200      	movs	r2, #0
 8008566:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	f003 0308 	and.w	r3, r3, #8
 800856e:	2b00      	cmp	r3, #0
 8008570:	d020      	beq.n	80085b4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	f003 0308 	and.w	r3, r3, #8
 8008578:	2b00      	cmp	r3, #0
 800857a:	d01b      	beq.n	80085b4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f06f 0208 	mvn.w	r2, #8
 8008584:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2204      	movs	r2, #4
 800858a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	69db      	ldr	r3, [r3, #28]
 8008592:	f003 0303 	and.w	r3, r3, #3
 8008596:	2b00      	cmp	r3, #0
 8008598:	d003      	beq.n	80085a2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f7f8 fd5e 	bl	800105c <HAL_TIM_IC_CaptureCallback>
 80085a0:	e005      	b.n	80085ae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f000 fca8 	bl	8008ef8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f000 fcaf 	bl	8008f0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2200      	movs	r2, #0
 80085b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	f003 0310 	and.w	r3, r3, #16
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d020      	beq.n	8008600 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	f003 0310 	and.w	r3, r3, #16
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d01b      	beq.n	8008600 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f06f 0210 	mvn.w	r2, #16
 80085d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2208      	movs	r2, #8
 80085d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	69db      	ldr	r3, [r3, #28]
 80085de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d003      	beq.n	80085ee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f7f8 fd38 	bl	800105c <HAL_TIM_IC_CaptureCallback>
 80085ec:	e005      	b.n	80085fa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f000 fc82 	bl	8008ef8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f000 fc89 	bl	8008f0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2200      	movs	r2, #0
 80085fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	f003 0301 	and.w	r3, r3, #1
 8008606:	2b00      	cmp	r3, #0
 8008608:	d00c      	beq.n	8008624 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	f003 0301 	and.w	r3, r3, #1
 8008610:	2b00      	cmp	r3, #0
 8008612:	d007      	beq.n	8008624 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f06f 0201 	mvn.w	r2, #1
 800861c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f000 fc60 	bl	8008ee4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800862a:	2b00      	cmp	r3, #0
 800862c:	d104      	bne.n	8008638 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008634:	2b00      	cmp	r3, #0
 8008636:	d00c      	beq.n	8008652 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800863e:	2b00      	cmp	r3, #0
 8008640:	d007      	beq.n	8008652 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800864a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f001 fd35 	bl	800a0bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008658:	2b00      	cmp	r3, #0
 800865a:	d00c      	beq.n	8008676 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008662:	2b00      	cmp	r3, #0
 8008664:	d007      	beq.n	8008676 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800866e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f001 fd2d 	bl	800a0d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800867c:	2b00      	cmp	r3, #0
 800867e:	d00c      	beq.n	800869a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008686:	2b00      	cmp	r3, #0
 8008688:	d007      	beq.n	800869a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008692:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f000 fc4d 	bl	8008f34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	f003 0320 	and.w	r3, r3, #32
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d00c      	beq.n	80086be <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	f003 0320 	and.w	r3, r3, #32
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d007      	beq.n	80086be <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f06f 0220 	mvn.w	r2, #32
 80086b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f001 fcf5 	bl	800a0a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d00c      	beq.n	80086e2 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d007      	beq.n	80086e2 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80086da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f001 fd01 	bl	800a0e4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d00c      	beq.n	8008706 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d007      	beq.n	8008706 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80086fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f001 fcf9 	bl	800a0f8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800870c:	2b00      	cmp	r3, #0
 800870e:	d00c      	beq.n	800872a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008716:	2b00      	cmp	r3, #0
 8008718:	d007      	beq.n	800872a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8008722:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f001 fcf1 	bl	800a10c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008730:	2b00      	cmp	r3, #0
 8008732:	d00c      	beq.n	800874e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800873a:	2b00      	cmp	r3, #0
 800873c:	d007      	beq.n	800874e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8008746:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f001 fce9 	bl	800a120 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800874e:	bf00      	nop
 8008750:	3710      	adds	r7, #16
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}
	...

08008758 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b086      	sub	sp, #24
 800875c:	af00      	add	r7, sp, #0
 800875e:	60f8      	str	r0, [r7, #12]
 8008760:	60b9      	str	r1, [r7, #8]
 8008762:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008764:	2300      	movs	r3, #0
 8008766:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800876e:	2b01      	cmp	r3, #1
 8008770:	d101      	bne.n	8008776 <HAL_TIM_OC_ConfigChannel+0x1e>
 8008772:	2302      	movs	r3, #2
 8008774:	e066      	b.n	8008844 <HAL_TIM_OC_ConfigChannel+0xec>
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2201      	movs	r2, #1
 800877a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2b14      	cmp	r3, #20
 8008782:	d857      	bhi.n	8008834 <HAL_TIM_OC_ConfigChannel+0xdc>
 8008784:	a201      	add	r2, pc, #4	@ (adr r2, 800878c <HAL_TIM_OC_ConfigChannel+0x34>)
 8008786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800878a:	bf00      	nop
 800878c:	080087e1 	.word	0x080087e1
 8008790:	08008835 	.word	0x08008835
 8008794:	08008835 	.word	0x08008835
 8008798:	08008835 	.word	0x08008835
 800879c:	080087ef 	.word	0x080087ef
 80087a0:	08008835 	.word	0x08008835
 80087a4:	08008835 	.word	0x08008835
 80087a8:	08008835 	.word	0x08008835
 80087ac:	080087fd 	.word	0x080087fd
 80087b0:	08008835 	.word	0x08008835
 80087b4:	08008835 	.word	0x08008835
 80087b8:	08008835 	.word	0x08008835
 80087bc:	0800880b 	.word	0x0800880b
 80087c0:	08008835 	.word	0x08008835
 80087c4:	08008835 	.word	0x08008835
 80087c8:	08008835 	.word	0x08008835
 80087cc:	08008819 	.word	0x08008819
 80087d0:	08008835 	.word	0x08008835
 80087d4:	08008835 	.word	0x08008835
 80087d8:	08008835 	.word	0x08008835
 80087dc:	08008827 	.word	0x08008827
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	68b9      	ldr	r1, [r7, #8]
 80087e6:	4618      	mov	r0, r3
 80087e8:	f000 fd3e 	bl	8009268 <TIM_OC1_SetConfig>
      break;
 80087ec:	e025      	b.n	800883a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	68b9      	ldr	r1, [r7, #8]
 80087f4:	4618      	mov	r0, r3
 80087f6:	f000 fdd1 	bl	800939c <TIM_OC2_SetConfig>
      break;
 80087fa:	e01e      	b.n	800883a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	68b9      	ldr	r1, [r7, #8]
 8008802:	4618      	mov	r0, r3
 8008804:	f000 fe5e 	bl	80094c4 <TIM_OC3_SetConfig>
      break;
 8008808:	e017      	b.n	800883a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	68b9      	ldr	r1, [r7, #8]
 8008810:	4618      	mov	r0, r3
 8008812:	f000 fee9 	bl	80095e8 <TIM_OC4_SetConfig>
      break;
 8008816:	e010      	b.n	800883a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	68b9      	ldr	r1, [r7, #8]
 800881e:	4618      	mov	r0, r3
 8008820:	f000 ff76 	bl	8009710 <TIM_OC5_SetConfig>
      break;
 8008824:	e009      	b.n	800883a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	68b9      	ldr	r1, [r7, #8]
 800882c:	4618      	mov	r0, r3
 800882e:	f000 ffd9 	bl	80097e4 <TIM_OC6_SetConfig>
      break;
 8008832:	e002      	b.n	800883a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8008834:	2301      	movs	r3, #1
 8008836:	75fb      	strb	r3, [r7, #23]
      break;
 8008838:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	2200      	movs	r2, #0
 800883e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008842:	7dfb      	ldrb	r3, [r7, #23]
}
 8008844:	4618      	mov	r0, r3
 8008846:	3718      	adds	r7, #24
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}

0800884c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b086      	sub	sp, #24
 8008850:	af00      	add	r7, sp, #0
 8008852:	60f8      	str	r0, [r7, #12]
 8008854:	60b9      	str	r1, [r7, #8]
 8008856:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008858:	2300      	movs	r3, #0
 800885a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008862:	2b01      	cmp	r3, #1
 8008864:	d101      	bne.n	800886a <HAL_TIM_IC_ConfigChannel+0x1e>
 8008866:	2302      	movs	r3, #2
 8008868:	e088      	b.n	800897c <HAL_TIM_IC_ConfigChannel+0x130>
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	2201      	movs	r2, #1
 800886e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d11b      	bne.n	80088b0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8008888:	f001 f8f8 	bl	8009a7c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	699a      	ldr	r2, [r3, #24]
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f022 020c 	bic.w	r2, r2, #12
 800889a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	6999      	ldr	r1, [r3, #24]
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	689a      	ldr	r2, [r3, #8]
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	430a      	orrs	r2, r1
 80088ac:	619a      	str	r2, [r3, #24]
 80088ae:	e060      	b.n	8008972 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2b04      	cmp	r3, #4
 80088b4:	d11c      	bne.n	80088f0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80088c6:	f001 f97c 	bl	8009bc2 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	699a      	ldr	r2, [r3, #24]
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80088d8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	6999      	ldr	r1, [r3, #24]
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	689b      	ldr	r3, [r3, #8]
 80088e4:	021a      	lsls	r2, r3, #8
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	430a      	orrs	r2, r1
 80088ec:	619a      	str	r2, [r3, #24]
 80088ee:	e040      	b.n	8008972 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2b08      	cmp	r3, #8
 80088f4:	d11b      	bne.n	800892e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8008906:	f001 f9c9 	bl	8009c9c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	69da      	ldr	r2, [r3, #28]
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f022 020c 	bic.w	r2, r2, #12
 8008918:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	69d9      	ldr	r1, [r3, #28]
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	689a      	ldr	r2, [r3, #8]
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	430a      	orrs	r2, r1
 800892a:	61da      	str	r2, [r3, #28]
 800892c:	e021      	b.n	8008972 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2b0c      	cmp	r3, #12
 8008932:	d11c      	bne.n	800896e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8008944:	f001 f9e6 	bl	8009d14 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	69da      	ldr	r2, [r3, #28]
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008956:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	69d9      	ldr	r1, [r3, #28]
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	689b      	ldr	r3, [r3, #8]
 8008962:	021a      	lsls	r2, r3, #8
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	430a      	orrs	r2, r1
 800896a:	61da      	str	r2, [r3, #28]
 800896c:	e001      	b.n	8008972 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800896e:	2301      	movs	r3, #1
 8008970:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	2200      	movs	r2, #0
 8008976:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800897a:	7dfb      	ldrb	r3, [r7, #23]
}
 800897c:	4618      	mov	r0, r3
 800897e:	3718      	adds	r7, #24
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}

08008984 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b086      	sub	sp, #24
 8008988:	af00      	add	r7, sp, #0
 800898a:	60f8      	str	r0, [r7, #12]
 800898c:	60b9      	str	r1, [r7, #8]
 800898e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008990:	2300      	movs	r3, #0
 8008992:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800899a:	2b01      	cmp	r3, #1
 800899c:	d101      	bne.n	80089a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800899e:	2302      	movs	r3, #2
 80089a0:	e0ff      	b.n	8008ba2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	2201      	movs	r2, #1
 80089a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2b14      	cmp	r3, #20
 80089ae:	f200 80f0 	bhi.w	8008b92 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80089b2:	a201      	add	r2, pc, #4	@ (adr r2, 80089b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80089b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089b8:	08008a0d 	.word	0x08008a0d
 80089bc:	08008b93 	.word	0x08008b93
 80089c0:	08008b93 	.word	0x08008b93
 80089c4:	08008b93 	.word	0x08008b93
 80089c8:	08008a4d 	.word	0x08008a4d
 80089cc:	08008b93 	.word	0x08008b93
 80089d0:	08008b93 	.word	0x08008b93
 80089d4:	08008b93 	.word	0x08008b93
 80089d8:	08008a8f 	.word	0x08008a8f
 80089dc:	08008b93 	.word	0x08008b93
 80089e0:	08008b93 	.word	0x08008b93
 80089e4:	08008b93 	.word	0x08008b93
 80089e8:	08008acf 	.word	0x08008acf
 80089ec:	08008b93 	.word	0x08008b93
 80089f0:	08008b93 	.word	0x08008b93
 80089f4:	08008b93 	.word	0x08008b93
 80089f8:	08008b11 	.word	0x08008b11
 80089fc:	08008b93 	.word	0x08008b93
 8008a00:	08008b93 	.word	0x08008b93
 8008a04:	08008b93 	.word	0x08008b93
 8008a08:	08008b51 	.word	0x08008b51
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	68b9      	ldr	r1, [r7, #8]
 8008a12:	4618      	mov	r0, r3
 8008a14:	f000 fc28 	bl	8009268 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	699a      	ldr	r2, [r3, #24]
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f042 0208 	orr.w	r2, r2, #8
 8008a26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	699a      	ldr	r2, [r3, #24]
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f022 0204 	bic.w	r2, r2, #4
 8008a36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	6999      	ldr	r1, [r3, #24]
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	691a      	ldr	r2, [r3, #16]
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	430a      	orrs	r2, r1
 8008a48:	619a      	str	r2, [r3, #24]
      break;
 8008a4a:	e0a5      	b.n	8008b98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	68b9      	ldr	r1, [r7, #8]
 8008a52:	4618      	mov	r0, r3
 8008a54:	f000 fca2 	bl	800939c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	699a      	ldr	r2, [r3, #24]
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008a66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	699a      	ldr	r2, [r3, #24]
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008a76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	6999      	ldr	r1, [r3, #24]
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	691b      	ldr	r3, [r3, #16]
 8008a82:	021a      	lsls	r2, r3, #8
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	430a      	orrs	r2, r1
 8008a8a:	619a      	str	r2, [r3, #24]
      break;
 8008a8c:	e084      	b.n	8008b98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	68b9      	ldr	r1, [r7, #8]
 8008a94:	4618      	mov	r0, r3
 8008a96:	f000 fd15 	bl	80094c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	69da      	ldr	r2, [r3, #28]
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f042 0208 	orr.w	r2, r2, #8
 8008aa8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	69da      	ldr	r2, [r3, #28]
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f022 0204 	bic.w	r2, r2, #4
 8008ab8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	69d9      	ldr	r1, [r3, #28]
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	691a      	ldr	r2, [r3, #16]
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	430a      	orrs	r2, r1
 8008aca:	61da      	str	r2, [r3, #28]
      break;
 8008acc:	e064      	b.n	8008b98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	68b9      	ldr	r1, [r7, #8]
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f000 fd87 	bl	80095e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	69da      	ldr	r2, [r3, #28]
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008ae8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	69da      	ldr	r2, [r3, #28]
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008af8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	69d9      	ldr	r1, [r3, #28]
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	691b      	ldr	r3, [r3, #16]
 8008b04:	021a      	lsls	r2, r3, #8
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	430a      	orrs	r2, r1
 8008b0c:	61da      	str	r2, [r3, #28]
      break;
 8008b0e:	e043      	b.n	8008b98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	68b9      	ldr	r1, [r7, #8]
 8008b16:	4618      	mov	r0, r3
 8008b18:	f000 fdfa 	bl	8009710 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f042 0208 	orr.w	r2, r2, #8
 8008b2a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f022 0204 	bic.w	r2, r2, #4
 8008b3a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	691a      	ldr	r2, [r3, #16]
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	430a      	orrs	r2, r1
 8008b4c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008b4e:	e023      	b.n	8008b98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	68b9      	ldr	r1, [r7, #8]
 8008b56:	4618      	mov	r0, r3
 8008b58:	f000 fe44 	bl	80097e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008b6a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008b7a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	691b      	ldr	r3, [r3, #16]
 8008b86:	021a      	lsls	r2, r3, #8
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	430a      	orrs	r2, r1
 8008b8e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008b90:	e002      	b.n	8008b98 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008b92:	2301      	movs	r3, #1
 8008b94:	75fb      	strb	r3, [r7, #23]
      break;
 8008b96:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008ba0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3718      	adds	r7, #24
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}
 8008baa:	bf00      	nop

08008bac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b084      	sub	sp, #16
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008bc0:	2b01      	cmp	r3, #1
 8008bc2:	d101      	bne.n	8008bc8 <HAL_TIM_ConfigClockSource+0x1c>
 8008bc4:	2302      	movs	r3, #2
 8008bc6:	e0f6      	b.n	8008db6 <HAL_TIM_ConfigClockSource+0x20a>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2201      	movs	r2, #1
 8008bcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2202      	movs	r2, #2
 8008bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	689b      	ldr	r3, [r3, #8]
 8008bde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008be6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008bea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008bf2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	68ba      	ldr	r2, [r7, #8]
 8008bfa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4a6f      	ldr	r2, [pc, #444]	@ (8008dc0 <HAL_TIM_ConfigClockSource+0x214>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	f000 80c1 	beq.w	8008d8a <HAL_TIM_ConfigClockSource+0x1de>
 8008c08:	4a6d      	ldr	r2, [pc, #436]	@ (8008dc0 <HAL_TIM_ConfigClockSource+0x214>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	f200 80c6 	bhi.w	8008d9c <HAL_TIM_ConfigClockSource+0x1f0>
 8008c10:	4a6c      	ldr	r2, [pc, #432]	@ (8008dc4 <HAL_TIM_ConfigClockSource+0x218>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	f000 80b9 	beq.w	8008d8a <HAL_TIM_ConfigClockSource+0x1de>
 8008c18:	4a6a      	ldr	r2, [pc, #424]	@ (8008dc4 <HAL_TIM_ConfigClockSource+0x218>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	f200 80be 	bhi.w	8008d9c <HAL_TIM_ConfigClockSource+0x1f0>
 8008c20:	4a69      	ldr	r2, [pc, #420]	@ (8008dc8 <HAL_TIM_ConfigClockSource+0x21c>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	f000 80b1 	beq.w	8008d8a <HAL_TIM_ConfigClockSource+0x1de>
 8008c28:	4a67      	ldr	r2, [pc, #412]	@ (8008dc8 <HAL_TIM_ConfigClockSource+0x21c>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	f200 80b6 	bhi.w	8008d9c <HAL_TIM_ConfigClockSource+0x1f0>
 8008c30:	4a66      	ldr	r2, [pc, #408]	@ (8008dcc <HAL_TIM_ConfigClockSource+0x220>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	f000 80a9 	beq.w	8008d8a <HAL_TIM_ConfigClockSource+0x1de>
 8008c38:	4a64      	ldr	r2, [pc, #400]	@ (8008dcc <HAL_TIM_ConfigClockSource+0x220>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	f200 80ae 	bhi.w	8008d9c <HAL_TIM_ConfigClockSource+0x1f0>
 8008c40:	4a63      	ldr	r2, [pc, #396]	@ (8008dd0 <HAL_TIM_ConfigClockSource+0x224>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	f000 80a1 	beq.w	8008d8a <HAL_TIM_ConfigClockSource+0x1de>
 8008c48:	4a61      	ldr	r2, [pc, #388]	@ (8008dd0 <HAL_TIM_ConfigClockSource+0x224>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	f200 80a6 	bhi.w	8008d9c <HAL_TIM_ConfigClockSource+0x1f0>
 8008c50:	4a60      	ldr	r2, [pc, #384]	@ (8008dd4 <HAL_TIM_ConfigClockSource+0x228>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	f000 8099 	beq.w	8008d8a <HAL_TIM_ConfigClockSource+0x1de>
 8008c58:	4a5e      	ldr	r2, [pc, #376]	@ (8008dd4 <HAL_TIM_ConfigClockSource+0x228>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	f200 809e 	bhi.w	8008d9c <HAL_TIM_ConfigClockSource+0x1f0>
 8008c60:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008c64:	f000 8091 	beq.w	8008d8a <HAL_TIM_ConfigClockSource+0x1de>
 8008c68:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008c6c:	f200 8096 	bhi.w	8008d9c <HAL_TIM_ConfigClockSource+0x1f0>
 8008c70:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008c74:	f000 8089 	beq.w	8008d8a <HAL_TIM_ConfigClockSource+0x1de>
 8008c78:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008c7c:	f200 808e 	bhi.w	8008d9c <HAL_TIM_ConfigClockSource+0x1f0>
 8008c80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c84:	d03e      	beq.n	8008d04 <HAL_TIM_ConfigClockSource+0x158>
 8008c86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c8a:	f200 8087 	bhi.w	8008d9c <HAL_TIM_ConfigClockSource+0x1f0>
 8008c8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c92:	f000 8086 	beq.w	8008da2 <HAL_TIM_ConfigClockSource+0x1f6>
 8008c96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c9a:	d87f      	bhi.n	8008d9c <HAL_TIM_ConfigClockSource+0x1f0>
 8008c9c:	2b70      	cmp	r3, #112	@ 0x70
 8008c9e:	d01a      	beq.n	8008cd6 <HAL_TIM_ConfigClockSource+0x12a>
 8008ca0:	2b70      	cmp	r3, #112	@ 0x70
 8008ca2:	d87b      	bhi.n	8008d9c <HAL_TIM_ConfigClockSource+0x1f0>
 8008ca4:	2b60      	cmp	r3, #96	@ 0x60
 8008ca6:	d050      	beq.n	8008d4a <HAL_TIM_ConfigClockSource+0x19e>
 8008ca8:	2b60      	cmp	r3, #96	@ 0x60
 8008caa:	d877      	bhi.n	8008d9c <HAL_TIM_ConfigClockSource+0x1f0>
 8008cac:	2b50      	cmp	r3, #80	@ 0x50
 8008cae:	d03c      	beq.n	8008d2a <HAL_TIM_ConfigClockSource+0x17e>
 8008cb0:	2b50      	cmp	r3, #80	@ 0x50
 8008cb2:	d873      	bhi.n	8008d9c <HAL_TIM_ConfigClockSource+0x1f0>
 8008cb4:	2b40      	cmp	r3, #64	@ 0x40
 8008cb6:	d058      	beq.n	8008d6a <HAL_TIM_ConfigClockSource+0x1be>
 8008cb8:	2b40      	cmp	r3, #64	@ 0x40
 8008cba:	d86f      	bhi.n	8008d9c <HAL_TIM_ConfigClockSource+0x1f0>
 8008cbc:	2b30      	cmp	r3, #48	@ 0x30
 8008cbe:	d064      	beq.n	8008d8a <HAL_TIM_ConfigClockSource+0x1de>
 8008cc0:	2b30      	cmp	r3, #48	@ 0x30
 8008cc2:	d86b      	bhi.n	8008d9c <HAL_TIM_ConfigClockSource+0x1f0>
 8008cc4:	2b20      	cmp	r3, #32
 8008cc6:	d060      	beq.n	8008d8a <HAL_TIM_ConfigClockSource+0x1de>
 8008cc8:	2b20      	cmp	r3, #32
 8008cca:	d867      	bhi.n	8008d9c <HAL_TIM_ConfigClockSource+0x1f0>
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d05c      	beq.n	8008d8a <HAL_TIM_ConfigClockSource+0x1de>
 8008cd0:	2b10      	cmp	r3, #16
 8008cd2:	d05a      	beq.n	8008d8a <HAL_TIM_ConfigClockSource+0x1de>
 8008cd4:	e062      	b.n	8008d9c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008ce6:	f001 f86f 	bl	8009dc8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	689b      	ldr	r3, [r3, #8]
 8008cf0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008cf8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	68ba      	ldr	r2, [r7, #8]
 8008d00:	609a      	str	r2, [r3, #8]
      break;
 8008d02:	e04f      	b.n	8008da4 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008d14:	f001 f858 	bl	8009dc8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	689a      	ldr	r2, [r3, #8]
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008d26:	609a      	str	r2, [r3, #8]
      break;
 8008d28:	e03c      	b.n	8008da4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d36:	461a      	mov	r2, r3
 8008d38:	f000 ff14 	bl	8009b64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	2150      	movs	r1, #80	@ 0x50
 8008d42:	4618      	mov	r0, r3
 8008d44:	f001 f823 	bl	8009d8e <TIM_ITRx_SetConfig>
      break;
 8008d48:	e02c      	b.n	8008da4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008d56:	461a      	mov	r2, r3
 8008d58:	f000 ff70 	bl	8009c3c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	2160      	movs	r1, #96	@ 0x60
 8008d62:	4618      	mov	r0, r3
 8008d64:	f001 f813 	bl	8009d8e <TIM_ITRx_SetConfig>
      break;
 8008d68:	e01c      	b.n	8008da4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d76:	461a      	mov	r2, r3
 8008d78:	f000 fef4 	bl	8009b64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	2140      	movs	r1, #64	@ 0x40
 8008d82:	4618      	mov	r0, r3
 8008d84:	f001 f803 	bl	8009d8e <TIM_ITRx_SetConfig>
      break;
 8008d88:	e00c      	b.n	8008da4 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681a      	ldr	r2, [r3, #0]
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	4619      	mov	r1, r3
 8008d94:	4610      	mov	r0, r2
 8008d96:	f000 fffa 	bl	8009d8e <TIM_ITRx_SetConfig>
      break;
 8008d9a:	e003      	b.n	8008da4 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	73fb      	strb	r3, [r7, #15]
      break;
 8008da0:	e000      	b.n	8008da4 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8008da2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2201      	movs	r2, #1
 8008da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2200      	movs	r2, #0
 8008db0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3710      	adds	r7, #16
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}
 8008dbe:	bf00      	nop
 8008dc0:	00100070 	.word	0x00100070
 8008dc4:	00100060 	.word	0x00100060
 8008dc8:	00100050 	.word	0x00100050
 8008dcc:	00100040 	.word	0x00100040
 8008dd0:	00100030 	.word	0x00100030
 8008dd4:	00100020 	.word	0x00100020

08008dd8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b082      	sub	sp, #8
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
 8008de0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008de8:	2b01      	cmp	r3, #1
 8008dea:	d101      	bne.n	8008df0 <HAL_TIM_SlaveConfigSynchro+0x18>
 8008dec:	2302      	movs	r3, #2
 8008dee:	e031      	b.n	8008e54 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2201      	movs	r2, #1
 8008df4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2202      	movs	r2, #2
 8008dfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8008e00:	6839      	ldr	r1, [r7, #0]
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f000 fd5a 	bl	80098bc <TIM_SlaveTimer_SetConfig>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d009      	beq.n	8008e22 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2201      	movs	r2, #1
 8008e12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8008e1e:	2301      	movs	r3, #1
 8008e20:	e018      	b.n	8008e54 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	68da      	ldr	r2, [r3, #12]
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008e30:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	68da      	ldr	r2, [r3, #12]
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008e40:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2201      	movs	r2, #1
 8008e46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008e52:	2300      	movs	r3, #0
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	3708      	adds	r7, #8
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}

08008e5c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b085      	sub	sp, #20
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
 8008e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8008e66:	2300      	movs	r3, #0
 8008e68:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	2b0c      	cmp	r3, #12
 8008e6e:	d831      	bhi.n	8008ed4 <HAL_TIM_ReadCapturedValue+0x78>
 8008e70:	a201      	add	r2, pc, #4	@ (adr r2, 8008e78 <HAL_TIM_ReadCapturedValue+0x1c>)
 8008e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e76:	bf00      	nop
 8008e78:	08008ead 	.word	0x08008ead
 8008e7c:	08008ed5 	.word	0x08008ed5
 8008e80:	08008ed5 	.word	0x08008ed5
 8008e84:	08008ed5 	.word	0x08008ed5
 8008e88:	08008eb7 	.word	0x08008eb7
 8008e8c:	08008ed5 	.word	0x08008ed5
 8008e90:	08008ed5 	.word	0x08008ed5
 8008e94:	08008ed5 	.word	0x08008ed5
 8008e98:	08008ec1 	.word	0x08008ec1
 8008e9c:	08008ed5 	.word	0x08008ed5
 8008ea0:	08008ed5 	.word	0x08008ed5
 8008ea4:	08008ed5 	.word	0x08008ed5
 8008ea8:	08008ecb 	.word	0x08008ecb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008eb2:	60fb      	str	r3, [r7, #12]

      break;
 8008eb4:	e00f      	b.n	8008ed6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ebc:	60fb      	str	r3, [r7, #12]

      break;
 8008ebe:	e00a      	b.n	8008ed6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ec6:	60fb      	str	r3, [r7, #12]

      break;
 8008ec8:	e005      	b.n	8008ed6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ed0:	60fb      	str	r3, [r7, #12]

      break;
 8008ed2:	e000      	b.n	8008ed6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8008ed4:	bf00      	nop
  }

  return tmpreg;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3714      	adds	r7, #20
 8008edc:	46bd      	mov	sp, r7
 8008ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee2:	4770      	bx	lr

08008ee4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b083      	sub	sp, #12
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008eec:	bf00      	nop
 8008eee:	370c      	adds	r7, #12
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef6:	4770      	bx	lr

08008ef8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b083      	sub	sp, #12
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008f00:	bf00      	nop
 8008f02:	370c      	adds	r7, #12
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr

08008f0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b083      	sub	sp, #12
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008f14:	bf00      	nop
 8008f16:	370c      	adds	r7, #12
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1e:	4770      	bx	lr

08008f20 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b083      	sub	sp, #12
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008f28:	bf00      	nop
 8008f2a:	370c      	adds	r7, #12
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f32:	4770      	bx	lr

08008f34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b083      	sub	sp, #12
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008f3c:	bf00      	nop
 8008f3e:	370c      	adds	r7, #12
 8008f40:	46bd      	mov	sp, r7
 8008f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f46:	4770      	bx	lr

08008f48 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b083      	sub	sp, #12
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008f50:	bf00      	nop
 8008f52:	370c      	adds	r7, #12
 8008f54:	46bd      	mov	sp, r7
 8008f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5a:	4770      	bx	lr

08008f5c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b084      	sub	sp, #16
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f68:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f6e:	687a      	ldr	r2, [r7, #4]
 8008f70:	429a      	cmp	r2, r3
 8008f72:	d107      	bne.n	8008f84 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	2201      	movs	r2, #1
 8008f78:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	2201      	movs	r2, #1
 8008f7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008f82:	e02a      	b.n	8008fda <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	d107      	bne.n	8008f9e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	2202      	movs	r2, #2
 8008f92:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	2201      	movs	r2, #1
 8008f98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008f9c:	e01d      	b.n	8008fda <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fa2:	687a      	ldr	r2, [r7, #4]
 8008fa4:	429a      	cmp	r2, r3
 8008fa6:	d107      	bne.n	8008fb8 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	2204      	movs	r2, #4
 8008fac:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2201      	movs	r2, #1
 8008fb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008fb6:	e010      	b.n	8008fda <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fbc:	687a      	ldr	r2, [r7, #4]
 8008fbe:	429a      	cmp	r2, r3
 8008fc0:	d107      	bne.n	8008fd2 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	2208      	movs	r2, #8
 8008fc6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	2201      	movs	r2, #1
 8008fcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008fd0:	e003      	b.n	8008fda <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	2201      	movs	r2, #1
 8008fd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8008fda:	68f8      	ldr	r0, [r7, #12]
 8008fdc:	f7ff ffb4 	bl	8008f48 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	771a      	strb	r2, [r3, #28]
}
 8008fe6:	bf00      	nop
 8008fe8:	3710      	adds	r7, #16
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}

08008fee <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8008fee:	b580      	push	{r7, lr}
 8008ff0:	b084      	sub	sp, #16
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ffa:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009000:	687a      	ldr	r2, [r7, #4]
 8009002:	429a      	cmp	r2, r3
 8009004:	d10b      	bne.n	800901e <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	2201      	movs	r2, #1
 800900a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	69db      	ldr	r3, [r3, #28]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d136      	bne.n	8009082 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	2201      	movs	r2, #1
 8009018:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800901c:	e031      	b.n	8009082 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009022:	687a      	ldr	r2, [r7, #4]
 8009024:	429a      	cmp	r2, r3
 8009026:	d10b      	bne.n	8009040 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2202      	movs	r2, #2
 800902c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	69db      	ldr	r3, [r3, #28]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d125      	bne.n	8009082 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	2201      	movs	r2, #1
 800903a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800903e:	e020      	b.n	8009082 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009044:	687a      	ldr	r2, [r7, #4]
 8009046:	429a      	cmp	r2, r3
 8009048:	d10b      	bne.n	8009062 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	2204      	movs	r2, #4
 800904e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	69db      	ldr	r3, [r3, #28]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d114      	bne.n	8009082 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2201      	movs	r2, #1
 800905c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009060:	e00f      	b.n	8009082 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009066:	687a      	ldr	r2, [r7, #4]
 8009068:	429a      	cmp	r2, r3
 800906a:	d10a      	bne.n	8009082 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	2208      	movs	r2, #8
 8009070:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	69db      	ldr	r3, [r3, #28]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d103      	bne.n	8009082 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	2201      	movs	r2, #1
 800907e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009082:	68f8      	ldr	r0, [r7, #12]
 8009084:	f7ff ff42 	bl	8008f0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	2200      	movs	r2, #0
 800908c:	771a      	strb	r2, [r3, #28]
}
 800908e:	bf00      	nop
 8009090:	3710      	adds	r7, #16
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}

08009096 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009096:	b580      	push	{r7, lr}
 8009098:	b084      	sub	sp, #16
 800909a:	af00      	add	r7, sp, #0
 800909c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090a2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090a8:	687a      	ldr	r2, [r7, #4]
 80090aa:	429a      	cmp	r2, r3
 80090ac:	d103      	bne.n	80090b6 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	2201      	movs	r2, #1
 80090b2:	771a      	strb	r2, [r3, #28]
 80090b4:	e019      	b.n	80090ea <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090ba:	687a      	ldr	r2, [r7, #4]
 80090bc:	429a      	cmp	r2, r3
 80090be:	d103      	bne.n	80090c8 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	2202      	movs	r2, #2
 80090c4:	771a      	strb	r2, [r3, #28]
 80090c6:	e010      	b.n	80090ea <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090cc:	687a      	ldr	r2, [r7, #4]
 80090ce:	429a      	cmp	r2, r3
 80090d0:	d103      	bne.n	80090da <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	2204      	movs	r2, #4
 80090d6:	771a      	strb	r2, [r3, #28]
 80090d8:	e007      	b.n	80090ea <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090de:	687a      	ldr	r2, [r7, #4]
 80090e0:	429a      	cmp	r2, r3
 80090e2:	d102      	bne.n	80090ea <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	2208      	movs	r2, #8
 80090e8:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80090ea:	68f8      	ldr	r0, [r7, #12]
 80090ec:	f7ff ff18 	bl	8008f20 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	2200      	movs	r2, #0
 80090f4:	771a      	strb	r2, [r3, #28]
}
 80090f6:	bf00      	nop
 80090f8:	3710      	adds	r7, #16
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}
	...

08009100 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009100:	b480      	push	{r7}
 8009102:	b085      	sub	sp, #20
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
 8009108:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	4a4c      	ldr	r2, [pc, #304]	@ (8009244 <TIM_Base_SetConfig+0x144>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d017      	beq.n	8009148 <TIM_Base_SetConfig+0x48>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800911e:	d013      	beq.n	8009148 <TIM_Base_SetConfig+0x48>
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	4a49      	ldr	r2, [pc, #292]	@ (8009248 <TIM_Base_SetConfig+0x148>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d00f      	beq.n	8009148 <TIM_Base_SetConfig+0x48>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	4a48      	ldr	r2, [pc, #288]	@ (800924c <TIM_Base_SetConfig+0x14c>)
 800912c:	4293      	cmp	r3, r2
 800912e:	d00b      	beq.n	8009148 <TIM_Base_SetConfig+0x48>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	4a47      	ldr	r2, [pc, #284]	@ (8009250 <TIM_Base_SetConfig+0x150>)
 8009134:	4293      	cmp	r3, r2
 8009136:	d007      	beq.n	8009148 <TIM_Base_SetConfig+0x48>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	4a46      	ldr	r2, [pc, #280]	@ (8009254 <TIM_Base_SetConfig+0x154>)
 800913c:	4293      	cmp	r3, r2
 800913e:	d003      	beq.n	8009148 <TIM_Base_SetConfig+0x48>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	4a45      	ldr	r2, [pc, #276]	@ (8009258 <TIM_Base_SetConfig+0x158>)
 8009144:	4293      	cmp	r3, r2
 8009146:	d108      	bne.n	800915a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800914e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	685b      	ldr	r3, [r3, #4]
 8009154:	68fa      	ldr	r2, [r7, #12]
 8009156:	4313      	orrs	r3, r2
 8009158:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	4a39      	ldr	r2, [pc, #228]	@ (8009244 <TIM_Base_SetConfig+0x144>)
 800915e:	4293      	cmp	r3, r2
 8009160:	d023      	beq.n	80091aa <TIM_Base_SetConfig+0xaa>
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009168:	d01f      	beq.n	80091aa <TIM_Base_SetConfig+0xaa>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	4a36      	ldr	r2, [pc, #216]	@ (8009248 <TIM_Base_SetConfig+0x148>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d01b      	beq.n	80091aa <TIM_Base_SetConfig+0xaa>
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	4a35      	ldr	r2, [pc, #212]	@ (800924c <TIM_Base_SetConfig+0x14c>)
 8009176:	4293      	cmp	r3, r2
 8009178:	d017      	beq.n	80091aa <TIM_Base_SetConfig+0xaa>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	4a34      	ldr	r2, [pc, #208]	@ (8009250 <TIM_Base_SetConfig+0x150>)
 800917e:	4293      	cmp	r3, r2
 8009180:	d013      	beq.n	80091aa <TIM_Base_SetConfig+0xaa>
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	4a33      	ldr	r2, [pc, #204]	@ (8009254 <TIM_Base_SetConfig+0x154>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d00f      	beq.n	80091aa <TIM_Base_SetConfig+0xaa>
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	4a33      	ldr	r2, [pc, #204]	@ (800925c <TIM_Base_SetConfig+0x15c>)
 800918e:	4293      	cmp	r3, r2
 8009190:	d00b      	beq.n	80091aa <TIM_Base_SetConfig+0xaa>
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	4a32      	ldr	r2, [pc, #200]	@ (8009260 <TIM_Base_SetConfig+0x160>)
 8009196:	4293      	cmp	r3, r2
 8009198:	d007      	beq.n	80091aa <TIM_Base_SetConfig+0xaa>
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	4a31      	ldr	r2, [pc, #196]	@ (8009264 <TIM_Base_SetConfig+0x164>)
 800919e:	4293      	cmp	r3, r2
 80091a0:	d003      	beq.n	80091aa <TIM_Base_SetConfig+0xaa>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	4a2c      	ldr	r2, [pc, #176]	@ (8009258 <TIM_Base_SetConfig+0x158>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d108      	bne.n	80091bc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80091b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	68db      	ldr	r3, [r3, #12]
 80091b6:	68fa      	ldr	r2, [r7, #12]
 80091b8:	4313      	orrs	r3, r2
 80091ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	695b      	ldr	r3, [r3, #20]
 80091c6:	4313      	orrs	r3, r2
 80091c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	68fa      	ldr	r2, [r7, #12]
 80091ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	689a      	ldr	r2, [r3, #8]
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	681a      	ldr	r2, [r3, #0]
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	4a18      	ldr	r2, [pc, #96]	@ (8009244 <TIM_Base_SetConfig+0x144>)
 80091e4:	4293      	cmp	r3, r2
 80091e6:	d013      	beq.n	8009210 <TIM_Base_SetConfig+0x110>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	4a1a      	ldr	r2, [pc, #104]	@ (8009254 <TIM_Base_SetConfig+0x154>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d00f      	beq.n	8009210 <TIM_Base_SetConfig+0x110>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	4a1a      	ldr	r2, [pc, #104]	@ (800925c <TIM_Base_SetConfig+0x15c>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d00b      	beq.n	8009210 <TIM_Base_SetConfig+0x110>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	4a19      	ldr	r2, [pc, #100]	@ (8009260 <TIM_Base_SetConfig+0x160>)
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d007      	beq.n	8009210 <TIM_Base_SetConfig+0x110>
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	4a18      	ldr	r2, [pc, #96]	@ (8009264 <TIM_Base_SetConfig+0x164>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d003      	beq.n	8009210 <TIM_Base_SetConfig+0x110>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	4a13      	ldr	r2, [pc, #76]	@ (8009258 <TIM_Base_SetConfig+0x158>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d103      	bne.n	8009218 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	691a      	ldr	r2, [r3, #16]
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2201      	movs	r2, #1
 800921c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	691b      	ldr	r3, [r3, #16]
 8009222:	f003 0301 	and.w	r3, r3, #1
 8009226:	2b01      	cmp	r3, #1
 8009228:	d105      	bne.n	8009236 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	691b      	ldr	r3, [r3, #16]
 800922e:	f023 0201 	bic.w	r2, r3, #1
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	611a      	str	r2, [r3, #16]
  }
}
 8009236:	bf00      	nop
 8009238:	3714      	adds	r7, #20
 800923a:	46bd      	mov	sp, r7
 800923c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009240:	4770      	bx	lr
 8009242:	bf00      	nop
 8009244:	40012c00 	.word	0x40012c00
 8009248:	40000400 	.word	0x40000400
 800924c:	40000800 	.word	0x40000800
 8009250:	40000c00 	.word	0x40000c00
 8009254:	40013400 	.word	0x40013400
 8009258:	40015000 	.word	0x40015000
 800925c:	40014000 	.word	0x40014000
 8009260:	40014400 	.word	0x40014400
 8009264:	40014800 	.word	0x40014800

08009268 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009268:	b480      	push	{r7}
 800926a:	b087      	sub	sp, #28
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
 8009270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6a1b      	ldr	r3, [r3, #32]
 8009276:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6a1b      	ldr	r3, [r3, #32]
 800927c:	f023 0201 	bic.w	r2, r3, #1
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	685b      	ldr	r3, [r3, #4]
 8009288:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	699b      	ldr	r3, [r3, #24]
 800928e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009296:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800929a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	f023 0303 	bic.w	r3, r3, #3
 80092a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	68fa      	ldr	r2, [r7, #12]
 80092aa:	4313      	orrs	r3, r2
 80092ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80092ae:	697b      	ldr	r3, [r7, #20]
 80092b0:	f023 0302 	bic.w	r3, r3, #2
 80092b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	689b      	ldr	r3, [r3, #8]
 80092ba:	697a      	ldr	r2, [r7, #20]
 80092bc:	4313      	orrs	r3, r2
 80092be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	4a30      	ldr	r2, [pc, #192]	@ (8009384 <TIM_OC1_SetConfig+0x11c>)
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d013      	beq.n	80092f0 <TIM_OC1_SetConfig+0x88>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	4a2f      	ldr	r2, [pc, #188]	@ (8009388 <TIM_OC1_SetConfig+0x120>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d00f      	beq.n	80092f0 <TIM_OC1_SetConfig+0x88>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	4a2e      	ldr	r2, [pc, #184]	@ (800938c <TIM_OC1_SetConfig+0x124>)
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d00b      	beq.n	80092f0 <TIM_OC1_SetConfig+0x88>
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	4a2d      	ldr	r2, [pc, #180]	@ (8009390 <TIM_OC1_SetConfig+0x128>)
 80092dc:	4293      	cmp	r3, r2
 80092de:	d007      	beq.n	80092f0 <TIM_OC1_SetConfig+0x88>
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	4a2c      	ldr	r2, [pc, #176]	@ (8009394 <TIM_OC1_SetConfig+0x12c>)
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d003      	beq.n	80092f0 <TIM_OC1_SetConfig+0x88>
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	4a2b      	ldr	r2, [pc, #172]	@ (8009398 <TIM_OC1_SetConfig+0x130>)
 80092ec:	4293      	cmp	r3, r2
 80092ee:	d10c      	bne.n	800930a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80092f0:	697b      	ldr	r3, [r7, #20]
 80092f2:	f023 0308 	bic.w	r3, r3, #8
 80092f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	68db      	ldr	r3, [r3, #12]
 80092fc:	697a      	ldr	r2, [r7, #20]
 80092fe:	4313      	orrs	r3, r2
 8009300:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	f023 0304 	bic.w	r3, r3, #4
 8009308:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	4a1d      	ldr	r2, [pc, #116]	@ (8009384 <TIM_OC1_SetConfig+0x11c>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d013      	beq.n	800933a <TIM_OC1_SetConfig+0xd2>
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	4a1c      	ldr	r2, [pc, #112]	@ (8009388 <TIM_OC1_SetConfig+0x120>)
 8009316:	4293      	cmp	r3, r2
 8009318:	d00f      	beq.n	800933a <TIM_OC1_SetConfig+0xd2>
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	4a1b      	ldr	r2, [pc, #108]	@ (800938c <TIM_OC1_SetConfig+0x124>)
 800931e:	4293      	cmp	r3, r2
 8009320:	d00b      	beq.n	800933a <TIM_OC1_SetConfig+0xd2>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	4a1a      	ldr	r2, [pc, #104]	@ (8009390 <TIM_OC1_SetConfig+0x128>)
 8009326:	4293      	cmp	r3, r2
 8009328:	d007      	beq.n	800933a <TIM_OC1_SetConfig+0xd2>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	4a19      	ldr	r2, [pc, #100]	@ (8009394 <TIM_OC1_SetConfig+0x12c>)
 800932e:	4293      	cmp	r3, r2
 8009330:	d003      	beq.n	800933a <TIM_OC1_SetConfig+0xd2>
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	4a18      	ldr	r2, [pc, #96]	@ (8009398 <TIM_OC1_SetConfig+0x130>)
 8009336:	4293      	cmp	r3, r2
 8009338:	d111      	bne.n	800935e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009340:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009348:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	695b      	ldr	r3, [r3, #20]
 800934e:	693a      	ldr	r2, [r7, #16]
 8009350:	4313      	orrs	r3, r2
 8009352:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	699b      	ldr	r3, [r3, #24]
 8009358:	693a      	ldr	r2, [r7, #16]
 800935a:	4313      	orrs	r3, r2
 800935c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	693a      	ldr	r2, [r7, #16]
 8009362:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	68fa      	ldr	r2, [r7, #12]
 8009368:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	685a      	ldr	r2, [r3, #4]
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	697a      	ldr	r2, [r7, #20]
 8009376:	621a      	str	r2, [r3, #32]
}
 8009378:	bf00      	nop
 800937a:	371c      	adds	r7, #28
 800937c:	46bd      	mov	sp, r7
 800937e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009382:	4770      	bx	lr
 8009384:	40012c00 	.word	0x40012c00
 8009388:	40013400 	.word	0x40013400
 800938c:	40014000 	.word	0x40014000
 8009390:	40014400 	.word	0x40014400
 8009394:	40014800 	.word	0x40014800
 8009398:	40015000 	.word	0x40015000

0800939c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800939c:	b480      	push	{r7}
 800939e:	b087      	sub	sp, #28
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6a1b      	ldr	r3, [r3, #32]
 80093aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6a1b      	ldr	r3, [r3, #32]
 80093b0:	f023 0210 	bic.w	r2, r3, #16
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	685b      	ldr	r3, [r3, #4]
 80093bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	699b      	ldr	r3, [r3, #24]
 80093c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80093ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80093ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80093d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	021b      	lsls	r3, r3, #8
 80093de:	68fa      	ldr	r2, [r7, #12]
 80093e0:	4313      	orrs	r3, r2
 80093e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	f023 0320 	bic.w	r3, r3, #32
 80093ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	689b      	ldr	r3, [r3, #8]
 80093f0:	011b      	lsls	r3, r3, #4
 80093f2:	697a      	ldr	r2, [r7, #20]
 80093f4:	4313      	orrs	r3, r2
 80093f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	4a2c      	ldr	r2, [pc, #176]	@ (80094ac <TIM_OC2_SetConfig+0x110>)
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d007      	beq.n	8009410 <TIM_OC2_SetConfig+0x74>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	4a2b      	ldr	r2, [pc, #172]	@ (80094b0 <TIM_OC2_SetConfig+0x114>)
 8009404:	4293      	cmp	r3, r2
 8009406:	d003      	beq.n	8009410 <TIM_OC2_SetConfig+0x74>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	4a2a      	ldr	r2, [pc, #168]	@ (80094b4 <TIM_OC2_SetConfig+0x118>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d10d      	bne.n	800942c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009416:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	68db      	ldr	r3, [r3, #12]
 800941c:	011b      	lsls	r3, r3, #4
 800941e:	697a      	ldr	r2, [r7, #20]
 8009420:	4313      	orrs	r3, r2
 8009422:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800942a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	4a1f      	ldr	r2, [pc, #124]	@ (80094ac <TIM_OC2_SetConfig+0x110>)
 8009430:	4293      	cmp	r3, r2
 8009432:	d013      	beq.n	800945c <TIM_OC2_SetConfig+0xc0>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	4a1e      	ldr	r2, [pc, #120]	@ (80094b0 <TIM_OC2_SetConfig+0x114>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d00f      	beq.n	800945c <TIM_OC2_SetConfig+0xc0>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	4a1e      	ldr	r2, [pc, #120]	@ (80094b8 <TIM_OC2_SetConfig+0x11c>)
 8009440:	4293      	cmp	r3, r2
 8009442:	d00b      	beq.n	800945c <TIM_OC2_SetConfig+0xc0>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	4a1d      	ldr	r2, [pc, #116]	@ (80094bc <TIM_OC2_SetConfig+0x120>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d007      	beq.n	800945c <TIM_OC2_SetConfig+0xc0>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	4a1c      	ldr	r2, [pc, #112]	@ (80094c0 <TIM_OC2_SetConfig+0x124>)
 8009450:	4293      	cmp	r3, r2
 8009452:	d003      	beq.n	800945c <TIM_OC2_SetConfig+0xc0>
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	4a17      	ldr	r2, [pc, #92]	@ (80094b4 <TIM_OC2_SetConfig+0x118>)
 8009458:	4293      	cmp	r3, r2
 800945a:	d113      	bne.n	8009484 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800945c:	693b      	ldr	r3, [r7, #16]
 800945e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009462:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009464:	693b      	ldr	r3, [r7, #16]
 8009466:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800946a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	695b      	ldr	r3, [r3, #20]
 8009470:	009b      	lsls	r3, r3, #2
 8009472:	693a      	ldr	r2, [r7, #16]
 8009474:	4313      	orrs	r3, r2
 8009476:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	699b      	ldr	r3, [r3, #24]
 800947c:	009b      	lsls	r3, r3, #2
 800947e:	693a      	ldr	r2, [r7, #16]
 8009480:	4313      	orrs	r3, r2
 8009482:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	693a      	ldr	r2, [r7, #16]
 8009488:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	68fa      	ldr	r2, [r7, #12]
 800948e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	685a      	ldr	r2, [r3, #4]
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	697a      	ldr	r2, [r7, #20]
 800949c:	621a      	str	r2, [r3, #32]
}
 800949e:	bf00      	nop
 80094a0:	371c      	adds	r7, #28
 80094a2:	46bd      	mov	sp, r7
 80094a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a8:	4770      	bx	lr
 80094aa:	bf00      	nop
 80094ac:	40012c00 	.word	0x40012c00
 80094b0:	40013400 	.word	0x40013400
 80094b4:	40015000 	.word	0x40015000
 80094b8:	40014000 	.word	0x40014000
 80094bc:	40014400 	.word	0x40014400
 80094c0:	40014800 	.word	0x40014800

080094c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80094c4:	b480      	push	{r7}
 80094c6:	b087      	sub	sp, #28
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
 80094cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6a1b      	ldr	r3, [r3, #32]
 80094d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6a1b      	ldr	r3, [r3, #32]
 80094d8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	685b      	ldr	r3, [r3, #4]
 80094e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	69db      	ldr	r3, [r3, #28]
 80094ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80094f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80094f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	f023 0303 	bic.w	r3, r3, #3
 80094fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	68fa      	ldr	r2, [r7, #12]
 8009506:	4313      	orrs	r3, r2
 8009508:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800950a:	697b      	ldr	r3, [r7, #20]
 800950c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009510:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	689b      	ldr	r3, [r3, #8]
 8009516:	021b      	lsls	r3, r3, #8
 8009518:	697a      	ldr	r2, [r7, #20]
 800951a:	4313      	orrs	r3, r2
 800951c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	4a2b      	ldr	r2, [pc, #172]	@ (80095d0 <TIM_OC3_SetConfig+0x10c>)
 8009522:	4293      	cmp	r3, r2
 8009524:	d007      	beq.n	8009536 <TIM_OC3_SetConfig+0x72>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	4a2a      	ldr	r2, [pc, #168]	@ (80095d4 <TIM_OC3_SetConfig+0x110>)
 800952a:	4293      	cmp	r3, r2
 800952c:	d003      	beq.n	8009536 <TIM_OC3_SetConfig+0x72>
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	4a29      	ldr	r2, [pc, #164]	@ (80095d8 <TIM_OC3_SetConfig+0x114>)
 8009532:	4293      	cmp	r3, r2
 8009534:	d10d      	bne.n	8009552 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800953c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	68db      	ldr	r3, [r3, #12]
 8009542:	021b      	lsls	r3, r3, #8
 8009544:	697a      	ldr	r2, [r7, #20]
 8009546:	4313      	orrs	r3, r2
 8009548:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800954a:	697b      	ldr	r3, [r7, #20]
 800954c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009550:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	4a1e      	ldr	r2, [pc, #120]	@ (80095d0 <TIM_OC3_SetConfig+0x10c>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d013      	beq.n	8009582 <TIM_OC3_SetConfig+0xbe>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	4a1d      	ldr	r2, [pc, #116]	@ (80095d4 <TIM_OC3_SetConfig+0x110>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d00f      	beq.n	8009582 <TIM_OC3_SetConfig+0xbe>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	4a1d      	ldr	r2, [pc, #116]	@ (80095dc <TIM_OC3_SetConfig+0x118>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d00b      	beq.n	8009582 <TIM_OC3_SetConfig+0xbe>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	4a1c      	ldr	r2, [pc, #112]	@ (80095e0 <TIM_OC3_SetConfig+0x11c>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d007      	beq.n	8009582 <TIM_OC3_SetConfig+0xbe>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	4a1b      	ldr	r2, [pc, #108]	@ (80095e4 <TIM_OC3_SetConfig+0x120>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d003      	beq.n	8009582 <TIM_OC3_SetConfig+0xbe>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	4a16      	ldr	r2, [pc, #88]	@ (80095d8 <TIM_OC3_SetConfig+0x114>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d113      	bne.n	80095aa <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009582:	693b      	ldr	r3, [r7, #16]
 8009584:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009588:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800958a:	693b      	ldr	r3, [r7, #16]
 800958c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009590:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	695b      	ldr	r3, [r3, #20]
 8009596:	011b      	lsls	r3, r3, #4
 8009598:	693a      	ldr	r2, [r7, #16]
 800959a:	4313      	orrs	r3, r2
 800959c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	699b      	ldr	r3, [r3, #24]
 80095a2:	011b      	lsls	r3, r3, #4
 80095a4:	693a      	ldr	r2, [r7, #16]
 80095a6:	4313      	orrs	r3, r2
 80095a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	693a      	ldr	r2, [r7, #16]
 80095ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	68fa      	ldr	r2, [r7, #12]
 80095b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	685a      	ldr	r2, [r3, #4]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	697a      	ldr	r2, [r7, #20]
 80095c2:	621a      	str	r2, [r3, #32]
}
 80095c4:	bf00      	nop
 80095c6:	371c      	adds	r7, #28
 80095c8:	46bd      	mov	sp, r7
 80095ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ce:	4770      	bx	lr
 80095d0:	40012c00 	.word	0x40012c00
 80095d4:	40013400 	.word	0x40013400
 80095d8:	40015000 	.word	0x40015000
 80095dc:	40014000 	.word	0x40014000
 80095e0:	40014400 	.word	0x40014400
 80095e4:	40014800 	.word	0x40014800

080095e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b087      	sub	sp, #28
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
 80095f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6a1b      	ldr	r3, [r3, #32]
 80095f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6a1b      	ldr	r3, [r3, #32]
 80095fc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	685b      	ldr	r3, [r3, #4]
 8009608:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	69db      	ldr	r3, [r3, #28]
 800960e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009616:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800961a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009622:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	021b      	lsls	r3, r3, #8
 800962a:	68fa      	ldr	r2, [r7, #12]
 800962c:	4313      	orrs	r3, r2
 800962e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009630:	697b      	ldr	r3, [r7, #20]
 8009632:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009636:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	689b      	ldr	r3, [r3, #8]
 800963c:	031b      	lsls	r3, r3, #12
 800963e:	697a      	ldr	r2, [r7, #20]
 8009640:	4313      	orrs	r3, r2
 8009642:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	4a2c      	ldr	r2, [pc, #176]	@ (80096f8 <TIM_OC4_SetConfig+0x110>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d007      	beq.n	800965c <TIM_OC4_SetConfig+0x74>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	4a2b      	ldr	r2, [pc, #172]	@ (80096fc <TIM_OC4_SetConfig+0x114>)
 8009650:	4293      	cmp	r3, r2
 8009652:	d003      	beq.n	800965c <TIM_OC4_SetConfig+0x74>
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	4a2a      	ldr	r2, [pc, #168]	@ (8009700 <TIM_OC4_SetConfig+0x118>)
 8009658:	4293      	cmp	r3, r2
 800965a:	d10d      	bne.n	8009678 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009662:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	68db      	ldr	r3, [r3, #12]
 8009668:	031b      	lsls	r3, r3, #12
 800966a:	697a      	ldr	r2, [r7, #20]
 800966c:	4313      	orrs	r3, r2
 800966e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009670:	697b      	ldr	r3, [r7, #20]
 8009672:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009676:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	4a1f      	ldr	r2, [pc, #124]	@ (80096f8 <TIM_OC4_SetConfig+0x110>)
 800967c:	4293      	cmp	r3, r2
 800967e:	d013      	beq.n	80096a8 <TIM_OC4_SetConfig+0xc0>
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	4a1e      	ldr	r2, [pc, #120]	@ (80096fc <TIM_OC4_SetConfig+0x114>)
 8009684:	4293      	cmp	r3, r2
 8009686:	d00f      	beq.n	80096a8 <TIM_OC4_SetConfig+0xc0>
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	4a1e      	ldr	r2, [pc, #120]	@ (8009704 <TIM_OC4_SetConfig+0x11c>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d00b      	beq.n	80096a8 <TIM_OC4_SetConfig+0xc0>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	4a1d      	ldr	r2, [pc, #116]	@ (8009708 <TIM_OC4_SetConfig+0x120>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d007      	beq.n	80096a8 <TIM_OC4_SetConfig+0xc0>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	4a1c      	ldr	r2, [pc, #112]	@ (800970c <TIM_OC4_SetConfig+0x124>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d003      	beq.n	80096a8 <TIM_OC4_SetConfig+0xc0>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	4a17      	ldr	r2, [pc, #92]	@ (8009700 <TIM_OC4_SetConfig+0x118>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d113      	bne.n	80096d0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80096a8:	693b      	ldr	r3, [r7, #16]
 80096aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80096ae:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80096b0:	693b      	ldr	r3, [r7, #16]
 80096b2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80096b6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	695b      	ldr	r3, [r3, #20]
 80096bc:	019b      	lsls	r3, r3, #6
 80096be:	693a      	ldr	r2, [r7, #16]
 80096c0:	4313      	orrs	r3, r2
 80096c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	699b      	ldr	r3, [r3, #24]
 80096c8:	019b      	lsls	r3, r3, #6
 80096ca:	693a      	ldr	r2, [r7, #16]
 80096cc:	4313      	orrs	r3, r2
 80096ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	693a      	ldr	r2, [r7, #16]
 80096d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	68fa      	ldr	r2, [r7, #12]
 80096da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	685a      	ldr	r2, [r3, #4]
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	697a      	ldr	r2, [r7, #20]
 80096e8:	621a      	str	r2, [r3, #32]
}
 80096ea:	bf00      	nop
 80096ec:	371c      	adds	r7, #28
 80096ee:	46bd      	mov	sp, r7
 80096f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f4:	4770      	bx	lr
 80096f6:	bf00      	nop
 80096f8:	40012c00 	.word	0x40012c00
 80096fc:	40013400 	.word	0x40013400
 8009700:	40015000 	.word	0x40015000
 8009704:	40014000 	.word	0x40014000
 8009708:	40014400 	.word	0x40014400
 800970c:	40014800 	.word	0x40014800

08009710 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009710:	b480      	push	{r7}
 8009712:	b087      	sub	sp, #28
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
 8009718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6a1b      	ldr	r3, [r3, #32]
 800971e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6a1b      	ldr	r3, [r3, #32]
 8009724:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	685b      	ldr	r3, [r3, #4]
 8009730:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800973e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009742:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	68fa      	ldr	r2, [r7, #12]
 800974a:	4313      	orrs	r3, r2
 800974c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800974e:	693b      	ldr	r3, [r7, #16]
 8009750:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009754:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	689b      	ldr	r3, [r3, #8]
 800975a:	041b      	lsls	r3, r3, #16
 800975c:	693a      	ldr	r2, [r7, #16]
 800975e:	4313      	orrs	r3, r2
 8009760:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	4a19      	ldr	r2, [pc, #100]	@ (80097cc <TIM_OC5_SetConfig+0xbc>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d013      	beq.n	8009792 <TIM_OC5_SetConfig+0x82>
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	4a18      	ldr	r2, [pc, #96]	@ (80097d0 <TIM_OC5_SetConfig+0xc0>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d00f      	beq.n	8009792 <TIM_OC5_SetConfig+0x82>
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	4a17      	ldr	r2, [pc, #92]	@ (80097d4 <TIM_OC5_SetConfig+0xc4>)
 8009776:	4293      	cmp	r3, r2
 8009778:	d00b      	beq.n	8009792 <TIM_OC5_SetConfig+0x82>
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	4a16      	ldr	r2, [pc, #88]	@ (80097d8 <TIM_OC5_SetConfig+0xc8>)
 800977e:	4293      	cmp	r3, r2
 8009780:	d007      	beq.n	8009792 <TIM_OC5_SetConfig+0x82>
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	4a15      	ldr	r2, [pc, #84]	@ (80097dc <TIM_OC5_SetConfig+0xcc>)
 8009786:	4293      	cmp	r3, r2
 8009788:	d003      	beq.n	8009792 <TIM_OC5_SetConfig+0x82>
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	4a14      	ldr	r2, [pc, #80]	@ (80097e0 <TIM_OC5_SetConfig+0xd0>)
 800978e:	4293      	cmp	r3, r2
 8009790:	d109      	bne.n	80097a6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009792:	697b      	ldr	r3, [r7, #20]
 8009794:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009798:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	695b      	ldr	r3, [r3, #20]
 800979e:	021b      	lsls	r3, r3, #8
 80097a0:	697a      	ldr	r2, [r7, #20]
 80097a2:	4313      	orrs	r3, r2
 80097a4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	697a      	ldr	r2, [r7, #20]
 80097aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	68fa      	ldr	r2, [r7, #12]
 80097b0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	685a      	ldr	r2, [r3, #4]
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	693a      	ldr	r2, [r7, #16]
 80097be:	621a      	str	r2, [r3, #32]
}
 80097c0:	bf00      	nop
 80097c2:	371c      	adds	r7, #28
 80097c4:	46bd      	mov	sp, r7
 80097c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ca:	4770      	bx	lr
 80097cc:	40012c00 	.word	0x40012c00
 80097d0:	40013400 	.word	0x40013400
 80097d4:	40014000 	.word	0x40014000
 80097d8:	40014400 	.word	0x40014400
 80097dc:	40014800 	.word	0x40014800
 80097e0:	40015000 	.word	0x40015000

080097e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80097e4:	b480      	push	{r7}
 80097e6:	b087      	sub	sp, #28
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
 80097ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6a1b      	ldr	r3, [r3, #32]
 80097f2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6a1b      	ldr	r3, [r3, #32]
 80097f8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	685b      	ldr	r3, [r3, #4]
 8009804:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800980a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009812:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009816:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	021b      	lsls	r3, r3, #8
 800981e:	68fa      	ldr	r2, [r7, #12]
 8009820:	4313      	orrs	r3, r2
 8009822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009824:	693b      	ldr	r3, [r7, #16]
 8009826:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800982a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	689b      	ldr	r3, [r3, #8]
 8009830:	051b      	lsls	r3, r3, #20
 8009832:	693a      	ldr	r2, [r7, #16]
 8009834:	4313      	orrs	r3, r2
 8009836:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	4a1a      	ldr	r2, [pc, #104]	@ (80098a4 <TIM_OC6_SetConfig+0xc0>)
 800983c:	4293      	cmp	r3, r2
 800983e:	d013      	beq.n	8009868 <TIM_OC6_SetConfig+0x84>
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	4a19      	ldr	r2, [pc, #100]	@ (80098a8 <TIM_OC6_SetConfig+0xc4>)
 8009844:	4293      	cmp	r3, r2
 8009846:	d00f      	beq.n	8009868 <TIM_OC6_SetConfig+0x84>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	4a18      	ldr	r2, [pc, #96]	@ (80098ac <TIM_OC6_SetConfig+0xc8>)
 800984c:	4293      	cmp	r3, r2
 800984e:	d00b      	beq.n	8009868 <TIM_OC6_SetConfig+0x84>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	4a17      	ldr	r2, [pc, #92]	@ (80098b0 <TIM_OC6_SetConfig+0xcc>)
 8009854:	4293      	cmp	r3, r2
 8009856:	d007      	beq.n	8009868 <TIM_OC6_SetConfig+0x84>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	4a16      	ldr	r2, [pc, #88]	@ (80098b4 <TIM_OC6_SetConfig+0xd0>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d003      	beq.n	8009868 <TIM_OC6_SetConfig+0x84>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	4a15      	ldr	r2, [pc, #84]	@ (80098b8 <TIM_OC6_SetConfig+0xd4>)
 8009864:	4293      	cmp	r3, r2
 8009866:	d109      	bne.n	800987c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009868:	697b      	ldr	r3, [r7, #20]
 800986a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800986e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	695b      	ldr	r3, [r3, #20]
 8009874:	029b      	lsls	r3, r3, #10
 8009876:	697a      	ldr	r2, [r7, #20]
 8009878:	4313      	orrs	r3, r2
 800987a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	697a      	ldr	r2, [r7, #20]
 8009880:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	68fa      	ldr	r2, [r7, #12]
 8009886:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	685a      	ldr	r2, [r3, #4]
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	693a      	ldr	r2, [r7, #16]
 8009894:	621a      	str	r2, [r3, #32]
}
 8009896:	bf00      	nop
 8009898:	371c      	adds	r7, #28
 800989a:	46bd      	mov	sp, r7
 800989c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a0:	4770      	bx	lr
 80098a2:	bf00      	nop
 80098a4:	40012c00 	.word	0x40012c00
 80098a8:	40013400 	.word	0x40013400
 80098ac:	40014000 	.word	0x40014000
 80098b0:	40014400 	.word	0x40014400
 80098b4:	40014800 	.word	0x40014800
 80098b8:	40015000 	.word	0x40015000

080098bc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b086      	sub	sp, #24
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80098c6:	2300      	movs	r3, #0
 80098c8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	689b      	ldr	r3, [r3, #8]
 80098d0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80098d2:	693b      	ldr	r3, [r7, #16]
 80098d4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80098d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80098dc:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	685b      	ldr	r3, [r3, #4]
 80098e2:	693a      	ldr	r2, [r7, #16]
 80098e4:	4313      	orrs	r3, r2
 80098e6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80098e8:	693b      	ldr	r3, [r7, #16]
 80098ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80098ee:	f023 0307 	bic.w	r3, r3, #7
 80098f2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	693a      	ldr	r2, [r7, #16]
 80098fa:	4313      	orrs	r3, r2
 80098fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	693a      	ldr	r2, [r7, #16]
 8009904:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	685b      	ldr	r3, [r3, #4]
 800990a:	4a56      	ldr	r2, [pc, #344]	@ (8009a64 <TIM_SlaveTimer_SetConfig+0x1a8>)
 800990c:	4293      	cmp	r3, r2
 800990e:	f000 80a2 	beq.w	8009a56 <TIM_SlaveTimer_SetConfig+0x19a>
 8009912:	4a54      	ldr	r2, [pc, #336]	@ (8009a64 <TIM_SlaveTimer_SetConfig+0x1a8>)
 8009914:	4293      	cmp	r3, r2
 8009916:	f200 809b 	bhi.w	8009a50 <TIM_SlaveTimer_SetConfig+0x194>
 800991a:	4a53      	ldr	r2, [pc, #332]	@ (8009a68 <TIM_SlaveTimer_SetConfig+0x1ac>)
 800991c:	4293      	cmp	r3, r2
 800991e:	f000 809a 	beq.w	8009a56 <TIM_SlaveTimer_SetConfig+0x19a>
 8009922:	4a51      	ldr	r2, [pc, #324]	@ (8009a68 <TIM_SlaveTimer_SetConfig+0x1ac>)
 8009924:	4293      	cmp	r3, r2
 8009926:	f200 8093 	bhi.w	8009a50 <TIM_SlaveTimer_SetConfig+0x194>
 800992a:	4a50      	ldr	r2, [pc, #320]	@ (8009a6c <TIM_SlaveTimer_SetConfig+0x1b0>)
 800992c:	4293      	cmp	r3, r2
 800992e:	f000 8092 	beq.w	8009a56 <TIM_SlaveTimer_SetConfig+0x19a>
 8009932:	4a4e      	ldr	r2, [pc, #312]	@ (8009a6c <TIM_SlaveTimer_SetConfig+0x1b0>)
 8009934:	4293      	cmp	r3, r2
 8009936:	f200 808b 	bhi.w	8009a50 <TIM_SlaveTimer_SetConfig+0x194>
 800993a:	4a4d      	ldr	r2, [pc, #308]	@ (8009a70 <TIM_SlaveTimer_SetConfig+0x1b4>)
 800993c:	4293      	cmp	r3, r2
 800993e:	f000 808a 	beq.w	8009a56 <TIM_SlaveTimer_SetConfig+0x19a>
 8009942:	4a4b      	ldr	r2, [pc, #300]	@ (8009a70 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8009944:	4293      	cmp	r3, r2
 8009946:	f200 8083 	bhi.w	8009a50 <TIM_SlaveTimer_SetConfig+0x194>
 800994a:	4a4a      	ldr	r2, [pc, #296]	@ (8009a74 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800994c:	4293      	cmp	r3, r2
 800994e:	f000 8082 	beq.w	8009a56 <TIM_SlaveTimer_SetConfig+0x19a>
 8009952:	4a48      	ldr	r2, [pc, #288]	@ (8009a74 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8009954:	4293      	cmp	r3, r2
 8009956:	d87b      	bhi.n	8009a50 <TIM_SlaveTimer_SetConfig+0x194>
 8009958:	4a47      	ldr	r2, [pc, #284]	@ (8009a78 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800995a:	4293      	cmp	r3, r2
 800995c:	d07b      	beq.n	8009a56 <TIM_SlaveTimer_SetConfig+0x19a>
 800995e:	4a46      	ldr	r2, [pc, #280]	@ (8009a78 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8009960:	4293      	cmp	r3, r2
 8009962:	d875      	bhi.n	8009a50 <TIM_SlaveTimer_SetConfig+0x194>
 8009964:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009968:	d075      	beq.n	8009a56 <TIM_SlaveTimer_SetConfig+0x19a>
 800996a:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800996e:	d86f      	bhi.n	8009a50 <TIM_SlaveTimer_SetConfig+0x194>
 8009970:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009974:	d06f      	beq.n	8009a56 <TIM_SlaveTimer_SetConfig+0x19a>
 8009976:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800997a:	d869      	bhi.n	8009a50 <TIM_SlaveTimer_SetConfig+0x194>
 800997c:	2b70      	cmp	r3, #112	@ 0x70
 800997e:	d01a      	beq.n	80099b6 <TIM_SlaveTimer_SetConfig+0xfa>
 8009980:	2b70      	cmp	r3, #112	@ 0x70
 8009982:	d865      	bhi.n	8009a50 <TIM_SlaveTimer_SetConfig+0x194>
 8009984:	2b60      	cmp	r3, #96	@ 0x60
 8009986:	d059      	beq.n	8009a3c <TIM_SlaveTimer_SetConfig+0x180>
 8009988:	2b60      	cmp	r3, #96	@ 0x60
 800998a:	d861      	bhi.n	8009a50 <TIM_SlaveTimer_SetConfig+0x194>
 800998c:	2b50      	cmp	r3, #80	@ 0x50
 800998e:	d04b      	beq.n	8009a28 <TIM_SlaveTimer_SetConfig+0x16c>
 8009990:	2b50      	cmp	r3, #80	@ 0x50
 8009992:	d85d      	bhi.n	8009a50 <TIM_SlaveTimer_SetConfig+0x194>
 8009994:	2b40      	cmp	r3, #64	@ 0x40
 8009996:	d019      	beq.n	80099cc <TIM_SlaveTimer_SetConfig+0x110>
 8009998:	2b40      	cmp	r3, #64	@ 0x40
 800999a:	d859      	bhi.n	8009a50 <TIM_SlaveTimer_SetConfig+0x194>
 800999c:	2b30      	cmp	r3, #48	@ 0x30
 800999e:	d05a      	beq.n	8009a56 <TIM_SlaveTimer_SetConfig+0x19a>
 80099a0:	2b30      	cmp	r3, #48	@ 0x30
 80099a2:	d855      	bhi.n	8009a50 <TIM_SlaveTimer_SetConfig+0x194>
 80099a4:	2b20      	cmp	r3, #32
 80099a6:	d056      	beq.n	8009a56 <TIM_SlaveTimer_SetConfig+0x19a>
 80099a8:	2b20      	cmp	r3, #32
 80099aa:	d851      	bhi.n	8009a50 <TIM_SlaveTimer_SetConfig+0x194>
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d052      	beq.n	8009a56 <TIM_SlaveTimer_SetConfig+0x19a>
 80099b0:	2b10      	cmp	r3, #16
 80099b2:	d050      	beq.n	8009a56 <TIM_SlaveTimer_SetConfig+0x19a>
 80099b4:	e04c      	b.n	8009a50 <TIM_SlaveTimer_SetConfig+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80099c6:	f000 f9ff 	bl	8009dc8 <TIM_ETR_SetConfig>
      break;
 80099ca:	e045      	b.n	8009a58 <TIM_SlaveTimer_SetConfig+0x19c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	2b05      	cmp	r3, #5
 80099d2:	d004      	beq.n	80099de <TIM_SlaveTimer_SetConfig+0x122>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 80099d8:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 80099dc:	d101      	bne.n	80099e2 <TIM_SlaveTimer_SetConfig+0x126>
      {
        return HAL_ERROR;
 80099de:	2301      	movs	r3, #1
 80099e0:	e03b      	b.n	8009a5a <TIM_SlaveTimer_SetConfig+0x19e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	6a1b      	ldr	r3, [r3, #32]
 80099e8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	6a1a      	ldr	r2, [r3, #32]
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f022 0201 	bic.w	r2, r2, #1
 80099f8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	699b      	ldr	r3, [r3, #24]
 8009a00:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009a08:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	691b      	ldr	r3, [r3, #16]
 8009a0e:	011b      	lsls	r3, r3, #4
 8009a10:	68ba      	ldr	r2, [r7, #8]
 8009a12:	4313      	orrs	r3, r2
 8009a14:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	68ba      	ldr	r2, [r7, #8]
 8009a1c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	68fa      	ldr	r2, [r7, #12]
 8009a24:	621a      	str	r2, [r3, #32]
      break;
 8009a26:	e017      	b.n	8009a58 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a34:	461a      	mov	r2, r3
 8009a36:	f000 f895 	bl	8009b64 <TIM_TI1_ConfigInputStage>
      break;
 8009a3a:	e00d      	b.n	8009a58 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009a48:	461a      	mov	r2, r3
 8009a4a:	f000 f8f7 	bl	8009c3c <TIM_TI2_ConfigInputStage>
      break;
 8009a4e:	e003      	b.n	8009a58 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 8009a50:	2301      	movs	r3, #1
 8009a52:	75fb      	strb	r3, [r7, #23]
      break;
 8009a54:	e000      	b.n	8009a58 <TIM_SlaveTimer_SetConfig+0x19c>
      break;
 8009a56:	bf00      	nop
  }

  return status;
 8009a58:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	3718      	adds	r7, #24
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}
 8009a62:	bf00      	nop
 8009a64:	00100070 	.word	0x00100070
 8009a68:	00100060 	.word	0x00100060
 8009a6c:	00100050 	.word	0x00100050
 8009a70:	00100040 	.word	0x00100040
 8009a74:	00100030 	.word	0x00100030
 8009a78:	00100020 	.word	0x00100020

08009a7c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b087      	sub	sp, #28
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	60f8      	str	r0, [r7, #12]
 8009a84:	60b9      	str	r1, [r7, #8]
 8009a86:	607a      	str	r2, [r7, #4]
 8009a88:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	6a1b      	ldr	r3, [r3, #32]
 8009a8e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	6a1b      	ldr	r3, [r3, #32]
 8009a94:	f023 0201 	bic.w	r2, r3, #1
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	699b      	ldr	r3, [r3, #24]
 8009aa0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	4a28      	ldr	r2, [pc, #160]	@ (8009b48 <TIM_TI1_SetConfig+0xcc>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d01b      	beq.n	8009ae2 <TIM_TI1_SetConfig+0x66>
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ab0:	d017      	beq.n	8009ae2 <TIM_TI1_SetConfig+0x66>
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	4a25      	ldr	r2, [pc, #148]	@ (8009b4c <TIM_TI1_SetConfig+0xd0>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d013      	beq.n	8009ae2 <TIM_TI1_SetConfig+0x66>
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	4a24      	ldr	r2, [pc, #144]	@ (8009b50 <TIM_TI1_SetConfig+0xd4>)
 8009abe:	4293      	cmp	r3, r2
 8009ac0:	d00f      	beq.n	8009ae2 <TIM_TI1_SetConfig+0x66>
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	4a23      	ldr	r2, [pc, #140]	@ (8009b54 <TIM_TI1_SetConfig+0xd8>)
 8009ac6:	4293      	cmp	r3, r2
 8009ac8:	d00b      	beq.n	8009ae2 <TIM_TI1_SetConfig+0x66>
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	4a22      	ldr	r2, [pc, #136]	@ (8009b58 <TIM_TI1_SetConfig+0xdc>)
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d007      	beq.n	8009ae2 <TIM_TI1_SetConfig+0x66>
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	4a21      	ldr	r2, [pc, #132]	@ (8009b5c <TIM_TI1_SetConfig+0xe0>)
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	d003      	beq.n	8009ae2 <TIM_TI1_SetConfig+0x66>
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	4a20      	ldr	r2, [pc, #128]	@ (8009b60 <TIM_TI1_SetConfig+0xe4>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d101      	bne.n	8009ae6 <TIM_TI1_SetConfig+0x6a>
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	e000      	b.n	8009ae8 <TIM_TI1_SetConfig+0x6c>
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d008      	beq.n	8009afe <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	f023 0303 	bic.w	r3, r3, #3
 8009af2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009af4:	697a      	ldr	r2, [r7, #20]
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	4313      	orrs	r3, r2
 8009afa:	617b      	str	r3, [r7, #20]
 8009afc:	e003      	b.n	8009b06 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	f043 0301 	orr.w	r3, r3, #1
 8009b04:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009b06:	697b      	ldr	r3, [r7, #20]
 8009b08:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009b0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	011b      	lsls	r3, r3, #4
 8009b12:	b2db      	uxtb	r3, r3
 8009b14:	697a      	ldr	r2, [r7, #20]
 8009b16:	4313      	orrs	r3, r2
 8009b18:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009b1a:	693b      	ldr	r3, [r7, #16]
 8009b1c:	f023 030a 	bic.w	r3, r3, #10
 8009b20:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	f003 030a 	and.w	r3, r3, #10
 8009b28:	693a      	ldr	r2, [r7, #16]
 8009b2a:	4313      	orrs	r3, r2
 8009b2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	697a      	ldr	r2, [r7, #20]
 8009b32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	693a      	ldr	r2, [r7, #16]
 8009b38:	621a      	str	r2, [r3, #32]
}
 8009b3a:	bf00      	nop
 8009b3c:	371c      	adds	r7, #28
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b44:	4770      	bx	lr
 8009b46:	bf00      	nop
 8009b48:	40012c00 	.word	0x40012c00
 8009b4c:	40000400 	.word	0x40000400
 8009b50:	40000800 	.word	0x40000800
 8009b54:	40000c00 	.word	0x40000c00
 8009b58:	40013400 	.word	0x40013400
 8009b5c:	40014000 	.word	0x40014000
 8009b60:	40015000 	.word	0x40015000

08009b64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009b64:	b480      	push	{r7}
 8009b66:	b087      	sub	sp, #28
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	60f8      	str	r0, [r7, #12]
 8009b6c:	60b9      	str	r1, [r7, #8]
 8009b6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	6a1b      	ldr	r3, [r3, #32]
 8009b74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	6a1b      	ldr	r3, [r3, #32]
 8009b7a:	f023 0201 	bic.w	r2, r3, #1
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	699b      	ldr	r3, [r3, #24]
 8009b86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009b88:	693b      	ldr	r3, [r7, #16]
 8009b8a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009b8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	011b      	lsls	r3, r3, #4
 8009b94:	693a      	ldr	r2, [r7, #16]
 8009b96:	4313      	orrs	r3, r2
 8009b98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009b9a:	697b      	ldr	r3, [r7, #20]
 8009b9c:	f023 030a 	bic.w	r3, r3, #10
 8009ba0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009ba2:	697a      	ldr	r2, [r7, #20]
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	4313      	orrs	r3, r2
 8009ba8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	693a      	ldr	r2, [r7, #16]
 8009bae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	697a      	ldr	r2, [r7, #20]
 8009bb4:	621a      	str	r2, [r3, #32]
}
 8009bb6:	bf00      	nop
 8009bb8:	371c      	adds	r7, #28
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc0:	4770      	bx	lr

08009bc2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009bc2:	b480      	push	{r7}
 8009bc4:	b087      	sub	sp, #28
 8009bc6:	af00      	add	r7, sp, #0
 8009bc8:	60f8      	str	r0, [r7, #12]
 8009bca:	60b9      	str	r1, [r7, #8]
 8009bcc:	607a      	str	r2, [r7, #4]
 8009bce:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	6a1b      	ldr	r3, [r3, #32]
 8009bd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	6a1b      	ldr	r3, [r3, #32]
 8009bda:	f023 0210 	bic.w	r2, r3, #16
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	699b      	ldr	r3, [r3, #24]
 8009be6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009be8:	693b      	ldr	r3, [r7, #16]
 8009bea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009bee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	021b      	lsls	r3, r3, #8
 8009bf4:	693a      	ldr	r2, [r7, #16]
 8009bf6:	4313      	orrs	r3, r2
 8009bf8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009bfa:	693b      	ldr	r3, [r7, #16]
 8009bfc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009c00:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	031b      	lsls	r3, r3, #12
 8009c06:	b29b      	uxth	r3, r3
 8009c08:	693a      	ldr	r2, [r7, #16]
 8009c0a:	4313      	orrs	r3, r2
 8009c0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009c0e:	697b      	ldr	r3, [r7, #20]
 8009c10:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009c14:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	011b      	lsls	r3, r3, #4
 8009c1a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8009c1e:	697a      	ldr	r2, [r7, #20]
 8009c20:	4313      	orrs	r3, r2
 8009c22:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	693a      	ldr	r2, [r7, #16]
 8009c28:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	697a      	ldr	r2, [r7, #20]
 8009c2e:	621a      	str	r2, [r3, #32]
}
 8009c30:	bf00      	nop
 8009c32:	371c      	adds	r7, #28
 8009c34:	46bd      	mov	sp, r7
 8009c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3a:	4770      	bx	lr

08009c3c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	b087      	sub	sp, #28
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	60f8      	str	r0, [r7, #12]
 8009c44:	60b9      	str	r1, [r7, #8]
 8009c46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	6a1b      	ldr	r3, [r3, #32]
 8009c4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	6a1b      	ldr	r3, [r3, #32]
 8009c52:	f023 0210 	bic.w	r2, r3, #16
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	699b      	ldr	r3, [r3, #24]
 8009c5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009c60:	693b      	ldr	r3, [r7, #16]
 8009c62:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009c66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	031b      	lsls	r3, r3, #12
 8009c6c:	693a      	ldr	r2, [r7, #16]
 8009c6e:	4313      	orrs	r3, r2
 8009c70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009c72:	697b      	ldr	r3, [r7, #20]
 8009c74:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009c78:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	011b      	lsls	r3, r3, #4
 8009c7e:	697a      	ldr	r2, [r7, #20]
 8009c80:	4313      	orrs	r3, r2
 8009c82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	693a      	ldr	r2, [r7, #16]
 8009c88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	697a      	ldr	r2, [r7, #20]
 8009c8e:	621a      	str	r2, [r3, #32]
}
 8009c90:	bf00      	nop
 8009c92:	371c      	adds	r7, #28
 8009c94:	46bd      	mov	sp, r7
 8009c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9a:	4770      	bx	lr

08009c9c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009c9c:	b480      	push	{r7}
 8009c9e:	b087      	sub	sp, #28
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	60f8      	str	r0, [r7, #12]
 8009ca4:	60b9      	str	r1, [r7, #8]
 8009ca6:	607a      	str	r2, [r7, #4]
 8009ca8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	6a1b      	ldr	r3, [r3, #32]
 8009cae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	6a1b      	ldr	r3, [r3, #32]
 8009cb4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	69db      	ldr	r3, [r3, #28]
 8009cc0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009cc2:	693b      	ldr	r3, [r7, #16]
 8009cc4:	f023 0303 	bic.w	r3, r3, #3
 8009cc8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8009cca:	693a      	ldr	r2, [r7, #16]
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	4313      	orrs	r3, r2
 8009cd0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009cd8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	011b      	lsls	r3, r3, #4
 8009cde:	b2db      	uxtb	r3, r3
 8009ce0:	693a      	ldr	r2, [r7, #16]
 8009ce2:	4313      	orrs	r3, r2
 8009ce4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8009cec:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	021b      	lsls	r3, r3, #8
 8009cf2:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8009cf6:	697a      	ldr	r2, [r7, #20]
 8009cf8:	4313      	orrs	r3, r2
 8009cfa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	693a      	ldr	r2, [r7, #16]
 8009d00:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	697a      	ldr	r2, [r7, #20]
 8009d06:	621a      	str	r2, [r3, #32]
}
 8009d08:	bf00      	nop
 8009d0a:	371c      	adds	r7, #28
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d12:	4770      	bx	lr

08009d14 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009d14:	b480      	push	{r7}
 8009d16:	b087      	sub	sp, #28
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	60f8      	str	r0, [r7, #12]
 8009d1c:	60b9      	str	r1, [r7, #8]
 8009d1e:	607a      	str	r2, [r7, #4]
 8009d20:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	6a1b      	ldr	r3, [r3, #32]
 8009d26:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	6a1b      	ldr	r3, [r3, #32]
 8009d2c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	69db      	ldr	r3, [r3, #28]
 8009d38:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009d3a:	693b      	ldr	r3, [r7, #16]
 8009d3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009d40:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	021b      	lsls	r3, r3, #8
 8009d46:	693a      	ldr	r2, [r7, #16]
 8009d48:	4313      	orrs	r3, r2
 8009d4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009d4c:	693b      	ldr	r3, [r7, #16]
 8009d4e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009d52:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	031b      	lsls	r3, r3, #12
 8009d58:	b29b      	uxth	r3, r3
 8009d5a:	693a      	ldr	r2, [r7, #16]
 8009d5c:	4313      	orrs	r3, r2
 8009d5e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009d60:	697b      	ldr	r3, [r7, #20]
 8009d62:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8009d66:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	031b      	lsls	r3, r3, #12
 8009d6c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8009d70:	697a      	ldr	r2, [r7, #20]
 8009d72:	4313      	orrs	r3, r2
 8009d74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	693a      	ldr	r2, [r7, #16]
 8009d7a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	697a      	ldr	r2, [r7, #20]
 8009d80:	621a      	str	r2, [r3, #32]
}
 8009d82:	bf00      	nop
 8009d84:	371c      	adds	r7, #28
 8009d86:	46bd      	mov	sp, r7
 8009d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8c:	4770      	bx	lr

08009d8e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009d8e:	b480      	push	{r7}
 8009d90:	b085      	sub	sp, #20
 8009d92:	af00      	add	r7, sp, #0
 8009d94:	6078      	str	r0, [r7, #4]
 8009d96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	689b      	ldr	r3, [r3, #8]
 8009d9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009da4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009da8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009daa:	683a      	ldr	r2, [r7, #0]
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	4313      	orrs	r3, r2
 8009db0:	f043 0307 	orr.w	r3, r3, #7
 8009db4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	68fa      	ldr	r2, [r7, #12]
 8009dba:	609a      	str	r2, [r3, #8]
}
 8009dbc:	bf00      	nop
 8009dbe:	3714      	adds	r7, #20
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc6:	4770      	bx	lr

08009dc8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009dc8:	b480      	push	{r7}
 8009dca:	b087      	sub	sp, #28
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	60f8      	str	r0, [r7, #12]
 8009dd0:	60b9      	str	r1, [r7, #8]
 8009dd2:	607a      	str	r2, [r7, #4]
 8009dd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	689b      	ldr	r3, [r3, #8]
 8009dda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ddc:	697b      	ldr	r3, [r7, #20]
 8009dde:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009de2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	021a      	lsls	r2, r3, #8
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	431a      	orrs	r2, r3
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	4313      	orrs	r3, r2
 8009df0:	697a      	ldr	r2, [r7, #20]
 8009df2:	4313      	orrs	r3, r2
 8009df4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	697a      	ldr	r2, [r7, #20]
 8009dfa:	609a      	str	r2, [r3, #8]
}
 8009dfc:	bf00      	nop
 8009dfe:	371c      	adds	r7, #28
 8009e00:	46bd      	mov	sp, r7
 8009e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e06:	4770      	bx	lr

08009e08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009e08:	b480      	push	{r7}
 8009e0a:	b087      	sub	sp, #28
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	60f8      	str	r0, [r7, #12]
 8009e10:	60b9      	str	r1, [r7, #8]
 8009e12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	f003 031f 	and.w	r3, r3, #31
 8009e1a:	2201      	movs	r2, #1
 8009e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8009e20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	6a1a      	ldr	r2, [r3, #32]
 8009e26:	697b      	ldr	r3, [r7, #20]
 8009e28:	43db      	mvns	r3, r3
 8009e2a:	401a      	ands	r2, r3
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	6a1a      	ldr	r2, [r3, #32]
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	f003 031f 	and.w	r3, r3, #31
 8009e3a:	6879      	ldr	r1, [r7, #4]
 8009e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8009e40:	431a      	orrs	r2, r3
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	621a      	str	r2, [r3, #32]
}
 8009e46:	bf00      	nop
 8009e48:	371c      	adds	r7, #28
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e50:	4770      	bx	lr
	...

08009e54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009e54:	b480      	push	{r7}
 8009e56:	b085      	sub	sp, #20
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
 8009e5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009e64:	2b01      	cmp	r3, #1
 8009e66:	d101      	bne.n	8009e6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009e68:	2302      	movs	r3, #2
 8009e6a:	e074      	b.n	8009f56 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2201      	movs	r2, #1
 8009e70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2202      	movs	r2, #2
 8009e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	685b      	ldr	r3, [r3, #4]
 8009e82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	689b      	ldr	r3, [r3, #8]
 8009e8a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	4a34      	ldr	r2, [pc, #208]	@ (8009f64 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009e92:	4293      	cmp	r3, r2
 8009e94:	d009      	beq.n	8009eaa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	4a33      	ldr	r2, [pc, #204]	@ (8009f68 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	d004      	beq.n	8009eaa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	4a31      	ldr	r2, [pc, #196]	@ (8009f6c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009ea6:	4293      	cmp	r3, r2
 8009ea8:	d108      	bne.n	8009ebc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009eb0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	685b      	ldr	r3, [r3, #4]
 8009eb6:	68fa      	ldr	r2, [r7, #12]
 8009eb8:	4313      	orrs	r3, r2
 8009eba:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009ec2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ec6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	68fa      	ldr	r2, [r7, #12]
 8009ece:	4313      	orrs	r3, r2
 8009ed0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	68fa      	ldr	r2, [r7, #12]
 8009ed8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	4a21      	ldr	r2, [pc, #132]	@ (8009f64 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	d022      	beq.n	8009f2a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009eec:	d01d      	beq.n	8009f2a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	4a1f      	ldr	r2, [pc, #124]	@ (8009f70 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	d018      	beq.n	8009f2a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	4a1d      	ldr	r2, [pc, #116]	@ (8009f74 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009efe:	4293      	cmp	r3, r2
 8009f00:	d013      	beq.n	8009f2a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	4a1c      	ldr	r2, [pc, #112]	@ (8009f78 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	d00e      	beq.n	8009f2a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	4a15      	ldr	r2, [pc, #84]	@ (8009f68 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009f12:	4293      	cmp	r3, r2
 8009f14:	d009      	beq.n	8009f2a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	4a18      	ldr	r2, [pc, #96]	@ (8009f7c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	d004      	beq.n	8009f2a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	4a11      	ldr	r2, [pc, #68]	@ (8009f6c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009f26:	4293      	cmp	r3, r2
 8009f28:	d10c      	bne.n	8009f44 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009f2a:	68bb      	ldr	r3, [r7, #8]
 8009f2c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009f30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	689b      	ldr	r3, [r3, #8]
 8009f36:	68ba      	ldr	r2, [r7, #8]
 8009f38:	4313      	orrs	r3, r2
 8009f3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	68ba      	ldr	r2, [r7, #8]
 8009f42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2201      	movs	r2, #1
 8009f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2200      	movs	r2, #0
 8009f50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009f54:	2300      	movs	r3, #0
}
 8009f56:	4618      	mov	r0, r3
 8009f58:	3714      	adds	r7, #20
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f60:	4770      	bx	lr
 8009f62:	bf00      	nop
 8009f64:	40012c00 	.word	0x40012c00
 8009f68:	40013400 	.word	0x40013400
 8009f6c:	40015000 	.word	0x40015000
 8009f70:	40000400 	.word	0x40000400
 8009f74:	40000800 	.word	0x40000800
 8009f78:	40000c00 	.word	0x40000c00
 8009f7c:	40014000 	.word	0x40014000

08009f80 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b085      	sub	sp, #20
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
 8009f88:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009f94:	2b01      	cmp	r3, #1
 8009f96:	d101      	bne.n	8009f9c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009f98:	2302      	movs	r3, #2
 8009f9a:	e078      	b.n	800a08e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2201      	movs	r2, #1
 8009fa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	68db      	ldr	r3, [r3, #12]
 8009fae:	4313      	orrs	r3, r2
 8009fb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	689b      	ldr	r3, [r3, #8]
 8009fbc:	4313      	orrs	r3, r2
 8009fbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	685b      	ldr	r3, [r3, #4]
 8009fca:	4313      	orrs	r3, r2
 8009fcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	4313      	orrs	r3, r2
 8009fda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	691b      	ldr	r3, [r3, #16]
 8009fe6:	4313      	orrs	r3, r2
 8009fe8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	695b      	ldr	r3, [r3, #20]
 8009ff4:	4313      	orrs	r3, r2
 8009ff6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a002:	4313      	orrs	r3, r2
 800a004:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	699b      	ldr	r3, [r3, #24]
 800a010:	041b      	lsls	r3, r3, #16
 800a012:	4313      	orrs	r3, r2
 800a014:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	69db      	ldr	r3, [r3, #28]
 800a020:	4313      	orrs	r3, r2
 800a022:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	4a1c      	ldr	r2, [pc, #112]	@ (800a09c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800a02a:	4293      	cmp	r3, r2
 800a02c:	d009      	beq.n	800a042 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	4a1b      	ldr	r2, [pc, #108]	@ (800a0a0 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800a034:	4293      	cmp	r3, r2
 800a036:	d004      	beq.n	800a042 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	4a19      	ldr	r2, [pc, #100]	@ (800a0a4 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800a03e:	4293      	cmp	r3, r2
 800a040:	d11c      	bne.n	800a07c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a04c:	051b      	lsls	r3, r3, #20
 800a04e:	4313      	orrs	r3, r2
 800a050:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	6a1b      	ldr	r3, [r3, #32]
 800a05c:	4313      	orrs	r3, r2
 800a05e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a06a:	4313      	orrs	r3, r2
 800a06c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a078:	4313      	orrs	r3, r2
 800a07a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	68fa      	ldr	r2, [r7, #12]
 800a082:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2200      	movs	r2, #0
 800a088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a08c:	2300      	movs	r3, #0
}
 800a08e:	4618      	mov	r0, r3
 800a090:	3714      	adds	r7, #20
 800a092:	46bd      	mov	sp, r7
 800a094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a098:	4770      	bx	lr
 800a09a:	bf00      	nop
 800a09c:	40012c00 	.word	0x40012c00
 800a0a0:	40013400 	.word	0x40013400
 800a0a4:	40015000 	.word	0x40015000

0800a0a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a0a8:	b480      	push	{r7}
 800a0aa:	b083      	sub	sp, #12
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a0b0:	bf00      	nop
 800a0b2:	370c      	adds	r7, #12
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ba:	4770      	bx	lr

0800a0bc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a0bc:	b480      	push	{r7}
 800a0be:	b083      	sub	sp, #12
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a0c4:	bf00      	nop
 800a0c6:	370c      	adds	r7, #12
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ce:	4770      	bx	lr

0800a0d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	b083      	sub	sp, #12
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a0d8:	bf00      	nop
 800a0da:	370c      	adds	r7, #12
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e2:	4770      	bx	lr

0800a0e4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b083      	sub	sp, #12
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a0ec:	bf00      	nop
 800a0ee:	370c      	adds	r7, #12
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f6:	4770      	bx	lr

0800a0f8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a0f8:	b480      	push	{r7}
 800a0fa:	b083      	sub	sp, #12
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a100:	bf00      	nop
 800a102:	370c      	adds	r7, #12
 800a104:	46bd      	mov	sp, r7
 800a106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10a:	4770      	bx	lr

0800a10c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a10c:	b480      	push	{r7}
 800a10e:	b083      	sub	sp, #12
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a114:	bf00      	nop
 800a116:	370c      	adds	r7, #12
 800a118:	46bd      	mov	sp, r7
 800a11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11e:	4770      	bx	lr

0800a120 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a120:	b480      	push	{r7}
 800a122:	b083      	sub	sp, #12
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a128:	bf00      	nop
 800a12a:	370c      	adds	r7, #12
 800a12c:	46bd      	mov	sp, r7
 800a12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a132:	4770      	bx	lr

0800a134 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800a134:	b480      	push	{r7}
 800a136:	b085      	sub	sp, #20
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2200      	movs	r2, #0
 800a140:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a144:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800a148:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	b29a      	uxth	r2, r3
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800a154:	2300      	movs	r3, #0
}
 800a156:	4618      	mov	r0, r3
 800a158:	3714      	adds	r7, #20
 800a15a:	46bd      	mov	sp, r7
 800a15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a160:	4770      	bx	lr

0800a162 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800a162:	b480      	push	{r7}
 800a164:	b085      	sub	sp, #20
 800a166:	af00      	add	r7, sp, #0
 800a168:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a16a:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800a16e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a176:	b29a      	uxth	r2, r3
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	b29b      	uxth	r3, r3
 800a17c:	43db      	mvns	r3, r3
 800a17e:	b29b      	uxth	r3, r3
 800a180:	4013      	ands	r3, r2
 800a182:	b29a      	uxth	r2, r3
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800a18a:	2300      	movs	r3, #0
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	3714      	adds	r7, #20
 800a190:	46bd      	mov	sp, r7
 800a192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a196:	4770      	bx	lr

0800a198 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a198:	b480      	push	{r7}
 800a19a:	b085      	sub	sp, #20
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	60f8      	str	r0, [r7, #12]
 800a1a0:	1d3b      	adds	r3, r7, #4
 800a1a2:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	2201      	movs	r2, #1
 800a1aa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800a1c6:	2300      	movs	r3, #0
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	3714      	adds	r7, #20
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d2:	4770      	bx	lr

0800a1d4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b09d      	sub	sp, #116	@ 0x74
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
 800a1dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800a1de:	2300      	movs	r3, #0
 800a1e0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800a1e4:	687a      	ldr	r2, [r7, #4]
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	781b      	ldrb	r3, [r3, #0]
 800a1ea:	009b      	lsls	r3, r3, #2
 800a1ec:	4413      	add	r3, r2
 800a1ee:	881b      	ldrh	r3, [r3, #0]
 800a1f0:	b29b      	uxth	r3, r3
 800a1f2:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800a1f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a1fa:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	78db      	ldrb	r3, [r3, #3]
 800a202:	2b03      	cmp	r3, #3
 800a204:	d81f      	bhi.n	800a246 <USB_ActivateEndpoint+0x72>
 800a206:	a201      	add	r2, pc, #4	@ (adr r2, 800a20c <USB_ActivateEndpoint+0x38>)
 800a208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a20c:	0800a21d 	.word	0x0800a21d
 800a210:	0800a239 	.word	0x0800a239
 800a214:	0800a24f 	.word	0x0800a24f
 800a218:	0800a22b 	.word	0x0800a22b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800a21c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a220:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800a224:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800a228:	e012      	b.n	800a250 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800a22a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a22e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800a232:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800a236:	e00b      	b.n	800a250 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800a238:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a23c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800a240:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800a244:	e004      	b.n	800a250 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800a246:	2301      	movs	r3, #1
 800a248:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800a24c:	e000      	b.n	800a250 <USB_ActivateEndpoint+0x7c>
      break;
 800a24e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800a250:	687a      	ldr	r2, [r7, #4]
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	781b      	ldrb	r3, [r3, #0]
 800a256:	009b      	lsls	r3, r3, #2
 800a258:	441a      	add	r2, r3
 800a25a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a25e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a262:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a266:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a26a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a26e:	b29b      	uxth	r3, r3
 800a270:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800a272:	687a      	ldr	r2, [r7, #4]
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	781b      	ldrb	r3, [r3, #0]
 800a278:	009b      	lsls	r3, r3, #2
 800a27a:	4413      	add	r3, r2
 800a27c:	881b      	ldrh	r3, [r3, #0]
 800a27e:	b29b      	uxth	r3, r3
 800a280:	b21b      	sxth	r3, r3
 800a282:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a286:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a28a:	b21a      	sxth	r2, r3
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	781b      	ldrb	r3, [r3, #0]
 800a290:	b21b      	sxth	r3, r3
 800a292:	4313      	orrs	r3, r2
 800a294:	b21b      	sxth	r3, r3
 800a296:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800a29a:	687a      	ldr	r2, [r7, #4]
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	781b      	ldrb	r3, [r3, #0]
 800a2a0:	009b      	lsls	r3, r3, #2
 800a2a2:	441a      	add	r2, r3
 800a2a4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800a2a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a2ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a2b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a2b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a2b8:	b29b      	uxth	r3, r3
 800a2ba:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	7b1b      	ldrb	r3, [r3, #12]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	f040 8178 	bne.w	800a5b6 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	785b      	ldrb	r3, [r3, #1]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	f000 8084 	beq.w	800a3d8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	61bb      	str	r3, [r7, #24]
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a2da:	b29b      	uxth	r3, r3
 800a2dc:	461a      	mov	r2, r3
 800a2de:	69bb      	ldr	r3, [r7, #24]
 800a2e0:	4413      	add	r3, r2
 800a2e2:	61bb      	str	r3, [r7, #24]
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	781b      	ldrb	r3, [r3, #0]
 800a2e8:	00da      	lsls	r2, r3, #3
 800a2ea:	69bb      	ldr	r3, [r7, #24]
 800a2ec:	4413      	add	r3, r2
 800a2ee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a2f2:	617b      	str	r3, [r7, #20]
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	88db      	ldrh	r3, [r3, #6]
 800a2f8:	085b      	lsrs	r3, r3, #1
 800a2fa:	b29b      	uxth	r3, r3
 800a2fc:	005b      	lsls	r3, r3, #1
 800a2fe:	b29a      	uxth	r2, r3
 800a300:	697b      	ldr	r3, [r7, #20]
 800a302:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a304:	687a      	ldr	r2, [r7, #4]
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	781b      	ldrb	r3, [r3, #0]
 800a30a:	009b      	lsls	r3, r3, #2
 800a30c:	4413      	add	r3, r2
 800a30e:	881b      	ldrh	r3, [r3, #0]
 800a310:	827b      	strh	r3, [r7, #18]
 800a312:	8a7b      	ldrh	r3, [r7, #18]
 800a314:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d01b      	beq.n	800a354 <USB_ActivateEndpoint+0x180>
 800a31c:	687a      	ldr	r2, [r7, #4]
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	781b      	ldrb	r3, [r3, #0]
 800a322:	009b      	lsls	r3, r3, #2
 800a324:	4413      	add	r3, r2
 800a326:	881b      	ldrh	r3, [r3, #0]
 800a328:	b29b      	uxth	r3, r3
 800a32a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a32e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a332:	823b      	strh	r3, [r7, #16]
 800a334:	687a      	ldr	r2, [r7, #4]
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	781b      	ldrb	r3, [r3, #0]
 800a33a:	009b      	lsls	r3, r3, #2
 800a33c:	441a      	add	r2, r3
 800a33e:	8a3b      	ldrh	r3, [r7, #16]
 800a340:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a344:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a348:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a34c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a350:	b29b      	uxth	r3, r3
 800a352:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	78db      	ldrb	r3, [r3, #3]
 800a358:	2b01      	cmp	r3, #1
 800a35a:	d020      	beq.n	800a39e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a35c:	687a      	ldr	r2, [r7, #4]
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	781b      	ldrb	r3, [r3, #0]
 800a362:	009b      	lsls	r3, r3, #2
 800a364:	4413      	add	r3, r2
 800a366:	881b      	ldrh	r3, [r3, #0]
 800a368:	b29b      	uxth	r3, r3
 800a36a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a36e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a372:	81bb      	strh	r3, [r7, #12]
 800a374:	89bb      	ldrh	r3, [r7, #12]
 800a376:	f083 0320 	eor.w	r3, r3, #32
 800a37a:	81bb      	strh	r3, [r7, #12]
 800a37c:	687a      	ldr	r2, [r7, #4]
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	781b      	ldrb	r3, [r3, #0]
 800a382:	009b      	lsls	r3, r3, #2
 800a384:	441a      	add	r2, r3
 800a386:	89bb      	ldrh	r3, [r7, #12]
 800a388:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a38c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a390:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a394:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a398:	b29b      	uxth	r3, r3
 800a39a:	8013      	strh	r3, [r2, #0]
 800a39c:	e2d5      	b.n	800a94a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a39e:	687a      	ldr	r2, [r7, #4]
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	781b      	ldrb	r3, [r3, #0]
 800a3a4:	009b      	lsls	r3, r3, #2
 800a3a6:	4413      	add	r3, r2
 800a3a8:	881b      	ldrh	r3, [r3, #0]
 800a3aa:	b29b      	uxth	r3, r3
 800a3ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a3b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a3b4:	81fb      	strh	r3, [r7, #14]
 800a3b6:	687a      	ldr	r2, [r7, #4]
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	781b      	ldrb	r3, [r3, #0]
 800a3bc:	009b      	lsls	r3, r3, #2
 800a3be:	441a      	add	r2, r3
 800a3c0:	89fb      	ldrh	r3, [r7, #14]
 800a3c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a3c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a3ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a3ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a3d2:	b29b      	uxth	r3, r3
 800a3d4:	8013      	strh	r3, [r2, #0]
 800a3d6:	e2b8      	b.n	800a94a <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	633b      	str	r3, [r7, #48]	@ 0x30
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a3e2:	b29b      	uxth	r3, r3
 800a3e4:	461a      	mov	r2, r3
 800a3e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3e8:	4413      	add	r3, r2
 800a3ea:	633b      	str	r3, [r7, #48]	@ 0x30
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	781b      	ldrb	r3, [r3, #0]
 800a3f0:	00da      	lsls	r2, r3, #3
 800a3f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3f4:	4413      	add	r3, r2
 800a3f6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a3fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	88db      	ldrh	r3, [r3, #6]
 800a400:	085b      	lsrs	r3, r3, #1
 800a402:	b29b      	uxth	r3, r3
 800a404:	005b      	lsls	r3, r3, #1
 800a406:	b29a      	uxth	r2, r3
 800a408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a40a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a416:	b29b      	uxth	r3, r3
 800a418:	461a      	mov	r2, r3
 800a41a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a41c:	4413      	add	r3, r2
 800a41e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	781b      	ldrb	r3, [r3, #0]
 800a424:	00da      	lsls	r2, r3, #3
 800a426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a428:	4413      	add	r3, r2
 800a42a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a42e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a432:	881b      	ldrh	r3, [r3, #0]
 800a434:	b29b      	uxth	r3, r3
 800a436:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a43a:	b29a      	uxth	r2, r3
 800a43c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a43e:	801a      	strh	r2, [r3, #0]
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	691b      	ldr	r3, [r3, #16]
 800a444:	2b3e      	cmp	r3, #62	@ 0x3e
 800a446:	d91d      	bls.n	800a484 <USB_ActivateEndpoint+0x2b0>
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	691b      	ldr	r3, [r3, #16]
 800a44c:	095b      	lsrs	r3, r3, #5
 800a44e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	691b      	ldr	r3, [r3, #16]
 800a454:	f003 031f 	and.w	r3, r3, #31
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d102      	bne.n	800a462 <USB_ActivateEndpoint+0x28e>
 800a45c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a45e:	3b01      	subs	r3, #1
 800a460:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a464:	881b      	ldrh	r3, [r3, #0]
 800a466:	b29a      	uxth	r2, r3
 800a468:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a46a:	b29b      	uxth	r3, r3
 800a46c:	029b      	lsls	r3, r3, #10
 800a46e:	b29b      	uxth	r3, r3
 800a470:	4313      	orrs	r3, r2
 800a472:	b29b      	uxth	r3, r3
 800a474:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a478:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a47c:	b29a      	uxth	r2, r3
 800a47e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a480:	801a      	strh	r2, [r3, #0]
 800a482:	e026      	b.n	800a4d2 <USB_ActivateEndpoint+0x2fe>
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	691b      	ldr	r3, [r3, #16]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d10a      	bne.n	800a4a2 <USB_ActivateEndpoint+0x2ce>
 800a48c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a48e:	881b      	ldrh	r3, [r3, #0]
 800a490:	b29b      	uxth	r3, r3
 800a492:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a496:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a49a:	b29a      	uxth	r2, r3
 800a49c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a49e:	801a      	strh	r2, [r3, #0]
 800a4a0:	e017      	b.n	800a4d2 <USB_ActivateEndpoint+0x2fe>
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	691b      	ldr	r3, [r3, #16]
 800a4a6:	085b      	lsrs	r3, r3, #1
 800a4a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	691b      	ldr	r3, [r3, #16]
 800a4ae:	f003 0301 	and.w	r3, r3, #1
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d002      	beq.n	800a4bc <USB_ActivateEndpoint+0x2e8>
 800a4b6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a4b8:	3301      	adds	r3, #1
 800a4ba:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a4bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4be:	881b      	ldrh	r3, [r3, #0]
 800a4c0:	b29a      	uxth	r2, r3
 800a4c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a4c4:	b29b      	uxth	r3, r3
 800a4c6:	029b      	lsls	r3, r3, #10
 800a4c8:	b29b      	uxth	r3, r3
 800a4ca:	4313      	orrs	r3, r2
 800a4cc:	b29a      	uxth	r2, r3
 800a4ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4d0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a4d2:	687a      	ldr	r2, [r7, #4]
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	781b      	ldrb	r3, [r3, #0]
 800a4d8:	009b      	lsls	r3, r3, #2
 800a4da:	4413      	add	r3, r2
 800a4dc:	881b      	ldrh	r3, [r3, #0]
 800a4de:	847b      	strh	r3, [r7, #34]	@ 0x22
 800a4e0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a4e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d01b      	beq.n	800a522 <USB_ActivateEndpoint+0x34e>
 800a4ea:	687a      	ldr	r2, [r7, #4]
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	781b      	ldrb	r3, [r3, #0]
 800a4f0:	009b      	lsls	r3, r3, #2
 800a4f2:	4413      	add	r3, r2
 800a4f4:	881b      	ldrh	r3, [r3, #0]
 800a4f6:	b29b      	uxth	r3, r3
 800a4f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a4fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a500:	843b      	strh	r3, [r7, #32]
 800a502:	687a      	ldr	r2, [r7, #4]
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	781b      	ldrb	r3, [r3, #0]
 800a508:	009b      	lsls	r3, r3, #2
 800a50a:	441a      	add	r2, r3
 800a50c:	8c3b      	ldrh	r3, [r7, #32]
 800a50e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a512:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a516:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a51a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a51e:	b29b      	uxth	r3, r3
 800a520:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	781b      	ldrb	r3, [r3, #0]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d124      	bne.n	800a574 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a52a:	687a      	ldr	r2, [r7, #4]
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	781b      	ldrb	r3, [r3, #0]
 800a530:	009b      	lsls	r3, r3, #2
 800a532:	4413      	add	r3, r2
 800a534:	881b      	ldrh	r3, [r3, #0]
 800a536:	b29b      	uxth	r3, r3
 800a538:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a53c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a540:	83bb      	strh	r3, [r7, #28]
 800a542:	8bbb      	ldrh	r3, [r7, #28]
 800a544:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a548:	83bb      	strh	r3, [r7, #28]
 800a54a:	8bbb      	ldrh	r3, [r7, #28]
 800a54c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a550:	83bb      	strh	r3, [r7, #28]
 800a552:	687a      	ldr	r2, [r7, #4]
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	781b      	ldrb	r3, [r3, #0]
 800a558:	009b      	lsls	r3, r3, #2
 800a55a:	441a      	add	r2, r3
 800a55c:	8bbb      	ldrh	r3, [r7, #28]
 800a55e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a562:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a566:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a56a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a56e:	b29b      	uxth	r3, r3
 800a570:	8013      	strh	r3, [r2, #0]
 800a572:	e1ea      	b.n	800a94a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800a574:	687a      	ldr	r2, [r7, #4]
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	781b      	ldrb	r3, [r3, #0]
 800a57a:	009b      	lsls	r3, r3, #2
 800a57c:	4413      	add	r3, r2
 800a57e:	881b      	ldrh	r3, [r3, #0]
 800a580:	b29b      	uxth	r3, r3
 800a582:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a586:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a58a:	83fb      	strh	r3, [r7, #30]
 800a58c:	8bfb      	ldrh	r3, [r7, #30]
 800a58e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a592:	83fb      	strh	r3, [r7, #30]
 800a594:	687a      	ldr	r2, [r7, #4]
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	781b      	ldrb	r3, [r3, #0]
 800a59a:	009b      	lsls	r3, r3, #2
 800a59c:	441a      	add	r2, r3
 800a59e:	8bfb      	ldrh	r3, [r7, #30]
 800a5a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a5a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a5a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a5ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a5b0:	b29b      	uxth	r3, r3
 800a5b2:	8013      	strh	r3, [r2, #0]
 800a5b4:	e1c9      	b.n	800a94a <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	78db      	ldrb	r3, [r3, #3]
 800a5ba:	2b02      	cmp	r3, #2
 800a5bc:	d11e      	bne.n	800a5fc <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a5be:	687a      	ldr	r2, [r7, #4]
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	781b      	ldrb	r3, [r3, #0]
 800a5c4:	009b      	lsls	r3, r3, #2
 800a5c6:	4413      	add	r3, r2
 800a5c8:	881b      	ldrh	r3, [r3, #0]
 800a5ca:	b29b      	uxth	r3, r3
 800a5cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a5d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a5d4:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800a5d8:	687a      	ldr	r2, [r7, #4]
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	781b      	ldrb	r3, [r3, #0]
 800a5de:	009b      	lsls	r3, r3, #2
 800a5e0:	441a      	add	r2, r3
 800a5e2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800a5e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a5ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a5ee:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800a5f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a5f6:	b29b      	uxth	r3, r3
 800a5f8:	8013      	strh	r3, [r2, #0]
 800a5fa:	e01d      	b.n	800a638 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800a5fc:	687a      	ldr	r2, [r7, #4]
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	781b      	ldrb	r3, [r3, #0]
 800a602:	009b      	lsls	r3, r3, #2
 800a604:	4413      	add	r3, r2
 800a606:	881b      	ldrh	r3, [r3, #0]
 800a608:	b29b      	uxth	r3, r3
 800a60a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800a60e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a612:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800a616:	687a      	ldr	r2, [r7, #4]
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	781b      	ldrb	r3, [r3, #0]
 800a61c:	009b      	lsls	r3, r3, #2
 800a61e:	441a      	add	r2, r3
 800a620:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800a624:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a628:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a62c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a630:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a634:	b29b      	uxth	r3, r3
 800a636:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a642:	b29b      	uxth	r3, r3
 800a644:	461a      	mov	r2, r3
 800a646:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a648:	4413      	add	r3, r2
 800a64a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	781b      	ldrb	r3, [r3, #0]
 800a650:	00da      	lsls	r2, r3, #3
 800a652:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a654:	4413      	add	r3, r2
 800a656:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a65a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	891b      	ldrh	r3, [r3, #8]
 800a660:	085b      	lsrs	r3, r3, #1
 800a662:	b29b      	uxth	r3, r3
 800a664:	005b      	lsls	r3, r3, #1
 800a666:	b29a      	uxth	r2, r3
 800a668:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a66a:	801a      	strh	r2, [r3, #0]
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	657b      	str	r3, [r7, #84]	@ 0x54
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a676:	b29b      	uxth	r3, r3
 800a678:	461a      	mov	r2, r3
 800a67a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a67c:	4413      	add	r3, r2
 800a67e:	657b      	str	r3, [r7, #84]	@ 0x54
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	781b      	ldrb	r3, [r3, #0]
 800a684:	00da      	lsls	r2, r3, #3
 800a686:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a688:	4413      	add	r3, r2
 800a68a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a68e:	653b      	str	r3, [r7, #80]	@ 0x50
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	895b      	ldrh	r3, [r3, #10]
 800a694:	085b      	lsrs	r3, r3, #1
 800a696:	b29b      	uxth	r3, r3
 800a698:	005b      	lsls	r3, r3, #1
 800a69a:	b29a      	uxth	r2, r3
 800a69c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a69e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	785b      	ldrb	r3, [r3, #1]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	f040 8093 	bne.w	800a7d0 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a6aa:	687a      	ldr	r2, [r7, #4]
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	781b      	ldrb	r3, [r3, #0]
 800a6b0:	009b      	lsls	r3, r3, #2
 800a6b2:	4413      	add	r3, r2
 800a6b4:	881b      	ldrh	r3, [r3, #0]
 800a6b6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800a6ba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800a6be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d01b      	beq.n	800a6fe <USB_ActivateEndpoint+0x52a>
 800a6c6:	687a      	ldr	r2, [r7, #4]
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	781b      	ldrb	r3, [r3, #0]
 800a6cc:	009b      	lsls	r3, r3, #2
 800a6ce:	4413      	add	r3, r2
 800a6d0:	881b      	ldrh	r3, [r3, #0]
 800a6d2:	b29b      	uxth	r3, r3
 800a6d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a6d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a6dc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800a6de:	687a      	ldr	r2, [r7, #4]
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	781b      	ldrb	r3, [r3, #0]
 800a6e4:	009b      	lsls	r3, r3, #2
 800a6e6:	441a      	add	r2, r3
 800a6e8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a6ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a6ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a6f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a6f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a6fa:	b29b      	uxth	r3, r3
 800a6fc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a6fe:	687a      	ldr	r2, [r7, #4]
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	781b      	ldrb	r3, [r3, #0]
 800a704:	009b      	lsls	r3, r3, #2
 800a706:	4413      	add	r3, r2
 800a708:	881b      	ldrh	r3, [r3, #0]
 800a70a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800a70c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800a70e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a712:	2b00      	cmp	r3, #0
 800a714:	d01b      	beq.n	800a74e <USB_ActivateEndpoint+0x57a>
 800a716:	687a      	ldr	r2, [r7, #4]
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	781b      	ldrb	r3, [r3, #0]
 800a71c:	009b      	lsls	r3, r3, #2
 800a71e:	4413      	add	r3, r2
 800a720:	881b      	ldrh	r3, [r3, #0]
 800a722:	b29b      	uxth	r3, r3
 800a724:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a728:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a72c:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800a72e:	687a      	ldr	r2, [r7, #4]
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	781b      	ldrb	r3, [r3, #0]
 800a734:	009b      	lsls	r3, r3, #2
 800a736:	441a      	add	r2, r3
 800a738:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800a73a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a73e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a742:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a746:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a74a:	b29b      	uxth	r3, r3
 800a74c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a74e:	687a      	ldr	r2, [r7, #4]
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	781b      	ldrb	r3, [r3, #0]
 800a754:	009b      	lsls	r3, r3, #2
 800a756:	4413      	add	r3, r2
 800a758:	881b      	ldrh	r3, [r3, #0]
 800a75a:	b29b      	uxth	r3, r3
 800a75c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a760:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a764:	873b      	strh	r3, [r7, #56]	@ 0x38
 800a766:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800a768:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a76c:	873b      	strh	r3, [r7, #56]	@ 0x38
 800a76e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800a770:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a774:	873b      	strh	r3, [r7, #56]	@ 0x38
 800a776:	687a      	ldr	r2, [r7, #4]
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	781b      	ldrb	r3, [r3, #0]
 800a77c:	009b      	lsls	r3, r3, #2
 800a77e:	441a      	add	r2, r3
 800a780:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800a782:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a786:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a78a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a78e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a792:	b29b      	uxth	r3, r3
 800a794:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a796:	687a      	ldr	r2, [r7, #4]
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	781b      	ldrb	r3, [r3, #0]
 800a79c:	009b      	lsls	r3, r3, #2
 800a79e:	4413      	add	r3, r2
 800a7a0:	881b      	ldrh	r3, [r3, #0]
 800a7a2:	b29b      	uxth	r3, r3
 800a7a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a7a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a7ac:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800a7ae:	687a      	ldr	r2, [r7, #4]
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	781b      	ldrb	r3, [r3, #0]
 800a7b4:	009b      	lsls	r3, r3, #2
 800a7b6:	441a      	add	r2, r3
 800a7b8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a7ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a7be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a7c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a7c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a7ca:	b29b      	uxth	r3, r3
 800a7cc:	8013      	strh	r3, [r2, #0]
 800a7ce:	e0bc      	b.n	800a94a <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a7d0:	687a      	ldr	r2, [r7, #4]
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	781b      	ldrb	r3, [r3, #0]
 800a7d6:	009b      	lsls	r3, r3, #2
 800a7d8:	4413      	add	r3, r2
 800a7da:	881b      	ldrh	r3, [r3, #0]
 800a7dc:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800a7e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800a7e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d01d      	beq.n	800a828 <USB_ActivateEndpoint+0x654>
 800a7ec:	687a      	ldr	r2, [r7, #4]
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	781b      	ldrb	r3, [r3, #0]
 800a7f2:	009b      	lsls	r3, r3, #2
 800a7f4:	4413      	add	r3, r2
 800a7f6:	881b      	ldrh	r3, [r3, #0]
 800a7f8:	b29b      	uxth	r3, r3
 800a7fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a7fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a802:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800a806:	687a      	ldr	r2, [r7, #4]
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	781b      	ldrb	r3, [r3, #0]
 800a80c:	009b      	lsls	r3, r3, #2
 800a80e:	441a      	add	r2, r3
 800a810:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800a814:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a818:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a81c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a820:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a824:	b29b      	uxth	r3, r3
 800a826:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a828:	687a      	ldr	r2, [r7, #4]
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	781b      	ldrb	r3, [r3, #0]
 800a82e:	009b      	lsls	r3, r3, #2
 800a830:	4413      	add	r3, r2
 800a832:	881b      	ldrh	r3, [r3, #0]
 800a834:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800a838:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800a83c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a840:	2b00      	cmp	r3, #0
 800a842:	d01d      	beq.n	800a880 <USB_ActivateEndpoint+0x6ac>
 800a844:	687a      	ldr	r2, [r7, #4]
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	781b      	ldrb	r3, [r3, #0]
 800a84a:	009b      	lsls	r3, r3, #2
 800a84c:	4413      	add	r3, r2
 800a84e:	881b      	ldrh	r3, [r3, #0]
 800a850:	b29b      	uxth	r3, r3
 800a852:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a856:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a85a:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800a85e:	687a      	ldr	r2, [r7, #4]
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	781b      	ldrb	r3, [r3, #0]
 800a864:	009b      	lsls	r3, r3, #2
 800a866:	441a      	add	r2, r3
 800a868:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800a86c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a870:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a874:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a878:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a87c:	b29b      	uxth	r3, r3
 800a87e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	78db      	ldrb	r3, [r3, #3]
 800a884:	2b01      	cmp	r3, #1
 800a886:	d024      	beq.n	800a8d2 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a888:	687a      	ldr	r2, [r7, #4]
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	781b      	ldrb	r3, [r3, #0]
 800a88e:	009b      	lsls	r3, r3, #2
 800a890:	4413      	add	r3, r2
 800a892:	881b      	ldrh	r3, [r3, #0]
 800a894:	b29b      	uxth	r3, r3
 800a896:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a89a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a89e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800a8a2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800a8a6:	f083 0320 	eor.w	r3, r3, #32
 800a8aa:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800a8ae:	687a      	ldr	r2, [r7, #4]
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	781b      	ldrb	r3, [r3, #0]
 800a8b4:	009b      	lsls	r3, r3, #2
 800a8b6:	441a      	add	r2, r3
 800a8b8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800a8bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a8c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a8c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a8c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a8cc:	b29b      	uxth	r3, r3
 800a8ce:	8013      	strh	r3, [r2, #0]
 800a8d0:	e01d      	b.n	800a90e <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a8d2:	687a      	ldr	r2, [r7, #4]
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	781b      	ldrb	r3, [r3, #0]
 800a8d8:	009b      	lsls	r3, r3, #2
 800a8da:	4413      	add	r3, r2
 800a8dc:	881b      	ldrh	r3, [r3, #0]
 800a8de:	b29b      	uxth	r3, r3
 800a8e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a8e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a8e8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800a8ec:	687a      	ldr	r2, [r7, #4]
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	781b      	ldrb	r3, [r3, #0]
 800a8f2:	009b      	lsls	r3, r3, #2
 800a8f4:	441a      	add	r2, r3
 800a8f6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a8fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a8fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a902:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a906:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a90a:	b29b      	uxth	r3, r3
 800a90c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a90e:	687a      	ldr	r2, [r7, #4]
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	781b      	ldrb	r3, [r3, #0]
 800a914:	009b      	lsls	r3, r3, #2
 800a916:	4413      	add	r3, r2
 800a918:	881b      	ldrh	r3, [r3, #0]
 800a91a:	b29b      	uxth	r3, r3
 800a91c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a920:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a924:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800a928:	687a      	ldr	r2, [r7, #4]
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	781b      	ldrb	r3, [r3, #0]
 800a92e:	009b      	lsls	r3, r3, #2
 800a930:	441a      	add	r2, r3
 800a932:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a936:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a93a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a93e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a942:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a946:	b29b      	uxth	r3, r3
 800a948:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800a94a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800a94e:	4618      	mov	r0, r3
 800a950:	3774      	adds	r7, #116	@ 0x74
 800a952:	46bd      	mov	sp, r7
 800a954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a958:	4770      	bx	lr
 800a95a:	bf00      	nop

0800a95c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a95c:	b480      	push	{r7}
 800a95e:	b08d      	sub	sp, #52	@ 0x34
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
 800a964:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	7b1b      	ldrb	r3, [r3, #12]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	f040 808e 	bne.w	800aa8c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	785b      	ldrb	r3, [r3, #1]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d044      	beq.n	800aa02 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a978:	687a      	ldr	r2, [r7, #4]
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	781b      	ldrb	r3, [r3, #0]
 800a97e:	009b      	lsls	r3, r3, #2
 800a980:	4413      	add	r3, r2
 800a982:	881b      	ldrh	r3, [r3, #0]
 800a984:	81bb      	strh	r3, [r7, #12]
 800a986:	89bb      	ldrh	r3, [r7, #12]
 800a988:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d01b      	beq.n	800a9c8 <USB_DeactivateEndpoint+0x6c>
 800a990:	687a      	ldr	r2, [r7, #4]
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	781b      	ldrb	r3, [r3, #0]
 800a996:	009b      	lsls	r3, r3, #2
 800a998:	4413      	add	r3, r2
 800a99a:	881b      	ldrh	r3, [r3, #0]
 800a99c:	b29b      	uxth	r3, r3
 800a99e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a9a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a9a6:	817b      	strh	r3, [r7, #10]
 800a9a8:	687a      	ldr	r2, [r7, #4]
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	781b      	ldrb	r3, [r3, #0]
 800a9ae:	009b      	lsls	r3, r3, #2
 800a9b0:	441a      	add	r2, r3
 800a9b2:	897b      	ldrh	r3, [r7, #10]
 800a9b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a9b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a9bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a9c0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a9c4:	b29b      	uxth	r3, r3
 800a9c6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a9c8:	687a      	ldr	r2, [r7, #4]
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	781b      	ldrb	r3, [r3, #0]
 800a9ce:	009b      	lsls	r3, r3, #2
 800a9d0:	4413      	add	r3, r2
 800a9d2:	881b      	ldrh	r3, [r3, #0]
 800a9d4:	b29b      	uxth	r3, r3
 800a9d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a9da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a9de:	813b      	strh	r3, [r7, #8]
 800a9e0:	687a      	ldr	r2, [r7, #4]
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	781b      	ldrb	r3, [r3, #0]
 800a9e6:	009b      	lsls	r3, r3, #2
 800a9e8:	441a      	add	r2, r3
 800a9ea:	893b      	ldrh	r3, [r7, #8]
 800a9ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a9f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a9f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a9f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a9fc:	b29b      	uxth	r3, r3
 800a9fe:	8013      	strh	r3, [r2, #0]
 800aa00:	e192      	b.n	800ad28 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800aa02:	687a      	ldr	r2, [r7, #4]
 800aa04:	683b      	ldr	r3, [r7, #0]
 800aa06:	781b      	ldrb	r3, [r3, #0]
 800aa08:	009b      	lsls	r3, r3, #2
 800aa0a:	4413      	add	r3, r2
 800aa0c:	881b      	ldrh	r3, [r3, #0]
 800aa0e:	827b      	strh	r3, [r7, #18]
 800aa10:	8a7b      	ldrh	r3, [r7, #18]
 800aa12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d01b      	beq.n	800aa52 <USB_DeactivateEndpoint+0xf6>
 800aa1a:	687a      	ldr	r2, [r7, #4]
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	781b      	ldrb	r3, [r3, #0]
 800aa20:	009b      	lsls	r3, r3, #2
 800aa22:	4413      	add	r3, r2
 800aa24:	881b      	ldrh	r3, [r3, #0]
 800aa26:	b29b      	uxth	r3, r3
 800aa28:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aa2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa30:	823b      	strh	r3, [r7, #16]
 800aa32:	687a      	ldr	r2, [r7, #4]
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	781b      	ldrb	r3, [r3, #0]
 800aa38:	009b      	lsls	r3, r3, #2
 800aa3a:	441a      	add	r2, r3
 800aa3c:	8a3b      	ldrh	r3, [r7, #16]
 800aa3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aa42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aa46:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800aa4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa4e:	b29b      	uxth	r3, r3
 800aa50:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800aa52:	687a      	ldr	r2, [r7, #4]
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	781b      	ldrb	r3, [r3, #0]
 800aa58:	009b      	lsls	r3, r3, #2
 800aa5a:	4413      	add	r3, r2
 800aa5c:	881b      	ldrh	r3, [r3, #0]
 800aa5e:	b29b      	uxth	r3, r3
 800aa60:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800aa64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa68:	81fb      	strh	r3, [r7, #14]
 800aa6a:	687a      	ldr	r2, [r7, #4]
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	781b      	ldrb	r3, [r3, #0]
 800aa70:	009b      	lsls	r3, r3, #2
 800aa72:	441a      	add	r2, r3
 800aa74:	89fb      	ldrh	r3, [r7, #14]
 800aa76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aa7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aa7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aa82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa86:	b29b      	uxth	r3, r3
 800aa88:	8013      	strh	r3, [r2, #0]
 800aa8a:	e14d      	b.n	800ad28 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	785b      	ldrb	r3, [r3, #1]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	f040 80a5 	bne.w	800abe0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800aa96:	687a      	ldr	r2, [r7, #4]
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	781b      	ldrb	r3, [r3, #0]
 800aa9c:	009b      	lsls	r3, r3, #2
 800aa9e:	4413      	add	r3, r2
 800aaa0:	881b      	ldrh	r3, [r3, #0]
 800aaa2:	843b      	strh	r3, [r7, #32]
 800aaa4:	8c3b      	ldrh	r3, [r7, #32]
 800aaa6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d01b      	beq.n	800aae6 <USB_DeactivateEndpoint+0x18a>
 800aaae:	687a      	ldr	r2, [r7, #4]
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	781b      	ldrb	r3, [r3, #0]
 800aab4:	009b      	lsls	r3, r3, #2
 800aab6:	4413      	add	r3, r2
 800aab8:	881b      	ldrh	r3, [r3, #0]
 800aaba:	b29b      	uxth	r3, r3
 800aabc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aac0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aac4:	83fb      	strh	r3, [r7, #30]
 800aac6:	687a      	ldr	r2, [r7, #4]
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	781b      	ldrb	r3, [r3, #0]
 800aacc:	009b      	lsls	r3, r3, #2
 800aace:	441a      	add	r2, r3
 800aad0:	8bfb      	ldrh	r3, [r7, #30]
 800aad2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aad6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aada:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800aade:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aae2:	b29b      	uxth	r3, r3
 800aae4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800aae6:	687a      	ldr	r2, [r7, #4]
 800aae8:	683b      	ldr	r3, [r7, #0]
 800aaea:	781b      	ldrb	r3, [r3, #0]
 800aaec:	009b      	lsls	r3, r3, #2
 800aaee:	4413      	add	r3, r2
 800aaf0:	881b      	ldrh	r3, [r3, #0]
 800aaf2:	83bb      	strh	r3, [r7, #28]
 800aaf4:	8bbb      	ldrh	r3, [r7, #28]
 800aaf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d01b      	beq.n	800ab36 <USB_DeactivateEndpoint+0x1da>
 800aafe:	687a      	ldr	r2, [r7, #4]
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	781b      	ldrb	r3, [r3, #0]
 800ab04:	009b      	lsls	r3, r3, #2
 800ab06:	4413      	add	r3, r2
 800ab08:	881b      	ldrh	r3, [r3, #0]
 800ab0a:	b29b      	uxth	r3, r3
 800ab0c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ab10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab14:	837b      	strh	r3, [r7, #26]
 800ab16:	687a      	ldr	r2, [r7, #4]
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	781b      	ldrb	r3, [r3, #0]
 800ab1c:	009b      	lsls	r3, r3, #2
 800ab1e:	441a      	add	r2, r3
 800ab20:	8b7b      	ldrh	r3, [r7, #26]
 800ab22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ab26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ab2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ab2e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ab32:	b29b      	uxth	r3, r3
 800ab34:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800ab36:	687a      	ldr	r2, [r7, #4]
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	781b      	ldrb	r3, [r3, #0]
 800ab3c:	009b      	lsls	r3, r3, #2
 800ab3e:	4413      	add	r3, r2
 800ab40:	881b      	ldrh	r3, [r3, #0]
 800ab42:	b29b      	uxth	r3, r3
 800ab44:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ab48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab4c:	833b      	strh	r3, [r7, #24]
 800ab4e:	687a      	ldr	r2, [r7, #4]
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	781b      	ldrb	r3, [r3, #0]
 800ab54:	009b      	lsls	r3, r3, #2
 800ab56:	441a      	add	r2, r3
 800ab58:	8b3b      	ldrh	r3, [r7, #24]
 800ab5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ab5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ab62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ab66:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ab6a:	b29b      	uxth	r3, r3
 800ab6c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ab6e:	687a      	ldr	r2, [r7, #4]
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	781b      	ldrb	r3, [r3, #0]
 800ab74:	009b      	lsls	r3, r3, #2
 800ab76:	4413      	add	r3, r2
 800ab78:	881b      	ldrh	r3, [r3, #0]
 800ab7a:	b29b      	uxth	r3, r3
 800ab7c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ab80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab84:	82fb      	strh	r3, [r7, #22]
 800ab86:	687a      	ldr	r2, [r7, #4]
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	781b      	ldrb	r3, [r3, #0]
 800ab8c:	009b      	lsls	r3, r3, #2
 800ab8e:	441a      	add	r2, r3
 800ab90:	8afb      	ldrh	r3, [r7, #22]
 800ab92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ab96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ab9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ab9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aba2:	b29b      	uxth	r3, r3
 800aba4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800aba6:	687a      	ldr	r2, [r7, #4]
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	781b      	ldrb	r3, [r3, #0]
 800abac:	009b      	lsls	r3, r3, #2
 800abae:	4413      	add	r3, r2
 800abb0:	881b      	ldrh	r3, [r3, #0]
 800abb2:	b29b      	uxth	r3, r3
 800abb4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800abb8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800abbc:	82bb      	strh	r3, [r7, #20]
 800abbe:	687a      	ldr	r2, [r7, #4]
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	781b      	ldrb	r3, [r3, #0]
 800abc4:	009b      	lsls	r3, r3, #2
 800abc6:	441a      	add	r2, r3
 800abc8:	8abb      	ldrh	r3, [r7, #20]
 800abca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800abce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800abd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800abd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800abda:	b29b      	uxth	r3, r3
 800abdc:	8013      	strh	r3, [r2, #0]
 800abde:	e0a3      	b.n	800ad28 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800abe0:	687a      	ldr	r2, [r7, #4]
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	781b      	ldrb	r3, [r3, #0]
 800abe6:	009b      	lsls	r3, r3, #2
 800abe8:	4413      	add	r3, r2
 800abea:	881b      	ldrh	r3, [r3, #0]
 800abec:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800abee:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800abf0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d01b      	beq.n	800ac30 <USB_DeactivateEndpoint+0x2d4>
 800abf8:	687a      	ldr	r2, [r7, #4]
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	781b      	ldrb	r3, [r3, #0]
 800abfe:	009b      	lsls	r3, r3, #2
 800ac00:	4413      	add	r3, r2
 800ac02:	881b      	ldrh	r3, [r3, #0]
 800ac04:	b29b      	uxth	r3, r3
 800ac06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ac0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac0e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800ac10:	687a      	ldr	r2, [r7, #4]
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	781b      	ldrb	r3, [r3, #0]
 800ac16:	009b      	lsls	r3, r3, #2
 800ac18:	441a      	add	r2, r3
 800ac1a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800ac1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ac20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ac24:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ac28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac2c:	b29b      	uxth	r3, r3
 800ac2e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ac30:	687a      	ldr	r2, [r7, #4]
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	781b      	ldrb	r3, [r3, #0]
 800ac36:	009b      	lsls	r3, r3, #2
 800ac38:	4413      	add	r3, r2
 800ac3a:	881b      	ldrh	r3, [r3, #0]
 800ac3c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800ac3e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ac40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d01b      	beq.n	800ac80 <USB_DeactivateEndpoint+0x324>
 800ac48:	687a      	ldr	r2, [r7, #4]
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	781b      	ldrb	r3, [r3, #0]
 800ac4e:	009b      	lsls	r3, r3, #2
 800ac50:	4413      	add	r3, r2
 800ac52:	881b      	ldrh	r3, [r3, #0]
 800ac54:	b29b      	uxth	r3, r3
 800ac56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ac5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac5e:	853b      	strh	r3, [r7, #40]	@ 0x28
 800ac60:	687a      	ldr	r2, [r7, #4]
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	781b      	ldrb	r3, [r3, #0]
 800ac66:	009b      	lsls	r3, r3, #2
 800ac68:	441a      	add	r2, r3
 800ac6a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ac6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ac70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ac74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ac78:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ac7c:	b29b      	uxth	r3, r3
 800ac7e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800ac80:	687a      	ldr	r2, [r7, #4]
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	781b      	ldrb	r3, [r3, #0]
 800ac86:	009b      	lsls	r3, r3, #2
 800ac88:	4413      	add	r3, r2
 800ac8a:	881b      	ldrh	r3, [r3, #0]
 800ac8c:	b29b      	uxth	r3, r3
 800ac8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ac92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac96:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800ac98:	687a      	ldr	r2, [r7, #4]
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	781b      	ldrb	r3, [r3, #0]
 800ac9e:	009b      	lsls	r3, r3, #2
 800aca0:	441a      	add	r2, r3
 800aca2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800aca4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aca8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800acac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800acb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800acb4:	b29b      	uxth	r3, r3
 800acb6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800acb8:	687a      	ldr	r2, [r7, #4]
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	781b      	ldrb	r3, [r3, #0]
 800acbe:	009b      	lsls	r3, r3, #2
 800acc0:	4413      	add	r3, r2
 800acc2:	881b      	ldrh	r3, [r3, #0]
 800acc4:	b29b      	uxth	r3, r3
 800acc6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800acca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800acce:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800acd0:	687a      	ldr	r2, [r7, #4]
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	781b      	ldrb	r3, [r3, #0]
 800acd6:	009b      	lsls	r3, r3, #2
 800acd8:	441a      	add	r2, r3
 800acda:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800acdc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ace0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ace4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ace8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800acec:	b29b      	uxth	r3, r3
 800acee:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800acf0:	687a      	ldr	r2, [r7, #4]
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	781b      	ldrb	r3, [r3, #0]
 800acf6:	009b      	lsls	r3, r3, #2
 800acf8:	4413      	add	r3, r2
 800acfa:	881b      	ldrh	r3, [r3, #0]
 800acfc:	b29b      	uxth	r3, r3
 800acfe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ad02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad06:	847b      	strh	r3, [r7, #34]	@ 0x22
 800ad08:	687a      	ldr	r2, [r7, #4]
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	781b      	ldrb	r3, [r3, #0]
 800ad0e:	009b      	lsls	r3, r3, #2
 800ad10:	441a      	add	r2, r3
 800ad12:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ad14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ad18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ad1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ad20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad24:	b29b      	uxth	r3, r3
 800ad26:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800ad28:	2300      	movs	r3, #0
}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	3734      	adds	r7, #52	@ 0x34
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad34:	4770      	bx	lr

0800ad36 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ad36:	b580      	push	{r7, lr}
 800ad38:	b0c2      	sub	sp, #264	@ 0x108
 800ad3a:	af00      	add	r7, sp, #0
 800ad3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad40:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ad44:	6018      	str	r0, [r3, #0]
 800ad46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad4e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ad50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	785b      	ldrb	r3, [r3, #1]
 800ad5c:	2b01      	cmp	r3, #1
 800ad5e:	f040 86b7 	bne.w	800bad0 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800ad62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	699a      	ldr	r2, [r3, #24]
 800ad6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	691b      	ldr	r3, [r3, #16]
 800ad7a:	429a      	cmp	r2, r3
 800ad7c:	d908      	bls.n	800ad90 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800ad7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	691b      	ldr	r3, [r3, #16]
 800ad8a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800ad8e:	e007      	b.n	800ada0 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800ad90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	699b      	ldr	r3, [r3, #24]
 800ad9c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800ada0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ada4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	7b1b      	ldrb	r3, [r3, #12]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d13a      	bne.n	800ae26 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800adb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800adb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	6959      	ldr	r1, [r3, #20]
 800adbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800adc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	88da      	ldrh	r2, [r3, #6]
 800adc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adcc:	b29b      	uxth	r3, r3
 800adce:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800add2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800add6:	6800      	ldr	r0, [r0, #0]
 800add8:	f001 fc98 	bl	800c70c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800addc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ade0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	613b      	str	r3, [r7, #16]
 800ade8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800adec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800adf6:	b29b      	uxth	r3, r3
 800adf8:	461a      	mov	r2, r3
 800adfa:	693b      	ldr	r3, [r7, #16]
 800adfc:	4413      	add	r3, r2
 800adfe:	613b      	str	r3, [r7, #16]
 800ae00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	781b      	ldrb	r3, [r3, #0]
 800ae0c:	00da      	lsls	r2, r3, #3
 800ae0e:	693b      	ldr	r3, [r7, #16]
 800ae10:	4413      	add	r3, r2
 800ae12:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ae16:	60fb      	str	r3, [r7, #12]
 800ae18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae1c:	b29a      	uxth	r2, r3
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	801a      	strh	r2, [r3, #0]
 800ae22:	f000 be1f 	b.w	800ba64 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800ae26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	78db      	ldrb	r3, [r3, #3]
 800ae32:	2b02      	cmp	r3, #2
 800ae34:	f040 8462 	bne.w	800b6fc <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800ae38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	6a1a      	ldr	r2, [r3, #32]
 800ae44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	691b      	ldr	r3, [r3, #16]
 800ae50:	429a      	cmp	r2, r3
 800ae52:	f240 83df 	bls.w	800b614 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800ae56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae5a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ae5e:	681a      	ldr	r2, [r3, #0]
 800ae60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	781b      	ldrb	r3, [r3, #0]
 800ae6c:	009b      	lsls	r3, r3, #2
 800ae6e:	4413      	add	r3, r2
 800ae70:	881b      	ldrh	r3, [r3, #0]
 800ae72:	b29b      	uxth	r3, r3
 800ae74:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ae78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae7c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800ae80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae84:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ae88:	681a      	ldr	r2, [r3, #0]
 800ae8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	781b      	ldrb	r3, [r3, #0]
 800ae96:	009b      	lsls	r3, r3, #2
 800ae98:	441a      	add	r2, r3
 800ae9a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800ae9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aea2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aea6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800aeaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aeae:	b29b      	uxth	r3, r3
 800aeb0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800aeb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aeb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	6a1a      	ldr	r2, [r3, #32]
 800aebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aec2:	1ad2      	subs	r2, r2, r3
 800aec4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aec8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800aed0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aed4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aed8:	681a      	ldr	r2, [r3, #0]
 800aeda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aede:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	781b      	ldrb	r3, [r3, #0]
 800aee6:	009b      	lsls	r3, r3, #2
 800aee8:	4413      	add	r3, r2
 800aeea:	881b      	ldrh	r3, [r3, #0]
 800aeec:	b29b      	uxth	r3, r3
 800aeee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	f000 81c7 	beq.w	800b286 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800aef8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aefc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	633b      	str	r3, [r7, #48]	@ 0x30
 800af04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	785b      	ldrb	r3, [r3, #1]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d177      	bne.n	800b004 <USB_EPStartXfer+0x2ce>
 800af14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af18:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800af20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af24:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800af2e:	b29b      	uxth	r3, r3
 800af30:	461a      	mov	r2, r3
 800af32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af34:	4413      	add	r3, r2
 800af36:	62bb      	str	r3, [r7, #40]	@ 0x28
 800af38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	781b      	ldrb	r3, [r3, #0]
 800af44:	00da      	lsls	r2, r3, #3
 800af46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af48:	4413      	add	r3, r2
 800af4a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800af4e:	627b      	str	r3, [r7, #36]	@ 0x24
 800af50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af52:	881b      	ldrh	r3, [r3, #0]
 800af54:	b29b      	uxth	r3, r3
 800af56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800af5a:	b29a      	uxth	r2, r3
 800af5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af5e:	801a      	strh	r2, [r3, #0]
 800af60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af64:	2b3e      	cmp	r3, #62	@ 0x3e
 800af66:	d921      	bls.n	800afac <USB_EPStartXfer+0x276>
 800af68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af6c:	095b      	lsrs	r3, r3, #5
 800af6e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800af72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af76:	f003 031f 	and.w	r3, r3, #31
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d104      	bne.n	800af88 <USB_EPStartXfer+0x252>
 800af7e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800af82:	3b01      	subs	r3, #1
 800af84:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800af88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af8a:	881b      	ldrh	r3, [r3, #0]
 800af8c:	b29a      	uxth	r2, r3
 800af8e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800af92:	b29b      	uxth	r3, r3
 800af94:	029b      	lsls	r3, r3, #10
 800af96:	b29b      	uxth	r3, r3
 800af98:	4313      	orrs	r3, r2
 800af9a:	b29b      	uxth	r3, r3
 800af9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800afa0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800afa4:	b29a      	uxth	r2, r3
 800afa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afa8:	801a      	strh	r2, [r3, #0]
 800afaa:	e050      	b.n	800b04e <USB_EPStartXfer+0x318>
 800afac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d10a      	bne.n	800afca <USB_EPStartXfer+0x294>
 800afb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afb6:	881b      	ldrh	r3, [r3, #0]
 800afb8:	b29b      	uxth	r3, r3
 800afba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800afbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800afc2:	b29a      	uxth	r2, r3
 800afc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afc6:	801a      	strh	r2, [r3, #0]
 800afc8:	e041      	b.n	800b04e <USB_EPStartXfer+0x318>
 800afca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afce:	085b      	lsrs	r3, r3, #1
 800afd0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800afd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afd8:	f003 0301 	and.w	r3, r3, #1
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d004      	beq.n	800afea <USB_EPStartXfer+0x2b4>
 800afe0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800afe4:	3301      	adds	r3, #1
 800afe6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800afea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afec:	881b      	ldrh	r3, [r3, #0]
 800afee:	b29a      	uxth	r2, r3
 800aff0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800aff4:	b29b      	uxth	r3, r3
 800aff6:	029b      	lsls	r3, r3, #10
 800aff8:	b29b      	uxth	r3, r3
 800affa:	4313      	orrs	r3, r2
 800affc:	b29a      	uxth	r2, r3
 800affe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b000:	801a      	strh	r2, [r3, #0]
 800b002:	e024      	b.n	800b04e <USB_EPStartXfer+0x318>
 800b004:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b008:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	785b      	ldrb	r3, [r3, #1]
 800b010:	2b01      	cmp	r3, #1
 800b012:	d11c      	bne.n	800b04e <USB_EPStartXfer+0x318>
 800b014:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b018:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b022:	b29b      	uxth	r3, r3
 800b024:	461a      	mov	r2, r3
 800b026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b028:	4413      	add	r3, r2
 800b02a:	633b      	str	r3, [r7, #48]	@ 0x30
 800b02c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b030:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	781b      	ldrb	r3, [r3, #0]
 800b038:	00da      	lsls	r2, r3, #3
 800b03a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b03c:	4413      	add	r3, r2
 800b03e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b042:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b044:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b048:	b29a      	uxth	r2, r3
 800b04a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b04c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b04e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b052:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	895b      	ldrh	r3, [r3, #10]
 800b05a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b05e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b062:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	6959      	ldr	r1, [r3, #20]
 800b06a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b06e:	b29b      	uxth	r3, r3
 800b070:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b074:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b078:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b07c:	6800      	ldr	r0, [r0, #0]
 800b07e:	f001 fb45 	bl	800c70c <USB_WritePMA>
            ep->xfer_buff += len;
 800b082:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b086:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	695a      	ldr	r2, [r3, #20]
 800b08e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b092:	441a      	add	r2, r3
 800b094:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b098:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b0a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	6a1a      	ldr	r2, [r3, #32]
 800b0ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	691b      	ldr	r3, [r3, #16]
 800b0b8:	429a      	cmp	r2, r3
 800b0ba:	d90f      	bls.n	800b0dc <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800b0bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	6a1a      	ldr	r2, [r3, #32]
 800b0c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b0cc:	1ad2      	subs	r2, r2, r3
 800b0ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	621a      	str	r2, [r3, #32]
 800b0da:	e00e      	b.n	800b0fa <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800b0dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	6a1b      	ldr	r3, [r3, #32]
 800b0e8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800b0ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b0fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	785b      	ldrb	r3, [r3, #1]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d177      	bne.n	800b1fa <USB_EPStartXfer+0x4c4>
 800b10a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b10e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	61bb      	str	r3, [r7, #24]
 800b116:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b11a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b124:	b29b      	uxth	r3, r3
 800b126:	461a      	mov	r2, r3
 800b128:	69bb      	ldr	r3, [r7, #24]
 800b12a:	4413      	add	r3, r2
 800b12c:	61bb      	str	r3, [r7, #24]
 800b12e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b132:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	781b      	ldrb	r3, [r3, #0]
 800b13a:	00da      	lsls	r2, r3, #3
 800b13c:	69bb      	ldr	r3, [r7, #24]
 800b13e:	4413      	add	r3, r2
 800b140:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b144:	617b      	str	r3, [r7, #20]
 800b146:	697b      	ldr	r3, [r7, #20]
 800b148:	881b      	ldrh	r3, [r3, #0]
 800b14a:	b29b      	uxth	r3, r3
 800b14c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b150:	b29a      	uxth	r2, r3
 800b152:	697b      	ldr	r3, [r7, #20]
 800b154:	801a      	strh	r2, [r3, #0]
 800b156:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b15a:	2b3e      	cmp	r3, #62	@ 0x3e
 800b15c:	d921      	bls.n	800b1a2 <USB_EPStartXfer+0x46c>
 800b15e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b162:	095b      	lsrs	r3, r3, #5
 800b164:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b168:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b16c:	f003 031f 	and.w	r3, r3, #31
 800b170:	2b00      	cmp	r3, #0
 800b172:	d104      	bne.n	800b17e <USB_EPStartXfer+0x448>
 800b174:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b178:	3b01      	subs	r3, #1
 800b17a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b17e:	697b      	ldr	r3, [r7, #20]
 800b180:	881b      	ldrh	r3, [r3, #0]
 800b182:	b29a      	uxth	r2, r3
 800b184:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b188:	b29b      	uxth	r3, r3
 800b18a:	029b      	lsls	r3, r3, #10
 800b18c:	b29b      	uxth	r3, r3
 800b18e:	4313      	orrs	r3, r2
 800b190:	b29b      	uxth	r3, r3
 800b192:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b196:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b19a:	b29a      	uxth	r2, r3
 800b19c:	697b      	ldr	r3, [r7, #20]
 800b19e:	801a      	strh	r2, [r3, #0]
 800b1a0:	e056      	b.n	800b250 <USB_EPStartXfer+0x51a>
 800b1a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d10a      	bne.n	800b1c0 <USB_EPStartXfer+0x48a>
 800b1aa:	697b      	ldr	r3, [r7, #20]
 800b1ac:	881b      	ldrh	r3, [r3, #0]
 800b1ae:	b29b      	uxth	r3, r3
 800b1b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b1b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b1b8:	b29a      	uxth	r2, r3
 800b1ba:	697b      	ldr	r3, [r7, #20]
 800b1bc:	801a      	strh	r2, [r3, #0]
 800b1be:	e047      	b.n	800b250 <USB_EPStartXfer+0x51a>
 800b1c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b1c4:	085b      	lsrs	r3, r3, #1
 800b1c6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b1ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b1ce:	f003 0301 	and.w	r3, r3, #1
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d004      	beq.n	800b1e0 <USB_EPStartXfer+0x4aa>
 800b1d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b1da:	3301      	adds	r3, #1
 800b1dc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b1e0:	697b      	ldr	r3, [r7, #20]
 800b1e2:	881b      	ldrh	r3, [r3, #0]
 800b1e4:	b29a      	uxth	r2, r3
 800b1e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b1ea:	b29b      	uxth	r3, r3
 800b1ec:	029b      	lsls	r3, r3, #10
 800b1ee:	b29b      	uxth	r3, r3
 800b1f0:	4313      	orrs	r3, r2
 800b1f2:	b29a      	uxth	r2, r3
 800b1f4:	697b      	ldr	r3, [r7, #20]
 800b1f6:	801a      	strh	r2, [r3, #0]
 800b1f8:	e02a      	b.n	800b250 <USB_EPStartXfer+0x51a>
 800b1fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b1fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	785b      	ldrb	r3, [r3, #1]
 800b206:	2b01      	cmp	r3, #1
 800b208:	d122      	bne.n	800b250 <USB_EPStartXfer+0x51a>
 800b20a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b20e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	623b      	str	r3, [r7, #32]
 800b216:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b21a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b224:	b29b      	uxth	r3, r3
 800b226:	461a      	mov	r2, r3
 800b228:	6a3b      	ldr	r3, [r7, #32]
 800b22a:	4413      	add	r3, r2
 800b22c:	623b      	str	r3, [r7, #32]
 800b22e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b232:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	781b      	ldrb	r3, [r3, #0]
 800b23a:	00da      	lsls	r2, r3, #3
 800b23c:	6a3b      	ldr	r3, [r7, #32]
 800b23e:	4413      	add	r3, r2
 800b240:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b244:	61fb      	str	r3, [r7, #28]
 800b246:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b24a:	b29a      	uxth	r2, r3
 800b24c:	69fb      	ldr	r3, [r7, #28]
 800b24e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b250:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b254:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	891b      	ldrh	r3, [r3, #8]
 800b25c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b260:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b264:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	6959      	ldr	r1, [r3, #20]
 800b26c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b270:	b29b      	uxth	r3, r3
 800b272:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b276:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b27a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b27e:	6800      	ldr	r0, [r0, #0]
 800b280:	f001 fa44 	bl	800c70c <USB_WritePMA>
 800b284:	e3ee      	b.n	800ba64 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b286:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b28a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	785b      	ldrb	r3, [r3, #1]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d177      	bne.n	800b386 <USB_EPStartXfer+0x650>
 800b296:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b29a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b2a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b2a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b2b0:	b29b      	uxth	r3, r3
 800b2b2:	461a      	mov	r2, r3
 800b2b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b2b6:	4413      	add	r3, r2
 800b2b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b2ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b2be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	781b      	ldrb	r3, [r3, #0]
 800b2c6:	00da      	lsls	r2, r3, #3
 800b2c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b2ca:	4413      	add	r3, r2
 800b2cc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b2d0:	647b      	str	r3, [r7, #68]	@ 0x44
 800b2d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b2d4:	881b      	ldrh	r3, [r3, #0]
 800b2d6:	b29b      	uxth	r3, r3
 800b2d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b2dc:	b29a      	uxth	r2, r3
 800b2de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b2e0:	801a      	strh	r2, [r3, #0]
 800b2e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b2e6:	2b3e      	cmp	r3, #62	@ 0x3e
 800b2e8:	d921      	bls.n	800b32e <USB_EPStartXfer+0x5f8>
 800b2ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b2ee:	095b      	lsrs	r3, r3, #5
 800b2f0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800b2f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b2f8:	f003 031f 	and.w	r3, r3, #31
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d104      	bne.n	800b30a <USB_EPStartXfer+0x5d4>
 800b300:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b304:	3b01      	subs	r3, #1
 800b306:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800b30a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b30c:	881b      	ldrh	r3, [r3, #0]
 800b30e:	b29a      	uxth	r2, r3
 800b310:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b314:	b29b      	uxth	r3, r3
 800b316:	029b      	lsls	r3, r3, #10
 800b318:	b29b      	uxth	r3, r3
 800b31a:	4313      	orrs	r3, r2
 800b31c:	b29b      	uxth	r3, r3
 800b31e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b322:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b326:	b29a      	uxth	r2, r3
 800b328:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b32a:	801a      	strh	r2, [r3, #0]
 800b32c:	e056      	b.n	800b3dc <USB_EPStartXfer+0x6a6>
 800b32e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b332:	2b00      	cmp	r3, #0
 800b334:	d10a      	bne.n	800b34c <USB_EPStartXfer+0x616>
 800b336:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b338:	881b      	ldrh	r3, [r3, #0]
 800b33a:	b29b      	uxth	r3, r3
 800b33c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b340:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b344:	b29a      	uxth	r2, r3
 800b346:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b348:	801a      	strh	r2, [r3, #0]
 800b34a:	e047      	b.n	800b3dc <USB_EPStartXfer+0x6a6>
 800b34c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b350:	085b      	lsrs	r3, r3, #1
 800b352:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800b356:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b35a:	f003 0301 	and.w	r3, r3, #1
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d004      	beq.n	800b36c <USB_EPStartXfer+0x636>
 800b362:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b366:	3301      	adds	r3, #1
 800b368:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800b36c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b36e:	881b      	ldrh	r3, [r3, #0]
 800b370:	b29a      	uxth	r2, r3
 800b372:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b376:	b29b      	uxth	r3, r3
 800b378:	029b      	lsls	r3, r3, #10
 800b37a:	b29b      	uxth	r3, r3
 800b37c:	4313      	orrs	r3, r2
 800b37e:	b29a      	uxth	r2, r3
 800b380:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b382:	801a      	strh	r2, [r3, #0]
 800b384:	e02a      	b.n	800b3dc <USB_EPStartXfer+0x6a6>
 800b386:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b38a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	785b      	ldrb	r3, [r3, #1]
 800b392:	2b01      	cmp	r3, #1
 800b394:	d122      	bne.n	800b3dc <USB_EPStartXfer+0x6a6>
 800b396:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b39a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	653b      	str	r3, [r7, #80]	@ 0x50
 800b3a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b3b0:	b29b      	uxth	r3, r3
 800b3b2:	461a      	mov	r2, r3
 800b3b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b3b6:	4413      	add	r3, r2
 800b3b8:	653b      	str	r3, [r7, #80]	@ 0x50
 800b3ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	781b      	ldrb	r3, [r3, #0]
 800b3c6:	00da      	lsls	r2, r3, #3
 800b3c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b3ca:	4413      	add	r3, r2
 800b3cc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b3d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b3d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b3d6:	b29a      	uxth	r2, r3
 800b3d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b3da:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b3dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	891b      	ldrh	r3, [r3, #8]
 800b3e8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b3ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	6959      	ldr	r1, [r3, #20]
 800b3f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b3fc:	b29b      	uxth	r3, r3
 800b3fe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b402:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b406:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b40a:	6800      	ldr	r0, [r0, #0]
 800b40c:	f001 f97e 	bl	800c70c <USB_WritePMA>
            ep->xfer_buff += len;
 800b410:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b414:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	695a      	ldr	r2, [r3, #20]
 800b41c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b420:	441a      	add	r2, r3
 800b422:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b426:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b42e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b432:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	6a1a      	ldr	r2, [r3, #32]
 800b43a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b43e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	691b      	ldr	r3, [r3, #16]
 800b446:	429a      	cmp	r2, r3
 800b448:	d90f      	bls.n	800b46a <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800b44a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b44e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	6a1a      	ldr	r2, [r3, #32]
 800b456:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b45a:	1ad2      	subs	r2, r2, r3
 800b45c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b460:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	621a      	str	r2, [r3, #32]
 800b468:	e00e      	b.n	800b488 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800b46a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b46e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	6a1b      	ldr	r3, [r3, #32]
 800b476:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800b47a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b47e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	2200      	movs	r2, #0
 800b486:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b488:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b48c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	643b      	str	r3, [r7, #64]	@ 0x40
 800b494:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b498:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	785b      	ldrb	r3, [r3, #1]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d177      	bne.n	800b594 <USB_EPStartXfer+0x85e>
 800b4a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b4b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b4be:	b29b      	uxth	r3, r3
 800b4c0:	461a      	mov	r2, r3
 800b4c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4c4:	4413      	add	r3, r2
 800b4c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b4c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	781b      	ldrb	r3, [r3, #0]
 800b4d4:	00da      	lsls	r2, r3, #3
 800b4d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4d8:	4413      	add	r3, r2
 800b4da:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b4de:	637b      	str	r3, [r7, #52]	@ 0x34
 800b4e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4e2:	881b      	ldrh	r3, [r3, #0]
 800b4e4:	b29b      	uxth	r3, r3
 800b4e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b4ea:	b29a      	uxth	r2, r3
 800b4ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4ee:	801a      	strh	r2, [r3, #0]
 800b4f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b4f4:	2b3e      	cmp	r3, #62	@ 0x3e
 800b4f6:	d921      	bls.n	800b53c <USB_EPStartXfer+0x806>
 800b4f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b4fc:	095b      	lsrs	r3, r3, #5
 800b4fe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b502:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b506:	f003 031f 	and.w	r3, r3, #31
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d104      	bne.n	800b518 <USB_EPStartXfer+0x7e2>
 800b50e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b512:	3b01      	subs	r3, #1
 800b514:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b518:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b51a:	881b      	ldrh	r3, [r3, #0]
 800b51c:	b29a      	uxth	r2, r3
 800b51e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b522:	b29b      	uxth	r3, r3
 800b524:	029b      	lsls	r3, r3, #10
 800b526:	b29b      	uxth	r3, r3
 800b528:	4313      	orrs	r3, r2
 800b52a:	b29b      	uxth	r3, r3
 800b52c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b530:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b534:	b29a      	uxth	r2, r3
 800b536:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b538:	801a      	strh	r2, [r3, #0]
 800b53a:	e050      	b.n	800b5de <USB_EPStartXfer+0x8a8>
 800b53c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b540:	2b00      	cmp	r3, #0
 800b542:	d10a      	bne.n	800b55a <USB_EPStartXfer+0x824>
 800b544:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b546:	881b      	ldrh	r3, [r3, #0]
 800b548:	b29b      	uxth	r3, r3
 800b54a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b54e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b552:	b29a      	uxth	r2, r3
 800b554:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b556:	801a      	strh	r2, [r3, #0]
 800b558:	e041      	b.n	800b5de <USB_EPStartXfer+0x8a8>
 800b55a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b55e:	085b      	lsrs	r3, r3, #1
 800b560:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b564:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b568:	f003 0301 	and.w	r3, r3, #1
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d004      	beq.n	800b57a <USB_EPStartXfer+0x844>
 800b570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b574:	3301      	adds	r3, #1
 800b576:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b57a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b57c:	881b      	ldrh	r3, [r3, #0]
 800b57e:	b29a      	uxth	r2, r3
 800b580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b584:	b29b      	uxth	r3, r3
 800b586:	029b      	lsls	r3, r3, #10
 800b588:	b29b      	uxth	r3, r3
 800b58a:	4313      	orrs	r3, r2
 800b58c:	b29a      	uxth	r2, r3
 800b58e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b590:	801a      	strh	r2, [r3, #0]
 800b592:	e024      	b.n	800b5de <USB_EPStartXfer+0x8a8>
 800b594:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b598:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	785b      	ldrb	r3, [r3, #1]
 800b5a0:	2b01      	cmp	r3, #1
 800b5a2:	d11c      	bne.n	800b5de <USB_EPStartXfer+0x8a8>
 800b5a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b5a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b5b2:	b29b      	uxth	r3, r3
 800b5b4:	461a      	mov	r2, r3
 800b5b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b5b8:	4413      	add	r3, r2
 800b5ba:	643b      	str	r3, [r7, #64]	@ 0x40
 800b5bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b5c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	781b      	ldrb	r3, [r3, #0]
 800b5c8:	00da      	lsls	r2, r3, #3
 800b5ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b5cc:	4413      	add	r3, r2
 800b5ce:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b5d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b5d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b5d8:	b29a      	uxth	r2, r3
 800b5da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5dc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b5de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b5e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	895b      	ldrh	r3, [r3, #10]
 800b5ea:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b5ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b5f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	6959      	ldr	r1, [r3, #20]
 800b5fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b5fe:	b29b      	uxth	r3, r3
 800b600:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b604:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b608:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b60c:	6800      	ldr	r0, [r0, #0]
 800b60e:	f001 f87d 	bl	800c70c <USB_WritePMA>
 800b612:	e227      	b.n	800ba64 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800b614:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b618:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	6a1b      	ldr	r3, [r3, #32]
 800b620:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800b624:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b628:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b62c:	681a      	ldr	r2, [r3, #0]
 800b62e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b632:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	781b      	ldrb	r3, [r3, #0]
 800b63a:	009b      	lsls	r3, r3, #2
 800b63c:	4413      	add	r3, r2
 800b63e:	881b      	ldrh	r3, [r3, #0]
 800b640:	b29b      	uxth	r3, r3
 800b642:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800b646:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b64a:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800b64e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b652:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b656:	681a      	ldr	r2, [r3, #0]
 800b658:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b65c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	781b      	ldrb	r3, [r3, #0]
 800b664:	009b      	lsls	r3, r3, #2
 800b666:	441a      	add	r2, r3
 800b668:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800b66c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b670:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b674:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b678:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b67c:	b29b      	uxth	r3, r3
 800b67e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b680:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b684:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b68c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b690:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b69a:	b29b      	uxth	r3, r3
 800b69c:	461a      	mov	r2, r3
 800b69e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b6a0:	4413      	add	r3, r2
 800b6a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b6a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	781b      	ldrb	r3, [r3, #0]
 800b6b0:	00da      	lsls	r2, r3, #3
 800b6b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b6b4:	4413      	add	r3, r2
 800b6b6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b6ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b6bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b6c0:	b29a      	uxth	r2, r3
 800b6c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b6c4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b6c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	891b      	ldrh	r3, [r3, #8]
 800b6d2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b6d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	6959      	ldr	r1, [r3, #20]
 800b6e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b6e6:	b29b      	uxth	r3, r3
 800b6e8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b6ec:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b6f0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b6f4:	6800      	ldr	r0, [r0, #0]
 800b6f6:	f001 f809 	bl	800c70c <USB_WritePMA>
 800b6fa:	e1b3      	b.n	800ba64 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800b6fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b700:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	6a1a      	ldr	r2, [r3, #32]
 800b708:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b70c:	1ad2      	subs	r2, r2, r3
 800b70e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b712:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b71a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b71e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b722:	681a      	ldr	r2, [r3, #0]
 800b724:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b728:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	781b      	ldrb	r3, [r3, #0]
 800b730:	009b      	lsls	r3, r3, #2
 800b732:	4413      	add	r3, r2
 800b734:	881b      	ldrh	r3, [r3, #0]
 800b736:	b29b      	uxth	r3, r3
 800b738:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	f000 80c6 	beq.w	800b8ce <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b742:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b746:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	673b      	str	r3, [r7, #112]	@ 0x70
 800b74e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b752:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	785b      	ldrb	r3, [r3, #1]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d177      	bne.n	800b84e <USB_EPStartXfer+0xb18>
 800b75e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b762:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b76a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b76e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b778:	b29b      	uxth	r3, r3
 800b77a:	461a      	mov	r2, r3
 800b77c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b77e:	4413      	add	r3, r2
 800b780:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b782:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b786:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	781b      	ldrb	r3, [r3, #0]
 800b78e:	00da      	lsls	r2, r3, #3
 800b790:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b792:	4413      	add	r3, r2
 800b794:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b798:	667b      	str	r3, [r7, #100]	@ 0x64
 800b79a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b79c:	881b      	ldrh	r3, [r3, #0]
 800b79e:	b29b      	uxth	r3, r3
 800b7a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b7a4:	b29a      	uxth	r2, r3
 800b7a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b7a8:	801a      	strh	r2, [r3, #0]
 800b7aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7ae:	2b3e      	cmp	r3, #62	@ 0x3e
 800b7b0:	d921      	bls.n	800b7f6 <USB_EPStartXfer+0xac0>
 800b7b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7b6:	095b      	lsrs	r3, r3, #5
 800b7b8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800b7bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7c0:	f003 031f 	and.w	r3, r3, #31
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d104      	bne.n	800b7d2 <USB_EPStartXfer+0xa9c>
 800b7c8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800b7cc:	3b01      	subs	r3, #1
 800b7ce:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800b7d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b7d4:	881b      	ldrh	r3, [r3, #0]
 800b7d6:	b29a      	uxth	r2, r3
 800b7d8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800b7dc:	b29b      	uxth	r3, r3
 800b7de:	029b      	lsls	r3, r3, #10
 800b7e0:	b29b      	uxth	r3, r3
 800b7e2:	4313      	orrs	r3, r2
 800b7e4:	b29b      	uxth	r3, r3
 800b7e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b7ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b7ee:	b29a      	uxth	r2, r3
 800b7f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b7f2:	801a      	strh	r2, [r3, #0]
 800b7f4:	e050      	b.n	800b898 <USB_EPStartXfer+0xb62>
 800b7f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d10a      	bne.n	800b814 <USB_EPStartXfer+0xade>
 800b7fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b800:	881b      	ldrh	r3, [r3, #0]
 800b802:	b29b      	uxth	r3, r3
 800b804:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b808:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b80c:	b29a      	uxth	r2, r3
 800b80e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b810:	801a      	strh	r2, [r3, #0]
 800b812:	e041      	b.n	800b898 <USB_EPStartXfer+0xb62>
 800b814:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b818:	085b      	lsrs	r3, r3, #1
 800b81a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800b81e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b822:	f003 0301 	and.w	r3, r3, #1
 800b826:	2b00      	cmp	r3, #0
 800b828:	d004      	beq.n	800b834 <USB_EPStartXfer+0xafe>
 800b82a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800b82e:	3301      	adds	r3, #1
 800b830:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800b834:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b836:	881b      	ldrh	r3, [r3, #0]
 800b838:	b29a      	uxth	r2, r3
 800b83a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800b83e:	b29b      	uxth	r3, r3
 800b840:	029b      	lsls	r3, r3, #10
 800b842:	b29b      	uxth	r3, r3
 800b844:	4313      	orrs	r3, r2
 800b846:	b29a      	uxth	r2, r3
 800b848:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b84a:	801a      	strh	r2, [r3, #0]
 800b84c:	e024      	b.n	800b898 <USB_EPStartXfer+0xb62>
 800b84e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b852:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	785b      	ldrb	r3, [r3, #1]
 800b85a:	2b01      	cmp	r3, #1
 800b85c:	d11c      	bne.n	800b898 <USB_EPStartXfer+0xb62>
 800b85e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b862:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b86c:	b29b      	uxth	r3, r3
 800b86e:	461a      	mov	r2, r3
 800b870:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b872:	4413      	add	r3, r2
 800b874:	673b      	str	r3, [r7, #112]	@ 0x70
 800b876:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b87a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	781b      	ldrb	r3, [r3, #0]
 800b882:	00da      	lsls	r2, r3, #3
 800b884:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b886:	4413      	add	r3, r2
 800b888:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b88c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b88e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b892:	b29a      	uxth	r2, r3
 800b894:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b896:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800b898:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b89c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	895b      	ldrh	r3, [r3, #10]
 800b8a4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b8a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	6959      	ldr	r1, [r3, #20]
 800b8b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8b8:	b29b      	uxth	r3, r3
 800b8ba:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b8be:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b8c2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b8c6:	6800      	ldr	r0, [r0, #0]
 800b8c8:	f000 ff20 	bl	800c70c <USB_WritePMA>
 800b8cc:	e0ca      	b.n	800ba64 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b8ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	785b      	ldrb	r3, [r3, #1]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d177      	bne.n	800b9ce <USB_EPStartXfer+0xc98>
 800b8de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b8ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b8f8:	b29b      	uxth	r3, r3
 800b8fa:	461a      	mov	r2, r3
 800b8fc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b8fe:	4413      	add	r3, r2
 800b900:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b902:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b906:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	781b      	ldrb	r3, [r3, #0]
 800b90e:	00da      	lsls	r2, r3, #3
 800b910:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b912:	4413      	add	r3, r2
 800b914:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b918:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b91a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b91c:	881b      	ldrh	r3, [r3, #0]
 800b91e:	b29b      	uxth	r3, r3
 800b920:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b924:	b29a      	uxth	r2, r3
 800b926:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b928:	801a      	strh	r2, [r3, #0]
 800b92a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b92e:	2b3e      	cmp	r3, #62	@ 0x3e
 800b930:	d921      	bls.n	800b976 <USB_EPStartXfer+0xc40>
 800b932:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b936:	095b      	lsrs	r3, r3, #5
 800b938:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b93c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b940:	f003 031f 	and.w	r3, r3, #31
 800b944:	2b00      	cmp	r3, #0
 800b946:	d104      	bne.n	800b952 <USB_EPStartXfer+0xc1c>
 800b948:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800b94c:	3b01      	subs	r3, #1
 800b94e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b952:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b954:	881b      	ldrh	r3, [r3, #0]
 800b956:	b29a      	uxth	r2, r3
 800b958:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800b95c:	b29b      	uxth	r3, r3
 800b95e:	029b      	lsls	r3, r3, #10
 800b960:	b29b      	uxth	r3, r3
 800b962:	4313      	orrs	r3, r2
 800b964:	b29b      	uxth	r3, r3
 800b966:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b96a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b96e:	b29a      	uxth	r2, r3
 800b970:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b972:	801a      	strh	r2, [r3, #0]
 800b974:	e05c      	b.n	800ba30 <USB_EPStartXfer+0xcfa>
 800b976:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d10a      	bne.n	800b994 <USB_EPStartXfer+0xc5e>
 800b97e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b980:	881b      	ldrh	r3, [r3, #0]
 800b982:	b29b      	uxth	r3, r3
 800b984:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b988:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b98c:	b29a      	uxth	r2, r3
 800b98e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b990:	801a      	strh	r2, [r3, #0]
 800b992:	e04d      	b.n	800ba30 <USB_EPStartXfer+0xcfa>
 800b994:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b998:	085b      	lsrs	r3, r3, #1
 800b99a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b99e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9a2:	f003 0301 	and.w	r3, r3, #1
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d004      	beq.n	800b9b4 <USB_EPStartXfer+0xc7e>
 800b9aa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800b9ae:	3301      	adds	r3, #1
 800b9b0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b9b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b9b6:	881b      	ldrh	r3, [r3, #0]
 800b9b8:	b29a      	uxth	r2, r3
 800b9ba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800b9be:	b29b      	uxth	r3, r3
 800b9c0:	029b      	lsls	r3, r3, #10
 800b9c2:	b29b      	uxth	r3, r3
 800b9c4:	4313      	orrs	r3, r2
 800b9c6:	b29a      	uxth	r2, r3
 800b9c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b9ca:	801a      	strh	r2, [r3, #0]
 800b9cc:	e030      	b.n	800ba30 <USB_EPStartXfer+0xcfa>
 800b9ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	785b      	ldrb	r3, [r3, #1]
 800b9da:	2b01      	cmp	r3, #1
 800b9dc:	d128      	bne.n	800ba30 <USB_EPStartXfer+0xcfa>
 800b9de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b9ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b9fa:	b29b      	uxth	r3, r3
 800b9fc:	461a      	mov	r2, r3
 800b9fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ba02:	4413      	add	r3, r2
 800ba04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ba08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	781b      	ldrb	r3, [r3, #0]
 800ba14:	00da      	lsls	r2, r3, #3
 800ba16:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ba1a:	4413      	add	r3, r2
 800ba1c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ba20:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ba24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba28:	b29a      	uxth	r2, r3
 800ba2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ba2e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ba30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	891b      	ldrh	r3, [r3, #8]
 800ba3c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ba40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	6959      	ldr	r1, [r3, #20]
 800ba4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba50:	b29b      	uxth	r3, r3
 800ba52:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ba56:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800ba5a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800ba5e:	6800      	ldr	r0, [r0, #0]
 800ba60:	f000 fe54 	bl	800c70c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800ba64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba68:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ba6c:	681a      	ldr	r2, [r3, #0]
 800ba6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	781b      	ldrb	r3, [r3, #0]
 800ba7a:	009b      	lsls	r3, r3, #2
 800ba7c:	4413      	add	r3, r2
 800ba7e:	881b      	ldrh	r3, [r3, #0]
 800ba80:	b29b      	uxth	r3, r3
 800ba82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ba86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ba8a:	817b      	strh	r3, [r7, #10]
 800ba8c:	897b      	ldrh	r3, [r7, #10]
 800ba8e:	f083 0310 	eor.w	r3, r3, #16
 800ba92:	817b      	strh	r3, [r7, #10]
 800ba94:	897b      	ldrh	r3, [r7, #10]
 800ba96:	f083 0320 	eor.w	r3, r3, #32
 800ba9a:	817b      	strh	r3, [r7, #10]
 800ba9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800baa0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800baa4:	681a      	ldr	r2, [r3, #0]
 800baa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800baaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	781b      	ldrb	r3, [r3, #0]
 800bab2:	009b      	lsls	r3, r3, #2
 800bab4:	441a      	add	r2, r3
 800bab6:	897b      	ldrh	r3, [r7, #10]
 800bab8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800babc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bac0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bac4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bac8:	b29b      	uxth	r3, r3
 800baca:	8013      	strh	r3, [r2, #0]
 800bacc:	f000 bcde 	b.w	800c48c <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800bad0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bad4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	7b1b      	ldrb	r3, [r3, #12]
 800badc:	2b00      	cmp	r3, #0
 800bade:	f040 80bb 	bne.w	800bc58 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800bae2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bae6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	699a      	ldr	r2, [r3, #24]
 800baee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800baf2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	691b      	ldr	r3, [r3, #16]
 800bafa:	429a      	cmp	r2, r3
 800bafc:	d917      	bls.n	800bb2e <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800bafe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	691b      	ldr	r3, [r3, #16]
 800bb0a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800bb0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	699a      	ldr	r2, [r3, #24]
 800bb1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb1e:	1ad2      	subs	r2, r2, r3
 800bb20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	619a      	str	r2, [r3, #24]
 800bb2c:	e00e      	b.n	800bb4c <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800bb2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	699b      	ldr	r3, [r3, #24]
 800bb3a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800bb3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	2200      	movs	r2, #0
 800bb4a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800bb4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800bb5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bb68:	b29b      	uxth	r3, r3
 800bb6a:	461a      	mov	r2, r3
 800bb6c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800bb70:	4413      	add	r3, r2
 800bb72:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800bb76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	781b      	ldrb	r3, [r3, #0]
 800bb82:	00da      	lsls	r2, r3, #3
 800bb84:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800bb88:	4413      	add	r3, r2
 800bb8a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bb8e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800bb92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bb96:	881b      	ldrh	r3, [r3, #0]
 800bb98:	b29b      	uxth	r3, r3
 800bb9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bb9e:	b29a      	uxth	r2, r3
 800bba0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bba4:	801a      	strh	r2, [r3, #0]
 800bba6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbaa:	2b3e      	cmp	r3, #62	@ 0x3e
 800bbac:	d924      	bls.n	800bbf8 <USB_EPStartXfer+0xec2>
 800bbae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbb2:	095b      	lsrs	r3, r3, #5
 800bbb4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800bbb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbbc:	f003 031f 	and.w	r3, r3, #31
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d104      	bne.n	800bbce <USB_EPStartXfer+0xe98>
 800bbc4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800bbc8:	3b01      	subs	r3, #1
 800bbca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800bbce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bbd2:	881b      	ldrh	r3, [r3, #0]
 800bbd4:	b29a      	uxth	r2, r3
 800bbd6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800bbda:	b29b      	uxth	r3, r3
 800bbdc:	029b      	lsls	r3, r3, #10
 800bbde:	b29b      	uxth	r3, r3
 800bbe0:	4313      	orrs	r3, r2
 800bbe2:	b29b      	uxth	r3, r3
 800bbe4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bbe8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bbec:	b29a      	uxth	r2, r3
 800bbee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bbf2:	801a      	strh	r2, [r3, #0]
 800bbf4:	f000 bc10 	b.w	800c418 <USB_EPStartXfer+0x16e2>
 800bbf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d10c      	bne.n	800bc1a <USB_EPStartXfer+0xee4>
 800bc00:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bc04:	881b      	ldrh	r3, [r3, #0]
 800bc06:	b29b      	uxth	r3, r3
 800bc08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bc0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bc10:	b29a      	uxth	r2, r3
 800bc12:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bc16:	801a      	strh	r2, [r3, #0]
 800bc18:	e3fe      	b.n	800c418 <USB_EPStartXfer+0x16e2>
 800bc1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc1e:	085b      	lsrs	r3, r3, #1
 800bc20:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800bc24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc28:	f003 0301 	and.w	r3, r3, #1
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d004      	beq.n	800bc3a <USB_EPStartXfer+0xf04>
 800bc30:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800bc34:	3301      	adds	r3, #1
 800bc36:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800bc3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bc3e:	881b      	ldrh	r3, [r3, #0]
 800bc40:	b29a      	uxth	r2, r3
 800bc42:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800bc46:	b29b      	uxth	r3, r3
 800bc48:	029b      	lsls	r3, r3, #10
 800bc4a:	b29b      	uxth	r3, r3
 800bc4c:	4313      	orrs	r3, r2
 800bc4e:	b29a      	uxth	r2, r3
 800bc50:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bc54:	801a      	strh	r2, [r3, #0]
 800bc56:	e3df      	b.n	800c418 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800bc58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	78db      	ldrb	r3, [r3, #3]
 800bc64:	2b02      	cmp	r3, #2
 800bc66:	f040 8218 	bne.w	800c09a <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800bc6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	785b      	ldrb	r3, [r3, #1]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	f040 809d 	bne.w	800bdb6 <USB_EPStartXfer+0x1080>
 800bc7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc80:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800bc8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc8e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bc98:	b29b      	uxth	r3, r3
 800bc9a:	461a      	mov	r2, r3
 800bc9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bca0:	4413      	add	r3, r2
 800bca2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800bca6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bcaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	781b      	ldrb	r3, [r3, #0]
 800bcb2:	00da      	lsls	r2, r3, #3
 800bcb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bcb8:	4413      	add	r3, r2
 800bcba:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bcbe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800bcc2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bcc6:	881b      	ldrh	r3, [r3, #0]
 800bcc8:	b29b      	uxth	r3, r3
 800bcca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bcce:	b29a      	uxth	r2, r3
 800bcd0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bcd4:	801a      	strh	r2, [r3, #0]
 800bcd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bcda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	691b      	ldr	r3, [r3, #16]
 800bce2:	2b3e      	cmp	r3, #62	@ 0x3e
 800bce4:	d92b      	bls.n	800bd3e <USB_EPStartXfer+0x1008>
 800bce6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bcea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	691b      	ldr	r3, [r3, #16]
 800bcf2:	095b      	lsrs	r3, r3, #5
 800bcf4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800bcf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bcfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	691b      	ldr	r3, [r3, #16]
 800bd04:	f003 031f 	and.w	r3, r3, #31
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d104      	bne.n	800bd16 <USB_EPStartXfer+0xfe0>
 800bd0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bd10:	3b01      	subs	r3, #1
 800bd12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800bd16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bd1a:	881b      	ldrh	r3, [r3, #0]
 800bd1c:	b29a      	uxth	r2, r3
 800bd1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bd22:	b29b      	uxth	r3, r3
 800bd24:	029b      	lsls	r3, r3, #10
 800bd26:	b29b      	uxth	r3, r3
 800bd28:	4313      	orrs	r3, r2
 800bd2a:	b29b      	uxth	r3, r3
 800bd2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bd30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bd34:	b29a      	uxth	r2, r3
 800bd36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bd3a:	801a      	strh	r2, [r3, #0]
 800bd3c:	e070      	b.n	800be20 <USB_EPStartXfer+0x10ea>
 800bd3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	691b      	ldr	r3, [r3, #16]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d10c      	bne.n	800bd68 <USB_EPStartXfer+0x1032>
 800bd4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bd52:	881b      	ldrh	r3, [r3, #0]
 800bd54:	b29b      	uxth	r3, r3
 800bd56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bd5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bd5e:	b29a      	uxth	r2, r3
 800bd60:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bd64:	801a      	strh	r2, [r3, #0]
 800bd66:	e05b      	b.n	800be20 <USB_EPStartXfer+0x10ea>
 800bd68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	691b      	ldr	r3, [r3, #16]
 800bd74:	085b      	lsrs	r3, r3, #1
 800bd76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800bd7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	691b      	ldr	r3, [r3, #16]
 800bd86:	f003 0301 	and.w	r3, r3, #1
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d004      	beq.n	800bd98 <USB_EPStartXfer+0x1062>
 800bd8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bd92:	3301      	adds	r3, #1
 800bd94:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800bd98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bd9c:	881b      	ldrh	r3, [r3, #0]
 800bd9e:	b29a      	uxth	r2, r3
 800bda0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bda4:	b29b      	uxth	r3, r3
 800bda6:	029b      	lsls	r3, r3, #10
 800bda8:	b29b      	uxth	r3, r3
 800bdaa:	4313      	orrs	r3, r2
 800bdac:	b29a      	uxth	r2, r3
 800bdae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bdb2:	801a      	strh	r2, [r3, #0]
 800bdb4:	e034      	b.n	800be20 <USB_EPStartXfer+0x10ea>
 800bdb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bdba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	785b      	ldrb	r3, [r3, #1]
 800bdc2:	2b01      	cmp	r3, #1
 800bdc4:	d12c      	bne.n	800be20 <USB_EPStartXfer+0x10ea>
 800bdc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bdca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bdd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bdd8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bde2:	b29b      	uxth	r3, r3
 800bde4:	461a      	mov	r2, r3
 800bde6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bdea:	4413      	add	r3, r2
 800bdec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bdf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bdf4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	781b      	ldrb	r3, [r3, #0]
 800bdfc:	00da      	lsls	r2, r3, #3
 800bdfe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800be02:	4413      	add	r3, r2
 800be04:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800be08:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800be0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	691b      	ldr	r3, [r3, #16]
 800be18:	b29a      	uxth	r2, r3
 800be1a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800be1e:	801a      	strh	r2, [r3, #0]
 800be20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be24:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800be2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	785b      	ldrb	r3, [r3, #1]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	f040 809d 	bne.w	800bf7a <USB_EPStartXfer+0x1244>
 800be40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be44:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800be4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800be5c:	b29b      	uxth	r3, r3
 800be5e:	461a      	mov	r2, r3
 800be60:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800be64:	4413      	add	r3, r2
 800be66:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800be6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	781b      	ldrb	r3, [r3, #0]
 800be76:	00da      	lsls	r2, r3, #3
 800be78:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800be7c:	4413      	add	r3, r2
 800be7e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800be82:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800be86:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800be8a:	881b      	ldrh	r3, [r3, #0]
 800be8c:	b29b      	uxth	r3, r3
 800be8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800be92:	b29a      	uxth	r2, r3
 800be94:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800be98:	801a      	strh	r2, [r3, #0]
 800be9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	691b      	ldr	r3, [r3, #16]
 800bea6:	2b3e      	cmp	r3, #62	@ 0x3e
 800bea8:	d92b      	bls.n	800bf02 <USB_EPStartXfer+0x11cc>
 800beaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800beae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	691b      	ldr	r3, [r3, #16]
 800beb6:	095b      	lsrs	r3, r3, #5
 800beb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800bebc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bec0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	691b      	ldr	r3, [r3, #16]
 800bec8:	f003 031f 	and.w	r3, r3, #31
 800becc:	2b00      	cmp	r3, #0
 800bece:	d104      	bne.n	800beda <USB_EPStartXfer+0x11a4>
 800bed0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bed4:	3b01      	subs	r3, #1
 800bed6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800beda:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bede:	881b      	ldrh	r3, [r3, #0]
 800bee0:	b29a      	uxth	r2, r3
 800bee2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bee6:	b29b      	uxth	r3, r3
 800bee8:	029b      	lsls	r3, r3, #10
 800beea:	b29b      	uxth	r3, r3
 800beec:	4313      	orrs	r3, r2
 800beee:	b29b      	uxth	r3, r3
 800bef0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bef4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bef8:	b29a      	uxth	r2, r3
 800befa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800befe:	801a      	strh	r2, [r3, #0]
 800bf00:	e069      	b.n	800bfd6 <USB_EPStartXfer+0x12a0>
 800bf02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	691b      	ldr	r3, [r3, #16]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d10c      	bne.n	800bf2c <USB_EPStartXfer+0x11f6>
 800bf12:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bf16:	881b      	ldrh	r3, [r3, #0]
 800bf18:	b29b      	uxth	r3, r3
 800bf1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bf1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bf22:	b29a      	uxth	r2, r3
 800bf24:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bf28:	801a      	strh	r2, [r3, #0]
 800bf2a:	e054      	b.n	800bfd6 <USB_EPStartXfer+0x12a0>
 800bf2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	691b      	ldr	r3, [r3, #16]
 800bf38:	085b      	lsrs	r3, r3, #1
 800bf3a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800bf3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	691b      	ldr	r3, [r3, #16]
 800bf4a:	f003 0301 	and.w	r3, r3, #1
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d004      	beq.n	800bf5c <USB_EPStartXfer+0x1226>
 800bf52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bf56:	3301      	adds	r3, #1
 800bf58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800bf5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bf60:	881b      	ldrh	r3, [r3, #0]
 800bf62:	b29a      	uxth	r2, r3
 800bf64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bf68:	b29b      	uxth	r3, r3
 800bf6a:	029b      	lsls	r3, r3, #10
 800bf6c:	b29b      	uxth	r3, r3
 800bf6e:	4313      	orrs	r3, r2
 800bf70:	b29a      	uxth	r2, r3
 800bf72:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bf76:	801a      	strh	r2, [r3, #0]
 800bf78:	e02d      	b.n	800bfd6 <USB_EPStartXfer+0x12a0>
 800bf7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	785b      	ldrb	r3, [r3, #1]
 800bf86:	2b01      	cmp	r3, #1
 800bf88:	d125      	bne.n	800bfd6 <USB_EPStartXfer+0x12a0>
 800bf8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf8e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bf98:	b29b      	uxth	r3, r3
 800bf9a:	461a      	mov	r2, r3
 800bf9c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bfa0:	4413      	add	r3, r2
 800bfa2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800bfa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bfaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	781b      	ldrb	r3, [r3, #0]
 800bfb2:	00da      	lsls	r2, r3, #3
 800bfb4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bfb8:	4413      	add	r3, r2
 800bfba:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bfbe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800bfc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bfc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	691b      	ldr	r3, [r3, #16]
 800bfce:	b29a      	uxth	r2, r3
 800bfd0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bfd4:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800bfd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bfda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	69db      	ldr	r3, [r3, #28]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	f000 8218 	beq.w	800c418 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800bfe8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bfec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bff0:	681a      	ldr	r2, [r3, #0]
 800bff2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bff6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	781b      	ldrb	r3, [r3, #0]
 800bffe:	009b      	lsls	r3, r3, #2
 800c000:	4413      	add	r3, r2
 800c002:	881b      	ldrh	r3, [r3, #0]
 800c004:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c008:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800c00c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c010:	2b00      	cmp	r3, #0
 800c012:	d005      	beq.n	800c020 <USB_EPStartXfer+0x12ea>
 800c014:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800c018:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d10d      	bne.n	800c03c <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c020:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800c024:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c028:	2b00      	cmp	r3, #0
 800c02a:	f040 81f5 	bne.w	800c418 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c02e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800c032:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c036:	2b00      	cmp	r3, #0
 800c038:	f040 81ee 	bne.w	800c418 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800c03c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c040:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c044:	681a      	ldr	r2, [r3, #0]
 800c046:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c04a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	781b      	ldrb	r3, [r3, #0]
 800c052:	009b      	lsls	r3, r3, #2
 800c054:	4413      	add	r3, r2
 800c056:	881b      	ldrh	r3, [r3, #0]
 800c058:	b29b      	uxth	r3, r3
 800c05a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c05e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c062:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800c066:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c06a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c06e:	681a      	ldr	r2, [r3, #0]
 800c070:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c074:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	781b      	ldrb	r3, [r3, #0]
 800c07c:	009b      	lsls	r3, r3, #2
 800c07e:	441a      	add	r2, r3
 800c080:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800c084:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c088:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c08c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c090:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c094:	b29b      	uxth	r3, r3
 800c096:	8013      	strh	r3, [r2, #0]
 800c098:	e1be      	b.n	800c418 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800c09a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c09e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	78db      	ldrb	r3, [r3, #3]
 800c0a6:	2b01      	cmp	r3, #1
 800c0a8:	f040 81b4 	bne.w	800c414 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800c0ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	699a      	ldr	r2, [r3, #24]
 800c0b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	691b      	ldr	r3, [r3, #16]
 800c0c4:	429a      	cmp	r2, r3
 800c0c6:	d917      	bls.n	800c0f8 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800c0c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	691b      	ldr	r3, [r3, #16]
 800c0d4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800c0d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	699a      	ldr	r2, [r3, #24]
 800c0e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0e8:	1ad2      	subs	r2, r2, r3
 800c0ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	619a      	str	r2, [r3, #24]
 800c0f6:	e00e      	b.n	800c116 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800c0f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	699b      	ldr	r3, [r3, #24]
 800c104:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800c108:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c10c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	2200      	movs	r2, #0
 800c114:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800c116:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c11a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	785b      	ldrb	r3, [r3, #1]
 800c122:	2b00      	cmp	r3, #0
 800c124:	f040 8085 	bne.w	800c232 <USB_EPStartXfer+0x14fc>
 800c128:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c12c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c136:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c13a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c144:	b29b      	uxth	r3, r3
 800c146:	461a      	mov	r2, r3
 800c148:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800c14c:	4413      	add	r3, r2
 800c14e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c152:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c156:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	781b      	ldrb	r3, [r3, #0]
 800c15e:	00da      	lsls	r2, r3, #3
 800c160:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800c164:	4413      	add	r3, r2
 800c166:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c16a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c16e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c172:	881b      	ldrh	r3, [r3, #0]
 800c174:	b29b      	uxth	r3, r3
 800c176:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c17a:	b29a      	uxth	r2, r3
 800c17c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c180:	801a      	strh	r2, [r3, #0]
 800c182:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c186:	2b3e      	cmp	r3, #62	@ 0x3e
 800c188:	d923      	bls.n	800c1d2 <USB_EPStartXfer+0x149c>
 800c18a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c18e:	095b      	lsrs	r3, r3, #5
 800c190:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800c194:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c198:	f003 031f 	and.w	r3, r3, #31
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d104      	bne.n	800c1aa <USB_EPStartXfer+0x1474>
 800c1a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c1a4:	3b01      	subs	r3, #1
 800c1a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800c1aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c1ae:	881b      	ldrh	r3, [r3, #0]
 800c1b0:	b29a      	uxth	r2, r3
 800c1b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c1b6:	b29b      	uxth	r3, r3
 800c1b8:	029b      	lsls	r3, r3, #10
 800c1ba:	b29b      	uxth	r3, r3
 800c1bc:	4313      	orrs	r3, r2
 800c1be:	b29b      	uxth	r3, r3
 800c1c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c1c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c1c8:	b29a      	uxth	r2, r3
 800c1ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c1ce:	801a      	strh	r2, [r3, #0]
 800c1d0:	e060      	b.n	800c294 <USB_EPStartXfer+0x155e>
 800c1d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d10c      	bne.n	800c1f4 <USB_EPStartXfer+0x14be>
 800c1da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c1de:	881b      	ldrh	r3, [r3, #0]
 800c1e0:	b29b      	uxth	r3, r3
 800c1e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c1e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c1ea:	b29a      	uxth	r2, r3
 800c1ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c1f0:	801a      	strh	r2, [r3, #0]
 800c1f2:	e04f      	b.n	800c294 <USB_EPStartXfer+0x155e>
 800c1f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1f8:	085b      	lsrs	r3, r3, #1
 800c1fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800c1fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c202:	f003 0301 	and.w	r3, r3, #1
 800c206:	2b00      	cmp	r3, #0
 800c208:	d004      	beq.n	800c214 <USB_EPStartXfer+0x14de>
 800c20a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c20e:	3301      	adds	r3, #1
 800c210:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800c214:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c218:	881b      	ldrh	r3, [r3, #0]
 800c21a:	b29a      	uxth	r2, r3
 800c21c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c220:	b29b      	uxth	r3, r3
 800c222:	029b      	lsls	r3, r3, #10
 800c224:	b29b      	uxth	r3, r3
 800c226:	4313      	orrs	r3, r2
 800c228:	b29a      	uxth	r2, r3
 800c22a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c22e:	801a      	strh	r2, [r3, #0]
 800c230:	e030      	b.n	800c294 <USB_EPStartXfer+0x155e>
 800c232:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c236:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	785b      	ldrb	r3, [r3, #1]
 800c23e:	2b01      	cmp	r3, #1
 800c240:	d128      	bne.n	800c294 <USB_EPStartXfer+0x155e>
 800c242:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c246:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c250:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c254:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c25e:	b29b      	uxth	r3, r3
 800c260:	461a      	mov	r2, r3
 800c262:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c266:	4413      	add	r3, r2
 800c268:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c26c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c270:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	781b      	ldrb	r3, [r3, #0]
 800c278:	00da      	lsls	r2, r3, #3
 800c27a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c27e:	4413      	add	r3, r2
 800c280:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c284:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c288:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c28c:	b29a      	uxth	r2, r3
 800c28e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800c292:	801a      	strh	r2, [r3, #0]
 800c294:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c298:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c2a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	785b      	ldrb	r3, [r3, #1]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	f040 8085 	bne.w	800c3be <USB_EPStartXfer+0x1688>
 800c2b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800c2c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c2d0:	b29b      	uxth	r3, r3
 800c2d2:	461a      	mov	r2, r3
 800c2d4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800c2d8:	4413      	add	r3, r2
 800c2da:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800c2de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	781b      	ldrb	r3, [r3, #0]
 800c2ea:	00da      	lsls	r2, r3, #3
 800c2ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800c2f0:	4413      	add	r3, r2
 800c2f2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c2f6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c2fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c2fe:	881b      	ldrh	r3, [r3, #0]
 800c300:	b29b      	uxth	r3, r3
 800c302:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c306:	b29a      	uxth	r2, r3
 800c308:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c30c:	801a      	strh	r2, [r3, #0]
 800c30e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c312:	2b3e      	cmp	r3, #62	@ 0x3e
 800c314:	d923      	bls.n	800c35e <USB_EPStartXfer+0x1628>
 800c316:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c31a:	095b      	lsrs	r3, r3, #5
 800c31c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c320:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c324:	f003 031f 	and.w	r3, r3, #31
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d104      	bne.n	800c336 <USB_EPStartXfer+0x1600>
 800c32c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c330:	3b01      	subs	r3, #1
 800c332:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c336:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c33a:	881b      	ldrh	r3, [r3, #0]
 800c33c:	b29a      	uxth	r2, r3
 800c33e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c342:	b29b      	uxth	r3, r3
 800c344:	029b      	lsls	r3, r3, #10
 800c346:	b29b      	uxth	r3, r3
 800c348:	4313      	orrs	r3, r2
 800c34a:	b29b      	uxth	r3, r3
 800c34c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c350:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c354:	b29a      	uxth	r2, r3
 800c356:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c35a:	801a      	strh	r2, [r3, #0]
 800c35c:	e05c      	b.n	800c418 <USB_EPStartXfer+0x16e2>
 800c35e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c362:	2b00      	cmp	r3, #0
 800c364:	d10c      	bne.n	800c380 <USB_EPStartXfer+0x164a>
 800c366:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c36a:	881b      	ldrh	r3, [r3, #0]
 800c36c:	b29b      	uxth	r3, r3
 800c36e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c372:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c376:	b29a      	uxth	r2, r3
 800c378:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c37c:	801a      	strh	r2, [r3, #0]
 800c37e:	e04b      	b.n	800c418 <USB_EPStartXfer+0x16e2>
 800c380:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c384:	085b      	lsrs	r3, r3, #1
 800c386:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c38a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c38e:	f003 0301 	and.w	r3, r3, #1
 800c392:	2b00      	cmp	r3, #0
 800c394:	d004      	beq.n	800c3a0 <USB_EPStartXfer+0x166a>
 800c396:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c39a:	3301      	adds	r3, #1
 800c39c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c3a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c3a4:	881b      	ldrh	r3, [r3, #0]
 800c3a6:	b29a      	uxth	r2, r3
 800c3a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c3ac:	b29b      	uxth	r3, r3
 800c3ae:	029b      	lsls	r3, r3, #10
 800c3b0:	b29b      	uxth	r3, r3
 800c3b2:	4313      	orrs	r3, r2
 800c3b4:	b29a      	uxth	r2, r3
 800c3b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c3ba:	801a      	strh	r2, [r3, #0]
 800c3bc:	e02c      	b.n	800c418 <USB_EPStartXfer+0x16e2>
 800c3be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c3c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	785b      	ldrb	r3, [r3, #1]
 800c3ca:	2b01      	cmp	r3, #1
 800c3cc:	d124      	bne.n	800c418 <USB_EPStartXfer+0x16e2>
 800c3ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c3d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c3dc:	b29b      	uxth	r3, r3
 800c3de:	461a      	mov	r2, r3
 800c3e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c3e4:	4413      	add	r3, r2
 800c3e6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c3ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c3ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	781b      	ldrb	r3, [r3, #0]
 800c3f6:	00da      	lsls	r2, r3, #3
 800c3f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c3fc:	4413      	add	r3, r2
 800c3fe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c402:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c406:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c40a:	b29a      	uxth	r2, r3
 800c40c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c410:	801a      	strh	r2, [r3, #0]
 800c412:	e001      	b.n	800c418 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800c414:	2301      	movs	r3, #1
 800c416:	e03a      	b.n	800c48e <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c418:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c41c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c420:	681a      	ldr	r2, [r3, #0]
 800c422:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c426:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	781b      	ldrb	r3, [r3, #0]
 800c42e:	009b      	lsls	r3, r3, #2
 800c430:	4413      	add	r3, r2
 800c432:	881b      	ldrh	r3, [r3, #0]
 800c434:	b29b      	uxth	r3, r3
 800c436:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c43a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c43e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800c442:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800c446:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c44a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800c44e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800c452:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c456:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800c45a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c45e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c462:	681a      	ldr	r2, [r3, #0]
 800c464:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c468:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	781b      	ldrb	r3, [r3, #0]
 800c470:	009b      	lsls	r3, r3, #2
 800c472:	441a      	add	r2, r3
 800c474:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800c478:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c47c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c480:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c484:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c488:	b29b      	uxth	r3, r3
 800c48a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c48c:	2300      	movs	r3, #0
}
 800c48e:	4618      	mov	r0, r3
 800c490:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800c494:	46bd      	mov	sp, r7
 800c496:	bd80      	pop	{r7, pc}

0800c498 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c498:	b480      	push	{r7}
 800c49a:	b085      	sub	sp, #20
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]
 800c4a0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800c4a2:	683b      	ldr	r3, [r7, #0]
 800c4a4:	785b      	ldrb	r3, [r3, #1]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d020      	beq.n	800c4ec <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800c4aa:	687a      	ldr	r2, [r7, #4]
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	781b      	ldrb	r3, [r3, #0]
 800c4b0:	009b      	lsls	r3, r3, #2
 800c4b2:	4413      	add	r3, r2
 800c4b4:	881b      	ldrh	r3, [r3, #0]
 800c4b6:	b29b      	uxth	r3, r3
 800c4b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c4bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c4c0:	81bb      	strh	r3, [r7, #12]
 800c4c2:	89bb      	ldrh	r3, [r7, #12]
 800c4c4:	f083 0310 	eor.w	r3, r3, #16
 800c4c8:	81bb      	strh	r3, [r7, #12]
 800c4ca:	687a      	ldr	r2, [r7, #4]
 800c4cc:	683b      	ldr	r3, [r7, #0]
 800c4ce:	781b      	ldrb	r3, [r3, #0]
 800c4d0:	009b      	lsls	r3, r3, #2
 800c4d2:	441a      	add	r2, r3
 800c4d4:	89bb      	ldrh	r3, [r7, #12]
 800c4d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c4da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c4de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c4e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c4e6:	b29b      	uxth	r3, r3
 800c4e8:	8013      	strh	r3, [r2, #0]
 800c4ea:	e01f      	b.n	800c52c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800c4ec:	687a      	ldr	r2, [r7, #4]
 800c4ee:	683b      	ldr	r3, [r7, #0]
 800c4f0:	781b      	ldrb	r3, [r3, #0]
 800c4f2:	009b      	lsls	r3, r3, #2
 800c4f4:	4413      	add	r3, r2
 800c4f6:	881b      	ldrh	r3, [r3, #0]
 800c4f8:	b29b      	uxth	r3, r3
 800c4fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c4fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c502:	81fb      	strh	r3, [r7, #14]
 800c504:	89fb      	ldrh	r3, [r7, #14]
 800c506:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c50a:	81fb      	strh	r3, [r7, #14]
 800c50c:	687a      	ldr	r2, [r7, #4]
 800c50e:	683b      	ldr	r3, [r7, #0]
 800c510:	781b      	ldrb	r3, [r3, #0]
 800c512:	009b      	lsls	r3, r3, #2
 800c514:	441a      	add	r2, r3
 800c516:	89fb      	ldrh	r3, [r7, #14]
 800c518:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c51c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c520:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c524:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c528:	b29b      	uxth	r3, r3
 800c52a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c52c:	2300      	movs	r3, #0
}
 800c52e:	4618      	mov	r0, r3
 800c530:	3714      	adds	r7, #20
 800c532:	46bd      	mov	sp, r7
 800c534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c538:	4770      	bx	lr

0800c53a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c53a:	b480      	push	{r7}
 800c53c:	b087      	sub	sp, #28
 800c53e:	af00      	add	r7, sp, #0
 800c540:	6078      	str	r0, [r7, #4]
 800c542:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c544:	683b      	ldr	r3, [r7, #0]
 800c546:	7b1b      	ldrb	r3, [r3, #12]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	f040 809d 	bne.w	800c688 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800c54e:	683b      	ldr	r3, [r7, #0]
 800c550:	785b      	ldrb	r3, [r3, #1]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d04c      	beq.n	800c5f0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c556:	687a      	ldr	r2, [r7, #4]
 800c558:	683b      	ldr	r3, [r7, #0]
 800c55a:	781b      	ldrb	r3, [r3, #0]
 800c55c:	009b      	lsls	r3, r3, #2
 800c55e:	4413      	add	r3, r2
 800c560:	881b      	ldrh	r3, [r3, #0]
 800c562:	823b      	strh	r3, [r7, #16]
 800c564:	8a3b      	ldrh	r3, [r7, #16]
 800c566:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d01b      	beq.n	800c5a6 <USB_EPClearStall+0x6c>
 800c56e:	687a      	ldr	r2, [r7, #4]
 800c570:	683b      	ldr	r3, [r7, #0]
 800c572:	781b      	ldrb	r3, [r3, #0]
 800c574:	009b      	lsls	r3, r3, #2
 800c576:	4413      	add	r3, r2
 800c578:	881b      	ldrh	r3, [r3, #0]
 800c57a:	b29b      	uxth	r3, r3
 800c57c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c580:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c584:	81fb      	strh	r3, [r7, #14]
 800c586:	687a      	ldr	r2, [r7, #4]
 800c588:	683b      	ldr	r3, [r7, #0]
 800c58a:	781b      	ldrb	r3, [r3, #0]
 800c58c:	009b      	lsls	r3, r3, #2
 800c58e:	441a      	add	r2, r3
 800c590:	89fb      	ldrh	r3, [r7, #14]
 800c592:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c596:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c59a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c59e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c5a2:	b29b      	uxth	r3, r3
 800c5a4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c5a6:	683b      	ldr	r3, [r7, #0]
 800c5a8:	78db      	ldrb	r3, [r3, #3]
 800c5aa:	2b01      	cmp	r3, #1
 800c5ac:	d06c      	beq.n	800c688 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c5ae:	687a      	ldr	r2, [r7, #4]
 800c5b0:	683b      	ldr	r3, [r7, #0]
 800c5b2:	781b      	ldrb	r3, [r3, #0]
 800c5b4:	009b      	lsls	r3, r3, #2
 800c5b6:	4413      	add	r3, r2
 800c5b8:	881b      	ldrh	r3, [r3, #0]
 800c5ba:	b29b      	uxth	r3, r3
 800c5bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c5c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c5c4:	81bb      	strh	r3, [r7, #12]
 800c5c6:	89bb      	ldrh	r3, [r7, #12]
 800c5c8:	f083 0320 	eor.w	r3, r3, #32
 800c5cc:	81bb      	strh	r3, [r7, #12]
 800c5ce:	687a      	ldr	r2, [r7, #4]
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	781b      	ldrb	r3, [r3, #0]
 800c5d4:	009b      	lsls	r3, r3, #2
 800c5d6:	441a      	add	r2, r3
 800c5d8:	89bb      	ldrh	r3, [r7, #12]
 800c5da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c5de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c5e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c5e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c5ea:	b29b      	uxth	r3, r3
 800c5ec:	8013      	strh	r3, [r2, #0]
 800c5ee:	e04b      	b.n	800c688 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c5f0:	687a      	ldr	r2, [r7, #4]
 800c5f2:	683b      	ldr	r3, [r7, #0]
 800c5f4:	781b      	ldrb	r3, [r3, #0]
 800c5f6:	009b      	lsls	r3, r3, #2
 800c5f8:	4413      	add	r3, r2
 800c5fa:	881b      	ldrh	r3, [r3, #0]
 800c5fc:	82fb      	strh	r3, [r7, #22]
 800c5fe:	8afb      	ldrh	r3, [r7, #22]
 800c600:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c604:	2b00      	cmp	r3, #0
 800c606:	d01b      	beq.n	800c640 <USB_EPClearStall+0x106>
 800c608:	687a      	ldr	r2, [r7, #4]
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	781b      	ldrb	r3, [r3, #0]
 800c60e:	009b      	lsls	r3, r3, #2
 800c610:	4413      	add	r3, r2
 800c612:	881b      	ldrh	r3, [r3, #0]
 800c614:	b29b      	uxth	r3, r3
 800c616:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c61a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c61e:	82bb      	strh	r3, [r7, #20]
 800c620:	687a      	ldr	r2, [r7, #4]
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	781b      	ldrb	r3, [r3, #0]
 800c626:	009b      	lsls	r3, r3, #2
 800c628:	441a      	add	r2, r3
 800c62a:	8abb      	ldrh	r3, [r7, #20]
 800c62c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c630:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c634:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c638:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c63c:	b29b      	uxth	r3, r3
 800c63e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c640:	687a      	ldr	r2, [r7, #4]
 800c642:	683b      	ldr	r3, [r7, #0]
 800c644:	781b      	ldrb	r3, [r3, #0]
 800c646:	009b      	lsls	r3, r3, #2
 800c648:	4413      	add	r3, r2
 800c64a:	881b      	ldrh	r3, [r3, #0]
 800c64c:	b29b      	uxth	r3, r3
 800c64e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c652:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c656:	827b      	strh	r3, [r7, #18]
 800c658:	8a7b      	ldrh	r3, [r7, #18]
 800c65a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c65e:	827b      	strh	r3, [r7, #18]
 800c660:	8a7b      	ldrh	r3, [r7, #18]
 800c662:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c666:	827b      	strh	r3, [r7, #18]
 800c668:	687a      	ldr	r2, [r7, #4]
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	781b      	ldrb	r3, [r3, #0]
 800c66e:	009b      	lsls	r3, r3, #2
 800c670:	441a      	add	r2, r3
 800c672:	8a7b      	ldrh	r3, [r7, #18]
 800c674:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c678:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c67c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c680:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c684:	b29b      	uxth	r3, r3
 800c686:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800c688:	2300      	movs	r3, #0
}
 800c68a:	4618      	mov	r0, r3
 800c68c:	371c      	adds	r7, #28
 800c68e:	46bd      	mov	sp, r7
 800c690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c694:	4770      	bx	lr

0800c696 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800c696:	b480      	push	{r7}
 800c698:	b083      	sub	sp, #12
 800c69a:	af00      	add	r7, sp, #0
 800c69c:	6078      	str	r0, [r7, #4]
 800c69e:	460b      	mov	r3, r1
 800c6a0:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800c6a2:	78fb      	ldrb	r3, [r7, #3]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d103      	bne.n	800c6b0 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2280      	movs	r2, #128	@ 0x80
 800c6ac:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800c6b0:	2300      	movs	r3, #0
}
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	370c      	adds	r7, #12
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6bc:	4770      	bx	lr

0800c6be <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800c6be:	b480      	push	{r7}
 800c6c0:	b083      	sub	sp, #12
 800c6c2:	af00      	add	r7, sp, #0
 800c6c4:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800c6cc:	b29b      	uxth	r3, r3
 800c6ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c6d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c6d6:	b29a      	uxth	r2, r3
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800c6de:	2300      	movs	r3, #0
}
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	370c      	adds	r7, #12
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ea:	4770      	bx	lr

0800c6ec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800c6ec:	b480      	push	{r7}
 800c6ee:	b085      	sub	sp, #20
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800c6fa:	b29b      	uxth	r3, r3
 800c6fc:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800c6fe:	68fb      	ldr	r3, [r7, #12]
}
 800c700:	4618      	mov	r0, r3
 800c702:	3714      	adds	r7, #20
 800c704:	46bd      	mov	sp, r7
 800c706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70a:	4770      	bx	lr

0800c70c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c70c:	b480      	push	{r7}
 800c70e:	b08b      	sub	sp, #44	@ 0x2c
 800c710:	af00      	add	r7, sp, #0
 800c712:	60f8      	str	r0, [r7, #12]
 800c714:	60b9      	str	r1, [r7, #8]
 800c716:	4611      	mov	r1, r2
 800c718:	461a      	mov	r2, r3
 800c71a:	460b      	mov	r3, r1
 800c71c:	80fb      	strh	r3, [r7, #6]
 800c71e:	4613      	mov	r3, r2
 800c720:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c722:	88bb      	ldrh	r3, [r7, #4]
 800c724:	3301      	adds	r3, #1
 800c726:	085b      	lsrs	r3, r3, #1
 800c728:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c72e:	68bb      	ldr	r3, [r7, #8]
 800c730:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c732:	88fa      	ldrh	r2, [r7, #6]
 800c734:	697b      	ldr	r3, [r7, #20]
 800c736:	4413      	add	r3, r2
 800c738:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c73c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800c73e:	69bb      	ldr	r3, [r7, #24]
 800c740:	627b      	str	r3, [r7, #36]	@ 0x24
 800c742:	e01b      	b.n	800c77c <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800c744:	69fb      	ldr	r3, [r7, #28]
 800c746:	781b      	ldrb	r3, [r3, #0]
 800c748:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800c74a:	69fb      	ldr	r3, [r7, #28]
 800c74c:	3301      	adds	r3, #1
 800c74e:	781b      	ldrb	r3, [r3, #0]
 800c750:	021b      	lsls	r3, r3, #8
 800c752:	b21a      	sxth	r2, r3
 800c754:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c758:	4313      	orrs	r3, r2
 800c75a:	b21b      	sxth	r3, r3
 800c75c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800c75e:	6a3b      	ldr	r3, [r7, #32]
 800c760:	8a7a      	ldrh	r2, [r7, #18]
 800c762:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800c764:	6a3b      	ldr	r3, [r7, #32]
 800c766:	3302      	adds	r3, #2
 800c768:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800c76a:	69fb      	ldr	r3, [r7, #28]
 800c76c:	3301      	adds	r3, #1
 800c76e:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800c770:	69fb      	ldr	r3, [r7, #28]
 800c772:	3301      	adds	r3, #1
 800c774:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800c776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c778:	3b01      	subs	r3, #1
 800c77a:	627b      	str	r3, [r7, #36]	@ 0x24
 800c77c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d1e0      	bne.n	800c744 <USB_WritePMA+0x38>
  }
}
 800c782:	bf00      	nop
 800c784:	bf00      	nop
 800c786:	372c      	adds	r7, #44	@ 0x2c
 800c788:	46bd      	mov	sp, r7
 800c78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78e:	4770      	bx	lr

0800c790 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c790:	b480      	push	{r7}
 800c792:	b08b      	sub	sp, #44	@ 0x2c
 800c794:	af00      	add	r7, sp, #0
 800c796:	60f8      	str	r0, [r7, #12]
 800c798:	60b9      	str	r1, [r7, #8]
 800c79a:	4611      	mov	r1, r2
 800c79c:	461a      	mov	r2, r3
 800c79e:	460b      	mov	r3, r1
 800c7a0:	80fb      	strh	r3, [r7, #6]
 800c7a2:	4613      	mov	r3, r2
 800c7a4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800c7a6:	88bb      	ldrh	r3, [r7, #4]
 800c7a8:	085b      	lsrs	r3, r3, #1
 800c7aa:	b29b      	uxth	r3, r3
 800c7ac:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c7b2:	68bb      	ldr	r3, [r7, #8]
 800c7b4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c7b6:	88fa      	ldrh	r2, [r7, #6]
 800c7b8:	697b      	ldr	r3, [r7, #20]
 800c7ba:	4413      	add	r3, r2
 800c7bc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c7c0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800c7c2:	69bb      	ldr	r3, [r7, #24]
 800c7c4:	627b      	str	r3, [r7, #36]	@ 0x24
 800c7c6:	e018      	b.n	800c7fa <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800c7c8:	6a3b      	ldr	r3, [r7, #32]
 800c7ca:	881b      	ldrh	r3, [r3, #0]
 800c7cc:	b29b      	uxth	r3, r3
 800c7ce:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800c7d0:	6a3b      	ldr	r3, [r7, #32]
 800c7d2:	3302      	adds	r3, #2
 800c7d4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800c7d6:	693b      	ldr	r3, [r7, #16]
 800c7d8:	b2da      	uxtb	r2, r3
 800c7da:	69fb      	ldr	r3, [r7, #28]
 800c7dc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c7de:	69fb      	ldr	r3, [r7, #28]
 800c7e0:	3301      	adds	r3, #1
 800c7e2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800c7e4:	693b      	ldr	r3, [r7, #16]
 800c7e6:	0a1b      	lsrs	r3, r3, #8
 800c7e8:	b2da      	uxtb	r2, r3
 800c7ea:	69fb      	ldr	r3, [r7, #28]
 800c7ec:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c7ee:	69fb      	ldr	r3, [r7, #28]
 800c7f0:	3301      	adds	r3, #1
 800c7f2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800c7f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7f6:	3b01      	subs	r3, #1
 800c7f8:	627b      	str	r3, [r7, #36]	@ 0x24
 800c7fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d1e3      	bne.n	800c7c8 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800c800:	88bb      	ldrh	r3, [r7, #4]
 800c802:	f003 0301 	and.w	r3, r3, #1
 800c806:	b29b      	uxth	r3, r3
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d007      	beq.n	800c81c <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800c80c:	6a3b      	ldr	r3, [r7, #32]
 800c80e:	881b      	ldrh	r3, [r3, #0]
 800c810:	b29b      	uxth	r3, r3
 800c812:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800c814:	693b      	ldr	r3, [r7, #16]
 800c816:	b2da      	uxtb	r2, r3
 800c818:	69fb      	ldr	r3, [r7, #28]
 800c81a:	701a      	strb	r2, [r3, #0]
  }
}
 800c81c:	bf00      	nop
 800c81e:	372c      	adds	r7, #44	@ 0x2c
 800c820:	46bd      	mov	sp, r7
 800c822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c826:	4770      	bx	lr

0800c828 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b084      	sub	sp, #16
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
 800c830:	460b      	mov	r3, r1
 800c832:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c834:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800c838:	f002 f8fa 	bl	800ea30 <USBD_static_malloc>
 800c83c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d105      	bne.n	800c850 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	2200      	movs	r2, #0
 800c848:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800c84c:	2302      	movs	r3, #2
 800c84e:	e066      	b.n	800c91e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	68fa      	ldr	r2, [r7, #12]
 800c854:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	7c1b      	ldrb	r3, [r3, #16]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d119      	bne.n	800c894 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c860:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c864:	2202      	movs	r2, #2
 800c866:	2181      	movs	r1, #129	@ 0x81
 800c868:	6878      	ldr	r0, [r7, #4]
 800c86a:	f001 ff88 	bl	800e77e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	2201      	movs	r2, #1
 800c872:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c874:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c878:	2202      	movs	r2, #2
 800c87a:	2101      	movs	r1, #1
 800c87c:	6878      	ldr	r0, [r7, #4]
 800c87e:	f001 ff7e 	bl	800e77e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	2201      	movs	r2, #1
 800c886:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2210      	movs	r2, #16
 800c88e:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800c892:	e016      	b.n	800c8c2 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c894:	2340      	movs	r3, #64	@ 0x40
 800c896:	2202      	movs	r2, #2
 800c898:	2181      	movs	r1, #129	@ 0x81
 800c89a:	6878      	ldr	r0, [r7, #4]
 800c89c:	f001 ff6f 	bl	800e77e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	2201      	movs	r2, #1
 800c8a4:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c8a6:	2340      	movs	r3, #64	@ 0x40
 800c8a8:	2202      	movs	r2, #2
 800c8aa:	2101      	movs	r1, #1
 800c8ac:	6878      	ldr	r0, [r7, #4]
 800c8ae:	f001 ff66 	bl	800e77e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	2201      	movs	r2, #1
 800c8b6:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	2210      	movs	r2, #16
 800c8be:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c8c2:	2308      	movs	r3, #8
 800c8c4:	2203      	movs	r2, #3
 800c8c6:	2182      	movs	r1, #130	@ 0x82
 800c8c8:	6878      	ldr	r0, [r7, #4]
 800c8ca:	f001 ff58 	bl	800e77e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	2201      	movs	r2, #1
 800c8d2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	7c1b      	ldrb	r3, [r3, #16]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d109      	bne.n	800c90c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c8fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c902:	2101      	movs	r1, #1
 800c904:	6878      	ldr	r0, [r7, #4]
 800c906:	f002 f829 	bl	800e95c <USBD_LL_PrepareReceive>
 800c90a:	e007      	b.n	800c91c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c912:	2340      	movs	r3, #64	@ 0x40
 800c914:	2101      	movs	r1, #1
 800c916:	6878      	ldr	r0, [r7, #4]
 800c918:	f002 f820 	bl	800e95c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c91c:	2300      	movs	r3, #0
}
 800c91e:	4618      	mov	r0, r3
 800c920:	3710      	adds	r7, #16
 800c922:	46bd      	mov	sp, r7
 800c924:	bd80      	pop	{r7, pc}

0800c926 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c926:	b580      	push	{r7, lr}
 800c928:	b082      	sub	sp, #8
 800c92a:	af00      	add	r7, sp, #0
 800c92c:	6078      	str	r0, [r7, #4]
 800c92e:	460b      	mov	r3, r1
 800c930:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800c932:	2181      	movs	r1, #129	@ 0x81
 800c934:	6878      	ldr	r0, [r7, #4]
 800c936:	f001 ff48 	bl	800e7ca <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	2200      	movs	r2, #0
 800c93e:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800c940:	2101      	movs	r1, #1
 800c942:	6878      	ldr	r0, [r7, #4]
 800c944:	f001 ff41 	bl	800e7ca <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	2200      	movs	r2, #0
 800c94c:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800c950:	2182      	movs	r1, #130	@ 0x82
 800c952:	6878      	ldr	r0, [r7, #4]
 800c954:	f001 ff39 	bl	800e7ca <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2200      	movs	r2, #0
 800c95c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	2200      	movs	r2, #0
 800c964:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d00e      	beq.n	800c990 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c978:	685b      	ldr	r3, [r3, #4]
 800c97a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c982:	4618      	mov	r0, r3
 800c984:	f002 f862 	bl	800ea4c <USBD_static_free>
    pdev->pClassData = NULL;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2200      	movs	r2, #0
 800c98c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c990:	2300      	movs	r3, #0
}
 800c992:	4618      	mov	r0, r3
 800c994:	3708      	adds	r7, #8
 800c996:	46bd      	mov	sp, r7
 800c998:	bd80      	pop	{r7, pc}
	...

0800c99c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c99c:	b580      	push	{r7, lr}
 800c99e:	b086      	sub	sp, #24
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	6078      	str	r0, [r7, #4]
 800c9a4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c9ac:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c9ba:	693b      	ldr	r3, [r7, #16]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d101      	bne.n	800c9c4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800c9c0:	2303      	movs	r3, #3
 800c9c2:	e0af      	b.n	800cb24 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c9c4:	683b      	ldr	r3, [r7, #0]
 800c9c6:	781b      	ldrb	r3, [r3, #0]
 800c9c8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d03f      	beq.n	800ca50 <USBD_CDC_Setup+0xb4>
 800c9d0:	2b20      	cmp	r3, #32
 800c9d2:	f040 809f 	bne.w	800cb14 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c9d6:	683b      	ldr	r3, [r7, #0]
 800c9d8:	88db      	ldrh	r3, [r3, #6]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d02e      	beq.n	800ca3c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c9de:	683b      	ldr	r3, [r7, #0]
 800c9e0:	781b      	ldrb	r3, [r3, #0]
 800c9e2:	b25b      	sxtb	r3, r3
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	da16      	bge.n	800ca16 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c9ee:	689b      	ldr	r3, [r3, #8]
 800c9f0:	683a      	ldr	r2, [r7, #0]
 800c9f2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800c9f4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c9f6:	683a      	ldr	r2, [r7, #0]
 800c9f8:	88d2      	ldrh	r2, [r2, #6]
 800c9fa:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c9fc:	683b      	ldr	r3, [r7, #0]
 800c9fe:	88db      	ldrh	r3, [r3, #6]
 800ca00:	2b07      	cmp	r3, #7
 800ca02:	bf28      	it	cs
 800ca04:	2307      	movcs	r3, #7
 800ca06:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ca08:	693b      	ldr	r3, [r7, #16]
 800ca0a:	89fa      	ldrh	r2, [r7, #14]
 800ca0c:	4619      	mov	r1, r3
 800ca0e:	6878      	ldr	r0, [r7, #4]
 800ca10:	f001 facd 	bl	800dfae <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800ca14:	e085      	b.n	800cb22 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800ca16:	683b      	ldr	r3, [r7, #0]
 800ca18:	785a      	ldrb	r2, [r3, #1]
 800ca1a:	693b      	ldr	r3, [r7, #16]
 800ca1c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800ca20:	683b      	ldr	r3, [r7, #0]
 800ca22:	88db      	ldrh	r3, [r3, #6]
 800ca24:	b2da      	uxtb	r2, r3
 800ca26:	693b      	ldr	r3, [r7, #16]
 800ca28:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800ca2c:	6939      	ldr	r1, [r7, #16]
 800ca2e:	683b      	ldr	r3, [r7, #0]
 800ca30:	88db      	ldrh	r3, [r3, #6]
 800ca32:	461a      	mov	r2, r3
 800ca34:	6878      	ldr	r0, [r7, #4]
 800ca36:	f001 fae6 	bl	800e006 <USBD_CtlPrepareRx>
      break;
 800ca3a:	e072      	b.n	800cb22 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ca42:	689b      	ldr	r3, [r3, #8]
 800ca44:	683a      	ldr	r2, [r7, #0]
 800ca46:	7850      	ldrb	r0, [r2, #1]
 800ca48:	2200      	movs	r2, #0
 800ca4a:	6839      	ldr	r1, [r7, #0]
 800ca4c:	4798      	blx	r3
      break;
 800ca4e:	e068      	b.n	800cb22 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ca50:	683b      	ldr	r3, [r7, #0]
 800ca52:	785b      	ldrb	r3, [r3, #1]
 800ca54:	2b0b      	cmp	r3, #11
 800ca56:	d852      	bhi.n	800cafe <USBD_CDC_Setup+0x162>
 800ca58:	a201      	add	r2, pc, #4	@ (adr r2, 800ca60 <USBD_CDC_Setup+0xc4>)
 800ca5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca5e:	bf00      	nop
 800ca60:	0800ca91 	.word	0x0800ca91
 800ca64:	0800cb0d 	.word	0x0800cb0d
 800ca68:	0800caff 	.word	0x0800caff
 800ca6c:	0800caff 	.word	0x0800caff
 800ca70:	0800caff 	.word	0x0800caff
 800ca74:	0800caff 	.word	0x0800caff
 800ca78:	0800caff 	.word	0x0800caff
 800ca7c:	0800caff 	.word	0x0800caff
 800ca80:	0800caff 	.word	0x0800caff
 800ca84:	0800caff 	.word	0x0800caff
 800ca88:	0800cabb 	.word	0x0800cabb
 800ca8c:	0800cae5 	.word	0x0800cae5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca96:	b2db      	uxtb	r3, r3
 800ca98:	2b03      	cmp	r3, #3
 800ca9a:	d107      	bne.n	800caac <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ca9c:	f107 030a 	add.w	r3, r7, #10
 800caa0:	2202      	movs	r2, #2
 800caa2:	4619      	mov	r1, r3
 800caa4:	6878      	ldr	r0, [r7, #4]
 800caa6:	f001 fa82 	bl	800dfae <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800caaa:	e032      	b.n	800cb12 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800caac:	6839      	ldr	r1, [r7, #0]
 800caae:	6878      	ldr	r0, [r7, #4]
 800cab0:	f001 fa0c 	bl	800decc <USBD_CtlError>
            ret = USBD_FAIL;
 800cab4:	2303      	movs	r3, #3
 800cab6:	75fb      	strb	r3, [r7, #23]
          break;
 800cab8:	e02b      	b.n	800cb12 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cac0:	b2db      	uxtb	r3, r3
 800cac2:	2b03      	cmp	r3, #3
 800cac4:	d107      	bne.n	800cad6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800cac6:	f107 030d 	add.w	r3, r7, #13
 800caca:	2201      	movs	r2, #1
 800cacc:	4619      	mov	r1, r3
 800cace:	6878      	ldr	r0, [r7, #4]
 800cad0:	f001 fa6d 	bl	800dfae <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cad4:	e01d      	b.n	800cb12 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800cad6:	6839      	ldr	r1, [r7, #0]
 800cad8:	6878      	ldr	r0, [r7, #4]
 800cada:	f001 f9f7 	bl	800decc <USBD_CtlError>
            ret = USBD_FAIL;
 800cade:	2303      	movs	r3, #3
 800cae0:	75fb      	strb	r3, [r7, #23]
          break;
 800cae2:	e016      	b.n	800cb12 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800caea:	b2db      	uxtb	r3, r3
 800caec:	2b03      	cmp	r3, #3
 800caee:	d00f      	beq.n	800cb10 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800caf0:	6839      	ldr	r1, [r7, #0]
 800caf2:	6878      	ldr	r0, [r7, #4]
 800caf4:	f001 f9ea 	bl	800decc <USBD_CtlError>
            ret = USBD_FAIL;
 800caf8:	2303      	movs	r3, #3
 800cafa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800cafc:	e008      	b.n	800cb10 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800cafe:	6839      	ldr	r1, [r7, #0]
 800cb00:	6878      	ldr	r0, [r7, #4]
 800cb02:	f001 f9e3 	bl	800decc <USBD_CtlError>
          ret = USBD_FAIL;
 800cb06:	2303      	movs	r3, #3
 800cb08:	75fb      	strb	r3, [r7, #23]
          break;
 800cb0a:	e002      	b.n	800cb12 <USBD_CDC_Setup+0x176>
          break;
 800cb0c:	bf00      	nop
 800cb0e:	e008      	b.n	800cb22 <USBD_CDC_Setup+0x186>
          break;
 800cb10:	bf00      	nop
      }
      break;
 800cb12:	e006      	b.n	800cb22 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800cb14:	6839      	ldr	r1, [r7, #0]
 800cb16:	6878      	ldr	r0, [r7, #4]
 800cb18:	f001 f9d8 	bl	800decc <USBD_CtlError>
      ret = USBD_FAIL;
 800cb1c:	2303      	movs	r3, #3
 800cb1e:	75fb      	strb	r3, [r7, #23]
      break;
 800cb20:	bf00      	nop
  }

  return (uint8_t)ret;
 800cb22:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb24:	4618      	mov	r0, r3
 800cb26:	3718      	adds	r7, #24
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	bd80      	pop	{r7, pc}

0800cb2c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b084      	sub	sp, #16
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]
 800cb34:	460b      	mov	r3, r1
 800cb36:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800cb3e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d101      	bne.n	800cb4e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800cb4a:	2303      	movs	r3, #3
 800cb4c:	e04f      	b.n	800cbee <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800cb54:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800cb56:	78fa      	ldrb	r2, [r7, #3]
 800cb58:	6879      	ldr	r1, [r7, #4]
 800cb5a:	4613      	mov	r3, r2
 800cb5c:	009b      	lsls	r3, r3, #2
 800cb5e:	4413      	add	r3, r2
 800cb60:	009b      	lsls	r3, r3, #2
 800cb62:	440b      	add	r3, r1
 800cb64:	3318      	adds	r3, #24
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d029      	beq.n	800cbc0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800cb6c:	78fa      	ldrb	r2, [r7, #3]
 800cb6e:	6879      	ldr	r1, [r7, #4]
 800cb70:	4613      	mov	r3, r2
 800cb72:	009b      	lsls	r3, r3, #2
 800cb74:	4413      	add	r3, r2
 800cb76:	009b      	lsls	r3, r3, #2
 800cb78:	440b      	add	r3, r1
 800cb7a:	3318      	adds	r3, #24
 800cb7c:	681a      	ldr	r2, [r3, #0]
 800cb7e:	78f9      	ldrb	r1, [r7, #3]
 800cb80:	68f8      	ldr	r0, [r7, #12]
 800cb82:	460b      	mov	r3, r1
 800cb84:	009b      	lsls	r3, r3, #2
 800cb86:	440b      	add	r3, r1
 800cb88:	00db      	lsls	r3, r3, #3
 800cb8a:	4403      	add	r3, r0
 800cb8c:	3320      	adds	r3, #32
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	fbb2 f1f3 	udiv	r1, r2, r3
 800cb94:	fb01 f303 	mul.w	r3, r1, r3
 800cb98:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d110      	bne.n	800cbc0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800cb9e:	78fa      	ldrb	r2, [r7, #3]
 800cba0:	6879      	ldr	r1, [r7, #4]
 800cba2:	4613      	mov	r3, r2
 800cba4:	009b      	lsls	r3, r3, #2
 800cba6:	4413      	add	r3, r2
 800cba8:	009b      	lsls	r3, r3, #2
 800cbaa:	440b      	add	r3, r1
 800cbac:	3318      	adds	r3, #24
 800cbae:	2200      	movs	r2, #0
 800cbb0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800cbb2:	78f9      	ldrb	r1, [r7, #3]
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	6878      	ldr	r0, [r7, #4]
 800cbba:	f001 feae 	bl	800e91a <USBD_LL_Transmit>
 800cbbe:	e015      	b.n	800cbec <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800cbc0:	68bb      	ldr	r3, [r7, #8]
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cbce:	691b      	ldr	r3, [r3, #16]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d00b      	beq.n	800cbec <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cbda:	691b      	ldr	r3, [r3, #16]
 800cbdc:	68ba      	ldr	r2, [r7, #8]
 800cbde:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800cbe2:	68ba      	ldr	r2, [r7, #8]
 800cbe4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800cbe8:	78fa      	ldrb	r2, [r7, #3]
 800cbea:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800cbec:	2300      	movs	r3, #0
}
 800cbee:	4618      	mov	r0, r3
 800cbf0:	3710      	adds	r7, #16
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	bd80      	pop	{r7, pc}

0800cbf6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cbf6:	b580      	push	{r7, lr}
 800cbf8:	b084      	sub	sp, #16
 800cbfa:	af00      	add	r7, sp, #0
 800cbfc:	6078      	str	r0, [r7, #4]
 800cbfe:	460b      	mov	r3, r1
 800cc00:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800cc08:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d101      	bne.n	800cc18 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800cc14:	2303      	movs	r3, #3
 800cc16:	e015      	b.n	800cc44 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800cc18:	78fb      	ldrb	r3, [r7, #3]
 800cc1a:	4619      	mov	r1, r3
 800cc1c:	6878      	ldr	r0, [r7, #4]
 800cc1e:	f001 febe 	bl	800e99e <USBD_LL_GetRxDataSize>
 800cc22:	4602      	mov	r2, r0
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cc30:	68db      	ldr	r3, [r3, #12]
 800cc32:	68fa      	ldr	r2, [r7, #12]
 800cc34:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800cc38:	68fa      	ldr	r2, [r7, #12]
 800cc3a:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800cc3e:	4611      	mov	r1, r2
 800cc40:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800cc42:	2300      	movs	r3, #0
}
 800cc44:	4618      	mov	r0, r3
 800cc46:	3710      	adds	r7, #16
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	bd80      	pop	{r7, pc}

0800cc4c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b084      	sub	sp, #16
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800cc5a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d101      	bne.n	800cc66 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800cc62:	2303      	movs	r3, #3
 800cc64:	e01a      	b.n	800cc9c <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d014      	beq.n	800cc9a <USBD_CDC_EP0_RxReady+0x4e>
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800cc76:	2bff      	cmp	r3, #255	@ 0xff
 800cc78:	d00f      	beq.n	800cc9a <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cc80:	689b      	ldr	r3, [r3, #8]
 800cc82:	68fa      	ldr	r2, [r7, #12]
 800cc84:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800cc88:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800cc8a:	68fa      	ldr	r2, [r7, #12]
 800cc8c:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800cc90:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	22ff      	movs	r2, #255	@ 0xff
 800cc96:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800cc9a:	2300      	movs	r3, #0
}
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	3710      	adds	r7, #16
 800cca0:	46bd      	mov	sp, r7
 800cca2:	bd80      	pop	{r7, pc}

0800cca4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800cca4:	b480      	push	{r7}
 800cca6:	b083      	sub	sp, #12
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2243      	movs	r2, #67	@ 0x43
 800ccb0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800ccb2:	4b03      	ldr	r3, [pc, #12]	@ (800ccc0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	370c      	adds	r7, #12
 800ccb8:	46bd      	mov	sp, r7
 800ccba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccbe:	4770      	bx	lr
 800ccc0:	20000094 	.word	0x20000094

0800ccc4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ccc4:	b480      	push	{r7}
 800ccc6:	b083      	sub	sp, #12
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	2243      	movs	r2, #67	@ 0x43
 800ccd0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800ccd2:	4b03      	ldr	r3, [pc, #12]	@ (800cce0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	370c      	adds	r7, #12
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccde:	4770      	bx	lr
 800cce0:	20000050 	.word	0x20000050

0800cce4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800cce4:	b480      	push	{r7}
 800cce6:	b083      	sub	sp, #12
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	2243      	movs	r2, #67	@ 0x43
 800ccf0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800ccf2:	4b03      	ldr	r3, [pc, #12]	@ (800cd00 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	370c      	adds	r7, #12
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfe:	4770      	bx	lr
 800cd00:	200000d8 	.word	0x200000d8

0800cd04 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800cd04:	b480      	push	{r7}
 800cd06:	b083      	sub	sp, #12
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	220a      	movs	r2, #10
 800cd10:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800cd12:	4b03      	ldr	r3, [pc, #12]	@ (800cd20 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800cd14:	4618      	mov	r0, r3
 800cd16:	370c      	adds	r7, #12
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1e:	4770      	bx	lr
 800cd20:	2000000c 	.word	0x2000000c

0800cd24 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800cd24:	b480      	push	{r7}
 800cd26:	b083      	sub	sp, #12
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	6078      	str	r0, [r7, #4]
 800cd2c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800cd2e:	683b      	ldr	r3, [r7, #0]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d101      	bne.n	800cd38 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800cd34:	2303      	movs	r3, #3
 800cd36:	e004      	b.n	800cd42 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	683a      	ldr	r2, [r7, #0]
 800cd3c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800cd40:	2300      	movs	r3, #0
}
 800cd42:	4618      	mov	r0, r3
 800cd44:	370c      	adds	r7, #12
 800cd46:	46bd      	mov	sp, r7
 800cd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4c:	4770      	bx	lr

0800cd4e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800cd4e:	b480      	push	{r7}
 800cd50:	b087      	sub	sp, #28
 800cd52:	af00      	add	r7, sp, #0
 800cd54:	60f8      	str	r0, [r7, #12]
 800cd56:	60b9      	str	r1, [r7, #8]
 800cd58:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800cd60:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800cd62:	697b      	ldr	r3, [r7, #20]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d101      	bne.n	800cd6c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800cd68:	2303      	movs	r3, #3
 800cd6a:	e008      	b.n	800cd7e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800cd6c:	697b      	ldr	r3, [r7, #20]
 800cd6e:	68ba      	ldr	r2, [r7, #8]
 800cd70:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800cd74:	697b      	ldr	r3, [r7, #20]
 800cd76:	687a      	ldr	r2, [r7, #4]
 800cd78:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800cd7c:	2300      	movs	r3, #0
}
 800cd7e:	4618      	mov	r0, r3
 800cd80:	371c      	adds	r7, #28
 800cd82:	46bd      	mov	sp, r7
 800cd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd88:	4770      	bx	lr

0800cd8a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800cd8a:	b480      	push	{r7}
 800cd8c:	b085      	sub	sp, #20
 800cd8e:	af00      	add	r7, sp, #0
 800cd90:	6078      	str	r0, [r7, #4]
 800cd92:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800cd9a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d101      	bne.n	800cda6 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800cda2:	2303      	movs	r3, #3
 800cda4:	e004      	b.n	800cdb0 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	683a      	ldr	r2, [r7, #0]
 800cdaa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800cdae:	2300      	movs	r3, #0
}
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	3714      	adds	r7, #20
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdba:	4770      	bx	lr

0800cdbc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b084      	sub	sp, #16
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800cdca:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800cdcc:	2301      	movs	r3, #1
 800cdce:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d101      	bne.n	800cdde <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800cdda:	2303      	movs	r3, #3
 800cddc:	e01a      	b.n	800ce14 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800cdde:	68bb      	ldr	r3, [r7, #8]
 800cde0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d114      	bne.n	800ce12 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800cde8:	68bb      	ldr	r3, [r7, #8]
 800cdea:	2201      	movs	r2, #1
 800cdec:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800cdf0:	68bb      	ldr	r3, [r7, #8]
 800cdf2:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800cdfa:	68bb      	ldr	r3, [r7, #8]
 800cdfc:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800ce00:	68bb      	ldr	r3, [r7, #8]
 800ce02:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800ce06:	2181      	movs	r1, #129	@ 0x81
 800ce08:	6878      	ldr	r0, [r7, #4]
 800ce0a:	f001 fd86 	bl	800e91a <USBD_LL_Transmit>

    ret = USBD_OK;
 800ce0e:	2300      	movs	r3, #0
 800ce10:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800ce12:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce14:	4618      	mov	r0, r3
 800ce16:	3710      	adds	r7, #16
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	bd80      	pop	{r7, pc}

0800ce1c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ce1c:	b580      	push	{r7, lr}
 800ce1e:	b084      	sub	sp, #16
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ce2a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d101      	bne.n	800ce3a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800ce36:	2303      	movs	r3, #3
 800ce38:	e016      	b.n	800ce68 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	7c1b      	ldrb	r3, [r3, #16]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d109      	bne.n	800ce56 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ce48:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ce4c:	2101      	movs	r1, #1
 800ce4e:	6878      	ldr	r0, [r7, #4]
 800ce50:	f001 fd84 	bl	800e95c <USBD_LL_PrepareReceive>
 800ce54:	e007      	b.n	800ce66 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ce5c:	2340      	movs	r3, #64	@ 0x40
 800ce5e:	2101      	movs	r1, #1
 800ce60:	6878      	ldr	r0, [r7, #4]
 800ce62:	f001 fd7b 	bl	800e95c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ce66:	2300      	movs	r3, #0
}
 800ce68:	4618      	mov	r0, r3
 800ce6a:	3710      	adds	r7, #16
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	bd80      	pop	{r7, pc}

0800ce70 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b086      	sub	sp, #24
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	60f8      	str	r0, [r7, #12]
 800ce78:	60b9      	str	r1, [r7, #8]
 800ce7a:	4613      	mov	r3, r2
 800ce7c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d101      	bne.n	800ce88 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ce84:	2303      	movs	r3, #3
 800ce86:	e01f      	b.n	800cec8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	2200      	movs	r2, #0
 800ce8c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	2200      	movs	r2, #0
 800ce94:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800cea0:	68bb      	ldr	r3, [r7, #8]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d003      	beq.n	800ceae <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	68ba      	ldr	r2, [r7, #8]
 800ceaa:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	2201      	movs	r2, #1
 800ceb2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	79fa      	ldrb	r2, [r7, #7]
 800ceba:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800cebc:	68f8      	ldr	r0, [r7, #12]
 800cebe:	f001 fbe3 	bl	800e688 <USBD_LL_Init>
 800cec2:	4603      	mov	r3, r0
 800cec4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800cec6:	7dfb      	ldrb	r3, [r7, #23]
}
 800cec8:	4618      	mov	r0, r3
 800ceca:	3718      	adds	r7, #24
 800cecc:	46bd      	mov	sp, r7
 800cece:	bd80      	pop	{r7, pc}

0800ced0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b084      	sub	sp, #16
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
 800ced8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ceda:	2300      	movs	r3, #0
 800cedc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800cede:	683b      	ldr	r3, [r7, #0]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d101      	bne.n	800cee8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800cee4:	2303      	movs	r3, #3
 800cee6:	e016      	b.n	800cf16 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	683a      	ldr	r2, [r7, #0]
 800ceec:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d00b      	beq.n	800cf14 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cf02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf04:	f107 020e 	add.w	r2, r7, #14
 800cf08:	4610      	mov	r0, r2
 800cf0a:	4798      	blx	r3
 800cf0c:	4602      	mov	r2, r0
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800cf14:	2300      	movs	r3, #0
}
 800cf16:	4618      	mov	r0, r3
 800cf18:	3710      	adds	r7, #16
 800cf1a:	46bd      	mov	sp, r7
 800cf1c:	bd80      	pop	{r7, pc}

0800cf1e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800cf1e:	b580      	push	{r7, lr}
 800cf20:	b082      	sub	sp, #8
 800cf22:	af00      	add	r7, sp, #0
 800cf24:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800cf26:	6878      	ldr	r0, [r7, #4]
 800cf28:	f001 fc0e 	bl	800e748 <USBD_LL_Start>
 800cf2c:	4603      	mov	r3, r0
}
 800cf2e:	4618      	mov	r0, r3
 800cf30:	3708      	adds	r7, #8
 800cf32:	46bd      	mov	sp, r7
 800cf34:	bd80      	pop	{r7, pc}

0800cf36 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800cf36:	b480      	push	{r7}
 800cf38:	b083      	sub	sp, #12
 800cf3a:	af00      	add	r7, sp, #0
 800cf3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cf3e:	2300      	movs	r3, #0
}
 800cf40:	4618      	mov	r0, r3
 800cf42:	370c      	adds	r7, #12
 800cf44:	46bd      	mov	sp, r7
 800cf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4a:	4770      	bx	lr

0800cf4c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	b084      	sub	sp, #16
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	6078      	str	r0, [r7, #4]
 800cf54:	460b      	mov	r3, r1
 800cf56:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800cf58:	2303      	movs	r3, #3
 800cf5a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d009      	beq.n	800cf7a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	78fa      	ldrb	r2, [r7, #3]
 800cf70:	4611      	mov	r1, r2
 800cf72:	6878      	ldr	r0, [r7, #4]
 800cf74:	4798      	blx	r3
 800cf76:	4603      	mov	r3, r0
 800cf78:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800cf7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	3710      	adds	r7, #16
 800cf80:	46bd      	mov	sp, r7
 800cf82:	bd80      	pop	{r7, pc}

0800cf84 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cf84:	b580      	push	{r7, lr}
 800cf86:	b082      	sub	sp, #8
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	6078      	str	r0, [r7, #4]
 800cf8c:	460b      	mov	r3, r1
 800cf8e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d007      	beq.n	800cfaa <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cfa0:	685b      	ldr	r3, [r3, #4]
 800cfa2:	78fa      	ldrb	r2, [r7, #3]
 800cfa4:	4611      	mov	r1, r2
 800cfa6:	6878      	ldr	r0, [r7, #4]
 800cfa8:	4798      	blx	r3
  }

  return USBD_OK;
 800cfaa:	2300      	movs	r3, #0
}
 800cfac:	4618      	mov	r0, r3
 800cfae:	3708      	adds	r7, #8
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	bd80      	pop	{r7, pc}

0800cfb4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b084      	sub	sp, #16
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
 800cfbc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800cfc4:	6839      	ldr	r1, [r7, #0]
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	f000 ff46 	bl	800de58 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	2201      	movs	r2, #1
 800cfd0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800cfda:	461a      	mov	r2, r3
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800cfe8:	f003 031f 	and.w	r3, r3, #31
 800cfec:	2b02      	cmp	r3, #2
 800cfee:	d01a      	beq.n	800d026 <USBD_LL_SetupStage+0x72>
 800cff0:	2b02      	cmp	r3, #2
 800cff2:	d822      	bhi.n	800d03a <USBD_LL_SetupStage+0x86>
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d002      	beq.n	800cffe <USBD_LL_SetupStage+0x4a>
 800cff8:	2b01      	cmp	r3, #1
 800cffa:	d00a      	beq.n	800d012 <USBD_LL_SetupStage+0x5e>
 800cffc:	e01d      	b.n	800d03a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d004:	4619      	mov	r1, r3
 800d006:	6878      	ldr	r0, [r7, #4]
 800d008:	f000 f9ee 	bl	800d3e8 <USBD_StdDevReq>
 800d00c:	4603      	mov	r3, r0
 800d00e:	73fb      	strb	r3, [r7, #15]
      break;
 800d010:	e020      	b.n	800d054 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d018:	4619      	mov	r1, r3
 800d01a:	6878      	ldr	r0, [r7, #4]
 800d01c:	f000 fa52 	bl	800d4c4 <USBD_StdItfReq>
 800d020:	4603      	mov	r3, r0
 800d022:	73fb      	strb	r3, [r7, #15]
      break;
 800d024:	e016      	b.n	800d054 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d02c:	4619      	mov	r1, r3
 800d02e:	6878      	ldr	r0, [r7, #4]
 800d030:	f000 fa91 	bl	800d556 <USBD_StdEPReq>
 800d034:	4603      	mov	r3, r0
 800d036:	73fb      	strb	r3, [r7, #15]
      break;
 800d038:	e00c      	b.n	800d054 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d040:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800d044:	b2db      	uxtb	r3, r3
 800d046:	4619      	mov	r1, r3
 800d048:	6878      	ldr	r0, [r7, #4]
 800d04a:	f001 fbdd 	bl	800e808 <USBD_LL_StallEP>
 800d04e:	4603      	mov	r3, r0
 800d050:	73fb      	strb	r3, [r7, #15]
      break;
 800d052:	bf00      	nop
  }

  return ret;
 800d054:	7bfb      	ldrb	r3, [r7, #15]
}
 800d056:	4618      	mov	r0, r3
 800d058:	3710      	adds	r7, #16
 800d05a:	46bd      	mov	sp, r7
 800d05c:	bd80      	pop	{r7, pc}

0800d05e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d05e:	b580      	push	{r7, lr}
 800d060:	b086      	sub	sp, #24
 800d062:	af00      	add	r7, sp, #0
 800d064:	60f8      	str	r0, [r7, #12]
 800d066:	460b      	mov	r3, r1
 800d068:	607a      	str	r2, [r7, #4]
 800d06a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d06c:	7afb      	ldrb	r3, [r7, #11]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d138      	bne.n	800d0e4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800d078:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d080:	2b03      	cmp	r3, #3
 800d082:	d14a      	bne.n	800d11a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800d084:	693b      	ldr	r3, [r7, #16]
 800d086:	689a      	ldr	r2, [r3, #8]
 800d088:	693b      	ldr	r3, [r7, #16]
 800d08a:	68db      	ldr	r3, [r3, #12]
 800d08c:	429a      	cmp	r2, r3
 800d08e:	d913      	bls.n	800d0b8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d090:	693b      	ldr	r3, [r7, #16]
 800d092:	689a      	ldr	r2, [r3, #8]
 800d094:	693b      	ldr	r3, [r7, #16]
 800d096:	68db      	ldr	r3, [r3, #12]
 800d098:	1ad2      	subs	r2, r2, r3
 800d09a:	693b      	ldr	r3, [r7, #16]
 800d09c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d09e:	693b      	ldr	r3, [r7, #16]
 800d0a0:	68da      	ldr	r2, [r3, #12]
 800d0a2:	693b      	ldr	r3, [r7, #16]
 800d0a4:	689b      	ldr	r3, [r3, #8]
 800d0a6:	4293      	cmp	r3, r2
 800d0a8:	bf28      	it	cs
 800d0aa:	4613      	movcs	r3, r2
 800d0ac:	461a      	mov	r2, r3
 800d0ae:	6879      	ldr	r1, [r7, #4]
 800d0b0:	68f8      	ldr	r0, [r7, #12]
 800d0b2:	f000 ffc5 	bl	800e040 <USBD_CtlContinueRx>
 800d0b6:	e030      	b.n	800d11a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d0be:	b2db      	uxtb	r3, r3
 800d0c0:	2b03      	cmp	r3, #3
 800d0c2:	d10b      	bne.n	800d0dc <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d0ca:	691b      	ldr	r3, [r3, #16]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d005      	beq.n	800d0dc <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d0d6:	691b      	ldr	r3, [r3, #16]
 800d0d8:	68f8      	ldr	r0, [r7, #12]
 800d0da:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d0dc:	68f8      	ldr	r0, [r7, #12]
 800d0de:	f000 ffc0 	bl	800e062 <USBD_CtlSendStatus>
 800d0e2:	e01a      	b.n	800d11a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d0ea:	b2db      	uxtb	r3, r3
 800d0ec:	2b03      	cmp	r3, #3
 800d0ee:	d114      	bne.n	800d11a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d0f6:	699b      	ldr	r3, [r3, #24]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d00e      	beq.n	800d11a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d102:	699b      	ldr	r3, [r3, #24]
 800d104:	7afa      	ldrb	r2, [r7, #11]
 800d106:	4611      	mov	r1, r2
 800d108:	68f8      	ldr	r0, [r7, #12]
 800d10a:	4798      	blx	r3
 800d10c:	4603      	mov	r3, r0
 800d10e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800d110:	7dfb      	ldrb	r3, [r7, #23]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d001      	beq.n	800d11a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800d116:	7dfb      	ldrb	r3, [r7, #23]
 800d118:	e000      	b.n	800d11c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800d11a:	2300      	movs	r3, #0
}
 800d11c:	4618      	mov	r0, r3
 800d11e:	3718      	adds	r7, #24
 800d120:	46bd      	mov	sp, r7
 800d122:	bd80      	pop	{r7, pc}

0800d124 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d124:	b580      	push	{r7, lr}
 800d126:	b086      	sub	sp, #24
 800d128:	af00      	add	r7, sp, #0
 800d12a:	60f8      	str	r0, [r7, #12]
 800d12c:	460b      	mov	r3, r1
 800d12e:	607a      	str	r2, [r7, #4]
 800d130:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d132:	7afb      	ldrb	r3, [r7, #11]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d16b      	bne.n	800d210 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	3314      	adds	r3, #20
 800d13c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d144:	2b02      	cmp	r3, #2
 800d146:	d156      	bne.n	800d1f6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800d148:	693b      	ldr	r3, [r7, #16]
 800d14a:	689a      	ldr	r2, [r3, #8]
 800d14c:	693b      	ldr	r3, [r7, #16]
 800d14e:	68db      	ldr	r3, [r3, #12]
 800d150:	429a      	cmp	r2, r3
 800d152:	d914      	bls.n	800d17e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d154:	693b      	ldr	r3, [r7, #16]
 800d156:	689a      	ldr	r2, [r3, #8]
 800d158:	693b      	ldr	r3, [r7, #16]
 800d15a:	68db      	ldr	r3, [r3, #12]
 800d15c:	1ad2      	subs	r2, r2, r3
 800d15e:	693b      	ldr	r3, [r7, #16]
 800d160:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d162:	693b      	ldr	r3, [r7, #16]
 800d164:	689b      	ldr	r3, [r3, #8]
 800d166:	461a      	mov	r2, r3
 800d168:	6879      	ldr	r1, [r7, #4]
 800d16a:	68f8      	ldr	r0, [r7, #12]
 800d16c:	f000 ff3a 	bl	800dfe4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d170:	2300      	movs	r3, #0
 800d172:	2200      	movs	r2, #0
 800d174:	2100      	movs	r1, #0
 800d176:	68f8      	ldr	r0, [r7, #12]
 800d178:	f001 fbf0 	bl	800e95c <USBD_LL_PrepareReceive>
 800d17c:	e03b      	b.n	800d1f6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d17e:	693b      	ldr	r3, [r7, #16]
 800d180:	68da      	ldr	r2, [r3, #12]
 800d182:	693b      	ldr	r3, [r7, #16]
 800d184:	689b      	ldr	r3, [r3, #8]
 800d186:	429a      	cmp	r2, r3
 800d188:	d11c      	bne.n	800d1c4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d18a:	693b      	ldr	r3, [r7, #16]
 800d18c:	685a      	ldr	r2, [r3, #4]
 800d18e:	693b      	ldr	r3, [r7, #16]
 800d190:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d192:	429a      	cmp	r2, r3
 800d194:	d316      	bcc.n	800d1c4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d196:	693b      	ldr	r3, [r7, #16]
 800d198:	685a      	ldr	r2, [r3, #4]
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d1a0:	429a      	cmp	r2, r3
 800d1a2:	d20f      	bcs.n	800d1c4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d1a4:	2200      	movs	r2, #0
 800d1a6:	2100      	movs	r1, #0
 800d1a8:	68f8      	ldr	r0, [r7, #12]
 800d1aa:	f000 ff1b 	bl	800dfe4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	2100      	movs	r1, #0
 800d1bc:	68f8      	ldr	r0, [r7, #12]
 800d1be:	f001 fbcd 	bl	800e95c <USBD_LL_PrepareReceive>
 800d1c2:	e018      	b.n	800d1f6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d1ca:	b2db      	uxtb	r3, r3
 800d1cc:	2b03      	cmp	r3, #3
 800d1ce:	d10b      	bne.n	800d1e8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d1d6:	68db      	ldr	r3, [r3, #12]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d005      	beq.n	800d1e8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d1e2:	68db      	ldr	r3, [r3, #12]
 800d1e4:	68f8      	ldr	r0, [r7, #12]
 800d1e6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d1e8:	2180      	movs	r1, #128	@ 0x80
 800d1ea:	68f8      	ldr	r0, [r7, #12]
 800d1ec:	f001 fb0c 	bl	800e808 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d1f0:	68f8      	ldr	r0, [r7, #12]
 800d1f2:	f000 ff49 	bl	800e088 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800d1fc:	2b01      	cmp	r3, #1
 800d1fe:	d122      	bne.n	800d246 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800d200:	68f8      	ldr	r0, [r7, #12]
 800d202:	f7ff fe98 	bl	800cf36 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	2200      	movs	r2, #0
 800d20a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800d20e:	e01a      	b.n	800d246 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d216:	b2db      	uxtb	r3, r3
 800d218:	2b03      	cmp	r3, #3
 800d21a:	d114      	bne.n	800d246 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d222:	695b      	ldr	r3, [r3, #20]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d00e      	beq.n	800d246 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d22e:	695b      	ldr	r3, [r3, #20]
 800d230:	7afa      	ldrb	r2, [r7, #11]
 800d232:	4611      	mov	r1, r2
 800d234:	68f8      	ldr	r0, [r7, #12]
 800d236:	4798      	blx	r3
 800d238:	4603      	mov	r3, r0
 800d23a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800d23c:	7dfb      	ldrb	r3, [r7, #23]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d001      	beq.n	800d246 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800d242:	7dfb      	ldrb	r3, [r7, #23]
 800d244:	e000      	b.n	800d248 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800d246:	2300      	movs	r3, #0
}
 800d248:	4618      	mov	r0, r3
 800d24a:	3718      	adds	r7, #24
 800d24c:	46bd      	mov	sp, r7
 800d24e:	bd80      	pop	{r7, pc}

0800d250 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d250:	b580      	push	{r7, lr}
 800d252:	b082      	sub	sp, #8
 800d254:	af00      	add	r7, sp, #0
 800d256:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	2201      	movs	r2, #1
 800d25c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	2200      	movs	r2, #0
 800d264:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	2200      	movs	r2, #0
 800d26c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	2200      	movs	r2, #0
 800d272:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d101      	bne.n	800d284 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800d280:	2303      	movs	r3, #3
 800d282:	e02f      	b.n	800d2e4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d00f      	beq.n	800d2ae <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d294:	685b      	ldr	r3, [r3, #4]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d009      	beq.n	800d2ae <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d2a0:	685b      	ldr	r3, [r3, #4]
 800d2a2:	687a      	ldr	r2, [r7, #4]
 800d2a4:	6852      	ldr	r2, [r2, #4]
 800d2a6:	b2d2      	uxtb	r2, r2
 800d2a8:	4611      	mov	r1, r2
 800d2aa:	6878      	ldr	r0, [r7, #4]
 800d2ac:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d2ae:	2340      	movs	r3, #64	@ 0x40
 800d2b0:	2200      	movs	r2, #0
 800d2b2:	2100      	movs	r1, #0
 800d2b4:	6878      	ldr	r0, [r7, #4]
 800d2b6:	f001 fa62 	bl	800e77e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	2201      	movs	r2, #1
 800d2be:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	2240      	movs	r2, #64	@ 0x40
 800d2c6:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d2ca:	2340      	movs	r3, #64	@ 0x40
 800d2cc:	2200      	movs	r2, #0
 800d2ce:	2180      	movs	r1, #128	@ 0x80
 800d2d0:	6878      	ldr	r0, [r7, #4]
 800d2d2:	f001 fa54 	bl	800e77e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	2201      	movs	r2, #1
 800d2da:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	2240      	movs	r2, #64	@ 0x40
 800d2e0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800d2e2:	2300      	movs	r3, #0
}
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	3708      	adds	r7, #8
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	bd80      	pop	{r7, pc}

0800d2ec <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d2ec:	b480      	push	{r7}
 800d2ee:	b083      	sub	sp, #12
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	6078      	str	r0, [r7, #4]
 800d2f4:	460b      	mov	r3, r1
 800d2f6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	78fa      	ldrb	r2, [r7, #3]
 800d2fc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d2fe:	2300      	movs	r3, #0
}
 800d300:	4618      	mov	r0, r3
 800d302:	370c      	adds	r7, #12
 800d304:	46bd      	mov	sp, r7
 800d306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d30a:	4770      	bx	lr

0800d30c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d30c:	b480      	push	{r7}
 800d30e:	b083      	sub	sp, #12
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d31a:	b2da      	uxtb	r2, r3
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	2204      	movs	r2, #4
 800d326:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800d32a:	2300      	movs	r3, #0
}
 800d32c:	4618      	mov	r0, r3
 800d32e:	370c      	adds	r7, #12
 800d330:	46bd      	mov	sp, r7
 800d332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d336:	4770      	bx	lr

0800d338 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d338:	b480      	push	{r7}
 800d33a:	b083      	sub	sp, #12
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d346:	b2db      	uxtb	r3, r3
 800d348:	2b04      	cmp	r3, #4
 800d34a:	d106      	bne.n	800d35a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800d352:	b2da      	uxtb	r2, r3
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800d35a:	2300      	movs	r3, #0
}
 800d35c:	4618      	mov	r0, r3
 800d35e:	370c      	adds	r7, #12
 800d360:	46bd      	mov	sp, r7
 800d362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d366:	4770      	bx	lr

0800d368 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d368:	b580      	push	{r7, lr}
 800d36a:	b082      	sub	sp, #8
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d376:	2b00      	cmp	r3, #0
 800d378:	d101      	bne.n	800d37e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800d37a:	2303      	movs	r3, #3
 800d37c:	e012      	b.n	800d3a4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d384:	b2db      	uxtb	r3, r3
 800d386:	2b03      	cmp	r3, #3
 800d388:	d10b      	bne.n	800d3a2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d390:	69db      	ldr	r3, [r3, #28]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d005      	beq.n	800d3a2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d39c:	69db      	ldr	r3, [r3, #28]
 800d39e:	6878      	ldr	r0, [r7, #4]
 800d3a0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d3a2:	2300      	movs	r3, #0
}
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	3708      	adds	r7, #8
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	bd80      	pop	{r7, pc}

0800d3ac <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d3ac:	b480      	push	{r7}
 800d3ae:	b087      	sub	sp, #28
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d3b8:	697b      	ldr	r3, [r7, #20]
 800d3ba:	781b      	ldrb	r3, [r3, #0]
 800d3bc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d3be:	697b      	ldr	r3, [r7, #20]
 800d3c0:	3301      	adds	r3, #1
 800d3c2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d3c4:	697b      	ldr	r3, [r7, #20]
 800d3c6:	781b      	ldrb	r3, [r3, #0]
 800d3c8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d3ca:	8a3b      	ldrh	r3, [r7, #16]
 800d3cc:	021b      	lsls	r3, r3, #8
 800d3ce:	b21a      	sxth	r2, r3
 800d3d0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d3d4:	4313      	orrs	r3, r2
 800d3d6:	b21b      	sxth	r3, r3
 800d3d8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d3da:	89fb      	ldrh	r3, [r7, #14]
}
 800d3dc:	4618      	mov	r0, r3
 800d3de:	371c      	adds	r7, #28
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e6:	4770      	bx	lr

0800d3e8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b084      	sub	sp, #16
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]
 800d3f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d3f6:	683b      	ldr	r3, [r7, #0]
 800d3f8:	781b      	ldrb	r3, [r3, #0]
 800d3fa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d3fe:	2b40      	cmp	r3, #64	@ 0x40
 800d400:	d005      	beq.n	800d40e <USBD_StdDevReq+0x26>
 800d402:	2b40      	cmp	r3, #64	@ 0x40
 800d404:	d853      	bhi.n	800d4ae <USBD_StdDevReq+0xc6>
 800d406:	2b00      	cmp	r3, #0
 800d408:	d00b      	beq.n	800d422 <USBD_StdDevReq+0x3a>
 800d40a:	2b20      	cmp	r3, #32
 800d40c:	d14f      	bne.n	800d4ae <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d414:	689b      	ldr	r3, [r3, #8]
 800d416:	6839      	ldr	r1, [r7, #0]
 800d418:	6878      	ldr	r0, [r7, #4]
 800d41a:	4798      	blx	r3
 800d41c:	4603      	mov	r3, r0
 800d41e:	73fb      	strb	r3, [r7, #15]
      break;
 800d420:	e04a      	b.n	800d4b8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d422:	683b      	ldr	r3, [r7, #0]
 800d424:	785b      	ldrb	r3, [r3, #1]
 800d426:	2b09      	cmp	r3, #9
 800d428:	d83b      	bhi.n	800d4a2 <USBD_StdDevReq+0xba>
 800d42a:	a201      	add	r2, pc, #4	@ (adr r2, 800d430 <USBD_StdDevReq+0x48>)
 800d42c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d430:	0800d485 	.word	0x0800d485
 800d434:	0800d499 	.word	0x0800d499
 800d438:	0800d4a3 	.word	0x0800d4a3
 800d43c:	0800d48f 	.word	0x0800d48f
 800d440:	0800d4a3 	.word	0x0800d4a3
 800d444:	0800d463 	.word	0x0800d463
 800d448:	0800d459 	.word	0x0800d459
 800d44c:	0800d4a3 	.word	0x0800d4a3
 800d450:	0800d47b 	.word	0x0800d47b
 800d454:	0800d46d 	.word	0x0800d46d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d458:	6839      	ldr	r1, [r7, #0]
 800d45a:	6878      	ldr	r0, [r7, #4]
 800d45c:	f000 f9de 	bl	800d81c <USBD_GetDescriptor>
          break;
 800d460:	e024      	b.n	800d4ac <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d462:	6839      	ldr	r1, [r7, #0]
 800d464:	6878      	ldr	r0, [r7, #4]
 800d466:	f000 fb6d 	bl	800db44 <USBD_SetAddress>
          break;
 800d46a:	e01f      	b.n	800d4ac <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d46c:	6839      	ldr	r1, [r7, #0]
 800d46e:	6878      	ldr	r0, [r7, #4]
 800d470:	f000 fbac 	bl	800dbcc <USBD_SetConfig>
 800d474:	4603      	mov	r3, r0
 800d476:	73fb      	strb	r3, [r7, #15]
          break;
 800d478:	e018      	b.n	800d4ac <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d47a:	6839      	ldr	r1, [r7, #0]
 800d47c:	6878      	ldr	r0, [r7, #4]
 800d47e:	f000 fc4b 	bl	800dd18 <USBD_GetConfig>
          break;
 800d482:	e013      	b.n	800d4ac <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d484:	6839      	ldr	r1, [r7, #0]
 800d486:	6878      	ldr	r0, [r7, #4]
 800d488:	f000 fc7c 	bl	800dd84 <USBD_GetStatus>
          break;
 800d48c:	e00e      	b.n	800d4ac <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d48e:	6839      	ldr	r1, [r7, #0]
 800d490:	6878      	ldr	r0, [r7, #4]
 800d492:	f000 fcab 	bl	800ddec <USBD_SetFeature>
          break;
 800d496:	e009      	b.n	800d4ac <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d498:	6839      	ldr	r1, [r7, #0]
 800d49a:	6878      	ldr	r0, [r7, #4]
 800d49c:	f000 fcba 	bl	800de14 <USBD_ClrFeature>
          break;
 800d4a0:	e004      	b.n	800d4ac <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800d4a2:	6839      	ldr	r1, [r7, #0]
 800d4a4:	6878      	ldr	r0, [r7, #4]
 800d4a6:	f000 fd11 	bl	800decc <USBD_CtlError>
          break;
 800d4aa:	bf00      	nop
      }
      break;
 800d4ac:	e004      	b.n	800d4b8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800d4ae:	6839      	ldr	r1, [r7, #0]
 800d4b0:	6878      	ldr	r0, [r7, #4]
 800d4b2:	f000 fd0b 	bl	800decc <USBD_CtlError>
      break;
 800d4b6:	bf00      	nop
  }

  return ret;
 800d4b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	3710      	adds	r7, #16
 800d4be:	46bd      	mov	sp, r7
 800d4c0:	bd80      	pop	{r7, pc}
 800d4c2:	bf00      	nop

0800d4c4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d4c4:	b580      	push	{r7, lr}
 800d4c6:	b084      	sub	sp, #16
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
 800d4cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d4d2:	683b      	ldr	r3, [r7, #0]
 800d4d4:	781b      	ldrb	r3, [r3, #0]
 800d4d6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d4da:	2b40      	cmp	r3, #64	@ 0x40
 800d4dc:	d005      	beq.n	800d4ea <USBD_StdItfReq+0x26>
 800d4de:	2b40      	cmp	r3, #64	@ 0x40
 800d4e0:	d82f      	bhi.n	800d542 <USBD_StdItfReq+0x7e>
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d001      	beq.n	800d4ea <USBD_StdItfReq+0x26>
 800d4e6:	2b20      	cmp	r3, #32
 800d4e8:	d12b      	bne.n	800d542 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d4f0:	b2db      	uxtb	r3, r3
 800d4f2:	3b01      	subs	r3, #1
 800d4f4:	2b02      	cmp	r3, #2
 800d4f6:	d81d      	bhi.n	800d534 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d4f8:	683b      	ldr	r3, [r7, #0]
 800d4fa:	889b      	ldrh	r3, [r3, #4]
 800d4fc:	b2db      	uxtb	r3, r3
 800d4fe:	2b01      	cmp	r3, #1
 800d500:	d813      	bhi.n	800d52a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d508:	689b      	ldr	r3, [r3, #8]
 800d50a:	6839      	ldr	r1, [r7, #0]
 800d50c:	6878      	ldr	r0, [r7, #4]
 800d50e:	4798      	blx	r3
 800d510:	4603      	mov	r3, r0
 800d512:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d514:	683b      	ldr	r3, [r7, #0]
 800d516:	88db      	ldrh	r3, [r3, #6]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d110      	bne.n	800d53e <USBD_StdItfReq+0x7a>
 800d51c:	7bfb      	ldrb	r3, [r7, #15]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d10d      	bne.n	800d53e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d522:	6878      	ldr	r0, [r7, #4]
 800d524:	f000 fd9d 	bl	800e062 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d528:	e009      	b.n	800d53e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800d52a:	6839      	ldr	r1, [r7, #0]
 800d52c:	6878      	ldr	r0, [r7, #4]
 800d52e:	f000 fccd 	bl	800decc <USBD_CtlError>
          break;
 800d532:	e004      	b.n	800d53e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800d534:	6839      	ldr	r1, [r7, #0]
 800d536:	6878      	ldr	r0, [r7, #4]
 800d538:	f000 fcc8 	bl	800decc <USBD_CtlError>
          break;
 800d53c:	e000      	b.n	800d540 <USBD_StdItfReq+0x7c>
          break;
 800d53e:	bf00      	nop
      }
      break;
 800d540:	e004      	b.n	800d54c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800d542:	6839      	ldr	r1, [r7, #0]
 800d544:	6878      	ldr	r0, [r7, #4]
 800d546:	f000 fcc1 	bl	800decc <USBD_CtlError>
      break;
 800d54a:	bf00      	nop
  }

  return ret;
 800d54c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d54e:	4618      	mov	r0, r3
 800d550:	3710      	adds	r7, #16
 800d552:	46bd      	mov	sp, r7
 800d554:	bd80      	pop	{r7, pc}

0800d556 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d556:	b580      	push	{r7, lr}
 800d558:	b084      	sub	sp, #16
 800d55a:	af00      	add	r7, sp, #0
 800d55c:	6078      	str	r0, [r7, #4]
 800d55e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800d560:	2300      	movs	r3, #0
 800d562:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800d564:	683b      	ldr	r3, [r7, #0]
 800d566:	889b      	ldrh	r3, [r3, #4]
 800d568:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d56a:	683b      	ldr	r3, [r7, #0]
 800d56c:	781b      	ldrb	r3, [r3, #0]
 800d56e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d572:	2b40      	cmp	r3, #64	@ 0x40
 800d574:	d007      	beq.n	800d586 <USBD_StdEPReq+0x30>
 800d576:	2b40      	cmp	r3, #64	@ 0x40
 800d578:	f200 8145 	bhi.w	800d806 <USBD_StdEPReq+0x2b0>
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d00c      	beq.n	800d59a <USBD_StdEPReq+0x44>
 800d580:	2b20      	cmp	r3, #32
 800d582:	f040 8140 	bne.w	800d806 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d58c:	689b      	ldr	r3, [r3, #8]
 800d58e:	6839      	ldr	r1, [r7, #0]
 800d590:	6878      	ldr	r0, [r7, #4]
 800d592:	4798      	blx	r3
 800d594:	4603      	mov	r3, r0
 800d596:	73fb      	strb	r3, [r7, #15]
      break;
 800d598:	e13a      	b.n	800d810 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d59a:	683b      	ldr	r3, [r7, #0]
 800d59c:	785b      	ldrb	r3, [r3, #1]
 800d59e:	2b03      	cmp	r3, #3
 800d5a0:	d007      	beq.n	800d5b2 <USBD_StdEPReq+0x5c>
 800d5a2:	2b03      	cmp	r3, #3
 800d5a4:	f300 8129 	bgt.w	800d7fa <USBD_StdEPReq+0x2a4>
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d07f      	beq.n	800d6ac <USBD_StdEPReq+0x156>
 800d5ac:	2b01      	cmp	r3, #1
 800d5ae:	d03c      	beq.n	800d62a <USBD_StdEPReq+0xd4>
 800d5b0:	e123      	b.n	800d7fa <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d5b8:	b2db      	uxtb	r3, r3
 800d5ba:	2b02      	cmp	r3, #2
 800d5bc:	d002      	beq.n	800d5c4 <USBD_StdEPReq+0x6e>
 800d5be:	2b03      	cmp	r3, #3
 800d5c0:	d016      	beq.n	800d5f0 <USBD_StdEPReq+0x9a>
 800d5c2:	e02c      	b.n	800d61e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d5c4:	7bbb      	ldrb	r3, [r7, #14]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d00d      	beq.n	800d5e6 <USBD_StdEPReq+0x90>
 800d5ca:	7bbb      	ldrb	r3, [r7, #14]
 800d5cc:	2b80      	cmp	r3, #128	@ 0x80
 800d5ce:	d00a      	beq.n	800d5e6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d5d0:	7bbb      	ldrb	r3, [r7, #14]
 800d5d2:	4619      	mov	r1, r3
 800d5d4:	6878      	ldr	r0, [r7, #4]
 800d5d6:	f001 f917 	bl	800e808 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d5da:	2180      	movs	r1, #128	@ 0x80
 800d5dc:	6878      	ldr	r0, [r7, #4]
 800d5de:	f001 f913 	bl	800e808 <USBD_LL_StallEP>
 800d5e2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d5e4:	e020      	b.n	800d628 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800d5e6:	6839      	ldr	r1, [r7, #0]
 800d5e8:	6878      	ldr	r0, [r7, #4]
 800d5ea:	f000 fc6f 	bl	800decc <USBD_CtlError>
              break;
 800d5ee:	e01b      	b.n	800d628 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d5f0:	683b      	ldr	r3, [r7, #0]
 800d5f2:	885b      	ldrh	r3, [r3, #2]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d10e      	bne.n	800d616 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d5f8:	7bbb      	ldrb	r3, [r7, #14]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d00b      	beq.n	800d616 <USBD_StdEPReq+0xc0>
 800d5fe:	7bbb      	ldrb	r3, [r7, #14]
 800d600:	2b80      	cmp	r3, #128	@ 0x80
 800d602:	d008      	beq.n	800d616 <USBD_StdEPReq+0xc0>
 800d604:	683b      	ldr	r3, [r7, #0]
 800d606:	88db      	ldrh	r3, [r3, #6]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d104      	bne.n	800d616 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d60c:	7bbb      	ldrb	r3, [r7, #14]
 800d60e:	4619      	mov	r1, r3
 800d610:	6878      	ldr	r0, [r7, #4]
 800d612:	f001 f8f9 	bl	800e808 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d616:	6878      	ldr	r0, [r7, #4]
 800d618:	f000 fd23 	bl	800e062 <USBD_CtlSendStatus>

              break;
 800d61c:	e004      	b.n	800d628 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800d61e:	6839      	ldr	r1, [r7, #0]
 800d620:	6878      	ldr	r0, [r7, #4]
 800d622:	f000 fc53 	bl	800decc <USBD_CtlError>
              break;
 800d626:	bf00      	nop
          }
          break;
 800d628:	e0ec      	b.n	800d804 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d630:	b2db      	uxtb	r3, r3
 800d632:	2b02      	cmp	r3, #2
 800d634:	d002      	beq.n	800d63c <USBD_StdEPReq+0xe6>
 800d636:	2b03      	cmp	r3, #3
 800d638:	d016      	beq.n	800d668 <USBD_StdEPReq+0x112>
 800d63a:	e030      	b.n	800d69e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d63c:	7bbb      	ldrb	r3, [r7, #14]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d00d      	beq.n	800d65e <USBD_StdEPReq+0x108>
 800d642:	7bbb      	ldrb	r3, [r7, #14]
 800d644:	2b80      	cmp	r3, #128	@ 0x80
 800d646:	d00a      	beq.n	800d65e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d648:	7bbb      	ldrb	r3, [r7, #14]
 800d64a:	4619      	mov	r1, r3
 800d64c:	6878      	ldr	r0, [r7, #4]
 800d64e:	f001 f8db 	bl	800e808 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d652:	2180      	movs	r1, #128	@ 0x80
 800d654:	6878      	ldr	r0, [r7, #4]
 800d656:	f001 f8d7 	bl	800e808 <USBD_LL_StallEP>
 800d65a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d65c:	e025      	b.n	800d6aa <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800d65e:	6839      	ldr	r1, [r7, #0]
 800d660:	6878      	ldr	r0, [r7, #4]
 800d662:	f000 fc33 	bl	800decc <USBD_CtlError>
              break;
 800d666:	e020      	b.n	800d6aa <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d668:	683b      	ldr	r3, [r7, #0]
 800d66a:	885b      	ldrh	r3, [r3, #2]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d11b      	bne.n	800d6a8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d670:	7bbb      	ldrb	r3, [r7, #14]
 800d672:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d676:	2b00      	cmp	r3, #0
 800d678:	d004      	beq.n	800d684 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d67a:	7bbb      	ldrb	r3, [r7, #14]
 800d67c:	4619      	mov	r1, r3
 800d67e:	6878      	ldr	r0, [r7, #4]
 800d680:	f001 f8e1 	bl	800e846 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d684:	6878      	ldr	r0, [r7, #4]
 800d686:	f000 fcec 	bl	800e062 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d690:	689b      	ldr	r3, [r3, #8]
 800d692:	6839      	ldr	r1, [r7, #0]
 800d694:	6878      	ldr	r0, [r7, #4]
 800d696:	4798      	blx	r3
 800d698:	4603      	mov	r3, r0
 800d69a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800d69c:	e004      	b.n	800d6a8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800d69e:	6839      	ldr	r1, [r7, #0]
 800d6a0:	6878      	ldr	r0, [r7, #4]
 800d6a2:	f000 fc13 	bl	800decc <USBD_CtlError>
              break;
 800d6a6:	e000      	b.n	800d6aa <USBD_StdEPReq+0x154>
              break;
 800d6a8:	bf00      	nop
          }
          break;
 800d6aa:	e0ab      	b.n	800d804 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d6b2:	b2db      	uxtb	r3, r3
 800d6b4:	2b02      	cmp	r3, #2
 800d6b6:	d002      	beq.n	800d6be <USBD_StdEPReq+0x168>
 800d6b8:	2b03      	cmp	r3, #3
 800d6ba:	d032      	beq.n	800d722 <USBD_StdEPReq+0x1cc>
 800d6bc:	e097      	b.n	800d7ee <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d6be:	7bbb      	ldrb	r3, [r7, #14]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d007      	beq.n	800d6d4 <USBD_StdEPReq+0x17e>
 800d6c4:	7bbb      	ldrb	r3, [r7, #14]
 800d6c6:	2b80      	cmp	r3, #128	@ 0x80
 800d6c8:	d004      	beq.n	800d6d4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800d6ca:	6839      	ldr	r1, [r7, #0]
 800d6cc:	6878      	ldr	r0, [r7, #4]
 800d6ce:	f000 fbfd 	bl	800decc <USBD_CtlError>
                break;
 800d6d2:	e091      	b.n	800d7f8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d6d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	da0b      	bge.n	800d6f4 <USBD_StdEPReq+0x19e>
 800d6dc:	7bbb      	ldrb	r3, [r7, #14]
 800d6de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d6e2:	4613      	mov	r3, r2
 800d6e4:	009b      	lsls	r3, r3, #2
 800d6e6:	4413      	add	r3, r2
 800d6e8:	009b      	lsls	r3, r3, #2
 800d6ea:	3310      	adds	r3, #16
 800d6ec:	687a      	ldr	r2, [r7, #4]
 800d6ee:	4413      	add	r3, r2
 800d6f0:	3304      	adds	r3, #4
 800d6f2:	e00b      	b.n	800d70c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d6f4:	7bbb      	ldrb	r3, [r7, #14]
 800d6f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d6fa:	4613      	mov	r3, r2
 800d6fc:	009b      	lsls	r3, r3, #2
 800d6fe:	4413      	add	r3, r2
 800d700:	009b      	lsls	r3, r3, #2
 800d702:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d706:	687a      	ldr	r2, [r7, #4]
 800d708:	4413      	add	r3, r2
 800d70a:	3304      	adds	r3, #4
 800d70c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d70e:	68bb      	ldr	r3, [r7, #8]
 800d710:	2200      	movs	r2, #0
 800d712:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d714:	68bb      	ldr	r3, [r7, #8]
 800d716:	2202      	movs	r2, #2
 800d718:	4619      	mov	r1, r3
 800d71a:	6878      	ldr	r0, [r7, #4]
 800d71c:	f000 fc47 	bl	800dfae <USBD_CtlSendData>
              break;
 800d720:	e06a      	b.n	800d7f8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d722:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d726:	2b00      	cmp	r3, #0
 800d728:	da11      	bge.n	800d74e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d72a:	7bbb      	ldrb	r3, [r7, #14]
 800d72c:	f003 020f 	and.w	r2, r3, #15
 800d730:	6879      	ldr	r1, [r7, #4]
 800d732:	4613      	mov	r3, r2
 800d734:	009b      	lsls	r3, r3, #2
 800d736:	4413      	add	r3, r2
 800d738:	009b      	lsls	r3, r3, #2
 800d73a:	440b      	add	r3, r1
 800d73c:	3324      	adds	r3, #36	@ 0x24
 800d73e:	881b      	ldrh	r3, [r3, #0]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d117      	bne.n	800d774 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800d744:	6839      	ldr	r1, [r7, #0]
 800d746:	6878      	ldr	r0, [r7, #4]
 800d748:	f000 fbc0 	bl	800decc <USBD_CtlError>
                  break;
 800d74c:	e054      	b.n	800d7f8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d74e:	7bbb      	ldrb	r3, [r7, #14]
 800d750:	f003 020f 	and.w	r2, r3, #15
 800d754:	6879      	ldr	r1, [r7, #4]
 800d756:	4613      	mov	r3, r2
 800d758:	009b      	lsls	r3, r3, #2
 800d75a:	4413      	add	r3, r2
 800d75c:	009b      	lsls	r3, r3, #2
 800d75e:	440b      	add	r3, r1
 800d760:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d764:	881b      	ldrh	r3, [r3, #0]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d104      	bne.n	800d774 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800d76a:	6839      	ldr	r1, [r7, #0]
 800d76c:	6878      	ldr	r0, [r7, #4]
 800d76e:	f000 fbad 	bl	800decc <USBD_CtlError>
                  break;
 800d772:	e041      	b.n	800d7f8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d774:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	da0b      	bge.n	800d794 <USBD_StdEPReq+0x23e>
 800d77c:	7bbb      	ldrb	r3, [r7, #14]
 800d77e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d782:	4613      	mov	r3, r2
 800d784:	009b      	lsls	r3, r3, #2
 800d786:	4413      	add	r3, r2
 800d788:	009b      	lsls	r3, r3, #2
 800d78a:	3310      	adds	r3, #16
 800d78c:	687a      	ldr	r2, [r7, #4]
 800d78e:	4413      	add	r3, r2
 800d790:	3304      	adds	r3, #4
 800d792:	e00b      	b.n	800d7ac <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d794:	7bbb      	ldrb	r3, [r7, #14]
 800d796:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d79a:	4613      	mov	r3, r2
 800d79c:	009b      	lsls	r3, r3, #2
 800d79e:	4413      	add	r3, r2
 800d7a0:	009b      	lsls	r3, r3, #2
 800d7a2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d7a6:	687a      	ldr	r2, [r7, #4]
 800d7a8:	4413      	add	r3, r2
 800d7aa:	3304      	adds	r3, #4
 800d7ac:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d7ae:	7bbb      	ldrb	r3, [r7, #14]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d002      	beq.n	800d7ba <USBD_StdEPReq+0x264>
 800d7b4:	7bbb      	ldrb	r3, [r7, #14]
 800d7b6:	2b80      	cmp	r3, #128	@ 0x80
 800d7b8:	d103      	bne.n	800d7c2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800d7ba:	68bb      	ldr	r3, [r7, #8]
 800d7bc:	2200      	movs	r2, #0
 800d7be:	601a      	str	r2, [r3, #0]
 800d7c0:	e00e      	b.n	800d7e0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d7c2:	7bbb      	ldrb	r3, [r7, #14]
 800d7c4:	4619      	mov	r1, r3
 800d7c6:	6878      	ldr	r0, [r7, #4]
 800d7c8:	f001 f85c 	bl	800e884 <USBD_LL_IsStallEP>
 800d7cc:	4603      	mov	r3, r0
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d003      	beq.n	800d7da <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800d7d2:	68bb      	ldr	r3, [r7, #8]
 800d7d4:	2201      	movs	r2, #1
 800d7d6:	601a      	str	r2, [r3, #0]
 800d7d8:	e002      	b.n	800d7e0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800d7da:	68bb      	ldr	r3, [r7, #8]
 800d7dc:	2200      	movs	r2, #0
 800d7de:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d7e0:	68bb      	ldr	r3, [r7, #8]
 800d7e2:	2202      	movs	r2, #2
 800d7e4:	4619      	mov	r1, r3
 800d7e6:	6878      	ldr	r0, [r7, #4]
 800d7e8:	f000 fbe1 	bl	800dfae <USBD_CtlSendData>
              break;
 800d7ec:	e004      	b.n	800d7f8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800d7ee:	6839      	ldr	r1, [r7, #0]
 800d7f0:	6878      	ldr	r0, [r7, #4]
 800d7f2:	f000 fb6b 	bl	800decc <USBD_CtlError>
              break;
 800d7f6:	bf00      	nop
          }
          break;
 800d7f8:	e004      	b.n	800d804 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800d7fa:	6839      	ldr	r1, [r7, #0]
 800d7fc:	6878      	ldr	r0, [r7, #4]
 800d7fe:	f000 fb65 	bl	800decc <USBD_CtlError>
          break;
 800d802:	bf00      	nop
      }
      break;
 800d804:	e004      	b.n	800d810 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800d806:	6839      	ldr	r1, [r7, #0]
 800d808:	6878      	ldr	r0, [r7, #4]
 800d80a:	f000 fb5f 	bl	800decc <USBD_CtlError>
      break;
 800d80e:	bf00      	nop
  }

  return ret;
 800d810:	7bfb      	ldrb	r3, [r7, #15]
}
 800d812:	4618      	mov	r0, r3
 800d814:	3710      	adds	r7, #16
 800d816:	46bd      	mov	sp, r7
 800d818:	bd80      	pop	{r7, pc}
	...

0800d81c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b084      	sub	sp, #16
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
 800d824:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d826:	2300      	movs	r3, #0
 800d828:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d82a:	2300      	movs	r3, #0
 800d82c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d82e:	2300      	movs	r3, #0
 800d830:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d832:	683b      	ldr	r3, [r7, #0]
 800d834:	885b      	ldrh	r3, [r3, #2]
 800d836:	0a1b      	lsrs	r3, r3, #8
 800d838:	b29b      	uxth	r3, r3
 800d83a:	3b01      	subs	r3, #1
 800d83c:	2b0e      	cmp	r3, #14
 800d83e:	f200 8152 	bhi.w	800dae6 <USBD_GetDescriptor+0x2ca>
 800d842:	a201      	add	r2, pc, #4	@ (adr r2, 800d848 <USBD_GetDescriptor+0x2c>)
 800d844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d848:	0800d8b9 	.word	0x0800d8b9
 800d84c:	0800d8d1 	.word	0x0800d8d1
 800d850:	0800d911 	.word	0x0800d911
 800d854:	0800dae7 	.word	0x0800dae7
 800d858:	0800dae7 	.word	0x0800dae7
 800d85c:	0800da87 	.word	0x0800da87
 800d860:	0800dab3 	.word	0x0800dab3
 800d864:	0800dae7 	.word	0x0800dae7
 800d868:	0800dae7 	.word	0x0800dae7
 800d86c:	0800dae7 	.word	0x0800dae7
 800d870:	0800dae7 	.word	0x0800dae7
 800d874:	0800dae7 	.word	0x0800dae7
 800d878:	0800dae7 	.word	0x0800dae7
 800d87c:	0800dae7 	.word	0x0800dae7
 800d880:	0800d885 	.word	0x0800d885
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d88a:	69db      	ldr	r3, [r3, #28]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d00b      	beq.n	800d8a8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d896:	69db      	ldr	r3, [r3, #28]
 800d898:	687a      	ldr	r2, [r7, #4]
 800d89a:	7c12      	ldrb	r2, [r2, #16]
 800d89c:	f107 0108 	add.w	r1, r7, #8
 800d8a0:	4610      	mov	r0, r2
 800d8a2:	4798      	blx	r3
 800d8a4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d8a6:	e126      	b.n	800daf6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d8a8:	6839      	ldr	r1, [r7, #0]
 800d8aa:	6878      	ldr	r0, [r7, #4]
 800d8ac:	f000 fb0e 	bl	800decc <USBD_CtlError>
        err++;
 800d8b0:	7afb      	ldrb	r3, [r7, #11]
 800d8b2:	3301      	adds	r3, #1
 800d8b4:	72fb      	strb	r3, [r7, #11]
      break;
 800d8b6:	e11e      	b.n	800daf6 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	687a      	ldr	r2, [r7, #4]
 800d8c2:	7c12      	ldrb	r2, [r2, #16]
 800d8c4:	f107 0108 	add.w	r1, r7, #8
 800d8c8:	4610      	mov	r0, r2
 800d8ca:	4798      	blx	r3
 800d8cc:	60f8      	str	r0, [r7, #12]
      break;
 800d8ce:	e112      	b.n	800daf6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	7c1b      	ldrb	r3, [r3, #16]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d10d      	bne.n	800d8f4 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d8de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8e0:	f107 0208 	add.w	r2, r7, #8
 800d8e4:	4610      	mov	r0, r2
 800d8e6:	4798      	blx	r3
 800d8e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	3301      	adds	r3, #1
 800d8ee:	2202      	movs	r2, #2
 800d8f0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d8f2:	e100      	b.n	800daf6 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d8fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8fc:	f107 0208 	add.w	r2, r7, #8
 800d900:	4610      	mov	r0, r2
 800d902:	4798      	blx	r3
 800d904:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	3301      	adds	r3, #1
 800d90a:	2202      	movs	r2, #2
 800d90c:	701a      	strb	r2, [r3, #0]
      break;
 800d90e:	e0f2      	b.n	800daf6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d910:	683b      	ldr	r3, [r7, #0]
 800d912:	885b      	ldrh	r3, [r3, #2]
 800d914:	b2db      	uxtb	r3, r3
 800d916:	2b05      	cmp	r3, #5
 800d918:	f200 80ac 	bhi.w	800da74 <USBD_GetDescriptor+0x258>
 800d91c:	a201      	add	r2, pc, #4	@ (adr r2, 800d924 <USBD_GetDescriptor+0x108>)
 800d91e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d922:	bf00      	nop
 800d924:	0800d93d 	.word	0x0800d93d
 800d928:	0800d971 	.word	0x0800d971
 800d92c:	0800d9a5 	.word	0x0800d9a5
 800d930:	0800d9d9 	.word	0x0800d9d9
 800d934:	0800da0d 	.word	0x0800da0d
 800d938:	0800da41 	.word	0x0800da41
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d942:	685b      	ldr	r3, [r3, #4]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d00b      	beq.n	800d960 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d94e:	685b      	ldr	r3, [r3, #4]
 800d950:	687a      	ldr	r2, [r7, #4]
 800d952:	7c12      	ldrb	r2, [r2, #16]
 800d954:	f107 0108 	add.w	r1, r7, #8
 800d958:	4610      	mov	r0, r2
 800d95a:	4798      	blx	r3
 800d95c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d95e:	e091      	b.n	800da84 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d960:	6839      	ldr	r1, [r7, #0]
 800d962:	6878      	ldr	r0, [r7, #4]
 800d964:	f000 fab2 	bl	800decc <USBD_CtlError>
            err++;
 800d968:	7afb      	ldrb	r3, [r7, #11]
 800d96a:	3301      	adds	r3, #1
 800d96c:	72fb      	strb	r3, [r7, #11]
          break;
 800d96e:	e089      	b.n	800da84 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d976:	689b      	ldr	r3, [r3, #8]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d00b      	beq.n	800d994 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d982:	689b      	ldr	r3, [r3, #8]
 800d984:	687a      	ldr	r2, [r7, #4]
 800d986:	7c12      	ldrb	r2, [r2, #16]
 800d988:	f107 0108 	add.w	r1, r7, #8
 800d98c:	4610      	mov	r0, r2
 800d98e:	4798      	blx	r3
 800d990:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d992:	e077      	b.n	800da84 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d994:	6839      	ldr	r1, [r7, #0]
 800d996:	6878      	ldr	r0, [r7, #4]
 800d998:	f000 fa98 	bl	800decc <USBD_CtlError>
            err++;
 800d99c:	7afb      	ldrb	r3, [r7, #11]
 800d99e:	3301      	adds	r3, #1
 800d9a0:	72fb      	strb	r3, [r7, #11]
          break;
 800d9a2:	e06f      	b.n	800da84 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d9aa:	68db      	ldr	r3, [r3, #12]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d00b      	beq.n	800d9c8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d9b6:	68db      	ldr	r3, [r3, #12]
 800d9b8:	687a      	ldr	r2, [r7, #4]
 800d9ba:	7c12      	ldrb	r2, [r2, #16]
 800d9bc:	f107 0108 	add.w	r1, r7, #8
 800d9c0:	4610      	mov	r0, r2
 800d9c2:	4798      	blx	r3
 800d9c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d9c6:	e05d      	b.n	800da84 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d9c8:	6839      	ldr	r1, [r7, #0]
 800d9ca:	6878      	ldr	r0, [r7, #4]
 800d9cc:	f000 fa7e 	bl	800decc <USBD_CtlError>
            err++;
 800d9d0:	7afb      	ldrb	r3, [r7, #11]
 800d9d2:	3301      	adds	r3, #1
 800d9d4:	72fb      	strb	r3, [r7, #11]
          break;
 800d9d6:	e055      	b.n	800da84 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d9de:	691b      	ldr	r3, [r3, #16]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d00b      	beq.n	800d9fc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d9ea:	691b      	ldr	r3, [r3, #16]
 800d9ec:	687a      	ldr	r2, [r7, #4]
 800d9ee:	7c12      	ldrb	r2, [r2, #16]
 800d9f0:	f107 0108 	add.w	r1, r7, #8
 800d9f4:	4610      	mov	r0, r2
 800d9f6:	4798      	blx	r3
 800d9f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d9fa:	e043      	b.n	800da84 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d9fc:	6839      	ldr	r1, [r7, #0]
 800d9fe:	6878      	ldr	r0, [r7, #4]
 800da00:	f000 fa64 	bl	800decc <USBD_CtlError>
            err++;
 800da04:	7afb      	ldrb	r3, [r7, #11]
 800da06:	3301      	adds	r3, #1
 800da08:	72fb      	strb	r3, [r7, #11]
          break;
 800da0a:	e03b      	b.n	800da84 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800da12:	695b      	ldr	r3, [r3, #20]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d00b      	beq.n	800da30 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800da1e:	695b      	ldr	r3, [r3, #20]
 800da20:	687a      	ldr	r2, [r7, #4]
 800da22:	7c12      	ldrb	r2, [r2, #16]
 800da24:	f107 0108 	add.w	r1, r7, #8
 800da28:	4610      	mov	r0, r2
 800da2a:	4798      	blx	r3
 800da2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800da2e:	e029      	b.n	800da84 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800da30:	6839      	ldr	r1, [r7, #0]
 800da32:	6878      	ldr	r0, [r7, #4]
 800da34:	f000 fa4a 	bl	800decc <USBD_CtlError>
            err++;
 800da38:	7afb      	ldrb	r3, [r7, #11]
 800da3a:	3301      	adds	r3, #1
 800da3c:	72fb      	strb	r3, [r7, #11]
          break;
 800da3e:	e021      	b.n	800da84 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800da46:	699b      	ldr	r3, [r3, #24]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d00b      	beq.n	800da64 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800da52:	699b      	ldr	r3, [r3, #24]
 800da54:	687a      	ldr	r2, [r7, #4]
 800da56:	7c12      	ldrb	r2, [r2, #16]
 800da58:	f107 0108 	add.w	r1, r7, #8
 800da5c:	4610      	mov	r0, r2
 800da5e:	4798      	blx	r3
 800da60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800da62:	e00f      	b.n	800da84 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800da64:	6839      	ldr	r1, [r7, #0]
 800da66:	6878      	ldr	r0, [r7, #4]
 800da68:	f000 fa30 	bl	800decc <USBD_CtlError>
            err++;
 800da6c:	7afb      	ldrb	r3, [r7, #11]
 800da6e:	3301      	adds	r3, #1
 800da70:	72fb      	strb	r3, [r7, #11]
          break;
 800da72:	e007      	b.n	800da84 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800da74:	6839      	ldr	r1, [r7, #0]
 800da76:	6878      	ldr	r0, [r7, #4]
 800da78:	f000 fa28 	bl	800decc <USBD_CtlError>
          err++;
 800da7c:	7afb      	ldrb	r3, [r7, #11]
 800da7e:	3301      	adds	r3, #1
 800da80:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800da82:	bf00      	nop
      }
      break;
 800da84:	e037      	b.n	800daf6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	7c1b      	ldrb	r3, [r3, #16]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d109      	bne.n	800daa2 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800da94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da96:	f107 0208 	add.w	r2, r7, #8
 800da9a:	4610      	mov	r0, r2
 800da9c:	4798      	blx	r3
 800da9e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800daa0:	e029      	b.n	800daf6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800daa2:	6839      	ldr	r1, [r7, #0]
 800daa4:	6878      	ldr	r0, [r7, #4]
 800daa6:	f000 fa11 	bl	800decc <USBD_CtlError>
        err++;
 800daaa:	7afb      	ldrb	r3, [r7, #11]
 800daac:	3301      	adds	r3, #1
 800daae:	72fb      	strb	r3, [r7, #11]
      break;
 800dab0:	e021      	b.n	800daf6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	7c1b      	ldrb	r3, [r3, #16]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d10d      	bne.n	800dad6 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dac2:	f107 0208 	add.w	r2, r7, #8
 800dac6:	4610      	mov	r0, r2
 800dac8:	4798      	blx	r3
 800daca:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	3301      	adds	r3, #1
 800dad0:	2207      	movs	r2, #7
 800dad2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800dad4:	e00f      	b.n	800daf6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800dad6:	6839      	ldr	r1, [r7, #0]
 800dad8:	6878      	ldr	r0, [r7, #4]
 800dada:	f000 f9f7 	bl	800decc <USBD_CtlError>
        err++;
 800dade:	7afb      	ldrb	r3, [r7, #11]
 800dae0:	3301      	adds	r3, #1
 800dae2:	72fb      	strb	r3, [r7, #11]
      break;
 800dae4:	e007      	b.n	800daf6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800dae6:	6839      	ldr	r1, [r7, #0]
 800dae8:	6878      	ldr	r0, [r7, #4]
 800daea:	f000 f9ef 	bl	800decc <USBD_CtlError>
      err++;
 800daee:	7afb      	ldrb	r3, [r7, #11]
 800daf0:	3301      	adds	r3, #1
 800daf2:	72fb      	strb	r3, [r7, #11]
      break;
 800daf4:	bf00      	nop
  }

  if (err != 0U)
 800daf6:	7afb      	ldrb	r3, [r7, #11]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d11e      	bne.n	800db3a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800dafc:	683b      	ldr	r3, [r7, #0]
 800dafe:	88db      	ldrh	r3, [r3, #6]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d016      	beq.n	800db32 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800db04:	893b      	ldrh	r3, [r7, #8]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d00e      	beq.n	800db28 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800db0a:	683b      	ldr	r3, [r7, #0]
 800db0c:	88da      	ldrh	r2, [r3, #6]
 800db0e:	893b      	ldrh	r3, [r7, #8]
 800db10:	4293      	cmp	r3, r2
 800db12:	bf28      	it	cs
 800db14:	4613      	movcs	r3, r2
 800db16:	b29b      	uxth	r3, r3
 800db18:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800db1a:	893b      	ldrh	r3, [r7, #8]
 800db1c:	461a      	mov	r2, r3
 800db1e:	68f9      	ldr	r1, [r7, #12]
 800db20:	6878      	ldr	r0, [r7, #4]
 800db22:	f000 fa44 	bl	800dfae <USBD_CtlSendData>
 800db26:	e009      	b.n	800db3c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800db28:	6839      	ldr	r1, [r7, #0]
 800db2a:	6878      	ldr	r0, [r7, #4]
 800db2c:	f000 f9ce 	bl	800decc <USBD_CtlError>
 800db30:	e004      	b.n	800db3c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800db32:	6878      	ldr	r0, [r7, #4]
 800db34:	f000 fa95 	bl	800e062 <USBD_CtlSendStatus>
 800db38:	e000      	b.n	800db3c <USBD_GetDescriptor+0x320>
    return;
 800db3a:	bf00      	nop
  }
}
 800db3c:	3710      	adds	r7, #16
 800db3e:	46bd      	mov	sp, r7
 800db40:	bd80      	pop	{r7, pc}
 800db42:	bf00      	nop

0800db44 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db44:	b580      	push	{r7, lr}
 800db46:	b084      	sub	sp, #16
 800db48:	af00      	add	r7, sp, #0
 800db4a:	6078      	str	r0, [r7, #4]
 800db4c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800db4e:	683b      	ldr	r3, [r7, #0]
 800db50:	889b      	ldrh	r3, [r3, #4]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d131      	bne.n	800dbba <USBD_SetAddress+0x76>
 800db56:	683b      	ldr	r3, [r7, #0]
 800db58:	88db      	ldrh	r3, [r3, #6]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d12d      	bne.n	800dbba <USBD_SetAddress+0x76>
 800db5e:	683b      	ldr	r3, [r7, #0]
 800db60:	885b      	ldrh	r3, [r3, #2]
 800db62:	2b7f      	cmp	r3, #127	@ 0x7f
 800db64:	d829      	bhi.n	800dbba <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800db66:	683b      	ldr	r3, [r7, #0]
 800db68:	885b      	ldrh	r3, [r3, #2]
 800db6a:	b2db      	uxtb	r3, r3
 800db6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800db70:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800db78:	b2db      	uxtb	r3, r3
 800db7a:	2b03      	cmp	r3, #3
 800db7c:	d104      	bne.n	800db88 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800db7e:	6839      	ldr	r1, [r7, #0]
 800db80:	6878      	ldr	r0, [r7, #4]
 800db82:	f000 f9a3 	bl	800decc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db86:	e01d      	b.n	800dbc4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	7bfa      	ldrb	r2, [r7, #15]
 800db8c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800db90:	7bfb      	ldrb	r3, [r7, #15]
 800db92:	4619      	mov	r1, r3
 800db94:	6878      	ldr	r0, [r7, #4]
 800db96:	f000 fea1 	bl	800e8dc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800db9a:	6878      	ldr	r0, [r7, #4]
 800db9c:	f000 fa61 	bl	800e062 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800dba0:	7bfb      	ldrb	r3, [r7, #15]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d004      	beq.n	800dbb0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	2202      	movs	r2, #2
 800dbaa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dbae:	e009      	b.n	800dbc4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	2201      	movs	r2, #1
 800dbb4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dbb8:	e004      	b.n	800dbc4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800dbba:	6839      	ldr	r1, [r7, #0]
 800dbbc:	6878      	ldr	r0, [r7, #4]
 800dbbe:	f000 f985 	bl	800decc <USBD_CtlError>
  }
}
 800dbc2:	bf00      	nop
 800dbc4:	bf00      	nop
 800dbc6:	3710      	adds	r7, #16
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	bd80      	pop	{r7, pc}

0800dbcc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b084      	sub	sp, #16
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
 800dbd4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800dbda:	683b      	ldr	r3, [r7, #0]
 800dbdc:	885b      	ldrh	r3, [r3, #2]
 800dbde:	b2da      	uxtb	r2, r3
 800dbe0:	4b4c      	ldr	r3, [pc, #304]	@ (800dd14 <USBD_SetConfig+0x148>)
 800dbe2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800dbe4:	4b4b      	ldr	r3, [pc, #300]	@ (800dd14 <USBD_SetConfig+0x148>)
 800dbe6:	781b      	ldrb	r3, [r3, #0]
 800dbe8:	2b01      	cmp	r3, #1
 800dbea:	d905      	bls.n	800dbf8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800dbec:	6839      	ldr	r1, [r7, #0]
 800dbee:	6878      	ldr	r0, [r7, #4]
 800dbf0:	f000 f96c 	bl	800decc <USBD_CtlError>
    return USBD_FAIL;
 800dbf4:	2303      	movs	r3, #3
 800dbf6:	e088      	b.n	800dd0a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dbfe:	b2db      	uxtb	r3, r3
 800dc00:	2b02      	cmp	r3, #2
 800dc02:	d002      	beq.n	800dc0a <USBD_SetConfig+0x3e>
 800dc04:	2b03      	cmp	r3, #3
 800dc06:	d025      	beq.n	800dc54 <USBD_SetConfig+0x88>
 800dc08:	e071      	b.n	800dcee <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800dc0a:	4b42      	ldr	r3, [pc, #264]	@ (800dd14 <USBD_SetConfig+0x148>)
 800dc0c:	781b      	ldrb	r3, [r3, #0]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d01c      	beq.n	800dc4c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800dc12:	4b40      	ldr	r3, [pc, #256]	@ (800dd14 <USBD_SetConfig+0x148>)
 800dc14:	781b      	ldrb	r3, [r3, #0]
 800dc16:	461a      	mov	r2, r3
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800dc1c:	4b3d      	ldr	r3, [pc, #244]	@ (800dd14 <USBD_SetConfig+0x148>)
 800dc1e:	781b      	ldrb	r3, [r3, #0]
 800dc20:	4619      	mov	r1, r3
 800dc22:	6878      	ldr	r0, [r7, #4]
 800dc24:	f7ff f992 	bl	800cf4c <USBD_SetClassConfig>
 800dc28:	4603      	mov	r3, r0
 800dc2a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800dc2c:	7bfb      	ldrb	r3, [r7, #15]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d004      	beq.n	800dc3c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800dc32:	6839      	ldr	r1, [r7, #0]
 800dc34:	6878      	ldr	r0, [r7, #4]
 800dc36:	f000 f949 	bl	800decc <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800dc3a:	e065      	b.n	800dd08 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800dc3c:	6878      	ldr	r0, [r7, #4]
 800dc3e:	f000 fa10 	bl	800e062 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	2203      	movs	r2, #3
 800dc46:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800dc4a:	e05d      	b.n	800dd08 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800dc4c:	6878      	ldr	r0, [r7, #4]
 800dc4e:	f000 fa08 	bl	800e062 <USBD_CtlSendStatus>
      break;
 800dc52:	e059      	b.n	800dd08 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800dc54:	4b2f      	ldr	r3, [pc, #188]	@ (800dd14 <USBD_SetConfig+0x148>)
 800dc56:	781b      	ldrb	r3, [r3, #0]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d112      	bne.n	800dc82 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	2202      	movs	r2, #2
 800dc60:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800dc64:	4b2b      	ldr	r3, [pc, #172]	@ (800dd14 <USBD_SetConfig+0x148>)
 800dc66:	781b      	ldrb	r3, [r3, #0]
 800dc68:	461a      	mov	r2, r3
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800dc6e:	4b29      	ldr	r3, [pc, #164]	@ (800dd14 <USBD_SetConfig+0x148>)
 800dc70:	781b      	ldrb	r3, [r3, #0]
 800dc72:	4619      	mov	r1, r3
 800dc74:	6878      	ldr	r0, [r7, #4]
 800dc76:	f7ff f985 	bl	800cf84 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800dc7a:	6878      	ldr	r0, [r7, #4]
 800dc7c:	f000 f9f1 	bl	800e062 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800dc80:	e042      	b.n	800dd08 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800dc82:	4b24      	ldr	r3, [pc, #144]	@ (800dd14 <USBD_SetConfig+0x148>)
 800dc84:	781b      	ldrb	r3, [r3, #0]
 800dc86:	461a      	mov	r2, r3
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	685b      	ldr	r3, [r3, #4]
 800dc8c:	429a      	cmp	r2, r3
 800dc8e:	d02a      	beq.n	800dce6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	685b      	ldr	r3, [r3, #4]
 800dc94:	b2db      	uxtb	r3, r3
 800dc96:	4619      	mov	r1, r3
 800dc98:	6878      	ldr	r0, [r7, #4]
 800dc9a:	f7ff f973 	bl	800cf84 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800dc9e:	4b1d      	ldr	r3, [pc, #116]	@ (800dd14 <USBD_SetConfig+0x148>)
 800dca0:	781b      	ldrb	r3, [r3, #0]
 800dca2:	461a      	mov	r2, r3
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800dca8:	4b1a      	ldr	r3, [pc, #104]	@ (800dd14 <USBD_SetConfig+0x148>)
 800dcaa:	781b      	ldrb	r3, [r3, #0]
 800dcac:	4619      	mov	r1, r3
 800dcae:	6878      	ldr	r0, [r7, #4]
 800dcb0:	f7ff f94c 	bl	800cf4c <USBD_SetClassConfig>
 800dcb4:	4603      	mov	r3, r0
 800dcb6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800dcb8:	7bfb      	ldrb	r3, [r7, #15]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d00f      	beq.n	800dcde <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800dcbe:	6839      	ldr	r1, [r7, #0]
 800dcc0:	6878      	ldr	r0, [r7, #4]
 800dcc2:	f000 f903 	bl	800decc <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	685b      	ldr	r3, [r3, #4]
 800dcca:	b2db      	uxtb	r3, r3
 800dccc:	4619      	mov	r1, r3
 800dcce:	6878      	ldr	r0, [r7, #4]
 800dcd0:	f7ff f958 	bl	800cf84 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	2202      	movs	r2, #2
 800dcd8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800dcdc:	e014      	b.n	800dd08 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800dcde:	6878      	ldr	r0, [r7, #4]
 800dce0:	f000 f9bf 	bl	800e062 <USBD_CtlSendStatus>
      break;
 800dce4:	e010      	b.n	800dd08 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800dce6:	6878      	ldr	r0, [r7, #4]
 800dce8:	f000 f9bb 	bl	800e062 <USBD_CtlSendStatus>
      break;
 800dcec:	e00c      	b.n	800dd08 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800dcee:	6839      	ldr	r1, [r7, #0]
 800dcf0:	6878      	ldr	r0, [r7, #4]
 800dcf2:	f000 f8eb 	bl	800decc <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800dcf6:	4b07      	ldr	r3, [pc, #28]	@ (800dd14 <USBD_SetConfig+0x148>)
 800dcf8:	781b      	ldrb	r3, [r3, #0]
 800dcfa:	4619      	mov	r1, r3
 800dcfc:	6878      	ldr	r0, [r7, #4]
 800dcfe:	f7ff f941 	bl	800cf84 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800dd02:	2303      	movs	r3, #3
 800dd04:	73fb      	strb	r3, [r7, #15]
      break;
 800dd06:	bf00      	nop
  }

  return ret;
 800dd08:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	3710      	adds	r7, #16
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	bd80      	pop	{r7, pc}
 800dd12:	bf00      	nop
 800dd14:	200034f0 	.word	0x200034f0

0800dd18 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	b082      	sub	sp, #8
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	6078      	str	r0, [r7, #4]
 800dd20:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800dd22:	683b      	ldr	r3, [r7, #0]
 800dd24:	88db      	ldrh	r3, [r3, #6]
 800dd26:	2b01      	cmp	r3, #1
 800dd28:	d004      	beq.n	800dd34 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800dd2a:	6839      	ldr	r1, [r7, #0]
 800dd2c:	6878      	ldr	r0, [r7, #4]
 800dd2e:	f000 f8cd 	bl	800decc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800dd32:	e023      	b.n	800dd7c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dd3a:	b2db      	uxtb	r3, r3
 800dd3c:	2b02      	cmp	r3, #2
 800dd3e:	dc02      	bgt.n	800dd46 <USBD_GetConfig+0x2e>
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	dc03      	bgt.n	800dd4c <USBD_GetConfig+0x34>
 800dd44:	e015      	b.n	800dd72 <USBD_GetConfig+0x5a>
 800dd46:	2b03      	cmp	r3, #3
 800dd48:	d00b      	beq.n	800dd62 <USBD_GetConfig+0x4a>
 800dd4a:	e012      	b.n	800dd72 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	2200      	movs	r2, #0
 800dd50:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	3308      	adds	r3, #8
 800dd56:	2201      	movs	r2, #1
 800dd58:	4619      	mov	r1, r3
 800dd5a:	6878      	ldr	r0, [r7, #4]
 800dd5c:	f000 f927 	bl	800dfae <USBD_CtlSendData>
        break;
 800dd60:	e00c      	b.n	800dd7c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	3304      	adds	r3, #4
 800dd66:	2201      	movs	r2, #1
 800dd68:	4619      	mov	r1, r3
 800dd6a:	6878      	ldr	r0, [r7, #4]
 800dd6c:	f000 f91f 	bl	800dfae <USBD_CtlSendData>
        break;
 800dd70:	e004      	b.n	800dd7c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800dd72:	6839      	ldr	r1, [r7, #0]
 800dd74:	6878      	ldr	r0, [r7, #4]
 800dd76:	f000 f8a9 	bl	800decc <USBD_CtlError>
        break;
 800dd7a:	bf00      	nop
}
 800dd7c:	bf00      	nop
 800dd7e:	3708      	adds	r7, #8
 800dd80:	46bd      	mov	sp, r7
 800dd82:	bd80      	pop	{r7, pc}

0800dd84 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd84:	b580      	push	{r7, lr}
 800dd86:	b082      	sub	sp, #8
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	6078      	str	r0, [r7, #4]
 800dd8c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dd94:	b2db      	uxtb	r3, r3
 800dd96:	3b01      	subs	r3, #1
 800dd98:	2b02      	cmp	r3, #2
 800dd9a:	d81e      	bhi.n	800ddda <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800dd9c:	683b      	ldr	r3, [r7, #0]
 800dd9e:	88db      	ldrh	r3, [r3, #6]
 800dda0:	2b02      	cmp	r3, #2
 800dda2:	d004      	beq.n	800ddae <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800dda4:	6839      	ldr	r1, [r7, #0]
 800dda6:	6878      	ldr	r0, [r7, #4]
 800dda8:	f000 f890 	bl	800decc <USBD_CtlError>
        break;
 800ddac:	e01a      	b.n	800dde4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	2201      	movs	r2, #1
 800ddb2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d005      	beq.n	800ddca <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	68db      	ldr	r3, [r3, #12]
 800ddc2:	f043 0202 	orr.w	r2, r3, #2
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	330c      	adds	r3, #12
 800ddce:	2202      	movs	r2, #2
 800ddd0:	4619      	mov	r1, r3
 800ddd2:	6878      	ldr	r0, [r7, #4]
 800ddd4:	f000 f8eb 	bl	800dfae <USBD_CtlSendData>
      break;
 800ddd8:	e004      	b.n	800dde4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ddda:	6839      	ldr	r1, [r7, #0]
 800dddc:	6878      	ldr	r0, [r7, #4]
 800ddde:	f000 f875 	bl	800decc <USBD_CtlError>
      break;
 800dde2:	bf00      	nop
  }
}
 800dde4:	bf00      	nop
 800dde6:	3708      	adds	r7, #8
 800dde8:	46bd      	mov	sp, r7
 800ddea:	bd80      	pop	{r7, pc}

0800ddec <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ddec:	b580      	push	{r7, lr}
 800ddee:	b082      	sub	sp, #8
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	6078      	str	r0, [r7, #4]
 800ddf4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ddf6:	683b      	ldr	r3, [r7, #0]
 800ddf8:	885b      	ldrh	r3, [r3, #2]
 800ddfa:	2b01      	cmp	r3, #1
 800ddfc:	d106      	bne.n	800de0c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	2201      	movs	r2, #1
 800de02:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800de06:	6878      	ldr	r0, [r7, #4]
 800de08:	f000 f92b 	bl	800e062 <USBD_CtlSendStatus>
  }
}
 800de0c:	bf00      	nop
 800de0e:	3708      	adds	r7, #8
 800de10:	46bd      	mov	sp, r7
 800de12:	bd80      	pop	{r7, pc}

0800de14 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800de14:	b580      	push	{r7, lr}
 800de16:	b082      	sub	sp, #8
 800de18:	af00      	add	r7, sp, #0
 800de1a:	6078      	str	r0, [r7, #4]
 800de1c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800de24:	b2db      	uxtb	r3, r3
 800de26:	3b01      	subs	r3, #1
 800de28:	2b02      	cmp	r3, #2
 800de2a:	d80b      	bhi.n	800de44 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800de2c:	683b      	ldr	r3, [r7, #0]
 800de2e:	885b      	ldrh	r3, [r3, #2]
 800de30:	2b01      	cmp	r3, #1
 800de32:	d10c      	bne.n	800de4e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	2200      	movs	r2, #0
 800de38:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800de3c:	6878      	ldr	r0, [r7, #4]
 800de3e:	f000 f910 	bl	800e062 <USBD_CtlSendStatus>
      }
      break;
 800de42:	e004      	b.n	800de4e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800de44:	6839      	ldr	r1, [r7, #0]
 800de46:	6878      	ldr	r0, [r7, #4]
 800de48:	f000 f840 	bl	800decc <USBD_CtlError>
      break;
 800de4c:	e000      	b.n	800de50 <USBD_ClrFeature+0x3c>
      break;
 800de4e:	bf00      	nop
  }
}
 800de50:	bf00      	nop
 800de52:	3708      	adds	r7, #8
 800de54:	46bd      	mov	sp, r7
 800de56:	bd80      	pop	{r7, pc}

0800de58 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800de58:	b580      	push	{r7, lr}
 800de5a:	b084      	sub	sp, #16
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	6078      	str	r0, [r7, #4]
 800de60:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800de62:	683b      	ldr	r3, [r7, #0]
 800de64:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	781a      	ldrb	r2, [r3, #0]
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	3301      	adds	r3, #1
 800de72:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	781a      	ldrb	r2, [r3, #0]
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	3301      	adds	r3, #1
 800de80:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800de82:	68f8      	ldr	r0, [r7, #12]
 800de84:	f7ff fa92 	bl	800d3ac <SWAPBYTE>
 800de88:	4603      	mov	r3, r0
 800de8a:	461a      	mov	r2, r3
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	3301      	adds	r3, #1
 800de94:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	3301      	adds	r3, #1
 800de9a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800de9c:	68f8      	ldr	r0, [r7, #12]
 800de9e:	f7ff fa85 	bl	800d3ac <SWAPBYTE>
 800dea2:	4603      	mov	r3, r0
 800dea4:	461a      	mov	r2, r3
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	3301      	adds	r3, #1
 800deae:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	3301      	adds	r3, #1
 800deb4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800deb6:	68f8      	ldr	r0, [r7, #12]
 800deb8:	f7ff fa78 	bl	800d3ac <SWAPBYTE>
 800debc:	4603      	mov	r3, r0
 800debe:	461a      	mov	r2, r3
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	80da      	strh	r2, [r3, #6]
}
 800dec4:	bf00      	nop
 800dec6:	3710      	adds	r7, #16
 800dec8:	46bd      	mov	sp, r7
 800deca:	bd80      	pop	{r7, pc}

0800decc <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800decc:	b580      	push	{r7, lr}
 800dece:	b082      	sub	sp, #8
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
 800ded4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ded6:	2180      	movs	r1, #128	@ 0x80
 800ded8:	6878      	ldr	r0, [r7, #4]
 800deda:	f000 fc95 	bl	800e808 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800dede:	2100      	movs	r1, #0
 800dee0:	6878      	ldr	r0, [r7, #4]
 800dee2:	f000 fc91 	bl	800e808 <USBD_LL_StallEP>
}
 800dee6:	bf00      	nop
 800dee8:	3708      	adds	r7, #8
 800deea:	46bd      	mov	sp, r7
 800deec:	bd80      	pop	{r7, pc}

0800deee <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800deee:	b580      	push	{r7, lr}
 800def0:	b086      	sub	sp, #24
 800def2:	af00      	add	r7, sp, #0
 800def4:	60f8      	str	r0, [r7, #12]
 800def6:	60b9      	str	r1, [r7, #8]
 800def8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800defa:	2300      	movs	r3, #0
 800defc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d036      	beq.n	800df72 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800df08:	6938      	ldr	r0, [r7, #16]
 800df0a:	f000 f836 	bl	800df7a <USBD_GetLen>
 800df0e:	4603      	mov	r3, r0
 800df10:	3301      	adds	r3, #1
 800df12:	b29b      	uxth	r3, r3
 800df14:	005b      	lsls	r3, r3, #1
 800df16:	b29a      	uxth	r2, r3
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800df1c:	7dfb      	ldrb	r3, [r7, #23]
 800df1e:	68ba      	ldr	r2, [r7, #8]
 800df20:	4413      	add	r3, r2
 800df22:	687a      	ldr	r2, [r7, #4]
 800df24:	7812      	ldrb	r2, [r2, #0]
 800df26:	701a      	strb	r2, [r3, #0]
  idx++;
 800df28:	7dfb      	ldrb	r3, [r7, #23]
 800df2a:	3301      	adds	r3, #1
 800df2c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800df2e:	7dfb      	ldrb	r3, [r7, #23]
 800df30:	68ba      	ldr	r2, [r7, #8]
 800df32:	4413      	add	r3, r2
 800df34:	2203      	movs	r2, #3
 800df36:	701a      	strb	r2, [r3, #0]
  idx++;
 800df38:	7dfb      	ldrb	r3, [r7, #23]
 800df3a:	3301      	adds	r3, #1
 800df3c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800df3e:	e013      	b.n	800df68 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800df40:	7dfb      	ldrb	r3, [r7, #23]
 800df42:	68ba      	ldr	r2, [r7, #8]
 800df44:	4413      	add	r3, r2
 800df46:	693a      	ldr	r2, [r7, #16]
 800df48:	7812      	ldrb	r2, [r2, #0]
 800df4a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800df4c:	693b      	ldr	r3, [r7, #16]
 800df4e:	3301      	adds	r3, #1
 800df50:	613b      	str	r3, [r7, #16]
    idx++;
 800df52:	7dfb      	ldrb	r3, [r7, #23]
 800df54:	3301      	adds	r3, #1
 800df56:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800df58:	7dfb      	ldrb	r3, [r7, #23]
 800df5a:	68ba      	ldr	r2, [r7, #8]
 800df5c:	4413      	add	r3, r2
 800df5e:	2200      	movs	r2, #0
 800df60:	701a      	strb	r2, [r3, #0]
    idx++;
 800df62:	7dfb      	ldrb	r3, [r7, #23]
 800df64:	3301      	adds	r3, #1
 800df66:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800df68:	693b      	ldr	r3, [r7, #16]
 800df6a:	781b      	ldrb	r3, [r3, #0]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d1e7      	bne.n	800df40 <USBD_GetString+0x52>
 800df70:	e000      	b.n	800df74 <USBD_GetString+0x86>
    return;
 800df72:	bf00      	nop
  }
}
 800df74:	3718      	adds	r7, #24
 800df76:	46bd      	mov	sp, r7
 800df78:	bd80      	pop	{r7, pc}

0800df7a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800df7a:	b480      	push	{r7}
 800df7c:	b085      	sub	sp, #20
 800df7e:	af00      	add	r7, sp, #0
 800df80:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800df82:	2300      	movs	r3, #0
 800df84:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800df8a:	e005      	b.n	800df98 <USBD_GetLen+0x1e>
  {
    len++;
 800df8c:	7bfb      	ldrb	r3, [r7, #15]
 800df8e:	3301      	adds	r3, #1
 800df90:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800df92:	68bb      	ldr	r3, [r7, #8]
 800df94:	3301      	adds	r3, #1
 800df96:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800df98:	68bb      	ldr	r3, [r7, #8]
 800df9a:	781b      	ldrb	r3, [r3, #0]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d1f5      	bne.n	800df8c <USBD_GetLen+0x12>
  }

  return len;
 800dfa0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	3714      	adds	r7, #20
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfac:	4770      	bx	lr

0800dfae <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800dfae:	b580      	push	{r7, lr}
 800dfb0:	b084      	sub	sp, #16
 800dfb2:	af00      	add	r7, sp, #0
 800dfb4:	60f8      	str	r0, [r7, #12]
 800dfb6:	60b9      	str	r1, [r7, #8]
 800dfb8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	2202      	movs	r2, #2
 800dfbe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	687a      	ldr	r2, [r7, #4]
 800dfc6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	687a      	ldr	r2, [r7, #4]
 800dfcc:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	68ba      	ldr	r2, [r7, #8]
 800dfd2:	2100      	movs	r1, #0
 800dfd4:	68f8      	ldr	r0, [r7, #12]
 800dfd6:	f000 fca0 	bl	800e91a <USBD_LL_Transmit>

  return USBD_OK;
 800dfda:	2300      	movs	r3, #0
}
 800dfdc:	4618      	mov	r0, r3
 800dfde:	3710      	adds	r7, #16
 800dfe0:	46bd      	mov	sp, r7
 800dfe2:	bd80      	pop	{r7, pc}

0800dfe4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800dfe4:	b580      	push	{r7, lr}
 800dfe6:	b084      	sub	sp, #16
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	60f8      	str	r0, [r7, #12]
 800dfec:	60b9      	str	r1, [r7, #8]
 800dfee:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	68ba      	ldr	r2, [r7, #8]
 800dff4:	2100      	movs	r1, #0
 800dff6:	68f8      	ldr	r0, [r7, #12]
 800dff8:	f000 fc8f 	bl	800e91a <USBD_LL_Transmit>

  return USBD_OK;
 800dffc:	2300      	movs	r3, #0
}
 800dffe:	4618      	mov	r0, r3
 800e000:	3710      	adds	r7, #16
 800e002:	46bd      	mov	sp, r7
 800e004:	bd80      	pop	{r7, pc}

0800e006 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e006:	b580      	push	{r7, lr}
 800e008:	b084      	sub	sp, #16
 800e00a:	af00      	add	r7, sp, #0
 800e00c:	60f8      	str	r0, [r7, #12]
 800e00e:	60b9      	str	r1, [r7, #8]
 800e010:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	2203      	movs	r2, #3
 800e016:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	687a      	ldr	r2, [r7, #4]
 800e01e:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	687a      	ldr	r2, [r7, #4]
 800e026:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	68ba      	ldr	r2, [r7, #8]
 800e02e:	2100      	movs	r1, #0
 800e030:	68f8      	ldr	r0, [r7, #12]
 800e032:	f000 fc93 	bl	800e95c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e036:	2300      	movs	r3, #0
}
 800e038:	4618      	mov	r0, r3
 800e03a:	3710      	adds	r7, #16
 800e03c:	46bd      	mov	sp, r7
 800e03e:	bd80      	pop	{r7, pc}

0800e040 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e040:	b580      	push	{r7, lr}
 800e042:	b084      	sub	sp, #16
 800e044:	af00      	add	r7, sp, #0
 800e046:	60f8      	str	r0, [r7, #12]
 800e048:	60b9      	str	r1, [r7, #8]
 800e04a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	68ba      	ldr	r2, [r7, #8]
 800e050:	2100      	movs	r1, #0
 800e052:	68f8      	ldr	r0, [r7, #12]
 800e054:	f000 fc82 	bl	800e95c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e058:	2300      	movs	r3, #0
}
 800e05a:	4618      	mov	r0, r3
 800e05c:	3710      	adds	r7, #16
 800e05e:	46bd      	mov	sp, r7
 800e060:	bd80      	pop	{r7, pc}

0800e062 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e062:	b580      	push	{r7, lr}
 800e064:	b082      	sub	sp, #8
 800e066:	af00      	add	r7, sp, #0
 800e068:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	2204      	movs	r2, #4
 800e06e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e072:	2300      	movs	r3, #0
 800e074:	2200      	movs	r2, #0
 800e076:	2100      	movs	r1, #0
 800e078:	6878      	ldr	r0, [r7, #4]
 800e07a:	f000 fc4e 	bl	800e91a <USBD_LL_Transmit>

  return USBD_OK;
 800e07e:	2300      	movs	r3, #0
}
 800e080:	4618      	mov	r0, r3
 800e082:	3708      	adds	r7, #8
 800e084:	46bd      	mov	sp, r7
 800e086:	bd80      	pop	{r7, pc}

0800e088 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b082      	sub	sp, #8
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	2205      	movs	r2, #5
 800e094:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e098:	2300      	movs	r3, #0
 800e09a:	2200      	movs	r2, #0
 800e09c:	2100      	movs	r1, #0
 800e09e:	6878      	ldr	r0, [r7, #4]
 800e0a0:	f000 fc5c 	bl	800e95c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e0a4:	2300      	movs	r3, #0
}
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	3708      	adds	r7, #8
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	bd80      	pop	{r7, pc}
	...

0800e0b0 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800e0b4:	2200      	movs	r2, #0
 800e0b6:	4912      	ldr	r1, [pc, #72]	@ (800e100 <MX_USB_Device_Init+0x50>)
 800e0b8:	4812      	ldr	r0, [pc, #72]	@ (800e104 <MX_USB_Device_Init+0x54>)
 800e0ba:	f7fe fed9 	bl	800ce70 <USBD_Init>
 800e0be:	4603      	mov	r3, r0
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d001      	beq.n	800e0c8 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800e0c4:	f7f3 f80e 	bl	80010e4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800e0c8:	490f      	ldr	r1, [pc, #60]	@ (800e108 <MX_USB_Device_Init+0x58>)
 800e0ca:	480e      	ldr	r0, [pc, #56]	@ (800e104 <MX_USB_Device_Init+0x54>)
 800e0cc:	f7fe ff00 	bl	800ced0 <USBD_RegisterClass>
 800e0d0:	4603      	mov	r3, r0
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d001      	beq.n	800e0da <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800e0d6:	f7f3 f805 	bl	80010e4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800e0da:	490c      	ldr	r1, [pc, #48]	@ (800e10c <MX_USB_Device_Init+0x5c>)
 800e0dc:	4809      	ldr	r0, [pc, #36]	@ (800e104 <MX_USB_Device_Init+0x54>)
 800e0de:	f7fe fe21 	bl	800cd24 <USBD_CDC_RegisterInterface>
 800e0e2:	4603      	mov	r3, r0
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d001      	beq.n	800e0ec <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800e0e8:	f7f2 fffc 	bl	80010e4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800e0ec:	4805      	ldr	r0, [pc, #20]	@ (800e104 <MX_USB_Device_Init+0x54>)
 800e0ee:	f7fe ff16 	bl	800cf1e <USBD_Start>
 800e0f2:	4603      	mov	r3, r0
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d001      	beq.n	800e0fc <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800e0f8:	f7f2 fff4 	bl	80010e4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800e0fc:	bf00      	nop
 800e0fe:	bd80      	pop	{r7, pc}
 800e100:	20000130 	.word	0x20000130
 800e104:	200034f4 	.word	0x200034f4
 800e108:	20000018 	.word	0x20000018
 800e10c:	2000011c 	.word	0x2000011c

0800e110 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e110:	b580      	push	{r7, lr}
 800e112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e114:	2200      	movs	r2, #0
 800e116:	4905      	ldr	r1, [pc, #20]	@ (800e12c <CDC_Init_FS+0x1c>)
 800e118:	4805      	ldr	r0, [pc, #20]	@ (800e130 <CDC_Init_FS+0x20>)
 800e11a:	f7fe fe18 	bl	800cd4e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e11e:	4905      	ldr	r1, [pc, #20]	@ (800e134 <CDC_Init_FS+0x24>)
 800e120:	4803      	ldr	r0, [pc, #12]	@ (800e130 <CDC_Init_FS+0x20>)
 800e122:	f7fe fe32 	bl	800cd8a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e126:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e128:	4618      	mov	r0, r3
 800e12a:	bd80      	pop	{r7, pc}
 800e12c:	20003fc4 	.word	0x20003fc4
 800e130:	200034f4 	.word	0x200034f4
 800e134:	200037c4 	.word	0x200037c4

0800e138 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e138:	b480      	push	{r7}
 800e13a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e13c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e13e:	4618      	mov	r0, r3
 800e140:	46bd      	mov	sp, r7
 800e142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e146:	4770      	bx	lr

0800e148 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e148:	b480      	push	{r7}
 800e14a:	b083      	sub	sp, #12
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	4603      	mov	r3, r0
 800e150:	6039      	str	r1, [r7, #0]
 800e152:	71fb      	strb	r3, [r7, #7]
 800e154:	4613      	mov	r3, r2
 800e156:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e158:	79fb      	ldrb	r3, [r7, #7]
 800e15a:	2b23      	cmp	r3, #35	@ 0x23
 800e15c:	d84a      	bhi.n	800e1f4 <CDC_Control_FS+0xac>
 800e15e:	a201      	add	r2, pc, #4	@ (adr r2, 800e164 <CDC_Control_FS+0x1c>)
 800e160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e164:	0800e1f5 	.word	0x0800e1f5
 800e168:	0800e1f5 	.word	0x0800e1f5
 800e16c:	0800e1f5 	.word	0x0800e1f5
 800e170:	0800e1f5 	.word	0x0800e1f5
 800e174:	0800e1f5 	.word	0x0800e1f5
 800e178:	0800e1f5 	.word	0x0800e1f5
 800e17c:	0800e1f5 	.word	0x0800e1f5
 800e180:	0800e1f5 	.word	0x0800e1f5
 800e184:	0800e1f5 	.word	0x0800e1f5
 800e188:	0800e1f5 	.word	0x0800e1f5
 800e18c:	0800e1f5 	.word	0x0800e1f5
 800e190:	0800e1f5 	.word	0x0800e1f5
 800e194:	0800e1f5 	.word	0x0800e1f5
 800e198:	0800e1f5 	.word	0x0800e1f5
 800e19c:	0800e1f5 	.word	0x0800e1f5
 800e1a0:	0800e1f5 	.word	0x0800e1f5
 800e1a4:	0800e1f5 	.word	0x0800e1f5
 800e1a8:	0800e1f5 	.word	0x0800e1f5
 800e1ac:	0800e1f5 	.word	0x0800e1f5
 800e1b0:	0800e1f5 	.word	0x0800e1f5
 800e1b4:	0800e1f5 	.word	0x0800e1f5
 800e1b8:	0800e1f5 	.word	0x0800e1f5
 800e1bc:	0800e1f5 	.word	0x0800e1f5
 800e1c0:	0800e1f5 	.word	0x0800e1f5
 800e1c4:	0800e1f5 	.word	0x0800e1f5
 800e1c8:	0800e1f5 	.word	0x0800e1f5
 800e1cc:	0800e1f5 	.word	0x0800e1f5
 800e1d0:	0800e1f5 	.word	0x0800e1f5
 800e1d4:	0800e1f5 	.word	0x0800e1f5
 800e1d8:	0800e1f5 	.word	0x0800e1f5
 800e1dc:	0800e1f5 	.word	0x0800e1f5
 800e1e0:	0800e1f5 	.word	0x0800e1f5
 800e1e4:	0800e1f5 	.word	0x0800e1f5
 800e1e8:	0800e1f5 	.word	0x0800e1f5
 800e1ec:	0800e1f5 	.word	0x0800e1f5
 800e1f0:	0800e1f5 	.word	0x0800e1f5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e1f4:	bf00      	nop
  }

  return (USBD_OK);
 800e1f6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	370c      	adds	r7, #12
 800e1fc:	46bd      	mov	sp, r7
 800e1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e202:	4770      	bx	lr

0800e204 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e204:	b580      	push	{r7, lr}
 800e206:	b082      	sub	sp, #8
 800e208:	af00      	add	r7, sp, #0
 800e20a:	6078      	str	r0, [r7, #4]
 800e20c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e20e:	6879      	ldr	r1, [r7, #4]
 800e210:	4805      	ldr	r0, [pc, #20]	@ (800e228 <CDC_Receive_FS+0x24>)
 800e212:	f7fe fdba 	bl	800cd8a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e216:	4804      	ldr	r0, [pc, #16]	@ (800e228 <CDC_Receive_FS+0x24>)
 800e218:	f7fe fe00 	bl	800ce1c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800e21c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e21e:	4618      	mov	r0, r3
 800e220:	3708      	adds	r7, #8
 800e222:	46bd      	mov	sp, r7
 800e224:	bd80      	pop	{r7, pc}
 800e226:	bf00      	nop
 800e228:	200034f4 	.word	0x200034f4

0800e22c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b084      	sub	sp, #16
 800e230:	af00      	add	r7, sp, #0
 800e232:	6078      	str	r0, [r7, #4]
 800e234:	460b      	mov	r3, r1
 800e236:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e238:	2300      	movs	r3, #0
 800e23a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800e23c:	4b0d      	ldr	r3, [pc, #52]	@ (800e274 <CDC_Transmit_FS+0x48>)
 800e23e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e242:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800e244:	68bb      	ldr	r3, [r7, #8]
 800e246:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d001      	beq.n	800e252 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800e24e:	2301      	movs	r3, #1
 800e250:	e00b      	b.n	800e26a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e252:	887b      	ldrh	r3, [r7, #2]
 800e254:	461a      	mov	r2, r3
 800e256:	6879      	ldr	r1, [r7, #4]
 800e258:	4806      	ldr	r0, [pc, #24]	@ (800e274 <CDC_Transmit_FS+0x48>)
 800e25a:	f7fe fd78 	bl	800cd4e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e25e:	4805      	ldr	r0, [pc, #20]	@ (800e274 <CDC_Transmit_FS+0x48>)
 800e260:	f7fe fdac 	bl	800cdbc <USBD_CDC_TransmitPacket>
 800e264:	4603      	mov	r3, r0
 800e266:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800e268:	7bfb      	ldrb	r3, [r7, #15]
}
 800e26a:	4618      	mov	r0, r3
 800e26c:	3710      	adds	r7, #16
 800e26e:	46bd      	mov	sp, r7
 800e270:	bd80      	pop	{r7, pc}
 800e272:	bf00      	nop
 800e274:	200034f4 	.word	0x200034f4

0800e278 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e278:	b480      	push	{r7}
 800e27a:	b087      	sub	sp, #28
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	60f8      	str	r0, [r7, #12]
 800e280:	60b9      	str	r1, [r7, #8]
 800e282:	4613      	mov	r3, r2
 800e284:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e286:	2300      	movs	r3, #0
 800e288:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e28a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e28e:	4618      	mov	r0, r3
 800e290:	371c      	adds	r7, #28
 800e292:	46bd      	mov	sp, r7
 800e294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e298:	4770      	bx	lr
	...

0800e29c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e29c:	b480      	push	{r7}
 800e29e:	b083      	sub	sp, #12
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	4603      	mov	r3, r0
 800e2a4:	6039      	str	r1, [r7, #0]
 800e2a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800e2a8:	683b      	ldr	r3, [r7, #0]
 800e2aa:	2212      	movs	r2, #18
 800e2ac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800e2ae:	4b03      	ldr	r3, [pc, #12]	@ (800e2bc <USBD_CDC_DeviceDescriptor+0x20>)
}
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	370c      	adds	r7, #12
 800e2b4:	46bd      	mov	sp, r7
 800e2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ba:	4770      	bx	lr
 800e2bc:	20000150 	.word	0x20000150

0800e2c0 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e2c0:	b480      	push	{r7}
 800e2c2:	b083      	sub	sp, #12
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	4603      	mov	r3, r0
 800e2c8:	6039      	str	r1, [r7, #0]
 800e2ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e2cc:	683b      	ldr	r3, [r7, #0]
 800e2ce:	2204      	movs	r2, #4
 800e2d0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e2d2:	4b03      	ldr	r3, [pc, #12]	@ (800e2e0 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	370c      	adds	r7, #12
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2de:	4770      	bx	lr
 800e2e0:	20000164 	.word	0x20000164

0800e2e4 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e2e4:	b580      	push	{r7, lr}
 800e2e6:	b082      	sub	sp, #8
 800e2e8:	af00      	add	r7, sp, #0
 800e2ea:	4603      	mov	r3, r0
 800e2ec:	6039      	str	r1, [r7, #0]
 800e2ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e2f0:	79fb      	ldrb	r3, [r7, #7]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d105      	bne.n	800e302 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800e2f6:	683a      	ldr	r2, [r7, #0]
 800e2f8:	4907      	ldr	r1, [pc, #28]	@ (800e318 <USBD_CDC_ProductStrDescriptor+0x34>)
 800e2fa:	4808      	ldr	r0, [pc, #32]	@ (800e31c <USBD_CDC_ProductStrDescriptor+0x38>)
 800e2fc:	f7ff fdf7 	bl	800deee <USBD_GetString>
 800e300:	e004      	b.n	800e30c <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800e302:	683a      	ldr	r2, [r7, #0]
 800e304:	4904      	ldr	r1, [pc, #16]	@ (800e318 <USBD_CDC_ProductStrDescriptor+0x34>)
 800e306:	4805      	ldr	r0, [pc, #20]	@ (800e31c <USBD_CDC_ProductStrDescriptor+0x38>)
 800e308:	f7ff fdf1 	bl	800deee <USBD_GetString>
  }
  return USBD_StrDesc;
 800e30c:	4b02      	ldr	r3, [pc, #8]	@ (800e318 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800e30e:	4618      	mov	r0, r3
 800e310:	3708      	adds	r7, #8
 800e312:	46bd      	mov	sp, r7
 800e314:	bd80      	pop	{r7, pc}
 800e316:	bf00      	nop
 800e318:	200047c4 	.word	0x200047c4
 800e31c:	0800feb0 	.word	0x0800feb0

0800e320 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e320:	b580      	push	{r7, lr}
 800e322:	b082      	sub	sp, #8
 800e324:	af00      	add	r7, sp, #0
 800e326:	4603      	mov	r3, r0
 800e328:	6039      	str	r1, [r7, #0]
 800e32a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e32c:	683a      	ldr	r2, [r7, #0]
 800e32e:	4904      	ldr	r1, [pc, #16]	@ (800e340 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800e330:	4804      	ldr	r0, [pc, #16]	@ (800e344 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800e332:	f7ff fddc 	bl	800deee <USBD_GetString>
  return USBD_StrDesc;
 800e336:	4b02      	ldr	r3, [pc, #8]	@ (800e340 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800e338:	4618      	mov	r0, r3
 800e33a:	3708      	adds	r7, #8
 800e33c:	46bd      	mov	sp, r7
 800e33e:	bd80      	pop	{r7, pc}
 800e340:	200047c4 	.word	0x200047c4
 800e344:	0800fec8 	.word	0x0800fec8

0800e348 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e348:	b580      	push	{r7, lr}
 800e34a:	b082      	sub	sp, #8
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	4603      	mov	r3, r0
 800e350:	6039      	str	r1, [r7, #0]
 800e352:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e354:	683b      	ldr	r3, [r7, #0]
 800e356:	221a      	movs	r2, #26
 800e358:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e35a:	f000 f843 	bl	800e3e4 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800e35e:	4b02      	ldr	r3, [pc, #8]	@ (800e368 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800e360:	4618      	mov	r0, r3
 800e362:	3708      	adds	r7, #8
 800e364:	46bd      	mov	sp, r7
 800e366:	bd80      	pop	{r7, pc}
 800e368:	20000168 	.word	0x20000168

0800e36c <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e36c:	b580      	push	{r7, lr}
 800e36e:	b082      	sub	sp, #8
 800e370:	af00      	add	r7, sp, #0
 800e372:	4603      	mov	r3, r0
 800e374:	6039      	str	r1, [r7, #0]
 800e376:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e378:	79fb      	ldrb	r3, [r7, #7]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d105      	bne.n	800e38a <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800e37e:	683a      	ldr	r2, [r7, #0]
 800e380:	4907      	ldr	r1, [pc, #28]	@ (800e3a0 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800e382:	4808      	ldr	r0, [pc, #32]	@ (800e3a4 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800e384:	f7ff fdb3 	bl	800deee <USBD_GetString>
 800e388:	e004      	b.n	800e394 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800e38a:	683a      	ldr	r2, [r7, #0]
 800e38c:	4904      	ldr	r1, [pc, #16]	@ (800e3a0 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800e38e:	4805      	ldr	r0, [pc, #20]	@ (800e3a4 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800e390:	f7ff fdad 	bl	800deee <USBD_GetString>
  }
  return USBD_StrDesc;
 800e394:	4b02      	ldr	r3, [pc, #8]	@ (800e3a0 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800e396:	4618      	mov	r0, r3
 800e398:	3708      	adds	r7, #8
 800e39a:	46bd      	mov	sp, r7
 800e39c:	bd80      	pop	{r7, pc}
 800e39e:	bf00      	nop
 800e3a0:	200047c4 	.word	0x200047c4
 800e3a4:	0800fedc 	.word	0x0800fedc

0800e3a8 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e3a8:	b580      	push	{r7, lr}
 800e3aa:	b082      	sub	sp, #8
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	4603      	mov	r3, r0
 800e3b0:	6039      	str	r1, [r7, #0]
 800e3b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e3b4:	79fb      	ldrb	r3, [r7, #7]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d105      	bne.n	800e3c6 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800e3ba:	683a      	ldr	r2, [r7, #0]
 800e3bc:	4907      	ldr	r1, [pc, #28]	@ (800e3dc <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800e3be:	4808      	ldr	r0, [pc, #32]	@ (800e3e0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800e3c0:	f7ff fd95 	bl	800deee <USBD_GetString>
 800e3c4:	e004      	b.n	800e3d0 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800e3c6:	683a      	ldr	r2, [r7, #0]
 800e3c8:	4904      	ldr	r1, [pc, #16]	@ (800e3dc <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800e3ca:	4805      	ldr	r0, [pc, #20]	@ (800e3e0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800e3cc:	f7ff fd8f 	bl	800deee <USBD_GetString>
  }
  return USBD_StrDesc;
 800e3d0:	4b02      	ldr	r3, [pc, #8]	@ (800e3dc <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	3708      	adds	r7, #8
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	bd80      	pop	{r7, pc}
 800e3da:	bf00      	nop
 800e3dc:	200047c4 	.word	0x200047c4
 800e3e0:	0800fee8 	.word	0x0800fee8

0800e3e4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e3e4:	b580      	push	{r7, lr}
 800e3e6:	b084      	sub	sp, #16
 800e3e8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e3ea:	4b0f      	ldr	r3, [pc, #60]	@ (800e428 <Get_SerialNum+0x44>)
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e3f0:	4b0e      	ldr	r3, [pc, #56]	@ (800e42c <Get_SerialNum+0x48>)
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e3f6:	4b0e      	ldr	r3, [pc, #56]	@ (800e430 <Get_SerialNum+0x4c>)
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e3fc:	68fa      	ldr	r2, [r7, #12]
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	4413      	add	r3, r2
 800e402:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	2b00      	cmp	r3, #0
 800e408:	d009      	beq.n	800e41e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e40a:	2208      	movs	r2, #8
 800e40c:	4909      	ldr	r1, [pc, #36]	@ (800e434 <Get_SerialNum+0x50>)
 800e40e:	68f8      	ldr	r0, [r7, #12]
 800e410:	f000 f814 	bl	800e43c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e414:	2204      	movs	r2, #4
 800e416:	4908      	ldr	r1, [pc, #32]	@ (800e438 <Get_SerialNum+0x54>)
 800e418:	68b8      	ldr	r0, [r7, #8]
 800e41a:	f000 f80f 	bl	800e43c <IntToUnicode>
  }
}
 800e41e:	bf00      	nop
 800e420:	3710      	adds	r7, #16
 800e422:	46bd      	mov	sp, r7
 800e424:	bd80      	pop	{r7, pc}
 800e426:	bf00      	nop
 800e428:	1fff7590 	.word	0x1fff7590
 800e42c:	1fff7594 	.word	0x1fff7594
 800e430:	1fff7598 	.word	0x1fff7598
 800e434:	2000016a 	.word	0x2000016a
 800e438:	2000017a 	.word	0x2000017a

0800e43c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e43c:	b480      	push	{r7}
 800e43e:	b087      	sub	sp, #28
 800e440:	af00      	add	r7, sp, #0
 800e442:	60f8      	str	r0, [r7, #12]
 800e444:	60b9      	str	r1, [r7, #8]
 800e446:	4613      	mov	r3, r2
 800e448:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e44a:	2300      	movs	r3, #0
 800e44c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e44e:	2300      	movs	r3, #0
 800e450:	75fb      	strb	r3, [r7, #23]
 800e452:	e027      	b.n	800e4a4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	0f1b      	lsrs	r3, r3, #28
 800e458:	2b09      	cmp	r3, #9
 800e45a:	d80b      	bhi.n	800e474 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	0f1b      	lsrs	r3, r3, #28
 800e460:	b2da      	uxtb	r2, r3
 800e462:	7dfb      	ldrb	r3, [r7, #23]
 800e464:	005b      	lsls	r3, r3, #1
 800e466:	4619      	mov	r1, r3
 800e468:	68bb      	ldr	r3, [r7, #8]
 800e46a:	440b      	add	r3, r1
 800e46c:	3230      	adds	r2, #48	@ 0x30
 800e46e:	b2d2      	uxtb	r2, r2
 800e470:	701a      	strb	r2, [r3, #0]
 800e472:	e00a      	b.n	800e48a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	0f1b      	lsrs	r3, r3, #28
 800e478:	b2da      	uxtb	r2, r3
 800e47a:	7dfb      	ldrb	r3, [r7, #23]
 800e47c:	005b      	lsls	r3, r3, #1
 800e47e:	4619      	mov	r1, r3
 800e480:	68bb      	ldr	r3, [r7, #8]
 800e482:	440b      	add	r3, r1
 800e484:	3237      	adds	r2, #55	@ 0x37
 800e486:	b2d2      	uxtb	r2, r2
 800e488:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	011b      	lsls	r3, r3, #4
 800e48e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e490:	7dfb      	ldrb	r3, [r7, #23]
 800e492:	005b      	lsls	r3, r3, #1
 800e494:	3301      	adds	r3, #1
 800e496:	68ba      	ldr	r2, [r7, #8]
 800e498:	4413      	add	r3, r2
 800e49a:	2200      	movs	r2, #0
 800e49c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e49e:	7dfb      	ldrb	r3, [r7, #23]
 800e4a0:	3301      	adds	r3, #1
 800e4a2:	75fb      	strb	r3, [r7, #23]
 800e4a4:	7dfa      	ldrb	r2, [r7, #23]
 800e4a6:	79fb      	ldrb	r3, [r7, #7]
 800e4a8:	429a      	cmp	r2, r3
 800e4aa:	d3d3      	bcc.n	800e454 <IntToUnicode+0x18>
  }
}
 800e4ac:	bf00      	nop
 800e4ae:	bf00      	nop
 800e4b0:	371c      	adds	r7, #28
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b8:	4770      	bx	lr
	...

0800e4bc <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	b098      	sub	sp, #96	@ 0x60
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800e4c4:	f107 030c 	add.w	r3, r7, #12
 800e4c8:	2254      	movs	r2, #84	@ 0x54
 800e4ca:	2100      	movs	r1, #0
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	f000 fb19 	bl	800eb04 <memset>
  if(pcdHandle->Instance==USB)
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	4a15      	ldr	r2, [pc, #84]	@ (800e52c <HAL_PCD_MspInit+0x70>)
 800e4d8:	4293      	cmp	r3, r2
 800e4da:	d122      	bne.n	800e522 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800e4dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800e4e0:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800e4e2:	2300      	movs	r3, #0
 800e4e4:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800e4e6:	f107 030c 	add.w	r3, r7, #12
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	f7f8 fd90 	bl	8007010 <HAL_RCCEx_PeriphCLKConfig>
 800e4f0:	4603      	mov	r3, r0
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d001      	beq.n	800e4fa <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800e4f6:	f7f2 fdf5 	bl	80010e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800e4fa:	4b0d      	ldr	r3, [pc, #52]	@ (800e530 <HAL_PCD_MspInit+0x74>)
 800e4fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e4fe:	4a0c      	ldr	r2, [pc, #48]	@ (800e530 <HAL_PCD_MspInit+0x74>)
 800e500:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800e504:	6593      	str	r3, [r2, #88]	@ 0x58
 800e506:	4b0a      	ldr	r3, [pc, #40]	@ (800e530 <HAL_PCD_MspInit+0x74>)
 800e508:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e50a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e50e:	60bb      	str	r3, [r7, #8]
 800e510:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800e512:	2200      	movs	r2, #0
 800e514:	2100      	movs	r1, #0
 800e516:	2014      	movs	r0, #20
 800e518:	f7f5 fd37 	bl	8003f8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800e51c:	2014      	movs	r0, #20
 800e51e:	f7f5 fd4e 	bl	8003fbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800e522:	bf00      	nop
 800e524:	3760      	adds	r7, #96	@ 0x60
 800e526:	46bd      	mov	sp, r7
 800e528:	bd80      	pop	{r7, pc}
 800e52a:	bf00      	nop
 800e52c:	40005c00 	.word	0x40005c00
 800e530:	40021000 	.word	0x40021000

0800e534 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e534:	b580      	push	{r7, lr}
 800e536:	b082      	sub	sp, #8
 800e538:	af00      	add	r7, sp, #0
 800e53a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800e548:	4619      	mov	r1, r3
 800e54a:	4610      	mov	r0, r2
 800e54c:	f7fe fd32 	bl	800cfb4 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800e550:	bf00      	nop
 800e552:	3708      	adds	r7, #8
 800e554:	46bd      	mov	sp, r7
 800e556:	bd80      	pop	{r7, pc}

0800e558 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e558:	b580      	push	{r7, lr}
 800e55a:	b082      	sub	sp, #8
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	6078      	str	r0, [r7, #4]
 800e560:	460b      	mov	r3, r1
 800e562:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800e56a:	78fa      	ldrb	r2, [r7, #3]
 800e56c:	6879      	ldr	r1, [r7, #4]
 800e56e:	4613      	mov	r3, r2
 800e570:	009b      	lsls	r3, r3, #2
 800e572:	4413      	add	r3, r2
 800e574:	00db      	lsls	r3, r3, #3
 800e576:	440b      	add	r3, r1
 800e578:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e57c:	681a      	ldr	r2, [r3, #0]
 800e57e:	78fb      	ldrb	r3, [r7, #3]
 800e580:	4619      	mov	r1, r3
 800e582:	f7fe fd6c 	bl	800d05e <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800e586:	bf00      	nop
 800e588:	3708      	adds	r7, #8
 800e58a:	46bd      	mov	sp, r7
 800e58c:	bd80      	pop	{r7, pc}

0800e58e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e58e:	b580      	push	{r7, lr}
 800e590:	b082      	sub	sp, #8
 800e592:	af00      	add	r7, sp, #0
 800e594:	6078      	str	r0, [r7, #4]
 800e596:	460b      	mov	r3, r1
 800e598:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800e5a0:	78fa      	ldrb	r2, [r7, #3]
 800e5a2:	6879      	ldr	r1, [r7, #4]
 800e5a4:	4613      	mov	r3, r2
 800e5a6:	009b      	lsls	r3, r3, #2
 800e5a8:	4413      	add	r3, r2
 800e5aa:	00db      	lsls	r3, r3, #3
 800e5ac:	440b      	add	r3, r1
 800e5ae:	3324      	adds	r3, #36	@ 0x24
 800e5b0:	681a      	ldr	r2, [r3, #0]
 800e5b2:	78fb      	ldrb	r3, [r7, #3]
 800e5b4:	4619      	mov	r1, r3
 800e5b6:	f7fe fdb5 	bl	800d124 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800e5ba:	bf00      	nop
 800e5bc:	3708      	adds	r7, #8
 800e5be:	46bd      	mov	sp, r7
 800e5c0:	bd80      	pop	{r7, pc}

0800e5c2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e5c2:	b580      	push	{r7, lr}
 800e5c4:	b082      	sub	sp, #8
 800e5c6:	af00      	add	r7, sp, #0
 800e5c8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	f7fe fec9 	bl	800d368 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800e5d6:	bf00      	nop
 800e5d8:	3708      	adds	r7, #8
 800e5da:	46bd      	mov	sp, r7
 800e5dc:	bd80      	pop	{r7, pc}

0800e5de <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e5de:	b580      	push	{r7, lr}
 800e5e0:	b084      	sub	sp, #16
 800e5e2:	af00      	add	r7, sp, #0
 800e5e4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e5e6:	2301      	movs	r3, #1
 800e5e8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	795b      	ldrb	r3, [r3, #5]
 800e5ee:	2b02      	cmp	r3, #2
 800e5f0:	d001      	beq.n	800e5f6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e5f2:	f7f2 fd77 	bl	80010e4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e5fc:	7bfa      	ldrb	r2, [r7, #15]
 800e5fe:	4611      	mov	r1, r2
 800e600:	4618      	mov	r0, r3
 800e602:	f7fe fe73 	bl	800d2ec <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e60c:	4618      	mov	r0, r3
 800e60e:	f7fe fe1f 	bl	800d250 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800e612:	bf00      	nop
 800e614:	3710      	adds	r7, #16
 800e616:	46bd      	mov	sp, r7
 800e618:	bd80      	pop	{r7, pc}
	...

0800e61c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e61c:	b580      	push	{r7, lr}
 800e61e:	b082      	sub	sp, #8
 800e620:	af00      	add	r7, sp, #0
 800e622:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e62a:	4618      	mov	r0, r3
 800e62c:	f7fe fe6e 	bl	800d30c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	7a5b      	ldrb	r3, [r3, #9]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d005      	beq.n	800e644 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e638:	4b04      	ldr	r3, [pc, #16]	@ (800e64c <HAL_PCD_SuspendCallback+0x30>)
 800e63a:	691b      	ldr	r3, [r3, #16]
 800e63c:	4a03      	ldr	r2, [pc, #12]	@ (800e64c <HAL_PCD_SuspendCallback+0x30>)
 800e63e:	f043 0306 	orr.w	r3, r3, #6
 800e642:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800e644:	bf00      	nop
 800e646:	3708      	adds	r7, #8
 800e648:	46bd      	mov	sp, r7
 800e64a:	bd80      	pop	{r7, pc}
 800e64c:	e000ed00 	.word	0xe000ed00

0800e650 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e650:	b580      	push	{r7, lr}
 800e652:	b082      	sub	sp, #8
 800e654:	af00      	add	r7, sp, #0
 800e656:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	7a5b      	ldrb	r3, [r3, #9]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d007      	beq.n	800e670 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e660:	4b08      	ldr	r3, [pc, #32]	@ (800e684 <HAL_PCD_ResumeCallback+0x34>)
 800e662:	691b      	ldr	r3, [r3, #16]
 800e664:	4a07      	ldr	r2, [pc, #28]	@ (800e684 <HAL_PCD_ResumeCallback+0x34>)
 800e666:	f023 0306 	bic.w	r3, r3, #6
 800e66a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800e66c:	f000 f9f8 	bl	800ea60 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e676:	4618      	mov	r0, r3
 800e678:	f7fe fe5e 	bl	800d338 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800e67c:	bf00      	nop
 800e67e:	3708      	adds	r7, #8
 800e680:	46bd      	mov	sp, r7
 800e682:	bd80      	pop	{r7, pc}
 800e684:	e000ed00 	.word	0xe000ed00

0800e688 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e688:	b580      	push	{r7, lr}
 800e68a:	b082      	sub	sp, #8
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800e690:	4a2b      	ldr	r2, [pc, #172]	@ (800e740 <USBD_LL_Init+0xb8>)
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	4a29      	ldr	r2, [pc, #164]	@ (800e740 <USBD_LL_Init+0xb8>)
 800e69c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800e6a0:	4b27      	ldr	r3, [pc, #156]	@ (800e740 <USBD_LL_Init+0xb8>)
 800e6a2:	4a28      	ldr	r2, [pc, #160]	@ (800e744 <USBD_LL_Init+0xbc>)
 800e6a4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800e6a6:	4b26      	ldr	r3, [pc, #152]	@ (800e740 <USBD_LL_Init+0xb8>)
 800e6a8:	2208      	movs	r2, #8
 800e6aa:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800e6ac:	4b24      	ldr	r3, [pc, #144]	@ (800e740 <USBD_LL_Init+0xb8>)
 800e6ae:	2202      	movs	r2, #2
 800e6b0:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e6b2:	4b23      	ldr	r3, [pc, #140]	@ (800e740 <USBD_LL_Init+0xb8>)
 800e6b4:	2202      	movs	r2, #2
 800e6b6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800e6b8:	4b21      	ldr	r3, [pc, #132]	@ (800e740 <USBD_LL_Init+0xb8>)
 800e6ba:	2200      	movs	r2, #0
 800e6bc:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800e6be:	4b20      	ldr	r3, [pc, #128]	@ (800e740 <USBD_LL_Init+0xb8>)
 800e6c0:	2200      	movs	r2, #0
 800e6c2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800e6c4:	4b1e      	ldr	r3, [pc, #120]	@ (800e740 <USBD_LL_Init+0xb8>)
 800e6c6:	2200      	movs	r2, #0
 800e6c8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800e6ca:	4b1d      	ldr	r3, [pc, #116]	@ (800e740 <USBD_LL_Init+0xb8>)
 800e6cc:	2200      	movs	r2, #0
 800e6ce:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800e6d0:	481b      	ldr	r0, [pc, #108]	@ (800e740 <USBD_LL_Init+0xb8>)
 800e6d2:	f7f6 f9c0 	bl	8004a56 <HAL_PCD_Init>
 800e6d6:	4603      	mov	r3, r0
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d001      	beq.n	800e6e0 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800e6dc:	f7f2 fd02 	bl	80010e4 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800e6e6:	2318      	movs	r3, #24
 800e6e8:	2200      	movs	r2, #0
 800e6ea:	2100      	movs	r1, #0
 800e6ec:	f7f7 fe79 	bl	80063e2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800e6f6:	2358      	movs	r3, #88	@ 0x58
 800e6f8:	2200      	movs	r2, #0
 800e6fa:	2180      	movs	r1, #128	@ 0x80
 800e6fc:	f7f7 fe71 	bl	80063e2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800e706:	23c0      	movs	r3, #192	@ 0xc0
 800e708:	2200      	movs	r2, #0
 800e70a:	2181      	movs	r1, #129	@ 0x81
 800e70c:	f7f7 fe69 	bl	80063e2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800e716:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800e71a:	2200      	movs	r2, #0
 800e71c:	2101      	movs	r1, #1
 800e71e:	f7f7 fe60 	bl	80063e2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800e728:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e72c:	2200      	movs	r2, #0
 800e72e:	2182      	movs	r1, #130	@ 0x82
 800e730:	f7f7 fe57 	bl	80063e2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800e734:	2300      	movs	r3, #0
}
 800e736:	4618      	mov	r0, r3
 800e738:	3708      	adds	r7, #8
 800e73a:	46bd      	mov	sp, r7
 800e73c:	bd80      	pop	{r7, pc}
 800e73e:	bf00      	nop
 800e740:	200049c4 	.word	0x200049c4
 800e744:	40005c00 	.word	0x40005c00

0800e748 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e748:	b580      	push	{r7, lr}
 800e74a:	b084      	sub	sp, #16
 800e74c:	af00      	add	r7, sp, #0
 800e74e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e750:	2300      	movs	r3, #0
 800e752:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e754:	2300      	movs	r3, #0
 800e756:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e75e:	4618      	mov	r0, r3
 800e760:	f7f6 fa47 	bl	8004bf2 <HAL_PCD_Start>
 800e764:	4603      	mov	r3, r0
 800e766:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e768:	7bfb      	ldrb	r3, [r7, #15]
 800e76a:	4618      	mov	r0, r3
 800e76c:	f000 f97e 	bl	800ea6c <USBD_Get_USB_Status>
 800e770:	4603      	mov	r3, r0
 800e772:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e774:	7bbb      	ldrb	r3, [r7, #14]
}
 800e776:	4618      	mov	r0, r3
 800e778:	3710      	adds	r7, #16
 800e77a:	46bd      	mov	sp, r7
 800e77c:	bd80      	pop	{r7, pc}

0800e77e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e77e:	b580      	push	{r7, lr}
 800e780:	b084      	sub	sp, #16
 800e782:	af00      	add	r7, sp, #0
 800e784:	6078      	str	r0, [r7, #4]
 800e786:	4608      	mov	r0, r1
 800e788:	4611      	mov	r1, r2
 800e78a:	461a      	mov	r2, r3
 800e78c:	4603      	mov	r3, r0
 800e78e:	70fb      	strb	r3, [r7, #3]
 800e790:	460b      	mov	r3, r1
 800e792:	70bb      	strb	r3, [r7, #2]
 800e794:	4613      	mov	r3, r2
 800e796:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e798:	2300      	movs	r3, #0
 800e79a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e79c:	2300      	movs	r3, #0
 800e79e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800e7a6:	78bb      	ldrb	r3, [r7, #2]
 800e7a8:	883a      	ldrh	r2, [r7, #0]
 800e7aa:	78f9      	ldrb	r1, [r7, #3]
 800e7ac:	f7f6 fb8e 	bl	8004ecc <HAL_PCD_EP_Open>
 800e7b0:	4603      	mov	r3, r0
 800e7b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e7b4:	7bfb      	ldrb	r3, [r7, #15]
 800e7b6:	4618      	mov	r0, r3
 800e7b8:	f000 f958 	bl	800ea6c <USBD_Get_USB_Status>
 800e7bc:	4603      	mov	r3, r0
 800e7be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e7c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	3710      	adds	r7, #16
 800e7c6:	46bd      	mov	sp, r7
 800e7c8:	bd80      	pop	{r7, pc}

0800e7ca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e7ca:	b580      	push	{r7, lr}
 800e7cc:	b084      	sub	sp, #16
 800e7ce:	af00      	add	r7, sp, #0
 800e7d0:	6078      	str	r0, [r7, #4]
 800e7d2:	460b      	mov	r3, r1
 800e7d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e7d6:	2300      	movs	r3, #0
 800e7d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e7da:	2300      	movs	r3, #0
 800e7dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e7e4:	78fa      	ldrb	r2, [r7, #3]
 800e7e6:	4611      	mov	r1, r2
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	f7f6 fbcc 	bl	8004f86 <HAL_PCD_EP_Close>
 800e7ee:	4603      	mov	r3, r0
 800e7f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e7f2:	7bfb      	ldrb	r3, [r7, #15]
 800e7f4:	4618      	mov	r0, r3
 800e7f6:	f000 f939 	bl	800ea6c <USBD_Get_USB_Status>
 800e7fa:	4603      	mov	r3, r0
 800e7fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e7fe:	7bbb      	ldrb	r3, [r7, #14]
}
 800e800:	4618      	mov	r0, r3
 800e802:	3710      	adds	r7, #16
 800e804:	46bd      	mov	sp, r7
 800e806:	bd80      	pop	{r7, pc}

0800e808 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e808:	b580      	push	{r7, lr}
 800e80a:	b084      	sub	sp, #16
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	6078      	str	r0, [r7, #4]
 800e810:	460b      	mov	r3, r1
 800e812:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e814:	2300      	movs	r3, #0
 800e816:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e818:	2300      	movs	r3, #0
 800e81a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e822:	78fa      	ldrb	r2, [r7, #3]
 800e824:	4611      	mov	r1, r2
 800e826:	4618      	mov	r0, r3
 800e828:	f7f6 fc75 	bl	8005116 <HAL_PCD_EP_SetStall>
 800e82c:	4603      	mov	r3, r0
 800e82e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e830:	7bfb      	ldrb	r3, [r7, #15]
 800e832:	4618      	mov	r0, r3
 800e834:	f000 f91a 	bl	800ea6c <USBD_Get_USB_Status>
 800e838:	4603      	mov	r3, r0
 800e83a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e83c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e83e:	4618      	mov	r0, r3
 800e840:	3710      	adds	r7, #16
 800e842:	46bd      	mov	sp, r7
 800e844:	bd80      	pop	{r7, pc}

0800e846 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e846:	b580      	push	{r7, lr}
 800e848:	b084      	sub	sp, #16
 800e84a:	af00      	add	r7, sp, #0
 800e84c:	6078      	str	r0, [r7, #4]
 800e84e:	460b      	mov	r3, r1
 800e850:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e852:	2300      	movs	r3, #0
 800e854:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e856:	2300      	movs	r3, #0
 800e858:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e860:	78fa      	ldrb	r2, [r7, #3]
 800e862:	4611      	mov	r1, r2
 800e864:	4618      	mov	r0, r3
 800e866:	f7f6 fca8 	bl	80051ba <HAL_PCD_EP_ClrStall>
 800e86a:	4603      	mov	r3, r0
 800e86c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e86e:	7bfb      	ldrb	r3, [r7, #15]
 800e870:	4618      	mov	r0, r3
 800e872:	f000 f8fb 	bl	800ea6c <USBD_Get_USB_Status>
 800e876:	4603      	mov	r3, r0
 800e878:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e87a:	7bbb      	ldrb	r3, [r7, #14]
}
 800e87c:	4618      	mov	r0, r3
 800e87e:	3710      	adds	r7, #16
 800e880:	46bd      	mov	sp, r7
 800e882:	bd80      	pop	{r7, pc}

0800e884 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e884:	b480      	push	{r7}
 800e886:	b085      	sub	sp, #20
 800e888:	af00      	add	r7, sp, #0
 800e88a:	6078      	str	r0, [r7, #4]
 800e88c:	460b      	mov	r3, r1
 800e88e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e896:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e898:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	da0b      	bge.n	800e8b8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e8a0:	78fb      	ldrb	r3, [r7, #3]
 800e8a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e8a6:	68f9      	ldr	r1, [r7, #12]
 800e8a8:	4613      	mov	r3, r2
 800e8aa:	009b      	lsls	r3, r3, #2
 800e8ac:	4413      	add	r3, r2
 800e8ae:	00db      	lsls	r3, r3, #3
 800e8b0:	440b      	add	r3, r1
 800e8b2:	3312      	adds	r3, #18
 800e8b4:	781b      	ldrb	r3, [r3, #0]
 800e8b6:	e00b      	b.n	800e8d0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e8b8:	78fb      	ldrb	r3, [r7, #3]
 800e8ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e8be:	68f9      	ldr	r1, [r7, #12]
 800e8c0:	4613      	mov	r3, r2
 800e8c2:	009b      	lsls	r3, r3, #2
 800e8c4:	4413      	add	r3, r2
 800e8c6:	00db      	lsls	r3, r3, #3
 800e8c8:	440b      	add	r3, r1
 800e8ca:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800e8ce:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	3714      	adds	r7, #20
 800e8d4:	46bd      	mov	sp, r7
 800e8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8da:	4770      	bx	lr

0800e8dc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e8dc:	b580      	push	{r7, lr}
 800e8de:	b084      	sub	sp, #16
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	6078      	str	r0, [r7, #4]
 800e8e4:	460b      	mov	r3, r1
 800e8e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e8e8:	2300      	movs	r3, #0
 800e8ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e8f6:	78fa      	ldrb	r2, [r7, #3]
 800e8f8:	4611      	mov	r1, r2
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	f7f6 fac2 	bl	8004e84 <HAL_PCD_SetAddress>
 800e900:	4603      	mov	r3, r0
 800e902:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e904:	7bfb      	ldrb	r3, [r7, #15]
 800e906:	4618      	mov	r0, r3
 800e908:	f000 f8b0 	bl	800ea6c <USBD_Get_USB_Status>
 800e90c:	4603      	mov	r3, r0
 800e90e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e910:	7bbb      	ldrb	r3, [r7, #14]
}
 800e912:	4618      	mov	r0, r3
 800e914:	3710      	adds	r7, #16
 800e916:	46bd      	mov	sp, r7
 800e918:	bd80      	pop	{r7, pc}

0800e91a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e91a:	b580      	push	{r7, lr}
 800e91c:	b086      	sub	sp, #24
 800e91e:	af00      	add	r7, sp, #0
 800e920:	60f8      	str	r0, [r7, #12]
 800e922:	607a      	str	r2, [r7, #4]
 800e924:	603b      	str	r3, [r7, #0]
 800e926:	460b      	mov	r3, r1
 800e928:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e92a:	2300      	movs	r3, #0
 800e92c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e92e:	2300      	movs	r3, #0
 800e930:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800e938:	7af9      	ldrb	r1, [r7, #11]
 800e93a:	683b      	ldr	r3, [r7, #0]
 800e93c:	687a      	ldr	r2, [r7, #4]
 800e93e:	f7f6 fbb3 	bl	80050a8 <HAL_PCD_EP_Transmit>
 800e942:	4603      	mov	r3, r0
 800e944:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e946:	7dfb      	ldrb	r3, [r7, #23]
 800e948:	4618      	mov	r0, r3
 800e94a:	f000 f88f 	bl	800ea6c <USBD_Get_USB_Status>
 800e94e:	4603      	mov	r3, r0
 800e950:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e952:	7dbb      	ldrb	r3, [r7, #22]
}
 800e954:	4618      	mov	r0, r3
 800e956:	3718      	adds	r7, #24
 800e958:	46bd      	mov	sp, r7
 800e95a:	bd80      	pop	{r7, pc}

0800e95c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e95c:	b580      	push	{r7, lr}
 800e95e:	b086      	sub	sp, #24
 800e960:	af00      	add	r7, sp, #0
 800e962:	60f8      	str	r0, [r7, #12]
 800e964:	607a      	str	r2, [r7, #4]
 800e966:	603b      	str	r3, [r7, #0]
 800e968:	460b      	mov	r3, r1
 800e96a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e96c:	2300      	movs	r3, #0
 800e96e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e970:	2300      	movs	r3, #0
 800e972:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800e97a:	7af9      	ldrb	r1, [r7, #11]
 800e97c:	683b      	ldr	r3, [r7, #0]
 800e97e:	687a      	ldr	r2, [r7, #4]
 800e980:	f7f6 fb49 	bl	8005016 <HAL_PCD_EP_Receive>
 800e984:	4603      	mov	r3, r0
 800e986:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e988:	7dfb      	ldrb	r3, [r7, #23]
 800e98a:	4618      	mov	r0, r3
 800e98c:	f000 f86e 	bl	800ea6c <USBD_Get_USB_Status>
 800e990:	4603      	mov	r3, r0
 800e992:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e994:	7dbb      	ldrb	r3, [r7, #22]
}
 800e996:	4618      	mov	r0, r3
 800e998:	3718      	adds	r7, #24
 800e99a:	46bd      	mov	sp, r7
 800e99c:	bd80      	pop	{r7, pc}

0800e99e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e99e:	b580      	push	{r7, lr}
 800e9a0:	b082      	sub	sp, #8
 800e9a2:	af00      	add	r7, sp, #0
 800e9a4:	6078      	str	r0, [r7, #4]
 800e9a6:	460b      	mov	r3, r1
 800e9a8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e9b0:	78fa      	ldrb	r2, [r7, #3]
 800e9b2:	4611      	mov	r1, r2
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	f7f6 fb5f 	bl	8005078 <HAL_PCD_EP_GetRxCount>
 800e9ba:	4603      	mov	r3, r0
}
 800e9bc:	4618      	mov	r0, r3
 800e9be:	3708      	adds	r7, #8
 800e9c0:	46bd      	mov	sp, r7
 800e9c2:	bd80      	pop	{r7, pc}

0800e9c4 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	b082      	sub	sp, #8
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	6078      	str	r0, [r7, #4]
 800e9cc:	460b      	mov	r3, r1
 800e9ce:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800e9d0:	78fb      	ldrb	r3, [r7, #3]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d002      	beq.n	800e9dc <HAL_PCDEx_LPM_Callback+0x18>
 800e9d6:	2b01      	cmp	r3, #1
 800e9d8:	d013      	beq.n	800ea02 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800e9da:	e023      	b.n	800ea24 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	7a5b      	ldrb	r3, [r3, #9]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d007      	beq.n	800e9f4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800e9e4:	f000 f83c 	bl	800ea60 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e9e8:	4b10      	ldr	r3, [pc, #64]	@ (800ea2c <HAL_PCDEx_LPM_Callback+0x68>)
 800e9ea:	691b      	ldr	r3, [r3, #16]
 800e9ec:	4a0f      	ldr	r2, [pc, #60]	@ (800ea2c <HAL_PCDEx_LPM_Callback+0x68>)
 800e9ee:	f023 0306 	bic.w	r3, r3, #6
 800e9f2:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	f7fe fc9c 	bl	800d338 <USBD_LL_Resume>
    break;
 800ea00:	e010      	b.n	800ea24 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ea08:	4618      	mov	r0, r3
 800ea0a:	f7fe fc7f 	bl	800d30c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	7a5b      	ldrb	r3, [r3, #9]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d005      	beq.n	800ea22 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ea16:	4b05      	ldr	r3, [pc, #20]	@ (800ea2c <HAL_PCDEx_LPM_Callback+0x68>)
 800ea18:	691b      	ldr	r3, [r3, #16]
 800ea1a:	4a04      	ldr	r2, [pc, #16]	@ (800ea2c <HAL_PCDEx_LPM_Callback+0x68>)
 800ea1c:	f043 0306 	orr.w	r3, r3, #6
 800ea20:	6113      	str	r3, [r2, #16]
    break;
 800ea22:	bf00      	nop
}
 800ea24:	bf00      	nop
 800ea26:	3708      	adds	r7, #8
 800ea28:	46bd      	mov	sp, r7
 800ea2a:	bd80      	pop	{r7, pc}
 800ea2c:	e000ed00 	.word	0xe000ed00

0800ea30 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ea30:	b480      	push	{r7}
 800ea32:	b083      	sub	sp, #12
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ea38:	4b03      	ldr	r3, [pc, #12]	@ (800ea48 <USBD_static_malloc+0x18>)
}
 800ea3a:	4618      	mov	r0, r3
 800ea3c:	370c      	adds	r7, #12
 800ea3e:	46bd      	mov	sp, r7
 800ea40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea44:	4770      	bx	lr
 800ea46:	bf00      	nop
 800ea48:	20004ca0 	.word	0x20004ca0

0800ea4c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ea4c:	b480      	push	{r7}
 800ea4e:	b083      	sub	sp, #12
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	6078      	str	r0, [r7, #4]

}
 800ea54:	bf00      	nop
 800ea56:	370c      	adds	r7, #12
 800ea58:	46bd      	mov	sp, r7
 800ea5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea5e:	4770      	bx	lr

0800ea60 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800ea60:	b580      	push	{r7, lr}
 800ea62:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800ea64:	f7f1 fd36 	bl	80004d4 <SystemClock_Config>
}
 800ea68:	bf00      	nop
 800ea6a:	bd80      	pop	{r7, pc}

0800ea6c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ea6c:	b480      	push	{r7}
 800ea6e:	b085      	sub	sp, #20
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	4603      	mov	r3, r0
 800ea74:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ea76:	2300      	movs	r3, #0
 800ea78:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ea7a:	79fb      	ldrb	r3, [r7, #7]
 800ea7c:	2b03      	cmp	r3, #3
 800ea7e:	d817      	bhi.n	800eab0 <USBD_Get_USB_Status+0x44>
 800ea80:	a201      	add	r2, pc, #4	@ (adr r2, 800ea88 <USBD_Get_USB_Status+0x1c>)
 800ea82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea86:	bf00      	nop
 800ea88:	0800ea99 	.word	0x0800ea99
 800ea8c:	0800ea9f 	.word	0x0800ea9f
 800ea90:	0800eaa5 	.word	0x0800eaa5
 800ea94:	0800eaab 	.word	0x0800eaab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ea98:	2300      	movs	r3, #0
 800ea9a:	73fb      	strb	r3, [r7, #15]
    break;
 800ea9c:	e00b      	b.n	800eab6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ea9e:	2303      	movs	r3, #3
 800eaa0:	73fb      	strb	r3, [r7, #15]
    break;
 800eaa2:	e008      	b.n	800eab6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800eaa4:	2301      	movs	r3, #1
 800eaa6:	73fb      	strb	r3, [r7, #15]
    break;
 800eaa8:	e005      	b.n	800eab6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800eaaa:	2303      	movs	r3, #3
 800eaac:	73fb      	strb	r3, [r7, #15]
    break;
 800eaae:	e002      	b.n	800eab6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800eab0:	2303      	movs	r3, #3
 800eab2:	73fb      	strb	r3, [r7, #15]
    break;
 800eab4:	bf00      	nop
  }
  return usb_status;
 800eab6:	7bfb      	ldrb	r3, [r7, #15]
}
 800eab8:	4618      	mov	r0, r3
 800eaba:	3714      	adds	r7, #20
 800eabc:	46bd      	mov	sp, r7
 800eabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac2:	4770      	bx	lr

0800eac4 <siprintf>:
 800eac4:	b40e      	push	{r1, r2, r3}
 800eac6:	b500      	push	{lr}
 800eac8:	b09c      	sub	sp, #112	@ 0x70
 800eaca:	ab1d      	add	r3, sp, #116	@ 0x74
 800eacc:	9002      	str	r0, [sp, #8]
 800eace:	9006      	str	r0, [sp, #24]
 800ead0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ead4:	4809      	ldr	r0, [pc, #36]	@ (800eafc <siprintf+0x38>)
 800ead6:	9107      	str	r1, [sp, #28]
 800ead8:	9104      	str	r1, [sp, #16]
 800eada:	4909      	ldr	r1, [pc, #36]	@ (800eb00 <siprintf+0x3c>)
 800eadc:	f853 2b04 	ldr.w	r2, [r3], #4
 800eae0:	9105      	str	r1, [sp, #20]
 800eae2:	6800      	ldr	r0, [r0, #0]
 800eae4:	9301      	str	r3, [sp, #4]
 800eae6:	a902      	add	r1, sp, #8
 800eae8:	f000 f994 	bl	800ee14 <_svfiprintf_r>
 800eaec:	9b02      	ldr	r3, [sp, #8]
 800eaee:	2200      	movs	r2, #0
 800eaf0:	701a      	strb	r2, [r3, #0]
 800eaf2:	b01c      	add	sp, #112	@ 0x70
 800eaf4:	f85d eb04 	ldr.w	lr, [sp], #4
 800eaf8:	b003      	add	sp, #12
 800eafa:	4770      	bx	lr
 800eafc:	20000184 	.word	0x20000184
 800eb00:	ffff0208 	.word	0xffff0208

0800eb04 <memset>:
 800eb04:	4402      	add	r2, r0
 800eb06:	4603      	mov	r3, r0
 800eb08:	4293      	cmp	r3, r2
 800eb0a:	d100      	bne.n	800eb0e <memset+0xa>
 800eb0c:	4770      	bx	lr
 800eb0e:	f803 1b01 	strb.w	r1, [r3], #1
 800eb12:	e7f9      	b.n	800eb08 <memset+0x4>

0800eb14 <__errno>:
 800eb14:	4b01      	ldr	r3, [pc, #4]	@ (800eb1c <__errno+0x8>)
 800eb16:	6818      	ldr	r0, [r3, #0]
 800eb18:	4770      	bx	lr
 800eb1a:	bf00      	nop
 800eb1c:	20000184 	.word	0x20000184

0800eb20 <__libc_init_array>:
 800eb20:	b570      	push	{r4, r5, r6, lr}
 800eb22:	4d0d      	ldr	r5, [pc, #52]	@ (800eb58 <__libc_init_array+0x38>)
 800eb24:	4c0d      	ldr	r4, [pc, #52]	@ (800eb5c <__libc_init_array+0x3c>)
 800eb26:	1b64      	subs	r4, r4, r5
 800eb28:	10a4      	asrs	r4, r4, #2
 800eb2a:	2600      	movs	r6, #0
 800eb2c:	42a6      	cmp	r6, r4
 800eb2e:	d109      	bne.n	800eb44 <__libc_init_array+0x24>
 800eb30:	4d0b      	ldr	r5, [pc, #44]	@ (800eb60 <__libc_init_array+0x40>)
 800eb32:	4c0c      	ldr	r4, [pc, #48]	@ (800eb64 <__libc_init_array+0x44>)
 800eb34:	f001 f9a0 	bl	800fe78 <_init>
 800eb38:	1b64      	subs	r4, r4, r5
 800eb3a:	10a4      	asrs	r4, r4, #2
 800eb3c:	2600      	movs	r6, #0
 800eb3e:	42a6      	cmp	r6, r4
 800eb40:	d105      	bne.n	800eb4e <__libc_init_array+0x2e>
 800eb42:	bd70      	pop	{r4, r5, r6, pc}
 800eb44:	f855 3b04 	ldr.w	r3, [r5], #4
 800eb48:	4798      	blx	r3
 800eb4a:	3601      	adds	r6, #1
 800eb4c:	e7ee      	b.n	800eb2c <__libc_init_array+0xc>
 800eb4e:	f855 3b04 	ldr.w	r3, [r5], #4
 800eb52:	4798      	blx	r3
 800eb54:	3601      	adds	r6, #1
 800eb56:	e7f2      	b.n	800eb3e <__libc_init_array+0x1e>
 800eb58:	08010314 	.word	0x08010314
 800eb5c:	08010314 	.word	0x08010314
 800eb60:	08010314 	.word	0x08010314
 800eb64:	08010318 	.word	0x08010318

0800eb68 <__retarget_lock_acquire_recursive>:
 800eb68:	4770      	bx	lr

0800eb6a <__retarget_lock_release_recursive>:
 800eb6a:	4770      	bx	lr

0800eb6c <_free_r>:
 800eb6c:	b538      	push	{r3, r4, r5, lr}
 800eb6e:	4605      	mov	r5, r0
 800eb70:	2900      	cmp	r1, #0
 800eb72:	d041      	beq.n	800ebf8 <_free_r+0x8c>
 800eb74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eb78:	1f0c      	subs	r4, r1, #4
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	bfb8      	it	lt
 800eb7e:	18e4      	addlt	r4, r4, r3
 800eb80:	f000 f8e0 	bl	800ed44 <__malloc_lock>
 800eb84:	4a1d      	ldr	r2, [pc, #116]	@ (800ebfc <_free_r+0x90>)
 800eb86:	6813      	ldr	r3, [r2, #0]
 800eb88:	b933      	cbnz	r3, 800eb98 <_free_r+0x2c>
 800eb8a:	6063      	str	r3, [r4, #4]
 800eb8c:	6014      	str	r4, [r2, #0]
 800eb8e:	4628      	mov	r0, r5
 800eb90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eb94:	f000 b8dc 	b.w	800ed50 <__malloc_unlock>
 800eb98:	42a3      	cmp	r3, r4
 800eb9a:	d908      	bls.n	800ebae <_free_r+0x42>
 800eb9c:	6820      	ldr	r0, [r4, #0]
 800eb9e:	1821      	adds	r1, r4, r0
 800eba0:	428b      	cmp	r3, r1
 800eba2:	bf01      	itttt	eq
 800eba4:	6819      	ldreq	r1, [r3, #0]
 800eba6:	685b      	ldreq	r3, [r3, #4]
 800eba8:	1809      	addeq	r1, r1, r0
 800ebaa:	6021      	streq	r1, [r4, #0]
 800ebac:	e7ed      	b.n	800eb8a <_free_r+0x1e>
 800ebae:	461a      	mov	r2, r3
 800ebb0:	685b      	ldr	r3, [r3, #4]
 800ebb2:	b10b      	cbz	r3, 800ebb8 <_free_r+0x4c>
 800ebb4:	42a3      	cmp	r3, r4
 800ebb6:	d9fa      	bls.n	800ebae <_free_r+0x42>
 800ebb8:	6811      	ldr	r1, [r2, #0]
 800ebba:	1850      	adds	r0, r2, r1
 800ebbc:	42a0      	cmp	r0, r4
 800ebbe:	d10b      	bne.n	800ebd8 <_free_r+0x6c>
 800ebc0:	6820      	ldr	r0, [r4, #0]
 800ebc2:	4401      	add	r1, r0
 800ebc4:	1850      	adds	r0, r2, r1
 800ebc6:	4283      	cmp	r3, r0
 800ebc8:	6011      	str	r1, [r2, #0]
 800ebca:	d1e0      	bne.n	800eb8e <_free_r+0x22>
 800ebcc:	6818      	ldr	r0, [r3, #0]
 800ebce:	685b      	ldr	r3, [r3, #4]
 800ebd0:	6053      	str	r3, [r2, #4]
 800ebd2:	4408      	add	r0, r1
 800ebd4:	6010      	str	r0, [r2, #0]
 800ebd6:	e7da      	b.n	800eb8e <_free_r+0x22>
 800ebd8:	d902      	bls.n	800ebe0 <_free_r+0x74>
 800ebda:	230c      	movs	r3, #12
 800ebdc:	602b      	str	r3, [r5, #0]
 800ebde:	e7d6      	b.n	800eb8e <_free_r+0x22>
 800ebe0:	6820      	ldr	r0, [r4, #0]
 800ebe2:	1821      	adds	r1, r4, r0
 800ebe4:	428b      	cmp	r3, r1
 800ebe6:	bf04      	itt	eq
 800ebe8:	6819      	ldreq	r1, [r3, #0]
 800ebea:	685b      	ldreq	r3, [r3, #4]
 800ebec:	6063      	str	r3, [r4, #4]
 800ebee:	bf04      	itt	eq
 800ebf0:	1809      	addeq	r1, r1, r0
 800ebf2:	6021      	streq	r1, [r4, #0]
 800ebf4:	6054      	str	r4, [r2, #4]
 800ebf6:	e7ca      	b.n	800eb8e <_free_r+0x22>
 800ebf8:	bd38      	pop	{r3, r4, r5, pc}
 800ebfa:	bf00      	nop
 800ebfc:	20005004 	.word	0x20005004

0800ec00 <sbrk_aligned>:
 800ec00:	b570      	push	{r4, r5, r6, lr}
 800ec02:	4e0f      	ldr	r6, [pc, #60]	@ (800ec40 <sbrk_aligned+0x40>)
 800ec04:	460c      	mov	r4, r1
 800ec06:	6831      	ldr	r1, [r6, #0]
 800ec08:	4605      	mov	r5, r0
 800ec0a:	b911      	cbnz	r1, 800ec12 <sbrk_aligned+0x12>
 800ec0c:	f000 fba6 	bl	800f35c <_sbrk_r>
 800ec10:	6030      	str	r0, [r6, #0]
 800ec12:	4621      	mov	r1, r4
 800ec14:	4628      	mov	r0, r5
 800ec16:	f000 fba1 	bl	800f35c <_sbrk_r>
 800ec1a:	1c43      	adds	r3, r0, #1
 800ec1c:	d103      	bne.n	800ec26 <sbrk_aligned+0x26>
 800ec1e:	f04f 34ff 	mov.w	r4, #4294967295
 800ec22:	4620      	mov	r0, r4
 800ec24:	bd70      	pop	{r4, r5, r6, pc}
 800ec26:	1cc4      	adds	r4, r0, #3
 800ec28:	f024 0403 	bic.w	r4, r4, #3
 800ec2c:	42a0      	cmp	r0, r4
 800ec2e:	d0f8      	beq.n	800ec22 <sbrk_aligned+0x22>
 800ec30:	1a21      	subs	r1, r4, r0
 800ec32:	4628      	mov	r0, r5
 800ec34:	f000 fb92 	bl	800f35c <_sbrk_r>
 800ec38:	3001      	adds	r0, #1
 800ec3a:	d1f2      	bne.n	800ec22 <sbrk_aligned+0x22>
 800ec3c:	e7ef      	b.n	800ec1e <sbrk_aligned+0x1e>
 800ec3e:	bf00      	nop
 800ec40:	20005000 	.word	0x20005000

0800ec44 <_malloc_r>:
 800ec44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec48:	1ccd      	adds	r5, r1, #3
 800ec4a:	f025 0503 	bic.w	r5, r5, #3
 800ec4e:	3508      	adds	r5, #8
 800ec50:	2d0c      	cmp	r5, #12
 800ec52:	bf38      	it	cc
 800ec54:	250c      	movcc	r5, #12
 800ec56:	2d00      	cmp	r5, #0
 800ec58:	4606      	mov	r6, r0
 800ec5a:	db01      	blt.n	800ec60 <_malloc_r+0x1c>
 800ec5c:	42a9      	cmp	r1, r5
 800ec5e:	d904      	bls.n	800ec6a <_malloc_r+0x26>
 800ec60:	230c      	movs	r3, #12
 800ec62:	6033      	str	r3, [r6, #0]
 800ec64:	2000      	movs	r0, #0
 800ec66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ed40 <_malloc_r+0xfc>
 800ec6e:	f000 f869 	bl	800ed44 <__malloc_lock>
 800ec72:	f8d8 3000 	ldr.w	r3, [r8]
 800ec76:	461c      	mov	r4, r3
 800ec78:	bb44      	cbnz	r4, 800eccc <_malloc_r+0x88>
 800ec7a:	4629      	mov	r1, r5
 800ec7c:	4630      	mov	r0, r6
 800ec7e:	f7ff ffbf 	bl	800ec00 <sbrk_aligned>
 800ec82:	1c43      	adds	r3, r0, #1
 800ec84:	4604      	mov	r4, r0
 800ec86:	d158      	bne.n	800ed3a <_malloc_r+0xf6>
 800ec88:	f8d8 4000 	ldr.w	r4, [r8]
 800ec8c:	4627      	mov	r7, r4
 800ec8e:	2f00      	cmp	r7, #0
 800ec90:	d143      	bne.n	800ed1a <_malloc_r+0xd6>
 800ec92:	2c00      	cmp	r4, #0
 800ec94:	d04b      	beq.n	800ed2e <_malloc_r+0xea>
 800ec96:	6823      	ldr	r3, [r4, #0]
 800ec98:	4639      	mov	r1, r7
 800ec9a:	4630      	mov	r0, r6
 800ec9c:	eb04 0903 	add.w	r9, r4, r3
 800eca0:	f000 fb5c 	bl	800f35c <_sbrk_r>
 800eca4:	4581      	cmp	r9, r0
 800eca6:	d142      	bne.n	800ed2e <_malloc_r+0xea>
 800eca8:	6821      	ldr	r1, [r4, #0]
 800ecaa:	1a6d      	subs	r5, r5, r1
 800ecac:	4629      	mov	r1, r5
 800ecae:	4630      	mov	r0, r6
 800ecb0:	f7ff ffa6 	bl	800ec00 <sbrk_aligned>
 800ecb4:	3001      	adds	r0, #1
 800ecb6:	d03a      	beq.n	800ed2e <_malloc_r+0xea>
 800ecb8:	6823      	ldr	r3, [r4, #0]
 800ecba:	442b      	add	r3, r5
 800ecbc:	6023      	str	r3, [r4, #0]
 800ecbe:	f8d8 3000 	ldr.w	r3, [r8]
 800ecc2:	685a      	ldr	r2, [r3, #4]
 800ecc4:	bb62      	cbnz	r2, 800ed20 <_malloc_r+0xdc>
 800ecc6:	f8c8 7000 	str.w	r7, [r8]
 800ecca:	e00f      	b.n	800ecec <_malloc_r+0xa8>
 800eccc:	6822      	ldr	r2, [r4, #0]
 800ecce:	1b52      	subs	r2, r2, r5
 800ecd0:	d420      	bmi.n	800ed14 <_malloc_r+0xd0>
 800ecd2:	2a0b      	cmp	r2, #11
 800ecd4:	d917      	bls.n	800ed06 <_malloc_r+0xc2>
 800ecd6:	1961      	adds	r1, r4, r5
 800ecd8:	42a3      	cmp	r3, r4
 800ecda:	6025      	str	r5, [r4, #0]
 800ecdc:	bf18      	it	ne
 800ecde:	6059      	strne	r1, [r3, #4]
 800ece0:	6863      	ldr	r3, [r4, #4]
 800ece2:	bf08      	it	eq
 800ece4:	f8c8 1000 	streq.w	r1, [r8]
 800ece8:	5162      	str	r2, [r4, r5]
 800ecea:	604b      	str	r3, [r1, #4]
 800ecec:	4630      	mov	r0, r6
 800ecee:	f000 f82f 	bl	800ed50 <__malloc_unlock>
 800ecf2:	f104 000b 	add.w	r0, r4, #11
 800ecf6:	1d23      	adds	r3, r4, #4
 800ecf8:	f020 0007 	bic.w	r0, r0, #7
 800ecfc:	1ac2      	subs	r2, r0, r3
 800ecfe:	bf1c      	itt	ne
 800ed00:	1a1b      	subne	r3, r3, r0
 800ed02:	50a3      	strne	r3, [r4, r2]
 800ed04:	e7af      	b.n	800ec66 <_malloc_r+0x22>
 800ed06:	6862      	ldr	r2, [r4, #4]
 800ed08:	42a3      	cmp	r3, r4
 800ed0a:	bf0c      	ite	eq
 800ed0c:	f8c8 2000 	streq.w	r2, [r8]
 800ed10:	605a      	strne	r2, [r3, #4]
 800ed12:	e7eb      	b.n	800ecec <_malloc_r+0xa8>
 800ed14:	4623      	mov	r3, r4
 800ed16:	6864      	ldr	r4, [r4, #4]
 800ed18:	e7ae      	b.n	800ec78 <_malloc_r+0x34>
 800ed1a:	463c      	mov	r4, r7
 800ed1c:	687f      	ldr	r7, [r7, #4]
 800ed1e:	e7b6      	b.n	800ec8e <_malloc_r+0x4a>
 800ed20:	461a      	mov	r2, r3
 800ed22:	685b      	ldr	r3, [r3, #4]
 800ed24:	42a3      	cmp	r3, r4
 800ed26:	d1fb      	bne.n	800ed20 <_malloc_r+0xdc>
 800ed28:	2300      	movs	r3, #0
 800ed2a:	6053      	str	r3, [r2, #4]
 800ed2c:	e7de      	b.n	800ecec <_malloc_r+0xa8>
 800ed2e:	230c      	movs	r3, #12
 800ed30:	6033      	str	r3, [r6, #0]
 800ed32:	4630      	mov	r0, r6
 800ed34:	f000 f80c 	bl	800ed50 <__malloc_unlock>
 800ed38:	e794      	b.n	800ec64 <_malloc_r+0x20>
 800ed3a:	6005      	str	r5, [r0, #0]
 800ed3c:	e7d6      	b.n	800ecec <_malloc_r+0xa8>
 800ed3e:	bf00      	nop
 800ed40:	20005004 	.word	0x20005004

0800ed44 <__malloc_lock>:
 800ed44:	4801      	ldr	r0, [pc, #4]	@ (800ed4c <__malloc_lock+0x8>)
 800ed46:	f7ff bf0f 	b.w	800eb68 <__retarget_lock_acquire_recursive>
 800ed4a:	bf00      	nop
 800ed4c:	20004ffc 	.word	0x20004ffc

0800ed50 <__malloc_unlock>:
 800ed50:	4801      	ldr	r0, [pc, #4]	@ (800ed58 <__malloc_unlock+0x8>)
 800ed52:	f7ff bf0a 	b.w	800eb6a <__retarget_lock_release_recursive>
 800ed56:	bf00      	nop
 800ed58:	20004ffc 	.word	0x20004ffc

0800ed5c <__ssputs_r>:
 800ed5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed60:	688e      	ldr	r6, [r1, #8]
 800ed62:	461f      	mov	r7, r3
 800ed64:	42be      	cmp	r6, r7
 800ed66:	680b      	ldr	r3, [r1, #0]
 800ed68:	4682      	mov	sl, r0
 800ed6a:	460c      	mov	r4, r1
 800ed6c:	4690      	mov	r8, r2
 800ed6e:	d82d      	bhi.n	800edcc <__ssputs_r+0x70>
 800ed70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ed74:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ed78:	d026      	beq.n	800edc8 <__ssputs_r+0x6c>
 800ed7a:	6965      	ldr	r5, [r4, #20]
 800ed7c:	6909      	ldr	r1, [r1, #16]
 800ed7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ed82:	eba3 0901 	sub.w	r9, r3, r1
 800ed86:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ed8a:	1c7b      	adds	r3, r7, #1
 800ed8c:	444b      	add	r3, r9
 800ed8e:	106d      	asrs	r5, r5, #1
 800ed90:	429d      	cmp	r5, r3
 800ed92:	bf38      	it	cc
 800ed94:	461d      	movcc	r5, r3
 800ed96:	0553      	lsls	r3, r2, #21
 800ed98:	d527      	bpl.n	800edea <__ssputs_r+0x8e>
 800ed9a:	4629      	mov	r1, r5
 800ed9c:	f7ff ff52 	bl	800ec44 <_malloc_r>
 800eda0:	4606      	mov	r6, r0
 800eda2:	b360      	cbz	r0, 800edfe <__ssputs_r+0xa2>
 800eda4:	6921      	ldr	r1, [r4, #16]
 800eda6:	464a      	mov	r2, r9
 800eda8:	f000 fae8 	bl	800f37c <memcpy>
 800edac:	89a3      	ldrh	r3, [r4, #12]
 800edae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800edb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800edb6:	81a3      	strh	r3, [r4, #12]
 800edb8:	6126      	str	r6, [r4, #16]
 800edba:	6165      	str	r5, [r4, #20]
 800edbc:	444e      	add	r6, r9
 800edbe:	eba5 0509 	sub.w	r5, r5, r9
 800edc2:	6026      	str	r6, [r4, #0]
 800edc4:	60a5      	str	r5, [r4, #8]
 800edc6:	463e      	mov	r6, r7
 800edc8:	42be      	cmp	r6, r7
 800edca:	d900      	bls.n	800edce <__ssputs_r+0x72>
 800edcc:	463e      	mov	r6, r7
 800edce:	6820      	ldr	r0, [r4, #0]
 800edd0:	4632      	mov	r2, r6
 800edd2:	4641      	mov	r1, r8
 800edd4:	f000 faa8 	bl	800f328 <memmove>
 800edd8:	68a3      	ldr	r3, [r4, #8]
 800edda:	1b9b      	subs	r3, r3, r6
 800eddc:	60a3      	str	r3, [r4, #8]
 800edde:	6823      	ldr	r3, [r4, #0]
 800ede0:	4433      	add	r3, r6
 800ede2:	6023      	str	r3, [r4, #0]
 800ede4:	2000      	movs	r0, #0
 800ede6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edea:	462a      	mov	r2, r5
 800edec:	f000 fad4 	bl	800f398 <_realloc_r>
 800edf0:	4606      	mov	r6, r0
 800edf2:	2800      	cmp	r0, #0
 800edf4:	d1e0      	bne.n	800edb8 <__ssputs_r+0x5c>
 800edf6:	6921      	ldr	r1, [r4, #16]
 800edf8:	4650      	mov	r0, sl
 800edfa:	f7ff feb7 	bl	800eb6c <_free_r>
 800edfe:	230c      	movs	r3, #12
 800ee00:	f8ca 3000 	str.w	r3, [sl]
 800ee04:	89a3      	ldrh	r3, [r4, #12]
 800ee06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ee0a:	81a3      	strh	r3, [r4, #12]
 800ee0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ee10:	e7e9      	b.n	800ede6 <__ssputs_r+0x8a>
	...

0800ee14 <_svfiprintf_r>:
 800ee14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee18:	4698      	mov	r8, r3
 800ee1a:	898b      	ldrh	r3, [r1, #12]
 800ee1c:	061b      	lsls	r3, r3, #24
 800ee1e:	b09d      	sub	sp, #116	@ 0x74
 800ee20:	4607      	mov	r7, r0
 800ee22:	460d      	mov	r5, r1
 800ee24:	4614      	mov	r4, r2
 800ee26:	d510      	bpl.n	800ee4a <_svfiprintf_r+0x36>
 800ee28:	690b      	ldr	r3, [r1, #16]
 800ee2a:	b973      	cbnz	r3, 800ee4a <_svfiprintf_r+0x36>
 800ee2c:	2140      	movs	r1, #64	@ 0x40
 800ee2e:	f7ff ff09 	bl	800ec44 <_malloc_r>
 800ee32:	6028      	str	r0, [r5, #0]
 800ee34:	6128      	str	r0, [r5, #16]
 800ee36:	b930      	cbnz	r0, 800ee46 <_svfiprintf_r+0x32>
 800ee38:	230c      	movs	r3, #12
 800ee3a:	603b      	str	r3, [r7, #0]
 800ee3c:	f04f 30ff 	mov.w	r0, #4294967295
 800ee40:	b01d      	add	sp, #116	@ 0x74
 800ee42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee46:	2340      	movs	r3, #64	@ 0x40
 800ee48:	616b      	str	r3, [r5, #20]
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ee4e:	2320      	movs	r3, #32
 800ee50:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ee54:	f8cd 800c 	str.w	r8, [sp, #12]
 800ee58:	2330      	movs	r3, #48	@ 0x30
 800ee5a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800eff8 <_svfiprintf_r+0x1e4>
 800ee5e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ee62:	f04f 0901 	mov.w	r9, #1
 800ee66:	4623      	mov	r3, r4
 800ee68:	469a      	mov	sl, r3
 800ee6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ee6e:	b10a      	cbz	r2, 800ee74 <_svfiprintf_r+0x60>
 800ee70:	2a25      	cmp	r2, #37	@ 0x25
 800ee72:	d1f9      	bne.n	800ee68 <_svfiprintf_r+0x54>
 800ee74:	ebba 0b04 	subs.w	fp, sl, r4
 800ee78:	d00b      	beq.n	800ee92 <_svfiprintf_r+0x7e>
 800ee7a:	465b      	mov	r3, fp
 800ee7c:	4622      	mov	r2, r4
 800ee7e:	4629      	mov	r1, r5
 800ee80:	4638      	mov	r0, r7
 800ee82:	f7ff ff6b 	bl	800ed5c <__ssputs_r>
 800ee86:	3001      	adds	r0, #1
 800ee88:	f000 80a7 	beq.w	800efda <_svfiprintf_r+0x1c6>
 800ee8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ee8e:	445a      	add	r2, fp
 800ee90:	9209      	str	r2, [sp, #36]	@ 0x24
 800ee92:	f89a 3000 	ldrb.w	r3, [sl]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	f000 809f 	beq.w	800efda <_svfiprintf_r+0x1c6>
 800ee9c:	2300      	movs	r3, #0
 800ee9e:	f04f 32ff 	mov.w	r2, #4294967295
 800eea2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eea6:	f10a 0a01 	add.w	sl, sl, #1
 800eeaa:	9304      	str	r3, [sp, #16]
 800eeac:	9307      	str	r3, [sp, #28]
 800eeae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800eeb2:	931a      	str	r3, [sp, #104]	@ 0x68
 800eeb4:	4654      	mov	r4, sl
 800eeb6:	2205      	movs	r2, #5
 800eeb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eebc:	484e      	ldr	r0, [pc, #312]	@ (800eff8 <_svfiprintf_r+0x1e4>)
 800eebe:	f7f1 f9af 	bl	8000220 <memchr>
 800eec2:	9a04      	ldr	r2, [sp, #16]
 800eec4:	b9d8      	cbnz	r0, 800eefe <_svfiprintf_r+0xea>
 800eec6:	06d0      	lsls	r0, r2, #27
 800eec8:	bf44      	itt	mi
 800eeca:	2320      	movmi	r3, #32
 800eecc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eed0:	0711      	lsls	r1, r2, #28
 800eed2:	bf44      	itt	mi
 800eed4:	232b      	movmi	r3, #43	@ 0x2b
 800eed6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eeda:	f89a 3000 	ldrb.w	r3, [sl]
 800eede:	2b2a      	cmp	r3, #42	@ 0x2a
 800eee0:	d015      	beq.n	800ef0e <_svfiprintf_r+0xfa>
 800eee2:	9a07      	ldr	r2, [sp, #28]
 800eee4:	4654      	mov	r4, sl
 800eee6:	2000      	movs	r0, #0
 800eee8:	f04f 0c0a 	mov.w	ip, #10
 800eeec:	4621      	mov	r1, r4
 800eeee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eef2:	3b30      	subs	r3, #48	@ 0x30
 800eef4:	2b09      	cmp	r3, #9
 800eef6:	d94b      	bls.n	800ef90 <_svfiprintf_r+0x17c>
 800eef8:	b1b0      	cbz	r0, 800ef28 <_svfiprintf_r+0x114>
 800eefa:	9207      	str	r2, [sp, #28]
 800eefc:	e014      	b.n	800ef28 <_svfiprintf_r+0x114>
 800eefe:	eba0 0308 	sub.w	r3, r0, r8
 800ef02:	fa09 f303 	lsl.w	r3, r9, r3
 800ef06:	4313      	orrs	r3, r2
 800ef08:	9304      	str	r3, [sp, #16]
 800ef0a:	46a2      	mov	sl, r4
 800ef0c:	e7d2      	b.n	800eeb4 <_svfiprintf_r+0xa0>
 800ef0e:	9b03      	ldr	r3, [sp, #12]
 800ef10:	1d19      	adds	r1, r3, #4
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	9103      	str	r1, [sp, #12]
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	bfbb      	ittet	lt
 800ef1a:	425b      	neglt	r3, r3
 800ef1c:	f042 0202 	orrlt.w	r2, r2, #2
 800ef20:	9307      	strge	r3, [sp, #28]
 800ef22:	9307      	strlt	r3, [sp, #28]
 800ef24:	bfb8      	it	lt
 800ef26:	9204      	strlt	r2, [sp, #16]
 800ef28:	7823      	ldrb	r3, [r4, #0]
 800ef2a:	2b2e      	cmp	r3, #46	@ 0x2e
 800ef2c:	d10a      	bne.n	800ef44 <_svfiprintf_r+0x130>
 800ef2e:	7863      	ldrb	r3, [r4, #1]
 800ef30:	2b2a      	cmp	r3, #42	@ 0x2a
 800ef32:	d132      	bne.n	800ef9a <_svfiprintf_r+0x186>
 800ef34:	9b03      	ldr	r3, [sp, #12]
 800ef36:	1d1a      	adds	r2, r3, #4
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	9203      	str	r2, [sp, #12]
 800ef3c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ef40:	3402      	adds	r4, #2
 800ef42:	9305      	str	r3, [sp, #20]
 800ef44:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f008 <_svfiprintf_r+0x1f4>
 800ef48:	7821      	ldrb	r1, [r4, #0]
 800ef4a:	2203      	movs	r2, #3
 800ef4c:	4650      	mov	r0, sl
 800ef4e:	f7f1 f967 	bl	8000220 <memchr>
 800ef52:	b138      	cbz	r0, 800ef64 <_svfiprintf_r+0x150>
 800ef54:	9b04      	ldr	r3, [sp, #16]
 800ef56:	eba0 000a 	sub.w	r0, r0, sl
 800ef5a:	2240      	movs	r2, #64	@ 0x40
 800ef5c:	4082      	lsls	r2, r0
 800ef5e:	4313      	orrs	r3, r2
 800ef60:	3401      	adds	r4, #1
 800ef62:	9304      	str	r3, [sp, #16]
 800ef64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef68:	4824      	ldr	r0, [pc, #144]	@ (800effc <_svfiprintf_r+0x1e8>)
 800ef6a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ef6e:	2206      	movs	r2, #6
 800ef70:	f7f1 f956 	bl	8000220 <memchr>
 800ef74:	2800      	cmp	r0, #0
 800ef76:	d036      	beq.n	800efe6 <_svfiprintf_r+0x1d2>
 800ef78:	4b21      	ldr	r3, [pc, #132]	@ (800f000 <_svfiprintf_r+0x1ec>)
 800ef7a:	bb1b      	cbnz	r3, 800efc4 <_svfiprintf_r+0x1b0>
 800ef7c:	9b03      	ldr	r3, [sp, #12]
 800ef7e:	3307      	adds	r3, #7
 800ef80:	f023 0307 	bic.w	r3, r3, #7
 800ef84:	3308      	adds	r3, #8
 800ef86:	9303      	str	r3, [sp, #12]
 800ef88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef8a:	4433      	add	r3, r6
 800ef8c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef8e:	e76a      	b.n	800ee66 <_svfiprintf_r+0x52>
 800ef90:	fb0c 3202 	mla	r2, ip, r2, r3
 800ef94:	460c      	mov	r4, r1
 800ef96:	2001      	movs	r0, #1
 800ef98:	e7a8      	b.n	800eeec <_svfiprintf_r+0xd8>
 800ef9a:	2300      	movs	r3, #0
 800ef9c:	3401      	adds	r4, #1
 800ef9e:	9305      	str	r3, [sp, #20]
 800efa0:	4619      	mov	r1, r3
 800efa2:	f04f 0c0a 	mov.w	ip, #10
 800efa6:	4620      	mov	r0, r4
 800efa8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800efac:	3a30      	subs	r2, #48	@ 0x30
 800efae:	2a09      	cmp	r2, #9
 800efb0:	d903      	bls.n	800efba <_svfiprintf_r+0x1a6>
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d0c6      	beq.n	800ef44 <_svfiprintf_r+0x130>
 800efb6:	9105      	str	r1, [sp, #20]
 800efb8:	e7c4      	b.n	800ef44 <_svfiprintf_r+0x130>
 800efba:	fb0c 2101 	mla	r1, ip, r1, r2
 800efbe:	4604      	mov	r4, r0
 800efc0:	2301      	movs	r3, #1
 800efc2:	e7f0      	b.n	800efa6 <_svfiprintf_r+0x192>
 800efc4:	ab03      	add	r3, sp, #12
 800efc6:	9300      	str	r3, [sp, #0]
 800efc8:	462a      	mov	r2, r5
 800efca:	4b0e      	ldr	r3, [pc, #56]	@ (800f004 <_svfiprintf_r+0x1f0>)
 800efcc:	a904      	add	r1, sp, #16
 800efce:	4638      	mov	r0, r7
 800efd0:	f3af 8000 	nop.w
 800efd4:	1c42      	adds	r2, r0, #1
 800efd6:	4606      	mov	r6, r0
 800efd8:	d1d6      	bne.n	800ef88 <_svfiprintf_r+0x174>
 800efda:	89ab      	ldrh	r3, [r5, #12]
 800efdc:	065b      	lsls	r3, r3, #25
 800efde:	f53f af2d 	bmi.w	800ee3c <_svfiprintf_r+0x28>
 800efe2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800efe4:	e72c      	b.n	800ee40 <_svfiprintf_r+0x2c>
 800efe6:	ab03      	add	r3, sp, #12
 800efe8:	9300      	str	r3, [sp, #0]
 800efea:	462a      	mov	r2, r5
 800efec:	4b05      	ldr	r3, [pc, #20]	@ (800f004 <_svfiprintf_r+0x1f0>)
 800efee:	a904      	add	r1, sp, #16
 800eff0:	4638      	mov	r0, r7
 800eff2:	f000 f879 	bl	800f0e8 <_printf_i>
 800eff6:	e7ed      	b.n	800efd4 <_svfiprintf_r+0x1c0>
 800eff8:	0800ff08 	.word	0x0800ff08
 800effc:	0800ff12 	.word	0x0800ff12
 800f000:	00000000 	.word	0x00000000
 800f004:	0800ed5d 	.word	0x0800ed5d
 800f008:	0800ff0e 	.word	0x0800ff0e

0800f00c <_printf_common>:
 800f00c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f010:	4616      	mov	r6, r2
 800f012:	4698      	mov	r8, r3
 800f014:	688a      	ldr	r2, [r1, #8]
 800f016:	690b      	ldr	r3, [r1, #16]
 800f018:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f01c:	4293      	cmp	r3, r2
 800f01e:	bfb8      	it	lt
 800f020:	4613      	movlt	r3, r2
 800f022:	6033      	str	r3, [r6, #0]
 800f024:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f028:	4607      	mov	r7, r0
 800f02a:	460c      	mov	r4, r1
 800f02c:	b10a      	cbz	r2, 800f032 <_printf_common+0x26>
 800f02e:	3301      	adds	r3, #1
 800f030:	6033      	str	r3, [r6, #0]
 800f032:	6823      	ldr	r3, [r4, #0]
 800f034:	0699      	lsls	r1, r3, #26
 800f036:	bf42      	ittt	mi
 800f038:	6833      	ldrmi	r3, [r6, #0]
 800f03a:	3302      	addmi	r3, #2
 800f03c:	6033      	strmi	r3, [r6, #0]
 800f03e:	6825      	ldr	r5, [r4, #0]
 800f040:	f015 0506 	ands.w	r5, r5, #6
 800f044:	d106      	bne.n	800f054 <_printf_common+0x48>
 800f046:	f104 0a19 	add.w	sl, r4, #25
 800f04a:	68e3      	ldr	r3, [r4, #12]
 800f04c:	6832      	ldr	r2, [r6, #0]
 800f04e:	1a9b      	subs	r3, r3, r2
 800f050:	42ab      	cmp	r3, r5
 800f052:	dc26      	bgt.n	800f0a2 <_printf_common+0x96>
 800f054:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f058:	6822      	ldr	r2, [r4, #0]
 800f05a:	3b00      	subs	r3, #0
 800f05c:	bf18      	it	ne
 800f05e:	2301      	movne	r3, #1
 800f060:	0692      	lsls	r2, r2, #26
 800f062:	d42b      	bmi.n	800f0bc <_printf_common+0xb0>
 800f064:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f068:	4641      	mov	r1, r8
 800f06a:	4638      	mov	r0, r7
 800f06c:	47c8      	blx	r9
 800f06e:	3001      	adds	r0, #1
 800f070:	d01e      	beq.n	800f0b0 <_printf_common+0xa4>
 800f072:	6823      	ldr	r3, [r4, #0]
 800f074:	6922      	ldr	r2, [r4, #16]
 800f076:	f003 0306 	and.w	r3, r3, #6
 800f07a:	2b04      	cmp	r3, #4
 800f07c:	bf02      	ittt	eq
 800f07e:	68e5      	ldreq	r5, [r4, #12]
 800f080:	6833      	ldreq	r3, [r6, #0]
 800f082:	1aed      	subeq	r5, r5, r3
 800f084:	68a3      	ldr	r3, [r4, #8]
 800f086:	bf0c      	ite	eq
 800f088:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f08c:	2500      	movne	r5, #0
 800f08e:	4293      	cmp	r3, r2
 800f090:	bfc4      	itt	gt
 800f092:	1a9b      	subgt	r3, r3, r2
 800f094:	18ed      	addgt	r5, r5, r3
 800f096:	2600      	movs	r6, #0
 800f098:	341a      	adds	r4, #26
 800f09a:	42b5      	cmp	r5, r6
 800f09c:	d11a      	bne.n	800f0d4 <_printf_common+0xc8>
 800f09e:	2000      	movs	r0, #0
 800f0a0:	e008      	b.n	800f0b4 <_printf_common+0xa8>
 800f0a2:	2301      	movs	r3, #1
 800f0a4:	4652      	mov	r2, sl
 800f0a6:	4641      	mov	r1, r8
 800f0a8:	4638      	mov	r0, r7
 800f0aa:	47c8      	blx	r9
 800f0ac:	3001      	adds	r0, #1
 800f0ae:	d103      	bne.n	800f0b8 <_printf_common+0xac>
 800f0b0:	f04f 30ff 	mov.w	r0, #4294967295
 800f0b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0b8:	3501      	adds	r5, #1
 800f0ba:	e7c6      	b.n	800f04a <_printf_common+0x3e>
 800f0bc:	18e1      	adds	r1, r4, r3
 800f0be:	1c5a      	adds	r2, r3, #1
 800f0c0:	2030      	movs	r0, #48	@ 0x30
 800f0c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f0c6:	4422      	add	r2, r4
 800f0c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f0cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f0d0:	3302      	adds	r3, #2
 800f0d2:	e7c7      	b.n	800f064 <_printf_common+0x58>
 800f0d4:	2301      	movs	r3, #1
 800f0d6:	4622      	mov	r2, r4
 800f0d8:	4641      	mov	r1, r8
 800f0da:	4638      	mov	r0, r7
 800f0dc:	47c8      	blx	r9
 800f0de:	3001      	adds	r0, #1
 800f0e0:	d0e6      	beq.n	800f0b0 <_printf_common+0xa4>
 800f0e2:	3601      	adds	r6, #1
 800f0e4:	e7d9      	b.n	800f09a <_printf_common+0x8e>
	...

0800f0e8 <_printf_i>:
 800f0e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f0ec:	7e0f      	ldrb	r7, [r1, #24]
 800f0ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f0f0:	2f78      	cmp	r7, #120	@ 0x78
 800f0f2:	4691      	mov	r9, r2
 800f0f4:	4680      	mov	r8, r0
 800f0f6:	460c      	mov	r4, r1
 800f0f8:	469a      	mov	sl, r3
 800f0fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f0fe:	d807      	bhi.n	800f110 <_printf_i+0x28>
 800f100:	2f62      	cmp	r7, #98	@ 0x62
 800f102:	d80a      	bhi.n	800f11a <_printf_i+0x32>
 800f104:	2f00      	cmp	r7, #0
 800f106:	f000 80d2 	beq.w	800f2ae <_printf_i+0x1c6>
 800f10a:	2f58      	cmp	r7, #88	@ 0x58
 800f10c:	f000 80b9 	beq.w	800f282 <_printf_i+0x19a>
 800f110:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f114:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f118:	e03a      	b.n	800f190 <_printf_i+0xa8>
 800f11a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f11e:	2b15      	cmp	r3, #21
 800f120:	d8f6      	bhi.n	800f110 <_printf_i+0x28>
 800f122:	a101      	add	r1, pc, #4	@ (adr r1, 800f128 <_printf_i+0x40>)
 800f124:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f128:	0800f181 	.word	0x0800f181
 800f12c:	0800f195 	.word	0x0800f195
 800f130:	0800f111 	.word	0x0800f111
 800f134:	0800f111 	.word	0x0800f111
 800f138:	0800f111 	.word	0x0800f111
 800f13c:	0800f111 	.word	0x0800f111
 800f140:	0800f195 	.word	0x0800f195
 800f144:	0800f111 	.word	0x0800f111
 800f148:	0800f111 	.word	0x0800f111
 800f14c:	0800f111 	.word	0x0800f111
 800f150:	0800f111 	.word	0x0800f111
 800f154:	0800f295 	.word	0x0800f295
 800f158:	0800f1bf 	.word	0x0800f1bf
 800f15c:	0800f24f 	.word	0x0800f24f
 800f160:	0800f111 	.word	0x0800f111
 800f164:	0800f111 	.word	0x0800f111
 800f168:	0800f2b7 	.word	0x0800f2b7
 800f16c:	0800f111 	.word	0x0800f111
 800f170:	0800f1bf 	.word	0x0800f1bf
 800f174:	0800f111 	.word	0x0800f111
 800f178:	0800f111 	.word	0x0800f111
 800f17c:	0800f257 	.word	0x0800f257
 800f180:	6833      	ldr	r3, [r6, #0]
 800f182:	1d1a      	adds	r2, r3, #4
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	6032      	str	r2, [r6, #0]
 800f188:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f18c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f190:	2301      	movs	r3, #1
 800f192:	e09d      	b.n	800f2d0 <_printf_i+0x1e8>
 800f194:	6833      	ldr	r3, [r6, #0]
 800f196:	6820      	ldr	r0, [r4, #0]
 800f198:	1d19      	adds	r1, r3, #4
 800f19a:	6031      	str	r1, [r6, #0]
 800f19c:	0606      	lsls	r6, r0, #24
 800f19e:	d501      	bpl.n	800f1a4 <_printf_i+0xbc>
 800f1a0:	681d      	ldr	r5, [r3, #0]
 800f1a2:	e003      	b.n	800f1ac <_printf_i+0xc4>
 800f1a4:	0645      	lsls	r5, r0, #25
 800f1a6:	d5fb      	bpl.n	800f1a0 <_printf_i+0xb8>
 800f1a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f1ac:	2d00      	cmp	r5, #0
 800f1ae:	da03      	bge.n	800f1b8 <_printf_i+0xd0>
 800f1b0:	232d      	movs	r3, #45	@ 0x2d
 800f1b2:	426d      	negs	r5, r5
 800f1b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f1b8:	4859      	ldr	r0, [pc, #356]	@ (800f320 <_printf_i+0x238>)
 800f1ba:	230a      	movs	r3, #10
 800f1bc:	e011      	b.n	800f1e2 <_printf_i+0xfa>
 800f1be:	6821      	ldr	r1, [r4, #0]
 800f1c0:	6833      	ldr	r3, [r6, #0]
 800f1c2:	0608      	lsls	r0, r1, #24
 800f1c4:	f853 5b04 	ldr.w	r5, [r3], #4
 800f1c8:	d402      	bmi.n	800f1d0 <_printf_i+0xe8>
 800f1ca:	0649      	lsls	r1, r1, #25
 800f1cc:	bf48      	it	mi
 800f1ce:	b2ad      	uxthmi	r5, r5
 800f1d0:	2f6f      	cmp	r7, #111	@ 0x6f
 800f1d2:	4853      	ldr	r0, [pc, #332]	@ (800f320 <_printf_i+0x238>)
 800f1d4:	6033      	str	r3, [r6, #0]
 800f1d6:	bf14      	ite	ne
 800f1d8:	230a      	movne	r3, #10
 800f1da:	2308      	moveq	r3, #8
 800f1dc:	2100      	movs	r1, #0
 800f1de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f1e2:	6866      	ldr	r6, [r4, #4]
 800f1e4:	60a6      	str	r6, [r4, #8]
 800f1e6:	2e00      	cmp	r6, #0
 800f1e8:	bfa2      	ittt	ge
 800f1ea:	6821      	ldrge	r1, [r4, #0]
 800f1ec:	f021 0104 	bicge.w	r1, r1, #4
 800f1f0:	6021      	strge	r1, [r4, #0]
 800f1f2:	b90d      	cbnz	r5, 800f1f8 <_printf_i+0x110>
 800f1f4:	2e00      	cmp	r6, #0
 800f1f6:	d04b      	beq.n	800f290 <_printf_i+0x1a8>
 800f1f8:	4616      	mov	r6, r2
 800f1fa:	fbb5 f1f3 	udiv	r1, r5, r3
 800f1fe:	fb03 5711 	mls	r7, r3, r1, r5
 800f202:	5dc7      	ldrb	r7, [r0, r7]
 800f204:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f208:	462f      	mov	r7, r5
 800f20a:	42bb      	cmp	r3, r7
 800f20c:	460d      	mov	r5, r1
 800f20e:	d9f4      	bls.n	800f1fa <_printf_i+0x112>
 800f210:	2b08      	cmp	r3, #8
 800f212:	d10b      	bne.n	800f22c <_printf_i+0x144>
 800f214:	6823      	ldr	r3, [r4, #0]
 800f216:	07df      	lsls	r7, r3, #31
 800f218:	d508      	bpl.n	800f22c <_printf_i+0x144>
 800f21a:	6923      	ldr	r3, [r4, #16]
 800f21c:	6861      	ldr	r1, [r4, #4]
 800f21e:	4299      	cmp	r1, r3
 800f220:	bfde      	ittt	le
 800f222:	2330      	movle	r3, #48	@ 0x30
 800f224:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f228:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f22c:	1b92      	subs	r2, r2, r6
 800f22e:	6122      	str	r2, [r4, #16]
 800f230:	f8cd a000 	str.w	sl, [sp]
 800f234:	464b      	mov	r3, r9
 800f236:	aa03      	add	r2, sp, #12
 800f238:	4621      	mov	r1, r4
 800f23a:	4640      	mov	r0, r8
 800f23c:	f7ff fee6 	bl	800f00c <_printf_common>
 800f240:	3001      	adds	r0, #1
 800f242:	d14a      	bne.n	800f2da <_printf_i+0x1f2>
 800f244:	f04f 30ff 	mov.w	r0, #4294967295
 800f248:	b004      	add	sp, #16
 800f24a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f24e:	6823      	ldr	r3, [r4, #0]
 800f250:	f043 0320 	orr.w	r3, r3, #32
 800f254:	6023      	str	r3, [r4, #0]
 800f256:	4833      	ldr	r0, [pc, #204]	@ (800f324 <_printf_i+0x23c>)
 800f258:	2778      	movs	r7, #120	@ 0x78
 800f25a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f25e:	6823      	ldr	r3, [r4, #0]
 800f260:	6831      	ldr	r1, [r6, #0]
 800f262:	061f      	lsls	r7, r3, #24
 800f264:	f851 5b04 	ldr.w	r5, [r1], #4
 800f268:	d402      	bmi.n	800f270 <_printf_i+0x188>
 800f26a:	065f      	lsls	r7, r3, #25
 800f26c:	bf48      	it	mi
 800f26e:	b2ad      	uxthmi	r5, r5
 800f270:	6031      	str	r1, [r6, #0]
 800f272:	07d9      	lsls	r1, r3, #31
 800f274:	bf44      	itt	mi
 800f276:	f043 0320 	orrmi.w	r3, r3, #32
 800f27a:	6023      	strmi	r3, [r4, #0]
 800f27c:	b11d      	cbz	r5, 800f286 <_printf_i+0x19e>
 800f27e:	2310      	movs	r3, #16
 800f280:	e7ac      	b.n	800f1dc <_printf_i+0xf4>
 800f282:	4827      	ldr	r0, [pc, #156]	@ (800f320 <_printf_i+0x238>)
 800f284:	e7e9      	b.n	800f25a <_printf_i+0x172>
 800f286:	6823      	ldr	r3, [r4, #0]
 800f288:	f023 0320 	bic.w	r3, r3, #32
 800f28c:	6023      	str	r3, [r4, #0]
 800f28e:	e7f6      	b.n	800f27e <_printf_i+0x196>
 800f290:	4616      	mov	r6, r2
 800f292:	e7bd      	b.n	800f210 <_printf_i+0x128>
 800f294:	6833      	ldr	r3, [r6, #0]
 800f296:	6825      	ldr	r5, [r4, #0]
 800f298:	6961      	ldr	r1, [r4, #20]
 800f29a:	1d18      	adds	r0, r3, #4
 800f29c:	6030      	str	r0, [r6, #0]
 800f29e:	062e      	lsls	r6, r5, #24
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	d501      	bpl.n	800f2a8 <_printf_i+0x1c0>
 800f2a4:	6019      	str	r1, [r3, #0]
 800f2a6:	e002      	b.n	800f2ae <_printf_i+0x1c6>
 800f2a8:	0668      	lsls	r0, r5, #25
 800f2aa:	d5fb      	bpl.n	800f2a4 <_printf_i+0x1bc>
 800f2ac:	8019      	strh	r1, [r3, #0]
 800f2ae:	2300      	movs	r3, #0
 800f2b0:	6123      	str	r3, [r4, #16]
 800f2b2:	4616      	mov	r6, r2
 800f2b4:	e7bc      	b.n	800f230 <_printf_i+0x148>
 800f2b6:	6833      	ldr	r3, [r6, #0]
 800f2b8:	1d1a      	adds	r2, r3, #4
 800f2ba:	6032      	str	r2, [r6, #0]
 800f2bc:	681e      	ldr	r6, [r3, #0]
 800f2be:	6862      	ldr	r2, [r4, #4]
 800f2c0:	2100      	movs	r1, #0
 800f2c2:	4630      	mov	r0, r6
 800f2c4:	f7f0 ffac 	bl	8000220 <memchr>
 800f2c8:	b108      	cbz	r0, 800f2ce <_printf_i+0x1e6>
 800f2ca:	1b80      	subs	r0, r0, r6
 800f2cc:	6060      	str	r0, [r4, #4]
 800f2ce:	6863      	ldr	r3, [r4, #4]
 800f2d0:	6123      	str	r3, [r4, #16]
 800f2d2:	2300      	movs	r3, #0
 800f2d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f2d8:	e7aa      	b.n	800f230 <_printf_i+0x148>
 800f2da:	6923      	ldr	r3, [r4, #16]
 800f2dc:	4632      	mov	r2, r6
 800f2de:	4649      	mov	r1, r9
 800f2e0:	4640      	mov	r0, r8
 800f2e2:	47d0      	blx	sl
 800f2e4:	3001      	adds	r0, #1
 800f2e6:	d0ad      	beq.n	800f244 <_printf_i+0x15c>
 800f2e8:	6823      	ldr	r3, [r4, #0]
 800f2ea:	079b      	lsls	r3, r3, #30
 800f2ec:	d413      	bmi.n	800f316 <_printf_i+0x22e>
 800f2ee:	68e0      	ldr	r0, [r4, #12]
 800f2f0:	9b03      	ldr	r3, [sp, #12]
 800f2f2:	4298      	cmp	r0, r3
 800f2f4:	bfb8      	it	lt
 800f2f6:	4618      	movlt	r0, r3
 800f2f8:	e7a6      	b.n	800f248 <_printf_i+0x160>
 800f2fa:	2301      	movs	r3, #1
 800f2fc:	4632      	mov	r2, r6
 800f2fe:	4649      	mov	r1, r9
 800f300:	4640      	mov	r0, r8
 800f302:	47d0      	blx	sl
 800f304:	3001      	adds	r0, #1
 800f306:	d09d      	beq.n	800f244 <_printf_i+0x15c>
 800f308:	3501      	adds	r5, #1
 800f30a:	68e3      	ldr	r3, [r4, #12]
 800f30c:	9903      	ldr	r1, [sp, #12]
 800f30e:	1a5b      	subs	r3, r3, r1
 800f310:	42ab      	cmp	r3, r5
 800f312:	dcf2      	bgt.n	800f2fa <_printf_i+0x212>
 800f314:	e7eb      	b.n	800f2ee <_printf_i+0x206>
 800f316:	2500      	movs	r5, #0
 800f318:	f104 0619 	add.w	r6, r4, #25
 800f31c:	e7f5      	b.n	800f30a <_printf_i+0x222>
 800f31e:	bf00      	nop
 800f320:	0800ff19 	.word	0x0800ff19
 800f324:	0800ff2a 	.word	0x0800ff2a

0800f328 <memmove>:
 800f328:	4288      	cmp	r0, r1
 800f32a:	b510      	push	{r4, lr}
 800f32c:	eb01 0402 	add.w	r4, r1, r2
 800f330:	d902      	bls.n	800f338 <memmove+0x10>
 800f332:	4284      	cmp	r4, r0
 800f334:	4623      	mov	r3, r4
 800f336:	d807      	bhi.n	800f348 <memmove+0x20>
 800f338:	1e43      	subs	r3, r0, #1
 800f33a:	42a1      	cmp	r1, r4
 800f33c:	d008      	beq.n	800f350 <memmove+0x28>
 800f33e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f342:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f346:	e7f8      	b.n	800f33a <memmove+0x12>
 800f348:	4402      	add	r2, r0
 800f34a:	4601      	mov	r1, r0
 800f34c:	428a      	cmp	r2, r1
 800f34e:	d100      	bne.n	800f352 <memmove+0x2a>
 800f350:	bd10      	pop	{r4, pc}
 800f352:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f356:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f35a:	e7f7      	b.n	800f34c <memmove+0x24>

0800f35c <_sbrk_r>:
 800f35c:	b538      	push	{r3, r4, r5, lr}
 800f35e:	4d06      	ldr	r5, [pc, #24]	@ (800f378 <_sbrk_r+0x1c>)
 800f360:	2300      	movs	r3, #0
 800f362:	4604      	mov	r4, r0
 800f364:	4608      	mov	r0, r1
 800f366:	602b      	str	r3, [r5, #0]
 800f368:	f7f2 faaa 	bl	80018c0 <_sbrk>
 800f36c:	1c43      	adds	r3, r0, #1
 800f36e:	d102      	bne.n	800f376 <_sbrk_r+0x1a>
 800f370:	682b      	ldr	r3, [r5, #0]
 800f372:	b103      	cbz	r3, 800f376 <_sbrk_r+0x1a>
 800f374:	6023      	str	r3, [r4, #0]
 800f376:	bd38      	pop	{r3, r4, r5, pc}
 800f378:	20004ff8 	.word	0x20004ff8

0800f37c <memcpy>:
 800f37c:	440a      	add	r2, r1
 800f37e:	4291      	cmp	r1, r2
 800f380:	f100 33ff 	add.w	r3, r0, #4294967295
 800f384:	d100      	bne.n	800f388 <memcpy+0xc>
 800f386:	4770      	bx	lr
 800f388:	b510      	push	{r4, lr}
 800f38a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f38e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f392:	4291      	cmp	r1, r2
 800f394:	d1f9      	bne.n	800f38a <memcpy+0xe>
 800f396:	bd10      	pop	{r4, pc}

0800f398 <_realloc_r>:
 800f398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f39c:	4680      	mov	r8, r0
 800f39e:	4615      	mov	r5, r2
 800f3a0:	460c      	mov	r4, r1
 800f3a2:	b921      	cbnz	r1, 800f3ae <_realloc_r+0x16>
 800f3a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f3a8:	4611      	mov	r1, r2
 800f3aa:	f7ff bc4b 	b.w	800ec44 <_malloc_r>
 800f3ae:	b92a      	cbnz	r2, 800f3bc <_realloc_r+0x24>
 800f3b0:	f7ff fbdc 	bl	800eb6c <_free_r>
 800f3b4:	2400      	movs	r4, #0
 800f3b6:	4620      	mov	r0, r4
 800f3b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3bc:	f000 f81a 	bl	800f3f4 <_malloc_usable_size_r>
 800f3c0:	4285      	cmp	r5, r0
 800f3c2:	4606      	mov	r6, r0
 800f3c4:	d802      	bhi.n	800f3cc <_realloc_r+0x34>
 800f3c6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f3ca:	d8f4      	bhi.n	800f3b6 <_realloc_r+0x1e>
 800f3cc:	4629      	mov	r1, r5
 800f3ce:	4640      	mov	r0, r8
 800f3d0:	f7ff fc38 	bl	800ec44 <_malloc_r>
 800f3d4:	4607      	mov	r7, r0
 800f3d6:	2800      	cmp	r0, #0
 800f3d8:	d0ec      	beq.n	800f3b4 <_realloc_r+0x1c>
 800f3da:	42b5      	cmp	r5, r6
 800f3dc:	462a      	mov	r2, r5
 800f3de:	4621      	mov	r1, r4
 800f3e0:	bf28      	it	cs
 800f3e2:	4632      	movcs	r2, r6
 800f3e4:	f7ff ffca 	bl	800f37c <memcpy>
 800f3e8:	4621      	mov	r1, r4
 800f3ea:	4640      	mov	r0, r8
 800f3ec:	f7ff fbbe 	bl	800eb6c <_free_r>
 800f3f0:	463c      	mov	r4, r7
 800f3f2:	e7e0      	b.n	800f3b6 <_realloc_r+0x1e>

0800f3f4 <_malloc_usable_size_r>:
 800f3f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f3f8:	1f18      	subs	r0, r3, #4
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	bfbc      	itt	lt
 800f3fe:	580b      	ldrlt	r3, [r1, r0]
 800f400:	18c0      	addlt	r0, r0, r3
 800f402:	4770      	bx	lr

0800f404 <sinf>:
 800f404:	ee10 3a10 	vmov	r3, s0
 800f408:	b507      	push	{r0, r1, r2, lr}
 800f40a:	4a1f      	ldr	r2, [pc, #124]	@ (800f488 <sinf+0x84>)
 800f40c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f410:	4293      	cmp	r3, r2
 800f412:	d807      	bhi.n	800f424 <sinf+0x20>
 800f414:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800f48c <sinf+0x88>
 800f418:	2000      	movs	r0, #0
 800f41a:	b003      	add	sp, #12
 800f41c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f420:	f000 b88e 	b.w	800f540 <__kernel_sinf>
 800f424:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800f428:	d304      	bcc.n	800f434 <sinf+0x30>
 800f42a:	ee30 0a40 	vsub.f32	s0, s0, s0
 800f42e:	b003      	add	sp, #12
 800f430:	f85d fb04 	ldr.w	pc, [sp], #4
 800f434:	4668      	mov	r0, sp
 800f436:	f000 f8cb 	bl	800f5d0 <__ieee754_rem_pio2f>
 800f43a:	f000 0003 	and.w	r0, r0, #3
 800f43e:	2801      	cmp	r0, #1
 800f440:	d00a      	beq.n	800f458 <sinf+0x54>
 800f442:	2802      	cmp	r0, #2
 800f444:	d00f      	beq.n	800f466 <sinf+0x62>
 800f446:	b9c0      	cbnz	r0, 800f47a <sinf+0x76>
 800f448:	eddd 0a01 	vldr	s1, [sp, #4]
 800f44c:	ed9d 0a00 	vldr	s0, [sp]
 800f450:	2001      	movs	r0, #1
 800f452:	f000 f875 	bl	800f540 <__kernel_sinf>
 800f456:	e7ea      	b.n	800f42e <sinf+0x2a>
 800f458:	eddd 0a01 	vldr	s1, [sp, #4]
 800f45c:	ed9d 0a00 	vldr	s0, [sp]
 800f460:	f000 f816 	bl	800f490 <__kernel_cosf>
 800f464:	e7e3      	b.n	800f42e <sinf+0x2a>
 800f466:	eddd 0a01 	vldr	s1, [sp, #4]
 800f46a:	ed9d 0a00 	vldr	s0, [sp]
 800f46e:	2001      	movs	r0, #1
 800f470:	f000 f866 	bl	800f540 <__kernel_sinf>
 800f474:	eeb1 0a40 	vneg.f32	s0, s0
 800f478:	e7d9      	b.n	800f42e <sinf+0x2a>
 800f47a:	eddd 0a01 	vldr	s1, [sp, #4]
 800f47e:	ed9d 0a00 	vldr	s0, [sp]
 800f482:	f000 f805 	bl	800f490 <__kernel_cosf>
 800f486:	e7f5      	b.n	800f474 <sinf+0x70>
 800f488:	3f490fd8 	.word	0x3f490fd8
 800f48c:	00000000 	.word	0x00000000

0800f490 <__kernel_cosf>:
 800f490:	ee10 3a10 	vmov	r3, s0
 800f494:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f498:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800f49c:	eef0 6a40 	vmov.f32	s13, s0
 800f4a0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800f4a4:	d204      	bcs.n	800f4b0 <__kernel_cosf+0x20>
 800f4a6:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800f4aa:	ee17 2a90 	vmov	r2, s15
 800f4ae:	b342      	cbz	r2, 800f502 <__kernel_cosf+0x72>
 800f4b0:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800f4b4:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800f520 <__kernel_cosf+0x90>
 800f4b8:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800f524 <__kernel_cosf+0x94>
 800f4bc:	4a1a      	ldr	r2, [pc, #104]	@ (800f528 <__kernel_cosf+0x98>)
 800f4be:	eea7 6a27 	vfma.f32	s12, s14, s15
 800f4c2:	4293      	cmp	r3, r2
 800f4c4:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800f52c <__kernel_cosf+0x9c>
 800f4c8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800f4cc:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800f530 <__kernel_cosf+0xa0>
 800f4d0:	eea7 6a87 	vfma.f32	s12, s15, s14
 800f4d4:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800f534 <__kernel_cosf+0xa4>
 800f4d8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800f4dc:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800f538 <__kernel_cosf+0xa8>
 800f4e0:	eea7 6a87 	vfma.f32	s12, s15, s14
 800f4e4:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800f4e8:	ee26 6a07 	vmul.f32	s12, s12, s14
 800f4ec:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800f4f0:	eee7 0a06 	vfma.f32	s1, s14, s12
 800f4f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f4f8:	d804      	bhi.n	800f504 <__kernel_cosf+0x74>
 800f4fa:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800f4fe:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f502:	4770      	bx	lr
 800f504:	4a0d      	ldr	r2, [pc, #52]	@ (800f53c <__kernel_cosf+0xac>)
 800f506:	4293      	cmp	r3, r2
 800f508:	bf9a      	itte	ls
 800f50a:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800f50e:	ee07 3a10 	vmovls	s14, r3
 800f512:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800f516:	ee30 0a47 	vsub.f32	s0, s0, s14
 800f51a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f51e:	e7ec      	b.n	800f4fa <__kernel_cosf+0x6a>
 800f520:	ad47d74e 	.word	0xad47d74e
 800f524:	310f74f6 	.word	0x310f74f6
 800f528:	3e999999 	.word	0x3e999999
 800f52c:	b493f27c 	.word	0xb493f27c
 800f530:	37d00d01 	.word	0x37d00d01
 800f534:	bab60b61 	.word	0xbab60b61
 800f538:	3d2aaaab 	.word	0x3d2aaaab
 800f53c:	3f480000 	.word	0x3f480000

0800f540 <__kernel_sinf>:
 800f540:	ee10 3a10 	vmov	r3, s0
 800f544:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f548:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800f54c:	d204      	bcs.n	800f558 <__kernel_sinf+0x18>
 800f54e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800f552:	ee17 3a90 	vmov	r3, s15
 800f556:	b35b      	cbz	r3, 800f5b0 <__kernel_sinf+0x70>
 800f558:	ee20 7a00 	vmul.f32	s14, s0, s0
 800f55c:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800f5b4 <__kernel_sinf+0x74>
 800f560:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800f5b8 <__kernel_sinf+0x78>
 800f564:	eea7 6a27 	vfma.f32	s12, s14, s15
 800f568:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800f5bc <__kernel_sinf+0x7c>
 800f56c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800f570:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800f5c0 <__kernel_sinf+0x80>
 800f574:	eea7 6a87 	vfma.f32	s12, s15, s14
 800f578:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800f5c4 <__kernel_sinf+0x84>
 800f57c:	ee60 6a07 	vmul.f32	s13, s0, s14
 800f580:	eee6 7a07 	vfma.f32	s15, s12, s14
 800f584:	b930      	cbnz	r0, 800f594 <__kernel_sinf+0x54>
 800f586:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800f5c8 <__kernel_sinf+0x88>
 800f58a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800f58e:	eea6 0a26 	vfma.f32	s0, s12, s13
 800f592:	4770      	bx	lr
 800f594:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800f598:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800f59c:	eee0 7a86 	vfma.f32	s15, s1, s12
 800f5a0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800f5a4:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800f5cc <__kernel_sinf+0x8c>
 800f5a8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800f5ac:	ee30 0a60 	vsub.f32	s0, s0, s1
 800f5b0:	4770      	bx	lr
 800f5b2:	bf00      	nop
 800f5b4:	2f2ec9d3 	.word	0x2f2ec9d3
 800f5b8:	b2d72f34 	.word	0xb2d72f34
 800f5bc:	3638ef1b 	.word	0x3638ef1b
 800f5c0:	b9500d01 	.word	0xb9500d01
 800f5c4:	3c088889 	.word	0x3c088889
 800f5c8:	be2aaaab 	.word	0xbe2aaaab
 800f5cc:	3e2aaaab 	.word	0x3e2aaaab

0800f5d0 <__ieee754_rem_pio2f>:
 800f5d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f5d2:	ee10 6a10 	vmov	r6, s0
 800f5d6:	4b88      	ldr	r3, [pc, #544]	@ (800f7f8 <__ieee754_rem_pio2f+0x228>)
 800f5d8:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800f5dc:	429d      	cmp	r5, r3
 800f5de:	b087      	sub	sp, #28
 800f5e0:	4604      	mov	r4, r0
 800f5e2:	d805      	bhi.n	800f5f0 <__ieee754_rem_pio2f+0x20>
 800f5e4:	2300      	movs	r3, #0
 800f5e6:	ed80 0a00 	vstr	s0, [r0]
 800f5ea:	6043      	str	r3, [r0, #4]
 800f5ec:	2000      	movs	r0, #0
 800f5ee:	e022      	b.n	800f636 <__ieee754_rem_pio2f+0x66>
 800f5f0:	4b82      	ldr	r3, [pc, #520]	@ (800f7fc <__ieee754_rem_pio2f+0x22c>)
 800f5f2:	429d      	cmp	r5, r3
 800f5f4:	d83a      	bhi.n	800f66c <__ieee754_rem_pio2f+0x9c>
 800f5f6:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800f5fa:	2e00      	cmp	r6, #0
 800f5fc:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800f800 <__ieee754_rem_pio2f+0x230>
 800f600:	4a80      	ldr	r2, [pc, #512]	@ (800f804 <__ieee754_rem_pio2f+0x234>)
 800f602:	f023 030f 	bic.w	r3, r3, #15
 800f606:	dd18      	ble.n	800f63a <__ieee754_rem_pio2f+0x6a>
 800f608:	4293      	cmp	r3, r2
 800f60a:	ee70 7a47 	vsub.f32	s15, s0, s14
 800f60e:	bf09      	itett	eq
 800f610:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800f808 <__ieee754_rem_pio2f+0x238>
 800f614:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800f80c <__ieee754_rem_pio2f+0x23c>
 800f618:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800f810 <__ieee754_rem_pio2f+0x240>
 800f61c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800f620:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800f624:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f628:	ed80 7a00 	vstr	s14, [r0]
 800f62c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f630:	edc0 7a01 	vstr	s15, [r0, #4]
 800f634:	2001      	movs	r0, #1
 800f636:	b007      	add	sp, #28
 800f638:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f63a:	4293      	cmp	r3, r2
 800f63c:	ee70 7a07 	vadd.f32	s15, s0, s14
 800f640:	bf09      	itett	eq
 800f642:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800f808 <__ieee754_rem_pio2f+0x238>
 800f646:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800f80c <__ieee754_rem_pio2f+0x23c>
 800f64a:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800f810 <__ieee754_rem_pio2f+0x240>
 800f64e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800f652:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800f656:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f65a:	ed80 7a00 	vstr	s14, [r0]
 800f65e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f662:	edc0 7a01 	vstr	s15, [r0, #4]
 800f666:	f04f 30ff 	mov.w	r0, #4294967295
 800f66a:	e7e4      	b.n	800f636 <__ieee754_rem_pio2f+0x66>
 800f66c:	4b69      	ldr	r3, [pc, #420]	@ (800f814 <__ieee754_rem_pio2f+0x244>)
 800f66e:	429d      	cmp	r5, r3
 800f670:	d873      	bhi.n	800f75a <__ieee754_rem_pio2f+0x18a>
 800f672:	f000 f8dd 	bl	800f830 <fabsf>
 800f676:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800f818 <__ieee754_rem_pio2f+0x248>
 800f67a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800f67e:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f682:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f686:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f68a:	ee17 0a90 	vmov	r0, s15
 800f68e:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800f800 <__ieee754_rem_pio2f+0x230>
 800f692:	eea7 0a67 	vfms.f32	s0, s14, s15
 800f696:	281f      	cmp	r0, #31
 800f698:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800f80c <__ieee754_rem_pio2f+0x23c>
 800f69c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f6a0:	eeb1 6a47 	vneg.f32	s12, s14
 800f6a4:	ee70 6a67 	vsub.f32	s13, s0, s15
 800f6a8:	ee16 1a90 	vmov	r1, s13
 800f6ac:	dc09      	bgt.n	800f6c2 <__ieee754_rem_pio2f+0xf2>
 800f6ae:	4a5b      	ldr	r2, [pc, #364]	@ (800f81c <__ieee754_rem_pio2f+0x24c>)
 800f6b0:	1e47      	subs	r7, r0, #1
 800f6b2:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800f6b6:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800f6ba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800f6be:	4293      	cmp	r3, r2
 800f6c0:	d107      	bne.n	800f6d2 <__ieee754_rem_pio2f+0x102>
 800f6c2:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800f6c6:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800f6ca:	2a08      	cmp	r2, #8
 800f6cc:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800f6d0:	dc14      	bgt.n	800f6fc <__ieee754_rem_pio2f+0x12c>
 800f6d2:	6021      	str	r1, [r4, #0]
 800f6d4:	ed94 7a00 	vldr	s14, [r4]
 800f6d8:	ee30 0a47 	vsub.f32	s0, s0, s14
 800f6dc:	2e00      	cmp	r6, #0
 800f6de:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f6e2:	ed84 0a01 	vstr	s0, [r4, #4]
 800f6e6:	daa6      	bge.n	800f636 <__ieee754_rem_pio2f+0x66>
 800f6e8:	eeb1 7a47 	vneg.f32	s14, s14
 800f6ec:	eeb1 0a40 	vneg.f32	s0, s0
 800f6f0:	ed84 7a00 	vstr	s14, [r4]
 800f6f4:	ed84 0a01 	vstr	s0, [r4, #4]
 800f6f8:	4240      	negs	r0, r0
 800f6fa:	e79c      	b.n	800f636 <__ieee754_rem_pio2f+0x66>
 800f6fc:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800f808 <__ieee754_rem_pio2f+0x238>
 800f700:	eef0 6a40 	vmov.f32	s13, s0
 800f704:	eee6 6a25 	vfma.f32	s13, s12, s11
 800f708:	ee70 7a66 	vsub.f32	s15, s0, s13
 800f70c:	eee6 7a25 	vfma.f32	s15, s12, s11
 800f710:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800f810 <__ieee754_rem_pio2f+0x240>
 800f714:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800f718:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800f71c:	ee15 2a90 	vmov	r2, s11
 800f720:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800f724:	1a5b      	subs	r3, r3, r1
 800f726:	2b19      	cmp	r3, #25
 800f728:	dc04      	bgt.n	800f734 <__ieee754_rem_pio2f+0x164>
 800f72a:	edc4 5a00 	vstr	s11, [r4]
 800f72e:	eeb0 0a66 	vmov.f32	s0, s13
 800f732:	e7cf      	b.n	800f6d4 <__ieee754_rem_pio2f+0x104>
 800f734:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800f820 <__ieee754_rem_pio2f+0x250>
 800f738:	eeb0 0a66 	vmov.f32	s0, s13
 800f73c:	eea6 0a25 	vfma.f32	s0, s12, s11
 800f740:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800f744:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800f824 <__ieee754_rem_pio2f+0x254>
 800f748:	eee6 7a25 	vfma.f32	s15, s12, s11
 800f74c:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800f750:	ee30 7a67 	vsub.f32	s14, s0, s15
 800f754:	ed84 7a00 	vstr	s14, [r4]
 800f758:	e7bc      	b.n	800f6d4 <__ieee754_rem_pio2f+0x104>
 800f75a:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800f75e:	d306      	bcc.n	800f76e <__ieee754_rem_pio2f+0x19e>
 800f760:	ee70 7a40 	vsub.f32	s15, s0, s0
 800f764:	edc0 7a01 	vstr	s15, [r0, #4]
 800f768:	edc0 7a00 	vstr	s15, [r0]
 800f76c:	e73e      	b.n	800f5ec <__ieee754_rem_pio2f+0x1c>
 800f76e:	15ea      	asrs	r2, r5, #23
 800f770:	3a86      	subs	r2, #134	@ 0x86
 800f772:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800f776:	ee07 3a90 	vmov	s15, r3
 800f77a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800f77e:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800f828 <__ieee754_rem_pio2f+0x258>
 800f782:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f786:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f78a:	ed8d 7a03 	vstr	s14, [sp, #12]
 800f78e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f792:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800f796:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f79a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f79e:	ed8d 7a04 	vstr	s14, [sp, #16]
 800f7a2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f7a6:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f7aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7ae:	edcd 7a05 	vstr	s15, [sp, #20]
 800f7b2:	d11e      	bne.n	800f7f2 <__ieee754_rem_pio2f+0x222>
 800f7b4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f7b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7bc:	bf0c      	ite	eq
 800f7be:	2301      	moveq	r3, #1
 800f7c0:	2302      	movne	r3, #2
 800f7c2:	491a      	ldr	r1, [pc, #104]	@ (800f82c <__ieee754_rem_pio2f+0x25c>)
 800f7c4:	9101      	str	r1, [sp, #4]
 800f7c6:	2102      	movs	r1, #2
 800f7c8:	9100      	str	r1, [sp, #0]
 800f7ca:	a803      	add	r0, sp, #12
 800f7cc:	4621      	mov	r1, r4
 800f7ce:	f000 f837 	bl	800f840 <__kernel_rem_pio2f>
 800f7d2:	2e00      	cmp	r6, #0
 800f7d4:	f6bf af2f 	bge.w	800f636 <__ieee754_rem_pio2f+0x66>
 800f7d8:	edd4 7a00 	vldr	s15, [r4]
 800f7dc:	eef1 7a67 	vneg.f32	s15, s15
 800f7e0:	edc4 7a00 	vstr	s15, [r4]
 800f7e4:	edd4 7a01 	vldr	s15, [r4, #4]
 800f7e8:	eef1 7a67 	vneg.f32	s15, s15
 800f7ec:	edc4 7a01 	vstr	s15, [r4, #4]
 800f7f0:	e782      	b.n	800f6f8 <__ieee754_rem_pio2f+0x128>
 800f7f2:	2303      	movs	r3, #3
 800f7f4:	e7e5      	b.n	800f7c2 <__ieee754_rem_pio2f+0x1f2>
 800f7f6:	bf00      	nop
 800f7f8:	3f490fd8 	.word	0x3f490fd8
 800f7fc:	4016cbe3 	.word	0x4016cbe3
 800f800:	3fc90f80 	.word	0x3fc90f80
 800f804:	3fc90fd0 	.word	0x3fc90fd0
 800f808:	37354400 	.word	0x37354400
 800f80c:	37354443 	.word	0x37354443
 800f810:	2e85a308 	.word	0x2e85a308
 800f814:	43490f80 	.word	0x43490f80
 800f818:	3f22f984 	.word	0x3f22f984
 800f81c:	0800ff3c 	.word	0x0800ff3c
 800f820:	2e85a300 	.word	0x2e85a300
 800f824:	248d3132 	.word	0x248d3132
 800f828:	43800000 	.word	0x43800000
 800f82c:	0800ffbc 	.word	0x0800ffbc

0800f830 <fabsf>:
 800f830:	ee10 3a10 	vmov	r3, s0
 800f834:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f838:	ee00 3a10 	vmov	s0, r3
 800f83c:	4770      	bx	lr
	...

0800f840 <__kernel_rem_pio2f>:
 800f840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f844:	ed2d 8b04 	vpush	{d8-d9}
 800f848:	b0d9      	sub	sp, #356	@ 0x164
 800f84a:	4690      	mov	r8, r2
 800f84c:	9001      	str	r0, [sp, #4]
 800f84e:	4ab9      	ldr	r2, [pc, #740]	@ (800fb34 <__kernel_rem_pio2f+0x2f4>)
 800f850:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800f852:	f118 0f04 	cmn.w	r8, #4
 800f856:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800f85a:	460f      	mov	r7, r1
 800f85c:	f103 3bff 	add.w	fp, r3, #4294967295
 800f860:	db27      	blt.n	800f8b2 <__kernel_rem_pio2f+0x72>
 800f862:	f1b8 0203 	subs.w	r2, r8, #3
 800f866:	bf48      	it	mi
 800f868:	f108 0204 	addmi.w	r2, r8, #4
 800f86c:	10d2      	asrs	r2, r2, #3
 800f86e:	1c55      	adds	r5, r2, #1
 800f870:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800f872:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 800fb44 <__kernel_rem_pio2f+0x304>
 800f876:	00e8      	lsls	r0, r5, #3
 800f878:	eba2 060b 	sub.w	r6, r2, fp
 800f87c:	9002      	str	r0, [sp, #8]
 800f87e:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800f882:	eb0a 0c0b 	add.w	ip, sl, fp
 800f886:	ac1c      	add	r4, sp, #112	@ 0x70
 800f888:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800f88c:	2000      	movs	r0, #0
 800f88e:	4560      	cmp	r0, ip
 800f890:	dd11      	ble.n	800f8b6 <__kernel_rem_pio2f+0x76>
 800f892:	a91c      	add	r1, sp, #112	@ 0x70
 800f894:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800f898:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800f89c:	f04f 0c00 	mov.w	ip, #0
 800f8a0:	45d4      	cmp	ip, sl
 800f8a2:	dc27      	bgt.n	800f8f4 <__kernel_rem_pio2f+0xb4>
 800f8a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 800f8a8:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 800fb44 <__kernel_rem_pio2f+0x304>
 800f8ac:	4606      	mov	r6, r0
 800f8ae:	2400      	movs	r4, #0
 800f8b0:	e016      	b.n	800f8e0 <__kernel_rem_pio2f+0xa0>
 800f8b2:	2200      	movs	r2, #0
 800f8b4:	e7db      	b.n	800f86e <__kernel_rem_pio2f+0x2e>
 800f8b6:	42c6      	cmn	r6, r0
 800f8b8:	bf5d      	ittte	pl
 800f8ba:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800f8be:	ee07 1a90 	vmovpl	s15, r1
 800f8c2:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800f8c6:	eef0 7a47 	vmovmi.f32	s15, s14
 800f8ca:	ece4 7a01 	vstmia	r4!, {s15}
 800f8ce:	3001      	adds	r0, #1
 800f8d0:	e7dd      	b.n	800f88e <__kernel_rem_pio2f+0x4e>
 800f8d2:	ecfe 6a01 	vldmia	lr!, {s13}
 800f8d6:	ed96 7a00 	vldr	s14, [r6]
 800f8da:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f8de:	3401      	adds	r4, #1
 800f8e0:	455c      	cmp	r4, fp
 800f8e2:	f1a6 0604 	sub.w	r6, r6, #4
 800f8e6:	ddf4      	ble.n	800f8d2 <__kernel_rem_pio2f+0x92>
 800f8e8:	ece9 7a01 	vstmia	r9!, {s15}
 800f8ec:	f10c 0c01 	add.w	ip, ip, #1
 800f8f0:	3004      	adds	r0, #4
 800f8f2:	e7d5      	b.n	800f8a0 <__kernel_rem_pio2f+0x60>
 800f8f4:	a908      	add	r1, sp, #32
 800f8f6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f8fa:	9104      	str	r1, [sp, #16]
 800f8fc:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800f8fe:	eddf 8a90 	vldr	s17, [pc, #576]	@ 800fb40 <__kernel_rem_pio2f+0x300>
 800f902:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 800fb3c <__kernel_rem_pio2f+0x2fc>
 800f906:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800f90a:	9203      	str	r2, [sp, #12]
 800f90c:	4654      	mov	r4, sl
 800f90e:	00a2      	lsls	r2, r4, #2
 800f910:	9205      	str	r2, [sp, #20]
 800f912:	aa58      	add	r2, sp, #352	@ 0x160
 800f914:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800f918:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800f91c:	a944      	add	r1, sp, #272	@ 0x110
 800f91e:	aa08      	add	r2, sp, #32
 800f920:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800f924:	4694      	mov	ip, r2
 800f926:	4626      	mov	r6, r4
 800f928:	2e00      	cmp	r6, #0
 800f92a:	f1a0 0004 	sub.w	r0, r0, #4
 800f92e:	dc4c      	bgt.n	800f9ca <__kernel_rem_pio2f+0x18a>
 800f930:	4628      	mov	r0, r5
 800f932:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f936:	f000 f9f5 	bl	800fd24 <scalbnf>
 800f93a:	eeb0 8a40 	vmov.f32	s16, s0
 800f93e:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800f942:	ee28 0a00 	vmul.f32	s0, s16, s0
 800f946:	f000 fa53 	bl	800fdf0 <floorf>
 800f94a:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800f94e:	eea0 8a67 	vfms.f32	s16, s0, s15
 800f952:	2d00      	cmp	r5, #0
 800f954:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f958:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800f95c:	ee17 9a90 	vmov	r9, s15
 800f960:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f964:	ee38 8a67 	vsub.f32	s16, s16, s15
 800f968:	dd41      	ble.n	800f9ee <__kernel_rem_pio2f+0x1ae>
 800f96a:	f104 3cff 	add.w	ip, r4, #4294967295
 800f96e:	a908      	add	r1, sp, #32
 800f970:	f1c5 0e08 	rsb	lr, r5, #8
 800f974:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800f978:	fa46 f00e 	asr.w	r0, r6, lr
 800f97c:	4481      	add	r9, r0
 800f97e:	fa00 f00e 	lsl.w	r0, r0, lr
 800f982:	1a36      	subs	r6, r6, r0
 800f984:	f1c5 0007 	rsb	r0, r5, #7
 800f988:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800f98c:	4106      	asrs	r6, r0
 800f98e:	2e00      	cmp	r6, #0
 800f990:	dd3c      	ble.n	800fa0c <__kernel_rem_pio2f+0x1cc>
 800f992:	f04f 0e00 	mov.w	lr, #0
 800f996:	f109 0901 	add.w	r9, r9, #1
 800f99a:	4670      	mov	r0, lr
 800f99c:	4574      	cmp	r4, lr
 800f99e:	dc68      	bgt.n	800fa72 <__kernel_rem_pio2f+0x232>
 800f9a0:	2d00      	cmp	r5, #0
 800f9a2:	dd03      	ble.n	800f9ac <__kernel_rem_pio2f+0x16c>
 800f9a4:	2d01      	cmp	r5, #1
 800f9a6:	d074      	beq.n	800fa92 <__kernel_rem_pio2f+0x252>
 800f9a8:	2d02      	cmp	r5, #2
 800f9aa:	d07d      	beq.n	800faa8 <__kernel_rem_pio2f+0x268>
 800f9ac:	2e02      	cmp	r6, #2
 800f9ae:	d12d      	bne.n	800fa0c <__kernel_rem_pio2f+0x1cc>
 800f9b0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800f9b4:	ee30 8a48 	vsub.f32	s16, s0, s16
 800f9b8:	b340      	cbz	r0, 800fa0c <__kernel_rem_pio2f+0x1cc>
 800f9ba:	4628      	mov	r0, r5
 800f9bc:	9306      	str	r3, [sp, #24]
 800f9be:	f000 f9b1 	bl	800fd24 <scalbnf>
 800f9c2:	9b06      	ldr	r3, [sp, #24]
 800f9c4:	ee38 8a40 	vsub.f32	s16, s16, s0
 800f9c8:	e020      	b.n	800fa0c <__kernel_rem_pio2f+0x1cc>
 800f9ca:	ee60 7a28 	vmul.f32	s15, s0, s17
 800f9ce:	3e01      	subs	r6, #1
 800f9d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f9d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f9d8:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800f9dc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800f9e0:	ecac 0a01 	vstmia	ip!, {s0}
 800f9e4:	ed90 0a00 	vldr	s0, [r0]
 800f9e8:	ee37 0a80 	vadd.f32	s0, s15, s0
 800f9ec:	e79c      	b.n	800f928 <__kernel_rem_pio2f+0xe8>
 800f9ee:	d105      	bne.n	800f9fc <__kernel_rem_pio2f+0x1bc>
 800f9f0:	1e60      	subs	r0, r4, #1
 800f9f2:	a908      	add	r1, sp, #32
 800f9f4:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800f9f8:	11f6      	asrs	r6, r6, #7
 800f9fa:	e7c8      	b.n	800f98e <__kernel_rem_pio2f+0x14e>
 800f9fc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800fa00:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800fa04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa08:	da31      	bge.n	800fa6e <__kernel_rem_pio2f+0x22e>
 800fa0a:	2600      	movs	r6, #0
 800fa0c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800fa10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa14:	f040 8098 	bne.w	800fb48 <__kernel_rem_pio2f+0x308>
 800fa18:	1e60      	subs	r0, r4, #1
 800fa1a:	2200      	movs	r2, #0
 800fa1c:	4550      	cmp	r0, sl
 800fa1e:	da4b      	bge.n	800fab8 <__kernel_rem_pio2f+0x278>
 800fa20:	2a00      	cmp	r2, #0
 800fa22:	d065      	beq.n	800faf0 <__kernel_rem_pio2f+0x2b0>
 800fa24:	3c01      	subs	r4, #1
 800fa26:	ab08      	add	r3, sp, #32
 800fa28:	3d08      	subs	r5, #8
 800fa2a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d0f8      	beq.n	800fa24 <__kernel_rem_pio2f+0x1e4>
 800fa32:	4628      	mov	r0, r5
 800fa34:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800fa38:	f000 f974 	bl	800fd24 <scalbnf>
 800fa3c:	1c63      	adds	r3, r4, #1
 800fa3e:	aa44      	add	r2, sp, #272	@ 0x110
 800fa40:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800fb40 <__kernel_rem_pio2f+0x300>
 800fa44:	0099      	lsls	r1, r3, #2
 800fa46:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800fa4a:	4623      	mov	r3, r4
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	f280 80a9 	bge.w	800fba4 <__kernel_rem_pio2f+0x364>
 800fa52:	4623      	mov	r3, r4
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	f2c0 80c7 	blt.w	800fbe8 <__kernel_rem_pio2f+0x3a8>
 800fa5a:	aa44      	add	r2, sp, #272	@ 0x110
 800fa5c:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800fa60:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800fb38 <__kernel_rem_pio2f+0x2f8>
 800fa64:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800fb44 <__kernel_rem_pio2f+0x304>
 800fa68:	2000      	movs	r0, #0
 800fa6a:	1ae2      	subs	r2, r4, r3
 800fa6c:	e0b1      	b.n	800fbd2 <__kernel_rem_pio2f+0x392>
 800fa6e:	2602      	movs	r6, #2
 800fa70:	e78f      	b.n	800f992 <__kernel_rem_pio2f+0x152>
 800fa72:	f852 1b04 	ldr.w	r1, [r2], #4
 800fa76:	b948      	cbnz	r0, 800fa8c <__kernel_rem_pio2f+0x24c>
 800fa78:	b121      	cbz	r1, 800fa84 <__kernel_rem_pio2f+0x244>
 800fa7a:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800fa7e:	f842 1c04 	str.w	r1, [r2, #-4]
 800fa82:	2101      	movs	r1, #1
 800fa84:	f10e 0e01 	add.w	lr, lr, #1
 800fa88:	4608      	mov	r0, r1
 800fa8a:	e787      	b.n	800f99c <__kernel_rem_pio2f+0x15c>
 800fa8c:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800fa90:	e7f5      	b.n	800fa7e <__kernel_rem_pio2f+0x23e>
 800fa92:	f104 3cff 	add.w	ip, r4, #4294967295
 800fa96:	aa08      	add	r2, sp, #32
 800fa98:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800fa9c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800faa0:	a908      	add	r1, sp, #32
 800faa2:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800faa6:	e781      	b.n	800f9ac <__kernel_rem_pio2f+0x16c>
 800faa8:	f104 3cff 	add.w	ip, r4, #4294967295
 800faac:	aa08      	add	r2, sp, #32
 800faae:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800fab2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800fab6:	e7f3      	b.n	800faa0 <__kernel_rem_pio2f+0x260>
 800fab8:	a908      	add	r1, sp, #32
 800faba:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800fabe:	3801      	subs	r0, #1
 800fac0:	430a      	orrs	r2, r1
 800fac2:	e7ab      	b.n	800fa1c <__kernel_rem_pio2f+0x1dc>
 800fac4:	3201      	adds	r2, #1
 800fac6:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800faca:	2e00      	cmp	r6, #0
 800facc:	d0fa      	beq.n	800fac4 <__kernel_rem_pio2f+0x284>
 800face:	9905      	ldr	r1, [sp, #20]
 800fad0:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800fad4:	eb0d 0001 	add.w	r0, sp, r1
 800fad8:	18e6      	adds	r6, r4, r3
 800fada:	a91c      	add	r1, sp, #112	@ 0x70
 800fadc:	f104 0c01 	add.w	ip, r4, #1
 800fae0:	384c      	subs	r0, #76	@ 0x4c
 800fae2:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800fae6:	4422      	add	r2, r4
 800fae8:	4562      	cmp	r2, ip
 800faea:	da04      	bge.n	800faf6 <__kernel_rem_pio2f+0x2b6>
 800faec:	4614      	mov	r4, r2
 800faee:	e70e      	b.n	800f90e <__kernel_rem_pio2f+0xce>
 800faf0:	9804      	ldr	r0, [sp, #16]
 800faf2:	2201      	movs	r2, #1
 800faf4:	e7e7      	b.n	800fac6 <__kernel_rem_pio2f+0x286>
 800faf6:	9903      	ldr	r1, [sp, #12]
 800faf8:	f8dd e004 	ldr.w	lr, [sp, #4]
 800fafc:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800fb00:	9105      	str	r1, [sp, #20]
 800fb02:	ee07 1a90 	vmov	s15, r1
 800fb06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fb0a:	2400      	movs	r4, #0
 800fb0c:	ece6 7a01 	vstmia	r6!, {s15}
 800fb10:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800fb44 <__kernel_rem_pio2f+0x304>
 800fb14:	46b1      	mov	r9, r6
 800fb16:	455c      	cmp	r4, fp
 800fb18:	dd04      	ble.n	800fb24 <__kernel_rem_pio2f+0x2e4>
 800fb1a:	ece0 7a01 	vstmia	r0!, {s15}
 800fb1e:	f10c 0c01 	add.w	ip, ip, #1
 800fb22:	e7e1      	b.n	800fae8 <__kernel_rem_pio2f+0x2a8>
 800fb24:	ecfe 6a01 	vldmia	lr!, {s13}
 800fb28:	ed39 7a01 	vldmdb	r9!, {s14}
 800fb2c:	3401      	adds	r4, #1
 800fb2e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800fb32:	e7f0      	b.n	800fb16 <__kernel_rem_pio2f+0x2d6>
 800fb34:	08010300 	.word	0x08010300
 800fb38:	080102d4 	.word	0x080102d4
 800fb3c:	43800000 	.word	0x43800000
 800fb40:	3b800000 	.word	0x3b800000
 800fb44:	00000000 	.word	0x00000000
 800fb48:	9b02      	ldr	r3, [sp, #8]
 800fb4a:	eeb0 0a48 	vmov.f32	s0, s16
 800fb4e:	eba3 0008 	sub.w	r0, r3, r8
 800fb52:	f000 f8e7 	bl	800fd24 <scalbnf>
 800fb56:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800fb3c <__kernel_rem_pio2f+0x2fc>
 800fb5a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800fb5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb62:	db19      	blt.n	800fb98 <__kernel_rem_pio2f+0x358>
 800fb64:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800fb40 <__kernel_rem_pio2f+0x300>
 800fb68:	ee60 7a27 	vmul.f32	s15, s0, s15
 800fb6c:	aa08      	add	r2, sp, #32
 800fb6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fb72:	3508      	adds	r5, #8
 800fb74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fb78:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800fb7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fb80:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800fb84:	ee10 3a10 	vmov	r3, s0
 800fb88:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800fb8c:	ee17 3a90 	vmov	r3, s15
 800fb90:	3401      	adds	r4, #1
 800fb92:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800fb96:	e74c      	b.n	800fa32 <__kernel_rem_pio2f+0x1f2>
 800fb98:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800fb9c:	aa08      	add	r2, sp, #32
 800fb9e:	ee10 3a10 	vmov	r3, s0
 800fba2:	e7f6      	b.n	800fb92 <__kernel_rem_pio2f+0x352>
 800fba4:	a808      	add	r0, sp, #32
 800fba6:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800fbaa:	9001      	str	r0, [sp, #4]
 800fbac:	ee07 0a90 	vmov	s15, r0
 800fbb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fbb4:	3b01      	subs	r3, #1
 800fbb6:	ee67 7a80 	vmul.f32	s15, s15, s0
 800fbba:	ee20 0a07 	vmul.f32	s0, s0, s14
 800fbbe:	ed62 7a01 	vstmdb	r2!, {s15}
 800fbc2:	e743      	b.n	800fa4c <__kernel_rem_pio2f+0x20c>
 800fbc4:	ecfc 6a01 	vldmia	ip!, {s13}
 800fbc8:	ecb5 7a01 	vldmia	r5!, {s14}
 800fbcc:	eee6 7a87 	vfma.f32	s15, s13, s14
 800fbd0:	3001      	adds	r0, #1
 800fbd2:	4550      	cmp	r0, sl
 800fbd4:	dc01      	bgt.n	800fbda <__kernel_rem_pio2f+0x39a>
 800fbd6:	4282      	cmp	r2, r0
 800fbd8:	daf4      	bge.n	800fbc4 <__kernel_rem_pio2f+0x384>
 800fbda:	a858      	add	r0, sp, #352	@ 0x160
 800fbdc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800fbe0:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800fbe4:	3b01      	subs	r3, #1
 800fbe6:	e735      	b.n	800fa54 <__kernel_rem_pio2f+0x214>
 800fbe8:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800fbea:	2b02      	cmp	r3, #2
 800fbec:	dc09      	bgt.n	800fc02 <__kernel_rem_pio2f+0x3c2>
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	dc2b      	bgt.n	800fc4a <__kernel_rem_pio2f+0x40a>
 800fbf2:	d044      	beq.n	800fc7e <__kernel_rem_pio2f+0x43e>
 800fbf4:	f009 0007 	and.w	r0, r9, #7
 800fbf8:	b059      	add	sp, #356	@ 0x164
 800fbfa:	ecbd 8b04 	vpop	{d8-d9}
 800fbfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc02:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800fc04:	2b03      	cmp	r3, #3
 800fc06:	d1f5      	bne.n	800fbf4 <__kernel_rem_pio2f+0x3b4>
 800fc08:	aa30      	add	r2, sp, #192	@ 0xc0
 800fc0a:	1f0b      	subs	r3, r1, #4
 800fc0c:	4413      	add	r3, r2
 800fc0e:	461a      	mov	r2, r3
 800fc10:	4620      	mov	r0, r4
 800fc12:	2800      	cmp	r0, #0
 800fc14:	f1a2 0204 	sub.w	r2, r2, #4
 800fc18:	dc52      	bgt.n	800fcc0 <__kernel_rem_pio2f+0x480>
 800fc1a:	4622      	mov	r2, r4
 800fc1c:	2a01      	cmp	r2, #1
 800fc1e:	f1a3 0304 	sub.w	r3, r3, #4
 800fc22:	dc5d      	bgt.n	800fce0 <__kernel_rem_pio2f+0x4a0>
 800fc24:	ab30      	add	r3, sp, #192	@ 0xc0
 800fc26:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 800fb44 <__kernel_rem_pio2f+0x304>
 800fc2a:	440b      	add	r3, r1
 800fc2c:	2c01      	cmp	r4, #1
 800fc2e:	dc67      	bgt.n	800fd00 <__kernel_rem_pio2f+0x4c0>
 800fc30:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800fc34:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800fc38:	2e00      	cmp	r6, #0
 800fc3a:	d167      	bne.n	800fd0c <__kernel_rem_pio2f+0x4cc>
 800fc3c:	edc7 6a00 	vstr	s13, [r7]
 800fc40:	ed87 7a01 	vstr	s14, [r7, #4]
 800fc44:	edc7 7a02 	vstr	s15, [r7, #8]
 800fc48:	e7d4      	b.n	800fbf4 <__kernel_rem_pio2f+0x3b4>
 800fc4a:	ab30      	add	r3, sp, #192	@ 0xc0
 800fc4c:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 800fb44 <__kernel_rem_pio2f+0x304>
 800fc50:	440b      	add	r3, r1
 800fc52:	4622      	mov	r2, r4
 800fc54:	2a00      	cmp	r2, #0
 800fc56:	da24      	bge.n	800fca2 <__kernel_rem_pio2f+0x462>
 800fc58:	b34e      	cbz	r6, 800fcae <__kernel_rem_pio2f+0x46e>
 800fc5a:	eef1 7a47 	vneg.f32	s15, s14
 800fc5e:	edc7 7a00 	vstr	s15, [r7]
 800fc62:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800fc66:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fc6a:	aa31      	add	r2, sp, #196	@ 0xc4
 800fc6c:	2301      	movs	r3, #1
 800fc6e:	429c      	cmp	r4, r3
 800fc70:	da20      	bge.n	800fcb4 <__kernel_rem_pio2f+0x474>
 800fc72:	b10e      	cbz	r6, 800fc78 <__kernel_rem_pio2f+0x438>
 800fc74:	eef1 7a67 	vneg.f32	s15, s15
 800fc78:	edc7 7a01 	vstr	s15, [r7, #4]
 800fc7c:	e7ba      	b.n	800fbf4 <__kernel_rem_pio2f+0x3b4>
 800fc7e:	ab30      	add	r3, sp, #192	@ 0xc0
 800fc80:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 800fb44 <__kernel_rem_pio2f+0x304>
 800fc84:	440b      	add	r3, r1
 800fc86:	2c00      	cmp	r4, #0
 800fc88:	da05      	bge.n	800fc96 <__kernel_rem_pio2f+0x456>
 800fc8a:	b10e      	cbz	r6, 800fc90 <__kernel_rem_pio2f+0x450>
 800fc8c:	eef1 7a67 	vneg.f32	s15, s15
 800fc90:	edc7 7a00 	vstr	s15, [r7]
 800fc94:	e7ae      	b.n	800fbf4 <__kernel_rem_pio2f+0x3b4>
 800fc96:	ed33 7a01 	vldmdb	r3!, {s14}
 800fc9a:	3c01      	subs	r4, #1
 800fc9c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fca0:	e7f1      	b.n	800fc86 <__kernel_rem_pio2f+0x446>
 800fca2:	ed73 7a01 	vldmdb	r3!, {s15}
 800fca6:	3a01      	subs	r2, #1
 800fca8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fcac:	e7d2      	b.n	800fc54 <__kernel_rem_pio2f+0x414>
 800fcae:	eef0 7a47 	vmov.f32	s15, s14
 800fcb2:	e7d4      	b.n	800fc5e <__kernel_rem_pio2f+0x41e>
 800fcb4:	ecb2 7a01 	vldmia	r2!, {s14}
 800fcb8:	3301      	adds	r3, #1
 800fcba:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fcbe:	e7d6      	b.n	800fc6e <__kernel_rem_pio2f+0x42e>
 800fcc0:	edd2 7a00 	vldr	s15, [r2]
 800fcc4:	edd2 6a01 	vldr	s13, [r2, #4]
 800fcc8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800fccc:	3801      	subs	r0, #1
 800fcce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fcd2:	ed82 7a00 	vstr	s14, [r2]
 800fcd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fcda:	edc2 7a01 	vstr	s15, [r2, #4]
 800fcde:	e798      	b.n	800fc12 <__kernel_rem_pio2f+0x3d2>
 800fce0:	edd3 7a00 	vldr	s15, [r3]
 800fce4:	edd3 6a01 	vldr	s13, [r3, #4]
 800fce8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800fcec:	3a01      	subs	r2, #1
 800fcee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fcf2:	ed83 7a00 	vstr	s14, [r3]
 800fcf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fcfa:	edc3 7a01 	vstr	s15, [r3, #4]
 800fcfe:	e78d      	b.n	800fc1c <__kernel_rem_pio2f+0x3dc>
 800fd00:	ed33 7a01 	vldmdb	r3!, {s14}
 800fd04:	3c01      	subs	r4, #1
 800fd06:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fd0a:	e78f      	b.n	800fc2c <__kernel_rem_pio2f+0x3ec>
 800fd0c:	eef1 6a66 	vneg.f32	s13, s13
 800fd10:	eeb1 7a47 	vneg.f32	s14, s14
 800fd14:	edc7 6a00 	vstr	s13, [r7]
 800fd18:	ed87 7a01 	vstr	s14, [r7, #4]
 800fd1c:	eef1 7a67 	vneg.f32	s15, s15
 800fd20:	e790      	b.n	800fc44 <__kernel_rem_pio2f+0x404>
 800fd22:	bf00      	nop

0800fd24 <scalbnf>:
 800fd24:	ee10 3a10 	vmov	r3, s0
 800fd28:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800fd2c:	d02b      	beq.n	800fd86 <scalbnf+0x62>
 800fd2e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800fd32:	d302      	bcc.n	800fd3a <scalbnf+0x16>
 800fd34:	ee30 0a00 	vadd.f32	s0, s0, s0
 800fd38:	4770      	bx	lr
 800fd3a:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800fd3e:	d123      	bne.n	800fd88 <scalbnf+0x64>
 800fd40:	4b24      	ldr	r3, [pc, #144]	@ (800fdd4 <scalbnf+0xb0>)
 800fd42:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800fdd8 <scalbnf+0xb4>
 800fd46:	4298      	cmp	r0, r3
 800fd48:	ee20 0a27 	vmul.f32	s0, s0, s15
 800fd4c:	db17      	blt.n	800fd7e <scalbnf+0x5a>
 800fd4e:	ee10 3a10 	vmov	r3, s0
 800fd52:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800fd56:	3a19      	subs	r2, #25
 800fd58:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800fd5c:	4288      	cmp	r0, r1
 800fd5e:	dd15      	ble.n	800fd8c <scalbnf+0x68>
 800fd60:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800fddc <scalbnf+0xb8>
 800fd64:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800fde0 <scalbnf+0xbc>
 800fd68:	ee10 3a10 	vmov	r3, s0
 800fd6c:	eeb0 7a67 	vmov.f32	s14, s15
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	bfb8      	it	lt
 800fd74:	eef0 7a66 	vmovlt.f32	s15, s13
 800fd78:	ee27 0a87 	vmul.f32	s0, s15, s14
 800fd7c:	4770      	bx	lr
 800fd7e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800fde4 <scalbnf+0xc0>
 800fd82:	ee27 0a80 	vmul.f32	s0, s15, s0
 800fd86:	4770      	bx	lr
 800fd88:	0dd2      	lsrs	r2, r2, #23
 800fd8a:	e7e5      	b.n	800fd58 <scalbnf+0x34>
 800fd8c:	4410      	add	r0, r2
 800fd8e:	28fe      	cmp	r0, #254	@ 0xfe
 800fd90:	dce6      	bgt.n	800fd60 <scalbnf+0x3c>
 800fd92:	2800      	cmp	r0, #0
 800fd94:	dd06      	ble.n	800fda4 <scalbnf+0x80>
 800fd96:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800fd9a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800fd9e:	ee00 3a10 	vmov	s0, r3
 800fda2:	4770      	bx	lr
 800fda4:	f110 0f16 	cmn.w	r0, #22
 800fda8:	da09      	bge.n	800fdbe <scalbnf+0x9a>
 800fdaa:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800fde4 <scalbnf+0xc0>
 800fdae:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800fde8 <scalbnf+0xc4>
 800fdb2:	ee10 3a10 	vmov	r3, s0
 800fdb6:	eeb0 7a67 	vmov.f32	s14, s15
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	e7d9      	b.n	800fd72 <scalbnf+0x4e>
 800fdbe:	3019      	adds	r0, #25
 800fdc0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800fdc4:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800fdc8:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800fdec <scalbnf+0xc8>
 800fdcc:	ee07 3a90 	vmov	s15, r3
 800fdd0:	e7d7      	b.n	800fd82 <scalbnf+0x5e>
 800fdd2:	bf00      	nop
 800fdd4:	ffff3cb0 	.word	0xffff3cb0
 800fdd8:	4c000000 	.word	0x4c000000
 800fddc:	7149f2ca 	.word	0x7149f2ca
 800fde0:	f149f2ca 	.word	0xf149f2ca
 800fde4:	0da24260 	.word	0x0da24260
 800fde8:	8da24260 	.word	0x8da24260
 800fdec:	33000000 	.word	0x33000000

0800fdf0 <floorf>:
 800fdf0:	ee10 3a10 	vmov	r3, s0
 800fdf4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800fdf8:	3a7f      	subs	r2, #127	@ 0x7f
 800fdfa:	2a16      	cmp	r2, #22
 800fdfc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800fe00:	dc2b      	bgt.n	800fe5a <floorf+0x6a>
 800fe02:	2a00      	cmp	r2, #0
 800fe04:	da12      	bge.n	800fe2c <floorf+0x3c>
 800fe06:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800fe6c <floorf+0x7c>
 800fe0a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fe0e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800fe12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe16:	dd06      	ble.n	800fe26 <floorf+0x36>
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	da24      	bge.n	800fe66 <floorf+0x76>
 800fe1c:	2900      	cmp	r1, #0
 800fe1e:	4b14      	ldr	r3, [pc, #80]	@ (800fe70 <floorf+0x80>)
 800fe20:	bf08      	it	eq
 800fe22:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800fe26:	ee00 3a10 	vmov	s0, r3
 800fe2a:	4770      	bx	lr
 800fe2c:	4911      	ldr	r1, [pc, #68]	@ (800fe74 <floorf+0x84>)
 800fe2e:	4111      	asrs	r1, r2
 800fe30:	420b      	tst	r3, r1
 800fe32:	d0fa      	beq.n	800fe2a <floorf+0x3a>
 800fe34:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800fe6c <floorf+0x7c>
 800fe38:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fe3c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800fe40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe44:	ddef      	ble.n	800fe26 <floorf+0x36>
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	bfbe      	ittt	lt
 800fe4a:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800fe4e:	fa40 f202 	asrlt.w	r2, r0, r2
 800fe52:	189b      	addlt	r3, r3, r2
 800fe54:	ea23 0301 	bic.w	r3, r3, r1
 800fe58:	e7e5      	b.n	800fe26 <floorf+0x36>
 800fe5a:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800fe5e:	d3e4      	bcc.n	800fe2a <floorf+0x3a>
 800fe60:	ee30 0a00 	vadd.f32	s0, s0, s0
 800fe64:	4770      	bx	lr
 800fe66:	2300      	movs	r3, #0
 800fe68:	e7dd      	b.n	800fe26 <floorf+0x36>
 800fe6a:	bf00      	nop
 800fe6c:	7149f2ca 	.word	0x7149f2ca
 800fe70:	bf800000 	.word	0xbf800000
 800fe74:	007fffff 	.word	0x007fffff

0800fe78 <_init>:
 800fe78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe7a:	bf00      	nop
 800fe7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe7e:	bc08      	pop	{r3}
 800fe80:	469e      	mov	lr, r3
 800fe82:	4770      	bx	lr

0800fe84 <_fini>:
 800fe84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe86:	bf00      	nop
 800fe88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe8a:	bc08      	pop	{r3}
 800fe8c:	469e      	mov	lr, r3
 800fe8e:	4770      	bx	lr
