
ETR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000146b0  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000878  08014890  08014890  00015890  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015108  08015108  0001734c  2**0
                  CONTENTS
  4 .ARM          00000008  08015108  08015108  00016108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015110  08015110  0001734c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015110  08015110  00016110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08015114  08015114  00016114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000034c  20000000  08015118  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003ef4  2000034c  08015464  0001734c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004240  08015464  00018240  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001734c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dcbc  00000000  00000000  0001737c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000046a3  00000000  00000000  00035038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a48  00000000  00000000  000396e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013ff  00000000  00000000  0003b128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c809  00000000  00000000  0003c527  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000200cf  00000000  00000000  00068d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00115fcc  00000000  00000000  00088dff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019edcb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000084ec  00000000  00000000  0019ee10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  001a72fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000034c 	.word	0x2000034c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08014878 	.word	0x08014878

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000350 	.word	0x20000350
 800021c:	08014878 	.word	0x08014878

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff23 	bl	8000b2c <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc99 	bl	8000648 <__aeabi_dmul>
 8000d16:	f7ff ff6f 	bl	8000bf8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc1a 	bl	8000554 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc90 	bl	8000648 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff fad2 	bl	80002d8 <__aeabi_dsub>
 8000d34:	f7ff ff60 	bl	8000bf8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <fft_hanning_f32>:
#include "fft_windows.h"
void fft_hanning_f32(
        float32_t * pDst,
        uint32_t blockSize)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	6039      	str	r1, [r7, #0]
   float32_t k = 2.0f / ((float32_t) blockSize);
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	ee07 3a90 	vmov	s15, r3
 8000d54:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000d58:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000d5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d60:	edc7 7a04 	vstr	s15, [r7, #16]
   float32_t w;

   for(uint32_t i=0;i<blockSize;i++)
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]
 8000d68:	e031      	b.n	8000dce <fft_hanning_f32+0x8a>
   {
     w = PI * i * k;
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	ee07 3a90 	vmov	s15, r3
 8000d70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d74:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8000de0 <fft_hanning_f32+0x9c>
 8000d78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d7c:	ed97 7a04 	vldr	s14, [r7, #16]
 8000d80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d84:	edc7 7a03 	vstr	s15, [r7, #12]
     w = 0.5f * (1.0f - cosf (w));
 8000d88:	ed97 0a03 	vldr	s0, [r7, #12]
 8000d8c:	f012 fff6 	bl	8013d7c <cosf>
 8000d90:	eef0 7a40 	vmov.f32	s15, s0
 8000d94:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000d98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d9c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000da0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000da4:	edc7 7a03 	vstr	s15, [r7, #12]
     pDst[i] = w*pDst[i];
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	687a      	ldr	r2, [r7, #4]
 8000dae:	4413      	add	r3, r2
 8000db0:	ed93 7a00 	vldr	s14, [r3]
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	687a      	ldr	r2, [r7, #4]
 8000dba:	4413      	add	r3, r2
 8000dbc:	edd7 7a03 	vldr	s15, [r7, #12]
 8000dc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dc4:	edc3 7a00 	vstr	s15, [r3]
   for(uint32_t i=0;i<blockSize;i++)
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	3301      	adds	r3, #1
 8000dcc:	617b      	str	r3, [r7, #20]
 8000dce:	697a      	ldr	r2, [r7, #20]
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	d3c9      	bcc.n	8000d6a <fft_hanning_f32+0x26>
   }
}
 8000dd6:	bf00      	nop
 8000dd8:	bf00      	nop
 8000dda:	3718      	adds	r7, #24
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40490fdb 	.word	0x40490fdb

08000de4 <fft_hamming_f32>:


void fft_hamming_f32(
        float32_t * pDst,
        uint32_t blockSize)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b086      	sub	sp, #24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	6039      	str	r1, [r7, #0]
   float32_t k = 2.0f / ((float32_t) blockSize);
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	ee07 3a90 	vmov	s15, r3
 8000df4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000df8:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000dfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e00:	edc7 7a04 	vstr	s15, [r7, #16]
   float32_t w;

   for(uint32_t i=0;i<blockSize;i++)
 8000e04:	2300      	movs	r3, #0
 8000e06:	617b      	str	r3, [r7, #20]
 8000e08:	e02f      	b.n	8000e6a <fft_hamming_f32+0x86>
   {
     w = 0.54f - 0.46f * cosf (PI * i * k);
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	ee07 3a90 	vmov	s15, r3
 8000e10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e14:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8000e7c <fft_hamming_f32+0x98>
 8000e18:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000e1c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e24:	eeb0 0a67 	vmov.f32	s0, s15
 8000e28:	f012 ffa8 	bl	8013d7c <cosf>
 8000e2c:	eef0 7a40 	vmov.f32	s15, s0
 8000e30:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8000e80 <fft_hamming_f32+0x9c>
 8000e34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e38:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8000e84 <fft_hamming_f32+0xa0>
 8000e3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e40:	edc7 7a03 	vstr	s15, [r7, #12]
     pDst[i] = w*pDst[i];
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	687a      	ldr	r2, [r7, #4]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	ed93 7a00 	vldr	s14, [r3]
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	687a      	ldr	r2, [r7, #4]
 8000e56:	4413      	add	r3, r2
 8000e58:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e60:	edc3 7a00 	vstr	s15, [r3]
   for(uint32_t i=0;i<blockSize;i++)
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	3301      	adds	r3, #1
 8000e68:	617b      	str	r3, [r7, #20]
 8000e6a:	697a      	ldr	r2, [r7, #20]
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d3cb      	bcc.n	8000e0a <fft_hamming_f32+0x26>
   }
}
 8000e72:	bf00      	nop
 8000e74:	bf00      	nop
 8000e76:	3718      	adds	r7, #24
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	40490fdb 	.word	0x40490fdb
 8000e80:	3eeb851f 	.word	0x3eeb851f
 8000e84:	3f0a3d71 	.word	0x3f0a3d71

08000e88 <fft_bartlett_f32>:


void fft_bartlett_f32(
        float32_t * pDst,
        uint32_t blockSize)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b087      	sub	sp, #28
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	6039      	str	r1, [r7, #0]
   float32_t k = 2.0f / ((float32_t) blockSize);
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	ee07 3a90 	vmov	s15, r3
 8000e98:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e9c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000ea0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ea4:	edc7 7a03 	vstr	s15, [r7, #12]
   float32_t w;

   for(uint32_t i=0;i<blockSize;i++)
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	613b      	str	r3, [r7, #16]
 8000eac:	e035      	b.n	8000f1a <fft_bartlett_f32+0x92>
   {
     w = i * k ;
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	ee07 3a90 	vmov	s15, r3
 8000eb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000eb8:	ed97 7a03 	vldr	s14, [r7, #12]
 8000ebc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ec0:	edc7 7a05 	vstr	s15, [r7, #20]
     if (i * k > 1.0f)
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	ee07 3a90 	vmov	s15, r3
 8000eca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ece:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ed6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000eda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ee2:	dd07      	ble.n	8000ef4 <fft_bartlett_f32+0x6c>
     {
       w = 2.0f - w;
 8000ee4:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8000ee8:	edd7 7a05 	vldr	s15, [r7, #20]
 8000eec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ef0:	edc7 7a05 	vstr	s15, [r7, #20]
     }
     pDst[i] = w*pDst[i];
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	687a      	ldr	r2, [r7, #4]
 8000efa:	4413      	add	r3, r2
 8000efc:	ed93 7a00 	vldr	s14, [r3]
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	687a      	ldr	r2, [r7, #4]
 8000f06:	4413      	add	r3, r2
 8000f08:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f10:	edc3 7a00 	vstr	s15, [r3]
   for(uint32_t i=0;i<blockSize;i++)
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	3301      	adds	r3, #1
 8000f18:	613b      	str	r3, [r7, #16]
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	d3c5      	bcc.n	8000eae <fft_bartlett_f32+0x26>
   }
}
 8000f22:	bf00      	nop
 8000f24:	bf00      	nop
 8000f26:	371c      	adds	r7, #28
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <fft_blackman_harris_92db_f32>:


void fft_blackman_harris_92db_f32(
        float32_t * pDst,
        uint32_t blockSize)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	ed2d 8b02 	vpush	{d8}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	6039      	str	r1, [r7, #0]
   float32_t k = 2.0f / ((float32_t) blockSize);
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	ee07 3a90 	vmov	s15, r3
 8000f44:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f48:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000f4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f50:	edc7 7a04 	vstr	s15, [r7, #16]
   float32_t w;

   for(uint32_t i=0;i<blockSize;i++)
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]
 8000f58:	e053      	b.n	8001002 <fft_blackman_harris_92db_f32+0xd2>
   {
     w = PI * i * k;
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	ee07 3a90 	vmov	s15, r3
 8000f60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f64:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8001018 <fft_blackman_harris_92db_f32+0xe8>
 8000f68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f6c:	ed97 7a04 	vldr	s14, [r7, #16]
 8000f70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f74:	edc7 7a03 	vstr	s15, [r7, #12]
        w = 0.35875f - 0.48829f * cosf (w) +
 8000f78:	ed97 0a03 	vldr	s0, [r7, #12]
 8000f7c:	f012 fefe 	bl	8013d7c <cosf>
 8000f80:	eef0 7a40 	vmov.f32	s15, s0
 8000f84:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 800101c <fft_blackman_harris_92db_f32+0xec>
 8000f88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f8c:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8001020 <fft_blackman_harris_92db_f32+0xf0>
 8000f90:	ee37 8a67 	vsub.f32	s16, s14, s15
    0.14128f * cosf (2.f * w) - 0.01168f * cosf (3.f * w);
 8000f94:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f98:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000f9c:	eeb0 0a67 	vmov.f32	s0, s15
 8000fa0:	f012 feec 	bl	8013d7c <cosf>
 8000fa4:	eef0 7a40 	vmov.f32	s15, s0
 8000fa8:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8001024 <fft_blackman_harris_92db_f32+0xf4>
 8000fac:	ee67 7a87 	vmul.f32	s15, s15, s14
        w = 0.35875f - 0.48829f * cosf (w) +
 8000fb0:	ee38 8a27 	vadd.f32	s16, s16, s15
    0.14128f * cosf (2.f * w) - 0.01168f * cosf (3.f * w);
 8000fb4:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fb8:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8000fbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fc0:	eeb0 0a67 	vmov.f32	s0, s15
 8000fc4:	f012 feda 	bl	8013d7c <cosf>
 8000fc8:	eef0 7a40 	vmov.f32	s15, s0
 8000fcc:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8001028 <fft_blackman_harris_92db_f32+0xf8>
 8000fd0:	ee67 7a87 	vmul.f32	s15, s15, s14
        w = 0.35875f - 0.48829f * cosf (w) +
 8000fd4:	ee78 7a67 	vsub.f32	s15, s16, s15
 8000fd8:	edc7 7a03 	vstr	s15, [r7, #12]

        pDst[i] = w*pDst[i];
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	687a      	ldr	r2, [r7, #4]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	ed93 7a00 	vldr	s14, [r3]
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	4413      	add	r3, r2
 8000ff0:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ff4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ff8:	edc3 7a00 	vstr	s15, [r3]
   for(uint32_t i=0;i<blockSize;i++)
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	3301      	adds	r3, #1
 8001000:	617b      	str	r3, [r7, #20]
 8001002:	697a      	ldr	r2, [r7, #20]
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	429a      	cmp	r2, r3
 8001008:	d3a7      	bcc.n	8000f5a <fft_blackman_harris_92db_f32+0x2a>
   }
}
 800100a:	bf00      	nop
 800100c:	bf00      	nop
 800100e:	3718      	adds	r7, #24
 8001010:	46bd      	mov	sp, r7
 8001012:	ecbd 8b02 	vpop	{d8}
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40490fdb 	.word	0x40490fdb
 800101c:	3efa0126 	.word	0x3efa0126
 8001020:	3eb7ae14 	.word	0x3eb7ae14
 8001024:	3e10abb4 	.word	0x3e10abb4
 8001028:	3c3f5d79 	.word	0x3c3f5d79

0800102c <SysTick_GetValue>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t SysTick_GetValue(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
    return SysTick->VAL;
 8001030:	4b03      	ldr	r3, [pc, #12]	@ (8001040 <SysTick_GetValue+0x14>)
 8001032:	689b      	ldr	r3, [r3, #8]
}
 8001034:	4618      	mov	r0, r3
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	e000e010 	.word	0xe000e010

08001044 <ConvertToVoltage>:




float ConvertToVoltage(uint32_t adcValue)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
    return (adcValue / ADC_RESOLUTION) * VREF_VOLTAGE -VREF_VOLTAGE/2;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	ee07 3a90 	vmov	s15, r3
 8001052:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001056:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8001078 <ConvertToVoltage+0x34>
 800105a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800105e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001062:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001066:	ee77 7ac7 	vsub.f32	s15, s15, s14
}
 800106a:	eeb0 0a67 	vmov.f32	s0, s15
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	457ff000 	.word	0x457ff000

0800107c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800107c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800107e:	b08f      	sub	sp, #60	@ 0x3c
 8001080:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001082:	f001 fd9a 	bl	8002bba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001086:	f000 f8f3 	bl	8001270 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800108a:	f000 fdf1 	bl	8001c70 <MX_GPIO_Init>
  MX_DMA_Init();
 800108e:	f000 fdad 	bl	8001bec <MX_DMA_Init>
  MX_TIM2_Init();
 8001092:	f000 fbbb 	bl	800180c <MX_TIM2_Init>
  MX_TIM4_Init();
 8001096:	f000 fcbb 	bl	8001a10 <MX_TIM4_Init>
  MX_USB_Device_Init();
 800109a:	f00d fdfd 	bl	800ec98 <MX_USB_Device_Init>
  MX_TIM3_Init();
 800109e:	f000 fc41 	bl	8001924 <MX_TIM3_Init>
  MX_ADC1_Init();
 80010a2:	f000 f931 	bl	8001308 <MX_ADC1_Init>
  MX_ADC2_Init();
 80010a6:	f000 f9a9 	bl	80013fc <MX_ADC2_Init>
  MX_ADC3_Init();
 80010aa:	f000 fa0f 	bl	80014cc <MX_ADC3_Init>
  MX_OPAMP1_Init();
 80010ae:	f000 fa87 	bl	80015c0 <MX_OPAMP1_Init>
  MX_OPAMP3_Init();
 80010b2:	f000 faab 	bl	800160c <MX_OPAMP3_Init>
  MX_TIM1_Init();
 80010b6:	f000 facf 	bl	8001658 <MX_TIM1_Init>
  MX_TIM15_Init();
 80010ba:	f000 fcf9 	bl	8001ab0 <MX_TIM15_Init>

//  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);



  HAL_OPAMP_Start(&hopamp1);
 80010be:	4859      	ldr	r0, [pc, #356]	@ (8001224 <main+0x1a8>)
 80010c0:	f004 fa8c 	bl	80055dc <HAL_OPAMP_Start>
  HAL_OPAMP_Start(&hopamp3);
 80010c4:	4858      	ldr	r0, [pc, #352]	@ (8001228 <main+0x1ac>)
 80010c6:	f004 fa89 	bl	80055dc <HAL_OPAMP_Start>

  HAL_ADC_Start_DMA(&hadc2, ADC_BUFFER, BUFFER_SIZE);
 80010ca:	f44f 7216 	mov.w	r2, #600	@ 0x258
 80010ce:	4957      	ldr	r1, [pc, #348]	@ (800122c <main+0x1b0>)
 80010d0:	4857      	ldr	r0, [pc, #348]	@ (8001230 <main+0x1b4>)
 80010d2:	f002 fa61 	bl	8003598 <HAL_ADC_Start_DMA>

  HAL_TIM_Base_Start(&htim1);
 80010d6:	4857      	ldr	r0, [pc, #348]	@ (8001234 <main+0x1b8>)
 80010d8:	f007 f834 	bl	8008144 <HAL_TIM_Base_Start>

  HAL_TIM_Base_Start(&htim2);
 80010dc:	4856      	ldr	r0, [pc, #344]	@ (8001238 <main+0x1bc>)
 80010de:	f007 f831 	bl	8008144 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);
 80010e2:	4856      	ldr	r0, [pc, #344]	@ (800123c <main+0x1c0>)
 80010e4:	f007 f82e 	bl	8008144 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim4);
 80010e8:	4855      	ldr	r0, [pc, #340]	@ (8001240 <main+0x1c4>)
 80010ea:	f007 f89b 	bl	8008224 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80010ee:	210c      	movs	r1, #12
 80010f0:	4851      	ldr	r0, [pc, #324]	@ (8001238 <main+0x1bc>)
 80010f2:	f007 fae5 	bl	80086c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80010f6:	2108      	movs	r1, #8
 80010f8:	484f      	ldr	r0, [pc, #316]	@ (8001238 <main+0x1bc>)
 80010fa:	f007 fae1 	bl	80086c0 <HAL_TIM_PWM_Start>



  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_1);
 80010fe:	2100      	movs	r1, #0
 8001100:	484c      	ldr	r0, [pc, #304]	@ (8001234 <main+0x1b8>)
 8001102:	f007 f969 	bl	80083d8 <HAL_TIM_OC_Start>
  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_2);
 8001106:	2104      	movs	r1, #4
 8001108:	484a      	ldr	r0, [pc, #296]	@ (8001234 <main+0x1b8>)
 800110a:	f007 f965 	bl	80083d8 <HAL_TIM_OC_Start>
  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_3);
 800110e:	2108      	movs	r1, #8
 8001110:	4848      	ldr	r0, [pc, #288]	@ (8001234 <main+0x1b8>)
 8001112:	f007 f961 	bl	80083d8 <HAL_TIM_OC_Start>
  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_4);
 8001116:	210c      	movs	r1, #12
 8001118:	4846      	ldr	r0, [pc, #280]	@ (8001234 <main+0x1b8>)
 800111a:	f007 f95d 	bl	80083d8 <HAL_TIM_OC_Start>

  HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_1);
 800111e:	2100      	movs	r1, #0
 8001120:	4848      	ldr	r0, [pc, #288]	@ (8001244 <main+0x1c8>)
 8001122:	f007 fe6d 	bl	8008e00 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_2);
 8001126:	2104      	movs	r1, #4
 8001128:	4846      	ldr	r0, [pc, #280]	@ (8001244 <main+0x1c8>)
 800112a:	f007 fe69 	bl	8008e00 <HAL_TIM_IC_Start_IT>
//	  __HAL_TIM_PRESCALER(&htim1,BOOT0_BTN_COUNT);//when 170Mhz 9 is best when 120Mhz 4 is best



//	  WS2812_BRIGHTNESS=BOOT0_BTN_COUNT;
		if (WHILE_FLAG==2) {
 800112e:	4b46      	ldr	r3, [pc, #280]	@ (8001248 <main+0x1cc>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2b02      	cmp	r3, #2
 8001134:	d1fb      	bne.n	800112e <main+0xb2>
//		 ws2812_set_all(rgb_to_color(0x0f, 0x00, 0x00));
//		 ws2812_gradient(100, 10);



			rainbow_effect(32, 10);
 8001136:	210a      	movs	r1, #10
 8001138:	2020      	movs	r0, #32
 800113a:	f001 fcd5 	bl	8002ae8 <rainbow_effect>

			  switch (BOOT0_BTN_COUNT%5) {
 800113e:	4b43      	ldr	r3, [pc, #268]	@ (800124c <main+0x1d0>)
 8001140:	6819      	ldr	r1, [r3, #0]
 8001142:	4b43      	ldr	r3, [pc, #268]	@ (8001250 <main+0x1d4>)
 8001144:	fba3 2301 	umull	r2, r3, r3, r1
 8001148:	089a      	lsrs	r2, r3, #2
 800114a:	4613      	mov	r3, r2
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	4413      	add	r3, r2
 8001150:	1aca      	subs	r2, r1, r3
 8001152:	1e53      	subs	r3, r2, #1
 8001154:	2b03      	cmp	r3, #3
 8001156:	d823      	bhi.n	80011a0 <main+0x124>
 8001158:	a201      	add	r2, pc, #4	@ (adr r2, 8001160 <main+0xe4>)
 800115a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800115e:	bf00      	nop
 8001160:	08001171 	.word	0x08001171
 8001164:	0800117d 	.word	0x0800117d
 8001168:	08001189 	.word	0x08001189
 800116c:	08001195 	.word	0x08001195
				case 1:
					fft_bartlett_f32(WHILE_BUFFER, BUFFER_SIZE);
 8001170:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8001174:	4837      	ldr	r0, [pc, #220]	@ (8001254 <main+0x1d8>)
 8001176:	f7ff fe87 	bl	8000e88 <fft_bartlett_f32>
					break;
 800117a:	e012      	b.n	80011a2 <main+0x126>
				case 2:
					fft_blackman_harris_92db_f32(WHILE_BUFFER, BUFFER_SIZE);
 800117c:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8001180:	4834      	ldr	r0, [pc, #208]	@ (8001254 <main+0x1d8>)
 8001182:	f7ff fed5 	bl	8000f30 <fft_blackman_harris_92db_f32>
					break;
 8001186:	e00c      	b.n	80011a2 <main+0x126>
				case 3:
					fft_hamming_f32(WHILE_BUFFER, BUFFER_SIZE);
 8001188:	f44f 7116 	mov.w	r1, #600	@ 0x258
 800118c:	4831      	ldr	r0, [pc, #196]	@ (8001254 <main+0x1d8>)
 800118e:	f7ff fe29 	bl	8000de4 <fft_hamming_f32>
					break;
 8001192:	e006      	b.n	80011a2 <main+0x126>
				case 4:
					fft_hanning_f32(WHILE_BUFFER, BUFFER_SIZE);
 8001194:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8001198:	482e      	ldr	r0, [pc, #184]	@ (8001254 <main+0x1d8>)
 800119a:	f7ff fdd3 	bl	8000d44 <fft_hanning_f32>
					break;
 800119e:	e000      	b.n	80011a2 <main+0x126>
				default:
					break;
 80011a0:	bf00      	nop
			}
		for (int i = 0; i < BUFFER_SIZE; ++i) {
 80011a2:	2300      	movs	r3, #0
 80011a4:	617b      	str	r3, [r7, #20]
 80011a6:	e035      	b.n	8001214 <main+0x198>
//		ws2812_set_all(rgb_to_color(255-uwDutyCycle, uwDutyCycle, 0x00));
		ws2812_update_force();
 80011a8:	f001 fb40 	bl	800282c <ws2812_update_force>
		  sprintf(CDC_BUFFER,"Val:%.16f,%d,%d,%d,%d,%d,%d,%d\r\n",WHILE_BUFFER[i],i,USER_CounterTicks,uwDutyCycle,uwFrequency,uwIC2Value,BOOT0_BTN_COUNT,SysTick_GetValue());
 80011ac:	4a29      	ldr	r2, [pc, #164]	@ (8001254 <main+0x1d8>)
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	4413      	add	r3, r2
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff f9ee 	bl	8000598 <__aeabi_f2d>
 80011bc:	4604      	mov	r4, r0
 80011be:	460d      	mov	r5, r1
 80011c0:	4b25      	ldr	r3, [pc, #148]	@ (8001258 <main+0x1dc>)
 80011c2:	681e      	ldr	r6, [r3, #0]
 80011c4:	4b25      	ldr	r3, [pc, #148]	@ (800125c <main+0x1e0>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	4b25      	ldr	r3, [pc, #148]	@ (8001260 <main+0x1e4>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	60ba      	str	r2, [r7, #8]
 80011d0:	4b24      	ldr	r3, [pc, #144]	@ (8001264 <main+0x1e8>)
 80011d2:	6819      	ldr	r1, [r3, #0]
 80011d4:	6079      	str	r1, [r7, #4]
 80011d6:	4b1d      	ldr	r3, [pc, #116]	@ (800124c <main+0x1d0>)
 80011d8:	6818      	ldr	r0, [r3, #0]
 80011da:	6038      	str	r0, [r7, #0]
 80011dc:	f7ff ff26 	bl	800102c <SysTick_GetValue>
 80011e0:	4603      	mov	r3, r0
 80011e2:	9306      	str	r3, [sp, #24]
 80011e4:	6838      	ldr	r0, [r7, #0]
 80011e6:	9005      	str	r0, [sp, #20]
 80011e8:	6879      	ldr	r1, [r7, #4]
 80011ea:	9104      	str	r1, [sp, #16]
 80011ec:	68ba      	ldr	r2, [r7, #8]
 80011ee:	9203      	str	r2, [sp, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	9302      	str	r3, [sp, #8]
 80011f4:	9601      	str	r6, [sp, #4]
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	9300      	str	r3, [sp, #0]
 80011fa:	4622      	mov	r2, r4
 80011fc:	462b      	mov	r3, r5
 80011fe:	491a      	ldr	r1, [pc, #104]	@ (8001268 <main+0x1ec>)
 8001200:	481a      	ldr	r0, [pc, #104]	@ (800126c <main+0x1f0>)
 8001202:	f00f f981 	bl	8010508 <siprintf>
		  CDC_Transmit_FS(CDC_BUFFER, CDC_BUFFER_SIZE);
 8001206:	2164      	movs	r1, #100	@ 0x64
 8001208:	4818      	ldr	r0, [pc, #96]	@ (800126c <main+0x1f0>)
 800120a:	f00d fe03 	bl	800ee14 <CDC_Transmit_FS>
		for (int i = 0; i < BUFFER_SIZE; ++i) {
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	3301      	adds	r3, #1
 8001212:	617b      	str	r3, [r7, #20]
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 800121a:	dbc5      	blt.n	80011a8 <main+0x12c>


		}

//		HAL_Delay(10);
		  WHILE_FLAG=0;
 800121c:	4b0a      	ldr	r3, [pc, #40]	@ (8001248 <main+0x1cc>)
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
		if (WHILE_FLAG==2) {
 8001222:	e784      	b.n	800112e <main+0xb2>
 8001224:	200005cc 	.word	0x200005cc
 8001228:	20000608 	.word	0x20000608
 800122c:	20000830 	.word	0x20000830
 8001230:	200003d4 	.word	0x200003d4
 8001234:	20000644 	.word	0x20000644
 8001238:	20000690 	.word	0x20000690
 800123c:	200006dc 	.word	0x200006dc
 8001240:	20000728 	.word	0x20000728
 8001244:	20000774 	.word	0x20000774
 8001248:	20001b54 	.word	0x20001b54
 800124c:	20001b58 	.word	0x20001b58
 8001250:	cccccccd 	.word	0xcccccccd
 8001254:	20001190 	.word	0x20001190
 8001258:	2000082c 	.word	0x2000082c
 800125c:	20000824 	.word	0x20000824
 8001260:	20000828 	.word	0x20000828
 8001264:	20000820 	.word	0x20000820
 8001268:	08014890 	.word	0x08014890
 800126c:	20001af0 	.word	0x20001af0

08001270 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b094      	sub	sp, #80	@ 0x50
 8001274:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001276:	f107 0318 	add.w	r3, r7, #24
 800127a:	2238      	movs	r2, #56	@ 0x38
 800127c:	2100      	movs	r1, #0
 800127e:	4618      	mov	r0, r3
 8001280:	f00f f9a5 	bl	80105ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001284:	1d3b      	adds	r3, r7, #4
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]
 800128e:	60da      	str	r2, [r3, #12]
 8001290:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001292:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001296:	f005 ff05 	bl	80070a4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800129a:	2321      	movs	r3, #33	@ 0x21
 800129c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800129e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80012a4:	2301      	movs	r3, #1
 80012a6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012a8:	2302      	movs	r3, #2
 80012aa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012ac:	2303      	movs	r3, #3
 80012ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80012b0:	2302      	movs	r3, #2
 80012b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 60;
 80012b4:	233c      	movs	r3, #60	@ 0x3c
 80012b6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012b8:	2302      	movs	r3, #2
 80012ba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80012bc:	2302      	movs	r3, #2
 80012be:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80012c0:	2302      	movs	r3, #2
 80012c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012c4:	f107 0318 	add.w	r3, r7, #24
 80012c8:	4618      	mov	r0, r3
 80012ca:	f005 ff9f 	bl	800720c <HAL_RCC_OscConfig>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80012d4:	f000 fde4 	bl	8001ea0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012d8:	230f      	movs	r3, #15
 80012da:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012dc:	2303      	movs	r3, #3
 80012de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012e0:	2300      	movs	r3, #0
 80012e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012e4:	2300      	movs	r3, #0
 80012e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80012ec:	1d3b      	adds	r3, r7, #4
 80012ee:	2103      	movs	r1, #3
 80012f0:	4618      	mov	r0, r3
 80012f2:	f006 fa9d 	bl	8007830 <HAL_RCC_ClockConfig>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80012fc:	f000 fdd0 	bl	8001ea0 <Error_Handler>
  }
}
 8001300:	bf00      	nop
 8001302:	3750      	adds	r7, #80	@ 0x50
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08c      	sub	sp, #48	@ 0x30
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800130e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]
 8001318:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800131a:	1d3b      	adds	r3, r7, #4
 800131c:	2220      	movs	r2, #32
 800131e:	2100      	movs	r1, #0
 8001320:	4618      	mov	r0, r3
 8001322:	f00f f954 	bl	80105ce <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001326:	4b33      	ldr	r3, [pc, #204]	@ (80013f4 <MX_ADC1_Init+0xec>)
 8001328:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800132c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800132e:	4b31      	ldr	r3, [pc, #196]	@ (80013f4 <MX_ADC1_Init+0xec>)
 8001330:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001334:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001336:	4b2f      	ldr	r3, [pc, #188]	@ (80013f4 <MX_ADC1_Init+0xec>)
 8001338:	2200      	movs	r2, #0
 800133a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800133c:	4b2d      	ldr	r3, [pc, #180]	@ (80013f4 <MX_ADC1_Init+0xec>)
 800133e:	2200      	movs	r2, #0
 8001340:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001342:	4b2c      	ldr	r3, [pc, #176]	@ (80013f4 <MX_ADC1_Init+0xec>)
 8001344:	2200      	movs	r2, #0
 8001346:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001348:	4b2a      	ldr	r3, [pc, #168]	@ (80013f4 <MX_ADC1_Init+0xec>)
 800134a:	2200      	movs	r2, #0
 800134c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800134e:	4b29      	ldr	r3, [pc, #164]	@ (80013f4 <MX_ADC1_Init+0xec>)
 8001350:	2204      	movs	r2, #4
 8001352:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001354:	4b27      	ldr	r3, [pc, #156]	@ (80013f4 <MX_ADC1_Init+0xec>)
 8001356:	2200      	movs	r2, #0
 8001358:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800135a:	4b26      	ldr	r3, [pc, #152]	@ (80013f4 <MX_ADC1_Init+0xec>)
 800135c:	2200      	movs	r2, #0
 800135e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001360:	4b24      	ldr	r3, [pc, #144]	@ (80013f4 <MX_ADC1_Init+0xec>)
 8001362:	2201      	movs	r2, #1
 8001364:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001366:	4b23      	ldr	r3, [pc, #140]	@ (80013f4 <MX_ADC1_Init+0xec>)
 8001368:	2200      	movs	r2, #0
 800136a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_CC1;
 800136e:	4b21      	ldr	r3, [pc, #132]	@ (80013f4 <MX_ADC1_Init+0xec>)
 8001370:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001374:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001376:	4b1f      	ldr	r3, [pc, #124]	@ (80013f4 <MX_ADC1_Init+0xec>)
 8001378:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800137c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800137e:	4b1d      	ldr	r3, [pc, #116]	@ (80013f4 <MX_ADC1_Init+0xec>)
 8001380:	2201      	movs	r2, #1
 8001382:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001386:	4b1b      	ldr	r3, [pc, #108]	@ (80013f4 <MX_ADC1_Init+0xec>)
 8001388:	2200      	movs	r2, #0
 800138a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800138c:	4b19      	ldr	r3, [pc, #100]	@ (80013f4 <MX_ADC1_Init+0xec>)
 800138e:	2200      	movs	r2, #0
 8001390:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001394:	4817      	ldr	r0, [pc, #92]	@ (80013f4 <MX_ADC1_Init+0xec>)
 8001396:	f001 ff43 	bl	8003220 <HAL_ADC_Init>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80013a0:	f000 fd7e 	bl	8001ea0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80013a4:	2300      	movs	r3, #0
 80013a6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80013a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013ac:	4619      	mov	r1, r3
 80013ae:	4811      	ldr	r0, [pc, #68]	@ (80013f4 <MX_ADC1_Init+0xec>)
 80013b0:	f003 f9fc 	bl	80047ac <HAL_ADCEx_MultiModeConfigChannel>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80013ba:	f000 fd71 	bl	8001ea0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP1;
 80013be:	4b0e      	ldr	r3, [pc, #56]	@ (80013f8 <MX_ADC1_Init+0xf0>)
 80013c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013c2:	2306      	movs	r3, #6
 80013c4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80013ca:	237f      	movs	r3, #127	@ 0x7f
 80013cc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80013ce:	2304      	movs	r3, #4
 80013d0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013d6:	1d3b      	adds	r3, r7, #4
 80013d8:	4619      	mov	r1, r3
 80013da:	4806      	ldr	r0, [pc, #24]	@ (80013f4 <MX_ADC1_Init+0xec>)
 80013dc:	f002 fc24 	bl	8003c28 <HAL_ADC_ConfigChannel>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80013e6:	f000 fd5b 	bl	8001ea0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013ea:	bf00      	nop
 80013ec:	3730      	adds	r7, #48	@ 0x30
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000368 	.word	0x20000368
 80013f8:	b6902000 	.word	0xb6902000

080013fc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b088      	sub	sp, #32
 8001400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001402:	463b      	mov	r3, r7
 8001404:	2220      	movs	r2, #32
 8001406:	2100      	movs	r1, #0
 8001408:	4618      	mov	r0, r3
 800140a:	f00f f8e0 	bl	80105ce <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800140e:	4b2c      	ldr	r3, [pc, #176]	@ (80014c0 <MX_ADC2_Init+0xc4>)
 8001410:	4a2c      	ldr	r2, [pc, #176]	@ (80014c4 <MX_ADC2_Init+0xc8>)
 8001412:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001414:	4b2a      	ldr	r3, [pc, #168]	@ (80014c0 <MX_ADC2_Init+0xc4>)
 8001416:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800141a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800141c:	4b28      	ldr	r3, [pc, #160]	@ (80014c0 <MX_ADC2_Init+0xc4>)
 800141e:	2200      	movs	r2, #0
 8001420:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001422:	4b27      	ldr	r3, [pc, #156]	@ (80014c0 <MX_ADC2_Init+0xc4>)
 8001424:	2200      	movs	r2, #0
 8001426:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001428:	4b25      	ldr	r3, [pc, #148]	@ (80014c0 <MX_ADC2_Init+0xc4>)
 800142a:	2200      	movs	r2, #0
 800142c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800142e:	4b24      	ldr	r3, [pc, #144]	@ (80014c0 <MX_ADC2_Init+0xc4>)
 8001430:	2200      	movs	r2, #0
 8001432:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001434:	4b22      	ldr	r3, [pc, #136]	@ (80014c0 <MX_ADC2_Init+0xc4>)
 8001436:	2204      	movs	r2, #4
 8001438:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800143a:	4b21      	ldr	r3, [pc, #132]	@ (80014c0 <MX_ADC2_Init+0xc4>)
 800143c:	2200      	movs	r2, #0
 800143e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001440:	4b1f      	ldr	r3, [pc, #124]	@ (80014c0 <MX_ADC2_Init+0xc4>)
 8001442:	2200      	movs	r2, #0
 8001444:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001446:	4b1e      	ldr	r3, [pc, #120]	@ (80014c0 <MX_ADC2_Init+0xc4>)
 8001448:	2201      	movs	r2, #1
 800144a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800144c:	4b1c      	ldr	r3, [pc, #112]	@ (80014c0 <MX_ADC2_Init+0xc4>)
 800144e:	2200      	movs	r2, #0
 8001450:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_CC2;
 8001454:	4b1a      	ldr	r3, [pc, #104]	@ (80014c0 <MX_ADC2_Init+0xc4>)
 8001456:	f44f 6284 	mov.w	r2, #1056	@ 0x420
 800145a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800145c:	4b18      	ldr	r3, [pc, #96]	@ (80014c0 <MX_ADC2_Init+0xc4>)
 800145e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001462:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001464:	4b16      	ldr	r3, [pc, #88]	@ (80014c0 <MX_ADC2_Init+0xc4>)
 8001466:	2201      	movs	r2, #1
 8001468:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800146c:	4b14      	ldr	r3, [pc, #80]	@ (80014c0 <MX_ADC2_Init+0xc4>)
 800146e:	2200      	movs	r2, #0
 8001470:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001472:	4b13      	ldr	r3, [pc, #76]	@ (80014c0 <MX_ADC2_Init+0xc4>)
 8001474:	2200      	movs	r2, #0
 8001476:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800147a:	4811      	ldr	r0, [pc, #68]	@ (80014c0 <MX_ADC2_Init+0xc4>)
 800147c:	f001 fed0 	bl	8003220 <HAL_ADC_Init>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8001486:	f000 fd0b 	bl	8001ea0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP3_ADC2;
 800148a:	4b0f      	ldr	r3, [pc, #60]	@ (80014c8 <MX_ADC2_Init+0xcc>)
 800148c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800148e:	2306      	movs	r3, #6
 8001490:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001492:	2300      	movs	r3, #0
 8001494:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001496:	237f      	movs	r3, #127	@ 0x7f
 8001498:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800149a:	2304      	movs	r3, #4
 800149c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80014a2:	463b      	mov	r3, r7
 80014a4:	4619      	mov	r1, r3
 80014a6:	4806      	ldr	r0, [pc, #24]	@ (80014c0 <MX_ADC2_Init+0xc4>)
 80014a8:	f002 fbbe 	bl	8003c28 <HAL_ADC_ConfigChannel>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 80014b2:	f000 fcf5 	bl	8001ea0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80014b6:	bf00      	nop
 80014b8:	3720      	adds	r7, #32
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	200003d4 	.word	0x200003d4
 80014c4:	50000100 	.word	0x50000100
 80014c8:	cb8c0000 	.word	0xcb8c0000

080014cc <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b08c      	sub	sp, #48	@ 0x30
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80014d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	605a      	str	r2, [r3, #4]
 80014dc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80014de:	1d3b      	adds	r3, r7, #4
 80014e0:	2220      	movs	r2, #32
 80014e2:	2100      	movs	r1, #0
 80014e4:	4618      	mov	r0, r3
 80014e6:	f00f f872 	bl	80105ce <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80014ea:	4b32      	ldr	r3, [pc, #200]	@ (80015b4 <MX_ADC3_Init+0xe8>)
 80014ec:	4a32      	ldr	r2, [pc, #200]	@ (80015b8 <MX_ADC3_Init+0xec>)
 80014ee:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80014f0:	4b30      	ldr	r3, [pc, #192]	@ (80015b4 <MX_ADC3_Init+0xe8>)
 80014f2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80014f6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80014f8:	4b2e      	ldr	r3, [pc, #184]	@ (80015b4 <MX_ADC3_Init+0xe8>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014fe:	4b2d      	ldr	r3, [pc, #180]	@ (80015b4 <MX_ADC3_Init+0xe8>)
 8001500:	2200      	movs	r2, #0
 8001502:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8001504:	4b2b      	ldr	r3, [pc, #172]	@ (80015b4 <MX_ADC3_Init+0xe8>)
 8001506:	2200      	movs	r2, #0
 8001508:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800150a:	4b2a      	ldr	r3, [pc, #168]	@ (80015b4 <MX_ADC3_Init+0xe8>)
 800150c:	2200      	movs	r2, #0
 800150e:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001510:	4b28      	ldr	r3, [pc, #160]	@ (80015b4 <MX_ADC3_Init+0xe8>)
 8001512:	2204      	movs	r2, #4
 8001514:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001516:	4b27      	ldr	r3, [pc, #156]	@ (80015b4 <MX_ADC3_Init+0xe8>)
 8001518:	2200      	movs	r2, #0
 800151a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800151c:	4b25      	ldr	r3, [pc, #148]	@ (80015b4 <MX_ADC3_Init+0xe8>)
 800151e:	2200      	movs	r2, #0
 8001520:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8001522:	4b24      	ldr	r3, [pc, #144]	@ (80015b4 <MX_ADC3_Init+0xe8>)
 8001524:	2201      	movs	r2, #1
 8001526:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001528:	4b22      	ldr	r3, [pc, #136]	@ (80015b4 <MX_ADC3_Init+0xe8>)
 800152a:	2200      	movs	r2, #0
 800152c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_CC3;
 8001530:	4b20      	ldr	r3, [pc, #128]	@ (80015b4 <MX_ADC3_Init+0xe8>)
 8001532:	f44f 6288 	mov.w	r2, #1088	@ 0x440
 8001536:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001538:	4b1e      	ldr	r3, [pc, #120]	@ (80015b4 <MX_ADC3_Init+0xe8>)
 800153a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800153e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001540:	4b1c      	ldr	r3, [pc, #112]	@ (80015b4 <MX_ADC3_Init+0xe8>)
 8001542:	2201      	movs	r2, #1
 8001544:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001548:	4b1a      	ldr	r3, [pc, #104]	@ (80015b4 <MX_ADC3_Init+0xe8>)
 800154a:	2200      	movs	r2, #0
 800154c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 800154e:	4b19      	ldr	r3, [pc, #100]	@ (80015b4 <MX_ADC3_Init+0xe8>)
 8001550:	2200      	movs	r2, #0
 8001552:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001556:	4817      	ldr	r0, [pc, #92]	@ (80015b4 <MX_ADC3_Init+0xe8>)
 8001558:	f001 fe62 	bl	8003220 <HAL_ADC_Init>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_ADC3_Init+0x9a>
  {
    Error_Handler();
 8001562:	f000 fc9d 	bl	8001ea0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001566:	2300      	movs	r3, #0
 8001568:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 800156a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800156e:	4619      	mov	r1, r3
 8001570:	4810      	ldr	r0, [pc, #64]	@ (80015b4 <MX_ADC3_Init+0xe8>)
 8001572:	f003 f91b 	bl	80047ac <HAL_ADCEx_MultiModeConfigChannel>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 800157c:	f000 fc90 	bl	8001ea0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP3_ADC3;
 8001580:	4b0e      	ldr	r3, [pc, #56]	@ (80015bc <MX_ADC3_Init+0xf0>)
 8001582:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001584:	2306      	movs	r3, #6
 8001586:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001588:	2300      	movs	r3, #0
 800158a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800158c:	237f      	movs	r3, #127	@ 0x7f
 800158e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001590:	2304      	movs	r3, #4
 8001592:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001594:	2300      	movs	r3, #0
 8001596:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001598:	1d3b      	adds	r3, r7, #4
 800159a:	4619      	mov	r1, r3
 800159c:	4805      	ldr	r0, [pc, #20]	@ (80015b4 <MX_ADC3_Init+0xe8>)
 800159e:	f002 fb43 	bl	8003c28 <HAL_ADC_ConfigChannel>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_ADC3_Init+0xe0>
  {
    Error_Handler();
 80015a8:	f000 fc7a 	bl	8001ea0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80015ac:	bf00      	nop
 80015ae:	3730      	adds	r7, #48	@ 0x30
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	20000440 	.word	0x20000440
 80015b8:	50000400 	.word	0x50000400
 80015bc:	b6982000 	.word	0xb6982000

080015c0 <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 80015c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001604 <MX_OPAMP1_Init+0x44>)
 80015c6:	4a10      	ldr	r2, [pc, #64]	@ (8001608 <MX_OPAMP1_Init+0x48>)
 80015c8:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 80015ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001604 <MX_OPAMP1_Init+0x44>)
 80015cc:	2280      	movs	r2, #128	@ 0x80
 80015ce:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_FOLLOWER_MODE;
 80015d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001604 <MX_OPAMP1_Init+0x44>)
 80015d2:	2260      	movs	r2, #96	@ 0x60
 80015d4:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80015d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001604 <MX_OPAMP1_Init+0x44>)
 80015d8:	2200      	movs	r2, #0
 80015da:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = ENABLE;
 80015dc:	4b09      	ldr	r3, [pc, #36]	@ (8001604 <MX_OPAMP1_Init+0x44>)
 80015de:	2201      	movs	r2, #1
 80015e0:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80015e2:	4b08      	ldr	r3, [pc, #32]	@ (8001604 <MX_OPAMP1_Init+0x44>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	619a      	str	r2, [r3, #24]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80015e8:	4b06      	ldr	r3, [pc, #24]	@ (8001604 <MX_OPAMP1_Init+0x44>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 80015ee:	4805      	ldr	r0, [pc, #20]	@ (8001604 <MX_OPAMP1_Init+0x44>)
 80015f0:	f003 ff24 	bl	800543c <HAL_OPAMP_Init>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_OPAMP1_Init+0x3e>
  {
    Error_Handler();
 80015fa:	f000 fc51 	bl	8001ea0 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	200005cc 	.word	0x200005cc
 8001608:	40010300 	.word	0x40010300

0800160c <MX_OPAMP3_Init>:
  * @brief OPAMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP3_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 8001610:	4b0f      	ldr	r3, [pc, #60]	@ (8001650 <MX_OPAMP3_Init+0x44>)
 8001612:	4a10      	ldr	r2, [pc, #64]	@ (8001654 <MX_OPAMP3_Init+0x48>)
 8001614:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 8001616:	4b0e      	ldr	r3, [pc, #56]	@ (8001650 <MX_OPAMP3_Init+0x44>)
 8001618:	2280      	movs	r2, #128	@ 0x80
 800161a:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_FOLLOWER_MODE;
 800161c:	4b0c      	ldr	r3, [pc, #48]	@ (8001650 <MX_OPAMP3_Init+0x44>)
 800161e:	2260      	movs	r2, #96	@ 0x60
 8001620:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 8001622:	4b0b      	ldr	r3, [pc, #44]	@ (8001650 <MX_OPAMP3_Init+0x44>)
 8001624:	2208      	movs	r2, #8
 8001626:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = ENABLE;
 8001628:	4b09      	ldr	r3, [pc, #36]	@ (8001650 <MX_OPAMP3_Init+0x44>)
 800162a:	2201      	movs	r2, #1
 800162c:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800162e:	4b08      	ldr	r3, [pc, #32]	@ (8001650 <MX_OPAMP3_Init+0x44>)
 8001630:	2200      	movs	r2, #0
 8001632:	619a      	str	r2, [r3, #24]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001634:	4b06      	ldr	r3, [pc, #24]	@ (8001650 <MX_OPAMP3_Init+0x44>)
 8001636:	2200      	movs	r2, #0
 8001638:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 800163a:	4805      	ldr	r0, [pc, #20]	@ (8001650 <MX_OPAMP3_Init+0x44>)
 800163c:	f003 fefe 	bl	800543c <HAL_OPAMP_Init>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_OPAMP3_Init+0x3e>
  {
    Error_Handler();
 8001646:	f000 fc2b 	bl	8001ea0 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	20000608 	.word	0x20000608
 8001654:	40010308 	.word	0x40010308

08001658 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b09c      	sub	sp, #112	@ 0x70
 800165c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800165e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	605a      	str	r2, [r3, #4]
 8001668:	609a      	str	r2, [r3, #8]
 800166a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800166c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001678:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	611a      	str	r2, [r3, #16]
 8001688:	615a      	str	r2, [r3, #20]
 800168a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800168c:	1d3b      	adds	r3, r7, #4
 800168e:	2234      	movs	r2, #52	@ 0x34
 8001690:	2100      	movs	r1, #0
 8001692:	4618      	mov	r0, r3
 8001694:	f00e ff9b 	bl	80105ce <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001698:	4b5a      	ldr	r3, [pc, #360]	@ (8001804 <MX_TIM1_Init+0x1ac>)
 800169a:	4a5b      	ldr	r2, [pc, #364]	@ (8001808 <MX_TIM1_Init+0x1b0>)
 800169c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 5-1;
 800169e:	4b59      	ldr	r3, [pc, #356]	@ (8001804 <MX_TIM1_Init+0x1ac>)
 80016a0:	2204      	movs	r2, #4
 80016a2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016a4:	4b57      	ldr	r3, [pc, #348]	@ (8001804 <MX_TIM1_Init+0x1ac>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2;
 80016aa:	4b56      	ldr	r3, [pc, #344]	@ (8001804 <MX_TIM1_Init+0x1ac>)
 80016ac:	2202      	movs	r2, #2
 80016ae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016b0:	4b54      	ldr	r3, [pc, #336]	@ (8001804 <MX_TIM1_Init+0x1ac>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016b6:	4b53      	ldr	r3, [pc, #332]	@ (8001804 <MX_TIM1_Init+0x1ac>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016bc:	4b51      	ldr	r3, [pc, #324]	@ (8001804 <MX_TIM1_Init+0x1ac>)
 80016be:	2200      	movs	r2, #0
 80016c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80016c2:	4850      	ldr	r0, [pc, #320]	@ (8001804 <MX_TIM1_Init+0x1ac>)
 80016c4:	f006 fce6 	bl	8008094 <HAL_TIM_Base_Init>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80016ce:	f000 fbe7 	bl	8001ea0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016d6:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80016d8:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80016dc:	4619      	mov	r1, r3
 80016de:	4849      	ldr	r0, [pc, #292]	@ (8001804 <MX_TIM1_Init+0x1ac>)
 80016e0:	f008 f858 	bl	8009794 <HAL_TIM_ConfigClockSource>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80016ea:	f000 fbd9 	bl	8001ea0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80016ee:	4845      	ldr	r0, [pc, #276]	@ (8001804 <MX_TIM1_Init+0x1ac>)
 80016f0:	f006 fe10 	bl	8008314 <HAL_TIM_OC_Init>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80016fa:	f000 fbd1 	bl	8001ea0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80016fe:	2320      	movs	r3, #32
 8001700:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001702:	2300      	movs	r3, #0
 8001704:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001706:	2300      	movs	r3, #0
 8001708:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800170a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800170e:	4619      	mov	r1, r3
 8001710:	483c      	ldr	r0, [pc, #240]	@ (8001804 <MX_TIM1_Init+0x1ac>)
 8001712:	f009 f993 	bl	800aa3c <HAL_TIMEx_MasterConfigSynchronization>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 800171c:	f000 fbc0 	bl	8001ea0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001720:	2330      	movs	r3, #48	@ 0x30
 8001722:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001724:	2300      	movs	r3, #0
 8001726:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001728:	2300      	movs	r3, #0
 800172a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800172c:	2300      	movs	r3, #0
 800172e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001730:	2300      	movs	r3, #0
 8001732:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001734:	2300      	movs	r3, #0
 8001736:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001738:	2300      	movs	r3, #0
 800173a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800173c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001740:	2200      	movs	r2, #0
 8001742:	4619      	mov	r1, r3
 8001744:	482f      	ldr	r0, [pc, #188]	@ (8001804 <MX_TIM1_Init+0x1ac>)
 8001746:	f007 fdfb 	bl	8009340 <HAL_TIM_OC_ConfigChannel>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001750:	f000 fba6 	bl	8001ea0 <Error_Handler>
  }
  sConfigOC.Pulse = 1;
 8001754:	2301      	movs	r3, #1
 8001756:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001758:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800175c:	2204      	movs	r2, #4
 800175e:	4619      	mov	r1, r3
 8001760:	4828      	ldr	r0, [pc, #160]	@ (8001804 <MX_TIM1_Init+0x1ac>)
 8001762:	f007 fded 	bl	8009340 <HAL_TIM_OC_ConfigChannel>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 800176c:	f000 fb98 	bl	8001ea0 <Error_Handler>
  }
  sConfigOC.Pulse = 2;
 8001770:	2302      	movs	r3, #2
 8001772:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001774:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001778:	2208      	movs	r2, #8
 800177a:	4619      	mov	r1, r3
 800177c:	4821      	ldr	r0, [pc, #132]	@ (8001804 <MX_TIM1_Init+0x1ac>)
 800177e:	f007 fddf 	bl	8009340 <HAL_TIM_OC_ConfigChannel>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_TIM1_Init+0x134>
  {
    Error_Handler();
 8001788:	f000 fb8a 	bl	8001ea0 <Error_Handler>
  }
  sConfigOC.Pulse = 3;
 800178c:	2303      	movs	r3, #3
 800178e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001790:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001794:	220c      	movs	r2, #12
 8001796:	4619      	mov	r1, r3
 8001798:	481a      	ldr	r0, [pc, #104]	@ (8001804 <MX_TIM1_Init+0x1ac>)
 800179a:	f007 fdd1 	bl	8009340 <HAL_TIM_OC_ConfigChannel>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 80017a4:	f000 fb7c 	bl	8001ea0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017a8:	2300      	movs	r3, #0
 80017aa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017ac:	2300      	movs	r3, #0
 80017ae:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017b0:	2300      	movs	r3, #0
 80017b2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017b4:	2300      	movs	r3, #0
 80017b6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017b8:	2300      	movs	r3, #0
 80017ba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017c0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80017c2:	2300      	movs	r3, #0
 80017c4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80017c6:	2300      	movs	r3, #0
 80017c8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80017ca:	2300      	movs	r3, #0
 80017cc:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80017ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80017d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80017d4:	2300      	movs	r3, #0
 80017d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80017d8:	2300      	movs	r3, #0
 80017da:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017dc:	2300      	movs	r3, #0
 80017de:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80017e0:	1d3b      	adds	r3, r7, #4
 80017e2:	4619      	mov	r1, r3
 80017e4:	4807      	ldr	r0, [pc, #28]	@ (8001804 <MX_TIM1_Init+0x1ac>)
 80017e6:	f009 f9bf 	bl	800ab68 <HAL_TIMEx_ConfigBreakDeadTime>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_TIM1_Init+0x19c>
  {
    Error_Handler();
 80017f0:	f000 fb56 	bl	8001ea0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80017f4:	4803      	ldr	r0, [pc, #12]	@ (8001804 <MX_TIM1_Init+0x1ac>)
 80017f6:	f000 fe1f 	bl	8002438 <HAL_TIM_MspPostInit>

}
 80017fa:	bf00      	nop
 80017fc:	3770      	adds	r7, #112	@ 0x70
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	20000644 	.word	0x20000644
 8001808:	40012c00 	.word	0x40012c00

0800180c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b08e      	sub	sp, #56	@ 0x38
 8001810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001812:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	605a      	str	r2, [r3, #4]
 800181c:	609a      	str	r2, [r3, #8]
 800181e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001820:	f107 031c 	add.w	r3, r7, #28
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800182c:	463b      	mov	r3, r7
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	605a      	str	r2, [r3, #4]
 8001834:	609a      	str	r2, [r3, #8]
 8001836:	60da      	str	r2, [r3, #12]
 8001838:	611a      	str	r2, [r3, #16]
 800183a:	615a      	str	r2, [r3, #20]
 800183c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800183e:	4b37      	ldr	r3, [pc, #220]	@ (800191c <MX_TIM2_Init+0x110>)
 8001840:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001844:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001846:	4b35      	ldr	r3, [pc, #212]	@ (800191c <MX_TIM2_Init+0x110>)
 8001848:	2200      	movs	r2, #0
 800184a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800184c:	4b33      	ldr	r3, [pc, #204]	@ (800191c <MX_TIM2_Init+0x110>)
 800184e:	2200      	movs	r2, #0
 8001850:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001852:	4b32      	ldr	r3, [pc, #200]	@ (800191c <MX_TIM2_Init+0x110>)
 8001854:	f04f 32ff 	mov.w	r2, #4294967295
 8001858:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800185a:	4b30      	ldr	r3, [pc, #192]	@ (800191c <MX_TIM2_Init+0x110>)
 800185c:	2200      	movs	r2, #0
 800185e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001860:	4b2e      	ldr	r3, [pc, #184]	@ (800191c <MX_TIM2_Init+0x110>)
 8001862:	2200      	movs	r2, #0
 8001864:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001866:	482d      	ldr	r0, [pc, #180]	@ (800191c <MX_TIM2_Init+0x110>)
 8001868:	f006 fc14 	bl	8008094 <HAL_TIM_Base_Init>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001872:	f000 fb15 	bl	8001ea0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8001876:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800187a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 800187c:	2300      	movs	r3, #0
 800187e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8001880:	2300      	movs	r3, #0
 8001882:	633b      	str	r3, [r7, #48]	@ 0x30
  sClockSourceConfig.ClockFilter = 0;
 8001884:	2300      	movs	r3, #0
 8001886:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001888:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800188c:	4619      	mov	r1, r3
 800188e:	4823      	ldr	r0, [pc, #140]	@ (800191c <MX_TIM2_Init+0x110>)
 8001890:	f007 ff80 	bl	8009794 <HAL_TIM_ConfigClockSource>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800189a:	f000 fb01 	bl	8001ea0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800189e:	481f      	ldr	r0, [pc, #124]	@ (800191c <MX_TIM2_Init+0x110>)
 80018a0:	f006 feac 	bl	80085fc <HAL_TIM_PWM_Init>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 80018aa:	f000 faf9 	bl	8001ea0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ae:	2300      	movs	r3, #0
 80018b0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018b2:	2300      	movs	r3, #0
 80018b4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018b6:	f107 031c 	add.w	r3, r7, #28
 80018ba:	4619      	mov	r1, r3
 80018bc:	4817      	ldr	r0, [pc, #92]	@ (800191c <MX_TIM2_Init+0x110>)
 80018be:	f009 f8bd 	bl	800aa3c <HAL_TIMEx_MasterConfigSynchronization>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_TIM2_Init+0xc0>
  {
    Error_Handler();
 80018c8:	f000 faea 	bl	8001ea0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018cc:	2360      	movs	r3, #96	@ 0x60
 80018ce:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 80018d0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018d4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018d6:	2300      	movs	r3, #0
 80018d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018da:	2300      	movs	r3, #0
 80018dc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80018de:	463b      	mov	r3, r7
 80018e0:	2208      	movs	r2, #8
 80018e2:	4619      	mov	r1, r3
 80018e4:	480d      	ldr	r0, [pc, #52]	@ (800191c <MX_TIM2_Init+0x110>)
 80018e6:	f007 fe41 	bl	800956c <HAL_TIM_PWM_ConfigChannel>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 80018f0:	f000 fad6 	bl	8001ea0 <Error_Handler>
  }
  sConfigOC.Pulse = 1000000;
 80018f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001920 <MX_TIM2_Init+0x114>)
 80018f6:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80018f8:	463b      	mov	r3, r7
 80018fa:	220c      	movs	r2, #12
 80018fc:	4619      	mov	r1, r3
 80018fe:	4807      	ldr	r0, [pc, #28]	@ (800191c <MX_TIM2_Init+0x110>)
 8001900:	f007 fe34 	bl	800956c <HAL_TIM_PWM_ConfigChannel>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_TIM2_Init+0x102>
  {
    Error_Handler();
 800190a:	f000 fac9 	bl	8001ea0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800190e:	4803      	ldr	r0, [pc, #12]	@ (800191c <MX_TIM2_Init+0x110>)
 8001910:	f000 fd92 	bl	8002438 <HAL_TIM_MspPostInit>

}
 8001914:	bf00      	nop
 8001916:	3738      	adds	r7, #56	@ 0x38
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	20000690 	.word	0x20000690
 8001920:	000f4240 	.word	0x000f4240

08001924 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b08e      	sub	sp, #56	@ 0x38
 8001928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800192a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	605a      	str	r2, [r3, #4]
 8001934:	609a      	str	r2, [r3, #8]
 8001936:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001938:	f107 031c 	add.w	r3, r7, #28
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	605a      	str	r2, [r3, #4]
 8001942:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001944:	463b      	mov	r3, r7
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	605a      	str	r2, [r3, #4]
 800194c:	609a      	str	r2, [r3, #8]
 800194e:	60da      	str	r2, [r3, #12]
 8001950:	611a      	str	r2, [r3, #16]
 8001952:	615a      	str	r2, [r3, #20]
 8001954:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001956:	4b2c      	ldr	r3, [pc, #176]	@ (8001a08 <MX_TIM3_Init+0xe4>)
 8001958:	4a2c      	ldr	r2, [pc, #176]	@ (8001a0c <MX_TIM3_Init+0xe8>)
 800195a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800195c:	4b2a      	ldr	r3, [pc, #168]	@ (8001a08 <MX_TIM3_Init+0xe4>)
 800195e:	2200      	movs	r2, #0
 8001960:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001962:	4b29      	ldr	r3, [pc, #164]	@ (8001a08 <MX_TIM3_Init+0xe4>)
 8001964:	2200      	movs	r2, #0
 8001966:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 150;
 8001968:	4b27      	ldr	r3, [pc, #156]	@ (8001a08 <MX_TIM3_Init+0xe4>)
 800196a:	2296      	movs	r2, #150	@ 0x96
 800196c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800196e:	4b26      	ldr	r3, [pc, #152]	@ (8001a08 <MX_TIM3_Init+0xe4>)
 8001970:	2200      	movs	r2, #0
 8001972:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001974:	4b24      	ldr	r3, [pc, #144]	@ (8001a08 <MX_TIM3_Init+0xe4>)
 8001976:	2200      	movs	r2, #0
 8001978:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800197a:	4823      	ldr	r0, [pc, #140]	@ (8001a08 <MX_TIM3_Init+0xe4>)
 800197c:	f006 fb8a 	bl	8008094 <HAL_TIM_Base_Init>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001986:	f000 fa8b 	bl	8001ea0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800198a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800198e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001990:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001994:	4619      	mov	r1, r3
 8001996:	481c      	ldr	r0, [pc, #112]	@ (8001a08 <MX_TIM3_Init+0xe4>)
 8001998:	f007 fefc 	bl	8009794 <HAL_TIM_ConfigClockSource>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80019a2:	f000 fa7d 	bl	8001ea0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80019a6:	4818      	ldr	r0, [pc, #96]	@ (8001a08 <MX_TIM3_Init+0xe4>)
 80019a8:	f006 fe28 	bl	80085fc <HAL_TIM_PWM_Init>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80019b2:	f000 fa75 	bl	8001ea0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019b6:	2300      	movs	r3, #0
 80019b8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ba:	2300      	movs	r3, #0
 80019bc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019be:	f107 031c 	add.w	r3, r7, #28
 80019c2:	4619      	mov	r1, r3
 80019c4:	4810      	ldr	r0, [pc, #64]	@ (8001a08 <MX_TIM3_Init+0xe4>)
 80019c6:	f009 f839 	bl	800aa3c <HAL_TIMEx_MasterConfigSynchronization>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80019d0:	f000 fa66 	bl	8001ea0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019d4:	2360      	movs	r3, #96	@ 0x60
 80019d6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80019d8:	2300      	movs	r3, #0
 80019da:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019dc:	2300      	movs	r3, #0
 80019de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019e0:	2300      	movs	r3, #0
 80019e2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80019e4:	463b      	mov	r3, r7
 80019e6:	220c      	movs	r2, #12
 80019e8:	4619      	mov	r1, r3
 80019ea:	4807      	ldr	r0, [pc, #28]	@ (8001a08 <MX_TIM3_Init+0xe4>)
 80019ec:	f007 fdbe 	bl	800956c <HAL_TIM_PWM_ConfigChannel>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80019f6:	f000 fa53 	bl	8001ea0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80019fa:	4803      	ldr	r0, [pc, #12]	@ (8001a08 <MX_TIM3_Init+0xe4>)
 80019fc:	f000 fd1c 	bl	8002438 <HAL_TIM_MspPostInit>

}
 8001a00:	bf00      	nop
 8001a02:	3738      	adds	r7, #56	@ 0x38
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	200006dc 	.word	0x200006dc
 8001a0c:	40000400 	.word	0x40000400

08001a10 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b088      	sub	sp, #32
 8001a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a16:	f107 0310 	add.w	r3, r7, #16
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	605a      	str	r2, [r3, #4]
 8001a20:	609a      	str	r2, [r3, #8]
 8001a22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a24:	1d3b      	adds	r3, r7, #4
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	605a      	str	r2, [r3, #4]
 8001a2c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a2e:	4b1e      	ldr	r3, [pc, #120]	@ (8001aa8 <MX_TIM4_Init+0x98>)
 8001a30:	4a1e      	ldr	r2, [pc, #120]	@ (8001aac <MX_TIM4_Init+0x9c>)
 8001a32:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 12000-1;
 8001a34:	4b1c      	ldr	r3, [pc, #112]	@ (8001aa8 <MX_TIM4_Init+0x98>)
 8001a36:	f642 62df 	movw	r2, #11999	@ 0x2edf
 8001a3a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a3c:	4b1a      	ldr	r3, [pc, #104]	@ (8001aa8 <MX_TIM4_Init+0x98>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8001a42:	4b19      	ldr	r3, [pc, #100]	@ (8001aa8 <MX_TIM4_Init+0x98>)
 8001a44:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001a48:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a4a:	4b17      	ldr	r3, [pc, #92]	@ (8001aa8 <MX_TIM4_Init+0x98>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a50:	4b15      	ldr	r3, [pc, #84]	@ (8001aa8 <MX_TIM4_Init+0x98>)
 8001a52:	2280      	movs	r2, #128	@ 0x80
 8001a54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001a56:	4814      	ldr	r0, [pc, #80]	@ (8001aa8 <MX_TIM4_Init+0x98>)
 8001a58:	f006 fb1c 	bl	8008094 <HAL_TIM_Base_Init>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8001a62:	f000 fa1d 	bl	8001ea0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a6a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001a6c:	f107 0310 	add.w	r3, r7, #16
 8001a70:	4619      	mov	r1, r3
 8001a72:	480d      	ldr	r0, [pc, #52]	@ (8001aa8 <MX_TIM4_Init+0x98>)
 8001a74:	f007 fe8e 	bl	8009794 <HAL_TIM_ConfigClockSource>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8001a7e:	f000 fa0f 	bl	8001ea0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a82:	2300      	movs	r3, #0
 8001a84:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a86:	2300      	movs	r3, #0
 8001a88:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a8a:	1d3b      	adds	r3, r7, #4
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4806      	ldr	r0, [pc, #24]	@ (8001aa8 <MX_TIM4_Init+0x98>)
 8001a90:	f008 ffd4 	bl	800aa3c <HAL_TIMEx_MasterConfigSynchronization>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8001a9a:	f000 fa01 	bl	8001ea0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001a9e:	bf00      	nop
 8001aa0:	3720      	adds	r7, #32
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20000728 	.word	0x20000728
 8001aac:	40000800 	.word	0x40000800

08001ab0 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b090      	sub	sp, #64	@ 0x40
 8001ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ab6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	605a      	str	r2, [r3, #4]
 8001ac0:	609a      	str	r2, [r3, #8]
 8001ac2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001ac4:	f107 031c 	add.w	r3, r7, #28
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	609a      	str	r2, [r3, #8]
 8001ad0:	60da      	str	r2, [r3, #12]
 8001ad2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ad4:	f107 0310 	add.w	r3, r7, #16
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	605a      	str	r2, [r3, #4]
 8001ade:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001ae0:	463b      	mov	r3, r7
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	605a      	str	r2, [r3, #4]
 8001ae8:	609a      	str	r2, [r3, #8]
 8001aea:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001aec:	4b3d      	ldr	r3, [pc, #244]	@ (8001be4 <MX_TIM15_Init+0x134>)
 8001aee:	4a3e      	ldr	r2, [pc, #248]	@ (8001be8 <MX_TIM15_Init+0x138>)
 8001af0:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001af2:	4b3c      	ldr	r3, [pc, #240]	@ (8001be4 <MX_TIM15_Init+0x134>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001af8:	4b3a      	ldr	r3, [pc, #232]	@ (8001be4 <MX_TIM15_Init+0x134>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001afe:	4b39      	ldr	r3, [pc, #228]	@ (8001be4 <MX_TIM15_Init+0x134>)
 8001b00:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b04:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b06:	4b37      	ldr	r3, [pc, #220]	@ (8001be4 <MX_TIM15_Init+0x134>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001b0c:	4b35      	ldr	r3, [pc, #212]	@ (8001be4 <MX_TIM15_Init+0x134>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b12:	4b34      	ldr	r3, [pc, #208]	@ (8001be4 <MX_TIM15_Init+0x134>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001b18:	4832      	ldr	r0, [pc, #200]	@ (8001be4 <MX_TIM15_Init+0x134>)
 8001b1a:	f006 fabb 	bl	8008094 <HAL_TIM_Base_Init>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8001b24:	f000 f9bc 	bl	8001ea0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b2c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001b2e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001b32:	4619      	mov	r1, r3
 8001b34:	482b      	ldr	r0, [pc, #172]	@ (8001be4 <MX_TIM15_Init+0x134>)
 8001b36:	f007 fe2d 	bl	8009794 <HAL_TIM_ConfigClockSource>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8001b40:	f000 f9ae 	bl	8001ea0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8001b44:	4827      	ldr	r0, [pc, #156]	@ (8001be4 <MX_TIM15_Init+0x134>)
 8001b46:	f007 f8f9 	bl	8008d3c <HAL_TIM_IC_Init>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <MX_TIM15_Init+0xa4>
  {
    Error_Handler();
 8001b50:	f000 f9a6 	bl	8001ea0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001b54:	2304      	movs	r3, #4
 8001b56:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001b58:	2350      	movs	r3, #80	@ 0x50
 8001b5a:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerFilter = 0;
 8001b60:	2300      	movs	r3, #0
 8001b62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim15, &sSlaveConfig) != HAL_OK)
 8001b64:	f107 031c 	add.w	r3, r7, #28
 8001b68:	4619      	mov	r1, r3
 8001b6a:	481e      	ldr	r0, [pc, #120]	@ (8001be4 <MX_TIM15_Init+0x134>)
 8001b6c:	f007 ff28 	bl	80099c0 <HAL_TIM_SlaveConfigSynchro>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <MX_TIM15_Init+0xca>
  {
    Error_Handler();
 8001b76:	f000 f993 	bl	8001ea0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001b82:	f107 0310 	add.w	r3, r7, #16
 8001b86:	4619      	mov	r1, r3
 8001b88:	4816      	ldr	r0, [pc, #88]	@ (8001be4 <MX_TIM15_Init+0x134>)
 8001b8a:	f008 ff57 	bl	800aa3c <HAL_TIMEx_MasterConfigSynchronization>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <MX_TIM15_Init+0xe8>
  {
    Error_Handler();
 8001b94:	f000 f984 	bl	8001ea0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001ba8:	463b      	mov	r3, r7
 8001baa:	2200      	movs	r2, #0
 8001bac:	4619      	mov	r1, r3
 8001bae:	480d      	ldr	r0, [pc, #52]	@ (8001be4 <MX_TIM15_Init+0x134>)
 8001bb0:	f007 fc40 	bl	8009434 <HAL_TIM_IC_ConfigChannel>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8001bba:	f000 f971 	bl	8001ea0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001bc6:	463b      	mov	r3, r7
 8001bc8:	2204      	movs	r2, #4
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4805      	ldr	r0, [pc, #20]	@ (8001be4 <MX_TIM15_Init+0x134>)
 8001bce:	f007 fc31 	bl	8009434 <HAL_TIM_IC_ConfigChannel>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_TIM15_Init+0x12c>
  {
    Error_Handler();
 8001bd8:	f000 f962 	bl	8001ea0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001bdc:	bf00      	nop
 8001bde:	3740      	adds	r7, #64	@ 0x40
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	20000774 	.word	0x20000774
 8001be8:	40014000 	.word	0x40014000

08001bec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001bf2:	4b1e      	ldr	r3, [pc, #120]	@ (8001c6c <MX_DMA_Init+0x80>)
 8001bf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bf6:	4a1d      	ldr	r2, [pc, #116]	@ (8001c6c <MX_DMA_Init+0x80>)
 8001bf8:	f043 0304 	orr.w	r3, r3, #4
 8001bfc:	6493      	str	r3, [r2, #72]	@ 0x48
 8001bfe:	4b1b      	ldr	r3, [pc, #108]	@ (8001c6c <MX_DMA_Init+0x80>)
 8001c00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c02:	f003 0304 	and.w	r3, r3, #4
 8001c06:	607b      	str	r3, [r7, #4]
 8001c08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c0a:	4b18      	ldr	r3, [pc, #96]	@ (8001c6c <MX_DMA_Init+0x80>)
 8001c0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c0e:	4a17      	ldr	r2, [pc, #92]	@ (8001c6c <MX_DMA_Init+0x80>)
 8001c10:	f043 0301 	orr.w	r3, r3, #1
 8001c14:	6493      	str	r3, [r2, #72]	@ 0x48
 8001c16:	4b15      	ldr	r3, [pc, #84]	@ (8001c6c <MX_DMA_Init+0x80>)
 8001c18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	603b      	str	r3, [r7, #0]
 8001c20:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001c22:	2200      	movs	r2, #0
 8001c24:	2100      	movs	r1, #0
 8001c26:	200b      	movs	r0, #11
 8001c28:	f002 ffa3 	bl	8004b72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001c2c:	200b      	movs	r0, #11
 8001c2e:	f002 ffba 	bl	8004ba6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001c32:	2200      	movs	r2, #0
 8001c34:	2100      	movs	r1, #0
 8001c36:	200c      	movs	r0, #12
 8001c38:	f002 ff9b 	bl	8004b72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001c3c:	200c      	movs	r0, #12
 8001c3e:	f002 ffb2 	bl	8004ba6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001c42:	2200      	movs	r2, #0
 8001c44:	2100      	movs	r1, #0
 8001c46:	200d      	movs	r0, #13
 8001c48:	f002 ff93 	bl	8004b72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001c4c:	200d      	movs	r0, #13
 8001c4e:	f002 ffaa 	bl	8004ba6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001c52:	2200      	movs	r2, #0
 8001c54:	2100      	movs	r1, #0
 8001c56:	200e      	movs	r0, #14
 8001c58:	f002 ff8b 	bl	8004b72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001c5c:	200e      	movs	r0, #14
 8001c5e:	f002 ffa2 	bl	8004ba6 <HAL_NVIC_EnableIRQ>

}
 8001c62:	bf00      	nop
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	40021000 	.word	0x40021000

08001c70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b08a      	sub	sp, #40	@ 0x28
 8001c74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c76:	f107 0314 	add.w	r3, r7, #20
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	605a      	str	r2, [r3, #4]
 8001c80:	609a      	str	r2, [r3, #8]
 8001c82:	60da      	str	r2, [r3, #12]
 8001c84:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c86:	4b33      	ldr	r3, [pc, #204]	@ (8001d54 <MX_GPIO_Init+0xe4>)
 8001c88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c8a:	4a32      	ldr	r2, [pc, #200]	@ (8001d54 <MX_GPIO_Init+0xe4>)
 8001c8c:	f043 0320 	orr.w	r3, r3, #32
 8001c90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c92:	4b30      	ldr	r3, [pc, #192]	@ (8001d54 <MX_GPIO_Init+0xe4>)
 8001c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c96:	f003 0320 	and.w	r3, r3, #32
 8001c9a:	613b      	str	r3, [r7, #16]
 8001c9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c9e:	4b2d      	ldr	r3, [pc, #180]	@ (8001d54 <MX_GPIO_Init+0xe4>)
 8001ca0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ca2:	4a2c      	ldr	r2, [pc, #176]	@ (8001d54 <MX_GPIO_Init+0xe4>)
 8001ca4:	f043 0304 	orr.w	r3, r3, #4
 8001ca8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001caa:	4b2a      	ldr	r3, [pc, #168]	@ (8001d54 <MX_GPIO_Init+0xe4>)
 8001cac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cae:	f003 0304 	and.w	r3, r3, #4
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb6:	4b27      	ldr	r3, [pc, #156]	@ (8001d54 <MX_GPIO_Init+0xe4>)
 8001cb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cba:	4a26      	ldr	r2, [pc, #152]	@ (8001d54 <MX_GPIO_Init+0xe4>)
 8001cbc:	f043 0301 	orr.w	r3, r3, #1
 8001cc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cc2:	4b24      	ldr	r3, [pc, #144]	@ (8001d54 <MX_GPIO_Init+0xe4>)
 8001cc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	60bb      	str	r3, [r7, #8]
 8001ccc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cce:	4b21      	ldr	r3, [pc, #132]	@ (8001d54 <MX_GPIO_Init+0xe4>)
 8001cd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cd2:	4a20      	ldr	r2, [pc, #128]	@ (8001d54 <MX_GPIO_Init+0xe4>)
 8001cd4:	f043 0302 	orr.w	r3, r3, #2
 8001cd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cda:	4b1e      	ldr	r3, [pc, #120]	@ (8001d54 <MX_GPIO_Init+0xe4>)
 8001cdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	607b      	str	r3, [r7, #4]
 8001ce4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ERROR_LED_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8001cec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cf0:	f003 fb68 	bl	80053c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ERROR_LED_Pin PA10 */
  GPIO_InitStruct.Pin = ERROR_LED_Pin|GPIO_PIN_10;
 8001cf4:	f44f 6382 	mov.w	r3, #1040	@ 0x410
 8001cf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d02:	2300      	movs	r3, #0
 8001d04:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d06:	f107 0314 	add.w	r3, r7, #20
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d10:	f003 f9d6 	bl	80050c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d1a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001d1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d20:	2300      	movs	r3, #0
 8001d22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d24:	f107 0314 	add.w	r3, r7, #20
 8001d28:	4619      	mov	r1, r3
 8001d2a:	480b      	ldr	r0, [pc, #44]	@ (8001d58 <MX_GPIO_Init+0xe8>)
 8001d2c:	f003 f9c8 	bl	80050c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001d30:	2200      	movs	r2, #0
 8001d32:	2100      	movs	r1, #0
 8001d34:	2017      	movs	r0, #23
 8001d36:	f002 ff1c 	bl	8004b72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001d3a:	2017      	movs	r0, #23
 8001d3c:	f002 ff33 	bl	8004ba6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, 1);
 8001d40:	2201      	movs	r2, #1
 8001d42:	2110      	movs	r1, #16
 8001d44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d48:	f003 fb3c 	bl	80053c4 <HAL_GPIO_WritePin>

/* USER CODE END MX_GPIO_Init_2 */
}
 8001d4c:	bf00      	nop
 8001d4e:	3728      	adds	r7, #40	@ 0x28
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40021000 	.word	0x40021000
 8001d58:	48000400 	.word	0x48000400

08001d5c <HAL_ADC_ConvHalfCpltCallback>:



//delay
 void HAL_ADC_ConvHalfCpltCallback	(ADC_HandleTypeDef *hadc)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]


#if TOWHILE

	//抓数据进while
	if (WHILE_FLAG==0) {
 8001d64:	4b11      	ldr	r3, [pc, #68]	@ (8001dac <HAL_ADC_ConvHalfCpltCallback+0x50>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d11b      	bne.n	8001da4 <HAL_ADC_ConvHalfCpltCallback+0x48>
		for (size_t i = 0; i < BUFFER_SIZE_HALF; i++)
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	60fb      	str	r3, [r7, #12]
 8001d70:	e011      	b.n	8001d96 <HAL_ADC_ConvHalfCpltCallback+0x3a>
		{		WHILE_BUFFER[i] =ConvertToVoltage(ADC_BUFFER[i]);	}
 8001d72:	4a0f      	ldr	r2, [pc, #60]	@ (8001db0 <HAL_ADC_ConvHalfCpltCallback+0x54>)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7ff f962 	bl	8001044 <ConvertToVoltage>
 8001d80:	eef0 7a40 	vmov.f32	s15, s0
 8001d84:	4a0b      	ldr	r2, [pc, #44]	@ (8001db4 <HAL_ADC_ConvHalfCpltCallback+0x58>)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	4413      	add	r3, r2
 8001d8c:	edc3 7a00 	vstr	s15, [r3]
		for (size_t i = 0; i < BUFFER_SIZE_HALF; i++)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	3301      	adds	r3, #1
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001d9c:	d3e9      	bcc.n	8001d72 <HAL_ADC_ConvHalfCpltCallback+0x16>
		WHILE_FLAG=1;
 8001d9e:	4b03      	ldr	r3, [pc, #12]	@ (8001dac <HAL_ADC_ConvHalfCpltCallback+0x50>)
 8001da0:	2201      	movs	r2, #1
 8001da2:	601a      	str	r2, [r3, #0]


#endif


}
 8001da4:	bf00      	nop
 8001da6:	3710      	adds	r7, #16
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	20001b54 	.word	0x20001b54
 8001db0:	20000830 	.word	0x20000830
 8001db4:	20001190 	.word	0x20001190

08001db8 <HAL_ADC_ConvCpltCallback>:
 void HAL_ADC_ConvCpltCallback		(ADC_HandleTypeDef *hadc)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
#endif

#if TOWHILE

//	抓数据进while
	if (WHILE_FLAG==1) {
 8001dc0:	4b12      	ldr	r3, [pc, #72]	@ (8001e0c <HAL_ADC_ConvCpltCallback+0x54>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d11c      	bne.n	8001e02 <HAL_ADC_ConvCpltCallback+0x4a>
		for (size_t i = BUFFER_SIZE_HALF; i < BUFFER_SIZE; i++)
 8001dc8:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8001dcc:	60fb      	str	r3, [r7, #12]
 8001dce:	e011      	b.n	8001df4 <HAL_ADC_ConvCpltCallback+0x3c>
		{		WHILE_BUFFER[i] =ConvertToVoltage(ADC_BUFFER[i]);		}
 8001dd0:	4a0f      	ldr	r2, [pc, #60]	@ (8001e10 <HAL_ADC_ConvCpltCallback+0x58>)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff f933 	bl	8001044 <ConvertToVoltage>
 8001dde:	eef0 7a40 	vmov.f32	s15, s0
 8001de2:	4a0c      	ldr	r2, [pc, #48]	@ (8001e14 <HAL_ADC_ConvCpltCallback+0x5c>)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	4413      	add	r3, r2
 8001dea:	edc3 7a00 	vstr	s15, [r3]
		for (size_t i = BUFFER_SIZE_HALF; i < BUFFER_SIZE; i++)
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	3301      	adds	r3, #1
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8001dfa:	d3e9      	bcc.n	8001dd0 <HAL_ADC_ConvCpltCallback+0x18>
		WHILE_FLAG=2;
 8001dfc:	4b03      	ldr	r3, [pc, #12]	@ (8001e0c <HAL_ADC_ConvCpltCallback+0x54>)
 8001dfe:	2202      	movs	r2, #2
 8001e00:	601a      	str	r2, [r3, #0]
	}

#endif
}
 8001e02:	bf00      	nop
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	20001b54 	.word	0x20001b54
 8001e10:	20000830 	.word	0x20000830
 8001e14:	20001190 	.word	0x20001190

08001e18 <HAL_TIM_IC_CaptureCallback>:




 void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 {
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]

   if (htim->Instance == TIM15) // 判断是否为TIM15
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a1a      	ldr	r2, [pc, #104]	@ (8001e90 <HAL_TIM_IC_CaptureCallback+0x78>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d12e      	bne.n	8001e88 <HAL_TIM_IC_CaptureCallback+0x70>
   {


     if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	7f1b      	ldrb	r3, [r3, #28]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d12a      	bne.n	8001e88 <HAL_TIM_IC_CaptureCallback+0x70>
     {

//  	   HAL_GPIO_TogglePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin);

       /* Get the Input Capture value */
       uwIC2Value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001e32:	2100      	movs	r1, #0
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f007 fe05 	bl	8009a44 <HAL_TIM_ReadCapturedValue>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	4a15      	ldr	r2, [pc, #84]	@ (8001e94 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8001e3e:	6013      	str	r3, [r2, #0]

       if (uwIC2Value != 0)
 8001e40:	4b14      	ldr	r3, [pc, #80]	@ (8001e94 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d019      	beq.n	8001e7c <HAL_TIM_IC_CaptureCallback+0x64>
       {
         /* Duty cycle computation */
         uwDutyCycle = 255-((HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2)) * 255) / uwIC2Value;
 8001e48:	2104      	movs	r1, #4
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f007 fdfa 	bl	8009a44 <HAL_TIM_ReadCapturedValue>
 8001e50:	4602      	mov	r2, r0
 8001e52:	4613      	mov	r3, r2
 8001e54:	021b      	lsls	r3, r3, #8
 8001e56:	1a9a      	subs	r2, r3, r2
 8001e58:	4b0e      	ldr	r3, [pc, #56]	@ (8001e94 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e60:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8001e64:	4a0c      	ldr	r2, [pc, #48]	@ (8001e98 <HAL_TIM_IC_CaptureCallback+0x80>)
 8001e66:	6013      	str	r3, [r2, #0]

         /* uwFrequency computation
         TIM1 counter clock = (System Clock) */
         uwFrequency = ( HAL_RCC_GetSysClockFreq()  ) / uwIC2Value;
 8001e68:	f005 fe1e 	bl	8007aa8 <HAL_RCC_GetSysClockFreq>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	4b09      	ldr	r3, [pc, #36]	@ (8001e94 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e76:	4a09      	ldr	r2, [pc, #36]	@ (8001e9c <HAL_TIM_IC_CaptureCallback+0x84>)
 8001e78:	6013      	str	r3, [r2, #0]
         uwDutyCycle = 0;
         uwFrequency = 0;
       }
     }
   }
 }
 8001e7a:	e005      	b.n	8001e88 <HAL_TIM_IC_CaptureCallback+0x70>
         uwDutyCycle = 0;
 8001e7c:	4b06      	ldr	r3, [pc, #24]	@ (8001e98 <HAL_TIM_IC_CaptureCallback+0x80>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]
         uwFrequency = 0;
 8001e82:	4b06      	ldr	r3, [pc, #24]	@ (8001e9c <HAL_TIM_IC_CaptureCallback+0x84>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
 }
 8001e88:	bf00      	nop
 8001e8a:	3708      	adds	r7, #8
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40014000 	.word	0x40014000
 8001e94:	20000820 	.word	0x20000820
 8001e98:	20000824 	.word	0x20000824
 8001e9c:	20000828 	.word	0x20000828

08001ea0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* User can add his own implementation to report the HAL error return state */



//  __disable_irq();
  HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, 0);
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	2110      	movs	r1, #16
 8001ea8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001eac:	f003 fa8a 	bl	80053c4 <HAL_GPIO_WritePin>
//  while (1)
//  {
//
//  }
  /* USER CODE END Error_Handler_Debug */
}
 8001eb0:	bf00      	nop
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eba:	4b14      	ldr	r3, [pc, #80]	@ (8001f0c <HAL_MspInit+0x58>)
 8001ebc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ebe:	4a13      	ldr	r2, [pc, #76]	@ (8001f0c <HAL_MspInit+0x58>)
 8001ec0:	f043 0301 	orr.w	r3, r3, #1
 8001ec4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ec6:	4b11      	ldr	r3, [pc, #68]	@ (8001f0c <HAL_MspInit+0x58>)
 8001ec8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	607b      	str	r3, [r7, #4]
 8001ed0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ed2:	4b0e      	ldr	r3, [pc, #56]	@ (8001f0c <HAL_MspInit+0x58>)
 8001ed4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ed6:	4a0d      	ldr	r2, [pc, #52]	@ (8001f0c <HAL_MspInit+0x58>)
 8001ed8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001edc:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ede:	4b0b      	ldr	r3, [pc, #44]	@ (8001f0c <HAL_MspInit+0x58>)
 8001ee0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ee2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ee6:	603b      	str	r3, [r7, #0]
 8001ee8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Tune the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_VREFBUF_TrimmingConfig(0);
 8001eea:	2000      	movs	r0, #0
 8001eec:	f000 ff20 	bl	8002d30 <HAL_SYSCFG_VREFBUF_TrimmingConfig>

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 8001ef0:	2000      	movs	r0, #0
 8001ef2:	f000 fef5 	bl	8002ce0 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 8001ef6:	f000 ff2f 	bl	8002d58 <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8001efa:	2000      	movs	r0, #0
 8001efc:	f000 ff04 	bl	8002d08 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001f00:	f005 f974 	bl	80071ec <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f04:	bf00      	nop
 8001f06:	3708      	adds	r7, #8
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	40021000 	.word	0x40021000

08001f10 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b0a0      	sub	sp, #128	@ 0x80
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f18:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	605a      	str	r2, [r3, #4]
 8001f22:	609a      	str	r2, [r3, #8]
 8001f24:	60da      	str	r2, [r3, #12]
 8001f26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f28:	f107 0318 	add.w	r3, r7, #24
 8001f2c:	2254      	movs	r2, #84	@ 0x54
 8001f2e:	2100      	movs	r1, #0
 8001f30:	4618      	mov	r0, r3
 8001f32:	f00e fb4c 	bl	80105ce <memset>
  if(hadc->Instance==ADC1)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f3e:	d158      	bne.n	8001ff2 <HAL_ADC_MspInit+0xe2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001f40:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001f44:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001f46:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001f4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f4c:	f107 0318 	add.w	r3, r7, #24
 8001f50:	4618      	mov	r0, r3
 8001f52:	f005 fe51 	bl	8007bf8 <HAL_RCCEx_PeriphCLKConfig>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001f5c:	f7ff ffa0 	bl	8001ea0 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001f60:	4b87      	ldr	r3, [pc, #540]	@ (8002180 <HAL_ADC_MspInit+0x270>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	3301      	adds	r3, #1
 8001f66:	4a86      	ldr	r2, [pc, #536]	@ (8002180 <HAL_ADC_MspInit+0x270>)
 8001f68:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001f6a:	4b85      	ldr	r3, [pc, #532]	@ (8002180 <HAL_ADC_MspInit+0x270>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d10b      	bne.n	8001f8a <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001f72:	4b84      	ldr	r3, [pc, #528]	@ (8002184 <HAL_ADC_MspInit+0x274>)
 8001f74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f76:	4a83      	ldr	r2, [pc, #524]	@ (8002184 <HAL_ADC_MspInit+0x274>)
 8001f78:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001f7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f7e:	4b81      	ldr	r3, [pc, #516]	@ (8002184 <HAL_ADC_MspInit+0x274>)
 8001f80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f86:	617b      	str	r3, [r7, #20]
 8001f88:	697b      	ldr	r3, [r7, #20]
    }

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 8001f8a:	4b7f      	ldr	r3, [pc, #508]	@ (8002188 <HAL_ADC_MspInit+0x278>)
 8001f8c:	4a7f      	ldr	r2, [pc, #508]	@ (800218c <HAL_ADC_MspInit+0x27c>)
 8001f8e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001f90:	4b7d      	ldr	r3, [pc, #500]	@ (8002188 <HAL_ADC_MspInit+0x278>)
 8001f92:	2205      	movs	r2, #5
 8001f94:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f96:	4b7c      	ldr	r3, [pc, #496]	@ (8002188 <HAL_ADC_MspInit+0x278>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f9c:	4b7a      	ldr	r3, [pc, #488]	@ (8002188 <HAL_ADC_MspInit+0x278>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001fa2:	4b79      	ldr	r3, [pc, #484]	@ (8002188 <HAL_ADC_MspInit+0x278>)
 8001fa4:	2280      	movs	r2, #128	@ 0x80
 8001fa6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001fa8:	4b77      	ldr	r3, [pc, #476]	@ (8002188 <HAL_ADC_MspInit+0x278>)
 8001faa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fae:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001fb0:	4b75      	ldr	r3, [pc, #468]	@ (8002188 <HAL_ADC_MspInit+0x278>)
 8001fb2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001fb6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001fb8:	4b73      	ldr	r3, [pc, #460]	@ (8002188 <HAL_ADC_MspInit+0x278>)
 8001fba:	2220      	movs	r2, #32
 8001fbc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001fbe:	4b72      	ldr	r3, [pc, #456]	@ (8002188 <HAL_ADC_MspInit+0x278>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001fc4:	4870      	ldr	r0, [pc, #448]	@ (8002188 <HAL_ADC_MspInit+0x278>)
 8001fc6:	f002 fe09 	bl	8004bdc <HAL_DMA_Init>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001fd0:	f7ff ff66 	bl	8001ea0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a6c      	ldr	r2, [pc, #432]	@ (8002188 <HAL_ADC_MspInit+0x278>)
 8001fd8:	655a      	str	r2, [r3, #84]	@ 0x54
 8001fda:	4a6b      	ldr	r2, [pc, #428]	@ (8002188 <HAL_ADC_MspInit+0x278>)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	2012      	movs	r0, #18
 8001fe6:	f002 fdc4 	bl	8004b72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001fea:	2012      	movs	r0, #18
 8001fec:	f002 fddb 	bl	8004ba6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001ff0:	e0c2      	b.n	8002178 <HAL_ADC_MspInit+0x268>
  else if(hadc->Instance==ADC2)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a66      	ldr	r2, [pc, #408]	@ (8002190 <HAL_ADC_MspInit+0x280>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d171      	bne.n	80020e0 <HAL_ADC_MspInit+0x1d0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001ffc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002000:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002002:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002006:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002008:	f107 0318 	add.w	r3, r7, #24
 800200c:	4618      	mov	r0, r3
 800200e:	f005 fdf3 	bl	8007bf8 <HAL_RCCEx_PeriphCLKConfig>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <HAL_ADC_MspInit+0x10c>
      Error_Handler();
 8002018:	f7ff ff42 	bl	8001ea0 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800201c:	4b58      	ldr	r3, [pc, #352]	@ (8002180 <HAL_ADC_MspInit+0x270>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	3301      	adds	r3, #1
 8002022:	4a57      	ldr	r2, [pc, #348]	@ (8002180 <HAL_ADC_MspInit+0x270>)
 8002024:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002026:	4b56      	ldr	r3, [pc, #344]	@ (8002180 <HAL_ADC_MspInit+0x270>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d10b      	bne.n	8002046 <HAL_ADC_MspInit+0x136>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800202e:	4b55      	ldr	r3, [pc, #340]	@ (8002184 <HAL_ADC_MspInit+0x274>)
 8002030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002032:	4a54      	ldr	r2, [pc, #336]	@ (8002184 <HAL_ADC_MspInit+0x274>)
 8002034:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002038:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800203a:	4b52      	ldr	r3, [pc, #328]	@ (8002184 <HAL_ADC_MspInit+0x274>)
 800203c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800203e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002042:	613b      	str	r3, [r7, #16]
 8002044:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002046:	4b4f      	ldr	r3, [pc, #316]	@ (8002184 <HAL_ADC_MspInit+0x274>)
 8002048:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800204a:	4a4e      	ldr	r2, [pc, #312]	@ (8002184 <HAL_ADC_MspInit+0x274>)
 800204c:	f043 0301 	orr.w	r3, r3, #1
 8002050:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002052:	4b4c      	ldr	r3, [pc, #304]	@ (8002184 <HAL_ADC_MspInit+0x274>)
 8002054:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	60fb      	str	r3, [r7, #12]
 800205c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800205e:	2302      	movs	r3, #2
 8002060:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002062:	2303      	movs	r3, #3
 8002064:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002066:	2300      	movs	r3, #0
 8002068:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800206a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800206e:	4619      	mov	r1, r3
 8002070:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002074:	f003 f824 	bl	80050c0 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel3;
 8002078:	4b46      	ldr	r3, [pc, #280]	@ (8002194 <HAL_ADC_MspInit+0x284>)
 800207a:	4a47      	ldr	r2, [pc, #284]	@ (8002198 <HAL_ADC_MspInit+0x288>)
 800207c:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 800207e:	4b45      	ldr	r3, [pc, #276]	@ (8002194 <HAL_ADC_MspInit+0x284>)
 8002080:	2224      	movs	r2, #36	@ 0x24
 8002082:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002084:	4b43      	ldr	r3, [pc, #268]	@ (8002194 <HAL_ADC_MspInit+0x284>)
 8002086:	2200      	movs	r2, #0
 8002088:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800208a:	4b42      	ldr	r3, [pc, #264]	@ (8002194 <HAL_ADC_MspInit+0x284>)
 800208c:	2200      	movs	r2, #0
 800208e:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8002090:	4b40      	ldr	r3, [pc, #256]	@ (8002194 <HAL_ADC_MspInit+0x284>)
 8002092:	2280      	movs	r2, #128	@ 0x80
 8002094:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002096:	4b3f      	ldr	r3, [pc, #252]	@ (8002194 <HAL_ADC_MspInit+0x284>)
 8002098:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800209c:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800209e:	4b3d      	ldr	r3, [pc, #244]	@ (8002194 <HAL_ADC_MspInit+0x284>)
 80020a0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80020a4:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80020a6:	4b3b      	ldr	r3, [pc, #236]	@ (8002194 <HAL_ADC_MspInit+0x284>)
 80020a8:	2220      	movs	r2, #32
 80020aa:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80020ac:	4b39      	ldr	r3, [pc, #228]	@ (8002194 <HAL_ADC_MspInit+0x284>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80020b2:	4838      	ldr	r0, [pc, #224]	@ (8002194 <HAL_ADC_MspInit+0x284>)
 80020b4:	f002 fd92 	bl	8004bdc <HAL_DMA_Init>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <HAL_ADC_MspInit+0x1b2>
      Error_Handler();
 80020be:	f7ff feef 	bl	8001ea0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a33      	ldr	r2, [pc, #204]	@ (8002194 <HAL_ADC_MspInit+0x284>)
 80020c6:	655a      	str	r2, [r3, #84]	@ 0x54
 80020c8:	4a32      	ldr	r2, [pc, #200]	@ (8002194 <HAL_ADC_MspInit+0x284>)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80020ce:	2200      	movs	r2, #0
 80020d0:	2100      	movs	r1, #0
 80020d2:	2012      	movs	r0, #18
 80020d4:	f002 fd4d 	bl	8004b72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80020d8:	2012      	movs	r0, #18
 80020da:	f002 fd64 	bl	8004ba6 <HAL_NVIC_EnableIRQ>
}
 80020de:	e04b      	b.n	8002178 <HAL_ADC_MspInit+0x268>
  else if(hadc->Instance==ADC3)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a2d      	ldr	r2, [pc, #180]	@ (800219c <HAL_ADC_MspInit+0x28c>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d146      	bne.n	8002178 <HAL_ADC_MspInit+0x268>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80020ea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80020ee:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80020f0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80020f4:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020f6:	f107 0318 	add.w	r3, r7, #24
 80020fa:	4618      	mov	r0, r3
 80020fc:	f005 fd7c 	bl	8007bf8 <HAL_RCCEx_PeriphCLKConfig>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <HAL_ADC_MspInit+0x1fa>
      Error_Handler();
 8002106:	f7ff fecb 	bl	8001ea0 <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 800210a:	4b1e      	ldr	r3, [pc, #120]	@ (8002184 <HAL_ADC_MspInit+0x274>)
 800210c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800210e:	4a1d      	ldr	r2, [pc, #116]	@ (8002184 <HAL_ADC_MspInit+0x274>)
 8002110:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002114:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002116:	4b1b      	ldr	r3, [pc, #108]	@ (8002184 <HAL_ADC_MspInit+0x274>)
 8002118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800211a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800211e:	60bb      	str	r3, [r7, #8]
 8002120:	68bb      	ldr	r3, [r7, #8]
    hdma_adc3.Instance = DMA1_Channel4;
 8002122:	4b1f      	ldr	r3, [pc, #124]	@ (80021a0 <HAL_ADC_MspInit+0x290>)
 8002124:	4a1f      	ldr	r2, [pc, #124]	@ (80021a4 <HAL_ADC_MspInit+0x294>)
 8002126:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002128:	4b1d      	ldr	r3, [pc, #116]	@ (80021a0 <HAL_ADC_MspInit+0x290>)
 800212a:	2225      	movs	r2, #37	@ 0x25
 800212c:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800212e:	4b1c      	ldr	r3, [pc, #112]	@ (80021a0 <HAL_ADC_MspInit+0x290>)
 8002130:	2200      	movs	r2, #0
 8002132:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002134:	4b1a      	ldr	r3, [pc, #104]	@ (80021a0 <HAL_ADC_MspInit+0x290>)
 8002136:	2200      	movs	r2, #0
 8002138:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800213a:	4b19      	ldr	r3, [pc, #100]	@ (80021a0 <HAL_ADC_MspInit+0x290>)
 800213c:	2280      	movs	r2, #128	@ 0x80
 800213e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002140:	4b17      	ldr	r3, [pc, #92]	@ (80021a0 <HAL_ADC_MspInit+0x290>)
 8002142:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002146:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002148:	4b15      	ldr	r3, [pc, #84]	@ (80021a0 <HAL_ADC_MspInit+0x290>)
 800214a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800214e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8002150:	4b13      	ldr	r3, [pc, #76]	@ (80021a0 <HAL_ADC_MspInit+0x290>)
 8002152:	2200      	movs	r2, #0
 8002154:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8002156:	4b12      	ldr	r3, [pc, #72]	@ (80021a0 <HAL_ADC_MspInit+0x290>)
 8002158:	2200      	movs	r2, #0
 800215a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800215c:	4810      	ldr	r0, [pc, #64]	@ (80021a0 <HAL_ADC_MspInit+0x290>)
 800215e:	f002 fd3d 	bl	8004bdc <HAL_DMA_Init>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <HAL_ADC_MspInit+0x25c>
      Error_Handler();
 8002168:	f7ff fe9a 	bl	8001ea0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a0c      	ldr	r2, [pc, #48]	@ (80021a0 <HAL_ADC_MspInit+0x290>)
 8002170:	655a      	str	r2, [r3, #84]	@ 0x54
 8002172:	4a0b      	ldr	r2, [pc, #44]	@ (80021a0 <HAL_ADC_MspInit+0x290>)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8002178:	bf00      	nop
 800217a:	3780      	adds	r7, #128	@ 0x80
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	20001b5c 	.word	0x20001b5c
 8002184:	40021000 	.word	0x40021000
 8002188:	200004ac 	.word	0x200004ac
 800218c:	4002001c 	.word	0x4002001c
 8002190:	50000100 	.word	0x50000100
 8002194:	2000050c 	.word	0x2000050c
 8002198:	40020030 	.word	0x40020030
 800219c:	50000400 	.word	0x50000400
 80021a0:	2000056c 	.word	0x2000056c
 80021a4:	40020044 	.word	0x40020044

080021a8 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b08a      	sub	sp, #40	@ 0x28
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b0:	f107 0314 	add.w	r3, r7, #20
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	605a      	str	r2, [r3, #4]
 80021ba:	609a      	str	r2, [r3, #8]
 80021bc:	60da      	str	r2, [r3, #12]
 80021be:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a1f      	ldr	r2, [pc, #124]	@ (8002244 <HAL_OPAMP_MspInit+0x9c>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d119      	bne.n	80021fe <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ca:	4b1f      	ldr	r3, [pc, #124]	@ (8002248 <HAL_OPAMP_MspInit+0xa0>)
 80021cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ce:	4a1e      	ldr	r2, [pc, #120]	@ (8002248 <HAL_OPAMP_MspInit+0xa0>)
 80021d0:	f043 0301 	orr.w	r3, r3, #1
 80021d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021d6:	4b1c      	ldr	r3, [pc, #112]	@ (8002248 <HAL_OPAMP_MspInit+0xa0>)
 80021d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	613b      	str	r3, [r7, #16]
 80021e0:	693b      	ldr	r3, [r7, #16]
    /**OPAMP1 GPIO Configuration
    PA1     ------> OPAMP1_VINP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80021e2:	2302      	movs	r3, #2
 80021e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021e6:	2303      	movs	r3, #3
 80021e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ea:	2300      	movs	r3, #0
 80021ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ee:	f107 0314 	add.w	r3, r7, #20
 80021f2:	4619      	mov	r1, r3
 80021f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021f8:	f002 ff62 	bl	80050c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }

}
 80021fc:	e01d      	b.n	800223a <HAL_OPAMP_MspInit+0x92>
  else if(hopamp->Instance==OPAMP3)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a12      	ldr	r2, [pc, #72]	@ (800224c <HAL_OPAMP_MspInit+0xa4>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d118      	bne.n	800223a <HAL_OPAMP_MspInit+0x92>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002208:	4b0f      	ldr	r3, [pc, #60]	@ (8002248 <HAL_OPAMP_MspInit+0xa0>)
 800220a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800220c:	4a0e      	ldr	r2, [pc, #56]	@ (8002248 <HAL_OPAMP_MspInit+0xa0>)
 800220e:	f043 0301 	orr.w	r3, r3, #1
 8002212:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002214:	4b0c      	ldr	r3, [pc, #48]	@ (8002248 <HAL_OPAMP_MspInit+0xa0>)
 8002216:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002220:	2302      	movs	r3, #2
 8002222:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002224:	2303      	movs	r3, #3
 8002226:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002228:	2300      	movs	r3, #0
 800222a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800222c:	f107 0314 	add.w	r3, r7, #20
 8002230:	4619      	mov	r1, r3
 8002232:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002236:	f002 ff43 	bl	80050c0 <HAL_GPIO_Init>
}
 800223a:	bf00      	nop
 800223c:	3728      	adds	r7, #40	@ 0x28
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40010300 	.word	0x40010300
 8002248:	40021000 	.word	0x40021000
 800224c:	40010308 	.word	0x40010308

08002250 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b08e      	sub	sp, #56	@ 0x38
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002258:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]
 8002260:	605a      	str	r2, [r3, #4]
 8002262:	609a      	str	r2, [r3, #8]
 8002264:	60da      	str	r2, [r3, #12]
 8002266:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a6b      	ldr	r2, [pc, #428]	@ (800241c <HAL_TIM_Base_MspInit+0x1cc>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d114      	bne.n	800229c <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002272:	4b6b      	ldr	r3, [pc, #428]	@ (8002420 <HAL_TIM_Base_MspInit+0x1d0>)
 8002274:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002276:	4a6a      	ldr	r2, [pc, #424]	@ (8002420 <HAL_TIM_Base_MspInit+0x1d0>)
 8002278:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800227c:	6613      	str	r3, [r2, #96]	@ 0x60
 800227e:	4b68      	ldr	r3, [pc, #416]	@ (8002420 <HAL_TIM_Base_MspInit+0x1d0>)
 8002280:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002282:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002286:	623b      	str	r3, [r7, #32]
 8002288:	6a3b      	ldr	r3, [r7, #32]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800228a:	2200      	movs	r2, #0
 800228c:	2100      	movs	r1, #0
 800228e:	2018      	movs	r0, #24
 8002290:	f002 fc6f 	bl	8004b72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002294:	2018      	movs	r0, #24
 8002296:	f002 fc86 	bl	8004ba6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800229a:	e0bb      	b.n	8002414 <HAL_TIM_Base_MspInit+0x1c4>
  else if(htim_base->Instance==TIM2)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022a4:	d129      	bne.n	80022fa <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022a6:	4b5e      	ldr	r3, [pc, #376]	@ (8002420 <HAL_TIM_Base_MspInit+0x1d0>)
 80022a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022aa:	4a5d      	ldr	r2, [pc, #372]	@ (8002420 <HAL_TIM_Base_MspInit+0x1d0>)
 80022ac:	f043 0301 	orr.w	r3, r3, #1
 80022b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80022b2:	4b5b      	ldr	r3, [pc, #364]	@ (8002420 <HAL_TIM_Base_MspInit+0x1d0>)
 80022b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	61fb      	str	r3, [r7, #28]
 80022bc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022be:	4b58      	ldr	r3, [pc, #352]	@ (8002420 <HAL_TIM_Base_MspInit+0x1d0>)
 80022c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022c2:	4a57      	ldr	r2, [pc, #348]	@ (8002420 <HAL_TIM_Base_MspInit+0x1d0>)
 80022c4:	f043 0301 	orr.w	r3, r3, #1
 80022c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022ca:	4b55      	ldr	r3, [pc, #340]	@ (8002420 <HAL_TIM_Base_MspInit+0x1d0>)
 80022cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	61bb      	str	r3, [r7, #24]
 80022d4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80022d6:	2301      	movs	r3, #1
 80022d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022da:	2302      	movs	r3, #2
 80022dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022de:	2300      	movs	r3, #0
 80022e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e2:	2300      	movs	r3, #0
 80022e4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM2;
 80022e6:	230e      	movs	r3, #14
 80022e8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022ee:	4619      	mov	r1, r3
 80022f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022f4:	f002 fee4 	bl	80050c0 <HAL_GPIO_Init>
}
 80022f8:	e08c      	b.n	8002414 <HAL_TIM_Base_MspInit+0x1c4>
  else if(htim_base->Instance==TIM3)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a49      	ldr	r2, [pc, #292]	@ (8002424 <HAL_TIM_Base_MspInit+0x1d4>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d137      	bne.n	8002374 <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002304:	4b46      	ldr	r3, [pc, #280]	@ (8002420 <HAL_TIM_Base_MspInit+0x1d0>)
 8002306:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002308:	4a45      	ldr	r2, [pc, #276]	@ (8002420 <HAL_TIM_Base_MspInit+0x1d0>)
 800230a:	f043 0302 	orr.w	r3, r3, #2
 800230e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002310:	4b43      	ldr	r3, [pc, #268]	@ (8002420 <HAL_TIM_Base_MspInit+0x1d0>)
 8002312:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	617b      	str	r3, [r7, #20]
 800231a:	697b      	ldr	r3, [r7, #20]
    hdma_tim3_ch4.Instance = DMA1_Channel1;
 800231c:	4b42      	ldr	r3, [pc, #264]	@ (8002428 <HAL_TIM_Base_MspInit+0x1d8>)
 800231e:	4a43      	ldr	r2, [pc, #268]	@ (800242c <HAL_TIM_Base_MspInit+0x1dc>)
 8002320:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4.Init.Request = DMA_REQUEST_TIM3_CH4;
 8002322:	4b41      	ldr	r3, [pc, #260]	@ (8002428 <HAL_TIM_Base_MspInit+0x1d8>)
 8002324:	2240      	movs	r2, #64	@ 0x40
 8002326:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002328:	4b3f      	ldr	r3, [pc, #252]	@ (8002428 <HAL_TIM_Base_MspInit+0x1d8>)
 800232a:	2210      	movs	r2, #16
 800232c:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 800232e:	4b3e      	ldr	r3, [pc, #248]	@ (8002428 <HAL_TIM_Base_MspInit+0x1d8>)
 8002330:	2200      	movs	r2, #0
 8002332:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8002334:	4b3c      	ldr	r3, [pc, #240]	@ (8002428 <HAL_TIM_Base_MspInit+0x1d8>)
 8002336:	2280      	movs	r2, #128	@ 0x80
 8002338:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800233a:	4b3b      	ldr	r3, [pc, #236]	@ (8002428 <HAL_TIM_Base_MspInit+0x1d8>)
 800233c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002340:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002342:	4b39      	ldr	r3, [pc, #228]	@ (8002428 <HAL_TIM_Base_MspInit+0x1d8>)
 8002344:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002348:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4.Init.Mode = DMA_NORMAL;
 800234a:	4b37      	ldr	r3, [pc, #220]	@ (8002428 <HAL_TIM_Base_MspInit+0x1d8>)
 800234c:	2200      	movs	r2, #0
 800234e:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8002350:	4b35      	ldr	r3, [pc, #212]	@ (8002428 <HAL_TIM_Base_MspInit+0x1d8>)
 8002352:	2200      	movs	r2, #0
 8002354:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch4) != HAL_OK)
 8002356:	4834      	ldr	r0, [pc, #208]	@ (8002428 <HAL_TIM_Base_MspInit+0x1d8>)
 8002358:	f002 fc40 	bl	8004bdc <HAL_DMA_Init>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <HAL_TIM_Base_MspInit+0x116>
      Error_Handler();
 8002362:	f7ff fd9d 	bl	8001ea0 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a2f      	ldr	r2, [pc, #188]	@ (8002428 <HAL_TIM_Base_MspInit+0x1d8>)
 800236a:	631a      	str	r2, [r3, #48]	@ 0x30
 800236c:	4a2e      	ldr	r2, [pc, #184]	@ (8002428 <HAL_TIM_Base_MspInit+0x1d8>)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8002372:	e04f      	b.n	8002414 <HAL_TIM_Base_MspInit+0x1c4>
  else if(htim_base->Instance==TIM4)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a2d      	ldr	r2, [pc, #180]	@ (8002430 <HAL_TIM_Base_MspInit+0x1e0>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d114      	bne.n	80023a8 <HAL_TIM_Base_MspInit+0x158>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800237e:	4b28      	ldr	r3, [pc, #160]	@ (8002420 <HAL_TIM_Base_MspInit+0x1d0>)
 8002380:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002382:	4a27      	ldr	r2, [pc, #156]	@ (8002420 <HAL_TIM_Base_MspInit+0x1d0>)
 8002384:	f043 0304 	orr.w	r3, r3, #4
 8002388:	6593      	str	r3, [r2, #88]	@ 0x58
 800238a:	4b25      	ldr	r3, [pc, #148]	@ (8002420 <HAL_TIM_Base_MspInit+0x1d0>)
 800238c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800238e:	f003 0304 	and.w	r3, r3, #4
 8002392:	613b      	str	r3, [r7, #16]
 8002394:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002396:	2200      	movs	r2, #0
 8002398:	2100      	movs	r1, #0
 800239a:	201e      	movs	r0, #30
 800239c:	f002 fbe9 	bl	8004b72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80023a0:	201e      	movs	r0, #30
 80023a2:	f002 fc00 	bl	8004ba6 <HAL_NVIC_EnableIRQ>
}
 80023a6:	e035      	b.n	8002414 <HAL_TIM_Base_MspInit+0x1c4>
  else if(htim_base->Instance==TIM15)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a21      	ldr	r2, [pc, #132]	@ (8002434 <HAL_TIM_Base_MspInit+0x1e4>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d130      	bne.n	8002414 <HAL_TIM_Base_MspInit+0x1c4>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80023b2:	4b1b      	ldr	r3, [pc, #108]	@ (8002420 <HAL_TIM_Base_MspInit+0x1d0>)
 80023b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023b6:	4a1a      	ldr	r2, [pc, #104]	@ (8002420 <HAL_TIM_Base_MspInit+0x1d0>)
 80023b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80023be:	4b18      	ldr	r3, [pc, #96]	@ (8002420 <HAL_TIM_Base_MspInit+0x1d0>)
 80023c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023c6:	60fb      	str	r3, [r7, #12]
 80023c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ca:	4b15      	ldr	r3, [pc, #84]	@ (8002420 <HAL_TIM_Base_MspInit+0x1d0>)
 80023cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023ce:	4a14      	ldr	r2, [pc, #80]	@ (8002420 <HAL_TIM_Base_MspInit+0x1d0>)
 80023d0:	f043 0301 	orr.w	r3, r3, #1
 80023d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023d6:	4b12      	ldr	r3, [pc, #72]	@ (8002420 <HAL_TIM_Base_MspInit+0x1d0>)
 80023d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	60bb      	str	r3, [r7, #8]
 80023e0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80023e2:	2304      	movs	r3, #4
 80023e4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e6:	2302      	movs	r3, #2
 80023e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ea:	2300      	movs	r3, #0
 80023ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ee:	2300      	movs	r3, #0
 80023f0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 80023f2:	2309      	movs	r3, #9
 80023f4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023fa:	4619      	mov	r1, r3
 80023fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002400:	f002 fe5e 	bl	80050c0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002404:	2200      	movs	r2, #0
 8002406:	2100      	movs	r1, #0
 8002408:	2018      	movs	r0, #24
 800240a:	f002 fbb2 	bl	8004b72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800240e:	2018      	movs	r0, #24
 8002410:	f002 fbc9 	bl	8004ba6 <HAL_NVIC_EnableIRQ>
}
 8002414:	bf00      	nop
 8002416:	3738      	adds	r7, #56	@ 0x38
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	40012c00 	.word	0x40012c00
 8002420:	40021000 	.word	0x40021000
 8002424:	40000400 	.word	0x40000400
 8002428:	200007c0 	.word	0x200007c0
 800242c:	40020008 	.word	0x40020008
 8002430:	40000800 	.word	0x40000800
 8002434:	40014000 	.word	0x40014000

08002438 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b08a      	sub	sp, #40	@ 0x28
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002440:	f107 0314 	add.w	r3, r7, #20
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	605a      	str	r2, [r3, #4]
 800244a:	609a      	str	r2, [r3, #8]
 800244c:	60da      	str	r2, [r3, #12]
 800244e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a33      	ldr	r2, [pc, #204]	@ (8002524 <HAL_TIM_MspPostInit+0xec>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d11c      	bne.n	8002494 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800245a:	4b33      	ldr	r3, [pc, #204]	@ (8002528 <HAL_TIM_MspPostInit+0xf0>)
 800245c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800245e:	4a32      	ldr	r2, [pc, #200]	@ (8002528 <HAL_TIM_MspPostInit+0xf0>)
 8002460:	f043 0304 	orr.w	r3, r3, #4
 8002464:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002466:	4b30      	ldr	r3, [pc, #192]	@ (8002528 <HAL_TIM_MspPostInit+0xf0>)
 8002468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800246a:	f003 0304 	and.w	r3, r3, #4
 800246e:	613b      	str	r3, [r7, #16]
 8002470:	693b      	ldr	r3, [r7, #16]
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002472:	230f      	movs	r3, #15
 8002474:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002476:	2302      	movs	r3, #2
 8002478:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247a:	2300      	movs	r3, #0
 800247c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800247e:	2303      	movs	r3, #3
 8002480:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002482:	2302      	movs	r3, #2
 8002484:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002486:	f107 0314 	add.w	r3, r7, #20
 800248a:	4619      	mov	r1, r3
 800248c:	4827      	ldr	r0, [pc, #156]	@ (800252c <HAL_TIM_MspPostInit+0xf4>)
 800248e:	f002 fe17 	bl	80050c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002492:	e043      	b.n	800251c <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM2)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800249c:	d11d      	bne.n	80024da <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800249e:	4b22      	ldr	r3, [pc, #136]	@ (8002528 <HAL_TIM_MspPostInit+0xf0>)
 80024a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024a2:	4a21      	ldr	r2, [pc, #132]	@ (8002528 <HAL_TIM_MspPostInit+0xf0>)
 80024a4:	f043 0302 	orr.w	r3, r3, #2
 80024a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024aa:	4b1f      	ldr	r3, [pc, #124]	@ (8002528 <HAL_TIM_MspPostInit+0xf0>)
 80024ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	60fb      	str	r3, [r7, #12]
 80024b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80024b6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80024ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024bc:	2302      	movs	r3, #2
 80024be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c0:	2300      	movs	r3, #0
 80024c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c4:	2300      	movs	r3, #0
 80024c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80024c8:	2301      	movs	r3, #1
 80024ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024cc:	f107 0314 	add.w	r3, r7, #20
 80024d0:	4619      	mov	r1, r3
 80024d2:	4817      	ldr	r0, [pc, #92]	@ (8002530 <HAL_TIM_MspPostInit+0xf8>)
 80024d4:	f002 fdf4 	bl	80050c0 <HAL_GPIO_Init>
}
 80024d8:	e020      	b.n	800251c <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a15      	ldr	r2, [pc, #84]	@ (8002534 <HAL_TIM_MspPostInit+0xfc>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d11b      	bne.n	800251c <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024e4:	4b10      	ldr	r3, [pc, #64]	@ (8002528 <HAL_TIM_MspPostInit+0xf0>)
 80024e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024e8:	4a0f      	ldr	r2, [pc, #60]	@ (8002528 <HAL_TIM_MspPostInit+0xf0>)
 80024ea:	f043 0302 	orr.w	r3, r3, #2
 80024ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024f0:	4b0d      	ldr	r3, [pc, #52]	@ (8002528 <HAL_TIM_MspPostInit+0xf0>)
 80024f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	60bb      	str	r3, [r7, #8]
 80024fa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80024fc:	2380      	movs	r3, #128	@ 0x80
 80024fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002500:	2302      	movs	r3, #2
 8002502:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002504:	2300      	movs	r3, #0
 8002506:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002508:	2300      	movs	r3, #0
 800250a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM3;
 800250c:	230a      	movs	r3, #10
 800250e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002510:	f107 0314 	add.w	r3, r7, #20
 8002514:	4619      	mov	r1, r3
 8002516:	4806      	ldr	r0, [pc, #24]	@ (8002530 <HAL_TIM_MspPostInit+0xf8>)
 8002518:	f002 fdd2 	bl	80050c0 <HAL_GPIO_Init>
}
 800251c:	bf00      	nop
 800251e:	3728      	adds	r7, #40	@ 0x28
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	40012c00 	.word	0x40012c00
 8002528:	40021000 	.word	0x40021000
 800252c:	48000800 	.word	0x48000800
 8002530:	48000400 	.word	0x48000400
 8002534:	40000400 	.word	0x40000400

08002538 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800253c:	bf00      	nop
 800253e:	e7fd      	b.n	800253c <NMI_Handler+0x4>

08002540 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002544:	bf00      	nop
 8002546:	e7fd      	b.n	8002544 <HardFault_Handler+0x4>

08002548 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800254c:	bf00      	nop
 800254e:	e7fd      	b.n	800254c <MemManage_Handler+0x4>

08002550 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002554:	bf00      	nop
 8002556:	e7fd      	b.n	8002554 <BusFault_Handler+0x4>

08002558 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800255c:	bf00      	nop
 800255e:	e7fd      	b.n	800255c <UsageFault_Handler+0x4>

08002560 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002564:	bf00      	nop
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr

0800256e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800256e:	b480      	push	{r7}
 8002570:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002572:	bf00      	nop
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002580:	bf00      	nop
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr

0800258a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800258e:	f000 fb67 	bl	8002c60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002592:	bf00      	nop
 8002594:	bd80      	pop	{r7, pc}
	...

08002598 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4);
 800259c:	4802      	ldr	r0, [pc, #8]	@ (80025a8 <DMA1_Channel1_IRQHandler+0x10>)
 800259e:	f002 fc40 	bl	8004e22 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80025a2:	bf00      	nop
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	200007c0 	.word	0x200007c0

080025ac <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80025b0:	4802      	ldr	r0, [pc, #8]	@ (80025bc <DMA1_Channel2_IRQHandler+0x10>)
 80025b2:	f002 fc36 	bl	8004e22 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80025b6:	bf00      	nop
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	200004ac 	.word	0x200004ac

080025c0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80025c4:	4802      	ldr	r0, [pc, #8]	@ (80025d0 <DMA1_Channel3_IRQHandler+0x10>)
 80025c6:	f002 fc2c 	bl	8004e22 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80025ca:	bf00      	nop
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	2000050c 	.word	0x2000050c

080025d4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80025d8:	4802      	ldr	r0, [pc, #8]	@ (80025e4 <DMA1_Channel4_IRQHandler+0x10>)
 80025da:	f002 fc22 	bl	8004e22 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80025de:	bf00      	nop
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	2000056c 	.word	0x2000056c

080025e8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80025ec:	4803      	ldr	r0, [pc, #12]	@ (80025fc <ADC1_2_IRQHandler+0x14>)
 80025ee:	f001 f8a7 	bl	8003740 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80025f2:	4803      	ldr	r0, [pc, #12]	@ (8002600 <ADC1_2_IRQHandler+0x18>)
 80025f4:	f001 f8a4 	bl	8003740 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80025f8:	bf00      	nop
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	20000368 	.word	0x20000368
 8002600:	200003d4 	.word	0x200003d4

08002604 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002608:	4802      	ldr	r0, [pc, #8]	@ (8002614 <USB_LP_IRQHandler+0x10>)
 800260a:	f003 f908 	bl	800581e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800260e:	bf00      	nop
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	20003bf8 	.word	0x20003bf8

08002618 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	BOOT0_BTN_COUNT=BOOT0_BTN_COUNT+1;
 800261c:	4b05      	ldr	r3, [pc, #20]	@ (8002634 <EXTI9_5_IRQHandler+0x1c>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	3301      	adds	r3, #1
 8002622:	4a04      	ldr	r2, [pc, #16]	@ (8002634 <EXTI9_5_IRQHandler+0x1c>)
 8002624:	6013      	str	r3, [r2, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002626:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800262a:	f002 fee3 	bl	80053f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800262e:	bf00      	nop
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	20001b58 	.word	0x20001b58

08002638 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800263c:	4803      	ldr	r0, [pc, #12]	@ (800264c <TIM1_BRK_TIM15_IRQHandler+0x14>)
 800263e:	f006 fd2f 	bl	80090a0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8002642:	4803      	ldr	r0, [pc, #12]	@ (8002650 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 8002644:	f006 fd2c 	bl	80090a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8002648:	bf00      	nop
 800264a:	bd80      	pop	{r7, pc}
 800264c:	20000644 	.word	0x20000644
 8002650:	20000774 	.word	0x20000774

08002654 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	USER_CounterTicks= TIM2->CNT;
 8002658:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800265c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800265e:	4a05      	ldr	r2, [pc, #20]	@ (8002674 <TIM4_IRQHandler+0x20>)
 8002660:	6013      	str	r3, [r2, #0]
  	TIM2->CNT=0;
 8002662:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002666:	2200      	movs	r2, #0
 8002668:	625a      	str	r2, [r3, #36]	@ 0x24
//	  sprintf(&CDC_BUFFER,"FRRQ: %d \r\n",USER_CounterTicks);
//	  CDC_Transmit_FS(&CDC_BUFFER, 50);

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800266a:	4803      	ldr	r0, [pc, #12]	@ (8002678 <TIM4_IRQHandler+0x24>)
 800266c:	f006 fd18 	bl	80090a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */


  /* USER CODE END TIM4_IRQn 1 */
}
 8002670:	bf00      	nop
 8002672:	bd80      	pop	{r7, pc}
 8002674:	2000082c 	.word	0x2000082c
 8002678:	20000728 	.word	0x20000728

0800267c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  return 1;
 8002680:	2301      	movs	r3, #1
}
 8002682:	4618      	mov	r0, r3
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <_kill>:

int _kill(int pid, int sig)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002696:	f00d ffed 	bl	8010674 <__errno>
 800269a:	4603      	mov	r3, r0
 800269c:	2216      	movs	r2, #22
 800269e:	601a      	str	r2, [r3, #0]
  return -1;
 80026a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3708      	adds	r7, #8
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <_exit>:

void _exit (int status)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80026b4:	f04f 31ff 	mov.w	r1, #4294967295
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f7ff ffe7 	bl	800268c <_kill>
  while (1) {}    /* Make sure we hang here */
 80026be:	bf00      	nop
 80026c0:	e7fd      	b.n	80026be <_exit+0x12>

080026c2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b086      	sub	sp, #24
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	60f8      	str	r0, [r7, #12]
 80026ca:	60b9      	str	r1, [r7, #8]
 80026cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ce:	2300      	movs	r3, #0
 80026d0:	617b      	str	r3, [r7, #20]
 80026d2:	e00a      	b.n	80026ea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80026d4:	f3af 8000 	nop.w
 80026d8:	4601      	mov	r1, r0
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	1c5a      	adds	r2, r3, #1
 80026de:	60ba      	str	r2, [r7, #8]
 80026e0:	b2ca      	uxtb	r2, r1
 80026e2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	3301      	adds	r3, #1
 80026e8:	617b      	str	r3, [r7, #20]
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	dbf0      	blt.n	80026d4 <_read+0x12>
  }

  return len;
 80026f2:	687b      	ldr	r3, [r7, #4]
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3718      	adds	r7, #24
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002708:	2300      	movs	r3, #0
 800270a:	617b      	str	r3, [r7, #20]
 800270c:	e009      	b.n	8002722 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	1c5a      	adds	r2, r3, #1
 8002712:	60ba      	str	r2, [r7, #8]
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	4618      	mov	r0, r3
 8002718:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	3301      	adds	r3, #1
 8002720:	617b      	str	r3, [r7, #20]
 8002722:	697a      	ldr	r2, [r7, #20]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	429a      	cmp	r2, r3
 8002728:	dbf1      	blt.n	800270e <_write+0x12>
  }
  return len;
 800272a:	687b      	ldr	r3, [r7, #4]
}
 800272c:	4618      	mov	r0, r3
 800272e:	3718      	adds	r7, #24
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <_close>:

int _close(int file)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800273c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002740:	4618      	mov	r0, r3
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800275c:	605a      	str	r2, [r3, #4]
  return 0;
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <_isatty>:

int _isatty(int file)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002774:	2301      	movs	r3, #1
}
 8002776:	4618      	mov	r0, r3
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002782:	b480      	push	{r7}
 8002784:	b085      	sub	sp, #20
 8002786:	af00      	add	r7, sp, #0
 8002788:	60f8      	str	r0, [r7, #12]
 800278a:	60b9      	str	r1, [r7, #8]
 800278c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	3714      	adds	r7, #20
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b086      	sub	sp, #24
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027a4:	4a14      	ldr	r2, [pc, #80]	@ (80027f8 <_sbrk+0x5c>)
 80027a6:	4b15      	ldr	r3, [pc, #84]	@ (80027fc <_sbrk+0x60>)
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027b0:	4b13      	ldr	r3, [pc, #76]	@ (8002800 <_sbrk+0x64>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d102      	bne.n	80027be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027b8:	4b11      	ldr	r3, [pc, #68]	@ (8002800 <_sbrk+0x64>)
 80027ba:	4a12      	ldr	r2, [pc, #72]	@ (8002804 <_sbrk+0x68>)
 80027bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027be:	4b10      	ldr	r3, [pc, #64]	@ (8002800 <_sbrk+0x64>)
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4413      	add	r3, r2
 80027c6:	693a      	ldr	r2, [r7, #16]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d207      	bcs.n	80027dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027cc:	f00d ff52 	bl	8010674 <__errno>
 80027d0:	4603      	mov	r3, r0
 80027d2:	220c      	movs	r2, #12
 80027d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027d6:	f04f 33ff 	mov.w	r3, #4294967295
 80027da:	e009      	b.n	80027f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027dc:	4b08      	ldr	r3, [pc, #32]	@ (8002800 <_sbrk+0x64>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027e2:	4b07      	ldr	r3, [pc, #28]	@ (8002800 <_sbrk+0x64>)
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4413      	add	r3, r2
 80027ea:	4a05      	ldr	r2, [pc, #20]	@ (8002800 <_sbrk+0x64>)
 80027ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027ee:	68fb      	ldr	r3, [r7, #12]
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3718      	adds	r7, #24
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	20020000 	.word	0x20020000
 80027fc:	00000400 	.word	0x00000400
 8002800:	20001b60 	.word	0x20001b60
 8002804:	20004240 	.word	0x20004240

08002808 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800280c:	4b06      	ldr	r3, [pc, #24]	@ (8002828 <SystemInit+0x20>)
 800280e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002812:	4a05      	ldr	r2, [pc, #20]	@ (8002828 <SystemInit+0x20>)
 8002814:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002818:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800281c:	bf00      	nop
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	e000ed00 	.word	0xe000ed00

0800282c <ws2812_update_force>:

/**
 * @brief  直接更新LED颜色
 */
void ws2812_update_force(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
	// 数据缓冲，每个LED占用24个字节，共10个LED，前100个字节用于复位信号
	static uint16_t ws2812_data[RST_PERIOD_NUM + WS2812_NUM * 24];

	for (uint8_t led_id = 0; led_id < WS2812_NUM; led_id++)
 8002832:	2300      	movs	r3, #0
 8002834:	71fb      	strb	r3, [r7, #7]
 8002836:	e060      	b.n	80028fa <ws2812_update_force+0xce>
	{
		_ws2812_color_current[led_id] = ws2812_color[led_id];
 8002838:	79fa      	ldrb	r2, [r7, #7]
 800283a:	79fb      	ldrb	r3, [r7, #7]
 800283c:	4936      	ldr	r1, [pc, #216]	@ (8002918 <ws2812_update_force+0xec>)
 800283e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002842:	4936      	ldr	r1, [pc, #216]	@ (800291c <ws2812_update_force+0xf0>)
 8002844:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		static uint8_t r, g, b;
		color_to_rgb(_ws2812_color_current[led_id], &r, &g, &b);
 8002848:	79fb      	ldrb	r3, [r7, #7]
 800284a:	4a34      	ldr	r2, [pc, #208]	@ (800291c <ws2812_update_force+0xf0>)
 800284c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002850:	4b33      	ldr	r3, [pc, #204]	@ (8002920 <ws2812_update_force+0xf4>)
 8002852:	4a34      	ldr	r2, [pc, #208]	@ (8002924 <ws2812_update_force+0xf8>)
 8002854:	4934      	ldr	r1, [pc, #208]	@ (8002928 <ws2812_update_force+0xfc>)
 8002856:	f000 f897 	bl	8002988 <color_to_rgb>
		uint16_t *p = ws2812_data + RST_PERIOD_NUM + led_id * 24;
 800285a:	79fa      	ldrb	r2, [r7, #7]
 800285c:	4613      	mov	r3, r2
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	4413      	add	r3, r2
 8002862:	011b      	lsls	r3, r3, #4
 8002864:	33c8      	adds	r3, #200	@ 0xc8
 8002866:	4a31      	ldr	r2, [pc, #196]	@ (800292c <ws2812_update_force+0x100>)
 8002868:	4413      	add	r3, r2
 800286a:	603b      	str	r3, [r7, #0]
		for (uint8_t i = 0; i < 8; i++)
 800286c:	2300      	movs	r3, #0
 800286e:	71bb      	strb	r3, [r7, #6]
 8002870:	e03d      	b.n	80028ee <ws2812_update_force+0xc2>
		{
			p[i] = (r << i) & (0x80) ? CODE_ONE_DUTY : CODE_ZERO_DUTY;
 8002872:	4b2d      	ldr	r3, [pc, #180]	@ (8002928 <ws2812_update_force+0xfc>)
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	461a      	mov	r2, r3
 8002878:	79bb      	ldrb	r3, [r7, #6]
 800287a:	fa02 f303 	lsl.w	r3, r2, r3
 800287e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <ws2812_update_force+0x5e>
 8002886:	2164      	movs	r1, #100	@ 0x64
 8002888:	e000      	b.n	800288c <ws2812_update_force+0x60>
 800288a:	2132      	movs	r1, #50	@ 0x32
 800288c:	79bb      	ldrb	r3, [r7, #6]
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	683a      	ldr	r2, [r7, #0]
 8002892:	4413      	add	r3, r2
 8002894:	460a      	mov	r2, r1
 8002896:	801a      	strh	r2, [r3, #0]
			p[i + 8] = (g << i) & (0x80) ? CODE_ONE_DUTY : CODE_ZERO_DUTY;
 8002898:	4b22      	ldr	r3, [pc, #136]	@ (8002924 <ws2812_update_force+0xf8>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	461a      	mov	r2, r3
 800289e:	79bb      	ldrb	r3, [r7, #6]
 80028a0:	fa02 f303 	lsl.w	r3, r2, r3
 80028a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <ws2812_update_force+0x84>
 80028ac:	2164      	movs	r1, #100	@ 0x64
 80028ae:	e000      	b.n	80028b2 <ws2812_update_force+0x86>
 80028b0:	2132      	movs	r1, #50	@ 0x32
 80028b2:	79bb      	ldrb	r3, [r7, #6]
 80028b4:	3308      	adds	r3, #8
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	683a      	ldr	r2, [r7, #0]
 80028ba:	4413      	add	r3, r2
 80028bc:	460a      	mov	r2, r1
 80028be:	801a      	strh	r2, [r3, #0]
			p[i + 16] = (b << i) & (0x80) ? CODE_ONE_DUTY : CODE_ZERO_DUTY;
 80028c0:	4b17      	ldr	r3, [pc, #92]	@ (8002920 <ws2812_update_force+0xf4>)
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	461a      	mov	r2, r3
 80028c6:	79bb      	ldrb	r3, [r7, #6]
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d001      	beq.n	80028d8 <ws2812_update_force+0xac>
 80028d4:	2164      	movs	r1, #100	@ 0x64
 80028d6:	e000      	b.n	80028da <ws2812_update_force+0xae>
 80028d8:	2132      	movs	r1, #50	@ 0x32
 80028da:	79bb      	ldrb	r3, [r7, #6]
 80028dc:	3310      	adds	r3, #16
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	4413      	add	r3, r2
 80028e4:	460a      	mov	r2, r1
 80028e6:	801a      	strh	r2, [r3, #0]
		for (uint8_t i = 0; i < 8; i++)
 80028e8:	79bb      	ldrb	r3, [r7, #6]
 80028ea:	3301      	adds	r3, #1
 80028ec:	71bb      	strb	r3, [r7, #6]
 80028ee:	79bb      	ldrb	r3, [r7, #6]
 80028f0:	2b07      	cmp	r3, #7
 80028f2:	d9be      	bls.n	8002872 <ws2812_update_force+0x46>
	for (uint8_t led_id = 0; led_id < WS2812_NUM; led_id++)
 80028f4:	79fb      	ldrb	r3, [r7, #7]
 80028f6:	3301      	adds	r3, #1
 80028f8:	71fb      	strb	r3, [r7, #7]
 80028fa:	79fb      	ldrb	r3, [r7, #7]
 80028fc:	2b31      	cmp	r3, #49	@ 0x31
 80028fe:	d99b      	bls.n	8002838 <ws2812_update_force+0xc>
		}
	}
	HAL_TIM_PWM_Start_DMA(&WS2812TIM, TIM_CHANNEL_4, (uint32_t *)ws2812_data,
 8002900:	f240 5314 	movw	r3, #1300	@ 0x514
 8002904:	4a09      	ldr	r2, [pc, #36]	@ (800292c <ws2812_update_force+0x100>)
 8002906:	210c      	movs	r1, #12
 8002908:	4809      	ldr	r0, [pc, #36]	@ (8002930 <ws2812_update_force+0x104>)
 800290a:	f005 ffeb 	bl	80088e4 <HAL_TIM_PWM_Start_DMA>
						  RST_PERIOD_NUM + WS2812_NUM * 24);
}
 800290e:	bf00      	nop
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	20001b64 	.word	0x20001b64
 800291c:	20001c2c 	.word	0x20001c2c
 8002920:	20001cf6 	.word	0x20001cf6
 8002924:	20001cf5 	.word	0x20001cf5
 8002928:	20001cf4 	.word	0x20001cf4
 800292c:	20001cf8 	.word	0x20001cf8
 8002930:	200006dc 	.word	0x200006dc

08002934 <ws2812_set_24bit>:
 * @brief  设置LED颜色（24bit颜色格式）
 * @param  led_id: LED编号（学习板一共有10个LED，编号范围0-9）
 * @param  color: 24bit颜色
 */
void ws2812_set_24bit(uint8_t led_id, uint32_t color)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	4603      	mov	r3, r0
 800293c:	6039      	str	r1, [r7, #0]
 800293e:	71fb      	strb	r3, [r7, #7]
	ws2812_color[led_id] = color;
 8002940:	79fb      	ldrb	r3, [r7, #7]
 8002942:	4905      	ldr	r1, [pc, #20]	@ (8002958 <ws2812_set_24bit+0x24>)
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800294a:	bf00      	nop
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	20001b64 	.word	0x20001b64

0800295c <rgb_to_color>:
 * @param  g: 绿色亮度（0-255）
 * @param  b: 蓝色亮度（0-255）
 * @retval 24bit颜色
 */
uint32_t rgb_to_color(uint8_t r, uint8_t g, uint8_t b)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	4603      	mov	r3, r0
 8002964:	71fb      	strb	r3, [r7, #7]
 8002966:	460b      	mov	r3, r1
 8002968:	71bb      	strb	r3, [r7, #6]
 800296a:	4613      	mov	r3, r2
 800296c:	717b      	strb	r3, [r7, #5]
	return (r << 16) | (g << 8) | b;
 800296e:	79fb      	ldrb	r3, [r7, #7]
 8002970:	041a      	lsls	r2, r3, #16
 8002972:	79bb      	ldrb	r3, [r7, #6]
 8002974:	021b      	lsls	r3, r3, #8
 8002976:	431a      	orrs	r2, r3
 8002978:	797b      	ldrb	r3, [r7, #5]
 800297a:	4313      	orrs	r3, r2
}
 800297c:	4618      	mov	r0, r3
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <color_to_rgb>:
 * @param  r: 红色亮度（0-255）
 * @param  g: 绿色亮度（0-255）
 * @param  b: 蓝色亮度（0-255）
 */
void color_to_rgb(uint32_t color, uint8_t *r, uint8_t *g, uint8_t *b)
{
 8002988:	b480      	push	{r7}
 800298a:	b085      	sub	sp, #20
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	607a      	str	r2, [r7, #4]
 8002994:	603b      	str	r3, [r7, #0]
	*r = (color >> 16) & 0xFF;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	0c1b      	lsrs	r3, r3, #16
 800299a:	b2da      	uxtb	r2, r3
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	701a      	strb	r2, [r3, #0]
	*g = (color >> 8) & 0xFF;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	0a1b      	lsrs	r3, r3, #8
 80029a4:	b2da      	uxtb	r2, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	701a      	strb	r2, [r3, #0]
	*b = color & 0xFF;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	b2da      	uxtb	r2, r3
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	701a      	strb	r2, [r3, #0]
}
 80029b2:	bf00      	nop
 80029b4:	3714      	adds	r7, #20
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
	...

080029c0 <rainbow_color>:
}

// =============== 以下为额外的效果演示函数 ================

uint32_t rainbow_color(float frequency, int phase, int center, int width)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b08a      	sub	sp, #40	@ 0x28
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	ed87 0a05 	vstr	s0, [r7, #20]
 80029ca:	6138      	str	r0, [r7, #16]
 80029cc:	60f9      	str	r1, [r7, #12]
 80029ce:	60ba      	str	r2, [r7, #8]
	float r = sinf(frequency * phase + 0) * width + center;
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	ee07 3a90 	vmov	s15, r3
 80029d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029da:	edd7 7a05 	vldr	s15, [r7, #20]
 80029de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029e2:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8002ae4 <rainbow_color+0x124>
 80029e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80029ea:	eeb0 0a67 	vmov.f32	s0, s15
 80029ee:	f011 fa09 	bl	8013e04 <sinf>
 80029f2:	eeb0 7a40 	vmov.f32	s14, s0
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	ee07 3a90 	vmov	s15, r3
 80029fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	ee07 3a90 	vmov	s15, r3
 8002a0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a12:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	float g = sinf(frequency * phase + 2) * width + center;
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	ee07 3a90 	vmov	s15, r3
 8002a1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a20:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a28:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8002a2c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002a30:	eeb0 0a67 	vmov.f32	s0, s15
 8002a34:	f011 f9e6 	bl	8013e04 <sinf>
 8002a38:	eeb0 7a40 	vmov.f32	s14, s0
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	ee07 3a90 	vmov	s15, r3
 8002a42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	ee07 3a90 	vmov	s15, r3
 8002a50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a58:	edc7 7a08 	vstr	s15, [r7, #32]
	float b = sinf(frequency * phase + 4) * width + center;
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	ee07 3a90 	vmov	s15, r3
 8002a62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a66:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a6e:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8002a72:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002a76:	eeb0 0a67 	vmov.f32	s0, s15
 8002a7a:	f011 f9c3 	bl	8013e04 <sinf>
 8002a7e:	eeb0 7a40 	vmov.f32	s14, s0
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	ee07 3a90 	vmov	s15, r3
 8002a88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	ee07 3a90 	vmov	s15, r3
 8002a96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a9e:	edc7 7a07 	vstr	s15, [r7, #28]
	return rgb_to_color((uint8_t)r, (uint8_t)g, (uint8_t)b);
 8002aa2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002aa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002aaa:	edc7 7a01 	vstr	s15, [r7, #4]
 8002aae:	793b      	ldrb	r3, [r7, #4]
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	edd7 7a08 	vldr	s15, [r7, #32]
 8002ab6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002aba:	edc7 7a01 	vstr	s15, [r7, #4]
 8002abe:	793a      	ldrb	r2, [r7, #4]
 8002ac0:	b2d1      	uxtb	r1, r2
 8002ac2:	edd7 7a07 	vldr	s15, [r7, #28]
 8002ac6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002aca:	edc7 7a01 	vstr	s15, [r7, #4]
 8002ace:	793a      	ldrb	r2, [r7, #4]
 8002ad0:	b2d2      	uxtb	r2, r2
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7ff ff42 	bl	800295c <rgb_to_color>
 8002ad8:	4603      	mov	r3, r0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3728      	adds	r7, #40	@ 0x28
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	00000000 	.word	0x00000000

08002ae8 <rainbow_effect>:

void rainbow_effect(uint8_t steps, uint16_t delay_ms)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b088      	sub	sp, #32
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	4603      	mov	r3, r0
 8002af0:	460a      	mov	r2, r1
 8002af2:	71fb      	strb	r3, [r7, #7]
 8002af4:	4613      	mov	r3, r2
 8002af6:	80bb      	strh	r3, [r7, #4]
	float frequency = 0.1;
 8002af8:	4b1a      	ldr	r3, [pc, #104]	@ (8002b64 <rainbow_effect+0x7c>)
 8002afa:	617b      	str	r3, [r7, #20]
	int center = 128;
 8002afc:	2380      	movs	r3, #128	@ 0x80
 8002afe:	613b      	str	r3, [r7, #16]
	int width = 127;
 8002b00:	237f      	movs	r3, #127	@ 0x7f
 8002b02:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < steps; i++)
 8002b04:	2300      	movs	r3, #0
 8002b06:	61fb      	str	r3, [r7, #28]
 8002b08:	e022      	b.n	8002b50 <rainbow_effect+0x68>
	{
		for (uint8_t led_id = 0; led_id < WS2812_NUM; led_id++)
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	76fb      	strb	r3, [r7, #27]
 8002b0e:	e013      	b.n	8002b38 <rainbow_effect+0x50>
		{
			uint32_t color = rainbow_color(frequency, i + led_id * 2, center, width);
 8002b10:	7efb      	ldrb	r3, [r7, #27]
 8002b12:	005a      	lsls	r2, r3, #1
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	4413      	add	r3, r2
 8002b18:	68fa      	ldr	r2, [r7, #12]
 8002b1a:	6939      	ldr	r1, [r7, #16]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	ed97 0a05 	vldr	s0, [r7, #20]
 8002b22:	f7ff ff4d 	bl	80029c0 <rainbow_color>
 8002b26:	60b8      	str	r0, [r7, #8]
			ws2812_set_24bit(led_id, color);
 8002b28:	7efb      	ldrb	r3, [r7, #27]
 8002b2a:	68b9      	ldr	r1, [r7, #8]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7ff ff01 	bl	8002934 <ws2812_set_24bit>
		for (uint8_t led_id = 0; led_id < WS2812_NUM; led_id++)
 8002b32:	7efb      	ldrb	r3, [r7, #27]
 8002b34:	3301      	adds	r3, #1
 8002b36:	76fb      	strb	r3, [r7, #27]
 8002b38:	7efb      	ldrb	r3, [r7, #27]
 8002b3a:	2b31      	cmp	r3, #49	@ 0x31
 8002b3c:	d9e8      	bls.n	8002b10 <rainbow_effect+0x28>
		}
		ws2812_update_force();
 8002b3e:	f7ff fe75 	bl	800282c <ws2812_update_force>
		HAL_Delay(delay_ms);
 8002b42:	88bb      	ldrh	r3, [r7, #4]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f000 f8a9 	bl	8002c9c <HAL_Delay>
	for (int i = 0; i < steps; i++)
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	61fb      	str	r3, [r7, #28]
 8002b50:	79fb      	ldrb	r3, [r7, #7]
 8002b52:	69fa      	ldr	r2, [r7, #28]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	dbd8      	blt.n	8002b0a <rainbow_effect+0x22>
	}
}
 8002b58:	bf00      	nop
 8002b5a:	bf00      	nop
 8002b5c:	3720      	adds	r7, #32
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	3dcccccd 	.word	0x3dcccccd

08002b68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002b68:	480d      	ldr	r0, [pc, #52]	@ (8002ba0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002b6a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002b6c:	f7ff fe4c 	bl	8002808 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b70:	480c      	ldr	r0, [pc, #48]	@ (8002ba4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002b72:	490d      	ldr	r1, [pc, #52]	@ (8002ba8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002b74:	4a0d      	ldr	r2, [pc, #52]	@ (8002bac <LoopForever+0xe>)
  movs r3, #0
 8002b76:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002b78:	e002      	b.n	8002b80 <LoopCopyDataInit>

08002b7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b7e:	3304      	adds	r3, #4

08002b80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b84:	d3f9      	bcc.n	8002b7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b86:	4a0a      	ldr	r2, [pc, #40]	@ (8002bb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002b88:	4c0a      	ldr	r4, [pc, #40]	@ (8002bb4 <LoopForever+0x16>)
  movs r3, #0
 8002b8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b8c:	e001      	b.n	8002b92 <LoopFillZerobss>

08002b8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b90:	3204      	adds	r2, #4

08002b92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b94:	d3fb      	bcc.n	8002b8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b96:	f00d fd73 	bl	8010680 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002b9a:	f7fe fa6f 	bl	800107c <main>

08002b9e <LoopForever>:

LoopForever:
    b LoopForever
 8002b9e:	e7fe      	b.n	8002b9e <LoopForever>
  ldr   r0, =_estack
 8002ba0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ba4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ba8:	2000034c 	.word	0x2000034c
  ldr r2, =_sidata
 8002bac:	08015118 	.word	0x08015118
  ldr r2, =_sbss
 8002bb0:	2000034c 	.word	0x2000034c
  ldr r4, =_ebss
 8002bb4:	20004240 	.word	0x20004240

08002bb8 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002bb8:	e7fe      	b.n	8002bb8 <ADC3_IRQHandler>

08002bba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b082      	sub	sp, #8
 8002bbe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bc4:	2003      	movs	r0, #3
 8002bc6:	f001 ffc9 	bl	8004b5c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002bca:	200f      	movs	r0, #15
 8002bcc:	f000 f80e 	bl	8002bec <HAL_InitTick>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d002      	beq.n	8002bdc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	71fb      	strb	r3, [r7, #7]
 8002bda:	e001      	b.n	8002be0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002bdc:	f7ff f96a 	bl	8001eb4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002be0:	79fb      	ldrb	r3, [r7, #7]

}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
	...

08002bec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002bf8:	4b16      	ldr	r3, [pc, #88]	@ (8002c54 <HAL_InitTick+0x68>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d022      	beq.n	8002c46 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002c00:	4b15      	ldr	r3, [pc, #84]	@ (8002c58 <HAL_InitTick+0x6c>)
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	4b13      	ldr	r3, [pc, #76]	@ (8002c54 <HAL_InitTick+0x68>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002c0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c14:	4618      	mov	r0, r3
 8002c16:	f001 ffd4 	bl	8004bc2 <HAL_SYSTICK_Config>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d10f      	bne.n	8002c40 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b0f      	cmp	r3, #15
 8002c24:	d809      	bhi.n	8002c3a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c26:	2200      	movs	r2, #0
 8002c28:	6879      	ldr	r1, [r7, #4]
 8002c2a:	f04f 30ff 	mov.w	r0, #4294967295
 8002c2e:	f001 ffa0 	bl	8004b72 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c32:	4a0a      	ldr	r2, [pc, #40]	@ (8002c5c <HAL_InitTick+0x70>)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6013      	str	r3, [r2, #0]
 8002c38:	e007      	b.n	8002c4a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	73fb      	strb	r3, [r7, #15]
 8002c3e:	e004      	b.n	8002c4a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	73fb      	strb	r3, [r7, #15]
 8002c44:	e001      	b.n	8002c4a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3710      	adds	r7, #16
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	20000008 	.word	0x20000008
 8002c58:	20000000 	.word	0x20000000
 8002c5c:	20000004 	.word	0x20000004

08002c60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c64:	4b05      	ldr	r3, [pc, #20]	@ (8002c7c <HAL_IncTick+0x1c>)
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	4b05      	ldr	r3, [pc, #20]	@ (8002c80 <HAL_IncTick+0x20>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	4a03      	ldr	r2, [pc, #12]	@ (8002c7c <HAL_IncTick+0x1c>)
 8002c70:	6013      	str	r3, [r2, #0]
}
 8002c72:	bf00      	nop
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr
 8002c7c:	20002720 	.word	0x20002720
 8002c80:	20000008 	.word	0x20000008

08002c84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  return uwTick;
 8002c88:	4b03      	ldr	r3, [pc, #12]	@ (8002c98 <HAL_GetTick+0x14>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	20002720 	.word	0x20002720

08002c9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ca4:	f7ff ffee 	bl	8002c84 <HAL_GetTick>
 8002ca8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb4:	d004      	beq.n	8002cc0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cb6:	4b09      	ldr	r3, [pc, #36]	@ (8002cdc <HAL_Delay+0x40>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002cc0:	bf00      	nop
 8002cc2:	f7ff ffdf 	bl	8002c84 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d8f7      	bhi.n	8002cc2 <HAL_Delay+0x26>
  {
  }
}
 8002cd2:	bf00      	nop
 8002cd4:	bf00      	nop
 8002cd6:	3710      	adds	r7, #16
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	20000008 	.word	0x20000008

08002ce0 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE2: VREFBUF_OUT around 2.9 V.
  *                                                This requires VDDA equal to or higher than 3.15 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8002ce8:	4b06      	ldr	r3, [pc, #24]	@ (8002d04 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002cf0:	4904      	ldr	r1, [pc, #16]	@ (8002d04 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	600b      	str	r3, [r1, #0]
}
 8002cf8:	bf00      	nop
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr
 8002d04:	40010030 	.word	0x40010030

08002d08 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8002d10:	4b06      	ldr	r3, [pc, #24]	@ (8002d2c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f023 0202 	bic.w	r2, r3, #2
 8002d18:	4904      	ldr	r1, [pc, #16]	@ (8002d2c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	600b      	str	r3, [r1, #0]
}
 8002d20:	bf00      	nop
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr
 8002d2c:	40010030 	.word	0x40010030

08002d30 <HAL_SYSCFG_VREFBUF_TrimmingConfig>:
  * @param TrimmingValue specifies trimming code for VREFBUF calibration
  *        This parameter can be a number between Min_Data = 0x00 and Max_Data = 0x3F
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_TrimmingConfig(uint32_t TrimmingValue)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_TRIMMING(TrimmingValue));

  MODIFY_REG(VREFBUF->CCR, VREFBUF_CCR_TRIM, TrimmingValue);
 8002d38:	4b06      	ldr	r3, [pc, #24]	@ (8002d54 <HAL_SYSCFG_VREFBUF_TrimmingConfig+0x24>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8002d40:	4904      	ldr	r1, [pc, #16]	@ (8002d54 <HAL_SYSCFG_VREFBUF_TrimmingConfig+0x24>)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	604b      	str	r3, [r1, #4]
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr
 8002d54:	40010030 	.word	0x40010030

08002d58 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8002d5e:	4b0f      	ldr	r3, [pc, #60]	@ (8002d9c <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a0e      	ldr	r2, [pc, #56]	@ (8002d9c <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8002d64:	f043 0301 	orr.w	r3, r3, #1
 8002d68:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002d6a:	f7ff ff8b 	bl	8002c84 <HAL_GetTick>
 8002d6e:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8002d70:	e008      	b.n	8002d84 <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 8002d72:	f7ff ff87 	bl	8002c84 <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	2b0a      	cmp	r3, #10
 8002d7e:	d901      	bls.n	8002d84 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e006      	b.n	8002d92 <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8002d84:	4b05      	ldr	r3, [pc, #20]	@ (8002d9c <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0308 	and.w	r3, r3, #8
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d0f0      	beq.n	8002d72 <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	40010030 	.word	0x40010030

08002da0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	431a      	orrs	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	609a      	str	r2, [r3, #8]
}
 8002dba:	bf00      	nop
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr

08002dc6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	b083      	sub	sp, #12
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
 8002dce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	609a      	str	r2, [r3, #8]
}
 8002de0:	bf00      	nop
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b087      	sub	sp, #28
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	607a      	str	r2, [r7, #4]
 8002e14:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	3360      	adds	r3, #96	@ 0x60
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4413      	add	r3, r2
 8002e22:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	4b08      	ldr	r3, [pc, #32]	@ (8002e4c <LL_ADC_SetOffset+0x44>)
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002e32:	683a      	ldr	r2, [r7, #0]
 8002e34:	430a      	orrs	r2, r1
 8002e36:	4313      	orrs	r3, r2
 8002e38:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002e40:	bf00      	nop
 8002e42:	371c      	adds	r7, #28
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr
 8002e4c:	03fff000 	.word	0x03fff000

08002e50 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	3360      	adds	r3, #96	@ 0x60
 8002e5e:	461a      	mov	r2, r3
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	4413      	add	r3, r2
 8002e66:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3714      	adds	r7, #20
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b087      	sub	sp, #28
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	3360      	adds	r3, #96	@ 0x60
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	4413      	add	r3, r2
 8002e94:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	431a      	orrs	r2, r3
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002ea6:	bf00      	nop
 8002ea8:	371c      	adds	r7, #28
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr

08002eb2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	b087      	sub	sp, #28
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	60f8      	str	r0, [r7, #12]
 8002eba:	60b9      	str	r1, [r7, #8]
 8002ebc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	3360      	adds	r3, #96	@ 0x60
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	4413      	add	r3, r2
 8002eca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	431a      	orrs	r2, r3
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002edc:	bf00      	nop
 8002ede:	371c      	adds	r7, #28
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b087      	sub	sp, #28
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	3360      	adds	r3, #96	@ 0x60
 8002ef8:	461a      	mov	r2, r3
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	4413      	add	r3, r2
 8002f00:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	431a      	orrs	r2, r3
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002f12:	bf00      	nop
 8002f14:	371c      	adds	r7, #28
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr

08002f1e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	b083      	sub	sp, #12
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
 8002f26:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	695b      	ldr	r3, [r3, #20]
 8002f2c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	431a      	orrs	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	615a      	str	r2, [r3, #20]
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d101      	bne.n	8002f5c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e000      	b.n	8002f5e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr

08002f6a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	b087      	sub	sp, #28
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	60f8      	str	r0, [r7, #12]
 8002f72:	60b9      	str	r1, [r7, #8]
 8002f74:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	3330      	adds	r3, #48	@ 0x30
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	0a1b      	lsrs	r3, r3, #8
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	f003 030c 	and.w	r3, r3, #12
 8002f86:	4413      	add	r3, r2
 8002f88:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	f003 031f 	and.w	r3, r3, #31
 8002f94:	211f      	movs	r1, #31
 8002f96:	fa01 f303 	lsl.w	r3, r1, r3
 8002f9a:	43db      	mvns	r3, r3
 8002f9c:	401a      	ands	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	0e9b      	lsrs	r3, r3, #26
 8002fa2:	f003 011f 	and.w	r1, r3, #31
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	f003 031f 	and.w	r3, r3, #31
 8002fac:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb0:	431a      	orrs	r2, r3
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002fb6:	bf00      	nop
 8002fb8:	371c      	adds	r7, #28
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr

08002fc2 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	b083      	sub	sp, #12
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fce:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d101      	bne.n	8002fda <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e000      	b.n	8002fdc <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b087      	sub	sp, #28
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	3314      	adds	r3, #20
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	0e5b      	lsrs	r3, r3, #25
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	f003 0304 	and.w	r3, r3, #4
 8003004:	4413      	add	r3, r2
 8003006:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	0d1b      	lsrs	r3, r3, #20
 8003010:	f003 031f 	and.w	r3, r3, #31
 8003014:	2107      	movs	r1, #7
 8003016:	fa01 f303 	lsl.w	r3, r1, r3
 800301a:	43db      	mvns	r3, r3
 800301c:	401a      	ands	r2, r3
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	0d1b      	lsrs	r3, r3, #20
 8003022:	f003 031f 	and.w	r3, r3, #31
 8003026:	6879      	ldr	r1, [r7, #4]
 8003028:	fa01 f303 	lsl.w	r3, r1, r3
 800302c:	431a      	orrs	r2, r3
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003032:	bf00      	nop
 8003034:	371c      	adds	r7, #28
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
	...

08003040 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003040:	b480      	push	{r7}
 8003042:	b085      	sub	sp, #20
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003058:	43db      	mvns	r3, r3
 800305a:	401a      	ands	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f003 0318 	and.w	r3, r3, #24
 8003062:	4908      	ldr	r1, [pc, #32]	@ (8003084 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003064:	40d9      	lsrs	r1, r3
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	400b      	ands	r3, r1
 800306a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800306e:	431a      	orrs	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003076:	bf00      	nop
 8003078:	3714      	adds	r7, #20
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	0007ffff 	.word	0x0007ffff

08003088 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f003 031f 	and.w	r3, r3, #31
}
 8003098:	4618      	mov	r0, r3
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80030d0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	6093      	str	r3, [r2, #8]
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80030f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80030f8:	d101      	bne.n	80030fe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80030fa:	2301      	movs	r3, #1
 80030fc:	e000      	b.n	8003100 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80030fe:	2300      	movs	r3, #0
}
 8003100:	4618      	mov	r0, r3
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr

0800310c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800311c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003120:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003128:	bf00      	nop
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003144:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003148:	d101      	bne.n	800314e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800314a:	2301      	movs	r3, #1
 800314c:	e000      	b.n	8003150 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800316c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003170:	f043 0201 	orr.w	r2, r3, #1
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f003 0301 	and.w	r3, r3, #1
 8003194:	2b01      	cmp	r3, #1
 8003196:	d101      	bne.n	800319c <LL_ADC_IsEnabled+0x18>
 8003198:	2301      	movs	r3, #1
 800319a:	e000      	b.n	800319e <LL_ADC_IsEnabled+0x1a>
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	370c      	adds	r7, #12
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr

080031aa <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80031aa:	b480      	push	{r7}
 80031ac:	b083      	sub	sp, #12
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80031ba:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80031be:	f043 0204 	orr.w	r2, r3, #4
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80031c6:	bf00      	nop
 80031c8:	370c      	adds	r7, #12
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr

080031d2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80031d2:	b480      	push	{r7}
 80031d4:	b083      	sub	sp, #12
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f003 0304 	and.w	r3, r3, #4
 80031e2:	2b04      	cmp	r3, #4
 80031e4:	d101      	bne.n	80031ea <LL_ADC_REG_IsConversionOngoing+0x18>
 80031e6:	2301      	movs	r3, #1
 80031e8:	e000      	b.n	80031ec <LL_ADC_REG_IsConversionOngoing+0x1a>
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f003 0308 	and.w	r3, r3, #8
 8003208:	2b08      	cmp	r3, #8
 800320a:	d101      	bne.n	8003210 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800320c:	2301      	movs	r3, #1
 800320e:	e000      	b.n	8003212 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
	...

08003220 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003220:	b590      	push	{r4, r7, lr}
 8003222:	b089      	sub	sp, #36	@ 0x24
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003228:	2300      	movs	r3, #0
 800322a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800322c:	2300      	movs	r3, #0
 800322e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d101      	bne.n	800323a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e1a9      	b.n	800358e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003244:	2b00      	cmp	r3, #0
 8003246:	d109      	bne.n	800325c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f7fe fe61 	bl	8001f10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4618      	mov	r0, r3
 8003262:	f7ff ff3f 	bl	80030e4 <LL_ADC_IsDeepPowerDownEnabled>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d004      	beq.n	8003276 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4618      	mov	r0, r3
 8003272:	f7ff ff25 	bl	80030c0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4618      	mov	r0, r3
 800327c:	f7ff ff5a 	bl	8003134 <LL_ADC_IsInternalRegulatorEnabled>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d115      	bne.n	80032b2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4618      	mov	r0, r3
 800328c:	f7ff ff3e 	bl	800310c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003290:	4b9c      	ldr	r3, [pc, #624]	@ (8003504 <HAL_ADC_Init+0x2e4>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	099b      	lsrs	r3, r3, #6
 8003296:	4a9c      	ldr	r2, [pc, #624]	@ (8003508 <HAL_ADC_Init+0x2e8>)
 8003298:	fba2 2303 	umull	r2, r3, r2, r3
 800329c:	099b      	lsrs	r3, r3, #6
 800329e:	3301      	adds	r3, #1
 80032a0:	005b      	lsls	r3, r3, #1
 80032a2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80032a4:	e002      	b.n	80032ac <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	3b01      	subs	r3, #1
 80032aa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1f9      	bne.n	80032a6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7ff ff3c 	bl	8003134 <LL_ADC_IsInternalRegulatorEnabled>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d10d      	bne.n	80032de <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032c6:	f043 0210 	orr.w	r2, r3, #16
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032d2:	f043 0201 	orr.w	r2, r3, #1
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7ff ff75 	bl	80031d2 <LL_ADC_REG_IsConversionOngoing>
 80032e8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032ee:	f003 0310 	and.w	r3, r3, #16
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f040 8142 	bne.w	800357c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	f040 813e 	bne.w	800357c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003304:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003308:	f043 0202 	orr.w	r2, r3, #2
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4618      	mov	r0, r3
 8003316:	f7ff ff35 	bl	8003184 <LL_ADC_IsEnabled>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d141      	bne.n	80033a4 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003328:	d004      	beq.n	8003334 <HAL_ADC_Init+0x114>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a77      	ldr	r2, [pc, #476]	@ (800350c <HAL_ADC_Init+0x2ec>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d10f      	bne.n	8003354 <HAL_ADC_Init+0x134>
 8003334:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003338:	f7ff ff24 	bl	8003184 <LL_ADC_IsEnabled>
 800333c:	4604      	mov	r4, r0
 800333e:	4873      	ldr	r0, [pc, #460]	@ (800350c <HAL_ADC_Init+0x2ec>)
 8003340:	f7ff ff20 	bl	8003184 <LL_ADC_IsEnabled>
 8003344:	4603      	mov	r3, r0
 8003346:	4323      	orrs	r3, r4
 8003348:	2b00      	cmp	r3, #0
 800334a:	bf0c      	ite	eq
 800334c:	2301      	moveq	r3, #1
 800334e:	2300      	movne	r3, #0
 8003350:	b2db      	uxtb	r3, r3
 8003352:	e012      	b.n	800337a <HAL_ADC_Init+0x15a>
 8003354:	486e      	ldr	r0, [pc, #440]	@ (8003510 <HAL_ADC_Init+0x2f0>)
 8003356:	f7ff ff15 	bl	8003184 <LL_ADC_IsEnabled>
 800335a:	4604      	mov	r4, r0
 800335c:	486d      	ldr	r0, [pc, #436]	@ (8003514 <HAL_ADC_Init+0x2f4>)
 800335e:	f7ff ff11 	bl	8003184 <LL_ADC_IsEnabled>
 8003362:	4603      	mov	r3, r0
 8003364:	431c      	orrs	r4, r3
 8003366:	486c      	ldr	r0, [pc, #432]	@ (8003518 <HAL_ADC_Init+0x2f8>)
 8003368:	f7ff ff0c 	bl	8003184 <LL_ADC_IsEnabled>
 800336c:	4603      	mov	r3, r0
 800336e:	4323      	orrs	r3, r4
 8003370:	2b00      	cmp	r3, #0
 8003372:	bf0c      	ite	eq
 8003374:	2301      	moveq	r3, #1
 8003376:	2300      	movne	r3, #0
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b00      	cmp	r3, #0
 800337c:	d012      	beq.n	80033a4 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003386:	d004      	beq.n	8003392 <HAL_ADC_Init+0x172>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a5f      	ldr	r2, [pc, #380]	@ (800350c <HAL_ADC_Init+0x2ec>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d101      	bne.n	8003396 <HAL_ADC_Init+0x176>
 8003392:	4a62      	ldr	r2, [pc, #392]	@ (800351c <HAL_ADC_Init+0x2fc>)
 8003394:	e000      	b.n	8003398 <HAL_ADC_Init+0x178>
 8003396:	4a62      	ldr	r2, [pc, #392]	@ (8003520 <HAL_ADC_Init+0x300>)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	4619      	mov	r1, r3
 800339e:	4610      	mov	r0, r2
 80033a0:	f7ff fcfe 	bl	8002da0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	7f5b      	ldrb	r3, [r3, #29]
 80033a8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80033ae:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80033b4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80033ba:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80033c2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80033c4:	4313      	orrs	r3, r2
 80033c6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d106      	bne.n	80033e0 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033d6:	3b01      	subs	r3, #1
 80033d8:	045b      	lsls	r3, r3, #17
 80033da:	69ba      	ldr	r2, [r7, #24]
 80033dc:	4313      	orrs	r3, r2
 80033de:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d009      	beq.n	80033fc <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ec:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80033f6:	69ba      	ldr	r2, [r7, #24]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68da      	ldr	r2, [r3, #12]
 8003402:	4b48      	ldr	r3, [pc, #288]	@ (8003524 <HAL_ADC_Init+0x304>)
 8003404:	4013      	ands	r3, r2
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	6812      	ldr	r2, [r2, #0]
 800340a:	69b9      	ldr	r1, [r7, #24]
 800340c:	430b      	orrs	r3, r1
 800340e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	430a      	orrs	r2, r1
 8003424:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4618      	mov	r0, r3
 800342c:	f7ff fee4 	bl	80031f8 <LL_ADC_INJ_IsConversionOngoing>
 8003430:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d17f      	bne.n	8003538 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d17c      	bne.n	8003538 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003442:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800344a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800344c:	4313      	orrs	r3, r2
 800344e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800345a:	f023 0302 	bic.w	r3, r3, #2
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	6812      	ldr	r2, [r2, #0]
 8003462:	69b9      	ldr	r1, [r7, #24]
 8003464:	430b      	orrs	r3, r1
 8003466:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d017      	beq.n	80034a0 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	691a      	ldr	r2, [r3, #16]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800347e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003488:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800348c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	6911      	ldr	r1, [r2, #16]
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	6812      	ldr	r2, [r2, #0]
 8003498:	430b      	orrs	r3, r1
 800349a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800349e:	e013      	b.n	80034c8 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	691a      	ldr	r2, [r3, #16]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80034ae:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	6812      	ldr	r2, [r2, #0]
 80034bc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80034c0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80034c4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d12a      	bne.n	8003528 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	691b      	ldr	r3, [r3, #16]
 80034d8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80034dc:	f023 0304 	bic.w	r3, r3, #4
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80034e8:	4311      	orrs	r1, r2
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80034ee:	4311      	orrs	r1, r2
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80034f4:	430a      	orrs	r2, r1
 80034f6:	431a      	orrs	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f042 0201 	orr.w	r2, r2, #1
 8003500:	611a      	str	r2, [r3, #16]
 8003502:	e019      	b.n	8003538 <HAL_ADC_Init+0x318>
 8003504:	20000000 	.word	0x20000000
 8003508:	053e2d63 	.word	0x053e2d63
 800350c:	50000100 	.word	0x50000100
 8003510:	50000400 	.word	0x50000400
 8003514:	50000500 	.word	0x50000500
 8003518:	50000600 	.word	0x50000600
 800351c:	50000300 	.word	0x50000300
 8003520:	50000700 	.word	0x50000700
 8003524:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	691a      	ldr	r2, [r3, #16]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f022 0201 	bic.w	r2, r2, #1
 8003536:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	695b      	ldr	r3, [r3, #20]
 800353c:	2b01      	cmp	r3, #1
 800353e:	d10c      	bne.n	800355a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003546:	f023 010f 	bic.w	r1, r3, #15
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a1b      	ldr	r3, [r3, #32]
 800354e:	1e5a      	subs	r2, r3, #1
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	430a      	orrs	r2, r1
 8003556:	631a      	str	r2, [r3, #48]	@ 0x30
 8003558:	e007      	b.n	800356a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f022 020f 	bic.w	r2, r2, #15
 8003568:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800356e:	f023 0303 	bic.w	r3, r3, #3
 8003572:	f043 0201 	orr.w	r2, r3, #1
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	65da      	str	r2, [r3, #92]	@ 0x5c
 800357a:	e007      	b.n	800358c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003580:	f043 0210 	orr.w	r2, r3, #16
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800358c:	7ffb      	ldrb	r3, [r7, #31]
}
 800358e:	4618      	mov	r0, r3
 8003590:	3724      	adds	r7, #36	@ 0x24
 8003592:	46bd      	mov	sp, r7
 8003594:	bd90      	pop	{r4, r7, pc}
 8003596:	bf00      	nop

08003598 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b086      	sub	sp, #24
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035ac:	d004      	beq.n	80035b8 <HAL_ADC_Start_DMA+0x20>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a5a      	ldr	r2, [pc, #360]	@ (800371c <HAL_ADC_Start_DMA+0x184>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d101      	bne.n	80035bc <HAL_ADC_Start_DMA+0x24>
 80035b8:	4b59      	ldr	r3, [pc, #356]	@ (8003720 <HAL_ADC_Start_DMA+0x188>)
 80035ba:	e000      	b.n	80035be <HAL_ADC_Start_DMA+0x26>
 80035bc:	4b59      	ldr	r3, [pc, #356]	@ (8003724 <HAL_ADC_Start_DMA+0x18c>)
 80035be:	4618      	mov	r0, r3
 80035c0:	f7ff fd62 	bl	8003088 <LL_ADC_GetMultimode>
 80035c4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7ff fe01 	bl	80031d2 <LL_ADC_REG_IsConversionOngoing>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	f040 809b 	bne.w	800370e <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d101      	bne.n	80035e6 <HAL_ADC_Start_DMA+0x4e>
 80035e2:	2302      	movs	r3, #2
 80035e4:	e096      	b.n	8003714 <HAL_ADC_Start_DMA+0x17c>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a4d      	ldr	r2, [pc, #308]	@ (8003728 <HAL_ADC_Start_DMA+0x190>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d008      	beq.n	800360a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d005      	beq.n	800360a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	2b05      	cmp	r3, #5
 8003602:	d002      	beq.n	800360a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	2b09      	cmp	r3, #9
 8003608:	d17a      	bne.n	8003700 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800360a:	68f8      	ldr	r0, [r7, #12]
 800360c:	f000 ff4c 	bl	80044a8 <ADC_Enable>
 8003610:	4603      	mov	r3, r0
 8003612:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003614:	7dfb      	ldrb	r3, [r7, #23]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d16d      	bne.n	80036f6 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800361e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003622:	f023 0301 	bic.w	r3, r3, #1
 8003626:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a3a      	ldr	r2, [pc, #232]	@ (800371c <HAL_ADC_Start_DMA+0x184>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d009      	beq.n	800364c <HAL_ADC_Start_DMA+0xb4>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a3b      	ldr	r2, [pc, #236]	@ (800372c <HAL_ADC_Start_DMA+0x194>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d002      	beq.n	8003648 <HAL_ADC_Start_DMA+0xb0>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	e003      	b.n	8003650 <HAL_ADC_Start_DMA+0xb8>
 8003648:	4b39      	ldr	r3, [pc, #228]	@ (8003730 <HAL_ADC_Start_DMA+0x198>)
 800364a:	e001      	b.n	8003650 <HAL_ADC_Start_DMA+0xb8>
 800364c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	6812      	ldr	r2, [r2, #0]
 8003654:	4293      	cmp	r3, r2
 8003656:	d002      	beq.n	800365e <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d105      	bne.n	800366a <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003662:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800366e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d006      	beq.n	8003684 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800367a:	f023 0206 	bic.w	r2, r3, #6
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	661a      	str	r2, [r3, #96]	@ 0x60
 8003682:	e002      	b.n	800368a <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2200      	movs	r2, #0
 8003688:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800368e:	4a29      	ldr	r2, [pc, #164]	@ (8003734 <HAL_ADC_Start_DMA+0x19c>)
 8003690:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003696:	4a28      	ldr	r2, [pc, #160]	@ (8003738 <HAL_ADC_Start_DMA+0x1a0>)
 8003698:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800369e:	4a27      	ldr	r2, [pc, #156]	@ (800373c <HAL_ADC_Start_DMA+0x1a4>)
 80036a0:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	221c      	movs	r2, #28
 80036a8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	685a      	ldr	r2, [r3, #4]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f042 0210 	orr.w	r2, r2, #16
 80036c0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68da      	ldr	r2, [r3, #12]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f042 0201 	orr.w	r2, r2, #1
 80036d0:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	3340      	adds	r3, #64	@ 0x40
 80036dc:	4619      	mov	r1, r3
 80036de:	68ba      	ldr	r2, [r7, #8]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f001 fb23 	bl	8004d2c <HAL_DMA_Start_IT>
 80036e6:	4603      	mov	r3, r0
 80036e8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4618      	mov	r0, r3
 80036f0:	f7ff fd5b 	bl	80031aa <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80036f4:	e00d      	b.n	8003712 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80036fe:	e008      	b.n	8003712 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800370c:	e001      	b.n	8003712 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800370e:	2302      	movs	r3, #2
 8003710:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003712:	7dfb      	ldrb	r3, [r7, #23]
}
 8003714:	4618      	mov	r0, r3
 8003716:	3718      	adds	r7, #24
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	50000100 	.word	0x50000100
 8003720:	50000300 	.word	0x50000300
 8003724:	50000700 	.word	0x50000700
 8003728:	50000600 	.word	0x50000600
 800372c:	50000500 	.word	0x50000500
 8003730:	50000400 	.word	0x50000400
 8003734:	080045d5 	.word	0x080045d5
 8003738:	080046ad 	.word	0x080046ad
 800373c:	080046c9 	.word	0x080046c9

08003740 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b08a      	sub	sp, #40	@ 0x28
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003748:	2300      	movs	r3, #0
 800374a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003764:	d004      	beq.n	8003770 <HAL_ADC_IRQHandler+0x30>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a8e      	ldr	r2, [pc, #568]	@ (80039a4 <HAL_ADC_IRQHandler+0x264>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d101      	bne.n	8003774 <HAL_ADC_IRQHandler+0x34>
 8003770:	4b8d      	ldr	r3, [pc, #564]	@ (80039a8 <HAL_ADC_IRQHandler+0x268>)
 8003772:	e000      	b.n	8003776 <HAL_ADC_IRQHandler+0x36>
 8003774:	4b8d      	ldr	r3, [pc, #564]	@ (80039ac <HAL_ADC_IRQHandler+0x26c>)
 8003776:	4618      	mov	r0, r3
 8003778:	f7ff fc86 	bl	8003088 <LL_ADC_GetMultimode>
 800377c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	f003 0302 	and.w	r3, r3, #2
 8003784:	2b00      	cmp	r3, #0
 8003786:	d017      	beq.n	80037b8 <HAL_ADC_IRQHandler+0x78>
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d012      	beq.n	80037b8 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003796:	f003 0310 	and.w	r3, r3, #16
 800379a:	2b00      	cmp	r3, #0
 800379c:	d105      	bne.n	80037aa <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037a2:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 fff4 	bl	8004798 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2202      	movs	r2, #2
 80037b6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	f003 0304 	and.w	r3, r3, #4
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d004      	beq.n	80037cc <HAL_ADC_IRQHandler+0x8c>
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	f003 0304 	and.w	r3, r3, #4
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d10b      	bne.n	80037e4 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	f000 8094 	beq.w	8003900 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	f003 0308 	and.w	r3, r3, #8
 80037de:	2b00      	cmp	r3, #0
 80037e0:	f000 808e 	beq.w	8003900 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037e8:	f003 0310 	and.w	r3, r3, #16
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d105      	bne.n	80037fc <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037f4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4618      	mov	r0, r3
 8003802:	f7ff fb9f 	bl	8002f44 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d072      	beq.n	80038f2 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a64      	ldr	r2, [pc, #400]	@ (80039a4 <HAL_ADC_IRQHandler+0x264>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d009      	beq.n	800382a <HAL_ADC_IRQHandler+0xea>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a65      	ldr	r2, [pc, #404]	@ (80039b0 <HAL_ADC_IRQHandler+0x270>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d002      	beq.n	8003826 <HAL_ADC_IRQHandler+0xe6>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	e003      	b.n	800382e <HAL_ADC_IRQHandler+0xee>
 8003826:	4b63      	ldr	r3, [pc, #396]	@ (80039b4 <HAL_ADC_IRQHandler+0x274>)
 8003828:	e001      	b.n	800382e <HAL_ADC_IRQHandler+0xee>
 800382a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	6812      	ldr	r2, [r2, #0]
 8003832:	4293      	cmp	r3, r2
 8003834:	d008      	beq.n	8003848 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d005      	beq.n	8003848 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	2b05      	cmp	r3, #5
 8003840:	d002      	beq.n	8003848 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	2b09      	cmp	r3, #9
 8003846:	d104      	bne.n	8003852 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	623b      	str	r3, [r7, #32]
 8003850:	e014      	b.n	800387c <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a53      	ldr	r2, [pc, #332]	@ (80039a4 <HAL_ADC_IRQHandler+0x264>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d009      	beq.n	8003870 <HAL_ADC_IRQHandler+0x130>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a53      	ldr	r2, [pc, #332]	@ (80039b0 <HAL_ADC_IRQHandler+0x270>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d002      	beq.n	800386c <HAL_ADC_IRQHandler+0x12c>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	e003      	b.n	8003874 <HAL_ADC_IRQHandler+0x134>
 800386c:	4b51      	ldr	r3, [pc, #324]	@ (80039b4 <HAL_ADC_IRQHandler+0x274>)
 800386e:	e001      	b.n	8003874 <HAL_ADC_IRQHandler+0x134>
 8003870:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003874:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800387c:	6a3b      	ldr	r3, [r7, #32]
 800387e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d135      	bne.n	80038f2 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0308 	and.w	r3, r3, #8
 8003890:	2b08      	cmp	r3, #8
 8003892:	d12e      	bne.n	80038f2 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4618      	mov	r0, r3
 800389a:	f7ff fc9a 	bl	80031d2 <LL_ADC_REG_IsConversionOngoing>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d11a      	bne.n	80038da <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	685a      	ldr	r2, [r3, #4]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f022 020c 	bic.w	r2, r2, #12
 80038b2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d112      	bne.n	80038f2 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038d0:	f043 0201 	orr.w	r2, r3, #1
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80038d8:	e00b      	b.n	80038f2 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038de:	f043 0210 	orr.w	r2, r3, #16
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038ea:	f043 0201 	orr.w	r2, r3, #1
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f7fe fa60 	bl	8001db8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	220c      	movs	r2, #12
 80038fe:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	f003 0320 	and.w	r3, r3, #32
 8003906:	2b00      	cmp	r3, #0
 8003908:	d004      	beq.n	8003914 <HAL_ADC_IRQHandler+0x1d4>
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	f003 0320 	and.w	r3, r3, #32
 8003910:	2b00      	cmp	r3, #0
 8003912:	d10b      	bne.n	800392c <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800391a:	2b00      	cmp	r3, #0
 800391c:	f000 80b3 	beq.w	8003a86 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003926:	2b00      	cmp	r3, #0
 8003928:	f000 80ad 	beq.w	8003a86 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003930:	f003 0310 	and.w	r3, r3, #16
 8003934:	2b00      	cmp	r3, #0
 8003936:	d105      	bne.n	8003944 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800393c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4618      	mov	r0, r3
 800394a:	f7ff fb3a 	bl	8002fc2 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800394e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4618      	mov	r0, r3
 8003956:	f7ff faf5 	bl	8002f44 <LL_ADC_REG_IsTriggerSourceSWStart>
 800395a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a10      	ldr	r2, [pc, #64]	@ (80039a4 <HAL_ADC_IRQHandler+0x264>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d009      	beq.n	800397a <HAL_ADC_IRQHandler+0x23a>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a11      	ldr	r2, [pc, #68]	@ (80039b0 <HAL_ADC_IRQHandler+0x270>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d002      	beq.n	8003976 <HAL_ADC_IRQHandler+0x236>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	e003      	b.n	800397e <HAL_ADC_IRQHandler+0x23e>
 8003976:	4b0f      	ldr	r3, [pc, #60]	@ (80039b4 <HAL_ADC_IRQHandler+0x274>)
 8003978:	e001      	b.n	800397e <HAL_ADC_IRQHandler+0x23e>
 800397a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	6812      	ldr	r2, [r2, #0]
 8003982:	4293      	cmp	r3, r2
 8003984:	d008      	beq.n	8003998 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d005      	beq.n	8003998 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	2b06      	cmp	r3, #6
 8003990:	d002      	beq.n	8003998 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	2b07      	cmp	r3, #7
 8003996:	d10f      	bne.n	80039b8 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	623b      	str	r3, [r7, #32]
 80039a0:	e01f      	b.n	80039e2 <HAL_ADC_IRQHandler+0x2a2>
 80039a2:	bf00      	nop
 80039a4:	50000100 	.word	0x50000100
 80039a8:	50000300 	.word	0x50000300
 80039ac:	50000700 	.word	0x50000700
 80039b0:	50000500 	.word	0x50000500
 80039b4:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a8b      	ldr	r2, [pc, #556]	@ (8003bec <HAL_ADC_IRQHandler+0x4ac>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d009      	beq.n	80039d6 <HAL_ADC_IRQHandler+0x296>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a8a      	ldr	r2, [pc, #552]	@ (8003bf0 <HAL_ADC_IRQHandler+0x4b0>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d002      	beq.n	80039d2 <HAL_ADC_IRQHandler+0x292>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	e003      	b.n	80039da <HAL_ADC_IRQHandler+0x29a>
 80039d2:	4b88      	ldr	r3, [pc, #544]	@ (8003bf4 <HAL_ADC_IRQHandler+0x4b4>)
 80039d4:	e001      	b.n	80039da <HAL_ADC_IRQHandler+0x29a>
 80039d6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80039da:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d047      	beq.n	8003a78 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80039e8:	6a3b      	ldr	r3, [r7, #32]
 80039ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d007      	beq.n	8003a02 <HAL_ADC_IRQHandler+0x2c2>
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d03f      	beq.n	8003a78 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80039f8:	6a3b      	ldr	r3, [r7, #32]
 80039fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d13a      	bne.n	8003a78 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a0c:	2b40      	cmp	r3, #64	@ 0x40
 8003a0e:	d133      	bne.n	8003a78 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003a10:	6a3b      	ldr	r3, [r7, #32]
 8003a12:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d12e      	bne.n	8003a78 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7ff fbea 	bl	80031f8 <LL_ADC_INJ_IsConversionOngoing>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d11a      	bne.n	8003a60 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	685a      	ldr	r2, [r3, #4]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003a38:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a3e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d112      	bne.n	8003a78 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a56:	f043 0201 	orr.w	r2, r3, #1
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003a5e:	e00b      	b.n	8003a78 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a64:	f043 0210 	orr.w	r2, r3, #16
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a70:	f043 0201 	orr.w	r2, r3, #1
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f000 fe65 	bl	8004748 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2260      	movs	r2, #96	@ 0x60
 8003a84:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d011      	beq.n	8003ab4 <HAL_ADC_IRQHandler+0x374>
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00c      	beq.n	8003ab4 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a9e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 f8aa 	bl	8003c00 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2280      	movs	r2, #128	@ 0x80
 8003ab2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d012      	beq.n	8003ae4 <HAL_ADC_IRQHandler+0x3a4>
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00d      	beq.n	8003ae4 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003acc:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f000 fe4b 	bl	8004770 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003ae2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d012      	beq.n	8003b14 <HAL_ADC_IRQHandler+0x3d4>
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00d      	beq.n	8003b14 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003afc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f000 fe3d 	bl	8004784 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b12:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	f003 0310 	and.w	r3, r3, #16
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d043      	beq.n	8003ba6 <HAL_ADC_IRQHandler+0x466>
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	f003 0310 	and.w	r3, r3, #16
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d03e      	beq.n	8003ba6 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d102      	bne.n	8003b36 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8003b30:	2301      	movs	r3, #1
 8003b32:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b34:	e021      	b.n	8003b7a <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d015      	beq.n	8003b68 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b44:	d004      	beq.n	8003b50 <HAL_ADC_IRQHandler+0x410>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a28      	ldr	r2, [pc, #160]	@ (8003bec <HAL_ADC_IRQHandler+0x4ac>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d101      	bne.n	8003b54 <HAL_ADC_IRQHandler+0x414>
 8003b50:	4b29      	ldr	r3, [pc, #164]	@ (8003bf8 <HAL_ADC_IRQHandler+0x4b8>)
 8003b52:	e000      	b.n	8003b56 <HAL_ADC_IRQHandler+0x416>
 8003b54:	4b29      	ldr	r3, [pc, #164]	@ (8003bfc <HAL_ADC_IRQHandler+0x4bc>)
 8003b56:	4618      	mov	r0, r3
 8003b58:	f7ff faa4 	bl	80030a4 <LL_ADC_GetMultiDMATransfer>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00b      	beq.n	8003b7a <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003b62:	2301      	movs	r3, #1
 8003b64:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b66:	e008      	b.n	8003b7a <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	f003 0301 	and.w	r3, r3, #1
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d001      	beq.n	8003b7a <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003b76:	2301      	movs	r3, #1
 8003b78:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d10e      	bne.n	8003b9e <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b84:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b90:	f043 0202 	orr.w	r2, r3, #2
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f000 f83b 	bl	8003c14 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2210      	movs	r2, #16
 8003ba4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d018      	beq.n	8003be2 <HAL_ADC_IRQHandler+0x4a2>
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d013      	beq.n	8003be2 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bbe:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bca:	f043 0208 	orr.w	r2, r3, #8
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003bda:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f000 fdbd 	bl	800475c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003be2:	bf00      	nop
 8003be4:	3728      	adds	r7, #40	@ 0x28
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	50000100 	.word	0x50000100
 8003bf0:	50000500 	.word	0x50000500
 8003bf4:	50000400 	.word	0x50000400
 8003bf8:	50000300 	.word	0x50000300
 8003bfc:	50000700 	.word	0x50000700

08003c00 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003c1c:	bf00      	nop
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b0b6      	sub	sp, #216	@ 0xd8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c32:	2300      	movs	r3, #0
 8003c34:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d102      	bne.n	8003c4c <HAL_ADC_ConfigChannel+0x24>
 8003c46:	2302      	movs	r3, #2
 8003c48:	f000 bc13 	b.w	8004472 <HAL_ADC_ConfigChannel+0x84a>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f7ff faba 	bl	80031d2 <LL_ADC_REG_IsConversionOngoing>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f040 83f3 	bne.w	800444c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6818      	ldr	r0, [r3, #0]
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	6859      	ldr	r1, [r3, #4]
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	461a      	mov	r2, r3
 8003c74:	f7ff f979 	bl	8002f6a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f7ff faa8 	bl	80031d2 <LL_ADC_REG_IsConversionOngoing>
 8003c82:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f7ff fab4 	bl	80031f8 <LL_ADC_INJ_IsConversionOngoing>
 8003c90:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003c94:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	f040 81d9 	bne.w	8004050 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003c9e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	f040 81d4 	bne.w	8004050 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003cb0:	d10f      	bne.n	8003cd2 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6818      	ldr	r0, [r3, #0]
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	f7ff f993 	bl	8002fe8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7ff f927 	bl	8002f1e <LL_ADC_SetSamplingTimeCommonConfig>
 8003cd0:	e00e      	b.n	8003cf0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6818      	ldr	r0, [r3, #0]
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	6819      	ldr	r1, [r3, #0]
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	461a      	mov	r2, r3
 8003ce0:	f7ff f982 	bl	8002fe8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2100      	movs	r1, #0
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7ff f917 	bl	8002f1e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	695a      	ldr	r2, [r3, #20]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	08db      	lsrs	r3, r3, #3
 8003cfc:	f003 0303 	and.w	r3, r3, #3
 8003d00:	005b      	lsls	r3, r3, #1
 8003d02:	fa02 f303 	lsl.w	r3, r2, r3
 8003d06:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	2b04      	cmp	r3, #4
 8003d10:	d022      	beq.n	8003d58 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6818      	ldr	r0, [r3, #0]
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	6919      	ldr	r1, [r3, #16]
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003d22:	f7ff f871 	bl	8002e08 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6818      	ldr	r0, [r3, #0]
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	6919      	ldr	r1, [r3, #16]
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	461a      	mov	r2, r3
 8003d34:	f7ff f8bd 	bl	8002eb2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6818      	ldr	r0, [r3, #0]
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d102      	bne.n	8003d4e <HAL_ADC_ConfigChannel+0x126>
 8003d48:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d4c:	e000      	b.n	8003d50 <HAL_ADC_ConfigChannel+0x128>
 8003d4e:	2300      	movs	r3, #0
 8003d50:	461a      	mov	r2, r3
 8003d52:	f7ff f8c9 	bl	8002ee8 <LL_ADC_SetOffsetSaturation>
 8003d56:	e17b      	b.n	8004050 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2100      	movs	r1, #0
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f7ff f876 	bl	8002e50 <LL_ADC_GetOffsetChannel>
 8003d64:	4603      	mov	r3, r0
 8003d66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d10a      	bne.n	8003d84 <HAL_ADC_ConfigChannel+0x15c>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2100      	movs	r1, #0
 8003d74:	4618      	mov	r0, r3
 8003d76:	f7ff f86b 	bl	8002e50 <LL_ADC_GetOffsetChannel>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	0e9b      	lsrs	r3, r3, #26
 8003d7e:	f003 021f 	and.w	r2, r3, #31
 8003d82:	e01e      	b.n	8003dc2 <HAL_ADC_ConfigChannel+0x19a>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2100      	movs	r1, #0
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7ff f860 	bl	8002e50 <LL_ADC_GetOffsetChannel>
 8003d90:	4603      	mov	r3, r0
 8003d92:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d96:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003d9a:	fa93 f3a3 	rbit	r3, r3
 8003d9e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003da2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003da6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003daa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d101      	bne.n	8003db6 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003db2:	2320      	movs	r3, #32
 8003db4:	e004      	b.n	8003dc0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003db6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003dba:	fab3 f383 	clz	r3, r3
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d105      	bne.n	8003dda <HAL_ADC_ConfigChannel+0x1b2>
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	0e9b      	lsrs	r3, r3, #26
 8003dd4:	f003 031f 	and.w	r3, r3, #31
 8003dd8:	e018      	b.n	8003e0c <HAL_ADC_ConfigChannel+0x1e4>
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003de6:	fa93 f3a3 	rbit	r3, r3
 8003dea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003dee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003df2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003df6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d101      	bne.n	8003e02 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003dfe:	2320      	movs	r3, #32
 8003e00:	e004      	b.n	8003e0c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003e02:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003e06:	fab3 f383 	clz	r3, r3
 8003e0a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d106      	bne.n	8003e1e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2200      	movs	r2, #0
 8003e16:	2100      	movs	r1, #0
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7ff f82f 	bl	8002e7c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2101      	movs	r1, #1
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7ff f813 	bl	8002e50 <LL_ADC_GetOffsetChannel>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d10a      	bne.n	8003e4a <HAL_ADC_ConfigChannel+0x222>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2101      	movs	r1, #1
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7ff f808 	bl	8002e50 <LL_ADC_GetOffsetChannel>
 8003e40:	4603      	mov	r3, r0
 8003e42:	0e9b      	lsrs	r3, r3, #26
 8003e44:	f003 021f 	and.w	r2, r3, #31
 8003e48:	e01e      	b.n	8003e88 <HAL_ADC_ConfigChannel+0x260>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2101      	movs	r1, #1
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7fe fffd 	bl	8002e50 <LL_ADC_GetOffsetChannel>
 8003e56:	4603      	mov	r3, r0
 8003e58:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e5c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003e60:	fa93 f3a3 	rbit	r3, r3
 8003e64:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003e68:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003e6c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003e70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d101      	bne.n	8003e7c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003e78:	2320      	movs	r3, #32
 8003e7a:	e004      	b.n	8003e86 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003e7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003e80:	fab3 f383 	clz	r3, r3
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d105      	bne.n	8003ea0 <HAL_ADC_ConfigChannel+0x278>
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	0e9b      	lsrs	r3, r3, #26
 8003e9a:	f003 031f 	and.w	r3, r3, #31
 8003e9e:	e018      	b.n	8003ed2 <HAL_ADC_ConfigChannel+0x2aa>
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003eac:	fa93 f3a3 	rbit	r3, r3
 8003eb0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003eb4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003eb8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003ebc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d101      	bne.n	8003ec8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003ec4:	2320      	movs	r3, #32
 8003ec6:	e004      	b.n	8003ed2 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003ec8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003ecc:	fab3 f383 	clz	r3, r3
 8003ed0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d106      	bne.n	8003ee4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2200      	movs	r2, #0
 8003edc:	2101      	movs	r1, #1
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f7fe ffcc 	bl	8002e7c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2102      	movs	r1, #2
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7fe ffb0 	bl	8002e50 <LL_ADC_GetOffsetChannel>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d10a      	bne.n	8003f10 <HAL_ADC_ConfigChannel+0x2e8>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2102      	movs	r1, #2
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7fe ffa5 	bl	8002e50 <LL_ADC_GetOffsetChannel>
 8003f06:	4603      	mov	r3, r0
 8003f08:	0e9b      	lsrs	r3, r3, #26
 8003f0a:	f003 021f 	and.w	r2, r3, #31
 8003f0e:	e01e      	b.n	8003f4e <HAL_ADC_ConfigChannel+0x326>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2102      	movs	r1, #2
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7fe ff9a 	bl	8002e50 <LL_ADC_GetOffsetChannel>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f22:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f26:	fa93 f3a3 	rbit	r3, r3
 8003f2a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003f2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003f32:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003f36:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d101      	bne.n	8003f42 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003f3e:	2320      	movs	r3, #32
 8003f40:	e004      	b.n	8003f4c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003f42:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003f46:	fab3 f383 	clz	r3, r3
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d105      	bne.n	8003f66 <HAL_ADC_ConfigChannel+0x33e>
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	0e9b      	lsrs	r3, r3, #26
 8003f60:	f003 031f 	and.w	r3, r3, #31
 8003f64:	e016      	b.n	8003f94 <HAL_ADC_ConfigChannel+0x36c>
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003f72:	fa93 f3a3 	rbit	r3, r3
 8003f76:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003f78:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003f7a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003f7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d101      	bne.n	8003f8a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003f86:	2320      	movs	r3, #32
 8003f88:	e004      	b.n	8003f94 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003f8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f8e:	fab3 f383 	clz	r3, r3
 8003f92:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d106      	bne.n	8003fa6 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	2102      	movs	r1, #2
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f7fe ff6b 	bl	8002e7c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2103      	movs	r1, #3
 8003fac:	4618      	mov	r0, r3
 8003fae:	f7fe ff4f 	bl	8002e50 <LL_ADC_GetOffsetChannel>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d10a      	bne.n	8003fd2 <HAL_ADC_ConfigChannel+0x3aa>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2103      	movs	r1, #3
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7fe ff44 	bl	8002e50 <LL_ADC_GetOffsetChannel>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	0e9b      	lsrs	r3, r3, #26
 8003fcc:	f003 021f 	and.w	r2, r3, #31
 8003fd0:	e017      	b.n	8004002 <HAL_ADC_ConfigChannel+0x3da>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2103      	movs	r1, #3
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7fe ff39 	bl	8002e50 <LL_ADC_GetOffsetChannel>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fe2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003fe4:	fa93 f3a3 	rbit	r3, r3
 8003fe8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003fea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003fec:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003fee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d101      	bne.n	8003ff8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003ff4:	2320      	movs	r3, #32
 8003ff6:	e003      	b.n	8004000 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003ff8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003ffa:	fab3 f383 	clz	r3, r3
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800400a:	2b00      	cmp	r3, #0
 800400c:	d105      	bne.n	800401a <HAL_ADC_ConfigChannel+0x3f2>
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	0e9b      	lsrs	r3, r3, #26
 8004014:	f003 031f 	and.w	r3, r3, #31
 8004018:	e011      	b.n	800403e <HAL_ADC_ConfigChannel+0x416>
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004020:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004022:	fa93 f3a3 	rbit	r3, r3
 8004026:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004028:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800402a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800402c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800402e:	2b00      	cmp	r3, #0
 8004030:	d101      	bne.n	8004036 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8004032:	2320      	movs	r3, #32
 8004034:	e003      	b.n	800403e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8004036:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004038:	fab3 f383 	clz	r3, r3
 800403c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800403e:	429a      	cmp	r2, r3
 8004040:	d106      	bne.n	8004050 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2200      	movs	r2, #0
 8004048:	2103      	movs	r1, #3
 800404a:	4618      	mov	r0, r3
 800404c:	f7fe ff16 	bl	8002e7c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4618      	mov	r0, r3
 8004056:	f7ff f895 	bl	8003184 <LL_ADC_IsEnabled>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	f040 813d 	bne.w	80042dc <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6818      	ldr	r0, [r3, #0]
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	6819      	ldr	r1, [r3, #0]
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	461a      	mov	r2, r3
 8004070:	f7fe ffe6 	bl	8003040 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	4aa2      	ldr	r2, [pc, #648]	@ (8004304 <HAL_ADC_ConfigChannel+0x6dc>)
 800407a:	4293      	cmp	r3, r2
 800407c:	f040 812e 	bne.w	80042dc <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800408c:	2b00      	cmp	r3, #0
 800408e:	d10b      	bne.n	80040a8 <HAL_ADC_ConfigChannel+0x480>
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	0e9b      	lsrs	r3, r3, #26
 8004096:	3301      	adds	r3, #1
 8004098:	f003 031f 	and.w	r3, r3, #31
 800409c:	2b09      	cmp	r3, #9
 800409e:	bf94      	ite	ls
 80040a0:	2301      	movls	r3, #1
 80040a2:	2300      	movhi	r3, #0
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	e019      	b.n	80040dc <HAL_ADC_ConfigChannel+0x4b4>
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80040b0:	fa93 f3a3 	rbit	r3, r3
 80040b4:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80040b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80040b8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80040ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d101      	bne.n	80040c4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80040c0:	2320      	movs	r3, #32
 80040c2:	e003      	b.n	80040cc <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80040c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80040c6:	fab3 f383 	clz	r3, r3
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	3301      	adds	r3, #1
 80040ce:	f003 031f 	and.w	r3, r3, #31
 80040d2:	2b09      	cmp	r3, #9
 80040d4:	bf94      	ite	ls
 80040d6:	2301      	movls	r3, #1
 80040d8:	2300      	movhi	r3, #0
 80040da:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d079      	beq.n	80041d4 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d107      	bne.n	80040fc <HAL_ADC_ConfigChannel+0x4d4>
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	0e9b      	lsrs	r3, r3, #26
 80040f2:	3301      	adds	r3, #1
 80040f4:	069b      	lsls	r3, r3, #26
 80040f6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80040fa:	e015      	b.n	8004128 <HAL_ADC_ConfigChannel+0x500>
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004102:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004104:	fa93 f3a3 	rbit	r3, r3
 8004108:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800410a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800410c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800410e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004110:	2b00      	cmp	r3, #0
 8004112:	d101      	bne.n	8004118 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004114:	2320      	movs	r3, #32
 8004116:	e003      	b.n	8004120 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004118:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800411a:	fab3 f383 	clz	r3, r3
 800411e:	b2db      	uxtb	r3, r3
 8004120:	3301      	adds	r3, #1
 8004122:	069b      	lsls	r3, r3, #26
 8004124:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004130:	2b00      	cmp	r3, #0
 8004132:	d109      	bne.n	8004148 <HAL_ADC_ConfigChannel+0x520>
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	0e9b      	lsrs	r3, r3, #26
 800413a:	3301      	adds	r3, #1
 800413c:	f003 031f 	and.w	r3, r3, #31
 8004140:	2101      	movs	r1, #1
 8004142:	fa01 f303 	lsl.w	r3, r1, r3
 8004146:	e017      	b.n	8004178 <HAL_ADC_ConfigChannel+0x550>
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800414e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004150:	fa93 f3a3 	rbit	r3, r3
 8004154:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004156:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004158:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800415a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800415c:	2b00      	cmp	r3, #0
 800415e:	d101      	bne.n	8004164 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004160:	2320      	movs	r3, #32
 8004162:	e003      	b.n	800416c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004164:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004166:	fab3 f383 	clz	r3, r3
 800416a:	b2db      	uxtb	r3, r3
 800416c:	3301      	adds	r3, #1
 800416e:	f003 031f 	and.w	r3, r3, #31
 8004172:	2101      	movs	r1, #1
 8004174:	fa01 f303 	lsl.w	r3, r1, r3
 8004178:	ea42 0103 	orr.w	r1, r2, r3
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004184:	2b00      	cmp	r3, #0
 8004186:	d10a      	bne.n	800419e <HAL_ADC_ConfigChannel+0x576>
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	0e9b      	lsrs	r3, r3, #26
 800418e:	3301      	adds	r3, #1
 8004190:	f003 021f 	and.w	r2, r3, #31
 8004194:	4613      	mov	r3, r2
 8004196:	005b      	lsls	r3, r3, #1
 8004198:	4413      	add	r3, r2
 800419a:	051b      	lsls	r3, r3, #20
 800419c:	e018      	b.n	80041d0 <HAL_ADC_ConfigChannel+0x5a8>
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041a6:	fa93 f3a3 	rbit	r3, r3
 80041aa:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80041ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80041b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d101      	bne.n	80041ba <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80041b6:	2320      	movs	r3, #32
 80041b8:	e003      	b.n	80041c2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80041ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041bc:	fab3 f383 	clz	r3, r3
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	3301      	adds	r3, #1
 80041c4:	f003 021f 	and.w	r2, r3, #31
 80041c8:	4613      	mov	r3, r2
 80041ca:	005b      	lsls	r3, r3, #1
 80041cc:	4413      	add	r3, r2
 80041ce:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041d0:	430b      	orrs	r3, r1
 80041d2:	e07e      	b.n	80042d2 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d107      	bne.n	80041f0 <HAL_ADC_ConfigChannel+0x5c8>
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	0e9b      	lsrs	r3, r3, #26
 80041e6:	3301      	adds	r3, #1
 80041e8:	069b      	lsls	r3, r3, #26
 80041ea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80041ee:	e015      	b.n	800421c <HAL_ADC_ConfigChannel+0x5f4>
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041f8:	fa93 f3a3 	rbit	r3, r3
 80041fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80041fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004200:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004204:	2b00      	cmp	r3, #0
 8004206:	d101      	bne.n	800420c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004208:	2320      	movs	r3, #32
 800420a:	e003      	b.n	8004214 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800420c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800420e:	fab3 f383 	clz	r3, r3
 8004212:	b2db      	uxtb	r3, r3
 8004214:	3301      	adds	r3, #1
 8004216:	069b      	lsls	r3, r3, #26
 8004218:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004224:	2b00      	cmp	r3, #0
 8004226:	d109      	bne.n	800423c <HAL_ADC_ConfigChannel+0x614>
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	0e9b      	lsrs	r3, r3, #26
 800422e:	3301      	adds	r3, #1
 8004230:	f003 031f 	and.w	r3, r3, #31
 8004234:	2101      	movs	r1, #1
 8004236:	fa01 f303 	lsl.w	r3, r1, r3
 800423a:	e017      	b.n	800426c <HAL_ADC_ConfigChannel+0x644>
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004242:	6a3b      	ldr	r3, [r7, #32]
 8004244:	fa93 f3a3 	rbit	r3, r3
 8004248:	61fb      	str	r3, [r7, #28]
  return result;
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800424e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004250:	2b00      	cmp	r3, #0
 8004252:	d101      	bne.n	8004258 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004254:	2320      	movs	r3, #32
 8004256:	e003      	b.n	8004260 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800425a:	fab3 f383 	clz	r3, r3
 800425e:	b2db      	uxtb	r3, r3
 8004260:	3301      	adds	r3, #1
 8004262:	f003 031f 	and.w	r3, r3, #31
 8004266:	2101      	movs	r1, #1
 8004268:	fa01 f303 	lsl.w	r3, r1, r3
 800426c:	ea42 0103 	orr.w	r1, r2, r3
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004278:	2b00      	cmp	r3, #0
 800427a:	d10d      	bne.n	8004298 <HAL_ADC_ConfigChannel+0x670>
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	0e9b      	lsrs	r3, r3, #26
 8004282:	3301      	adds	r3, #1
 8004284:	f003 021f 	and.w	r2, r3, #31
 8004288:	4613      	mov	r3, r2
 800428a:	005b      	lsls	r3, r3, #1
 800428c:	4413      	add	r3, r2
 800428e:	3b1e      	subs	r3, #30
 8004290:	051b      	lsls	r3, r3, #20
 8004292:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004296:	e01b      	b.n	80042d0 <HAL_ADC_ConfigChannel+0x6a8>
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	fa93 f3a3 	rbit	r3, r3
 80042a4:	613b      	str	r3, [r7, #16]
  return result;
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d101      	bne.n	80042b4 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80042b0:	2320      	movs	r3, #32
 80042b2:	e003      	b.n	80042bc <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	fab3 f383 	clz	r3, r3
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	3301      	adds	r3, #1
 80042be:	f003 021f 	and.w	r2, r3, #31
 80042c2:	4613      	mov	r3, r2
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	4413      	add	r3, r2
 80042c8:	3b1e      	subs	r3, #30
 80042ca:	051b      	lsls	r3, r3, #20
 80042cc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042d0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80042d2:	683a      	ldr	r2, [r7, #0]
 80042d4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042d6:	4619      	mov	r1, r3
 80042d8:	f7fe fe86 	bl	8002fe8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	4b09      	ldr	r3, [pc, #36]	@ (8004308 <HAL_ADC_ConfigChannel+0x6e0>)
 80042e2:	4013      	ands	r3, r2
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	f000 80be 	beq.w	8004466 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80042f2:	d004      	beq.n	80042fe <HAL_ADC_ConfigChannel+0x6d6>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a04      	ldr	r2, [pc, #16]	@ (800430c <HAL_ADC_ConfigChannel+0x6e4>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d10a      	bne.n	8004314 <HAL_ADC_ConfigChannel+0x6ec>
 80042fe:	4b04      	ldr	r3, [pc, #16]	@ (8004310 <HAL_ADC_ConfigChannel+0x6e8>)
 8004300:	e009      	b.n	8004316 <HAL_ADC_ConfigChannel+0x6ee>
 8004302:	bf00      	nop
 8004304:	407f0000 	.word	0x407f0000
 8004308:	80080000 	.word	0x80080000
 800430c:	50000100 	.word	0x50000100
 8004310:	50000300 	.word	0x50000300
 8004314:	4b59      	ldr	r3, [pc, #356]	@ (800447c <HAL_ADC_ConfigChannel+0x854>)
 8004316:	4618      	mov	r0, r3
 8004318:	f7fe fd68 	bl	8002dec <LL_ADC_GetCommonPathInternalCh>
 800431c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a56      	ldr	r2, [pc, #344]	@ (8004480 <HAL_ADC_ConfigChannel+0x858>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d004      	beq.n	8004334 <HAL_ADC_ConfigChannel+0x70c>
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a55      	ldr	r2, [pc, #340]	@ (8004484 <HAL_ADC_ConfigChannel+0x85c>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d13a      	bne.n	80043aa <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004334:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004338:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d134      	bne.n	80043aa <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004348:	d005      	beq.n	8004356 <HAL_ADC_ConfigChannel+0x72e>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a4e      	ldr	r2, [pc, #312]	@ (8004488 <HAL_ADC_ConfigChannel+0x860>)
 8004350:	4293      	cmp	r3, r2
 8004352:	f040 8085 	bne.w	8004460 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800435e:	d004      	beq.n	800436a <HAL_ADC_ConfigChannel+0x742>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a49      	ldr	r2, [pc, #292]	@ (800448c <HAL_ADC_ConfigChannel+0x864>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d101      	bne.n	800436e <HAL_ADC_ConfigChannel+0x746>
 800436a:	4a49      	ldr	r2, [pc, #292]	@ (8004490 <HAL_ADC_ConfigChannel+0x868>)
 800436c:	e000      	b.n	8004370 <HAL_ADC_ConfigChannel+0x748>
 800436e:	4a43      	ldr	r2, [pc, #268]	@ (800447c <HAL_ADC_ConfigChannel+0x854>)
 8004370:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004374:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004378:	4619      	mov	r1, r3
 800437a:	4610      	mov	r0, r2
 800437c:	f7fe fd23 	bl	8002dc6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004380:	4b44      	ldr	r3, [pc, #272]	@ (8004494 <HAL_ADC_ConfigChannel+0x86c>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	099b      	lsrs	r3, r3, #6
 8004386:	4a44      	ldr	r2, [pc, #272]	@ (8004498 <HAL_ADC_ConfigChannel+0x870>)
 8004388:	fba2 2303 	umull	r2, r3, r2, r3
 800438c:	099b      	lsrs	r3, r3, #6
 800438e:	1c5a      	adds	r2, r3, #1
 8004390:	4613      	mov	r3, r2
 8004392:	005b      	lsls	r3, r3, #1
 8004394:	4413      	add	r3, r2
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800439a:	e002      	b.n	80043a2 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	3b01      	subs	r3, #1
 80043a0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d1f9      	bne.n	800439c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80043a8:	e05a      	b.n	8004460 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a3b      	ldr	r2, [pc, #236]	@ (800449c <HAL_ADC_ConfigChannel+0x874>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d125      	bne.n	8004400 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80043b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80043b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d11f      	bne.n	8004400 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a31      	ldr	r2, [pc, #196]	@ (800448c <HAL_ADC_ConfigChannel+0x864>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d104      	bne.n	80043d4 <HAL_ADC_ConfigChannel+0x7ac>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a34      	ldr	r2, [pc, #208]	@ (80044a0 <HAL_ADC_ConfigChannel+0x878>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d047      	beq.n	8004464 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80043dc:	d004      	beq.n	80043e8 <HAL_ADC_ConfigChannel+0x7c0>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a2a      	ldr	r2, [pc, #168]	@ (800448c <HAL_ADC_ConfigChannel+0x864>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d101      	bne.n	80043ec <HAL_ADC_ConfigChannel+0x7c4>
 80043e8:	4a29      	ldr	r2, [pc, #164]	@ (8004490 <HAL_ADC_ConfigChannel+0x868>)
 80043ea:	e000      	b.n	80043ee <HAL_ADC_ConfigChannel+0x7c6>
 80043ec:	4a23      	ldr	r2, [pc, #140]	@ (800447c <HAL_ADC_ConfigChannel+0x854>)
 80043ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80043f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80043f6:	4619      	mov	r1, r3
 80043f8:	4610      	mov	r0, r2
 80043fa:	f7fe fce4 	bl	8002dc6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80043fe:	e031      	b.n	8004464 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a27      	ldr	r2, [pc, #156]	@ (80044a4 <HAL_ADC_ConfigChannel+0x87c>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d12d      	bne.n	8004466 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800440a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800440e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d127      	bne.n	8004466 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a1c      	ldr	r2, [pc, #112]	@ (800448c <HAL_ADC_ConfigChannel+0x864>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d022      	beq.n	8004466 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004428:	d004      	beq.n	8004434 <HAL_ADC_ConfigChannel+0x80c>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a17      	ldr	r2, [pc, #92]	@ (800448c <HAL_ADC_ConfigChannel+0x864>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d101      	bne.n	8004438 <HAL_ADC_ConfigChannel+0x810>
 8004434:	4a16      	ldr	r2, [pc, #88]	@ (8004490 <HAL_ADC_ConfigChannel+0x868>)
 8004436:	e000      	b.n	800443a <HAL_ADC_ConfigChannel+0x812>
 8004438:	4a10      	ldr	r2, [pc, #64]	@ (800447c <HAL_ADC_ConfigChannel+0x854>)
 800443a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800443e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004442:	4619      	mov	r1, r3
 8004444:	4610      	mov	r0, r2
 8004446:	f7fe fcbe 	bl	8002dc6 <LL_ADC_SetCommonPathInternalCh>
 800444a:	e00c      	b.n	8004466 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004450:	f043 0220 	orr.w	r2, r3, #32
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800445e:	e002      	b.n	8004466 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004460:	bf00      	nop
 8004462:	e000      	b.n	8004466 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004464:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800446e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004472:	4618      	mov	r0, r3
 8004474:	37d8      	adds	r7, #216	@ 0xd8
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	50000700 	.word	0x50000700
 8004480:	c3210000 	.word	0xc3210000
 8004484:	90c00010 	.word	0x90c00010
 8004488:	50000600 	.word	0x50000600
 800448c:	50000100 	.word	0x50000100
 8004490:	50000300 	.word	0x50000300
 8004494:	20000000 	.word	0x20000000
 8004498:	053e2d63 	.word	0x053e2d63
 800449c:	c7520000 	.word	0xc7520000
 80044a0:	50000500 	.word	0x50000500
 80044a4:	cb840000 	.word	0xcb840000

080044a8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80044b0:	2300      	movs	r3, #0
 80044b2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4618      	mov	r0, r3
 80044ba:	f7fe fe63 	bl	8003184 <LL_ADC_IsEnabled>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d176      	bne.n	80045b2 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	689a      	ldr	r2, [r3, #8]
 80044ca:	4b3c      	ldr	r3, [pc, #240]	@ (80045bc <ADC_Enable+0x114>)
 80044cc:	4013      	ands	r3, r2
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00d      	beq.n	80044ee <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044d6:	f043 0210 	orr.w	r2, r3, #16
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044e2:	f043 0201 	orr.w	r2, r3, #1
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e062      	b.n	80045b4 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4618      	mov	r0, r3
 80044f4:	f7fe fe32 	bl	800315c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004500:	d004      	beq.n	800450c <ADC_Enable+0x64>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a2e      	ldr	r2, [pc, #184]	@ (80045c0 <ADC_Enable+0x118>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d101      	bne.n	8004510 <ADC_Enable+0x68>
 800450c:	4b2d      	ldr	r3, [pc, #180]	@ (80045c4 <ADC_Enable+0x11c>)
 800450e:	e000      	b.n	8004512 <ADC_Enable+0x6a>
 8004510:	4b2d      	ldr	r3, [pc, #180]	@ (80045c8 <ADC_Enable+0x120>)
 8004512:	4618      	mov	r0, r3
 8004514:	f7fe fc6a 	bl	8002dec <LL_ADC_GetCommonPathInternalCh>
 8004518:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800451a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800451e:	2b00      	cmp	r3, #0
 8004520:	d013      	beq.n	800454a <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004522:	4b2a      	ldr	r3, [pc, #168]	@ (80045cc <ADC_Enable+0x124>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	099b      	lsrs	r3, r3, #6
 8004528:	4a29      	ldr	r2, [pc, #164]	@ (80045d0 <ADC_Enable+0x128>)
 800452a:	fba2 2303 	umull	r2, r3, r2, r3
 800452e:	099b      	lsrs	r3, r3, #6
 8004530:	1c5a      	adds	r2, r3, #1
 8004532:	4613      	mov	r3, r2
 8004534:	005b      	lsls	r3, r3, #1
 8004536:	4413      	add	r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800453c:	e002      	b.n	8004544 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	3b01      	subs	r3, #1
 8004542:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d1f9      	bne.n	800453e <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800454a:	f7fe fb9b 	bl	8002c84 <HAL_GetTick>
 800454e:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004550:	e028      	b.n	80045a4 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4618      	mov	r0, r3
 8004558:	f7fe fe14 	bl	8003184 <LL_ADC_IsEnabled>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d104      	bne.n	800456c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4618      	mov	r0, r3
 8004568:	f7fe fdf8 	bl	800315c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800456c:	f7fe fb8a 	bl	8002c84 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	2b02      	cmp	r3, #2
 8004578:	d914      	bls.n	80045a4 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0301 	and.w	r3, r3, #1
 8004584:	2b01      	cmp	r3, #1
 8004586:	d00d      	beq.n	80045a4 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800458c:	f043 0210 	orr.w	r2, r3, #16
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004598:	f043 0201 	orr.w	r2, r3, #1
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e007      	b.n	80045b4 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0301 	and.w	r3, r3, #1
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d1cf      	bne.n	8004552 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3710      	adds	r7, #16
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	8000003f 	.word	0x8000003f
 80045c0:	50000100 	.word	0x50000100
 80045c4:	50000300 	.word	0x50000300
 80045c8:	50000700 	.word	0x50000700
 80045cc:	20000000 	.word	0x20000000
 80045d0:	053e2d63 	.word	0x053e2d63

080045d4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045e0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045e6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d14b      	bne.n	8004686 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045f2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0308 	and.w	r3, r3, #8
 8004604:	2b00      	cmp	r3, #0
 8004606:	d021      	beq.n	800464c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4618      	mov	r0, r3
 800460e:	f7fe fc99 	bl	8002f44 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d032      	beq.n	800467e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d12b      	bne.n	800467e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800462a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004636:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d11f      	bne.n	800467e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004642:	f043 0201 	orr.w	r2, r3, #1
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	65da      	str	r2, [r3, #92]	@ 0x5c
 800464a:	e018      	b.n	800467e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	2b00      	cmp	r3, #0
 8004658:	d111      	bne.n	800467e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800465e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800466a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d105      	bne.n	800467e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004676:	f043 0201 	orr.w	r2, r3, #1
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800467e:	68f8      	ldr	r0, [r7, #12]
 8004680:	f7fd fb9a 	bl	8001db8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004684:	e00e      	b.n	80046a4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800468a:	f003 0310 	and.w	r3, r3, #16
 800468e:	2b00      	cmp	r3, #0
 8004690:	d003      	beq.n	800469a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004692:	68f8      	ldr	r0, [r7, #12]
 8004694:	f7ff fabe 	bl	8003c14 <HAL_ADC_ErrorCallback>
}
 8004698:	e004      	b.n	80046a4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800469e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	4798      	blx	r3
}
 80046a4:	bf00      	nop
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046b8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80046ba:	68f8      	ldr	r0, [r7, #12]
 80046bc:	f7fd fb4e 	bl	8001d5c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80046c0:	bf00      	nop
 80046c2:	3710      	adds	r7, #16
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046d4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046da:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046e6:	f043 0204 	orr.w	r2, r3, #4
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80046ee:	68f8      	ldr	r0, [r7, #12]
 80046f0:	f7ff fa90 	bl	8003c14 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80046f4:	bf00      	nop
 80046f6:	3710      	adds	r7, #16
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <LL_ADC_IsEnabled>:
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	f003 0301 	and.w	r3, r3, #1
 800470c:	2b01      	cmp	r3, #1
 800470e:	d101      	bne.n	8004714 <LL_ADC_IsEnabled+0x18>
 8004710:	2301      	movs	r3, #1
 8004712:	e000      	b.n	8004716 <LL_ADC_IsEnabled+0x1a>
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	370c      	adds	r7, #12
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr

08004722 <LL_ADC_REG_IsConversionOngoing>:
{
 8004722:	b480      	push	{r7}
 8004724:	b083      	sub	sp, #12
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	f003 0304 	and.w	r3, r3, #4
 8004732:	2b04      	cmp	r3, #4
 8004734:	d101      	bne.n	800473a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004736:	2301      	movs	r3, #1
 8004738:	e000      	b.n	800473c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800473a:	2300      	movs	r3, #0
}
 800473c:	4618      	mov	r0, r3
 800473e:	370c      	adds	r7, #12
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr

08004748 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004750:	bf00      	nop
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004764:	bf00      	nop
 8004766:	370c      	adds	r7, #12
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004778:	bf00      	nop
 800477a:	370c      	adds	r7, #12
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr

08004784 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800478c:	bf00      	nop
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr

08004798 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80047a0:	bf00      	nop
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80047ac:	b590      	push	{r4, r7, lr}
 80047ae:	b0a1      	sub	sp, #132	@ 0x84
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047b6:	2300      	movs	r3, #0
 80047b8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d101      	bne.n	80047ca <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80047c6:	2302      	movs	r3, #2
 80047c8:	e0e7      	b.n	800499a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2201      	movs	r2, #1
 80047ce:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80047d2:	2300      	movs	r3, #0
 80047d4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80047d6:	2300      	movs	r3, #0
 80047d8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80047e2:	d102      	bne.n	80047ea <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80047e4:	4b6f      	ldr	r3, [pc, #444]	@ (80049a4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80047e6:	60bb      	str	r3, [r7, #8]
 80047e8:	e009      	b.n	80047fe <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a6e      	ldr	r2, [pc, #440]	@ (80049a8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d102      	bne.n	80047fa <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80047f4:	4b6d      	ldr	r3, [pc, #436]	@ (80049ac <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80047f6:	60bb      	str	r3, [r7, #8]
 80047f8:	e001      	b.n	80047fe <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80047fa:	2300      	movs	r3, #0
 80047fc:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d10b      	bne.n	800481c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004808:	f043 0220 	orr.w	r2, r3, #32
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e0be      	b.n	800499a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	4618      	mov	r0, r3
 8004820:	f7ff ff7f 	bl	8004722 <LL_ADC_REG_IsConversionOngoing>
 8004824:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4618      	mov	r0, r3
 800482c:	f7ff ff79 	bl	8004722 <LL_ADC_REG_IsConversionOngoing>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	f040 80a0 	bne.w	8004978 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004838:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800483a:	2b00      	cmp	r3, #0
 800483c:	f040 809c 	bne.w	8004978 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004848:	d004      	beq.n	8004854 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a55      	ldr	r2, [pc, #340]	@ (80049a4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d101      	bne.n	8004858 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004854:	4b56      	ldr	r3, [pc, #344]	@ (80049b0 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004856:	e000      	b.n	800485a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004858:	4b56      	ldr	r3, [pc, #344]	@ (80049b4 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800485a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d04b      	beq.n	80048fc <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004864:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	6859      	ldr	r1, [r3, #4]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004876:	035b      	lsls	r3, r3, #13
 8004878:	430b      	orrs	r3, r1
 800487a:	431a      	orrs	r2, r3
 800487c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800487e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004888:	d004      	beq.n	8004894 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a45      	ldr	r2, [pc, #276]	@ (80049a4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d10f      	bne.n	80048b4 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004894:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004898:	f7ff ff30 	bl	80046fc <LL_ADC_IsEnabled>
 800489c:	4604      	mov	r4, r0
 800489e:	4841      	ldr	r0, [pc, #260]	@ (80049a4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80048a0:	f7ff ff2c 	bl	80046fc <LL_ADC_IsEnabled>
 80048a4:	4603      	mov	r3, r0
 80048a6:	4323      	orrs	r3, r4
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	bf0c      	ite	eq
 80048ac:	2301      	moveq	r3, #1
 80048ae:	2300      	movne	r3, #0
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	e012      	b.n	80048da <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80048b4:	483c      	ldr	r0, [pc, #240]	@ (80049a8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80048b6:	f7ff ff21 	bl	80046fc <LL_ADC_IsEnabled>
 80048ba:	4604      	mov	r4, r0
 80048bc:	483b      	ldr	r0, [pc, #236]	@ (80049ac <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80048be:	f7ff ff1d 	bl	80046fc <LL_ADC_IsEnabled>
 80048c2:	4603      	mov	r3, r0
 80048c4:	431c      	orrs	r4, r3
 80048c6:	483c      	ldr	r0, [pc, #240]	@ (80049b8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80048c8:	f7ff ff18 	bl	80046fc <LL_ADC_IsEnabled>
 80048cc:	4603      	mov	r3, r0
 80048ce:	4323      	orrs	r3, r4
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	bf0c      	ite	eq
 80048d4:	2301      	moveq	r3, #1
 80048d6:	2300      	movne	r3, #0
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d056      	beq.n	800498c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80048de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80048e6:	f023 030f 	bic.w	r3, r3, #15
 80048ea:	683a      	ldr	r2, [r7, #0]
 80048ec:	6811      	ldr	r1, [r2, #0]
 80048ee:	683a      	ldr	r2, [r7, #0]
 80048f0:	6892      	ldr	r2, [r2, #8]
 80048f2:	430a      	orrs	r2, r1
 80048f4:	431a      	orrs	r2, r3
 80048f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80048f8:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80048fa:	e047      	b.n	800498c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80048fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004904:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004906:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004910:	d004      	beq.n	800491c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a23      	ldr	r2, [pc, #140]	@ (80049a4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d10f      	bne.n	800493c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800491c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004920:	f7ff feec 	bl	80046fc <LL_ADC_IsEnabled>
 8004924:	4604      	mov	r4, r0
 8004926:	481f      	ldr	r0, [pc, #124]	@ (80049a4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004928:	f7ff fee8 	bl	80046fc <LL_ADC_IsEnabled>
 800492c:	4603      	mov	r3, r0
 800492e:	4323      	orrs	r3, r4
 8004930:	2b00      	cmp	r3, #0
 8004932:	bf0c      	ite	eq
 8004934:	2301      	moveq	r3, #1
 8004936:	2300      	movne	r3, #0
 8004938:	b2db      	uxtb	r3, r3
 800493a:	e012      	b.n	8004962 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800493c:	481a      	ldr	r0, [pc, #104]	@ (80049a8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800493e:	f7ff fedd 	bl	80046fc <LL_ADC_IsEnabled>
 8004942:	4604      	mov	r4, r0
 8004944:	4819      	ldr	r0, [pc, #100]	@ (80049ac <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004946:	f7ff fed9 	bl	80046fc <LL_ADC_IsEnabled>
 800494a:	4603      	mov	r3, r0
 800494c:	431c      	orrs	r4, r3
 800494e:	481a      	ldr	r0, [pc, #104]	@ (80049b8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004950:	f7ff fed4 	bl	80046fc <LL_ADC_IsEnabled>
 8004954:	4603      	mov	r3, r0
 8004956:	4323      	orrs	r3, r4
 8004958:	2b00      	cmp	r3, #0
 800495a:	bf0c      	ite	eq
 800495c:	2301      	moveq	r3, #1
 800495e:	2300      	movne	r3, #0
 8004960:	b2db      	uxtb	r3, r3
 8004962:	2b00      	cmp	r3, #0
 8004964:	d012      	beq.n	800498c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004966:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800496e:	f023 030f 	bic.w	r3, r3, #15
 8004972:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004974:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004976:	e009      	b.n	800498c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800497c:	f043 0220 	orr.w	r2, r3, #32
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800498a:	e000      	b.n	800498e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800498c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004996:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800499a:	4618      	mov	r0, r3
 800499c:	3784      	adds	r7, #132	@ 0x84
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd90      	pop	{r4, r7, pc}
 80049a2:	bf00      	nop
 80049a4:	50000100 	.word	0x50000100
 80049a8:	50000400 	.word	0x50000400
 80049ac:	50000500 	.word	0x50000500
 80049b0:	50000300 	.word	0x50000300
 80049b4:	50000700 	.word	0x50000700
 80049b8:	50000600 	.word	0x50000600

080049bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049bc:	b480      	push	{r7}
 80049be:	b085      	sub	sp, #20
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f003 0307 	and.w	r3, r3, #7
 80049ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80049cc:	4b0c      	ldr	r3, [pc, #48]	@ (8004a00 <__NVIC_SetPriorityGrouping+0x44>)
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80049d2:	68ba      	ldr	r2, [r7, #8]
 80049d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80049d8:	4013      	ands	r3, r2
 80049da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80049e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80049e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80049ee:	4a04      	ldr	r2, [pc, #16]	@ (8004a00 <__NVIC_SetPriorityGrouping+0x44>)
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	60d3      	str	r3, [r2, #12]
}
 80049f4:	bf00      	nop
 80049f6:	3714      	adds	r7, #20
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr
 8004a00:	e000ed00 	.word	0xe000ed00

08004a04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a04:	b480      	push	{r7}
 8004a06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a08:	4b04      	ldr	r3, [pc, #16]	@ (8004a1c <__NVIC_GetPriorityGrouping+0x18>)
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	0a1b      	lsrs	r3, r3, #8
 8004a0e:	f003 0307 	and.w	r3, r3, #7
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr
 8004a1c:	e000ed00 	.word	0xe000ed00

08004a20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	4603      	mov	r3, r0
 8004a28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	db0b      	blt.n	8004a4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a32:	79fb      	ldrb	r3, [r7, #7]
 8004a34:	f003 021f 	and.w	r2, r3, #31
 8004a38:	4907      	ldr	r1, [pc, #28]	@ (8004a58 <__NVIC_EnableIRQ+0x38>)
 8004a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a3e:	095b      	lsrs	r3, r3, #5
 8004a40:	2001      	movs	r0, #1
 8004a42:	fa00 f202 	lsl.w	r2, r0, r2
 8004a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004a4a:	bf00      	nop
 8004a4c:	370c      	adds	r7, #12
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	e000e100 	.word	0xe000e100

08004a5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	4603      	mov	r3, r0
 8004a64:	6039      	str	r1, [r7, #0]
 8004a66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	db0a      	blt.n	8004a86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	b2da      	uxtb	r2, r3
 8004a74:	490c      	ldr	r1, [pc, #48]	@ (8004aa8 <__NVIC_SetPriority+0x4c>)
 8004a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a7a:	0112      	lsls	r2, r2, #4
 8004a7c:	b2d2      	uxtb	r2, r2
 8004a7e:	440b      	add	r3, r1
 8004a80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a84:	e00a      	b.n	8004a9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	b2da      	uxtb	r2, r3
 8004a8a:	4908      	ldr	r1, [pc, #32]	@ (8004aac <__NVIC_SetPriority+0x50>)
 8004a8c:	79fb      	ldrb	r3, [r7, #7]
 8004a8e:	f003 030f 	and.w	r3, r3, #15
 8004a92:	3b04      	subs	r3, #4
 8004a94:	0112      	lsls	r2, r2, #4
 8004a96:	b2d2      	uxtb	r2, r2
 8004a98:	440b      	add	r3, r1
 8004a9a:	761a      	strb	r2, [r3, #24]
}
 8004a9c:	bf00      	nop
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr
 8004aa8:	e000e100 	.word	0xe000e100
 8004aac:	e000ed00 	.word	0xe000ed00

08004ab0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b089      	sub	sp, #36	@ 0x24
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f003 0307 	and.w	r3, r3, #7
 8004ac2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	f1c3 0307 	rsb	r3, r3, #7
 8004aca:	2b04      	cmp	r3, #4
 8004acc:	bf28      	it	cs
 8004ace:	2304      	movcs	r3, #4
 8004ad0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	3304      	adds	r3, #4
 8004ad6:	2b06      	cmp	r3, #6
 8004ad8:	d902      	bls.n	8004ae0 <NVIC_EncodePriority+0x30>
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	3b03      	subs	r3, #3
 8004ade:	e000      	b.n	8004ae2 <NVIC_EncodePriority+0x32>
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	fa02 f303 	lsl.w	r3, r2, r3
 8004aee:	43da      	mvns	r2, r3
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	401a      	ands	r2, r3
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004af8:	f04f 31ff 	mov.w	r1, #4294967295
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	fa01 f303 	lsl.w	r3, r1, r3
 8004b02:	43d9      	mvns	r1, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b08:	4313      	orrs	r3, r2
         );
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3724      	adds	r7, #36	@ 0x24
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr
	...

08004b18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	3b01      	subs	r3, #1
 8004b24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b28:	d301      	bcc.n	8004b2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e00f      	b.n	8004b4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b2e:	4a0a      	ldr	r2, [pc, #40]	@ (8004b58 <SysTick_Config+0x40>)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	3b01      	subs	r3, #1
 8004b34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b36:	210f      	movs	r1, #15
 8004b38:	f04f 30ff 	mov.w	r0, #4294967295
 8004b3c:	f7ff ff8e 	bl	8004a5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b40:	4b05      	ldr	r3, [pc, #20]	@ (8004b58 <SysTick_Config+0x40>)
 8004b42:	2200      	movs	r2, #0
 8004b44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b46:	4b04      	ldr	r3, [pc, #16]	@ (8004b58 <SysTick_Config+0x40>)
 8004b48:	2207      	movs	r2, #7
 8004b4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3708      	adds	r7, #8
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	e000e010 	.word	0xe000e010

08004b5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f7ff ff29 	bl	80049bc <__NVIC_SetPriorityGrouping>
}
 8004b6a:	bf00      	nop
 8004b6c:	3708      	adds	r7, #8
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}

08004b72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b72:	b580      	push	{r7, lr}
 8004b74:	b086      	sub	sp, #24
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	4603      	mov	r3, r0
 8004b7a:	60b9      	str	r1, [r7, #8]
 8004b7c:	607a      	str	r2, [r7, #4]
 8004b7e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004b80:	f7ff ff40 	bl	8004a04 <__NVIC_GetPriorityGrouping>
 8004b84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	68b9      	ldr	r1, [r7, #8]
 8004b8a:	6978      	ldr	r0, [r7, #20]
 8004b8c:	f7ff ff90 	bl	8004ab0 <NVIC_EncodePriority>
 8004b90:	4602      	mov	r2, r0
 8004b92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b96:	4611      	mov	r1, r2
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f7ff ff5f 	bl	8004a5c <__NVIC_SetPriority>
}
 8004b9e:	bf00      	nop
 8004ba0:	3718      	adds	r7, #24
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}

08004ba6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ba6:	b580      	push	{r7, lr}
 8004ba8:	b082      	sub	sp, #8
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	4603      	mov	r3, r0
 8004bae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f7ff ff33 	bl	8004a20 <__NVIC_EnableIRQ>
}
 8004bba:	bf00      	nop
 8004bbc:	3708      	adds	r7, #8
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}

08004bc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004bc2:	b580      	push	{r7, lr}
 8004bc4:	b082      	sub	sp, #8
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f7ff ffa4 	bl	8004b18 <SysTick_Config>
 8004bd0:	4603      	mov	r3, r0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3708      	adds	r7, #8
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
	...

08004bdc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d101      	bne.n	8004bee <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e08d      	b.n	8004d0a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	4b47      	ldr	r3, [pc, #284]	@ (8004d14 <HAL_DMA_Init+0x138>)
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d80f      	bhi.n	8004c1a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	461a      	mov	r2, r3
 8004c00:	4b45      	ldr	r3, [pc, #276]	@ (8004d18 <HAL_DMA_Init+0x13c>)
 8004c02:	4413      	add	r3, r2
 8004c04:	4a45      	ldr	r2, [pc, #276]	@ (8004d1c <HAL_DMA_Init+0x140>)
 8004c06:	fba2 2303 	umull	r2, r3, r2, r3
 8004c0a:	091b      	lsrs	r3, r3, #4
 8004c0c:	009a      	lsls	r2, r3, #2
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a42      	ldr	r2, [pc, #264]	@ (8004d20 <HAL_DMA_Init+0x144>)
 8004c16:	641a      	str	r2, [r3, #64]	@ 0x40
 8004c18:	e00e      	b.n	8004c38 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	461a      	mov	r2, r3
 8004c20:	4b40      	ldr	r3, [pc, #256]	@ (8004d24 <HAL_DMA_Init+0x148>)
 8004c22:	4413      	add	r3, r2
 8004c24:	4a3d      	ldr	r2, [pc, #244]	@ (8004d1c <HAL_DMA_Init+0x140>)
 8004c26:	fba2 2303 	umull	r2, r3, r2, r3
 8004c2a:	091b      	lsrs	r3, r3, #4
 8004c2c:	009a      	lsls	r2, r3, #2
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a3c      	ldr	r2, [pc, #240]	@ (8004d28 <HAL_DMA_Init+0x14c>)
 8004c36:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004c4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c52:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004c5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	699b      	ldr	r3, [r3, #24]
 8004c6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a1b      	ldr	r3, [r3, #32]
 8004c7a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	68fa      	ldr	r2, [r7, #12]
 8004c88:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 f9b6 	bl	8004ffc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c98:	d102      	bne.n	8004ca0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	685a      	ldr	r2, [r3, #4]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ca8:	b2d2      	uxtb	r2, r2
 8004caa:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004cb4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d010      	beq.n	8004ce0 <HAL_DMA_Init+0x104>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	2b04      	cmp	r3, #4
 8004cc4:	d80c      	bhi.n	8004ce0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f000 f9d6 	bl	8005078 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004cdc:	605a      	str	r2, [r3, #4]
 8004cde:	e008      	b.n	8004cf2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3710      	adds	r7, #16
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	bf00      	nop
 8004d14:	40020407 	.word	0x40020407
 8004d18:	bffdfff8 	.word	0xbffdfff8
 8004d1c:	cccccccd 	.word	0xcccccccd
 8004d20:	40020000 	.word	0x40020000
 8004d24:	bffdfbf8 	.word	0xbffdfbf8
 8004d28:	40020400 	.word	0x40020400

08004d2c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b086      	sub	sp, #24
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	607a      	str	r2, [r7, #4]
 8004d38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d101      	bne.n	8004d4c <HAL_DMA_Start_IT+0x20>
 8004d48:	2302      	movs	r3, #2
 8004d4a:	e066      	b.n	8004e1a <HAL_DMA_Start_IT+0xee>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d155      	bne.n	8004e0c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2202      	movs	r2, #2
 8004d64:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f022 0201 	bic.w	r2, r2, #1
 8004d7c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	68b9      	ldr	r1, [r7, #8]
 8004d84:	68f8      	ldr	r0, [r7, #12]
 8004d86:	f000 f8fb 	bl	8004f80 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d008      	beq.n	8004da4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f042 020e 	orr.w	r2, r2, #14
 8004da0:	601a      	str	r2, [r3, #0]
 8004da2:	e00f      	b.n	8004dc4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f022 0204 	bic.w	r2, r2, #4
 8004db2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f042 020a 	orr.w	r2, r2, #10
 8004dc2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d007      	beq.n	8004de2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ddc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004de0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d007      	beq.n	8004dfa <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004df4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004df8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f042 0201 	orr.w	r2, r2, #1
 8004e08:	601a      	str	r2, [r3, #0]
 8004e0a:	e005      	b.n	8004e18 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004e14:	2302      	movs	r3, #2
 8004e16:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004e18:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3718      	adds	r7, #24
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004e22:	b580      	push	{r7, lr}
 8004e24:	b084      	sub	sp, #16
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e3e:	f003 031f 	and.w	r3, r3, #31
 8004e42:	2204      	movs	r2, #4
 8004e44:	409a      	lsls	r2, r3
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	4013      	ands	r3, r2
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d026      	beq.n	8004e9c <HAL_DMA_IRQHandler+0x7a>
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	f003 0304 	and.w	r3, r3, #4
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d021      	beq.n	8004e9c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0320 	and.w	r3, r3, #32
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d107      	bne.n	8004e76 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f022 0204 	bic.w	r2, r2, #4
 8004e74:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e7a:	f003 021f 	and.w	r2, r3, #31
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e82:	2104      	movs	r1, #4
 8004e84:	fa01 f202 	lsl.w	r2, r1, r2
 8004e88:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d071      	beq.n	8004f76 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004e9a:	e06c      	b.n	8004f76 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ea0:	f003 031f 	and.w	r3, r3, #31
 8004ea4:	2202      	movs	r2, #2
 8004ea6:	409a      	lsls	r2, r3
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	4013      	ands	r3, r2
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d02e      	beq.n	8004f0e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	f003 0302 	and.w	r3, r3, #2
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d029      	beq.n	8004f0e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 0320 	and.w	r3, r3, #32
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d10b      	bne.n	8004ee0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f022 020a 	bic.w	r2, r2, #10
 8004ed6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ee4:	f003 021f 	and.w	r2, r3, #31
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eec:	2102      	movs	r1, #2
 8004eee:	fa01 f202 	lsl.w	r2, r1, r2
 8004ef2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d038      	beq.n	8004f76 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004f0c:	e033      	b.n	8004f76 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f12:	f003 031f 	and.w	r3, r3, #31
 8004f16:	2208      	movs	r2, #8
 8004f18:	409a      	lsls	r2, r3
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d02a      	beq.n	8004f78 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	f003 0308 	and.w	r3, r3, #8
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d025      	beq.n	8004f78 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f022 020e 	bic.w	r2, r2, #14
 8004f3a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f40:	f003 021f 	and.w	r2, r3, #31
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f48:	2101      	movs	r1, #1
 8004f4a:	fa01 f202 	lsl.w	r2, r1, r2
 8004f4e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d004      	beq.n	8004f78 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004f76:	bf00      	nop
 8004f78:	bf00      	nop
}
 8004f7a:	3710      	adds	r7, #16
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b085      	sub	sp, #20
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	607a      	str	r2, [r7, #4]
 8004f8c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f92:	68fa      	ldr	r2, [r7, #12]
 8004f94:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004f96:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d004      	beq.n	8004faa <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004fa8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fae:	f003 021f 	and.w	r2, r3, #31
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fb6:	2101      	movs	r1, #1
 8004fb8:	fa01 f202 	lsl.w	r2, r1, r2
 8004fbc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	683a      	ldr	r2, [r7, #0]
 8004fc4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	2b10      	cmp	r3, #16
 8004fcc:	d108      	bne.n	8004fe0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	68ba      	ldr	r2, [r7, #8]
 8004fdc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004fde:	e007      	b.n	8004ff0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68ba      	ldr	r2, [r7, #8]
 8004fe6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	60da      	str	r2, [r3, #12]
}
 8004ff0:	bf00      	nop
 8004ff2:	3714      	adds	r7, #20
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b087      	sub	sp, #28
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	461a      	mov	r2, r3
 800500a:	4b16      	ldr	r3, [pc, #88]	@ (8005064 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800500c:	429a      	cmp	r2, r3
 800500e:	d802      	bhi.n	8005016 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005010:	4b15      	ldr	r3, [pc, #84]	@ (8005068 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005012:	617b      	str	r3, [r7, #20]
 8005014:	e001      	b.n	800501a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8005016:	4b15      	ldr	r3, [pc, #84]	@ (800506c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005018:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	b2db      	uxtb	r3, r3
 8005024:	3b08      	subs	r3, #8
 8005026:	4a12      	ldr	r2, [pc, #72]	@ (8005070 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005028:	fba2 2303 	umull	r2, r3, r2, r3
 800502c:	091b      	lsrs	r3, r3, #4
 800502e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005034:	089b      	lsrs	r3, r3, #2
 8005036:	009a      	lsls	r2, r3, #2
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	4413      	add	r3, r2
 800503c:	461a      	mov	r2, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a0b      	ldr	r2, [pc, #44]	@ (8005074 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005046:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f003 031f 	and.w	r3, r3, #31
 800504e:	2201      	movs	r2, #1
 8005050:	409a      	lsls	r2, r3
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005056:	bf00      	nop
 8005058:	371c      	adds	r7, #28
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	40020407 	.word	0x40020407
 8005068:	40020800 	.word	0x40020800
 800506c:	40020820 	.word	0x40020820
 8005070:	cccccccd 	.word	0xcccccccd
 8005074:	40020880 	.word	0x40020880

08005078 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005078:	b480      	push	{r7}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	b2db      	uxtb	r3, r3
 8005086:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005088:	68fa      	ldr	r2, [r7, #12]
 800508a:	4b0b      	ldr	r3, [pc, #44]	@ (80050b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800508c:	4413      	add	r3, r2
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	461a      	mov	r2, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a08      	ldr	r2, [pc, #32]	@ (80050bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800509a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	3b01      	subs	r3, #1
 80050a0:	f003 031f 	and.w	r3, r3, #31
 80050a4:	2201      	movs	r2, #1
 80050a6:	409a      	lsls	r2, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80050ac:	bf00      	nop
 80050ae:	3714      	adds	r7, #20
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr
 80050b8:	1000823f 	.word	0x1000823f
 80050bc:	40020940 	.word	0x40020940

080050c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b087      	sub	sp, #28
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80050ca:	2300      	movs	r3, #0
 80050cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80050ce:	e15a      	b.n	8005386 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	2101      	movs	r1, #1
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	fa01 f303 	lsl.w	r3, r1, r3
 80050dc:	4013      	ands	r3, r2
 80050de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	f000 814c 	beq.w	8005380 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	f003 0303 	and.w	r3, r3, #3
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d005      	beq.n	8005100 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80050fc:	2b02      	cmp	r3, #2
 80050fe:	d130      	bne.n	8005162 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	005b      	lsls	r3, r3, #1
 800510a:	2203      	movs	r2, #3
 800510c:	fa02 f303 	lsl.w	r3, r2, r3
 8005110:	43db      	mvns	r3, r3
 8005112:	693a      	ldr	r2, [r7, #16]
 8005114:	4013      	ands	r3, r2
 8005116:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	68da      	ldr	r2, [r3, #12]
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	005b      	lsls	r3, r3, #1
 8005120:	fa02 f303 	lsl.w	r3, r2, r3
 8005124:	693a      	ldr	r2, [r7, #16]
 8005126:	4313      	orrs	r3, r2
 8005128:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	693a      	ldr	r2, [r7, #16]
 800512e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005136:	2201      	movs	r2, #1
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	fa02 f303 	lsl.w	r3, r2, r3
 800513e:	43db      	mvns	r3, r3
 8005140:	693a      	ldr	r2, [r7, #16]
 8005142:	4013      	ands	r3, r2
 8005144:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	091b      	lsrs	r3, r3, #4
 800514c:	f003 0201 	and.w	r2, r3, #1
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	fa02 f303 	lsl.w	r3, r2, r3
 8005156:	693a      	ldr	r2, [r7, #16]
 8005158:	4313      	orrs	r3, r2
 800515a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	693a      	ldr	r2, [r7, #16]
 8005160:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	f003 0303 	and.w	r3, r3, #3
 800516a:	2b03      	cmp	r3, #3
 800516c:	d017      	beq.n	800519e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	005b      	lsls	r3, r3, #1
 8005178:	2203      	movs	r2, #3
 800517a:	fa02 f303 	lsl.w	r3, r2, r3
 800517e:	43db      	mvns	r3, r3
 8005180:	693a      	ldr	r2, [r7, #16]
 8005182:	4013      	ands	r3, r2
 8005184:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	689a      	ldr	r2, [r3, #8]
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	005b      	lsls	r3, r3, #1
 800518e:	fa02 f303 	lsl.w	r3, r2, r3
 8005192:	693a      	ldr	r2, [r7, #16]
 8005194:	4313      	orrs	r3, r2
 8005196:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	693a      	ldr	r2, [r7, #16]
 800519c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	f003 0303 	and.w	r3, r3, #3
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d123      	bne.n	80051f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	08da      	lsrs	r2, r3, #3
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	3208      	adds	r2, #8
 80051b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	f003 0307 	and.w	r3, r3, #7
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	220f      	movs	r2, #15
 80051c2:	fa02 f303 	lsl.w	r3, r2, r3
 80051c6:	43db      	mvns	r3, r3
 80051c8:	693a      	ldr	r2, [r7, #16]
 80051ca:	4013      	ands	r3, r2
 80051cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	691a      	ldr	r2, [r3, #16]
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	f003 0307 	and.w	r3, r3, #7
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	fa02 f303 	lsl.w	r3, r2, r3
 80051de:	693a      	ldr	r2, [r7, #16]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	08da      	lsrs	r2, r3, #3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	3208      	adds	r2, #8
 80051ec:	6939      	ldr	r1, [r7, #16]
 80051ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	005b      	lsls	r3, r3, #1
 80051fc:	2203      	movs	r2, #3
 80051fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005202:	43db      	mvns	r3, r3
 8005204:	693a      	ldr	r2, [r7, #16]
 8005206:	4013      	ands	r3, r2
 8005208:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	f003 0203 	and.w	r2, r3, #3
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	005b      	lsls	r3, r3, #1
 8005216:	fa02 f303 	lsl.w	r3, r2, r3
 800521a:	693a      	ldr	r2, [r7, #16]
 800521c:	4313      	orrs	r3, r2
 800521e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	693a      	ldr	r2, [r7, #16]
 8005224:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800522e:	2b00      	cmp	r3, #0
 8005230:	f000 80a6 	beq.w	8005380 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005234:	4b5b      	ldr	r3, [pc, #364]	@ (80053a4 <HAL_GPIO_Init+0x2e4>)
 8005236:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005238:	4a5a      	ldr	r2, [pc, #360]	@ (80053a4 <HAL_GPIO_Init+0x2e4>)
 800523a:	f043 0301 	orr.w	r3, r3, #1
 800523e:	6613      	str	r3, [r2, #96]	@ 0x60
 8005240:	4b58      	ldr	r3, [pc, #352]	@ (80053a4 <HAL_GPIO_Init+0x2e4>)
 8005242:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005244:	f003 0301 	and.w	r3, r3, #1
 8005248:	60bb      	str	r3, [r7, #8]
 800524a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800524c:	4a56      	ldr	r2, [pc, #344]	@ (80053a8 <HAL_GPIO_Init+0x2e8>)
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	089b      	lsrs	r3, r3, #2
 8005252:	3302      	adds	r3, #2
 8005254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005258:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	f003 0303 	and.w	r3, r3, #3
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	220f      	movs	r2, #15
 8005264:	fa02 f303 	lsl.w	r3, r2, r3
 8005268:	43db      	mvns	r3, r3
 800526a:	693a      	ldr	r2, [r7, #16]
 800526c:	4013      	ands	r3, r2
 800526e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005276:	d01f      	beq.n	80052b8 <HAL_GPIO_Init+0x1f8>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4a4c      	ldr	r2, [pc, #304]	@ (80053ac <HAL_GPIO_Init+0x2ec>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d019      	beq.n	80052b4 <HAL_GPIO_Init+0x1f4>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4a4b      	ldr	r2, [pc, #300]	@ (80053b0 <HAL_GPIO_Init+0x2f0>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d013      	beq.n	80052b0 <HAL_GPIO_Init+0x1f0>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4a4a      	ldr	r2, [pc, #296]	@ (80053b4 <HAL_GPIO_Init+0x2f4>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d00d      	beq.n	80052ac <HAL_GPIO_Init+0x1ec>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4a49      	ldr	r2, [pc, #292]	@ (80053b8 <HAL_GPIO_Init+0x2f8>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d007      	beq.n	80052a8 <HAL_GPIO_Init+0x1e8>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4a48      	ldr	r2, [pc, #288]	@ (80053bc <HAL_GPIO_Init+0x2fc>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d101      	bne.n	80052a4 <HAL_GPIO_Init+0x1e4>
 80052a0:	2305      	movs	r3, #5
 80052a2:	e00a      	b.n	80052ba <HAL_GPIO_Init+0x1fa>
 80052a4:	2306      	movs	r3, #6
 80052a6:	e008      	b.n	80052ba <HAL_GPIO_Init+0x1fa>
 80052a8:	2304      	movs	r3, #4
 80052aa:	e006      	b.n	80052ba <HAL_GPIO_Init+0x1fa>
 80052ac:	2303      	movs	r3, #3
 80052ae:	e004      	b.n	80052ba <HAL_GPIO_Init+0x1fa>
 80052b0:	2302      	movs	r3, #2
 80052b2:	e002      	b.n	80052ba <HAL_GPIO_Init+0x1fa>
 80052b4:	2301      	movs	r3, #1
 80052b6:	e000      	b.n	80052ba <HAL_GPIO_Init+0x1fa>
 80052b8:	2300      	movs	r3, #0
 80052ba:	697a      	ldr	r2, [r7, #20]
 80052bc:	f002 0203 	and.w	r2, r2, #3
 80052c0:	0092      	lsls	r2, r2, #2
 80052c2:	4093      	lsls	r3, r2
 80052c4:	693a      	ldr	r2, [r7, #16]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80052ca:	4937      	ldr	r1, [pc, #220]	@ (80053a8 <HAL_GPIO_Init+0x2e8>)
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	089b      	lsrs	r3, r3, #2
 80052d0:	3302      	adds	r3, #2
 80052d2:	693a      	ldr	r2, [r7, #16]
 80052d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80052d8:	4b39      	ldr	r3, [pc, #228]	@ (80053c0 <HAL_GPIO_Init+0x300>)
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	43db      	mvns	r3, r3
 80052e2:	693a      	ldr	r2, [r7, #16]
 80052e4:	4013      	ands	r3, r2
 80052e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d003      	beq.n	80052fc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80052f4:	693a      	ldr	r2, [r7, #16]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80052fc:	4a30      	ldr	r2, [pc, #192]	@ (80053c0 <HAL_GPIO_Init+0x300>)
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005302:	4b2f      	ldr	r3, [pc, #188]	@ (80053c0 <HAL_GPIO_Init+0x300>)
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	43db      	mvns	r3, r3
 800530c:	693a      	ldr	r2, [r7, #16]
 800530e:	4013      	ands	r3, r2
 8005310:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d003      	beq.n	8005326 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800531e:	693a      	ldr	r2, [r7, #16]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	4313      	orrs	r3, r2
 8005324:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005326:	4a26      	ldr	r2, [pc, #152]	@ (80053c0 <HAL_GPIO_Init+0x300>)
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800532c:	4b24      	ldr	r3, [pc, #144]	@ (80053c0 <HAL_GPIO_Init+0x300>)
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	43db      	mvns	r3, r3
 8005336:	693a      	ldr	r2, [r7, #16]
 8005338:	4013      	ands	r3, r2
 800533a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005344:	2b00      	cmp	r3, #0
 8005346:	d003      	beq.n	8005350 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005348:	693a      	ldr	r2, [r7, #16]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	4313      	orrs	r3, r2
 800534e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005350:	4a1b      	ldr	r2, [pc, #108]	@ (80053c0 <HAL_GPIO_Init+0x300>)
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005356:	4b1a      	ldr	r3, [pc, #104]	@ (80053c0 <HAL_GPIO_Init+0x300>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	43db      	mvns	r3, r3
 8005360:	693a      	ldr	r2, [r7, #16]
 8005362:	4013      	ands	r3, r2
 8005364:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800536e:	2b00      	cmp	r3, #0
 8005370:	d003      	beq.n	800537a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005372:	693a      	ldr	r2, [r7, #16]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	4313      	orrs	r3, r2
 8005378:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800537a:	4a11      	ldr	r2, [pc, #68]	@ (80053c0 <HAL_GPIO_Init+0x300>)
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	3301      	adds	r3, #1
 8005384:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	fa22 f303 	lsr.w	r3, r2, r3
 8005390:	2b00      	cmp	r3, #0
 8005392:	f47f ae9d 	bne.w	80050d0 <HAL_GPIO_Init+0x10>
  }
}
 8005396:	bf00      	nop
 8005398:	bf00      	nop
 800539a:	371c      	adds	r7, #28
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr
 80053a4:	40021000 	.word	0x40021000
 80053a8:	40010000 	.word	0x40010000
 80053ac:	48000400 	.word	0x48000400
 80053b0:	48000800 	.word	0x48000800
 80053b4:	48000c00 	.word	0x48000c00
 80053b8:	48001000 	.word	0x48001000
 80053bc:	48001400 	.word	0x48001400
 80053c0:	40010400 	.word	0x40010400

080053c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b083      	sub	sp, #12
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	460b      	mov	r3, r1
 80053ce:	807b      	strh	r3, [r7, #2]
 80053d0:	4613      	mov	r3, r2
 80053d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80053d4:	787b      	ldrb	r3, [r7, #1]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d003      	beq.n	80053e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80053da:	887a      	ldrh	r2, [r7, #2]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80053e0:	e002      	b.n	80053e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80053e2:	887a      	ldrh	r2, [r7, #2]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80053e8:	bf00      	nop
 80053ea:	370c      	adds	r7, #12
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b082      	sub	sp, #8
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	4603      	mov	r3, r0
 80053fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80053fe:	4b08      	ldr	r3, [pc, #32]	@ (8005420 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005400:	695a      	ldr	r2, [r3, #20]
 8005402:	88fb      	ldrh	r3, [r7, #6]
 8005404:	4013      	ands	r3, r2
 8005406:	2b00      	cmp	r3, #0
 8005408:	d006      	beq.n	8005418 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800540a:	4a05      	ldr	r2, [pc, #20]	@ (8005420 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800540c:	88fb      	ldrh	r3, [r7, #6]
 800540e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005410:	88fb      	ldrh	r3, [r7, #6]
 8005412:	4618      	mov	r0, r3
 8005414:	f000 f806 	bl	8005424 <HAL_GPIO_EXTI_Callback>
  }
}
 8005418:	bf00      	nop
 800541a:	3708      	adds	r7, #8
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}
 8005420:	40010400 	.word	0x40010400

08005424 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	4603      	mov	r3, r0
 800542c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800542e:	bf00      	nop
 8005430:	370c      	adds	r7, #12
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
	...

0800543c <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005444:	2300      	movs	r3, #0
 8005446:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d101      	bne.n	8005452 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e0bb      	b.n	80055ca <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8005458:	b2db      	uxtb	r3, r3
 800545a:	2b05      	cmp	r3, #5
 800545c:	d101      	bne.n	8005462 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e0b3      	b.n	80055ca <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8005468:	b2db      	uxtb	r3, r3
 800546a:	2b02      	cmp	r3, #2
 800546c:	d101      	bne.n	8005472 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e0ab      	b.n	80055ca <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005472:	4b58      	ldr	r3, [pc, #352]	@ (80055d4 <HAL_OPAMP_Init+0x198>)
 8005474:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005476:	4a57      	ldr	r2, [pc, #348]	@ (80055d4 <HAL_OPAMP_Init+0x198>)
 8005478:	f043 0301 	orr.w	r3, r3, #1
 800547c:	6613      	str	r3, [r2, #96]	@ 0x60
 800547e:	4b55      	ldr	r3, [pc, #340]	@ (80055d4 <HAL_OPAMP_Init+0x198>)
 8005480:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005482:	f003 0301 	and.w	r3, r3, #1
 8005486:	60bb      	str	r3, [r7, #8]
 8005488:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8005490:	b2db      	uxtb	r3, r3
 8005492:	2b00      	cmp	r3, #0
 8005494:	d103      	bne.n	800549e <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f7fc fe82 	bl	80021a8 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	2b40      	cmp	r3, #64	@ 0x40
 80054aa:	d003      	beq.n	80054b4 <HAL_OPAMP_Init+0x78>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	2b60      	cmp	r3, #96	@ 0x60
 80054b2:	d133      	bne.n	800551c <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f023 0110 	bic.w	r1, r3, #16
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	430a      	orrs	r2, r1
 80054c8:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	4b41      	ldr	r3, [pc, #260]	@ (80055d8 <HAL_OPAMP_Init+0x19c>)
 80054d2:	4013      	ands	r3, r2
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	6851      	ldr	r1, [r2, #4]
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	6892      	ldr	r2, [r2, #8]
 80054dc:	4311      	orrs	r1, r2
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	6912      	ldr	r2, [r2, #16]
 80054e2:	430a      	orrs	r2, r1
 80054e4:	6879      	ldr	r1, [r7, #4]
 80054e6:	7d09      	ldrb	r1, [r1, #20]
 80054e8:	2901      	cmp	r1, #1
 80054ea:	d102      	bne.n	80054f2 <HAL_OPAMP_Init+0xb6>
 80054ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80054f0:	e000      	b.n	80054f4 <HAL_OPAMP_Init+0xb8>
 80054f2:	2100      	movs	r1, #0
 80054f4:	4311      	orrs	r1, r2
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80054fa:	4311      	orrs	r1, r2
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005500:	4311      	orrs	r1, r2
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005506:	04d2      	lsls	r2, r2, #19
 8005508:	4311      	orrs	r1, r2
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800550e:	0612      	lsls	r2, r2, #24
 8005510:	4311      	orrs	r1, r2
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	6812      	ldr	r2, [r2, #0]
 8005516:	430b      	orrs	r3, r1
 8005518:	6013      	str	r3, [r2, #0]
 800551a:	e035      	b.n	8005588 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f023 0110 	bic.w	r1, r3, #16
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	430a      	orrs	r2, r1
 8005530:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	4b27      	ldr	r3, [pc, #156]	@ (80055d8 <HAL_OPAMP_Init+0x19c>)
 800553a:	4013      	ands	r3, r2
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	6851      	ldr	r1, [r2, #4]
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	6892      	ldr	r2, [r2, #8]
 8005544:	4311      	orrs	r1, r2
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	68d2      	ldr	r2, [r2, #12]
 800554a:	4311      	orrs	r1, r2
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	6912      	ldr	r2, [r2, #16]
 8005550:	430a      	orrs	r2, r1
 8005552:	6879      	ldr	r1, [r7, #4]
 8005554:	7d09      	ldrb	r1, [r1, #20]
 8005556:	2901      	cmp	r1, #1
 8005558:	d102      	bne.n	8005560 <HAL_OPAMP_Init+0x124>
 800555a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800555e:	e000      	b.n	8005562 <HAL_OPAMP_Init+0x126>
 8005560:	2100      	movs	r1, #0
 8005562:	4311      	orrs	r1, r2
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005568:	4311      	orrs	r1, r2
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800556e:	4311      	orrs	r1, r2
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005574:	04d2      	lsls	r2, r2, #19
 8005576:	4311      	orrs	r1, r2
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800557c:	0612      	lsls	r2, r2, #24
 800557e:	4311      	orrs	r1, r2
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	6812      	ldr	r2, [r2, #0]
 8005584:	430b      	orrs	r3, r1
 8005586:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	699b      	ldr	r3, [r3, #24]
 800558e:	2b00      	cmp	r3, #0
 8005590:	db10      	blt.n	80055b4 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	699b      	ldr	r3, [r3, #24]
 8005598:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	699a      	ldr	r2, [r3, #24]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	69db      	ldr	r3, [r3, #28]
 80055a4:	431a      	orrs	r2, r3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a1b      	ldr	r3, [r3, #32]
 80055aa:	431a      	orrs	r2, r3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	430a      	orrs	r2, r1
 80055b2:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d103      	bne.n	80055c8 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 80055c8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3710      	adds	r7, #16
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	40021000 	.word	0x40021000
 80055d8:	e0003e11 	.word	0xe0003e11

080055dc <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 80055dc:	b480      	push	{r7}
 80055de:	b085      	sub	sp, #20
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055e4:	2300      	movs	r3, #0
 80055e6:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d102      	bne.n	80055f4 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	73fb      	strb	r3, [r7, #15]
 80055f2:	e01d      	b.n	8005630 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	2b05      	cmp	r3, #5
 80055fe:	d102      	bne.n	8005606 <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	73fb      	strb	r3, [r7, #15]
 8005604:	e014      	b.n	8005630 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800560c:	b2db      	uxtb	r3, r3
 800560e:	2b01      	cmp	r3, #1
 8005610:	d10c      	bne.n	800562c <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f042 0201 	orr.w	r2, r2, #1
 8005620:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2204      	movs	r2, #4
 8005626:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 800562a:	e001      	b.n	8005630 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 8005630:	7bfb      	ldrb	r3, [r7, #15]
}
 8005632:	4618      	mov	r0, r3
 8005634:	3714      	adds	r7, #20
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr

0800563e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800563e:	b580      	push	{r7, lr}
 8005640:	b084      	sub	sp, #16
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d101      	bne.n	8005650 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	e0c0      	b.n	80057d2 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8005656:	b2db      	uxtb	r3, r3
 8005658:	2b00      	cmp	r3, #0
 800565a:	d106      	bne.n	800566a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f009 fd1d 	bl	800f0a4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2203      	movs	r2, #3
 800566e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4618      	mov	r0, r3
 8005678:	f005 fb67 	bl	800ad4a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800567c:	2300      	movs	r3, #0
 800567e:	73fb      	strb	r3, [r7, #15]
 8005680:	e03e      	b.n	8005700 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005682:	7bfa      	ldrb	r2, [r7, #15]
 8005684:	6879      	ldr	r1, [r7, #4]
 8005686:	4613      	mov	r3, r2
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	4413      	add	r3, r2
 800568c:	00db      	lsls	r3, r3, #3
 800568e:	440b      	add	r3, r1
 8005690:	3311      	adds	r3, #17
 8005692:	2201      	movs	r2, #1
 8005694:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005696:	7bfa      	ldrb	r2, [r7, #15]
 8005698:	6879      	ldr	r1, [r7, #4]
 800569a:	4613      	mov	r3, r2
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	4413      	add	r3, r2
 80056a0:	00db      	lsls	r3, r3, #3
 80056a2:	440b      	add	r3, r1
 80056a4:	3310      	adds	r3, #16
 80056a6:	7bfa      	ldrb	r2, [r7, #15]
 80056a8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80056aa:	7bfa      	ldrb	r2, [r7, #15]
 80056ac:	6879      	ldr	r1, [r7, #4]
 80056ae:	4613      	mov	r3, r2
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	4413      	add	r3, r2
 80056b4:	00db      	lsls	r3, r3, #3
 80056b6:	440b      	add	r3, r1
 80056b8:	3313      	adds	r3, #19
 80056ba:	2200      	movs	r2, #0
 80056bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80056be:	7bfa      	ldrb	r2, [r7, #15]
 80056c0:	6879      	ldr	r1, [r7, #4]
 80056c2:	4613      	mov	r3, r2
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	4413      	add	r3, r2
 80056c8:	00db      	lsls	r3, r3, #3
 80056ca:	440b      	add	r3, r1
 80056cc:	3320      	adds	r3, #32
 80056ce:	2200      	movs	r2, #0
 80056d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80056d2:	7bfa      	ldrb	r2, [r7, #15]
 80056d4:	6879      	ldr	r1, [r7, #4]
 80056d6:	4613      	mov	r3, r2
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	4413      	add	r3, r2
 80056dc:	00db      	lsls	r3, r3, #3
 80056de:	440b      	add	r3, r1
 80056e0:	3324      	adds	r3, #36	@ 0x24
 80056e2:	2200      	movs	r2, #0
 80056e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80056e6:	7bfb      	ldrb	r3, [r7, #15]
 80056e8:	6879      	ldr	r1, [r7, #4]
 80056ea:	1c5a      	adds	r2, r3, #1
 80056ec:	4613      	mov	r3, r2
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	4413      	add	r3, r2
 80056f2:	00db      	lsls	r3, r3, #3
 80056f4:	440b      	add	r3, r1
 80056f6:	2200      	movs	r2, #0
 80056f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056fa:	7bfb      	ldrb	r3, [r7, #15]
 80056fc:	3301      	adds	r3, #1
 80056fe:	73fb      	strb	r3, [r7, #15]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	791b      	ldrb	r3, [r3, #4]
 8005704:	7bfa      	ldrb	r2, [r7, #15]
 8005706:	429a      	cmp	r2, r3
 8005708:	d3bb      	bcc.n	8005682 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800570a:	2300      	movs	r3, #0
 800570c:	73fb      	strb	r3, [r7, #15]
 800570e:	e044      	b.n	800579a <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005710:	7bfa      	ldrb	r2, [r7, #15]
 8005712:	6879      	ldr	r1, [r7, #4]
 8005714:	4613      	mov	r3, r2
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	4413      	add	r3, r2
 800571a:	00db      	lsls	r3, r3, #3
 800571c:	440b      	add	r3, r1
 800571e:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8005722:	2200      	movs	r2, #0
 8005724:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005726:	7bfa      	ldrb	r2, [r7, #15]
 8005728:	6879      	ldr	r1, [r7, #4]
 800572a:	4613      	mov	r3, r2
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	4413      	add	r3, r2
 8005730:	00db      	lsls	r3, r3, #3
 8005732:	440b      	add	r3, r1
 8005734:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005738:	7bfa      	ldrb	r2, [r7, #15]
 800573a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800573c:	7bfa      	ldrb	r2, [r7, #15]
 800573e:	6879      	ldr	r1, [r7, #4]
 8005740:	4613      	mov	r3, r2
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	4413      	add	r3, r2
 8005746:	00db      	lsls	r3, r3, #3
 8005748:	440b      	add	r3, r1
 800574a:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800574e:	2200      	movs	r2, #0
 8005750:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005752:	7bfa      	ldrb	r2, [r7, #15]
 8005754:	6879      	ldr	r1, [r7, #4]
 8005756:	4613      	mov	r3, r2
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	4413      	add	r3, r2
 800575c:	00db      	lsls	r3, r3, #3
 800575e:	440b      	add	r3, r1
 8005760:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8005764:	2200      	movs	r2, #0
 8005766:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005768:	7bfa      	ldrb	r2, [r7, #15]
 800576a:	6879      	ldr	r1, [r7, #4]
 800576c:	4613      	mov	r3, r2
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	4413      	add	r3, r2
 8005772:	00db      	lsls	r3, r3, #3
 8005774:	440b      	add	r3, r1
 8005776:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800577a:	2200      	movs	r2, #0
 800577c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800577e:	7bfa      	ldrb	r2, [r7, #15]
 8005780:	6879      	ldr	r1, [r7, #4]
 8005782:	4613      	mov	r3, r2
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	4413      	add	r3, r2
 8005788:	00db      	lsls	r3, r3, #3
 800578a:	440b      	add	r3, r1
 800578c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005790:	2200      	movs	r2, #0
 8005792:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005794:	7bfb      	ldrb	r3, [r7, #15]
 8005796:	3301      	adds	r3, #1
 8005798:	73fb      	strb	r3, [r7, #15]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	791b      	ldrb	r3, [r3, #4]
 800579e:	7bfa      	ldrb	r2, [r7, #15]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d3b5      	bcc.n	8005710 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6818      	ldr	r0, [r3, #0]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	3304      	adds	r3, #4
 80057ac:	e893 0006 	ldmia.w	r3, {r1, r2}
 80057b0:	f005 fae6 	bl	800ad80 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2201      	movs	r2, #1
 80057be:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	7a9b      	ldrb	r3, [r3, #10]
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d102      	bne.n	80057d0 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f001 fc40 	bl	8007050 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3710      	adds	r7, #16
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}

080057da <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80057da:	b580      	push	{r7, lr}
 80057dc:	b082      	sub	sp, #8
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d101      	bne.n	80057f0 <HAL_PCD_Start+0x16>
 80057ec:	2302      	movs	r3, #2
 80057ee:	e012      	b.n	8005816 <HAL_PCD_Start+0x3c>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4618      	mov	r0, r3
 80057fe:	f005 fa8d 	bl	800ad1c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4618      	mov	r0, r3
 8005808:	f007 fd4d 	bl	800d2a6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005814:	2300      	movs	r3, #0
}
 8005816:	4618      	mov	r0, r3
 8005818:	3708      	adds	r7, #8
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}

0800581e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800581e:	b580      	push	{r7, lr}
 8005820:	b084      	sub	sp, #16
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4618      	mov	r0, r3
 800582c:	f007 fd52 	bl	800d2d4 <USB_ReadInterrupts>
 8005830:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005838:	2b00      	cmp	r3, #0
 800583a:	d003      	beq.n	8005844 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f000 fb04 	bl	8005e4a <PCD_EP_ISR_Handler>

    return;
 8005842:	e110      	b.n	8005a66 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800584a:	2b00      	cmp	r3, #0
 800584c:	d013      	beq.n	8005876 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005856:	b29a      	uxth	r2, r3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005860:	b292      	uxth	r2, r2
 8005862:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f009 fcad 	bl	800f1c6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800586c:	2100      	movs	r1, #0
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f000 f8fc 	bl	8005a6c <HAL_PCD_SetAddress>

    return;
 8005874:	e0f7      	b.n	8005a66 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800587c:	2b00      	cmp	r3, #0
 800587e:	d00c      	beq.n	800589a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005888:	b29a      	uxth	r2, r3
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005892:	b292      	uxth	r2, r2
 8005894:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005898:	e0e5      	b.n	8005a66 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d00c      	beq.n	80058be <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80058ac:	b29a      	uxth	r2, r3
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80058b6:	b292      	uxth	r2, r2
 80058b8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80058bc:	e0d3      	b.n	8005a66 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d034      	beq.n	8005932 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80058d0:	b29a      	uxth	r2, r3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f022 0204 	bic.w	r2, r2, #4
 80058da:	b292      	uxth	r2, r2
 80058dc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80058e8:	b29a      	uxth	r2, r3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f022 0208 	bic.w	r2, r2, #8
 80058f2:	b292      	uxth	r2, r2
 80058f4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d107      	bne.n	8005912 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800590a:	2100      	movs	r1, #0
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f009 fe4d 	bl	800f5ac <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f009 fc90 	bl	800f238 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005920:	b29a      	uxth	r2, r3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800592a:	b292      	uxth	r2, r2
 800592c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005930:	e099      	b.n	8005a66 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005938:	2b00      	cmp	r3, #0
 800593a:	d027      	beq.n	800598c <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005944:	b29a      	uxth	r2, r3
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f042 0208 	orr.w	r2, r2, #8
 800594e:	b292      	uxth	r2, r2
 8005950:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800595c:	b29a      	uxth	r2, r3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005966:	b292      	uxth	r2, r2
 8005968:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005974:	b29a      	uxth	r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f042 0204 	orr.w	r2, r2, #4
 800597e:	b292      	uxth	r2, r2
 8005980:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f009 fc3d 	bl	800f204 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800598a:	e06c      	b.n	8005a66 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005992:	2b00      	cmp	r3, #0
 8005994:	d040      	beq.n	8005a18 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800599e:	b29a      	uxth	r2, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80059a8:	b292      	uxth	r2, r2
 80059aa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d12b      	bne.n	8005a10 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80059c0:	b29a      	uxth	r2, r3
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f042 0204 	orr.w	r2, r2, #4
 80059ca:	b292      	uxth	r2, r2
 80059cc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80059d8:	b29a      	uxth	r2, r3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f042 0208 	orr.w	r2, r2, #8
 80059e2:	b292      	uxth	r2, r2
 80059e4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	089b      	lsrs	r3, r3, #2
 80059fc:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005a06:	2101      	movs	r1, #1
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f009 fdcf 	bl	800f5ac <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8005a0e:	e02a      	b.n	8005a66 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f009 fbf7 	bl	800f204 <HAL_PCD_SuspendCallback>
    return;
 8005a16:	e026      	b.n	8005a66 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d00f      	beq.n	8005a42 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005a2a:	b29a      	uxth	r2, r3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005a34:	b292      	uxth	r2, r2
 8005a36:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f009 fbb5 	bl	800f1aa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005a40:	e011      	b.n	8005a66 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d00c      	beq.n	8005a66 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005a54:	b29a      	uxth	r2, r3
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005a5e:	b292      	uxth	r2, r2
 8005a60:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005a64:	bf00      	nop
  }
}
 8005a66:	3710      	adds	r7, #16
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b082      	sub	sp, #8
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	460b      	mov	r3, r1
 8005a76:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d101      	bne.n	8005a86 <HAL_PCD_SetAddress+0x1a>
 8005a82:	2302      	movs	r3, #2
 8005a84:	e012      	b.n	8005aac <HAL_PCD_SetAddress+0x40>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	78fa      	ldrb	r2, [r7, #3]
 8005a92:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	78fa      	ldrb	r2, [r7, #3]
 8005a9a:	4611      	mov	r1, r2
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f007 fbee 	bl	800d27e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005aaa:	2300      	movs	r3, #0
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3708      	adds	r7, #8
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	4608      	mov	r0, r1
 8005abe:	4611      	mov	r1, r2
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	70fb      	strb	r3, [r7, #3]
 8005ac6:	460b      	mov	r3, r1
 8005ac8:	803b      	strh	r3, [r7, #0]
 8005aca:	4613      	mov	r3, r2
 8005acc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005ad2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	da0e      	bge.n	8005af8 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ada:	78fb      	ldrb	r3, [r7, #3]
 8005adc:	f003 0207 	and.w	r2, r3, #7
 8005ae0:	4613      	mov	r3, r2
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	4413      	add	r3, r2
 8005ae6:	00db      	lsls	r3, r3, #3
 8005ae8:	3310      	adds	r3, #16
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	4413      	add	r3, r2
 8005aee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2201      	movs	r2, #1
 8005af4:	705a      	strb	r2, [r3, #1]
 8005af6:	e00e      	b.n	8005b16 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005af8:	78fb      	ldrb	r3, [r7, #3]
 8005afa:	f003 0207 	and.w	r2, r3, #7
 8005afe:	4613      	mov	r3, r2
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	4413      	add	r3, r2
 8005b04:	00db      	lsls	r3, r3, #3
 8005b06:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	4413      	add	r3, r2
 8005b0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2200      	movs	r2, #0
 8005b14:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005b16:	78fb      	ldrb	r3, [r7, #3]
 8005b18:	f003 0307 	and.w	r3, r3, #7
 8005b1c:	b2da      	uxtb	r2, r3
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005b22:	883a      	ldrh	r2, [r7, #0]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	78ba      	ldrb	r2, [r7, #2]
 8005b2c:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005b2e:	78bb      	ldrb	r3, [r7, #2]
 8005b30:	2b02      	cmp	r3, #2
 8005b32:	d102      	bne.n	8005b3a <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2200      	movs	r2, #0
 8005b38:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d101      	bne.n	8005b48 <HAL_PCD_EP_Open+0x94>
 8005b44:	2302      	movs	r3, #2
 8005b46:	e00e      	b.n	8005b66 <HAL_PCD_EP_Open+0xb2>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	68f9      	ldr	r1, [r7, #12]
 8005b56:	4618      	mov	r0, r3
 8005b58:	f005 f930 	bl	800adbc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8005b64:	7afb      	ldrb	r3, [r7, #11]
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3710      	adds	r7, #16
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}

08005b6e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005b6e:	b580      	push	{r7, lr}
 8005b70:	b084      	sub	sp, #16
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
 8005b76:	460b      	mov	r3, r1
 8005b78:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005b7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	da0e      	bge.n	8005ba0 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b82:	78fb      	ldrb	r3, [r7, #3]
 8005b84:	f003 0207 	and.w	r2, r3, #7
 8005b88:	4613      	mov	r3, r2
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	4413      	add	r3, r2
 8005b8e:	00db      	lsls	r3, r3, #3
 8005b90:	3310      	adds	r3, #16
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	4413      	add	r3, r2
 8005b96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	705a      	strb	r2, [r3, #1]
 8005b9e:	e00e      	b.n	8005bbe <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ba0:	78fb      	ldrb	r3, [r7, #3]
 8005ba2:	f003 0207 	and.w	r2, r3, #7
 8005ba6:	4613      	mov	r3, r2
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	4413      	add	r3, r2
 8005bac:	00db      	lsls	r3, r3, #3
 8005bae:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	4413      	add	r3, r2
 8005bb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005bbe:	78fb      	ldrb	r3, [r7, #3]
 8005bc0:	f003 0307 	and.w	r3, r3, #7
 8005bc4:	b2da      	uxtb	r2, r3
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d101      	bne.n	8005bd8 <HAL_PCD_EP_Close+0x6a>
 8005bd4:	2302      	movs	r3, #2
 8005bd6:	e00e      	b.n	8005bf6 <HAL_PCD_EP_Close+0x88>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	68f9      	ldr	r1, [r7, #12]
 8005be6:	4618      	mov	r0, r3
 8005be8:	f005 fcac 	bl	800b544 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3710      	adds	r7, #16
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}

08005bfe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005bfe:	b580      	push	{r7, lr}
 8005c00:	b086      	sub	sp, #24
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	60f8      	str	r0, [r7, #12]
 8005c06:	607a      	str	r2, [r7, #4]
 8005c08:	603b      	str	r3, [r7, #0]
 8005c0a:	460b      	mov	r3, r1
 8005c0c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005c0e:	7afb      	ldrb	r3, [r7, #11]
 8005c10:	f003 0207 	and.w	r2, r3, #7
 8005c14:	4613      	mov	r3, r2
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	4413      	add	r3, r2
 8005c1a:	00db      	lsls	r3, r3, #3
 8005c1c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005c20:	68fa      	ldr	r2, [r7, #12]
 8005c22:	4413      	add	r3, r2
 8005c24:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	683a      	ldr	r2, [r7, #0]
 8005c30:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	2200      	movs	r2, #0
 8005c36:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c3e:	7afb      	ldrb	r3, [r7, #11]
 8005c40:	f003 0307 	and.w	r3, r3, #7
 8005c44:	b2da      	uxtb	r2, r3
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	6979      	ldr	r1, [r7, #20]
 8005c50:	4618      	mov	r0, r3
 8005c52:	f005 fe64 	bl	800b91e <USB_EPStartXfer>

  return HAL_OK;
 8005c56:	2300      	movs	r3, #0
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3718      	adds	r7, #24
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b083      	sub	sp, #12
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	460b      	mov	r3, r1
 8005c6a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005c6c:	78fb      	ldrb	r3, [r7, #3]
 8005c6e:	f003 0207 	and.w	r2, r3, #7
 8005c72:	6879      	ldr	r1, [r7, #4]
 8005c74:	4613      	mov	r3, r2
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	4413      	add	r3, r2
 8005c7a:	00db      	lsls	r3, r3, #3
 8005c7c:	440b      	add	r3, r1
 8005c7e:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8005c82:	681b      	ldr	r3, [r3, #0]
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	370c      	adds	r7, #12
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr

08005c90 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b086      	sub	sp, #24
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	60f8      	str	r0, [r7, #12]
 8005c98:	607a      	str	r2, [r7, #4]
 8005c9a:	603b      	str	r3, [r7, #0]
 8005c9c:	460b      	mov	r3, r1
 8005c9e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ca0:	7afb      	ldrb	r3, [r7, #11]
 8005ca2:	f003 0207 	and.w	r2, r3, #7
 8005ca6:	4613      	mov	r3, r2
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	4413      	add	r3, r2
 8005cac:	00db      	lsls	r3, r3, #3
 8005cae:	3310      	adds	r3, #16
 8005cb0:	68fa      	ldr	r2, [r7, #12]
 8005cb2:	4413      	add	r3, r2
 8005cb4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	683a      	ldr	r2, [r7, #0]
 8005cc0:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	683a      	ldr	r2, [r7, #0]
 8005cce:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	2201      	movs	r2, #1
 8005cda:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005cdc:	7afb      	ldrb	r3, [r7, #11]
 8005cde:	f003 0307 	and.w	r3, r3, #7
 8005ce2:	b2da      	uxtb	r2, r3
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	6979      	ldr	r1, [r7, #20]
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f005 fe15 	bl	800b91e <USB_EPStartXfer>

  return HAL_OK;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3718      	adds	r7, #24
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}

08005cfe <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005cfe:	b580      	push	{r7, lr}
 8005d00:	b084      	sub	sp, #16
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
 8005d06:	460b      	mov	r3, r1
 8005d08:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005d0a:	78fb      	ldrb	r3, [r7, #3]
 8005d0c:	f003 0307 	and.w	r3, r3, #7
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	7912      	ldrb	r2, [r2, #4]
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d901      	bls.n	8005d1c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e03e      	b.n	8005d9a <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005d1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	da0e      	bge.n	8005d42 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d24:	78fb      	ldrb	r3, [r7, #3]
 8005d26:	f003 0207 	and.w	r2, r3, #7
 8005d2a:	4613      	mov	r3, r2
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	4413      	add	r3, r2
 8005d30:	00db      	lsls	r3, r3, #3
 8005d32:	3310      	adds	r3, #16
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	4413      	add	r3, r2
 8005d38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	705a      	strb	r2, [r3, #1]
 8005d40:	e00c      	b.n	8005d5c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005d42:	78fa      	ldrb	r2, [r7, #3]
 8005d44:	4613      	mov	r3, r2
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	4413      	add	r3, r2
 8005d4a:	00db      	lsls	r3, r3, #3
 8005d4c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	4413      	add	r3, r2
 8005d54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d62:	78fb      	ldrb	r3, [r7, #3]
 8005d64:	f003 0307 	and.w	r3, r3, #7
 8005d68:	b2da      	uxtb	r2, r3
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d101      	bne.n	8005d7c <HAL_PCD_EP_SetStall+0x7e>
 8005d78:	2302      	movs	r3, #2
 8005d7a:	e00e      	b.n	8005d9a <HAL_PCD_EP_SetStall+0x9c>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68f9      	ldr	r1, [r7, #12]
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f007 f978 	bl	800d080 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005d98:	2300      	movs	r3, #0
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3710      	adds	r7, #16
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}

08005da2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005da2:	b580      	push	{r7, lr}
 8005da4:	b084      	sub	sp, #16
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
 8005daa:	460b      	mov	r3, r1
 8005dac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005dae:	78fb      	ldrb	r3, [r7, #3]
 8005db0:	f003 030f 	and.w	r3, r3, #15
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	7912      	ldrb	r2, [r2, #4]
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d901      	bls.n	8005dc0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e040      	b.n	8005e42 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005dc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	da0e      	bge.n	8005de6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005dc8:	78fb      	ldrb	r3, [r7, #3]
 8005dca:	f003 0207 	and.w	r2, r3, #7
 8005dce:	4613      	mov	r3, r2
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	4413      	add	r3, r2
 8005dd4:	00db      	lsls	r3, r3, #3
 8005dd6:	3310      	adds	r3, #16
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	4413      	add	r3, r2
 8005ddc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2201      	movs	r2, #1
 8005de2:	705a      	strb	r2, [r3, #1]
 8005de4:	e00e      	b.n	8005e04 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005de6:	78fb      	ldrb	r3, [r7, #3]
 8005de8:	f003 0207 	and.w	r2, r3, #7
 8005dec:	4613      	mov	r3, r2
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	4413      	add	r3, r2
 8005df2:	00db      	lsls	r3, r3, #3
 8005df4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	4413      	add	r3, r2
 8005dfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2200      	movs	r2, #0
 8005e02:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2200      	movs	r2, #0
 8005e08:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005e0a:	78fb      	ldrb	r3, [r7, #3]
 8005e0c:	f003 0307 	and.w	r3, r3, #7
 8005e10:	b2da      	uxtb	r2, r3
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d101      	bne.n	8005e24 <HAL_PCD_EP_ClrStall+0x82>
 8005e20:	2302      	movs	r3, #2
 8005e22:	e00e      	b.n	8005e42 <HAL_PCD_EP_ClrStall+0xa0>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	68f9      	ldr	r1, [r7, #12]
 8005e32:	4618      	mov	r0, r3
 8005e34:	f007 f975 	bl	800d122 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005e40:	2300      	movs	r3, #0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3710      	adds	r7, #16
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}

08005e4a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005e4a:	b580      	push	{r7, lr}
 8005e4c:	b096      	sub	sp, #88	@ 0x58
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005e52:	e3ad      	b.n	80065b0 <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005e5c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005e60:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	f003 030f 	and.w	r3, r3, #15
 8005e6a:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8005e6e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	f040 816f 	bne.w	8006156 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005e78:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005e7c:	f003 0310 	and.w	r3, r3, #16
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d14c      	bne.n	8005f1e <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	881b      	ldrh	r3, [r3, #0]
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8005e90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e94:	81fb      	strh	r3, [r7, #14]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	89fb      	ldrh	r3, [r7, #14]
 8005e9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ea0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	3310      	adds	r3, #16
 8005eac:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	461a      	mov	r2, r3
 8005eba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	00db      	lsls	r3, r3, #3
 8005ec0:	4413      	add	r3, r2
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	6812      	ldr	r2, [r2, #0]
 8005ec6:	4413      	add	r3, r2
 8005ec8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005ecc:	881b      	ldrh	r3, [r3, #0]
 8005ece:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005ed2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ed4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005ed6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ed8:	695a      	ldr	r2, [r3, #20]
 8005eda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005edc:	69db      	ldr	r3, [r3, #28]
 8005ede:	441a      	add	r2, r3
 8005ee0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ee2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005ee4:	2100      	movs	r1, #0
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f009 f945 	bl	800f176 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	7b1b      	ldrb	r3, [r3, #12]
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	f000 835c 	beq.w	80065b0 <PCD_EP_ISR_Handler+0x766>
 8005ef8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005efa:	699b      	ldr	r3, [r3, #24]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	f040 8357 	bne.w	80065b0 <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	7b1b      	ldrb	r3, [r3, #12]
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005f0c:	b2da      	uxtb	r2, r3
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	731a      	strb	r2, [r3, #12]
 8005f1c:	e348      	b.n	80065b0 <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005f24:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	881b      	ldrh	r3, [r3, #0]
 8005f2c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005f30:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005f34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d032      	beq.n	8005fa2 <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	461a      	mov	r2, r3
 8005f48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	00db      	lsls	r3, r3, #3
 8005f4e:	4413      	add	r3, r2
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	6812      	ldr	r2, [r2, #0]
 8005f54:	4413      	add	r3, r2
 8005f56:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005f5a:	881b      	ldrh	r3, [r3, #0]
 8005f5c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005f60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f62:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6818      	ldr	r0, [r3, #0]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8005f6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f70:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005f72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f74:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005f76:	b29b      	uxth	r3, r3
 8005f78:	f007 f9fe 	bl	800d378 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	881b      	ldrh	r3, [r3, #0]
 8005f82:	b29a      	uxth	r2, r3
 8005f84:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005f88:	4013      	ands	r3, r2
 8005f8a:	823b      	strh	r3, [r7, #16]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	8a3a      	ldrh	r2, [r7, #16]
 8005f92:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005f96:	b292      	uxth	r2, r2
 8005f98:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f009 f8be 	bl	800f11c <HAL_PCD_SetupStageCallback>
 8005fa0:	e306      	b.n	80065b0 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005fa2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	f280 8302 	bge.w	80065b0 <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	881b      	ldrh	r3, [r3, #0]
 8005fb2:	b29a      	uxth	r2, r3
 8005fb4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005fb8:	4013      	ands	r3, r2
 8005fba:	83fb      	strh	r3, [r7, #30]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	8bfa      	ldrh	r2, [r7, #30]
 8005fc2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005fc6:	b292      	uxth	r2, r2
 8005fc8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	00db      	lsls	r3, r3, #3
 8005fdc:	4413      	add	r3, r2
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	6812      	ldr	r2, [r2, #0]
 8005fe2:	4413      	add	r3, r2
 8005fe4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005fe8:	881b      	ldrh	r3, [r3, #0]
 8005fea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005fee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ff0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005ff2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ff4:	69db      	ldr	r3, [r3, #28]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d019      	beq.n	800602e <PCD_EP_ISR_Handler+0x1e4>
 8005ffa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ffc:	695b      	ldr	r3, [r3, #20]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d015      	beq.n	800602e <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6818      	ldr	r0, [r3, #0]
 8006006:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006008:	6959      	ldr	r1, [r3, #20]
 800600a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800600c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800600e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006010:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006012:	b29b      	uxth	r3, r3
 8006014:	f007 f9b0 	bl	800d378 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8006018:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800601a:	695a      	ldr	r2, [r3, #20]
 800601c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800601e:	69db      	ldr	r3, [r3, #28]
 8006020:	441a      	add	r2, r3
 8006022:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006024:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8006026:	2100      	movs	r1, #0
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f009 f889 	bl	800f140 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	881b      	ldrh	r3, [r3, #0]
 8006034:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8006038:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800603c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006040:	2b00      	cmp	r3, #0
 8006042:	f040 82b5 	bne.w	80065b0 <PCD_EP_ISR_Handler+0x766>
 8006046:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800604a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800604e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006052:	f000 82ad 	beq.w	80065b0 <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	61bb      	str	r3, [r7, #24]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006064:	b29b      	uxth	r3, r3
 8006066:	461a      	mov	r2, r3
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	4413      	add	r3, r2
 800606c:	61bb      	str	r3, [r7, #24]
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006074:	617b      	str	r3, [r7, #20]
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	881b      	ldrh	r3, [r3, #0]
 800607a:	b29b      	uxth	r3, r3
 800607c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006080:	b29a      	uxth	r2, r3
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	801a      	strh	r2, [r3, #0]
 8006086:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	2b3e      	cmp	r3, #62	@ 0x3e
 800608c:	d91d      	bls.n	80060ca <PCD_EP_ISR_Handler+0x280>
 800608e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	095b      	lsrs	r3, r3, #5
 8006094:	647b      	str	r3, [r7, #68]	@ 0x44
 8006096:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006098:	691b      	ldr	r3, [r3, #16]
 800609a:	f003 031f 	and.w	r3, r3, #31
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d102      	bne.n	80060a8 <PCD_EP_ISR_Handler+0x25e>
 80060a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80060a4:	3b01      	subs	r3, #1
 80060a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	881b      	ldrh	r3, [r3, #0]
 80060ac:	b29a      	uxth	r2, r3
 80060ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	029b      	lsls	r3, r3, #10
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	4313      	orrs	r3, r2
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060c2:	b29a      	uxth	r2, r3
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	801a      	strh	r2, [r3, #0]
 80060c8:	e026      	b.n	8006118 <PCD_EP_ISR_Handler+0x2ce>
 80060ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060cc:	691b      	ldr	r3, [r3, #16]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d10a      	bne.n	80060e8 <PCD_EP_ISR_Handler+0x29e>
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	881b      	ldrh	r3, [r3, #0]
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060e0:	b29a      	uxth	r2, r3
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	801a      	strh	r2, [r3, #0]
 80060e6:	e017      	b.n	8006118 <PCD_EP_ISR_Handler+0x2ce>
 80060e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060ea:	691b      	ldr	r3, [r3, #16]
 80060ec:	085b      	lsrs	r3, r3, #1
 80060ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80060f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060f2:	691b      	ldr	r3, [r3, #16]
 80060f4:	f003 0301 	and.w	r3, r3, #1
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d002      	beq.n	8006102 <PCD_EP_ISR_Handler+0x2b8>
 80060fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80060fe:	3301      	adds	r3, #1
 8006100:	647b      	str	r3, [r7, #68]	@ 0x44
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	881b      	ldrh	r3, [r3, #0]
 8006106:	b29a      	uxth	r2, r3
 8006108:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800610a:	b29b      	uxth	r3, r3
 800610c:	029b      	lsls	r3, r3, #10
 800610e:	b29b      	uxth	r3, r3
 8006110:	4313      	orrs	r3, r2
 8006112:	b29a      	uxth	r2, r3
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	881b      	ldrh	r3, [r3, #0]
 800611e:	b29b      	uxth	r3, r3
 8006120:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006124:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006128:	827b      	strh	r3, [r7, #18]
 800612a:	8a7b      	ldrh	r3, [r7, #18]
 800612c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006130:	827b      	strh	r3, [r7, #18]
 8006132:	8a7b      	ldrh	r3, [r7, #18]
 8006134:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006138:	827b      	strh	r3, [r7, #18]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	8a7b      	ldrh	r3, [r7, #18]
 8006140:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006144:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006148:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800614c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006150:	b29b      	uxth	r3, r3
 8006152:	8013      	strh	r3, [r2, #0]
 8006154:	e22c      	b.n	80065b0 <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	461a      	mov	r2, r3
 800615c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	4413      	add	r3, r2
 8006164:	881b      	ldrh	r3, [r3, #0]
 8006166:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800616a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800616e:	2b00      	cmp	r3, #0
 8006170:	f280 80f6 	bge.w	8006360 <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	461a      	mov	r2, r3
 800617a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	4413      	add	r3, r2
 8006182:	881b      	ldrh	r3, [r3, #0]
 8006184:	b29a      	uxth	r2, r3
 8006186:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800618a:	4013      	ands	r3, r2
 800618c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	461a      	mov	r2, r3
 8006196:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	4413      	add	r3, r2
 800619e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80061a2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80061a6:	b292      	uxth	r2, r2
 80061a8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80061aa:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80061ae:	4613      	mov	r3, r2
 80061b0:	009b      	lsls	r3, r3, #2
 80061b2:	4413      	add	r3, r2
 80061b4:	00db      	lsls	r3, r3, #3
 80061b6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	4413      	add	r3, r2
 80061be:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80061c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061c2:	7b1b      	ldrb	r3, [r3, #12]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d123      	bne.n	8006210 <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	461a      	mov	r2, r3
 80061d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	00db      	lsls	r3, r3, #3
 80061da:	4413      	add	r3, r2
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	6812      	ldr	r2, [r2, #0]
 80061e0:	4413      	add	r3, r2
 80061e2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80061e6:	881b      	ldrh	r3, [r3, #0]
 80061e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061ec:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80061f0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	f000 808e 	beq.w	8006316 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6818      	ldr	r0, [r3, #0]
 80061fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006200:	6959      	ldr	r1, [r3, #20]
 8006202:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006204:	88da      	ldrh	r2, [r3, #6]
 8006206:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800620a:	f007 f8b5 	bl	800d378 <USB_ReadPMA>
 800620e:	e082      	b.n	8006316 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8006210:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006212:	78db      	ldrb	r3, [r3, #3]
 8006214:	2b02      	cmp	r3, #2
 8006216:	d10a      	bne.n	800622e <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8006218:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800621c:	461a      	mov	r2, r3
 800621e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 f9d3 	bl	80065cc <HAL_PCD_EP_DB_Receive>
 8006226:	4603      	mov	r3, r0
 8006228:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 800622c:	e073      	b.n	8006316 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	461a      	mov	r2, r3
 8006234:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	4413      	add	r3, r2
 800623c:	881b      	ldrh	r3, [r3, #0]
 800623e:	b29b      	uxth	r3, r3
 8006240:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006244:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006248:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	461a      	mov	r2, r3
 8006252:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	441a      	add	r2, r3
 800625a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800625e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006262:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006266:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800626a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800626e:	b29b      	uxth	r3, r3
 8006270:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	461a      	mov	r2, r3
 8006278:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	4413      	add	r3, r2
 8006280:	881b      	ldrh	r3, [r3, #0]
 8006282:	b29b      	uxth	r3, r3
 8006284:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006288:	2b00      	cmp	r3, #0
 800628a:	d022      	beq.n	80062d2 <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006294:	b29b      	uxth	r3, r3
 8006296:	461a      	mov	r2, r3
 8006298:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	00db      	lsls	r3, r3, #3
 800629e:	4413      	add	r3, r2
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	6812      	ldr	r2, [r2, #0]
 80062a4:	4413      	add	r3, r2
 80062a6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80062aa:	881b      	ldrh	r3, [r3, #0]
 80062ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062b0:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80062b4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d02c      	beq.n	8006316 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6818      	ldr	r0, [r3, #0]
 80062c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062c2:	6959      	ldr	r1, [r3, #20]
 80062c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062c6:	891a      	ldrh	r2, [r3, #8]
 80062c8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80062cc:	f007 f854 	bl	800d378 <USB_ReadPMA>
 80062d0:	e021      	b.n	8006316 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062da:	b29b      	uxth	r3, r3
 80062dc:	461a      	mov	r2, r3
 80062de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	00db      	lsls	r3, r3, #3
 80062e4:	4413      	add	r3, r2
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	6812      	ldr	r2, [r2, #0]
 80062ea:	4413      	add	r3, r2
 80062ec:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80062f0:	881b      	ldrh	r3, [r3, #0]
 80062f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062f6:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80062fa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d009      	beq.n	8006316 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6818      	ldr	r0, [r3, #0]
 8006306:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006308:	6959      	ldr	r1, [r3, #20]
 800630a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800630c:	895a      	ldrh	r2, [r3, #10]
 800630e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006312:	f007 f831 	bl	800d378 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8006316:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006318:	69da      	ldr	r2, [r3, #28]
 800631a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800631e:	441a      	add	r2, r3
 8006320:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006322:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8006324:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006326:	695a      	ldr	r2, [r3, #20]
 8006328:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800632c:	441a      	add	r2, r3
 800632e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006330:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8006332:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006334:	699b      	ldr	r3, [r3, #24]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d005      	beq.n	8006346 <PCD_EP_ISR_Handler+0x4fc>
 800633a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800633e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	429a      	cmp	r2, r3
 8006344:	d206      	bcs.n	8006354 <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006346:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	4619      	mov	r1, r3
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f008 fef7 	bl	800f140 <HAL_PCD_DataOutStageCallback>
 8006352:	e005      	b.n	8006360 <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800635a:	4618      	mov	r0, r3
 800635c:	f005 fadf 	bl	800b91e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8006360:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006364:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006368:	2b00      	cmp	r3, #0
 800636a:	f000 8121 	beq.w	80065b0 <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 800636e:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8006372:	4613      	mov	r3, r2
 8006374:	009b      	lsls	r3, r3, #2
 8006376:	4413      	add	r3, r2
 8006378:	00db      	lsls	r3, r3, #3
 800637a:	3310      	adds	r3, #16
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	4413      	add	r3, r2
 8006380:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	461a      	mov	r2, r3
 8006388:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	4413      	add	r3, r2
 8006390:	881b      	ldrh	r3, [r3, #0]
 8006392:	b29b      	uxth	r3, r3
 8006394:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8006398:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800639c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	461a      	mov	r2, r3
 80063a6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	441a      	add	r2, r3
 80063ae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80063b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80063be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063c0:	78db      	ldrb	r3, [r3, #3]
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	f040 80a2 	bne.w	800650c <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 80063c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063ca:	2200      	movs	r2, #0
 80063cc:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80063ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063d0:	7b1b      	ldrb	r3, [r3, #12]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	f000 8093 	beq.w	80064fe <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80063d8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80063dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d046      	beq.n	8006472 <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80063e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063e6:	785b      	ldrb	r3, [r3, #1]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d126      	bne.n	800643a <PCD_EP_ISR_Handler+0x5f0>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	461a      	mov	r2, r3
 80063fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006400:	4413      	add	r3, r2
 8006402:	627b      	str	r3, [r7, #36]	@ 0x24
 8006404:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	00da      	lsls	r2, r3, #3
 800640a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800640c:	4413      	add	r3, r2
 800640e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006412:	623b      	str	r3, [r7, #32]
 8006414:	6a3b      	ldr	r3, [r7, #32]
 8006416:	881b      	ldrh	r3, [r3, #0]
 8006418:	b29b      	uxth	r3, r3
 800641a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800641e:	b29a      	uxth	r2, r3
 8006420:	6a3b      	ldr	r3, [r7, #32]
 8006422:	801a      	strh	r2, [r3, #0]
 8006424:	6a3b      	ldr	r3, [r7, #32]
 8006426:	881b      	ldrh	r3, [r3, #0]
 8006428:	b29b      	uxth	r3, r3
 800642a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800642e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006432:	b29a      	uxth	r2, r3
 8006434:	6a3b      	ldr	r3, [r7, #32]
 8006436:	801a      	strh	r2, [r3, #0]
 8006438:	e061      	b.n	80064fe <PCD_EP_ISR_Handler+0x6b4>
 800643a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800643c:	785b      	ldrb	r3, [r3, #1]
 800643e:	2b01      	cmp	r3, #1
 8006440:	d15d      	bne.n	80064fe <PCD_EP_ISR_Handler+0x6b4>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006450:	b29b      	uxth	r3, r3
 8006452:	461a      	mov	r2, r3
 8006454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006456:	4413      	add	r3, r2
 8006458:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800645a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	00da      	lsls	r2, r3, #3
 8006460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006462:	4413      	add	r3, r2
 8006464:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006468:	62bb      	str	r3, [r7, #40]	@ 0x28
 800646a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800646c:	2200      	movs	r2, #0
 800646e:	801a      	strh	r2, [r3, #0]
 8006470:	e045      	b.n	80064fe <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006478:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800647a:	785b      	ldrb	r3, [r3, #1]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d126      	bne.n	80064ce <PCD_EP_ISR_Handler+0x684>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	637b      	str	r3, [r7, #52]	@ 0x34
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800648e:	b29b      	uxth	r3, r3
 8006490:	461a      	mov	r2, r3
 8006492:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006494:	4413      	add	r3, r2
 8006496:	637b      	str	r3, [r7, #52]	@ 0x34
 8006498:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	00da      	lsls	r2, r3, #3
 800649e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064a0:	4413      	add	r3, r2
 80064a2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80064a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80064a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064aa:	881b      	ldrh	r3, [r3, #0]
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064b2:	b29a      	uxth	r2, r3
 80064b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064b6:	801a      	strh	r2, [r3, #0]
 80064b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ba:	881b      	ldrh	r3, [r3, #0]
 80064bc:	b29b      	uxth	r3, r3
 80064be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064c6:	b29a      	uxth	r2, r3
 80064c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ca:	801a      	strh	r2, [r3, #0]
 80064cc:	e017      	b.n	80064fe <PCD_EP_ISR_Handler+0x6b4>
 80064ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064d0:	785b      	ldrb	r3, [r3, #1]
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d113      	bne.n	80064fe <PCD_EP_ISR_Handler+0x6b4>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064de:	b29b      	uxth	r3, r3
 80064e0:	461a      	mov	r2, r3
 80064e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064e4:	4413      	add	r3, r2
 80064e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80064e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	00da      	lsls	r2, r3, #3
 80064ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064f0:	4413      	add	r3, r2
 80064f2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80064f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80064f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064fa:	2200      	movs	r2, #0
 80064fc:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80064fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006500:	781b      	ldrb	r3, [r3, #0]
 8006502:	4619      	mov	r1, r3
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f008 fe36 	bl	800f176 <HAL_PCD_DataInStageCallback>
 800650a:	e051      	b.n	80065b0 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800650c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006510:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006514:	2b00      	cmp	r3, #0
 8006516:	d144      	bne.n	80065a2 <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006520:	b29b      	uxth	r3, r3
 8006522:	461a      	mov	r2, r3
 8006524:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	00db      	lsls	r3, r3, #3
 800652a:	4413      	add	r3, r2
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	6812      	ldr	r2, [r2, #0]
 8006530:	4413      	add	r3, r2
 8006532:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006536:	881b      	ldrh	r3, [r3, #0]
 8006538:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800653c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8006540:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006542:	699a      	ldr	r2, [r3, #24]
 8006544:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006548:	429a      	cmp	r2, r3
 800654a:	d907      	bls.n	800655c <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 800654c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800654e:	699a      	ldr	r2, [r3, #24]
 8006550:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006554:	1ad2      	subs	r2, r2, r3
 8006556:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006558:	619a      	str	r2, [r3, #24]
 800655a:	e002      	b.n	8006562 <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 800655c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800655e:	2200      	movs	r2, #0
 8006560:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8006562:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006564:	699b      	ldr	r3, [r3, #24]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d106      	bne.n	8006578 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800656a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	4619      	mov	r1, r3
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f008 fe00 	bl	800f176 <HAL_PCD_DataInStageCallback>
 8006576:	e01b      	b.n	80065b0 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8006578:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800657a:	695a      	ldr	r2, [r3, #20]
 800657c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006580:	441a      	add	r2, r3
 8006582:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006584:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8006586:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006588:	69da      	ldr	r2, [r3, #28]
 800658a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800658e:	441a      	add	r2, r3
 8006590:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006592:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800659a:	4618      	mov	r0, r3
 800659c:	f005 f9bf 	bl	800b91e <USB_EPStartXfer>
 80065a0:	e006      	b.n	80065b0 <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80065a2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80065a6:	461a      	mov	r2, r3
 80065a8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 f917 	bl	80067de <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	b21b      	sxth	r3, r3
 80065bc:	2b00      	cmp	r3, #0
 80065be:	f6ff ac49 	blt.w	8005e54 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80065c2:	2300      	movs	r3, #0
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3758      	adds	r7, #88	@ 0x58
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b088      	sub	sp, #32
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	60f8      	str	r0, [r7, #12]
 80065d4:	60b9      	str	r1, [r7, #8]
 80065d6:	4613      	mov	r3, r2
 80065d8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80065da:	88fb      	ldrh	r3, [r7, #6]
 80065dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d07c      	beq.n	80066de <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	461a      	mov	r2, r3
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	00db      	lsls	r3, r3, #3
 80065f6:	4413      	add	r3, r2
 80065f8:	68fa      	ldr	r2, [r7, #12]
 80065fa:	6812      	ldr	r2, [r2, #0]
 80065fc:	4413      	add	r3, r2
 80065fe:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006602:	881b      	ldrh	r3, [r3, #0]
 8006604:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006608:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	699a      	ldr	r2, [r3, #24]
 800660e:	8b7b      	ldrh	r3, [r7, #26]
 8006610:	429a      	cmp	r2, r3
 8006612:	d306      	bcc.n	8006622 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	699a      	ldr	r2, [r3, #24]
 8006618:	8b7b      	ldrh	r3, [r7, #26]
 800661a:	1ad2      	subs	r2, r2, r3
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	619a      	str	r2, [r3, #24]
 8006620:	e002      	b.n	8006628 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	2200      	movs	r2, #0
 8006626:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	699b      	ldr	r3, [r3, #24]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d123      	bne.n	8006678 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	461a      	mov	r2, r3
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	4413      	add	r3, r2
 800663e:	881b      	ldrh	r3, [r3, #0]
 8006640:	b29b      	uxth	r3, r3
 8006642:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006646:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800664a:	833b      	strh	r3, [r7, #24]
 800664c:	8b3b      	ldrh	r3, [r7, #24]
 800664e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006652:	833b      	strh	r3, [r7, #24]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	461a      	mov	r2, r3
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	009b      	lsls	r3, r3, #2
 8006660:	441a      	add	r2, r3
 8006662:	8b3b      	ldrh	r3, [r7, #24]
 8006664:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006668:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800666c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006670:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006674:	b29b      	uxth	r3, r3
 8006676:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006678:	88fb      	ldrh	r3, [r7, #6]
 800667a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800667e:	2b00      	cmp	r3, #0
 8006680:	d01f      	beq.n	80066c2 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	461a      	mov	r2, r3
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	009b      	lsls	r3, r3, #2
 800668e:	4413      	add	r3, r2
 8006690:	881b      	ldrh	r3, [r3, #0]
 8006692:	b29b      	uxth	r3, r3
 8006694:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006698:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800669c:	82fb      	strh	r3, [r7, #22]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	461a      	mov	r2, r3
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	441a      	add	r2, r3
 80066ac:	8afb      	ldrh	r3, [r7, #22]
 80066ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066ba:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80066be:	b29b      	uxth	r3, r3
 80066c0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80066c2:	8b7b      	ldrh	r3, [r7, #26]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	f000 8085 	beq.w	80067d4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	6818      	ldr	r0, [r3, #0]
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	6959      	ldr	r1, [r3, #20]
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	891a      	ldrh	r2, [r3, #8]
 80066d6:	8b7b      	ldrh	r3, [r7, #26]
 80066d8:	f006 fe4e 	bl	800d378 <USB_ReadPMA>
 80066dc:	e07a      	b.n	80067d4 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	461a      	mov	r2, r3
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	00db      	lsls	r3, r3, #3
 80066f0:	4413      	add	r3, r2
 80066f2:	68fa      	ldr	r2, [r7, #12]
 80066f4:	6812      	ldr	r2, [r2, #0]
 80066f6:	4413      	add	r3, r2
 80066f8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80066fc:	881b      	ldrh	r3, [r3, #0]
 80066fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006702:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	699a      	ldr	r2, [r3, #24]
 8006708:	8b7b      	ldrh	r3, [r7, #26]
 800670a:	429a      	cmp	r2, r3
 800670c:	d306      	bcc.n	800671c <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	699a      	ldr	r2, [r3, #24]
 8006712:	8b7b      	ldrh	r3, [r7, #26]
 8006714:	1ad2      	subs	r2, r2, r3
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	619a      	str	r2, [r3, #24]
 800671a:	e002      	b.n	8006722 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	2200      	movs	r2, #0
 8006720:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	699b      	ldr	r3, [r3, #24]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d123      	bne.n	8006772 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	461a      	mov	r2, r3
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	4413      	add	r3, r2
 8006738:	881b      	ldrh	r3, [r3, #0]
 800673a:	b29b      	uxth	r3, r3
 800673c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006740:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006744:	83fb      	strh	r3, [r7, #30]
 8006746:	8bfb      	ldrh	r3, [r7, #30]
 8006748:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800674c:	83fb      	strh	r3, [r7, #30]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	461a      	mov	r2, r3
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	441a      	add	r2, r3
 800675c:	8bfb      	ldrh	r3, [r7, #30]
 800675e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006762:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006766:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800676a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800676e:	b29b      	uxth	r3, r3
 8006770:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8006772:	88fb      	ldrh	r3, [r7, #6]
 8006774:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006778:	2b00      	cmp	r3, #0
 800677a:	d11f      	bne.n	80067bc <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	461a      	mov	r2, r3
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	4413      	add	r3, r2
 800678a:	881b      	ldrh	r3, [r3, #0]
 800678c:	b29b      	uxth	r3, r3
 800678e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006792:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006796:	83bb      	strh	r3, [r7, #28]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	461a      	mov	r2, r3
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	441a      	add	r2, r3
 80067a6:	8bbb      	ldrh	r3, [r7, #28]
 80067a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067b4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80067bc:	8b7b      	ldrh	r3, [r7, #26]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d008      	beq.n	80067d4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	6818      	ldr	r0, [r3, #0]
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	6959      	ldr	r1, [r3, #20]
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	895a      	ldrh	r2, [r3, #10]
 80067ce:	8b7b      	ldrh	r3, [r7, #26]
 80067d0:	f006 fdd2 	bl	800d378 <USB_ReadPMA>
    }
  }

  return count;
 80067d4:	8b7b      	ldrh	r3, [r7, #26]
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3720      	adds	r7, #32
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}

080067de <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80067de:	b580      	push	{r7, lr}
 80067e0:	b0a4      	sub	sp, #144	@ 0x90
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	60f8      	str	r0, [r7, #12]
 80067e6:	60b9      	str	r1, [r7, #8]
 80067e8:	4613      	mov	r3, r2
 80067ea:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80067ec:	88fb      	ldrh	r3, [r7, #6]
 80067ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	f000 81db 	beq.w	8006bae <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006800:	b29b      	uxth	r3, r3
 8006802:	461a      	mov	r2, r3
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	00db      	lsls	r3, r3, #3
 800680a:	4413      	add	r3, r2
 800680c:	68fa      	ldr	r2, [r7, #12]
 800680e:	6812      	ldr	r2, [r2, #0]
 8006810:	4413      	add	r3, r2
 8006812:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006816:	881b      	ldrh	r3, [r3, #0]
 8006818:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800681c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	699a      	ldr	r2, [r3, #24]
 8006824:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006828:	429a      	cmp	r2, r3
 800682a:	d907      	bls.n	800683c <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	699a      	ldr	r2, [r3, #24]
 8006830:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006834:	1ad2      	subs	r2, r2, r3
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	619a      	str	r2, [r3, #24]
 800683a:	e002      	b.n	8006842 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	2200      	movs	r2, #0
 8006840:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	699b      	ldr	r3, [r3, #24]
 8006846:	2b00      	cmp	r3, #0
 8006848:	f040 80b9 	bne.w	80069be <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	785b      	ldrb	r3, [r3, #1]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d126      	bne.n	80068a2 <HAL_PCD_EP_DB_Transmit+0xc4>
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006862:	b29b      	uxth	r3, r3
 8006864:	461a      	mov	r2, r3
 8006866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006868:	4413      	add	r3, r2
 800686a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	00da      	lsls	r2, r3, #3
 8006872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006874:	4413      	add	r3, r2
 8006876:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800687a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800687c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800687e:	881b      	ldrh	r3, [r3, #0]
 8006880:	b29b      	uxth	r3, r3
 8006882:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006886:	b29a      	uxth	r2, r3
 8006888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800688a:	801a      	strh	r2, [r3, #0]
 800688c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800688e:	881b      	ldrh	r3, [r3, #0]
 8006890:	b29b      	uxth	r3, r3
 8006892:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006896:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800689a:	b29a      	uxth	r2, r3
 800689c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800689e:	801a      	strh	r2, [r3, #0]
 80068a0:	e01a      	b.n	80068d8 <HAL_PCD_EP_DB_Transmit+0xfa>
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	785b      	ldrb	r3, [r3, #1]
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d116      	bne.n	80068d8 <HAL_PCD_EP_DB_Transmit+0xfa>
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	461a      	mov	r2, r3
 80068bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068be:	4413      	add	r3, r2
 80068c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	00da      	lsls	r2, r3, #3
 80068c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068ca:	4413      	add	r3, r2
 80068cc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80068d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80068d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d4:	2200      	movs	r2, #0
 80068d6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	785b      	ldrb	r3, [r3, #1]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d126      	bne.n	8006934 <HAL_PCD_EP_DB_Transmit+0x156>
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	61fb      	str	r3, [r7, #28]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	461a      	mov	r2, r3
 80068f8:	69fb      	ldr	r3, [r7, #28]
 80068fa:	4413      	add	r3, r2
 80068fc:	61fb      	str	r3, [r7, #28]
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	00da      	lsls	r2, r3, #3
 8006904:	69fb      	ldr	r3, [r7, #28]
 8006906:	4413      	add	r3, r2
 8006908:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800690c:	61bb      	str	r3, [r7, #24]
 800690e:	69bb      	ldr	r3, [r7, #24]
 8006910:	881b      	ldrh	r3, [r3, #0]
 8006912:	b29b      	uxth	r3, r3
 8006914:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006918:	b29a      	uxth	r2, r3
 800691a:	69bb      	ldr	r3, [r7, #24]
 800691c:	801a      	strh	r2, [r3, #0]
 800691e:	69bb      	ldr	r3, [r7, #24]
 8006920:	881b      	ldrh	r3, [r3, #0]
 8006922:	b29b      	uxth	r3, r3
 8006924:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006928:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800692c:	b29a      	uxth	r2, r3
 800692e:	69bb      	ldr	r3, [r7, #24]
 8006930:	801a      	strh	r2, [r3, #0]
 8006932:	e017      	b.n	8006964 <HAL_PCD_EP_DB_Transmit+0x186>
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	785b      	ldrb	r3, [r3, #1]
 8006938:	2b01      	cmp	r3, #1
 800693a:	d113      	bne.n	8006964 <HAL_PCD_EP_DB_Transmit+0x186>
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006944:	b29b      	uxth	r3, r3
 8006946:	461a      	mov	r2, r3
 8006948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800694a:	4413      	add	r3, r2
 800694c:	627b      	str	r3, [r7, #36]	@ 0x24
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	00da      	lsls	r2, r3, #3
 8006954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006956:	4413      	add	r3, r2
 8006958:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800695c:	623b      	str	r3, [r7, #32]
 800695e:	6a3b      	ldr	r3, [r7, #32]
 8006960:	2200      	movs	r2, #0
 8006962:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	4619      	mov	r1, r3
 800696a:	68f8      	ldr	r0, [r7, #12]
 800696c:	f008 fc03 	bl	800f176 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006970:	88fb      	ldrh	r3, [r7, #6]
 8006972:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006976:	2b00      	cmp	r3, #0
 8006978:	f000 82fa 	beq.w	8006f70 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	461a      	mov	r2, r3
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	781b      	ldrb	r3, [r3, #0]
 8006986:	009b      	lsls	r3, r3, #2
 8006988:	4413      	add	r3, r2
 800698a:	881b      	ldrh	r3, [r3, #0]
 800698c:	b29b      	uxth	r3, r3
 800698e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006992:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006996:	82fb      	strh	r3, [r7, #22]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	461a      	mov	r2, r3
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	009b      	lsls	r3, r3, #2
 80069a4:	441a      	add	r2, r3
 80069a6:	8afb      	ldrh	r3, [r7, #22]
 80069a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80069b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	8013      	strh	r3, [r2, #0]
 80069bc:	e2d8      	b.n	8006f70 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80069be:	88fb      	ldrh	r3, [r7, #6]
 80069c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d021      	beq.n	8006a0c <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	461a      	mov	r2, r3
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	009b      	lsls	r3, r3, #2
 80069d4:	4413      	add	r3, r2
 80069d6:	881b      	ldrh	r3, [r3, #0]
 80069d8:	b29b      	uxth	r3, r3
 80069da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069e2:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	461a      	mov	r2, r3
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	441a      	add	r2, r3
 80069f4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80069f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a00:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006a04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	f040 82ac 	bne.w	8006f70 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	695a      	ldr	r2, [r3, #20]
 8006a1c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006a20:	441a      	add	r2, r3
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	69da      	ldr	r2, [r3, #28]
 8006a2a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006a2e:	441a      	add	r2, r3
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	6a1a      	ldr	r2, [r3, #32]
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	691b      	ldr	r3, [r3, #16]
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d30b      	bcc.n	8006a58 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	691b      	ldr	r3, [r3, #16]
 8006a44:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	6a1a      	ldr	r2, [r3, #32]
 8006a4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006a50:	1ad2      	subs	r2, r2, r3
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	621a      	str	r2, [r3, #32]
 8006a56:	e017      	b.n	8006a88 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	6a1b      	ldr	r3, [r3, #32]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d108      	bne.n	8006a72 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8006a60:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006a64:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006a70:	e00a      	b.n	8006a88 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	6a1b      	ldr	r3, [r3, #32]
 8006a7e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	2200      	movs	r2, #0
 8006a86:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	785b      	ldrb	r3, [r3, #1]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d165      	bne.n	8006b5c <HAL_PCD_EP_DB_Transmit+0x37e>
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006aa4:	4413      	add	r3, r2
 8006aa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	00da      	lsls	r2, r3, #3
 8006aae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ab0:	4413      	add	r3, r2
 8006ab2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006ab6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aba:	881b      	ldrh	r3, [r3, #0]
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ac2:	b29a      	uxth	r2, r3
 8006ac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ac6:	801a      	strh	r2, [r3, #0]
 8006ac8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006acc:	2b3e      	cmp	r3, #62	@ 0x3e
 8006ace:	d91d      	bls.n	8006b0c <HAL_PCD_EP_DB_Transmit+0x32e>
 8006ad0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006ad4:	095b      	lsrs	r3, r3, #5
 8006ad6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ad8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006adc:	f003 031f 	and.w	r3, r3, #31
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d102      	bne.n	8006aea <HAL_PCD_EP_DB_Transmit+0x30c>
 8006ae4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ae6:	3b01      	subs	r3, #1
 8006ae8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aec:	881b      	ldrh	r3, [r3, #0]
 8006aee:	b29a      	uxth	r2, r3
 8006af0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	029b      	lsls	r3, r3, #10
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	4313      	orrs	r3, r2
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b04:	b29a      	uxth	r2, r3
 8006b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b08:	801a      	strh	r2, [r3, #0]
 8006b0a:	e044      	b.n	8006b96 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8006b0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d10a      	bne.n	8006b2a <HAL_PCD_EP_DB_Transmit+0x34c>
 8006b14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b16:	881b      	ldrh	r3, [r3, #0]
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b22:	b29a      	uxth	r2, r3
 8006b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b26:	801a      	strh	r2, [r3, #0]
 8006b28:	e035      	b.n	8006b96 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8006b2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006b2e:	085b      	lsrs	r3, r3, #1
 8006b30:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006b36:	f003 0301 	and.w	r3, r3, #1
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d002      	beq.n	8006b44 <HAL_PCD_EP_DB_Transmit+0x366>
 8006b3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b40:	3301      	adds	r3, #1
 8006b42:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b46:	881b      	ldrh	r3, [r3, #0]
 8006b48:	b29a      	uxth	r2, r3
 8006b4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	029b      	lsls	r3, r3, #10
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	4313      	orrs	r3, r2
 8006b54:	b29a      	uxth	r2, r3
 8006b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b58:	801a      	strh	r2, [r3, #0]
 8006b5a:	e01c      	b.n	8006b96 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	785b      	ldrb	r3, [r3, #1]
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d118      	bne.n	8006b96 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	461a      	mov	r2, r3
 8006b76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b78:	4413      	add	r3, r2
 8006b7a:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	00da      	lsls	r2, r3, #3
 8006b82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b84:	4413      	add	r3, r2
 8006b86:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006b8a:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006b90:	b29a      	uxth	r2, r3
 8006b92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b94:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	6818      	ldr	r0, [r3, #0]
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	6959      	ldr	r1, [r3, #20]
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	891a      	ldrh	r2, [r3, #8]
 8006ba2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	f006 fba4 	bl	800d2f4 <USB_WritePMA>
 8006bac:	e1e0      	b.n	8006f70 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	461a      	mov	r2, r3
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	00db      	lsls	r3, r3, #3
 8006bc0:	4413      	add	r3, r2
 8006bc2:	68fa      	ldr	r2, [r7, #12]
 8006bc4:	6812      	ldr	r2, [r2, #0]
 8006bc6:	4413      	add	r3, r2
 8006bc8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006bcc:	881b      	ldrh	r3, [r3, #0]
 8006bce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006bd2:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	699a      	ldr	r2, [r3, #24]
 8006bda:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d307      	bcc.n	8006bf2 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	699a      	ldr	r2, [r3, #24]
 8006be6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006bea:	1ad2      	subs	r2, r2, r3
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	619a      	str	r2, [r3, #24]
 8006bf0:	e002      	b.n	8006bf8 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	699b      	ldr	r3, [r3, #24]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	f040 80c0 	bne.w	8006d82 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	785b      	ldrb	r3, [r3, #1]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d126      	bne.n	8006c58 <HAL_PCD_EP_DB_Transmit+0x47a>
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006c1e:	4413      	add	r3, r2
 8006c20:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	781b      	ldrb	r3, [r3, #0]
 8006c26:	00da      	lsls	r2, r3, #3
 8006c28:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006c2a:	4413      	add	r3, r2
 8006c2c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006c30:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006c32:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c34:	881b      	ldrh	r3, [r3, #0]
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c3c:	b29a      	uxth	r2, r3
 8006c3e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c40:	801a      	strh	r2, [r3, #0]
 8006c42:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c44:	881b      	ldrh	r3, [r3, #0]
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c50:	b29a      	uxth	r2, r3
 8006c52:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c54:	801a      	strh	r2, [r3, #0]
 8006c56:	e01a      	b.n	8006c8e <HAL_PCD_EP_DB_Transmit+0x4b0>
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	785b      	ldrb	r3, [r3, #1]
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d116      	bne.n	8006c8e <HAL_PCD_EP_DB_Transmit+0x4b0>
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	667b      	str	r3, [r7, #100]	@ 0x64
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	461a      	mov	r2, r3
 8006c72:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c74:	4413      	add	r3, r2
 8006c76:	667b      	str	r3, [r7, #100]	@ 0x64
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	00da      	lsls	r2, r3, #3
 8006c7e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c80:	4413      	add	r3, r2
 8006c82:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006c86:	663b      	str	r3, [r7, #96]	@ 0x60
 8006c88:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	677b      	str	r3, [r7, #116]	@ 0x74
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	785b      	ldrb	r3, [r3, #1]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d12b      	bne.n	8006cf4 <HAL_PCD_EP_DB_Transmit+0x516>
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	461a      	mov	r2, r3
 8006cae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006cb0:	4413      	add	r3, r2
 8006cb2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	00da      	lsls	r2, r3, #3
 8006cba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006cbc:	4413      	add	r3, r2
 8006cbe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006cc2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006cc6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006cca:	881b      	ldrh	r3, [r3, #0]
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006cd2:	b29a      	uxth	r2, r3
 8006cd4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006cd8:	801a      	strh	r2, [r3, #0]
 8006cda:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006cde:	881b      	ldrh	r3, [r3, #0]
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ce6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cea:	b29a      	uxth	r2, r3
 8006cec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006cf0:	801a      	strh	r2, [r3, #0]
 8006cf2:	e017      	b.n	8006d24 <HAL_PCD_EP_DB_Transmit+0x546>
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	785b      	ldrb	r3, [r3, #1]
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d113      	bne.n	8006d24 <HAL_PCD_EP_DB_Transmit+0x546>
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	461a      	mov	r2, r3
 8006d08:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006d0a:	4413      	add	r3, r2
 8006d0c:	677b      	str	r3, [r7, #116]	@ 0x74
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	00da      	lsls	r2, r3, #3
 8006d14:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006d16:	4413      	add	r3, r2
 8006d18:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006d1c:	673b      	str	r3, [r7, #112]	@ 0x70
 8006d1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006d20:	2200      	movs	r2, #0
 8006d22:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	4619      	mov	r1, r3
 8006d2a:	68f8      	ldr	r0, [r7, #12]
 8006d2c:	f008 fa23 	bl	800f176 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006d30:	88fb      	ldrh	r3, [r7, #6]
 8006d32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	f040 811a 	bne.w	8006f70 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	461a      	mov	r2, r3
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	781b      	ldrb	r3, [r3, #0]
 8006d46:	009b      	lsls	r3, r3, #2
 8006d48:	4413      	add	r3, r2
 8006d4a:	881b      	ldrh	r3, [r3, #0]
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d56:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	461a      	mov	r2, r3
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	009b      	lsls	r3, r3, #2
 8006d66:	441a      	add	r2, r3
 8006d68:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8006d6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d74:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006d78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	8013      	strh	r3, [r2, #0]
 8006d80:	e0f6      	b.n	8006f70 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006d82:	88fb      	ldrh	r3, [r7, #6]
 8006d84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d121      	bne.n	8006dd0 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	461a      	mov	r2, r3
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	4413      	add	r3, r2
 8006d9a:	881b      	ldrh	r3, [r3, #0]
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006da2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006da6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	461a      	mov	r2, r3
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	009b      	lsls	r3, r3, #2
 8006db6:	441a      	add	r2, r3
 8006db8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006dbc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006dc0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006dc4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006dc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	f040 80ca 	bne.w	8006f70 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	695a      	ldr	r2, [r3, #20]
 8006de0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006de4:	441a      	add	r2, r3
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	69da      	ldr	r2, [r3, #28]
 8006dee:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006df2:	441a      	add	r2, r3
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	6a1a      	ldr	r2, [r3, #32]
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	691b      	ldr	r3, [r3, #16]
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d30b      	bcc.n	8006e1c <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	691b      	ldr	r3, [r3, #16]
 8006e08:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	6a1a      	ldr	r2, [r3, #32]
 8006e10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006e14:	1ad2      	subs	r2, r2, r3
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	621a      	str	r2, [r3, #32]
 8006e1a:	e017      	b.n	8006e4c <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	6a1b      	ldr	r3, [r3, #32]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d108      	bne.n	8006e36 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8006e24:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006e28:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006e34:	e00a      	b.n	8006e4c <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	6a1b      	ldr	r3, [r3, #32]
 8006e3a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	2200      	movs	r2, #0
 8006e42:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	2200      	movs	r2, #0
 8006e48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	657b      	str	r3, [r7, #84]	@ 0x54
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	785b      	ldrb	r3, [r3, #1]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d165      	bne.n	8006f26 <HAL_PCD_EP_DB_Transmit+0x748>
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e6e:	4413      	add	r3, r2
 8006e70:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	00da      	lsls	r2, r3, #3
 8006e78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e7a:	4413      	add	r3, r2
 8006e7c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006e80:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006e82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006e84:	881b      	ldrh	r3, [r3, #0]
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e8c:	b29a      	uxth	r2, r3
 8006e8e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006e90:	801a      	strh	r2, [r3, #0]
 8006e92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006e96:	2b3e      	cmp	r3, #62	@ 0x3e
 8006e98:	d91d      	bls.n	8006ed6 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8006e9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006e9e:	095b      	lsrs	r3, r3, #5
 8006ea0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006ea2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006ea6:	f003 031f 	and.w	r3, r3, #31
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d102      	bne.n	8006eb4 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8006eae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006eb0:	3b01      	subs	r3, #1
 8006eb2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006eb4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006eb6:	881b      	ldrh	r3, [r3, #0]
 8006eb8:	b29a      	uxth	r2, r3
 8006eba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	029b      	lsls	r3, r3, #10
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006eca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ece:	b29a      	uxth	r2, r3
 8006ed0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006ed2:	801a      	strh	r2, [r3, #0]
 8006ed4:	e041      	b.n	8006f5a <HAL_PCD_EP_DB_Transmit+0x77c>
 8006ed6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d10a      	bne.n	8006ef4 <HAL_PCD_EP_DB_Transmit+0x716>
 8006ede:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006ee0:	881b      	ldrh	r3, [r3, #0]
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ee8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006eec:	b29a      	uxth	r2, r3
 8006eee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006ef0:	801a      	strh	r2, [r3, #0]
 8006ef2:	e032      	b.n	8006f5a <HAL_PCD_EP_DB_Transmit+0x77c>
 8006ef4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006ef8:	085b      	lsrs	r3, r3, #1
 8006efa:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006efc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006f00:	f003 0301 	and.w	r3, r3, #1
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d002      	beq.n	8006f0e <HAL_PCD_EP_DB_Transmit+0x730>
 8006f08:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006f0e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006f10:	881b      	ldrh	r3, [r3, #0]
 8006f12:	b29a      	uxth	r2, r3
 8006f14:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	029b      	lsls	r3, r3, #10
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	b29a      	uxth	r2, r3
 8006f20:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006f22:	801a      	strh	r2, [r3, #0]
 8006f24:	e019      	b.n	8006f5a <HAL_PCD_EP_DB_Transmit+0x77c>
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	785b      	ldrb	r3, [r3, #1]
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d115      	bne.n	8006f5a <HAL_PCD_EP_DB_Transmit+0x77c>
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	461a      	mov	r2, r3
 8006f3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f3c:	4413      	add	r3, r2
 8006f3e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	00da      	lsls	r2, r3, #3
 8006f46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f48:	4413      	add	r3, r2
 8006f4a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006f4e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006f50:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006f54:	b29a      	uxth	r2, r3
 8006f56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f58:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	6818      	ldr	r0, [r3, #0]
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	6959      	ldr	r1, [r3, #20]
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	895a      	ldrh	r2, [r3, #10]
 8006f66:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	f006 f9c2 	bl	800d2f4 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	461a      	mov	r2, r3
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	781b      	ldrb	r3, [r3, #0]
 8006f7a:	009b      	lsls	r3, r3, #2
 8006f7c:	4413      	add	r3, r2
 8006f7e:	881b      	ldrh	r3, [r3, #0]
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f8a:	82bb      	strh	r3, [r7, #20]
 8006f8c:	8abb      	ldrh	r3, [r7, #20]
 8006f8e:	f083 0310 	eor.w	r3, r3, #16
 8006f92:	82bb      	strh	r3, [r7, #20]
 8006f94:	8abb      	ldrh	r3, [r7, #20]
 8006f96:	f083 0320 	eor.w	r3, r3, #32
 8006f9a:	82bb      	strh	r3, [r7, #20]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	009b      	lsls	r3, r3, #2
 8006fa8:	441a      	add	r2, r3
 8006faa:	8abb      	ldrh	r3, [r7, #20]
 8006fac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fb0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fb4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006fb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006fc0:	2300      	movs	r3, #0
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3790      	adds	r7, #144	@ 0x90
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}

08006fca <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006fca:	b480      	push	{r7}
 8006fcc:	b087      	sub	sp, #28
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	60f8      	str	r0, [r7, #12]
 8006fd2:	607b      	str	r3, [r7, #4]
 8006fd4:	460b      	mov	r3, r1
 8006fd6:	817b      	strh	r3, [r7, #10]
 8006fd8:	4613      	mov	r3, r2
 8006fda:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006fdc:	897b      	ldrh	r3, [r7, #10]
 8006fde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d00b      	beq.n	8007000 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006fe8:	897b      	ldrh	r3, [r7, #10]
 8006fea:	f003 0207 	and.w	r2, r3, #7
 8006fee:	4613      	mov	r3, r2
 8006ff0:	009b      	lsls	r3, r3, #2
 8006ff2:	4413      	add	r3, r2
 8006ff4:	00db      	lsls	r3, r3, #3
 8006ff6:	3310      	adds	r3, #16
 8006ff8:	68fa      	ldr	r2, [r7, #12]
 8006ffa:	4413      	add	r3, r2
 8006ffc:	617b      	str	r3, [r7, #20]
 8006ffe:	e009      	b.n	8007014 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007000:	897a      	ldrh	r2, [r7, #10]
 8007002:	4613      	mov	r3, r2
 8007004:	009b      	lsls	r3, r3, #2
 8007006:	4413      	add	r3, r2
 8007008:	00db      	lsls	r3, r3, #3
 800700a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800700e:	68fa      	ldr	r2, [r7, #12]
 8007010:	4413      	add	r3, r2
 8007012:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8007014:	893b      	ldrh	r3, [r7, #8]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d107      	bne.n	800702a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	2200      	movs	r2, #0
 800701e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	b29a      	uxth	r2, r3
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	80da      	strh	r2, [r3, #6]
 8007028:	e00b      	b.n	8007042 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	2201      	movs	r2, #1
 800702e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	b29a      	uxth	r2, r3
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	0c1b      	lsrs	r3, r3, #16
 800703c:	b29a      	uxth	r2, r3
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007042:	2300      	movs	r3, #0
}
 8007044:	4618      	mov	r0, r3
 8007046:	371c      	adds	r7, #28
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr

08007050 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007050:	b480      	push	{r7}
 8007052:	b085      	sub	sp, #20
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2201      	movs	r2, #1
 8007062:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2200      	movs	r2, #0
 800706a:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8007074:	b29b      	uxth	r3, r3
 8007076:	f043 0301 	orr.w	r3, r3, #1
 800707a:	b29a      	uxth	r2, r3
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8007088:	b29b      	uxth	r3, r3
 800708a:	f043 0302 	orr.w	r3, r3, #2
 800708e:	b29a      	uxth	r2, r3
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8007096:	2300      	movs	r3, #0
}
 8007098:	4618      	mov	r0, r3
 800709a:	3714      	adds	r7, #20
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr

080070a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b085      	sub	sp, #20
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d141      	bne.n	8007136 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80070b2:	4b4b      	ldr	r3, [pc, #300]	@ (80071e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80070ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070be:	d131      	bne.n	8007124 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80070c0:	4b47      	ldr	r3, [pc, #284]	@ (80071e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070c6:	4a46      	ldr	r2, [pc, #280]	@ (80071e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80070cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80070d0:	4b43      	ldr	r3, [pc, #268]	@ (80071e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80070d8:	4a41      	ldr	r2, [pc, #260]	@ (80071e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80070de:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80070e0:	4b40      	ldr	r3, [pc, #256]	@ (80071e4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	2232      	movs	r2, #50	@ 0x32
 80070e6:	fb02 f303 	mul.w	r3, r2, r3
 80070ea:	4a3f      	ldr	r2, [pc, #252]	@ (80071e8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80070ec:	fba2 2303 	umull	r2, r3, r2, r3
 80070f0:	0c9b      	lsrs	r3, r3, #18
 80070f2:	3301      	adds	r3, #1
 80070f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80070f6:	e002      	b.n	80070fe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	3b01      	subs	r3, #1
 80070fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80070fe:	4b38      	ldr	r3, [pc, #224]	@ (80071e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007100:	695b      	ldr	r3, [r3, #20]
 8007102:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007106:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800710a:	d102      	bne.n	8007112 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d1f2      	bne.n	80070f8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007112:	4b33      	ldr	r3, [pc, #204]	@ (80071e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007114:	695b      	ldr	r3, [r3, #20]
 8007116:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800711a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800711e:	d158      	bne.n	80071d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007120:	2303      	movs	r3, #3
 8007122:	e057      	b.n	80071d4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007124:	4b2e      	ldr	r3, [pc, #184]	@ (80071e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007126:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800712a:	4a2d      	ldr	r2, [pc, #180]	@ (80071e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800712c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007130:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007134:	e04d      	b.n	80071d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800713c:	d141      	bne.n	80071c2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800713e:	4b28      	ldr	r3, [pc, #160]	@ (80071e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007146:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800714a:	d131      	bne.n	80071b0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800714c:	4b24      	ldr	r3, [pc, #144]	@ (80071e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800714e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007152:	4a23      	ldr	r2, [pc, #140]	@ (80071e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007154:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007158:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800715c:	4b20      	ldr	r3, [pc, #128]	@ (80071e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007164:	4a1e      	ldr	r2, [pc, #120]	@ (80071e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007166:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800716a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800716c:	4b1d      	ldr	r3, [pc, #116]	@ (80071e4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	2232      	movs	r2, #50	@ 0x32
 8007172:	fb02 f303 	mul.w	r3, r2, r3
 8007176:	4a1c      	ldr	r2, [pc, #112]	@ (80071e8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007178:	fba2 2303 	umull	r2, r3, r2, r3
 800717c:	0c9b      	lsrs	r3, r3, #18
 800717e:	3301      	adds	r3, #1
 8007180:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007182:	e002      	b.n	800718a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	3b01      	subs	r3, #1
 8007188:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800718a:	4b15      	ldr	r3, [pc, #84]	@ (80071e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800718c:	695b      	ldr	r3, [r3, #20]
 800718e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007192:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007196:	d102      	bne.n	800719e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d1f2      	bne.n	8007184 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800719e:	4b10      	ldr	r3, [pc, #64]	@ (80071e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80071a0:	695b      	ldr	r3, [r3, #20]
 80071a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80071a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071aa:	d112      	bne.n	80071d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80071ac:	2303      	movs	r3, #3
 80071ae:	e011      	b.n	80071d4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80071b0:	4b0b      	ldr	r3, [pc, #44]	@ (80071e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80071b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071b6:	4a0a      	ldr	r2, [pc, #40]	@ (80071e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80071b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80071bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80071c0:	e007      	b.n	80071d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80071c2:	4b07      	ldr	r3, [pc, #28]	@ (80071e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80071ca:	4a05      	ldr	r2, [pc, #20]	@ (80071e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80071cc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80071d0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80071d2:	2300      	movs	r3, #0
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3714      	adds	r7, #20
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr
 80071e0:	40007000 	.word	0x40007000
 80071e4:	20000000 	.word	0x20000000
 80071e8:	431bde83 	.word	0x431bde83

080071ec <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80071ec:	b480      	push	{r7}
 80071ee:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80071f0:	4b05      	ldr	r3, [pc, #20]	@ (8007208 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	4a04      	ldr	r2, [pc, #16]	@ (8007208 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80071f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80071fa:	6093      	str	r3, [r2, #8]
}
 80071fc:	bf00      	nop
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr
 8007206:	bf00      	nop
 8007208:	40007000 	.word	0x40007000

0800720c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b088      	sub	sp, #32
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d101      	bne.n	800721e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800721a:	2301      	movs	r3, #1
 800721c:	e2fe      	b.n	800781c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f003 0301 	and.w	r3, r3, #1
 8007226:	2b00      	cmp	r3, #0
 8007228:	d075      	beq.n	8007316 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800722a:	4b97      	ldr	r3, [pc, #604]	@ (8007488 <HAL_RCC_OscConfig+0x27c>)
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	f003 030c 	and.w	r3, r3, #12
 8007232:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007234:	4b94      	ldr	r3, [pc, #592]	@ (8007488 <HAL_RCC_OscConfig+0x27c>)
 8007236:	68db      	ldr	r3, [r3, #12]
 8007238:	f003 0303 	and.w	r3, r3, #3
 800723c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800723e:	69bb      	ldr	r3, [r7, #24]
 8007240:	2b0c      	cmp	r3, #12
 8007242:	d102      	bne.n	800724a <HAL_RCC_OscConfig+0x3e>
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	2b03      	cmp	r3, #3
 8007248:	d002      	beq.n	8007250 <HAL_RCC_OscConfig+0x44>
 800724a:	69bb      	ldr	r3, [r7, #24]
 800724c:	2b08      	cmp	r3, #8
 800724e:	d10b      	bne.n	8007268 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007250:	4b8d      	ldr	r3, [pc, #564]	@ (8007488 <HAL_RCC_OscConfig+0x27c>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007258:	2b00      	cmp	r3, #0
 800725a:	d05b      	beq.n	8007314 <HAL_RCC_OscConfig+0x108>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d157      	bne.n	8007314 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007264:	2301      	movs	r3, #1
 8007266:	e2d9      	b.n	800781c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007270:	d106      	bne.n	8007280 <HAL_RCC_OscConfig+0x74>
 8007272:	4b85      	ldr	r3, [pc, #532]	@ (8007488 <HAL_RCC_OscConfig+0x27c>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a84      	ldr	r2, [pc, #528]	@ (8007488 <HAL_RCC_OscConfig+0x27c>)
 8007278:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800727c:	6013      	str	r3, [r2, #0]
 800727e:	e01d      	b.n	80072bc <HAL_RCC_OscConfig+0xb0>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007288:	d10c      	bne.n	80072a4 <HAL_RCC_OscConfig+0x98>
 800728a:	4b7f      	ldr	r3, [pc, #508]	@ (8007488 <HAL_RCC_OscConfig+0x27c>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a7e      	ldr	r2, [pc, #504]	@ (8007488 <HAL_RCC_OscConfig+0x27c>)
 8007290:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007294:	6013      	str	r3, [r2, #0]
 8007296:	4b7c      	ldr	r3, [pc, #496]	@ (8007488 <HAL_RCC_OscConfig+0x27c>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a7b      	ldr	r2, [pc, #492]	@ (8007488 <HAL_RCC_OscConfig+0x27c>)
 800729c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80072a0:	6013      	str	r3, [r2, #0]
 80072a2:	e00b      	b.n	80072bc <HAL_RCC_OscConfig+0xb0>
 80072a4:	4b78      	ldr	r3, [pc, #480]	@ (8007488 <HAL_RCC_OscConfig+0x27c>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a77      	ldr	r2, [pc, #476]	@ (8007488 <HAL_RCC_OscConfig+0x27c>)
 80072aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80072ae:	6013      	str	r3, [r2, #0]
 80072b0:	4b75      	ldr	r3, [pc, #468]	@ (8007488 <HAL_RCC_OscConfig+0x27c>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a74      	ldr	r2, [pc, #464]	@ (8007488 <HAL_RCC_OscConfig+0x27c>)
 80072b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80072ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d013      	beq.n	80072ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072c4:	f7fb fcde 	bl	8002c84 <HAL_GetTick>
 80072c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80072ca:	e008      	b.n	80072de <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80072cc:	f7fb fcda 	bl	8002c84 <HAL_GetTick>
 80072d0:	4602      	mov	r2, r0
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	1ad3      	subs	r3, r2, r3
 80072d6:	2b64      	cmp	r3, #100	@ 0x64
 80072d8:	d901      	bls.n	80072de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80072da:	2303      	movs	r3, #3
 80072dc:	e29e      	b.n	800781c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80072de:	4b6a      	ldr	r3, [pc, #424]	@ (8007488 <HAL_RCC_OscConfig+0x27c>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d0f0      	beq.n	80072cc <HAL_RCC_OscConfig+0xc0>
 80072ea:	e014      	b.n	8007316 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072ec:	f7fb fcca 	bl	8002c84 <HAL_GetTick>
 80072f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80072f2:	e008      	b.n	8007306 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80072f4:	f7fb fcc6 	bl	8002c84 <HAL_GetTick>
 80072f8:	4602      	mov	r2, r0
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	1ad3      	subs	r3, r2, r3
 80072fe:	2b64      	cmp	r3, #100	@ 0x64
 8007300:	d901      	bls.n	8007306 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007302:	2303      	movs	r3, #3
 8007304:	e28a      	b.n	800781c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007306:	4b60      	ldr	r3, [pc, #384]	@ (8007488 <HAL_RCC_OscConfig+0x27c>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800730e:	2b00      	cmp	r3, #0
 8007310:	d1f0      	bne.n	80072f4 <HAL_RCC_OscConfig+0xe8>
 8007312:	e000      	b.n	8007316 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007314:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f003 0302 	and.w	r3, r3, #2
 800731e:	2b00      	cmp	r3, #0
 8007320:	d075      	beq.n	800740e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007322:	4b59      	ldr	r3, [pc, #356]	@ (8007488 <HAL_RCC_OscConfig+0x27c>)
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	f003 030c 	and.w	r3, r3, #12
 800732a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800732c:	4b56      	ldr	r3, [pc, #344]	@ (8007488 <HAL_RCC_OscConfig+0x27c>)
 800732e:	68db      	ldr	r3, [r3, #12]
 8007330:	f003 0303 	and.w	r3, r3, #3
 8007334:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007336:	69bb      	ldr	r3, [r7, #24]
 8007338:	2b0c      	cmp	r3, #12
 800733a:	d102      	bne.n	8007342 <HAL_RCC_OscConfig+0x136>
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	2b02      	cmp	r3, #2
 8007340:	d002      	beq.n	8007348 <HAL_RCC_OscConfig+0x13c>
 8007342:	69bb      	ldr	r3, [r7, #24]
 8007344:	2b04      	cmp	r3, #4
 8007346:	d11f      	bne.n	8007388 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007348:	4b4f      	ldr	r3, [pc, #316]	@ (8007488 <HAL_RCC_OscConfig+0x27c>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007350:	2b00      	cmp	r3, #0
 8007352:	d005      	beq.n	8007360 <HAL_RCC_OscConfig+0x154>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d101      	bne.n	8007360 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800735c:	2301      	movs	r3, #1
 800735e:	e25d      	b.n	800781c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007360:	4b49      	ldr	r3, [pc, #292]	@ (8007488 <HAL_RCC_OscConfig+0x27c>)
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	691b      	ldr	r3, [r3, #16]
 800736c:	061b      	lsls	r3, r3, #24
 800736e:	4946      	ldr	r1, [pc, #280]	@ (8007488 <HAL_RCC_OscConfig+0x27c>)
 8007370:	4313      	orrs	r3, r2
 8007372:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007374:	4b45      	ldr	r3, [pc, #276]	@ (800748c <HAL_RCC_OscConfig+0x280>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4618      	mov	r0, r3
 800737a:	f7fb fc37 	bl	8002bec <HAL_InitTick>
 800737e:	4603      	mov	r3, r0
 8007380:	2b00      	cmp	r3, #0
 8007382:	d043      	beq.n	800740c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007384:	2301      	movs	r3, #1
 8007386:	e249      	b.n	800781c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	68db      	ldr	r3, [r3, #12]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d023      	beq.n	80073d8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007390:	4b3d      	ldr	r3, [pc, #244]	@ (8007488 <HAL_RCC_OscConfig+0x27c>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a3c      	ldr	r2, [pc, #240]	@ (8007488 <HAL_RCC_OscConfig+0x27c>)
 8007396:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800739a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800739c:	f7fb fc72 	bl	8002c84 <HAL_GetTick>
 80073a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80073a2:	e008      	b.n	80073b6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80073a4:	f7fb fc6e 	bl	8002c84 <HAL_GetTick>
 80073a8:	4602      	mov	r2, r0
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	1ad3      	subs	r3, r2, r3
 80073ae:	2b02      	cmp	r3, #2
 80073b0:	d901      	bls.n	80073b6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80073b2:	2303      	movs	r3, #3
 80073b4:	e232      	b.n	800781c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80073b6:	4b34      	ldr	r3, [pc, #208]	@ (8007488 <HAL_RCC_OscConfig+0x27c>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d0f0      	beq.n	80073a4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073c2:	4b31      	ldr	r3, [pc, #196]	@ (8007488 <HAL_RCC_OscConfig+0x27c>)
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	691b      	ldr	r3, [r3, #16]
 80073ce:	061b      	lsls	r3, r3, #24
 80073d0:	492d      	ldr	r1, [pc, #180]	@ (8007488 <HAL_RCC_OscConfig+0x27c>)
 80073d2:	4313      	orrs	r3, r2
 80073d4:	604b      	str	r3, [r1, #4]
 80073d6:	e01a      	b.n	800740e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80073d8:	4b2b      	ldr	r3, [pc, #172]	@ (8007488 <HAL_RCC_OscConfig+0x27c>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a2a      	ldr	r2, [pc, #168]	@ (8007488 <HAL_RCC_OscConfig+0x27c>)
 80073de:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80073e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073e4:	f7fb fc4e 	bl	8002c84 <HAL_GetTick>
 80073e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80073ea:	e008      	b.n	80073fe <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80073ec:	f7fb fc4a 	bl	8002c84 <HAL_GetTick>
 80073f0:	4602      	mov	r2, r0
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	1ad3      	subs	r3, r2, r3
 80073f6:	2b02      	cmp	r3, #2
 80073f8:	d901      	bls.n	80073fe <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80073fa:	2303      	movs	r3, #3
 80073fc:	e20e      	b.n	800781c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80073fe:	4b22      	ldr	r3, [pc, #136]	@ (8007488 <HAL_RCC_OscConfig+0x27c>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007406:	2b00      	cmp	r3, #0
 8007408:	d1f0      	bne.n	80073ec <HAL_RCC_OscConfig+0x1e0>
 800740a:	e000      	b.n	800740e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800740c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f003 0308 	and.w	r3, r3, #8
 8007416:	2b00      	cmp	r3, #0
 8007418:	d041      	beq.n	800749e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	695b      	ldr	r3, [r3, #20]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d01c      	beq.n	800745c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007422:	4b19      	ldr	r3, [pc, #100]	@ (8007488 <HAL_RCC_OscConfig+0x27c>)
 8007424:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007428:	4a17      	ldr	r2, [pc, #92]	@ (8007488 <HAL_RCC_OscConfig+0x27c>)
 800742a:	f043 0301 	orr.w	r3, r3, #1
 800742e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007432:	f7fb fc27 	bl	8002c84 <HAL_GetTick>
 8007436:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007438:	e008      	b.n	800744c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800743a:	f7fb fc23 	bl	8002c84 <HAL_GetTick>
 800743e:	4602      	mov	r2, r0
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	1ad3      	subs	r3, r2, r3
 8007444:	2b02      	cmp	r3, #2
 8007446:	d901      	bls.n	800744c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007448:	2303      	movs	r3, #3
 800744a:	e1e7      	b.n	800781c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800744c:	4b0e      	ldr	r3, [pc, #56]	@ (8007488 <HAL_RCC_OscConfig+0x27c>)
 800744e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007452:	f003 0302 	and.w	r3, r3, #2
 8007456:	2b00      	cmp	r3, #0
 8007458:	d0ef      	beq.n	800743a <HAL_RCC_OscConfig+0x22e>
 800745a:	e020      	b.n	800749e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800745c:	4b0a      	ldr	r3, [pc, #40]	@ (8007488 <HAL_RCC_OscConfig+0x27c>)
 800745e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007462:	4a09      	ldr	r2, [pc, #36]	@ (8007488 <HAL_RCC_OscConfig+0x27c>)
 8007464:	f023 0301 	bic.w	r3, r3, #1
 8007468:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800746c:	f7fb fc0a 	bl	8002c84 <HAL_GetTick>
 8007470:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007472:	e00d      	b.n	8007490 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007474:	f7fb fc06 	bl	8002c84 <HAL_GetTick>
 8007478:	4602      	mov	r2, r0
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	1ad3      	subs	r3, r2, r3
 800747e:	2b02      	cmp	r3, #2
 8007480:	d906      	bls.n	8007490 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007482:	2303      	movs	r3, #3
 8007484:	e1ca      	b.n	800781c <HAL_RCC_OscConfig+0x610>
 8007486:	bf00      	nop
 8007488:	40021000 	.word	0x40021000
 800748c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007490:	4b8c      	ldr	r3, [pc, #560]	@ (80076c4 <HAL_RCC_OscConfig+0x4b8>)
 8007492:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007496:	f003 0302 	and.w	r3, r3, #2
 800749a:	2b00      	cmp	r3, #0
 800749c:	d1ea      	bne.n	8007474 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f003 0304 	and.w	r3, r3, #4
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	f000 80a6 	beq.w	80075f8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80074ac:	2300      	movs	r3, #0
 80074ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80074b0:	4b84      	ldr	r3, [pc, #528]	@ (80076c4 <HAL_RCC_OscConfig+0x4b8>)
 80074b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d101      	bne.n	80074c0 <HAL_RCC_OscConfig+0x2b4>
 80074bc:	2301      	movs	r3, #1
 80074be:	e000      	b.n	80074c2 <HAL_RCC_OscConfig+0x2b6>
 80074c0:	2300      	movs	r3, #0
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d00d      	beq.n	80074e2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80074c6:	4b7f      	ldr	r3, [pc, #508]	@ (80076c4 <HAL_RCC_OscConfig+0x4b8>)
 80074c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074ca:	4a7e      	ldr	r2, [pc, #504]	@ (80076c4 <HAL_RCC_OscConfig+0x4b8>)
 80074cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80074d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80074d2:	4b7c      	ldr	r3, [pc, #496]	@ (80076c4 <HAL_RCC_OscConfig+0x4b8>)
 80074d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074da:	60fb      	str	r3, [r7, #12]
 80074dc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80074de:	2301      	movs	r3, #1
 80074e0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80074e2:	4b79      	ldr	r3, [pc, #484]	@ (80076c8 <HAL_RCC_OscConfig+0x4bc>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d118      	bne.n	8007520 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80074ee:	4b76      	ldr	r3, [pc, #472]	@ (80076c8 <HAL_RCC_OscConfig+0x4bc>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a75      	ldr	r2, [pc, #468]	@ (80076c8 <HAL_RCC_OscConfig+0x4bc>)
 80074f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80074f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80074fa:	f7fb fbc3 	bl	8002c84 <HAL_GetTick>
 80074fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007500:	e008      	b.n	8007514 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007502:	f7fb fbbf 	bl	8002c84 <HAL_GetTick>
 8007506:	4602      	mov	r2, r0
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	1ad3      	subs	r3, r2, r3
 800750c:	2b02      	cmp	r3, #2
 800750e:	d901      	bls.n	8007514 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007510:	2303      	movs	r3, #3
 8007512:	e183      	b.n	800781c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007514:	4b6c      	ldr	r3, [pc, #432]	@ (80076c8 <HAL_RCC_OscConfig+0x4bc>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800751c:	2b00      	cmp	r3, #0
 800751e:	d0f0      	beq.n	8007502 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	2b01      	cmp	r3, #1
 8007526:	d108      	bne.n	800753a <HAL_RCC_OscConfig+0x32e>
 8007528:	4b66      	ldr	r3, [pc, #408]	@ (80076c4 <HAL_RCC_OscConfig+0x4b8>)
 800752a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800752e:	4a65      	ldr	r2, [pc, #404]	@ (80076c4 <HAL_RCC_OscConfig+0x4b8>)
 8007530:	f043 0301 	orr.w	r3, r3, #1
 8007534:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007538:	e024      	b.n	8007584 <HAL_RCC_OscConfig+0x378>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	2b05      	cmp	r3, #5
 8007540:	d110      	bne.n	8007564 <HAL_RCC_OscConfig+0x358>
 8007542:	4b60      	ldr	r3, [pc, #384]	@ (80076c4 <HAL_RCC_OscConfig+0x4b8>)
 8007544:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007548:	4a5e      	ldr	r2, [pc, #376]	@ (80076c4 <HAL_RCC_OscConfig+0x4b8>)
 800754a:	f043 0304 	orr.w	r3, r3, #4
 800754e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007552:	4b5c      	ldr	r3, [pc, #368]	@ (80076c4 <HAL_RCC_OscConfig+0x4b8>)
 8007554:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007558:	4a5a      	ldr	r2, [pc, #360]	@ (80076c4 <HAL_RCC_OscConfig+0x4b8>)
 800755a:	f043 0301 	orr.w	r3, r3, #1
 800755e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007562:	e00f      	b.n	8007584 <HAL_RCC_OscConfig+0x378>
 8007564:	4b57      	ldr	r3, [pc, #348]	@ (80076c4 <HAL_RCC_OscConfig+0x4b8>)
 8007566:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800756a:	4a56      	ldr	r2, [pc, #344]	@ (80076c4 <HAL_RCC_OscConfig+0x4b8>)
 800756c:	f023 0301 	bic.w	r3, r3, #1
 8007570:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007574:	4b53      	ldr	r3, [pc, #332]	@ (80076c4 <HAL_RCC_OscConfig+0x4b8>)
 8007576:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800757a:	4a52      	ldr	r2, [pc, #328]	@ (80076c4 <HAL_RCC_OscConfig+0x4b8>)
 800757c:	f023 0304 	bic.w	r3, r3, #4
 8007580:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d016      	beq.n	80075ba <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800758c:	f7fb fb7a 	bl	8002c84 <HAL_GetTick>
 8007590:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007592:	e00a      	b.n	80075aa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007594:	f7fb fb76 	bl	8002c84 <HAL_GetTick>
 8007598:	4602      	mov	r2, r0
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	1ad3      	subs	r3, r2, r3
 800759e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d901      	bls.n	80075aa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80075a6:	2303      	movs	r3, #3
 80075a8:	e138      	b.n	800781c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80075aa:	4b46      	ldr	r3, [pc, #280]	@ (80076c4 <HAL_RCC_OscConfig+0x4b8>)
 80075ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075b0:	f003 0302 	and.w	r3, r3, #2
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d0ed      	beq.n	8007594 <HAL_RCC_OscConfig+0x388>
 80075b8:	e015      	b.n	80075e6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075ba:	f7fb fb63 	bl	8002c84 <HAL_GetTick>
 80075be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80075c0:	e00a      	b.n	80075d8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075c2:	f7fb fb5f 	bl	8002c84 <HAL_GetTick>
 80075c6:	4602      	mov	r2, r0
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	1ad3      	subs	r3, r2, r3
 80075cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d901      	bls.n	80075d8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80075d4:	2303      	movs	r3, #3
 80075d6:	e121      	b.n	800781c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80075d8:	4b3a      	ldr	r3, [pc, #232]	@ (80076c4 <HAL_RCC_OscConfig+0x4b8>)
 80075da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075de:	f003 0302 	and.w	r3, r3, #2
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d1ed      	bne.n	80075c2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80075e6:	7ffb      	ldrb	r3, [r7, #31]
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d105      	bne.n	80075f8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80075ec:	4b35      	ldr	r3, [pc, #212]	@ (80076c4 <HAL_RCC_OscConfig+0x4b8>)
 80075ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075f0:	4a34      	ldr	r2, [pc, #208]	@ (80076c4 <HAL_RCC_OscConfig+0x4b8>)
 80075f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80075f6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f003 0320 	and.w	r3, r3, #32
 8007600:	2b00      	cmp	r3, #0
 8007602:	d03c      	beq.n	800767e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	699b      	ldr	r3, [r3, #24]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d01c      	beq.n	8007646 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800760c:	4b2d      	ldr	r3, [pc, #180]	@ (80076c4 <HAL_RCC_OscConfig+0x4b8>)
 800760e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007612:	4a2c      	ldr	r2, [pc, #176]	@ (80076c4 <HAL_RCC_OscConfig+0x4b8>)
 8007614:	f043 0301 	orr.w	r3, r3, #1
 8007618:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800761c:	f7fb fb32 	bl	8002c84 <HAL_GetTick>
 8007620:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007622:	e008      	b.n	8007636 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007624:	f7fb fb2e 	bl	8002c84 <HAL_GetTick>
 8007628:	4602      	mov	r2, r0
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	1ad3      	subs	r3, r2, r3
 800762e:	2b02      	cmp	r3, #2
 8007630:	d901      	bls.n	8007636 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007632:	2303      	movs	r3, #3
 8007634:	e0f2      	b.n	800781c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007636:	4b23      	ldr	r3, [pc, #140]	@ (80076c4 <HAL_RCC_OscConfig+0x4b8>)
 8007638:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800763c:	f003 0302 	and.w	r3, r3, #2
 8007640:	2b00      	cmp	r3, #0
 8007642:	d0ef      	beq.n	8007624 <HAL_RCC_OscConfig+0x418>
 8007644:	e01b      	b.n	800767e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007646:	4b1f      	ldr	r3, [pc, #124]	@ (80076c4 <HAL_RCC_OscConfig+0x4b8>)
 8007648:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800764c:	4a1d      	ldr	r2, [pc, #116]	@ (80076c4 <HAL_RCC_OscConfig+0x4b8>)
 800764e:	f023 0301 	bic.w	r3, r3, #1
 8007652:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007656:	f7fb fb15 	bl	8002c84 <HAL_GetTick>
 800765a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800765c:	e008      	b.n	8007670 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800765e:	f7fb fb11 	bl	8002c84 <HAL_GetTick>
 8007662:	4602      	mov	r2, r0
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	1ad3      	subs	r3, r2, r3
 8007668:	2b02      	cmp	r3, #2
 800766a:	d901      	bls.n	8007670 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800766c:	2303      	movs	r3, #3
 800766e:	e0d5      	b.n	800781c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007670:	4b14      	ldr	r3, [pc, #80]	@ (80076c4 <HAL_RCC_OscConfig+0x4b8>)
 8007672:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007676:	f003 0302 	and.w	r3, r3, #2
 800767a:	2b00      	cmp	r3, #0
 800767c:	d1ef      	bne.n	800765e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	69db      	ldr	r3, [r3, #28]
 8007682:	2b00      	cmp	r3, #0
 8007684:	f000 80c9 	beq.w	800781a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007688:	4b0e      	ldr	r3, [pc, #56]	@ (80076c4 <HAL_RCC_OscConfig+0x4b8>)
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	f003 030c 	and.w	r3, r3, #12
 8007690:	2b0c      	cmp	r3, #12
 8007692:	f000 8083 	beq.w	800779c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	69db      	ldr	r3, [r3, #28]
 800769a:	2b02      	cmp	r3, #2
 800769c:	d15e      	bne.n	800775c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800769e:	4b09      	ldr	r3, [pc, #36]	@ (80076c4 <HAL_RCC_OscConfig+0x4b8>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a08      	ldr	r2, [pc, #32]	@ (80076c4 <HAL_RCC_OscConfig+0x4b8>)
 80076a4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80076a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076aa:	f7fb faeb 	bl	8002c84 <HAL_GetTick>
 80076ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80076b0:	e00c      	b.n	80076cc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076b2:	f7fb fae7 	bl	8002c84 <HAL_GetTick>
 80076b6:	4602      	mov	r2, r0
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	1ad3      	subs	r3, r2, r3
 80076bc:	2b02      	cmp	r3, #2
 80076be:	d905      	bls.n	80076cc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80076c0:	2303      	movs	r3, #3
 80076c2:	e0ab      	b.n	800781c <HAL_RCC_OscConfig+0x610>
 80076c4:	40021000 	.word	0x40021000
 80076c8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80076cc:	4b55      	ldr	r3, [pc, #340]	@ (8007824 <HAL_RCC_OscConfig+0x618>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d1ec      	bne.n	80076b2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80076d8:	4b52      	ldr	r3, [pc, #328]	@ (8007824 <HAL_RCC_OscConfig+0x618>)
 80076da:	68da      	ldr	r2, [r3, #12]
 80076dc:	4b52      	ldr	r3, [pc, #328]	@ (8007828 <HAL_RCC_OscConfig+0x61c>)
 80076de:	4013      	ands	r3, r2
 80076e0:	687a      	ldr	r2, [r7, #4]
 80076e2:	6a11      	ldr	r1, [r2, #32]
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80076e8:	3a01      	subs	r2, #1
 80076ea:	0112      	lsls	r2, r2, #4
 80076ec:	4311      	orrs	r1, r2
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80076f2:	0212      	lsls	r2, r2, #8
 80076f4:	4311      	orrs	r1, r2
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80076fa:	0852      	lsrs	r2, r2, #1
 80076fc:	3a01      	subs	r2, #1
 80076fe:	0552      	lsls	r2, r2, #21
 8007700:	4311      	orrs	r1, r2
 8007702:	687a      	ldr	r2, [r7, #4]
 8007704:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007706:	0852      	lsrs	r2, r2, #1
 8007708:	3a01      	subs	r2, #1
 800770a:	0652      	lsls	r2, r2, #25
 800770c:	4311      	orrs	r1, r2
 800770e:	687a      	ldr	r2, [r7, #4]
 8007710:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007712:	06d2      	lsls	r2, r2, #27
 8007714:	430a      	orrs	r2, r1
 8007716:	4943      	ldr	r1, [pc, #268]	@ (8007824 <HAL_RCC_OscConfig+0x618>)
 8007718:	4313      	orrs	r3, r2
 800771a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800771c:	4b41      	ldr	r3, [pc, #260]	@ (8007824 <HAL_RCC_OscConfig+0x618>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a40      	ldr	r2, [pc, #256]	@ (8007824 <HAL_RCC_OscConfig+0x618>)
 8007722:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007726:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007728:	4b3e      	ldr	r3, [pc, #248]	@ (8007824 <HAL_RCC_OscConfig+0x618>)
 800772a:	68db      	ldr	r3, [r3, #12]
 800772c:	4a3d      	ldr	r2, [pc, #244]	@ (8007824 <HAL_RCC_OscConfig+0x618>)
 800772e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007732:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007734:	f7fb faa6 	bl	8002c84 <HAL_GetTick>
 8007738:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800773a:	e008      	b.n	800774e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800773c:	f7fb faa2 	bl	8002c84 <HAL_GetTick>
 8007740:	4602      	mov	r2, r0
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	1ad3      	subs	r3, r2, r3
 8007746:	2b02      	cmp	r3, #2
 8007748:	d901      	bls.n	800774e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800774a:	2303      	movs	r3, #3
 800774c:	e066      	b.n	800781c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800774e:	4b35      	ldr	r3, [pc, #212]	@ (8007824 <HAL_RCC_OscConfig+0x618>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007756:	2b00      	cmp	r3, #0
 8007758:	d0f0      	beq.n	800773c <HAL_RCC_OscConfig+0x530>
 800775a:	e05e      	b.n	800781a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800775c:	4b31      	ldr	r3, [pc, #196]	@ (8007824 <HAL_RCC_OscConfig+0x618>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a30      	ldr	r2, [pc, #192]	@ (8007824 <HAL_RCC_OscConfig+0x618>)
 8007762:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007766:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007768:	f7fb fa8c 	bl	8002c84 <HAL_GetTick>
 800776c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800776e:	e008      	b.n	8007782 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007770:	f7fb fa88 	bl	8002c84 <HAL_GetTick>
 8007774:	4602      	mov	r2, r0
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	1ad3      	subs	r3, r2, r3
 800777a:	2b02      	cmp	r3, #2
 800777c:	d901      	bls.n	8007782 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800777e:	2303      	movs	r3, #3
 8007780:	e04c      	b.n	800781c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007782:	4b28      	ldr	r3, [pc, #160]	@ (8007824 <HAL_RCC_OscConfig+0x618>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800778a:	2b00      	cmp	r3, #0
 800778c:	d1f0      	bne.n	8007770 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800778e:	4b25      	ldr	r3, [pc, #148]	@ (8007824 <HAL_RCC_OscConfig+0x618>)
 8007790:	68da      	ldr	r2, [r3, #12]
 8007792:	4924      	ldr	r1, [pc, #144]	@ (8007824 <HAL_RCC_OscConfig+0x618>)
 8007794:	4b25      	ldr	r3, [pc, #148]	@ (800782c <HAL_RCC_OscConfig+0x620>)
 8007796:	4013      	ands	r3, r2
 8007798:	60cb      	str	r3, [r1, #12]
 800779a:	e03e      	b.n	800781a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	69db      	ldr	r3, [r3, #28]
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d101      	bne.n	80077a8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80077a4:	2301      	movs	r3, #1
 80077a6:	e039      	b.n	800781c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80077a8:	4b1e      	ldr	r3, [pc, #120]	@ (8007824 <HAL_RCC_OscConfig+0x618>)
 80077aa:	68db      	ldr	r3, [r3, #12]
 80077ac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	f003 0203 	and.w	r2, r3, #3
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6a1b      	ldr	r3, [r3, #32]
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d12c      	bne.n	8007816 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077c6:	3b01      	subs	r3, #1
 80077c8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077ca:	429a      	cmp	r2, r3
 80077cc:	d123      	bne.n	8007816 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077d8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80077da:	429a      	cmp	r2, r3
 80077dc:	d11b      	bne.n	8007816 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077e8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d113      	bne.n	8007816 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077f8:	085b      	lsrs	r3, r3, #1
 80077fa:	3b01      	subs	r3, #1
 80077fc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80077fe:	429a      	cmp	r2, r3
 8007800:	d109      	bne.n	8007816 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800780c:	085b      	lsrs	r3, r3, #1
 800780e:	3b01      	subs	r3, #1
 8007810:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007812:	429a      	cmp	r2, r3
 8007814:	d001      	beq.n	800781a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8007816:	2301      	movs	r3, #1
 8007818:	e000      	b.n	800781c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800781a:	2300      	movs	r3, #0
}
 800781c:	4618      	mov	r0, r3
 800781e:	3720      	adds	r7, #32
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}
 8007824:	40021000 	.word	0x40021000
 8007828:	019f800c 	.word	0x019f800c
 800782c:	feeefffc 	.word	0xfeeefffc

08007830 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b086      	sub	sp, #24
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
 8007838:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800783a:	2300      	movs	r3, #0
 800783c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d101      	bne.n	8007848 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007844:	2301      	movs	r3, #1
 8007846:	e11e      	b.n	8007a86 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007848:	4b91      	ldr	r3, [pc, #580]	@ (8007a90 <HAL_RCC_ClockConfig+0x260>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f003 030f 	and.w	r3, r3, #15
 8007850:	683a      	ldr	r2, [r7, #0]
 8007852:	429a      	cmp	r2, r3
 8007854:	d910      	bls.n	8007878 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007856:	4b8e      	ldr	r3, [pc, #568]	@ (8007a90 <HAL_RCC_ClockConfig+0x260>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f023 020f 	bic.w	r2, r3, #15
 800785e:	498c      	ldr	r1, [pc, #560]	@ (8007a90 <HAL_RCC_ClockConfig+0x260>)
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	4313      	orrs	r3, r2
 8007864:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007866:	4b8a      	ldr	r3, [pc, #552]	@ (8007a90 <HAL_RCC_ClockConfig+0x260>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f003 030f 	and.w	r3, r3, #15
 800786e:	683a      	ldr	r2, [r7, #0]
 8007870:	429a      	cmp	r2, r3
 8007872:	d001      	beq.n	8007878 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007874:	2301      	movs	r3, #1
 8007876:	e106      	b.n	8007a86 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f003 0301 	and.w	r3, r3, #1
 8007880:	2b00      	cmp	r3, #0
 8007882:	d073      	beq.n	800796c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	2b03      	cmp	r3, #3
 800788a:	d129      	bne.n	80078e0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800788c:	4b81      	ldr	r3, [pc, #516]	@ (8007a94 <HAL_RCC_ClockConfig+0x264>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007894:	2b00      	cmp	r3, #0
 8007896:	d101      	bne.n	800789c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007898:	2301      	movs	r3, #1
 800789a:	e0f4      	b.n	8007a86 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800789c:	f000 f966 	bl	8007b6c <RCC_GetSysClockFreqFromPLLSource>
 80078a0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	4a7c      	ldr	r2, [pc, #496]	@ (8007a98 <HAL_RCC_ClockConfig+0x268>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d93f      	bls.n	800792a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80078aa:	4b7a      	ldr	r3, [pc, #488]	@ (8007a94 <HAL_RCC_ClockConfig+0x264>)
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d009      	beq.n	80078ca <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d033      	beq.n	800792a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d12f      	bne.n	800792a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80078ca:	4b72      	ldr	r3, [pc, #456]	@ (8007a94 <HAL_RCC_ClockConfig+0x264>)
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80078d2:	4a70      	ldr	r2, [pc, #448]	@ (8007a94 <HAL_RCC_ClockConfig+0x264>)
 80078d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078d8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80078da:	2380      	movs	r3, #128	@ 0x80
 80078dc:	617b      	str	r3, [r7, #20]
 80078de:	e024      	b.n	800792a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	2b02      	cmp	r3, #2
 80078e6:	d107      	bne.n	80078f8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80078e8:	4b6a      	ldr	r3, [pc, #424]	@ (8007a94 <HAL_RCC_ClockConfig+0x264>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d109      	bne.n	8007908 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80078f4:	2301      	movs	r3, #1
 80078f6:	e0c6      	b.n	8007a86 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80078f8:	4b66      	ldr	r3, [pc, #408]	@ (8007a94 <HAL_RCC_ClockConfig+0x264>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007900:	2b00      	cmp	r3, #0
 8007902:	d101      	bne.n	8007908 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007904:	2301      	movs	r3, #1
 8007906:	e0be      	b.n	8007a86 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007908:	f000 f8ce 	bl	8007aa8 <HAL_RCC_GetSysClockFreq>
 800790c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	4a61      	ldr	r2, [pc, #388]	@ (8007a98 <HAL_RCC_ClockConfig+0x268>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d909      	bls.n	800792a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007916:	4b5f      	ldr	r3, [pc, #380]	@ (8007a94 <HAL_RCC_ClockConfig+0x264>)
 8007918:	689b      	ldr	r3, [r3, #8]
 800791a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800791e:	4a5d      	ldr	r2, [pc, #372]	@ (8007a94 <HAL_RCC_ClockConfig+0x264>)
 8007920:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007924:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007926:	2380      	movs	r3, #128	@ 0x80
 8007928:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800792a:	4b5a      	ldr	r3, [pc, #360]	@ (8007a94 <HAL_RCC_ClockConfig+0x264>)
 800792c:	689b      	ldr	r3, [r3, #8]
 800792e:	f023 0203 	bic.w	r2, r3, #3
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	4957      	ldr	r1, [pc, #348]	@ (8007a94 <HAL_RCC_ClockConfig+0x264>)
 8007938:	4313      	orrs	r3, r2
 800793a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800793c:	f7fb f9a2 	bl	8002c84 <HAL_GetTick>
 8007940:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007942:	e00a      	b.n	800795a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007944:	f7fb f99e 	bl	8002c84 <HAL_GetTick>
 8007948:	4602      	mov	r2, r0
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	1ad3      	subs	r3, r2, r3
 800794e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007952:	4293      	cmp	r3, r2
 8007954:	d901      	bls.n	800795a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007956:	2303      	movs	r3, #3
 8007958:	e095      	b.n	8007a86 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800795a:	4b4e      	ldr	r3, [pc, #312]	@ (8007a94 <HAL_RCC_ClockConfig+0x264>)
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	f003 020c 	and.w	r2, r3, #12
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	009b      	lsls	r3, r3, #2
 8007968:	429a      	cmp	r2, r3
 800796a:	d1eb      	bne.n	8007944 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f003 0302 	and.w	r3, r3, #2
 8007974:	2b00      	cmp	r3, #0
 8007976:	d023      	beq.n	80079c0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f003 0304 	and.w	r3, r3, #4
 8007980:	2b00      	cmp	r3, #0
 8007982:	d005      	beq.n	8007990 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007984:	4b43      	ldr	r3, [pc, #268]	@ (8007a94 <HAL_RCC_ClockConfig+0x264>)
 8007986:	689b      	ldr	r3, [r3, #8]
 8007988:	4a42      	ldr	r2, [pc, #264]	@ (8007a94 <HAL_RCC_ClockConfig+0x264>)
 800798a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800798e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f003 0308 	and.w	r3, r3, #8
 8007998:	2b00      	cmp	r3, #0
 800799a:	d007      	beq.n	80079ac <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800799c:	4b3d      	ldr	r3, [pc, #244]	@ (8007a94 <HAL_RCC_ClockConfig+0x264>)
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80079a4:	4a3b      	ldr	r2, [pc, #236]	@ (8007a94 <HAL_RCC_ClockConfig+0x264>)
 80079a6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80079aa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80079ac:	4b39      	ldr	r3, [pc, #228]	@ (8007a94 <HAL_RCC_ClockConfig+0x264>)
 80079ae:	689b      	ldr	r3, [r3, #8]
 80079b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	4936      	ldr	r1, [pc, #216]	@ (8007a94 <HAL_RCC_ClockConfig+0x264>)
 80079ba:	4313      	orrs	r3, r2
 80079bc:	608b      	str	r3, [r1, #8]
 80079be:	e008      	b.n	80079d2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	2b80      	cmp	r3, #128	@ 0x80
 80079c4:	d105      	bne.n	80079d2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80079c6:	4b33      	ldr	r3, [pc, #204]	@ (8007a94 <HAL_RCC_ClockConfig+0x264>)
 80079c8:	689b      	ldr	r3, [r3, #8]
 80079ca:	4a32      	ldr	r2, [pc, #200]	@ (8007a94 <HAL_RCC_ClockConfig+0x264>)
 80079cc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80079d0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80079d2:	4b2f      	ldr	r3, [pc, #188]	@ (8007a90 <HAL_RCC_ClockConfig+0x260>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f003 030f 	and.w	r3, r3, #15
 80079da:	683a      	ldr	r2, [r7, #0]
 80079dc:	429a      	cmp	r2, r3
 80079de:	d21d      	bcs.n	8007a1c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079e0:	4b2b      	ldr	r3, [pc, #172]	@ (8007a90 <HAL_RCC_ClockConfig+0x260>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f023 020f 	bic.w	r2, r3, #15
 80079e8:	4929      	ldr	r1, [pc, #164]	@ (8007a90 <HAL_RCC_ClockConfig+0x260>)
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	4313      	orrs	r3, r2
 80079ee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80079f0:	f7fb f948 	bl	8002c84 <HAL_GetTick>
 80079f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80079f6:	e00a      	b.n	8007a0e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80079f8:	f7fb f944 	bl	8002c84 <HAL_GetTick>
 80079fc:	4602      	mov	r2, r0
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	1ad3      	subs	r3, r2, r3
 8007a02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d901      	bls.n	8007a0e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007a0a:	2303      	movs	r3, #3
 8007a0c:	e03b      	b.n	8007a86 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a0e:	4b20      	ldr	r3, [pc, #128]	@ (8007a90 <HAL_RCC_ClockConfig+0x260>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f003 030f 	and.w	r3, r3, #15
 8007a16:	683a      	ldr	r2, [r7, #0]
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d1ed      	bne.n	80079f8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f003 0304 	and.w	r3, r3, #4
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d008      	beq.n	8007a3a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007a28:	4b1a      	ldr	r3, [pc, #104]	@ (8007a94 <HAL_RCC_ClockConfig+0x264>)
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	68db      	ldr	r3, [r3, #12]
 8007a34:	4917      	ldr	r1, [pc, #92]	@ (8007a94 <HAL_RCC_ClockConfig+0x264>)
 8007a36:	4313      	orrs	r3, r2
 8007a38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f003 0308 	and.w	r3, r3, #8
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d009      	beq.n	8007a5a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007a46:	4b13      	ldr	r3, [pc, #76]	@ (8007a94 <HAL_RCC_ClockConfig+0x264>)
 8007a48:	689b      	ldr	r3, [r3, #8]
 8007a4a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	691b      	ldr	r3, [r3, #16]
 8007a52:	00db      	lsls	r3, r3, #3
 8007a54:	490f      	ldr	r1, [pc, #60]	@ (8007a94 <HAL_RCC_ClockConfig+0x264>)
 8007a56:	4313      	orrs	r3, r2
 8007a58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007a5a:	f000 f825 	bl	8007aa8 <HAL_RCC_GetSysClockFreq>
 8007a5e:	4602      	mov	r2, r0
 8007a60:	4b0c      	ldr	r3, [pc, #48]	@ (8007a94 <HAL_RCC_ClockConfig+0x264>)
 8007a62:	689b      	ldr	r3, [r3, #8]
 8007a64:	091b      	lsrs	r3, r3, #4
 8007a66:	f003 030f 	and.w	r3, r3, #15
 8007a6a:	490c      	ldr	r1, [pc, #48]	@ (8007a9c <HAL_RCC_ClockConfig+0x26c>)
 8007a6c:	5ccb      	ldrb	r3, [r1, r3]
 8007a6e:	f003 031f 	and.w	r3, r3, #31
 8007a72:	fa22 f303 	lsr.w	r3, r2, r3
 8007a76:	4a0a      	ldr	r2, [pc, #40]	@ (8007aa0 <HAL_RCC_ClockConfig+0x270>)
 8007a78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8007aa4 <HAL_RCC_ClockConfig+0x274>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f7fb f8b4 	bl	8002bec <HAL_InitTick>
 8007a84:	4603      	mov	r3, r0
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3718      	adds	r7, #24
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
 8007a8e:	bf00      	nop
 8007a90:	40022000 	.word	0x40022000
 8007a94:	40021000 	.word	0x40021000
 8007a98:	04c4b400 	.word	0x04c4b400
 8007a9c:	080148fc 	.word	0x080148fc
 8007aa0:	20000000 	.word	0x20000000
 8007aa4:	20000004 	.word	0x20000004

08007aa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b087      	sub	sp, #28
 8007aac:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007aae:	4b2c      	ldr	r3, [pc, #176]	@ (8007b60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007ab0:	689b      	ldr	r3, [r3, #8]
 8007ab2:	f003 030c 	and.w	r3, r3, #12
 8007ab6:	2b04      	cmp	r3, #4
 8007ab8:	d102      	bne.n	8007ac0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007aba:	4b2a      	ldr	r3, [pc, #168]	@ (8007b64 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007abc:	613b      	str	r3, [r7, #16]
 8007abe:	e047      	b.n	8007b50 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007ac0:	4b27      	ldr	r3, [pc, #156]	@ (8007b60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007ac2:	689b      	ldr	r3, [r3, #8]
 8007ac4:	f003 030c 	and.w	r3, r3, #12
 8007ac8:	2b08      	cmp	r3, #8
 8007aca:	d102      	bne.n	8007ad2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007acc:	4b26      	ldr	r3, [pc, #152]	@ (8007b68 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007ace:	613b      	str	r3, [r7, #16]
 8007ad0:	e03e      	b.n	8007b50 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007ad2:	4b23      	ldr	r3, [pc, #140]	@ (8007b60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007ad4:	689b      	ldr	r3, [r3, #8]
 8007ad6:	f003 030c 	and.w	r3, r3, #12
 8007ada:	2b0c      	cmp	r3, #12
 8007adc:	d136      	bne.n	8007b4c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007ade:	4b20      	ldr	r3, [pc, #128]	@ (8007b60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007ae0:	68db      	ldr	r3, [r3, #12]
 8007ae2:	f003 0303 	and.w	r3, r3, #3
 8007ae6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007ae8:	4b1d      	ldr	r3, [pc, #116]	@ (8007b60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007aea:	68db      	ldr	r3, [r3, #12]
 8007aec:	091b      	lsrs	r3, r3, #4
 8007aee:	f003 030f 	and.w	r3, r3, #15
 8007af2:	3301      	adds	r3, #1
 8007af4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	2b03      	cmp	r3, #3
 8007afa:	d10c      	bne.n	8007b16 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007afc:	4a1a      	ldr	r2, [pc, #104]	@ (8007b68 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b04:	4a16      	ldr	r2, [pc, #88]	@ (8007b60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007b06:	68d2      	ldr	r2, [r2, #12]
 8007b08:	0a12      	lsrs	r2, r2, #8
 8007b0a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007b0e:	fb02 f303 	mul.w	r3, r2, r3
 8007b12:	617b      	str	r3, [r7, #20]
      break;
 8007b14:	e00c      	b.n	8007b30 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007b16:	4a13      	ldr	r2, [pc, #76]	@ (8007b64 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b1e:	4a10      	ldr	r2, [pc, #64]	@ (8007b60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007b20:	68d2      	ldr	r2, [r2, #12]
 8007b22:	0a12      	lsrs	r2, r2, #8
 8007b24:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007b28:	fb02 f303 	mul.w	r3, r2, r3
 8007b2c:	617b      	str	r3, [r7, #20]
      break;
 8007b2e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007b30:	4b0b      	ldr	r3, [pc, #44]	@ (8007b60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007b32:	68db      	ldr	r3, [r3, #12]
 8007b34:	0e5b      	lsrs	r3, r3, #25
 8007b36:	f003 0303 	and.w	r3, r3, #3
 8007b3a:	3301      	adds	r3, #1
 8007b3c:	005b      	lsls	r3, r3, #1
 8007b3e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007b40:	697a      	ldr	r2, [r7, #20]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b48:	613b      	str	r3, [r7, #16]
 8007b4a:	e001      	b.n	8007b50 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007b50:	693b      	ldr	r3, [r7, #16]
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	371c      	adds	r7, #28
 8007b56:	46bd      	mov	sp, r7
 8007b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5c:	4770      	bx	lr
 8007b5e:	bf00      	nop
 8007b60:	40021000 	.word	0x40021000
 8007b64:	00f42400 	.word	0x00f42400
 8007b68:	007a1200 	.word	0x007a1200

08007b6c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b087      	sub	sp, #28
 8007b70:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007b72:	4b1e      	ldr	r3, [pc, #120]	@ (8007bec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007b74:	68db      	ldr	r3, [r3, #12]
 8007b76:	f003 0303 	and.w	r3, r3, #3
 8007b7a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007b7c:	4b1b      	ldr	r3, [pc, #108]	@ (8007bec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007b7e:	68db      	ldr	r3, [r3, #12]
 8007b80:	091b      	lsrs	r3, r3, #4
 8007b82:	f003 030f 	and.w	r3, r3, #15
 8007b86:	3301      	adds	r3, #1
 8007b88:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	2b03      	cmp	r3, #3
 8007b8e:	d10c      	bne.n	8007baa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007b90:	4a17      	ldr	r2, [pc, #92]	@ (8007bf0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b98:	4a14      	ldr	r2, [pc, #80]	@ (8007bec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007b9a:	68d2      	ldr	r2, [r2, #12]
 8007b9c:	0a12      	lsrs	r2, r2, #8
 8007b9e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007ba2:	fb02 f303 	mul.w	r3, r2, r3
 8007ba6:	617b      	str	r3, [r7, #20]
    break;
 8007ba8:	e00c      	b.n	8007bc4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007baa:	4a12      	ldr	r2, [pc, #72]	@ (8007bf4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bb2:	4a0e      	ldr	r2, [pc, #56]	@ (8007bec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007bb4:	68d2      	ldr	r2, [r2, #12]
 8007bb6:	0a12      	lsrs	r2, r2, #8
 8007bb8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007bbc:	fb02 f303 	mul.w	r3, r2, r3
 8007bc0:	617b      	str	r3, [r7, #20]
    break;
 8007bc2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007bc4:	4b09      	ldr	r3, [pc, #36]	@ (8007bec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007bc6:	68db      	ldr	r3, [r3, #12]
 8007bc8:	0e5b      	lsrs	r3, r3, #25
 8007bca:	f003 0303 	and.w	r3, r3, #3
 8007bce:	3301      	adds	r3, #1
 8007bd0:	005b      	lsls	r3, r3, #1
 8007bd2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007bd4:	697a      	ldr	r2, [r7, #20]
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bdc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007bde:	687b      	ldr	r3, [r7, #4]
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	371c      	adds	r7, #28
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr
 8007bec:	40021000 	.word	0x40021000
 8007bf0:	007a1200 	.word	0x007a1200
 8007bf4:	00f42400 	.word	0x00f42400

08007bf8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b086      	sub	sp, #24
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007c00:	2300      	movs	r3, #0
 8007c02:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007c04:	2300      	movs	r3, #0
 8007c06:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	f000 8098 	beq.w	8007d46 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007c16:	2300      	movs	r3, #0
 8007c18:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007c1a:	4b43      	ldr	r3, [pc, #268]	@ (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d10d      	bne.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c26:	4b40      	ldr	r3, [pc, #256]	@ (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c2a:	4a3f      	ldr	r2, [pc, #252]	@ (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007c30:	6593      	str	r3, [r2, #88]	@ 0x58
 8007c32:	4b3d      	ldr	r3, [pc, #244]	@ (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c3a:	60bb      	str	r3, [r7, #8]
 8007c3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007c42:	4b3a      	ldr	r3, [pc, #232]	@ (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a39      	ldr	r2, [pc, #228]	@ (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007c48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c4c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007c4e:	f7fb f819 	bl	8002c84 <HAL_GetTick>
 8007c52:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007c54:	e009      	b.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c56:	f7fb f815 	bl	8002c84 <HAL_GetTick>
 8007c5a:	4602      	mov	r2, r0
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	1ad3      	subs	r3, r2, r3
 8007c60:	2b02      	cmp	r3, #2
 8007c62:	d902      	bls.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007c64:	2303      	movs	r3, #3
 8007c66:	74fb      	strb	r3, [r7, #19]
        break;
 8007c68:	e005      	b.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007c6a:	4b30      	ldr	r3, [pc, #192]	@ (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d0ef      	beq.n	8007c56 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007c76:	7cfb      	ldrb	r3, [r7, #19]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d159      	bne.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007c7c:	4b2a      	ldr	r3, [pc, #168]	@ (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c86:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d01e      	beq.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c92:	697a      	ldr	r2, [r7, #20]
 8007c94:	429a      	cmp	r2, r3
 8007c96:	d019      	beq.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007c98:	4b23      	ldr	r3, [pc, #140]	@ (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ca2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007ca4:	4b20      	ldr	r3, [pc, #128]	@ (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007caa:	4a1f      	ldr	r2, [pc, #124]	@ (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007cac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007cb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007cb4:	4b1c      	ldr	r3, [pc, #112]	@ (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cba:	4a1b      	ldr	r2, [pc, #108]	@ (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007cbc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007cc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007cc4:	4a18      	ldr	r2, [pc, #96]	@ (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	f003 0301 	and.w	r3, r3, #1
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d016      	beq.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cd6:	f7fa ffd5 	bl	8002c84 <HAL_GetTick>
 8007cda:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007cdc:	e00b      	b.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007cde:	f7fa ffd1 	bl	8002c84 <HAL_GetTick>
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	1ad3      	subs	r3, r2, r3
 8007ce8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d902      	bls.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007cf0:	2303      	movs	r3, #3
 8007cf2:	74fb      	strb	r3, [r7, #19]
            break;
 8007cf4:	e006      	b.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007cf6:	4b0c      	ldr	r3, [pc, #48]	@ (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cfc:	f003 0302 	and.w	r3, r3, #2
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d0ec      	beq.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007d04:	7cfb      	ldrb	r3, [r7, #19]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d10b      	bne.n	8007d22 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007d0a:	4b07      	ldr	r3, [pc, #28]	@ (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d10:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d18:	4903      	ldr	r1, [pc, #12]	@ (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007d20:	e008      	b.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007d22:	7cfb      	ldrb	r3, [r7, #19]
 8007d24:	74bb      	strb	r3, [r7, #18]
 8007d26:	e005      	b.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007d28:	40021000 	.word	0x40021000
 8007d2c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d30:	7cfb      	ldrb	r3, [r7, #19]
 8007d32:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007d34:	7c7b      	ldrb	r3, [r7, #17]
 8007d36:	2b01      	cmp	r3, #1
 8007d38:	d105      	bne.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d3a:	4ba7      	ldr	r3, [pc, #668]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d3e:	4aa6      	ldr	r2, [pc, #664]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007d44:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f003 0301 	and.w	r3, r3, #1
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d00a      	beq.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007d52:	4ba1      	ldr	r3, [pc, #644]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d58:	f023 0203 	bic.w	r2, r3, #3
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	499d      	ldr	r1, [pc, #628]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d62:	4313      	orrs	r3, r2
 8007d64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f003 0302 	and.w	r3, r3, #2
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d00a      	beq.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007d74:	4b98      	ldr	r3, [pc, #608]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d7a:	f023 020c 	bic.w	r2, r3, #12
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	689b      	ldr	r3, [r3, #8]
 8007d82:	4995      	ldr	r1, [pc, #596]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d84:	4313      	orrs	r3, r2
 8007d86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f003 0304 	and.w	r3, r3, #4
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d00a      	beq.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007d96:	4b90      	ldr	r3, [pc, #576]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d9c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	68db      	ldr	r3, [r3, #12]
 8007da4:	498c      	ldr	r1, [pc, #560]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007da6:	4313      	orrs	r3, r2
 8007da8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f003 0308 	and.w	r3, r3, #8
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d00a      	beq.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007db8:	4b87      	ldr	r3, [pc, #540]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dbe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	691b      	ldr	r3, [r3, #16]
 8007dc6:	4984      	ldr	r1, [pc, #528]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f003 0310 	and.w	r3, r3, #16
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d00a      	beq.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007dda:	4b7f      	ldr	r3, [pc, #508]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007de0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	695b      	ldr	r3, [r3, #20]
 8007de8:	497b      	ldr	r1, [pc, #492]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007dea:	4313      	orrs	r3, r2
 8007dec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f003 0320 	and.w	r3, r3, #32
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d00a      	beq.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007dfc:	4b76      	ldr	r3, [pc, #472]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e02:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	699b      	ldr	r3, [r3, #24]
 8007e0a:	4973      	ldr	r1, [pc, #460]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e0c:	4313      	orrs	r3, r2
 8007e0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d00a      	beq.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007e1e:	4b6e      	ldr	r3, [pc, #440]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e24:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	69db      	ldr	r3, [r3, #28]
 8007e2c:	496a      	ldr	r1, [pc, #424]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d00a      	beq.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007e40:	4b65      	ldr	r3, [pc, #404]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e46:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6a1b      	ldr	r3, [r3, #32]
 8007e4e:	4962      	ldr	r1, [pc, #392]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e50:	4313      	orrs	r3, r2
 8007e52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d00a      	beq.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007e62:	4b5d      	ldr	r3, [pc, #372]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e68:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e70:	4959      	ldr	r1, [pc, #356]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e72:	4313      	orrs	r3, r2
 8007e74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d00a      	beq.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007e84:	4b54      	ldr	r3, [pc, #336]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e86:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007e8a:	f023 0203 	bic.w	r2, r3, #3
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e92:	4951      	ldr	r1, [pc, #324]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e94:	4313      	orrs	r3, r2
 8007e96:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d00a      	beq.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007ea6:	4b4c      	ldr	r3, [pc, #304]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007eac:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eb4:	4948      	ldr	r1, [pc, #288]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d015      	beq.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007ec8:	4b43      	ldr	r3, [pc, #268]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ece:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ed6:	4940      	ldr	r1, [pc, #256]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ee2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ee6:	d105      	bne.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007ee8:	4b3b      	ldr	r3, [pc, #236]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007eea:	68db      	ldr	r3, [r3, #12]
 8007eec:	4a3a      	ldr	r2, [pc, #232]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007eee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007ef2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d015      	beq.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007f00:	4b35      	ldr	r3, [pc, #212]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f06:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f0e:	4932      	ldr	r1, [pc, #200]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f10:	4313      	orrs	r3, r2
 8007f12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f1a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007f1e:	d105      	bne.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007f20:	4b2d      	ldr	r3, [pc, #180]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f22:	68db      	ldr	r3, [r3, #12]
 8007f24:	4a2c      	ldr	r2, [pc, #176]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007f2a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d015      	beq.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007f38:	4b27      	ldr	r3, [pc, #156]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f3e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f46:	4924      	ldr	r1, [pc, #144]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f52:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007f56:	d105      	bne.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007f58:	4b1f      	ldr	r3, [pc, #124]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f5a:	68db      	ldr	r3, [r3, #12]
 8007f5c:	4a1e      	ldr	r2, [pc, #120]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007f62:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d015      	beq.n	8007f9c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007f70:	4b19      	ldr	r3, [pc, #100]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f76:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f7e:	4916      	ldr	r1, [pc, #88]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f80:	4313      	orrs	r3, r2
 8007f82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f8e:	d105      	bne.n	8007f9c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007f90:	4b11      	ldr	r3, [pc, #68]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f92:	68db      	ldr	r3, [r3, #12]
 8007f94:	4a10      	ldr	r2, [pc, #64]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007f96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007f9a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d019      	beq.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007fa8:	4b0b      	ldr	r3, [pc, #44]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fb6:	4908      	ldr	r1, [pc, #32]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fc2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007fc6:	d109      	bne.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007fc8:	4b03      	ldr	r3, [pc, #12]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007fca:	68db      	ldr	r3, [r3, #12]
 8007fcc:	4a02      	ldr	r2, [pc, #8]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007fce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007fd2:	60d3      	str	r3, [r2, #12]
 8007fd4:	e002      	b.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007fd6:	bf00      	nop
 8007fd8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d015      	beq.n	8008014 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007fe8:	4b29      	ldr	r3, [pc, #164]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fee:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ff6:	4926      	ldr	r1, [pc, #152]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008002:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008006:	d105      	bne.n	8008014 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008008:	4b21      	ldr	r3, [pc, #132]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800800a:	68db      	ldr	r3, [r3, #12]
 800800c:	4a20      	ldr	r2, [pc, #128]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800800e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008012:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800801c:	2b00      	cmp	r3, #0
 800801e:	d015      	beq.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8008020:	4b1b      	ldr	r3, [pc, #108]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008022:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008026:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800802e:	4918      	ldr	r1, [pc, #96]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008030:	4313      	orrs	r3, r2
 8008032:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800803a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800803e:	d105      	bne.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008040:	4b13      	ldr	r3, [pc, #76]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008042:	68db      	ldr	r3, [r3, #12]
 8008044:	4a12      	ldr	r2, [pc, #72]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008046:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800804a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008054:	2b00      	cmp	r3, #0
 8008056:	d015      	beq.n	8008084 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008058:	4b0d      	ldr	r3, [pc, #52]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800805a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800805e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008066:	490a      	ldr	r1, [pc, #40]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008068:	4313      	orrs	r3, r2
 800806a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008072:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008076:	d105      	bne.n	8008084 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008078:	4b05      	ldr	r3, [pc, #20]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800807a:	68db      	ldr	r3, [r3, #12]
 800807c:	4a04      	ldr	r2, [pc, #16]	@ (8008090 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800807e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008082:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008084:	7cbb      	ldrb	r3, [r7, #18]
}
 8008086:	4618      	mov	r0, r3
 8008088:	3718      	adds	r7, #24
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}
 800808e:	bf00      	nop
 8008090:	40021000 	.word	0x40021000

08008094 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b082      	sub	sp, #8
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d101      	bne.n	80080a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80080a2:	2301      	movs	r3, #1
 80080a4:	e049      	b.n	800813a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80080ac:	b2db      	uxtb	r3, r3
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d106      	bne.n	80080c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2200      	movs	r2, #0
 80080b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f7fa f8c8 	bl	8002250 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2202      	movs	r2, #2
 80080c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681a      	ldr	r2, [r3, #0]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	3304      	adds	r3, #4
 80080d0:	4619      	mov	r1, r3
 80080d2:	4610      	mov	r0, r2
 80080d4:	f001 fe08 	bl	8009ce8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2201      	movs	r2, #1
 80080dc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2201      	movs	r2, #1
 80080e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2201      	movs	r2, #1
 80080ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2201      	movs	r2, #1
 80080f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2201      	movs	r2, #1
 80080fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2201      	movs	r2, #1
 8008104:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2201      	movs	r2, #1
 800810c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2201      	movs	r2, #1
 8008114:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2201      	movs	r2, #1
 800811c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2201      	movs	r2, #1
 8008124:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2201      	movs	r2, #1
 800812c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2201      	movs	r2, #1
 8008134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008138:	2300      	movs	r3, #0
}
 800813a:	4618      	mov	r0, r3
 800813c:	3708      	adds	r7, #8
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}
	...

08008144 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008144:	b480      	push	{r7}
 8008146:	b085      	sub	sp, #20
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008152:	b2db      	uxtb	r3, r3
 8008154:	2b01      	cmp	r3, #1
 8008156:	d001      	beq.n	800815c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008158:	2301      	movs	r3, #1
 800815a:	e04c      	b.n	80081f6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2202      	movs	r2, #2
 8008160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a26      	ldr	r2, [pc, #152]	@ (8008204 <HAL_TIM_Base_Start+0xc0>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d022      	beq.n	80081b4 <HAL_TIM_Base_Start+0x70>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008176:	d01d      	beq.n	80081b4 <HAL_TIM_Base_Start+0x70>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a22      	ldr	r2, [pc, #136]	@ (8008208 <HAL_TIM_Base_Start+0xc4>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d018      	beq.n	80081b4 <HAL_TIM_Base_Start+0x70>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a21      	ldr	r2, [pc, #132]	@ (800820c <HAL_TIM_Base_Start+0xc8>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d013      	beq.n	80081b4 <HAL_TIM_Base_Start+0x70>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a1f      	ldr	r2, [pc, #124]	@ (8008210 <HAL_TIM_Base_Start+0xcc>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d00e      	beq.n	80081b4 <HAL_TIM_Base_Start+0x70>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a1e      	ldr	r2, [pc, #120]	@ (8008214 <HAL_TIM_Base_Start+0xd0>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d009      	beq.n	80081b4 <HAL_TIM_Base_Start+0x70>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4a1c      	ldr	r2, [pc, #112]	@ (8008218 <HAL_TIM_Base_Start+0xd4>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d004      	beq.n	80081b4 <HAL_TIM_Base_Start+0x70>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a1b      	ldr	r2, [pc, #108]	@ (800821c <HAL_TIM_Base_Start+0xd8>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d115      	bne.n	80081e0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	689a      	ldr	r2, [r3, #8]
 80081ba:	4b19      	ldr	r3, [pc, #100]	@ (8008220 <HAL_TIM_Base_Start+0xdc>)
 80081bc:	4013      	ands	r3, r2
 80081be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	2b06      	cmp	r3, #6
 80081c4:	d015      	beq.n	80081f2 <HAL_TIM_Base_Start+0xae>
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80081cc:	d011      	beq.n	80081f2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	681a      	ldr	r2, [r3, #0]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f042 0201 	orr.w	r2, r2, #1
 80081dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081de:	e008      	b.n	80081f2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	681a      	ldr	r2, [r3, #0]
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f042 0201 	orr.w	r2, r2, #1
 80081ee:	601a      	str	r2, [r3, #0]
 80081f0:	e000      	b.n	80081f4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80081f4:	2300      	movs	r3, #0
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3714      	adds	r7, #20
 80081fa:	46bd      	mov	sp, r7
 80081fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008200:	4770      	bx	lr
 8008202:	bf00      	nop
 8008204:	40012c00 	.word	0x40012c00
 8008208:	40000400 	.word	0x40000400
 800820c:	40000800 	.word	0x40000800
 8008210:	40000c00 	.word	0x40000c00
 8008214:	40013400 	.word	0x40013400
 8008218:	40014000 	.word	0x40014000
 800821c:	40015000 	.word	0x40015000
 8008220:	00010007 	.word	0x00010007

08008224 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008224:	b480      	push	{r7}
 8008226:	b085      	sub	sp, #20
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008232:	b2db      	uxtb	r3, r3
 8008234:	2b01      	cmp	r3, #1
 8008236:	d001      	beq.n	800823c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008238:	2301      	movs	r3, #1
 800823a:	e054      	b.n	80082e6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2202      	movs	r2, #2
 8008240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	68da      	ldr	r2, [r3, #12]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f042 0201 	orr.w	r2, r2, #1
 8008252:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4a26      	ldr	r2, [pc, #152]	@ (80082f4 <HAL_TIM_Base_Start_IT+0xd0>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d022      	beq.n	80082a4 <HAL_TIM_Base_Start_IT+0x80>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008266:	d01d      	beq.n	80082a4 <HAL_TIM_Base_Start_IT+0x80>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a22      	ldr	r2, [pc, #136]	@ (80082f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d018      	beq.n	80082a4 <HAL_TIM_Base_Start_IT+0x80>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4a21      	ldr	r2, [pc, #132]	@ (80082fc <HAL_TIM_Base_Start_IT+0xd8>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d013      	beq.n	80082a4 <HAL_TIM_Base_Start_IT+0x80>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4a1f      	ldr	r2, [pc, #124]	@ (8008300 <HAL_TIM_Base_Start_IT+0xdc>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d00e      	beq.n	80082a4 <HAL_TIM_Base_Start_IT+0x80>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4a1e      	ldr	r2, [pc, #120]	@ (8008304 <HAL_TIM_Base_Start_IT+0xe0>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d009      	beq.n	80082a4 <HAL_TIM_Base_Start_IT+0x80>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4a1c      	ldr	r2, [pc, #112]	@ (8008308 <HAL_TIM_Base_Start_IT+0xe4>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d004      	beq.n	80082a4 <HAL_TIM_Base_Start_IT+0x80>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4a1b      	ldr	r2, [pc, #108]	@ (800830c <HAL_TIM_Base_Start_IT+0xe8>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d115      	bne.n	80082d0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	689a      	ldr	r2, [r3, #8]
 80082aa:	4b19      	ldr	r3, [pc, #100]	@ (8008310 <HAL_TIM_Base_Start_IT+0xec>)
 80082ac:	4013      	ands	r3, r2
 80082ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	2b06      	cmp	r3, #6
 80082b4:	d015      	beq.n	80082e2 <HAL_TIM_Base_Start_IT+0xbe>
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082bc:	d011      	beq.n	80082e2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	681a      	ldr	r2, [r3, #0]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f042 0201 	orr.w	r2, r2, #1
 80082cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082ce:	e008      	b.n	80082e2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	681a      	ldr	r2, [r3, #0]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f042 0201 	orr.w	r2, r2, #1
 80082de:	601a      	str	r2, [r3, #0]
 80082e0:	e000      	b.n	80082e4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80082e4:	2300      	movs	r3, #0
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3714      	adds	r7, #20
 80082ea:	46bd      	mov	sp, r7
 80082ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f0:	4770      	bx	lr
 80082f2:	bf00      	nop
 80082f4:	40012c00 	.word	0x40012c00
 80082f8:	40000400 	.word	0x40000400
 80082fc:	40000800 	.word	0x40000800
 8008300:	40000c00 	.word	0x40000c00
 8008304:	40013400 	.word	0x40013400
 8008308:	40014000 	.word	0x40014000
 800830c:	40015000 	.word	0x40015000
 8008310:	00010007 	.word	0x00010007

08008314 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b082      	sub	sp, #8
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d101      	bne.n	8008326 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8008322:	2301      	movs	r3, #1
 8008324:	e049      	b.n	80083ba <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800832c:	b2db      	uxtb	r3, r3
 800832e:	2b00      	cmp	r3, #0
 8008330:	d106      	bne.n	8008340 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2200      	movs	r2, #0
 8008336:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f000 f841 	bl	80083c2 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2202      	movs	r2, #2
 8008344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681a      	ldr	r2, [r3, #0]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	3304      	adds	r3, #4
 8008350:	4619      	mov	r1, r3
 8008352:	4610      	mov	r0, r2
 8008354:	f001 fcc8 	bl	8009ce8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2201      	movs	r2, #1
 800835c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2201      	movs	r2, #1
 8008364:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2201      	movs	r2, #1
 800836c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2201      	movs	r2, #1
 8008374:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2201      	movs	r2, #1
 800837c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2201      	movs	r2, #1
 8008384:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2201      	movs	r2, #1
 800838c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2201      	movs	r2, #1
 8008394:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2201      	movs	r2, #1
 800839c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2201      	movs	r2, #1
 80083a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2201      	movs	r2, #1
 80083ac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2201      	movs	r2, #1
 80083b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80083b8:	2300      	movs	r3, #0
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3708      	adds	r7, #8
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}

080083c2 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80083c2:	b480      	push	{r7}
 80083c4:	b083      	sub	sp, #12
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80083ca:	bf00      	nop
 80083cc:	370c      	adds	r7, #12
 80083ce:	46bd      	mov	sp, r7
 80083d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d4:	4770      	bx	lr
	...

080083d8 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b084      	sub	sp, #16
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
 80083e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d109      	bne.n	80083fc <HAL_TIM_OC_Start+0x24>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80083ee:	b2db      	uxtb	r3, r3
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	bf14      	ite	ne
 80083f4:	2301      	movne	r3, #1
 80083f6:	2300      	moveq	r3, #0
 80083f8:	b2db      	uxtb	r3, r3
 80083fa:	e03c      	b.n	8008476 <HAL_TIM_OC_Start+0x9e>
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	2b04      	cmp	r3, #4
 8008400:	d109      	bne.n	8008416 <HAL_TIM_OC_Start+0x3e>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008408:	b2db      	uxtb	r3, r3
 800840a:	2b01      	cmp	r3, #1
 800840c:	bf14      	ite	ne
 800840e:	2301      	movne	r3, #1
 8008410:	2300      	moveq	r3, #0
 8008412:	b2db      	uxtb	r3, r3
 8008414:	e02f      	b.n	8008476 <HAL_TIM_OC_Start+0x9e>
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	2b08      	cmp	r3, #8
 800841a:	d109      	bne.n	8008430 <HAL_TIM_OC_Start+0x58>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008422:	b2db      	uxtb	r3, r3
 8008424:	2b01      	cmp	r3, #1
 8008426:	bf14      	ite	ne
 8008428:	2301      	movne	r3, #1
 800842a:	2300      	moveq	r3, #0
 800842c:	b2db      	uxtb	r3, r3
 800842e:	e022      	b.n	8008476 <HAL_TIM_OC_Start+0x9e>
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	2b0c      	cmp	r3, #12
 8008434:	d109      	bne.n	800844a <HAL_TIM_OC_Start+0x72>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800843c:	b2db      	uxtb	r3, r3
 800843e:	2b01      	cmp	r3, #1
 8008440:	bf14      	ite	ne
 8008442:	2301      	movne	r3, #1
 8008444:	2300      	moveq	r3, #0
 8008446:	b2db      	uxtb	r3, r3
 8008448:	e015      	b.n	8008476 <HAL_TIM_OC_Start+0x9e>
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	2b10      	cmp	r3, #16
 800844e:	d109      	bne.n	8008464 <HAL_TIM_OC_Start+0x8c>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008456:	b2db      	uxtb	r3, r3
 8008458:	2b01      	cmp	r3, #1
 800845a:	bf14      	ite	ne
 800845c:	2301      	movne	r3, #1
 800845e:	2300      	moveq	r3, #0
 8008460:	b2db      	uxtb	r3, r3
 8008462:	e008      	b.n	8008476 <HAL_TIM_OC_Start+0x9e>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800846a:	b2db      	uxtb	r3, r3
 800846c:	2b01      	cmp	r3, #1
 800846e:	bf14      	ite	ne
 8008470:	2301      	movne	r3, #1
 8008472:	2300      	moveq	r3, #0
 8008474:	b2db      	uxtb	r3, r3
 8008476:	2b00      	cmp	r3, #0
 8008478:	d001      	beq.n	800847e <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 800847a:	2301      	movs	r3, #1
 800847c:	e0a6      	b.n	80085cc <HAL_TIM_OC_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d104      	bne.n	800848e <HAL_TIM_OC_Start+0xb6>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2202      	movs	r2, #2
 8008488:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800848c:	e023      	b.n	80084d6 <HAL_TIM_OC_Start+0xfe>
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	2b04      	cmp	r3, #4
 8008492:	d104      	bne.n	800849e <HAL_TIM_OC_Start+0xc6>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2202      	movs	r2, #2
 8008498:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800849c:	e01b      	b.n	80084d6 <HAL_TIM_OC_Start+0xfe>
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	2b08      	cmp	r3, #8
 80084a2:	d104      	bne.n	80084ae <HAL_TIM_OC_Start+0xd6>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2202      	movs	r2, #2
 80084a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80084ac:	e013      	b.n	80084d6 <HAL_TIM_OC_Start+0xfe>
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	2b0c      	cmp	r3, #12
 80084b2:	d104      	bne.n	80084be <HAL_TIM_OC_Start+0xe6>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2202      	movs	r2, #2
 80084b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80084bc:	e00b      	b.n	80084d6 <HAL_TIM_OC_Start+0xfe>
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	2b10      	cmp	r3, #16
 80084c2:	d104      	bne.n	80084ce <HAL_TIM_OC_Start+0xf6>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2202      	movs	r2, #2
 80084c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80084cc:	e003      	b.n	80084d6 <HAL_TIM_OC_Start+0xfe>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2202      	movs	r2, #2
 80084d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	2201      	movs	r2, #1
 80084dc:	6839      	ldr	r1, [r7, #0]
 80084de:	4618      	mov	r0, r3
 80084e0:	f002 fa86 	bl	800a9f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a3a      	ldr	r2, [pc, #232]	@ (80085d4 <HAL_TIM_OC_Start+0x1fc>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d018      	beq.n	8008520 <HAL_TIM_OC_Start+0x148>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4a39      	ldr	r2, [pc, #228]	@ (80085d8 <HAL_TIM_OC_Start+0x200>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d013      	beq.n	8008520 <HAL_TIM_OC_Start+0x148>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a37      	ldr	r2, [pc, #220]	@ (80085dc <HAL_TIM_OC_Start+0x204>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d00e      	beq.n	8008520 <HAL_TIM_OC_Start+0x148>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a36      	ldr	r2, [pc, #216]	@ (80085e0 <HAL_TIM_OC_Start+0x208>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d009      	beq.n	8008520 <HAL_TIM_OC_Start+0x148>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a34      	ldr	r2, [pc, #208]	@ (80085e4 <HAL_TIM_OC_Start+0x20c>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d004      	beq.n	8008520 <HAL_TIM_OC_Start+0x148>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4a33      	ldr	r2, [pc, #204]	@ (80085e8 <HAL_TIM_OC_Start+0x210>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d101      	bne.n	8008524 <HAL_TIM_OC_Start+0x14c>
 8008520:	2301      	movs	r3, #1
 8008522:	e000      	b.n	8008526 <HAL_TIM_OC_Start+0x14e>
 8008524:	2300      	movs	r3, #0
 8008526:	2b00      	cmp	r3, #0
 8008528:	d007      	beq.n	800853a <HAL_TIM_OC_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008538:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4a25      	ldr	r2, [pc, #148]	@ (80085d4 <HAL_TIM_OC_Start+0x1fc>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d022      	beq.n	800858a <HAL_TIM_OC_Start+0x1b2>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800854c:	d01d      	beq.n	800858a <HAL_TIM_OC_Start+0x1b2>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4a26      	ldr	r2, [pc, #152]	@ (80085ec <HAL_TIM_OC_Start+0x214>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d018      	beq.n	800858a <HAL_TIM_OC_Start+0x1b2>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a24      	ldr	r2, [pc, #144]	@ (80085f0 <HAL_TIM_OC_Start+0x218>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d013      	beq.n	800858a <HAL_TIM_OC_Start+0x1b2>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4a23      	ldr	r2, [pc, #140]	@ (80085f4 <HAL_TIM_OC_Start+0x21c>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d00e      	beq.n	800858a <HAL_TIM_OC_Start+0x1b2>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a19      	ldr	r2, [pc, #100]	@ (80085d8 <HAL_TIM_OC_Start+0x200>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d009      	beq.n	800858a <HAL_TIM_OC_Start+0x1b2>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4a18      	ldr	r2, [pc, #96]	@ (80085dc <HAL_TIM_OC_Start+0x204>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d004      	beq.n	800858a <HAL_TIM_OC_Start+0x1b2>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a18      	ldr	r2, [pc, #96]	@ (80085e8 <HAL_TIM_OC_Start+0x210>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d115      	bne.n	80085b6 <HAL_TIM_OC_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	689a      	ldr	r2, [r3, #8]
 8008590:	4b19      	ldr	r3, [pc, #100]	@ (80085f8 <HAL_TIM_OC_Start+0x220>)
 8008592:	4013      	ands	r3, r2
 8008594:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2b06      	cmp	r3, #6
 800859a:	d015      	beq.n	80085c8 <HAL_TIM_OC_Start+0x1f0>
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80085a2:	d011      	beq.n	80085c8 <HAL_TIM_OC_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	681a      	ldr	r2, [r3, #0]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f042 0201 	orr.w	r2, r2, #1
 80085b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085b4:	e008      	b.n	80085c8 <HAL_TIM_OC_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	681a      	ldr	r2, [r3, #0]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f042 0201 	orr.w	r2, r2, #1
 80085c4:	601a      	str	r2, [r3, #0]
 80085c6:	e000      	b.n	80085ca <HAL_TIM_OC_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085c8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80085ca:	2300      	movs	r3, #0
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3710      	adds	r7, #16
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}
 80085d4:	40012c00 	.word	0x40012c00
 80085d8:	40013400 	.word	0x40013400
 80085dc:	40014000 	.word	0x40014000
 80085e0:	40014400 	.word	0x40014400
 80085e4:	40014800 	.word	0x40014800
 80085e8:	40015000 	.word	0x40015000
 80085ec:	40000400 	.word	0x40000400
 80085f0:	40000800 	.word	0x40000800
 80085f4:	40000c00 	.word	0x40000c00
 80085f8:	00010007 	.word	0x00010007

080085fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b082      	sub	sp, #8
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d101      	bne.n	800860e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800860a:	2301      	movs	r3, #1
 800860c:	e049      	b.n	80086a2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008614:	b2db      	uxtb	r3, r3
 8008616:	2b00      	cmp	r3, #0
 8008618:	d106      	bne.n	8008628 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2200      	movs	r2, #0
 800861e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 f841 	bl	80086aa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2202      	movs	r2, #2
 800862c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681a      	ldr	r2, [r3, #0]
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	3304      	adds	r3, #4
 8008638:	4619      	mov	r1, r3
 800863a:	4610      	mov	r0, r2
 800863c:	f001 fb54 	bl	8009ce8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2201      	movs	r2, #1
 8008644:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2201      	movs	r2, #1
 800864c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2201      	movs	r2, #1
 8008654:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2201      	movs	r2, #1
 800865c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2201      	movs	r2, #1
 8008664:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2201      	movs	r2, #1
 800866c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2201      	movs	r2, #1
 8008674:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2201      	movs	r2, #1
 800867c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2201      	movs	r2, #1
 8008684:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2201      	movs	r2, #1
 800868c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2201      	movs	r2, #1
 8008694:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2201      	movs	r2, #1
 800869c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80086a0:	2300      	movs	r3, #0
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3708      	adds	r7, #8
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}

080086aa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80086aa:	b480      	push	{r7}
 80086ac:	b083      	sub	sp, #12
 80086ae:	af00      	add	r7, sp, #0
 80086b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80086b2:	bf00      	nop
 80086b4:	370c      	adds	r7, #12
 80086b6:	46bd      	mov	sp, r7
 80086b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086bc:	4770      	bx	lr
	...

080086c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b084      	sub	sp, #16
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d109      	bne.n	80086e4 <HAL_TIM_PWM_Start+0x24>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80086d6:	b2db      	uxtb	r3, r3
 80086d8:	2b01      	cmp	r3, #1
 80086da:	bf14      	ite	ne
 80086dc:	2301      	movne	r3, #1
 80086de:	2300      	moveq	r3, #0
 80086e0:	b2db      	uxtb	r3, r3
 80086e2:	e03c      	b.n	800875e <HAL_TIM_PWM_Start+0x9e>
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	2b04      	cmp	r3, #4
 80086e8:	d109      	bne.n	80086fe <HAL_TIM_PWM_Start+0x3e>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80086f0:	b2db      	uxtb	r3, r3
 80086f2:	2b01      	cmp	r3, #1
 80086f4:	bf14      	ite	ne
 80086f6:	2301      	movne	r3, #1
 80086f8:	2300      	moveq	r3, #0
 80086fa:	b2db      	uxtb	r3, r3
 80086fc:	e02f      	b.n	800875e <HAL_TIM_PWM_Start+0x9e>
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	2b08      	cmp	r3, #8
 8008702:	d109      	bne.n	8008718 <HAL_TIM_PWM_Start+0x58>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800870a:	b2db      	uxtb	r3, r3
 800870c:	2b01      	cmp	r3, #1
 800870e:	bf14      	ite	ne
 8008710:	2301      	movne	r3, #1
 8008712:	2300      	moveq	r3, #0
 8008714:	b2db      	uxtb	r3, r3
 8008716:	e022      	b.n	800875e <HAL_TIM_PWM_Start+0x9e>
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	2b0c      	cmp	r3, #12
 800871c:	d109      	bne.n	8008732 <HAL_TIM_PWM_Start+0x72>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008724:	b2db      	uxtb	r3, r3
 8008726:	2b01      	cmp	r3, #1
 8008728:	bf14      	ite	ne
 800872a:	2301      	movne	r3, #1
 800872c:	2300      	moveq	r3, #0
 800872e:	b2db      	uxtb	r3, r3
 8008730:	e015      	b.n	800875e <HAL_TIM_PWM_Start+0x9e>
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	2b10      	cmp	r3, #16
 8008736:	d109      	bne.n	800874c <HAL_TIM_PWM_Start+0x8c>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800873e:	b2db      	uxtb	r3, r3
 8008740:	2b01      	cmp	r3, #1
 8008742:	bf14      	ite	ne
 8008744:	2301      	movne	r3, #1
 8008746:	2300      	moveq	r3, #0
 8008748:	b2db      	uxtb	r3, r3
 800874a:	e008      	b.n	800875e <HAL_TIM_PWM_Start+0x9e>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008752:	b2db      	uxtb	r3, r3
 8008754:	2b01      	cmp	r3, #1
 8008756:	bf14      	ite	ne
 8008758:	2301      	movne	r3, #1
 800875a:	2300      	moveq	r3, #0
 800875c:	b2db      	uxtb	r3, r3
 800875e:	2b00      	cmp	r3, #0
 8008760:	d001      	beq.n	8008766 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008762:	2301      	movs	r3, #1
 8008764:	e0a6      	b.n	80088b4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d104      	bne.n	8008776 <HAL_TIM_PWM_Start+0xb6>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2202      	movs	r2, #2
 8008770:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008774:	e023      	b.n	80087be <HAL_TIM_PWM_Start+0xfe>
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	2b04      	cmp	r3, #4
 800877a:	d104      	bne.n	8008786 <HAL_TIM_PWM_Start+0xc6>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2202      	movs	r2, #2
 8008780:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008784:	e01b      	b.n	80087be <HAL_TIM_PWM_Start+0xfe>
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	2b08      	cmp	r3, #8
 800878a:	d104      	bne.n	8008796 <HAL_TIM_PWM_Start+0xd6>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2202      	movs	r2, #2
 8008790:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008794:	e013      	b.n	80087be <HAL_TIM_PWM_Start+0xfe>
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	2b0c      	cmp	r3, #12
 800879a:	d104      	bne.n	80087a6 <HAL_TIM_PWM_Start+0xe6>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2202      	movs	r2, #2
 80087a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80087a4:	e00b      	b.n	80087be <HAL_TIM_PWM_Start+0xfe>
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	2b10      	cmp	r3, #16
 80087aa:	d104      	bne.n	80087b6 <HAL_TIM_PWM_Start+0xf6>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2202      	movs	r2, #2
 80087b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80087b4:	e003      	b.n	80087be <HAL_TIM_PWM_Start+0xfe>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2202      	movs	r2, #2
 80087ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	2201      	movs	r2, #1
 80087c4:	6839      	ldr	r1, [r7, #0]
 80087c6:	4618      	mov	r0, r3
 80087c8:	f002 f912 	bl	800a9f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	4a3a      	ldr	r2, [pc, #232]	@ (80088bc <HAL_TIM_PWM_Start+0x1fc>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d018      	beq.n	8008808 <HAL_TIM_PWM_Start+0x148>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	4a39      	ldr	r2, [pc, #228]	@ (80088c0 <HAL_TIM_PWM_Start+0x200>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d013      	beq.n	8008808 <HAL_TIM_PWM_Start+0x148>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a37      	ldr	r2, [pc, #220]	@ (80088c4 <HAL_TIM_PWM_Start+0x204>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d00e      	beq.n	8008808 <HAL_TIM_PWM_Start+0x148>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4a36      	ldr	r2, [pc, #216]	@ (80088c8 <HAL_TIM_PWM_Start+0x208>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d009      	beq.n	8008808 <HAL_TIM_PWM_Start+0x148>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a34      	ldr	r2, [pc, #208]	@ (80088cc <HAL_TIM_PWM_Start+0x20c>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d004      	beq.n	8008808 <HAL_TIM_PWM_Start+0x148>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4a33      	ldr	r2, [pc, #204]	@ (80088d0 <HAL_TIM_PWM_Start+0x210>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d101      	bne.n	800880c <HAL_TIM_PWM_Start+0x14c>
 8008808:	2301      	movs	r3, #1
 800880a:	e000      	b.n	800880e <HAL_TIM_PWM_Start+0x14e>
 800880c:	2300      	movs	r3, #0
 800880e:	2b00      	cmp	r3, #0
 8008810:	d007      	beq.n	8008822 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008820:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4a25      	ldr	r2, [pc, #148]	@ (80088bc <HAL_TIM_PWM_Start+0x1fc>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d022      	beq.n	8008872 <HAL_TIM_PWM_Start+0x1b2>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008834:	d01d      	beq.n	8008872 <HAL_TIM_PWM_Start+0x1b2>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a26      	ldr	r2, [pc, #152]	@ (80088d4 <HAL_TIM_PWM_Start+0x214>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d018      	beq.n	8008872 <HAL_TIM_PWM_Start+0x1b2>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a24      	ldr	r2, [pc, #144]	@ (80088d8 <HAL_TIM_PWM_Start+0x218>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d013      	beq.n	8008872 <HAL_TIM_PWM_Start+0x1b2>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4a23      	ldr	r2, [pc, #140]	@ (80088dc <HAL_TIM_PWM_Start+0x21c>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d00e      	beq.n	8008872 <HAL_TIM_PWM_Start+0x1b2>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a19      	ldr	r2, [pc, #100]	@ (80088c0 <HAL_TIM_PWM_Start+0x200>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d009      	beq.n	8008872 <HAL_TIM_PWM_Start+0x1b2>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4a18      	ldr	r2, [pc, #96]	@ (80088c4 <HAL_TIM_PWM_Start+0x204>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d004      	beq.n	8008872 <HAL_TIM_PWM_Start+0x1b2>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a18      	ldr	r2, [pc, #96]	@ (80088d0 <HAL_TIM_PWM_Start+0x210>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d115      	bne.n	800889e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	689a      	ldr	r2, [r3, #8]
 8008878:	4b19      	ldr	r3, [pc, #100]	@ (80088e0 <HAL_TIM_PWM_Start+0x220>)
 800887a:	4013      	ands	r3, r2
 800887c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2b06      	cmp	r3, #6
 8008882:	d015      	beq.n	80088b0 <HAL_TIM_PWM_Start+0x1f0>
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800888a:	d011      	beq.n	80088b0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	681a      	ldr	r2, [r3, #0]
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f042 0201 	orr.w	r2, r2, #1
 800889a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800889c:	e008      	b.n	80088b0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	681a      	ldr	r2, [r3, #0]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f042 0201 	orr.w	r2, r2, #1
 80088ac:	601a      	str	r2, [r3, #0]
 80088ae:	e000      	b.n	80088b2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088b0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80088b2:	2300      	movs	r3, #0
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3710      	adds	r7, #16
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}
 80088bc:	40012c00 	.word	0x40012c00
 80088c0:	40013400 	.word	0x40013400
 80088c4:	40014000 	.word	0x40014000
 80088c8:	40014400 	.word	0x40014400
 80088cc:	40014800 	.word	0x40014800
 80088d0:	40015000 	.word	0x40015000
 80088d4:	40000400 	.word	0x40000400
 80088d8:	40000800 	.word	0x40000800
 80088dc:	40000c00 	.word	0x40000c00
 80088e0:	00010007 	.word	0x00010007

080088e4 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b086      	sub	sp, #24
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	60f8      	str	r0, [r7, #12]
 80088ec:	60b9      	str	r1, [r7, #8]
 80088ee:	607a      	str	r2, [r7, #4]
 80088f0:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80088f2:	2300      	movs	r3, #0
 80088f4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d109      	bne.n	8008910 <HAL_TIM_PWM_Start_DMA+0x2c>
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008902:	b2db      	uxtb	r3, r3
 8008904:	2b02      	cmp	r3, #2
 8008906:	bf0c      	ite	eq
 8008908:	2301      	moveq	r3, #1
 800890a:	2300      	movne	r3, #0
 800890c:	b2db      	uxtb	r3, r3
 800890e:	e03c      	b.n	800898a <HAL_TIM_PWM_Start_DMA+0xa6>
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	2b04      	cmp	r3, #4
 8008914:	d109      	bne.n	800892a <HAL_TIM_PWM_Start_DMA+0x46>
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800891c:	b2db      	uxtb	r3, r3
 800891e:	2b02      	cmp	r3, #2
 8008920:	bf0c      	ite	eq
 8008922:	2301      	moveq	r3, #1
 8008924:	2300      	movne	r3, #0
 8008926:	b2db      	uxtb	r3, r3
 8008928:	e02f      	b.n	800898a <HAL_TIM_PWM_Start_DMA+0xa6>
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	2b08      	cmp	r3, #8
 800892e:	d109      	bne.n	8008944 <HAL_TIM_PWM_Start_DMA+0x60>
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008936:	b2db      	uxtb	r3, r3
 8008938:	2b02      	cmp	r3, #2
 800893a:	bf0c      	ite	eq
 800893c:	2301      	moveq	r3, #1
 800893e:	2300      	movne	r3, #0
 8008940:	b2db      	uxtb	r3, r3
 8008942:	e022      	b.n	800898a <HAL_TIM_PWM_Start_DMA+0xa6>
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	2b0c      	cmp	r3, #12
 8008948:	d109      	bne.n	800895e <HAL_TIM_PWM_Start_DMA+0x7a>
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008950:	b2db      	uxtb	r3, r3
 8008952:	2b02      	cmp	r3, #2
 8008954:	bf0c      	ite	eq
 8008956:	2301      	moveq	r3, #1
 8008958:	2300      	movne	r3, #0
 800895a:	b2db      	uxtb	r3, r3
 800895c:	e015      	b.n	800898a <HAL_TIM_PWM_Start_DMA+0xa6>
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	2b10      	cmp	r3, #16
 8008962:	d109      	bne.n	8008978 <HAL_TIM_PWM_Start_DMA+0x94>
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800896a:	b2db      	uxtb	r3, r3
 800896c:	2b02      	cmp	r3, #2
 800896e:	bf0c      	ite	eq
 8008970:	2301      	moveq	r3, #1
 8008972:	2300      	movne	r3, #0
 8008974:	b2db      	uxtb	r3, r3
 8008976:	e008      	b.n	800898a <HAL_TIM_PWM_Start_DMA+0xa6>
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800897e:	b2db      	uxtb	r3, r3
 8008980:	2b02      	cmp	r3, #2
 8008982:	bf0c      	ite	eq
 8008984:	2301      	moveq	r3, #1
 8008986:	2300      	movne	r3, #0
 8008988:	b2db      	uxtb	r3, r3
 800898a:	2b00      	cmp	r3, #0
 800898c:	d001      	beq.n	8008992 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800898e:	2302      	movs	r3, #2
 8008990:	e1b5      	b.n	8008cfe <HAL_TIM_PWM_Start_DMA+0x41a>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d109      	bne.n	80089ac <HAL_TIM_PWM_Start_DMA+0xc8>
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800899e:	b2db      	uxtb	r3, r3
 80089a0:	2b01      	cmp	r3, #1
 80089a2:	bf0c      	ite	eq
 80089a4:	2301      	moveq	r3, #1
 80089a6:	2300      	movne	r3, #0
 80089a8:	b2db      	uxtb	r3, r3
 80089aa:	e03c      	b.n	8008a26 <HAL_TIM_PWM_Start_DMA+0x142>
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	2b04      	cmp	r3, #4
 80089b0:	d109      	bne.n	80089c6 <HAL_TIM_PWM_Start_DMA+0xe2>
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80089b8:	b2db      	uxtb	r3, r3
 80089ba:	2b01      	cmp	r3, #1
 80089bc:	bf0c      	ite	eq
 80089be:	2301      	moveq	r3, #1
 80089c0:	2300      	movne	r3, #0
 80089c2:	b2db      	uxtb	r3, r3
 80089c4:	e02f      	b.n	8008a26 <HAL_TIM_PWM_Start_DMA+0x142>
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	2b08      	cmp	r3, #8
 80089ca:	d109      	bne.n	80089e0 <HAL_TIM_PWM_Start_DMA+0xfc>
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80089d2:	b2db      	uxtb	r3, r3
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	bf0c      	ite	eq
 80089d8:	2301      	moveq	r3, #1
 80089da:	2300      	movne	r3, #0
 80089dc:	b2db      	uxtb	r3, r3
 80089de:	e022      	b.n	8008a26 <HAL_TIM_PWM_Start_DMA+0x142>
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	2b0c      	cmp	r3, #12
 80089e4:	d109      	bne.n	80089fa <HAL_TIM_PWM_Start_DMA+0x116>
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80089ec:	b2db      	uxtb	r3, r3
 80089ee:	2b01      	cmp	r3, #1
 80089f0:	bf0c      	ite	eq
 80089f2:	2301      	moveq	r3, #1
 80089f4:	2300      	movne	r3, #0
 80089f6:	b2db      	uxtb	r3, r3
 80089f8:	e015      	b.n	8008a26 <HAL_TIM_PWM_Start_DMA+0x142>
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	2b10      	cmp	r3, #16
 80089fe:	d109      	bne.n	8008a14 <HAL_TIM_PWM_Start_DMA+0x130>
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008a06:	b2db      	uxtb	r3, r3
 8008a08:	2b01      	cmp	r3, #1
 8008a0a:	bf0c      	ite	eq
 8008a0c:	2301      	moveq	r3, #1
 8008a0e:	2300      	movne	r3, #0
 8008a10:	b2db      	uxtb	r3, r3
 8008a12:	e008      	b.n	8008a26 <HAL_TIM_PWM_Start_DMA+0x142>
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008a1a:	b2db      	uxtb	r3, r3
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	bf0c      	ite	eq
 8008a20:	2301      	moveq	r3, #1
 8008a22:	2300      	movne	r3, #0
 8008a24:	b2db      	uxtb	r3, r3
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d034      	beq.n	8008a94 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d002      	beq.n	8008a36 <HAL_TIM_PWM_Start_DMA+0x152>
 8008a30:	887b      	ldrh	r3, [r7, #2]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d101      	bne.n	8008a3a <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8008a36:	2301      	movs	r3, #1
 8008a38:	e161      	b.n	8008cfe <HAL_TIM_PWM_Start_DMA+0x41a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d104      	bne.n	8008a4a <HAL_TIM_PWM_Start_DMA+0x166>
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2202      	movs	r2, #2
 8008a44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008a48:	e026      	b.n	8008a98 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	2b04      	cmp	r3, #4
 8008a4e:	d104      	bne.n	8008a5a <HAL_TIM_PWM_Start_DMA+0x176>
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	2202      	movs	r2, #2
 8008a54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008a58:	e01e      	b.n	8008a98 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	2b08      	cmp	r3, #8
 8008a5e:	d104      	bne.n	8008a6a <HAL_TIM_PWM_Start_DMA+0x186>
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	2202      	movs	r2, #2
 8008a64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008a68:	e016      	b.n	8008a98 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	2b0c      	cmp	r3, #12
 8008a6e:	d104      	bne.n	8008a7a <HAL_TIM_PWM_Start_DMA+0x196>
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	2202      	movs	r2, #2
 8008a74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008a78:	e00e      	b.n	8008a98 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	2b10      	cmp	r3, #16
 8008a7e:	d104      	bne.n	8008a8a <HAL_TIM_PWM_Start_DMA+0x1a6>
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	2202      	movs	r2, #2
 8008a84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008a88:	e006      	b.n	8008a98 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	2202      	movs	r2, #2
 8008a8e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008a92:	e001      	b.n	8008a98 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8008a94:	2301      	movs	r3, #1
 8008a96:	e132      	b.n	8008cfe <HAL_TIM_PWM_Start_DMA+0x41a>
  }

  switch (Channel)
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	2b0c      	cmp	r3, #12
 8008a9c:	f200 80ae 	bhi.w	8008bfc <HAL_TIM_PWM_Start_DMA+0x318>
 8008aa0:	a201      	add	r2, pc, #4	@ (adr r2, 8008aa8 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8008aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aa6:	bf00      	nop
 8008aa8:	08008add 	.word	0x08008add
 8008aac:	08008bfd 	.word	0x08008bfd
 8008ab0:	08008bfd 	.word	0x08008bfd
 8008ab4:	08008bfd 	.word	0x08008bfd
 8008ab8:	08008b25 	.word	0x08008b25
 8008abc:	08008bfd 	.word	0x08008bfd
 8008ac0:	08008bfd 	.word	0x08008bfd
 8008ac4:	08008bfd 	.word	0x08008bfd
 8008ac8:	08008b6d 	.word	0x08008b6d
 8008acc:	08008bfd 	.word	0x08008bfd
 8008ad0:	08008bfd 	.word	0x08008bfd
 8008ad4:	08008bfd 	.word	0x08008bfd
 8008ad8:	08008bb5 	.word	0x08008bb5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ae0:	4a89      	ldr	r2, [pc, #548]	@ (8008d08 <HAL_TIM_PWM_Start_DMA+0x424>)
 8008ae2:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ae8:	4a88      	ldr	r2, [pc, #544]	@ (8008d0c <HAL_TIM_PWM_Start_DMA+0x428>)
 8008aea:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008af0:	4a87      	ldr	r2, [pc, #540]	@ (8008d10 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8008af2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8008af8:	6879      	ldr	r1, [r7, #4]
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	3334      	adds	r3, #52	@ 0x34
 8008b00:	461a      	mov	r2, r3
 8008b02:	887b      	ldrh	r3, [r7, #2]
 8008b04:	f7fc f912 	bl	8004d2c <HAL_DMA_Start_IT>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d001      	beq.n	8008b12 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008b0e:	2301      	movs	r3, #1
 8008b10:	e0f5      	b.n	8008cfe <HAL_TIM_PWM_Start_DMA+0x41a>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	68da      	ldr	r2, [r3, #12]
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008b20:	60da      	str	r2, [r3, #12]
      break;
 8008b22:	e06e      	b.n	8008c02 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b28:	4a77      	ldr	r2, [pc, #476]	@ (8008d08 <HAL_TIM_PWM_Start_DMA+0x424>)
 8008b2a:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b30:	4a76      	ldr	r2, [pc, #472]	@ (8008d0c <HAL_TIM_PWM_Start_DMA+0x428>)
 8008b32:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b38:	4a75      	ldr	r2, [pc, #468]	@ (8008d10 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8008b3a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8008b40:	6879      	ldr	r1, [r7, #4]
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	3338      	adds	r3, #56	@ 0x38
 8008b48:	461a      	mov	r2, r3
 8008b4a:	887b      	ldrh	r3, [r7, #2]
 8008b4c:	f7fc f8ee 	bl	8004d2c <HAL_DMA_Start_IT>
 8008b50:	4603      	mov	r3, r0
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d001      	beq.n	8008b5a <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008b56:	2301      	movs	r3, #1
 8008b58:	e0d1      	b.n	8008cfe <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	68da      	ldr	r2, [r3, #12]
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008b68:	60da      	str	r2, [r3, #12]
      break;
 8008b6a:	e04a      	b.n	8008c02 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b70:	4a65      	ldr	r2, [pc, #404]	@ (8008d08 <HAL_TIM_PWM_Start_DMA+0x424>)
 8008b72:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b78:	4a64      	ldr	r2, [pc, #400]	@ (8008d0c <HAL_TIM_PWM_Start_DMA+0x428>)
 8008b7a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b80:	4a63      	ldr	r2, [pc, #396]	@ (8008d10 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8008b82:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8008b88:	6879      	ldr	r1, [r7, #4]
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	333c      	adds	r3, #60	@ 0x3c
 8008b90:	461a      	mov	r2, r3
 8008b92:	887b      	ldrh	r3, [r7, #2]
 8008b94:	f7fc f8ca 	bl	8004d2c <HAL_DMA_Start_IT>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d001      	beq.n	8008ba2 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	e0ad      	b.n	8008cfe <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	68da      	ldr	r2, [r3, #12]
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008bb0:	60da      	str	r2, [r3, #12]
      break;
 8008bb2:	e026      	b.n	8008c02 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bb8:	4a53      	ldr	r2, [pc, #332]	@ (8008d08 <HAL_TIM_PWM_Start_DMA+0x424>)
 8008bba:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bc0:	4a52      	ldr	r2, [pc, #328]	@ (8008d0c <HAL_TIM_PWM_Start_DMA+0x428>)
 8008bc2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bc8:	4a51      	ldr	r2, [pc, #324]	@ (8008d10 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8008bca:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008bd0:	6879      	ldr	r1, [r7, #4]
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	3340      	adds	r3, #64	@ 0x40
 8008bd8:	461a      	mov	r2, r3
 8008bda:	887b      	ldrh	r3, [r7, #2]
 8008bdc:	f7fc f8a6 	bl	8004d2c <HAL_DMA_Start_IT>
 8008be0:	4603      	mov	r3, r0
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d001      	beq.n	8008bea <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008be6:	2301      	movs	r3, #1
 8008be8:	e089      	b.n	8008cfe <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	68da      	ldr	r2, [r3, #12]
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008bf8:	60da      	str	r2, [r3, #12]
      break;
 8008bfa:	e002      	b.n	8008c02 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	75fb      	strb	r3, [r7, #23]
      break;
 8008c00:	bf00      	nop
  }

  if (status == HAL_OK)
 8008c02:	7dfb      	ldrb	r3, [r7, #23]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d179      	bne.n	8008cfc <HAL_TIM_PWM_Start_DMA+0x418>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	2201      	movs	r2, #1
 8008c0e:	68b9      	ldr	r1, [r7, #8]
 8008c10:	4618      	mov	r0, r3
 8008c12:	f001 feed 	bl	800a9f0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	4a3e      	ldr	r2, [pc, #248]	@ (8008d14 <HAL_TIM_PWM_Start_DMA+0x430>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d018      	beq.n	8008c52 <HAL_TIM_PWM_Start_DMA+0x36e>
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4a3c      	ldr	r2, [pc, #240]	@ (8008d18 <HAL_TIM_PWM_Start_DMA+0x434>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d013      	beq.n	8008c52 <HAL_TIM_PWM_Start_DMA+0x36e>
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4a3b      	ldr	r2, [pc, #236]	@ (8008d1c <HAL_TIM_PWM_Start_DMA+0x438>)
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d00e      	beq.n	8008c52 <HAL_TIM_PWM_Start_DMA+0x36e>
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	4a39      	ldr	r2, [pc, #228]	@ (8008d20 <HAL_TIM_PWM_Start_DMA+0x43c>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d009      	beq.n	8008c52 <HAL_TIM_PWM_Start_DMA+0x36e>
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	4a38      	ldr	r2, [pc, #224]	@ (8008d24 <HAL_TIM_PWM_Start_DMA+0x440>)
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d004      	beq.n	8008c52 <HAL_TIM_PWM_Start_DMA+0x36e>
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	4a36      	ldr	r2, [pc, #216]	@ (8008d28 <HAL_TIM_PWM_Start_DMA+0x444>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d101      	bne.n	8008c56 <HAL_TIM_PWM_Start_DMA+0x372>
 8008c52:	2301      	movs	r3, #1
 8008c54:	e000      	b.n	8008c58 <HAL_TIM_PWM_Start_DMA+0x374>
 8008c56:	2300      	movs	r3, #0
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d007      	beq.n	8008c6c <HAL_TIM_PWM_Start_DMA+0x388>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008c6a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4a28      	ldr	r2, [pc, #160]	@ (8008d14 <HAL_TIM_PWM_Start_DMA+0x430>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d022      	beq.n	8008cbc <HAL_TIM_PWM_Start_DMA+0x3d8>
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c7e:	d01d      	beq.n	8008cbc <HAL_TIM_PWM_Start_DMA+0x3d8>
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4a29      	ldr	r2, [pc, #164]	@ (8008d2c <HAL_TIM_PWM_Start_DMA+0x448>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d018      	beq.n	8008cbc <HAL_TIM_PWM_Start_DMA+0x3d8>
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	4a28      	ldr	r2, [pc, #160]	@ (8008d30 <HAL_TIM_PWM_Start_DMA+0x44c>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d013      	beq.n	8008cbc <HAL_TIM_PWM_Start_DMA+0x3d8>
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4a26      	ldr	r2, [pc, #152]	@ (8008d34 <HAL_TIM_PWM_Start_DMA+0x450>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d00e      	beq.n	8008cbc <HAL_TIM_PWM_Start_DMA+0x3d8>
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	4a1d      	ldr	r2, [pc, #116]	@ (8008d18 <HAL_TIM_PWM_Start_DMA+0x434>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d009      	beq.n	8008cbc <HAL_TIM_PWM_Start_DMA+0x3d8>
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4a1b      	ldr	r2, [pc, #108]	@ (8008d1c <HAL_TIM_PWM_Start_DMA+0x438>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d004      	beq.n	8008cbc <HAL_TIM_PWM_Start_DMA+0x3d8>
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	4a1c      	ldr	r2, [pc, #112]	@ (8008d28 <HAL_TIM_PWM_Start_DMA+0x444>)
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d115      	bne.n	8008ce8 <HAL_TIM_PWM_Start_DMA+0x404>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	689a      	ldr	r2, [r3, #8]
 8008cc2:	4b1d      	ldr	r3, [pc, #116]	@ (8008d38 <HAL_TIM_PWM_Start_DMA+0x454>)
 8008cc4:	4013      	ands	r3, r2
 8008cc6:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	2b06      	cmp	r3, #6
 8008ccc:	d015      	beq.n	8008cfa <HAL_TIM_PWM_Start_DMA+0x416>
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008cd4:	d011      	beq.n	8008cfa <HAL_TIM_PWM_Start_DMA+0x416>
      {
        __HAL_TIM_ENABLE(htim);
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	681a      	ldr	r2, [r3, #0]
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f042 0201 	orr.w	r2, r2, #1
 8008ce4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ce6:	e008      	b.n	8008cfa <HAL_TIM_PWM_Start_DMA+0x416>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	681a      	ldr	r2, [r3, #0]
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f042 0201 	orr.w	r2, r2, #1
 8008cf6:	601a      	str	r2, [r3, #0]
 8008cf8:	e000      	b.n	8008cfc <HAL_TIM_PWM_Start_DMA+0x418>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cfa:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8008cfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3718      	adds	r7, #24
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}
 8008d06:	bf00      	nop
 8008d08:	08009bd7 	.word	0x08009bd7
 8008d0c:	08009c7f 	.word	0x08009c7f
 8008d10:	08009b45 	.word	0x08009b45
 8008d14:	40012c00 	.word	0x40012c00
 8008d18:	40013400 	.word	0x40013400
 8008d1c:	40014000 	.word	0x40014000
 8008d20:	40014400 	.word	0x40014400
 8008d24:	40014800 	.word	0x40014800
 8008d28:	40015000 	.word	0x40015000
 8008d2c:	40000400 	.word	0x40000400
 8008d30:	40000800 	.word	0x40000800
 8008d34:	40000c00 	.word	0x40000c00
 8008d38:	00010007 	.word	0x00010007

08008d3c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b082      	sub	sp, #8
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d101      	bne.n	8008d4e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	e049      	b.n	8008de2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d54:	b2db      	uxtb	r3, r3
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d106      	bne.n	8008d68 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f000 f841 	bl	8008dea <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2202      	movs	r2, #2
 8008d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681a      	ldr	r2, [r3, #0]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	3304      	adds	r3, #4
 8008d78:	4619      	mov	r1, r3
 8008d7a:	4610      	mov	r0, r2
 8008d7c:	f000 ffb4 	bl	8009ce8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2201      	movs	r2, #1
 8008d84:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2201      	movs	r2, #1
 8008d94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2201      	movs	r2, #1
 8008d9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2201      	movs	r2, #1
 8008da4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2201      	movs	r2, #1
 8008dac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2201      	movs	r2, #1
 8008db4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2201      	movs	r2, #1
 8008dbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2201      	movs	r2, #1
 8008dcc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2201      	movs	r2, #1
 8008ddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008de0:	2300      	movs	r3, #0
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3708      	adds	r7, #8
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}

08008dea <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8008dea:	b480      	push	{r7}
 8008dec:	b083      	sub	sp, #12
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8008df2:	bf00      	nop
 8008df4:	370c      	adds	r7, #12
 8008df6:	46bd      	mov	sp, r7
 8008df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfc:	4770      	bx	lr
	...

08008e00 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b084      	sub	sp, #16
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
 8008e08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d104      	bne.n	8008e1e <HAL_TIM_IC_Start_IT+0x1e>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008e1a:	b2db      	uxtb	r3, r3
 8008e1c:	e023      	b.n	8008e66 <HAL_TIM_IC_Start_IT+0x66>
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	2b04      	cmp	r3, #4
 8008e22:	d104      	bne.n	8008e2e <HAL_TIM_IC_Start_IT+0x2e>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008e2a:	b2db      	uxtb	r3, r3
 8008e2c:	e01b      	b.n	8008e66 <HAL_TIM_IC_Start_IT+0x66>
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	2b08      	cmp	r3, #8
 8008e32:	d104      	bne.n	8008e3e <HAL_TIM_IC_Start_IT+0x3e>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008e3a:	b2db      	uxtb	r3, r3
 8008e3c:	e013      	b.n	8008e66 <HAL_TIM_IC_Start_IT+0x66>
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	2b0c      	cmp	r3, #12
 8008e42:	d104      	bne.n	8008e4e <HAL_TIM_IC_Start_IT+0x4e>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008e4a:	b2db      	uxtb	r3, r3
 8008e4c:	e00b      	b.n	8008e66 <HAL_TIM_IC_Start_IT+0x66>
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	2b10      	cmp	r3, #16
 8008e52:	d104      	bne.n	8008e5e <HAL_TIM_IC_Start_IT+0x5e>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008e5a:	b2db      	uxtb	r3, r3
 8008e5c:	e003      	b.n	8008e66 <HAL_TIM_IC_Start_IT+0x66>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008e64:	b2db      	uxtb	r3, r3
 8008e66:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d104      	bne.n	8008e78 <HAL_TIM_IC_Start_IT+0x78>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008e74:	b2db      	uxtb	r3, r3
 8008e76:	e013      	b.n	8008ea0 <HAL_TIM_IC_Start_IT+0xa0>
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	2b04      	cmp	r3, #4
 8008e7c:	d104      	bne.n	8008e88 <HAL_TIM_IC_Start_IT+0x88>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008e84:	b2db      	uxtb	r3, r3
 8008e86:	e00b      	b.n	8008ea0 <HAL_TIM_IC_Start_IT+0xa0>
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	2b08      	cmp	r3, #8
 8008e8c:	d104      	bne.n	8008e98 <HAL_TIM_IC_Start_IT+0x98>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8008e94:	b2db      	uxtb	r3, r3
 8008e96:	e003      	b.n	8008ea0 <HAL_TIM_IC_Start_IT+0xa0>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8008e9e:	b2db      	uxtb	r3, r3
 8008ea0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8008ea2:	7bbb      	ldrb	r3, [r7, #14]
 8008ea4:	2b01      	cmp	r3, #1
 8008ea6:	d102      	bne.n	8008eae <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8008ea8:	7b7b      	ldrb	r3, [r7, #13]
 8008eaa:	2b01      	cmp	r3, #1
 8008eac:	d001      	beq.n	8008eb2 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8008eae:	2301      	movs	r3, #1
 8008eb0:	e0e2      	b.n	8009078 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d104      	bne.n	8008ec2 <HAL_TIM_IC_Start_IT+0xc2>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2202      	movs	r2, #2
 8008ebc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008ec0:	e023      	b.n	8008f0a <HAL_TIM_IC_Start_IT+0x10a>
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	2b04      	cmp	r3, #4
 8008ec6:	d104      	bne.n	8008ed2 <HAL_TIM_IC_Start_IT+0xd2>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2202      	movs	r2, #2
 8008ecc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008ed0:	e01b      	b.n	8008f0a <HAL_TIM_IC_Start_IT+0x10a>
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	2b08      	cmp	r3, #8
 8008ed6:	d104      	bne.n	8008ee2 <HAL_TIM_IC_Start_IT+0xe2>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2202      	movs	r2, #2
 8008edc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008ee0:	e013      	b.n	8008f0a <HAL_TIM_IC_Start_IT+0x10a>
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	2b0c      	cmp	r3, #12
 8008ee6:	d104      	bne.n	8008ef2 <HAL_TIM_IC_Start_IT+0xf2>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2202      	movs	r2, #2
 8008eec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008ef0:	e00b      	b.n	8008f0a <HAL_TIM_IC_Start_IT+0x10a>
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	2b10      	cmp	r3, #16
 8008ef6:	d104      	bne.n	8008f02 <HAL_TIM_IC_Start_IT+0x102>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2202      	movs	r2, #2
 8008efc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008f00:	e003      	b.n	8008f0a <HAL_TIM_IC_Start_IT+0x10a>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2202      	movs	r2, #2
 8008f06:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d104      	bne.n	8008f1a <HAL_TIM_IC_Start_IT+0x11a>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2202      	movs	r2, #2
 8008f14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008f18:	e013      	b.n	8008f42 <HAL_TIM_IC_Start_IT+0x142>
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	2b04      	cmp	r3, #4
 8008f1e:	d104      	bne.n	8008f2a <HAL_TIM_IC_Start_IT+0x12a>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2202      	movs	r2, #2
 8008f24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008f28:	e00b      	b.n	8008f42 <HAL_TIM_IC_Start_IT+0x142>
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	2b08      	cmp	r3, #8
 8008f2e:	d104      	bne.n	8008f3a <HAL_TIM_IC_Start_IT+0x13a>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2202      	movs	r2, #2
 8008f34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008f38:	e003      	b.n	8008f42 <HAL_TIM_IC_Start_IT+0x142>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2202      	movs	r2, #2
 8008f3e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	2b0c      	cmp	r3, #12
 8008f46:	d841      	bhi.n	8008fcc <HAL_TIM_IC_Start_IT+0x1cc>
 8008f48:	a201      	add	r2, pc, #4	@ (adr r2, 8008f50 <HAL_TIM_IC_Start_IT+0x150>)
 8008f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f4e:	bf00      	nop
 8008f50:	08008f85 	.word	0x08008f85
 8008f54:	08008fcd 	.word	0x08008fcd
 8008f58:	08008fcd 	.word	0x08008fcd
 8008f5c:	08008fcd 	.word	0x08008fcd
 8008f60:	08008f97 	.word	0x08008f97
 8008f64:	08008fcd 	.word	0x08008fcd
 8008f68:	08008fcd 	.word	0x08008fcd
 8008f6c:	08008fcd 	.word	0x08008fcd
 8008f70:	08008fa9 	.word	0x08008fa9
 8008f74:	08008fcd 	.word	0x08008fcd
 8008f78:	08008fcd 	.word	0x08008fcd
 8008f7c:	08008fcd 	.word	0x08008fcd
 8008f80:	08008fbb 	.word	0x08008fbb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	68da      	ldr	r2, [r3, #12]
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f042 0202 	orr.w	r2, r2, #2
 8008f92:	60da      	str	r2, [r3, #12]
      break;
 8008f94:	e01d      	b.n	8008fd2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	68da      	ldr	r2, [r3, #12]
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f042 0204 	orr.w	r2, r2, #4
 8008fa4:	60da      	str	r2, [r3, #12]
      break;
 8008fa6:	e014      	b.n	8008fd2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	68da      	ldr	r2, [r3, #12]
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f042 0208 	orr.w	r2, r2, #8
 8008fb6:	60da      	str	r2, [r3, #12]
      break;
 8008fb8:	e00b      	b.n	8008fd2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	68da      	ldr	r2, [r3, #12]
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f042 0210 	orr.w	r2, r2, #16
 8008fc8:	60da      	str	r2, [r3, #12]
      break;
 8008fca:	e002      	b.n	8008fd2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8008fcc:	2301      	movs	r3, #1
 8008fce:	73fb      	strb	r3, [r7, #15]
      break;
 8008fd0:	bf00      	nop
  }

  if (status == HAL_OK)
 8008fd2:	7bfb      	ldrb	r3, [r7, #15]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d14e      	bne.n	8009076 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	2201      	movs	r2, #1
 8008fde:	6839      	ldr	r1, [r7, #0]
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f001 fd05 	bl	800a9f0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	4a25      	ldr	r2, [pc, #148]	@ (8009080 <HAL_TIM_IC_Start_IT+0x280>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d022      	beq.n	8009036 <HAL_TIM_IC_Start_IT+0x236>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ff8:	d01d      	beq.n	8009036 <HAL_TIM_IC_Start_IT+0x236>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	4a21      	ldr	r2, [pc, #132]	@ (8009084 <HAL_TIM_IC_Start_IT+0x284>)
 8009000:	4293      	cmp	r3, r2
 8009002:	d018      	beq.n	8009036 <HAL_TIM_IC_Start_IT+0x236>
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	4a1f      	ldr	r2, [pc, #124]	@ (8009088 <HAL_TIM_IC_Start_IT+0x288>)
 800900a:	4293      	cmp	r3, r2
 800900c:	d013      	beq.n	8009036 <HAL_TIM_IC_Start_IT+0x236>
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	4a1e      	ldr	r2, [pc, #120]	@ (800908c <HAL_TIM_IC_Start_IT+0x28c>)
 8009014:	4293      	cmp	r3, r2
 8009016:	d00e      	beq.n	8009036 <HAL_TIM_IC_Start_IT+0x236>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	4a1c      	ldr	r2, [pc, #112]	@ (8009090 <HAL_TIM_IC_Start_IT+0x290>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d009      	beq.n	8009036 <HAL_TIM_IC_Start_IT+0x236>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	4a1b      	ldr	r2, [pc, #108]	@ (8009094 <HAL_TIM_IC_Start_IT+0x294>)
 8009028:	4293      	cmp	r3, r2
 800902a:	d004      	beq.n	8009036 <HAL_TIM_IC_Start_IT+0x236>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	4a19      	ldr	r2, [pc, #100]	@ (8009098 <HAL_TIM_IC_Start_IT+0x298>)
 8009032:	4293      	cmp	r3, r2
 8009034:	d115      	bne.n	8009062 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	689a      	ldr	r2, [r3, #8]
 800903c:	4b17      	ldr	r3, [pc, #92]	@ (800909c <HAL_TIM_IC_Start_IT+0x29c>)
 800903e:	4013      	ands	r3, r2
 8009040:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	2b06      	cmp	r3, #6
 8009046:	d015      	beq.n	8009074 <HAL_TIM_IC_Start_IT+0x274>
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800904e:	d011      	beq.n	8009074 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	681a      	ldr	r2, [r3, #0]
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f042 0201 	orr.w	r2, r2, #1
 800905e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009060:	e008      	b.n	8009074 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	681a      	ldr	r2, [r3, #0]
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f042 0201 	orr.w	r2, r2, #1
 8009070:	601a      	str	r2, [r3, #0]
 8009072:	e000      	b.n	8009076 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009074:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8009076:	7bfb      	ldrb	r3, [r7, #15]
}
 8009078:	4618      	mov	r0, r3
 800907a:	3710      	adds	r7, #16
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}
 8009080:	40012c00 	.word	0x40012c00
 8009084:	40000400 	.word	0x40000400
 8009088:	40000800 	.word	0x40000800
 800908c:	40000c00 	.word	0x40000c00
 8009090:	40013400 	.word	0x40013400
 8009094:	40014000 	.word	0x40014000
 8009098:	40015000 	.word	0x40015000
 800909c:	00010007 	.word	0x00010007

080090a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b084      	sub	sp, #16
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	68db      	ldr	r3, [r3, #12]
 80090ae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	691b      	ldr	r3, [r3, #16]
 80090b6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	f003 0302 	and.w	r3, r3, #2
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d020      	beq.n	8009104 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	f003 0302 	and.w	r3, r3, #2
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d01b      	beq.n	8009104 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f06f 0202 	mvn.w	r2, #2
 80090d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2201      	movs	r2, #1
 80090da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	699b      	ldr	r3, [r3, #24]
 80090e2:	f003 0303 	and.w	r3, r3, #3
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d003      	beq.n	80090f2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f7f8 fe94 	bl	8001e18 <HAL_TIM_IC_CaptureCallback>
 80090f0:	e005      	b.n	80090fe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 fcf4 	bl	8009ae0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f000 fcfb 	bl	8009af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2200      	movs	r2, #0
 8009102:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	f003 0304 	and.w	r3, r3, #4
 800910a:	2b00      	cmp	r3, #0
 800910c:	d020      	beq.n	8009150 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	f003 0304 	and.w	r3, r3, #4
 8009114:	2b00      	cmp	r3, #0
 8009116:	d01b      	beq.n	8009150 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f06f 0204 	mvn.w	r2, #4
 8009120:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2202      	movs	r2, #2
 8009126:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	699b      	ldr	r3, [r3, #24]
 800912e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009132:	2b00      	cmp	r3, #0
 8009134:	d003      	beq.n	800913e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f7f8 fe6e 	bl	8001e18 <HAL_TIM_IC_CaptureCallback>
 800913c:	e005      	b.n	800914a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f000 fcce 	bl	8009ae0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f000 fcd5 	bl	8009af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2200      	movs	r2, #0
 800914e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	f003 0308 	and.w	r3, r3, #8
 8009156:	2b00      	cmp	r3, #0
 8009158:	d020      	beq.n	800919c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	f003 0308 	and.w	r3, r3, #8
 8009160:	2b00      	cmp	r3, #0
 8009162:	d01b      	beq.n	800919c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f06f 0208 	mvn.w	r2, #8
 800916c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2204      	movs	r2, #4
 8009172:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	69db      	ldr	r3, [r3, #28]
 800917a:	f003 0303 	and.w	r3, r3, #3
 800917e:	2b00      	cmp	r3, #0
 8009180:	d003      	beq.n	800918a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f7f8 fe48 	bl	8001e18 <HAL_TIM_IC_CaptureCallback>
 8009188:	e005      	b.n	8009196 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f000 fca8 	bl	8009ae0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f000 fcaf 	bl	8009af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2200      	movs	r2, #0
 800919a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	f003 0310 	and.w	r3, r3, #16
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d020      	beq.n	80091e8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	f003 0310 	and.w	r3, r3, #16
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d01b      	beq.n	80091e8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f06f 0210 	mvn.w	r2, #16
 80091b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2208      	movs	r2, #8
 80091be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	69db      	ldr	r3, [r3, #28]
 80091c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d003      	beq.n	80091d6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f7f8 fe22 	bl	8001e18 <HAL_TIM_IC_CaptureCallback>
 80091d4:	e005      	b.n	80091e2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f000 fc82 	bl	8009ae0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f000 fc89 	bl	8009af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2200      	movs	r2, #0
 80091e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	f003 0301 	and.w	r3, r3, #1
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d00c      	beq.n	800920c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	f003 0301 	and.w	r3, r3, #1
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d007      	beq.n	800920c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f06f 0201 	mvn.w	r2, #1
 8009204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f000 fc60 	bl	8009acc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009212:	2b00      	cmp	r3, #0
 8009214:	d104      	bne.n	8009220 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800921c:	2b00      	cmp	r3, #0
 800921e:	d00c      	beq.n	800923a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009226:	2b00      	cmp	r3, #0
 8009228:	d007      	beq.n	800923a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009232:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f001 fd35 	bl	800aca4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009240:	2b00      	cmp	r3, #0
 8009242:	d00c      	beq.n	800925e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800924a:	2b00      	cmp	r3, #0
 800924c:	d007      	beq.n	800925e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009256:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f001 fd2d 	bl	800acb8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009264:	2b00      	cmp	r3, #0
 8009266:	d00c      	beq.n	8009282 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800926e:	2b00      	cmp	r3, #0
 8009270:	d007      	beq.n	8009282 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800927a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f000 fc4d 	bl	8009b1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	f003 0320 	and.w	r3, r3, #32
 8009288:	2b00      	cmp	r3, #0
 800928a:	d00c      	beq.n	80092a6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	f003 0320 	and.w	r3, r3, #32
 8009292:	2b00      	cmp	r3, #0
 8009294:	d007      	beq.n	80092a6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f06f 0220 	mvn.w	r2, #32
 800929e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f001 fcf5 	bl	800ac90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d00c      	beq.n	80092ca <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d007      	beq.n	80092ca <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80092c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	f001 fd01 	bl	800accc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d00c      	beq.n	80092ee <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d007      	beq.n	80092ee <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80092e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f001 fcf9 	bl	800ace0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d00c      	beq.n	8009312 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d007      	beq.n	8009312 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800930a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f001 fcf1 	bl	800acf4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009318:	2b00      	cmp	r3, #0
 800931a:	d00c      	beq.n	8009336 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009322:	2b00      	cmp	r3, #0
 8009324:	d007      	beq.n	8009336 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800932e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f001 fce9 	bl	800ad08 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009336:	bf00      	nop
 8009338:	3710      	adds	r7, #16
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}
	...

08009340 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b086      	sub	sp, #24
 8009344:	af00      	add	r7, sp, #0
 8009346:	60f8      	str	r0, [r7, #12]
 8009348:	60b9      	str	r1, [r7, #8]
 800934a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800934c:	2300      	movs	r3, #0
 800934e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009356:	2b01      	cmp	r3, #1
 8009358:	d101      	bne.n	800935e <HAL_TIM_OC_ConfigChannel+0x1e>
 800935a:	2302      	movs	r3, #2
 800935c:	e066      	b.n	800942c <HAL_TIM_OC_ConfigChannel+0xec>
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	2201      	movs	r2, #1
 8009362:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2b14      	cmp	r3, #20
 800936a:	d857      	bhi.n	800941c <HAL_TIM_OC_ConfigChannel+0xdc>
 800936c:	a201      	add	r2, pc, #4	@ (adr r2, 8009374 <HAL_TIM_OC_ConfigChannel+0x34>)
 800936e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009372:	bf00      	nop
 8009374:	080093c9 	.word	0x080093c9
 8009378:	0800941d 	.word	0x0800941d
 800937c:	0800941d 	.word	0x0800941d
 8009380:	0800941d 	.word	0x0800941d
 8009384:	080093d7 	.word	0x080093d7
 8009388:	0800941d 	.word	0x0800941d
 800938c:	0800941d 	.word	0x0800941d
 8009390:	0800941d 	.word	0x0800941d
 8009394:	080093e5 	.word	0x080093e5
 8009398:	0800941d 	.word	0x0800941d
 800939c:	0800941d 	.word	0x0800941d
 80093a0:	0800941d 	.word	0x0800941d
 80093a4:	080093f3 	.word	0x080093f3
 80093a8:	0800941d 	.word	0x0800941d
 80093ac:	0800941d 	.word	0x0800941d
 80093b0:	0800941d 	.word	0x0800941d
 80093b4:	08009401 	.word	0x08009401
 80093b8:	0800941d 	.word	0x0800941d
 80093bc:	0800941d 	.word	0x0800941d
 80093c0:	0800941d 	.word	0x0800941d
 80093c4:	0800940f 	.word	0x0800940f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	68b9      	ldr	r1, [r7, #8]
 80093ce:	4618      	mov	r0, r3
 80093d0:	f000 fd3e 	bl	8009e50 <TIM_OC1_SetConfig>
      break;
 80093d4:	e025      	b.n	8009422 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	68b9      	ldr	r1, [r7, #8]
 80093dc:	4618      	mov	r0, r3
 80093de:	f000 fdd1 	bl	8009f84 <TIM_OC2_SetConfig>
      break;
 80093e2:	e01e      	b.n	8009422 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	68b9      	ldr	r1, [r7, #8]
 80093ea:	4618      	mov	r0, r3
 80093ec:	f000 fe5e 	bl	800a0ac <TIM_OC3_SetConfig>
      break;
 80093f0:	e017      	b.n	8009422 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	68b9      	ldr	r1, [r7, #8]
 80093f8:	4618      	mov	r0, r3
 80093fa:	f000 fee9 	bl	800a1d0 <TIM_OC4_SetConfig>
      break;
 80093fe:	e010      	b.n	8009422 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	68b9      	ldr	r1, [r7, #8]
 8009406:	4618      	mov	r0, r3
 8009408:	f000 ff76 	bl	800a2f8 <TIM_OC5_SetConfig>
      break;
 800940c:	e009      	b.n	8009422 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	68b9      	ldr	r1, [r7, #8]
 8009414:	4618      	mov	r0, r3
 8009416:	f000 ffd9 	bl	800a3cc <TIM_OC6_SetConfig>
      break;
 800941a:	e002      	b.n	8009422 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800941c:	2301      	movs	r3, #1
 800941e:	75fb      	strb	r3, [r7, #23]
      break;
 8009420:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	2200      	movs	r2, #0
 8009426:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800942a:	7dfb      	ldrb	r3, [r7, #23]
}
 800942c:	4618      	mov	r0, r3
 800942e:	3718      	adds	r7, #24
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}

08009434 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b086      	sub	sp, #24
 8009438:	af00      	add	r7, sp, #0
 800943a:	60f8      	str	r0, [r7, #12]
 800943c:	60b9      	str	r1, [r7, #8]
 800943e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009440:	2300      	movs	r3, #0
 8009442:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800944a:	2b01      	cmp	r3, #1
 800944c:	d101      	bne.n	8009452 <HAL_TIM_IC_ConfigChannel+0x1e>
 800944e:	2302      	movs	r3, #2
 8009450:	e088      	b.n	8009564 <HAL_TIM_IC_ConfigChannel+0x130>
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	2201      	movs	r2, #1
 8009456:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d11b      	bne.n	8009498 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8009470:	f001 f8f8 	bl	800a664 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	699a      	ldr	r2, [r3, #24]
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f022 020c 	bic.w	r2, r2, #12
 8009482:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	6999      	ldr	r1, [r3, #24]
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	689a      	ldr	r2, [r3, #8]
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	430a      	orrs	r2, r1
 8009494:	619a      	str	r2, [r3, #24]
 8009496:	e060      	b.n	800955a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2b04      	cmp	r3, #4
 800949c:	d11c      	bne.n	80094d8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80094aa:	68bb      	ldr	r3, [r7, #8]
 80094ac:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80094ae:	f001 f97c 	bl	800a7aa <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	699a      	ldr	r2, [r3, #24]
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80094c0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	6999      	ldr	r1, [r3, #24]
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	689b      	ldr	r3, [r3, #8]
 80094cc:	021a      	lsls	r2, r3, #8
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	430a      	orrs	r2, r1
 80094d4:	619a      	str	r2, [r3, #24]
 80094d6:	e040      	b.n	800955a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2b08      	cmp	r3, #8
 80094dc:	d11b      	bne.n	8009516 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80094ea:	68bb      	ldr	r3, [r7, #8]
 80094ec:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80094ee:	f001 f9c9 	bl	800a884 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	69da      	ldr	r2, [r3, #28]
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f022 020c 	bic.w	r2, r2, #12
 8009500:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	69d9      	ldr	r1, [r3, #28]
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	689a      	ldr	r2, [r3, #8]
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	430a      	orrs	r2, r1
 8009512:	61da      	str	r2, [r3, #28]
 8009514:	e021      	b.n	800955a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2b0c      	cmp	r3, #12
 800951a:	d11c      	bne.n	8009556 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800952c:	f001 f9e6 	bl	800a8fc <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	69da      	ldr	r2, [r3, #28]
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800953e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	69d9      	ldr	r1, [r3, #28]
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	689b      	ldr	r3, [r3, #8]
 800954a:	021a      	lsls	r2, r3, #8
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	430a      	orrs	r2, r1
 8009552:	61da      	str	r2, [r3, #28]
 8009554:	e001      	b.n	800955a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8009556:	2301      	movs	r3, #1
 8009558:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	2200      	movs	r2, #0
 800955e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009562:	7dfb      	ldrb	r3, [r7, #23]
}
 8009564:	4618      	mov	r0, r3
 8009566:	3718      	adds	r7, #24
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}

0800956c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b086      	sub	sp, #24
 8009570:	af00      	add	r7, sp, #0
 8009572:	60f8      	str	r0, [r7, #12]
 8009574:	60b9      	str	r1, [r7, #8]
 8009576:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009578:	2300      	movs	r3, #0
 800957a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009582:	2b01      	cmp	r3, #1
 8009584:	d101      	bne.n	800958a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009586:	2302      	movs	r3, #2
 8009588:	e0ff      	b.n	800978a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	2201      	movs	r2, #1
 800958e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2b14      	cmp	r3, #20
 8009596:	f200 80f0 	bhi.w	800977a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800959a:	a201      	add	r2, pc, #4	@ (adr r2, 80095a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800959c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095a0:	080095f5 	.word	0x080095f5
 80095a4:	0800977b 	.word	0x0800977b
 80095a8:	0800977b 	.word	0x0800977b
 80095ac:	0800977b 	.word	0x0800977b
 80095b0:	08009635 	.word	0x08009635
 80095b4:	0800977b 	.word	0x0800977b
 80095b8:	0800977b 	.word	0x0800977b
 80095bc:	0800977b 	.word	0x0800977b
 80095c0:	08009677 	.word	0x08009677
 80095c4:	0800977b 	.word	0x0800977b
 80095c8:	0800977b 	.word	0x0800977b
 80095cc:	0800977b 	.word	0x0800977b
 80095d0:	080096b7 	.word	0x080096b7
 80095d4:	0800977b 	.word	0x0800977b
 80095d8:	0800977b 	.word	0x0800977b
 80095dc:	0800977b 	.word	0x0800977b
 80095e0:	080096f9 	.word	0x080096f9
 80095e4:	0800977b 	.word	0x0800977b
 80095e8:	0800977b 	.word	0x0800977b
 80095ec:	0800977b 	.word	0x0800977b
 80095f0:	08009739 	.word	0x08009739
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	68b9      	ldr	r1, [r7, #8]
 80095fa:	4618      	mov	r0, r3
 80095fc:	f000 fc28 	bl	8009e50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	699a      	ldr	r2, [r3, #24]
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f042 0208 	orr.w	r2, r2, #8
 800960e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	699a      	ldr	r2, [r3, #24]
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f022 0204 	bic.w	r2, r2, #4
 800961e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	6999      	ldr	r1, [r3, #24]
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	691a      	ldr	r2, [r3, #16]
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	430a      	orrs	r2, r1
 8009630:	619a      	str	r2, [r3, #24]
      break;
 8009632:	e0a5      	b.n	8009780 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	68b9      	ldr	r1, [r7, #8]
 800963a:	4618      	mov	r0, r3
 800963c:	f000 fca2 	bl	8009f84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	699a      	ldr	r2, [r3, #24]
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800964e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	699a      	ldr	r2, [r3, #24]
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800965e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	6999      	ldr	r1, [r3, #24]
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	691b      	ldr	r3, [r3, #16]
 800966a:	021a      	lsls	r2, r3, #8
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	430a      	orrs	r2, r1
 8009672:	619a      	str	r2, [r3, #24]
      break;
 8009674:	e084      	b.n	8009780 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	68b9      	ldr	r1, [r7, #8]
 800967c:	4618      	mov	r0, r3
 800967e:	f000 fd15 	bl	800a0ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	69da      	ldr	r2, [r3, #28]
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f042 0208 	orr.w	r2, r2, #8
 8009690:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	69da      	ldr	r2, [r3, #28]
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f022 0204 	bic.w	r2, r2, #4
 80096a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	69d9      	ldr	r1, [r3, #28]
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	691a      	ldr	r2, [r3, #16]
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	430a      	orrs	r2, r1
 80096b2:	61da      	str	r2, [r3, #28]
      break;
 80096b4:	e064      	b.n	8009780 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	68b9      	ldr	r1, [r7, #8]
 80096bc:	4618      	mov	r0, r3
 80096be:	f000 fd87 	bl	800a1d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	69da      	ldr	r2, [r3, #28]
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80096d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	69da      	ldr	r2, [r3, #28]
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80096e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	69d9      	ldr	r1, [r3, #28]
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	691b      	ldr	r3, [r3, #16]
 80096ec:	021a      	lsls	r2, r3, #8
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	430a      	orrs	r2, r1
 80096f4:	61da      	str	r2, [r3, #28]
      break;
 80096f6:	e043      	b.n	8009780 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	68b9      	ldr	r1, [r7, #8]
 80096fe:	4618      	mov	r0, r3
 8009700:	f000 fdfa 	bl	800a2f8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f042 0208 	orr.w	r2, r2, #8
 8009712:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f022 0204 	bic.w	r2, r2, #4
 8009722:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	691a      	ldr	r2, [r3, #16]
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	430a      	orrs	r2, r1
 8009734:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8009736:	e023      	b.n	8009780 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	68b9      	ldr	r1, [r7, #8]
 800973e:	4618      	mov	r0, r3
 8009740:	f000 fe44 	bl	800a3cc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009752:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009762:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	691b      	ldr	r3, [r3, #16]
 800976e:	021a      	lsls	r2, r3, #8
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	430a      	orrs	r2, r1
 8009776:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8009778:	e002      	b.n	8009780 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800977a:	2301      	movs	r3, #1
 800977c:	75fb      	strb	r3, [r7, #23]
      break;
 800977e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	2200      	movs	r2, #0
 8009784:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009788:	7dfb      	ldrb	r3, [r7, #23]
}
 800978a:	4618      	mov	r0, r3
 800978c:	3718      	adds	r7, #24
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}
 8009792:	bf00      	nop

08009794 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b084      	sub	sp, #16
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
 800979c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800979e:	2300      	movs	r3, #0
 80097a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80097a8:	2b01      	cmp	r3, #1
 80097aa:	d101      	bne.n	80097b0 <HAL_TIM_ConfigClockSource+0x1c>
 80097ac:	2302      	movs	r3, #2
 80097ae:	e0f6      	b.n	800999e <HAL_TIM_ConfigClockSource+0x20a>
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2201      	movs	r2, #1
 80097b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2202      	movs	r2, #2
 80097bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	689b      	ldr	r3, [r3, #8]
 80097c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80097ce:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80097d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80097da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	68ba      	ldr	r2, [r7, #8]
 80097e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	4a6f      	ldr	r2, [pc, #444]	@ (80099a8 <HAL_TIM_ConfigClockSource+0x214>)
 80097ea:	4293      	cmp	r3, r2
 80097ec:	f000 80c1 	beq.w	8009972 <HAL_TIM_ConfigClockSource+0x1de>
 80097f0:	4a6d      	ldr	r2, [pc, #436]	@ (80099a8 <HAL_TIM_ConfigClockSource+0x214>)
 80097f2:	4293      	cmp	r3, r2
 80097f4:	f200 80c6 	bhi.w	8009984 <HAL_TIM_ConfigClockSource+0x1f0>
 80097f8:	4a6c      	ldr	r2, [pc, #432]	@ (80099ac <HAL_TIM_ConfigClockSource+0x218>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	f000 80b9 	beq.w	8009972 <HAL_TIM_ConfigClockSource+0x1de>
 8009800:	4a6a      	ldr	r2, [pc, #424]	@ (80099ac <HAL_TIM_ConfigClockSource+0x218>)
 8009802:	4293      	cmp	r3, r2
 8009804:	f200 80be 	bhi.w	8009984 <HAL_TIM_ConfigClockSource+0x1f0>
 8009808:	4a69      	ldr	r2, [pc, #420]	@ (80099b0 <HAL_TIM_ConfigClockSource+0x21c>)
 800980a:	4293      	cmp	r3, r2
 800980c:	f000 80b1 	beq.w	8009972 <HAL_TIM_ConfigClockSource+0x1de>
 8009810:	4a67      	ldr	r2, [pc, #412]	@ (80099b0 <HAL_TIM_ConfigClockSource+0x21c>)
 8009812:	4293      	cmp	r3, r2
 8009814:	f200 80b6 	bhi.w	8009984 <HAL_TIM_ConfigClockSource+0x1f0>
 8009818:	4a66      	ldr	r2, [pc, #408]	@ (80099b4 <HAL_TIM_ConfigClockSource+0x220>)
 800981a:	4293      	cmp	r3, r2
 800981c:	f000 80a9 	beq.w	8009972 <HAL_TIM_ConfigClockSource+0x1de>
 8009820:	4a64      	ldr	r2, [pc, #400]	@ (80099b4 <HAL_TIM_ConfigClockSource+0x220>)
 8009822:	4293      	cmp	r3, r2
 8009824:	f200 80ae 	bhi.w	8009984 <HAL_TIM_ConfigClockSource+0x1f0>
 8009828:	4a63      	ldr	r2, [pc, #396]	@ (80099b8 <HAL_TIM_ConfigClockSource+0x224>)
 800982a:	4293      	cmp	r3, r2
 800982c:	f000 80a1 	beq.w	8009972 <HAL_TIM_ConfigClockSource+0x1de>
 8009830:	4a61      	ldr	r2, [pc, #388]	@ (80099b8 <HAL_TIM_ConfigClockSource+0x224>)
 8009832:	4293      	cmp	r3, r2
 8009834:	f200 80a6 	bhi.w	8009984 <HAL_TIM_ConfigClockSource+0x1f0>
 8009838:	4a60      	ldr	r2, [pc, #384]	@ (80099bc <HAL_TIM_ConfigClockSource+0x228>)
 800983a:	4293      	cmp	r3, r2
 800983c:	f000 8099 	beq.w	8009972 <HAL_TIM_ConfigClockSource+0x1de>
 8009840:	4a5e      	ldr	r2, [pc, #376]	@ (80099bc <HAL_TIM_ConfigClockSource+0x228>)
 8009842:	4293      	cmp	r3, r2
 8009844:	f200 809e 	bhi.w	8009984 <HAL_TIM_ConfigClockSource+0x1f0>
 8009848:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800984c:	f000 8091 	beq.w	8009972 <HAL_TIM_ConfigClockSource+0x1de>
 8009850:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009854:	f200 8096 	bhi.w	8009984 <HAL_TIM_ConfigClockSource+0x1f0>
 8009858:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800985c:	f000 8089 	beq.w	8009972 <HAL_TIM_ConfigClockSource+0x1de>
 8009860:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009864:	f200 808e 	bhi.w	8009984 <HAL_TIM_ConfigClockSource+0x1f0>
 8009868:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800986c:	d03e      	beq.n	80098ec <HAL_TIM_ConfigClockSource+0x158>
 800986e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009872:	f200 8087 	bhi.w	8009984 <HAL_TIM_ConfigClockSource+0x1f0>
 8009876:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800987a:	f000 8086 	beq.w	800998a <HAL_TIM_ConfigClockSource+0x1f6>
 800987e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009882:	d87f      	bhi.n	8009984 <HAL_TIM_ConfigClockSource+0x1f0>
 8009884:	2b70      	cmp	r3, #112	@ 0x70
 8009886:	d01a      	beq.n	80098be <HAL_TIM_ConfigClockSource+0x12a>
 8009888:	2b70      	cmp	r3, #112	@ 0x70
 800988a:	d87b      	bhi.n	8009984 <HAL_TIM_ConfigClockSource+0x1f0>
 800988c:	2b60      	cmp	r3, #96	@ 0x60
 800988e:	d050      	beq.n	8009932 <HAL_TIM_ConfigClockSource+0x19e>
 8009890:	2b60      	cmp	r3, #96	@ 0x60
 8009892:	d877      	bhi.n	8009984 <HAL_TIM_ConfigClockSource+0x1f0>
 8009894:	2b50      	cmp	r3, #80	@ 0x50
 8009896:	d03c      	beq.n	8009912 <HAL_TIM_ConfigClockSource+0x17e>
 8009898:	2b50      	cmp	r3, #80	@ 0x50
 800989a:	d873      	bhi.n	8009984 <HAL_TIM_ConfigClockSource+0x1f0>
 800989c:	2b40      	cmp	r3, #64	@ 0x40
 800989e:	d058      	beq.n	8009952 <HAL_TIM_ConfigClockSource+0x1be>
 80098a0:	2b40      	cmp	r3, #64	@ 0x40
 80098a2:	d86f      	bhi.n	8009984 <HAL_TIM_ConfigClockSource+0x1f0>
 80098a4:	2b30      	cmp	r3, #48	@ 0x30
 80098a6:	d064      	beq.n	8009972 <HAL_TIM_ConfigClockSource+0x1de>
 80098a8:	2b30      	cmp	r3, #48	@ 0x30
 80098aa:	d86b      	bhi.n	8009984 <HAL_TIM_ConfigClockSource+0x1f0>
 80098ac:	2b20      	cmp	r3, #32
 80098ae:	d060      	beq.n	8009972 <HAL_TIM_ConfigClockSource+0x1de>
 80098b0:	2b20      	cmp	r3, #32
 80098b2:	d867      	bhi.n	8009984 <HAL_TIM_ConfigClockSource+0x1f0>
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d05c      	beq.n	8009972 <HAL_TIM_ConfigClockSource+0x1de>
 80098b8:	2b10      	cmp	r3, #16
 80098ba:	d05a      	beq.n	8009972 <HAL_TIM_ConfigClockSource+0x1de>
 80098bc:	e062      	b.n	8009984 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80098ce:	f001 f86f 	bl	800a9b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	689b      	ldr	r3, [r3, #8]
 80098d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80098e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	68ba      	ldr	r2, [r7, #8]
 80098e8:	609a      	str	r2, [r3, #8]
      break;
 80098ea:	e04f      	b.n	800998c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80098fc:	f001 f858 	bl	800a9b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	689a      	ldr	r2, [r3, #8]
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800990e:	609a      	str	r2, [r3, #8]
      break;
 8009910:	e03c      	b.n	800998c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800991e:	461a      	mov	r2, r3
 8009920:	f000 ff14 	bl	800a74c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	2150      	movs	r1, #80	@ 0x50
 800992a:	4618      	mov	r0, r3
 800992c:	f001 f823 	bl	800a976 <TIM_ITRx_SetConfig>
      break;
 8009930:	e02c      	b.n	800998c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800993e:	461a      	mov	r2, r3
 8009940:	f000 ff70 	bl	800a824 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	2160      	movs	r1, #96	@ 0x60
 800994a:	4618      	mov	r0, r3
 800994c:	f001 f813 	bl	800a976 <TIM_ITRx_SetConfig>
      break;
 8009950:	e01c      	b.n	800998c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800995e:	461a      	mov	r2, r3
 8009960:	f000 fef4 	bl	800a74c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	2140      	movs	r1, #64	@ 0x40
 800996a:	4618      	mov	r0, r3
 800996c:	f001 f803 	bl	800a976 <TIM_ITRx_SetConfig>
      break;
 8009970:	e00c      	b.n	800998c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681a      	ldr	r2, [r3, #0]
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	4619      	mov	r1, r3
 800997c:	4610      	mov	r0, r2
 800997e:	f000 fffa 	bl	800a976 <TIM_ITRx_SetConfig>
      break;
 8009982:	e003      	b.n	800998c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8009984:	2301      	movs	r3, #1
 8009986:	73fb      	strb	r3, [r7, #15]
      break;
 8009988:	e000      	b.n	800998c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800998a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2201      	movs	r2, #1
 8009990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2200      	movs	r2, #0
 8009998:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800999c:	7bfb      	ldrb	r3, [r7, #15]
}
 800999e:	4618      	mov	r0, r3
 80099a0:	3710      	adds	r7, #16
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}
 80099a6:	bf00      	nop
 80099a8:	00100070 	.word	0x00100070
 80099ac:	00100060 	.word	0x00100060
 80099b0:	00100050 	.word	0x00100050
 80099b4:	00100040 	.word	0x00100040
 80099b8:	00100030 	.word	0x00100030
 80099bc:	00100020 	.word	0x00100020

080099c0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b082      	sub	sp, #8
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
 80099c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80099d0:	2b01      	cmp	r3, #1
 80099d2:	d101      	bne.n	80099d8 <HAL_TIM_SlaveConfigSynchro+0x18>
 80099d4:	2302      	movs	r3, #2
 80099d6:	e031      	b.n	8009a3c <HAL_TIM_SlaveConfigSynchro+0x7c>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2201      	movs	r2, #1
 80099dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2202      	movs	r2, #2
 80099e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80099e8:	6839      	ldr	r1, [r7, #0]
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f000 fd5a 	bl	800a4a4 <TIM_SlaveTimer_SetConfig>
 80099f0:	4603      	mov	r3, r0
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d009      	beq.n	8009a0a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2201      	movs	r2, #1
 80099fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2200      	movs	r2, #0
 8009a02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8009a06:	2301      	movs	r3, #1
 8009a08:	e018      	b.n	8009a3c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	68da      	ldr	r2, [r3, #12]
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009a18:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	68da      	ldr	r2, [r3, #12]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009a28:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2201      	movs	r2, #1
 8009a2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2200      	movs	r2, #0
 8009a36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009a3a:	2300      	movs	r3, #0
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	3708      	adds	r7, #8
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}

08009a44 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009a44:	b480      	push	{r7}
 8009a46:	b085      	sub	sp, #20
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	2b0c      	cmp	r3, #12
 8009a56:	d831      	bhi.n	8009abc <HAL_TIM_ReadCapturedValue+0x78>
 8009a58:	a201      	add	r2, pc, #4	@ (adr r2, 8009a60 <HAL_TIM_ReadCapturedValue+0x1c>)
 8009a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a5e:	bf00      	nop
 8009a60:	08009a95 	.word	0x08009a95
 8009a64:	08009abd 	.word	0x08009abd
 8009a68:	08009abd 	.word	0x08009abd
 8009a6c:	08009abd 	.word	0x08009abd
 8009a70:	08009a9f 	.word	0x08009a9f
 8009a74:	08009abd 	.word	0x08009abd
 8009a78:	08009abd 	.word	0x08009abd
 8009a7c:	08009abd 	.word	0x08009abd
 8009a80:	08009aa9 	.word	0x08009aa9
 8009a84:	08009abd 	.word	0x08009abd
 8009a88:	08009abd 	.word	0x08009abd
 8009a8c:	08009abd 	.word	0x08009abd
 8009a90:	08009ab3 	.word	0x08009ab3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a9a:	60fb      	str	r3, [r7, #12]

      break;
 8009a9c:	e00f      	b.n	8009abe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009aa4:	60fb      	str	r3, [r7, #12]

      break;
 8009aa6:	e00a      	b.n	8009abe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009aae:	60fb      	str	r3, [r7, #12]

      break;
 8009ab0:	e005      	b.n	8009abe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ab8:	60fb      	str	r3, [r7, #12]

      break;
 8009aba:	e000      	b.n	8009abe <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8009abc:	bf00      	nop
  }

  return tmpreg;
 8009abe:	68fb      	ldr	r3, [r7, #12]
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	3714      	adds	r7, #20
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aca:	4770      	bx	lr

08009acc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009acc:	b480      	push	{r7}
 8009ace:	b083      	sub	sp, #12
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009ad4:	bf00      	nop
 8009ad6:	370c      	adds	r7, #12
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ade:	4770      	bx	lr

08009ae0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	b083      	sub	sp, #12
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009ae8:	bf00      	nop
 8009aea:	370c      	adds	r7, #12
 8009aec:	46bd      	mov	sp, r7
 8009aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af2:	4770      	bx	lr

08009af4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009af4:	b480      	push	{r7}
 8009af6:	b083      	sub	sp, #12
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009afc:	bf00      	nop
 8009afe:	370c      	adds	r7, #12
 8009b00:	46bd      	mov	sp, r7
 8009b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b06:	4770      	bx	lr

08009b08 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009b08:	b480      	push	{r7}
 8009b0a:	b083      	sub	sp, #12
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8009b10:	bf00      	nop
 8009b12:	370c      	adds	r7, #12
 8009b14:	46bd      	mov	sp, r7
 8009b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1a:	4770      	bx	lr

08009b1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	b083      	sub	sp, #12
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009b24:	bf00      	nop
 8009b26:	370c      	adds	r7, #12
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2e:	4770      	bx	lr

08009b30 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b083      	sub	sp, #12
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8009b38:	bf00      	nop
 8009b3a:	370c      	adds	r7, #12
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b42:	4770      	bx	lr

08009b44 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b084      	sub	sp, #16
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b50:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b56:	687a      	ldr	r2, [r7, #4]
 8009b58:	429a      	cmp	r2, r3
 8009b5a:	d107      	bne.n	8009b6c <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	2201      	movs	r2, #1
 8009b60:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	2201      	movs	r2, #1
 8009b66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009b6a:	e02a      	b.n	8009bc2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b70:	687a      	ldr	r2, [r7, #4]
 8009b72:	429a      	cmp	r2, r3
 8009b74:	d107      	bne.n	8009b86 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	2202      	movs	r2, #2
 8009b7a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	2201      	movs	r2, #1
 8009b80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009b84:	e01d      	b.n	8009bc2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b8a:	687a      	ldr	r2, [r7, #4]
 8009b8c:	429a      	cmp	r2, r3
 8009b8e:	d107      	bne.n	8009ba0 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	2204      	movs	r2, #4
 8009b94:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	2201      	movs	r2, #1
 8009b9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009b9e:	e010      	b.n	8009bc2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ba4:	687a      	ldr	r2, [r7, #4]
 8009ba6:	429a      	cmp	r2, r3
 8009ba8:	d107      	bne.n	8009bba <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	2208      	movs	r2, #8
 8009bae:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	2201      	movs	r2, #1
 8009bb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009bb8:	e003      	b.n	8009bc2 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	2201      	movs	r2, #1
 8009bbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8009bc2:	68f8      	ldr	r0, [r7, #12]
 8009bc4:	f7ff ffb4 	bl	8009b30 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	771a      	strb	r2, [r3, #28]
}
 8009bce:	bf00      	nop
 8009bd0:	3710      	adds	r7, #16
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}

08009bd6 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8009bd6:	b580      	push	{r7, lr}
 8009bd8:	b084      	sub	sp, #16
 8009bda:	af00      	add	r7, sp, #0
 8009bdc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009be2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009be8:	687a      	ldr	r2, [r7, #4]
 8009bea:	429a      	cmp	r2, r3
 8009bec:	d10b      	bne.n	8009c06 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2201      	movs	r2, #1
 8009bf2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	69db      	ldr	r3, [r3, #28]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d136      	bne.n	8009c6a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	2201      	movs	r2, #1
 8009c00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009c04:	e031      	b.n	8009c6a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c0a:	687a      	ldr	r2, [r7, #4]
 8009c0c:	429a      	cmp	r2, r3
 8009c0e:	d10b      	bne.n	8009c28 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	2202      	movs	r2, #2
 8009c14:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	69db      	ldr	r3, [r3, #28]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d125      	bne.n	8009c6a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	2201      	movs	r2, #1
 8009c22:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009c26:	e020      	b.n	8009c6a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c2c:	687a      	ldr	r2, [r7, #4]
 8009c2e:	429a      	cmp	r2, r3
 8009c30:	d10b      	bne.n	8009c4a <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	2204      	movs	r2, #4
 8009c36:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	69db      	ldr	r3, [r3, #28]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d114      	bne.n	8009c6a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	2201      	movs	r2, #1
 8009c44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009c48:	e00f      	b.n	8009c6a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c4e:	687a      	ldr	r2, [r7, #4]
 8009c50:	429a      	cmp	r2, r3
 8009c52:	d10a      	bne.n	8009c6a <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	2208      	movs	r2, #8
 8009c58:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	69db      	ldr	r3, [r3, #28]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d103      	bne.n	8009c6a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	2201      	movs	r2, #1
 8009c66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c6a:	68f8      	ldr	r0, [r7, #12]
 8009c6c:	f7ff ff42 	bl	8009af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	2200      	movs	r2, #0
 8009c74:	771a      	strb	r2, [r3, #28]
}
 8009c76:	bf00      	nop
 8009c78:	3710      	adds	r7, #16
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}

08009c7e <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009c7e:	b580      	push	{r7, lr}
 8009c80:	b084      	sub	sp, #16
 8009c82:	af00      	add	r7, sp, #0
 8009c84:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c8a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c90:	687a      	ldr	r2, [r7, #4]
 8009c92:	429a      	cmp	r2, r3
 8009c94:	d103      	bne.n	8009c9e <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	2201      	movs	r2, #1
 8009c9a:	771a      	strb	r2, [r3, #28]
 8009c9c:	e019      	b.n	8009cd2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ca2:	687a      	ldr	r2, [r7, #4]
 8009ca4:	429a      	cmp	r2, r3
 8009ca6:	d103      	bne.n	8009cb0 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	2202      	movs	r2, #2
 8009cac:	771a      	strb	r2, [r3, #28]
 8009cae:	e010      	b.n	8009cd2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cb4:	687a      	ldr	r2, [r7, #4]
 8009cb6:	429a      	cmp	r2, r3
 8009cb8:	d103      	bne.n	8009cc2 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	2204      	movs	r2, #4
 8009cbe:	771a      	strb	r2, [r3, #28]
 8009cc0:	e007      	b.n	8009cd2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cc6:	687a      	ldr	r2, [r7, #4]
 8009cc8:	429a      	cmp	r2, r3
 8009cca:	d102      	bne.n	8009cd2 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	2208      	movs	r2, #8
 8009cd0:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8009cd2:	68f8      	ldr	r0, [r7, #12]
 8009cd4:	f7ff ff18 	bl	8009b08 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	771a      	strb	r2, [r3, #28]
}
 8009cde:	bf00      	nop
 8009ce0:	3710      	adds	r7, #16
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}
	...

08009ce8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009ce8:	b480      	push	{r7}
 8009cea:	b085      	sub	sp, #20
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
 8009cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	4a4c      	ldr	r2, [pc, #304]	@ (8009e2c <TIM_Base_SetConfig+0x144>)
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	d017      	beq.n	8009d30 <TIM_Base_SetConfig+0x48>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d06:	d013      	beq.n	8009d30 <TIM_Base_SetConfig+0x48>
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	4a49      	ldr	r2, [pc, #292]	@ (8009e30 <TIM_Base_SetConfig+0x148>)
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d00f      	beq.n	8009d30 <TIM_Base_SetConfig+0x48>
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	4a48      	ldr	r2, [pc, #288]	@ (8009e34 <TIM_Base_SetConfig+0x14c>)
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d00b      	beq.n	8009d30 <TIM_Base_SetConfig+0x48>
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	4a47      	ldr	r2, [pc, #284]	@ (8009e38 <TIM_Base_SetConfig+0x150>)
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	d007      	beq.n	8009d30 <TIM_Base_SetConfig+0x48>
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	4a46      	ldr	r2, [pc, #280]	@ (8009e3c <TIM_Base_SetConfig+0x154>)
 8009d24:	4293      	cmp	r3, r2
 8009d26:	d003      	beq.n	8009d30 <TIM_Base_SetConfig+0x48>
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	4a45      	ldr	r2, [pc, #276]	@ (8009e40 <TIM_Base_SetConfig+0x158>)
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d108      	bne.n	8009d42 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	685b      	ldr	r3, [r3, #4]
 8009d3c:	68fa      	ldr	r2, [r7, #12]
 8009d3e:	4313      	orrs	r3, r2
 8009d40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	4a39      	ldr	r2, [pc, #228]	@ (8009e2c <TIM_Base_SetConfig+0x144>)
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d023      	beq.n	8009d92 <TIM_Base_SetConfig+0xaa>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d50:	d01f      	beq.n	8009d92 <TIM_Base_SetConfig+0xaa>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	4a36      	ldr	r2, [pc, #216]	@ (8009e30 <TIM_Base_SetConfig+0x148>)
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d01b      	beq.n	8009d92 <TIM_Base_SetConfig+0xaa>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	4a35      	ldr	r2, [pc, #212]	@ (8009e34 <TIM_Base_SetConfig+0x14c>)
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	d017      	beq.n	8009d92 <TIM_Base_SetConfig+0xaa>
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	4a34      	ldr	r2, [pc, #208]	@ (8009e38 <TIM_Base_SetConfig+0x150>)
 8009d66:	4293      	cmp	r3, r2
 8009d68:	d013      	beq.n	8009d92 <TIM_Base_SetConfig+0xaa>
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	4a33      	ldr	r2, [pc, #204]	@ (8009e3c <TIM_Base_SetConfig+0x154>)
 8009d6e:	4293      	cmp	r3, r2
 8009d70:	d00f      	beq.n	8009d92 <TIM_Base_SetConfig+0xaa>
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	4a33      	ldr	r2, [pc, #204]	@ (8009e44 <TIM_Base_SetConfig+0x15c>)
 8009d76:	4293      	cmp	r3, r2
 8009d78:	d00b      	beq.n	8009d92 <TIM_Base_SetConfig+0xaa>
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	4a32      	ldr	r2, [pc, #200]	@ (8009e48 <TIM_Base_SetConfig+0x160>)
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	d007      	beq.n	8009d92 <TIM_Base_SetConfig+0xaa>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	4a31      	ldr	r2, [pc, #196]	@ (8009e4c <TIM_Base_SetConfig+0x164>)
 8009d86:	4293      	cmp	r3, r2
 8009d88:	d003      	beq.n	8009d92 <TIM_Base_SetConfig+0xaa>
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	4a2c      	ldr	r2, [pc, #176]	@ (8009e40 <TIM_Base_SetConfig+0x158>)
 8009d8e:	4293      	cmp	r3, r2
 8009d90:	d108      	bne.n	8009da4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009d98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	68db      	ldr	r3, [r3, #12]
 8009d9e:	68fa      	ldr	r2, [r7, #12]
 8009da0:	4313      	orrs	r3, r2
 8009da2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	695b      	ldr	r3, [r3, #20]
 8009dae:	4313      	orrs	r3, r2
 8009db0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	68fa      	ldr	r2, [r7, #12]
 8009db6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	689a      	ldr	r2, [r3, #8]
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	681a      	ldr	r2, [r3, #0]
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	4a18      	ldr	r2, [pc, #96]	@ (8009e2c <TIM_Base_SetConfig+0x144>)
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d013      	beq.n	8009df8 <TIM_Base_SetConfig+0x110>
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	4a1a      	ldr	r2, [pc, #104]	@ (8009e3c <TIM_Base_SetConfig+0x154>)
 8009dd4:	4293      	cmp	r3, r2
 8009dd6:	d00f      	beq.n	8009df8 <TIM_Base_SetConfig+0x110>
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	4a1a      	ldr	r2, [pc, #104]	@ (8009e44 <TIM_Base_SetConfig+0x15c>)
 8009ddc:	4293      	cmp	r3, r2
 8009dde:	d00b      	beq.n	8009df8 <TIM_Base_SetConfig+0x110>
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	4a19      	ldr	r2, [pc, #100]	@ (8009e48 <TIM_Base_SetConfig+0x160>)
 8009de4:	4293      	cmp	r3, r2
 8009de6:	d007      	beq.n	8009df8 <TIM_Base_SetConfig+0x110>
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	4a18      	ldr	r2, [pc, #96]	@ (8009e4c <TIM_Base_SetConfig+0x164>)
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d003      	beq.n	8009df8 <TIM_Base_SetConfig+0x110>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	4a13      	ldr	r2, [pc, #76]	@ (8009e40 <TIM_Base_SetConfig+0x158>)
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d103      	bne.n	8009e00 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	691a      	ldr	r2, [r3, #16]
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2201      	movs	r2, #1
 8009e04:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	691b      	ldr	r3, [r3, #16]
 8009e0a:	f003 0301 	and.w	r3, r3, #1
 8009e0e:	2b01      	cmp	r3, #1
 8009e10:	d105      	bne.n	8009e1e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	691b      	ldr	r3, [r3, #16]
 8009e16:	f023 0201 	bic.w	r2, r3, #1
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	611a      	str	r2, [r3, #16]
  }
}
 8009e1e:	bf00      	nop
 8009e20:	3714      	adds	r7, #20
 8009e22:	46bd      	mov	sp, r7
 8009e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e28:	4770      	bx	lr
 8009e2a:	bf00      	nop
 8009e2c:	40012c00 	.word	0x40012c00
 8009e30:	40000400 	.word	0x40000400
 8009e34:	40000800 	.word	0x40000800
 8009e38:	40000c00 	.word	0x40000c00
 8009e3c:	40013400 	.word	0x40013400
 8009e40:	40015000 	.word	0x40015000
 8009e44:	40014000 	.word	0x40014000
 8009e48:	40014400 	.word	0x40014400
 8009e4c:	40014800 	.word	0x40014800

08009e50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009e50:	b480      	push	{r7}
 8009e52:	b087      	sub	sp, #28
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
 8009e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6a1b      	ldr	r3, [r3, #32]
 8009e5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6a1b      	ldr	r3, [r3, #32]
 8009e64:	f023 0201 	bic.w	r2, r3, #1
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	685b      	ldr	r3, [r3, #4]
 8009e70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	699b      	ldr	r3, [r3, #24]
 8009e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009e7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	f023 0303 	bic.w	r3, r3, #3
 8009e8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	68fa      	ldr	r2, [r7, #12]
 8009e92:	4313      	orrs	r3, r2
 8009e94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009e96:	697b      	ldr	r3, [r7, #20]
 8009e98:	f023 0302 	bic.w	r3, r3, #2
 8009e9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	689b      	ldr	r3, [r3, #8]
 8009ea2:	697a      	ldr	r2, [r7, #20]
 8009ea4:	4313      	orrs	r3, r2
 8009ea6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	4a30      	ldr	r2, [pc, #192]	@ (8009f6c <TIM_OC1_SetConfig+0x11c>)
 8009eac:	4293      	cmp	r3, r2
 8009eae:	d013      	beq.n	8009ed8 <TIM_OC1_SetConfig+0x88>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	4a2f      	ldr	r2, [pc, #188]	@ (8009f70 <TIM_OC1_SetConfig+0x120>)
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d00f      	beq.n	8009ed8 <TIM_OC1_SetConfig+0x88>
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	4a2e      	ldr	r2, [pc, #184]	@ (8009f74 <TIM_OC1_SetConfig+0x124>)
 8009ebc:	4293      	cmp	r3, r2
 8009ebe:	d00b      	beq.n	8009ed8 <TIM_OC1_SetConfig+0x88>
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	4a2d      	ldr	r2, [pc, #180]	@ (8009f78 <TIM_OC1_SetConfig+0x128>)
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	d007      	beq.n	8009ed8 <TIM_OC1_SetConfig+0x88>
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	4a2c      	ldr	r2, [pc, #176]	@ (8009f7c <TIM_OC1_SetConfig+0x12c>)
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	d003      	beq.n	8009ed8 <TIM_OC1_SetConfig+0x88>
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	4a2b      	ldr	r2, [pc, #172]	@ (8009f80 <TIM_OC1_SetConfig+0x130>)
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	d10c      	bne.n	8009ef2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009ed8:	697b      	ldr	r3, [r7, #20]
 8009eda:	f023 0308 	bic.w	r3, r3, #8
 8009ede:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	68db      	ldr	r3, [r3, #12]
 8009ee4:	697a      	ldr	r2, [r7, #20]
 8009ee6:	4313      	orrs	r3, r2
 8009ee8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009eea:	697b      	ldr	r3, [r7, #20]
 8009eec:	f023 0304 	bic.w	r3, r3, #4
 8009ef0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	4a1d      	ldr	r2, [pc, #116]	@ (8009f6c <TIM_OC1_SetConfig+0x11c>)
 8009ef6:	4293      	cmp	r3, r2
 8009ef8:	d013      	beq.n	8009f22 <TIM_OC1_SetConfig+0xd2>
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	4a1c      	ldr	r2, [pc, #112]	@ (8009f70 <TIM_OC1_SetConfig+0x120>)
 8009efe:	4293      	cmp	r3, r2
 8009f00:	d00f      	beq.n	8009f22 <TIM_OC1_SetConfig+0xd2>
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	4a1b      	ldr	r2, [pc, #108]	@ (8009f74 <TIM_OC1_SetConfig+0x124>)
 8009f06:	4293      	cmp	r3, r2
 8009f08:	d00b      	beq.n	8009f22 <TIM_OC1_SetConfig+0xd2>
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	4a1a      	ldr	r2, [pc, #104]	@ (8009f78 <TIM_OC1_SetConfig+0x128>)
 8009f0e:	4293      	cmp	r3, r2
 8009f10:	d007      	beq.n	8009f22 <TIM_OC1_SetConfig+0xd2>
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	4a19      	ldr	r2, [pc, #100]	@ (8009f7c <TIM_OC1_SetConfig+0x12c>)
 8009f16:	4293      	cmp	r3, r2
 8009f18:	d003      	beq.n	8009f22 <TIM_OC1_SetConfig+0xd2>
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	4a18      	ldr	r2, [pc, #96]	@ (8009f80 <TIM_OC1_SetConfig+0x130>)
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	d111      	bne.n	8009f46 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009f22:	693b      	ldr	r3, [r7, #16]
 8009f24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009f28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009f2a:	693b      	ldr	r3, [r7, #16]
 8009f2c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009f30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	695b      	ldr	r3, [r3, #20]
 8009f36:	693a      	ldr	r2, [r7, #16]
 8009f38:	4313      	orrs	r3, r2
 8009f3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	699b      	ldr	r3, [r3, #24]
 8009f40:	693a      	ldr	r2, [r7, #16]
 8009f42:	4313      	orrs	r3, r2
 8009f44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	693a      	ldr	r2, [r7, #16]
 8009f4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	68fa      	ldr	r2, [r7, #12]
 8009f50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	685a      	ldr	r2, [r3, #4]
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	697a      	ldr	r2, [r7, #20]
 8009f5e:	621a      	str	r2, [r3, #32]
}
 8009f60:	bf00      	nop
 8009f62:	371c      	adds	r7, #28
 8009f64:	46bd      	mov	sp, r7
 8009f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6a:	4770      	bx	lr
 8009f6c:	40012c00 	.word	0x40012c00
 8009f70:	40013400 	.word	0x40013400
 8009f74:	40014000 	.word	0x40014000
 8009f78:	40014400 	.word	0x40014400
 8009f7c:	40014800 	.word	0x40014800
 8009f80:	40015000 	.word	0x40015000

08009f84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009f84:	b480      	push	{r7}
 8009f86:	b087      	sub	sp, #28
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
 8009f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6a1b      	ldr	r3, [r3, #32]
 8009f92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6a1b      	ldr	r3, [r3, #32]
 8009f98:	f023 0210 	bic.w	r2, r3, #16
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	685b      	ldr	r3, [r3, #4]
 8009fa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	699b      	ldr	r3, [r3, #24]
 8009faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009fb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009fb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009fbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	021b      	lsls	r3, r3, #8
 8009fc6:	68fa      	ldr	r2, [r7, #12]
 8009fc8:	4313      	orrs	r3, r2
 8009fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009fcc:	697b      	ldr	r3, [r7, #20]
 8009fce:	f023 0320 	bic.w	r3, r3, #32
 8009fd2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	689b      	ldr	r3, [r3, #8]
 8009fd8:	011b      	lsls	r3, r3, #4
 8009fda:	697a      	ldr	r2, [r7, #20]
 8009fdc:	4313      	orrs	r3, r2
 8009fde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	4a2c      	ldr	r2, [pc, #176]	@ (800a094 <TIM_OC2_SetConfig+0x110>)
 8009fe4:	4293      	cmp	r3, r2
 8009fe6:	d007      	beq.n	8009ff8 <TIM_OC2_SetConfig+0x74>
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	4a2b      	ldr	r2, [pc, #172]	@ (800a098 <TIM_OC2_SetConfig+0x114>)
 8009fec:	4293      	cmp	r3, r2
 8009fee:	d003      	beq.n	8009ff8 <TIM_OC2_SetConfig+0x74>
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	4a2a      	ldr	r2, [pc, #168]	@ (800a09c <TIM_OC2_SetConfig+0x118>)
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	d10d      	bne.n	800a014 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009ff8:	697b      	ldr	r3, [r7, #20]
 8009ffa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009ffe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	68db      	ldr	r3, [r3, #12]
 800a004:	011b      	lsls	r3, r3, #4
 800a006:	697a      	ldr	r2, [r7, #20]
 800a008:	4313      	orrs	r3, r2
 800a00a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a00c:	697b      	ldr	r3, [r7, #20]
 800a00e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a012:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	4a1f      	ldr	r2, [pc, #124]	@ (800a094 <TIM_OC2_SetConfig+0x110>)
 800a018:	4293      	cmp	r3, r2
 800a01a:	d013      	beq.n	800a044 <TIM_OC2_SetConfig+0xc0>
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	4a1e      	ldr	r2, [pc, #120]	@ (800a098 <TIM_OC2_SetConfig+0x114>)
 800a020:	4293      	cmp	r3, r2
 800a022:	d00f      	beq.n	800a044 <TIM_OC2_SetConfig+0xc0>
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	4a1e      	ldr	r2, [pc, #120]	@ (800a0a0 <TIM_OC2_SetConfig+0x11c>)
 800a028:	4293      	cmp	r3, r2
 800a02a:	d00b      	beq.n	800a044 <TIM_OC2_SetConfig+0xc0>
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	4a1d      	ldr	r2, [pc, #116]	@ (800a0a4 <TIM_OC2_SetConfig+0x120>)
 800a030:	4293      	cmp	r3, r2
 800a032:	d007      	beq.n	800a044 <TIM_OC2_SetConfig+0xc0>
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	4a1c      	ldr	r2, [pc, #112]	@ (800a0a8 <TIM_OC2_SetConfig+0x124>)
 800a038:	4293      	cmp	r3, r2
 800a03a:	d003      	beq.n	800a044 <TIM_OC2_SetConfig+0xc0>
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	4a17      	ldr	r2, [pc, #92]	@ (800a09c <TIM_OC2_SetConfig+0x118>)
 800a040:	4293      	cmp	r3, r2
 800a042:	d113      	bne.n	800a06c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a044:	693b      	ldr	r3, [r7, #16]
 800a046:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a04a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a052:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	695b      	ldr	r3, [r3, #20]
 800a058:	009b      	lsls	r3, r3, #2
 800a05a:	693a      	ldr	r2, [r7, #16]
 800a05c:	4313      	orrs	r3, r2
 800a05e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	699b      	ldr	r3, [r3, #24]
 800a064:	009b      	lsls	r3, r3, #2
 800a066:	693a      	ldr	r2, [r7, #16]
 800a068:	4313      	orrs	r3, r2
 800a06a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	693a      	ldr	r2, [r7, #16]
 800a070:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	68fa      	ldr	r2, [r7, #12]
 800a076:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	685a      	ldr	r2, [r3, #4]
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	697a      	ldr	r2, [r7, #20]
 800a084:	621a      	str	r2, [r3, #32]
}
 800a086:	bf00      	nop
 800a088:	371c      	adds	r7, #28
 800a08a:	46bd      	mov	sp, r7
 800a08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a090:	4770      	bx	lr
 800a092:	bf00      	nop
 800a094:	40012c00 	.word	0x40012c00
 800a098:	40013400 	.word	0x40013400
 800a09c:	40015000 	.word	0x40015000
 800a0a0:	40014000 	.word	0x40014000
 800a0a4:	40014400 	.word	0x40014400
 800a0a8:	40014800 	.word	0x40014800

0800a0ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	b087      	sub	sp, #28
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
 800a0b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	6a1b      	ldr	r3, [r3, #32]
 800a0ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	6a1b      	ldr	r3, [r3, #32]
 800a0c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	685b      	ldr	r3, [r3, #4]
 800a0cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	69db      	ldr	r3, [r3, #28]
 800a0d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a0da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a0de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	f023 0303 	bic.w	r3, r3, #3
 800a0e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	68fa      	ldr	r2, [r7, #12]
 800a0ee:	4313      	orrs	r3, r2
 800a0f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a0f2:	697b      	ldr	r3, [r7, #20]
 800a0f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a0f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	689b      	ldr	r3, [r3, #8]
 800a0fe:	021b      	lsls	r3, r3, #8
 800a100:	697a      	ldr	r2, [r7, #20]
 800a102:	4313      	orrs	r3, r2
 800a104:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	4a2b      	ldr	r2, [pc, #172]	@ (800a1b8 <TIM_OC3_SetConfig+0x10c>)
 800a10a:	4293      	cmp	r3, r2
 800a10c:	d007      	beq.n	800a11e <TIM_OC3_SetConfig+0x72>
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	4a2a      	ldr	r2, [pc, #168]	@ (800a1bc <TIM_OC3_SetConfig+0x110>)
 800a112:	4293      	cmp	r3, r2
 800a114:	d003      	beq.n	800a11e <TIM_OC3_SetConfig+0x72>
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	4a29      	ldr	r2, [pc, #164]	@ (800a1c0 <TIM_OC3_SetConfig+0x114>)
 800a11a:	4293      	cmp	r3, r2
 800a11c:	d10d      	bne.n	800a13a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a11e:	697b      	ldr	r3, [r7, #20]
 800a120:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a124:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	68db      	ldr	r3, [r3, #12]
 800a12a:	021b      	lsls	r3, r3, #8
 800a12c:	697a      	ldr	r2, [r7, #20]
 800a12e:	4313      	orrs	r3, r2
 800a130:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a132:	697b      	ldr	r3, [r7, #20]
 800a134:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a138:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	4a1e      	ldr	r2, [pc, #120]	@ (800a1b8 <TIM_OC3_SetConfig+0x10c>)
 800a13e:	4293      	cmp	r3, r2
 800a140:	d013      	beq.n	800a16a <TIM_OC3_SetConfig+0xbe>
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	4a1d      	ldr	r2, [pc, #116]	@ (800a1bc <TIM_OC3_SetConfig+0x110>)
 800a146:	4293      	cmp	r3, r2
 800a148:	d00f      	beq.n	800a16a <TIM_OC3_SetConfig+0xbe>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	4a1d      	ldr	r2, [pc, #116]	@ (800a1c4 <TIM_OC3_SetConfig+0x118>)
 800a14e:	4293      	cmp	r3, r2
 800a150:	d00b      	beq.n	800a16a <TIM_OC3_SetConfig+0xbe>
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	4a1c      	ldr	r2, [pc, #112]	@ (800a1c8 <TIM_OC3_SetConfig+0x11c>)
 800a156:	4293      	cmp	r3, r2
 800a158:	d007      	beq.n	800a16a <TIM_OC3_SetConfig+0xbe>
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	4a1b      	ldr	r2, [pc, #108]	@ (800a1cc <TIM_OC3_SetConfig+0x120>)
 800a15e:	4293      	cmp	r3, r2
 800a160:	d003      	beq.n	800a16a <TIM_OC3_SetConfig+0xbe>
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	4a16      	ldr	r2, [pc, #88]	@ (800a1c0 <TIM_OC3_SetConfig+0x114>)
 800a166:	4293      	cmp	r3, r2
 800a168:	d113      	bne.n	800a192 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a16a:	693b      	ldr	r3, [r7, #16]
 800a16c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a170:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a172:	693b      	ldr	r3, [r7, #16]
 800a174:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a178:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	695b      	ldr	r3, [r3, #20]
 800a17e:	011b      	lsls	r3, r3, #4
 800a180:	693a      	ldr	r2, [r7, #16]
 800a182:	4313      	orrs	r3, r2
 800a184:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	699b      	ldr	r3, [r3, #24]
 800a18a:	011b      	lsls	r3, r3, #4
 800a18c:	693a      	ldr	r2, [r7, #16]
 800a18e:	4313      	orrs	r3, r2
 800a190:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	693a      	ldr	r2, [r7, #16]
 800a196:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	68fa      	ldr	r2, [r7, #12]
 800a19c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	685a      	ldr	r2, [r3, #4]
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	697a      	ldr	r2, [r7, #20]
 800a1aa:	621a      	str	r2, [r3, #32]
}
 800a1ac:	bf00      	nop
 800a1ae:	371c      	adds	r7, #28
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b6:	4770      	bx	lr
 800a1b8:	40012c00 	.word	0x40012c00
 800a1bc:	40013400 	.word	0x40013400
 800a1c0:	40015000 	.word	0x40015000
 800a1c4:	40014000 	.word	0x40014000
 800a1c8:	40014400 	.word	0x40014400
 800a1cc:	40014800 	.word	0x40014800

0800a1d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b087      	sub	sp, #28
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
 800a1d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6a1b      	ldr	r3, [r3, #32]
 800a1de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	6a1b      	ldr	r3, [r3, #32]
 800a1e4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	685b      	ldr	r3, [r3, #4]
 800a1f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	69db      	ldr	r3, [r3, #28]
 800a1f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a1fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a202:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a20a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	021b      	lsls	r3, r3, #8
 800a212:	68fa      	ldr	r2, [r7, #12]
 800a214:	4313      	orrs	r3, r2
 800a216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a218:	697b      	ldr	r3, [r7, #20]
 800a21a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a21e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	689b      	ldr	r3, [r3, #8]
 800a224:	031b      	lsls	r3, r3, #12
 800a226:	697a      	ldr	r2, [r7, #20]
 800a228:	4313      	orrs	r3, r2
 800a22a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	4a2c      	ldr	r2, [pc, #176]	@ (800a2e0 <TIM_OC4_SetConfig+0x110>)
 800a230:	4293      	cmp	r3, r2
 800a232:	d007      	beq.n	800a244 <TIM_OC4_SetConfig+0x74>
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	4a2b      	ldr	r2, [pc, #172]	@ (800a2e4 <TIM_OC4_SetConfig+0x114>)
 800a238:	4293      	cmp	r3, r2
 800a23a:	d003      	beq.n	800a244 <TIM_OC4_SetConfig+0x74>
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	4a2a      	ldr	r2, [pc, #168]	@ (800a2e8 <TIM_OC4_SetConfig+0x118>)
 800a240:	4293      	cmp	r3, r2
 800a242:	d10d      	bne.n	800a260 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800a244:	697b      	ldr	r3, [r7, #20]
 800a246:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a24a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	68db      	ldr	r3, [r3, #12]
 800a250:	031b      	lsls	r3, r3, #12
 800a252:	697a      	ldr	r2, [r7, #20]
 800a254:	4313      	orrs	r3, r2
 800a256:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800a258:	697b      	ldr	r3, [r7, #20]
 800a25a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a25e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	4a1f      	ldr	r2, [pc, #124]	@ (800a2e0 <TIM_OC4_SetConfig+0x110>)
 800a264:	4293      	cmp	r3, r2
 800a266:	d013      	beq.n	800a290 <TIM_OC4_SetConfig+0xc0>
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	4a1e      	ldr	r2, [pc, #120]	@ (800a2e4 <TIM_OC4_SetConfig+0x114>)
 800a26c:	4293      	cmp	r3, r2
 800a26e:	d00f      	beq.n	800a290 <TIM_OC4_SetConfig+0xc0>
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	4a1e      	ldr	r2, [pc, #120]	@ (800a2ec <TIM_OC4_SetConfig+0x11c>)
 800a274:	4293      	cmp	r3, r2
 800a276:	d00b      	beq.n	800a290 <TIM_OC4_SetConfig+0xc0>
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	4a1d      	ldr	r2, [pc, #116]	@ (800a2f0 <TIM_OC4_SetConfig+0x120>)
 800a27c:	4293      	cmp	r3, r2
 800a27e:	d007      	beq.n	800a290 <TIM_OC4_SetConfig+0xc0>
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	4a1c      	ldr	r2, [pc, #112]	@ (800a2f4 <TIM_OC4_SetConfig+0x124>)
 800a284:	4293      	cmp	r3, r2
 800a286:	d003      	beq.n	800a290 <TIM_OC4_SetConfig+0xc0>
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	4a17      	ldr	r2, [pc, #92]	@ (800a2e8 <TIM_OC4_SetConfig+0x118>)
 800a28c:	4293      	cmp	r3, r2
 800a28e:	d113      	bne.n	800a2b8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a296:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800a298:	693b      	ldr	r3, [r7, #16]
 800a29a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a29e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	695b      	ldr	r3, [r3, #20]
 800a2a4:	019b      	lsls	r3, r3, #6
 800a2a6:	693a      	ldr	r2, [r7, #16]
 800a2a8:	4313      	orrs	r3, r2
 800a2aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	699b      	ldr	r3, [r3, #24]
 800a2b0:	019b      	lsls	r3, r3, #6
 800a2b2:	693a      	ldr	r2, [r7, #16]
 800a2b4:	4313      	orrs	r3, r2
 800a2b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	693a      	ldr	r2, [r7, #16]
 800a2bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	68fa      	ldr	r2, [r7, #12]
 800a2c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	685a      	ldr	r2, [r3, #4]
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	697a      	ldr	r2, [r7, #20]
 800a2d0:	621a      	str	r2, [r3, #32]
}
 800a2d2:	bf00      	nop
 800a2d4:	371c      	adds	r7, #28
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2dc:	4770      	bx	lr
 800a2de:	bf00      	nop
 800a2e0:	40012c00 	.word	0x40012c00
 800a2e4:	40013400 	.word	0x40013400
 800a2e8:	40015000 	.word	0x40015000
 800a2ec:	40014000 	.word	0x40014000
 800a2f0:	40014400 	.word	0x40014400
 800a2f4:	40014800 	.word	0x40014800

0800a2f8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	b087      	sub	sp, #28
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
 800a300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6a1b      	ldr	r3, [r3, #32]
 800a306:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	6a1b      	ldr	r3, [r3, #32]
 800a30c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	685b      	ldr	r3, [r3, #4]
 800a318:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a31e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a326:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a32a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	68fa      	ldr	r2, [r7, #12]
 800a332:	4313      	orrs	r3, r2
 800a334:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a336:	693b      	ldr	r3, [r7, #16]
 800a338:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a33c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	689b      	ldr	r3, [r3, #8]
 800a342:	041b      	lsls	r3, r3, #16
 800a344:	693a      	ldr	r2, [r7, #16]
 800a346:	4313      	orrs	r3, r2
 800a348:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	4a19      	ldr	r2, [pc, #100]	@ (800a3b4 <TIM_OC5_SetConfig+0xbc>)
 800a34e:	4293      	cmp	r3, r2
 800a350:	d013      	beq.n	800a37a <TIM_OC5_SetConfig+0x82>
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	4a18      	ldr	r2, [pc, #96]	@ (800a3b8 <TIM_OC5_SetConfig+0xc0>)
 800a356:	4293      	cmp	r3, r2
 800a358:	d00f      	beq.n	800a37a <TIM_OC5_SetConfig+0x82>
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	4a17      	ldr	r2, [pc, #92]	@ (800a3bc <TIM_OC5_SetConfig+0xc4>)
 800a35e:	4293      	cmp	r3, r2
 800a360:	d00b      	beq.n	800a37a <TIM_OC5_SetConfig+0x82>
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	4a16      	ldr	r2, [pc, #88]	@ (800a3c0 <TIM_OC5_SetConfig+0xc8>)
 800a366:	4293      	cmp	r3, r2
 800a368:	d007      	beq.n	800a37a <TIM_OC5_SetConfig+0x82>
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	4a15      	ldr	r2, [pc, #84]	@ (800a3c4 <TIM_OC5_SetConfig+0xcc>)
 800a36e:	4293      	cmp	r3, r2
 800a370:	d003      	beq.n	800a37a <TIM_OC5_SetConfig+0x82>
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	4a14      	ldr	r2, [pc, #80]	@ (800a3c8 <TIM_OC5_SetConfig+0xd0>)
 800a376:	4293      	cmp	r3, r2
 800a378:	d109      	bne.n	800a38e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a37a:	697b      	ldr	r3, [r7, #20]
 800a37c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a380:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	695b      	ldr	r3, [r3, #20]
 800a386:	021b      	lsls	r3, r3, #8
 800a388:	697a      	ldr	r2, [r7, #20]
 800a38a:	4313      	orrs	r3, r2
 800a38c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	697a      	ldr	r2, [r7, #20]
 800a392:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	68fa      	ldr	r2, [r7, #12]
 800a398:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	685a      	ldr	r2, [r3, #4]
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	693a      	ldr	r2, [r7, #16]
 800a3a6:	621a      	str	r2, [r3, #32]
}
 800a3a8:	bf00      	nop
 800a3aa:	371c      	adds	r7, #28
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b2:	4770      	bx	lr
 800a3b4:	40012c00 	.word	0x40012c00
 800a3b8:	40013400 	.word	0x40013400
 800a3bc:	40014000 	.word	0x40014000
 800a3c0:	40014400 	.word	0x40014400
 800a3c4:	40014800 	.word	0x40014800
 800a3c8:	40015000 	.word	0x40015000

0800a3cc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a3cc:	b480      	push	{r7}
 800a3ce:	b087      	sub	sp, #28
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
 800a3d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6a1b      	ldr	r3, [r3, #32]
 800a3da:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	6a1b      	ldr	r3, [r3, #32]
 800a3e0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	685b      	ldr	r3, [r3, #4]
 800a3ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a3fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a3fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	021b      	lsls	r3, r3, #8
 800a406:	68fa      	ldr	r2, [r7, #12]
 800a408:	4313      	orrs	r3, r2
 800a40a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a40c:	693b      	ldr	r3, [r7, #16]
 800a40e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a412:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	689b      	ldr	r3, [r3, #8]
 800a418:	051b      	lsls	r3, r3, #20
 800a41a:	693a      	ldr	r2, [r7, #16]
 800a41c:	4313      	orrs	r3, r2
 800a41e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	4a1a      	ldr	r2, [pc, #104]	@ (800a48c <TIM_OC6_SetConfig+0xc0>)
 800a424:	4293      	cmp	r3, r2
 800a426:	d013      	beq.n	800a450 <TIM_OC6_SetConfig+0x84>
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	4a19      	ldr	r2, [pc, #100]	@ (800a490 <TIM_OC6_SetConfig+0xc4>)
 800a42c:	4293      	cmp	r3, r2
 800a42e:	d00f      	beq.n	800a450 <TIM_OC6_SetConfig+0x84>
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	4a18      	ldr	r2, [pc, #96]	@ (800a494 <TIM_OC6_SetConfig+0xc8>)
 800a434:	4293      	cmp	r3, r2
 800a436:	d00b      	beq.n	800a450 <TIM_OC6_SetConfig+0x84>
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	4a17      	ldr	r2, [pc, #92]	@ (800a498 <TIM_OC6_SetConfig+0xcc>)
 800a43c:	4293      	cmp	r3, r2
 800a43e:	d007      	beq.n	800a450 <TIM_OC6_SetConfig+0x84>
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	4a16      	ldr	r2, [pc, #88]	@ (800a49c <TIM_OC6_SetConfig+0xd0>)
 800a444:	4293      	cmp	r3, r2
 800a446:	d003      	beq.n	800a450 <TIM_OC6_SetConfig+0x84>
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	4a15      	ldr	r2, [pc, #84]	@ (800a4a0 <TIM_OC6_SetConfig+0xd4>)
 800a44c:	4293      	cmp	r3, r2
 800a44e:	d109      	bne.n	800a464 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a450:	697b      	ldr	r3, [r7, #20]
 800a452:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a456:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	695b      	ldr	r3, [r3, #20]
 800a45c:	029b      	lsls	r3, r3, #10
 800a45e:	697a      	ldr	r2, [r7, #20]
 800a460:	4313      	orrs	r3, r2
 800a462:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	697a      	ldr	r2, [r7, #20]
 800a468:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	68fa      	ldr	r2, [r7, #12]
 800a46e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	685a      	ldr	r2, [r3, #4]
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	693a      	ldr	r2, [r7, #16]
 800a47c:	621a      	str	r2, [r3, #32]
}
 800a47e:	bf00      	nop
 800a480:	371c      	adds	r7, #28
 800a482:	46bd      	mov	sp, r7
 800a484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a488:	4770      	bx	lr
 800a48a:	bf00      	nop
 800a48c:	40012c00 	.word	0x40012c00
 800a490:	40013400 	.word	0x40013400
 800a494:	40014000 	.word	0x40014000
 800a498:	40014400 	.word	0x40014400
 800a49c:	40014800 	.word	0x40014800
 800a4a0:	40015000 	.word	0x40015000

0800a4a4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b086      	sub	sp, #24
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
 800a4ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	689b      	ldr	r3, [r3, #8]
 800a4b8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a4ba:	693b      	ldr	r3, [r7, #16]
 800a4bc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a4c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a4c4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	685b      	ldr	r3, [r3, #4]
 800a4ca:	693a      	ldr	r2, [r7, #16]
 800a4cc:	4313      	orrs	r3, r2
 800a4ce:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800a4d0:	693b      	ldr	r3, [r7, #16]
 800a4d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a4d6:	f023 0307 	bic.w	r3, r3, #7
 800a4da:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	693a      	ldr	r2, [r7, #16]
 800a4e2:	4313      	orrs	r3, r2
 800a4e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	693a      	ldr	r2, [r7, #16]
 800a4ec:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	685b      	ldr	r3, [r3, #4]
 800a4f2:	4a56      	ldr	r2, [pc, #344]	@ (800a64c <TIM_SlaveTimer_SetConfig+0x1a8>)
 800a4f4:	4293      	cmp	r3, r2
 800a4f6:	f000 80a2 	beq.w	800a63e <TIM_SlaveTimer_SetConfig+0x19a>
 800a4fa:	4a54      	ldr	r2, [pc, #336]	@ (800a64c <TIM_SlaveTimer_SetConfig+0x1a8>)
 800a4fc:	4293      	cmp	r3, r2
 800a4fe:	f200 809b 	bhi.w	800a638 <TIM_SlaveTimer_SetConfig+0x194>
 800a502:	4a53      	ldr	r2, [pc, #332]	@ (800a650 <TIM_SlaveTimer_SetConfig+0x1ac>)
 800a504:	4293      	cmp	r3, r2
 800a506:	f000 809a 	beq.w	800a63e <TIM_SlaveTimer_SetConfig+0x19a>
 800a50a:	4a51      	ldr	r2, [pc, #324]	@ (800a650 <TIM_SlaveTimer_SetConfig+0x1ac>)
 800a50c:	4293      	cmp	r3, r2
 800a50e:	f200 8093 	bhi.w	800a638 <TIM_SlaveTimer_SetConfig+0x194>
 800a512:	4a50      	ldr	r2, [pc, #320]	@ (800a654 <TIM_SlaveTimer_SetConfig+0x1b0>)
 800a514:	4293      	cmp	r3, r2
 800a516:	f000 8092 	beq.w	800a63e <TIM_SlaveTimer_SetConfig+0x19a>
 800a51a:	4a4e      	ldr	r2, [pc, #312]	@ (800a654 <TIM_SlaveTimer_SetConfig+0x1b0>)
 800a51c:	4293      	cmp	r3, r2
 800a51e:	f200 808b 	bhi.w	800a638 <TIM_SlaveTimer_SetConfig+0x194>
 800a522:	4a4d      	ldr	r2, [pc, #308]	@ (800a658 <TIM_SlaveTimer_SetConfig+0x1b4>)
 800a524:	4293      	cmp	r3, r2
 800a526:	f000 808a 	beq.w	800a63e <TIM_SlaveTimer_SetConfig+0x19a>
 800a52a:	4a4b      	ldr	r2, [pc, #300]	@ (800a658 <TIM_SlaveTimer_SetConfig+0x1b4>)
 800a52c:	4293      	cmp	r3, r2
 800a52e:	f200 8083 	bhi.w	800a638 <TIM_SlaveTimer_SetConfig+0x194>
 800a532:	4a4a      	ldr	r2, [pc, #296]	@ (800a65c <TIM_SlaveTimer_SetConfig+0x1b8>)
 800a534:	4293      	cmp	r3, r2
 800a536:	f000 8082 	beq.w	800a63e <TIM_SlaveTimer_SetConfig+0x19a>
 800a53a:	4a48      	ldr	r2, [pc, #288]	@ (800a65c <TIM_SlaveTimer_SetConfig+0x1b8>)
 800a53c:	4293      	cmp	r3, r2
 800a53e:	d87b      	bhi.n	800a638 <TIM_SlaveTimer_SetConfig+0x194>
 800a540:	4a47      	ldr	r2, [pc, #284]	@ (800a660 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800a542:	4293      	cmp	r3, r2
 800a544:	d07b      	beq.n	800a63e <TIM_SlaveTimer_SetConfig+0x19a>
 800a546:	4a46      	ldr	r2, [pc, #280]	@ (800a660 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800a548:	4293      	cmp	r3, r2
 800a54a:	d875      	bhi.n	800a638 <TIM_SlaveTimer_SetConfig+0x194>
 800a54c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a550:	d075      	beq.n	800a63e <TIM_SlaveTimer_SetConfig+0x19a>
 800a552:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a556:	d86f      	bhi.n	800a638 <TIM_SlaveTimer_SetConfig+0x194>
 800a558:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a55c:	d06f      	beq.n	800a63e <TIM_SlaveTimer_SetConfig+0x19a>
 800a55e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a562:	d869      	bhi.n	800a638 <TIM_SlaveTimer_SetConfig+0x194>
 800a564:	2b70      	cmp	r3, #112	@ 0x70
 800a566:	d01a      	beq.n	800a59e <TIM_SlaveTimer_SetConfig+0xfa>
 800a568:	2b70      	cmp	r3, #112	@ 0x70
 800a56a:	d865      	bhi.n	800a638 <TIM_SlaveTimer_SetConfig+0x194>
 800a56c:	2b60      	cmp	r3, #96	@ 0x60
 800a56e:	d059      	beq.n	800a624 <TIM_SlaveTimer_SetConfig+0x180>
 800a570:	2b60      	cmp	r3, #96	@ 0x60
 800a572:	d861      	bhi.n	800a638 <TIM_SlaveTimer_SetConfig+0x194>
 800a574:	2b50      	cmp	r3, #80	@ 0x50
 800a576:	d04b      	beq.n	800a610 <TIM_SlaveTimer_SetConfig+0x16c>
 800a578:	2b50      	cmp	r3, #80	@ 0x50
 800a57a:	d85d      	bhi.n	800a638 <TIM_SlaveTimer_SetConfig+0x194>
 800a57c:	2b40      	cmp	r3, #64	@ 0x40
 800a57e:	d019      	beq.n	800a5b4 <TIM_SlaveTimer_SetConfig+0x110>
 800a580:	2b40      	cmp	r3, #64	@ 0x40
 800a582:	d859      	bhi.n	800a638 <TIM_SlaveTimer_SetConfig+0x194>
 800a584:	2b30      	cmp	r3, #48	@ 0x30
 800a586:	d05a      	beq.n	800a63e <TIM_SlaveTimer_SetConfig+0x19a>
 800a588:	2b30      	cmp	r3, #48	@ 0x30
 800a58a:	d855      	bhi.n	800a638 <TIM_SlaveTimer_SetConfig+0x194>
 800a58c:	2b20      	cmp	r3, #32
 800a58e:	d056      	beq.n	800a63e <TIM_SlaveTimer_SetConfig+0x19a>
 800a590:	2b20      	cmp	r3, #32
 800a592:	d851      	bhi.n	800a638 <TIM_SlaveTimer_SetConfig+0x194>
 800a594:	2b00      	cmp	r3, #0
 800a596:	d052      	beq.n	800a63e <TIM_SlaveTimer_SetConfig+0x19a>
 800a598:	2b10      	cmp	r3, #16
 800a59a:	d050      	beq.n	800a63e <TIM_SlaveTimer_SetConfig+0x19a>
 800a59c:	e04c      	b.n	800a638 <TIM_SlaveTimer_SetConfig+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800a5ae:	f000 f9ff 	bl	800a9b0 <TIM_ETR_SetConfig>
      break;
 800a5b2:	e045      	b.n	800a640 <TIM_SlaveTimer_SetConfig+0x19c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	2b05      	cmp	r3, #5
 800a5ba:	d004      	beq.n	800a5c6 <TIM_SlaveTimer_SetConfig+0x122>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 800a5c0:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 800a5c4:	d101      	bne.n	800a5ca <TIM_SlaveTimer_SetConfig+0x126>
      {
        return HAL_ERROR;
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	e03b      	b.n	800a642 <TIM_SlaveTimer_SetConfig+0x19e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	6a1b      	ldr	r3, [r3, #32]
 800a5d0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	6a1a      	ldr	r2, [r3, #32]
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f022 0201 	bic.w	r2, r2, #1
 800a5e0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	699b      	ldr	r3, [r3, #24]
 800a5e8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a5f0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	691b      	ldr	r3, [r3, #16]
 800a5f6:	011b      	lsls	r3, r3, #4
 800a5f8:	68ba      	ldr	r2, [r7, #8]
 800a5fa:	4313      	orrs	r3, r2
 800a5fc:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	68ba      	ldr	r2, [r7, #8]
 800a604:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	68fa      	ldr	r2, [r7, #12]
 800a60c:	621a      	str	r2, [r3, #32]
      break;
 800a60e:	e017      	b.n	800a640 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a61c:	461a      	mov	r2, r3
 800a61e:	f000 f895 	bl	800a74c <TIM_TI1_ConfigInputStage>
      break;
 800a622:	e00d      	b.n	800a640 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a630:	461a      	mov	r2, r3
 800a632:	f000 f8f7 	bl	800a824 <TIM_TI2_ConfigInputStage>
      break;
 800a636:	e003      	b.n	800a640 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 800a638:	2301      	movs	r3, #1
 800a63a:	75fb      	strb	r3, [r7, #23]
      break;
 800a63c:	e000      	b.n	800a640 <TIM_SlaveTimer_SetConfig+0x19c>
      break;
 800a63e:	bf00      	nop
  }

  return status;
 800a640:	7dfb      	ldrb	r3, [r7, #23]
}
 800a642:	4618      	mov	r0, r3
 800a644:	3718      	adds	r7, #24
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}
 800a64a:	bf00      	nop
 800a64c:	00100070 	.word	0x00100070
 800a650:	00100060 	.word	0x00100060
 800a654:	00100050 	.word	0x00100050
 800a658:	00100040 	.word	0x00100040
 800a65c:	00100030 	.word	0x00100030
 800a660:	00100020 	.word	0x00100020

0800a664 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a664:	b480      	push	{r7}
 800a666:	b087      	sub	sp, #28
 800a668:	af00      	add	r7, sp, #0
 800a66a:	60f8      	str	r0, [r7, #12]
 800a66c:	60b9      	str	r1, [r7, #8]
 800a66e:	607a      	str	r2, [r7, #4]
 800a670:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	6a1b      	ldr	r3, [r3, #32]
 800a676:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	6a1b      	ldr	r3, [r3, #32]
 800a67c:	f023 0201 	bic.w	r2, r3, #1
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	699b      	ldr	r3, [r3, #24]
 800a688:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	4a28      	ldr	r2, [pc, #160]	@ (800a730 <TIM_TI1_SetConfig+0xcc>)
 800a68e:	4293      	cmp	r3, r2
 800a690:	d01b      	beq.n	800a6ca <TIM_TI1_SetConfig+0x66>
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a698:	d017      	beq.n	800a6ca <TIM_TI1_SetConfig+0x66>
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	4a25      	ldr	r2, [pc, #148]	@ (800a734 <TIM_TI1_SetConfig+0xd0>)
 800a69e:	4293      	cmp	r3, r2
 800a6a0:	d013      	beq.n	800a6ca <TIM_TI1_SetConfig+0x66>
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	4a24      	ldr	r2, [pc, #144]	@ (800a738 <TIM_TI1_SetConfig+0xd4>)
 800a6a6:	4293      	cmp	r3, r2
 800a6a8:	d00f      	beq.n	800a6ca <TIM_TI1_SetConfig+0x66>
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	4a23      	ldr	r2, [pc, #140]	@ (800a73c <TIM_TI1_SetConfig+0xd8>)
 800a6ae:	4293      	cmp	r3, r2
 800a6b0:	d00b      	beq.n	800a6ca <TIM_TI1_SetConfig+0x66>
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	4a22      	ldr	r2, [pc, #136]	@ (800a740 <TIM_TI1_SetConfig+0xdc>)
 800a6b6:	4293      	cmp	r3, r2
 800a6b8:	d007      	beq.n	800a6ca <TIM_TI1_SetConfig+0x66>
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	4a21      	ldr	r2, [pc, #132]	@ (800a744 <TIM_TI1_SetConfig+0xe0>)
 800a6be:	4293      	cmp	r3, r2
 800a6c0:	d003      	beq.n	800a6ca <TIM_TI1_SetConfig+0x66>
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	4a20      	ldr	r2, [pc, #128]	@ (800a748 <TIM_TI1_SetConfig+0xe4>)
 800a6c6:	4293      	cmp	r3, r2
 800a6c8:	d101      	bne.n	800a6ce <TIM_TI1_SetConfig+0x6a>
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	e000      	b.n	800a6d0 <TIM_TI1_SetConfig+0x6c>
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d008      	beq.n	800a6e6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a6d4:	697b      	ldr	r3, [r7, #20]
 800a6d6:	f023 0303 	bic.w	r3, r3, #3
 800a6da:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a6dc:	697a      	ldr	r2, [r7, #20]
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	4313      	orrs	r3, r2
 800a6e2:	617b      	str	r3, [r7, #20]
 800a6e4:	e003      	b.n	800a6ee <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a6e6:	697b      	ldr	r3, [r7, #20]
 800a6e8:	f043 0301 	orr.w	r3, r3, #1
 800a6ec:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a6ee:	697b      	ldr	r3, [r7, #20]
 800a6f0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a6f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	011b      	lsls	r3, r3, #4
 800a6fa:	b2db      	uxtb	r3, r3
 800a6fc:	697a      	ldr	r2, [r7, #20]
 800a6fe:	4313      	orrs	r3, r2
 800a700:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a702:	693b      	ldr	r3, [r7, #16]
 800a704:	f023 030a 	bic.w	r3, r3, #10
 800a708:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a70a:	68bb      	ldr	r3, [r7, #8]
 800a70c:	f003 030a 	and.w	r3, r3, #10
 800a710:	693a      	ldr	r2, [r7, #16]
 800a712:	4313      	orrs	r3, r2
 800a714:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	697a      	ldr	r2, [r7, #20]
 800a71a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	693a      	ldr	r2, [r7, #16]
 800a720:	621a      	str	r2, [r3, #32]
}
 800a722:	bf00      	nop
 800a724:	371c      	adds	r7, #28
 800a726:	46bd      	mov	sp, r7
 800a728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72c:	4770      	bx	lr
 800a72e:	bf00      	nop
 800a730:	40012c00 	.word	0x40012c00
 800a734:	40000400 	.word	0x40000400
 800a738:	40000800 	.word	0x40000800
 800a73c:	40000c00 	.word	0x40000c00
 800a740:	40013400 	.word	0x40013400
 800a744:	40014000 	.word	0x40014000
 800a748:	40015000 	.word	0x40015000

0800a74c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a74c:	b480      	push	{r7}
 800a74e:	b087      	sub	sp, #28
 800a750:	af00      	add	r7, sp, #0
 800a752:	60f8      	str	r0, [r7, #12]
 800a754:	60b9      	str	r1, [r7, #8]
 800a756:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	6a1b      	ldr	r3, [r3, #32]
 800a75c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	6a1b      	ldr	r3, [r3, #32]
 800a762:	f023 0201 	bic.w	r2, r3, #1
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	699b      	ldr	r3, [r3, #24]
 800a76e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a776:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	011b      	lsls	r3, r3, #4
 800a77c:	693a      	ldr	r2, [r7, #16]
 800a77e:	4313      	orrs	r3, r2
 800a780:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a782:	697b      	ldr	r3, [r7, #20]
 800a784:	f023 030a 	bic.w	r3, r3, #10
 800a788:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a78a:	697a      	ldr	r2, [r7, #20]
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	4313      	orrs	r3, r2
 800a790:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	693a      	ldr	r2, [r7, #16]
 800a796:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	697a      	ldr	r2, [r7, #20]
 800a79c:	621a      	str	r2, [r3, #32]
}
 800a79e:	bf00      	nop
 800a7a0:	371c      	adds	r7, #28
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a8:	4770      	bx	lr

0800a7aa <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a7aa:	b480      	push	{r7}
 800a7ac:	b087      	sub	sp, #28
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	60f8      	str	r0, [r7, #12]
 800a7b2:	60b9      	str	r1, [r7, #8]
 800a7b4:	607a      	str	r2, [r7, #4]
 800a7b6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	6a1b      	ldr	r3, [r3, #32]
 800a7bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	6a1b      	ldr	r3, [r3, #32]
 800a7c2:	f023 0210 	bic.w	r2, r3, #16
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	699b      	ldr	r3, [r3, #24]
 800a7ce:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a7d0:	693b      	ldr	r3, [r7, #16]
 800a7d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a7d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	021b      	lsls	r3, r3, #8
 800a7dc:	693a      	ldr	r2, [r7, #16]
 800a7de:	4313      	orrs	r3, r2
 800a7e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a7e2:	693b      	ldr	r3, [r7, #16]
 800a7e4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a7e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	031b      	lsls	r3, r3, #12
 800a7ee:	b29b      	uxth	r3, r3
 800a7f0:	693a      	ldr	r2, [r7, #16]
 800a7f2:	4313      	orrs	r3, r2
 800a7f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a7f6:	697b      	ldr	r3, [r7, #20]
 800a7f8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a7fc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a7fe:	68bb      	ldr	r3, [r7, #8]
 800a800:	011b      	lsls	r3, r3, #4
 800a802:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800a806:	697a      	ldr	r2, [r7, #20]
 800a808:	4313      	orrs	r3, r2
 800a80a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	693a      	ldr	r2, [r7, #16]
 800a810:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	697a      	ldr	r2, [r7, #20]
 800a816:	621a      	str	r2, [r3, #32]
}
 800a818:	bf00      	nop
 800a81a:	371c      	adds	r7, #28
 800a81c:	46bd      	mov	sp, r7
 800a81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a822:	4770      	bx	lr

0800a824 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a824:	b480      	push	{r7}
 800a826:	b087      	sub	sp, #28
 800a828:	af00      	add	r7, sp, #0
 800a82a:	60f8      	str	r0, [r7, #12]
 800a82c:	60b9      	str	r1, [r7, #8]
 800a82e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	6a1b      	ldr	r3, [r3, #32]
 800a834:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	6a1b      	ldr	r3, [r3, #32]
 800a83a:	f023 0210 	bic.w	r2, r3, #16
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	699b      	ldr	r3, [r3, #24]
 800a846:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a848:	693b      	ldr	r3, [r7, #16]
 800a84a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a84e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	031b      	lsls	r3, r3, #12
 800a854:	693a      	ldr	r2, [r7, #16]
 800a856:	4313      	orrs	r3, r2
 800a858:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a85a:	697b      	ldr	r3, [r7, #20]
 800a85c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a860:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a862:	68bb      	ldr	r3, [r7, #8]
 800a864:	011b      	lsls	r3, r3, #4
 800a866:	697a      	ldr	r2, [r7, #20]
 800a868:	4313      	orrs	r3, r2
 800a86a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	693a      	ldr	r2, [r7, #16]
 800a870:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	697a      	ldr	r2, [r7, #20]
 800a876:	621a      	str	r2, [r3, #32]
}
 800a878:	bf00      	nop
 800a87a:	371c      	adds	r7, #28
 800a87c:	46bd      	mov	sp, r7
 800a87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a882:	4770      	bx	lr

0800a884 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a884:	b480      	push	{r7}
 800a886:	b087      	sub	sp, #28
 800a888:	af00      	add	r7, sp, #0
 800a88a:	60f8      	str	r0, [r7, #12]
 800a88c:	60b9      	str	r1, [r7, #8]
 800a88e:	607a      	str	r2, [r7, #4]
 800a890:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	6a1b      	ldr	r3, [r3, #32]
 800a896:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	6a1b      	ldr	r3, [r3, #32]
 800a89c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	69db      	ldr	r3, [r3, #28]
 800a8a8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a8aa:	693b      	ldr	r3, [r7, #16]
 800a8ac:	f023 0303 	bic.w	r3, r3, #3
 800a8b0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800a8b2:	693a      	ldr	r2, [r7, #16]
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	4313      	orrs	r3, r2
 800a8b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a8ba:	693b      	ldr	r3, [r7, #16]
 800a8bc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a8c0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	011b      	lsls	r3, r3, #4
 800a8c6:	b2db      	uxtb	r3, r3
 800a8c8:	693a      	ldr	r2, [r7, #16]
 800a8ca:	4313      	orrs	r3, r2
 800a8cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a8ce:	697b      	ldr	r3, [r7, #20]
 800a8d0:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800a8d4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a8d6:	68bb      	ldr	r3, [r7, #8]
 800a8d8:	021b      	lsls	r3, r3, #8
 800a8da:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800a8de:	697a      	ldr	r2, [r7, #20]
 800a8e0:	4313      	orrs	r3, r2
 800a8e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	693a      	ldr	r2, [r7, #16]
 800a8e8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	697a      	ldr	r2, [r7, #20]
 800a8ee:	621a      	str	r2, [r3, #32]
}
 800a8f0:	bf00      	nop
 800a8f2:	371c      	adds	r7, #28
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fa:	4770      	bx	lr

0800a8fc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a8fc:	b480      	push	{r7}
 800a8fe:	b087      	sub	sp, #28
 800a900:	af00      	add	r7, sp, #0
 800a902:	60f8      	str	r0, [r7, #12]
 800a904:	60b9      	str	r1, [r7, #8]
 800a906:	607a      	str	r2, [r7, #4]
 800a908:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	6a1b      	ldr	r3, [r3, #32]
 800a90e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	6a1b      	ldr	r3, [r3, #32]
 800a914:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	69db      	ldr	r3, [r3, #28]
 800a920:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a922:	693b      	ldr	r3, [r7, #16]
 800a924:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a928:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	021b      	lsls	r3, r3, #8
 800a92e:	693a      	ldr	r2, [r7, #16]
 800a930:	4313      	orrs	r3, r2
 800a932:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a934:	693b      	ldr	r3, [r7, #16]
 800a936:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a93a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	031b      	lsls	r3, r3, #12
 800a940:	b29b      	uxth	r3, r3
 800a942:	693a      	ldr	r2, [r7, #16]
 800a944:	4313      	orrs	r3, r2
 800a946:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800a94e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a950:	68bb      	ldr	r3, [r7, #8]
 800a952:	031b      	lsls	r3, r3, #12
 800a954:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800a958:	697a      	ldr	r2, [r7, #20]
 800a95a:	4313      	orrs	r3, r2
 800a95c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	693a      	ldr	r2, [r7, #16]
 800a962:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	697a      	ldr	r2, [r7, #20]
 800a968:	621a      	str	r2, [r3, #32]
}
 800a96a:	bf00      	nop
 800a96c:	371c      	adds	r7, #28
 800a96e:	46bd      	mov	sp, r7
 800a970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a974:	4770      	bx	lr

0800a976 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a976:	b480      	push	{r7}
 800a978:	b085      	sub	sp, #20
 800a97a:	af00      	add	r7, sp, #0
 800a97c:	6078      	str	r0, [r7, #4]
 800a97e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	689b      	ldr	r3, [r3, #8]
 800a984:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a98c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a990:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a992:	683a      	ldr	r2, [r7, #0]
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	4313      	orrs	r3, r2
 800a998:	f043 0307 	orr.w	r3, r3, #7
 800a99c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	68fa      	ldr	r2, [r7, #12]
 800a9a2:	609a      	str	r2, [r3, #8]
}
 800a9a4:	bf00      	nop
 800a9a6:	3714      	adds	r7, #20
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ae:	4770      	bx	lr

0800a9b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	b087      	sub	sp, #28
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	60f8      	str	r0, [r7, #12]
 800a9b8:	60b9      	str	r1, [r7, #8]
 800a9ba:	607a      	str	r2, [r7, #4]
 800a9bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	689b      	ldr	r3, [r3, #8]
 800a9c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a9c4:	697b      	ldr	r3, [r7, #20]
 800a9c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a9ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	021a      	lsls	r2, r3, #8
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	431a      	orrs	r2, r3
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	4313      	orrs	r3, r2
 800a9d8:	697a      	ldr	r2, [r7, #20]
 800a9da:	4313      	orrs	r3, r2
 800a9dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	697a      	ldr	r2, [r7, #20]
 800a9e2:	609a      	str	r2, [r3, #8]
}
 800a9e4:	bf00      	nop
 800a9e6:	371c      	adds	r7, #28
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ee:	4770      	bx	lr

0800a9f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a9f0:	b480      	push	{r7}
 800a9f2:	b087      	sub	sp, #28
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	60f8      	str	r0, [r7, #12]
 800a9f8:	60b9      	str	r1, [r7, #8]
 800a9fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	f003 031f 	and.w	r3, r3, #31
 800aa02:	2201      	movs	r2, #1
 800aa04:	fa02 f303 	lsl.w	r3, r2, r3
 800aa08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	6a1a      	ldr	r2, [r3, #32]
 800aa0e:	697b      	ldr	r3, [r7, #20]
 800aa10:	43db      	mvns	r3, r3
 800aa12:	401a      	ands	r2, r3
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	6a1a      	ldr	r2, [r3, #32]
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	f003 031f 	and.w	r3, r3, #31
 800aa22:	6879      	ldr	r1, [r7, #4]
 800aa24:	fa01 f303 	lsl.w	r3, r1, r3
 800aa28:	431a      	orrs	r2, r3
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	621a      	str	r2, [r3, #32]
}
 800aa2e:	bf00      	nop
 800aa30:	371c      	adds	r7, #28
 800aa32:	46bd      	mov	sp, r7
 800aa34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa38:	4770      	bx	lr
	...

0800aa3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aa3c:	b480      	push	{r7}
 800aa3e:	b085      	sub	sp, #20
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
 800aa44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aa4c:	2b01      	cmp	r3, #1
 800aa4e:	d101      	bne.n	800aa54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aa50:	2302      	movs	r3, #2
 800aa52:	e074      	b.n	800ab3e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2201      	movs	r2, #1
 800aa58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2202      	movs	r2, #2
 800aa60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	685b      	ldr	r3, [r3, #4]
 800aa6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	689b      	ldr	r3, [r3, #8]
 800aa72:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	4a34      	ldr	r2, [pc, #208]	@ (800ab4c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800aa7a:	4293      	cmp	r3, r2
 800aa7c:	d009      	beq.n	800aa92 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	4a33      	ldr	r2, [pc, #204]	@ (800ab50 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800aa84:	4293      	cmp	r3, r2
 800aa86:	d004      	beq.n	800aa92 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	4a31      	ldr	r2, [pc, #196]	@ (800ab54 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800aa8e:	4293      	cmp	r3, r2
 800aa90:	d108      	bne.n	800aaa4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800aa98:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	685b      	ldr	r3, [r3, #4]
 800aa9e:	68fa      	ldr	r2, [r7, #12]
 800aaa0:	4313      	orrs	r3, r2
 800aaa2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800aaaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aaae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	68fa      	ldr	r2, [r7, #12]
 800aab6:	4313      	orrs	r3, r2
 800aab8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	68fa      	ldr	r2, [r7, #12]
 800aac0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	4a21      	ldr	r2, [pc, #132]	@ (800ab4c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800aac8:	4293      	cmp	r3, r2
 800aaca:	d022      	beq.n	800ab12 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aad4:	d01d      	beq.n	800ab12 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	4a1f      	ldr	r2, [pc, #124]	@ (800ab58 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800aadc:	4293      	cmp	r3, r2
 800aade:	d018      	beq.n	800ab12 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	4a1d      	ldr	r2, [pc, #116]	@ (800ab5c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800aae6:	4293      	cmp	r3, r2
 800aae8:	d013      	beq.n	800ab12 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	4a1c      	ldr	r2, [pc, #112]	@ (800ab60 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800aaf0:	4293      	cmp	r3, r2
 800aaf2:	d00e      	beq.n	800ab12 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	4a15      	ldr	r2, [pc, #84]	@ (800ab50 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800aafa:	4293      	cmp	r3, r2
 800aafc:	d009      	beq.n	800ab12 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	4a18      	ldr	r2, [pc, #96]	@ (800ab64 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800ab04:	4293      	cmp	r3, r2
 800ab06:	d004      	beq.n	800ab12 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	4a11      	ldr	r2, [pc, #68]	@ (800ab54 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	d10c      	bne.n	800ab2c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ab12:	68bb      	ldr	r3, [r7, #8]
 800ab14:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ab18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	689b      	ldr	r3, [r3, #8]
 800ab1e:	68ba      	ldr	r2, [r7, #8]
 800ab20:	4313      	orrs	r3, r2
 800ab22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	68ba      	ldr	r2, [r7, #8]
 800ab2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2201      	movs	r2, #1
 800ab30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2200      	movs	r2, #0
 800ab38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ab3c:	2300      	movs	r3, #0
}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	3714      	adds	r7, #20
 800ab42:	46bd      	mov	sp, r7
 800ab44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab48:	4770      	bx	lr
 800ab4a:	bf00      	nop
 800ab4c:	40012c00 	.word	0x40012c00
 800ab50:	40013400 	.word	0x40013400
 800ab54:	40015000 	.word	0x40015000
 800ab58:	40000400 	.word	0x40000400
 800ab5c:	40000800 	.word	0x40000800
 800ab60:	40000c00 	.word	0x40000c00
 800ab64:	40014000 	.word	0x40014000

0800ab68 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ab68:	b480      	push	{r7}
 800ab6a:	b085      	sub	sp, #20
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
 800ab70:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ab72:	2300      	movs	r3, #0
 800ab74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ab7c:	2b01      	cmp	r3, #1
 800ab7e:	d101      	bne.n	800ab84 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ab80:	2302      	movs	r3, #2
 800ab82:	e078      	b.n	800ac76 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2201      	movs	r2, #1
 800ab88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	68db      	ldr	r3, [r3, #12]
 800ab96:	4313      	orrs	r3, r2
 800ab98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	689b      	ldr	r3, [r3, #8]
 800aba4:	4313      	orrs	r3, r2
 800aba6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	685b      	ldr	r3, [r3, #4]
 800abb2:	4313      	orrs	r3, r2
 800abb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	4313      	orrs	r3, r2
 800abc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	691b      	ldr	r3, [r3, #16]
 800abce:	4313      	orrs	r3, r2
 800abd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	695b      	ldr	r3, [r3, #20]
 800abdc:	4313      	orrs	r3, r2
 800abde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abea:	4313      	orrs	r3, r2
 800abec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	699b      	ldr	r3, [r3, #24]
 800abf8:	041b      	lsls	r3, r3, #16
 800abfa:	4313      	orrs	r3, r2
 800abfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	69db      	ldr	r3, [r3, #28]
 800ac08:	4313      	orrs	r3, r2
 800ac0a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	4a1c      	ldr	r2, [pc, #112]	@ (800ac84 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800ac12:	4293      	cmp	r3, r2
 800ac14:	d009      	beq.n	800ac2a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	4a1b      	ldr	r2, [pc, #108]	@ (800ac88 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800ac1c:	4293      	cmp	r3, r2
 800ac1e:	d004      	beq.n	800ac2a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	4a19      	ldr	r2, [pc, #100]	@ (800ac8c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800ac26:	4293      	cmp	r3, r2
 800ac28:	d11c      	bne.n	800ac64 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac34:	051b      	lsls	r3, r3, #20
 800ac36:	4313      	orrs	r3, r2
 800ac38:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	6a1b      	ldr	r3, [r3, #32]
 800ac44:	4313      	orrs	r3, r2
 800ac46:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac52:	4313      	orrs	r3, r2
 800ac54:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac60:	4313      	orrs	r3, r2
 800ac62:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	68fa      	ldr	r2, [r7, #12]
 800ac6a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2200      	movs	r2, #0
 800ac70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ac74:	2300      	movs	r3, #0
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	3714      	adds	r7, #20
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac80:	4770      	bx	lr
 800ac82:	bf00      	nop
 800ac84:	40012c00 	.word	0x40012c00
 800ac88:	40013400 	.word	0x40013400
 800ac8c:	40015000 	.word	0x40015000

0800ac90 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ac90:	b480      	push	{r7}
 800ac92:	b083      	sub	sp, #12
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ac98:	bf00      	nop
 800ac9a:	370c      	adds	r7, #12
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca2:	4770      	bx	lr

0800aca4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aca4:	b480      	push	{r7}
 800aca6:	b083      	sub	sp, #12
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800acac:	bf00      	nop
 800acae:	370c      	adds	r7, #12
 800acb0:	46bd      	mov	sp, r7
 800acb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb6:	4770      	bx	lr

0800acb8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800acb8:	b480      	push	{r7}
 800acba:	b083      	sub	sp, #12
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800acc0:	bf00      	nop
 800acc2:	370c      	adds	r7, #12
 800acc4:	46bd      	mov	sp, r7
 800acc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acca:	4770      	bx	lr

0800accc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800accc:	b480      	push	{r7}
 800acce:	b083      	sub	sp, #12
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800acd4:	bf00      	nop
 800acd6:	370c      	adds	r7, #12
 800acd8:	46bd      	mov	sp, r7
 800acda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acde:	4770      	bx	lr

0800ace0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800ace0:	b480      	push	{r7}
 800ace2:	b083      	sub	sp, #12
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800ace8:	bf00      	nop
 800acea:	370c      	adds	r7, #12
 800acec:	46bd      	mov	sp, r7
 800acee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf2:	4770      	bx	lr

0800acf4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800acf4:	b480      	push	{r7}
 800acf6:	b083      	sub	sp, #12
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800acfc:	bf00      	nop
 800acfe:	370c      	adds	r7, #12
 800ad00:	46bd      	mov	sp, r7
 800ad02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad06:	4770      	bx	lr

0800ad08 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800ad08:	b480      	push	{r7}
 800ad0a:	b083      	sub	sp, #12
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800ad10:	bf00      	nop
 800ad12:	370c      	adds	r7, #12
 800ad14:	46bd      	mov	sp, r7
 800ad16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1a:	4770      	bx	lr

0800ad1c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800ad1c:	b480      	push	{r7}
 800ad1e:	b085      	sub	sp, #20
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2200      	movs	r2, #0
 800ad28:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800ad2c:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800ad30:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	b29a      	uxth	r2, r3
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800ad3c:	2300      	movs	r3, #0
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	3714      	adds	r7, #20
 800ad42:	46bd      	mov	sp, r7
 800ad44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad48:	4770      	bx	lr

0800ad4a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800ad4a:	b480      	push	{r7}
 800ad4c:	b085      	sub	sp, #20
 800ad4e:	af00      	add	r7, sp, #0
 800ad50:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800ad52:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800ad56:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800ad5e:	b29a      	uxth	r2, r3
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	b29b      	uxth	r3, r3
 800ad64:	43db      	mvns	r3, r3
 800ad66:	b29b      	uxth	r3, r3
 800ad68:	4013      	ands	r3, r2
 800ad6a:	b29a      	uxth	r2, r3
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800ad72:	2300      	movs	r3, #0
}
 800ad74:	4618      	mov	r0, r3
 800ad76:	3714      	adds	r7, #20
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7e:	4770      	bx	lr

0800ad80 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800ad80:	b480      	push	{r7}
 800ad82:	b085      	sub	sp, #20
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	60f8      	str	r0, [r7, #12]
 800ad88:	1d3b      	adds	r3, r7, #4
 800ad8a:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	2201      	movs	r2, #1
 800ad92:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	2200      	movs	r2, #0
 800ad9a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	2200      	movs	r2, #0
 800ada2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	2200      	movs	r2, #0
 800adaa:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800adae:	2300      	movs	r3, #0
}
 800adb0:	4618      	mov	r0, r3
 800adb2:	3714      	adds	r7, #20
 800adb4:	46bd      	mov	sp, r7
 800adb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adba:	4770      	bx	lr

0800adbc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800adbc:	b480      	push	{r7}
 800adbe:	b09d      	sub	sp, #116	@ 0x74
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
 800adc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800adc6:	2300      	movs	r3, #0
 800adc8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800adcc:	687a      	ldr	r2, [r7, #4]
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	781b      	ldrb	r3, [r3, #0]
 800add2:	009b      	lsls	r3, r3, #2
 800add4:	4413      	add	r3, r2
 800add6:	881b      	ldrh	r3, [r3, #0]
 800add8:	b29b      	uxth	r3, r3
 800adda:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800adde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ade2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	78db      	ldrb	r3, [r3, #3]
 800adea:	2b03      	cmp	r3, #3
 800adec:	d81f      	bhi.n	800ae2e <USB_ActivateEndpoint+0x72>
 800adee:	a201      	add	r2, pc, #4	@ (adr r2, 800adf4 <USB_ActivateEndpoint+0x38>)
 800adf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adf4:	0800ae05 	.word	0x0800ae05
 800adf8:	0800ae21 	.word	0x0800ae21
 800adfc:	0800ae37 	.word	0x0800ae37
 800ae00:	0800ae13 	.word	0x0800ae13
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800ae04:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800ae08:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800ae0c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800ae10:	e012      	b.n	800ae38 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800ae12:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800ae16:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800ae1a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800ae1e:	e00b      	b.n	800ae38 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800ae20:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800ae24:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800ae28:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800ae2c:	e004      	b.n	800ae38 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800ae2e:	2301      	movs	r3, #1
 800ae30:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800ae34:	e000      	b.n	800ae38 <USB_ActivateEndpoint+0x7c>
      break;
 800ae36:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800ae38:	687a      	ldr	r2, [r7, #4]
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	781b      	ldrb	r3, [r3, #0]
 800ae3e:	009b      	lsls	r3, r3, #2
 800ae40:	441a      	add	r2, r3
 800ae42:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800ae46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ae4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ae4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ae52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae56:	b29b      	uxth	r3, r3
 800ae58:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800ae5a:	687a      	ldr	r2, [r7, #4]
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	781b      	ldrb	r3, [r3, #0]
 800ae60:	009b      	lsls	r3, r3, #2
 800ae62:	4413      	add	r3, r2
 800ae64:	881b      	ldrh	r3, [r3, #0]
 800ae66:	b29b      	uxth	r3, r3
 800ae68:	b21b      	sxth	r3, r3
 800ae6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ae6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae72:	b21a      	sxth	r2, r3
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	781b      	ldrb	r3, [r3, #0]
 800ae78:	b21b      	sxth	r3, r3
 800ae7a:	4313      	orrs	r3, r2
 800ae7c:	b21b      	sxth	r3, r3
 800ae7e:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800ae82:	687a      	ldr	r2, [r7, #4]
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	781b      	ldrb	r3, [r3, #0]
 800ae88:	009b      	lsls	r3, r3, #2
 800ae8a:	441a      	add	r2, r3
 800ae8c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800ae90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ae94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ae98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ae9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aea0:	b29b      	uxth	r3, r3
 800aea2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	7b1b      	ldrb	r3, [r3, #12]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	f040 8178 	bne.w	800b19e <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	785b      	ldrb	r3, [r3, #1]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	f000 8084 	beq.w	800afc0 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	61bb      	str	r3, [r7, #24]
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aec2:	b29b      	uxth	r3, r3
 800aec4:	461a      	mov	r2, r3
 800aec6:	69bb      	ldr	r3, [r7, #24]
 800aec8:	4413      	add	r3, r2
 800aeca:	61bb      	str	r3, [r7, #24]
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	781b      	ldrb	r3, [r3, #0]
 800aed0:	00da      	lsls	r2, r3, #3
 800aed2:	69bb      	ldr	r3, [r7, #24]
 800aed4:	4413      	add	r3, r2
 800aed6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800aeda:	617b      	str	r3, [r7, #20]
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	88db      	ldrh	r3, [r3, #6]
 800aee0:	085b      	lsrs	r3, r3, #1
 800aee2:	b29b      	uxth	r3, r3
 800aee4:	005b      	lsls	r3, r3, #1
 800aee6:	b29a      	uxth	r2, r3
 800aee8:	697b      	ldr	r3, [r7, #20]
 800aeea:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800aeec:	687a      	ldr	r2, [r7, #4]
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	781b      	ldrb	r3, [r3, #0]
 800aef2:	009b      	lsls	r3, r3, #2
 800aef4:	4413      	add	r3, r2
 800aef6:	881b      	ldrh	r3, [r3, #0]
 800aef8:	827b      	strh	r3, [r7, #18]
 800aefa:	8a7b      	ldrh	r3, [r7, #18]
 800aefc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af00:	2b00      	cmp	r3, #0
 800af02:	d01b      	beq.n	800af3c <USB_ActivateEndpoint+0x180>
 800af04:	687a      	ldr	r2, [r7, #4]
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	781b      	ldrb	r3, [r3, #0]
 800af0a:	009b      	lsls	r3, r3, #2
 800af0c:	4413      	add	r3, r2
 800af0e:	881b      	ldrh	r3, [r3, #0]
 800af10:	b29b      	uxth	r3, r3
 800af12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800af16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af1a:	823b      	strh	r3, [r7, #16]
 800af1c:	687a      	ldr	r2, [r7, #4]
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	781b      	ldrb	r3, [r3, #0]
 800af22:	009b      	lsls	r3, r3, #2
 800af24:	441a      	add	r2, r3
 800af26:	8a3b      	ldrh	r3, [r7, #16]
 800af28:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800af2c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800af30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800af34:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800af38:	b29b      	uxth	r3, r3
 800af3a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	78db      	ldrb	r3, [r3, #3]
 800af40:	2b01      	cmp	r3, #1
 800af42:	d020      	beq.n	800af86 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800af44:	687a      	ldr	r2, [r7, #4]
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	781b      	ldrb	r3, [r3, #0]
 800af4a:	009b      	lsls	r3, r3, #2
 800af4c:	4413      	add	r3, r2
 800af4e:	881b      	ldrh	r3, [r3, #0]
 800af50:	b29b      	uxth	r3, r3
 800af52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800af56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800af5a:	81bb      	strh	r3, [r7, #12]
 800af5c:	89bb      	ldrh	r3, [r7, #12]
 800af5e:	f083 0320 	eor.w	r3, r3, #32
 800af62:	81bb      	strh	r3, [r7, #12]
 800af64:	687a      	ldr	r2, [r7, #4]
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	781b      	ldrb	r3, [r3, #0]
 800af6a:	009b      	lsls	r3, r3, #2
 800af6c:	441a      	add	r2, r3
 800af6e:	89bb      	ldrh	r3, [r7, #12]
 800af70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800af74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800af78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800af7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af80:	b29b      	uxth	r3, r3
 800af82:	8013      	strh	r3, [r2, #0]
 800af84:	e2d5      	b.n	800b532 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800af86:	687a      	ldr	r2, [r7, #4]
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	781b      	ldrb	r3, [r3, #0]
 800af8c:	009b      	lsls	r3, r3, #2
 800af8e:	4413      	add	r3, r2
 800af90:	881b      	ldrh	r3, [r3, #0]
 800af92:	b29b      	uxth	r3, r3
 800af94:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800af98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800af9c:	81fb      	strh	r3, [r7, #14]
 800af9e:	687a      	ldr	r2, [r7, #4]
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	781b      	ldrb	r3, [r3, #0]
 800afa4:	009b      	lsls	r3, r3, #2
 800afa6:	441a      	add	r2, r3
 800afa8:	89fb      	ldrh	r3, [r7, #14]
 800afaa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800afae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800afb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800afb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800afba:	b29b      	uxth	r3, r3
 800afbc:	8013      	strh	r3, [r2, #0]
 800afbe:	e2b8      	b.n	800b532 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	633b      	str	r3, [r7, #48]	@ 0x30
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800afca:	b29b      	uxth	r3, r3
 800afcc:	461a      	mov	r2, r3
 800afce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afd0:	4413      	add	r3, r2
 800afd2:	633b      	str	r3, [r7, #48]	@ 0x30
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	781b      	ldrb	r3, [r3, #0]
 800afd8:	00da      	lsls	r2, r3, #3
 800afda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afdc:	4413      	add	r3, r2
 800afde:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800afe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	88db      	ldrh	r3, [r3, #6]
 800afe8:	085b      	lsrs	r3, r3, #1
 800afea:	b29b      	uxth	r3, r3
 800afec:	005b      	lsls	r3, r3, #1
 800afee:	b29a      	uxth	r2, r3
 800aff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aff2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800affe:	b29b      	uxth	r3, r3
 800b000:	461a      	mov	r2, r3
 800b002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b004:	4413      	add	r3, r2
 800b006:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	781b      	ldrb	r3, [r3, #0]
 800b00c:	00da      	lsls	r2, r3, #3
 800b00e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b010:	4413      	add	r3, r2
 800b012:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b016:	627b      	str	r3, [r7, #36]	@ 0x24
 800b018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b01a:	881b      	ldrh	r3, [r3, #0]
 800b01c:	b29b      	uxth	r3, r3
 800b01e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b022:	b29a      	uxth	r2, r3
 800b024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b026:	801a      	strh	r2, [r3, #0]
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	691b      	ldr	r3, [r3, #16]
 800b02c:	2b3e      	cmp	r3, #62	@ 0x3e
 800b02e:	d91d      	bls.n	800b06c <USB_ActivateEndpoint+0x2b0>
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	691b      	ldr	r3, [r3, #16]
 800b034:	095b      	lsrs	r3, r3, #5
 800b036:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	691b      	ldr	r3, [r3, #16]
 800b03c:	f003 031f 	and.w	r3, r3, #31
 800b040:	2b00      	cmp	r3, #0
 800b042:	d102      	bne.n	800b04a <USB_ActivateEndpoint+0x28e>
 800b044:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b046:	3b01      	subs	r3, #1
 800b048:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b04a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b04c:	881b      	ldrh	r3, [r3, #0]
 800b04e:	b29a      	uxth	r2, r3
 800b050:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b052:	b29b      	uxth	r3, r3
 800b054:	029b      	lsls	r3, r3, #10
 800b056:	b29b      	uxth	r3, r3
 800b058:	4313      	orrs	r3, r2
 800b05a:	b29b      	uxth	r3, r3
 800b05c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b060:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b064:	b29a      	uxth	r2, r3
 800b066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b068:	801a      	strh	r2, [r3, #0]
 800b06a:	e026      	b.n	800b0ba <USB_ActivateEndpoint+0x2fe>
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	691b      	ldr	r3, [r3, #16]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d10a      	bne.n	800b08a <USB_ActivateEndpoint+0x2ce>
 800b074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b076:	881b      	ldrh	r3, [r3, #0]
 800b078:	b29b      	uxth	r3, r3
 800b07a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b07e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b082:	b29a      	uxth	r2, r3
 800b084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b086:	801a      	strh	r2, [r3, #0]
 800b088:	e017      	b.n	800b0ba <USB_ActivateEndpoint+0x2fe>
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	691b      	ldr	r3, [r3, #16]
 800b08e:	085b      	lsrs	r3, r3, #1
 800b090:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	691b      	ldr	r3, [r3, #16]
 800b096:	f003 0301 	and.w	r3, r3, #1
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d002      	beq.n	800b0a4 <USB_ActivateEndpoint+0x2e8>
 800b09e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b0a0:	3301      	adds	r3, #1
 800b0a2:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b0a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0a6:	881b      	ldrh	r3, [r3, #0]
 800b0a8:	b29a      	uxth	r2, r3
 800b0aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b0ac:	b29b      	uxth	r3, r3
 800b0ae:	029b      	lsls	r3, r3, #10
 800b0b0:	b29b      	uxth	r3, r3
 800b0b2:	4313      	orrs	r3, r2
 800b0b4:	b29a      	uxth	r2, r3
 800b0b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0b8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b0ba:	687a      	ldr	r2, [r7, #4]
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	781b      	ldrb	r3, [r3, #0]
 800b0c0:	009b      	lsls	r3, r3, #2
 800b0c2:	4413      	add	r3, r2
 800b0c4:	881b      	ldrh	r3, [r3, #0]
 800b0c6:	847b      	strh	r3, [r7, #34]	@ 0x22
 800b0c8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b0ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d01b      	beq.n	800b10a <USB_ActivateEndpoint+0x34e>
 800b0d2:	687a      	ldr	r2, [r7, #4]
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	781b      	ldrb	r3, [r3, #0]
 800b0d8:	009b      	lsls	r3, r3, #2
 800b0da:	4413      	add	r3, r2
 800b0dc:	881b      	ldrh	r3, [r3, #0]
 800b0de:	b29b      	uxth	r3, r3
 800b0e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b0e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b0e8:	843b      	strh	r3, [r7, #32]
 800b0ea:	687a      	ldr	r2, [r7, #4]
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	781b      	ldrb	r3, [r3, #0]
 800b0f0:	009b      	lsls	r3, r3, #2
 800b0f2:	441a      	add	r2, r3
 800b0f4:	8c3b      	ldrh	r3, [r7, #32]
 800b0f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b0fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b0fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b102:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b106:	b29b      	uxth	r3, r3
 800b108:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	781b      	ldrb	r3, [r3, #0]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d124      	bne.n	800b15c <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b112:	687a      	ldr	r2, [r7, #4]
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	781b      	ldrb	r3, [r3, #0]
 800b118:	009b      	lsls	r3, r3, #2
 800b11a:	4413      	add	r3, r2
 800b11c:	881b      	ldrh	r3, [r3, #0]
 800b11e:	b29b      	uxth	r3, r3
 800b120:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b124:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b128:	83bb      	strh	r3, [r7, #28]
 800b12a:	8bbb      	ldrh	r3, [r7, #28]
 800b12c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800b130:	83bb      	strh	r3, [r7, #28]
 800b132:	8bbb      	ldrh	r3, [r7, #28]
 800b134:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b138:	83bb      	strh	r3, [r7, #28]
 800b13a:	687a      	ldr	r2, [r7, #4]
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	781b      	ldrb	r3, [r3, #0]
 800b140:	009b      	lsls	r3, r3, #2
 800b142:	441a      	add	r2, r3
 800b144:	8bbb      	ldrh	r3, [r7, #28]
 800b146:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b14a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b14e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b152:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b156:	b29b      	uxth	r3, r3
 800b158:	8013      	strh	r3, [r2, #0]
 800b15a:	e1ea      	b.n	800b532 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800b15c:	687a      	ldr	r2, [r7, #4]
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	781b      	ldrb	r3, [r3, #0]
 800b162:	009b      	lsls	r3, r3, #2
 800b164:	4413      	add	r3, r2
 800b166:	881b      	ldrh	r3, [r3, #0]
 800b168:	b29b      	uxth	r3, r3
 800b16a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b16e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b172:	83fb      	strh	r3, [r7, #30]
 800b174:	8bfb      	ldrh	r3, [r7, #30]
 800b176:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b17a:	83fb      	strh	r3, [r7, #30]
 800b17c:	687a      	ldr	r2, [r7, #4]
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	781b      	ldrb	r3, [r3, #0]
 800b182:	009b      	lsls	r3, r3, #2
 800b184:	441a      	add	r2, r3
 800b186:	8bfb      	ldrh	r3, [r7, #30]
 800b188:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b18c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b190:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b194:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b198:	b29b      	uxth	r3, r3
 800b19a:	8013      	strh	r3, [r2, #0]
 800b19c:	e1c9      	b.n	800b532 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	78db      	ldrb	r3, [r3, #3]
 800b1a2:	2b02      	cmp	r3, #2
 800b1a4:	d11e      	bne.n	800b1e4 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800b1a6:	687a      	ldr	r2, [r7, #4]
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	781b      	ldrb	r3, [r3, #0]
 800b1ac:	009b      	lsls	r3, r3, #2
 800b1ae:	4413      	add	r3, r2
 800b1b0:	881b      	ldrh	r3, [r3, #0]
 800b1b2:	b29b      	uxth	r3, r3
 800b1b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b1b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b1bc:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800b1c0:	687a      	ldr	r2, [r7, #4]
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	781b      	ldrb	r3, [r3, #0]
 800b1c6:	009b      	lsls	r3, r3, #2
 800b1c8:	441a      	add	r2, r3
 800b1ca:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800b1ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b1d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b1d6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800b1da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b1de:	b29b      	uxth	r3, r3
 800b1e0:	8013      	strh	r3, [r2, #0]
 800b1e2:	e01d      	b.n	800b220 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800b1e4:	687a      	ldr	r2, [r7, #4]
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	781b      	ldrb	r3, [r3, #0]
 800b1ea:	009b      	lsls	r3, r3, #2
 800b1ec:	4413      	add	r3, r2
 800b1ee:	881b      	ldrh	r3, [r3, #0]
 800b1f0:	b29b      	uxth	r3, r3
 800b1f2:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800b1f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b1fa:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800b1fe:	687a      	ldr	r2, [r7, #4]
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	781b      	ldrb	r3, [r3, #0]
 800b204:	009b      	lsls	r3, r3, #2
 800b206:	441a      	add	r2, r3
 800b208:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800b20c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b210:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b214:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b218:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b21c:	b29b      	uxth	r3, r3
 800b21e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b22a:	b29b      	uxth	r3, r3
 800b22c:	461a      	mov	r2, r3
 800b22e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b230:	4413      	add	r3, r2
 800b232:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	781b      	ldrb	r3, [r3, #0]
 800b238:	00da      	lsls	r2, r3, #3
 800b23a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b23c:	4413      	add	r3, r2
 800b23e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b242:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	891b      	ldrh	r3, [r3, #8]
 800b248:	085b      	lsrs	r3, r3, #1
 800b24a:	b29b      	uxth	r3, r3
 800b24c:	005b      	lsls	r3, r3, #1
 800b24e:	b29a      	uxth	r2, r3
 800b250:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b252:	801a      	strh	r2, [r3, #0]
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	657b      	str	r3, [r7, #84]	@ 0x54
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b25e:	b29b      	uxth	r3, r3
 800b260:	461a      	mov	r2, r3
 800b262:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b264:	4413      	add	r3, r2
 800b266:	657b      	str	r3, [r7, #84]	@ 0x54
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	781b      	ldrb	r3, [r3, #0]
 800b26c:	00da      	lsls	r2, r3, #3
 800b26e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b270:	4413      	add	r3, r2
 800b272:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800b276:	653b      	str	r3, [r7, #80]	@ 0x50
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	895b      	ldrh	r3, [r3, #10]
 800b27c:	085b      	lsrs	r3, r3, #1
 800b27e:	b29b      	uxth	r3, r3
 800b280:	005b      	lsls	r3, r3, #1
 800b282:	b29a      	uxth	r2, r3
 800b284:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b286:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800b288:	683b      	ldr	r3, [r7, #0]
 800b28a:	785b      	ldrb	r3, [r3, #1]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	f040 8093 	bne.w	800b3b8 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b292:	687a      	ldr	r2, [r7, #4]
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	781b      	ldrb	r3, [r3, #0]
 800b298:	009b      	lsls	r3, r3, #2
 800b29a:	4413      	add	r3, r2
 800b29c:	881b      	ldrh	r3, [r3, #0]
 800b29e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800b2a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800b2a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d01b      	beq.n	800b2e6 <USB_ActivateEndpoint+0x52a>
 800b2ae:	687a      	ldr	r2, [r7, #4]
 800b2b0:	683b      	ldr	r3, [r7, #0]
 800b2b2:	781b      	ldrb	r3, [r3, #0]
 800b2b4:	009b      	lsls	r3, r3, #2
 800b2b6:	4413      	add	r3, r2
 800b2b8:	881b      	ldrh	r3, [r3, #0]
 800b2ba:	b29b      	uxth	r3, r3
 800b2bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b2c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b2c4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800b2c6:	687a      	ldr	r2, [r7, #4]
 800b2c8:	683b      	ldr	r3, [r7, #0]
 800b2ca:	781b      	ldrb	r3, [r3, #0]
 800b2cc:	009b      	lsls	r3, r3, #2
 800b2ce:	441a      	add	r2, r3
 800b2d0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800b2d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b2d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b2da:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b2de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b2e2:	b29b      	uxth	r3, r3
 800b2e4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b2e6:	687a      	ldr	r2, [r7, #4]
 800b2e8:	683b      	ldr	r3, [r7, #0]
 800b2ea:	781b      	ldrb	r3, [r3, #0]
 800b2ec:	009b      	lsls	r3, r3, #2
 800b2ee:	4413      	add	r3, r2
 800b2f0:	881b      	ldrh	r3, [r3, #0]
 800b2f2:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800b2f4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800b2f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d01b      	beq.n	800b336 <USB_ActivateEndpoint+0x57a>
 800b2fe:	687a      	ldr	r2, [r7, #4]
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	781b      	ldrb	r3, [r3, #0]
 800b304:	009b      	lsls	r3, r3, #2
 800b306:	4413      	add	r3, r2
 800b308:	881b      	ldrh	r3, [r3, #0]
 800b30a:	b29b      	uxth	r3, r3
 800b30c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b310:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b314:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800b316:	687a      	ldr	r2, [r7, #4]
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	781b      	ldrb	r3, [r3, #0]
 800b31c:	009b      	lsls	r3, r3, #2
 800b31e:	441a      	add	r2, r3
 800b320:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800b322:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b326:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b32a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b32e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b332:	b29b      	uxth	r3, r3
 800b334:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b336:	687a      	ldr	r2, [r7, #4]
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	781b      	ldrb	r3, [r3, #0]
 800b33c:	009b      	lsls	r3, r3, #2
 800b33e:	4413      	add	r3, r2
 800b340:	881b      	ldrh	r3, [r3, #0]
 800b342:	b29b      	uxth	r3, r3
 800b344:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b348:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b34c:	873b      	strh	r3, [r7, #56]	@ 0x38
 800b34e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800b350:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800b354:	873b      	strh	r3, [r7, #56]	@ 0x38
 800b356:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800b358:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b35c:	873b      	strh	r3, [r7, #56]	@ 0x38
 800b35e:	687a      	ldr	r2, [r7, #4]
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	781b      	ldrb	r3, [r3, #0]
 800b364:	009b      	lsls	r3, r3, #2
 800b366:	441a      	add	r2, r3
 800b368:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800b36a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b36e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b372:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b376:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b37a:	b29b      	uxth	r3, r3
 800b37c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b37e:	687a      	ldr	r2, [r7, #4]
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	781b      	ldrb	r3, [r3, #0]
 800b384:	009b      	lsls	r3, r3, #2
 800b386:	4413      	add	r3, r2
 800b388:	881b      	ldrh	r3, [r3, #0]
 800b38a:	b29b      	uxth	r3, r3
 800b38c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b390:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b394:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800b396:	687a      	ldr	r2, [r7, #4]
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	781b      	ldrb	r3, [r3, #0]
 800b39c:	009b      	lsls	r3, r3, #2
 800b39e:	441a      	add	r2, r3
 800b3a0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b3a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b3a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b3aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b3ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b3b2:	b29b      	uxth	r3, r3
 800b3b4:	8013      	strh	r3, [r2, #0]
 800b3b6:	e0bc      	b.n	800b532 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b3b8:	687a      	ldr	r2, [r7, #4]
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	781b      	ldrb	r3, [r3, #0]
 800b3be:	009b      	lsls	r3, r3, #2
 800b3c0:	4413      	add	r3, r2
 800b3c2:	881b      	ldrh	r3, [r3, #0]
 800b3c4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800b3c8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800b3cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d01d      	beq.n	800b410 <USB_ActivateEndpoint+0x654>
 800b3d4:	687a      	ldr	r2, [r7, #4]
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	781b      	ldrb	r3, [r3, #0]
 800b3da:	009b      	lsls	r3, r3, #2
 800b3dc:	4413      	add	r3, r2
 800b3de:	881b      	ldrh	r3, [r3, #0]
 800b3e0:	b29b      	uxth	r3, r3
 800b3e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b3e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b3ea:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800b3ee:	687a      	ldr	r2, [r7, #4]
 800b3f0:	683b      	ldr	r3, [r7, #0]
 800b3f2:	781b      	ldrb	r3, [r3, #0]
 800b3f4:	009b      	lsls	r3, r3, #2
 800b3f6:	441a      	add	r2, r3
 800b3f8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800b3fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b400:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b404:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b408:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b40c:	b29b      	uxth	r3, r3
 800b40e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b410:	687a      	ldr	r2, [r7, #4]
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	781b      	ldrb	r3, [r3, #0]
 800b416:	009b      	lsls	r3, r3, #2
 800b418:	4413      	add	r3, r2
 800b41a:	881b      	ldrh	r3, [r3, #0]
 800b41c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800b420:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800b424:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d01d      	beq.n	800b468 <USB_ActivateEndpoint+0x6ac>
 800b42c:	687a      	ldr	r2, [r7, #4]
 800b42e:	683b      	ldr	r3, [r7, #0]
 800b430:	781b      	ldrb	r3, [r3, #0]
 800b432:	009b      	lsls	r3, r3, #2
 800b434:	4413      	add	r3, r2
 800b436:	881b      	ldrh	r3, [r3, #0]
 800b438:	b29b      	uxth	r3, r3
 800b43a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b43e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b442:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800b446:	687a      	ldr	r2, [r7, #4]
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	781b      	ldrb	r3, [r3, #0]
 800b44c:	009b      	lsls	r3, r3, #2
 800b44e:	441a      	add	r2, r3
 800b450:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800b454:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b458:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b45c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b460:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b464:	b29b      	uxth	r3, r3
 800b466:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	78db      	ldrb	r3, [r3, #3]
 800b46c:	2b01      	cmp	r3, #1
 800b46e:	d024      	beq.n	800b4ba <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b470:	687a      	ldr	r2, [r7, #4]
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	781b      	ldrb	r3, [r3, #0]
 800b476:	009b      	lsls	r3, r3, #2
 800b478:	4413      	add	r3, r2
 800b47a:	881b      	ldrh	r3, [r3, #0]
 800b47c:	b29b      	uxth	r3, r3
 800b47e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b482:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b486:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800b48a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800b48e:	f083 0320 	eor.w	r3, r3, #32
 800b492:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800b496:	687a      	ldr	r2, [r7, #4]
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	781b      	ldrb	r3, [r3, #0]
 800b49c:	009b      	lsls	r3, r3, #2
 800b49e:	441a      	add	r2, r3
 800b4a0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800b4a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b4a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b4ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b4b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b4b4:	b29b      	uxth	r3, r3
 800b4b6:	8013      	strh	r3, [r2, #0]
 800b4b8:	e01d      	b.n	800b4f6 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b4ba:	687a      	ldr	r2, [r7, #4]
 800b4bc:	683b      	ldr	r3, [r7, #0]
 800b4be:	781b      	ldrb	r3, [r3, #0]
 800b4c0:	009b      	lsls	r3, r3, #2
 800b4c2:	4413      	add	r3, r2
 800b4c4:	881b      	ldrh	r3, [r3, #0]
 800b4c6:	b29b      	uxth	r3, r3
 800b4c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b4cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b4d0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800b4d4:	687a      	ldr	r2, [r7, #4]
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	781b      	ldrb	r3, [r3, #0]
 800b4da:	009b      	lsls	r3, r3, #2
 800b4dc:	441a      	add	r2, r3
 800b4de:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800b4e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b4e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b4ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b4ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b4f2:	b29b      	uxth	r3, r3
 800b4f4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b4f6:	687a      	ldr	r2, [r7, #4]
 800b4f8:	683b      	ldr	r3, [r7, #0]
 800b4fa:	781b      	ldrb	r3, [r3, #0]
 800b4fc:	009b      	lsls	r3, r3, #2
 800b4fe:	4413      	add	r3, r2
 800b500:	881b      	ldrh	r3, [r3, #0]
 800b502:	b29b      	uxth	r3, r3
 800b504:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b508:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b50c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800b510:	687a      	ldr	r2, [r7, #4]
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	781b      	ldrb	r3, [r3, #0]
 800b516:	009b      	lsls	r3, r3, #2
 800b518:	441a      	add	r2, r3
 800b51a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800b51e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b522:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b526:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b52a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b52e:	b29b      	uxth	r3, r3
 800b530:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800b532:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800b536:	4618      	mov	r0, r3
 800b538:	3774      	adds	r7, #116	@ 0x74
 800b53a:	46bd      	mov	sp, r7
 800b53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b540:	4770      	bx	lr
 800b542:	bf00      	nop

0800b544 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b544:	b480      	push	{r7}
 800b546:	b08d      	sub	sp, #52	@ 0x34
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
 800b54c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b54e:	683b      	ldr	r3, [r7, #0]
 800b550:	7b1b      	ldrb	r3, [r3, #12]
 800b552:	2b00      	cmp	r3, #0
 800b554:	f040 808e 	bne.w	800b674 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	785b      	ldrb	r3, [r3, #1]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d044      	beq.n	800b5ea <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b560:	687a      	ldr	r2, [r7, #4]
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	781b      	ldrb	r3, [r3, #0]
 800b566:	009b      	lsls	r3, r3, #2
 800b568:	4413      	add	r3, r2
 800b56a:	881b      	ldrh	r3, [r3, #0]
 800b56c:	81bb      	strh	r3, [r7, #12]
 800b56e:	89bb      	ldrh	r3, [r7, #12]
 800b570:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b574:	2b00      	cmp	r3, #0
 800b576:	d01b      	beq.n	800b5b0 <USB_DeactivateEndpoint+0x6c>
 800b578:	687a      	ldr	r2, [r7, #4]
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	781b      	ldrb	r3, [r3, #0]
 800b57e:	009b      	lsls	r3, r3, #2
 800b580:	4413      	add	r3, r2
 800b582:	881b      	ldrh	r3, [r3, #0]
 800b584:	b29b      	uxth	r3, r3
 800b586:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b58a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b58e:	817b      	strh	r3, [r7, #10]
 800b590:	687a      	ldr	r2, [r7, #4]
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	781b      	ldrb	r3, [r3, #0]
 800b596:	009b      	lsls	r3, r3, #2
 800b598:	441a      	add	r2, r3
 800b59a:	897b      	ldrh	r3, [r7, #10]
 800b59c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b5a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b5a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b5a8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b5ac:	b29b      	uxth	r3, r3
 800b5ae:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b5b0:	687a      	ldr	r2, [r7, #4]
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	781b      	ldrb	r3, [r3, #0]
 800b5b6:	009b      	lsls	r3, r3, #2
 800b5b8:	4413      	add	r3, r2
 800b5ba:	881b      	ldrh	r3, [r3, #0]
 800b5bc:	b29b      	uxth	r3, r3
 800b5be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b5c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b5c6:	813b      	strh	r3, [r7, #8]
 800b5c8:	687a      	ldr	r2, [r7, #4]
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	781b      	ldrb	r3, [r3, #0]
 800b5ce:	009b      	lsls	r3, r3, #2
 800b5d0:	441a      	add	r2, r3
 800b5d2:	893b      	ldrh	r3, [r7, #8]
 800b5d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b5d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b5dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b5e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b5e4:	b29b      	uxth	r3, r3
 800b5e6:	8013      	strh	r3, [r2, #0]
 800b5e8:	e192      	b.n	800b910 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b5ea:	687a      	ldr	r2, [r7, #4]
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	781b      	ldrb	r3, [r3, #0]
 800b5f0:	009b      	lsls	r3, r3, #2
 800b5f2:	4413      	add	r3, r2
 800b5f4:	881b      	ldrh	r3, [r3, #0]
 800b5f6:	827b      	strh	r3, [r7, #18]
 800b5f8:	8a7b      	ldrh	r3, [r7, #18]
 800b5fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d01b      	beq.n	800b63a <USB_DeactivateEndpoint+0xf6>
 800b602:	687a      	ldr	r2, [r7, #4]
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	781b      	ldrb	r3, [r3, #0]
 800b608:	009b      	lsls	r3, r3, #2
 800b60a:	4413      	add	r3, r2
 800b60c:	881b      	ldrh	r3, [r3, #0]
 800b60e:	b29b      	uxth	r3, r3
 800b610:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b614:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b618:	823b      	strh	r3, [r7, #16]
 800b61a:	687a      	ldr	r2, [r7, #4]
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	781b      	ldrb	r3, [r3, #0]
 800b620:	009b      	lsls	r3, r3, #2
 800b622:	441a      	add	r2, r3
 800b624:	8a3b      	ldrh	r3, [r7, #16]
 800b626:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b62a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b62e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b632:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b636:	b29b      	uxth	r3, r3
 800b638:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b63a:	687a      	ldr	r2, [r7, #4]
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	781b      	ldrb	r3, [r3, #0]
 800b640:	009b      	lsls	r3, r3, #2
 800b642:	4413      	add	r3, r2
 800b644:	881b      	ldrh	r3, [r3, #0]
 800b646:	b29b      	uxth	r3, r3
 800b648:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b64c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b650:	81fb      	strh	r3, [r7, #14]
 800b652:	687a      	ldr	r2, [r7, #4]
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	781b      	ldrb	r3, [r3, #0]
 800b658:	009b      	lsls	r3, r3, #2
 800b65a:	441a      	add	r2, r3
 800b65c:	89fb      	ldrh	r3, [r7, #14]
 800b65e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b662:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b666:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b66a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b66e:	b29b      	uxth	r3, r3
 800b670:	8013      	strh	r3, [r2, #0]
 800b672:	e14d      	b.n	800b910 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	785b      	ldrb	r3, [r3, #1]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	f040 80a5 	bne.w	800b7c8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b67e:	687a      	ldr	r2, [r7, #4]
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	781b      	ldrb	r3, [r3, #0]
 800b684:	009b      	lsls	r3, r3, #2
 800b686:	4413      	add	r3, r2
 800b688:	881b      	ldrh	r3, [r3, #0]
 800b68a:	843b      	strh	r3, [r7, #32]
 800b68c:	8c3b      	ldrh	r3, [r7, #32]
 800b68e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b692:	2b00      	cmp	r3, #0
 800b694:	d01b      	beq.n	800b6ce <USB_DeactivateEndpoint+0x18a>
 800b696:	687a      	ldr	r2, [r7, #4]
 800b698:	683b      	ldr	r3, [r7, #0]
 800b69a:	781b      	ldrb	r3, [r3, #0]
 800b69c:	009b      	lsls	r3, r3, #2
 800b69e:	4413      	add	r3, r2
 800b6a0:	881b      	ldrh	r3, [r3, #0]
 800b6a2:	b29b      	uxth	r3, r3
 800b6a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b6a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b6ac:	83fb      	strh	r3, [r7, #30]
 800b6ae:	687a      	ldr	r2, [r7, #4]
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	781b      	ldrb	r3, [r3, #0]
 800b6b4:	009b      	lsls	r3, r3, #2
 800b6b6:	441a      	add	r2, r3
 800b6b8:	8bfb      	ldrh	r3, [r7, #30]
 800b6ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b6be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b6c2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b6c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b6ca:	b29b      	uxth	r3, r3
 800b6cc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b6ce:	687a      	ldr	r2, [r7, #4]
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	781b      	ldrb	r3, [r3, #0]
 800b6d4:	009b      	lsls	r3, r3, #2
 800b6d6:	4413      	add	r3, r2
 800b6d8:	881b      	ldrh	r3, [r3, #0]
 800b6da:	83bb      	strh	r3, [r7, #28]
 800b6dc:	8bbb      	ldrh	r3, [r7, #28]
 800b6de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d01b      	beq.n	800b71e <USB_DeactivateEndpoint+0x1da>
 800b6e6:	687a      	ldr	r2, [r7, #4]
 800b6e8:	683b      	ldr	r3, [r7, #0]
 800b6ea:	781b      	ldrb	r3, [r3, #0]
 800b6ec:	009b      	lsls	r3, r3, #2
 800b6ee:	4413      	add	r3, r2
 800b6f0:	881b      	ldrh	r3, [r3, #0]
 800b6f2:	b29b      	uxth	r3, r3
 800b6f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b6f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b6fc:	837b      	strh	r3, [r7, #26]
 800b6fe:	687a      	ldr	r2, [r7, #4]
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	781b      	ldrb	r3, [r3, #0]
 800b704:	009b      	lsls	r3, r3, #2
 800b706:	441a      	add	r2, r3
 800b708:	8b7b      	ldrh	r3, [r7, #26]
 800b70a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b70e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b712:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b716:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b71a:	b29b      	uxth	r3, r3
 800b71c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800b71e:	687a      	ldr	r2, [r7, #4]
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	781b      	ldrb	r3, [r3, #0]
 800b724:	009b      	lsls	r3, r3, #2
 800b726:	4413      	add	r3, r2
 800b728:	881b      	ldrh	r3, [r3, #0]
 800b72a:	b29b      	uxth	r3, r3
 800b72c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b730:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b734:	833b      	strh	r3, [r7, #24]
 800b736:	687a      	ldr	r2, [r7, #4]
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	781b      	ldrb	r3, [r3, #0]
 800b73c:	009b      	lsls	r3, r3, #2
 800b73e:	441a      	add	r2, r3
 800b740:	8b3b      	ldrh	r3, [r7, #24]
 800b742:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b746:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b74a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b74e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b752:	b29b      	uxth	r3, r3
 800b754:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b756:	687a      	ldr	r2, [r7, #4]
 800b758:	683b      	ldr	r3, [r7, #0]
 800b75a:	781b      	ldrb	r3, [r3, #0]
 800b75c:	009b      	lsls	r3, r3, #2
 800b75e:	4413      	add	r3, r2
 800b760:	881b      	ldrh	r3, [r3, #0]
 800b762:	b29b      	uxth	r3, r3
 800b764:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b768:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b76c:	82fb      	strh	r3, [r7, #22]
 800b76e:	687a      	ldr	r2, [r7, #4]
 800b770:	683b      	ldr	r3, [r7, #0]
 800b772:	781b      	ldrb	r3, [r3, #0]
 800b774:	009b      	lsls	r3, r3, #2
 800b776:	441a      	add	r2, r3
 800b778:	8afb      	ldrh	r3, [r7, #22]
 800b77a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b77e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b782:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b786:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b78a:	b29b      	uxth	r3, r3
 800b78c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b78e:	687a      	ldr	r2, [r7, #4]
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	781b      	ldrb	r3, [r3, #0]
 800b794:	009b      	lsls	r3, r3, #2
 800b796:	4413      	add	r3, r2
 800b798:	881b      	ldrh	r3, [r3, #0]
 800b79a:	b29b      	uxth	r3, r3
 800b79c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b7a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b7a4:	82bb      	strh	r3, [r7, #20]
 800b7a6:	687a      	ldr	r2, [r7, #4]
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	781b      	ldrb	r3, [r3, #0]
 800b7ac:	009b      	lsls	r3, r3, #2
 800b7ae:	441a      	add	r2, r3
 800b7b0:	8abb      	ldrh	r3, [r7, #20]
 800b7b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b7b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b7ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b7be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b7c2:	b29b      	uxth	r3, r3
 800b7c4:	8013      	strh	r3, [r2, #0]
 800b7c6:	e0a3      	b.n	800b910 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b7c8:	687a      	ldr	r2, [r7, #4]
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	781b      	ldrb	r3, [r3, #0]
 800b7ce:	009b      	lsls	r3, r3, #2
 800b7d0:	4413      	add	r3, r2
 800b7d2:	881b      	ldrh	r3, [r3, #0]
 800b7d4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800b7d6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b7d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d01b      	beq.n	800b818 <USB_DeactivateEndpoint+0x2d4>
 800b7e0:	687a      	ldr	r2, [r7, #4]
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	781b      	ldrb	r3, [r3, #0]
 800b7e6:	009b      	lsls	r3, r3, #2
 800b7e8:	4413      	add	r3, r2
 800b7ea:	881b      	ldrh	r3, [r3, #0]
 800b7ec:	b29b      	uxth	r3, r3
 800b7ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b7f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b7f6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800b7f8:	687a      	ldr	r2, [r7, #4]
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	781b      	ldrb	r3, [r3, #0]
 800b7fe:	009b      	lsls	r3, r3, #2
 800b800:	441a      	add	r2, r3
 800b802:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800b804:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b808:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b80c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b810:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b814:	b29b      	uxth	r3, r3
 800b816:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b818:	687a      	ldr	r2, [r7, #4]
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	781b      	ldrb	r3, [r3, #0]
 800b81e:	009b      	lsls	r3, r3, #2
 800b820:	4413      	add	r3, r2
 800b822:	881b      	ldrh	r3, [r3, #0]
 800b824:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800b826:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b828:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d01b      	beq.n	800b868 <USB_DeactivateEndpoint+0x324>
 800b830:	687a      	ldr	r2, [r7, #4]
 800b832:	683b      	ldr	r3, [r7, #0]
 800b834:	781b      	ldrb	r3, [r3, #0]
 800b836:	009b      	lsls	r3, r3, #2
 800b838:	4413      	add	r3, r2
 800b83a:	881b      	ldrh	r3, [r3, #0]
 800b83c:	b29b      	uxth	r3, r3
 800b83e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b842:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b846:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b848:	687a      	ldr	r2, [r7, #4]
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	781b      	ldrb	r3, [r3, #0]
 800b84e:	009b      	lsls	r3, r3, #2
 800b850:	441a      	add	r2, r3
 800b852:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b854:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b858:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b85c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b860:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b864:	b29b      	uxth	r3, r3
 800b866:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800b868:	687a      	ldr	r2, [r7, #4]
 800b86a:	683b      	ldr	r3, [r7, #0]
 800b86c:	781b      	ldrb	r3, [r3, #0]
 800b86e:	009b      	lsls	r3, r3, #2
 800b870:	4413      	add	r3, r2
 800b872:	881b      	ldrh	r3, [r3, #0]
 800b874:	b29b      	uxth	r3, r3
 800b876:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b87a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b87e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800b880:	687a      	ldr	r2, [r7, #4]
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	781b      	ldrb	r3, [r3, #0]
 800b886:	009b      	lsls	r3, r3, #2
 800b888:	441a      	add	r2, r3
 800b88a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b88c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b890:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b894:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b898:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b89c:	b29b      	uxth	r3, r3
 800b89e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b8a0:	687a      	ldr	r2, [r7, #4]
 800b8a2:	683b      	ldr	r3, [r7, #0]
 800b8a4:	781b      	ldrb	r3, [r3, #0]
 800b8a6:	009b      	lsls	r3, r3, #2
 800b8a8:	4413      	add	r3, r2
 800b8aa:	881b      	ldrh	r3, [r3, #0]
 800b8ac:	b29b      	uxth	r3, r3
 800b8ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b8b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b8b6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800b8b8:	687a      	ldr	r2, [r7, #4]
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	781b      	ldrb	r3, [r3, #0]
 800b8be:	009b      	lsls	r3, r3, #2
 800b8c0:	441a      	add	r2, r3
 800b8c2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b8c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b8c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b8cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b8d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b8d4:	b29b      	uxth	r3, r3
 800b8d6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b8d8:	687a      	ldr	r2, [r7, #4]
 800b8da:	683b      	ldr	r3, [r7, #0]
 800b8dc:	781b      	ldrb	r3, [r3, #0]
 800b8de:	009b      	lsls	r3, r3, #2
 800b8e0:	4413      	add	r3, r2
 800b8e2:	881b      	ldrh	r3, [r3, #0]
 800b8e4:	b29b      	uxth	r3, r3
 800b8e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b8ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b8ee:	847b      	strh	r3, [r7, #34]	@ 0x22
 800b8f0:	687a      	ldr	r2, [r7, #4]
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	781b      	ldrb	r3, [r3, #0]
 800b8f6:	009b      	lsls	r3, r3, #2
 800b8f8:	441a      	add	r2, r3
 800b8fa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b8fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b900:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b904:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b908:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b90c:	b29b      	uxth	r3, r3
 800b90e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800b910:	2300      	movs	r3, #0
}
 800b912:	4618      	mov	r0, r3
 800b914:	3734      	adds	r7, #52	@ 0x34
 800b916:	46bd      	mov	sp, r7
 800b918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91c:	4770      	bx	lr

0800b91e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b91e:	b580      	push	{r7, lr}
 800b920:	b0c2      	sub	sp, #264	@ 0x108
 800b922:	af00      	add	r7, sp, #0
 800b924:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b928:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b92c:	6018      	str	r0, [r3, #0]
 800b92e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b932:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b936:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b938:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b93c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	785b      	ldrb	r3, [r3, #1]
 800b944:	2b01      	cmp	r3, #1
 800b946:	f040 86b7 	bne.w	800c6b8 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800b94a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b94e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	699a      	ldr	r2, [r3, #24]
 800b956:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b95a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	691b      	ldr	r3, [r3, #16]
 800b962:	429a      	cmp	r2, r3
 800b964:	d908      	bls.n	800b978 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800b966:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b96a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	691b      	ldr	r3, [r3, #16]
 800b972:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800b976:	e007      	b.n	800b988 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800b978:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b97c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	699b      	ldr	r3, [r3, #24]
 800b984:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800b988:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b98c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	7b1b      	ldrb	r3, [r3, #12]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d13a      	bne.n	800ba0e <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800b998:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b99c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	6959      	ldr	r1, [r3, #20]
 800b9a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	88da      	ldrh	r2, [r3, #6]
 800b9b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9b4:	b29b      	uxth	r3, r3
 800b9b6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b9ba:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b9be:	6800      	ldr	r0, [r0, #0]
 800b9c0:	f001 fc98 	bl	800d2f4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b9c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	613b      	str	r3, [r7, #16]
 800b9d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b9de:	b29b      	uxth	r3, r3
 800b9e0:	461a      	mov	r2, r3
 800b9e2:	693b      	ldr	r3, [r7, #16]
 800b9e4:	4413      	add	r3, r2
 800b9e6:	613b      	str	r3, [r7, #16]
 800b9e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	781b      	ldrb	r3, [r3, #0]
 800b9f4:	00da      	lsls	r2, r3, #3
 800b9f6:	693b      	ldr	r3, [r7, #16]
 800b9f8:	4413      	add	r3, r2
 800b9fa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b9fe:	60fb      	str	r3, [r7, #12]
 800ba00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba04:	b29a      	uxth	r2, r3
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	801a      	strh	r2, [r3, #0]
 800ba0a:	f000 be1f 	b.w	800c64c <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800ba0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	78db      	ldrb	r3, [r3, #3]
 800ba1a:	2b02      	cmp	r3, #2
 800ba1c:	f040 8462 	bne.w	800c2e4 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800ba20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	6a1a      	ldr	r2, [r3, #32]
 800ba2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	691b      	ldr	r3, [r3, #16]
 800ba38:	429a      	cmp	r2, r3
 800ba3a:	f240 83df 	bls.w	800c1fc <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800ba3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ba46:	681a      	ldr	r2, [r3, #0]
 800ba48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	781b      	ldrb	r3, [r3, #0]
 800ba54:	009b      	lsls	r3, r3, #2
 800ba56:	4413      	add	r3, r2
 800ba58:	881b      	ldrh	r3, [r3, #0]
 800ba5a:	b29b      	uxth	r3, r3
 800ba5c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ba60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ba64:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800ba68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ba70:	681a      	ldr	r2, [r3, #0]
 800ba72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	781b      	ldrb	r3, [r3, #0]
 800ba7e:	009b      	lsls	r3, r3, #2
 800ba80:	441a      	add	r2, r3
 800ba82:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800ba86:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ba8a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ba8e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800ba92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba96:	b29b      	uxth	r3, r3
 800ba98:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800ba9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	6a1a      	ldr	r2, [r3, #32]
 800baa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800baaa:	1ad2      	subs	r2, r2, r3
 800baac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bab0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800bab8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800babc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bac0:	681a      	ldr	r2, [r3, #0]
 800bac2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bac6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	781b      	ldrb	r3, [r3, #0]
 800bace:	009b      	lsls	r3, r3, #2
 800bad0:	4413      	add	r3, r2
 800bad2:	881b      	ldrh	r3, [r3, #0]
 800bad4:	b29b      	uxth	r3, r3
 800bad6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bada:	2b00      	cmp	r3, #0
 800badc:	f000 81c7 	beq.w	800be6e <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bae0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bae4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	633b      	str	r3, [r7, #48]	@ 0x30
 800baec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800baf0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	785b      	ldrb	r3, [r3, #1]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d177      	bne.n	800bbec <USB_EPStartXfer+0x2ce>
 800bafc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb00:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bb08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb0c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bb16:	b29b      	uxth	r3, r3
 800bb18:	461a      	mov	r2, r3
 800bb1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb1c:	4413      	add	r3, r2
 800bb1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bb20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	781b      	ldrb	r3, [r3, #0]
 800bb2c:	00da      	lsls	r2, r3, #3
 800bb2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb30:	4413      	add	r3, r2
 800bb32:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bb36:	627b      	str	r3, [r7, #36]	@ 0x24
 800bb38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb3a:	881b      	ldrh	r3, [r3, #0]
 800bb3c:	b29b      	uxth	r3, r3
 800bb3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bb42:	b29a      	uxth	r2, r3
 800bb44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb46:	801a      	strh	r2, [r3, #0]
 800bb48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb4c:	2b3e      	cmp	r3, #62	@ 0x3e
 800bb4e:	d921      	bls.n	800bb94 <USB_EPStartXfer+0x276>
 800bb50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb54:	095b      	lsrs	r3, r3, #5
 800bb56:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800bb5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb5e:	f003 031f 	and.w	r3, r3, #31
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d104      	bne.n	800bb70 <USB_EPStartXfer+0x252>
 800bb66:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800bb6a:	3b01      	subs	r3, #1
 800bb6c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800bb70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb72:	881b      	ldrh	r3, [r3, #0]
 800bb74:	b29a      	uxth	r2, r3
 800bb76:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800bb7a:	b29b      	uxth	r3, r3
 800bb7c:	029b      	lsls	r3, r3, #10
 800bb7e:	b29b      	uxth	r3, r3
 800bb80:	4313      	orrs	r3, r2
 800bb82:	b29b      	uxth	r3, r3
 800bb84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bb88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb8c:	b29a      	uxth	r2, r3
 800bb8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb90:	801a      	strh	r2, [r3, #0]
 800bb92:	e050      	b.n	800bc36 <USB_EPStartXfer+0x318>
 800bb94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d10a      	bne.n	800bbb2 <USB_EPStartXfer+0x294>
 800bb9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb9e:	881b      	ldrh	r3, [r3, #0]
 800bba0:	b29b      	uxth	r3, r3
 800bba2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bba6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bbaa:	b29a      	uxth	r2, r3
 800bbac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbae:	801a      	strh	r2, [r3, #0]
 800bbb0:	e041      	b.n	800bc36 <USB_EPStartXfer+0x318>
 800bbb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbb6:	085b      	lsrs	r3, r3, #1
 800bbb8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800bbbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbc0:	f003 0301 	and.w	r3, r3, #1
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d004      	beq.n	800bbd2 <USB_EPStartXfer+0x2b4>
 800bbc8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800bbcc:	3301      	adds	r3, #1
 800bbce:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800bbd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbd4:	881b      	ldrh	r3, [r3, #0]
 800bbd6:	b29a      	uxth	r2, r3
 800bbd8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800bbdc:	b29b      	uxth	r3, r3
 800bbde:	029b      	lsls	r3, r3, #10
 800bbe0:	b29b      	uxth	r3, r3
 800bbe2:	4313      	orrs	r3, r2
 800bbe4:	b29a      	uxth	r2, r3
 800bbe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbe8:	801a      	strh	r2, [r3, #0]
 800bbea:	e024      	b.n	800bc36 <USB_EPStartXfer+0x318>
 800bbec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bbf0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	785b      	ldrb	r3, [r3, #1]
 800bbf8:	2b01      	cmp	r3, #1
 800bbfa:	d11c      	bne.n	800bc36 <USB_EPStartXfer+0x318>
 800bbfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc00:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bc0a:	b29b      	uxth	r3, r3
 800bc0c:	461a      	mov	r2, r3
 800bc0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc10:	4413      	add	r3, r2
 800bc12:	633b      	str	r3, [r7, #48]	@ 0x30
 800bc14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	781b      	ldrb	r3, [r3, #0]
 800bc20:	00da      	lsls	r2, r3, #3
 800bc22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc24:	4413      	add	r3, r2
 800bc26:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bc2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bc2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc30:	b29a      	uxth	r2, r3
 800bc32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc34:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800bc36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	895b      	ldrh	r3, [r3, #10]
 800bc42:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bc46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	6959      	ldr	r1, [r3, #20]
 800bc52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc56:	b29b      	uxth	r3, r3
 800bc58:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800bc5c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800bc60:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800bc64:	6800      	ldr	r0, [r0, #0]
 800bc66:	f001 fb45 	bl	800d2f4 <USB_WritePMA>
            ep->xfer_buff += len;
 800bc6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	695a      	ldr	r2, [r3, #20]
 800bc76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc7a:	441a      	add	r2, r3
 800bc7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800bc88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	6a1a      	ldr	r2, [r3, #32]
 800bc94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	691b      	ldr	r3, [r3, #16]
 800bca0:	429a      	cmp	r2, r3
 800bca2:	d90f      	bls.n	800bcc4 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800bca4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bca8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	6a1a      	ldr	r2, [r3, #32]
 800bcb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bcb4:	1ad2      	subs	r2, r2, r3
 800bcb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bcba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	621a      	str	r2, [r3, #32]
 800bcc2:	e00e      	b.n	800bce2 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800bcc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bcc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	6a1b      	ldr	r3, [r3, #32]
 800bcd0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800bcd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bcd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	2200      	movs	r2, #0
 800bce0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800bce2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bce6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	785b      	ldrb	r3, [r3, #1]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d177      	bne.n	800bde2 <USB_EPStartXfer+0x4c4>
 800bcf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bcf6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	61bb      	str	r3, [r7, #24]
 800bcfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd02:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bd0c:	b29b      	uxth	r3, r3
 800bd0e:	461a      	mov	r2, r3
 800bd10:	69bb      	ldr	r3, [r7, #24]
 800bd12:	4413      	add	r3, r2
 800bd14:	61bb      	str	r3, [r7, #24]
 800bd16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	781b      	ldrb	r3, [r3, #0]
 800bd22:	00da      	lsls	r2, r3, #3
 800bd24:	69bb      	ldr	r3, [r7, #24]
 800bd26:	4413      	add	r3, r2
 800bd28:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bd2c:	617b      	str	r3, [r7, #20]
 800bd2e:	697b      	ldr	r3, [r7, #20]
 800bd30:	881b      	ldrh	r3, [r3, #0]
 800bd32:	b29b      	uxth	r3, r3
 800bd34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bd38:	b29a      	uxth	r2, r3
 800bd3a:	697b      	ldr	r3, [r7, #20]
 800bd3c:	801a      	strh	r2, [r3, #0]
 800bd3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd42:	2b3e      	cmp	r3, #62	@ 0x3e
 800bd44:	d921      	bls.n	800bd8a <USB_EPStartXfer+0x46c>
 800bd46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd4a:	095b      	lsrs	r3, r3, #5
 800bd4c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800bd50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd54:	f003 031f 	and.w	r3, r3, #31
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d104      	bne.n	800bd66 <USB_EPStartXfer+0x448>
 800bd5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bd60:	3b01      	subs	r3, #1
 800bd62:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800bd66:	697b      	ldr	r3, [r7, #20]
 800bd68:	881b      	ldrh	r3, [r3, #0]
 800bd6a:	b29a      	uxth	r2, r3
 800bd6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bd70:	b29b      	uxth	r3, r3
 800bd72:	029b      	lsls	r3, r3, #10
 800bd74:	b29b      	uxth	r3, r3
 800bd76:	4313      	orrs	r3, r2
 800bd78:	b29b      	uxth	r3, r3
 800bd7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bd7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bd82:	b29a      	uxth	r2, r3
 800bd84:	697b      	ldr	r3, [r7, #20]
 800bd86:	801a      	strh	r2, [r3, #0]
 800bd88:	e056      	b.n	800be38 <USB_EPStartXfer+0x51a>
 800bd8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d10a      	bne.n	800bda8 <USB_EPStartXfer+0x48a>
 800bd92:	697b      	ldr	r3, [r7, #20]
 800bd94:	881b      	ldrh	r3, [r3, #0]
 800bd96:	b29b      	uxth	r3, r3
 800bd98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bd9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bda0:	b29a      	uxth	r2, r3
 800bda2:	697b      	ldr	r3, [r7, #20]
 800bda4:	801a      	strh	r2, [r3, #0]
 800bda6:	e047      	b.n	800be38 <USB_EPStartXfer+0x51a>
 800bda8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bdac:	085b      	lsrs	r3, r3, #1
 800bdae:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800bdb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bdb6:	f003 0301 	and.w	r3, r3, #1
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d004      	beq.n	800bdc8 <USB_EPStartXfer+0x4aa>
 800bdbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bdc2:	3301      	adds	r3, #1
 800bdc4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800bdc8:	697b      	ldr	r3, [r7, #20]
 800bdca:	881b      	ldrh	r3, [r3, #0]
 800bdcc:	b29a      	uxth	r2, r3
 800bdce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bdd2:	b29b      	uxth	r3, r3
 800bdd4:	029b      	lsls	r3, r3, #10
 800bdd6:	b29b      	uxth	r3, r3
 800bdd8:	4313      	orrs	r3, r2
 800bdda:	b29a      	uxth	r2, r3
 800bddc:	697b      	ldr	r3, [r7, #20]
 800bdde:	801a      	strh	r2, [r3, #0]
 800bde0:	e02a      	b.n	800be38 <USB_EPStartXfer+0x51a>
 800bde2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bde6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	785b      	ldrb	r3, [r3, #1]
 800bdee:	2b01      	cmp	r3, #1
 800bdf0:	d122      	bne.n	800be38 <USB_EPStartXfer+0x51a>
 800bdf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bdf6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	623b      	str	r3, [r7, #32]
 800bdfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be02:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800be0c:	b29b      	uxth	r3, r3
 800be0e:	461a      	mov	r2, r3
 800be10:	6a3b      	ldr	r3, [r7, #32]
 800be12:	4413      	add	r3, r2
 800be14:	623b      	str	r3, [r7, #32]
 800be16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	781b      	ldrb	r3, [r3, #0]
 800be22:	00da      	lsls	r2, r3, #3
 800be24:	6a3b      	ldr	r3, [r7, #32]
 800be26:	4413      	add	r3, r2
 800be28:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800be2c:	61fb      	str	r3, [r7, #28]
 800be2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be32:	b29a      	uxth	r2, r3
 800be34:	69fb      	ldr	r3, [r7, #28]
 800be36:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800be38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	891b      	ldrh	r3, [r3, #8]
 800be44:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800be48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	6959      	ldr	r1, [r3, #20]
 800be54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be58:	b29b      	uxth	r3, r3
 800be5a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800be5e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800be62:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800be66:	6800      	ldr	r0, [r0, #0]
 800be68:	f001 fa44 	bl	800d2f4 <USB_WritePMA>
 800be6c:	e3ee      	b.n	800c64c <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800be6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	785b      	ldrb	r3, [r3, #1]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d177      	bne.n	800bf6e <USB_EPStartXfer+0x650>
 800be7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	64bb      	str	r3, [r7, #72]	@ 0x48
 800be8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be8e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800be98:	b29b      	uxth	r3, r3
 800be9a:	461a      	mov	r2, r3
 800be9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800be9e:	4413      	add	r3, r2
 800bea0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bea2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bea6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	781b      	ldrb	r3, [r3, #0]
 800beae:	00da      	lsls	r2, r3, #3
 800beb0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800beb2:	4413      	add	r3, r2
 800beb4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800beb8:	647b      	str	r3, [r7, #68]	@ 0x44
 800beba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bebc:	881b      	ldrh	r3, [r3, #0]
 800bebe:	b29b      	uxth	r3, r3
 800bec0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bec4:	b29a      	uxth	r2, r3
 800bec6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bec8:	801a      	strh	r2, [r3, #0]
 800beca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bece:	2b3e      	cmp	r3, #62	@ 0x3e
 800bed0:	d921      	bls.n	800bf16 <USB_EPStartXfer+0x5f8>
 800bed2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bed6:	095b      	lsrs	r3, r3, #5
 800bed8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800bedc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bee0:	f003 031f 	and.w	r3, r3, #31
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d104      	bne.n	800bef2 <USB_EPStartXfer+0x5d4>
 800bee8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800beec:	3b01      	subs	r3, #1
 800beee:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800bef2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bef4:	881b      	ldrh	r3, [r3, #0]
 800bef6:	b29a      	uxth	r2, r3
 800bef8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800befc:	b29b      	uxth	r3, r3
 800befe:	029b      	lsls	r3, r3, #10
 800bf00:	b29b      	uxth	r3, r3
 800bf02:	4313      	orrs	r3, r2
 800bf04:	b29b      	uxth	r3, r3
 800bf06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bf0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bf0e:	b29a      	uxth	r2, r3
 800bf10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bf12:	801a      	strh	r2, [r3, #0]
 800bf14:	e056      	b.n	800bfc4 <USB_EPStartXfer+0x6a6>
 800bf16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d10a      	bne.n	800bf34 <USB_EPStartXfer+0x616>
 800bf1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bf20:	881b      	ldrh	r3, [r3, #0]
 800bf22:	b29b      	uxth	r3, r3
 800bf24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bf28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bf2c:	b29a      	uxth	r2, r3
 800bf2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bf30:	801a      	strh	r2, [r3, #0]
 800bf32:	e047      	b.n	800bfc4 <USB_EPStartXfer+0x6a6>
 800bf34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf38:	085b      	lsrs	r3, r3, #1
 800bf3a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800bf3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf42:	f003 0301 	and.w	r3, r3, #1
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d004      	beq.n	800bf54 <USB_EPStartXfer+0x636>
 800bf4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800bf4e:	3301      	adds	r3, #1
 800bf50:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800bf54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bf56:	881b      	ldrh	r3, [r3, #0]
 800bf58:	b29a      	uxth	r2, r3
 800bf5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800bf5e:	b29b      	uxth	r3, r3
 800bf60:	029b      	lsls	r3, r3, #10
 800bf62:	b29b      	uxth	r3, r3
 800bf64:	4313      	orrs	r3, r2
 800bf66:	b29a      	uxth	r2, r3
 800bf68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bf6a:	801a      	strh	r2, [r3, #0]
 800bf6c:	e02a      	b.n	800bfc4 <USB_EPStartXfer+0x6a6>
 800bf6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	785b      	ldrb	r3, [r3, #1]
 800bf7a:	2b01      	cmp	r3, #1
 800bf7c:	d122      	bne.n	800bfc4 <USB_EPStartXfer+0x6a6>
 800bf7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	653b      	str	r3, [r7, #80]	@ 0x50
 800bf8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf8e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bf98:	b29b      	uxth	r3, r3
 800bf9a:	461a      	mov	r2, r3
 800bf9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf9e:	4413      	add	r3, r2
 800bfa0:	653b      	str	r3, [r7, #80]	@ 0x50
 800bfa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bfa6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	781b      	ldrb	r3, [r3, #0]
 800bfae:	00da      	lsls	r2, r3, #3
 800bfb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bfb2:	4413      	add	r3, r2
 800bfb4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bfb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bfba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfbe:	b29a      	uxth	r2, r3
 800bfc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bfc2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800bfc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bfc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	891b      	ldrh	r3, [r3, #8]
 800bfd0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bfd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bfd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	6959      	ldr	r1, [r3, #20]
 800bfe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfe4:	b29b      	uxth	r3, r3
 800bfe6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800bfea:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800bfee:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800bff2:	6800      	ldr	r0, [r0, #0]
 800bff4:	f001 f97e 	bl	800d2f4 <USB_WritePMA>
            ep->xfer_buff += len;
 800bff8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bffc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	695a      	ldr	r2, [r3, #20]
 800c004:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c008:	441a      	add	r2, r3
 800c00a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c00e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800c016:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c01a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	6a1a      	ldr	r2, [r3, #32]
 800c022:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c026:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	691b      	ldr	r3, [r3, #16]
 800c02e:	429a      	cmp	r2, r3
 800c030:	d90f      	bls.n	800c052 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800c032:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c036:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	6a1a      	ldr	r2, [r3, #32]
 800c03e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c042:	1ad2      	subs	r2, r2, r3
 800c044:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c048:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	621a      	str	r2, [r3, #32]
 800c050:	e00e      	b.n	800c070 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800c052:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c056:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	6a1b      	ldr	r3, [r3, #32]
 800c05e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800c062:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c066:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	2200      	movs	r2, #0
 800c06e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c070:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c074:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	643b      	str	r3, [r7, #64]	@ 0x40
 800c07c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c080:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	785b      	ldrb	r3, [r3, #1]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d177      	bne.n	800c17c <USB_EPStartXfer+0x85e>
 800c08c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c090:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c098:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c09c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c0a6:	b29b      	uxth	r3, r3
 800c0a8:	461a      	mov	r2, r3
 800c0aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0ac:	4413      	add	r3, r2
 800c0ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c0b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	781b      	ldrb	r3, [r3, #0]
 800c0bc:	00da      	lsls	r2, r3, #3
 800c0be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0c0:	4413      	add	r3, r2
 800c0c2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c0c6:	637b      	str	r3, [r7, #52]	@ 0x34
 800c0c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0ca:	881b      	ldrh	r3, [r3, #0]
 800c0cc:	b29b      	uxth	r3, r3
 800c0ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c0d2:	b29a      	uxth	r2, r3
 800c0d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0d6:	801a      	strh	r2, [r3, #0]
 800c0d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0dc:	2b3e      	cmp	r3, #62	@ 0x3e
 800c0de:	d921      	bls.n	800c124 <USB_EPStartXfer+0x806>
 800c0e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0e4:	095b      	lsrs	r3, r3, #5
 800c0e6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800c0ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0ee:	f003 031f 	and.w	r3, r3, #31
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d104      	bne.n	800c100 <USB_EPStartXfer+0x7e2>
 800c0f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c0fa:	3b01      	subs	r3, #1
 800c0fc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800c100:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c102:	881b      	ldrh	r3, [r3, #0]
 800c104:	b29a      	uxth	r2, r3
 800c106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c10a:	b29b      	uxth	r3, r3
 800c10c:	029b      	lsls	r3, r3, #10
 800c10e:	b29b      	uxth	r3, r3
 800c110:	4313      	orrs	r3, r2
 800c112:	b29b      	uxth	r3, r3
 800c114:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c118:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c11c:	b29a      	uxth	r2, r3
 800c11e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c120:	801a      	strh	r2, [r3, #0]
 800c122:	e050      	b.n	800c1c6 <USB_EPStartXfer+0x8a8>
 800c124:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d10a      	bne.n	800c142 <USB_EPStartXfer+0x824>
 800c12c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c12e:	881b      	ldrh	r3, [r3, #0]
 800c130:	b29b      	uxth	r3, r3
 800c132:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c136:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c13a:	b29a      	uxth	r2, r3
 800c13c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c13e:	801a      	strh	r2, [r3, #0]
 800c140:	e041      	b.n	800c1c6 <USB_EPStartXfer+0x8a8>
 800c142:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c146:	085b      	lsrs	r3, r3, #1
 800c148:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800c14c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c150:	f003 0301 	and.w	r3, r3, #1
 800c154:	2b00      	cmp	r3, #0
 800c156:	d004      	beq.n	800c162 <USB_EPStartXfer+0x844>
 800c158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c15c:	3301      	adds	r3, #1
 800c15e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800c162:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c164:	881b      	ldrh	r3, [r3, #0]
 800c166:	b29a      	uxth	r2, r3
 800c168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c16c:	b29b      	uxth	r3, r3
 800c16e:	029b      	lsls	r3, r3, #10
 800c170:	b29b      	uxth	r3, r3
 800c172:	4313      	orrs	r3, r2
 800c174:	b29a      	uxth	r2, r3
 800c176:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c178:	801a      	strh	r2, [r3, #0]
 800c17a:	e024      	b.n	800c1c6 <USB_EPStartXfer+0x8a8>
 800c17c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c180:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	785b      	ldrb	r3, [r3, #1]
 800c188:	2b01      	cmp	r3, #1
 800c18a:	d11c      	bne.n	800c1c6 <USB_EPStartXfer+0x8a8>
 800c18c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c190:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c19a:	b29b      	uxth	r3, r3
 800c19c:	461a      	mov	r2, r3
 800c19e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c1a0:	4413      	add	r3, r2
 800c1a2:	643b      	str	r3, [r7, #64]	@ 0x40
 800c1a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c1a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	781b      	ldrb	r3, [r3, #0]
 800c1b0:	00da      	lsls	r2, r3, #3
 800c1b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c1b4:	4413      	add	r3, r2
 800c1b6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c1ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c1bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1c0:	b29a      	uxth	r2, r3
 800c1c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c1c4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800c1c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c1ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	895b      	ldrh	r3, [r3, #10]
 800c1d2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c1d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c1da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	6959      	ldr	r1, [r3, #20]
 800c1e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1e6:	b29b      	uxth	r3, r3
 800c1e8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c1ec:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800c1f0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800c1f4:	6800      	ldr	r0, [r0, #0]
 800c1f6:	f001 f87d 	bl	800d2f4 <USB_WritePMA>
 800c1fa:	e227      	b.n	800c64c <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800c1fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c200:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	6a1b      	ldr	r3, [r3, #32]
 800c208:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800c20c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c210:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c214:	681a      	ldr	r2, [r3, #0]
 800c216:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c21a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	781b      	ldrb	r3, [r3, #0]
 800c222:	009b      	lsls	r3, r3, #2
 800c224:	4413      	add	r3, r2
 800c226:	881b      	ldrh	r3, [r3, #0]
 800c228:	b29b      	uxth	r3, r3
 800c22a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800c22e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c232:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800c236:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c23a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c23e:	681a      	ldr	r2, [r3, #0]
 800c240:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c244:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	781b      	ldrb	r3, [r3, #0]
 800c24c:	009b      	lsls	r3, r3, #2
 800c24e:	441a      	add	r2, r3
 800c250:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800c254:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c258:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c25c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c260:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c264:	b29b      	uxth	r3, r3
 800c266:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800c268:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c26c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c274:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c278:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c282:	b29b      	uxth	r3, r3
 800c284:	461a      	mov	r2, r3
 800c286:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c288:	4413      	add	r3, r2
 800c28a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c28c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c290:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	781b      	ldrb	r3, [r3, #0]
 800c298:	00da      	lsls	r2, r3, #3
 800c29a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c29c:	4413      	add	r3, r2
 800c29e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c2a2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c2a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2a8:	b29a      	uxth	r2, r3
 800c2aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c2ac:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800c2ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	891b      	ldrh	r3, [r3, #8]
 800c2ba:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c2be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	6959      	ldr	r1, [r3, #20]
 800c2ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2ce:	b29b      	uxth	r3, r3
 800c2d0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c2d4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800c2d8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800c2dc:	6800      	ldr	r0, [r0, #0]
 800c2de:	f001 f809 	bl	800d2f4 <USB_WritePMA>
 800c2e2:	e1b3      	b.n	800c64c <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800c2e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	6a1a      	ldr	r2, [r3, #32]
 800c2f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2f4:	1ad2      	subs	r2, r2, r3
 800c2f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800c302:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c306:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c30a:	681a      	ldr	r2, [r3, #0]
 800c30c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c310:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	781b      	ldrb	r3, [r3, #0]
 800c318:	009b      	lsls	r3, r3, #2
 800c31a:	4413      	add	r3, r2
 800c31c:	881b      	ldrh	r3, [r3, #0]
 800c31e:	b29b      	uxth	r3, r3
 800c320:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c324:	2b00      	cmp	r3, #0
 800c326:	f000 80c6 	beq.w	800c4b6 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c32a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c32e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	673b      	str	r3, [r7, #112]	@ 0x70
 800c336:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c33a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	785b      	ldrb	r3, [r3, #1]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d177      	bne.n	800c436 <USB_EPStartXfer+0xb18>
 800c346:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c34a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c352:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c356:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c360:	b29b      	uxth	r3, r3
 800c362:	461a      	mov	r2, r3
 800c364:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c366:	4413      	add	r3, r2
 800c368:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c36a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c36e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	781b      	ldrb	r3, [r3, #0]
 800c376:	00da      	lsls	r2, r3, #3
 800c378:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c37a:	4413      	add	r3, r2
 800c37c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c380:	667b      	str	r3, [r7, #100]	@ 0x64
 800c382:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c384:	881b      	ldrh	r3, [r3, #0]
 800c386:	b29b      	uxth	r3, r3
 800c388:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c38c:	b29a      	uxth	r2, r3
 800c38e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c390:	801a      	strh	r2, [r3, #0]
 800c392:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c396:	2b3e      	cmp	r3, #62	@ 0x3e
 800c398:	d921      	bls.n	800c3de <USB_EPStartXfer+0xac0>
 800c39a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c39e:	095b      	lsrs	r3, r3, #5
 800c3a0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800c3a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3a8:	f003 031f 	and.w	r3, r3, #31
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d104      	bne.n	800c3ba <USB_EPStartXfer+0xa9c>
 800c3b0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800c3b4:	3b01      	subs	r3, #1
 800c3b6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800c3ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c3bc:	881b      	ldrh	r3, [r3, #0]
 800c3be:	b29a      	uxth	r2, r3
 800c3c0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800c3c4:	b29b      	uxth	r3, r3
 800c3c6:	029b      	lsls	r3, r3, #10
 800c3c8:	b29b      	uxth	r3, r3
 800c3ca:	4313      	orrs	r3, r2
 800c3cc:	b29b      	uxth	r3, r3
 800c3ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c3d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c3d6:	b29a      	uxth	r2, r3
 800c3d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c3da:	801a      	strh	r2, [r3, #0]
 800c3dc:	e050      	b.n	800c480 <USB_EPStartXfer+0xb62>
 800c3de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d10a      	bne.n	800c3fc <USB_EPStartXfer+0xade>
 800c3e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c3e8:	881b      	ldrh	r3, [r3, #0]
 800c3ea:	b29b      	uxth	r3, r3
 800c3ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c3f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c3f4:	b29a      	uxth	r2, r3
 800c3f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c3f8:	801a      	strh	r2, [r3, #0]
 800c3fa:	e041      	b.n	800c480 <USB_EPStartXfer+0xb62>
 800c3fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c400:	085b      	lsrs	r3, r3, #1
 800c402:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800c406:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c40a:	f003 0301 	and.w	r3, r3, #1
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d004      	beq.n	800c41c <USB_EPStartXfer+0xafe>
 800c412:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800c416:	3301      	adds	r3, #1
 800c418:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800c41c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c41e:	881b      	ldrh	r3, [r3, #0]
 800c420:	b29a      	uxth	r2, r3
 800c422:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800c426:	b29b      	uxth	r3, r3
 800c428:	029b      	lsls	r3, r3, #10
 800c42a:	b29b      	uxth	r3, r3
 800c42c:	4313      	orrs	r3, r2
 800c42e:	b29a      	uxth	r2, r3
 800c430:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c432:	801a      	strh	r2, [r3, #0]
 800c434:	e024      	b.n	800c480 <USB_EPStartXfer+0xb62>
 800c436:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c43a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	785b      	ldrb	r3, [r3, #1]
 800c442:	2b01      	cmp	r3, #1
 800c444:	d11c      	bne.n	800c480 <USB_EPStartXfer+0xb62>
 800c446:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c44a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c454:	b29b      	uxth	r3, r3
 800c456:	461a      	mov	r2, r3
 800c458:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c45a:	4413      	add	r3, r2
 800c45c:	673b      	str	r3, [r7, #112]	@ 0x70
 800c45e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c462:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	781b      	ldrb	r3, [r3, #0]
 800c46a:	00da      	lsls	r2, r3, #3
 800c46c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c46e:	4413      	add	r3, r2
 800c470:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c474:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c476:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c47a:	b29a      	uxth	r2, r3
 800c47c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c47e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800c480:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c484:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	895b      	ldrh	r3, [r3, #10]
 800c48c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c490:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c494:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	6959      	ldr	r1, [r3, #20]
 800c49c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4a0:	b29b      	uxth	r3, r3
 800c4a2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c4a6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800c4aa:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800c4ae:	6800      	ldr	r0, [r0, #0]
 800c4b0:	f000 ff20 	bl	800d2f4 <USB_WritePMA>
 800c4b4:	e0ca      	b.n	800c64c <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c4b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c4ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	785b      	ldrb	r3, [r3, #1]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d177      	bne.n	800c5b6 <USB_EPStartXfer+0xc98>
 800c4c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c4ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c4d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c4d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c4e0:	b29b      	uxth	r3, r3
 800c4e2:	461a      	mov	r2, r3
 800c4e4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c4e6:	4413      	add	r3, r2
 800c4e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c4ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c4ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	781b      	ldrb	r3, [r3, #0]
 800c4f6:	00da      	lsls	r2, r3, #3
 800c4f8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c4fa:	4413      	add	r3, r2
 800c4fc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c500:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c502:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c504:	881b      	ldrh	r3, [r3, #0]
 800c506:	b29b      	uxth	r3, r3
 800c508:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c50c:	b29a      	uxth	r2, r3
 800c50e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c510:	801a      	strh	r2, [r3, #0]
 800c512:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c516:	2b3e      	cmp	r3, #62	@ 0x3e
 800c518:	d921      	bls.n	800c55e <USB_EPStartXfer+0xc40>
 800c51a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c51e:	095b      	lsrs	r3, r3, #5
 800c520:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800c524:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c528:	f003 031f 	and.w	r3, r3, #31
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d104      	bne.n	800c53a <USB_EPStartXfer+0xc1c>
 800c530:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c534:	3b01      	subs	r3, #1
 800c536:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800c53a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c53c:	881b      	ldrh	r3, [r3, #0]
 800c53e:	b29a      	uxth	r2, r3
 800c540:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c544:	b29b      	uxth	r3, r3
 800c546:	029b      	lsls	r3, r3, #10
 800c548:	b29b      	uxth	r3, r3
 800c54a:	4313      	orrs	r3, r2
 800c54c:	b29b      	uxth	r3, r3
 800c54e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c552:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c556:	b29a      	uxth	r2, r3
 800c558:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c55a:	801a      	strh	r2, [r3, #0]
 800c55c:	e05c      	b.n	800c618 <USB_EPStartXfer+0xcfa>
 800c55e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c562:	2b00      	cmp	r3, #0
 800c564:	d10a      	bne.n	800c57c <USB_EPStartXfer+0xc5e>
 800c566:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c568:	881b      	ldrh	r3, [r3, #0]
 800c56a:	b29b      	uxth	r3, r3
 800c56c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c570:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c574:	b29a      	uxth	r2, r3
 800c576:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c578:	801a      	strh	r2, [r3, #0]
 800c57a:	e04d      	b.n	800c618 <USB_EPStartXfer+0xcfa>
 800c57c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c580:	085b      	lsrs	r3, r3, #1
 800c582:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800c586:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c58a:	f003 0301 	and.w	r3, r3, #1
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d004      	beq.n	800c59c <USB_EPStartXfer+0xc7e>
 800c592:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c596:	3301      	adds	r3, #1
 800c598:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800c59c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c59e:	881b      	ldrh	r3, [r3, #0]
 800c5a0:	b29a      	uxth	r2, r3
 800c5a2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c5a6:	b29b      	uxth	r3, r3
 800c5a8:	029b      	lsls	r3, r3, #10
 800c5aa:	b29b      	uxth	r3, r3
 800c5ac:	4313      	orrs	r3, r2
 800c5ae:	b29a      	uxth	r2, r3
 800c5b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c5b2:	801a      	strh	r2, [r3, #0]
 800c5b4:	e030      	b.n	800c618 <USB_EPStartXfer+0xcfa>
 800c5b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c5ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	785b      	ldrb	r3, [r3, #1]
 800c5c2:	2b01      	cmp	r3, #1
 800c5c4:	d128      	bne.n	800c618 <USB_EPStartXfer+0xcfa>
 800c5c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c5ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c5d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c5d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c5e2:	b29b      	uxth	r3, r3
 800c5e4:	461a      	mov	r2, r3
 800c5e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c5ea:	4413      	add	r3, r2
 800c5ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c5f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c5f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	781b      	ldrb	r3, [r3, #0]
 800c5fc:	00da      	lsls	r2, r3, #3
 800c5fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c602:	4413      	add	r3, r2
 800c604:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c608:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c60c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c610:	b29a      	uxth	r2, r3
 800c612:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c616:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800c618:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c61c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	891b      	ldrh	r3, [r3, #8]
 800c624:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c628:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c62c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	6959      	ldr	r1, [r3, #20]
 800c634:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c638:	b29b      	uxth	r3, r3
 800c63a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c63e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800c642:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800c646:	6800      	ldr	r0, [r0, #0]
 800c648:	f000 fe54 	bl	800d2f4 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800c64c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c650:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c654:	681a      	ldr	r2, [r3, #0]
 800c656:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c65a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	781b      	ldrb	r3, [r3, #0]
 800c662:	009b      	lsls	r3, r3, #2
 800c664:	4413      	add	r3, r2
 800c666:	881b      	ldrh	r3, [r3, #0]
 800c668:	b29b      	uxth	r3, r3
 800c66a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c66e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c672:	817b      	strh	r3, [r7, #10]
 800c674:	897b      	ldrh	r3, [r7, #10]
 800c676:	f083 0310 	eor.w	r3, r3, #16
 800c67a:	817b      	strh	r3, [r7, #10]
 800c67c:	897b      	ldrh	r3, [r7, #10]
 800c67e:	f083 0320 	eor.w	r3, r3, #32
 800c682:	817b      	strh	r3, [r7, #10]
 800c684:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c688:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c68c:	681a      	ldr	r2, [r3, #0]
 800c68e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c692:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	781b      	ldrb	r3, [r3, #0]
 800c69a:	009b      	lsls	r3, r3, #2
 800c69c:	441a      	add	r2, r3
 800c69e:	897b      	ldrh	r3, [r7, #10]
 800c6a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c6a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c6a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c6ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c6b0:	b29b      	uxth	r3, r3
 800c6b2:	8013      	strh	r3, [r2, #0]
 800c6b4:	f000 bcde 	b.w	800d074 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800c6b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c6bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	7b1b      	ldrb	r3, [r3, #12]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	f040 80bb 	bne.w	800c840 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800c6ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c6ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	699a      	ldr	r2, [r3, #24]
 800c6d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c6da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	691b      	ldr	r3, [r3, #16]
 800c6e2:	429a      	cmp	r2, r3
 800c6e4:	d917      	bls.n	800c716 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800c6e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c6ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	691b      	ldr	r3, [r3, #16]
 800c6f2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800c6f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c6fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	699a      	ldr	r2, [r3, #24]
 800c702:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c706:	1ad2      	subs	r2, r2, r3
 800c708:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c70c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	619a      	str	r2, [r3, #24]
 800c714:	e00e      	b.n	800c734 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800c716:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c71a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	699b      	ldr	r3, [r3, #24]
 800c722:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800c726:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c72a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	2200      	movs	r2, #0
 800c732:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800c734:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c738:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c742:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c746:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c750:	b29b      	uxth	r3, r3
 800c752:	461a      	mov	r2, r3
 800c754:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c758:	4413      	add	r3, r2
 800c75a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c75e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c762:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	781b      	ldrb	r3, [r3, #0]
 800c76a:	00da      	lsls	r2, r3, #3
 800c76c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c770:	4413      	add	r3, r2
 800c772:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c776:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c77a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c77e:	881b      	ldrh	r3, [r3, #0]
 800c780:	b29b      	uxth	r3, r3
 800c782:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c786:	b29a      	uxth	r2, r3
 800c788:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c78c:	801a      	strh	r2, [r3, #0]
 800c78e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c792:	2b3e      	cmp	r3, #62	@ 0x3e
 800c794:	d924      	bls.n	800c7e0 <USB_EPStartXfer+0xec2>
 800c796:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c79a:	095b      	lsrs	r3, r3, #5
 800c79c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c7a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7a4:	f003 031f 	and.w	r3, r3, #31
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d104      	bne.n	800c7b6 <USB_EPStartXfer+0xe98>
 800c7ac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800c7b0:	3b01      	subs	r3, #1
 800c7b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c7b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c7ba:	881b      	ldrh	r3, [r3, #0]
 800c7bc:	b29a      	uxth	r2, r3
 800c7be:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800c7c2:	b29b      	uxth	r3, r3
 800c7c4:	029b      	lsls	r3, r3, #10
 800c7c6:	b29b      	uxth	r3, r3
 800c7c8:	4313      	orrs	r3, r2
 800c7ca:	b29b      	uxth	r3, r3
 800c7cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c7d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c7d4:	b29a      	uxth	r2, r3
 800c7d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c7da:	801a      	strh	r2, [r3, #0]
 800c7dc:	f000 bc10 	b.w	800d000 <USB_EPStartXfer+0x16e2>
 800c7e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d10c      	bne.n	800c802 <USB_EPStartXfer+0xee4>
 800c7e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c7ec:	881b      	ldrh	r3, [r3, #0]
 800c7ee:	b29b      	uxth	r3, r3
 800c7f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c7f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c7f8:	b29a      	uxth	r2, r3
 800c7fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c7fe:	801a      	strh	r2, [r3, #0]
 800c800:	e3fe      	b.n	800d000 <USB_EPStartXfer+0x16e2>
 800c802:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c806:	085b      	lsrs	r3, r3, #1
 800c808:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c80c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c810:	f003 0301 	and.w	r3, r3, #1
 800c814:	2b00      	cmp	r3, #0
 800c816:	d004      	beq.n	800c822 <USB_EPStartXfer+0xf04>
 800c818:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800c81c:	3301      	adds	r3, #1
 800c81e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c822:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c826:	881b      	ldrh	r3, [r3, #0]
 800c828:	b29a      	uxth	r2, r3
 800c82a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800c82e:	b29b      	uxth	r3, r3
 800c830:	029b      	lsls	r3, r3, #10
 800c832:	b29b      	uxth	r3, r3
 800c834:	4313      	orrs	r3, r2
 800c836:	b29a      	uxth	r2, r3
 800c838:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c83c:	801a      	strh	r2, [r3, #0]
 800c83e:	e3df      	b.n	800d000 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800c840:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c844:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	78db      	ldrb	r3, [r3, #3]
 800c84c:	2b02      	cmp	r3, #2
 800c84e:	f040 8218 	bne.w	800cc82 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800c852:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c856:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	785b      	ldrb	r3, [r3, #1]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	f040 809d 	bne.w	800c99e <USB_EPStartXfer+0x1080>
 800c864:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c868:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c872:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c876:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c880:	b29b      	uxth	r3, r3
 800c882:	461a      	mov	r2, r3
 800c884:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c888:	4413      	add	r3, r2
 800c88a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c88e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c892:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	781b      	ldrb	r3, [r3, #0]
 800c89a:	00da      	lsls	r2, r3, #3
 800c89c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c8a0:	4413      	add	r3, r2
 800c8a2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c8a6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c8aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c8ae:	881b      	ldrh	r3, [r3, #0]
 800c8b0:	b29b      	uxth	r3, r3
 800c8b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c8b6:	b29a      	uxth	r2, r3
 800c8b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c8bc:	801a      	strh	r2, [r3, #0]
 800c8be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	691b      	ldr	r3, [r3, #16]
 800c8ca:	2b3e      	cmp	r3, #62	@ 0x3e
 800c8cc:	d92b      	bls.n	800c926 <USB_EPStartXfer+0x1008>
 800c8ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	691b      	ldr	r3, [r3, #16]
 800c8da:	095b      	lsrs	r3, r3, #5
 800c8dc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c8e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	691b      	ldr	r3, [r3, #16]
 800c8ec:	f003 031f 	and.w	r3, r3, #31
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d104      	bne.n	800c8fe <USB_EPStartXfer+0xfe0>
 800c8f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c8f8:	3b01      	subs	r3, #1
 800c8fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c8fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c902:	881b      	ldrh	r3, [r3, #0]
 800c904:	b29a      	uxth	r2, r3
 800c906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c90a:	b29b      	uxth	r3, r3
 800c90c:	029b      	lsls	r3, r3, #10
 800c90e:	b29b      	uxth	r3, r3
 800c910:	4313      	orrs	r3, r2
 800c912:	b29b      	uxth	r3, r3
 800c914:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c918:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c91c:	b29a      	uxth	r2, r3
 800c91e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c922:	801a      	strh	r2, [r3, #0]
 800c924:	e070      	b.n	800ca08 <USB_EPStartXfer+0x10ea>
 800c926:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c92a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	691b      	ldr	r3, [r3, #16]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d10c      	bne.n	800c950 <USB_EPStartXfer+0x1032>
 800c936:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c93a:	881b      	ldrh	r3, [r3, #0]
 800c93c:	b29b      	uxth	r3, r3
 800c93e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c942:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c946:	b29a      	uxth	r2, r3
 800c948:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c94c:	801a      	strh	r2, [r3, #0]
 800c94e:	e05b      	b.n	800ca08 <USB_EPStartXfer+0x10ea>
 800c950:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c954:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	691b      	ldr	r3, [r3, #16]
 800c95c:	085b      	lsrs	r3, r3, #1
 800c95e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c962:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c966:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	691b      	ldr	r3, [r3, #16]
 800c96e:	f003 0301 	and.w	r3, r3, #1
 800c972:	2b00      	cmp	r3, #0
 800c974:	d004      	beq.n	800c980 <USB_EPStartXfer+0x1062>
 800c976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c97a:	3301      	adds	r3, #1
 800c97c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c980:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c984:	881b      	ldrh	r3, [r3, #0]
 800c986:	b29a      	uxth	r2, r3
 800c988:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c98c:	b29b      	uxth	r3, r3
 800c98e:	029b      	lsls	r3, r3, #10
 800c990:	b29b      	uxth	r3, r3
 800c992:	4313      	orrs	r3, r2
 800c994:	b29a      	uxth	r2, r3
 800c996:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c99a:	801a      	strh	r2, [r3, #0]
 800c99c:	e034      	b.n	800ca08 <USB_EPStartXfer+0x10ea>
 800c99e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c9a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	785b      	ldrb	r3, [r3, #1]
 800c9aa:	2b01      	cmp	r3, #1
 800c9ac:	d12c      	bne.n	800ca08 <USB_EPStartXfer+0x10ea>
 800c9ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c9b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c9bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c9c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c9ca:	b29b      	uxth	r3, r3
 800c9cc:	461a      	mov	r2, r3
 800c9ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c9d2:	4413      	add	r3, r2
 800c9d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c9d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c9dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	781b      	ldrb	r3, [r3, #0]
 800c9e4:	00da      	lsls	r2, r3, #3
 800c9e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c9ea:	4413      	add	r3, r2
 800c9ec:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c9f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c9f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c9f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	691b      	ldr	r3, [r3, #16]
 800ca00:	b29a      	uxth	r2, r3
 800ca02:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800ca06:	801a      	strh	r2, [r3, #0]
 800ca08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca0c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ca16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	785b      	ldrb	r3, [r3, #1]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	f040 809d 	bne.w	800cb62 <USB_EPStartXfer+0x1244>
 800ca28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca2c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ca36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ca44:	b29b      	uxth	r3, r3
 800ca46:	461a      	mov	r2, r3
 800ca48:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ca4c:	4413      	add	r3, r2
 800ca4e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ca52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	781b      	ldrb	r3, [r3, #0]
 800ca5e:	00da      	lsls	r2, r3, #3
 800ca60:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ca64:	4413      	add	r3, r2
 800ca66:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ca6a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ca6e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ca72:	881b      	ldrh	r3, [r3, #0]
 800ca74:	b29b      	uxth	r3, r3
 800ca76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ca7a:	b29a      	uxth	r2, r3
 800ca7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ca80:	801a      	strh	r2, [r3, #0]
 800ca82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	691b      	ldr	r3, [r3, #16]
 800ca8e:	2b3e      	cmp	r3, #62	@ 0x3e
 800ca90:	d92b      	bls.n	800caea <USB_EPStartXfer+0x11cc>
 800ca92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	691b      	ldr	r3, [r3, #16]
 800ca9e:	095b      	lsrs	r3, r3, #5
 800caa0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800caa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800caa8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	691b      	ldr	r3, [r3, #16]
 800cab0:	f003 031f 	and.w	r3, r3, #31
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d104      	bne.n	800cac2 <USB_EPStartXfer+0x11a4>
 800cab8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cabc:	3b01      	subs	r3, #1
 800cabe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800cac2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cac6:	881b      	ldrh	r3, [r3, #0]
 800cac8:	b29a      	uxth	r2, r3
 800caca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cace:	b29b      	uxth	r3, r3
 800cad0:	029b      	lsls	r3, r3, #10
 800cad2:	b29b      	uxth	r3, r3
 800cad4:	4313      	orrs	r3, r2
 800cad6:	b29b      	uxth	r3, r3
 800cad8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cadc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cae0:	b29a      	uxth	r2, r3
 800cae2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cae6:	801a      	strh	r2, [r3, #0]
 800cae8:	e069      	b.n	800cbbe <USB_EPStartXfer+0x12a0>
 800caea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800caee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	691b      	ldr	r3, [r3, #16]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d10c      	bne.n	800cb14 <USB_EPStartXfer+0x11f6>
 800cafa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cafe:	881b      	ldrh	r3, [r3, #0]
 800cb00:	b29b      	uxth	r3, r3
 800cb02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cb06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cb0a:	b29a      	uxth	r2, r3
 800cb0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cb10:	801a      	strh	r2, [r3, #0]
 800cb12:	e054      	b.n	800cbbe <USB_EPStartXfer+0x12a0>
 800cb14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	691b      	ldr	r3, [r3, #16]
 800cb20:	085b      	lsrs	r3, r3, #1
 800cb22:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800cb26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	691b      	ldr	r3, [r3, #16]
 800cb32:	f003 0301 	and.w	r3, r3, #1
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d004      	beq.n	800cb44 <USB_EPStartXfer+0x1226>
 800cb3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cb3e:	3301      	adds	r3, #1
 800cb40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800cb44:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cb48:	881b      	ldrh	r3, [r3, #0]
 800cb4a:	b29a      	uxth	r2, r3
 800cb4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cb50:	b29b      	uxth	r3, r3
 800cb52:	029b      	lsls	r3, r3, #10
 800cb54:	b29b      	uxth	r3, r3
 800cb56:	4313      	orrs	r3, r2
 800cb58:	b29a      	uxth	r2, r3
 800cb5a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cb5e:	801a      	strh	r2, [r3, #0]
 800cb60:	e02d      	b.n	800cbbe <USB_EPStartXfer+0x12a0>
 800cb62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	785b      	ldrb	r3, [r3, #1]
 800cb6e:	2b01      	cmp	r3, #1
 800cb70:	d125      	bne.n	800cbbe <USB_EPStartXfer+0x12a0>
 800cb72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb76:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cb80:	b29b      	uxth	r3, r3
 800cb82:	461a      	mov	r2, r3
 800cb84:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cb88:	4413      	add	r3, r2
 800cb8a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800cb8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	781b      	ldrb	r3, [r3, #0]
 800cb9a:	00da      	lsls	r2, r3, #3
 800cb9c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cba0:	4413      	add	r3, r2
 800cba2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800cba6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800cbaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cbae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	691b      	ldr	r3, [r3, #16]
 800cbb6:	b29a      	uxth	r2, r3
 800cbb8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cbbc:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800cbbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cbc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	69db      	ldr	r3, [r3, #28]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	f000 8218 	beq.w	800d000 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800cbd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cbd4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cbd8:	681a      	ldr	r2, [r3, #0]
 800cbda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cbde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	781b      	ldrb	r3, [r3, #0]
 800cbe6:	009b      	lsls	r3, r3, #2
 800cbe8:	4413      	add	r3, r2
 800cbea:	881b      	ldrh	r3, [r3, #0]
 800cbec:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800cbf0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800cbf4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d005      	beq.n	800cc08 <USB_EPStartXfer+0x12ea>
 800cbfc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800cc00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d10d      	bne.n	800cc24 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800cc08:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800cc0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	f040 81f5 	bne.w	800d000 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800cc16:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800cc1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	f040 81ee 	bne.w	800d000 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800cc24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc28:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cc2c:	681a      	ldr	r2, [r3, #0]
 800cc2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	781b      	ldrb	r3, [r3, #0]
 800cc3a:	009b      	lsls	r3, r3, #2
 800cc3c:	4413      	add	r3, r2
 800cc3e:	881b      	ldrh	r3, [r3, #0]
 800cc40:	b29b      	uxth	r3, r3
 800cc42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cc46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cc4a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800cc4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cc56:	681a      	ldr	r2, [r3, #0]
 800cc58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	781b      	ldrb	r3, [r3, #0]
 800cc64:	009b      	lsls	r3, r3, #2
 800cc66:	441a      	add	r2, r3
 800cc68:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800cc6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cc70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cc74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cc78:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800cc7c:	b29b      	uxth	r3, r3
 800cc7e:	8013      	strh	r3, [r2, #0]
 800cc80:	e1be      	b.n	800d000 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800cc82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	78db      	ldrb	r3, [r3, #3]
 800cc8e:	2b01      	cmp	r3, #1
 800cc90:	f040 81b4 	bne.w	800cffc <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800cc94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	699a      	ldr	r2, [r3, #24]
 800cca0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cca4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	691b      	ldr	r3, [r3, #16]
 800ccac:	429a      	cmp	r2, r3
 800ccae:	d917      	bls.n	800cce0 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800ccb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ccb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	691b      	ldr	r3, [r3, #16]
 800ccbc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800ccc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ccc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	699a      	ldr	r2, [r3, #24]
 800cccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ccd0:	1ad2      	subs	r2, r2, r3
 800ccd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ccd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	619a      	str	r2, [r3, #24]
 800ccde:	e00e      	b.n	800ccfe <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800cce0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cce4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	699b      	ldr	r3, [r3, #24]
 800ccec:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800ccf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ccf4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800ccfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	785b      	ldrb	r3, [r3, #1]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	f040 8085 	bne.w	800ce1a <USB_EPStartXfer+0x14fc>
 800cd10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd14:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800cd1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd22:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cd2c:	b29b      	uxth	r3, r3
 800cd2e:	461a      	mov	r2, r3
 800cd30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800cd34:	4413      	add	r3, r2
 800cd36:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800cd3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	781b      	ldrb	r3, [r3, #0]
 800cd46:	00da      	lsls	r2, r3, #3
 800cd48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800cd4c:	4413      	add	r3, r2
 800cd4e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cd52:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800cd56:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800cd5a:	881b      	ldrh	r3, [r3, #0]
 800cd5c:	b29b      	uxth	r3, r3
 800cd5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cd62:	b29a      	uxth	r2, r3
 800cd64:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800cd68:	801a      	strh	r2, [r3, #0]
 800cd6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd6e:	2b3e      	cmp	r3, #62	@ 0x3e
 800cd70:	d923      	bls.n	800cdba <USB_EPStartXfer+0x149c>
 800cd72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd76:	095b      	lsrs	r3, r3, #5
 800cd78:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800cd7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd80:	f003 031f 	and.w	r3, r3, #31
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d104      	bne.n	800cd92 <USB_EPStartXfer+0x1474>
 800cd88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cd8c:	3b01      	subs	r3, #1
 800cd8e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800cd92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800cd96:	881b      	ldrh	r3, [r3, #0]
 800cd98:	b29a      	uxth	r2, r3
 800cd9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cd9e:	b29b      	uxth	r3, r3
 800cda0:	029b      	lsls	r3, r3, #10
 800cda2:	b29b      	uxth	r3, r3
 800cda4:	4313      	orrs	r3, r2
 800cda6:	b29b      	uxth	r3, r3
 800cda8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cdac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cdb0:	b29a      	uxth	r2, r3
 800cdb2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800cdb6:	801a      	strh	r2, [r3, #0]
 800cdb8:	e060      	b.n	800ce7c <USB_EPStartXfer+0x155e>
 800cdba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d10c      	bne.n	800cddc <USB_EPStartXfer+0x14be>
 800cdc2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800cdc6:	881b      	ldrh	r3, [r3, #0]
 800cdc8:	b29b      	uxth	r3, r3
 800cdca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cdce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cdd2:	b29a      	uxth	r2, r3
 800cdd4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800cdd8:	801a      	strh	r2, [r3, #0]
 800cdda:	e04f      	b.n	800ce7c <USB_EPStartXfer+0x155e>
 800cddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cde0:	085b      	lsrs	r3, r3, #1
 800cde2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800cde6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cdea:	f003 0301 	and.w	r3, r3, #1
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d004      	beq.n	800cdfc <USB_EPStartXfer+0x14de>
 800cdf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cdf6:	3301      	adds	r3, #1
 800cdf8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800cdfc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ce00:	881b      	ldrh	r3, [r3, #0]
 800ce02:	b29a      	uxth	r2, r3
 800ce04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ce08:	b29b      	uxth	r3, r3
 800ce0a:	029b      	lsls	r3, r3, #10
 800ce0c:	b29b      	uxth	r3, r3
 800ce0e:	4313      	orrs	r3, r2
 800ce10:	b29a      	uxth	r2, r3
 800ce12:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ce16:	801a      	strh	r2, [r3, #0]
 800ce18:	e030      	b.n	800ce7c <USB_EPStartXfer+0x155e>
 800ce1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	785b      	ldrb	r3, [r3, #1]
 800ce26:	2b01      	cmp	r3, #1
 800ce28:	d128      	bne.n	800ce7c <USB_EPStartXfer+0x155e>
 800ce2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ce38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ce46:	b29b      	uxth	r3, r3
 800ce48:	461a      	mov	r2, r3
 800ce4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ce4e:	4413      	add	r3, r2
 800ce50:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ce54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	781b      	ldrb	r3, [r3, #0]
 800ce60:	00da      	lsls	r2, r3, #3
 800ce62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ce66:	4413      	add	r3, r2
 800ce68:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ce6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ce70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce74:	b29a      	uxth	r2, r3
 800ce76:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800ce7a:	801a      	strh	r2, [r3, #0]
 800ce7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce80:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ce8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	785b      	ldrb	r3, [r3, #1]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	f040 8085 	bne.w	800cfa6 <USB_EPStartXfer+0x1688>
 800ce9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cea0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800ceaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ceae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ceb8:	b29b      	uxth	r3, r3
 800ceba:	461a      	mov	r2, r3
 800cebc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800cec0:	4413      	add	r3, r2
 800cec2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800cec6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ceca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	781b      	ldrb	r3, [r3, #0]
 800ced2:	00da      	lsls	r2, r3, #3
 800ced4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800ced8:	4413      	add	r3, r2
 800ceda:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800cede:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800cee2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800cee6:	881b      	ldrh	r3, [r3, #0]
 800cee8:	b29b      	uxth	r3, r3
 800ceea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ceee:	b29a      	uxth	r2, r3
 800cef0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800cef4:	801a      	strh	r2, [r3, #0]
 800cef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cefa:	2b3e      	cmp	r3, #62	@ 0x3e
 800cefc:	d923      	bls.n	800cf46 <USB_EPStartXfer+0x1628>
 800cefe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf02:	095b      	lsrs	r3, r3, #5
 800cf04:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800cf08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf0c:	f003 031f 	and.w	r3, r3, #31
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d104      	bne.n	800cf1e <USB_EPStartXfer+0x1600>
 800cf14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cf18:	3b01      	subs	r3, #1
 800cf1a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800cf1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800cf22:	881b      	ldrh	r3, [r3, #0]
 800cf24:	b29a      	uxth	r2, r3
 800cf26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cf2a:	b29b      	uxth	r3, r3
 800cf2c:	029b      	lsls	r3, r3, #10
 800cf2e:	b29b      	uxth	r3, r3
 800cf30:	4313      	orrs	r3, r2
 800cf32:	b29b      	uxth	r3, r3
 800cf34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cf38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cf3c:	b29a      	uxth	r2, r3
 800cf3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800cf42:	801a      	strh	r2, [r3, #0]
 800cf44:	e05c      	b.n	800d000 <USB_EPStartXfer+0x16e2>
 800cf46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d10c      	bne.n	800cf68 <USB_EPStartXfer+0x164a>
 800cf4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800cf52:	881b      	ldrh	r3, [r3, #0]
 800cf54:	b29b      	uxth	r3, r3
 800cf56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cf5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cf5e:	b29a      	uxth	r2, r3
 800cf60:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800cf64:	801a      	strh	r2, [r3, #0]
 800cf66:	e04b      	b.n	800d000 <USB_EPStartXfer+0x16e2>
 800cf68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf6c:	085b      	lsrs	r3, r3, #1
 800cf6e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800cf72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf76:	f003 0301 	and.w	r3, r3, #1
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d004      	beq.n	800cf88 <USB_EPStartXfer+0x166a>
 800cf7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cf82:	3301      	adds	r3, #1
 800cf84:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800cf88:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800cf8c:	881b      	ldrh	r3, [r3, #0]
 800cf8e:	b29a      	uxth	r2, r3
 800cf90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cf94:	b29b      	uxth	r3, r3
 800cf96:	029b      	lsls	r3, r3, #10
 800cf98:	b29b      	uxth	r3, r3
 800cf9a:	4313      	orrs	r3, r2
 800cf9c:	b29a      	uxth	r2, r3
 800cf9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800cfa2:	801a      	strh	r2, [r3, #0]
 800cfa4:	e02c      	b.n	800d000 <USB_EPStartXfer+0x16e2>
 800cfa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	785b      	ldrb	r3, [r3, #1]
 800cfb2:	2b01      	cmp	r3, #1
 800cfb4:	d124      	bne.n	800d000 <USB_EPStartXfer+0x16e2>
 800cfb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cfc4:	b29b      	uxth	r3, r3
 800cfc6:	461a      	mov	r2, r3
 800cfc8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cfcc:	4413      	add	r3, r2
 800cfce:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800cfd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	781b      	ldrb	r3, [r3, #0]
 800cfde:	00da      	lsls	r2, r3, #3
 800cfe0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cfe4:	4413      	add	r3, r2
 800cfe6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800cfea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800cfee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cff2:	b29a      	uxth	r2, r3
 800cff4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800cff8:	801a      	strh	r2, [r3, #0]
 800cffa:	e001      	b.n	800d000 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800cffc:	2301      	movs	r3, #1
 800cffe:	e03a      	b.n	800d076 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d000:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d004:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d008:	681a      	ldr	r2, [r3, #0]
 800d00a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d00e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	781b      	ldrb	r3, [r3, #0]
 800d016:	009b      	lsls	r3, r3, #2
 800d018:	4413      	add	r3, r2
 800d01a:	881b      	ldrh	r3, [r3, #0]
 800d01c:	b29b      	uxth	r3, r3
 800d01e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d022:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d026:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800d02a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d02e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d032:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800d036:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d03a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d03e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800d042:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d046:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d04a:	681a      	ldr	r2, [r3, #0]
 800d04c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d050:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	781b      	ldrb	r3, [r3, #0]
 800d058:	009b      	lsls	r3, r3, #2
 800d05a:	441a      	add	r2, r3
 800d05c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d060:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d064:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d068:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d06c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d070:	b29b      	uxth	r3, r3
 800d072:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800d074:	2300      	movs	r3, #0
}
 800d076:	4618      	mov	r0, r3
 800d078:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800d07c:	46bd      	mov	sp, r7
 800d07e:	bd80      	pop	{r7, pc}

0800d080 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d080:	b480      	push	{r7}
 800d082:	b085      	sub	sp, #20
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
 800d088:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800d08a:	683b      	ldr	r3, [r7, #0]
 800d08c:	785b      	ldrb	r3, [r3, #1]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d020      	beq.n	800d0d4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800d092:	687a      	ldr	r2, [r7, #4]
 800d094:	683b      	ldr	r3, [r7, #0]
 800d096:	781b      	ldrb	r3, [r3, #0]
 800d098:	009b      	lsls	r3, r3, #2
 800d09a:	4413      	add	r3, r2
 800d09c:	881b      	ldrh	r3, [r3, #0]
 800d09e:	b29b      	uxth	r3, r3
 800d0a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d0a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d0a8:	81bb      	strh	r3, [r7, #12]
 800d0aa:	89bb      	ldrh	r3, [r7, #12]
 800d0ac:	f083 0310 	eor.w	r3, r3, #16
 800d0b0:	81bb      	strh	r3, [r7, #12]
 800d0b2:	687a      	ldr	r2, [r7, #4]
 800d0b4:	683b      	ldr	r3, [r7, #0]
 800d0b6:	781b      	ldrb	r3, [r3, #0]
 800d0b8:	009b      	lsls	r3, r3, #2
 800d0ba:	441a      	add	r2, r3
 800d0bc:	89bb      	ldrh	r3, [r7, #12]
 800d0be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d0c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d0c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d0ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d0ce:	b29b      	uxth	r3, r3
 800d0d0:	8013      	strh	r3, [r2, #0]
 800d0d2:	e01f      	b.n	800d114 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800d0d4:	687a      	ldr	r2, [r7, #4]
 800d0d6:	683b      	ldr	r3, [r7, #0]
 800d0d8:	781b      	ldrb	r3, [r3, #0]
 800d0da:	009b      	lsls	r3, r3, #2
 800d0dc:	4413      	add	r3, r2
 800d0de:	881b      	ldrh	r3, [r3, #0]
 800d0e0:	b29b      	uxth	r3, r3
 800d0e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d0e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d0ea:	81fb      	strh	r3, [r7, #14]
 800d0ec:	89fb      	ldrh	r3, [r7, #14]
 800d0ee:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d0f2:	81fb      	strh	r3, [r7, #14]
 800d0f4:	687a      	ldr	r2, [r7, #4]
 800d0f6:	683b      	ldr	r3, [r7, #0]
 800d0f8:	781b      	ldrb	r3, [r3, #0]
 800d0fa:	009b      	lsls	r3, r3, #2
 800d0fc:	441a      	add	r2, r3
 800d0fe:	89fb      	ldrh	r3, [r7, #14]
 800d100:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d104:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d108:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d10c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d110:	b29b      	uxth	r3, r3
 800d112:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800d114:	2300      	movs	r3, #0
}
 800d116:	4618      	mov	r0, r3
 800d118:	3714      	adds	r7, #20
 800d11a:	46bd      	mov	sp, r7
 800d11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d120:	4770      	bx	lr

0800d122 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d122:	b480      	push	{r7}
 800d124:	b087      	sub	sp, #28
 800d126:	af00      	add	r7, sp, #0
 800d128:	6078      	str	r0, [r7, #4]
 800d12a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800d12c:	683b      	ldr	r3, [r7, #0]
 800d12e:	7b1b      	ldrb	r3, [r3, #12]
 800d130:	2b00      	cmp	r3, #0
 800d132:	f040 809d 	bne.w	800d270 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800d136:	683b      	ldr	r3, [r7, #0]
 800d138:	785b      	ldrb	r3, [r3, #1]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d04c      	beq.n	800d1d8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d13e:	687a      	ldr	r2, [r7, #4]
 800d140:	683b      	ldr	r3, [r7, #0]
 800d142:	781b      	ldrb	r3, [r3, #0]
 800d144:	009b      	lsls	r3, r3, #2
 800d146:	4413      	add	r3, r2
 800d148:	881b      	ldrh	r3, [r3, #0]
 800d14a:	823b      	strh	r3, [r7, #16]
 800d14c:	8a3b      	ldrh	r3, [r7, #16]
 800d14e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d152:	2b00      	cmp	r3, #0
 800d154:	d01b      	beq.n	800d18e <USB_EPClearStall+0x6c>
 800d156:	687a      	ldr	r2, [r7, #4]
 800d158:	683b      	ldr	r3, [r7, #0]
 800d15a:	781b      	ldrb	r3, [r3, #0]
 800d15c:	009b      	lsls	r3, r3, #2
 800d15e:	4413      	add	r3, r2
 800d160:	881b      	ldrh	r3, [r3, #0]
 800d162:	b29b      	uxth	r3, r3
 800d164:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d168:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d16c:	81fb      	strh	r3, [r7, #14]
 800d16e:	687a      	ldr	r2, [r7, #4]
 800d170:	683b      	ldr	r3, [r7, #0]
 800d172:	781b      	ldrb	r3, [r3, #0]
 800d174:	009b      	lsls	r3, r3, #2
 800d176:	441a      	add	r2, r3
 800d178:	89fb      	ldrh	r3, [r7, #14]
 800d17a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d17e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d182:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d186:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d18a:	b29b      	uxth	r3, r3
 800d18c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d18e:	683b      	ldr	r3, [r7, #0]
 800d190:	78db      	ldrb	r3, [r3, #3]
 800d192:	2b01      	cmp	r3, #1
 800d194:	d06c      	beq.n	800d270 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d196:	687a      	ldr	r2, [r7, #4]
 800d198:	683b      	ldr	r3, [r7, #0]
 800d19a:	781b      	ldrb	r3, [r3, #0]
 800d19c:	009b      	lsls	r3, r3, #2
 800d19e:	4413      	add	r3, r2
 800d1a0:	881b      	ldrh	r3, [r3, #0]
 800d1a2:	b29b      	uxth	r3, r3
 800d1a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d1a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d1ac:	81bb      	strh	r3, [r7, #12]
 800d1ae:	89bb      	ldrh	r3, [r7, #12]
 800d1b0:	f083 0320 	eor.w	r3, r3, #32
 800d1b4:	81bb      	strh	r3, [r7, #12]
 800d1b6:	687a      	ldr	r2, [r7, #4]
 800d1b8:	683b      	ldr	r3, [r7, #0]
 800d1ba:	781b      	ldrb	r3, [r3, #0]
 800d1bc:	009b      	lsls	r3, r3, #2
 800d1be:	441a      	add	r2, r3
 800d1c0:	89bb      	ldrh	r3, [r7, #12]
 800d1c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d1c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d1ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d1ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d1d2:	b29b      	uxth	r3, r3
 800d1d4:	8013      	strh	r3, [r2, #0]
 800d1d6:	e04b      	b.n	800d270 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d1d8:	687a      	ldr	r2, [r7, #4]
 800d1da:	683b      	ldr	r3, [r7, #0]
 800d1dc:	781b      	ldrb	r3, [r3, #0]
 800d1de:	009b      	lsls	r3, r3, #2
 800d1e0:	4413      	add	r3, r2
 800d1e2:	881b      	ldrh	r3, [r3, #0]
 800d1e4:	82fb      	strh	r3, [r7, #22]
 800d1e6:	8afb      	ldrh	r3, [r7, #22]
 800d1e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d01b      	beq.n	800d228 <USB_EPClearStall+0x106>
 800d1f0:	687a      	ldr	r2, [r7, #4]
 800d1f2:	683b      	ldr	r3, [r7, #0]
 800d1f4:	781b      	ldrb	r3, [r3, #0]
 800d1f6:	009b      	lsls	r3, r3, #2
 800d1f8:	4413      	add	r3, r2
 800d1fa:	881b      	ldrh	r3, [r3, #0]
 800d1fc:	b29b      	uxth	r3, r3
 800d1fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d202:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d206:	82bb      	strh	r3, [r7, #20]
 800d208:	687a      	ldr	r2, [r7, #4]
 800d20a:	683b      	ldr	r3, [r7, #0]
 800d20c:	781b      	ldrb	r3, [r3, #0]
 800d20e:	009b      	lsls	r3, r3, #2
 800d210:	441a      	add	r2, r3
 800d212:	8abb      	ldrh	r3, [r7, #20]
 800d214:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d218:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d21c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d220:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d224:	b29b      	uxth	r3, r3
 800d226:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d228:	687a      	ldr	r2, [r7, #4]
 800d22a:	683b      	ldr	r3, [r7, #0]
 800d22c:	781b      	ldrb	r3, [r3, #0]
 800d22e:	009b      	lsls	r3, r3, #2
 800d230:	4413      	add	r3, r2
 800d232:	881b      	ldrh	r3, [r3, #0]
 800d234:	b29b      	uxth	r3, r3
 800d236:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d23a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d23e:	827b      	strh	r3, [r7, #18]
 800d240:	8a7b      	ldrh	r3, [r7, #18]
 800d242:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d246:	827b      	strh	r3, [r7, #18]
 800d248:	8a7b      	ldrh	r3, [r7, #18]
 800d24a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d24e:	827b      	strh	r3, [r7, #18]
 800d250:	687a      	ldr	r2, [r7, #4]
 800d252:	683b      	ldr	r3, [r7, #0]
 800d254:	781b      	ldrb	r3, [r3, #0]
 800d256:	009b      	lsls	r3, r3, #2
 800d258:	441a      	add	r2, r3
 800d25a:	8a7b      	ldrh	r3, [r7, #18]
 800d25c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d260:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d264:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d268:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d26c:	b29b      	uxth	r3, r3
 800d26e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800d270:	2300      	movs	r3, #0
}
 800d272:	4618      	mov	r0, r3
 800d274:	371c      	adds	r7, #28
 800d276:	46bd      	mov	sp, r7
 800d278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d27c:	4770      	bx	lr

0800d27e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800d27e:	b480      	push	{r7}
 800d280:	b083      	sub	sp, #12
 800d282:	af00      	add	r7, sp, #0
 800d284:	6078      	str	r0, [r7, #4]
 800d286:	460b      	mov	r3, r1
 800d288:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800d28a:	78fb      	ldrb	r3, [r7, #3]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d103      	bne.n	800d298 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	2280      	movs	r2, #128	@ 0x80
 800d294:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800d298:	2300      	movs	r3, #0
}
 800d29a:	4618      	mov	r0, r3
 800d29c:	370c      	adds	r7, #12
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a4:	4770      	bx	lr

0800d2a6 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800d2a6:	b480      	push	{r7}
 800d2a8:	b083      	sub	sp, #12
 800d2aa:	af00      	add	r7, sp, #0
 800d2ac:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800d2b4:	b29b      	uxth	r3, r3
 800d2b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d2ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d2be:	b29a      	uxth	r2, r3
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800d2c6:	2300      	movs	r3, #0
}
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	370c      	adds	r7, #12
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d2:	4770      	bx	lr

0800d2d4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800d2d4:	b480      	push	{r7}
 800d2d6:	b085      	sub	sp, #20
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800d2e2:	b29b      	uxth	r3, r3
 800d2e4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800d2e6:	68fb      	ldr	r3, [r7, #12]
}
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	3714      	adds	r7, #20
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f2:	4770      	bx	lr

0800d2f4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d2f4:	b480      	push	{r7}
 800d2f6:	b08b      	sub	sp, #44	@ 0x2c
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	60f8      	str	r0, [r7, #12]
 800d2fc:	60b9      	str	r1, [r7, #8]
 800d2fe:	4611      	mov	r1, r2
 800d300:	461a      	mov	r2, r3
 800d302:	460b      	mov	r3, r1
 800d304:	80fb      	strh	r3, [r7, #6]
 800d306:	4613      	mov	r3, r2
 800d308:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800d30a:	88bb      	ldrh	r3, [r7, #4]
 800d30c:	3301      	adds	r3, #1
 800d30e:	085b      	lsrs	r3, r3, #1
 800d310:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800d316:	68bb      	ldr	r3, [r7, #8]
 800d318:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800d31a:	88fa      	ldrh	r2, [r7, #6]
 800d31c:	697b      	ldr	r3, [r7, #20]
 800d31e:	4413      	add	r3, r2
 800d320:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d324:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800d326:	69bb      	ldr	r3, [r7, #24]
 800d328:	627b      	str	r3, [r7, #36]	@ 0x24
 800d32a:	e01b      	b.n	800d364 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800d32c:	69fb      	ldr	r3, [r7, #28]
 800d32e:	781b      	ldrb	r3, [r3, #0]
 800d330:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800d332:	69fb      	ldr	r3, [r7, #28]
 800d334:	3301      	adds	r3, #1
 800d336:	781b      	ldrb	r3, [r3, #0]
 800d338:	021b      	lsls	r3, r3, #8
 800d33a:	b21a      	sxth	r2, r3
 800d33c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d340:	4313      	orrs	r3, r2
 800d342:	b21b      	sxth	r3, r3
 800d344:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800d346:	6a3b      	ldr	r3, [r7, #32]
 800d348:	8a7a      	ldrh	r2, [r7, #18]
 800d34a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800d34c:	6a3b      	ldr	r3, [r7, #32]
 800d34e:	3302      	adds	r3, #2
 800d350:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800d352:	69fb      	ldr	r3, [r7, #28]
 800d354:	3301      	adds	r3, #1
 800d356:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800d358:	69fb      	ldr	r3, [r7, #28]
 800d35a:	3301      	adds	r3, #1
 800d35c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800d35e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d360:	3b01      	subs	r3, #1
 800d362:	627b      	str	r3, [r7, #36]	@ 0x24
 800d364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d366:	2b00      	cmp	r3, #0
 800d368:	d1e0      	bne.n	800d32c <USB_WritePMA+0x38>
  }
}
 800d36a:	bf00      	nop
 800d36c:	bf00      	nop
 800d36e:	372c      	adds	r7, #44	@ 0x2c
 800d370:	46bd      	mov	sp, r7
 800d372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d376:	4770      	bx	lr

0800d378 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d378:	b480      	push	{r7}
 800d37a:	b08b      	sub	sp, #44	@ 0x2c
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	60f8      	str	r0, [r7, #12]
 800d380:	60b9      	str	r1, [r7, #8]
 800d382:	4611      	mov	r1, r2
 800d384:	461a      	mov	r2, r3
 800d386:	460b      	mov	r3, r1
 800d388:	80fb      	strh	r3, [r7, #6]
 800d38a:	4613      	mov	r3, r2
 800d38c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800d38e:	88bb      	ldrh	r3, [r7, #4]
 800d390:	085b      	lsrs	r3, r3, #1
 800d392:	b29b      	uxth	r3, r3
 800d394:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800d39a:	68bb      	ldr	r3, [r7, #8]
 800d39c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800d39e:	88fa      	ldrh	r2, [r7, #6]
 800d3a0:	697b      	ldr	r3, [r7, #20]
 800d3a2:	4413      	add	r3, r2
 800d3a4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d3a8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800d3aa:	69bb      	ldr	r3, [r7, #24]
 800d3ac:	627b      	str	r3, [r7, #36]	@ 0x24
 800d3ae:	e018      	b.n	800d3e2 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800d3b0:	6a3b      	ldr	r3, [r7, #32]
 800d3b2:	881b      	ldrh	r3, [r3, #0]
 800d3b4:	b29b      	uxth	r3, r3
 800d3b6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800d3b8:	6a3b      	ldr	r3, [r7, #32]
 800d3ba:	3302      	adds	r3, #2
 800d3bc:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800d3be:	693b      	ldr	r3, [r7, #16]
 800d3c0:	b2da      	uxtb	r2, r3
 800d3c2:	69fb      	ldr	r3, [r7, #28]
 800d3c4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800d3c6:	69fb      	ldr	r3, [r7, #28]
 800d3c8:	3301      	adds	r3, #1
 800d3ca:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800d3cc:	693b      	ldr	r3, [r7, #16]
 800d3ce:	0a1b      	lsrs	r3, r3, #8
 800d3d0:	b2da      	uxtb	r2, r3
 800d3d2:	69fb      	ldr	r3, [r7, #28]
 800d3d4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800d3d6:	69fb      	ldr	r3, [r7, #28]
 800d3d8:	3301      	adds	r3, #1
 800d3da:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800d3dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3de:	3b01      	subs	r3, #1
 800d3e0:	627b      	str	r3, [r7, #36]	@ 0x24
 800d3e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d1e3      	bne.n	800d3b0 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800d3e8:	88bb      	ldrh	r3, [r7, #4]
 800d3ea:	f003 0301 	and.w	r3, r3, #1
 800d3ee:	b29b      	uxth	r3, r3
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d007      	beq.n	800d404 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800d3f4:	6a3b      	ldr	r3, [r7, #32]
 800d3f6:	881b      	ldrh	r3, [r3, #0]
 800d3f8:	b29b      	uxth	r3, r3
 800d3fa:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800d3fc:	693b      	ldr	r3, [r7, #16]
 800d3fe:	b2da      	uxtb	r2, r3
 800d400:	69fb      	ldr	r3, [r7, #28]
 800d402:	701a      	strb	r2, [r3, #0]
  }
}
 800d404:	bf00      	nop
 800d406:	372c      	adds	r7, #44	@ 0x2c
 800d408:	46bd      	mov	sp, r7
 800d40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d40e:	4770      	bx	lr

0800d410 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d410:	b580      	push	{r7, lr}
 800d412:	b084      	sub	sp, #16
 800d414:	af00      	add	r7, sp, #0
 800d416:	6078      	str	r0, [r7, #4]
 800d418:	460b      	mov	r3, r1
 800d41a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d41c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800d420:	f002 f8fa 	bl	800f618 <USBD_static_malloc>
 800d424:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d105      	bne.n	800d438 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	2200      	movs	r2, #0
 800d430:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800d434:	2302      	movs	r3, #2
 800d436:	e066      	b.n	800d506 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	68fa      	ldr	r2, [r7, #12]
 800d43c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	7c1b      	ldrb	r3, [r3, #16]
 800d444:	2b00      	cmp	r3, #0
 800d446:	d119      	bne.n	800d47c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d448:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d44c:	2202      	movs	r2, #2
 800d44e:	2181      	movs	r1, #129	@ 0x81
 800d450:	6878      	ldr	r0, [r7, #4]
 800d452:	f001 ff88 	bl	800f366 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	2201      	movs	r2, #1
 800d45a:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d45c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d460:	2202      	movs	r2, #2
 800d462:	2101      	movs	r1, #1
 800d464:	6878      	ldr	r0, [r7, #4]
 800d466:	f001 ff7e 	bl	800f366 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	2201      	movs	r2, #1
 800d46e:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	2210      	movs	r2, #16
 800d476:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800d47a:	e016      	b.n	800d4aa <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d47c:	2340      	movs	r3, #64	@ 0x40
 800d47e:	2202      	movs	r2, #2
 800d480:	2181      	movs	r1, #129	@ 0x81
 800d482:	6878      	ldr	r0, [r7, #4]
 800d484:	f001 ff6f 	bl	800f366 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	2201      	movs	r2, #1
 800d48c:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d48e:	2340      	movs	r3, #64	@ 0x40
 800d490:	2202      	movs	r2, #2
 800d492:	2101      	movs	r1, #1
 800d494:	6878      	ldr	r0, [r7, #4]
 800d496:	f001 ff66 	bl	800f366 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	2201      	movs	r2, #1
 800d49e:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	2210      	movs	r2, #16
 800d4a6:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d4aa:	2308      	movs	r3, #8
 800d4ac:	2203      	movs	r2, #3
 800d4ae:	2182      	movs	r1, #130	@ 0x82
 800d4b0:	6878      	ldr	r0, [r7, #4]
 800d4b2:	f001 ff58 	bl	800f366 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	2201      	movs	r2, #1
 800d4ba:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	2200      	movs	r2, #0
 800d4d4:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	7c1b      	ldrb	r3, [r3, #16]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d109      	bne.n	800d4f4 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d4e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d4ea:	2101      	movs	r1, #1
 800d4ec:	6878      	ldr	r0, [r7, #4]
 800d4ee:	f002 f829 	bl	800f544 <USBD_LL_PrepareReceive>
 800d4f2:	e007      	b.n	800d504 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d4fa:	2340      	movs	r3, #64	@ 0x40
 800d4fc:	2101      	movs	r1, #1
 800d4fe:	6878      	ldr	r0, [r7, #4]
 800d500:	f002 f820 	bl	800f544 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d504:	2300      	movs	r3, #0
}
 800d506:	4618      	mov	r0, r3
 800d508:	3710      	adds	r7, #16
 800d50a:	46bd      	mov	sp, r7
 800d50c:	bd80      	pop	{r7, pc}

0800d50e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d50e:	b580      	push	{r7, lr}
 800d510:	b082      	sub	sp, #8
 800d512:	af00      	add	r7, sp, #0
 800d514:	6078      	str	r0, [r7, #4]
 800d516:	460b      	mov	r3, r1
 800d518:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800d51a:	2181      	movs	r1, #129	@ 0x81
 800d51c:	6878      	ldr	r0, [r7, #4]
 800d51e:	f001 ff48 	bl	800f3b2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	2200      	movs	r2, #0
 800d526:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800d528:	2101      	movs	r1, #1
 800d52a:	6878      	ldr	r0, [r7, #4]
 800d52c:	f001 ff41 	bl	800f3b2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	2200      	movs	r2, #0
 800d534:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800d538:	2182      	movs	r1, #130	@ 0x82
 800d53a:	6878      	ldr	r0, [r7, #4]
 800d53c:	f001 ff39 	bl	800f3b2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	2200      	movs	r2, #0
 800d544:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	2200      	movs	r2, #0
 800d54c:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d556:	2b00      	cmp	r3, #0
 800d558:	d00e      	beq.n	800d578 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d560:	685b      	ldr	r3, [r3, #4]
 800d562:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d56a:	4618      	mov	r0, r3
 800d56c:	f002 f862 	bl	800f634 <USBD_static_free>
    pdev->pClassData = NULL;
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	2200      	movs	r2, #0
 800d574:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d578:	2300      	movs	r3, #0
}
 800d57a:	4618      	mov	r0, r3
 800d57c:	3708      	adds	r7, #8
 800d57e:	46bd      	mov	sp, r7
 800d580:	bd80      	pop	{r7, pc}
	...

0800d584 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b086      	sub	sp, #24
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
 800d58c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d594:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d596:	2300      	movs	r3, #0
 800d598:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d59a:	2300      	movs	r3, #0
 800d59c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d59e:	2300      	movs	r3, #0
 800d5a0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d5a2:	693b      	ldr	r3, [r7, #16]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d101      	bne.n	800d5ac <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800d5a8:	2303      	movs	r3, #3
 800d5aa:	e0af      	b.n	800d70c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d5ac:	683b      	ldr	r3, [r7, #0]
 800d5ae:	781b      	ldrb	r3, [r3, #0]
 800d5b0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d03f      	beq.n	800d638 <USBD_CDC_Setup+0xb4>
 800d5b8:	2b20      	cmp	r3, #32
 800d5ba:	f040 809f 	bne.w	800d6fc <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d5be:	683b      	ldr	r3, [r7, #0]
 800d5c0:	88db      	ldrh	r3, [r3, #6]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d02e      	beq.n	800d624 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d5c6:	683b      	ldr	r3, [r7, #0]
 800d5c8:	781b      	ldrb	r3, [r3, #0]
 800d5ca:	b25b      	sxtb	r3, r3
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	da16      	bge.n	800d5fe <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d5d6:	689b      	ldr	r3, [r3, #8]
 800d5d8:	683a      	ldr	r2, [r7, #0]
 800d5da:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800d5dc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d5de:	683a      	ldr	r2, [r7, #0]
 800d5e0:	88d2      	ldrh	r2, [r2, #6]
 800d5e2:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d5e4:	683b      	ldr	r3, [r7, #0]
 800d5e6:	88db      	ldrh	r3, [r3, #6]
 800d5e8:	2b07      	cmp	r3, #7
 800d5ea:	bf28      	it	cs
 800d5ec:	2307      	movcs	r3, #7
 800d5ee:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d5f0:	693b      	ldr	r3, [r7, #16]
 800d5f2:	89fa      	ldrh	r2, [r7, #14]
 800d5f4:	4619      	mov	r1, r3
 800d5f6:	6878      	ldr	r0, [r7, #4]
 800d5f8:	f001 facd 	bl	800eb96 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800d5fc:	e085      	b.n	800d70a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800d5fe:	683b      	ldr	r3, [r7, #0]
 800d600:	785a      	ldrb	r2, [r3, #1]
 800d602:	693b      	ldr	r3, [r7, #16]
 800d604:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800d608:	683b      	ldr	r3, [r7, #0]
 800d60a:	88db      	ldrh	r3, [r3, #6]
 800d60c:	b2da      	uxtb	r2, r3
 800d60e:	693b      	ldr	r3, [r7, #16]
 800d610:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800d614:	6939      	ldr	r1, [r7, #16]
 800d616:	683b      	ldr	r3, [r7, #0]
 800d618:	88db      	ldrh	r3, [r3, #6]
 800d61a:	461a      	mov	r2, r3
 800d61c:	6878      	ldr	r0, [r7, #4]
 800d61e:	f001 fae6 	bl	800ebee <USBD_CtlPrepareRx>
      break;
 800d622:	e072      	b.n	800d70a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d62a:	689b      	ldr	r3, [r3, #8]
 800d62c:	683a      	ldr	r2, [r7, #0]
 800d62e:	7850      	ldrb	r0, [r2, #1]
 800d630:	2200      	movs	r2, #0
 800d632:	6839      	ldr	r1, [r7, #0]
 800d634:	4798      	blx	r3
      break;
 800d636:	e068      	b.n	800d70a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d638:	683b      	ldr	r3, [r7, #0]
 800d63a:	785b      	ldrb	r3, [r3, #1]
 800d63c:	2b0b      	cmp	r3, #11
 800d63e:	d852      	bhi.n	800d6e6 <USBD_CDC_Setup+0x162>
 800d640:	a201      	add	r2, pc, #4	@ (adr r2, 800d648 <USBD_CDC_Setup+0xc4>)
 800d642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d646:	bf00      	nop
 800d648:	0800d679 	.word	0x0800d679
 800d64c:	0800d6f5 	.word	0x0800d6f5
 800d650:	0800d6e7 	.word	0x0800d6e7
 800d654:	0800d6e7 	.word	0x0800d6e7
 800d658:	0800d6e7 	.word	0x0800d6e7
 800d65c:	0800d6e7 	.word	0x0800d6e7
 800d660:	0800d6e7 	.word	0x0800d6e7
 800d664:	0800d6e7 	.word	0x0800d6e7
 800d668:	0800d6e7 	.word	0x0800d6e7
 800d66c:	0800d6e7 	.word	0x0800d6e7
 800d670:	0800d6a3 	.word	0x0800d6a3
 800d674:	0800d6cd 	.word	0x0800d6cd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d67e:	b2db      	uxtb	r3, r3
 800d680:	2b03      	cmp	r3, #3
 800d682:	d107      	bne.n	800d694 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d684:	f107 030a 	add.w	r3, r7, #10
 800d688:	2202      	movs	r2, #2
 800d68a:	4619      	mov	r1, r3
 800d68c:	6878      	ldr	r0, [r7, #4]
 800d68e:	f001 fa82 	bl	800eb96 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d692:	e032      	b.n	800d6fa <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800d694:	6839      	ldr	r1, [r7, #0]
 800d696:	6878      	ldr	r0, [r7, #4]
 800d698:	f001 fa0c 	bl	800eab4 <USBD_CtlError>
            ret = USBD_FAIL;
 800d69c:	2303      	movs	r3, #3
 800d69e:	75fb      	strb	r3, [r7, #23]
          break;
 800d6a0:	e02b      	b.n	800d6fa <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d6a8:	b2db      	uxtb	r3, r3
 800d6aa:	2b03      	cmp	r3, #3
 800d6ac:	d107      	bne.n	800d6be <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d6ae:	f107 030d 	add.w	r3, r7, #13
 800d6b2:	2201      	movs	r2, #1
 800d6b4:	4619      	mov	r1, r3
 800d6b6:	6878      	ldr	r0, [r7, #4]
 800d6b8:	f001 fa6d 	bl	800eb96 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d6bc:	e01d      	b.n	800d6fa <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800d6be:	6839      	ldr	r1, [r7, #0]
 800d6c0:	6878      	ldr	r0, [r7, #4]
 800d6c2:	f001 f9f7 	bl	800eab4 <USBD_CtlError>
            ret = USBD_FAIL;
 800d6c6:	2303      	movs	r3, #3
 800d6c8:	75fb      	strb	r3, [r7, #23]
          break;
 800d6ca:	e016      	b.n	800d6fa <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d6d2:	b2db      	uxtb	r3, r3
 800d6d4:	2b03      	cmp	r3, #3
 800d6d6:	d00f      	beq.n	800d6f8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800d6d8:	6839      	ldr	r1, [r7, #0]
 800d6da:	6878      	ldr	r0, [r7, #4]
 800d6dc:	f001 f9ea 	bl	800eab4 <USBD_CtlError>
            ret = USBD_FAIL;
 800d6e0:	2303      	movs	r3, #3
 800d6e2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d6e4:	e008      	b.n	800d6f8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d6e6:	6839      	ldr	r1, [r7, #0]
 800d6e8:	6878      	ldr	r0, [r7, #4]
 800d6ea:	f001 f9e3 	bl	800eab4 <USBD_CtlError>
          ret = USBD_FAIL;
 800d6ee:	2303      	movs	r3, #3
 800d6f0:	75fb      	strb	r3, [r7, #23]
          break;
 800d6f2:	e002      	b.n	800d6fa <USBD_CDC_Setup+0x176>
          break;
 800d6f4:	bf00      	nop
 800d6f6:	e008      	b.n	800d70a <USBD_CDC_Setup+0x186>
          break;
 800d6f8:	bf00      	nop
      }
      break;
 800d6fa:	e006      	b.n	800d70a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800d6fc:	6839      	ldr	r1, [r7, #0]
 800d6fe:	6878      	ldr	r0, [r7, #4]
 800d700:	f001 f9d8 	bl	800eab4 <USBD_CtlError>
      ret = USBD_FAIL;
 800d704:	2303      	movs	r3, #3
 800d706:	75fb      	strb	r3, [r7, #23]
      break;
 800d708:	bf00      	nop
  }

  return (uint8_t)ret;
 800d70a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d70c:	4618      	mov	r0, r3
 800d70e:	3718      	adds	r7, #24
 800d710:	46bd      	mov	sp, r7
 800d712:	bd80      	pop	{r7, pc}

0800d714 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d714:	b580      	push	{r7, lr}
 800d716:	b084      	sub	sp, #16
 800d718:	af00      	add	r7, sp, #0
 800d71a:	6078      	str	r0, [r7, #4]
 800d71c:	460b      	mov	r3, r1
 800d71e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d726:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d101      	bne.n	800d736 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d732:	2303      	movs	r3, #3
 800d734:	e04f      	b.n	800d7d6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d73c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d73e:	78fa      	ldrb	r2, [r7, #3]
 800d740:	6879      	ldr	r1, [r7, #4]
 800d742:	4613      	mov	r3, r2
 800d744:	009b      	lsls	r3, r3, #2
 800d746:	4413      	add	r3, r2
 800d748:	009b      	lsls	r3, r3, #2
 800d74a:	440b      	add	r3, r1
 800d74c:	3318      	adds	r3, #24
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	2b00      	cmp	r3, #0
 800d752:	d029      	beq.n	800d7a8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800d754:	78fa      	ldrb	r2, [r7, #3]
 800d756:	6879      	ldr	r1, [r7, #4]
 800d758:	4613      	mov	r3, r2
 800d75a:	009b      	lsls	r3, r3, #2
 800d75c:	4413      	add	r3, r2
 800d75e:	009b      	lsls	r3, r3, #2
 800d760:	440b      	add	r3, r1
 800d762:	3318      	adds	r3, #24
 800d764:	681a      	ldr	r2, [r3, #0]
 800d766:	78f9      	ldrb	r1, [r7, #3]
 800d768:	68f8      	ldr	r0, [r7, #12]
 800d76a:	460b      	mov	r3, r1
 800d76c:	009b      	lsls	r3, r3, #2
 800d76e:	440b      	add	r3, r1
 800d770:	00db      	lsls	r3, r3, #3
 800d772:	4403      	add	r3, r0
 800d774:	3320      	adds	r3, #32
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	fbb2 f1f3 	udiv	r1, r2, r3
 800d77c:	fb01 f303 	mul.w	r3, r1, r3
 800d780:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d782:	2b00      	cmp	r3, #0
 800d784:	d110      	bne.n	800d7a8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800d786:	78fa      	ldrb	r2, [r7, #3]
 800d788:	6879      	ldr	r1, [r7, #4]
 800d78a:	4613      	mov	r3, r2
 800d78c:	009b      	lsls	r3, r3, #2
 800d78e:	4413      	add	r3, r2
 800d790:	009b      	lsls	r3, r3, #2
 800d792:	440b      	add	r3, r1
 800d794:	3318      	adds	r3, #24
 800d796:	2200      	movs	r2, #0
 800d798:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d79a:	78f9      	ldrb	r1, [r7, #3]
 800d79c:	2300      	movs	r3, #0
 800d79e:	2200      	movs	r2, #0
 800d7a0:	6878      	ldr	r0, [r7, #4]
 800d7a2:	f001 feae 	bl	800f502 <USBD_LL_Transmit>
 800d7a6:	e015      	b.n	800d7d4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800d7a8:	68bb      	ldr	r3, [r7, #8]
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d7b6:	691b      	ldr	r3, [r3, #16]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d00b      	beq.n	800d7d4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d7c2:	691b      	ldr	r3, [r3, #16]
 800d7c4:	68ba      	ldr	r2, [r7, #8]
 800d7c6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800d7ca:	68ba      	ldr	r2, [r7, #8]
 800d7cc:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800d7d0:	78fa      	ldrb	r2, [r7, #3]
 800d7d2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d7d4:	2300      	movs	r3, #0
}
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	3710      	adds	r7, #16
 800d7da:	46bd      	mov	sp, r7
 800d7dc:	bd80      	pop	{r7, pc}

0800d7de <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d7de:	b580      	push	{r7, lr}
 800d7e0:	b084      	sub	sp, #16
 800d7e2:	af00      	add	r7, sp, #0
 800d7e4:	6078      	str	r0, [r7, #4]
 800d7e6:	460b      	mov	r3, r1
 800d7e8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d7f0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d101      	bne.n	800d800 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d7fc:	2303      	movs	r3, #3
 800d7fe:	e015      	b.n	800d82c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d800:	78fb      	ldrb	r3, [r7, #3]
 800d802:	4619      	mov	r1, r3
 800d804:	6878      	ldr	r0, [r7, #4]
 800d806:	f001 febe 	bl	800f586 <USBD_LL_GetRxDataSize>
 800d80a:	4602      	mov	r2, r0
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d818:	68db      	ldr	r3, [r3, #12]
 800d81a:	68fa      	ldr	r2, [r7, #12]
 800d81c:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800d820:	68fa      	ldr	r2, [r7, #12]
 800d822:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800d826:	4611      	mov	r1, r2
 800d828:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d82a:	2300      	movs	r3, #0
}
 800d82c:	4618      	mov	r0, r3
 800d82e:	3710      	adds	r7, #16
 800d830:	46bd      	mov	sp, r7
 800d832:	bd80      	pop	{r7, pc}

0800d834 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b084      	sub	sp, #16
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d842:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d101      	bne.n	800d84e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800d84a:	2303      	movs	r3, #3
 800d84c:	e01a      	b.n	800d884 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d854:	2b00      	cmp	r3, #0
 800d856:	d014      	beq.n	800d882 <USBD_CDC_EP0_RxReady+0x4e>
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800d85e:	2bff      	cmp	r3, #255	@ 0xff
 800d860:	d00f      	beq.n	800d882 <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d868:	689b      	ldr	r3, [r3, #8]
 800d86a:	68fa      	ldr	r2, [r7, #12]
 800d86c:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800d870:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800d872:	68fa      	ldr	r2, [r7, #12]
 800d874:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d878:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	22ff      	movs	r2, #255	@ 0xff
 800d87e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800d882:	2300      	movs	r3, #0
}
 800d884:	4618      	mov	r0, r3
 800d886:	3710      	adds	r7, #16
 800d888:	46bd      	mov	sp, r7
 800d88a:	bd80      	pop	{r7, pc}

0800d88c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d88c:	b480      	push	{r7}
 800d88e:	b083      	sub	sp, #12
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	2243      	movs	r2, #67	@ 0x43
 800d898:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800d89a:	4b03      	ldr	r3, [pc, #12]	@ (800d8a8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800d89c:	4618      	mov	r0, r3
 800d89e:	370c      	adds	r7, #12
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a6:	4770      	bx	lr
 800d8a8:	20000094 	.word	0x20000094

0800d8ac <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d8ac:	b480      	push	{r7}
 800d8ae:	b083      	sub	sp, #12
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	2243      	movs	r2, #67	@ 0x43
 800d8b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800d8ba:	4b03      	ldr	r3, [pc, #12]	@ (800d8c8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800d8bc:	4618      	mov	r0, r3
 800d8be:	370c      	adds	r7, #12
 800d8c0:	46bd      	mov	sp, r7
 800d8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c6:	4770      	bx	lr
 800d8c8:	20000050 	.word	0x20000050

0800d8cc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d8cc:	b480      	push	{r7}
 800d8ce:	b083      	sub	sp, #12
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	2243      	movs	r2, #67	@ 0x43
 800d8d8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800d8da:	4b03      	ldr	r3, [pc, #12]	@ (800d8e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800d8dc:	4618      	mov	r0, r3
 800d8de:	370c      	adds	r7, #12
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e6:	4770      	bx	lr
 800d8e8:	200000d8 	.word	0x200000d8

0800d8ec <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d8ec:	b480      	push	{r7}
 800d8ee:	b083      	sub	sp, #12
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	220a      	movs	r2, #10
 800d8f8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d8fa:	4b03      	ldr	r3, [pc, #12]	@ (800d908 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	370c      	adds	r7, #12
 800d900:	46bd      	mov	sp, r7
 800d902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d906:	4770      	bx	lr
 800d908:	2000000c 	.word	0x2000000c

0800d90c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d90c:	b480      	push	{r7}
 800d90e:	b083      	sub	sp, #12
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
 800d914:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d916:	683b      	ldr	r3, [r7, #0]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d101      	bne.n	800d920 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d91c:	2303      	movs	r3, #3
 800d91e:	e004      	b.n	800d92a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	683a      	ldr	r2, [r7, #0]
 800d924:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800d928:	2300      	movs	r3, #0
}
 800d92a:	4618      	mov	r0, r3
 800d92c:	370c      	adds	r7, #12
 800d92e:	46bd      	mov	sp, r7
 800d930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d934:	4770      	bx	lr

0800d936 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d936:	b480      	push	{r7}
 800d938:	b087      	sub	sp, #28
 800d93a:	af00      	add	r7, sp, #0
 800d93c:	60f8      	str	r0, [r7, #12]
 800d93e:	60b9      	str	r1, [r7, #8]
 800d940:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d948:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800d94a:	697b      	ldr	r3, [r7, #20]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d101      	bne.n	800d954 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800d950:	2303      	movs	r3, #3
 800d952:	e008      	b.n	800d966 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800d954:	697b      	ldr	r3, [r7, #20]
 800d956:	68ba      	ldr	r2, [r7, #8]
 800d958:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800d95c:	697b      	ldr	r3, [r7, #20]
 800d95e:	687a      	ldr	r2, [r7, #4]
 800d960:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800d964:	2300      	movs	r3, #0
}
 800d966:	4618      	mov	r0, r3
 800d968:	371c      	adds	r7, #28
 800d96a:	46bd      	mov	sp, r7
 800d96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d970:	4770      	bx	lr

0800d972 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d972:	b480      	push	{r7}
 800d974:	b085      	sub	sp, #20
 800d976:	af00      	add	r7, sp, #0
 800d978:	6078      	str	r0, [r7, #4]
 800d97a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d982:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	2b00      	cmp	r3, #0
 800d988:	d101      	bne.n	800d98e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800d98a:	2303      	movs	r3, #3
 800d98c:	e004      	b.n	800d998 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	683a      	ldr	r2, [r7, #0]
 800d992:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800d996:	2300      	movs	r3, #0
}
 800d998:	4618      	mov	r0, r3
 800d99a:	3714      	adds	r7, #20
 800d99c:	46bd      	mov	sp, r7
 800d99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a2:	4770      	bx	lr

0800d9a4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d9a4:	b580      	push	{r7, lr}
 800d9a6:	b084      	sub	sp, #16
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d9b2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800d9b4:	2301      	movs	r3, #1
 800d9b6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d101      	bne.n	800d9c6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d9c2:	2303      	movs	r3, #3
 800d9c4:	e01a      	b.n	800d9fc <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800d9c6:	68bb      	ldr	r3, [r7, #8]
 800d9c8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d114      	bne.n	800d9fa <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800d9d0:	68bb      	ldr	r3, [r7, #8]
 800d9d2:	2201      	movs	r2, #1
 800d9d4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800d9d8:	68bb      	ldr	r3, [r7, #8]
 800d9da:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800d9e2:	68bb      	ldr	r3, [r7, #8]
 800d9e4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800d9e8:	68bb      	ldr	r3, [r7, #8]
 800d9ea:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800d9ee:	2181      	movs	r1, #129	@ 0x81
 800d9f0:	6878      	ldr	r0, [r7, #4]
 800d9f2:	f001 fd86 	bl	800f502 <USBD_LL_Transmit>

    ret = USBD_OK;
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800d9fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	3710      	adds	r7, #16
 800da00:	46bd      	mov	sp, r7
 800da02:	bd80      	pop	{r7, pc}

0800da04 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800da04:	b580      	push	{r7, lr}
 800da06:	b084      	sub	sp, #16
 800da08:	af00      	add	r7, sp, #0
 800da0a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800da12:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d101      	bne.n	800da22 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800da1e:	2303      	movs	r3, #3
 800da20:	e016      	b.n	800da50 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	7c1b      	ldrb	r3, [r3, #16]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d109      	bne.n	800da3e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800da30:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800da34:	2101      	movs	r1, #1
 800da36:	6878      	ldr	r0, [r7, #4]
 800da38:	f001 fd84 	bl	800f544 <USBD_LL_PrepareReceive>
 800da3c:	e007      	b.n	800da4e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800da44:	2340      	movs	r3, #64	@ 0x40
 800da46:	2101      	movs	r1, #1
 800da48:	6878      	ldr	r0, [r7, #4]
 800da4a:	f001 fd7b 	bl	800f544 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800da4e:	2300      	movs	r3, #0
}
 800da50:	4618      	mov	r0, r3
 800da52:	3710      	adds	r7, #16
 800da54:	46bd      	mov	sp, r7
 800da56:	bd80      	pop	{r7, pc}

0800da58 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800da58:	b580      	push	{r7, lr}
 800da5a:	b086      	sub	sp, #24
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	60f8      	str	r0, [r7, #12]
 800da60:	60b9      	str	r1, [r7, #8]
 800da62:	4613      	mov	r3, r2
 800da64:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d101      	bne.n	800da70 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800da6c:	2303      	movs	r3, #3
 800da6e:	e01f      	b.n	800dab0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	2200      	movs	r2, #0
 800da74:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	2200      	movs	r2, #0
 800da7c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	2200      	movs	r2, #0
 800da84:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800da88:	68bb      	ldr	r3, [r7, #8]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d003      	beq.n	800da96 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	68ba      	ldr	r2, [r7, #8]
 800da92:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	2201      	movs	r2, #1
 800da9a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	79fa      	ldrb	r2, [r7, #7]
 800daa2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800daa4:	68f8      	ldr	r0, [r7, #12]
 800daa6:	f001 fbe3 	bl	800f270 <USBD_LL_Init>
 800daaa:	4603      	mov	r3, r0
 800daac:	75fb      	strb	r3, [r7, #23]

  return ret;
 800daae:	7dfb      	ldrb	r3, [r7, #23]
}
 800dab0:	4618      	mov	r0, r3
 800dab2:	3718      	adds	r7, #24
 800dab4:	46bd      	mov	sp, r7
 800dab6:	bd80      	pop	{r7, pc}

0800dab8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800dab8:	b580      	push	{r7, lr}
 800daba:	b084      	sub	sp, #16
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	6078      	str	r0, [r7, #4]
 800dac0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800dac2:	2300      	movs	r3, #0
 800dac4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800dac6:	683b      	ldr	r3, [r7, #0]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d101      	bne.n	800dad0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800dacc:	2303      	movs	r3, #3
 800dace:	e016      	b.n	800dafe <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	683a      	ldr	r2, [r7, #0]
 800dad4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d00b      	beq.n	800dafc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800daea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800daec:	f107 020e 	add.w	r2, r7, #14
 800daf0:	4610      	mov	r0, r2
 800daf2:	4798      	blx	r3
 800daf4:	4602      	mov	r2, r0
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800dafc:	2300      	movs	r3, #0
}
 800dafe:	4618      	mov	r0, r3
 800db00:	3710      	adds	r7, #16
 800db02:	46bd      	mov	sp, r7
 800db04:	bd80      	pop	{r7, pc}

0800db06 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800db06:	b580      	push	{r7, lr}
 800db08:	b082      	sub	sp, #8
 800db0a:	af00      	add	r7, sp, #0
 800db0c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800db0e:	6878      	ldr	r0, [r7, #4]
 800db10:	f001 fc0e 	bl	800f330 <USBD_LL_Start>
 800db14:	4603      	mov	r3, r0
}
 800db16:	4618      	mov	r0, r3
 800db18:	3708      	adds	r7, #8
 800db1a:	46bd      	mov	sp, r7
 800db1c:	bd80      	pop	{r7, pc}

0800db1e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800db1e:	b480      	push	{r7}
 800db20:	b083      	sub	sp, #12
 800db22:	af00      	add	r7, sp, #0
 800db24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800db26:	2300      	movs	r3, #0
}
 800db28:	4618      	mov	r0, r3
 800db2a:	370c      	adds	r7, #12
 800db2c:	46bd      	mov	sp, r7
 800db2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db32:	4770      	bx	lr

0800db34 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800db34:	b580      	push	{r7, lr}
 800db36:	b084      	sub	sp, #16
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
 800db3c:	460b      	mov	r3, r1
 800db3e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800db40:	2303      	movs	r3, #3
 800db42:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d009      	beq.n	800db62 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	78fa      	ldrb	r2, [r7, #3]
 800db58:	4611      	mov	r1, r2
 800db5a:	6878      	ldr	r0, [r7, #4]
 800db5c:	4798      	blx	r3
 800db5e:	4603      	mov	r3, r0
 800db60:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800db62:	7bfb      	ldrb	r3, [r7, #15]
}
 800db64:	4618      	mov	r0, r3
 800db66:	3710      	adds	r7, #16
 800db68:	46bd      	mov	sp, r7
 800db6a:	bd80      	pop	{r7, pc}

0800db6c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800db6c:	b580      	push	{r7, lr}
 800db6e:	b082      	sub	sp, #8
 800db70:	af00      	add	r7, sp, #0
 800db72:	6078      	str	r0, [r7, #4]
 800db74:	460b      	mov	r3, r1
 800db76:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d007      	beq.n	800db92 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800db88:	685b      	ldr	r3, [r3, #4]
 800db8a:	78fa      	ldrb	r2, [r7, #3]
 800db8c:	4611      	mov	r1, r2
 800db8e:	6878      	ldr	r0, [r7, #4]
 800db90:	4798      	blx	r3
  }

  return USBD_OK;
 800db92:	2300      	movs	r3, #0
}
 800db94:	4618      	mov	r0, r3
 800db96:	3708      	adds	r7, #8
 800db98:	46bd      	mov	sp, r7
 800db9a:	bd80      	pop	{r7, pc}

0800db9c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b084      	sub	sp, #16
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
 800dba4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800dbac:	6839      	ldr	r1, [r7, #0]
 800dbae:	4618      	mov	r0, r3
 800dbb0:	f000 ff46 	bl	800ea40 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	2201      	movs	r2, #1
 800dbb8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800dbc2:	461a      	mov	r2, r3
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800dbd0:	f003 031f 	and.w	r3, r3, #31
 800dbd4:	2b02      	cmp	r3, #2
 800dbd6:	d01a      	beq.n	800dc0e <USBD_LL_SetupStage+0x72>
 800dbd8:	2b02      	cmp	r3, #2
 800dbda:	d822      	bhi.n	800dc22 <USBD_LL_SetupStage+0x86>
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d002      	beq.n	800dbe6 <USBD_LL_SetupStage+0x4a>
 800dbe0:	2b01      	cmp	r3, #1
 800dbe2:	d00a      	beq.n	800dbfa <USBD_LL_SetupStage+0x5e>
 800dbe4:	e01d      	b.n	800dc22 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800dbec:	4619      	mov	r1, r3
 800dbee:	6878      	ldr	r0, [r7, #4]
 800dbf0:	f000 f9ee 	bl	800dfd0 <USBD_StdDevReq>
 800dbf4:	4603      	mov	r3, r0
 800dbf6:	73fb      	strb	r3, [r7, #15]
      break;
 800dbf8:	e020      	b.n	800dc3c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800dc00:	4619      	mov	r1, r3
 800dc02:	6878      	ldr	r0, [r7, #4]
 800dc04:	f000 fa52 	bl	800e0ac <USBD_StdItfReq>
 800dc08:	4603      	mov	r3, r0
 800dc0a:	73fb      	strb	r3, [r7, #15]
      break;
 800dc0c:	e016      	b.n	800dc3c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800dc14:	4619      	mov	r1, r3
 800dc16:	6878      	ldr	r0, [r7, #4]
 800dc18:	f000 fa91 	bl	800e13e <USBD_StdEPReq>
 800dc1c:	4603      	mov	r3, r0
 800dc1e:	73fb      	strb	r3, [r7, #15]
      break;
 800dc20:	e00c      	b.n	800dc3c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800dc28:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800dc2c:	b2db      	uxtb	r3, r3
 800dc2e:	4619      	mov	r1, r3
 800dc30:	6878      	ldr	r0, [r7, #4]
 800dc32:	f001 fbdd 	bl	800f3f0 <USBD_LL_StallEP>
 800dc36:	4603      	mov	r3, r0
 800dc38:	73fb      	strb	r3, [r7, #15]
      break;
 800dc3a:	bf00      	nop
  }

  return ret;
 800dc3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc3e:	4618      	mov	r0, r3
 800dc40:	3710      	adds	r7, #16
 800dc42:	46bd      	mov	sp, r7
 800dc44:	bd80      	pop	{r7, pc}

0800dc46 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800dc46:	b580      	push	{r7, lr}
 800dc48:	b086      	sub	sp, #24
 800dc4a:	af00      	add	r7, sp, #0
 800dc4c:	60f8      	str	r0, [r7, #12]
 800dc4e:	460b      	mov	r3, r1
 800dc50:	607a      	str	r2, [r7, #4]
 800dc52:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800dc54:	7afb      	ldrb	r3, [r7, #11]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d138      	bne.n	800dccc <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800dc60:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800dc68:	2b03      	cmp	r3, #3
 800dc6a:	d14a      	bne.n	800dd02 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800dc6c:	693b      	ldr	r3, [r7, #16]
 800dc6e:	689a      	ldr	r2, [r3, #8]
 800dc70:	693b      	ldr	r3, [r7, #16]
 800dc72:	68db      	ldr	r3, [r3, #12]
 800dc74:	429a      	cmp	r2, r3
 800dc76:	d913      	bls.n	800dca0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800dc78:	693b      	ldr	r3, [r7, #16]
 800dc7a:	689a      	ldr	r2, [r3, #8]
 800dc7c:	693b      	ldr	r3, [r7, #16]
 800dc7e:	68db      	ldr	r3, [r3, #12]
 800dc80:	1ad2      	subs	r2, r2, r3
 800dc82:	693b      	ldr	r3, [r7, #16]
 800dc84:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800dc86:	693b      	ldr	r3, [r7, #16]
 800dc88:	68da      	ldr	r2, [r3, #12]
 800dc8a:	693b      	ldr	r3, [r7, #16]
 800dc8c:	689b      	ldr	r3, [r3, #8]
 800dc8e:	4293      	cmp	r3, r2
 800dc90:	bf28      	it	cs
 800dc92:	4613      	movcs	r3, r2
 800dc94:	461a      	mov	r2, r3
 800dc96:	6879      	ldr	r1, [r7, #4]
 800dc98:	68f8      	ldr	r0, [r7, #12]
 800dc9a:	f000 ffc5 	bl	800ec28 <USBD_CtlContinueRx>
 800dc9e:	e030      	b.n	800dd02 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dca6:	b2db      	uxtb	r3, r3
 800dca8:	2b03      	cmp	r3, #3
 800dcaa:	d10b      	bne.n	800dcc4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dcb2:	691b      	ldr	r3, [r3, #16]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d005      	beq.n	800dcc4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dcbe:	691b      	ldr	r3, [r3, #16]
 800dcc0:	68f8      	ldr	r0, [r7, #12]
 800dcc2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800dcc4:	68f8      	ldr	r0, [r7, #12]
 800dcc6:	f000 ffc0 	bl	800ec4a <USBD_CtlSendStatus>
 800dcca:	e01a      	b.n	800dd02 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dcd2:	b2db      	uxtb	r3, r3
 800dcd4:	2b03      	cmp	r3, #3
 800dcd6:	d114      	bne.n	800dd02 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dcde:	699b      	ldr	r3, [r3, #24]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d00e      	beq.n	800dd02 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dcea:	699b      	ldr	r3, [r3, #24]
 800dcec:	7afa      	ldrb	r2, [r7, #11]
 800dcee:	4611      	mov	r1, r2
 800dcf0:	68f8      	ldr	r0, [r7, #12]
 800dcf2:	4798      	blx	r3
 800dcf4:	4603      	mov	r3, r0
 800dcf6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800dcf8:	7dfb      	ldrb	r3, [r7, #23]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d001      	beq.n	800dd02 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800dcfe:	7dfb      	ldrb	r3, [r7, #23]
 800dd00:	e000      	b.n	800dd04 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800dd02:	2300      	movs	r3, #0
}
 800dd04:	4618      	mov	r0, r3
 800dd06:	3718      	adds	r7, #24
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	bd80      	pop	{r7, pc}

0800dd0c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	b086      	sub	sp, #24
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	60f8      	str	r0, [r7, #12]
 800dd14:	460b      	mov	r3, r1
 800dd16:	607a      	str	r2, [r7, #4]
 800dd18:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800dd1a:	7afb      	ldrb	r3, [r7, #11]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d16b      	bne.n	800ddf8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	3314      	adds	r3, #20
 800dd24:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800dd2c:	2b02      	cmp	r3, #2
 800dd2e:	d156      	bne.n	800ddde <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800dd30:	693b      	ldr	r3, [r7, #16]
 800dd32:	689a      	ldr	r2, [r3, #8]
 800dd34:	693b      	ldr	r3, [r7, #16]
 800dd36:	68db      	ldr	r3, [r3, #12]
 800dd38:	429a      	cmp	r2, r3
 800dd3a:	d914      	bls.n	800dd66 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800dd3c:	693b      	ldr	r3, [r7, #16]
 800dd3e:	689a      	ldr	r2, [r3, #8]
 800dd40:	693b      	ldr	r3, [r7, #16]
 800dd42:	68db      	ldr	r3, [r3, #12]
 800dd44:	1ad2      	subs	r2, r2, r3
 800dd46:	693b      	ldr	r3, [r7, #16]
 800dd48:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800dd4a:	693b      	ldr	r3, [r7, #16]
 800dd4c:	689b      	ldr	r3, [r3, #8]
 800dd4e:	461a      	mov	r2, r3
 800dd50:	6879      	ldr	r1, [r7, #4]
 800dd52:	68f8      	ldr	r0, [r7, #12]
 800dd54:	f000 ff3a 	bl	800ebcc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dd58:	2300      	movs	r3, #0
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	2100      	movs	r1, #0
 800dd5e:	68f8      	ldr	r0, [r7, #12]
 800dd60:	f001 fbf0 	bl	800f544 <USBD_LL_PrepareReceive>
 800dd64:	e03b      	b.n	800ddde <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800dd66:	693b      	ldr	r3, [r7, #16]
 800dd68:	68da      	ldr	r2, [r3, #12]
 800dd6a:	693b      	ldr	r3, [r7, #16]
 800dd6c:	689b      	ldr	r3, [r3, #8]
 800dd6e:	429a      	cmp	r2, r3
 800dd70:	d11c      	bne.n	800ddac <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800dd72:	693b      	ldr	r3, [r7, #16]
 800dd74:	685a      	ldr	r2, [r3, #4]
 800dd76:	693b      	ldr	r3, [r7, #16]
 800dd78:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800dd7a:	429a      	cmp	r2, r3
 800dd7c:	d316      	bcc.n	800ddac <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800dd7e:	693b      	ldr	r3, [r7, #16]
 800dd80:	685a      	ldr	r2, [r3, #4]
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800dd88:	429a      	cmp	r2, r3
 800dd8a:	d20f      	bcs.n	800ddac <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800dd8c:	2200      	movs	r2, #0
 800dd8e:	2100      	movs	r1, #0
 800dd90:	68f8      	ldr	r0, [r7, #12]
 800dd92:	f000 ff1b 	bl	800ebcc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	2200      	movs	r2, #0
 800dd9a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dd9e:	2300      	movs	r3, #0
 800dda0:	2200      	movs	r2, #0
 800dda2:	2100      	movs	r1, #0
 800dda4:	68f8      	ldr	r0, [r7, #12]
 800dda6:	f001 fbcd 	bl	800f544 <USBD_LL_PrepareReceive>
 800ddaa:	e018      	b.n	800ddde <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ddb2:	b2db      	uxtb	r3, r3
 800ddb4:	2b03      	cmp	r3, #3
 800ddb6:	d10b      	bne.n	800ddd0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ddbe:	68db      	ldr	r3, [r3, #12]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d005      	beq.n	800ddd0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ddca:	68db      	ldr	r3, [r3, #12]
 800ddcc:	68f8      	ldr	r0, [r7, #12]
 800ddce:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ddd0:	2180      	movs	r1, #128	@ 0x80
 800ddd2:	68f8      	ldr	r0, [r7, #12]
 800ddd4:	f001 fb0c 	bl	800f3f0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ddd8:	68f8      	ldr	r0, [r7, #12]
 800ddda:	f000 ff49 	bl	800ec70 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800dde4:	2b01      	cmp	r3, #1
 800dde6:	d122      	bne.n	800de2e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800dde8:	68f8      	ldr	r0, [r7, #12]
 800ddea:	f7ff fe98 	bl	800db1e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	2200      	movs	r2, #0
 800ddf2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800ddf6:	e01a      	b.n	800de2e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ddfe:	b2db      	uxtb	r3, r3
 800de00:	2b03      	cmp	r3, #3
 800de02:	d114      	bne.n	800de2e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800de0a:	695b      	ldr	r3, [r3, #20]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d00e      	beq.n	800de2e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800de16:	695b      	ldr	r3, [r3, #20]
 800de18:	7afa      	ldrb	r2, [r7, #11]
 800de1a:	4611      	mov	r1, r2
 800de1c:	68f8      	ldr	r0, [r7, #12]
 800de1e:	4798      	blx	r3
 800de20:	4603      	mov	r3, r0
 800de22:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800de24:	7dfb      	ldrb	r3, [r7, #23]
 800de26:	2b00      	cmp	r3, #0
 800de28:	d001      	beq.n	800de2e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800de2a:	7dfb      	ldrb	r3, [r7, #23]
 800de2c:	e000      	b.n	800de30 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800de2e:	2300      	movs	r3, #0
}
 800de30:	4618      	mov	r0, r3
 800de32:	3718      	adds	r7, #24
 800de34:	46bd      	mov	sp, r7
 800de36:	bd80      	pop	{r7, pc}

0800de38 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800de38:	b580      	push	{r7, lr}
 800de3a:	b082      	sub	sp, #8
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	2201      	movs	r2, #1
 800de44:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	2200      	movs	r2, #0
 800de4c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	2200      	movs	r2, #0
 800de54:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	2200      	movs	r2, #0
 800de5a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800de64:	2b00      	cmp	r3, #0
 800de66:	d101      	bne.n	800de6c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800de68:	2303      	movs	r3, #3
 800de6a:	e02f      	b.n	800decc <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800de72:	2b00      	cmp	r3, #0
 800de74:	d00f      	beq.n	800de96 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800de7c:	685b      	ldr	r3, [r3, #4]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d009      	beq.n	800de96 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800de88:	685b      	ldr	r3, [r3, #4]
 800de8a:	687a      	ldr	r2, [r7, #4]
 800de8c:	6852      	ldr	r2, [r2, #4]
 800de8e:	b2d2      	uxtb	r2, r2
 800de90:	4611      	mov	r1, r2
 800de92:	6878      	ldr	r0, [r7, #4]
 800de94:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800de96:	2340      	movs	r3, #64	@ 0x40
 800de98:	2200      	movs	r2, #0
 800de9a:	2100      	movs	r1, #0
 800de9c:	6878      	ldr	r0, [r7, #4]
 800de9e:	f001 fa62 	bl	800f366 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	2201      	movs	r2, #1
 800dea6:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	2240      	movs	r2, #64	@ 0x40
 800deae:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800deb2:	2340      	movs	r3, #64	@ 0x40
 800deb4:	2200      	movs	r2, #0
 800deb6:	2180      	movs	r1, #128	@ 0x80
 800deb8:	6878      	ldr	r0, [r7, #4]
 800deba:	f001 fa54 	bl	800f366 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	2201      	movs	r2, #1
 800dec2:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	2240      	movs	r2, #64	@ 0x40
 800dec8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800deca:	2300      	movs	r3, #0
}
 800decc:	4618      	mov	r0, r3
 800dece:	3708      	adds	r7, #8
 800ded0:	46bd      	mov	sp, r7
 800ded2:	bd80      	pop	{r7, pc}

0800ded4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ded4:	b480      	push	{r7}
 800ded6:	b083      	sub	sp, #12
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]
 800dedc:	460b      	mov	r3, r1
 800dede:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	78fa      	ldrb	r2, [r7, #3]
 800dee4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800dee6:	2300      	movs	r3, #0
}
 800dee8:	4618      	mov	r0, r3
 800deea:	370c      	adds	r7, #12
 800deec:	46bd      	mov	sp, r7
 800deee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def2:	4770      	bx	lr

0800def4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800def4:	b480      	push	{r7}
 800def6:	b083      	sub	sp, #12
 800def8:	af00      	add	r7, sp, #0
 800defa:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800df02:	b2da      	uxtb	r2, r3
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	2204      	movs	r2, #4
 800df0e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800df12:	2300      	movs	r3, #0
}
 800df14:	4618      	mov	r0, r3
 800df16:	370c      	adds	r7, #12
 800df18:	46bd      	mov	sp, r7
 800df1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df1e:	4770      	bx	lr

0800df20 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800df20:	b480      	push	{r7}
 800df22:	b083      	sub	sp, #12
 800df24:	af00      	add	r7, sp, #0
 800df26:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800df2e:	b2db      	uxtb	r3, r3
 800df30:	2b04      	cmp	r3, #4
 800df32:	d106      	bne.n	800df42 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800df3a:	b2da      	uxtb	r2, r3
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800df42:	2300      	movs	r3, #0
}
 800df44:	4618      	mov	r0, r3
 800df46:	370c      	adds	r7, #12
 800df48:	46bd      	mov	sp, r7
 800df4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df4e:	4770      	bx	lr

0800df50 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800df50:	b580      	push	{r7, lr}
 800df52:	b082      	sub	sp, #8
 800df54:	af00      	add	r7, sp, #0
 800df56:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d101      	bne.n	800df66 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800df62:	2303      	movs	r3, #3
 800df64:	e012      	b.n	800df8c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800df6c:	b2db      	uxtb	r3, r3
 800df6e:	2b03      	cmp	r3, #3
 800df70:	d10b      	bne.n	800df8a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800df78:	69db      	ldr	r3, [r3, #28]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d005      	beq.n	800df8a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800df84:	69db      	ldr	r3, [r3, #28]
 800df86:	6878      	ldr	r0, [r7, #4]
 800df88:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800df8a:	2300      	movs	r3, #0
}
 800df8c:	4618      	mov	r0, r3
 800df8e:	3708      	adds	r7, #8
 800df90:	46bd      	mov	sp, r7
 800df92:	bd80      	pop	{r7, pc}

0800df94 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800df94:	b480      	push	{r7}
 800df96:	b087      	sub	sp, #28
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800dfa0:	697b      	ldr	r3, [r7, #20]
 800dfa2:	781b      	ldrb	r3, [r3, #0]
 800dfa4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800dfa6:	697b      	ldr	r3, [r7, #20]
 800dfa8:	3301      	adds	r3, #1
 800dfaa:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800dfac:	697b      	ldr	r3, [r7, #20]
 800dfae:	781b      	ldrb	r3, [r3, #0]
 800dfb0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800dfb2:	8a3b      	ldrh	r3, [r7, #16]
 800dfb4:	021b      	lsls	r3, r3, #8
 800dfb6:	b21a      	sxth	r2, r3
 800dfb8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800dfbc:	4313      	orrs	r3, r2
 800dfbe:	b21b      	sxth	r3, r3
 800dfc0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800dfc2:	89fb      	ldrh	r3, [r7, #14]
}
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	371c      	adds	r7, #28
 800dfc8:	46bd      	mov	sp, r7
 800dfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfce:	4770      	bx	lr

0800dfd0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b084      	sub	sp, #16
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	6078      	str	r0, [r7, #4]
 800dfd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dfda:	2300      	movs	r3, #0
 800dfdc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dfde:	683b      	ldr	r3, [r7, #0]
 800dfe0:	781b      	ldrb	r3, [r3, #0]
 800dfe2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800dfe6:	2b40      	cmp	r3, #64	@ 0x40
 800dfe8:	d005      	beq.n	800dff6 <USBD_StdDevReq+0x26>
 800dfea:	2b40      	cmp	r3, #64	@ 0x40
 800dfec:	d853      	bhi.n	800e096 <USBD_StdDevReq+0xc6>
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d00b      	beq.n	800e00a <USBD_StdDevReq+0x3a>
 800dff2:	2b20      	cmp	r3, #32
 800dff4:	d14f      	bne.n	800e096 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dffc:	689b      	ldr	r3, [r3, #8]
 800dffe:	6839      	ldr	r1, [r7, #0]
 800e000:	6878      	ldr	r0, [r7, #4]
 800e002:	4798      	blx	r3
 800e004:	4603      	mov	r3, r0
 800e006:	73fb      	strb	r3, [r7, #15]
      break;
 800e008:	e04a      	b.n	800e0a0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e00a:	683b      	ldr	r3, [r7, #0]
 800e00c:	785b      	ldrb	r3, [r3, #1]
 800e00e:	2b09      	cmp	r3, #9
 800e010:	d83b      	bhi.n	800e08a <USBD_StdDevReq+0xba>
 800e012:	a201      	add	r2, pc, #4	@ (adr r2, 800e018 <USBD_StdDevReq+0x48>)
 800e014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e018:	0800e06d 	.word	0x0800e06d
 800e01c:	0800e081 	.word	0x0800e081
 800e020:	0800e08b 	.word	0x0800e08b
 800e024:	0800e077 	.word	0x0800e077
 800e028:	0800e08b 	.word	0x0800e08b
 800e02c:	0800e04b 	.word	0x0800e04b
 800e030:	0800e041 	.word	0x0800e041
 800e034:	0800e08b 	.word	0x0800e08b
 800e038:	0800e063 	.word	0x0800e063
 800e03c:	0800e055 	.word	0x0800e055
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e040:	6839      	ldr	r1, [r7, #0]
 800e042:	6878      	ldr	r0, [r7, #4]
 800e044:	f000 f9de 	bl	800e404 <USBD_GetDescriptor>
          break;
 800e048:	e024      	b.n	800e094 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e04a:	6839      	ldr	r1, [r7, #0]
 800e04c:	6878      	ldr	r0, [r7, #4]
 800e04e:	f000 fb6d 	bl	800e72c <USBD_SetAddress>
          break;
 800e052:	e01f      	b.n	800e094 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e054:	6839      	ldr	r1, [r7, #0]
 800e056:	6878      	ldr	r0, [r7, #4]
 800e058:	f000 fbac 	bl	800e7b4 <USBD_SetConfig>
 800e05c:	4603      	mov	r3, r0
 800e05e:	73fb      	strb	r3, [r7, #15]
          break;
 800e060:	e018      	b.n	800e094 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e062:	6839      	ldr	r1, [r7, #0]
 800e064:	6878      	ldr	r0, [r7, #4]
 800e066:	f000 fc4b 	bl	800e900 <USBD_GetConfig>
          break;
 800e06a:	e013      	b.n	800e094 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e06c:	6839      	ldr	r1, [r7, #0]
 800e06e:	6878      	ldr	r0, [r7, #4]
 800e070:	f000 fc7c 	bl	800e96c <USBD_GetStatus>
          break;
 800e074:	e00e      	b.n	800e094 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e076:	6839      	ldr	r1, [r7, #0]
 800e078:	6878      	ldr	r0, [r7, #4]
 800e07a:	f000 fcab 	bl	800e9d4 <USBD_SetFeature>
          break;
 800e07e:	e009      	b.n	800e094 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e080:	6839      	ldr	r1, [r7, #0]
 800e082:	6878      	ldr	r0, [r7, #4]
 800e084:	f000 fcba 	bl	800e9fc <USBD_ClrFeature>
          break;
 800e088:	e004      	b.n	800e094 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800e08a:	6839      	ldr	r1, [r7, #0]
 800e08c:	6878      	ldr	r0, [r7, #4]
 800e08e:	f000 fd11 	bl	800eab4 <USBD_CtlError>
          break;
 800e092:	bf00      	nop
      }
      break;
 800e094:	e004      	b.n	800e0a0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800e096:	6839      	ldr	r1, [r7, #0]
 800e098:	6878      	ldr	r0, [r7, #4]
 800e09a:	f000 fd0b 	bl	800eab4 <USBD_CtlError>
      break;
 800e09e:	bf00      	nop
  }

  return ret;
 800e0a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	3710      	adds	r7, #16
 800e0a6:	46bd      	mov	sp, r7
 800e0a8:	bd80      	pop	{r7, pc}
 800e0aa:	bf00      	nop

0800e0ac <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e0ac:	b580      	push	{r7, lr}
 800e0ae:	b084      	sub	sp, #16
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	6078      	str	r0, [r7, #4]
 800e0b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e0ba:	683b      	ldr	r3, [r7, #0]
 800e0bc:	781b      	ldrb	r3, [r3, #0]
 800e0be:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e0c2:	2b40      	cmp	r3, #64	@ 0x40
 800e0c4:	d005      	beq.n	800e0d2 <USBD_StdItfReq+0x26>
 800e0c6:	2b40      	cmp	r3, #64	@ 0x40
 800e0c8:	d82f      	bhi.n	800e12a <USBD_StdItfReq+0x7e>
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d001      	beq.n	800e0d2 <USBD_StdItfReq+0x26>
 800e0ce:	2b20      	cmp	r3, #32
 800e0d0:	d12b      	bne.n	800e12a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e0d8:	b2db      	uxtb	r3, r3
 800e0da:	3b01      	subs	r3, #1
 800e0dc:	2b02      	cmp	r3, #2
 800e0de:	d81d      	bhi.n	800e11c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e0e0:	683b      	ldr	r3, [r7, #0]
 800e0e2:	889b      	ldrh	r3, [r3, #4]
 800e0e4:	b2db      	uxtb	r3, r3
 800e0e6:	2b01      	cmp	r3, #1
 800e0e8:	d813      	bhi.n	800e112 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e0f0:	689b      	ldr	r3, [r3, #8]
 800e0f2:	6839      	ldr	r1, [r7, #0]
 800e0f4:	6878      	ldr	r0, [r7, #4]
 800e0f6:	4798      	blx	r3
 800e0f8:	4603      	mov	r3, r0
 800e0fa:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e0fc:	683b      	ldr	r3, [r7, #0]
 800e0fe:	88db      	ldrh	r3, [r3, #6]
 800e100:	2b00      	cmp	r3, #0
 800e102:	d110      	bne.n	800e126 <USBD_StdItfReq+0x7a>
 800e104:	7bfb      	ldrb	r3, [r7, #15]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d10d      	bne.n	800e126 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e10a:	6878      	ldr	r0, [r7, #4]
 800e10c:	f000 fd9d 	bl	800ec4a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e110:	e009      	b.n	800e126 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800e112:	6839      	ldr	r1, [r7, #0]
 800e114:	6878      	ldr	r0, [r7, #4]
 800e116:	f000 fccd 	bl	800eab4 <USBD_CtlError>
          break;
 800e11a:	e004      	b.n	800e126 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800e11c:	6839      	ldr	r1, [r7, #0]
 800e11e:	6878      	ldr	r0, [r7, #4]
 800e120:	f000 fcc8 	bl	800eab4 <USBD_CtlError>
          break;
 800e124:	e000      	b.n	800e128 <USBD_StdItfReq+0x7c>
          break;
 800e126:	bf00      	nop
      }
      break;
 800e128:	e004      	b.n	800e134 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800e12a:	6839      	ldr	r1, [r7, #0]
 800e12c:	6878      	ldr	r0, [r7, #4]
 800e12e:	f000 fcc1 	bl	800eab4 <USBD_CtlError>
      break;
 800e132:	bf00      	nop
  }

  return ret;
 800e134:	7bfb      	ldrb	r3, [r7, #15]
}
 800e136:	4618      	mov	r0, r3
 800e138:	3710      	adds	r7, #16
 800e13a:	46bd      	mov	sp, r7
 800e13c:	bd80      	pop	{r7, pc}

0800e13e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e13e:	b580      	push	{r7, lr}
 800e140:	b084      	sub	sp, #16
 800e142:	af00      	add	r7, sp, #0
 800e144:	6078      	str	r0, [r7, #4]
 800e146:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800e148:	2300      	movs	r3, #0
 800e14a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800e14c:	683b      	ldr	r3, [r7, #0]
 800e14e:	889b      	ldrh	r3, [r3, #4]
 800e150:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e152:	683b      	ldr	r3, [r7, #0]
 800e154:	781b      	ldrb	r3, [r3, #0]
 800e156:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e15a:	2b40      	cmp	r3, #64	@ 0x40
 800e15c:	d007      	beq.n	800e16e <USBD_StdEPReq+0x30>
 800e15e:	2b40      	cmp	r3, #64	@ 0x40
 800e160:	f200 8145 	bhi.w	800e3ee <USBD_StdEPReq+0x2b0>
 800e164:	2b00      	cmp	r3, #0
 800e166:	d00c      	beq.n	800e182 <USBD_StdEPReq+0x44>
 800e168:	2b20      	cmp	r3, #32
 800e16a:	f040 8140 	bne.w	800e3ee <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e174:	689b      	ldr	r3, [r3, #8]
 800e176:	6839      	ldr	r1, [r7, #0]
 800e178:	6878      	ldr	r0, [r7, #4]
 800e17a:	4798      	blx	r3
 800e17c:	4603      	mov	r3, r0
 800e17e:	73fb      	strb	r3, [r7, #15]
      break;
 800e180:	e13a      	b.n	800e3f8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e182:	683b      	ldr	r3, [r7, #0]
 800e184:	785b      	ldrb	r3, [r3, #1]
 800e186:	2b03      	cmp	r3, #3
 800e188:	d007      	beq.n	800e19a <USBD_StdEPReq+0x5c>
 800e18a:	2b03      	cmp	r3, #3
 800e18c:	f300 8129 	bgt.w	800e3e2 <USBD_StdEPReq+0x2a4>
 800e190:	2b00      	cmp	r3, #0
 800e192:	d07f      	beq.n	800e294 <USBD_StdEPReq+0x156>
 800e194:	2b01      	cmp	r3, #1
 800e196:	d03c      	beq.n	800e212 <USBD_StdEPReq+0xd4>
 800e198:	e123      	b.n	800e3e2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e1a0:	b2db      	uxtb	r3, r3
 800e1a2:	2b02      	cmp	r3, #2
 800e1a4:	d002      	beq.n	800e1ac <USBD_StdEPReq+0x6e>
 800e1a6:	2b03      	cmp	r3, #3
 800e1a8:	d016      	beq.n	800e1d8 <USBD_StdEPReq+0x9a>
 800e1aa:	e02c      	b.n	800e206 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e1ac:	7bbb      	ldrb	r3, [r7, #14]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d00d      	beq.n	800e1ce <USBD_StdEPReq+0x90>
 800e1b2:	7bbb      	ldrb	r3, [r7, #14]
 800e1b4:	2b80      	cmp	r3, #128	@ 0x80
 800e1b6:	d00a      	beq.n	800e1ce <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e1b8:	7bbb      	ldrb	r3, [r7, #14]
 800e1ba:	4619      	mov	r1, r3
 800e1bc:	6878      	ldr	r0, [r7, #4]
 800e1be:	f001 f917 	bl	800f3f0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e1c2:	2180      	movs	r1, #128	@ 0x80
 800e1c4:	6878      	ldr	r0, [r7, #4]
 800e1c6:	f001 f913 	bl	800f3f0 <USBD_LL_StallEP>
 800e1ca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e1cc:	e020      	b.n	800e210 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800e1ce:	6839      	ldr	r1, [r7, #0]
 800e1d0:	6878      	ldr	r0, [r7, #4]
 800e1d2:	f000 fc6f 	bl	800eab4 <USBD_CtlError>
              break;
 800e1d6:	e01b      	b.n	800e210 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e1d8:	683b      	ldr	r3, [r7, #0]
 800e1da:	885b      	ldrh	r3, [r3, #2]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d10e      	bne.n	800e1fe <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e1e0:	7bbb      	ldrb	r3, [r7, #14]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d00b      	beq.n	800e1fe <USBD_StdEPReq+0xc0>
 800e1e6:	7bbb      	ldrb	r3, [r7, #14]
 800e1e8:	2b80      	cmp	r3, #128	@ 0x80
 800e1ea:	d008      	beq.n	800e1fe <USBD_StdEPReq+0xc0>
 800e1ec:	683b      	ldr	r3, [r7, #0]
 800e1ee:	88db      	ldrh	r3, [r3, #6]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d104      	bne.n	800e1fe <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e1f4:	7bbb      	ldrb	r3, [r7, #14]
 800e1f6:	4619      	mov	r1, r3
 800e1f8:	6878      	ldr	r0, [r7, #4]
 800e1fa:	f001 f8f9 	bl	800f3f0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e1fe:	6878      	ldr	r0, [r7, #4]
 800e200:	f000 fd23 	bl	800ec4a <USBD_CtlSendStatus>

              break;
 800e204:	e004      	b.n	800e210 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800e206:	6839      	ldr	r1, [r7, #0]
 800e208:	6878      	ldr	r0, [r7, #4]
 800e20a:	f000 fc53 	bl	800eab4 <USBD_CtlError>
              break;
 800e20e:	bf00      	nop
          }
          break;
 800e210:	e0ec      	b.n	800e3ec <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e218:	b2db      	uxtb	r3, r3
 800e21a:	2b02      	cmp	r3, #2
 800e21c:	d002      	beq.n	800e224 <USBD_StdEPReq+0xe6>
 800e21e:	2b03      	cmp	r3, #3
 800e220:	d016      	beq.n	800e250 <USBD_StdEPReq+0x112>
 800e222:	e030      	b.n	800e286 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e224:	7bbb      	ldrb	r3, [r7, #14]
 800e226:	2b00      	cmp	r3, #0
 800e228:	d00d      	beq.n	800e246 <USBD_StdEPReq+0x108>
 800e22a:	7bbb      	ldrb	r3, [r7, #14]
 800e22c:	2b80      	cmp	r3, #128	@ 0x80
 800e22e:	d00a      	beq.n	800e246 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e230:	7bbb      	ldrb	r3, [r7, #14]
 800e232:	4619      	mov	r1, r3
 800e234:	6878      	ldr	r0, [r7, #4]
 800e236:	f001 f8db 	bl	800f3f0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e23a:	2180      	movs	r1, #128	@ 0x80
 800e23c:	6878      	ldr	r0, [r7, #4]
 800e23e:	f001 f8d7 	bl	800f3f0 <USBD_LL_StallEP>
 800e242:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e244:	e025      	b.n	800e292 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800e246:	6839      	ldr	r1, [r7, #0]
 800e248:	6878      	ldr	r0, [r7, #4]
 800e24a:	f000 fc33 	bl	800eab4 <USBD_CtlError>
              break;
 800e24e:	e020      	b.n	800e292 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e250:	683b      	ldr	r3, [r7, #0]
 800e252:	885b      	ldrh	r3, [r3, #2]
 800e254:	2b00      	cmp	r3, #0
 800e256:	d11b      	bne.n	800e290 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e258:	7bbb      	ldrb	r3, [r7, #14]
 800e25a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d004      	beq.n	800e26c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e262:	7bbb      	ldrb	r3, [r7, #14]
 800e264:	4619      	mov	r1, r3
 800e266:	6878      	ldr	r0, [r7, #4]
 800e268:	f001 f8e1 	bl	800f42e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e26c:	6878      	ldr	r0, [r7, #4]
 800e26e:	f000 fcec 	bl	800ec4a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e278:	689b      	ldr	r3, [r3, #8]
 800e27a:	6839      	ldr	r1, [r7, #0]
 800e27c:	6878      	ldr	r0, [r7, #4]
 800e27e:	4798      	blx	r3
 800e280:	4603      	mov	r3, r0
 800e282:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800e284:	e004      	b.n	800e290 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800e286:	6839      	ldr	r1, [r7, #0]
 800e288:	6878      	ldr	r0, [r7, #4]
 800e28a:	f000 fc13 	bl	800eab4 <USBD_CtlError>
              break;
 800e28e:	e000      	b.n	800e292 <USBD_StdEPReq+0x154>
              break;
 800e290:	bf00      	nop
          }
          break;
 800e292:	e0ab      	b.n	800e3ec <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e29a:	b2db      	uxtb	r3, r3
 800e29c:	2b02      	cmp	r3, #2
 800e29e:	d002      	beq.n	800e2a6 <USBD_StdEPReq+0x168>
 800e2a0:	2b03      	cmp	r3, #3
 800e2a2:	d032      	beq.n	800e30a <USBD_StdEPReq+0x1cc>
 800e2a4:	e097      	b.n	800e3d6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e2a6:	7bbb      	ldrb	r3, [r7, #14]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d007      	beq.n	800e2bc <USBD_StdEPReq+0x17e>
 800e2ac:	7bbb      	ldrb	r3, [r7, #14]
 800e2ae:	2b80      	cmp	r3, #128	@ 0x80
 800e2b0:	d004      	beq.n	800e2bc <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800e2b2:	6839      	ldr	r1, [r7, #0]
 800e2b4:	6878      	ldr	r0, [r7, #4]
 800e2b6:	f000 fbfd 	bl	800eab4 <USBD_CtlError>
                break;
 800e2ba:	e091      	b.n	800e3e0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e2bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	da0b      	bge.n	800e2dc <USBD_StdEPReq+0x19e>
 800e2c4:	7bbb      	ldrb	r3, [r7, #14]
 800e2c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e2ca:	4613      	mov	r3, r2
 800e2cc:	009b      	lsls	r3, r3, #2
 800e2ce:	4413      	add	r3, r2
 800e2d0:	009b      	lsls	r3, r3, #2
 800e2d2:	3310      	adds	r3, #16
 800e2d4:	687a      	ldr	r2, [r7, #4]
 800e2d6:	4413      	add	r3, r2
 800e2d8:	3304      	adds	r3, #4
 800e2da:	e00b      	b.n	800e2f4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e2dc:	7bbb      	ldrb	r3, [r7, #14]
 800e2de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e2e2:	4613      	mov	r3, r2
 800e2e4:	009b      	lsls	r3, r3, #2
 800e2e6:	4413      	add	r3, r2
 800e2e8:	009b      	lsls	r3, r3, #2
 800e2ea:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e2ee:	687a      	ldr	r2, [r7, #4]
 800e2f0:	4413      	add	r3, r2
 800e2f2:	3304      	adds	r3, #4
 800e2f4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e2f6:	68bb      	ldr	r3, [r7, #8]
 800e2f8:	2200      	movs	r2, #0
 800e2fa:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e2fc:	68bb      	ldr	r3, [r7, #8]
 800e2fe:	2202      	movs	r2, #2
 800e300:	4619      	mov	r1, r3
 800e302:	6878      	ldr	r0, [r7, #4]
 800e304:	f000 fc47 	bl	800eb96 <USBD_CtlSendData>
              break;
 800e308:	e06a      	b.n	800e3e0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e30a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	da11      	bge.n	800e336 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e312:	7bbb      	ldrb	r3, [r7, #14]
 800e314:	f003 020f 	and.w	r2, r3, #15
 800e318:	6879      	ldr	r1, [r7, #4]
 800e31a:	4613      	mov	r3, r2
 800e31c:	009b      	lsls	r3, r3, #2
 800e31e:	4413      	add	r3, r2
 800e320:	009b      	lsls	r3, r3, #2
 800e322:	440b      	add	r3, r1
 800e324:	3324      	adds	r3, #36	@ 0x24
 800e326:	881b      	ldrh	r3, [r3, #0]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d117      	bne.n	800e35c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800e32c:	6839      	ldr	r1, [r7, #0]
 800e32e:	6878      	ldr	r0, [r7, #4]
 800e330:	f000 fbc0 	bl	800eab4 <USBD_CtlError>
                  break;
 800e334:	e054      	b.n	800e3e0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e336:	7bbb      	ldrb	r3, [r7, #14]
 800e338:	f003 020f 	and.w	r2, r3, #15
 800e33c:	6879      	ldr	r1, [r7, #4]
 800e33e:	4613      	mov	r3, r2
 800e340:	009b      	lsls	r3, r3, #2
 800e342:	4413      	add	r3, r2
 800e344:	009b      	lsls	r3, r3, #2
 800e346:	440b      	add	r3, r1
 800e348:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e34c:	881b      	ldrh	r3, [r3, #0]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d104      	bne.n	800e35c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800e352:	6839      	ldr	r1, [r7, #0]
 800e354:	6878      	ldr	r0, [r7, #4]
 800e356:	f000 fbad 	bl	800eab4 <USBD_CtlError>
                  break;
 800e35a:	e041      	b.n	800e3e0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e35c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e360:	2b00      	cmp	r3, #0
 800e362:	da0b      	bge.n	800e37c <USBD_StdEPReq+0x23e>
 800e364:	7bbb      	ldrb	r3, [r7, #14]
 800e366:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e36a:	4613      	mov	r3, r2
 800e36c:	009b      	lsls	r3, r3, #2
 800e36e:	4413      	add	r3, r2
 800e370:	009b      	lsls	r3, r3, #2
 800e372:	3310      	adds	r3, #16
 800e374:	687a      	ldr	r2, [r7, #4]
 800e376:	4413      	add	r3, r2
 800e378:	3304      	adds	r3, #4
 800e37a:	e00b      	b.n	800e394 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e37c:	7bbb      	ldrb	r3, [r7, #14]
 800e37e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e382:	4613      	mov	r3, r2
 800e384:	009b      	lsls	r3, r3, #2
 800e386:	4413      	add	r3, r2
 800e388:	009b      	lsls	r3, r3, #2
 800e38a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e38e:	687a      	ldr	r2, [r7, #4]
 800e390:	4413      	add	r3, r2
 800e392:	3304      	adds	r3, #4
 800e394:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e396:	7bbb      	ldrb	r3, [r7, #14]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d002      	beq.n	800e3a2 <USBD_StdEPReq+0x264>
 800e39c:	7bbb      	ldrb	r3, [r7, #14]
 800e39e:	2b80      	cmp	r3, #128	@ 0x80
 800e3a0:	d103      	bne.n	800e3aa <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800e3a2:	68bb      	ldr	r3, [r7, #8]
 800e3a4:	2200      	movs	r2, #0
 800e3a6:	601a      	str	r2, [r3, #0]
 800e3a8:	e00e      	b.n	800e3c8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e3aa:	7bbb      	ldrb	r3, [r7, #14]
 800e3ac:	4619      	mov	r1, r3
 800e3ae:	6878      	ldr	r0, [r7, #4]
 800e3b0:	f001 f85c 	bl	800f46c <USBD_LL_IsStallEP>
 800e3b4:	4603      	mov	r3, r0
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d003      	beq.n	800e3c2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800e3ba:	68bb      	ldr	r3, [r7, #8]
 800e3bc:	2201      	movs	r2, #1
 800e3be:	601a      	str	r2, [r3, #0]
 800e3c0:	e002      	b.n	800e3c8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800e3c2:	68bb      	ldr	r3, [r7, #8]
 800e3c4:	2200      	movs	r2, #0
 800e3c6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e3c8:	68bb      	ldr	r3, [r7, #8]
 800e3ca:	2202      	movs	r2, #2
 800e3cc:	4619      	mov	r1, r3
 800e3ce:	6878      	ldr	r0, [r7, #4]
 800e3d0:	f000 fbe1 	bl	800eb96 <USBD_CtlSendData>
              break;
 800e3d4:	e004      	b.n	800e3e0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800e3d6:	6839      	ldr	r1, [r7, #0]
 800e3d8:	6878      	ldr	r0, [r7, #4]
 800e3da:	f000 fb6b 	bl	800eab4 <USBD_CtlError>
              break;
 800e3de:	bf00      	nop
          }
          break;
 800e3e0:	e004      	b.n	800e3ec <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800e3e2:	6839      	ldr	r1, [r7, #0]
 800e3e4:	6878      	ldr	r0, [r7, #4]
 800e3e6:	f000 fb65 	bl	800eab4 <USBD_CtlError>
          break;
 800e3ea:	bf00      	nop
      }
      break;
 800e3ec:	e004      	b.n	800e3f8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800e3ee:	6839      	ldr	r1, [r7, #0]
 800e3f0:	6878      	ldr	r0, [r7, #4]
 800e3f2:	f000 fb5f 	bl	800eab4 <USBD_CtlError>
      break;
 800e3f6:	bf00      	nop
  }

  return ret;
 800e3f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	3710      	adds	r7, #16
 800e3fe:	46bd      	mov	sp, r7
 800e400:	bd80      	pop	{r7, pc}
	...

0800e404 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e404:	b580      	push	{r7, lr}
 800e406:	b084      	sub	sp, #16
 800e408:	af00      	add	r7, sp, #0
 800e40a:	6078      	str	r0, [r7, #4]
 800e40c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e40e:	2300      	movs	r3, #0
 800e410:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e412:	2300      	movs	r3, #0
 800e414:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e416:	2300      	movs	r3, #0
 800e418:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e41a:	683b      	ldr	r3, [r7, #0]
 800e41c:	885b      	ldrh	r3, [r3, #2]
 800e41e:	0a1b      	lsrs	r3, r3, #8
 800e420:	b29b      	uxth	r3, r3
 800e422:	3b01      	subs	r3, #1
 800e424:	2b0e      	cmp	r3, #14
 800e426:	f200 8152 	bhi.w	800e6ce <USBD_GetDescriptor+0x2ca>
 800e42a:	a201      	add	r2, pc, #4	@ (adr r2, 800e430 <USBD_GetDescriptor+0x2c>)
 800e42c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e430:	0800e4a1 	.word	0x0800e4a1
 800e434:	0800e4b9 	.word	0x0800e4b9
 800e438:	0800e4f9 	.word	0x0800e4f9
 800e43c:	0800e6cf 	.word	0x0800e6cf
 800e440:	0800e6cf 	.word	0x0800e6cf
 800e444:	0800e66f 	.word	0x0800e66f
 800e448:	0800e69b 	.word	0x0800e69b
 800e44c:	0800e6cf 	.word	0x0800e6cf
 800e450:	0800e6cf 	.word	0x0800e6cf
 800e454:	0800e6cf 	.word	0x0800e6cf
 800e458:	0800e6cf 	.word	0x0800e6cf
 800e45c:	0800e6cf 	.word	0x0800e6cf
 800e460:	0800e6cf 	.word	0x0800e6cf
 800e464:	0800e6cf 	.word	0x0800e6cf
 800e468:	0800e46d 	.word	0x0800e46d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e472:	69db      	ldr	r3, [r3, #28]
 800e474:	2b00      	cmp	r3, #0
 800e476:	d00b      	beq.n	800e490 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e47e:	69db      	ldr	r3, [r3, #28]
 800e480:	687a      	ldr	r2, [r7, #4]
 800e482:	7c12      	ldrb	r2, [r2, #16]
 800e484:	f107 0108 	add.w	r1, r7, #8
 800e488:	4610      	mov	r0, r2
 800e48a:	4798      	blx	r3
 800e48c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e48e:	e126      	b.n	800e6de <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e490:	6839      	ldr	r1, [r7, #0]
 800e492:	6878      	ldr	r0, [r7, #4]
 800e494:	f000 fb0e 	bl	800eab4 <USBD_CtlError>
        err++;
 800e498:	7afb      	ldrb	r3, [r7, #11]
 800e49a:	3301      	adds	r3, #1
 800e49c:	72fb      	strb	r3, [r7, #11]
      break;
 800e49e:	e11e      	b.n	800e6de <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	687a      	ldr	r2, [r7, #4]
 800e4aa:	7c12      	ldrb	r2, [r2, #16]
 800e4ac:	f107 0108 	add.w	r1, r7, #8
 800e4b0:	4610      	mov	r0, r2
 800e4b2:	4798      	blx	r3
 800e4b4:	60f8      	str	r0, [r7, #12]
      break;
 800e4b6:	e112      	b.n	800e6de <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	7c1b      	ldrb	r3, [r3, #16]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d10d      	bne.n	800e4dc <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e4c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e4c8:	f107 0208 	add.w	r2, r7, #8
 800e4cc:	4610      	mov	r0, r2
 800e4ce:	4798      	blx	r3
 800e4d0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	3301      	adds	r3, #1
 800e4d6:	2202      	movs	r2, #2
 800e4d8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e4da:	e100      	b.n	800e6de <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e4e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4e4:	f107 0208 	add.w	r2, r7, #8
 800e4e8:	4610      	mov	r0, r2
 800e4ea:	4798      	blx	r3
 800e4ec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	3301      	adds	r3, #1
 800e4f2:	2202      	movs	r2, #2
 800e4f4:	701a      	strb	r2, [r3, #0]
      break;
 800e4f6:	e0f2      	b.n	800e6de <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e4f8:	683b      	ldr	r3, [r7, #0]
 800e4fa:	885b      	ldrh	r3, [r3, #2]
 800e4fc:	b2db      	uxtb	r3, r3
 800e4fe:	2b05      	cmp	r3, #5
 800e500:	f200 80ac 	bhi.w	800e65c <USBD_GetDescriptor+0x258>
 800e504:	a201      	add	r2, pc, #4	@ (adr r2, 800e50c <USBD_GetDescriptor+0x108>)
 800e506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e50a:	bf00      	nop
 800e50c:	0800e525 	.word	0x0800e525
 800e510:	0800e559 	.word	0x0800e559
 800e514:	0800e58d 	.word	0x0800e58d
 800e518:	0800e5c1 	.word	0x0800e5c1
 800e51c:	0800e5f5 	.word	0x0800e5f5
 800e520:	0800e629 	.word	0x0800e629
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e52a:	685b      	ldr	r3, [r3, #4]
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d00b      	beq.n	800e548 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e536:	685b      	ldr	r3, [r3, #4]
 800e538:	687a      	ldr	r2, [r7, #4]
 800e53a:	7c12      	ldrb	r2, [r2, #16]
 800e53c:	f107 0108 	add.w	r1, r7, #8
 800e540:	4610      	mov	r0, r2
 800e542:	4798      	blx	r3
 800e544:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e546:	e091      	b.n	800e66c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e548:	6839      	ldr	r1, [r7, #0]
 800e54a:	6878      	ldr	r0, [r7, #4]
 800e54c:	f000 fab2 	bl	800eab4 <USBD_CtlError>
            err++;
 800e550:	7afb      	ldrb	r3, [r7, #11]
 800e552:	3301      	adds	r3, #1
 800e554:	72fb      	strb	r3, [r7, #11]
          break;
 800e556:	e089      	b.n	800e66c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e55e:	689b      	ldr	r3, [r3, #8]
 800e560:	2b00      	cmp	r3, #0
 800e562:	d00b      	beq.n	800e57c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e56a:	689b      	ldr	r3, [r3, #8]
 800e56c:	687a      	ldr	r2, [r7, #4]
 800e56e:	7c12      	ldrb	r2, [r2, #16]
 800e570:	f107 0108 	add.w	r1, r7, #8
 800e574:	4610      	mov	r0, r2
 800e576:	4798      	blx	r3
 800e578:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e57a:	e077      	b.n	800e66c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e57c:	6839      	ldr	r1, [r7, #0]
 800e57e:	6878      	ldr	r0, [r7, #4]
 800e580:	f000 fa98 	bl	800eab4 <USBD_CtlError>
            err++;
 800e584:	7afb      	ldrb	r3, [r7, #11]
 800e586:	3301      	adds	r3, #1
 800e588:	72fb      	strb	r3, [r7, #11]
          break;
 800e58a:	e06f      	b.n	800e66c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e592:	68db      	ldr	r3, [r3, #12]
 800e594:	2b00      	cmp	r3, #0
 800e596:	d00b      	beq.n	800e5b0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e59e:	68db      	ldr	r3, [r3, #12]
 800e5a0:	687a      	ldr	r2, [r7, #4]
 800e5a2:	7c12      	ldrb	r2, [r2, #16]
 800e5a4:	f107 0108 	add.w	r1, r7, #8
 800e5a8:	4610      	mov	r0, r2
 800e5aa:	4798      	blx	r3
 800e5ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e5ae:	e05d      	b.n	800e66c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e5b0:	6839      	ldr	r1, [r7, #0]
 800e5b2:	6878      	ldr	r0, [r7, #4]
 800e5b4:	f000 fa7e 	bl	800eab4 <USBD_CtlError>
            err++;
 800e5b8:	7afb      	ldrb	r3, [r7, #11]
 800e5ba:	3301      	adds	r3, #1
 800e5bc:	72fb      	strb	r3, [r7, #11]
          break;
 800e5be:	e055      	b.n	800e66c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e5c6:	691b      	ldr	r3, [r3, #16]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d00b      	beq.n	800e5e4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e5d2:	691b      	ldr	r3, [r3, #16]
 800e5d4:	687a      	ldr	r2, [r7, #4]
 800e5d6:	7c12      	ldrb	r2, [r2, #16]
 800e5d8:	f107 0108 	add.w	r1, r7, #8
 800e5dc:	4610      	mov	r0, r2
 800e5de:	4798      	blx	r3
 800e5e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e5e2:	e043      	b.n	800e66c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e5e4:	6839      	ldr	r1, [r7, #0]
 800e5e6:	6878      	ldr	r0, [r7, #4]
 800e5e8:	f000 fa64 	bl	800eab4 <USBD_CtlError>
            err++;
 800e5ec:	7afb      	ldrb	r3, [r7, #11]
 800e5ee:	3301      	adds	r3, #1
 800e5f0:	72fb      	strb	r3, [r7, #11]
          break;
 800e5f2:	e03b      	b.n	800e66c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e5fa:	695b      	ldr	r3, [r3, #20]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d00b      	beq.n	800e618 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e606:	695b      	ldr	r3, [r3, #20]
 800e608:	687a      	ldr	r2, [r7, #4]
 800e60a:	7c12      	ldrb	r2, [r2, #16]
 800e60c:	f107 0108 	add.w	r1, r7, #8
 800e610:	4610      	mov	r0, r2
 800e612:	4798      	blx	r3
 800e614:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e616:	e029      	b.n	800e66c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e618:	6839      	ldr	r1, [r7, #0]
 800e61a:	6878      	ldr	r0, [r7, #4]
 800e61c:	f000 fa4a 	bl	800eab4 <USBD_CtlError>
            err++;
 800e620:	7afb      	ldrb	r3, [r7, #11]
 800e622:	3301      	adds	r3, #1
 800e624:	72fb      	strb	r3, [r7, #11]
          break;
 800e626:	e021      	b.n	800e66c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e62e:	699b      	ldr	r3, [r3, #24]
 800e630:	2b00      	cmp	r3, #0
 800e632:	d00b      	beq.n	800e64c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e63a:	699b      	ldr	r3, [r3, #24]
 800e63c:	687a      	ldr	r2, [r7, #4]
 800e63e:	7c12      	ldrb	r2, [r2, #16]
 800e640:	f107 0108 	add.w	r1, r7, #8
 800e644:	4610      	mov	r0, r2
 800e646:	4798      	blx	r3
 800e648:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e64a:	e00f      	b.n	800e66c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e64c:	6839      	ldr	r1, [r7, #0]
 800e64e:	6878      	ldr	r0, [r7, #4]
 800e650:	f000 fa30 	bl	800eab4 <USBD_CtlError>
            err++;
 800e654:	7afb      	ldrb	r3, [r7, #11]
 800e656:	3301      	adds	r3, #1
 800e658:	72fb      	strb	r3, [r7, #11]
          break;
 800e65a:	e007      	b.n	800e66c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e65c:	6839      	ldr	r1, [r7, #0]
 800e65e:	6878      	ldr	r0, [r7, #4]
 800e660:	f000 fa28 	bl	800eab4 <USBD_CtlError>
          err++;
 800e664:	7afb      	ldrb	r3, [r7, #11]
 800e666:	3301      	adds	r3, #1
 800e668:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800e66a:	bf00      	nop
      }
      break;
 800e66c:	e037      	b.n	800e6de <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	7c1b      	ldrb	r3, [r3, #16]
 800e672:	2b00      	cmp	r3, #0
 800e674:	d109      	bne.n	800e68a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e67c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e67e:	f107 0208 	add.w	r2, r7, #8
 800e682:	4610      	mov	r0, r2
 800e684:	4798      	blx	r3
 800e686:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e688:	e029      	b.n	800e6de <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e68a:	6839      	ldr	r1, [r7, #0]
 800e68c:	6878      	ldr	r0, [r7, #4]
 800e68e:	f000 fa11 	bl	800eab4 <USBD_CtlError>
        err++;
 800e692:	7afb      	ldrb	r3, [r7, #11]
 800e694:	3301      	adds	r3, #1
 800e696:	72fb      	strb	r3, [r7, #11]
      break;
 800e698:	e021      	b.n	800e6de <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	7c1b      	ldrb	r3, [r3, #16]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d10d      	bne.n	800e6be <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e6a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e6aa:	f107 0208 	add.w	r2, r7, #8
 800e6ae:	4610      	mov	r0, r2
 800e6b0:	4798      	blx	r3
 800e6b2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	3301      	adds	r3, #1
 800e6b8:	2207      	movs	r2, #7
 800e6ba:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e6bc:	e00f      	b.n	800e6de <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e6be:	6839      	ldr	r1, [r7, #0]
 800e6c0:	6878      	ldr	r0, [r7, #4]
 800e6c2:	f000 f9f7 	bl	800eab4 <USBD_CtlError>
        err++;
 800e6c6:	7afb      	ldrb	r3, [r7, #11]
 800e6c8:	3301      	adds	r3, #1
 800e6ca:	72fb      	strb	r3, [r7, #11]
      break;
 800e6cc:	e007      	b.n	800e6de <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800e6ce:	6839      	ldr	r1, [r7, #0]
 800e6d0:	6878      	ldr	r0, [r7, #4]
 800e6d2:	f000 f9ef 	bl	800eab4 <USBD_CtlError>
      err++;
 800e6d6:	7afb      	ldrb	r3, [r7, #11]
 800e6d8:	3301      	adds	r3, #1
 800e6da:	72fb      	strb	r3, [r7, #11]
      break;
 800e6dc:	bf00      	nop
  }

  if (err != 0U)
 800e6de:	7afb      	ldrb	r3, [r7, #11]
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d11e      	bne.n	800e722 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800e6e4:	683b      	ldr	r3, [r7, #0]
 800e6e6:	88db      	ldrh	r3, [r3, #6]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d016      	beq.n	800e71a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800e6ec:	893b      	ldrh	r3, [r7, #8]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d00e      	beq.n	800e710 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800e6f2:	683b      	ldr	r3, [r7, #0]
 800e6f4:	88da      	ldrh	r2, [r3, #6]
 800e6f6:	893b      	ldrh	r3, [r7, #8]
 800e6f8:	4293      	cmp	r3, r2
 800e6fa:	bf28      	it	cs
 800e6fc:	4613      	movcs	r3, r2
 800e6fe:	b29b      	uxth	r3, r3
 800e700:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e702:	893b      	ldrh	r3, [r7, #8]
 800e704:	461a      	mov	r2, r3
 800e706:	68f9      	ldr	r1, [r7, #12]
 800e708:	6878      	ldr	r0, [r7, #4]
 800e70a:	f000 fa44 	bl	800eb96 <USBD_CtlSendData>
 800e70e:	e009      	b.n	800e724 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e710:	6839      	ldr	r1, [r7, #0]
 800e712:	6878      	ldr	r0, [r7, #4]
 800e714:	f000 f9ce 	bl	800eab4 <USBD_CtlError>
 800e718:	e004      	b.n	800e724 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e71a:	6878      	ldr	r0, [r7, #4]
 800e71c:	f000 fa95 	bl	800ec4a <USBD_CtlSendStatus>
 800e720:	e000      	b.n	800e724 <USBD_GetDescriptor+0x320>
    return;
 800e722:	bf00      	nop
  }
}
 800e724:	3710      	adds	r7, #16
 800e726:	46bd      	mov	sp, r7
 800e728:	bd80      	pop	{r7, pc}
 800e72a:	bf00      	nop

0800e72c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e72c:	b580      	push	{r7, lr}
 800e72e:	b084      	sub	sp, #16
 800e730:	af00      	add	r7, sp, #0
 800e732:	6078      	str	r0, [r7, #4]
 800e734:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e736:	683b      	ldr	r3, [r7, #0]
 800e738:	889b      	ldrh	r3, [r3, #4]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d131      	bne.n	800e7a2 <USBD_SetAddress+0x76>
 800e73e:	683b      	ldr	r3, [r7, #0]
 800e740:	88db      	ldrh	r3, [r3, #6]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d12d      	bne.n	800e7a2 <USBD_SetAddress+0x76>
 800e746:	683b      	ldr	r3, [r7, #0]
 800e748:	885b      	ldrh	r3, [r3, #2]
 800e74a:	2b7f      	cmp	r3, #127	@ 0x7f
 800e74c:	d829      	bhi.n	800e7a2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e74e:	683b      	ldr	r3, [r7, #0]
 800e750:	885b      	ldrh	r3, [r3, #2]
 800e752:	b2db      	uxtb	r3, r3
 800e754:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e758:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e760:	b2db      	uxtb	r3, r3
 800e762:	2b03      	cmp	r3, #3
 800e764:	d104      	bne.n	800e770 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e766:	6839      	ldr	r1, [r7, #0]
 800e768:	6878      	ldr	r0, [r7, #4]
 800e76a:	f000 f9a3 	bl	800eab4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e76e:	e01d      	b.n	800e7ac <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	7bfa      	ldrb	r2, [r7, #15]
 800e774:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e778:	7bfb      	ldrb	r3, [r7, #15]
 800e77a:	4619      	mov	r1, r3
 800e77c:	6878      	ldr	r0, [r7, #4]
 800e77e:	f000 fea1 	bl	800f4c4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e782:	6878      	ldr	r0, [r7, #4]
 800e784:	f000 fa61 	bl	800ec4a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e788:	7bfb      	ldrb	r3, [r7, #15]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d004      	beq.n	800e798 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	2202      	movs	r2, #2
 800e792:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e796:	e009      	b.n	800e7ac <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	2201      	movs	r2, #1
 800e79c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e7a0:	e004      	b.n	800e7ac <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e7a2:	6839      	ldr	r1, [r7, #0]
 800e7a4:	6878      	ldr	r0, [r7, #4]
 800e7a6:	f000 f985 	bl	800eab4 <USBD_CtlError>
  }
}
 800e7aa:	bf00      	nop
 800e7ac:	bf00      	nop
 800e7ae:	3710      	adds	r7, #16
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	bd80      	pop	{r7, pc}

0800e7b4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e7b4:	b580      	push	{r7, lr}
 800e7b6:	b084      	sub	sp, #16
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	6078      	str	r0, [r7, #4]
 800e7bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e7be:	2300      	movs	r3, #0
 800e7c0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e7c2:	683b      	ldr	r3, [r7, #0]
 800e7c4:	885b      	ldrh	r3, [r3, #2]
 800e7c6:	b2da      	uxtb	r2, r3
 800e7c8:	4b4c      	ldr	r3, [pc, #304]	@ (800e8fc <USBD_SetConfig+0x148>)
 800e7ca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e7cc:	4b4b      	ldr	r3, [pc, #300]	@ (800e8fc <USBD_SetConfig+0x148>)
 800e7ce:	781b      	ldrb	r3, [r3, #0]
 800e7d0:	2b01      	cmp	r3, #1
 800e7d2:	d905      	bls.n	800e7e0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e7d4:	6839      	ldr	r1, [r7, #0]
 800e7d6:	6878      	ldr	r0, [r7, #4]
 800e7d8:	f000 f96c 	bl	800eab4 <USBD_CtlError>
    return USBD_FAIL;
 800e7dc:	2303      	movs	r3, #3
 800e7de:	e088      	b.n	800e8f2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e7e6:	b2db      	uxtb	r3, r3
 800e7e8:	2b02      	cmp	r3, #2
 800e7ea:	d002      	beq.n	800e7f2 <USBD_SetConfig+0x3e>
 800e7ec:	2b03      	cmp	r3, #3
 800e7ee:	d025      	beq.n	800e83c <USBD_SetConfig+0x88>
 800e7f0:	e071      	b.n	800e8d6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e7f2:	4b42      	ldr	r3, [pc, #264]	@ (800e8fc <USBD_SetConfig+0x148>)
 800e7f4:	781b      	ldrb	r3, [r3, #0]
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d01c      	beq.n	800e834 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800e7fa:	4b40      	ldr	r3, [pc, #256]	@ (800e8fc <USBD_SetConfig+0x148>)
 800e7fc:	781b      	ldrb	r3, [r3, #0]
 800e7fe:	461a      	mov	r2, r3
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e804:	4b3d      	ldr	r3, [pc, #244]	@ (800e8fc <USBD_SetConfig+0x148>)
 800e806:	781b      	ldrb	r3, [r3, #0]
 800e808:	4619      	mov	r1, r3
 800e80a:	6878      	ldr	r0, [r7, #4]
 800e80c:	f7ff f992 	bl	800db34 <USBD_SetClassConfig>
 800e810:	4603      	mov	r3, r0
 800e812:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e814:	7bfb      	ldrb	r3, [r7, #15]
 800e816:	2b00      	cmp	r3, #0
 800e818:	d004      	beq.n	800e824 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800e81a:	6839      	ldr	r1, [r7, #0]
 800e81c:	6878      	ldr	r0, [r7, #4]
 800e81e:	f000 f949 	bl	800eab4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e822:	e065      	b.n	800e8f0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800e824:	6878      	ldr	r0, [r7, #4]
 800e826:	f000 fa10 	bl	800ec4a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	2203      	movs	r2, #3
 800e82e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e832:	e05d      	b.n	800e8f0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800e834:	6878      	ldr	r0, [r7, #4]
 800e836:	f000 fa08 	bl	800ec4a <USBD_CtlSendStatus>
      break;
 800e83a:	e059      	b.n	800e8f0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e83c:	4b2f      	ldr	r3, [pc, #188]	@ (800e8fc <USBD_SetConfig+0x148>)
 800e83e:	781b      	ldrb	r3, [r3, #0]
 800e840:	2b00      	cmp	r3, #0
 800e842:	d112      	bne.n	800e86a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	2202      	movs	r2, #2
 800e848:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800e84c:	4b2b      	ldr	r3, [pc, #172]	@ (800e8fc <USBD_SetConfig+0x148>)
 800e84e:	781b      	ldrb	r3, [r3, #0]
 800e850:	461a      	mov	r2, r3
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e856:	4b29      	ldr	r3, [pc, #164]	@ (800e8fc <USBD_SetConfig+0x148>)
 800e858:	781b      	ldrb	r3, [r3, #0]
 800e85a:	4619      	mov	r1, r3
 800e85c:	6878      	ldr	r0, [r7, #4]
 800e85e:	f7ff f985 	bl	800db6c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e862:	6878      	ldr	r0, [r7, #4]
 800e864:	f000 f9f1 	bl	800ec4a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e868:	e042      	b.n	800e8f0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800e86a:	4b24      	ldr	r3, [pc, #144]	@ (800e8fc <USBD_SetConfig+0x148>)
 800e86c:	781b      	ldrb	r3, [r3, #0]
 800e86e:	461a      	mov	r2, r3
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	685b      	ldr	r3, [r3, #4]
 800e874:	429a      	cmp	r2, r3
 800e876:	d02a      	beq.n	800e8ce <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	685b      	ldr	r3, [r3, #4]
 800e87c:	b2db      	uxtb	r3, r3
 800e87e:	4619      	mov	r1, r3
 800e880:	6878      	ldr	r0, [r7, #4]
 800e882:	f7ff f973 	bl	800db6c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e886:	4b1d      	ldr	r3, [pc, #116]	@ (800e8fc <USBD_SetConfig+0x148>)
 800e888:	781b      	ldrb	r3, [r3, #0]
 800e88a:	461a      	mov	r2, r3
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e890:	4b1a      	ldr	r3, [pc, #104]	@ (800e8fc <USBD_SetConfig+0x148>)
 800e892:	781b      	ldrb	r3, [r3, #0]
 800e894:	4619      	mov	r1, r3
 800e896:	6878      	ldr	r0, [r7, #4]
 800e898:	f7ff f94c 	bl	800db34 <USBD_SetClassConfig>
 800e89c:	4603      	mov	r3, r0
 800e89e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e8a0:	7bfb      	ldrb	r3, [r7, #15]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d00f      	beq.n	800e8c6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800e8a6:	6839      	ldr	r1, [r7, #0]
 800e8a8:	6878      	ldr	r0, [r7, #4]
 800e8aa:	f000 f903 	bl	800eab4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	685b      	ldr	r3, [r3, #4]
 800e8b2:	b2db      	uxtb	r3, r3
 800e8b4:	4619      	mov	r1, r3
 800e8b6:	6878      	ldr	r0, [r7, #4]
 800e8b8:	f7ff f958 	bl	800db6c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	2202      	movs	r2, #2
 800e8c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e8c4:	e014      	b.n	800e8f0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800e8c6:	6878      	ldr	r0, [r7, #4]
 800e8c8:	f000 f9bf 	bl	800ec4a <USBD_CtlSendStatus>
      break;
 800e8cc:	e010      	b.n	800e8f0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800e8ce:	6878      	ldr	r0, [r7, #4]
 800e8d0:	f000 f9bb 	bl	800ec4a <USBD_CtlSendStatus>
      break;
 800e8d4:	e00c      	b.n	800e8f0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800e8d6:	6839      	ldr	r1, [r7, #0]
 800e8d8:	6878      	ldr	r0, [r7, #4]
 800e8da:	f000 f8eb 	bl	800eab4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e8de:	4b07      	ldr	r3, [pc, #28]	@ (800e8fc <USBD_SetConfig+0x148>)
 800e8e0:	781b      	ldrb	r3, [r3, #0]
 800e8e2:	4619      	mov	r1, r3
 800e8e4:	6878      	ldr	r0, [r7, #4]
 800e8e6:	f7ff f941 	bl	800db6c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e8ea:	2303      	movs	r3, #3
 800e8ec:	73fb      	strb	r3, [r7, #15]
      break;
 800e8ee:	bf00      	nop
  }

  return ret;
 800e8f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	3710      	adds	r7, #16
 800e8f6:	46bd      	mov	sp, r7
 800e8f8:	bd80      	pop	{r7, pc}
 800e8fa:	bf00      	nop
 800e8fc:	20002724 	.word	0x20002724

0800e900 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e900:	b580      	push	{r7, lr}
 800e902:	b082      	sub	sp, #8
 800e904:	af00      	add	r7, sp, #0
 800e906:	6078      	str	r0, [r7, #4]
 800e908:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e90a:	683b      	ldr	r3, [r7, #0]
 800e90c:	88db      	ldrh	r3, [r3, #6]
 800e90e:	2b01      	cmp	r3, #1
 800e910:	d004      	beq.n	800e91c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e912:	6839      	ldr	r1, [r7, #0]
 800e914:	6878      	ldr	r0, [r7, #4]
 800e916:	f000 f8cd 	bl	800eab4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e91a:	e023      	b.n	800e964 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e922:	b2db      	uxtb	r3, r3
 800e924:	2b02      	cmp	r3, #2
 800e926:	dc02      	bgt.n	800e92e <USBD_GetConfig+0x2e>
 800e928:	2b00      	cmp	r3, #0
 800e92a:	dc03      	bgt.n	800e934 <USBD_GetConfig+0x34>
 800e92c:	e015      	b.n	800e95a <USBD_GetConfig+0x5a>
 800e92e:	2b03      	cmp	r3, #3
 800e930:	d00b      	beq.n	800e94a <USBD_GetConfig+0x4a>
 800e932:	e012      	b.n	800e95a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	2200      	movs	r2, #0
 800e938:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	3308      	adds	r3, #8
 800e93e:	2201      	movs	r2, #1
 800e940:	4619      	mov	r1, r3
 800e942:	6878      	ldr	r0, [r7, #4]
 800e944:	f000 f927 	bl	800eb96 <USBD_CtlSendData>
        break;
 800e948:	e00c      	b.n	800e964 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	3304      	adds	r3, #4
 800e94e:	2201      	movs	r2, #1
 800e950:	4619      	mov	r1, r3
 800e952:	6878      	ldr	r0, [r7, #4]
 800e954:	f000 f91f 	bl	800eb96 <USBD_CtlSendData>
        break;
 800e958:	e004      	b.n	800e964 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e95a:	6839      	ldr	r1, [r7, #0]
 800e95c:	6878      	ldr	r0, [r7, #4]
 800e95e:	f000 f8a9 	bl	800eab4 <USBD_CtlError>
        break;
 800e962:	bf00      	nop
}
 800e964:	bf00      	nop
 800e966:	3708      	adds	r7, #8
 800e968:	46bd      	mov	sp, r7
 800e96a:	bd80      	pop	{r7, pc}

0800e96c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e96c:	b580      	push	{r7, lr}
 800e96e:	b082      	sub	sp, #8
 800e970:	af00      	add	r7, sp, #0
 800e972:	6078      	str	r0, [r7, #4]
 800e974:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e97c:	b2db      	uxtb	r3, r3
 800e97e:	3b01      	subs	r3, #1
 800e980:	2b02      	cmp	r3, #2
 800e982:	d81e      	bhi.n	800e9c2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e984:	683b      	ldr	r3, [r7, #0]
 800e986:	88db      	ldrh	r3, [r3, #6]
 800e988:	2b02      	cmp	r3, #2
 800e98a:	d004      	beq.n	800e996 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e98c:	6839      	ldr	r1, [r7, #0]
 800e98e:	6878      	ldr	r0, [r7, #4]
 800e990:	f000 f890 	bl	800eab4 <USBD_CtlError>
        break;
 800e994:	e01a      	b.n	800e9cc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	2201      	movs	r2, #1
 800e99a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d005      	beq.n	800e9b2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	68db      	ldr	r3, [r3, #12]
 800e9aa:	f043 0202 	orr.w	r2, r3, #2
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	330c      	adds	r3, #12
 800e9b6:	2202      	movs	r2, #2
 800e9b8:	4619      	mov	r1, r3
 800e9ba:	6878      	ldr	r0, [r7, #4]
 800e9bc:	f000 f8eb 	bl	800eb96 <USBD_CtlSendData>
      break;
 800e9c0:	e004      	b.n	800e9cc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e9c2:	6839      	ldr	r1, [r7, #0]
 800e9c4:	6878      	ldr	r0, [r7, #4]
 800e9c6:	f000 f875 	bl	800eab4 <USBD_CtlError>
      break;
 800e9ca:	bf00      	nop
  }
}
 800e9cc:	bf00      	nop
 800e9ce:	3708      	adds	r7, #8
 800e9d0:	46bd      	mov	sp, r7
 800e9d2:	bd80      	pop	{r7, pc}

0800e9d4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e9d4:	b580      	push	{r7, lr}
 800e9d6:	b082      	sub	sp, #8
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	6078      	str	r0, [r7, #4]
 800e9dc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e9de:	683b      	ldr	r3, [r7, #0]
 800e9e0:	885b      	ldrh	r3, [r3, #2]
 800e9e2:	2b01      	cmp	r3, #1
 800e9e4:	d106      	bne.n	800e9f4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	2201      	movs	r2, #1
 800e9ea:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e9ee:	6878      	ldr	r0, [r7, #4]
 800e9f0:	f000 f92b 	bl	800ec4a <USBD_CtlSendStatus>
  }
}
 800e9f4:	bf00      	nop
 800e9f6:	3708      	adds	r7, #8
 800e9f8:	46bd      	mov	sp, r7
 800e9fa:	bd80      	pop	{r7, pc}

0800e9fc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	b082      	sub	sp, #8
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	6078      	str	r0, [r7, #4]
 800ea04:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ea0c:	b2db      	uxtb	r3, r3
 800ea0e:	3b01      	subs	r3, #1
 800ea10:	2b02      	cmp	r3, #2
 800ea12:	d80b      	bhi.n	800ea2c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ea14:	683b      	ldr	r3, [r7, #0]
 800ea16:	885b      	ldrh	r3, [r3, #2]
 800ea18:	2b01      	cmp	r3, #1
 800ea1a:	d10c      	bne.n	800ea36 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	2200      	movs	r2, #0
 800ea20:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ea24:	6878      	ldr	r0, [r7, #4]
 800ea26:	f000 f910 	bl	800ec4a <USBD_CtlSendStatus>
      }
      break;
 800ea2a:	e004      	b.n	800ea36 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ea2c:	6839      	ldr	r1, [r7, #0]
 800ea2e:	6878      	ldr	r0, [r7, #4]
 800ea30:	f000 f840 	bl	800eab4 <USBD_CtlError>
      break;
 800ea34:	e000      	b.n	800ea38 <USBD_ClrFeature+0x3c>
      break;
 800ea36:	bf00      	nop
  }
}
 800ea38:	bf00      	nop
 800ea3a:	3708      	adds	r7, #8
 800ea3c:	46bd      	mov	sp, r7
 800ea3e:	bd80      	pop	{r7, pc}

0800ea40 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ea40:	b580      	push	{r7, lr}
 800ea42:	b084      	sub	sp, #16
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	6078      	str	r0, [r7, #4]
 800ea48:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ea4a:	683b      	ldr	r3, [r7, #0]
 800ea4c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	781a      	ldrb	r2, [r3, #0]
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	3301      	adds	r3, #1
 800ea5a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	781a      	ldrb	r2, [r3, #0]
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	3301      	adds	r3, #1
 800ea68:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ea6a:	68f8      	ldr	r0, [r7, #12]
 800ea6c:	f7ff fa92 	bl	800df94 <SWAPBYTE>
 800ea70:	4603      	mov	r3, r0
 800ea72:	461a      	mov	r2, r3
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	3301      	adds	r3, #1
 800ea7c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	3301      	adds	r3, #1
 800ea82:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ea84:	68f8      	ldr	r0, [r7, #12]
 800ea86:	f7ff fa85 	bl	800df94 <SWAPBYTE>
 800ea8a:	4603      	mov	r3, r0
 800ea8c:	461a      	mov	r2, r3
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	3301      	adds	r3, #1
 800ea96:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	3301      	adds	r3, #1
 800ea9c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ea9e:	68f8      	ldr	r0, [r7, #12]
 800eaa0:	f7ff fa78 	bl	800df94 <SWAPBYTE>
 800eaa4:	4603      	mov	r3, r0
 800eaa6:	461a      	mov	r2, r3
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	80da      	strh	r2, [r3, #6]
}
 800eaac:	bf00      	nop
 800eaae:	3710      	adds	r7, #16
 800eab0:	46bd      	mov	sp, r7
 800eab2:	bd80      	pop	{r7, pc}

0800eab4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eab4:	b580      	push	{r7, lr}
 800eab6:	b082      	sub	sp, #8
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	6078      	str	r0, [r7, #4]
 800eabc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800eabe:	2180      	movs	r1, #128	@ 0x80
 800eac0:	6878      	ldr	r0, [r7, #4]
 800eac2:	f000 fc95 	bl	800f3f0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800eac6:	2100      	movs	r1, #0
 800eac8:	6878      	ldr	r0, [r7, #4]
 800eaca:	f000 fc91 	bl	800f3f0 <USBD_LL_StallEP>
}
 800eace:	bf00      	nop
 800ead0:	3708      	adds	r7, #8
 800ead2:	46bd      	mov	sp, r7
 800ead4:	bd80      	pop	{r7, pc}

0800ead6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ead6:	b580      	push	{r7, lr}
 800ead8:	b086      	sub	sp, #24
 800eada:	af00      	add	r7, sp, #0
 800eadc:	60f8      	str	r0, [r7, #12]
 800eade:	60b9      	str	r1, [r7, #8]
 800eae0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800eae2:	2300      	movs	r3, #0
 800eae4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d036      	beq.n	800eb5a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800eaf0:	6938      	ldr	r0, [r7, #16]
 800eaf2:	f000 f836 	bl	800eb62 <USBD_GetLen>
 800eaf6:	4603      	mov	r3, r0
 800eaf8:	3301      	adds	r3, #1
 800eafa:	b29b      	uxth	r3, r3
 800eafc:	005b      	lsls	r3, r3, #1
 800eafe:	b29a      	uxth	r2, r3
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800eb04:	7dfb      	ldrb	r3, [r7, #23]
 800eb06:	68ba      	ldr	r2, [r7, #8]
 800eb08:	4413      	add	r3, r2
 800eb0a:	687a      	ldr	r2, [r7, #4]
 800eb0c:	7812      	ldrb	r2, [r2, #0]
 800eb0e:	701a      	strb	r2, [r3, #0]
  idx++;
 800eb10:	7dfb      	ldrb	r3, [r7, #23]
 800eb12:	3301      	adds	r3, #1
 800eb14:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800eb16:	7dfb      	ldrb	r3, [r7, #23]
 800eb18:	68ba      	ldr	r2, [r7, #8]
 800eb1a:	4413      	add	r3, r2
 800eb1c:	2203      	movs	r2, #3
 800eb1e:	701a      	strb	r2, [r3, #0]
  idx++;
 800eb20:	7dfb      	ldrb	r3, [r7, #23]
 800eb22:	3301      	adds	r3, #1
 800eb24:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800eb26:	e013      	b.n	800eb50 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800eb28:	7dfb      	ldrb	r3, [r7, #23]
 800eb2a:	68ba      	ldr	r2, [r7, #8]
 800eb2c:	4413      	add	r3, r2
 800eb2e:	693a      	ldr	r2, [r7, #16]
 800eb30:	7812      	ldrb	r2, [r2, #0]
 800eb32:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800eb34:	693b      	ldr	r3, [r7, #16]
 800eb36:	3301      	adds	r3, #1
 800eb38:	613b      	str	r3, [r7, #16]
    idx++;
 800eb3a:	7dfb      	ldrb	r3, [r7, #23]
 800eb3c:	3301      	adds	r3, #1
 800eb3e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800eb40:	7dfb      	ldrb	r3, [r7, #23]
 800eb42:	68ba      	ldr	r2, [r7, #8]
 800eb44:	4413      	add	r3, r2
 800eb46:	2200      	movs	r2, #0
 800eb48:	701a      	strb	r2, [r3, #0]
    idx++;
 800eb4a:	7dfb      	ldrb	r3, [r7, #23]
 800eb4c:	3301      	adds	r3, #1
 800eb4e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800eb50:	693b      	ldr	r3, [r7, #16]
 800eb52:	781b      	ldrb	r3, [r3, #0]
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d1e7      	bne.n	800eb28 <USBD_GetString+0x52>
 800eb58:	e000      	b.n	800eb5c <USBD_GetString+0x86>
    return;
 800eb5a:	bf00      	nop
  }
}
 800eb5c:	3718      	adds	r7, #24
 800eb5e:	46bd      	mov	sp, r7
 800eb60:	bd80      	pop	{r7, pc}

0800eb62 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800eb62:	b480      	push	{r7}
 800eb64:	b085      	sub	sp, #20
 800eb66:	af00      	add	r7, sp, #0
 800eb68:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800eb6a:	2300      	movs	r3, #0
 800eb6c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800eb72:	e005      	b.n	800eb80 <USBD_GetLen+0x1e>
  {
    len++;
 800eb74:	7bfb      	ldrb	r3, [r7, #15]
 800eb76:	3301      	adds	r3, #1
 800eb78:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800eb7a:	68bb      	ldr	r3, [r7, #8]
 800eb7c:	3301      	adds	r3, #1
 800eb7e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800eb80:	68bb      	ldr	r3, [r7, #8]
 800eb82:	781b      	ldrb	r3, [r3, #0]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d1f5      	bne.n	800eb74 <USBD_GetLen+0x12>
  }

  return len;
 800eb88:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	3714      	adds	r7, #20
 800eb8e:	46bd      	mov	sp, r7
 800eb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb94:	4770      	bx	lr

0800eb96 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800eb96:	b580      	push	{r7, lr}
 800eb98:	b084      	sub	sp, #16
 800eb9a:	af00      	add	r7, sp, #0
 800eb9c:	60f8      	str	r0, [r7, #12]
 800eb9e:	60b9      	str	r1, [r7, #8]
 800eba0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	2202      	movs	r2, #2
 800eba6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	687a      	ldr	r2, [r7, #4]
 800ebae:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	687a      	ldr	r2, [r7, #4]
 800ebb4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	68ba      	ldr	r2, [r7, #8]
 800ebba:	2100      	movs	r1, #0
 800ebbc:	68f8      	ldr	r0, [r7, #12]
 800ebbe:	f000 fca0 	bl	800f502 <USBD_LL_Transmit>

  return USBD_OK;
 800ebc2:	2300      	movs	r3, #0
}
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	3710      	adds	r7, #16
 800ebc8:	46bd      	mov	sp, r7
 800ebca:	bd80      	pop	{r7, pc}

0800ebcc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ebcc:	b580      	push	{r7, lr}
 800ebce:	b084      	sub	sp, #16
 800ebd0:	af00      	add	r7, sp, #0
 800ebd2:	60f8      	str	r0, [r7, #12]
 800ebd4:	60b9      	str	r1, [r7, #8]
 800ebd6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	68ba      	ldr	r2, [r7, #8]
 800ebdc:	2100      	movs	r1, #0
 800ebde:	68f8      	ldr	r0, [r7, #12]
 800ebe0:	f000 fc8f 	bl	800f502 <USBD_LL_Transmit>

  return USBD_OK;
 800ebe4:	2300      	movs	r3, #0
}
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	3710      	adds	r7, #16
 800ebea:	46bd      	mov	sp, r7
 800ebec:	bd80      	pop	{r7, pc}

0800ebee <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ebee:	b580      	push	{r7, lr}
 800ebf0:	b084      	sub	sp, #16
 800ebf2:	af00      	add	r7, sp, #0
 800ebf4:	60f8      	str	r0, [r7, #12]
 800ebf6:	60b9      	str	r1, [r7, #8]
 800ebf8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	2203      	movs	r2, #3
 800ebfe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	687a      	ldr	r2, [r7, #4]
 800ec06:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	687a      	ldr	r2, [r7, #4]
 800ec0e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	68ba      	ldr	r2, [r7, #8]
 800ec16:	2100      	movs	r1, #0
 800ec18:	68f8      	ldr	r0, [r7, #12]
 800ec1a:	f000 fc93 	bl	800f544 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ec1e:	2300      	movs	r3, #0
}
 800ec20:	4618      	mov	r0, r3
 800ec22:	3710      	adds	r7, #16
 800ec24:	46bd      	mov	sp, r7
 800ec26:	bd80      	pop	{r7, pc}

0800ec28 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ec28:	b580      	push	{r7, lr}
 800ec2a:	b084      	sub	sp, #16
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	60f8      	str	r0, [r7, #12]
 800ec30:	60b9      	str	r1, [r7, #8]
 800ec32:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	68ba      	ldr	r2, [r7, #8]
 800ec38:	2100      	movs	r1, #0
 800ec3a:	68f8      	ldr	r0, [r7, #12]
 800ec3c:	f000 fc82 	bl	800f544 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ec40:	2300      	movs	r3, #0
}
 800ec42:	4618      	mov	r0, r3
 800ec44:	3710      	adds	r7, #16
 800ec46:	46bd      	mov	sp, r7
 800ec48:	bd80      	pop	{r7, pc}

0800ec4a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ec4a:	b580      	push	{r7, lr}
 800ec4c:	b082      	sub	sp, #8
 800ec4e:	af00      	add	r7, sp, #0
 800ec50:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	2204      	movs	r2, #4
 800ec56:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	2200      	movs	r2, #0
 800ec5e:	2100      	movs	r1, #0
 800ec60:	6878      	ldr	r0, [r7, #4]
 800ec62:	f000 fc4e 	bl	800f502 <USBD_LL_Transmit>

  return USBD_OK;
 800ec66:	2300      	movs	r3, #0
}
 800ec68:	4618      	mov	r0, r3
 800ec6a:	3708      	adds	r7, #8
 800ec6c:	46bd      	mov	sp, r7
 800ec6e:	bd80      	pop	{r7, pc}

0800ec70 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ec70:	b580      	push	{r7, lr}
 800ec72:	b082      	sub	sp, #8
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	2205      	movs	r2, #5
 800ec7c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ec80:	2300      	movs	r3, #0
 800ec82:	2200      	movs	r2, #0
 800ec84:	2100      	movs	r1, #0
 800ec86:	6878      	ldr	r0, [r7, #4]
 800ec88:	f000 fc5c 	bl	800f544 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ec8c:	2300      	movs	r3, #0
}
 800ec8e:	4618      	mov	r0, r3
 800ec90:	3708      	adds	r7, #8
 800ec92:	46bd      	mov	sp, r7
 800ec94:	bd80      	pop	{r7, pc}
	...

0800ec98 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800ec98:	b580      	push	{r7, lr}
 800ec9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800ec9c:	2200      	movs	r2, #0
 800ec9e:	4912      	ldr	r1, [pc, #72]	@ (800ece8 <MX_USB_Device_Init+0x50>)
 800eca0:	4812      	ldr	r0, [pc, #72]	@ (800ecec <MX_USB_Device_Init+0x54>)
 800eca2:	f7fe fed9 	bl	800da58 <USBD_Init>
 800eca6:	4603      	mov	r3, r0
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d001      	beq.n	800ecb0 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800ecac:	f7f3 f8f8 	bl	8001ea0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800ecb0:	490f      	ldr	r1, [pc, #60]	@ (800ecf0 <MX_USB_Device_Init+0x58>)
 800ecb2:	480e      	ldr	r0, [pc, #56]	@ (800ecec <MX_USB_Device_Init+0x54>)
 800ecb4:	f7fe ff00 	bl	800dab8 <USBD_RegisterClass>
 800ecb8:	4603      	mov	r3, r0
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d001      	beq.n	800ecc2 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800ecbe:	f7f3 f8ef 	bl	8001ea0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800ecc2:	490c      	ldr	r1, [pc, #48]	@ (800ecf4 <MX_USB_Device_Init+0x5c>)
 800ecc4:	4809      	ldr	r0, [pc, #36]	@ (800ecec <MX_USB_Device_Init+0x54>)
 800ecc6:	f7fe fe21 	bl	800d90c <USBD_CDC_RegisterInterface>
 800ecca:	4603      	mov	r3, r0
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d001      	beq.n	800ecd4 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800ecd0:	f7f3 f8e6 	bl	8001ea0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800ecd4:	4805      	ldr	r0, [pc, #20]	@ (800ecec <MX_USB_Device_Init+0x54>)
 800ecd6:	f7fe ff16 	bl	800db06 <USBD_Start>
 800ecda:	4603      	mov	r3, r0
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d001      	beq.n	800ece4 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800ece0:	f7f3 f8de 	bl	8001ea0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800ece4:	bf00      	nop
 800ece6:	bd80      	pop	{r7, pc}
 800ece8:	20000130 	.word	0x20000130
 800ecec:	20002728 	.word	0x20002728
 800ecf0:	20000018 	.word	0x20000018
 800ecf4:	2000011c 	.word	0x2000011c

0800ecf8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ecf8:	b580      	push	{r7, lr}
 800ecfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ecfc:	2200      	movs	r2, #0
 800ecfe:	4905      	ldr	r1, [pc, #20]	@ (800ed14 <CDC_Init_FS+0x1c>)
 800ed00:	4805      	ldr	r0, [pc, #20]	@ (800ed18 <CDC_Init_FS+0x20>)
 800ed02:	f7fe fe18 	bl	800d936 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ed06:	4905      	ldr	r1, [pc, #20]	@ (800ed1c <CDC_Init_FS+0x24>)
 800ed08:	4803      	ldr	r0, [pc, #12]	@ (800ed18 <CDC_Init_FS+0x20>)
 800ed0a:	f7fe fe32 	bl	800d972 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ed0e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ed10:	4618      	mov	r0, r3
 800ed12:	bd80      	pop	{r7, pc}
 800ed14:	200031f8 	.word	0x200031f8
 800ed18:	20002728 	.word	0x20002728
 800ed1c:	200029f8 	.word	0x200029f8

0800ed20 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ed20:	b480      	push	{r7}
 800ed22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ed24:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ed26:	4618      	mov	r0, r3
 800ed28:	46bd      	mov	sp, r7
 800ed2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed2e:	4770      	bx	lr

0800ed30 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ed30:	b480      	push	{r7}
 800ed32:	b083      	sub	sp, #12
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	4603      	mov	r3, r0
 800ed38:	6039      	str	r1, [r7, #0]
 800ed3a:	71fb      	strb	r3, [r7, #7]
 800ed3c:	4613      	mov	r3, r2
 800ed3e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ed40:	79fb      	ldrb	r3, [r7, #7]
 800ed42:	2b23      	cmp	r3, #35	@ 0x23
 800ed44:	d84a      	bhi.n	800eddc <CDC_Control_FS+0xac>
 800ed46:	a201      	add	r2, pc, #4	@ (adr r2, 800ed4c <CDC_Control_FS+0x1c>)
 800ed48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed4c:	0800eddd 	.word	0x0800eddd
 800ed50:	0800eddd 	.word	0x0800eddd
 800ed54:	0800eddd 	.word	0x0800eddd
 800ed58:	0800eddd 	.word	0x0800eddd
 800ed5c:	0800eddd 	.word	0x0800eddd
 800ed60:	0800eddd 	.word	0x0800eddd
 800ed64:	0800eddd 	.word	0x0800eddd
 800ed68:	0800eddd 	.word	0x0800eddd
 800ed6c:	0800eddd 	.word	0x0800eddd
 800ed70:	0800eddd 	.word	0x0800eddd
 800ed74:	0800eddd 	.word	0x0800eddd
 800ed78:	0800eddd 	.word	0x0800eddd
 800ed7c:	0800eddd 	.word	0x0800eddd
 800ed80:	0800eddd 	.word	0x0800eddd
 800ed84:	0800eddd 	.word	0x0800eddd
 800ed88:	0800eddd 	.word	0x0800eddd
 800ed8c:	0800eddd 	.word	0x0800eddd
 800ed90:	0800eddd 	.word	0x0800eddd
 800ed94:	0800eddd 	.word	0x0800eddd
 800ed98:	0800eddd 	.word	0x0800eddd
 800ed9c:	0800eddd 	.word	0x0800eddd
 800eda0:	0800eddd 	.word	0x0800eddd
 800eda4:	0800eddd 	.word	0x0800eddd
 800eda8:	0800eddd 	.word	0x0800eddd
 800edac:	0800eddd 	.word	0x0800eddd
 800edb0:	0800eddd 	.word	0x0800eddd
 800edb4:	0800eddd 	.word	0x0800eddd
 800edb8:	0800eddd 	.word	0x0800eddd
 800edbc:	0800eddd 	.word	0x0800eddd
 800edc0:	0800eddd 	.word	0x0800eddd
 800edc4:	0800eddd 	.word	0x0800eddd
 800edc8:	0800eddd 	.word	0x0800eddd
 800edcc:	0800eddd 	.word	0x0800eddd
 800edd0:	0800eddd 	.word	0x0800eddd
 800edd4:	0800eddd 	.word	0x0800eddd
 800edd8:	0800eddd 	.word	0x0800eddd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800eddc:	bf00      	nop
  }

  return (USBD_OK);
 800edde:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ede0:	4618      	mov	r0, r3
 800ede2:	370c      	adds	r7, #12
 800ede4:	46bd      	mov	sp, r7
 800ede6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edea:	4770      	bx	lr

0800edec <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800edec:	b580      	push	{r7, lr}
 800edee:	b082      	sub	sp, #8
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	6078      	str	r0, [r7, #4]
 800edf4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800edf6:	6879      	ldr	r1, [r7, #4]
 800edf8:	4805      	ldr	r0, [pc, #20]	@ (800ee10 <CDC_Receive_FS+0x24>)
 800edfa:	f7fe fdba 	bl	800d972 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800edfe:	4804      	ldr	r0, [pc, #16]	@ (800ee10 <CDC_Receive_FS+0x24>)
 800ee00:	f7fe fe00 	bl	800da04 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ee04:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ee06:	4618      	mov	r0, r3
 800ee08:	3708      	adds	r7, #8
 800ee0a:	46bd      	mov	sp, r7
 800ee0c:	bd80      	pop	{r7, pc}
 800ee0e:	bf00      	nop
 800ee10:	20002728 	.word	0x20002728

0800ee14 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ee14:	b580      	push	{r7, lr}
 800ee16:	b084      	sub	sp, #16
 800ee18:	af00      	add	r7, sp, #0
 800ee1a:	6078      	str	r0, [r7, #4]
 800ee1c:	460b      	mov	r3, r1
 800ee1e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ee20:	2300      	movs	r3, #0
 800ee22:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ee24:	4b0d      	ldr	r3, [pc, #52]	@ (800ee5c <CDC_Transmit_FS+0x48>)
 800ee26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ee2a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ee2c:	68bb      	ldr	r3, [r7, #8]
 800ee2e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d001      	beq.n	800ee3a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ee36:	2301      	movs	r3, #1
 800ee38:	e00b      	b.n	800ee52 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ee3a:	887b      	ldrh	r3, [r7, #2]
 800ee3c:	461a      	mov	r2, r3
 800ee3e:	6879      	ldr	r1, [r7, #4]
 800ee40:	4806      	ldr	r0, [pc, #24]	@ (800ee5c <CDC_Transmit_FS+0x48>)
 800ee42:	f7fe fd78 	bl	800d936 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ee46:	4805      	ldr	r0, [pc, #20]	@ (800ee5c <CDC_Transmit_FS+0x48>)
 800ee48:	f7fe fdac 	bl	800d9a4 <USBD_CDC_TransmitPacket>
 800ee4c:	4603      	mov	r3, r0
 800ee4e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ee50:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee52:	4618      	mov	r0, r3
 800ee54:	3710      	adds	r7, #16
 800ee56:	46bd      	mov	sp, r7
 800ee58:	bd80      	pop	{r7, pc}
 800ee5a:	bf00      	nop
 800ee5c:	20002728 	.word	0x20002728

0800ee60 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ee60:	b480      	push	{r7}
 800ee62:	b087      	sub	sp, #28
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	60f8      	str	r0, [r7, #12]
 800ee68:	60b9      	str	r1, [r7, #8]
 800ee6a:	4613      	mov	r3, r2
 800ee6c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ee6e:	2300      	movs	r3, #0
 800ee70:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ee72:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ee76:	4618      	mov	r0, r3
 800ee78:	371c      	adds	r7, #28
 800ee7a:	46bd      	mov	sp, r7
 800ee7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee80:	4770      	bx	lr
	...

0800ee84 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ee84:	b480      	push	{r7}
 800ee86:	b083      	sub	sp, #12
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	4603      	mov	r3, r0
 800ee8c:	6039      	str	r1, [r7, #0]
 800ee8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800ee90:	683b      	ldr	r3, [r7, #0]
 800ee92:	2212      	movs	r2, #18
 800ee94:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800ee96:	4b03      	ldr	r3, [pc, #12]	@ (800eea4 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800ee98:	4618      	mov	r0, r3
 800ee9a:	370c      	adds	r7, #12
 800ee9c:	46bd      	mov	sp, r7
 800ee9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea2:	4770      	bx	lr
 800eea4:	20000150 	.word	0x20000150

0800eea8 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eea8:	b480      	push	{r7}
 800eeaa:	b083      	sub	sp, #12
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	4603      	mov	r3, r0
 800eeb0:	6039      	str	r1, [r7, #0]
 800eeb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800eeb4:	683b      	ldr	r3, [r7, #0]
 800eeb6:	2204      	movs	r2, #4
 800eeb8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800eeba:	4b03      	ldr	r3, [pc, #12]	@ (800eec8 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800eebc:	4618      	mov	r0, r3
 800eebe:	370c      	adds	r7, #12
 800eec0:	46bd      	mov	sp, r7
 800eec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec6:	4770      	bx	lr
 800eec8:	20000164 	.word	0x20000164

0800eecc <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eecc:	b580      	push	{r7, lr}
 800eece:	b082      	sub	sp, #8
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	4603      	mov	r3, r0
 800eed4:	6039      	str	r1, [r7, #0]
 800eed6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800eed8:	79fb      	ldrb	r3, [r7, #7]
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d105      	bne.n	800eeea <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800eede:	683a      	ldr	r2, [r7, #0]
 800eee0:	4907      	ldr	r1, [pc, #28]	@ (800ef00 <USBD_CDC_ProductStrDescriptor+0x34>)
 800eee2:	4808      	ldr	r0, [pc, #32]	@ (800ef04 <USBD_CDC_ProductStrDescriptor+0x38>)
 800eee4:	f7ff fdf7 	bl	800ead6 <USBD_GetString>
 800eee8:	e004      	b.n	800eef4 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800eeea:	683a      	ldr	r2, [r7, #0]
 800eeec:	4904      	ldr	r1, [pc, #16]	@ (800ef00 <USBD_CDC_ProductStrDescriptor+0x34>)
 800eeee:	4805      	ldr	r0, [pc, #20]	@ (800ef04 <USBD_CDC_ProductStrDescriptor+0x38>)
 800eef0:	f7ff fdf1 	bl	800ead6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800eef4:	4b02      	ldr	r3, [pc, #8]	@ (800ef00 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800eef6:	4618      	mov	r0, r3
 800eef8:	3708      	adds	r7, #8
 800eefa:	46bd      	mov	sp, r7
 800eefc:	bd80      	pop	{r7, pc}
 800eefe:	bf00      	nop
 800ef00:	200039f8 	.word	0x200039f8
 800ef04:	080148b4 	.word	0x080148b4

0800ef08 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef08:	b580      	push	{r7, lr}
 800ef0a:	b082      	sub	sp, #8
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	4603      	mov	r3, r0
 800ef10:	6039      	str	r1, [r7, #0]
 800ef12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ef14:	683a      	ldr	r2, [r7, #0]
 800ef16:	4904      	ldr	r1, [pc, #16]	@ (800ef28 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800ef18:	4804      	ldr	r0, [pc, #16]	@ (800ef2c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800ef1a:	f7ff fddc 	bl	800ead6 <USBD_GetString>
  return USBD_StrDesc;
 800ef1e:	4b02      	ldr	r3, [pc, #8]	@ (800ef28 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800ef20:	4618      	mov	r0, r3
 800ef22:	3708      	adds	r7, #8
 800ef24:	46bd      	mov	sp, r7
 800ef26:	bd80      	pop	{r7, pc}
 800ef28:	200039f8 	.word	0x200039f8
 800ef2c:	080148cc 	.word	0x080148cc

0800ef30 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef30:	b580      	push	{r7, lr}
 800ef32:	b082      	sub	sp, #8
 800ef34:	af00      	add	r7, sp, #0
 800ef36:	4603      	mov	r3, r0
 800ef38:	6039      	str	r1, [r7, #0]
 800ef3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ef3c:	683b      	ldr	r3, [r7, #0]
 800ef3e:	221a      	movs	r2, #26
 800ef40:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ef42:	f000 f843 	bl	800efcc <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800ef46:	4b02      	ldr	r3, [pc, #8]	@ (800ef50 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800ef48:	4618      	mov	r0, r3
 800ef4a:	3708      	adds	r7, #8
 800ef4c:	46bd      	mov	sp, r7
 800ef4e:	bd80      	pop	{r7, pc}
 800ef50:	20000168 	.word	0x20000168

0800ef54 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef54:	b580      	push	{r7, lr}
 800ef56:	b082      	sub	sp, #8
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	4603      	mov	r3, r0
 800ef5c:	6039      	str	r1, [r7, #0]
 800ef5e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ef60:	79fb      	ldrb	r3, [r7, #7]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d105      	bne.n	800ef72 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ef66:	683a      	ldr	r2, [r7, #0]
 800ef68:	4907      	ldr	r1, [pc, #28]	@ (800ef88 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800ef6a:	4808      	ldr	r0, [pc, #32]	@ (800ef8c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800ef6c:	f7ff fdb3 	bl	800ead6 <USBD_GetString>
 800ef70:	e004      	b.n	800ef7c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ef72:	683a      	ldr	r2, [r7, #0]
 800ef74:	4904      	ldr	r1, [pc, #16]	@ (800ef88 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800ef76:	4805      	ldr	r0, [pc, #20]	@ (800ef8c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800ef78:	f7ff fdad 	bl	800ead6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ef7c:	4b02      	ldr	r3, [pc, #8]	@ (800ef88 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800ef7e:	4618      	mov	r0, r3
 800ef80:	3708      	adds	r7, #8
 800ef82:	46bd      	mov	sp, r7
 800ef84:	bd80      	pop	{r7, pc}
 800ef86:	bf00      	nop
 800ef88:	200039f8 	.word	0x200039f8
 800ef8c:	080148e0 	.word	0x080148e0

0800ef90 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef90:	b580      	push	{r7, lr}
 800ef92:	b082      	sub	sp, #8
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	4603      	mov	r3, r0
 800ef98:	6039      	str	r1, [r7, #0]
 800ef9a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ef9c:	79fb      	ldrb	r3, [r7, #7]
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d105      	bne.n	800efae <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800efa2:	683a      	ldr	r2, [r7, #0]
 800efa4:	4907      	ldr	r1, [pc, #28]	@ (800efc4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800efa6:	4808      	ldr	r0, [pc, #32]	@ (800efc8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800efa8:	f7ff fd95 	bl	800ead6 <USBD_GetString>
 800efac:	e004      	b.n	800efb8 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800efae:	683a      	ldr	r2, [r7, #0]
 800efb0:	4904      	ldr	r1, [pc, #16]	@ (800efc4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800efb2:	4805      	ldr	r0, [pc, #20]	@ (800efc8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800efb4:	f7ff fd8f 	bl	800ead6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800efb8:	4b02      	ldr	r3, [pc, #8]	@ (800efc4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800efba:	4618      	mov	r0, r3
 800efbc:	3708      	adds	r7, #8
 800efbe:	46bd      	mov	sp, r7
 800efc0:	bd80      	pop	{r7, pc}
 800efc2:	bf00      	nop
 800efc4:	200039f8 	.word	0x200039f8
 800efc8:	080148ec 	.word	0x080148ec

0800efcc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800efcc:	b580      	push	{r7, lr}
 800efce:	b084      	sub	sp, #16
 800efd0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800efd2:	4b0f      	ldr	r3, [pc, #60]	@ (800f010 <Get_SerialNum+0x44>)
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800efd8:	4b0e      	ldr	r3, [pc, #56]	@ (800f014 <Get_SerialNum+0x48>)
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800efde:	4b0e      	ldr	r3, [pc, #56]	@ (800f018 <Get_SerialNum+0x4c>)
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800efe4:	68fa      	ldr	r2, [r7, #12]
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	4413      	add	r3, r2
 800efea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d009      	beq.n	800f006 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800eff2:	2208      	movs	r2, #8
 800eff4:	4909      	ldr	r1, [pc, #36]	@ (800f01c <Get_SerialNum+0x50>)
 800eff6:	68f8      	ldr	r0, [r7, #12]
 800eff8:	f000 f814 	bl	800f024 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800effc:	2204      	movs	r2, #4
 800effe:	4908      	ldr	r1, [pc, #32]	@ (800f020 <Get_SerialNum+0x54>)
 800f000:	68b8      	ldr	r0, [r7, #8]
 800f002:	f000 f80f 	bl	800f024 <IntToUnicode>
  }
}
 800f006:	bf00      	nop
 800f008:	3710      	adds	r7, #16
 800f00a:	46bd      	mov	sp, r7
 800f00c:	bd80      	pop	{r7, pc}
 800f00e:	bf00      	nop
 800f010:	1fff7590 	.word	0x1fff7590
 800f014:	1fff7594 	.word	0x1fff7594
 800f018:	1fff7598 	.word	0x1fff7598
 800f01c:	2000016a 	.word	0x2000016a
 800f020:	2000017a 	.word	0x2000017a

0800f024 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f024:	b480      	push	{r7}
 800f026:	b087      	sub	sp, #28
 800f028:	af00      	add	r7, sp, #0
 800f02a:	60f8      	str	r0, [r7, #12]
 800f02c:	60b9      	str	r1, [r7, #8]
 800f02e:	4613      	mov	r3, r2
 800f030:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f032:	2300      	movs	r3, #0
 800f034:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f036:	2300      	movs	r3, #0
 800f038:	75fb      	strb	r3, [r7, #23]
 800f03a:	e027      	b.n	800f08c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	0f1b      	lsrs	r3, r3, #28
 800f040:	2b09      	cmp	r3, #9
 800f042:	d80b      	bhi.n	800f05c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	0f1b      	lsrs	r3, r3, #28
 800f048:	b2da      	uxtb	r2, r3
 800f04a:	7dfb      	ldrb	r3, [r7, #23]
 800f04c:	005b      	lsls	r3, r3, #1
 800f04e:	4619      	mov	r1, r3
 800f050:	68bb      	ldr	r3, [r7, #8]
 800f052:	440b      	add	r3, r1
 800f054:	3230      	adds	r2, #48	@ 0x30
 800f056:	b2d2      	uxtb	r2, r2
 800f058:	701a      	strb	r2, [r3, #0]
 800f05a:	e00a      	b.n	800f072 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	0f1b      	lsrs	r3, r3, #28
 800f060:	b2da      	uxtb	r2, r3
 800f062:	7dfb      	ldrb	r3, [r7, #23]
 800f064:	005b      	lsls	r3, r3, #1
 800f066:	4619      	mov	r1, r3
 800f068:	68bb      	ldr	r3, [r7, #8]
 800f06a:	440b      	add	r3, r1
 800f06c:	3237      	adds	r2, #55	@ 0x37
 800f06e:	b2d2      	uxtb	r2, r2
 800f070:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	011b      	lsls	r3, r3, #4
 800f076:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f078:	7dfb      	ldrb	r3, [r7, #23]
 800f07a:	005b      	lsls	r3, r3, #1
 800f07c:	3301      	adds	r3, #1
 800f07e:	68ba      	ldr	r2, [r7, #8]
 800f080:	4413      	add	r3, r2
 800f082:	2200      	movs	r2, #0
 800f084:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f086:	7dfb      	ldrb	r3, [r7, #23]
 800f088:	3301      	adds	r3, #1
 800f08a:	75fb      	strb	r3, [r7, #23]
 800f08c:	7dfa      	ldrb	r2, [r7, #23]
 800f08e:	79fb      	ldrb	r3, [r7, #7]
 800f090:	429a      	cmp	r2, r3
 800f092:	d3d3      	bcc.n	800f03c <IntToUnicode+0x18>
  }
}
 800f094:	bf00      	nop
 800f096:	bf00      	nop
 800f098:	371c      	adds	r7, #28
 800f09a:	46bd      	mov	sp, r7
 800f09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a0:	4770      	bx	lr
	...

0800f0a4 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f0a4:	b580      	push	{r7, lr}
 800f0a6:	b098      	sub	sp, #96	@ 0x60
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800f0ac:	f107 030c 	add.w	r3, r7, #12
 800f0b0:	2254      	movs	r2, #84	@ 0x54
 800f0b2:	2100      	movs	r1, #0
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	f001 fa8a 	bl	80105ce <memset>
  if(pcdHandle->Instance==USB)
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	4a15      	ldr	r2, [pc, #84]	@ (800f114 <HAL_PCD_MspInit+0x70>)
 800f0c0:	4293      	cmp	r3, r2
 800f0c2:	d122      	bne.n	800f10a <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800f0c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800f0c8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800f0ca:	2300      	movs	r3, #0
 800f0cc:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800f0ce:	f107 030c 	add.w	r3, r7, #12
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	f7f8 fd90 	bl	8007bf8 <HAL_RCCEx_PeriphCLKConfig>
 800f0d8:	4603      	mov	r3, r0
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d001      	beq.n	800f0e2 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800f0de:	f7f2 fedf 	bl	8001ea0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800f0e2:	4b0d      	ldr	r3, [pc, #52]	@ (800f118 <HAL_PCD_MspInit+0x74>)
 800f0e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f0e6:	4a0c      	ldr	r2, [pc, #48]	@ (800f118 <HAL_PCD_MspInit+0x74>)
 800f0e8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800f0ec:	6593      	str	r3, [r2, #88]	@ 0x58
 800f0ee:	4b0a      	ldr	r3, [pc, #40]	@ (800f118 <HAL_PCD_MspInit+0x74>)
 800f0f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f0f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f0f6:	60bb      	str	r3, [r7, #8]
 800f0f8:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800f0fa:	2200      	movs	r2, #0
 800f0fc:	2100      	movs	r1, #0
 800f0fe:	2014      	movs	r0, #20
 800f100:	f7f5 fd37 	bl	8004b72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800f104:	2014      	movs	r0, #20
 800f106:	f7f5 fd4e 	bl	8004ba6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800f10a:	bf00      	nop
 800f10c:	3760      	adds	r7, #96	@ 0x60
 800f10e:	46bd      	mov	sp, r7
 800f110:	bd80      	pop	{r7, pc}
 800f112:	bf00      	nop
 800f114:	40005c00 	.word	0x40005c00
 800f118:	40021000 	.word	0x40021000

0800f11c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f11c:	b580      	push	{r7, lr}
 800f11e:	b082      	sub	sp, #8
 800f120:	af00      	add	r7, sp, #0
 800f122:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800f130:	4619      	mov	r1, r3
 800f132:	4610      	mov	r0, r2
 800f134:	f7fe fd32 	bl	800db9c <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800f138:	bf00      	nop
 800f13a:	3708      	adds	r7, #8
 800f13c:	46bd      	mov	sp, r7
 800f13e:	bd80      	pop	{r7, pc}

0800f140 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f140:	b580      	push	{r7, lr}
 800f142:	b082      	sub	sp, #8
 800f144:	af00      	add	r7, sp, #0
 800f146:	6078      	str	r0, [r7, #4]
 800f148:	460b      	mov	r3, r1
 800f14a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800f152:	78fa      	ldrb	r2, [r7, #3]
 800f154:	6879      	ldr	r1, [r7, #4]
 800f156:	4613      	mov	r3, r2
 800f158:	009b      	lsls	r3, r3, #2
 800f15a:	4413      	add	r3, r2
 800f15c:	00db      	lsls	r3, r3, #3
 800f15e:	440b      	add	r3, r1
 800f160:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f164:	681a      	ldr	r2, [r3, #0]
 800f166:	78fb      	ldrb	r3, [r7, #3]
 800f168:	4619      	mov	r1, r3
 800f16a:	f7fe fd6c 	bl	800dc46 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800f16e:	bf00      	nop
 800f170:	3708      	adds	r7, #8
 800f172:	46bd      	mov	sp, r7
 800f174:	bd80      	pop	{r7, pc}

0800f176 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f176:	b580      	push	{r7, lr}
 800f178:	b082      	sub	sp, #8
 800f17a:	af00      	add	r7, sp, #0
 800f17c:	6078      	str	r0, [r7, #4]
 800f17e:	460b      	mov	r3, r1
 800f180:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800f188:	78fa      	ldrb	r2, [r7, #3]
 800f18a:	6879      	ldr	r1, [r7, #4]
 800f18c:	4613      	mov	r3, r2
 800f18e:	009b      	lsls	r3, r3, #2
 800f190:	4413      	add	r3, r2
 800f192:	00db      	lsls	r3, r3, #3
 800f194:	440b      	add	r3, r1
 800f196:	3324      	adds	r3, #36	@ 0x24
 800f198:	681a      	ldr	r2, [r3, #0]
 800f19a:	78fb      	ldrb	r3, [r7, #3]
 800f19c:	4619      	mov	r1, r3
 800f19e:	f7fe fdb5 	bl	800dd0c <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800f1a2:	bf00      	nop
 800f1a4:	3708      	adds	r7, #8
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	bd80      	pop	{r7, pc}

0800f1aa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f1aa:	b580      	push	{r7, lr}
 800f1ac:	b082      	sub	sp, #8
 800f1ae:	af00      	add	r7, sp, #0
 800f1b0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f1b8:	4618      	mov	r0, r3
 800f1ba:	f7fe fec9 	bl	800df50 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800f1be:	bf00      	nop
 800f1c0:	3708      	adds	r7, #8
 800f1c2:	46bd      	mov	sp, r7
 800f1c4:	bd80      	pop	{r7, pc}

0800f1c6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f1c6:	b580      	push	{r7, lr}
 800f1c8:	b084      	sub	sp, #16
 800f1ca:	af00      	add	r7, sp, #0
 800f1cc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f1ce:	2301      	movs	r3, #1
 800f1d0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	795b      	ldrb	r3, [r3, #5]
 800f1d6:	2b02      	cmp	r3, #2
 800f1d8:	d001      	beq.n	800f1de <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800f1da:	f7f2 fe61 	bl	8001ea0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f1e4:	7bfa      	ldrb	r2, [r7, #15]
 800f1e6:	4611      	mov	r1, r2
 800f1e8:	4618      	mov	r0, r3
 800f1ea:	f7fe fe73 	bl	800ded4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	f7fe fe1f 	bl	800de38 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800f1fa:	bf00      	nop
 800f1fc:	3710      	adds	r7, #16
 800f1fe:	46bd      	mov	sp, r7
 800f200:	bd80      	pop	{r7, pc}
	...

0800f204 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f204:	b580      	push	{r7, lr}
 800f206:	b082      	sub	sp, #8
 800f208:	af00      	add	r7, sp, #0
 800f20a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f212:	4618      	mov	r0, r3
 800f214:	f7fe fe6e 	bl	800def4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	7a5b      	ldrb	r3, [r3, #9]
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d005      	beq.n	800f22c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f220:	4b04      	ldr	r3, [pc, #16]	@ (800f234 <HAL_PCD_SuspendCallback+0x30>)
 800f222:	691b      	ldr	r3, [r3, #16]
 800f224:	4a03      	ldr	r2, [pc, #12]	@ (800f234 <HAL_PCD_SuspendCallback+0x30>)
 800f226:	f043 0306 	orr.w	r3, r3, #6
 800f22a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800f22c:	bf00      	nop
 800f22e:	3708      	adds	r7, #8
 800f230:	46bd      	mov	sp, r7
 800f232:	bd80      	pop	{r7, pc}
 800f234:	e000ed00 	.word	0xe000ed00

0800f238 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f238:	b580      	push	{r7, lr}
 800f23a:	b082      	sub	sp, #8
 800f23c:	af00      	add	r7, sp, #0
 800f23e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	7a5b      	ldrb	r3, [r3, #9]
 800f244:	2b00      	cmp	r3, #0
 800f246:	d007      	beq.n	800f258 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f248:	4b08      	ldr	r3, [pc, #32]	@ (800f26c <HAL_PCD_ResumeCallback+0x34>)
 800f24a:	691b      	ldr	r3, [r3, #16]
 800f24c:	4a07      	ldr	r2, [pc, #28]	@ (800f26c <HAL_PCD_ResumeCallback+0x34>)
 800f24e:	f023 0306 	bic.w	r3, r3, #6
 800f252:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800f254:	f000 f9f8 	bl	800f648 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f25e:	4618      	mov	r0, r3
 800f260:	f7fe fe5e 	bl	800df20 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800f264:	bf00      	nop
 800f266:	3708      	adds	r7, #8
 800f268:	46bd      	mov	sp, r7
 800f26a:	bd80      	pop	{r7, pc}
 800f26c:	e000ed00 	.word	0xe000ed00

0800f270 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f270:	b580      	push	{r7, lr}
 800f272:	b082      	sub	sp, #8
 800f274:	af00      	add	r7, sp, #0
 800f276:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800f278:	4a2b      	ldr	r2, [pc, #172]	@ (800f328 <USBD_LL_Init+0xb8>)
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	4a29      	ldr	r2, [pc, #164]	@ (800f328 <USBD_LL_Init+0xb8>)
 800f284:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800f288:	4b27      	ldr	r3, [pc, #156]	@ (800f328 <USBD_LL_Init+0xb8>)
 800f28a:	4a28      	ldr	r2, [pc, #160]	@ (800f32c <USBD_LL_Init+0xbc>)
 800f28c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800f28e:	4b26      	ldr	r3, [pc, #152]	@ (800f328 <USBD_LL_Init+0xb8>)
 800f290:	2208      	movs	r2, #8
 800f292:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800f294:	4b24      	ldr	r3, [pc, #144]	@ (800f328 <USBD_LL_Init+0xb8>)
 800f296:	2202      	movs	r2, #2
 800f298:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f29a:	4b23      	ldr	r3, [pc, #140]	@ (800f328 <USBD_LL_Init+0xb8>)
 800f29c:	2202      	movs	r2, #2
 800f29e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800f2a0:	4b21      	ldr	r3, [pc, #132]	@ (800f328 <USBD_LL_Init+0xb8>)
 800f2a2:	2200      	movs	r2, #0
 800f2a4:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800f2a6:	4b20      	ldr	r3, [pc, #128]	@ (800f328 <USBD_LL_Init+0xb8>)
 800f2a8:	2200      	movs	r2, #0
 800f2aa:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800f2ac:	4b1e      	ldr	r3, [pc, #120]	@ (800f328 <USBD_LL_Init+0xb8>)
 800f2ae:	2200      	movs	r2, #0
 800f2b0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800f2b2:	4b1d      	ldr	r3, [pc, #116]	@ (800f328 <USBD_LL_Init+0xb8>)
 800f2b4:	2200      	movs	r2, #0
 800f2b6:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800f2b8:	481b      	ldr	r0, [pc, #108]	@ (800f328 <USBD_LL_Init+0xb8>)
 800f2ba:	f7f6 f9c0 	bl	800563e <HAL_PCD_Init>
 800f2be:	4603      	mov	r3, r0
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d001      	beq.n	800f2c8 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800f2c4:	f7f2 fdec 	bl	8001ea0 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800f2ce:	2318      	movs	r3, #24
 800f2d0:	2200      	movs	r2, #0
 800f2d2:	2100      	movs	r1, #0
 800f2d4:	f7f7 fe79 	bl	8006fca <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800f2de:	2358      	movs	r3, #88	@ 0x58
 800f2e0:	2200      	movs	r2, #0
 800f2e2:	2180      	movs	r1, #128	@ 0x80
 800f2e4:	f7f7 fe71 	bl	8006fca <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800f2ee:	23c0      	movs	r3, #192	@ 0xc0
 800f2f0:	2200      	movs	r2, #0
 800f2f2:	2181      	movs	r1, #129	@ 0x81
 800f2f4:	f7f7 fe69 	bl	8006fca <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800f2fe:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800f302:	2200      	movs	r2, #0
 800f304:	2101      	movs	r1, #1
 800f306:	f7f7 fe60 	bl	8006fca <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800f310:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f314:	2200      	movs	r2, #0
 800f316:	2182      	movs	r1, #130	@ 0x82
 800f318:	f7f7 fe57 	bl	8006fca <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800f31c:	2300      	movs	r3, #0
}
 800f31e:	4618      	mov	r0, r3
 800f320:	3708      	adds	r7, #8
 800f322:	46bd      	mov	sp, r7
 800f324:	bd80      	pop	{r7, pc}
 800f326:	bf00      	nop
 800f328:	20003bf8 	.word	0x20003bf8
 800f32c:	40005c00 	.word	0x40005c00

0800f330 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f330:	b580      	push	{r7, lr}
 800f332:	b084      	sub	sp, #16
 800f334:	af00      	add	r7, sp, #0
 800f336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f338:	2300      	movs	r3, #0
 800f33a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f33c:	2300      	movs	r3, #0
 800f33e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800f346:	4618      	mov	r0, r3
 800f348:	f7f6 fa47 	bl	80057da <HAL_PCD_Start>
 800f34c:	4603      	mov	r3, r0
 800f34e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f350:	7bfb      	ldrb	r3, [r7, #15]
 800f352:	4618      	mov	r0, r3
 800f354:	f000 f97e 	bl	800f654 <USBD_Get_USB_Status>
 800f358:	4603      	mov	r3, r0
 800f35a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f35c:	7bbb      	ldrb	r3, [r7, #14]
}
 800f35e:	4618      	mov	r0, r3
 800f360:	3710      	adds	r7, #16
 800f362:	46bd      	mov	sp, r7
 800f364:	bd80      	pop	{r7, pc}

0800f366 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f366:	b580      	push	{r7, lr}
 800f368:	b084      	sub	sp, #16
 800f36a:	af00      	add	r7, sp, #0
 800f36c:	6078      	str	r0, [r7, #4]
 800f36e:	4608      	mov	r0, r1
 800f370:	4611      	mov	r1, r2
 800f372:	461a      	mov	r2, r3
 800f374:	4603      	mov	r3, r0
 800f376:	70fb      	strb	r3, [r7, #3]
 800f378:	460b      	mov	r3, r1
 800f37a:	70bb      	strb	r3, [r7, #2]
 800f37c:	4613      	mov	r3, r2
 800f37e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f380:	2300      	movs	r3, #0
 800f382:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f384:	2300      	movs	r3, #0
 800f386:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800f38e:	78bb      	ldrb	r3, [r7, #2]
 800f390:	883a      	ldrh	r2, [r7, #0]
 800f392:	78f9      	ldrb	r1, [r7, #3]
 800f394:	f7f6 fb8e 	bl	8005ab4 <HAL_PCD_EP_Open>
 800f398:	4603      	mov	r3, r0
 800f39a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f39c:	7bfb      	ldrb	r3, [r7, #15]
 800f39e:	4618      	mov	r0, r3
 800f3a0:	f000 f958 	bl	800f654 <USBD_Get_USB_Status>
 800f3a4:	4603      	mov	r3, r0
 800f3a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f3a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800f3aa:	4618      	mov	r0, r3
 800f3ac:	3710      	adds	r7, #16
 800f3ae:	46bd      	mov	sp, r7
 800f3b0:	bd80      	pop	{r7, pc}

0800f3b2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f3b2:	b580      	push	{r7, lr}
 800f3b4:	b084      	sub	sp, #16
 800f3b6:	af00      	add	r7, sp, #0
 800f3b8:	6078      	str	r0, [r7, #4]
 800f3ba:	460b      	mov	r3, r1
 800f3bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f3be:	2300      	movs	r3, #0
 800f3c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f3c2:	2300      	movs	r3, #0
 800f3c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800f3cc:	78fa      	ldrb	r2, [r7, #3]
 800f3ce:	4611      	mov	r1, r2
 800f3d0:	4618      	mov	r0, r3
 800f3d2:	f7f6 fbcc 	bl	8005b6e <HAL_PCD_EP_Close>
 800f3d6:	4603      	mov	r3, r0
 800f3d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f3da:	7bfb      	ldrb	r3, [r7, #15]
 800f3dc:	4618      	mov	r0, r3
 800f3de:	f000 f939 	bl	800f654 <USBD_Get_USB_Status>
 800f3e2:	4603      	mov	r3, r0
 800f3e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f3e6:	7bbb      	ldrb	r3, [r7, #14]
}
 800f3e8:	4618      	mov	r0, r3
 800f3ea:	3710      	adds	r7, #16
 800f3ec:	46bd      	mov	sp, r7
 800f3ee:	bd80      	pop	{r7, pc}

0800f3f0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f3f0:	b580      	push	{r7, lr}
 800f3f2:	b084      	sub	sp, #16
 800f3f4:	af00      	add	r7, sp, #0
 800f3f6:	6078      	str	r0, [r7, #4]
 800f3f8:	460b      	mov	r3, r1
 800f3fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f3fc:	2300      	movs	r3, #0
 800f3fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f400:	2300      	movs	r3, #0
 800f402:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800f40a:	78fa      	ldrb	r2, [r7, #3]
 800f40c:	4611      	mov	r1, r2
 800f40e:	4618      	mov	r0, r3
 800f410:	f7f6 fc75 	bl	8005cfe <HAL_PCD_EP_SetStall>
 800f414:	4603      	mov	r3, r0
 800f416:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f418:	7bfb      	ldrb	r3, [r7, #15]
 800f41a:	4618      	mov	r0, r3
 800f41c:	f000 f91a 	bl	800f654 <USBD_Get_USB_Status>
 800f420:	4603      	mov	r3, r0
 800f422:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f424:	7bbb      	ldrb	r3, [r7, #14]
}
 800f426:	4618      	mov	r0, r3
 800f428:	3710      	adds	r7, #16
 800f42a:	46bd      	mov	sp, r7
 800f42c:	bd80      	pop	{r7, pc}

0800f42e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f42e:	b580      	push	{r7, lr}
 800f430:	b084      	sub	sp, #16
 800f432:	af00      	add	r7, sp, #0
 800f434:	6078      	str	r0, [r7, #4]
 800f436:	460b      	mov	r3, r1
 800f438:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f43a:	2300      	movs	r3, #0
 800f43c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f43e:	2300      	movs	r3, #0
 800f440:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800f448:	78fa      	ldrb	r2, [r7, #3]
 800f44a:	4611      	mov	r1, r2
 800f44c:	4618      	mov	r0, r3
 800f44e:	f7f6 fca8 	bl	8005da2 <HAL_PCD_EP_ClrStall>
 800f452:	4603      	mov	r3, r0
 800f454:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f456:	7bfb      	ldrb	r3, [r7, #15]
 800f458:	4618      	mov	r0, r3
 800f45a:	f000 f8fb 	bl	800f654 <USBD_Get_USB_Status>
 800f45e:	4603      	mov	r3, r0
 800f460:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f462:	7bbb      	ldrb	r3, [r7, #14]
}
 800f464:	4618      	mov	r0, r3
 800f466:	3710      	adds	r7, #16
 800f468:	46bd      	mov	sp, r7
 800f46a:	bd80      	pop	{r7, pc}

0800f46c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f46c:	b480      	push	{r7}
 800f46e:	b085      	sub	sp, #20
 800f470:	af00      	add	r7, sp, #0
 800f472:	6078      	str	r0, [r7, #4]
 800f474:	460b      	mov	r3, r1
 800f476:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800f47e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f480:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f484:	2b00      	cmp	r3, #0
 800f486:	da0b      	bge.n	800f4a0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f488:	78fb      	ldrb	r3, [r7, #3]
 800f48a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f48e:	68f9      	ldr	r1, [r7, #12]
 800f490:	4613      	mov	r3, r2
 800f492:	009b      	lsls	r3, r3, #2
 800f494:	4413      	add	r3, r2
 800f496:	00db      	lsls	r3, r3, #3
 800f498:	440b      	add	r3, r1
 800f49a:	3312      	adds	r3, #18
 800f49c:	781b      	ldrb	r3, [r3, #0]
 800f49e:	e00b      	b.n	800f4b8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f4a0:	78fb      	ldrb	r3, [r7, #3]
 800f4a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f4a6:	68f9      	ldr	r1, [r7, #12]
 800f4a8:	4613      	mov	r3, r2
 800f4aa:	009b      	lsls	r3, r3, #2
 800f4ac:	4413      	add	r3, r2
 800f4ae:	00db      	lsls	r3, r3, #3
 800f4b0:	440b      	add	r3, r1
 800f4b2:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800f4b6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f4b8:	4618      	mov	r0, r3
 800f4ba:	3714      	adds	r7, #20
 800f4bc:	46bd      	mov	sp, r7
 800f4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c2:	4770      	bx	lr

0800f4c4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f4c4:	b580      	push	{r7, lr}
 800f4c6:	b084      	sub	sp, #16
 800f4c8:	af00      	add	r7, sp, #0
 800f4ca:	6078      	str	r0, [r7, #4]
 800f4cc:	460b      	mov	r3, r1
 800f4ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f4d0:	2300      	movs	r3, #0
 800f4d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f4d4:	2300      	movs	r3, #0
 800f4d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800f4de:	78fa      	ldrb	r2, [r7, #3]
 800f4e0:	4611      	mov	r1, r2
 800f4e2:	4618      	mov	r0, r3
 800f4e4:	f7f6 fac2 	bl	8005a6c <HAL_PCD_SetAddress>
 800f4e8:	4603      	mov	r3, r0
 800f4ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f4ec:	7bfb      	ldrb	r3, [r7, #15]
 800f4ee:	4618      	mov	r0, r3
 800f4f0:	f000 f8b0 	bl	800f654 <USBD_Get_USB_Status>
 800f4f4:	4603      	mov	r3, r0
 800f4f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f4f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800f4fa:	4618      	mov	r0, r3
 800f4fc:	3710      	adds	r7, #16
 800f4fe:	46bd      	mov	sp, r7
 800f500:	bd80      	pop	{r7, pc}

0800f502 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f502:	b580      	push	{r7, lr}
 800f504:	b086      	sub	sp, #24
 800f506:	af00      	add	r7, sp, #0
 800f508:	60f8      	str	r0, [r7, #12]
 800f50a:	607a      	str	r2, [r7, #4]
 800f50c:	603b      	str	r3, [r7, #0]
 800f50e:	460b      	mov	r3, r1
 800f510:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f512:	2300      	movs	r3, #0
 800f514:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f516:	2300      	movs	r3, #0
 800f518:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800f520:	7af9      	ldrb	r1, [r7, #11]
 800f522:	683b      	ldr	r3, [r7, #0]
 800f524:	687a      	ldr	r2, [r7, #4]
 800f526:	f7f6 fbb3 	bl	8005c90 <HAL_PCD_EP_Transmit>
 800f52a:	4603      	mov	r3, r0
 800f52c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f52e:	7dfb      	ldrb	r3, [r7, #23]
 800f530:	4618      	mov	r0, r3
 800f532:	f000 f88f 	bl	800f654 <USBD_Get_USB_Status>
 800f536:	4603      	mov	r3, r0
 800f538:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f53a:	7dbb      	ldrb	r3, [r7, #22]
}
 800f53c:	4618      	mov	r0, r3
 800f53e:	3718      	adds	r7, #24
 800f540:	46bd      	mov	sp, r7
 800f542:	bd80      	pop	{r7, pc}

0800f544 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f544:	b580      	push	{r7, lr}
 800f546:	b086      	sub	sp, #24
 800f548:	af00      	add	r7, sp, #0
 800f54a:	60f8      	str	r0, [r7, #12]
 800f54c:	607a      	str	r2, [r7, #4]
 800f54e:	603b      	str	r3, [r7, #0]
 800f550:	460b      	mov	r3, r1
 800f552:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f554:	2300      	movs	r3, #0
 800f556:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f558:	2300      	movs	r3, #0
 800f55a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800f562:	7af9      	ldrb	r1, [r7, #11]
 800f564:	683b      	ldr	r3, [r7, #0]
 800f566:	687a      	ldr	r2, [r7, #4]
 800f568:	f7f6 fb49 	bl	8005bfe <HAL_PCD_EP_Receive>
 800f56c:	4603      	mov	r3, r0
 800f56e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f570:	7dfb      	ldrb	r3, [r7, #23]
 800f572:	4618      	mov	r0, r3
 800f574:	f000 f86e 	bl	800f654 <USBD_Get_USB_Status>
 800f578:	4603      	mov	r3, r0
 800f57a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f57c:	7dbb      	ldrb	r3, [r7, #22]
}
 800f57e:	4618      	mov	r0, r3
 800f580:	3718      	adds	r7, #24
 800f582:	46bd      	mov	sp, r7
 800f584:	bd80      	pop	{r7, pc}

0800f586 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f586:	b580      	push	{r7, lr}
 800f588:	b082      	sub	sp, #8
 800f58a:	af00      	add	r7, sp, #0
 800f58c:	6078      	str	r0, [r7, #4]
 800f58e:	460b      	mov	r3, r1
 800f590:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800f598:	78fa      	ldrb	r2, [r7, #3]
 800f59a:	4611      	mov	r1, r2
 800f59c:	4618      	mov	r0, r3
 800f59e:	f7f6 fb5f 	bl	8005c60 <HAL_PCD_EP_GetRxCount>
 800f5a2:	4603      	mov	r3, r0
}
 800f5a4:	4618      	mov	r0, r3
 800f5a6:	3708      	adds	r7, #8
 800f5a8:	46bd      	mov	sp, r7
 800f5aa:	bd80      	pop	{r7, pc}

0800f5ac <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f5ac:	b580      	push	{r7, lr}
 800f5ae:	b082      	sub	sp, #8
 800f5b0:	af00      	add	r7, sp, #0
 800f5b2:	6078      	str	r0, [r7, #4]
 800f5b4:	460b      	mov	r3, r1
 800f5b6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800f5b8:	78fb      	ldrb	r3, [r7, #3]
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d002      	beq.n	800f5c4 <HAL_PCDEx_LPM_Callback+0x18>
 800f5be:	2b01      	cmp	r3, #1
 800f5c0:	d013      	beq.n	800f5ea <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800f5c2:	e023      	b.n	800f60c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	7a5b      	ldrb	r3, [r3, #9]
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d007      	beq.n	800f5dc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800f5cc:	f000 f83c 	bl	800f648 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f5d0:	4b10      	ldr	r3, [pc, #64]	@ (800f614 <HAL_PCDEx_LPM_Callback+0x68>)
 800f5d2:	691b      	ldr	r3, [r3, #16]
 800f5d4:	4a0f      	ldr	r2, [pc, #60]	@ (800f614 <HAL_PCDEx_LPM_Callback+0x68>)
 800f5d6:	f023 0306 	bic.w	r3, r3, #6
 800f5da:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	f7fe fc9c 	bl	800df20 <USBD_LL_Resume>
    break;
 800f5e8:	e010      	b.n	800f60c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f5f0:	4618      	mov	r0, r3
 800f5f2:	f7fe fc7f 	bl	800def4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	7a5b      	ldrb	r3, [r3, #9]
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d005      	beq.n	800f60a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f5fe:	4b05      	ldr	r3, [pc, #20]	@ (800f614 <HAL_PCDEx_LPM_Callback+0x68>)
 800f600:	691b      	ldr	r3, [r3, #16]
 800f602:	4a04      	ldr	r2, [pc, #16]	@ (800f614 <HAL_PCDEx_LPM_Callback+0x68>)
 800f604:	f043 0306 	orr.w	r3, r3, #6
 800f608:	6113      	str	r3, [r2, #16]
    break;
 800f60a:	bf00      	nop
}
 800f60c:	bf00      	nop
 800f60e:	3708      	adds	r7, #8
 800f610:	46bd      	mov	sp, r7
 800f612:	bd80      	pop	{r7, pc}
 800f614:	e000ed00 	.word	0xe000ed00

0800f618 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f618:	b480      	push	{r7}
 800f61a:	b083      	sub	sp, #12
 800f61c:	af00      	add	r7, sp, #0
 800f61e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f620:	4b03      	ldr	r3, [pc, #12]	@ (800f630 <USBD_static_malloc+0x18>)
}
 800f622:	4618      	mov	r0, r3
 800f624:	370c      	adds	r7, #12
 800f626:	46bd      	mov	sp, r7
 800f628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f62c:	4770      	bx	lr
 800f62e:	bf00      	nop
 800f630:	20003ed4 	.word	0x20003ed4

0800f634 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f634:	b480      	push	{r7}
 800f636:	b083      	sub	sp, #12
 800f638:	af00      	add	r7, sp, #0
 800f63a:	6078      	str	r0, [r7, #4]

}
 800f63c:	bf00      	nop
 800f63e:	370c      	adds	r7, #12
 800f640:	46bd      	mov	sp, r7
 800f642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f646:	4770      	bx	lr

0800f648 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800f648:	b580      	push	{r7, lr}
 800f64a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800f64c:	f7f1 fe10 	bl	8001270 <SystemClock_Config>
}
 800f650:	bf00      	nop
 800f652:	bd80      	pop	{r7, pc}

0800f654 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f654:	b480      	push	{r7}
 800f656:	b085      	sub	sp, #20
 800f658:	af00      	add	r7, sp, #0
 800f65a:	4603      	mov	r3, r0
 800f65c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f65e:	2300      	movs	r3, #0
 800f660:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f662:	79fb      	ldrb	r3, [r7, #7]
 800f664:	2b03      	cmp	r3, #3
 800f666:	d817      	bhi.n	800f698 <USBD_Get_USB_Status+0x44>
 800f668:	a201      	add	r2, pc, #4	@ (adr r2, 800f670 <USBD_Get_USB_Status+0x1c>)
 800f66a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f66e:	bf00      	nop
 800f670:	0800f681 	.word	0x0800f681
 800f674:	0800f687 	.word	0x0800f687
 800f678:	0800f68d 	.word	0x0800f68d
 800f67c:	0800f693 	.word	0x0800f693
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f680:	2300      	movs	r3, #0
 800f682:	73fb      	strb	r3, [r7, #15]
    break;
 800f684:	e00b      	b.n	800f69e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f686:	2303      	movs	r3, #3
 800f688:	73fb      	strb	r3, [r7, #15]
    break;
 800f68a:	e008      	b.n	800f69e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f68c:	2301      	movs	r3, #1
 800f68e:	73fb      	strb	r3, [r7, #15]
    break;
 800f690:	e005      	b.n	800f69e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f692:	2303      	movs	r3, #3
 800f694:	73fb      	strb	r3, [r7, #15]
    break;
 800f696:	e002      	b.n	800f69e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f698:	2303      	movs	r3, #3
 800f69a:	73fb      	strb	r3, [r7, #15]
    break;
 800f69c:	bf00      	nop
  }
  return usb_status;
 800f69e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6a0:	4618      	mov	r0, r3
 800f6a2:	3714      	adds	r7, #20
 800f6a4:	46bd      	mov	sp, r7
 800f6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6aa:	4770      	bx	lr

0800f6ac <__cvt>:
 800f6ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f6b0:	ec57 6b10 	vmov	r6, r7, d0
 800f6b4:	2f00      	cmp	r7, #0
 800f6b6:	460c      	mov	r4, r1
 800f6b8:	4619      	mov	r1, r3
 800f6ba:	463b      	mov	r3, r7
 800f6bc:	bfbb      	ittet	lt
 800f6be:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800f6c2:	461f      	movlt	r7, r3
 800f6c4:	2300      	movge	r3, #0
 800f6c6:	232d      	movlt	r3, #45	@ 0x2d
 800f6c8:	700b      	strb	r3, [r1, #0]
 800f6ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f6cc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800f6d0:	4691      	mov	r9, r2
 800f6d2:	f023 0820 	bic.w	r8, r3, #32
 800f6d6:	bfbc      	itt	lt
 800f6d8:	4632      	movlt	r2, r6
 800f6da:	4616      	movlt	r6, r2
 800f6dc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f6e0:	d005      	beq.n	800f6ee <__cvt+0x42>
 800f6e2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800f6e6:	d100      	bne.n	800f6ea <__cvt+0x3e>
 800f6e8:	3401      	adds	r4, #1
 800f6ea:	2102      	movs	r1, #2
 800f6ec:	e000      	b.n	800f6f0 <__cvt+0x44>
 800f6ee:	2103      	movs	r1, #3
 800f6f0:	ab03      	add	r3, sp, #12
 800f6f2:	9301      	str	r3, [sp, #4]
 800f6f4:	ab02      	add	r3, sp, #8
 800f6f6:	9300      	str	r3, [sp, #0]
 800f6f8:	ec47 6b10 	vmov	d0, r6, r7
 800f6fc:	4653      	mov	r3, sl
 800f6fe:	4622      	mov	r2, r4
 800f700:	f001 f876 	bl	80107f0 <_dtoa_r>
 800f704:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800f708:	4605      	mov	r5, r0
 800f70a:	d119      	bne.n	800f740 <__cvt+0x94>
 800f70c:	f019 0f01 	tst.w	r9, #1
 800f710:	d00e      	beq.n	800f730 <__cvt+0x84>
 800f712:	eb00 0904 	add.w	r9, r0, r4
 800f716:	2200      	movs	r2, #0
 800f718:	2300      	movs	r3, #0
 800f71a:	4630      	mov	r0, r6
 800f71c:	4639      	mov	r1, r7
 800f71e:	f7f1 f9fb 	bl	8000b18 <__aeabi_dcmpeq>
 800f722:	b108      	cbz	r0, 800f728 <__cvt+0x7c>
 800f724:	f8cd 900c 	str.w	r9, [sp, #12]
 800f728:	2230      	movs	r2, #48	@ 0x30
 800f72a:	9b03      	ldr	r3, [sp, #12]
 800f72c:	454b      	cmp	r3, r9
 800f72e:	d31e      	bcc.n	800f76e <__cvt+0xc2>
 800f730:	9b03      	ldr	r3, [sp, #12]
 800f732:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f734:	1b5b      	subs	r3, r3, r5
 800f736:	4628      	mov	r0, r5
 800f738:	6013      	str	r3, [r2, #0]
 800f73a:	b004      	add	sp, #16
 800f73c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f740:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f744:	eb00 0904 	add.w	r9, r0, r4
 800f748:	d1e5      	bne.n	800f716 <__cvt+0x6a>
 800f74a:	7803      	ldrb	r3, [r0, #0]
 800f74c:	2b30      	cmp	r3, #48	@ 0x30
 800f74e:	d10a      	bne.n	800f766 <__cvt+0xba>
 800f750:	2200      	movs	r2, #0
 800f752:	2300      	movs	r3, #0
 800f754:	4630      	mov	r0, r6
 800f756:	4639      	mov	r1, r7
 800f758:	f7f1 f9de 	bl	8000b18 <__aeabi_dcmpeq>
 800f75c:	b918      	cbnz	r0, 800f766 <__cvt+0xba>
 800f75e:	f1c4 0401 	rsb	r4, r4, #1
 800f762:	f8ca 4000 	str.w	r4, [sl]
 800f766:	f8da 3000 	ldr.w	r3, [sl]
 800f76a:	4499      	add	r9, r3
 800f76c:	e7d3      	b.n	800f716 <__cvt+0x6a>
 800f76e:	1c59      	adds	r1, r3, #1
 800f770:	9103      	str	r1, [sp, #12]
 800f772:	701a      	strb	r2, [r3, #0]
 800f774:	e7d9      	b.n	800f72a <__cvt+0x7e>

0800f776 <__exponent>:
 800f776:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f778:	2900      	cmp	r1, #0
 800f77a:	bfba      	itte	lt
 800f77c:	4249      	neglt	r1, r1
 800f77e:	232d      	movlt	r3, #45	@ 0x2d
 800f780:	232b      	movge	r3, #43	@ 0x2b
 800f782:	2909      	cmp	r1, #9
 800f784:	7002      	strb	r2, [r0, #0]
 800f786:	7043      	strb	r3, [r0, #1]
 800f788:	dd29      	ble.n	800f7de <__exponent+0x68>
 800f78a:	f10d 0307 	add.w	r3, sp, #7
 800f78e:	461d      	mov	r5, r3
 800f790:	270a      	movs	r7, #10
 800f792:	461a      	mov	r2, r3
 800f794:	fbb1 f6f7 	udiv	r6, r1, r7
 800f798:	fb07 1416 	mls	r4, r7, r6, r1
 800f79c:	3430      	adds	r4, #48	@ 0x30
 800f79e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800f7a2:	460c      	mov	r4, r1
 800f7a4:	2c63      	cmp	r4, #99	@ 0x63
 800f7a6:	f103 33ff 	add.w	r3, r3, #4294967295
 800f7aa:	4631      	mov	r1, r6
 800f7ac:	dcf1      	bgt.n	800f792 <__exponent+0x1c>
 800f7ae:	3130      	adds	r1, #48	@ 0x30
 800f7b0:	1e94      	subs	r4, r2, #2
 800f7b2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f7b6:	1c41      	adds	r1, r0, #1
 800f7b8:	4623      	mov	r3, r4
 800f7ba:	42ab      	cmp	r3, r5
 800f7bc:	d30a      	bcc.n	800f7d4 <__exponent+0x5e>
 800f7be:	f10d 0309 	add.w	r3, sp, #9
 800f7c2:	1a9b      	subs	r3, r3, r2
 800f7c4:	42ac      	cmp	r4, r5
 800f7c6:	bf88      	it	hi
 800f7c8:	2300      	movhi	r3, #0
 800f7ca:	3302      	adds	r3, #2
 800f7cc:	4403      	add	r3, r0
 800f7ce:	1a18      	subs	r0, r3, r0
 800f7d0:	b003      	add	sp, #12
 800f7d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f7d4:	f813 6b01 	ldrb.w	r6, [r3], #1
 800f7d8:	f801 6f01 	strb.w	r6, [r1, #1]!
 800f7dc:	e7ed      	b.n	800f7ba <__exponent+0x44>
 800f7de:	2330      	movs	r3, #48	@ 0x30
 800f7e0:	3130      	adds	r1, #48	@ 0x30
 800f7e2:	7083      	strb	r3, [r0, #2]
 800f7e4:	70c1      	strb	r1, [r0, #3]
 800f7e6:	1d03      	adds	r3, r0, #4
 800f7e8:	e7f1      	b.n	800f7ce <__exponent+0x58>
	...

0800f7ec <_printf_float>:
 800f7ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7f0:	b08d      	sub	sp, #52	@ 0x34
 800f7f2:	460c      	mov	r4, r1
 800f7f4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800f7f8:	4616      	mov	r6, r2
 800f7fa:	461f      	mov	r7, r3
 800f7fc:	4605      	mov	r5, r0
 800f7fe:	f000 feef 	bl	80105e0 <_localeconv_r>
 800f802:	6803      	ldr	r3, [r0, #0]
 800f804:	9304      	str	r3, [sp, #16]
 800f806:	4618      	mov	r0, r3
 800f808:	f7f0 fd5a 	bl	80002c0 <strlen>
 800f80c:	2300      	movs	r3, #0
 800f80e:	930a      	str	r3, [sp, #40]	@ 0x28
 800f810:	f8d8 3000 	ldr.w	r3, [r8]
 800f814:	9005      	str	r0, [sp, #20]
 800f816:	3307      	adds	r3, #7
 800f818:	f023 0307 	bic.w	r3, r3, #7
 800f81c:	f103 0208 	add.w	r2, r3, #8
 800f820:	f894 a018 	ldrb.w	sl, [r4, #24]
 800f824:	f8d4 b000 	ldr.w	fp, [r4]
 800f828:	f8c8 2000 	str.w	r2, [r8]
 800f82c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f830:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800f834:	9307      	str	r3, [sp, #28]
 800f836:	f8cd 8018 	str.w	r8, [sp, #24]
 800f83a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800f83e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f842:	4b9c      	ldr	r3, [pc, #624]	@ (800fab4 <_printf_float+0x2c8>)
 800f844:	f04f 32ff 	mov.w	r2, #4294967295
 800f848:	f7f1 f998 	bl	8000b7c <__aeabi_dcmpun>
 800f84c:	bb70      	cbnz	r0, 800f8ac <_printf_float+0xc0>
 800f84e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f852:	4b98      	ldr	r3, [pc, #608]	@ (800fab4 <_printf_float+0x2c8>)
 800f854:	f04f 32ff 	mov.w	r2, #4294967295
 800f858:	f7f1 f972 	bl	8000b40 <__aeabi_dcmple>
 800f85c:	bb30      	cbnz	r0, 800f8ac <_printf_float+0xc0>
 800f85e:	2200      	movs	r2, #0
 800f860:	2300      	movs	r3, #0
 800f862:	4640      	mov	r0, r8
 800f864:	4649      	mov	r1, r9
 800f866:	f7f1 f961 	bl	8000b2c <__aeabi_dcmplt>
 800f86a:	b110      	cbz	r0, 800f872 <_printf_float+0x86>
 800f86c:	232d      	movs	r3, #45	@ 0x2d
 800f86e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f872:	4a91      	ldr	r2, [pc, #580]	@ (800fab8 <_printf_float+0x2cc>)
 800f874:	4b91      	ldr	r3, [pc, #580]	@ (800fabc <_printf_float+0x2d0>)
 800f876:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f87a:	bf94      	ite	ls
 800f87c:	4690      	movls	r8, r2
 800f87e:	4698      	movhi	r8, r3
 800f880:	2303      	movs	r3, #3
 800f882:	6123      	str	r3, [r4, #16]
 800f884:	f02b 0304 	bic.w	r3, fp, #4
 800f888:	6023      	str	r3, [r4, #0]
 800f88a:	f04f 0900 	mov.w	r9, #0
 800f88e:	9700      	str	r7, [sp, #0]
 800f890:	4633      	mov	r3, r6
 800f892:	aa0b      	add	r2, sp, #44	@ 0x2c
 800f894:	4621      	mov	r1, r4
 800f896:	4628      	mov	r0, r5
 800f898:	f000 f9d2 	bl	800fc40 <_printf_common>
 800f89c:	3001      	adds	r0, #1
 800f89e:	f040 808d 	bne.w	800f9bc <_printf_float+0x1d0>
 800f8a2:	f04f 30ff 	mov.w	r0, #4294967295
 800f8a6:	b00d      	add	sp, #52	@ 0x34
 800f8a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8ac:	4642      	mov	r2, r8
 800f8ae:	464b      	mov	r3, r9
 800f8b0:	4640      	mov	r0, r8
 800f8b2:	4649      	mov	r1, r9
 800f8b4:	f7f1 f962 	bl	8000b7c <__aeabi_dcmpun>
 800f8b8:	b140      	cbz	r0, 800f8cc <_printf_float+0xe0>
 800f8ba:	464b      	mov	r3, r9
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	bfbc      	itt	lt
 800f8c0:	232d      	movlt	r3, #45	@ 0x2d
 800f8c2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800f8c6:	4a7e      	ldr	r2, [pc, #504]	@ (800fac0 <_printf_float+0x2d4>)
 800f8c8:	4b7e      	ldr	r3, [pc, #504]	@ (800fac4 <_printf_float+0x2d8>)
 800f8ca:	e7d4      	b.n	800f876 <_printf_float+0x8a>
 800f8cc:	6863      	ldr	r3, [r4, #4]
 800f8ce:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800f8d2:	9206      	str	r2, [sp, #24]
 800f8d4:	1c5a      	adds	r2, r3, #1
 800f8d6:	d13b      	bne.n	800f950 <_printf_float+0x164>
 800f8d8:	2306      	movs	r3, #6
 800f8da:	6063      	str	r3, [r4, #4]
 800f8dc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800f8e0:	2300      	movs	r3, #0
 800f8e2:	6022      	str	r2, [r4, #0]
 800f8e4:	9303      	str	r3, [sp, #12]
 800f8e6:	ab0a      	add	r3, sp, #40	@ 0x28
 800f8e8:	e9cd a301 	strd	sl, r3, [sp, #4]
 800f8ec:	ab09      	add	r3, sp, #36	@ 0x24
 800f8ee:	9300      	str	r3, [sp, #0]
 800f8f0:	6861      	ldr	r1, [r4, #4]
 800f8f2:	ec49 8b10 	vmov	d0, r8, r9
 800f8f6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800f8fa:	4628      	mov	r0, r5
 800f8fc:	f7ff fed6 	bl	800f6ac <__cvt>
 800f900:	9b06      	ldr	r3, [sp, #24]
 800f902:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f904:	2b47      	cmp	r3, #71	@ 0x47
 800f906:	4680      	mov	r8, r0
 800f908:	d129      	bne.n	800f95e <_printf_float+0x172>
 800f90a:	1cc8      	adds	r0, r1, #3
 800f90c:	db02      	blt.n	800f914 <_printf_float+0x128>
 800f90e:	6863      	ldr	r3, [r4, #4]
 800f910:	4299      	cmp	r1, r3
 800f912:	dd41      	ble.n	800f998 <_printf_float+0x1ac>
 800f914:	f1aa 0a02 	sub.w	sl, sl, #2
 800f918:	fa5f fa8a 	uxtb.w	sl, sl
 800f91c:	3901      	subs	r1, #1
 800f91e:	4652      	mov	r2, sl
 800f920:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800f924:	9109      	str	r1, [sp, #36]	@ 0x24
 800f926:	f7ff ff26 	bl	800f776 <__exponent>
 800f92a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f92c:	1813      	adds	r3, r2, r0
 800f92e:	2a01      	cmp	r2, #1
 800f930:	4681      	mov	r9, r0
 800f932:	6123      	str	r3, [r4, #16]
 800f934:	dc02      	bgt.n	800f93c <_printf_float+0x150>
 800f936:	6822      	ldr	r2, [r4, #0]
 800f938:	07d2      	lsls	r2, r2, #31
 800f93a:	d501      	bpl.n	800f940 <_printf_float+0x154>
 800f93c:	3301      	adds	r3, #1
 800f93e:	6123      	str	r3, [r4, #16]
 800f940:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800f944:	2b00      	cmp	r3, #0
 800f946:	d0a2      	beq.n	800f88e <_printf_float+0xa2>
 800f948:	232d      	movs	r3, #45	@ 0x2d
 800f94a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f94e:	e79e      	b.n	800f88e <_printf_float+0xa2>
 800f950:	9a06      	ldr	r2, [sp, #24]
 800f952:	2a47      	cmp	r2, #71	@ 0x47
 800f954:	d1c2      	bne.n	800f8dc <_printf_float+0xf0>
 800f956:	2b00      	cmp	r3, #0
 800f958:	d1c0      	bne.n	800f8dc <_printf_float+0xf0>
 800f95a:	2301      	movs	r3, #1
 800f95c:	e7bd      	b.n	800f8da <_printf_float+0xee>
 800f95e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f962:	d9db      	bls.n	800f91c <_printf_float+0x130>
 800f964:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800f968:	d118      	bne.n	800f99c <_printf_float+0x1b0>
 800f96a:	2900      	cmp	r1, #0
 800f96c:	6863      	ldr	r3, [r4, #4]
 800f96e:	dd0b      	ble.n	800f988 <_printf_float+0x19c>
 800f970:	6121      	str	r1, [r4, #16]
 800f972:	b913      	cbnz	r3, 800f97a <_printf_float+0x18e>
 800f974:	6822      	ldr	r2, [r4, #0]
 800f976:	07d0      	lsls	r0, r2, #31
 800f978:	d502      	bpl.n	800f980 <_printf_float+0x194>
 800f97a:	3301      	adds	r3, #1
 800f97c:	440b      	add	r3, r1
 800f97e:	6123      	str	r3, [r4, #16]
 800f980:	65a1      	str	r1, [r4, #88]	@ 0x58
 800f982:	f04f 0900 	mov.w	r9, #0
 800f986:	e7db      	b.n	800f940 <_printf_float+0x154>
 800f988:	b913      	cbnz	r3, 800f990 <_printf_float+0x1a4>
 800f98a:	6822      	ldr	r2, [r4, #0]
 800f98c:	07d2      	lsls	r2, r2, #31
 800f98e:	d501      	bpl.n	800f994 <_printf_float+0x1a8>
 800f990:	3302      	adds	r3, #2
 800f992:	e7f4      	b.n	800f97e <_printf_float+0x192>
 800f994:	2301      	movs	r3, #1
 800f996:	e7f2      	b.n	800f97e <_printf_float+0x192>
 800f998:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800f99c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f99e:	4299      	cmp	r1, r3
 800f9a0:	db05      	blt.n	800f9ae <_printf_float+0x1c2>
 800f9a2:	6823      	ldr	r3, [r4, #0]
 800f9a4:	6121      	str	r1, [r4, #16]
 800f9a6:	07d8      	lsls	r0, r3, #31
 800f9a8:	d5ea      	bpl.n	800f980 <_printf_float+0x194>
 800f9aa:	1c4b      	adds	r3, r1, #1
 800f9ac:	e7e7      	b.n	800f97e <_printf_float+0x192>
 800f9ae:	2900      	cmp	r1, #0
 800f9b0:	bfd4      	ite	le
 800f9b2:	f1c1 0202 	rsble	r2, r1, #2
 800f9b6:	2201      	movgt	r2, #1
 800f9b8:	4413      	add	r3, r2
 800f9ba:	e7e0      	b.n	800f97e <_printf_float+0x192>
 800f9bc:	6823      	ldr	r3, [r4, #0]
 800f9be:	055a      	lsls	r2, r3, #21
 800f9c0:	d407      	bmi.n	800f9d2 <_printf_float+0x1e6>
 800f9c2:	6923      	ldr	r3, [r4, #16]
 800f9c4:	4642      	mov	r2, r8
 800f9c6:	4631      	mov	r1, r6
 800f9c8:	4628      	mov	r0, r5
 800f9ca:	47b8      	blx	r7
 800f9cc:	3001      	adds	r0, #1
 800f9ce:	d12b      	bne.n	800fa28 <_printf_float+0x23c>
 800f9d0:	e767      	b.n	800f8a2 <_printf_float+0xb6>
 800f9d2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f9d6:	f240 80dd 	bls.w	800fb94 <_printf_float+0x3a8>
 800f9da:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f9de:	2200      	movs	r2, #0
 800f9e0:	2300      	movs	r3, #0
 800f9e2:	f7f1 f899 	bl	8000b18 <__aeabi_dcmpeq>
 800f9e6:	2800      	cmp	r0, #0
 800f9e8:	d033      	beq.n	800fa52 <_printf_float+0x266>
 800f9ea:	4a37      	ldr	r2, [pc, #220]	@ (800fac8 <_printf_float+0x2dc>)
 800f9ec:	2301      	movs	r3, #1
 800f9ee:	4631      	mov	r1, r6
 800f9f0:	4628      	mov	r0, r5
 800f9f2:	47b8      	blx	r7
 800f9f4:	3001      	adds	r0, #1
 800f9f6:	f43f af54 	beq.w	800f8a2 <_printf_float+0xb6>
 800f9fa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800f9fe:	4543      	cmp	r3, r8
 800fa00:	db02      	blt.n	800fa08 <_printf_float+0x21c>
 800fa02:	6823      	ldr	r3, [r4, #0]
 800fa04:	07d8      	lsls	r0, r3, #31
 800fa06:	d50f      	bpl.n	800fa28 <_printf_float+0x23c>
 800fa08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fa0c:	4631      	mov	r1, r6
 800fa0e:	4628      	mov	r0, r5
 800fa10:	47b8      	blx	r7
 800fa12:	3001      	adds	r0, #1
 800fa14:	f43f af45 	beq.w	800f8a2 <_printf_float+0xb6>
 800fa18:	f04f 0900 	mov.w	r9, #0
 800fa1c:	f108 38ff 	add.w	r8, r8, #4294967295
 800fa20:	f104 0a1a 	add.w	sl, r4, #26
 800fa24:	45c8      	cmp	r8, r9
 800fa26:	dc09      	bgt.n	800fa3c <_printf_float+0x250>
 800fa28:	6823      	ldr	r3, [r4, #0]
 800fa2a:	079b      	lsls	r3, r3, #30
 800fa2c:	f100 8103 	bmi.w	800fc36 <_printf_float+0x44a>
 800fa30:	68e0      	ldr	r0, [r4, #12]
 800fa32:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fa34:	4298      	cmp	r0, r3
 800fa36:	bfb8      	it	lt
 800fa38:	4618      	movlt	r0, r3
 800fa3a:	e734      	b.n	800f8a6 <_printf_float+0xba>
 800fa3c:	2301      	movs	r3, #1
 800fa3e:	4652      	mov	r2, sl
 800fa40:	4631      	mov	r1, r6
 800fa42:	4628      	mov	r0, r5
 800fa44:	47b8      	blx	r7
 800fa46:	3001      	adds	r0, #1
 800fa48:	f43f af2b 	beq.w	800f8a2 <_printf_float+0xb6>
 800fa4c:	f109 0901 	add.w	r9, r9, #1
 800fa50:	e7e8      	b.n	800fa24 <_printf_float+0x238>
 800fa52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	dc39      	bgt.n	800facc <_printf_float+0x2e0>
 800fa58:	4a1b      	ldr	r2, [pc, #108]	@ (800fac8 <_printf_float+0x2dc>)
 800fa5a:	2301      	movs	r3, #1
 800fa5c:	4631      	mov	r1, r6
 800fa5e:	4628      	mov	r0, r5
 800fa60:	47b8      	blx	r7
 800fa62:	3001      	adds	r0, #1
 800fa64:	f43f af1d 	beq.w	800f8a2 <_printf_float+0xb6>
 800fa68:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800fa6c:	ea59 0303 	orrs.w	r3, r9, r3
 800fa70:	d102      	bne.n	800fa78 <_printf_float+0x28c>
 800fa72:	6823      	ldr	r3, [r4, #0]
 800fa74:	07d9      	lsls	r1, r3, #31
 800fa76:	d5d7      	bpl.n	800fa28 <_printf_float+0x23c>
 800fa78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fa7c:	4631      	mov	r1, r6
 800fa7e:	4628      	mov	r0, r5
 800fa80:	47b8      	blx	r7
 800fa82:	3001      	adds	r0, #1
 800fa84:	f43f af0d 	beq.w	800f8a2 <_printf_float+0xb6>
 800fa88:	f04f 0a00 	mov.w	sl, #0
 800fa8c:	f104 0b1a 	add.w	fp, r4, #26
 800fa90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa92:	425b      	negs	r3, r3
 800fa94:	4553      	cmp	r3, sl
 800fa96:	dc01      	bgt.n	800fa9c <_printf_float+0x2b0>
 800fa98:	464b      	mov	r3, r9
 800fa9a:	e793      	b.n	800f9c4 <_printf_float+0x1d8>
 800fa9c:	2301      	movs	r3, #1
 800fa9e:	465a      	mov	r2, fp
 800faa0:	4631      	mov	r1, r6
 800faa2:	4628      	mov	r0, r5
 800faa4:	47b8      	blx	r7
 800faa6:	3001      	adds	r0, #1
 800faa8:	f43f aefb 	beq.w	800f8a2 <_printf_float+0xb6>
 800faac:	f10a 0a01 	add.w	sl, sl, #1
 800fab0:	e7ee      	b.n	800fa90 <_printf_float+0x2a4>
 800fab2:	bf00      	nop
 800fab4:	7fefffff 	.word	0x7fefffff
 800fab8:	0801490c 	.word	0x0801490c
 800fabc:	08014910 	.word	0x08014910
 800fac0:	08014914 	.word	0x08014914
 800fac4:	08014918 	.word	0x08014918
 800fac8:	0801491c 	.word	0x0801491c
 800facc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800face:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800fad2:	4553      	cmp	r3, sl
 800fad4:	bfa8      	it	ge
 800fad6:	4653      	movge	r3, sl
 800fad8:	2b00      	cmp	r3, #0
 800fada:	4699      	mov	r9, r3
 800fadc:	dc36      	bgt.n	800fb4c <_printf_float+0x360>
 800fade:	f04f 0b00 	mov.w	fp, #0
 800fae2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fae6:	f104 021a 	add.w	r2, r4, #26
 800faea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800faec:	9306      	str	r3, [sp, #24]
 800faee:	eba3 0309 	sub.w	r3, r3, r9
 800faf2:	455b      	cmp	r3, fp
 800faf4:	dc31      	bgt.n	800fb5a <_printf_float+0x36e>
 800faf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800faf8:	459a      	cmp	sl, r3
 800fafa:	dc3a      	bgt.n	800fb72 <_printf_float+0x386>
 800fafc:	6823      	ldr	r3, [r4, #0]
 800fafe:	07da      	lsls	r2, r3, #31
 800fb00:	d437      	bmi.n	800fb72 <_printf_float+0x386>
 800fb02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb04:	ebaa 0903 	sub.w	r9, sl, r3
 800fb08:	9b06      	ldr	r3, [sp, #24]
 800fb0a:	ebaa 0303 	sub.w	r3, sl, r3
 800fb0e:	4599      	cmp	r9, r3
 800fb10:	bfa8      	it	ge
 800fb12:	4699      	movge	r9, r3
 800fb14:	f1b9 0f00 	cmp.w	r9, #0
 800fb18:	dc33      	bgt.n	800fb82 <_printf_float+0x396>
 800fb1a:	f04f 0800 	mov.w	r8, #0
 800fb1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fb22:	f104 0b1a 	add.w	fp, r4, #26
 800fb26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb28:	ebaa 0303 	sub.w	r3, sl, r3
 800fb2c:	eba3 0309 	sub.w	r3, r3, r9
 800fb30:	4543      	cmp	r3, r8
 800fb32:	f77f af79 	ble.w	800fa28 <_printf_float+0x23c>
 800fb36:	2301      	movs	r3, #1
 800fb38:	465a      	mov	r2, fp
 800fb3a:	4631      	mov	r1, r6
 800fb3c:	4628      	mov	r0, r5
 800fb3e:	47b8      	blx	r7
 800fb40:	3001      	adds	r0, #1
 800fb42:	f43f aeae 	beq.w	800f8a2 <_printf_float+0xb6>
 800fb46:	f108 0801 	add.w	r8, r8, #1
 800fb4a:	e7ec      	b.n	800fb26 <_printf_float+0x33a>
 800fb4c:	4642      	mov	r2, r8
 800fb4e:	4631      	mov	r1, r6
 800fb50:	4628      	mov	r0, r5
 800fb52:	47b8      	blx	r7
 800fb54:	3001      	adds	r0, #1
 800fb56:	d1c2      	bne.n	800fade <_printf_float+0x2f2>
 800fb58:	e6a3      	b.n	800f8a2 <_printf_float+0xb6>
 800fb5a:	2301      	movs	r3, #1
 800fb5c:	4631      	mov	r1, r6
 800fb5e:	4628      	mov	r0, r5
 800fb60:	9206      	str	r2, [sp, #24]
 800fb62:	47b8      	blx	r7
 800fb64:	3001      	adds	r0, #1
 800fb66:	f43f ae9c 	beq.w	800f8a2 <_printf_float+0xb6>
 800fb6a:	9a06      	ldr	r2, [sp, #24]
 800fb6c:	f10b 0b01 	add.w	fp, fp, #1
 800fb70:	e7bb      	b.n	800faea <_printf_float+0x2fe>
 800fb72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fb76:	4631      	mov	r1, r6
 800fb78:	4628      	mov	r0, r5
 800fb7a:	47b8      	blx	r7
 800fb7c:	3001      	adds	r0, #1
 800fb7e:	d1c0      	bne.n	800fb02 <_printf_float+0x316>
 800fb80:	e68f      	b.n	800f8a2 <_printf_float+0xb6>
 800fb82:	9a06      	ldr	r2, [sp, #24]
 800fb84:	464b      	mov	r3, r9
 800fb86:	4442      	add	r2, r8
 800fb88:	4631      	mov	r1, r6
 800fb8a:	4628      	mov	r0, r5
 800fb8c:	47b8      	blx	r7
 800fb8e:	3001      	adds	r0, #1
 800fb90:	d1c3      	bne.n	800fb1a <_printf_float+0x32e>
 800fb92:	e686      	b.n	800f8a2 <_printf_float+0xb6>
 800fb94:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800fb98:	f1ba 0f01 	cmp.w	sl, #1
 800fb9c:	dc01      	bgt.n	800fba2 <_printf_float+0x3b6>
 800fb9e:	07db      	lsls	r3, r3, #31
 800fba0:	d536      	bpl.n	800fc10 <_printf_float+0x424>
 800fba2:	2301      	movs	r3, #1
 800fba4:	4642      	mov	r2, r8
 800fba6:	4631      	mov	r1, r6
 800fba8:	4628      	mov	r0, r5
 800fbaa:	47b8      	blx	r7
 800fbac:	3001      	adds	r0, #1
 800fbae:	f43f ae78 	beq.w	800f8a2 <_printf_float+0xb6>
 800fbb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fbb6:	4631      	mov	r1, r6
 800fbb8:	4628      	mov	r0, r5
 800fbba:	47b8      	blx	r7
 800fbbc:	3001      	adds	r0, #1
 800fbbe:	f43f ae70 	beq.w	800f8a2 <_printf_float+0xb6>
 800fbc2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800fbc6:	2200      	movs	r2, #0
 800fbc8:	2300      	movs	r3, #0
 800fbca:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fbce:	f7f0 ffa3 	bl	8000b18 <__aeabi_dcmpeq>
 800fbd2:	b9c0      	cbnz	r0, 800fc06 <_printf_float+0x41a>
 800fbd4:	4653      	mov	r3, sl
 800fbd6:	f108 0201 	add.w	r2, r8, #1
 800fbda:	4631      	mov	r1, r6
 800fbdc:	4628      	mov	r0, r5
 800fbde:	47b8      	blx	r7
 800fbe0:	3001      	adds	r0, #1
 800fbe2:	d10c      	bne.n	800fbfe <_printf_float+0x412>
 800fbe4:	e65d      	b.n	800f8a2 <_printf_float+0xb6>
 800fbe6:	2301      	movs	r3, #1
 800fbe8:	465a      	mov	r2, fp
 800fbea:	4631      	mov	r1, r6
 800fbec:	4628      	mov	r0, r5
 800fbee:	47b8      	blx	r7
 800fbf0:	3001      	adds	r0, #1
 800fbf2:	f43f ae56 	beq.w	800f8a2 <_printf_float+0xb6>
 800fbf6:	f108 0801 	add.w	r8, r8, #1
 800fbfa:	45d0      	cmp	r8, sl
 800fbfc:	dbf3      	blt.n	800fbe6 <_printf_float+0x3fa>
 800fbfe:	464b      	mov	r3, r9
 800fc00:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800fc04:	e6df      	b.n	800f9c6 <_printf_float+0x1da>
 800fc06:	f04f 0800 	mov.w	r8, #0
 800fc0a:	f104 0b1a 	add.w	fp, r4, #26
 800fc0e:	e7f4      	b.n	800fbfa <_printf_float+0x40e>
 800fc10:	2301      	movs	r3, #1
 800fc12:	4642      	mov	r2, r8
 800fc14:	e7e1      	b.n	800fbda <_printf_float+0x3ee>
 800fc16:	2301      	movs	r3, #1
 800fc18:	464a      	mov	r2, r9
 800fc1a:	4631      	mov	r1, r6
 800fc1c:	4628      	mov	r0, r5
 800fc1e:	47b8      	blx	r7
 800fc20:	3001      	adds	r0, #1
 800fc22:	f43f ae3e 	beq.w	800f8a2 <_printf_float+0xb6>
 800fc26:	f108 0801 	add.w	r8, r8, #1
 800fc2a:	68e3      	ldr	r3, [r4, #12]
 800fc2c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800fc2e:	1a5b      	subs	r3, r3, r1
 800fc30:	4543      	cmp	r3, r8
 800fc32:	dcf0      	bgt.n	800fc16 <_printf_float+0x42a>
 800fc34:	e6fc      	b.n	800fa30 <_printf_float+0x244>
 800fc36:	f04f 0800 	mov.w	r8, #0
 800fc3a:	f104 0919 	add.w	r9, r4, #25
 800fc3e:	e7f4      	b.n	800fc2a <_printf_float+0x43e>

0800fc40 <_printf_common>:
 800fc40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc44:	4616      	mov	r6, r2
 800fc46:	4698      	mov	r8, r3
 800fc48:	688a      	ldr	r2, [r1, #8]
 800fc4a:	690b      	ldr	r3, [r1, #16]
 800fc4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fc50:	4293      	cmp	r3, r2
 800fc52:	bfb8      	it	lt
 800fc54:	4613      	movlt	r3, r2
 800fc56:	6033      	str	r3, [r6, #0]
 800fc58:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800fc5c:	4607      	mov	r7, r0
 800fc5e:	460c      	mov	r4, r1
 800fc60:	b10a      	cbz	r2, 800fc66 <_printf_common+0x26>
 800fc62:	3301      	adds	r3, #1
 800fc64:	6033      	str	r3, [r6, #0]
 800fc66:	6823      	ldr	r3, [r4, #0]
 800fc68:	0699      	lsls	r1, r3, #26
 800fc6a:	bf42      	ittt	mi
 800fc6c:	6833      	ldrmi	r3, [r6, #0]
 800fc6e:	3302      	addmi	r3, #2
 800fc70:	6033      	strmi	r3, [r6, #0]
 800fc72:	6825      	ldr	r5, [r4, #0]
 800fc74:	f015 0506 	ands.w	r5, r5, #6
 800fc78:	d106      	bne.n	800fc88 <_printf_common+0x48>
 800fc7a:	f104 0a19 	add.w	sl, r4, #25
 800fc7e:	68e3      	ldr	r3, [r4, #12]
 800fc80:	6832      	ldr	r2, [r6, #0]
 800fc82:	1a9b      	subs	r3, r3, r2
 800fc84:	42ab      	cmp	r3, r5
 800fc86:	dc26      	bgt.n	800fcd6 <_printf_common+0x96>
 800fc88:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800fc8c:	6822      	ldr	r2, [r4, #0]
 800fc8e:	3b00      	subs	r3, #0
 800fc90:	bf18      	it	ne
 800fc92:	2301      	movne	r3, #1
 800fc94:	0692      	lsls	r2, r2, #26
 800fc96:	d42b      	bmi.n	800fcf0 <_printf_common+0xb0>
 800fc98:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800fc9c:	4641      	mov	r1, r8
 800fc9e:	4638      	mov	r0, r7
 800fca0:	47c8      	blx	r9
 800fca2:	3001      	adds	r0, #1
 800fca4:	d01e      	beq.n	800fce4 <_printf_common+0xa4>
 800fca6:	6823      	ldr	r3, [r4, #0]
 800fca8:	6922      	ldr	r2, [r4, #16]
 800fcaa:	f003 0306 	and.w	r3, r3, #6
 800fcae:	2b04      	cmp	r3, #4
 800fcb0:	bf02      	ittt	eq
 800fcb2:	68e5      	ldreq	r5, [r4, #12]
 800fcb4:	6833      	ldreq	r3, [r6, #0]
 800fcb6:	1aed      	subeq	r5, r5, r3
 800fcb8:	68a3      	ldr	r3, [r4, #8]
 800fcba:	bf0c      	ite	eq
 800fcbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fcc0:	2500      	movne	r5, #0
 800fcc2:	4293      	cmp	r3, r2
 800fcc4:	bfc4      	itt	gt
 800fcc6:	1a9b      	subgt	r3, r3, r2
 800fcc8:	18ed      	addgt	r5, r5, r3
 800fcca:	2600      	movs	r6, #0
 800fccc:	341a      	adds	r4, #26
 800fcce:	42b5      	cmp	r5, r6
 800fcd0:	d11a      	bne.n	800fd08 <_printf_common+0xc8>
 800fcd2:	2000      	movs	r0, #0
 800fcd4:	e008      	b.n	800fce8 <_printf_common+0xa8>
 800fcd6:	2301      	movs	r3, #1
 800fcd8:	4652      	mov	r2, sl
 800fcda:	4641      	mov	r1, r8
 800fcdc:	4638      	mov	r0, r7
 800fcde:	47c8      	blx	r9
 800fce0:	3001      	adds	r0, #1
 800fce2:	d103      	bne.n	800fcec <_printf_common+0xac>
 800fce4:	f04f 30ff 	mov.w	r0, #4294967295
 800fce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fcec:	3501      	adds	r5, #1
 800fcee:	e7c6      	b.n	800fc7e <_printf_common+0x3e>
 800fcf0:	18e1      	adds	r1, r4, r3
 800fcf2:	1c5a      	adds	r2, r3, #1
 800fcf4:	2030      	movs	r0, #48	@ 0x30
 800fcf6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800fcfa:	4422      	add	r2, r4
 800fcfc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800fd00:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800fd04:	3302      	adds	r3, #2
 800fd06:	e7c7      	b.n	800fc98 <_printf_common+0x58>
 800fd08:	2301      	movs	r3, #1
 800fd0a:	4622      	mov	r2, r4
 800fd0c:	4641      	mov	r1, r8
 800fd0e:	4638      	mov	r0, r7
 800fd10:	47c8      	blx	r9
 800fd12:	3001      	adds	r0, #1
 800fd14:	d0e6      	beq.n	800fce4 <_printf_common+0xa4>
 800fd16:	3601      	adds	r6, #1
 800fd18:	e7d9      	b.n	800fcce <_printf_common+0x8e>
	...

0800fd1c <_printf_i>:
 800fd1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fd20:	7e0f      	ldrb	r7, [r1, #24]
 800fd22:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800fd24:	2f78      	cmp	r7, #120	@ 0x78
 800fd26:	4691      	mov	r9, r2
 800fd28:	4680      	mov	r8, r0
 800fd2a:	460c      	mov	r4, r1
 800fd2c:	469a      	mov	sl, r3
 800fd2e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800fd32:	d807      	bhi.n	800fd44 <_printf_i+0x28>
 800fd34:	2f62      	cmp	r7, #98	@ 0x62
 800fd36:	d80a      	bhi.n	800fd4e <_printf_i+0x32>
 800fd38:	2f00      	cmp	r7, #0
 800fd3a:	f000 80d2 	beq.w	800fee2 <_printf_i+0x1c6>
 800fd3e:	2f58      	cmp	r7, #88	@ 0x58
 800fd40:	f000 80b9 	beq.w	800feb6 <_printf_i+0x19a>
 800fd44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fd48:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800fd4c:	e03a      	b.n	800fdc4 <_printf_i+0xa8>
 800fd4e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800fd52:	2b15      	cmp	r3, #21
 800fd54:	d8f6      	bhi.n	800fd44 <_printf_i+0x28>
 800fd56:	a101      	add	r1, pc, #4	@ (adr r1, 800fd5c <_printf_i+0x40>)
 800fd58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fd5c:	0800fdb5 	.word	0x0800fdb5
 800fd60:	0800fdc9 	.word	0x0800fdc9
 800fd64:	0800fd45 	.word	0x0800fd45
 800fd68:	0800fd45 	.word	0x0800fd45
 800fd6c:	0800fd45 	.word	0x0800fd45
 800fd70:	0800fd45 	.word	0x0800fd45
 800fd74:	0800fdc9 	.word	0x0800fdc9
 800fd78:	0800fd45 	.word	0x0800fd45
 800fd7c:	0800fd45 	.word	0x0800fd45
 800fd80:	0800fd45 	.word	0x0800fd45
 800fd84:	0800fd45 	.word	0x0800fd45
 800fd88:	0800fec9 	.word	0x0800fec9
 800fd8c:	0800fdf3 	.word	0x0800fdf3
 800fd90:	0800fe83 	.word	0x0800fe83
 800fd94:	0800fd45 	.word	0x0800fd45
 800fd98:	0800fd45 	.word	0x0800fd45
 800fd9c:	0800feeb 	.word	0x0800feeb
 800fda0:	0800fd45 	.word	0x0800fd45
 800fda4:	0800fdf3 	.word	0x0800fdf3
 800fda8:	0800fd45 	.word	0x0800fd45
 800fdac:	0800fd45 	.word	0x0800fd45
 800fdb0:	0800fe8b 	.word	0x0800fe8b
 800fdb4:	6833      	ldr	r3, [r6, #0]
 800fdb6:	1d1a      	adds	r2, r3, #4
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	6032      	str	r2, [r6, #0]
 800fdbc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fdc0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800fdc4:	2301      	movs	r3, #1
 800fdc6:	e09d      	b.n	800ff04 <_printf_i+0x1e8>
 800fdc8:	6833      	ldr	r3, [r6, #0]
 800fdca:	6820      	ldr	r0, [r4, #0]
 800fdcc:	1d19      	adds	r1, r3, #4
 800fdce:	6031      	str	r1, [r6, #0]
 800fdd0:	0606      	lsls	r6, r0, #24
 800fdd2:	d501      	bpl.n	800fdd8 <_printf_i+0xbc>
 800fdd4:	681d      	ldr	r5, [r3, #0]
 800fdd6:	e003      	b.n	800fde0 <_printf_i+0xc4>
 800fdd8:	0645      	lsls	r5, r0, #25
 800fdda:	d5fb      	bpl.n	800fdd4 <_printf_i+0xb8>
 800fddc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800fde0:	2d00      	cmp	r5, #0
 800fde2:	da03      	bge.n	800fdec <_printf_i+0xd0>
 800fde4:	232d      	movs	r3, #45	@ 0x2d
 800fde6:	426d      	negs	r5, r5
 800fde8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fdec:	4859      	ldr	r0, [pc, #356]	@ (800ff54 <_printf_i+0x238>)
 800fdee:	230a      	movs	r3, #10
 800fdf0:	e011      	b.n	800fe16 <_printf_i+0xfa>
 800fdf2:	6821      	ldr	r1, [r4, #0]
 800fdf4:	6833      	ldr	r3, [r6, #0]
 800fdf6:	0608      	lsls	r0, r1, #24
 800fdf8:	f853 5b04 	ldr.w	r5, [r3], #4
 800fdfc:	d402      	bmi.n	800fe04 <_printf_i+0xe8>
 800fdfe:	0649      	lsls	r1, r1, #25
 800fe00:	bf48      	it	mi
 800fe02:	b2ad      	uxthmi	r5, r5
 800fe04:	2f6f      	cmp	r7, #111	@ 0x6f
 800fe06:	4853      	ldr	r0, [pc, #332]	@ (800ff54 <_printf_i+0x238>)
 800fe08:	6033      	str	r3, [r6, #0]
 800fe0a:	bf14      	ite	ne
 800fe0c:	230a      	movne	r3, #10
 800fe0e:	2308      	moveq	r3, #8
 800fe10:	2100      	movs	r1, #0
 800fe12:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800fe16:	6866      	ldr	r6, [r4, #4]
 800fe18:	60a6      	str	r6, [r4, #8]
 800fe1a:	2e00      	cmp	r6, #0
 800fe1c:	bfa2      	ittt	ge
 800fe1e:	6821      	ldrge	r1, [r4, #0]
 800fe20:	f021 0104 	bicge.w	r1, r1, #4
 800fe24:	6021      	strge	r1, [r4, #0]
 800fe26:	b90d      	cbnz	r5, 800fe2c <_printf_i+0x110>
 800fe28:	2e00      	cmp	r6, #0
 800fe2a:	d04b      	beq.n	800fec4 <_printf_i+0x1a8>
 800fe2c:	4616      	mov	r6, r2
 800fe2e:	fbb5 f1f3 	udiv	r1, r5, r3
 800fe32:	fb03 5711 	mls	r7, r3, r1, r5
 800fe36:	5dc7      	ldrb	r7, [r0, r7]
 800fe38:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fe3c:	462f      	mov	r7, r5
 800fe3e:	42bb      	cmp	r3, r7
 800fe40:	460d      	mov	r5, r1
 800fe42:	d9f4      	bls.n	800fe2e <_printf_i+0x112>
 800fe44:	2b08      	cmp	r3, #8
 800fe46:	d10b      	bne.n	800fe60 <_printf_i+0x144>
 800fe48:	6823      	ldr	r3, [r4, #0]
 800fe4a:	07df      	lsls	r7, r3, #31
 800fe4c:	d508      	bpl.n	800fe60 <_printf_i+0x144>
 800fe4e:	6923      	ldr	r3, [r4, #16]
 800fe50:	6861      	ldr	r1, [r4, #4]
 800fe52:	4299      	cmp	r1, r3
 800fe54:	bfde      	ittt	le
 800fe56:	2330      	movle	r3, #48	@ 0x30
 800fe58:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fe5c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800fe60:	1b92      	subs	r2, r2, r6
 800fe62:	6122      	str	r2, [r4, #16]
 800fe64:	f8cd a000 	str.w	sl, [sp]
 800fe68:	464b      	mov	r3, r9
 800fe6a:	aa03      	add	r2, sp, #12
 800fe6c:	4621      	mov	r1, r4
 800fe6e:	4640      	mov	r0, r8
 800fe70:	f7ff fee6 	bl	800fc40 <_printf_common>
 800fe74:	3001      	adds	r0, #1
 800fe76:	d14a      	bne.n	800ff0e <_printf_i+0x1f2>
 800fe78:	f04f 30ff 	mov.w	r0, #4294967295
 800fe7c:	b004      	add	sp, #16
 800fe7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe82:	6823      	ldr	r3, [r4, #0]
 800fe84:	f043 0320 	orr.w	r3, r3, #32
 800fe88:	6023      	str	r3, [r4, #0]
 800fe8a:	4833      	ldr	r0, [pc, #204]	@ (800ff58 <_printf_i+0x23c>)
 800fe8c:	2778      	movs	r7, #120	@ 0x78
 800fe8e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800fe92:	6823      	ldr	r3, [r4, #0]
 800fe94:	6831      	ldr	r1, [r6, #0]
 800fe96:	061f      	lsls	r7, r3, #24
 800fe98:	f851 5b04 	ldr.w	r5, [r1], #4
 800fe9c:	d402      	bmi.n	800fea4 <_printf_i+0x188>
 800fe9e:	065f      	lsls	r7, r3, #25
 800fea0:	bf48      	it	mi
 800fea2:	b2ad      	uxthmi	r5, r5
 800fea4:	6031      	str	r1, [r6, #0]
 800fea6:	07d9      	lsls	r1, r3, #31
 800fea8:	bf44      	itt	mi
 800feaa:	f043 0320 	orrmi.w	r3, r3, #32
 800feae:	6023      	strmi	r3, [r4, #0]
 800feb0:	b11d      	cbz	r5, 800feba <_printf_i+0x19e>
 800feb2:	2310      	movs	r3, #16
 800feb4:	e7ac      	b.n	800fe10 <_printf_i+0xf4>
 800feb6:	4827      	ldr	r0, [pc, #156]	@ (800ff54 <_printf_i+0x238>)
 800feb8:	e7e9      	b.n	800fe8e <_printf_i+0x172>
 800feba:	6823      	ldr	r3, [r4, #0]
 800febc:	f023 0320 	bic.w	r3, r3, #32
 800fec0:	6023      	str	r3, [r4, #0]
 800fec2:	e7f6      	b.n	800feb2 <_printf_i+0x196>
 800fec4:	4616      	mov	r6, r2
 800fec6:	e7bd      	b.n	800fe44 <_printf_i+0x128>
 800fec8:	6833      	ldr	r3, [r6, #0]
 800feca:	6825      	ldr	r5, [r4, #0]
 800fecc:	6961      	ldr	r1, [r4, #20]
 800fece:	1d18      	adds	r0, r3, #4
 800fed0:	6030      	str	r0, [r6, #0]
 800fed2:	062e      	lsls	r6, r5, #24
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	d501      	bpl.n	800fedc <_printf_i+0x1c0>
 800fed8:	6019      	str	r1, [r3, #0]
 800feda:	e002      	b.n	800fee2 <_printf_i+0x1c6>
 800fedc:	0668      	lsls	r0, r5, #25
 800fede:	d5fb      	bpl.n	800fed8 <_printf_i+0x1bc>
 800fee0:	8019      	strh	r1, [r3, #0]
 800fee2:	2300      	movs	r3, #0
 800fee4:	6123      	str	r3, [r4, #16]
 800fee6:	4616      	mov	r6, r2
 800fee8:	e7bc      	b.n	800fe64 <_printf_i+0x148>
 800feea:	6833      	ldr	r3, [r6, #0]
 800feec:	1d1a      	adds	r2, r3, #4
 800feee:	6032      	str	r2, [r6, #0]
 800fef0:	681e      	ldr	r6, [r3, #0]
 800fef2:	6862      	ldr	r2, [r4, #4]
 800fef4:	2100      	movs	r1, #0
 800fef6:	4630      	mov	r0, r6
 800fef8:	f7f0 f992 	bl	8000220 <memchr>
 800fefc:	b108      	cbz	r0, 800ff02 <_printf_i+0x1e6>
 800fefe:	1b80      	subs	r0, r0, r6
 800ff00:	6060      	str	r0, [r4, #4]
 800ff02:	6863      	ldr	r3, [r4, #4]
 800ff04:	6123      	str	r3, [r4, #16]
 800ff06:	2300      	movs	r3, #0
 800ff08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ff0c:	e7aa      	b.n	800fe64 <_printf_i+0x148>
 800ff0e:	6923      	ldr	r3, [r4, #16]
 800ff10:	4632      	mov	r2, r6
 800ff12:	4649      	mov	r1, r9
 800ff14:	4640      	mov	r0, r8
 800ff16:	47d0      	blx	sl
 800ff18:	3001      	adds	r0, #1
 800ff1a:	d0ad      	beq.n	800fe78 <_printf_i+0x15c>
 800ff1c:	6823      	ldr	r3, [r4, #0]
 800ff1e:	079b      	lsls	r3, r3, #30
 800ff20:	d413      	bmi.n	800ff4a <_printf_i+0x22e>
 800ff22:	68e0      	ldr	r0, [r4, #12]
 800ff24:	9b03      	ldr	r3, [sp, #12]
 800ff26:	4298      	cmp	r0, r3
 800ff28:	bfb8      	it	lt
 800ff2a:	4618      	movlt	r0, r3
 800ff2c:	e7a6      	b.n	800fe7c <_printf_i+0x160>
 800ff2e:	2301      	movs	r3, #1
 800ff30:	4632      	mov	r2, r6
 800ff32:	4649      	mov	r1, r9
 800ff34:	4640      	mov	r0, r8
 800ff36:	47d0      	blx	sl
 800ff38:	3001      	adds	r0, #1
 800ff3a:	d09d      	beq.n	800fe78 <_printf_i+0x15c>
 800ff3c:	3501      	adds	r5, #1
 800ff3e:	68e3      	ldr	r3, [r4, #12]
 800ff40:	9903      	ldr	r1, [sp, #12]
 800ff42:	1a5b      	subs	r3, r3, r1
 800ff44:	42ab      	cmp	r3, r5
 800ff46:	dcf2      	bgt.n	800ff2e <_printf_i+0x212>
 800ff48:	e7eb      	b.n	800ff22 <_printf_i+0x206>
 800ff4a:	2500      	movs	r5, #0
 800ff4c:	f104 0619 	add.w	r6, r4, #25
 800ff50:	e7f5      	b.n	800ff3e <_printf_i+0x222>
 800ff52:	bf00      	nop
 800ff54:	0801491e 	.word	0x0801491e
 800ff58:	0801492f 	.word	0x0801492f

0800ff5c <_scanf_float>:
 800ff5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff60:	b087      	sub	sp, #28
 800ff62:	4617      	mov	r7, r2
 800ff64:	9303      	str	r3, [sp, #12]
 800ff66:	688b      	ldr	r3, [r1, #8]
 800ff68:	1e5a      	subs	r2, r3, #1
 800ff6a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800ff6e:	bf81      	itttt	hi
 800ff70:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800ff74:	eb03 0b05 	addhi.w	fp, r3, r5
 800ff78:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800ff7c:	608b      	strhi	r3, [r1, #8]
 800ff7e:	680b      	ldr	r3, [r1, #0]
 800ff80:	460a      	mov	r2, r1
 800ff82:	f04f 0500 	mov.w	r5, #0
 800ff86:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800ff8a:	f842 3b1c 	str.w	r3, [r2], #28
 800ff8e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ff92:	4680      	mov	r8, r0
 800ff94:	460c      	mov	r4, r1
 800ff96:	bf98      	it	ls
 800ff98:	f04f 0b00 	movls.w	fp, #0
 800ff9c:	9201      	str	r2, [sp, #4]
 800ff9e:	4616      	mov	r6, r2
 800ffa0:	46aa      	mov	sl, r5
 800ffa2:	46a9      	mov	r9, r5
 800ffa4:	9502      	str	r5, [sp, #8]
 800ffa6:	68a2      	ldr	r2, [r4, #8]
 800ffa8:	b152      	cbz	r2, 800ffc0 <_scanf_float+0x64>
 800ffaa:	683b      	ldr	r3, [r7, #0]
 800ffac:	781b      	ldrb	r3, [r3, #0]
 800ffae:	2b4e      	cmp	r3, #78	@ 0x4e
 800ffb0:	d864      	bhi.n	801007c <_scanf_float+0x120>
 800ffb2:	2b40      	cmp	r3, #64	@ 0x40
 800ffb4:	d83c      	bhi.n	8010030 <_scanf_float+0xd4>
 800ffb6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800ffba:	b2c8      	uxtb	r0, r1
 800ffbc:	280e      	cmp	r0, #14
 800ffbe:	d93a      	bls.n	8010036 <_scanf_float+0xda>
 800ffc0:	f1b9 0f00 	cmp.w	r9, #0
 800ffc4:	d003      	beq.n	800ffce <_scanf_float+0x72>
 800ffc6:	6823      	ldr	r3, [r4, #0]
 800ffc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ffcc:	6023      	str	r3, [r4, #0]
 800ffce:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ffd2:	f1ba 0f01 	cmp.w	sl, #1
 800ffd6:	f200 8117 	bhi.w	8010208 <_scanf_float+0x2ac>
 800ffda:	9b01      	ldr	r3, [sp, #4]
 800ffdc:	429e      	cmp	r6, r3
 800ffde:	f200 8108 	bhi.w	80101f2 <_scanf_float+0x296>
 800ffe2:	2001      	movs	r0, #1
 800ffe4:	b007      	add	sp, #28
 800ffe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffea:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800ffee:	2a0d      	cmp	r2, #13
 800fff0:	d8e6      	bhi.n	800ffc0 <_scanf_float+0x64>
 800fff2:	a101      	add	r1, pc, #4	@ (adr r1, 800fff8 <_scanf_float+0x9c>)
 800fff4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800fff8:	0801013f 	.word	0x0801013f
 800fffc:	0800ffc1 	.word	0x0800ffc1
 8010000:	0800ffc1 	.word	0x0800ffc1
 8010004:	0800ffc1 	.word	0x0800ffc1
 8010008:	0801019f 	.word	0x0801019f
 801000c:	08010177 	.word	0x08010177
 8010010:	0800ffc1 	.word	0x0800ffc1
 8010014:	0800ffc1 	.word	0x0800ffc1
 8010018:	0801014d 	.word	0x0801014d
 801001c:	0800ffc1 	.word	0x0800ffc1
 8010020:	0800ffc1 	.word	0x0800ffc1
 8010024:	0800ffc1 	.word	0x0800ffc1
 8010028:	0800ffc1 	.word	0x0800ffc1
 801002c:	08010105 	.word	0x08010105
 8010030:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8010034:	e7db      	b.n	800ffee <_scanf_float+0x92>
 8010036:	290e      	cmp	r1, #14
 8010038:	d8c2      	bhi.n	800ffc0 <_scanf_float+0x64>
 801003a:	a001      	add	r0, pc, #4	@ (adr r0, 8010040 <_scanf_float+0xe4>)
 801003c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8010040:	080100f5 	.word	0x080100f5
 8010044:	0800ffc1 	.word	0x0800ffc1
 8010048:	080100f5 	.word	0x080100f5
 801004c:	0801018b 	.word	0x0801018b
 8010050:	0800ffc1 	.word	0x0800ffc1
 8010054:	0801009d 	.word	0x0801009d
 8010058:	080100db 	.word	0x080100db
 801005c:	080100db 	.word	0x080100db
 8010060:	080100db 	.word	0x080100db
 8010064:	080100db 	.word	0x080100db
 8010068:	080100db 	.word	0x080100db
 801006c:	080100db 	.word	0x080100db
 8010070:	080100db 	.word	0x080100db
 8010074:	080100db 	.word	0x080100db
 8010078:	080100db 	.word	0x080100db
 801007c:	2b6e      	cmp	r3, #110	@ 0x6e
 801007e:	d809      	bhi.n	8010094 <_scanf_float+0x138>
 8010080:	2b60      	cmp	r3, #96	@ 0x60
 8010082:	d8b2      	bhi.n	800ffea <_scanf_float+0x8e>
 8010084:	2b54      	cmp	r3, #84	@ 0x54
 8010086:	d07b      	beq.n	8010180 <_scanf_float+0x224>
 8010088:	2b59      	cmp	r3, #89	@ 0x59
 801008a:	d199      	bne.n	800ffc0 <_scanf_float+0x64>
 801008c:	2d07      	cmp	r5, #7
 801008e:	d197      	bne.n	800ffc0 <_scanf_float+0x64>
 8010090:	2508      	movs	r5, #8
 8010092:	e02c      	b.n	80100ee <_scanf_float+0x192>
 8010094:	2b74      	cmp	r3, #116	@ 0x74
 8010096:	d073      	beq.n	8010180 <_scanf_float+0x224>
 8010098:	2b79      	cmp	r3, #121	@ 0x79
 801009a:	e7f6      	b.n	801008a <_scanf_float+0x12e>
 801009c:	6821      	ldr	r1, [r4, #0]
 801009e:	05c8      	lsls	r0, r1, #23
 80100a0:	d51b      	bpl.n	80100da <_scanf_float+0x17e>
 80100a2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80100a6:	6021      	str	r1, [r4, #0]
 80100a8:	f109 0901 	add.w	r9, r9, #1
 80100ac:	f1bb 0f00 	cmp.w	fp, #0
 80100b0:	d003      	beq.n	80100ba <_scanf_float+0x15e>
 80100b2:	3201      	adds	r2, #1
 80100b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80100b8:	60a2      	str	r2, [r4, #8]
 80100ba:	68a3      	ldr	r3, [r4, #8]
 80100bc:	3b01      	subs	r3, #1
 80100be:	60a3      	str	r3, [r4, #8]
 80100c0:	6923      	ldr	r3, [r4, #16]
 80100c2:	3301      	adds	r3, #1
 80100c4:	6123      	str	r3, [r4, #16]
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	3b01      	subs	r3, #1
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	607b      	str	r3, [r7, #4]
 80100ce:	f340 8087 	ble.w	80101e0 <_scanf_float+0x284>
 80100d2:	683b      	ldr	r3, [r7, #0]
 80100d4:	3301      	adds	r3, #1
 80100d6:	603b      	str	r3, [r7, #0]
 80100d8:	e765      	b.n	800ffa6 <_scanf_float+0x4a>
 80100da:	eb1a 0105 	adds.w	r1, sl, r5
 80100de:	f47f af6f 	bne.w	800ffc0 <_scanf_float+0x64>
 80100e2:	6822      	ldr	r2, [r4, #0]
 80100e4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80100e8:	6022      	str	r2, [r4, #0]
 80100ea:	460d      	mov	r5, r1
 80100ec:	468a      	mov	sl, r1
 80100ee:	f806 3b01 	strb.w	r3, [r6], #1
 80100f2:	e7e2      	b.n	80100ba <_scanf_float+0x15e>
 80100f4:	6822      	ldr	r2, [r4, #0]
 80100f6:	0610      	lsls	r0, r2, #24
 80100f8:	f57f af62 	bpl.w	800ffc0 <_scanf_float+0x64>
 80100fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8010100:	6022      	str	r2, [r4, #0]
 8010102:	e7f4      	b.n	80100ee <_scanf_float+0x192>
 8010104:	f1ba 0f00 	cmp.w	sl, #0
 8010108:	d10e      	bne.n	8010128 <_scanf_float+0x1cc>
 801010a:	f1b9 0f00 	cmp.w	r9, #0
 801010e:	d10e      	bne.n	801012e <_scanf_float+0x1d2>
 8010110:	6822      	ldr	r2, [r4, #0]
 8010112:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8010116:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801011a:	d108      	bne.n	801012e <_scanf_float+0x1d2>
 801011c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8010120:	6022      	str	r2, [r4, #0]
 8010122:	f04f 0a01 	mov.w	sl, #1
 8010126:	e7e2      	b.n	80100ee <_scanf_float+0x192>
 8010128:	f1ba 0f02 	cmp.w	sl, #2
 801012c:	d055      	beq.n	80101da <_scanf_float+0x27e>
 801012e:	2d01      	cmp	r5, #1
 8010130:	d002      	beq.n	8010138 <_scanf_float+0x1dc>
 8010132:	2d04      	cmp	r5, #4
 8010134:	f47f af44 	bne.w	800ffc0 <_scanf_float+0x64>
 8010138:	3501      	adds	r5, #1
 801013a:	b2ed      	uxtb	r5, r5
 801013c:	e7d7      	b.n	80100ee <_scanf_float+0x192>
 801013e:	f1ba 0f01 	cmp.w	sl, #1
 8010142:	f47f af3d 	bne.w	800ffc0 <_scanf_float+0x64>
 8010146:	f04f 0a02 	mov.w	sl, #2
 801014a:	e7d0      	b.n	80100ee <_scanf_float+0x192>
 801014c:	b97d      	cbnz	r5, 801016e <_scanf_float+0x212>
 801014e:	f1b9 0f00 	cmp.w	r9, #0
 8010152:	f47f af38 	bne.w	800ffc6 <_scanf_float+0x6a>
 8010156:	6822      	ldr	r2, [r4, #0]
 8010158:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801015c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8010160:	f040 8108 	bne.w	8010374 <_scanf_float+0x418>
 8010164:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8010168:	6022      	str	r2, [r4, #0]
 801016a:	2501      	movs	r5, #1
 801016c:	e7bf      	b.n	80100ee <_scanf_float+0x192>
 801016e:	2d03      	cmp	r5, #3
 8010170:	d0e2      	beq.n	8010138 <_scanf_float+0x1dc>
 8010172:	2d05      	cmp	r5, #5
 8010174:	e7de      	b.n	8010134 <_scanf_float+0x1d8>
 8010176:	2d02      	cmp	r5, #2
 8010178:	f47f af22 	bne.w	800ffc0 <_scanf_float+0x64>
 801017c:	2503      	movs	r5, #3
 801017e:	e7b6      	b.n	80100ee <_scanf_float+0x192>
 8010180:	2d06      	cmp	r5, #6
 8010182:	f47f af1d 	bne.w	800ffc0 <_scanf_float+0x64>
 8010186:	2507      	movs	r5, #7
 8010188:	e7b1      	b.n	80100ee <_scanf_float+0x192>
 801018a:	6822      	ldr	r2, [r4, #0]
 801018c:	0591      	lsls	r1, r2, #22
 801018e:	f57f af17 	bpl.w	800ffc0 <_scanf_float+0x64>
 8010192:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8010196:	6022      	str	r2, [r4, #0]
 8010198:	f8cd 9008 	str.w	r9, [sp, #8]
 801019c:	e7a7      	b.n	80100ee <_scanf_float+0x192>
 801019e:	6822      	ldr	r2, [r4, #0]
 80101a0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80101a4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80101a8:	d006      	beq.n	80101b8 <_scanf_float+0x25c>
 80101aa:	0550      	lsls	r0, r2, #21
 80101ac:	f57f af08 	bpl.w	800ffc0 <_scanf_float+0x64>
 80101b0:	f1b9 0f00 	cmp.w	r9, #0
 80101b4:	f000 80de 	beq.w	8010374 <_scanf_float+0x418>
 80101b8:	0591      	lsls	r1, r2, #22
 80101ba:	bf58      	it	pl
 80101bc:	9902      	ldrpl	r1, [sp, #8]
 80101be:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80101c2:	bf58      	it	pl
 80101c4:	eba9 0101 	subpl.w	r1, r9, r1
 80101c8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80101cc:	bf58      	it	pl
 80101ce:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80101d2:	6022      	str	r2, [r4, #0]
 80101d4:	f04f 0900 	mov.w	r9, #0
 80101d8:	e789      	b.n	80100ee <_scanf_float+0x192>
 80101da:	f04f 0a03 	mov.w	sl, #3
 80101de:	e786      	b.n	80100ee <_scanf_float+0x192>
 80101e0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80101e4:	4639      	mov	r1, r7
 80101e6:	4640      	mov	r0, r8
 80101e8:	4798      	blx	r3
 80101ea:	2800      	cmp	r0, #0
 80101ec:	f43f aedb 	beq.w	800ffa6 <_scanf_float+0x4a>
 80101f0:	e6e6      	b.n	800ffc0 <_scanf_float+0x64>
 80101f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80101f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80101fa:	463a      	mov	r2, r7
 80101fc:	4640      	mov	r0, r8
 80101fe:	4798      	blx	r3
 8010200:	6923      	ldr	r3, [r4, #16]
 8010202:	3b01      	subs	r3, #1
 8010204:	6123      	str	r3, [r4, #16]
 8010206:	e6e8      	b.n	800ffda <_scanf_float+0x7e>
 8010208:	1e6b      	subs	r3, r5, #1
 801020a:	2b06      	cmp	r3, #6
 801020c:	d824      	bhi.n	8010258 <_scanf_float+0x2fc>
 801020e:	2d02      	cmp	r5, #2
 8010210:	d836      	bhi.n	8010280 <_scanf_float+0x324>
 8010212:	9b01      	ldr	r3, [sp, #4]
 8010214:	429e      	cmp	r6, r3
 8010216:	f67f aee4 	bls.w	800ffe2 <_scanf_float+0x86>
 801021a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801021e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010222:	463a      	mov	r2, r7
 8010224:	4640      	mov	r0, r8
 8010226:	4798      	blx	r3
 8010228:	6923      	ldr	r3, [r4, #16]
 801022a:	3b01      	subs	r3, #1
 801022c:	6123      	str	r3, [r4, #16]
 801022e:	e7f0      	b.n	8010212 <_scanf_float+0x2b6>
 8010230:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010234:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8010238:	463a      	mov	r2, r7
 801023a:	4640      	mov	r0, r8
 801023c:	4798      	blx	r3
 801023e:	6923      	ldr	r3, [r4, #16]
 8010240:	3b01      	subs	r3, #1
 8010242:	6123      	str	r3, [r4, #16]
 8010244:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010248:	fa5f fa8a 	uxtb.w	sl, sl
 801024c:	f1ba 0f02 	cmp.w	sl, #2
 8010250:	d1ee      	bne.n	8010230 <_scanf_float+0x2d4>
 8010252:	3d03      	subs	r5, #3
 8010254:	b2ed      	uxtb	r5, r5
 8010256:	1b76      	subs	r6, r6, r5
 8010258:	6823      	ldr	r3, [r4, #0]
 801025a:	05da      	lsls	r2, r3, #23
 801025c:	d530      	bpl.n	80102c0 <_scanf_float+0x364>
 801025e:	055b      	lsls	r3, r3, #21
 8010260:	d511      	bpl.n	8010286 <_scanf_float+0x32a>
 8010262:	9b01      	ldr	r3, [sp, #4]
 8010264:	429e      	cmp	r6, r3
 8010266:	f67f aebc 	bls.w	800ffe2 <_scanf_float+0x86>
 801026a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801026e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010272:	463a      	mov	r2, r7
 8010274:	4640      	mov	r0, r8
 8010276:	4798      	blx	r3
 8010278:	6923      	ldr	r3, [r4, #16]
 801027a:	3b01      	subs	r3, #1
 801027c:	6123      	str	r3, [r4, #16]
 801027e:	e7f0      	b.n	8010262 <_scanf_float+0x306>
 8010280:	46aa      	mov	sl, r5
 8010282:	46b3      	mov	fp, r6
 8010284:	e7de      	b.n	8010244 <_scanf_float+0x2e8>
 8010286:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801028a:	6923      	ldr	r3, [r4, #16]
 801028c:	2965      	cmp	r1, #101	@ 0x65
 801028e:	f103 33ff 	add.w	r3, r3, #4294967295
 8010292:	f106 35ff 	add.w	r5, r6, #4294967295
 8010296:	6123      	str	r3, [r4, #16]
 8010298:	d00c      	beq.n	80102b4 <_scanf_float+0x358>
 801029a:	2945      	cmp	r1, #69	@ 0x45
 801029c:	d00a      	beq.n	80102b4 <_scanf_float+0x358>
 801029e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80102a2:	463a      	mov	r2, r7
 80102a4:	4640      	mov	r0, r8
 80102a6:	4798      	blx	r3
 80102a8:	6923      	ldr	r3, [r4, #16]
 80102aa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80102ae:	3b01      	subs	r3, #1
 80102b0:	1eb5      	subs	r5, r6, #2
 80102b2:	6123      	str	r3, [r4, #16]
 80102b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80102b8:	463a      	mov	r2, r7
 80102ba:	4640      	mov	r0, r8
 80102bc:	4798      	blx	r3
 80102be:	462e      	mov	r6, r5
 80102c0:	6822      	ldr	r2, [r4, #0]
 80102c2:	f012 0210 	ands.w	r2, r2, #16
 80102c6:	d001      	beq.n	80102cc <_scanf_float+0x370>
 80102c8:	2000      	movs	r0, #0
 80102ca:	e68b      	b.n	800ffe4 <_scanf_float+0x88>
 80102cc:	7032      	strb	r2, [r6, #0]
 80102ce:	6823      	ldr	r3, [r4, #0]
 80102d0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80102d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80102d8:	d11c      	bne.n	8010314 <_scanf_float+0x3b8>
 80102da:	9b02      	ldr	r3, [sp, #8]
 80102dc:	454b      	cmp	r3, r9
 80102de:	eba3 0209 	sub.w	r2, r3, r9
 80102e2:	d123      	bne.n	801032c <_scanf_float+0x3d0>
 80102e4:	9901      	ldr	r1, [sp, #4]
 80102e6:	2200      	movs	r2, #0
 80102e8:	4640      	mov	r0, r8
 80102ea:	f002 fbf9 	bl	8012ae0 <_strtod_r>
 80102ee:	9b03      	ldr	r3, [sp, #12]
 80102f0:	6821      	ldr	r1, [r4, #0]
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	f011 0f02 	tst.w	r1, #2
 80102f8:	ec57 6b10 	vmov	r6, r7, d0
 80102fc:	f103 0204 	add.w	r2, r3, #4
 8010300:	d01f      	beq.n	8010342 <_scanf_float+0x3e6>
 8010302:	9903      	ldr	r1, [sp, #12]
 8010304:	600a      	str	r2, [r1, #0]
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	e9c3 6700 	strd	r6, r7, [r3]
 801030c:	68e3      	ldr	r3, [r4, #12]
 801030e:	3301      	adds	r3, #1
 8010310:	60e3      	str	r3, [r4, #12]
 8010312:	e7d9      	b.n	80102c8 <_scanf_float+0x36c>
 8010314:	9b04      	ldr	r3, [sp, #16]
 8010316:	2b00      	cmp	r3, #0
 8010318:	d0e4      	beq.n	80102e4 <_scanf_float+0x388>
 801031a:	9905      	ldr	r1, [sp, #20]
 801031c:	230a      	movs	r3, #10
 801031e:	3101      	adds	r1, #1
 8010320:	4640      	mov	r0, r8
 8010322:	f002 fc5d 	bl	8012be0 <_strtol_r>
 8010326:	9b04      	ldr	r3, [sp, #16]
 8010328:	9e05      	ldr	r6, [sp, #20]
 801032a:	1ac2      	subs	r2, r0, r3
 801032c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8010330:	429e      	cmp	r6, r3
 8010332:	bf28      	it	cs
 8010334:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8010338:	4910      	ldr	r1, [pc, #64]	@ (801037c <_scanf_float+0x420>)
 801033a:	4630      	mov	r0, r6
 801033c:	f000 f8e4 	bl	8010508 <siprintf>
 8010340:	e7d0      	b.n	80102e4 <_scanf_float+0x388>
 8010342:	f011 0f04 	tst.w	r1, #4
 8010346:	9903      	ldr	r1, [sp, #12]
 8010348:	600a      	str	r2, [r1, #0]
 801034a:	d1dc      	bne.n	8010306 <_scanf_float+0x3aa>
 801034c:	681d      	ldr	r5, [r3, #0]
 801034e:	4632      	mov	r2, r6
 8010350:	463b      	mov	r3, r7
 8010352:	4630      	mov	r0, r6
 8010354:	4639      	mov	r1, r7
 8010356:	f7f0 fc11 	bl	8000b7c <__aeabi_dcmpun>
 801035a:	b128      	cbz	r0, 8010368 <_scanf_float+0x40c>
 801035c:	4808      	ldr	r0, [pc, #32]	@ (8010380 <_scanf_float+0x424>)
 801035e:	f000 f9b7 	bl	80106d0 <nanf>
 8010362:	ed85 0a00 	vstr	s0, [r5]
 8010366:	e7d1      	b.n	801030c <_scanf_float+0x3b0>
 8010368:	4630      	mov	r0, r6
 801036a:	4639      	mov	r1, r7
 801036c:	f7f0 fc64 	bl	8000c38 <__aeabi_d2f>
 8010370:	6028      	str	r0, [r5, #0]
 8010372:	e7cb      	b.n	801030c <_scanf_float+0x3b0>
 8010374:	f04f 0900 	mov.w	r9, #0
 8010378:	e629      	b.n	800ffce <_scanf_float+0x72>
 801037a:	bf00      	nop
 801037c:	08014940 	.word	0x08014940
 8010380:	08014cd5 	.word	0x08014cd5

08010384 <std>:
 8010384:	2300      	movs	r3, #0
 8010386:	b510      	push	{r4, lr}
 8010388:	4604      	mov	r4, r0
 801038a:	e9c0 3300 	strd	r3, r3, [r0]
 801038e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010392:	6083      	str	r3, [r0, #8]
 8010394:	8181      	strh	r1, [r0, #12]
 8010396:	6643      	str	r3, [r0, #100]	@ 0x64
 8010398:	81c2      	strh	r2, [r0, #14]
 801039a:	6183      	str	r3, [r0, #24]
 801039c:	4619      	mov	r1, r3
 801039e:	2208      	movs	r2, #8
 80103a0:	305c      	adds	r0, #92	@ 0x5c
 80103a2:	f000 f914 	bl	80105ce <memset>
 80103a6:	4b0d      	ldr	r3, [pc, #52]	@ (80103dc <std+0x58>)
 80103a8:	6263      	str	r3, [r4, #36]	@ 0x24
 80103aa:	4b0d      	ldr	r3, [pc, #52]	@ (80103e0 <std+0x5c>)
 80103ac:	62a3      	str	r3, [r4, #40]	@ 0x28
 80103ae:	4b0d      	ldr	r3, [pc, #52]	@ (80103e4 <std+0x60>)
 80103b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80103b2:	4b0d      	ldr	r3, [pc, #52]	@ (80103e8 <std+0x64>)
 80103b4:	6323      	str	r3, [r4, #48]	@ 0x30
 80103b6:	4b0d      	ldr	r3, [pc, #52]	@ (80103ec <std+0x68>)
 80103b8:	6224      	str	r4, [r4, #32]
 80103ba:	429c      	cmp	r4, r3
 80103bc:	d006      	beq.n	80103cc <std+0x48>
 80103be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80103c2:	4294      	cmp	r4, r2
 80103c4:	d002      	beq.n	80103cc <std+0x48>
 80103c6:	33d0      	adds	r3, #208	@ 0xd0
 80103c8:	429c      	cmp	r4, r3
 80103ca:	d105      	bne.n	80103d8 <std+0x54>
 80103cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80103d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80103d4:	f000 b978 	b.w	80106c8 <__retarget_lock_init_recursive>
 80103d8:	bd10      	pop	{r4, pc}
 80103da:	bf00      	nop
 80103dc:	08010549 	.word	0x08010549
 80103e0:	0801056b 	.word	0x0801056b
 80103e4:	080105a3 	.word	0x080105a3
 80103e8:	080105c7 	.word	0x080105c7
 80103ec:	200040f4 	.word	0x200040f4

080103f0 <stdio_exit_handler>:
 80103f0:	4a02      	ldr	r2, [pc, #8]	@ (80103fc <stdio_exit_handler+0xc>)
 80103f2:	4903      	ldr	r1, [pc, #12]	@ (8010400 <stdio_exit_handler+0x10>)
 80103f4:	4803      	ldr	r0, [pc, #12]	@ (8010404 <stdio_exit_handler+0x14>)
 80103f6:	f000 b869 	b.w	80104cc <_fwalk_sglue>
 80103fa:	bf00      	nop
 80103fc:	20000184 	.word	0x20000184
 8010400:	08012f9d 	.word	0x08012f9d
 8010404:	20000194 	.word	0x20000194

08010408 <cleanup_stdio>:
 8010408:	6841      	ldr	r1, [r0, #4]
 801040a:	4b0c      	ldr	r3, [pc, #48]	@ (801043c <cleanup_stdio+0x34>)
 801040c:	4299      	cmp	r1, r3
 801040e:	b510      	push	{r4, lr}
 8010410:	4604      	mov	r4, r0
 8010412:	d001      	beq.n	8010418 <cleanup_stdio+0x10>
 8010414:	f002 fdc2 	bl	8012f9c <_fflush_r>
 8010418:	68a1      	ldr	r1, [r4, #8]
 801041a:	4b09      	ldr	r3, [pc, #36]	@ (8010440 <cleanup_stdio+0x38>)
 801041c:	4299      	cmp	r1, r3
 801041e:	d002      	beq.n	8010426 <cleanup_stdio+0x1e>
 8010420:	4620      	mov	r0, r4
 8010422:	f002 fdbb 	bl	8012f9c <_fflush_r>
 8010426:	68e1      	ldr	r1, [r4, #12]
 8010428:	4b06      	ldr	r3, [pc, #24]	@ (8010444 <cleanup_stdio+0x3c>)
 801042a:	4299      	cmp	r1, r3
 801042c:	d004      	beq.n	8010438 <cleanup_stdio+0x30>
 801042e:	4620      	mov	r0, r4
 8010430:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010434:	f002 bdb2 	b.w	8012f9c <_fflush_r>
 8010438:	bd10      	pop	{r4, pc}
 801043a:	bf00      	nop
 801043c:	200040f4 	.word	0x200040f4
 8010440:	2000415c 	.word	0x2000415c
 8010444:	200041c4 	.word	0x200041c4

08010448 <global_stdio_init.part.0>:
 8010448:	b510      	push	{r4, lr}
 801044a:	4b0b      	ldr	r3, [pc, #44]	@ (8010478 <global_stdio_init.part.0+0x30>)
 801044c:	4c0b      	ldr	r4, [pc, #44]	@ (801047c <global_stdio_init.part.0+0x34>)
 801044e:	4a0c      	ldr	r2, [pc, #48]	@ (8010480 <global_stdio_init.part.0+0x38>)
 8010450:	601a      	str	r2, [r3, #0]
 8010452:	4620      	mov	r0, r4
 8010454:	2200      	movs	r2, #0
 8010456:	2104      	movs	r1, #4
 8010458:	f7ff ff94 	bl	8010384 <std>
 801045c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010460:	2201      	movs	r2, #1
 8010462:	2109      	movs	r1, #9
 8010464:	f7ff ff8e 	bl	8010384 <std>
 8010468:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801046c:	2202      	movs	r2, #2
 801046e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010472:	2112      	movs	r1, #18
 8010474:	f7ff bf86 	b.w	8010384 <std>
 8010478:	2000422c 	.word	0x2000422c
 801047c:	200040f4 	.word	0x200040f4
 8010480:	080103f1 	.word	0x080103f1

08010484 <__sfp_lock_acquire>:
 8010484:	4801      	ldr	r0, [pc, #4]	@ (801048c <__sfp_lock_acquire+0x8>)
 8010486:	f000 b920 	b.w	80106ca <__retarget_lock_acquire_recursive>
 801048a:	bf00      	nop
 801048c:	20004235 	.word	0x20004235

08010490 <__sfp_lock_release>:
 8010490:	4801      	ldr	r0, [pc, #4]	@ (8010498 <__sfp_lock_release+0x8>)
 8010492:	f000 b91b 	b.w	80106cc <__retarget_lock_release_recursive>
 8010496:	bf00      	nop
 8010498:	20004235 	.word	0x20004235

0801049c <__sinit>:
 801049c:	b510      	push	{r4, lr}
 801049e:	4604      	mov	r4, r0
 80104a0:	f7ff fff0 	bl	8010484 <__sfp_lock_acquire>
 80104a4:	6a23      	ldr	r3, [r4, #32]
 80104a6:	b11b      	cbz	r3, 80104b0 <__sinit+0x14>
 80104a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80104ac:	f7ff bff0 	b.w	8010490 <__sfp_lock_release>
 80104b0:	4b04      	ldr	r3, [pc, #16]	@ (80104c4 <__sinit+0x28>)
 80104b2:	6223      	str	r3, [r4, #32]
 80104b4:	4b04      	ldr	r3, [pc, #16]	@ (80104c8 <__sinit+0x2c>)
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d1f5      	bne.n	80104a8 <__sinit+0xc>
 80104bc:	f7ff ffc4 	bl	8010448 <global_stdio_init.part.0>
 80104c0:	e7f2      	b.n	80104a8 <__sinit+0xc>
 80104c2:	bf00      	nop
 80104c4:	08010409 	.word	0x08010409
 80104c8:	2000422c 	.word	0x2000422c

080104cc <_fwalk_sglue>:
 80104cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80104d0:	4607      	mov	r7, r0
 80104d2:	4688      	mov	r8, r1
 80104d4:	4614      	mov	r4, r2
 80104d6:	2600      	movs	r6, #0
 80104d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80104dc:	f1b9 0901 	subs.w	r9, r9, #1
 80104e0:	d505      	bpl.n	80104ee <_fwalk_sglue+0x22>
 80104e2:	6824      	ldr	r4, [r4, #0]
 80104e4:	2c00      	cmp	r4, #0
 80104e6:	d1f7      	bne.n	80104d8 <_fwalk_sglue+0xc>
 80104e8:	4630      	mov	r0, r6
 80104ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80104ee:	89ab      	ldrh	r3, [r5, #12]
 80104f0:	2b01      	cmp	r3, #1
 80104f2:	d907      	bls.n	8010504 <_fwalk_sglue+0x38>
 80104f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80104f8:	3301      	adds	r3, #1
 80104fa:	d003      	beq.n	8010504 <_fwalk_sglue+0x38>
 80104fc:	4629      	mov	r1, r5
 80104fe:	4638      	mov	r0, r7
 8010500:	47c0      	blx	r8
 8010502:	4306      	orrs	r6, r0
 8010504:	3568      	adds	r5, #104	@ 0x68
 8010506:	e7e9      	b.n	80104dc <_fwalk_sglue+0x10>

08010508 <siprintf>:
 8010508:	b40e      	push	{r1, r2, r3}
 801050a:	b500      	push	{lr}
 801050c:	b09c      	sub	sp, #112	@ 0x70
 801050e:	ab1d      	add	r3, sp, #116	@ 0x74
 8010510:	9002      	str	r0, [sp, #8]
 8010512:	9006      	str	r0, [sp, #24]
 8010514:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010518:	4809      	ldr	r0, [pc, #36]	@ (8010540 <siprintf+0x38>)
 801051a:	9107      	str	r1, [sp, #28]
 801051c:	9104      	str	r1, [sp, #16]
 801051e:	4909      	ldr	r1, [pc, #36]	@ (8010544 <siprintf+0x3c>)
 8010520:	f853 2b04 	ldr.w	r2, [r3], #4
 8010524:	9105      	str	r1, [sp, #20]
 8010526:	6800      	ldr	r0, [r0, #0]
 8010528:	9301      	str	r3, [sp, #4]
 801052a:	a902      	add	r1, sp, #8
 801052c:	f002 fbb6 	bl	8012c9c <_svfiprintf_r>
 8010530:	9b02      	ldr	r3, [sp, #8]
 8010532:	2200      	movs	r2, #0
 8010534:	701a      	strb	r2, [r3, #0]
 8010536:	b01c      	add	sp, #112	@ 0x70
 8010538:	f85d eb04 	ldr.w	lr, [sp], #4
 801053c:	b003      	add	sp, #12
 801053e:	4770      	bx	lr
 8010540:	20000190 	.word	0x20000190
 8010544:	ffff0208 	.word	0xffff0208

08010548 <__sread>:
 8010548:	b510      	push	{r4, lr}
 801054a:	460c      	mov	r4, r1
 801054c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010550:	f000 f86c 	bl	801062c <_read_r>
 8010554:	2800      	cmp	r0, #0
 8010556:	bfab      	itete	ge
 8010558:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801055a:	89a3      	ldrhlt	r3, [r4, #12]
 801055c:	181b      	addge	r3, r3, r0
 801055e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010562:	bfac      	ite	ge
 8010564:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010566:	81a3      	strhlt	r3, [r4, #12]
 8010568:	bd10      	pop	{r4, pc}

0801056a <__swrite>:
 801056a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801056e:	461f      	mov	r7, r3
 8010570:	898b      	ldrh	r3, [r1, #12]
 8010572:	05db      	lsls	r3, r3, #23
 8010574:	4605      	mov	r5, r0
 8010576:	460c      	mov	r4, r1
 8010578:	4616      	mov	r6, r2
 801057a:	d505      	bpl.n	8010588 <__swrite+0x1e>
 801057c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010580:	2302      	movs	r3, #2
 8010582:	2200      	movs	r2, #0
 8010584:	f000 f840 	bl	8010608 <_lseek_r>
 8010588:	89a3      	ldrh	r3, [r4, #12]
 801058a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801058e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010592:	81a3      	strh	r3, [r4, #12]
 8010594:	4632      	mov	r2, r6
 8010596:	463b      	mov	r3, r7
 8010598:	4628      	mov	r0, r5
 801059a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801059e:	f000 b857 	b.w	8010650 <_write_r>

080105a2 <__sseek>:
 80105a2:	b510      	push	{r4, lr}
 80105a4:	460c      	mov	r4, r1
 80105a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80105aa:	f000 f82d 	bl	8010608 <_lseek_r>
 80105ae:	1c43      	adds	r3, r0, #1
 80105b0:	89a3      	ldrh	r3, [r4, #12]
 80105b2:	bf15      	itete	ne
 80105b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80105b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80105ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80105be:	81a3      	strheq	r3, [r4, #12]
 80105c0:	bf18      	it	ne
 80105c2:	81a3      	strhne	r3, [r4, #12]
 80105c4:	bd10      	pop	{r4, pc}

080105c6 <__sclose>:
 80105c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80105ca:	f000 b80d 	b.w	80105e8 <_close_r>

080105ce <memset>:
 80105ce:	4402      	add	r2, r0
 80105d0:	4603      	mov	r3, r0
 80105d2:	4293      	cmp	r3, r2
 80105d4:	d100      	bne.n	80105d8 <memset+0xa>
 80105d6:	4770      	bx	lr
 80105d8:	f803 1b01 	strb.w	r1, [r3], #1
 80105dc:	e7f9      	b.n	80105d2 <memset+0x4>
	...

080105e0 <_localeconv_r>:
 80105e0:	4800      	ldr	r0, [pc, #0]	@ (80105e4 <_localeconv_r+0x4>)
 80105e2:	4770      	bx	lr
 80105e4:	200002d0 	.word	0x200002d0

080105e8 <_close_r>:
 80105e8:	b538      	push	{r3, r4, r5, lr}
 80105ea:	4d06      	ldr	r5, [pc, #24]	@ (8010604 <_close_r+0x1c>)
 80105ec:	2300      	movs	r3, #0
 80105ee:	4604      	mov	r4, r0
 80105f0:	4608      	mov	r0, r1
 80105f2:	602b      	str	r3, [r5, #0]
 80105f4:	f7f2 f89e 	bl	8002734 <_close>
 80105f8:	1c43      	adds	r3, r0, #1
 80105fa:	d102      	bne.n	8010602 <_close_r+0x1a>
 80105fc:	682b      	ldr	r3, [r5, #0]
 80105fe:	b103      	cbz	r3, 8010602 <_close_r+0x1a>
 8010600:	6023      	str	r3, [r4, #0]
 8010602:	bd38      	pop	{r3, r4, r5, pc}
 8010604:	20004230 	.word	0x20004230

08010608 <_lseek_r>:
 8010608:	b538      	push	{r3, r4, r5, lr}
 801060a:	4d07      	ldr	r5, [pc, #28]	@ (8010628 <_lseek_r+0x20>)
 801060c:	4604      	mov	r4, r0
 801060e:	4608      	mov	r0, r1
 8010610:	4611      	mov	r1, r2
 8010612:	2200      	movs	r2, #0
 8010614:	602a      	str	r2, [r5, #0]
 8010616:	461a      	mov	r2, r3
 8010618:	f7f2 f8b3 	bl	8002782 <_lseek>
 801061c:	1c43      	adds	r3, r0, #1
 801061e:	d102      	bne.n	8010626 <_lseek_r+0x1e>
 8010620:	682b      	ldr	r3, [r5, #0]
 8010622:	b103      	cbz	r3, 8010626 <_lseek_r+0x1e>
 8010624:	6023      	str	r3, [r4, #0]
 8010626:	bd38      	pop	{r3, r4, r5, pc}
 8010628:	20004230 	.word	0x20004230

0801062c <_read_r>:
 801062c:	b538      	push	{r3, r4, r5, lr}
 801062e:	4d07      	ldr	r5, [pc, #28]	@ (801064c <_read_r+0x20>)
 8010630:	4604      	mov	r4, r0
 8010632:	4608      	mov	r0, r1
 8010634:	4611      	mov	r1, r2
 8010636:	2200      	movs	r2, #0
 8010638:	602a      	str	r2, [r5, #0]
 801063a:	461a      	mov	r2, r3
 801063c:	f7f2 f841 	bl	80026c2 <_read>
 8010640:	1c43      	adds	r3, r0, #1
 8010642:	d102      	bne.n	801064a <_read_r+0x1e>
 8010644:	682b      	ldr	r3, [r5, #0]
 8010646:	b103      	cbz	r3, 801064a <_read_r+0x1e>
 8010648:	6023      	str	r3, [r4, #0]
 801064a:	bd38      	pop	{r3, r4, r5, pc}
 801064c:	20004230 	.word	0x20004230

08010650 <_write_r>:
 8010650:	b538      	push	{r3, r4, r5, lr}
 8010652:	4d07      	ldr	r5, [pc, #28]	@ (8010670 <_write_r+0x20>)
 8010654:	4604      	mov	r4, r0
 8010656:	4608      	mov	r0, r1
 8010658:	4611      	mov	r1, r2
 801065a:	2200      	movs	r2, #0
 801065c:	602a      	str	r2, [r5, #0]
 801065e:	461a      	mov	r2, r3
 8010660:	f7f2 f84c 	bl	80026fc <_write>
 8010664:	1c43      	adds	r3, r0, #1
 8010666:	d102      	bne.n	801066e <_write_r+0x1e>
 8010668:	682b      	ldr	r3, [r5, #0]
 801066a:	b103      	cbz	r3, 801066e <_write_r+0x1e>
 801066c:	6023      	str	r3, [r4, #0]
 801066e:	bd38      	pop	{r3, r4, r5, pc}
 8010670:	20004230 	.word	0x20004230

08010674 <__errno>:
 8010674:	4b01      	ldr	r3, [pc, #4]	@ (801067c <__errno+0x8>)
 8010676:	6818      	ldr	r0, [r3, #0]
 8010678:	4770      	bx	lr
 801067a:	bf00      	nop
 801067c:	20000190 	.word	0x20000190

08010680 <__libc_init_array>:
 8010680:	b570      	push	{r4, r5, r6, lr}
 8010682:	4d0d      	ldr	r5, [pc, #52]	@ (80106b8 <__libc_init_array+0x38>)
 8010684:	4c0d      	ldr	r4, [pc, #52]	@ (80106bc <__libc_init_array+0x3c>)
 8010686:	1b64      	subs	r4, r4, r5
 8010688:	10a4      	asrs	r4, r4, #2
 801068a:	2600      	movs	r6, #0
 801068c:	42a6      	cmp	r6, r4
 801068e:	d109      	bne.n	80106a4 <__libc_init_array+0x24>
 8010690:	4d0b      	ldr	r5, [pc, #44]	@ (80106c0 <__libc_init_array+0x40>)
 8010692:	4c0c      	ldr	r4, [pc, #48]	@ (80106c4 <__libc_init_array+0x44>)
 8010694:	f004 f8f0 	bl	8014878 <_init>
 8010698:	1b64      	subs	r4, r4, r5
 801069a:	10a4      	asrs	r4, r4, #2
 801069c:	2600      	movs	r6, #0
 801069e:	42a6      	cmp	r6, r4
 80106a0:	d105      	bne.n	80106ae <__libc_init_array+0x2e>
 80106a2:	bd70      	pop	{r4, r5, r6, pc}
 80106a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80106a8:	4798      	blx	r3
 80106aa:	3601      	adds	r6, #1
 80106ac:	e7ee      	b.n	801068c <__libc_init_array+0xc>
 80106ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80106b2:	4798      	blx	r3
 80106b4:	3601      	adds	r6, #1
 80106b6:	e7f2      	b.n	801069e <__libc_init_array+0x1e>
 80106b8:	08015110 	.word	0x08015110
 80106bc:	08015110 	.word	0x08015110
 80106c0:	08015110 	.word	0x08015110
 80106c4:	08015114 	.word	0x08015114

080106c8 <__retarget_lock_init_recursive>:
 80106c8:	4770      	bx	lr

080106ca <__retarget_lock_acquire_recursive>:
 80106ca:	4770      	bx	lr

080106cc <__retarget_lock_release_recursive>:
 80106cc:	4770      	bx	lr
	...

080106d0 <nanf>:
 80106d0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80106d8 <nanf+0x8>
 80106d4:	4770      	bx	lr
 80106d6:	bf00      	nop
 80106d8:	7fc00000 	.word	0x7fc00000

080106dc <quorem>:
 80106dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106e0:	6903      	ldr	r3, [r0, #16]
 80106e2:	690c      	ldr	r4, [r1, #16]
 80106e4:	42a3      	cmp	r3, r4
 80106e6:	4607      	mov	r7, r0
 80106e8:	db7e      	blt.n	80107e8 <quorem+0x10c>
 80106ea:	3c01      	subs	r4, #1
 80106ec:	f101 0814 	add.w	r8, r1, #20
 80106f0:	00a3      	lsls	r3, r4, #2
 80106f2:	f100 0514 	add.w	r5, r0, #20
 80106f6:	9300      	str	r3, [sp, #0]
 80106f8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80106fc:	9301      	str	r3, [sp, #4]
 80106fe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010702:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010706:	3301      	adds	r3, #1
 8010708:	429a      	cmp	r2, r3
 801070a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801070e:	fbb2 f6f3 	udiv	r6, r2, r3
 8010712:	d32e      	bcc.n	8010772 <quorem+0x96>
 8010714:	f04f 0a00 	mov.w	sl, #0
 8010718:	46c4      	mov	ip, r8
 801071a:	46ae      	mov	lr, r5
 801071c:	46d3      	mov	fp, sl
 801071e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010722:	b298      	uxth	r0, r3
 8010724:	fb06 a000 	mla	r0, r6, r0, sl
 8010728:	0c02      	lsrs	r2, r0, #16
 801072a:	0c1b      	lsrs	r3, r3, #16
 801072c:	fb06 2303 	mla	r3, r6, r3, r2
 8010730:	f8de 2000 	ldr.w	r2, [lr]
 8010734:	b280      	uxth	r0, r0
 8010736:	b292      	uxth	r2, r2
 8010738:	1a12      	subs	r2, r2, r0
 801073a:	445a      	add	r2, fp
 801073c:	f8de 0000 	ldr.w	r0, [lr]
 8010740:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010744:	b29b      	uxth	r3, r3
 8010746:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801074a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801074e:	b292      	uxth	r2, r2
 8010750:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8010754:	45e1      	cmp	r9, ip
 8010756:	f84e 2b04 	str.w	r2, [lr], #4
 801075a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801075e:	d2de      	bcs.n	801071e <quorem+0x42>
 8010760:	9b00      	ldr	r3, [sp, #0]
 8010762:	58eb      	ldr	r3, [r5, r3]
 8010764:	b92b      	cbnz	r3, 8010772 <quorem+0x96>
 8010766:	9b01      	ldr	r3, [sp, #4]
 8010768:	3b04      	subs	r3, #4
 801076a:	429d      	cmp	r5, r3
 801076c:	461a      	mov	r2, r3
 801076e:	d32f      	bcc.n	80107d0 <quorem+0xf4>
 8010770:	613c      	str	r4, [r7, #16]
 8010772:	4638      	mov	r0, r7
 8010774:	f001 f9c4 	bl	8011b00 <__mcmp>
 8010778:	2800      	cmp	r0, #0
 801077a:	db25      	blt.n	80107c8 <quorem+0xec>
 801077c:	4629      	mov	r1, r5
 801077e:	2000      	movs	r0, #0
 8010780:	f858 2b04 	ldr.w	r2, [r8], #4
 8010784:	f8d1 c000 	ldr.w	ip, [r1]
 8010788:	fa1f fe82 	uxth.w	lr, r2
 801078c:	fa1f f38c 	uxth.w	r3, ip
 8010790:	eba3 030e 	sub.w	r3, r3, lr
 8010794:	4403      	add	r3, r0
 8010796:	0c12      	lsrs	r2, r2, #16
 8010798:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801079c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80107a0:	b29b      	uxth	r3, r3
 80107a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80107a6:	45c1      	cmp	r9, r8
 80107a8:	f841 3b04 	str.w	r3, [r1], #4
 80107ac:	ea4f 4022 	mov.w	r0, r2, asr #16
 80107b0:	d2e6      	bcs.n	8010780 <quorem+0xa4>
 80107b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80107b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80107ba:	b922      	cbnz	r2, 80107c6 <quorem+0xea>
 80107bc:	3b04      	subs	r3, #4
 80107be:	429d      	cmp	r5, r3
 80107c0:	461a      	mov	r2, r3
 80107c2:	d30b      	bcc.n	80107dc <quorem+0x100>
 80107c4:	613c      	str	r4, [r7, #16]
 80107c6:	3601      	adds	r6, #1
 80107c8:	4630      	mov	r0, r6
 80107ca:	b003      	add	sp, #12
 80107cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107d0:	6812      	ldr	r2, [r2, #0]
 80107d2:	3b04      	subs	r3, #4
 80107d4:	2a00      	cmp	r2, #0
 80107d6:	d1cb      	bne.n	8010770 <quorem+0x94>
 80107d8:	3c01      	subs	r4, #1
 80107da:	e7c6      	b.n	801076a <quorem+0x8e>
 80107dc:	6812      	ldr	r2, [r2, #0]
 80107de:	3b04      	subs	r3, #4
 80107e0:	2a00      	cmp	r2, #0
 80107e2:	d1ef      	bne.n	80107c4 <quorem+0xe8>
 80107e4:	3c01      	subs	r4, #1
 80107e6:	e7ea      	b.n	80107be <quorem+0xe2>
 80107e8:	2000      	movs	r0, #0
 80107ea:	e7ee      	b.n	80107ca <quorem+0xee>
 80107ec:	0000      	movs	r0, r0
	...

080107f0 <_dtoa_r>:
 80107f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107f4:	69c7      	ldr	r7, [r0, #28]
 80107f6:	b099      	sub	sp, #100	@ 0x64
 80107f8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80107fc:	ec55 4b10 	vmov	r4, r5, d0
 8010800:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8010802:	9109      	str	r1, [sp, #36]	@ 0x24
 8010804:	4683      	mov	fp, r0
 8010806:	920e      	str	r2, [sp, #56]	@ 0x38
 8010808:	9313      	str	r3, [sp, #76]	@ 0x4c
 801080a:	b97f      	cbnz	r7, 801082c <_dtoa_r+0x3c>
 801080c:	2010      	movs	r0, #16
 801080e:	f000 fdfd 	bl	801140c <malloc>
 8010812:	4602      	mov	r2, r0
 8010814:	f8cb 001c 	str.w	r0, [fp, #28]
 8010818:	b920      	cbnz	r0, 8010824 <_dtoa_r+0x34>
 801081a:	4ba7      	ldr	r3, [pc, #668]	@ (8010ab8 <_dtoa_r+0x2c8>)
 801081c:	21ef      	movs	r1, #239	@ 0xef
 801081e:	48a7      	ldr	r0, [pc, #668]	@ (8010abc <_dtoa_r+0x2cc>)
 8010820:	f002 fc36 	bl	8013090 <__assert_func>
 8010824:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010828:	6007      	str	r7, [r0, #0]
 801082a:	60c7      	str	r7, [r0, #12]
 801082c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010830:	6819      	ldr	r1, [r3, #0]
 8010832:	b159      	cbz	r1, 801084c <_dtoa_r+0x5c>
 8010834:	685a      	ldr	r2, [r3, #4]
 8010836:	604a      	str	r2, [r1, #4]
 8010838:	2301      	movs	r3, #1
 801083a:	4093      	lsls	r3, r2
 801083c:	608b      	str	r3, [r1, #8]
 801083e:	4658      	mov	r0, fp
 8010840:	f000 feda 	bl	80115f8 <_Bfree>
 8010844:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010848:	2200      	movs	r2, #0
 801084a:	601a      	str	r2, [r3, #0]
 801084c:	1e2b      	subs	r3, r5, #0
 801084e:	bfb9      	ittee	lt
 8010850:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8010854:	9303      	strlt	r3, [sp, #12]
 8010856:	2300      	movge	r3, #0
 8010858:	6033      	strge	r3, [r6, #0]
 801085a:	9f03      	ldr	r7, [sp, #12]
 801085c:	4b98      	ldr	r3, [pc, #608]	@ (8010ac0 <_dtoa_r+0x2d0>)
 801085e:	bfbc      	itt	lt
 8010860:	2201      	movlt	r2, #1
 8010862:	6032      	strlt	r2, [r6, #0]
 8010864:	43bb      	bics	r3, r7
 8010866:	d112      	bne.n	801088e <_dtoa_r+0x9e>
 8010868:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801086a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801086e:	6013      	str	r3, [r2, #0]
 8010870:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010874:	4323      	orrs	r3, r4
 8010876:	f000 854d 	beq.w	8011314 <_dtoa_r+0xb24>
 801087a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801087c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8010ad4 <_dtoa_r+0x2e4>
 8010880:	2b00      	cmp	r3, #0
 8010882:	f000 854f 	beq.w	8011324 <_dtoa_r+0xb34>
 8010886:	f10a 0303 	add.w	r3, sl, #3
 801088a:	f000 bd49 	b.w	8011320 <_dtoa_r+0xb30>
 801088e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010892:	2200      	movs	r2, #0
 8010894:	ec51 0b17 	vmov	r0, r1, d7
 8010898:	2300      	movs	r3, #0
 801089a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801089e:	f7f0 f93b 	bl	8000b18 <__aeabi_dcmpeq>
 80108a2:	4680      	mov	r8, r0
 80108a4:	b158      	cbz	r0, 80108be <_dtoa_r+0xce>
 80108a6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80108a8:	2301      	movs	r3, #1
 80108aa:	6013      	str	r3, [r2, #0]
 80108ac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80108ae:	b113      	cbz	r3, 80108b6 <_dtoa_r+0xc6>
 80108b0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80108b2:	4b84      	ldr	r3, [pc, #528]	@ (8010ac4 <_dtoa_r+0x2d4>)
 80108b4:	6013      	str	r3, [r2, #0]
 80108b6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8010ad8 <_dtoa_r+0x2e8>
 80108ba:	f000 bd33 	b.w	8011324 <_dtoa_r+0xb34>
 80108be:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80108c2:	aa16      	add	r2, sp, #88	@ 0x58
 80108c4:	a917      	add	r1, sp, #92	@ 0x5c
 80108c6:	4658      	mov	r0, fp
 80108c8:	f001 fa3a 	bl	8011d40 <__d2b>
 80108cc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80108d0:	4681      	mov	r9, r0
 80108d2:	2e00      	cmp	r6, #0
 80108d4:	d077      	beq.n	80109c6 <_dtoa_r+0x1d6>
 80108d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80108d8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80108dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80108e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80108e4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80108e8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80108ec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80108f0:	4619      	mov	r1, r3
 80108f2:	2200      	movs	r2, #0
 80108f4:	4b74      	ldr	r3, [pc, #464]	@ (8010ac8 <_dtoa_r+0x2d8>)
 80108f6:	f7ef fcef 	bl	80002d8 <__aeabi_dsub>
 80108fa:	a369      	add	r3, pc, #420	@ (adr r3, 8010aa0 <_dtoa_r+0x2b0>)
 80108fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010900:	f7ef fea2 	bl	8000648 <__aeabi_dmul>
 8010904:	a368      	add	r3, pc, #416	@ (adr r3, 8010aa8 <_dtoa_r+0x2b8>)
 8010906:	e9d3 2300 	ldrd	r2, r3, [r3]
 801090a:	f7ef fce7 	bl	80002dc <__adddf3>
 801090e:	4604      	mov	r4, r0
 8010910:	4630      	mov	r0, r6
 8010912:	460d      	mov	r5, r1
 8010914:	f7ef fe2e 	bl	8000574 <__aeabi_i2d>
 8010918:	a365      	add	r3, pc, #404	@ (adr r3, 8010ab0 <_dtoa_r+0x2c0>)
 801091a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801091e:	f7ef fe93 	bl	8000648 <__aeabi_dmul>
 8010922:	4602      	mov	r2, r0
 8010924:	460b      	mov	r3, r1
 8010926:	4620      	mov	r0, r4
 8010928:	4629      	mov	r1, r5
 801092a:	f7ef fcd7 	bl	80002dc <__adddf3>
 801092e:	4604      	mov	r4, r0
 8010930:	460d      	mov	r5, r1
 8010932:	f7f0 f939 	bl	8000ba8 <__aeabi_d2iz>
 8010936:	2200      	movs	r2, #0
 8010938:	4607      	mov	r7, r0
 801093a:	2300      	movs	r3, #0
 801093c:	4620      	mov	r0, r4
 801093e:	4629      	mov	r1, r5
 8010940:	f7f0 f8f4 	bl	8000b2c <__aeabi_dcmplt>
 8010944:	b140      	cbz	r0, 8010958 <_dtoa_r+0x168>
 8010946:	4638      	mov	r0, r7
 8010948:	f7ef fe14 	bl	8000574 <__aeabi_i2d>
 801094c:	4622      	mov	r2, r4
 801094e:	462b      	mov	r3, r5
 8010950:	f7f0 f8e2 	bl	8000b18 <__aeabi_dcmpeq>
 8010954:	b900      	cbnz	r0, 8010958 <_dtoa_r+0x168>
 8010956:	3f01      	subs	r7, #1
 8010958:	2f16      	cmp	r7, #22
 801095a:	d851      	bhi.n	8010a00 <_dtoa_r+0x210>
 801095c:	4b5b      	ldr	r3, [pc, #364]	@ (8010acc <_dtoa_r+0x2dc>)
 801095e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010966:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801096a:	f7f0 f8df 	bl	8000b2c <__aeabi_dcmplt>
 801096e:	2800      	cmp	r0, #0
 8010970:	d048      	beq.n	8010a04 <_dtoa_r+0x214>
 8010972:	3f01      	subs	r7, #1
 8010974:	2300      	movs	r3, #0
 8010976:	9312      	str	r3, [sp, #72]	@ 0x48
 8010978:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801097a:	1b9b      	subs	r3, r3, r6
 801097c:	1e5a      	subs	r2, r3, #1
 801097e:	bf44      	itt	mi
 8010980:	f1c3 0801 	rsbmi	r8, r3, #1
 8010984:	2300      	movmi	r3, #0
 8010986:	9208      	str	r2, [sp, #32]
 8010988:	bf54      	ite	pl
 801098a:	f04f 0800 	movpl.w	r8, #0
 801098e:	9308      	strmi	r3, [sp, #32]
 8010990:	2f00      	cmp	r7, #0
 8010992:	db39      	blt.n	8010a08 <_dtoa_r+0x218>
 8010994:	9b08      	ldr	r3, [sp, #32]
 8010996:	970f      	str	r7, [sp, #60]	@ 0x3c
 8010998:	443b      	add	r3, r7
 801099a:	9308      	str	r3, [sp, #32]
 801099c:	2300      	movs	r3, #0
 801099e:	930a      	str	r3, [sp, #40]	@ 0x28
 80109a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80109a2:	2b09      	cmp	r3, #9
 80109a4:	d864      	bhi.n	8010a70 <_dtoa_r+0x280>
 80109a6:	2b05      	cmp	r3, #5
 80109a8:	bfc4      	itt	gt
 80109aa:	3b04      	subgt	r3, #4
 80109ac:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80109ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80109b0:	f1a3 0302 	sub.w	r3, r3, #2
 80109b4:	bfcc      	ite	gt
 80109b6:	2400      	movgt	r4, #0
 80109b8:	2401      	movle	r4, #1
 80109ba:	2b03      	cmp	r3, #3
 80109bc:	d863      	bhi.n	8010a86 <_dtoa_r+0x296>
 80109be:	e8df f003 	tbb	[pc, r3]
 80109c2:	372a      	.short	0x372a
 80109c4:	5535      	.short	0x5535
 80109c6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80109ca:	441e      	add	r6, r3
 80109cc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80109d0:	2b20      	cmp	r3, #32
 80109d2:	bfc1      	itttt	gt
 80109d4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80109d8:	409f      	lslgt	r7, r3
 80109da:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80109de:	fa24 f303 	lsrgt.w	r3, r4, r3
 80109e2:	bfd6      	itet	le
 80109e4:	f1c3 0320 	rsble	r3, r3, #32
 80109e8:	ea47 0003 	orrgt.w	r0, r7, r3
 80109ec:	fa04 f003 	lslle.w	r0, r4, r3
 80109f0:	f7ef fdb0 	bl	8000554 <__aeabi_ui2d>
 80109f4:	2201      	movs	r2, #1
 80109f6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80109fa:	3e01      	subs	r6, #1
 80109fc:	9214      	str	r2, [sp, #80]	@ 0x50
 80109fe:	e777      	b.n	80108f0 <_dtoa_r+0x100>
 8010a00:	2301      	movs	r3, #1
 8010a02:	e7b8      	b.n	8010976 <_dtoa_r+0x186>
 8010a04:	9012      	str	r0, [sp, #72]	@ 0x48
 8010a06:	e7b7      	b.n	8010978 <_dtoa_r+0x188>
 8010a08:	427b      	negs	r3, r7
 8010a0a:	930a      	str	r3, [sp, #40]	@ 0x28
 8010a0c:	2300      	movs	r3, #0
 8010a0e:	eba8 0807 	sub.w	r8, r8, r7
 8010a12:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010a14:	e7c4      	b.n	80109a0 <_dtoa_r+0x1b0>
 8010a16:	2300      	movs	r3, #0
 8010a18:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010a1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	dc35      	bgt.n	8010a8c <_dtoa_r+0x29c>
 8010a20:	2301      	movs	r3, #1
 8010a22:	9300      	str	r3, [sp, #0]
 8010a24:	9307      	str	r3, [sp, #28]
 8010a26:	461a      	mov	r2, r3
 8010a28:	920e      	str	r2, [sp, #56]	@ 0x38
 8010a2a:	e00b      	b.n	8010a44 <_dtoa_r+0x254>
 8010a2c:	2301      	movs	r3, #1
 8010a2e:	e7f3      	b.n	8010a18 <_dtoa_r+0x228>
 8010a30:	2300      	movs	r3, #0
 8010a32:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010a34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010a36:	18fb      	adds	r3, r7, r3
 8010a38:	9300      	str	r3, [sp, #0]
 8010a3a:	3301      	adds	r3, #1
 8010a3c:	2b01      	cmp	r3, #1
 8010a3e:	9307      	str	r3, [sp, #28]
 8010a40:	bfb8      	it	lt
 8010a42:	2301      	movlt	r3, #1
 8010a44:	f8db 001c 	ldr.w	r0, [fp, #28]
 8010a48:	2100      	movs	r1, #0
 8010a4a:	2204      	movs	r2, #4
 8010a4c:	f102 0514 	add.w	r5, r2, #20
 8010a50:	429d      	cmp	r5, r3
 8010a52:	d91f      	bls.n	8010a94 <_dtoa_r+0x2a4>
 8010a54:	6041      	str	r1, [r0, #4]
 8010a56:	4658      	mov	r0, fp
 8010a58:	f000 fd8e 	bl	8011578 <_Balloc>
 8010a5c:	4682      	mov	sl, r0
 8010a5e:	2800      	cmp	r0, #0
 8010a60:	d13c      	bne.n	8010adc <_dtoa_r+0x2ec>
 8010a62:	4b1b      	ldr	r3, [pc, #108]	@ (8010ad0 <_dtoa_r+0x2e0>)
 8010a64:	4602      	mov	r2, r0
 8010a66:	f240 11af 	movw	r1, #431	@ 0x1af
 8010a6a:	e6d8      	b.n	801081e <_dtoa_r+0x2e>
 8010a6c:	2301      	movs	r3, #1
 8010a6e:	e7e0      	b.n	8010a32 <_dtoa_r+0x242>
 8010a70:	2401      	movs	r4, #1
 8010a72:	2300      	movs	r3, #0
 8010a74:	9309      	str	r3, [sp, #36]	@ 0x24
 8010a76:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010a78:	f04f 33ff 	mov.w	r3, #4294967295
 8010a7c:	9300      	str	r3, [sp, #0]
 8010a7e:	9307      	str	r3, [sp, #28]
 8010a80:	2200      	movs	r2, #0
 8010a82:	2312      	movs	r3, #18
 8010a84:	e7d0      	b.n	8010a28 <_dtoa_r+0x238>
 8010a86:	2301      	movs	r3, #1
 8010a88:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010a8a:	e7f5      	b.n	8010a78 <_dtoa_r+0x288>
 8010a8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010a8e:	9300      	str	r3, [sp, #0]
 8010a90:	9307      	str	r3, [sp, #28]
 8010a92:	e7d7      	b.n	8010a44 <_dtoa_r+0x254>
 8010a94:	3101      	adds	r1, #1
 8010a96:	0052      	lsls	r2, r2, #1
 8010a98:	e7d8      	b.n	8010a4c <_dtoa_r+0x25c>
 8010a9a:	bf00      	nop
 8010a9c:	f3af 8000 	nop.w
 8010aa0:	636f4361 	.word	0x636f4361
 8010aa4:	3fd287a7 	.word	0x3fd287a7
 8010aa8:	8b60c8b3 	.word	0x8b60c8b3
 8010aac:	3fc68a28 	.word	0x3fc68a28
 8010ab0:	509f79fb 	.word	0x509f79fb
 8010ab4:	3fd34413 	.word	0x3fd34413
 8010ab8:	08014952 	.word	0x08014952
 8010abc:	08014969 	.word	0x08014969
 8010ac0:	7ff00000 	.word	0x7ff00000
 8010ac4:	0801491d 	.word	0x0801491d
 8010ac8:	3ff80000 	.word	0x3ff80000
 8010acc:	08014a60 	.word	0x08014a60
 8010ad0:	080149c1 	.word	0x080149c1
 8010ad4:	0801494e 	.word	0x0801494e
 8010ad8:	0801491c 	.word	0x0801491c
 8010adc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010ae0:	6018      	str	r0, [r3, #0]
 8010ae2:	9b07      	ldr	r3, [sp, #28]
 8010ae4:	2b0e      	cmp	r3, #14
 8010ae6:	f200 80a4 	bhi.w	8010c32 <_dtoa_r+0x442>
 8010aea:	2c00      	cmp	r4, #0
 8010aec:	f000 80a1 	beq.w	8010c32 <_dtoa_r+0x442>
 8010af0:	2f00      	cmp	r7, #0
 8010af2:	dd33      	ble.n	8010b5c <_dtoa_r+0x36c>
 8010af4:	4bad      	ldr	r3, [pc, #692]	@ (8010dac <_dtoa_r+0x5bc>)
 8010af6:	f007 020f 	and.w	r2, r7, #15
 8010afa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010afe:	ed93 7b00 	vldr	d7, [r3]
 8010b02:	05f8      	lsls	r0, r7, #23
 8010b04:	ed8d 7b04 	vstr	d7, [sp, #16]
 8010b08:	ea4f 1427 	mov.w	r4, r7, asr #4
 8010b0c:	d516      	bpl.n	8010b3c <_dtoa_r+0x34c>
 8010b0e:	4ba8      	ldr	r3, [pc, #672]	@ (8010db0 <_dtoa_r+0x5c0>)
 8010b10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010b14:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010b18:	f7ef fec0 	bl	800089c <__aeabi_ddiv>
 8010b1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010b20:	f004 040f 	and.w	r4, r4, #15
 8010b24:	2603      	movs	r6, #3
 8010b26:	4da2      	ldr	r5, [pc, #648]	@ (8010db0 <_dtoa_r+0x5c0>)
 8010b28:	b954      	cbnz	r4, 8010b40 <_dtoa_r+0x350>
 8010b2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010b2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010b32:	f7ef feb3 	bl	800089c <__aeabi_ddiv>
 8010b36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010b3a:	e028      	b.n	8010b8e <_dtoa_r+0x39e>
 8010b3c:	2602      	movs	r6, #2
 8010b3e:	e7f2      	b.n	8010b26 <_dtoa_r+0x336>
 8010b40:	07e1      	lsls	r1, r4, #31
 8010b42:	d508      	bpl.n	8010b56 <_dtoa_r+0x366>
 8010b44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010b48:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010b4c:	f7ef fd7c 	bl	8000648 <__aeabi_dmul>
 8010b50:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010b54:	3601      	adds	r6, #1
 8010b56:	1064      	asrs	r4, r4, #1
 8010b58:	3508      	adds	r5, #8
 8010b5a:	e7e5      	b.n	8010b28 <_dtoa_r+0x338>
 8010b5c:	f000 80d2 	beq.w	8010d04 <_dtoa_r+0x514>
 8010b60:	427c      	negs	r4, r7
 8010b62:	4b92      	ldr	r3, [pc, #584]	@ (8010dac <_dtoa_r+0x5bc>)
 8010b64:	4d92      	ldr	r5, [pc, #584]	@ (8010db0 <_dtoa_r+0x5c0>)
 8010b66:	f004 020f 	and.w	r2, r4, #15
 8010b6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b72:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010b76:	f7ef fd67 	bl	8000648 <__aeabi_dmul>
 8010b7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010b7e:	1124      	asrs	r4, r4, #4
 8010b80:	2300      	movs	r3, #0
 8010b82:	2602      	movs	r6, #2
 8010b84:	2c00      	cmp	r4, #0
 8010b86:	f040 80b2 	bne.w	8010cee <_dtoa_r+0x4fe>
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d1d3      	bne.n	8010b36 <_dtoa_r+0x346>
 8010b8e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010b90:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	f000 80b7 	beq.w	8010d08 <_dtoa_r+0x518>
 8010b9a:	4b86      	ldr	r3, [pc, #536]	@ (8010db4 <_dtoa_r+0x5c4>)
 8010b9c:	2200      	movs	r2, #0
 8010b9e:	4620      	mov	r0, r4
 8010ba0:	4629      	mov	r1, r5
 8010ba2:	f7ef ffc3 	bl	8000b2c <__aeabi_dcmplt>
 8010ba6:	2800      	cmp	r0, #0
 8010ba8:	f000 80ae 	beq.w	8010d08 <_dtoa_r+0x518>
 8010bac:	9b07      	ldr	r3, [sp, #28]
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	f000 80aa 	beq.w	8010d08 <_dtoa_r+0x518>
 8010bb4:	9b00      	ldr	r3, [sp, #0]
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	dd37      	ble.n	8010c2a <_dtoa_r+0x43a>
 8010bba:	1e7b      	subs	r3, r7, #1
 8010bbc:	9304      	str	r3, [sp, #16]
 8010bbe:	4620      	mov	r0, r4
 8010bc0:	4b7d      	ldr	r3, [pc, #500]	@ (8010db8 <_dtoa_r+0x5c8>)
 8010bc2:	2200      	movs	r2, #0
 8010bc4:	4629      	mov	r1, r5
 8010bc6:	f7ef fd3f 	bl	8000648 <__aeabi_dmul>
 8010bca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010bce:	9c00      	ldr	r4, [sp, #0]
 8010bd0:	3601      	adds	r6, #1
 8010bd2:	4630      	mov	r0, r6
 8010bd4:	f7ef fcce 	bl	8000574 <__aeabi_i2d>
 8010bd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010bdc:	f7ef fd34 	bl	8000648 <__aeabi_dmul>
 8010be0:	4b76      	ldr	r3, [pc, #472]	@ (8010dbc <_dtoa_r+0x5cc>)
 8010be2:	2200      	movs	r2, #0
 8010be4:	f7ef fb7a 	bl	80002dc <__adddf3>
 8010be8:	4605      	mov	r5, r0
 8010bea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8010bee:	2c00      	cmp	r4, #0
 8010bf0:	f040 808d 	bne.w	8010d0e <_dtoa_r+0x51e>
 8010bf4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010bf8:	4b71      	ldr	r3, [pc, #452]	@ (8010dc0 <_dtoa_r+0x5d0>)
 8010bfa:	2200      	movs	r2, #0
 8010bfc:	f7ef fb6c 	bl	80002d8 <__aeabi_dsub>
 8010c00:	4602      	mov	r2, r0
 8010c02:	460b      	mov	r3, r1
 8010c04:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010c08:	462a      	mov	r2, r5
 8010c0a:	4633      	mov	r3, r6
 8010c0c:	f7ef ffac 	bl	8000b68 <__aeabi_dcmpgt>
 8010c10:	2800      	cmp	r0, #0
 8010c12:	f040 828b 	bne.w	801112c <_dtoa_r+0x93c>
 8010c16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010c1a:	462a      	mov	r2, r5
 8010c1c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8010c20:	f7ef ff84 	bl	8000b2c <__aeabi_dcmplt>
 8010c24:	2800      	cmp	r0, #0
 8010c26:	f040 8128 	bne.w	8010e7a <_dtoa_r+0x68a>
 8010c2a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8010c2e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8010c32:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	f2c0 815a 	blt.w	8010eee <_dtoa_r+0x6fe>
 8010c3a:	2f0e      	cmp	r7, #14
 8010c3c:	f300 8157 	bgt.w	8010eee <_dtoa_r+0x6fe>
 8010c40:	4b5a      	ldr	r3, [pc, #360]	@ (8010dac <_dtoa_r+0x5bc>)
 8010c42:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010c46:	ed93 7b00 	vldr	d7, [r3]
 8010c4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	ed8d 7b00 	vstr	d7, [sp]
 8010c52:	da03      	bge.n	8010c5c <_dtoa_r+0x46c>
 8010c54:	9b07      	ldr	r3, [sp, #28]
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	f340 8101 	ble.w	8010e5e <_dtoa_r+0x66e>
 8010c5c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010c60:	4656      	mov	r6, sl
 8010c62:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010c66:	4620      	mov	r0, r4
 8010c68:	4629      	mov	r1, r5
 8010c6a:	f7ef fe17 	bl	800089c <__aeabi_ddiv>
 8010c6e:	f7ef ff9b 	bl	8000ba8 <__aeabi_d2iz>
 8010c72:	4680      	mov	r8, r0
 8010c74:	f7ef fc7e 	bl	8000574 <__aeabi_i2d>
 8010c78:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010c7c:	f7ef fce4 	bl	8000648 <__aeabi_dmul>
 8010c80:	4602      	mov	r2, r0
 8010c82:	460b      	mov	r3, r1
 8010c84:	4620      	mov	r0, r4
 8010c86:	4629      	mov	r1, r5
 8010c88:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8010c8c:	f7ef fb24 	bl	80002d8 <__aeabi_dsub>
 8010c90:	f806 4b01 	strb.w	r4, [r6], #1
 8010c94:	9d07      	ldr	r5, [sp, #28]
 8010c96:	eba6 040a 	sub.w	r4, r6, sl
 8010c9a:	42a5      	cmp	r5, r4
 8010c9c:	4602      	mov	r2, r0
 8010c9e:	460b      	mov	r3, r1
 8010ca0:	f040 8117 	bne.w	8010ed2 <_dtoa_r+0x6e2>
 8010ca4:	f7ef fb1a 	bl	80002dc <__adddf3>
 8010ca8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010cac:	4604      	mov	r4, r0
 8010cae:	460d      	mov	r5, r1
 8010cb0:	f7ef ff5a 	bl	8000b68 <__aeabi_dcmpgt>
 8010cb4:	2800      	cmp	r0, #0
 8010cb6:	f040 80f9 	bne.w	8010eac <_dtoa_r+0x6bc>
 8010cba:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010cbe:	4620      	mov	r0, r4
 8010cc0:	4629      	mov	r1, r5
 8010cc2:	f7ef ff29 	bl	8000b18 <__aeabi_dcmpeq>
 8010cc6:	b118      	cbz	r0, 8010cd0 <_dtoa_r+0x4e0>
 8010cc8:	f018 0f01 	tst.w	r8, #1
 8010ccc:	f040 80ee 	bne.w	8010eac <_dtoa_r+0x6bc>
 8010cd0:	4649      	mov	r1, r9
 8010cd2:	4658      	mov	r0, fp
 8010cd4:	f000 fc90 	bl	80115f8 <_Bfree>
 8010cd8:	2300      	movs	r3, #0
 8010cda:	7033      	strb	r3, [r6, #0]
 8010cdc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010cde:	3701      	adds	r7, #1
 8010ce0:	601f      	str	r7, [r3, #0]
 8010ce2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	f000 831d 	beq.w	8011324 <_dtoa_r+0xb34>
 8010cea:	601e      	str	r6, [r3, #0]
 8010cec:	e31a      	b.n	8011324 <_dtoa_r+0xb34>
 8010cee:	07e2      	lsls	r2, r4, #31
 8010cf0:	d505      	bpl.n	8010cfe <_dtoa_r+0x50e>
 8010cf2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010cf6:	f7ef fca7 	bl	8000648 <__aeabi_dmul>
 8010cfa:	3601      	adds	r6, #1
 8010cfc:	2301      	movs	r3, #1
 8010cfe:	1064      	asrs	r4, r4, #1
 8010d00:	3508      	adds	r5, #8
 8010d02:	e73f      	b.n	8010b84 <_dtoa_r+0x394>
 8010d04:	2602      	movs	r6, #2
 8010d06:	e742      	b.n	8010b8e <_dtoa_r+0x39e>
 8010d08:	9c07      	ldr	r4, [sp, #28]
 8010d0a:	9704      	str	r7, [sp, #16]
 8010d0c:	e761      	b.n	8010bd2 <_dtoa_r+0x3e2>
 8010d0e:	4b27      	ldr	r3, [pc, #156]	@ (8010dac <_dtoa_r+0x5bc>)
 8010d10:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010d12:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010d16:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010d1a:	4454      	add	r4, sl
 8010d1c:	2900      	cmp	r1, #0
 8010d1e:	d053      	beq.n	8010dc8 <_dtoa_r+0x5d8>
 8010d20:	4928      	ldr	r1, [pc, #160]	@ (8010dc4 <_dtoa_r+0x5d4>)
 8010d22:	2000      	movs	r0, #0
 8010d24:	f7ef fdba 	bl	800089c <__aeabi_ddiv>
 8010d28:	4633      	mov	r3, r6
 8010d2a:	462a      	mov	r2, r5
 8010d2c:	f7ef fad4 	bl	80002d8 <__aeabi_dsub>
 8010d30:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010d34:	4656      	mov	r6, sl
 8010d36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010d3a:	f7ef ff35 	bl	8000ba8 <__aeabi_d2iz>
 8010d3e:	4605      	mov	r5, r0
 8010d40:	f7ef fc18 	bl	8000574 <__aeabi_i2d>
 8010d44:	4602      	mov	r2, r0
 8010d46:	460b      	mov	r3, r1
 8010d48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010d4c:	f7ef fac4 	bl	80002d8 <__aeabi_dsub>
 8010d50:	3530      	adds	r5, #48	@ 0x30
 8010d52:	4602      	mov	r2, r0
 8010d54:	460b      	mov	r3, r1
 8010d56:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010d5a:	f806 5b01 	strb.w	r5, [r6], #1
 8010d5e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010d62:	f7ef fee3 	bl	8000b2c <__aeabi_dcmplt>
 8010d66:	2800      	cmp	r0, #0
 8010d68:	d171      	bne.n	8010e4e <_dtoa_r+0x65e>
 8010d6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d6e:	4911      	ldr	r1, [pc, #68]	@ (8010db4 <_dtoa_r+0x5c4>)
 8010d70:	2000      	movs	r0, #0
 8010d72:	f7ef fab1 	bl	80002d8 <__aeabi_dsub>
 8010d76:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010d7a:	f7ef fed7 	bl	8000b2c <__aeabi_dcmplt>
 8010d7e:	2800      	cmp	r0, #0
 8010d80:	f040 8095 	bne.w	8010eae <_dtoa_r+0x6be>
 8010d84:	42a6      	cmp	r6, r4
 8010d86:	f43f af50 	beq.w	8010c2a <_dtoa_r+0x43a>
 8010d8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8010d8e:	4b0a      	ldr	r3, [pc, #40]	@ (8010db8 <_dtoa_r+0x5c8>)
 8010d90:	2200      	movs	r2, #0
 8010d92:	f7ef fc59 	bl	8000648 <__aeabi_dmul>
 8010d96:	4b08      	ldr	r3, [pc, #32]	@ (8010db8 <_dtoa_r+0x5c8>)
 8010d98:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010d9c:	2200      	movs	r2, #0
 8010d9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010da2:	f7ef fc51 	bl	8000648 <__aeabi_dmul>
 8010da6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010daa:	e7c4      	b.n	8010d36 <_dtoa_r+0x546>
 8010dac:	08014a60 	.word	0x08014a60
 8010db0:	08014a38 	.word	0x08014a38
 8010db4:	3ff00000 	.word	0x3ff00000
 8010db8:	40240000 	.word	0x40240000
 8010dbc:	401c0000 	.word	0x401c0000
 8010dc0:	40140000 	.word	0x40140000
 8010dc4:	3fe00000 	.word	0x3fe00000
 8010dc8:	4631      	mov	r1, r6
 8010dca:	4628      	mov	r0, r5
 8010dcc:	f7ef fc3c 	bl	8000648 <__aeabi_dmul>
 8010dd0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010dd4:	9415      	str	r4, [sp, #84]	@ 0x54
 8010dd6:	4656      	mov	r6, sl
 8010dd8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010ddc:	f7ef fee4 	bl	8000ba8 <__aeabi_d2iz>
 8010de0:	4605      	mov	r5, r0
 8010de2:	f7ef fbc7 	bl	8000574 <__aeabi_i2d>
 8010de6:	4602      	mov	r2, r0
 8010de8:	460b      	mov	r3, r1
 8010dea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010dee:	f7ef fa73 	bl	80002d8 <__aeabi_dsub>
 8010df2:	3530      	adds	r5, #48	@ 0x30
 8010df4:	f806 5b01 	strb.w	r5, [r6], #1
 8010df8:	4602      	mov	r2, r0
 8010dfa:	460b      	mov	r3, r1
 8010dfc:	42a6      	cmp	r6, r4
 8010dfe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010e02:	f04f 0200 	mov.w	r2, #0
 8010e06:	d124      	bne.n	8010e52 <_dtoa_r+0x662>
 8010e08:	4bac      	ldr	r3, [pc, #688]	@ (80110bc <_dtoa_r+0x8cc>)
 8010e0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8010e0e:	f7ef fa65 	bl	80002dc <__adddf3>
 8010e12:	4602      	mov	r2, r0
 8010e14:	460b      	mov	r3, r1
 8010e16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010e1a:	f7ef fea5 	bl	8000b68 <__aeabi_dcmpgt>
 8010e1e:	2800      	cmp	r0, #0
 8010e20:	d145      	bne.n	8010eae <_dtoa_r+0x6be>
 8010e22:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010e26:	49a5      	ldr	r1, [pc, #660]	@ (80110bc <_dtoa_r+0x8cc>)
 8010e28:	2000      	movs	r0, #0
 8010e2a:	f7ef fa55 	bl	80002d8 <__aeabi_dsub>
 8010e2e:	4602      	mov	r2, r0
 8010e30:	460b      	mov	r3, r1
 8010e32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010e36:	f7ef fe79 	bl	8000b2c <__aeabi_dcmplt>
 8010e3a:	2800      	cmp	r0, #0
 8010e3c:	f43f aef5 	beq.w	8010c2a <_dtoa_r+0x43a>
 8010e40:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8010e42:	1e73      	subs	r3, r6, #1
 8010e44:	9315      	str	r3, [sp, #84]	@ 0x54
 8010e46:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010e4a:	2b30      	cmp	r3, #48	@ 0x30
 8010e4c:	d0f8      	beq.n	8010e40 <_dtoa_r+0x650>
 8010e4e:	9f04      	ldr	r7, [sp, #16]
 8010e50:	e73e      	b.n	8010cd0 <_dtoa_r+0x4e0>
 8010e52:	4b9b      	ldr	r3, [pc, #620]	@ (80110c0 <_dtoa_r+0x8d0>)
 8010e54:	f7ef fbf8 	bl	8000648 <__aeabi_dmul>
 8010e58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010e5c:	e7bc      	b.n	8010dd8 <_dtoa_r+0x5e8>
 8010e5e:	d10c      	bne.n	8010e7a <_dtoa_r+0x68a>
 8010e60:	4b98      	ldr	r3, [pc, #608]	@ (80110c4 <_dtoa_r+0x8d4>)
 8010e62:	2200      	movs	r2, #0
 8010e64:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010e68:	f7ef fbee 	bl	8000648 <__aeabi_dmul>
 8010e6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010e70:	f7ef fe70 	bl	8000b54 <__aeabi_dcmpge>
 8010e74:	2800      	cmp	r0, #0
 8010e76:	f000 8157 	beq.w	8011128 <_dtoa_r+0x938>
 8010e7a:	2400      	movs	r4, #0
 8010e7c:	4625      	mov	r5, r4
 8010e7e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010e80:	43db      	mvns	r3, r3
 8010e82:	9304      	str	r3, [sp, #16]
 8010e84:	4656      	mov	r6, sl
 8010e86:	2700      	movs	r7, #0
 8010e88:	4621      	mov	r1, r4
 8010e8a:	4658      	mov	r0, fp
 8010e8c:	f000 fbb4 	bl	80115f8 <_Bfree>
 8010e90:	2d00      	cmp	r5, #0
 8010e92:	d0dc      	beq.n	8010e4e <_dtoa_r+0x65e>
 8010e94:	b12f      	cbz	r7, 8010ea2 <_dtoa_r+0x6b2>
 8010e96:	42af      	cmp	r7, r5
 8010e98:	d003      	beq.n	8010ea2 <_dtoa_r+0x6b2>
 8010e9a:	4639      	mov	r1, r7
 8010e9c:	4658      	mov	r0, fp
 8010e9e:	f000 fbab 	bl	80115f8 <_Bfree>
 8010ea2:	4629      	mov	r1, r5
 8010ea4:	4658      	mov	r0, fp
 8010ea6:	f000 fba7 	bl	80115f8 <_Bfree>
 8010eaa:	e7d0      	b.n	8010e4e <_dtoa_r+0x65e>
 8010eac:	9704      	str	r7, [sp, #16]
 8010eae:	4633      	mov	r3, r6
 8010eb0:	461e      	mov	r6, r3
 8010eb2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010eb6:	2a39      	cmp	r2, #57	@ 0x39
 8010eb8:	d107      	bne.n	8010eca <_dtoa_r+0x6da>
 8010eba:	459a      	cmp	sl, r3
 8010ebc:	d1f8      	bne.n	8010eb0 <_dtoa_r+0x6c0>
 8010ebe:	9a04      	ldr	r2, [sp, #16]
 8010ec0:	3201      	adds	r2, #1
 8010ec2:	9204      	str	r2, [sp, #16]
 8010ec4:	2230      	movs	r2, #48	@ 0x30
 8010ec6:	f88a 2000 	strb.w	r2, [sl]
 8010eca:	781a      	ldrb	r2, [r3, #0]
 8010ecc:	3201      	adds	r2, #1
 8010ece:	701a      	strb	r2, [r3, #0]
 8010ed0:	e7bd      	b.n	8010e4e <_dtoa_r+0x65e>
 8010ed2:	4b7b      	ldr	r3, [pc, #492]	@ (80110c0 <_dtoa_r+0x8d0>)
 8010ed4:	2200      	movs	r2, #0
 8010ed6:	f7ef fbb7 	bl	8000648 <__aeabi_dmul>
 8010eda:	2200      	movs	r2, #0
 8010edc:	2300      	movs	r3, #0
 8010ede:	4604      	mov	r4, r0
 8010ee0:	460d      	mov	r5, r1
 8010ee2:	f7ef fe19 	bl	8000b18 <__aeabi_dcmpeq>
 8010ee6:	2800      	cmp	r0, #0
 8010ee8:	f43f aebb 	beq.w	8010c62 <_dtoa_r+0x472>
 8010eec:	e6f0      	b.n	8010cd0 <_dtoa_r+0x4e0>
 8010eee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010ef0:	2a00      	cmp	r2, #0
 8010ef2:	f000 80db 	beq.w	80110ac <_dtoa_r+0x8bc>
 8010ef6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010ef8:	2a01      	cmp	r2, #1
 8010efa:	f300 80bf 	bgt.w	801107c <_dtoa_r+0x88c>
 8010efe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8010f00:	2a00      	cmp	r2, #0
 8010f02:	f000 80b7 	beq.w	8011074 <_dtoa_r+0x884>
 8010f06:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8010f0a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8010f0c:	4646      	mov	r6, r8
 8010f0e:	9a08      	ldr	r2, [sp, #32]
 8010f10:	2101      	movs	r1, #1
 8010f12:	441a      	add	r2, r3
 8010f14:	4658      	mov	r0, fp
 8010f16:	4498      	add	r8, r3
 8010f18:	9208      	str	r2, [sp, #32]
 8010f1a:	f000 fc6b 	bl	80117f4 <__i2b>
 8010f1e:	4605      	mov	r5, r0
 8010f20:	b15e      	cbz	r6, 8010f3a <_dtoa_r+0x74a>
 8010f22:	9b08      	ldr	r3, [sp, #32]
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	dd08      	ble.n	8010f3a <_dtoa_r+0x74a>
 8010f28:	42b3      	cmp	r3, r6
 8010f2a:	9a08      	ldr	r2, [sp, #32]
 8010f2c:	bfa8      	it	ge
 8010f2e:	4633      	movge	r3, r6
 8010f30:	eba8 0803 	sub.w	r8, r8, r3
 8010f34:	1af6      	subs	r6, r6, r3
 8010f36:	1ad3      	subs	r3, r2, r3
 8010f38:	9308      	str	r3, [sp, #32]
 8010f3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010f3c:	b1f3      	cbz	r3, 8010f7c <_dtoa_r+0x78c>
 8010f3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	f000 80b7 	beq.w	80110b4 <_dtoa_r+0x8c4>
 8010f46:	b18c      	cbz	r4, 8010f6c <_dtoa_r+0x77c>
 8010f48:	4629      	mov	r1, r5
 8010f4a:	4622      	mov	r2, r4
 8010f4c:	4658      	mov	r0, fp
 8010f4e:	f000 fd11 	bl	8011974 <__pow5mult>
 8010f52:	464a      	mov	r2, r9
 8010f54:	4601      	mov	r1, r0
 8010f56:	4605      	mov	r5, r0
 8010f58:	4658      	mov	r0, fp
 8010f5a:	f000 fc61 	bl	8011820 <__multiply>
 8010f5e:	4649      	mov	r1, r9
 8010f60:	9004      	str	r0, [sp, #16]
 8010f62:	4658      	mov	r0, fp
 8010f64:	f000 fb48 	bl	80115f8 <_Bfree>
 8010f68:	9b04      	ldr	r3, [sp, #16]
 8010f6a:	4699      	mov	r9, r3
 8010f6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010f6e:	1b1a      	subs	r2, r3, r4
 8010f70:	d004      	beq.n	8010f7c <_dtoa_r+0x78c>
 8010f72:	4649      	mov	r1, r9
 8010f74:	4658      	mov	r0, fp
 8010f76:	f000 fcfd 	bl	8011974 <__pow5mult>
 8010f7a:	4681      	mov	r9, r0
 8010f7c:	2101      	movs	r1, #1
 8010f7e:	4658      	mov	r0, fp
 8010f80:	f000 fc38 	bl	80117f4 <__i2b>
 8010f84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010f86:	4604      	mov	r4, r0
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	f000 81cf 	beq.w	801132c <_dtoa_r+0xb3c>
 8010f8e:	461a      	mov	r2, r3
 8010f90:	4601      	mov	r1, r0
 8010f92:	4658      	mov	r0, fp
 8010f94:	f000 fcee 	bl	8011974 <__pow5mult>
 8010f98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010f9a:	2b01      	cmp	r3, #1
 8010f9c:	4604      	mov	r4, r0
 8010f9e:	f300 8095 	bgt.w	80110cc <_dtoa_r+0x8dc>
 8010fa2:	9b02      	ldr	r3, [sp, #8]
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	f040 8087 	bne.w	80110b8 <_dtoa_r+0x8c8>
 8010faa:	9b03      	ldr	r3, [sp, #12]
 8010fac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	f040 8089 	bne.w	80110c8 <_dtoa_r+0x8d8>
 8010fb6:	9b03      	ldr	r3, [sp, #12]
 8010fb8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010fbc:	0d1b      	lsrs	r3, r3, #20
 8010fbe:	051b      	lsls	r3, r3, #20
 8010fc0:	b12b      	cbz	r3, 8010fce <_dtoa_r+0x7de>
 8010fc2:	9b08      	ldr	r3, [sp, #32]
 8010fc4:	3301      	adds	r3, #1
 8010fc6:	9308      	str	r3, [sp, #32]
 8010fc8:	f108 0801 	add.w	r8, r8, #1
 8010fcc:	2301      	movs	r3, #1
 8010fce:	930a      	str	r3, [sp, #40]	@ 0x28
 8010fd0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	f000 81b0 	beq.w	8011338 <_dtoa_r+0xb48>
 8010fd8:	6923      	ldr	r3, [r4, #16]
 8010fda:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010fde:	6918      	ldr	r0, [r3, #16]
 8010fe0:	f000 fbbc 	bl	801175c <__hi0bits>
 8010fe4:	f1c0 0020 	rsb	r0, r0, #32
 8010fe8:	9b08      	ldr	r3, [sp, #32]
 8010fea:	4418      	add	r0, r3
 8010fec:	f010 001f 	ands.w	r0, r0, #31
 8010ff0:	d077      	beq.n	80110e2 <_dtoa_r+0x8f2>
 8010ff2:	f1c0 0320 	rsb	r3, r0, #32
 8010ff6:	2b04      	cmp	r3, #4
 8010ff8:	dd6b      	ble.n	80110d2 <_dtoa_r+0x8e2>
 8010ffa:	9b08      	ldr	r3, [sp, #32]
 8010ffc:	f1c0 001c 	rsb	r0, r0, #28
 8011000:	4403      	add	r3, r0
 8011002:	4480      	add	r8, r0
 8011004:	4406      	add	r6, r0
 8011006:	9308      	str	r3, [sp, #32]
 8011008:	f1b8 0f00 	cmp.w	r8, #0
 801100c:	dd05      	ble.n	801101a <_dtoa_r+0x82a>
 801100e:	4649      	mov	r1, r9
 8011010:	4642      	mov	r2, r8
 8011012:	4658      	mov	r0, fp
 8011014:	f000 fd08 	bl	8011a28 <__lshift>
 8011018:	4681      	mov	r9, r0
 801101a:	9b08      	ldr	r3, [sp, #32]
 801101c:	2b00      	cmp	r3, #0
 801101e:	dd05      	ble.n	801102c <_dtoa_r+0x83c>
 8011020:	4621      	mov	r1, r4
 8011022:	461a      	mov	r2, r3
 8011024:	4658      	mov	r0, fp
 8011026:	f000 fcff 	bl	8011a28 <__lshift>
 801102a:	4604      	mov	r4, r0
 801102c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801102e:	2b00      	cmp	r3, #0
 8011030:	d059      	beq.n	80110e6 <_dtoa_r+0x8f6>
 8011032:	4621      	mov	r1, r4
 8011034:	4648      	mov	r0, r9
 8011036:	f000 fd63 	bl	8011b00 <__mcmp>
 801103a:	2800      	cmp	r0, #0
 801103c:	da53      	bge.n	80110e6 <_dtoa_r+0x8f6>
 801103e:	1e7b      	subs	r3, r7, #1
 8011040:	9304      	str	r3, [sp, #16]
 8011042:	4649      	mov	r1, r9
 8011044:	2300      	movs	r3, #0
 8011046:	220a      	movs	r2, #10
 8011048:	4658      	mov	r0, fp
 801104a:	f000 faf7 	bl	801163c <__multadd>
 801104e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011050:	4681      	mov	r9, r0
 8011052:	2b00      	cmp	r3, #0
 8011054:	f000 8172 	beq.w	801133c <_dtoa_r+0xb4c>
 8011058:	2300      	movs	r3, #0
 801105a:	4629      	mov	r1, r5
 801105c:	220a      	movs	r2, #10
 801105e:	4658      	mov	r0, fp
 8011060:	f000 faec 	bl	801163c <__multadd>
 8011064:	9b00      	ldr	r3, [sp, #0]
 8011066:	2b00      	cmp	r3, #0
 8011068:	4605      	mov	r5, r0
 801106a:	dc67      	bgt.n	801113c <_dtoa_r+0x94c>
 801106c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801106e:	2b02      	cmp	r3, #2
 8011070:	dc41      	bgt.n	80110f6 <_dtoa_r+0x906>
 8011072:	e063      	b.n	801113c <_dtoa_r+0x94c>
 8011074:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8011076:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801107a:	e746      	b.n	8010f0a <_dtoa_r+0x71a>
 801107c:	9b07      	ldr	r3, [sp, #28]
 801107e:	1e5c      	subs	r4, r3, #1
 8011080:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011082:	42a3      	cmp	r3, r4
 8011084:	bfbf      	itttt	lt
 8011086:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8011088:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801108a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801108c:	1ae3      	sublt	r3, r4, r3
 801108e:	bfb4      	ite	lt
 8011090:	18d2      	addlt	r2, r2, r3
 8011092:	1b1c      	subge	r4, r3, r4
 8011094:	9b07      	ldr	r3, [sp, #28]
 8011096:	bfbc      	itt	lt
 8011098:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801109a:	2400      	movlt	r4, #0
 801109c:	2b00      	cmp	r3, #0
 801109e:	bfb5      	itete	lt
 80110a0:	eba8 0603 	sublt.w	r6, r8, r3
 80110a4:	9b07      	ldrge	r3, [sp, #28]
 80110a6:	2300      	movlt	r3, #0
 80110a8:	4646      	movge	r6, r8
 80110aa:	e730      	b.n	8010f0e <_dtoa_r+0x71e>
 80110ac:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80110ae:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80110b0:	4646      	mov	r6, r8
 80110b2:	e735      	b.n	8010f20 <_dtoa_r+0x730>
 80110b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80110b6:	e75c      	b.n	8010f72 <_dtoa_r+0x782>
 80110b8:	2300      	movs	r3, #0
 80110ba:	e788      	b.n	8010fce <_dtoa_r+0x7de>
 80110bc:	3fe00000 	.word	0x3fe00000
 80110c0:	40240000 	.word	0x40240000
 80110c4:	40140000 	.word	0x40140000
 80110c8:	9b02      	ldr	r3, [sp, #8]
 80110ca:	e780      	b.n	8010fce <_dtoa_r+0x7de>
 80110cc:	2300      	movs	r3, #0
 80110ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80110d0:	e782      	b.n	8010fd8 <_dtoa_r+0x7e8>
 80110d2:	d099      	beq.n	8011008 <_dtoa_r+0x818>
 80110d4:	9a08      	ldr	r2, [sp, #32]
 80110d6:	331c      	adds	r3, #28
 80110d8:	441a      	add	r2, r3
 80110da:	4498      	add	r8, r3
 80110dc:	441e      	add	r6, r3
 80110de:	9208      	str	r2, [sp, #32]
 80110e0:	e792      	b.n	8011008 <_dtoa_r+0x818>
 80110e2:	4603      	mov	r3, r0
 80110e4:	e7f6      	b.n	80110d4 <_dtoa_r+0x8e4>
 80110e6:	9b07      	ldr	r3, [sp, #28]
 80110e8:	9704      	str	r7, [sp, #16]
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	dc20      	bgt.n	8011130 <_dtoa_r+0x940>
 80110ee:	9300      	str	r3, [sp, #0]
 80110f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80110f2:	2b02      	cmp	r3, #2
 80110f4:	dd1e      	ble.n	8011134 <_dtoa_r+0x944>
 80110f6:	9b00      	ldr	r3, [sp, #0]
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	f47f aec0 	bne.w	8010e7e <_dtoa_r+0x68e>
 80110fe:	4621      	mov	r1, r4
 8011100:	2205      	movs	r2, #5
 8011102:	4658      	mov	r0, fp
 8011104:	f000 fa9a 	bl	801163c <__multadd>
 8011108:	4601      	mov	r1, r0
 801110a:	4604      	mov	r4, r0
 801110c:	4648      	mov	r0, r9
 801110e:	f000 fcf7 	bl	8011b00 <__mcmp>
 8011112:	2800      	cmp	r0, #0
 8011114:	f77f aeb3 	ble.w	8010e7e <_dtoa_r+0x68e>
 8011118:	4656      	mov	r6, sl
 801111a:	2331      	movs	r3, #49	@ 0x31
 801111c:	f806 3b01 	strb.w	r3, [r6], #1
 8011120:	9b04      	ldr	r3, [sp, #16]
 8011122:	3301      	adds	r3, #1
 8011124:	9304      	str	r3, [sp, #16]
 8011126:	e6ae      	b.n	8010e86 <_dtoa_r+0x696>
 8011128:	9c07      	ldr	r4, [sp, #28]
 801112a:	9704      	str	r7, [sp, #16]
 801112c:	4625      	mov	r5, r4
 801112e:	e7f3      	b.n	8011118 <_dtoa_r+0x928>
 8011130:	9b07      	ldr	r3, [sp, #28]
 8011132:	9300      	str	r3, [sp, #0]
 8011134:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011136:	2b00      	cmp	r3, #0
 8011138:	f000 8104 	beq.w	8011344 <_dtoa_r+0xb54>
 801113c:	2e00      	cmp	r6, #0
 801113e:	dd05      	ble.n	801114c <_dtoa_r+0x95c>
 8011140:	4629      	mov	r1, r5
 8011142:	4632      	mov	r2, r6
 8011144:	4658      	mov	r0, fp
 8011146:	f000 fc6f 	bl	8011a28 <__lshift>
 801114a:	4605      	mov	r5, r0
 801114c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801114e:	2b00      	cmp	r3, #0
 8011150:	d05a      	beq.n	8011208 <_dtoa_r+0xa18>
 8011152:	6869      	ldr	r1, [r5, #4]
 8011154:	4658      	mov	r0, fp
 8011156:	f000 fa0f 	bl	8011578 <_Balloc>
 801115a:	4606      	mov	r6, r0
 801115c:	b928      	cbnz	r0, 801116a <_dtoa_r+0x97a>
 801115e:	4b84      	ldr	r3, [pc, #528]	@ (8011370 <_dtoa_r+0xb80>)
 8011160:	4602      	mov	r2, r0
 8011162:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8011166:	f7ff bb5a 	b.w	801081e <_dtoa_r+0x2e>
 801116a:	692a      	ldr	r2, [r5, #16]
 801116c:	3202      	adds	r2, #2
 801116e:	0092      	lsls	r2, r2, #2
 8011170:	f105 010c 	add.w	r1, r5, #12
 8011174:	300c      	adds	r0, #12
 8011176:	f001 ff75 	bl	8013064 <memcpy>
 801117a:	2201      	movs	r2, #1
 801117c:	4631      	mov	r1, r6
 801117e:	4658      	mov	r0, fp
 8011180:	f000 fc52 	bl	8011a28 <__lshift>
 8011184:	f10a 0301 	add.w	r3, sl, #1
 8011188:	9307      	str	r3, [sp, #28]
 801118a:	9b00      	ldr	r3, [sp, #0]
 801118c:	4453      	add	r3, sl
 801118e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011190:	9b02      	ldr	r3, [sp, #8]
 8011192:	f003 0301 	and.w	r3, r3, #1
 8011196:	462f      	mov	r7, r5
 8011198:	930a      	str	r3, [sp, #40]	@ 0x28
 801119a:	4605      	mov	r5, r0
 801119c:	9b07      	ldr	r3, [sp, #28]
 801119e:	4621      	mov	r1, r4
 80111a0:	3b01      	subs	r3, #1
 80111a2:	4648      	mov	r0, r9
 80111a4:	9300      	str	r3, [sp, #0]
 80111a6:	f7ff fa99 	bl	80106dc <quorem>
 80111aa:	4639      	mov	r1, r7
 80111ac:	9002      	str	r0, [sp, #8]
 80111ae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80111b2:	4648      	mov	r0, r9
 80111b4:	f000 fca4 	bl	8011b00 <__mcmp>
 80111b8:	462a      	mov	r2, r5
 80111ba:	9008      	str	r0, [sp, #32]
 80111bc:	4621      	mov	r1, r4
 80111be:	4658      	mov	r0, fp
 80111c0:	f000 fcba 	bl	8011b38 <__mdiff>
 80111c4:	68c2      	ldr	r2, [r0, #12]
 80111c6:	4606      	mov	r6, r0
 80111c8:	bb02      	cbnz	r2, 801120c <_dtoa_r+0xa1c>
 80111ca:	4601      	mov	r1, r0
 80111cc:	4648      	mov	r0, r9
 80111ce:	f000 fc97 	bl	8011b00 <__mcmp>
 80111d2:	4602      	mov	r2, r0
 80111d4:	4631      	mov	r1, r6
 80111d6:	4658      	mov	r0, fp
 80111d8:	920e      	str	r2, [sp, #56]	@ 0x38
 80111da:	f000 fa0d 	bl	80115f8 <_Bfree>
 80111de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80111e0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80111e2:	9e07      	ldr	r6, [sp, #28]
 80111e4:	ea43 0102 	orr.w	r1, r3, r2
 80111e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80111ea:	4319      	orrs	r1, r3
 80111ec:	d110      	bne.n	8011210 <_dtoa_r+0xa20>
 80111ee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80111f2:	d029      	beq.n	8011248 <_dtoa_r+0xa58>
 80111f4:	9b08      	ldr	r3, [sp, #32]
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	dd02      	ble.n	8011200 <_dtoa_r+0xa10>
 80111fa:	9b02      	ldr	r3, [sp, #8]
 80111fc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8011200:	9b00      	ldr	r3, [sp, #0]
 8011202:	f883 8000 	strb.w	r8, [r3]
 8011206:	e63f      	b.n	8010e88 <_dtoa_r+0x698>
 8011208:	4628      	mov	r0, r5
 801120a:	e7bb      	b.n	8011184 <_dtoa_r+0x994>
 801120c:	2201      	movs	r2, #1
 801120e:	e7e1      	b.n	80111d4 <_dtoa_r+0x9e4>
 8011210:	9b08      	ldr	r3, [sp, #32]
 8011212:	2b00      	cmp	r3, #0
 8011214:	db04      	blt.n	8011220 <_dtoa_r+0xa30>
 8011216:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011218:	430b      	orrs	r3, r1
 801121a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801121c:	430b      	orrs	r3, r1
 801121e:	d120      	bne.n	8011262 <_dtoa_r+0xa72>
 8011220:	2a00      	cmp	r2, #0
 8011222:	dded      	ble.n	8011200 <_dtoa_r+0xa10>
 8011224:	4649      	mov	r1, r9
 8011226:	2201      	movs	r2, #1
 8011228:	4658      	mov	r0, fp
 801122a:	f000 fbfd 	bl	8011a28 <__lshift>
 801122e:	4621      	mov	r1, r4
 8011230:	4681      	mov	r9, r0
 8011232:	f000 fc65 	bl	8011b00 <__mcmp>
 8011236:	2800      	cmp	r0, #0
 8011238:	dc03      	bgt.n	8011242 <_dtoa_r+0xa52>
 801123a:	d1e1      	bne.n	8011200 <_dtoa_r+0xa10>
 801123c:	f018 0f01 	tst.w	r8, #1
 8011240:	d0de      	beq.n	8011200 <_dtoa_r+0xa10>
 8011242:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011246:	d1d8      	bne.n	80111fa <_dtoa_r+0xa0a>
 8011248:	9a00      	ldr	r2, [sp, #0]
 801124a:	2339      	movs	r3, #57	@ 0x39
 801124c:	7013      	strb	r3, [r2, #0]
 801124e:	4633      	mov	r3, r6
 8011250:	461e      	mov	r6, r3
 8011252:	3b01      	subs	r3, #1
 8011254:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8011258:	2a39      	cmp	r2, #57	@ 0x39
 801125a:	d052      	beq.n	8011302 <_dtoa_r+0xb12>
 801125c:	3201      	adds	r2, #1
 801125e:	701a      	strb	r2, [r3, #0]
 8011260:	e612      	b.n	8010e88 <_dtoa_r+0x698>
 8011262:	2a00      	cmp	r2, #0
 8011264:	dd07      	ble.n	8011276 <_dtoa_r+0xa86>
 8011266:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801126a:	d0ed      	beq.n	8011248 <_dtoa_r+0xa58>
 801126c:	9a00      	ldr	r2, [sp, #0]
 801126e:	f108 0301 	add.w	r3, r8, #1
 8011272:	7013      	strb	r3, [r2, #0]
 8011274:	e608      	b.n	8010e88 <_dtoa_r+0x698>
 8011276:	9b07      	ldr	r3, [sp, #28]
 8011278:	9a07      	ldr	r2, [sp, #28]
 801127a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801127e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011280:	4293      	cmp	r3, r2
 8011282:	d028      	beq.n	80112d6 <_dtoa_r+0xae6>
 8011284:	4649      	mov	r1, r9
 8011286:	2300      	movs	r3, #0
 8011288:	220a      	movs	r2, #10
 801128a:	4658      	mov	r0, fp
 801128c:	f000 f9d6 	bl	801163c <__multadd>
 8011290:	42af      	cmp	r7, r5
 8011292:	4681      	mov	r9, r0
 8011294:	f04f 0300 	mov.w	r3, #0
 8011298:	f04f 020a 	mov.w	r2, #10
 801129c:	4639      	mov	r1, r7
 801129e:	4658      	mov	r0, fp
 80112a0:	d107      	bne.n	80112b2 <_dtoa_r+0xac2>
 80112a2:	f000 f9cb 	bl	801163c <__multadd>
 80112a6:	4607      	mov	r7, r0
 80112a8:	4605      	mov	r5, r0
 80112aa:	9b07      	ldr	r3, [sp, #28]
 80112ac:	3301      	adds	r3, #1
 80112ae:	9307      	str	r3, [sp, #28]
 80112b0:	e774      	b.n	801119c <_dtoa_r+0x9ac>
 80112b2:	f000 f9c3 	bl	801163c <__multadd>
 80112b6:	4629      	mov	r1, r5
 80112b8:	4607      	mov	r7, r0
 80112ba:	2300      	movs	r3, #0
 80112bc:	220a      	movs	r2, #10
 80112be:	4658      	mov	r0, fp
 80112c0:	f000 f9bc 	bl	801163c <__multadd>
 80112c4:	4605      	mov	r5, r0
 80112c6:	e7f0      	b.n	80112aa <_dtoa_r+0xaba>
 80112c8:	9b00      	ldr	r3, [sp, #0]
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	bfcc      	ite	gt
 80112ce:	461e      	movgt	r6, r3
 80112d0:	2601      	movle	r6, #1
 80112d2:	4456      	add	r6, sl
 80112d4:	2700      	movs	r7, #0
 80112d6:	4649      	mov	r1, r9
 80112d8:	2201      	movs	r2, #1
 80112da:	4658      	mov	r0, fp
 80112dc:	f000 fba4 	bl	8011a28 <__lshift>
 80112e0:	4621      	mov	r1, r4
 80112e2:	4681      	mov	r9, r0
 80112e4:	f000 fc0c 	bl	8011b00 <__mcmp>
 80112e8:	2800      	cmp	r0, #0
 80112ea:	dcb0      	bgt.n	801124e <_dtoa_r+0xa5e>
 80112ec:	d102      	bne.n	80112f4 <_dtoa_r+0xb04>
 80112ee:	f018 0f01 	tst.w	r8, #1
 80112f2:	d1ac      	bne.n	801124e <_dtoa_r+0xa5e>
 80112f4:	4633      	mov	r3, r6
 80112f6:	461e      	mov	r6, r3
 80112f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80112fc:	2a30      	cmp	r2, #48	@ 0x30
 80112fe:	d0fa      	beq.n	80112f6 <_dtoa_r+0xb06>
 8011300:	e5c2      	b.n	8010e88 <_dtoa_r+0x698>
 8011302:	459a      	cmp	sl, r3
 8011304:	d1a4      	bne.n	8011250 <_dtoa_r+0xa60>
 8011306:	9b04      	ldr	r3, [sp, #16]
 8011308:	3301      	adds	r3, #1
 801130a:	9304      	str	r3, [sp, #16]
 801130c:	2331      	movs	r3, #49	@ 0x31
 801130e:	f88a 3000 	strb.w	r3, [sl]
 8011312:	e5b9      	b.n	8010e88 <_dtoa_r+0x698>
 8011314:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011316:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8011374 <_dtoa_r+0xb84>
 801131a:	b11b      	cbz	r3, 8011324 <_dtoa_r+0xb34>
 801131c:	f10a 0308 	add.w	r3, sl, #8
 8011320:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8011322:	6013      	str	r3, [r2, #0]
 8011324:	4650      	mov	r0, sl
 8011326:	b019      	add	sp, #100	@ 0x64
 8011328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801132c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801132e:	2b01      	cmp	r3, #1
 8011330:	f77f ae37 	ble.w	8010fa2 <_dtoa_r+0x7b2>
 8011334:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011336:	930a      	str	r3, [sp, #40]	@ 0x28
 8011338:	2001      	movs	r0, #1
 801133a:	e655      	b.n	8010fe8 <_dtoa_r+0x7f8>
 801133c:	9b00      	ldr	r3, [sp, #0]
 801133e:	2b00      	cmp	r3, #0
 8011340:	f77f aed6 	ble.w	80110f0 <_dtoa_r+0x900>
 8011344:	4656      	mov	r6, sl
 8011346:	4621      	mov	r1, r4
 8011348:	4648      	mov	r0, r9
 801134a:	f7ff f9c7 	bl	80106dc <quorem>
 801134e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8011352:	f806 8b01 	strb.w	r8, [r6], #1
 8011356:	9b00      	ldr	r3, [sp, #0]
 8011358:	eba6 020a 	sub.w	r2, r6, sl
 801135c:	4293      	cmp	r3, r2
 801135e:	ddb3      	ble.n	80112c8 <_dtoa_r+0xad8>
 8011360:	4649      	mov	r1, r9
 8011362:	2300      	movs	r3, #0
 8011364:	220a      	movs	r2, #10
 8011366:	4658      	mov	r0, fp
 8011368:	f000 f968 	bl	801163c <__multadd>
 801136c:	4681      	mov	r9, r0
 801136e:	e7ea      	b.n	8011346 <_dtoa_r+0xb56>
 8011370:	080149c1 	.word	0x080149c1
 8011374:	08014945 	.word	0x08014945

08011378 <_free_r>:
 8011378:	b538      	push	{r3, r4, r5, lr}
 801137a:	4605      	mov	r5, r0
 801137c:	2900      	cmp	r1, #0
 801137e:	d041      	beq.n	8011404 <_free_r+0x8c>
 8011380:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011384:	1f0c      	subs	r4, r1, #4
 8011386:	2b00      	cmp	r3, #0
 8011388:	bfb8      	it	lt
 801138a:	18e4      	addlt	r4, r4, r3
 801138c:	f000 f8e8 	bl	8011560 <__malloc_lock>
 8011390:	4a1d      	ldr	r2, [pc, #116]	@ (8011408 <_free_r+0x90>)
 8011392:	6813      	ldr	r3, [r2, #0]
 8011394:	b933      	cbnz	r3, 80113a4 <_free_r+0x2c>
 8011396:	6063      	str	r3, [r4, #4]
 8011398:	6014      	str	r4, [r2, #0]
 801139a:	4628      	mov	r0, r5
 801139c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80113a0:	f000 b8e4 	b.w	801156c <__malloc_unlock>
 80113a4:	42a3      	cmp	r3, r4
 80113a6:	d908      	bls.n	80113ba <_free_r+0x42>
 80113a8:	6820      	ldr	r0, [r4, #0]
 80113aa:	1821      	adds	r1, r4, r0
 80113ac:	428b      	cmp	r3, r1
 80113ae:	bf01      	itttt	eq
 80113b0:	6819      	ldreq	r1, [r3, #0]
 80113b2:	685b      	ldreq	r3, [r3, #4]
 80113b4:	1809      	addeq	r1, r1, r0
 80113b6:	6021      	streq	r1, [r4, #0]
 80113b8:	e7ed      	b.n	8011396 <_free_r+0x1e>
 80113ba:	461a      	mov	r2, r3
 80113bc:	685b      	ldr	r3, [r3, #4]
 80113be:	b10b      	cbz	r3, 80113c4 <_free_r+0x4c>
 80113c0:	42a3      	cmp	r3, r4
 80113c2:	d9fa      	bls.n	80113ba <_free_r+0x42>
 80113c4:	6811      	ldr	r1, [r2, #0]
 80113c6:	1850      	adds	r0, r2, r1
 80113c8:	42a0      	cmp	r0, r4
 80113ca:	d10b      	bne.n	80113e4 <_free_r+0x6c>
 80113cc:	6820      	ldr	r0, [r4, #0]
 80113ce:	4401      	add	r1, r0
 80113d0:	1850      	adds	r0, r2, r1
 80113d2:	4283      	cmp	r3, r0
 80113d4:	6011      	str	r1, [r2, #0]
 80113d6:	d1e0      	bne.n	801139a <_free_r+0x22>
 80113d8:	6818      	ldr	r0, [r3, #0]
 80113da:	685b      	ldr	r3, [r3, #4]
 80113dc:	6053      	str	r3, [r2, #4]
 80113de:	4408      	add	r0, r1
 80113e0:	6010      	str	r0, [r2, #0]
 80113e2:	e7da      	b.n	801139a <_free_r+0x22>
 80113e4:	d902      	bls.n	80113ec <_free_r+0x74>
 80113e6:	230c      	movs	r3, #12
 80113e8:	602b      	str	r3, [r5, #0]
 80113ea:	e7d6      	b.n	801139a <_free_r+0x22>
 80113ec:	6820      	ldr	r0, [r4, #0]
 80113ee:	1821      	adds	r1, r4, r0
 80113f0:	428b      	cmp	r3, r1
 80113f2:	bf04      	itt	eq
 80113f4:	6819      	ldreq	r1, [r3, #0]
 80113f6:	685b      	ldreq	r3, [r3, #4]
 80113f8:	6063      	str	r3, [r4, #4]
 80113fa:	bf04      	itt	eq
 80113fc:	1809      	addeq	r1, r1, r0
 80113fe:	6021      	streq	r1, [r4, #0]
 8011400:	6054      	str	r4, [r2, #4]
 8011402:	e7ca      	b.n	801139a <_free_r+0x22>
 8011404:	bd38      	pop	{r3, r4, r5, pc}
 8011406:	bf00      	nop
 8011408:	2000423c 	.word	0x2000423c

0801140c <malloc>:
 801140c:	4b02      	ldr	r3, [pc, #8]	@ (8011418 <malloc+0xc>)
 801140e:	4601      	mov	r1, r0
 8011410:	6818      	ldr	r0, [r3, #0]
 8011412:	f000 b825 	b.w	8011460 <_malloc_r>
 8011416:	bf00      	nop
 8011418:	20000190 	.word	0x20000190

0801141c <sbrk_aligned>:
 801141c:	b570      	push	{r4, r5, r6, lr}
 801141e:	4e0f      	ldr	r6, [pc, #60]	@ (801145c <sbrk_aligned+0x40>)
 8011420:	460c      	mov	r4, r1
 8011422:	6831      	ldr	r1, [r6, #0]
 8011424:	4605      	mov	r5, r0
 8011426:	b911      	cbnz	r1, 801142e <sbrk_aligned+0x12>
 8011428:	f001 fe0c 	bl	8013044 <_sbrk_r>
 801142c:	6030      	str	r0, [r6, #0]
 801142e:	4621      	mov	r1, r4
 8011430:	4628      	mov	r0, r5
 8011432:	f001 fe07 	bl	8013044 <_sbrk_r>
 8011436:	1c43      	adds	r3, r0, #1
 8011438:	d103      	bne.n	8011442 <sbrk_aligned+0x26>
 801143a:	f04f 34ff 	mov.w	r4, #4294967295
 801143e:	4620      	mov	r0, r4
 8011440:	bd70      	pop	{r4, r5, r6, pc}
 8011442:	1cc4      	adds	r4, r0, #3
 8011444:	f024 0403 	bic.w	r4, r4, #3
 8011448:	42a0      	cmp	r0, r4
 801144a:	d0f8      	beq.n	801143e <sbrk_aligned+0x22>
 801144c:	1a21      	subs	r1, r4, r0
 801144e:	4628      	mov	r0, r5
 8011450:	f001 fdf8 	bl	8013044 <_sbrk_r>
 8011454:	3001      	adds	r0, #1
 8011456:	d1f2      	bne.n	801143e <sbrk_aligned+0x22>
 8011458:	e7ef      	b.n	801143a <sbrk_aligned+0x1e>
 801145a:	bf00      	nop
 801145c:	20004238 	.word	0x20004238

08011460 <_malloc_r>:
 8011460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011464:	1ccd      	adds	r5, r1, #3
 8011466:	f025 0503 	bic.w	r5, r5, #3
 801146a:	3508      	adds	r5, #8
 801146c:	2d0c      	cmp	r5, #12
 801146e:	bf38      	it	cc
 8011470:	250c      	movcc	r5, #12
 8011472:	2d00      	cmp	r5, #0
 8011474:	4606      	mov	r6, r0
 8011476:	db01      	blt.n	801147c <_malloc_r+0x1c>
 8011478:	42a9      	cmp	r1, r5
 801147a:	d904      	bls.n	8011486 <_malloc_r+0x26>
 801147c:	230c      	movs	r3, #12
 801147e:	6033      	str	r3, [r6, #0]
 8011480:	2000      	movs	r0, #0
 8011482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011486:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801155c <_malloc_r+0xfc>
 801148a:	f000 f869 	bl	8011560 <__malloc_lock>
 801148e:	f8d8 3000 	ldr.w	r3, [r8]
 8011492:	461c      	mov	r4, r3
 8011494:	bb44      	cbnz	r4, 80114e8 <_malloc_r+0x88>
 8011496:	4629      	mov	r1, r5
 8011498:	4630      	mov	r0, r6
 801149a:	f7ff ffbf 	bl	801141c <sbrk_aligned>
 801149e:	1c43      	adds	r3, r0, #1
 80114a0:	4604      	mov	r4, r0
 80114a2:	d158      	bne.n	8011556 <_malloc_r+0xf6>
 80114a4:	f8d8 4000 	ldr.w	r4, [r8]
 80114a8:	4627      	mov	r7, r4
 80114aa:	2f00      	cmp	r7, #0
 80114ac:	d143      	bne.n	8011536 <_malloc_r+0xd6>
 80114ae:	2c00      	cmp	r4, #0
 80114b0:	d04b      	beq.n	801154a <_malloc_r+0xea>
 80114b2:	6823      	ldr	r3, [r4, #0]
 80114b4:	4639      	mov	r1, r7
 80114b6:	4630      	mov	r0, r6
 80114b8:	eb04 0903 	add.w	r9, r4, r3
 80114bc:	f001 fdc2 	bl	8013044 <_sbrk_r>
 80114c0:	4581      	cmp	r9, r0
 80114c2:	d142      	bne.n	801154a <_malloc_r+0xea>
 80114c4:	6821      	ldr	r1, [r4, #0]
 80114c6:	1a6d      	subs	r5, r5, r1
 80114c8:	4629      	mov	r1, r5
 80114ca:	4630      	mov	r0, r6
 80114cc:	f7ff ffa6 	bl	801141c <sbrk_aligned>
 80114d0:	3001      	adds	r0, #1
 80114d2:	d03a      	beq.n	801154a <_malloc_r+0xea>
 80114d4:	6823      	ldr	r3, [r4, #0]
 80114d6:	442b      	add	r3, r5
 80114d8:	6023      	str	r3, [r4, #0]
 80114da:	f8d8 3000 	ldr.w	r3, [r8]
 80114de:	685a      	ldr	r2, [r3, #4]
 80114e0:	bb62      	cbnz	r2, 801153c <_malloc_r+0xdc>
 80114e2:	f8c8 7000 	str.w	r7, [r8]
 80114e6:	e00f      	b.n	8011508 <_malloc_r+0xa8>
 80114e8:	6822      	ldr	r2, [r4, #0]
 80114ea:	1b52      	subs	r2, r2, r5
 80114ec:	d420      	bmi.n	8011530 <_malloc_r+0xd0>
 80114ee:	2a0b      	cmp	r2, #11
 80114f0:	d917      	bls.n	8011522 <_malloc_r+0xc2>
 80114f2:	1961      	adds	r1, r4, r5
 80114f4:	42a3      	cmp	r3, r4
 80114f6:	6025      	str	r5, [r4, #0]
 80114f8:	bf18      	it	ne
 80114fa:	6059      	strne	r1, [r3, #4]
 80114fc:	6863      	ldr	r3, [r4, #4]
 80114fe:	bf08      	it	eq
 8011500:	f8c8 1000 	streq.w	r1, [r8]
 8011504:	5162      	str	r2, [r4, r5]
 8011506:	604b      	str	r3, [r1, #4]
 8011508:	4630      	mov	r0, r6
 801150a:	f000 f82f 	bl	801156c <__malloc_unlock>
 801150e:	f104 000b 	add.w	r0, r4, #11
 8011512:	1d23      	adds	r3, r4, #4
 8011514:	f020 0007 	bic.w	r0, r0, #7
 8011518:	1ac2      	subs	r2, r0, r3
 801151a:	bf1c      	itt	ne
 801151c:	1a1b      	subne	r3, r3, r0
 801151e:	50a3      	strne	r3, [r4, r2]
 8011520:	e7af      	b.n	8011482 <_malloc_r+0x22>
 8011522:	6862      	ldr	r2, [r4, #4]
 8011524:	42a3      	cmp	r3, r4
 8011526:	bf0c      	ite	eq
 8011528:	f8c8 2000 	streq.w	r2, [r8]
 801152c:	605a      	strne	r2, [r3, #4]
 801152e:	e7eb      	b.n	8011508 <_malloc_r+0xa8>
 8011530:	4623      	mov	r3, r4
 8011532:	6864      	ldr	r4, [r4, #4]
 8011534:	e7ae      	b.n	8011494 <_malloc_r+0x34>
 8011536:	463c      	mov	r4, r7
 8011538:	687f      	ldr	r7, [r7, #4]
 801153a:	e7b6      	b.n	80114aa <_malloc_r+0x4a>
 801153c:	461a      	mov	r2, r3
 801153e:	685b      	ldr	r3, [r3, #4]
 8011540:	42a3      	cmp	r3, r4
 8011542:	d1fb      	bne.n	801153c <_malloc_r+0xdc>
 8011544:	2300      	movs	r3, #0
 8011546:	6053      	str	r3, [r2, #4]
 8011548:	e7de      	b.n	8011508 <_malloc_r+0xa8>
 801154a:	230c      	movs	r3, #12
 801154c:	6033      	str	r3, [r6, #0]
 801154e:	4630      	mov	r0, r6
 8011550:	f000 f80c 	bl	801156c <__malloc_unlock>
 8011554:	e794      	b.n	8011480 <_malloc_r+0x20>
 8011556:	6005      	str	r5, [r0, #0]
 8011558:	e7d6      	b.n	8011508 <_malloc_r+0xa8>
 801155a:	bf00      	nop
 801155c:	2000423c 	.word	0x2000423c

08011560 <__malloc_lock>:
 8011560:	4801      	ldr	r0, [pc, #4]	@ (8011568 <__malloc_lock+0x8>)
 8011562:	f7ff b8b2 	b.w	80106ca <__retarget_lock_acquire_recursive>
 8011566:	bf00      	nop
 8011568:	20004234 	.word	0x20004234

0801156c <__malloc_unlock>:
 801156c:	4801      	ldr	r0, [pc, #4]	@ (8011574 <__malloc_unlock+0x8>)
 801156e:	f7ff b8ad 	b.w	80106cc <__retarget_lock_release_recursive>
 8011572:	bf00      	nop
 8011574:	20004234 	.word	0x20004234

08011578 <_Balloc>:
 8011578:	b570      	push	{r4, r5, r6, lr}
 801157a:	69c6      	ldr	r6, [r0, #28]
 801157c:	4604      	mov	r4, r0
 801157e:	460d      	mov	r5, r1
 8011580:	b976      	cbnz	r6, 80115a0 <_Balloc+0x28>
 8011582:	2010      	movs	r0, #16
 8011584:	f7ff ff42 	bl	801140c <malloc>
 8011588:	4602      	mov	r2, r0
 801158a:	61e0      	str	r0, [r4, #28]
 801158c:	b920      	cbnz	r0, 8011598 <_Balloc+0x20>
 801158e:	4b18      	ldr	r3, [pc, #96]	@ (80115f0 <_Balloc+0x78>)
 8011590:	4818      	ldr	r0, [pc, #96]	@ (80115f4 <_Balloc+0x7c>)
 8011592:	216b      	movs	r1, #107	@ 0x6b
 8011594:	f001 fd7c 	bl	8013090 <__assert_func>
 8011598:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801159c:	6006      	str	r6, [r0, #0]
 801159e:	60c6      	str	r6, [r0, #12]
 80115a0:	69e6      	ldr	r6, [r4, #28]
 80115a2:	68f3      	ldr	r3, [r6, #12]
 80115a4:	b183      	cbz	r3, 80115c8 <_Balloc+0x50>
 80115a6:	69e3      	ldr	r3, [r4, #28]
 80115a8:	68db      	ldr	r3, [r3, #12]
 80115aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80115ae:	b9b8      	cbnz	r0, 80115e0 <_Balloc+0x68>
 80115b0:	2101      	movs	r1, #1
 80115b2:	fa01 f605 	lsl.w	r6, r1, r5
 80115b6:	1d72      	adds	r2, r6, #5
 80115b8:	0092      	lsls	r2, r2, #2
 80115ba:	4620      	mov	r0, r4
 80115bc:	f001 fd86 	bl	80130cc <_calloc_r>
 80115c0:	b160      	cbz	r0, 80115dc <_Balloc+0x64>
 80115c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80115c6:	e00e      	b.n	80115e6 <_Balloc+0x6e>
 80115c8:	2221      	movs	r2, #33	@ 0x21
 80115ca:	2104      	movs	r1, #4
 80115cc:	4620      	mov	r0, r4
 80115ce:	f001 fd7d 	bl	80130cc <_calloc_r>
 80115d2:	69e3      	ldr	r3, [r4, #28]
 80115d4:	60f0      	str	r0, [r6, #12]
 80115d6:	68db      	ldr	r3, [r3, #12]
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d1e4      	bne.n	80115a6 <_Balloc+0x2e>
 80115dc:	2000      	movs	r0, #0
 80115de:	bd70      	pop	{r4, r5, r6, pc}
 80115e0:	6802      	ldr	r2, [r0, #0]
 80115e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80115e6:	2300      	movs	r3, #0
 80115e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80115ec:	e7f7      	b.n	80115de <_Balloc+0x66>
 80115ee:	bf00      	nop
 80115f0:	08014952 	.word	0x08014952
 80115f4:	080149d2 	.word	0x080149d2

080115f8 <_Bfree>:
 80115f8:	b570      	push	{r4, r5, r6, lr}
 80115fa:	69c6      	ldr	r6, [r0, #28]
 80115fc:	4605      	mov	r5, r0
 80115fe:	460c      	mov	r4, r1
 8011600:	b976      	cbnz	r6, 8011620 <_Bfree+0x28>
 8011602:	2010      	movs	r0, #16
 8011604:	f7ff ff02 	bl	801140c <malloc>
 8011608:	4602      	mov	r2, r0
 801160a:	61e8      	str	r0, [r5, #28]
 801160c:	b920      	cbnz	r0, 8011618 <_Bfree+0x20>
 801160e:	4b09      	ldr	r3, [pc, #36]	@ (8011634 <_Bfree+0x3c>)
 8011610:	4809      	ldr	r0, [pc, #36]	@ (8011638 <_Bfree+0x40>)
 8011612:	218f      	movs	r1, #143	@ 0x8f
 8011614:	f001 fd3c 	bl	8013090 <__assert_func>
 8011618:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801161c:	6006      	str	r6, [r0, #0]
 801161e:	60c6      	str	r6, [r0, #12]
 8011620:	b13c      	cbz	r4, 8011632 <_Bfree+0x3a>
 8011622:	69eb      	ldr	r3, [r5, #28]
 8011624:	6862      	ldr	r2, [r4, #4]
 8011626:	68db      	ldr	r3, [r3, #12]
 8011628:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801162c:	6021      	str	r1, [r4, #0]
 801162e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011632:	bd70      	pop	{r4, r5, r6, pc}
 8011634:	08014952 	.word	0x08014952
 8011638:	080149d2 	.word	0x080149d2

0801163c <__multadd>:
 801163c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011640:	690d      	ldr	r5, [r1, #16]
 8011642:	4607      	mov	r7, r0
 8011644:	460c      	mov	r4, r1
 8011646:	461e      	mov	r6, r3
 8011648:	f101 0c14 	add.w	ip, r1, #20
 801164c:	2000      	movs	r0, #0
 801164e:	f8dc 3000 	ldr.w	r3, [ip]
 8011652:	b299      	uxth	r1, r3
 8011654:	fb02 6101 	mla	r1, r2, r1, r6
 8011658:	0c1e      	lsrs	r6, r3, #16
 801165a:	0c0b      	lsrs	r3, r1, #16
 801165c:	fb02 3306 	mla	r3, r2, r6, r3
 8011660:	b289      	uxth	r1, r1
 8011662:	3001      	adds	r0, #1
 8011664:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011668:	4285      	cmp	r5, r0
 801166a:	f84c 1b04 	str.w	r1, [ip], #4
 801166e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011672:	dcec      	bgt.n	801164e <__multadd+0x12>
 8011674:	b30e      	cbz	r6, 80116ba <__multadd+0x7e>
 8011676:	68a3      	ldr	r3, [r4, #8]
 8011678:	42ab      	cmp	r3, r5
 801167a:	dc19      	bgt.n	80116b0 <__multadd+0x74>
 801167c:	6861      	ldr	r1, [r4, #4]
 801167e:	4638      	mov	r0, r7
 8011680:	3101      	adds	r1, #1
 8011682:	f7ff ff79 	bl	8011578 <_Balloc>
 8011686:	4680      	mov	r8, r0
 8011688:	b928      	cbnz	r0, 8011696 <__multadd+0x5a>
 801168a:	4602      	mov	r2, r0
 801168c:	4b0c      	ldr	r3, [pc, #48]	@ (80116c0 <__multadd+0x84>)
 801168e:	480d      	ldr	r0, [pc, #52]	@ (80116c4 <__multadd+0x88>)
 8011690:	21ba      	movs	r1, #186	@ 0xba
 8011692:	f001 fcfd 	bl	8013090 <__assert_func>
 8011696:	6922      	ldr	r2, [r4, #16]
 8011698:	3202      	adds	r2, #2
 801169a:	f104 010c 	add.w	r1, r4, #12
 801169e:	0092      	lsls	r2, r2, #2
 80116a0:	300c      	adds	r0, #12
 80116a2:	f001 fcdf 	bl	8013064 <memcpy>
 80116a6:	4621      	mov	r1, r4
 80116a8:	4638      	mov	r0, r7
 80116aa:	f7ff ffa5 	bl	80115f8 <_Bfree>
 80116ae:	4644      	mov	r4, r8
 80116b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80116b4:	3501      	adds	r5, #1
 80116b6:	615e      	str	r6, [r3, #20]
 80116b8:	6125      	str	r5, [r4, #16]
 80116ba:	4620      	mov	r0, r4
 80116bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116c0:	080149c1 	.word	0x080149c1
 80116c4:	080149d2 	.word	0x080149d2

080116c8 <__s2b>:
 80116c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80116cc:	460c      	mov	r4, r1
 80116ce:	4615      	mov	r5, r2
 80116d0:	461f      	mov	r7, r3
 80116d2:	2209      	movs	r2, #9
 80116d4:	3308      	adds	r3, #8
 80116d6:	4606      	mov	r6, r0
 80116d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80116dc:	2100      	movs	r1, #0
 80116de:	2201      	movs	r2, #1
 80116e0:	429a      	cmp	r2, r3
 80116e2:	db09      	blt.n	80116f8 <__s2b+0x30>
 80116e4:	4630      	mov	r0, r6
 80116e6:	f7ff ff47 	bl	8011578 <_Balloc>
 80116ea:	b940      	cbnz	r0, 80116fe <__s2b+0x36>
 80116ec:	4602      	mov	r2, r0
 80116ee:	4b19      	ldr	r3, [pc, #100]	@ (8011754 <__s2b+0x8c>)
 80116f0:	4819      	ldr	r0, [pc, #100]	@ (8011758 <__s2b+0x90>)
 80116f2:	21d3      	movs	r1, #211	@ 0xd3
 80116f4:	f001 fccc 	bl	8013090 <__assert_func>
 80116f8:	0052      	lsls	r2, r2, #1
 80116fa:	3101      	adds	r1, #1
 80116fc:	e7f0      	b.n	80116e0 <__s2b+0x18>
 80116fe:	9b08      	ldr	r3, [sp, #32]
 8011700:	6143      	str	r3, [r0, #20]
 8011702:	2d09      	cmp	r5, #9
 8011704:	f04f 0301 	mov.w	r3, #1
 8011708:	6103      	str	r3, [r0, #16]
 801170a:	dd16      	ble.n	801173a <__s2b+0x72>
 801170c:	f104 0909 	add.w	r9, r4, #9
 8011710:	46c8      	mov	r8, r9
 8011712:	442c      	add	r4, r5
 8011714:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011718:	4601      	mov	r1, r0
 801171a:	3b30      	subs	r3, #48	@ 0x30
 801171c:	220a      	movs	r2, #10
 801171e:	4630      	mov	r0, r6
 8011720:	f7ff ff8c 	bl	801163c <__multadd>
 8011724:	45a0      	cmp	r8, r4
 8011726:	d1f5      	bne.n	8011714 <__s2b+0x4c>
 8011728:	f1a5 0408 	sub.w	r4, r5, #8
 801172c:	444c      	add	r4, r9
 801172e:	1b2d      	subs	r5, r5, r4
 8011730:	1963      	adds	r3, r4, r5
 8011732:	42bb      	cmp	r3, r7
 8011734:	db04      	blt.n	8011740 <__s2b+0x78>
 8011736:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801173a:	340a      	adds	r4, #10
 801173c:	2509      	movs	r5, #9
 801173e:	e7f6      	b.n	801172e <__s2b+0x66>
 8011740:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011744:	4601      	mov	r1, r0
 8011746:	3b30      	subs	r3, #48	@ 0x30
 8011748:	220a      	movs	r2, #10
 801174a:	4630      	mov	r0, r6
 801174c:	f7ff ff76 	bl	801163c <__multadd>
 8011750:	e7ee      	b.n	8011730 <__s2b+0x68>
 8011752:	bf00      	nop
 8011754:	080149c1 	.word	0x080149c1
 8011758:	080149d2 	.word	0x080149d2

0801175c <__hi0bits>:
 801175c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011760:	4603      	mov	r3, r0
 8011762:	bf36      	itet	cc
 8011764:	0403      	lslcc	r3, r0, #16
 8011766:	2000      	movcs	r0, #0
 8011768:	2010      	movcc	r0, #16
 801176a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801176e:	bf3c      	itt	cc
 8011770:	021b      	lslcc	r3, r3, #8
 8011772:	3008      	addcc	r0, #8
 8011774:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011778:	bf3c      	itt	cc
 801177a:	011b      	lslcc	r3, r3, #4
 801177c:	3004      	addcc	r0, #4
 801177e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011782:	bf3c      	itt	cc
 8011784:	009b      	lslcc	r3, r3, #2
 8011786:	3002      	addcc	r0, #2
 8011788:	2b00      	cmp	r3, #0
 801178a:	db05      	blt.n	8011798 <__hi0bits+0x3c>
 801178c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8011790:	f100 0001 	add.w	r0, r0, #1
 8011794:	bf08      	it	eq
 8011796:	2020      	moveq	r0, #32
 8011798:	4770      	bx	lr

0801179a <__lo0bits>:
 801179a:	6803      	ldr	r3, [r0, #0]
 801179c:	4602      	mov	r2, r0
 801179e:	f013 0007 	ands.w	r0, r3, #7
 80117a2:	d00b      	beq.n	80117bc <__lo0bits+0x22>
 80117a4:	07d9      	lsls	r1, r3, #31
 80117a6:	d421      	bmi.n	80117ec <__lo0bits+0x52>
 80117a8:	0798      	lsls	r0, r3, #30
 80117aa:	bf49      	itett	mi
 80117ac:	085b      	lsrmi	r3, r3, #1
 80117ae:	089b      	lsrpl	r3, r3, #2
 80117b0:	2001      	movmi	r0, #1
 80117b2:	6013      	strmi	r3, [r2, #0]
 80117b4:	bf5c      	itt	pl
 80117b6:	6013      	strpl	r3, [r2, #0]
 80117b8:	2002      	movpl	r0, #2
 80117ba:	4770      	bx	lr
 80117bc:	b299      	uxth	r1, r3
 80117be:	b909      	cbnz	r1, 80117c4 <__lo0bits+0x2a>
 80117c0:	0c1b      	lsrs	r3, r3, #16
 80117c2:	2010      	movs	r0, #16
 80117c4:	b2d9      	uxtb	r1, r3
 80117c6:	b909      	cbnz	r1, 80117cc <__lo0bits+0x32>
 80117c8:	3008      	adds	r0, #8
 80117ca:	0a1b      	lsrs	r3, r3, #8
 80117cc:	0719      	lsls	r1, r3, #28
 80117ce:	bf04      	itt	eq
 80117d0:	091b      	lsreq	r3, r3, #4
 80117d2:	3004      	addeq	r0, #4
 80117d4:	0799      	lsls	r1, r3, #30
 80117d6:	bf04      	itt	eq
 80117d8:	089b      	lsreq	r3, r3, #2
 80117da:	3002      	addeq	r0, #2
 80117dc:	07d9      	lsls	r1, r3, #31
 80117de:	d403      	bmi.n	80117e8 <__lo0bits+0x4e>
 80117e0:	085b      	lsrs	r3, r3, #1
 80117e2:	f100 0001 	add.w	r0, r0, #1
 80117e6:	d003      	beq.n	80117f0 <__lo0bits+0x56>
 80117e8:	6013      	str	r3, [r2, #0]
 80117ea:	4770      	bx	lr
 80117ec:	2000      	movs	r0, #0
 80117ee:	4770      	bx	lr
 80117f0:	2020      	movs	r0, #32
 80117f2:	4770      	bx	lr

080117f4 <__i2b>:
 80117f4:	b510      	push	{r4, lr}
 80117f6:	460c      	mov	r4, r1
 80117f8:	2101      	movs	r1, #1
 80117fa:	f7ff febd 	bl	8011578 <_Balloc>
 80117fe:	4602      	mov	r2, r0
 8011800:	b928      	cbnz	r0, 801180e <__i2b+0x1a>
 8011802:	4b05      	ldr	r3, [pc, #20]	@ (8011818 <__i2b+0x24>)
 8011804:	4805      	ldr	r0, [pc, #20]	@ (801181c <__i2b+0x28>)
 8011806:	f240 1145 	movw	r1, #325	@ 0x145
 801180a:	f001 fc41 	bl	8013090 <__assert_func>
 801180e:	2301      	movs	r3, #1
 8011810:	6144      	str	r4, [r0, #20]
 8011812:	6103      	str	r3, [r0, #16]
 8011814:	bd10      	pop	{r4, pc}
 8011816:	bf00      	nop
 8011818:	080149c1 	.word	0x080149c1
 801181c:	080149d2 	.word	0x080149d2

08011820 <__multiply>:
 8011820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011824:	4614      	mov	r4, r2
 8011826:	690a      	ldr	r2, [r1, #16]
 8011828:	6923      	ldr	r3, [r4, #16]
 801182a:	429a      	cmp	r2, r3
 801182c:	bfa8      	it	ge
 801182e:	4623      	movge	r3, r4
 8011830:	460f      	mov	r7, r1
 8011832:	bfa4      	itt	ge
 8011834:	460c      	movge	r4, r1
 8011836:	461f      	movge	r7, r3
 8011838:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801183c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8011840:	68a3      	ldr	r3, [r4, #8]
 8011842:	6861      	ldr	r1, [r4, #4]
 8011844:	eb0a 0609 	add.w	r6, sl, r9
 8011848:	42b3      	cmp	r3, r6
 801184a:	b085      	sub	sp, #20
 801184c:	bfb8      	it	lt
 801184e:	3101      	addlt	r1, #1
 8011850:	f7ff fe92 	bl	8011578 <_Balloc>
 8011854:	b930      	cbnz	r0, 8011864 <__multiply+0x44>
 8011856:	4602      	mov	r2, r0
 8011858:	4b44      	ldr	r3, [pc, #272]	@ (801196c <__multiply+0x14c>)
 801185a:	4845      	ldr	r0, [pc, #276]	@ (8011970 <__multiply+0x150>)
 801185c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8011860:	f001 fc16 	bl	8013090 <__assert_func>
 8011864:	f100 0514 	add.w	r5, r0, #20
 8011868:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801186c:	462b      	mov	r3, r5
 801186e:	2200      	movs	r2, #0
 8011870:	4543      	cmp	r3, r8
 8011872:	d321      	bcc.n	80118b8 <__multiply+0x98>
 8011874:	f107 0114 	add.w	r1, r7, #20
 8011878:	f104 0214 	add.w	r2, r4, #20
 801187c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8011880:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8011884:	9302      	str	r3, [sp, #8]
 8011886:	1b13      	subs	r3, r2, r4
 8011888:	3b15      	subs	r3, #21
 801188a:	f023 0303 	bic.w	r3, r3, #3
 801188e:	3304      	adds	r3, #4
 8011890:	f104 0715 	add.w	r7, r4, #21
 8011894:	42ba      	cmp	r2, r7
 8011896:	bf38      	it	cc
 8011898:	2304      	movcc	r3, #4
 801189a:	9301      	str	r3, [sp, #4]
 801189c:	9b02      	ldr	r3, [sp, #8]
 801189e:	9103      	str	r1, [sp, #12]
 80118a0:	428b      	cmp	r3, r1
 80118a2:	d80c      	bhi.n	80118be <__multiply+0x9e>
 80118a4:	2e00      	cmp	r6, #0
 80118a6:	dd03      	ble.n	80118b0 <__multiply+0x90>
 80118a8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d05b      	beq.n	8011968 <__multiply+0x148>
 80118b0:	6106      	str	r6, [r0, #16]
 80118b2:	b005      	add	sp, #20
 80118b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118b8:	f843 2b04 	str.w	r2, [r3], #4
 80118bc:	e7d8      	b.n	8011870 <__multiply+0x50>
 80118be:	f8b1 a000 	ldrh.w	sl, [r1]
 80118c2:	f1ba 0f00 	cmp.w	sl, #0
 80118c6:	d024      	beq.n	8011912 <__multiply+0xf2>
 80118c8:	f104 0e14 	add.w	lr, r4, #20
 80118cc:	46a9      	mov	r9, r5
 80118ce:	f04f 0c00 	mov.w	ip, #0
 80118d2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80118d6:	f8d9 3000 	ldr.w	r3, [r9]
 80118da:	fa1f fb87 	uxth.w	fp, r7
 80118de:	b29b      	uxth	r3, r3
 80118e0:	fb0a 330b 	mla	r3, sl, fp, r3
 80118e4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80118e8:	f8d9 7000 	ldr.w	r7, [r9]
 80118ec:	4463      	add	r3, ip
 80118ee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80118f2:	fb0a c70b 	mla	r7, sl, fp, ip
 80118f6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80118fa:	b29b      	uxth	r3, r3
 80118fc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011900:	4572      	cmp	r2, lr
 8011902:	f849 3b04 	str.w	r3, [r9], #4
 8011906:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801190a:	d8e2      	bhi.n	80118d2 <__multiply+0xb2>
 801190c:	9b01      	ldr	r3, [sp, #4]
 801190e:	f845 c003 	str.w	ip, [r5, r3]
 8011912:	9b03      	ldr	r3, [sp, #12]
 8011914:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011918:	3104      	adds	r1, #4
 801191a:	f1b9 0f00 	cmp.w	r9, #0
 801191e:	d021      	beq.n	8011964 <__multiply+0x144>
 8011920:	682b      	ldr	r3, [r5, #0]
 8011922:	f104 0c14 	add.w	ip, r4, #20
 8011926:	46ae      	mov	lr, r5
 8011928:	f04f 0a00 	mov.w	sl, #0
 801192c:	f8bc b000 	ldrh.w	fp, [ip]
 8011930:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8011934:	fb09 770b 	mla	r7, r9, fp, r7
 8011938:	4457      	add	r7, sl
 801193a:	b29b      	uxth	r3, r3
 801193c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011940:	f84e 3b04 	str.w	r3, [lr], #4
 8011944:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011948:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801194c:	f8be 3000 	ldrh.w	r3, [lr]
 8011950:	fb09 330a 	mla	r3, r9, sl, r3
 8011954:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8011958:	4562      	cmp	r2, ip
 801195a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801195e:	d8e5      	bhi.n	801192c <__multiply+0x10c>
 8011960:	9f01      	ldr	r7, [sp, #4]
 8011962:	51eb      	str	r3, [r5, r7]
 8011964:	3504      	adds	r5, #4
 8011966:	e799      	b.n	801189c <__multiply+0x7c>
 8011968:	3e01      	subs	r6, #1
 801196a:	e79b      	b.n	80118a4 <__multiply+0x84>
 801196c:	080149c1 	.word	0x080149c1
 8011970:	080149d2 	.word	0x080149d2

08011974 <__pow5mult>:
 8011974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011978:	4615      	mov	r5, r2
 801197a:	f012 0203 	ands.w	r2, r2, #3
 801197e:	4607      	mov	r7, r0
 8011980:	460e      	mov	r6, r1
 8011982:	d007      	beq.n	8011994 <__pow5mult+0x20>
 8011984:	4c25      	ldr	r4, [pc, #148]	@ (8011a1c <__pow5mult+0xa8>)
 8011986:	3a01      	subs	r2, #1
 8011988:	2300      	movs	r3, #0
 801198a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801198e:	f7ff fe55 	bl	801163c <__multadd>
 8011992:	4606      	mov	r6, r0
 8011994:	10ad      	asrs	r5, r5, #2
 8011996:	d03d      	beq.n	8011a14 <__pow5mult+0xa0>
 8011998:	69fc      	ldr	r4, [r7, #28]
 801199a:	b97c      	cbnz	r4, 80119bc <__pow5mult+0x48>
 801199c:	2010      	movs	r0, #16
 801199e:	f7ff fd35 	bl	801140c <malloc>
 80119a2:	4602      	mov	r2, r0
 80119a4:	61f8      	str	r0, [r7, #28]
 80119a6:	b928      	cbnz	r0, 80119b4 <__pow5mult+0x40>
 80119a8:	4b1d      	ldr	r3, [pc, #116]	@ (8011a20 <__pow5mult+0xac>)
 80119aa:	481e      	ldr	r0, [pc, #120]	@ (8011a24 <__pow5mult+0xb0>)
 80119ac:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80119b0:	f001 fb6e 	bl	8013090 <__assert_func>
 80119b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80119b8:	6004      	str	r4, [r0, #0]
 80119ba:	60c4      	str	r4, [r0, #12]
 80119bc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80119c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80119c4:	b94c      	cbnz	r4, 80119da <__pow5mult+0x66>
 80119c6:	f240 2171 	movw	r1, #625	@ 0x271
 80119ca:	4638      	mov	r0, r7
 80119cc:	f7ff ff12 	bl	80117f4 <__i2b>
 80119d0:	2300      	movs	r3, #0
 80119d2:	f8c8 0008 	str.w	r0, [r8, #8]
 80119d6:	4604      	mov	r4, r0
 80119d8:	6003      	str	r3, [r0, #0]
 80119da:	f04f 0900 	mov.w	r9, #0
 80119de:	07eb      	lsls	r3, r5, #31
 80119e0:	d50a      	bpl.n	80119f8 <__pow5mult+0x84>
 80119e2:	4631      	mov	r1, r6
 80119e4:	4622      	mov	r2, r4
 80119e6:	4638      	mov	r0, r7
 80119e8:	f7ff ff1a 	bl	8011820 <__multiply>
 80119ec:	4631      	mov	r1, r6
 80119ee:	4680      	mov	r8, r0
 80119f0:	4638      	mov	r0, r7
 80119f2:	f7ff fe01 	bl	80115f8 <_Bfree>
 80119f6:	4646      	mov	r6, r8
 80119f8:	106d      	asrs	r5, r5, #1
 80119fa:	d00b      	beq.n	8011a14 <__pow5mult+0xa0>
 80119fc:	6820      	ldr	r0, [r4, #0]
 80119fe:	b938      	cbnz	r0, 8011a10 <__pow5mult+0x9c>
 8011a00:	4622      	mov	r2, r4
 8011a02:	4621      	mov	r1, r4
 8011a04:	4638      	mov	r0, r7
 8011a06:	f7ff ff0b 	bl	8011820 <__multiply>
 8011a0a:	6020      	str	r0, [r4, #0]
 8011a0c:	f8c0 9000 	str.w	r9, [r0]
 8011a10:	4604      	mov	r4, r0
 8011a12:	e7e4      	b.n	80119de <__pow5mult+0x6a>
 8011a14:	4630      	mov	r0, r6
 8011a16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a1a:	bf00      	nop
 8011a1c:	08014a2c 	.word	0x08014a2c
 8011a20:	08014952 	.word	0x08014952
 8011a24:	080149d2 	.word	0x080149d2

08011a28 <__lshift>:
 8011a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a2c:	460c      	mov	r4, r1
 8011a2e:	6849      	ldr	r1, [r1, #4]
 8011a30:	6923      	ldr	r3, [r4, #16]
 8011a32:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011a36:	68a3      	ldr	r3, [r4, #8]
 8011a38:	4607      	mov	r7, r0
 8011a3a:	4691      	mov	r9, r2
 8011a3c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011a40:	f108 0601 	add.w	r6, r8, #1
 8011a44:	42b3      	cmp	r3, r6
 8011a46:	db0b      	blt.n	8011a60 <__lshift+0x38>
 8011a48:	4638      	mov	r0, r7
 8011a4a:	f7ff fd95 	bl	8011578 <_Balloc>
 8011a4e:	4605      	mov	r5, r0
 8011a50:	b948      	cbnz	r0, 8011a66 <__lshift+0x3e>
 8011a52:	4602      	mov	r2, r0
 8011a54:	4b28      	ldr	r3, [pc, #160]	@ (8011af8 <__lshift+0xd0>)
 8011a56:	4829      	ldr	r0, [pc, #164]	@ (8011afc <__lshift+0xd4>)
 8011a58:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011a5c:	f001 fb18 	bl	8013090 <__assert_func>
 8011a60:	3101      	adds	r1, #1
 8011a62:	005b      	lsls	r3, r3, #1
 8011a64:	e7ee      	b.n	8011a44 <__lshift+0x1c>
 8011a66:	2300      	movs	r3, #0
 8011a68:	f100 0114 	add.w	r1, r0, #20
 8011a6c:	f100 0210 	add.w	r2, r0, #16
 8011a70:	4618      	mov	r0, r3
 8011a72:	4553      	cmp	r3, sl
 8011a74:	db33      	blt.n	8011ade <__lshift+0xb6>
 8011a76:	6920      	ldr	r0, [r4, #16]
 8011a78:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011a7c:	f104 0314 	add.w	r3, r4, #20
 8011a80:	f019 091f 	ands.w	r9, r9, #31
 8011a84:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011a88:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011a8c:	d02b      	beq.n	8011ae6 <__lshift+0xbe>
 8011a8e:	f1c9 0e20 	rsb	lr, r9, #32
 8011a92:	468a      	mov	sl, r1
 8011a94:	2200      	movs	r2, #0
 8011a96:	6818      	ldr	r0, [r3, #0]
 8011a98:	fa00 f009 	lsl.w	r0, r0, r9
 8011a9c:	4310      	orrs	r0, r2
 8011a9e:	f84a 0b04 	str.w	r0, [sl], #4
 8011aa2:	f853 2b04 	ldr.w	r2, [r3], #4
 8011aa6:	459c      	cmp	ip, r3
 8011aa8:	fa22 f20e 	lsr.w	r2, r2, lr
 8011aac:	d8f3      	bhi.n	8011a96 <__lshift+0x6e>
 8011aae:	ebac 0304 	sub.w	r3, ip, r4
 8011ab2:	3b15      	subs	r3, #21
 8011ab4:	f023 0303 	bic.w	r3, r3, #3
 8011ab8:	3304      	adds	r3, #4
 8011aba:	f104 0015 	add.w	r0, r4, #21
 8011abe:	4584      	cmp	ip, r0
 8011ac0:	bf38      	it	cc
 8011ac2:	2304      	movcc	r3, #4
 8011ac4:	50ca      	str	r2, [r1, r3]
 8011ac6:	b10a      	cbz	r2, 8011acc <__lshift+0xa4>
 8011ac8:	f108 0602 	add.w	r6, r8, #2
 8011acc:	3e01      	subs	r6, #1
 8011ace:	4638      	mov	r0, r7
 8011ad0:	612e      	str	r6, [r5, #16]
 8011ad2:	4621      	mov	r1, r4
 8011ad4:	f7ff fd90 	bl	80115f8 <_Bfree>
 8011ad8:	4628      	mov	r0, r5
 8011ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ade:	f842 0f04 	str.w	r0, [r2, #4]!
 8011ae2:	3301      	adds	r3, #1
 8011ae4:	e7c5      	b.n	8011a72 <__lshift+0x4a>
 8011ae6:	3904      	subs	r1, #4
 8011ae8:	f853 2b04 	ldr.w	r2, [r3], #4
 8011aec:	f841 2f04 	str.w	r2, [r1, #4]!
 8011af0:	459c      	cmp	ip, r3
 8011af2:	d8f9      	bhi.n	8011ae8 <__lshift+0xc0>
 8011af4:	e7ea      	b.n	8011acc <__lshift+0xa4>
 8011af6:	bf00      	nop
 8011af8:	080149c1 	.word	0x080149c1
 8011afc:	080149d2 	.word	0x080149d2

08011b00 <__mcmp>:
 8011b00:	690a      	ldr	r2, [r1, #16]
 8011b02:	4603      	mov	r3, r0
 8011b04:	6900      	ldr	r0, [r0, #16]
 8011b06:	1a80      	subs	r0, r0, r2
 8011b08:	b530      	push	{r4, r5, lr}
 8011b0a:	d10e      	bne.n	8011b2a <__mcmp+0x2a>
 8011b0c:	3314      	adds	r3, #20
 8011b0e:	3114      	adds	r1, #20
 8011b10:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011b14:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011b18:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011b1c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011b20:	4295      	cmp	r5, r2
 8011b22:	d003      	beq.n	8011b2c <__mcmp+0x2c>
 8011b24:	d205      	bcs.n	8011b32 <__mcmp+0x32>
 8011b26:	f04f 30ff 	mov.w	r0, #4294967295
 8011b2a:	bd30      	pop	{r4, r5, pc}
 8011b2c:	42a3      	cmp	r3, r4
 8011b2e:	d3f3      	bcc.n	8011b18 <__mcmp+0x18>
 8011b30:	e7fb      	b.n	8011b2a <__mcmp+0x2a>
 8011b32:	2001      	movs	r0, #1
 8011b34:	e7f9      	b.n	8011b2a <__mcmp+0x2a>
	...

08011b38 <__mdiff>:
 8011b38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b3c:	4689      	mov	r9, r1
 8011b3e:	4606      	mov	r6, r0
 8011b40:	4611      	mov	r1, r2
 8011b42:	4648      	mov	r0, r9
 8011b44:	4614      	mov	r4, r2
 8011b46:	f7ff ffdb 	bl	8011b00 <__mcmp>
 8011b4a:	1e05      	subs	r5, r0, #0
 8011b4c:	d112      	bne.n	8011b74 <__mdiff+0x3c>
 8011b4e:	4629      	mov	r1, r5
 8011b50:	4630      	mov	r0, r6
 8011b52:	f7ff fd11 	bl	8011578 <_Balloc>
 8011b56:	4602      	mov	r2, r0
 8011b58:	b928      	cbnz	r0, 8011b66 <__mdiff+0x2e>
 8011b5a:	4b3f      	ldr	r3, [pc, #252]	@ (8011c58 <__mdiff+0x120>)
 8011b5c:	f240 2137 	movw	r1, #567	@ 0x237
 8011b60:	483e      	ldr	r0, [pc, #248]	@ (8011c5c <__mdiff+0x124>)
 8011b62:	f001 fa95 	bl	8013090 <__assert_func>
 8011b66:	2301      	movs	r3, #1
 8011b68:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011b6c:	4610      	mov	r0, r2
 8011b6e:	b003      	add	sp, #12
 8011b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b74:	bfbc      	itt	lt
 8011b76:	464b      	movlt	r3, r9
 8011b78:	46a1      	movlt	r9, r4
 8011b7a:	4630      	mov	r0, r6
 8011b7c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011b80:	bfba      	itte	lt
 8011b82:	461c      	movlt	r4, r3
 8011b84:	2501      	movlt	r5, #1
 8011b86:	2500      	movge	r5, #0
 8011b88:	f7ff fcf6 	bl	8011578 <_Balloc>
 8011b8c:	4602      	mov	r2, r0
 8011b8e:	b918      	cbnz	r0, 8011b98 <__mdiff+0x60>
 8011b90:	4b31      	ldr	r3, [pc, #196]	@ (8011c58 <__mdiff+0x120>)
 8011b92:	f240 2145 	movw	r1, #581	@ 0x245
 8011b96:	e7e3      	b.n	8011b60 <__mdiff+0x28>
 8011b98:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011b9c:	6926      	ldr	r6, [r4, #16]
 8011b9e:	60c5      	str	r5, [r0, #12]
 8011ba0:	f109 0310 	add.w	r3, r9, #16
 8011ba4:	f109 0514 	add.w	r5, r9, #20
 8011ba8:	f104 0e14 	add.w	lr, r4, #20
 8011bac:	f100 0b14 	add.w	fp, r0, #20
 8011bb0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011bb4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011bb8:	9301      	str	r3, [sp, #4]
 8011bba:	46d9      	mov	r9, fp
 8011bbc:	f04f 0c00 	mov.w	ip, #0
 8011bc0:	9b01      	ldr	r3, [sp, #4]
 8011bc2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8011bc6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011bca:	9301      	str	r3, [sp, #4]
 8011bcc:	fa1f f38a 	uxth.w	r3, sl
 8011bd0:	4619      	mov	r1, r3
 8011bd2:	b283      	uxth	r3, r0
 8011bd4:	1acb      	subs	r3, r1, r3
 8011bd6:	0c00      	lsrs	r0, r0, #16
 8011bd8:	4463      	add	r3, ip
 8011bda:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8011bde:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8011be2:	b29b      	uxth	r3, r3
 8011be4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011be8:	4576      	cmp	r6, lr
 8011bea:	f849 3b04 	str.w	r3, [r9], #4
 8011bee:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011bf2:	d8e5      	bhi.n	8011bc0 <__mdiff+0x88>
 8011bf4:	1b33      	subs	r3, r6, r4
 8011bf6:	3b15      	subs	r3, #21
 8011bf8:	f023 0303 	bic.w	r3, r3, #3
 8011bfc:	3415      	adds	r4, #21
 8011bfe:	3304      	adds	r3, #4
 8011c00:	42a6      	cmp	r6, r4
 8011c02:	bf38      	it	cc
 8011c04:	2304      	movcc	r3, #4
 8011c06:	441d      	add	r5, r3
 8011c08:	445b      	add	r3, fp
 8011c0a:	461e      	mov	r6, r3
 8011c0c:	462c      	mov	r4, r5
 8011c0e:	4544      	cmp	r4, r8
 8011c10:	d30e      	bcc.n	8011c30 <__mdiff+0xf8>
 8011c12:	f108 0103 	add.w	r1, r8, #3
 8011c16:	1b49      	subs	r1, r1, r5
 8011c18:	f021 0103 	bic.w	r1, r1, #3
 8011c1c:	3d03      	subs	r5, #3
 8011c1e:	45a8      	cmp	r8, r5
 8011c20:	bf38      	it	cc
 8011c22:	2100      	movcc	r1, #0
 8011c24:	440b      	add	r3, r1
 8011c26:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011c2a:	b191      	cbz	r1, 8011c52 <__mdiff+0x11a>
 8011c2c:	6117      	str	r7, [r2, #16]
 8011c2e:	e79d      	b.n	8011b6c <__mdiff+0x34>
 8011c30:	f854 1b04 	ldr.w	r1, [r4], #4
 8011c34:	46e6      	mov	lr, ip
 8011c36:	0c08      	lsrs	r0, r1, #16
 8011c38:	fa1c fc81 	uxtah	ip, ip, r1
 8011c3c:	4471      	add	r1, lr
 8011c3e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8011c42:	b289      	uxth	r1, r1
 8011c44:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011c48:	f846 1b04 	str.w	r1, [r6], #4
 8011c4c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011c50:	e7dd      	b.n	8011c0e <__mdiff+0xd6>
 8011c52:	3f01      	subs	r7, #1
 8011c54:	e7e7      	b.n	8011c26 <__mdiff+0xee>
 8011c56:	bf00      	nop
 8011c58:	080149c1 	.word	0x080149c1
 8011c5c:	080149d2 	.word	0x080149d2

08011c60 <__ulp>:
 8011c60:	b082      	sub	sp, #8
 8011c62:	ed8d 0b00 	vstr	d0, [sp]
 8011c66:	9a01      	ldr	r2, [sp, #4]
 8011c68:	4b0f      	ldr	r3, [pc, #60]	@ (8011ca8 <__ulp+0x48>)
 8011c6a:	4013      	ands	r3, r2
 8011c6c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	dc08      	bgt.n	8011c86 <__ulp+0x26>
 8011c74:	425b      	negs	r3, r3
 8011c76:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8011c7a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011c7e:	da04      	bge.n	8011c8a <__ulp+0x2a>
 8011c80:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8011c84:	4113      	asrs	r3, r2
 8011c86:	2200      	movs	r2, #0
 8011c88:	e008      	b.n	8011c9c <__ulp+0x3c>
 8011c8a:	f1a2 0314 	sub.w	r3, r2, #20
 8011c8e:	2b1e      	cmp	r3, #30
 8011c90:	bfda      	itte	le
 8011c92:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8011c96:	40da      	lsrle	r2, r3
 8011c98:	2201      	movgt	r2, #1
 8011c9a:	2300      	movs	r3, #0
 8011c9c:	4619      	mov	r1, r3
 8011c9e:	4610      	mov	r0, r2
 8011ca0:	ec41 0b10 	vmov	d0, r0, r1
 8011ca4:	b002      	add	sp, #8
 8011ca6:	4770      	bx	lr
 8011ca8:	7ff00000 	.word	0x7ff00000

08011cac <__b2d>:
 8011cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cb0:	6906      	ldr	r6, [r0, #16]
 8011cb2:	f100 0814 	add.w	r8, r0, #20
 8011cb6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8011cba:	1f37      	subs	r7, r6, #4
 8011cbc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011cc0:	4610      	mov	r0, r2
 8011cc2:	f7ff fd4b 	bl	801175c <__hi0bits>
 8011cc6:	f1c0 0320 	rsb	r3, r0, #32
 8011cca:	280a      	cmp	r0, #10
 8011ccc:	600b      	str	r3, [r1, #0]
 8011cce:	491b      	ldr	r1, [pc, #108]	@ (8011d3c <__b2d+0x90>)
 8011cd0:	dc15      	bgt.n	8011cfe <__b2d+0x52>
 8011cd2:	f1c0 0c0b 	rsb	ip, r0, #11
 8011cd6:	fa22 f30c 	lsr.w	r3, r2, ip
 8011cda:	45b8      	cmp	r8, r7
 8011cdc:	ea43 0501 	orr.w	r5, r3, r1
 8011ce0:	bf34      	ite	cc
 8011ce2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011ce6:	2300      	movcs	r3, #0
 8011ce8:	3015      	adds	r0, #21
 8011cea:	fa02 f000 	lsl.w	r0, r2, r0
 8011cee:	fa23 f30c 	lsr.w	r3, r3, ip
 8011cf2:	4303      	orrs	r3, r0
 8011cf4:	461c      	mov	r4, r3
 8011cf6:	ec45 4b10 	vmov	d0, r4, r5
 8011cfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011cfe:	45b8      	cmp	r8, r7
 8011d00:	bf3a      	itte	cc
 8011d02:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011d06:	f1a6 0708 	subcc.w	r7, r6, #8
 8011d0a:	2300      	movcs	r3, #0
 8011d0c:	380b      	subs	r0, #11
 8011d0e:	d012      	beq.n	8011d36 <__b2d+0x8a>
 8011d10:	f1c0 0120 	rsb	r1, r0, #32
 8011d14:	fa23 f401 	lsr.w	r4, r3, r1
 8011d18:	4082      	lsls	r2, r0
 8011d1a:	4322      	orrs	r2, r4
 8011d1c:	4547      	cmp	r7, r8
 8011d1e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8011d22:	bf8c      	ite	hi
 8011d24:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8011d28:	2200      	movls	r2, #0
 8011d2a:	4083      	lsls	r3, r0
 8011d2c:	40ca      	lsrs	r2, r1
 8011d2e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8011d32:	4313      	orrs	r3, r2
 8011d34:	e7de      	b.n	8011cf4 <__b2d+0x48>
 8011d36:	ea42 0501 	orr.w	r5, r2, r1
 8011d3a:	e7db      	b.n	8011cf4 <__b2d+0x48>
 8011d3c:	3ff00000 	.word	0x3ff00000

08011d40 <__d2b>:
 8011d40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011d44:	460f      	mov	r7, r1
 8011d46:	2101      	movs	r1, #1
 8011d48:	ec59 8b10 	vmov	r8, r9, d0
 8011d4c:	4616      	mov	r6, r2
 8011d4e:	f7ff fc13 	bl	8011578 <_Balloc>
 8011d52:	4604      	mov	r4, r0
 8011d54:	b930      	cbnz	r0, 8011d64 <__d2b+0x24>
 8011d56:	4602      	mov	r2, r0
 8011d58:	4b23      	ldr	r3, [pc, #140]	@ (8011de8 <__d2b+0xa8>)
 8011d5a:	4824      	ldr	r0, [pc, #144]	@ (8011dec <__d2b+0xac>)
 8011d5c:	f240 310f 	movw	r1, #783	@ 0x30f
 8011d60:	f001 f996 	bl	8013090 <__assert_func>
 8011d64:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011d68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011d6c:	b10d      	cbz	r5, 8011d72 <__d2b+0x32>
 8011d6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011d72:	9301      	str	r3, [sp, #4]
 8011d74:	f1b8 0300 	subs.w	r3, r8, #0
 8011d78:	d023      	beq.n	8011dc2 <__d2b+0x82>
 8011d7a:	4668      	mov	r0, sp
 8011d7c:	9300      	str	r3, [sp, #0]
 8011d7e:	f7ff fd0c 	bl	801179a <__lo0bits>
 8011d82:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011d86:	b1d0      	cbz	r0, 8011dbe <__d2b+0x7e>
 8011d88:	f1c0 0320 	rsb	r3, r0, #32
 8011d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8011d90:	430b      	orrs	r3, r1
 8011d92:	40c2      	lsrs	r2, r0
 8011d94:	6163      	str	r3, [r4, #20]
 8011d96:	9201      	str	r2, [sp, #4]
 8011d98:	9b01      	ldr	r3, [sp, #4]
 8011d9a:	61a3      	str	r3, [r4, #24]
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	bf0c      	ite	eq
 8011da0:	2201      	moveq	r2, #1
 8011da2:	2202      	movne	r2, #2
 8011da4:	6122      	str	r2, [r4, #16]
 8011da6:	b1a5      	cbz	r5, 8011dd2 <__d2b+0x92>
 8011da8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011dac:	4405      	add	r5, r0
 8011dae:	603d      	str	r5, [r7, #0]
 8011db0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011db4:	6030      	str	r0, [r6, #0]
 8011db6:	4620      	mov	r0, r4
 8011db8:	b003      	add	sp, #12
 8011dba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011dbe:	6161      	str	r1, [r4, #20]
 8011dc0:	e7ea      	b.n	8011d98 <__d2b+0x58>
 8011dc2:	a801      	add	r0, sp, #4
 8011dc4:	f7ff fce9 	bl	801179a <__lo0bits>
 8011dc8:	9b01      	ldr	r3, [sp, #4]
 8011dca:	6163      	str	r3, [r4, #20]
 8011dcc:	3020      	adds	r0, #32
 8011dce:	2201      	movs	r2, #1
 8011dd0:	e7e8      	b.n	8011da4 <__d2b+0x64>
 8011dd2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011dd6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011dda:	6038      	str	r0, [r7, #0]
 8011ddc:	6918      	ldr	r0, [r3, #16]
 8011dde:	f7ff fcbd 	bl	801175c <__hi0bits>
 8011de2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011de6:	e7e5      	b.n	8011db4 <__d2b+0x74>
 8011de8:	080149c1 	.word	0x080149c1
 8011dec:	080149d2 	.word	0x080149d2

08011df0 <__ratio>:
 8011df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011df4:	b085      	sub	sp, #20
 8011df6:	e9cd 1000 	strd	r1, r0, [sp]
 8011dfa:	a902      	add	r1, sp, #8
 8011dfc:	f7ff ff56 	bl	8011cac <__b2d>
 8011e00:	9800      	ldr	r0, [sp, #0]
 8011e02:	a903      	add	r1, sp, #12
 8011e04:	ec55 4b10 	vmov	r4, r5, d0
 8011e08:	f7ff ff50 	bl	8011cac <__b2d>
 8011e0c:	9b01      	ldr	r3, [sp, #4]
 8011e0e:	6919      	ldr	r1, [r3, #16]
 8011e10:	9b00      	ldr	r3, [sp, #0]
 8011e12:	691b      	ldr	r3, [r3, #16]
 8011e14:	1ac9      	subs	r1, r1, r3
 8011e16:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8011e1a:	1a9b      	subs	r3, r3, r2
 8011e1c:	ec5b ab10 	vmov	sl, fp, d0
 8011e20:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	bfce      	itee	gt
 8011e28:	462a      	movgt	r2, r5
 8011e2a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011e2e:	465a      	movle	r2, fp
 8011e30:	462f      	mov	r7, r5
 8011e32:	46d9      	mov	r9, fp
 8011e34:	bfcc      	ite	gt
 8011e36:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011e3a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8011e3e:	464b      	mov	r3, r9
 8011e40:	4652      	mov	r2, sl
 8011e42:	4620      	mov	r0, r4
 8011e44:	4639      	mov	r1, r7
 8011e46:	f7ee fd29 	bl	800089c <__aeabi_ddiv>
 8011e4a:	ec41 0b10 	vmov	d0, r0, r1
 8011e4e:	b005      	add	sp, #20
 8011e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011e54 <__copybits>:
 8011e54:	3901      	subs	r1, #1
 8011e56:	b570      	push	{r4, r5, r6, lr}
 8011e58:	1149      	asrs	r1, r1, #5
 8011e5a:	6914      	ldr	r4, [r2, #16]
 8011e5c:	3101      	adds	r1, #1
 8011e5e:	f102 0314 	add.w	r3, r2, #20
 8011e62:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011e66:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011e6a:	1f05      	subs	r5, r0, #4
 8011e6c:	42a3      	cmp	r3, r4
 8011e6e:	d30c      	bcc.n	8011e8a <__copybits+0x36>
 8011e70:	1aa3      	subs	r3, r4, r2
 8011e72:	3b11      	subs	r3, #17
 8011e74:	f023 0303 	bic.w	r3, r3, #3
 8011e78:	3211      	adds	r2, #17
 8011e7a:	42a2      	cmp	r2, r4
 8011e7c:	bf88      	it	hi
 8011e7e:	2300      	movhi	r3, #0
 8011e80:	4418      	add	r0, r3
 8011e82:	2300      	movs	r3, #0
 8011e84:	4288      	cmp	r0, r1
 8011e86:	d305      	bcc.n	8011e94 <__copybits+0x40>
 8011e88:	bd70      	pop	{r4, r5, r6, pc}
 8011e8a:	f853 6b04 	ldr.w	r6, [r3], #4
 8011e8e:	f845 6f04 	str.w	r6, [r5, #4]!
 8011e92:	e7eb      	b.n	8011e6c <__copybits+0x18>
 8011e94:	f840 3b04 	str.w	r3, [r0], #4
 8011e98:	e7f4      	b.n	8011e84 <__copybits+0x30>

08011e9a <__any_on>:
 8011e9a:	f100 0214 	add.w	r2, r0, #20
 8011e9e:	6900      	ldr	r0, [r0, #16]
 8011ea0:	114b      	asrs	r3, r1, #5
 8011ea2:	4298      	cmp	r0, r3
 8011ea4:	b510      	push	{r4, lr}
 8011ea6:	db11      	blt.n	8011ecc <__any_on+0x32>
 8011ea8:	dd0a      	ble.n	8011ec0 <__any_on+0x26>
 8011eaa:	f011 011f 	ands.w	r1, r1, #31
 8011eae:	d007      	beq.n	8011ec0 <__any_on+0x26>
 8011eb0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011eb4:	fa24 f001 	lsr.w	r0, r4, r1
 8011eb8:	fa00 f101 	lsl.w	r1, r0, r1
 8011ebc:	428c      	cmp	r4, r1
 8011ebe:	d10b      	bne.n	8011ed8 <__any_on+0x3e>
 8011ec0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011ec4:	4293      	cmp	r3, r2
 8011ec6:	d803      	bhi.n	8011ed0 <__any_on+0x36>
 8011ec8:	2000      	movs	r0, #0
 8011eca:	bd10      	pop	{r4, pc}
 8011ecc:	4603      	mov	r3, r0
 8011ece:	e7f7      	b.n	8011ec0 <__any_on+0x26>
 8011ed0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011ed4:	2900      	cmp	r1, #0
 8011ed6:	d0f5      	beq.n	8011ec4 <__any_on+0x2a>
 8011ed8:	2001      	movs	r0, #1
 8011eda:	e7f6      	b.n	8011eca <__any_on+0x30>

08011edc <sulp>:
 8011edc:	b570      	push	{r4, r5, r6, lr}
 8011ede:	4604      	mov	r4, r0
 8011ee0:	460d      	mov	r5, r1
 8011ee2:	ec45 4b10 	vmov	d0, r4, r5
 8011ee6:	4616      	mov	r6, r2
 8011ee8:	f7ff feba 	bl	8011c60 <__ulp>
 8011eec:	ec51 0b10 	vmov	r0, r1, d0
 8011ef0:	b17e      	cbz	r6, 8011f12 <sulp+0x36>
 8011ef2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8011ef6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	dd09      	ble.n	8011f12 <sulp+0x36>
 8011efe:	051b      	lsls	r3, r3, #20
 8011f00:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8011f04:	2400      	movs	r4, #0
 8011f06:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8011f0a:	4622      	mov	r2, r4
 8011f0c:	462b      	mov	r3, r5
 8011f0e:	f7ee fb9b 	bl	8000648 <__aeabi_dmul>
 8011f12:	ec41 0b10 	vmov	d0, r0, r1
 8011f16:	bd70      	pop	{r4, r5, r6, pc}

08011f18 <_strtod_l>:
 8011f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f1c:	b09f      	sub	sp, #124	@ 0x7c
 8011f1e:	460c      	mov	r4, r1
 8011f20:	9217      	str	r2, [sp, #92]	@ 0x5c
 8011f22:	2200      	movs	r2, #0
 8011f24:	921a      	str	r2, [sp, #104]	@ 0x68
 8011f26:	9005      	str	r0, [sp, #20]
 8011f28:	f04f 0a00 	mov.w	sl, #0
 8011f2c:	f04f 0b00 	mov.w	fp, #0
 8011f30:	460a      	mov	r2, r1
 8011f32:	9219      	str	r2, [sp, #100]	@ 0x64
 8011f34:	7811      	ldrb	r1, [r2, #0]
 8011f36:	292b      	cmp	r1, #43	@ 0x2b
 8011f38:	d04a      	beq.n	8011fd0 <_strtod_l+0xb8>
 8011f3a:	d838      	bhi.n	8011fae <_strtod_l+0x96>
 8011f3c:	290d      	cmp	r1, #13
 8011f3e:	d832      	bhi.n	8011fa6 <_strtod_l+0x8e>
 8011f40:	2908      	cmp	r1, #8
 8011f42:	d832      	bhi.n	8011faa <_strtod_l+0x92>
 8011f44:	2900      	cmp	r1, #0
 8011f46:	d03b      	beq.n	8011fc0 <_strtod_l+0xa8>
 8011f48:	2200      	movs	r2, #0
 8011f4a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8011f4c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8011f4e:	782a      	ldrb	r2, [r5, #0]
 8011f50:	2a30      	cmp	r2, #48	@ 0x30
 8011f52:	f040 80b3 	bne.w	80120bc <_strtod_l+0x1a4>
 8011f56:	786a      	ldrb	r2, [r5, #1]
 8011f58:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8011f5c:	2a58      	cmp	r2, #88	@ 0x58
 8011f5e:	d16e      	bne.n	801203e <_strtod_l+0x126>
 8011f60:	9302      	str	r3, [sp, #8]
 8011f62:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011f64:	9301      	str	r3, [sp, #4]
 8011f66:	ab1a      	add	r3, sp, #104	@ 0x68
 8011f68:	9300      	str	r3, [sp, #0]
 8011f6a:	4a8e      	ldr	r2, [pc, #568]	@ (80121a4 <_strtod_l+0x28c>)
 8011f6c:	9805      	ldr	r0, [sp, #20]
 8011f6e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8011f70:	a919      	add	r1, sp, #100	@ 0x64
 8011f72:	f001 f927 	bl	80131c4 <__gethex>
 8011f76:	f010 060f 	ands.w	r6, r0, #15
 8011f7a:	4604      	mov	r4, r0
 8011f7c:	d005      	beq.n	8011f8a <_strtod_l+0x72>
 8011f7e:	2e06      	cmp	r6, #6
 8011f80:	d128      	bne.n	8011fd4 <_strtod_l+0xbc>
 8011f82:	3501      	adds	r5, #1
 8011f84:	2300      	movs	r3, #0
 8011f86:	9519      	str	r5, [sp, #100]	@ 0x64
 8011f88:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011f8a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	f040 858e 	bne.w	8012aae <_strtod_l+0xb96>
 8011f92:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011f94:	b1cb      	cbz	r3, 8011fca <_strtod_l+0xb2>
 8011f96:	4652      	mov	r2, sl
 8011f98:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8011f9c:	ec43 2b10 	vmov	d0, r2, r3
 8011fa0:	b01f      	add	sp, #124	@ 0x7c
 8011fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fa6:	2920      	cmp	r1, #32
 8011fa8:	d1ce      	bne.n	8011f48 <_strtod_l+0x30>
 8011faa:	3201      	adds	r2, #1
 8011fac:	e7c1      	b.n	8011f32 <_strtod_l+0x1a>
 8011fae:	292d      	cmp	r1, #45	@ 0x2d
 8011fb0:	d1ca      	bne.n	8011f48 <_strtod_l+0x30>
 8011fb2:	2101      	movs	r1, #1
 8011fb4:	910b      	str	r1, [sp, #44]	@ 0x2c
 8011fb6:	1c51      	adds	r1, r2, #1
 8011fb8:	9119      	str	r1, [sp, #100]	@ 0x64
 8011fba:	7852      	ldrb	r2, [r2, #1]
 8011fbc:	2a00      	cmp	r2, #0
 8011fbe:	d1c5      	bne.n	8011f4c <_strtod_l+0x34>
 8011fc0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011fc2:	9419      	str	r4, [sp, #100]	@ 0x64
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	f040 8570 	bne.w	8012aaa <_strtod_l+0xb92>
 8011fca:	4652      	mov	r2, sl
 8011fcc:	465b      	mov	r3, fp
 8011fce:	e7e5      	b.n	8011f9c <_strtod_l+0x84>
 8011fd0:	2100      	movs	r1, #0
 8011fd2:	e7ef      	b.n	8011fb4 <_strtod_l+0x9c>
 8011fd4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8011fd6:	b13a      	cbz	r2, 8011fe8 <_strtod_l+0xd0>
 8011fd8:	2135      	movs	r1, #53	@ 0x35
 8011fda:	a81c      	add	r0, sp, #112	@ 0x70
 8011fdc:	f7ff ff3a 	bl	8011e54 <__copybits>
 8011fe0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011fe2:	9805      	ldr	r0, [sp, #20]
 8011fe4:	f7ff fb08 	bl	80115f8 <_Bfree>
 8011fe8:	3e01      	subs	r6, #1
 8011fea:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8011fec:	2e04      	cmp	r6, #4
 8011fee:	d806      	bhi.n	8011ffe <_strtod_l+0xe6>
 8011ff0:	e8df f006 	tbb	[pc, r6]
 8011ff4:	201d0314 	.word	0x201d0314
 8011ff8:	14          	.byte	0x14
 8011ff9:	00          	.byte	0x00
 8011ffa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8011ffe:	05e1      	lsls	r1, r4, #23
 8012000:	bf48      	it	mi
 8012002:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8012006:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801200a:	0d1b      	lsrs	r3, r3, #20
 801200c:	051b      	lsls	r3, r3, #20
 801200e:	2b00      	cmp	r3, #0
 8012010:	d1bb      	bne.n	8011f8a <_strtod_l+0x72>
 8012012:	f7fe fb2f 	bl	8010674 <__errno>
 8012016:	2322      	movs	r3, #34	@ 0x22
 8012018:	6003      	str	r3, [r0, #0]
 801201a:	e7b6      	b.n	8011f8a <_strtod_l+0x72>
 801201c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8012020:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8012024:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8012028:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801202c:	e7e7      	b.n	8011ffe <_strtod_l+0xe6>
 801202e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80121ac <_strtod_l+0x294>
 8012032:	e7e4      	b.n	8011ffe <_strtod_l+0xe6>
 8012034:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8012038:	f04f 3aff 	mov.w	sl, #4294967295
 801203c:	e7df      	b.n	8011ffe <_strtod_l+0xe6>
 801203e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012040:	1c5a      	adds	r2, r3, #1
 8012042:	9219      	str	r2, [sp, #100]	@ 0x64
 8012044:	785b      	ldrb	r3, [r3, #1]
 8012046:	2b30      	cmp	r3, #48	@ 0x30
 8012048:	d0f9      	beq.n	801203e <_strtod_l+0x126>
 801204a:	2b00      	cmp	r3, #0
 801204c:	d09d      	beq.n	8011f8a <_strtod_l+0x72>
 801204e:	2301      	movs	r3, #1
 8012050:	9309      	str	r3, [sp, #36]	@ 0x24
 8012052:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012054:	930c      	str	r3, [sp, #48]	@ 0x30
 8012056:	2300      	movs	r3, #0
 8012058:	9308      	str	r3, [sp, #32]
 801205a:	930a      	str	r3, [sp, #40]	@ 0x28
 801205c:	461f      	mov	r7, r3
 801205e:	220a      	movs	r2, #10
 8012060:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8012062:	7805      	ldrb	r5, [r0, #0]
 8012064:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8012068:	b2d9      	uxtb	r1, r3
 801206a:	2909      	cmp	r1, #9
 801206c:	d928      	bls.n	80120c0 <_strtod_l+0x1a8>
 801206e:	494e      	ldr	r1, [pc, #312]	@ (80121a8 <_strtod_l+0x290>)
 8012070:	2201      	movs	r2, #1
 8012072:	f000 ffd5 	bl	8013020 <strncmp>
 8012076:	2800      	cmp	r0, #0
 8012078:	d032      	beq.n	80120e0 <_strtod_l+0x1c8>
 801207a:	2000      	movs	r0, #0
 801207c:	462a      	mov	r2, r5
 801207e:	4681      	mov	r9, r0
 8012080:	463d      	mov	r5, r7
 8012082:	4603      	mov	r3, r0
 8012084:	2a65      	cmp	r2, #101	@ 0x65
 8012086:	d001      	beq.n	801208c <_strtod_l+0x174>
 8012088:	2a45      	cmp	r2, #69	@ 0x45
 801208a:	d114      	bne.n	80120b6 <_strtod_l+0x19e>
 801208c:	b91d      	cbnz	r5, 8012096 <_strtod_l+0x17e>
 801208e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012090:	4302      	orrs	r2, r0
 8012092:	d095      	beq.n	8011fc0 <_strtod_l+0xa8>
 8012094:	2500      	movs	r5, #0
 8012096:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8012098:	1c62      	adds	r2, r4, #1
 801209a:	9219      	str	r2, [sp, #100]	@ 0x64
 801209c:	7862      	ldrb	r2, [r4, #1]
 801209e:	2a2b      	cmp	r2, #43	@ 0x2b
 80120a0:	d077      	beq.n	8012192 <_strtod_l+0x27a>
 80120a2:	2a2d      	cmp	r2, #45	@ 0x2d
 80120a4:	d07b      	beq.n	801219e <_strtod_l+0x286>
 80120a6:	f04f 0c00 	mov.w	ip, #0
 80120aa:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80120ae:	2909      	cmp	r1, #9
 80120b0:	f240 8082 	bls.w	80121b8 <_strtod_l+0x2a0>
 80120b4:	9419      	str	r4, [sp, #100]	@ 0x64
 80120b6:	f04f 0800 	mov.w	r8, #0
 80120ba:	e0a2      	b.n	8012202 <_strtod_l+0x2ea>
 80120bc:	2300      	movs	r3, #0
 80120be:	e7c7      	b.n	8012050 <_strtod_l+0x138>
 80120c0:	2f08      	cmp	r7, #8
 80120c2:	bfd5      	itete	le
 80120c4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80120c6:	9908      	ldrgt	r1, [sp, #32]
 80120c8:	fb02 3301 	mlale	r3, r2, r1, r3
 80120cc:	fb02 3301 	mlagt	r3, r2, r1, r3
 80120d0:	f100 0001 	add.w	r0, r0, #1
 80120d4:	bfd4      	ite	le
 80120d6:	930a      	strle	r3, [sp, #40]	@ 0x28
 80120d8:	9308      	strgt	r3, [sp, #32]
 80120da:	3701      	adds	r7, #1
 80120dc:	9019      	str	r0, [sp, #100]	@ 0x64
 80120de:	e7bf      	b.n	8012060 <_strtod_l+0x148>
 80120e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80120e2:	1c5a      	adds	r2, r3, #1
 80120e4:	9219      	str	r2, [sp, #100]	@ 0x64
 80120e6:	785a      	ldrb	r2, [r3, #1]
 80120e8:	b37f      	cbz	r7, 801214a <_strtod_l+0x232>
 80120ea:	4681      	mov	r9, r0
 80120ec:	463d      	mov	r5, r7
 80120ee:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80120f2:	2b09      	cmp	r3, #9
 80120f4:	d912      	bls.n	801211c <_strtod_l+0x204>
 80120f6:	2301      	movs	r3, #1
 80120f8:	e7c4      	b.n	8012084 <_strtod_l+0x16c>
 80120fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80120fc:	1c5a      	adds	r2, r3, #1
 80120fe:	9219      	str	r2, [sp, #100]	@ 0x64
 8012100:	785a      	ldrb	r2, [r3, #1]
 8012102:	3001      	adds	r0, #1
 8012104:	2a30      	cmp	r2, #48	@ 0x30
 8012106:	d0f8      	beq.n	80120fa <_strtod_l+0x1e2>
 8012108:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801210c:	2b08      	cmp	r3, #8
 801210e:	f200 84d3 	bhi.w	8012ab8 <_strtod_l+0xba0>
 8012112:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012114:	930c      	str	r3, [sp, #48]	@ 0x30
 8012116:	4681      	mov	r9, r0
 8012118:	2000      	movs	r0, #0
 801211a:	4605      	mov	r5, r0
 801211c:	3a30      	subs	r2, #48	@ 0x30
 801211e:	f100 0301 	add.w	r3, r0, #1
 8012122:	d02a      	beq.n	801217a <_strtod_l+0x262>
 8012124:	4499      	add	r9, r3
 8012126:	eb00 0c05 	add.w	ip, r0, r5
 801212a:	462b      	mov	r3, r5
 801212c:	210a      	movs	r1, #10
 801212e:	4563      	cmp	r3, ip
 8012130:	d10d      	bne.n	801214e <_strtod_l+0x236>
 8012132:	1c69      	adds	r1, r5, #1
 8012134:	4401      	add	r1, r0
 8012136:	4428      	add	r0, r5
 8012138:	2808      	cmp	r0, #8
 801213a:	dc16      	bgt.n	801216a <_strtod_l+0x252>
 801213c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801213e:	230a      	movs	r3, #10
 8012140:	fb03 2300 	mla	r3, r3, r0, r2
 8012144:	930a      	str	r3, [sp, #40]	@ 0x28
 8012146:	2300      	movs	r3, #0
 8012148:	e018      	b.n	801217c <_strtod_l+0x264>
 801214a:	4638      	mov	r0, r7
 801214c:	e7da      	b.n	8012104 <_strtod_l+0x1ec>
 801214e:	2b08      	cmp	r3, #8
 8012150:	f103 0301 	add.w	r3, r3, #1
 8012154:	dc03      	bgt.n	801215e <_strtod_l+0x246>
 8012156:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8012158:	434e      	muls	r6, r1
 801215a:	960a      	str	r6, [sp, #40]	@ 0x28
 801215c:	e7e7      	b.n	801212e <_strtod_l+0x216>
 801215e:	2b10      	cmp	r3, #16
 8012160:	bfde      	ittt	le
 8012162:	9e08      	ldrle	r6, [sp, #32]
 8012164:	434e      	mulle	r6, r1
 8012166:	9608      	strle	r6, [sp, #32]
 8012168:	e7e1      	b.n	801212e <_strtod_l+0x216>
 801216a:	280f      	cmp	r0, #15
 801216c:	dceb      	bgt.n	8012146 <_strtod_l+0x22e>
 801216e:	9808      	ldr	r0, [sp, #32]
 8012170:	230a      	movs	r3, #10
 8012172:	fb03 2300 	mla	r3, r3, r0, r2
 8012176:	9308      	str	r3, [sp, #32]
 8012178:	e7e5      	b.n	8012146 <_strtod_l+0x22e>
 801217a:	4629      	mov	r1, r5
 801217c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801217e:	1c50      	adds	r0, r2, #1
 8012180:	9019      	str	r0, [sp, #100]	@ 0x64
 8012182:	7852      	ldrb	r2, [r2, #1]
 8012184:	4618      	mov	r0, r3
 8012186:	460d      	mov	r5, r1
 8012188:	e7b1      	b.n	80120ee <_strtod_l+0x1d6>
 801218a:	f04f 0900 	mov.w	r9, #0
 801218e:	2301      	movs	r3, #1
 8012190:	e77d      	b.n	801208e <_strtod_l+0x176>
 8012192:	f04f 0c00 	mov.w	ip, #0
 8012196:	1ca2      	adds	r2, r4, #2
 8012198:	9219      	str	r2, [sp, #100]	@ 0x64
 801219a:	78a2      	ldrb	r2, [r4, #2]
 801219c:	e785      	b.n	80120aa <_strtod_l+0x192>
 801219e:	f04f 0c01 	mov.w	ip, #1
 80121a2:	e7f8      	b.n	8012196 <_strtod_l+0x27e>
 80121a4:	08014b40 	.word	0x08014b40
 80121a8:	08014b28 	.word	0x08014b28
 80121ac:	7ff00000 	.word	0x7ff00000
 80121b0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80121b2:	1c51      	adds	r1, r2, #1
 80121b4:	9119      	str	r1, [sp, #100]	@ 0x64
 80121b6:	7852      	ldrb	r2, [r2, #1]
 80121b8:	2a30      	cmp	r2, #48	@ 0x30
 80121ba:	d0f9      	beq.n	80121b0 <_strtod_l+0x298>
 80121bc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80121c0:	2908      	cmp	r1, #8
 80121c2:	f63f af78 	bhi.w	80120b6 <_strtod_l+0x19e>
 80121c6:	3a30      	subs	r2, #48	@ 0x30
 80121c8:	920e      	str	r2, [sp, #56]	@ 0x38
 80121ca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80121cc:	920f      	str	r2, [sp, #60]	@ 0x3c
 80121ce:	f04f 080a 	mov.w	r8, #10
 80121d2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80121d4:	1c56      	adds	r6, r2, #1
 80121d6:	9619      	str	r6, [sp, #100]	@ 0x64
 80121d8:	7852      	ldrb	r2, [r2, #1]
 80121da:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80121de:	f1be 0f09 	cmp.w	lr, #9
 80121e2:	d939      	bls.n	8012258 <_strtod_l+0x340>
 80121e4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80121e6:	1a76      	subs	r6, r6, r1
 80121e8:	2e08      	cmp	r6, #8
 80121ea:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80121ee:	dc03      	bgt.n	80121f8 <_strtod_l+0x2e0>
 80121f0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80121f2:	4588      	cmp	r8, r1
 80121f4:	bfa8      	it	ge
 80121f6:	4688      	movge	r8, r1
 80121f8:	f1bc 0f00 	cmp.w	ip, #0
 80121fc:	d001      	beq.n	8012202 <_strtod_l+0x2ea>
 80121fe:	f1c8 0800 	rsb	r8, r8, #0
 8012202:	2d00      	cmp	r5, #0
 8012204:	d14e      	bne.n	80122a4 <_strtod_l+0x38c>
 8012206:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012208:	4308      	orrs	r0, r1
 801220a:	f47f aebe 	bne.w	8011f8a <_strtod_l+0x72>
 801220e:	2b00      	cmp	r3, #0
 8012210:	f47f aed6 	bne.w	8011fc0 <_strtod_l+0xa8>
 8012214:	2a69      	cmp	r2, #105	@ 0x69
 8012216:	d028      	beq.n	801226a <_strtod_l+0x352>
 8012218:	dc25      	bgt.n	8012266 <_strtod_l+0x34e>
 801221a:	2a49      	cmp	r2, #73	@ 0x49
 801221c:	d025      	beq.n	801226a <_strtod_l+0x352>
 801221e:	2a4e      	cmp	r2, #78	@ 0x4e
 8012220:	f47f aece 	bne.w	8011fc0 <_strtod_l+0xa8>
 8012224:	499b      	ldr	r1, [pc, #620]	@ (8012494 <_strtod_l+0x57c>)
 8012226:	a819      	add	r0, sp, #100	@ 0x64
 8012228:	f001 f9ee 	bl	8013608 <__match>
 801222c:	2800      	cmp	r0, #0
 801222e:	f43f aec7 	beq.w	8011fc0 <_strtod_l+0xa8>
 8012232:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012234:	781b      	ldrb	r3, [r3, #0]
 8012236:	2b28      	cmp	r3, #40	@ 0x28
 8012238:	d12e      	bne.n	8012298 <_strtod_l+0x380>
 801223a:	4997      	ldr	r1, [pc, #604]	@ (8012498 <_strtod_l+0x580>)
 801223c:	aa1c      	add	r2, sp, #112	@ 0x70
 801223e:	a819      	add	r0, sp, #100	@ 0x64
 8012240:	f001 f9f6 	bl	8013630 <__hexnan>
 8012244:	2805      	cmp	r0, #5
 8012246:	d127      	bne.n	8012298 <_strtod_l+0x380>
 8012248:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801224a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 801224e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8012252:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8012256:	e698      	b.n	8011f8a <_strtod_l+0x72>
 8012258:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801225a:	fb08 2101 	mla	r1, r8, r1, r2
 801225e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8012262:	920e      	str	r2, [sp, #56]	@ 0x38
 8012264:	e7b5      	b.n	80121d2 <_strtod_l+0x2ba>
 8012266:	2a6e      	cmp	r2, #110	@ 0x6e
 8012268:	e7da      	b.n	8012220 <_strtod_l+0x308>
 801226a:	498c      	ldr	r1, [pc, #560]	@ (801249c <_strtod_l+0x584>)
 801226c:	a819      	add	r0, sp, #100	@ 0x64
 801226e:	f001 f9cb 	bl	8013608 <__match>
 8012272:	2800      	cmp	r0, #0
 8012274:	f43f aea4 	beq.w	8011fc0 <_strtod_l+0xa8>
 8012278:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801227a:	4989      	ldr	r1, [pc, #548]	@ (80124a0 <_strtod_l+0x588>)
 801227c:	3b01      	subs	r3, #1
 801227e:	a819      	add	r0, sp, #100	@ 0x64
 8012280:	9319      	str	r3, [sp, #100]	@ 0x64
 8012282:	f001 f9c1 	bl	8013608 <__match>
 8012286:	b910      	cbnz	r0, 801228e <_strtod_l+0x376>
 8012288:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801228a:	3301      	adds	r3, #1
 801228c:	9319      	str	r3, [sp, #100]	@ 0x64
 801228e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80124b0 <_strtod_l+0x598>
 8012292:	f04f 0a00 	mov.w	sl, #0
 8012296:	e678      	b.n	8011f8a <_strtod_l+0x72>
 8012298:	4882      	ldr	r0, [pc, #520]	@ (80124a4 <_strtod_l+0x58c>)
 801229a:	f000 fef1 	bl	8013080 <nan>
 801229e:	ec5b ab10 	vmov	sl, fp, d0
 80122a2:	e672      	b.n	8011f8a <_strtod_l+0x72>
 80122a4:	eba8 0309 	sub.w	r3, r8, r9
 80122a8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80122aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80122ac:	2f00      	cmp	r7, #0
 80122ae:	bf08      	it	eq
 80122b0:	462f      	moveq	r7, r5
 80122b2:	2d10      	cmp	r5, #16
 80122b4:	462c      	mov	r4, r5
 80122b6:	bfa8      	it	ge
 80122b8:	2410      	movge	r4, #16
 80122ba:	f7ee f94b 	bl	8000554 <__aeabi_ui2d>
 80122be:	2d09      	cmp	r5, #9
 80122c0:	4682      	mov	sl, r0
 80122c2:	468b      	mov	fp, r1
 80122c4:	dc13      	bgt.n	80122ee <_strtod_l+0x3d6>
 80122c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	f43f ae5e 	beq.w	8011f8a <_strtod_l+0x72>
 80122ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80122d0:	dd78      	ble.n	80123c4 <_strtod_l+0x4ac>
 80122d2:	2b16      	cmp	r3, #22
 80122d4:	dc5f      	bgt.n	8012396 <_strtod_l+0x47e>
 80122d6:	4974      	ldr	r1, [pc, #464]	@ (80124a8 <_strtod_l+0x590>)
 80122d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80122dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80122e0:	4652      	mov	r2, sl
 80122e2:	465b      	mov	r3, fp
 80122e4:	f7ee f9b0 	bl	8000648 <__aeabi_dmul>
 80122e8:	4682      	mov	sl, r0
 80122ea:	468b      	mov	fp, r1
 80122ec:	e64d      	b.n	8011f8a <_strtod_l+0x72>
 80122ee:	4b6e      	ldr	r3, [pc, #440]	@ (80124a8 <_strtod_l+0x590>)
 80122f0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80122f4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80122f8:	f7ee f9a6 	bl	8000648 <__aeabi_dmul>
 80122fc:	4682      	mov	sl, r0
 80122fe:	9808      	ldr	r0, [sp, #32]
 8012300:	468b      	mov	fp, r1
 8012302:	f7ee f927 	bl	8000554 <__aeabi_ui2d>
 8012306:	4602      	mov	r2, r0
 8012308:	460b      	mov	r3, r1
 801230a:	4650      	mov	r0, sl
 801230c:	4659      	mov	r1, fp
 801230e:	f7ed ffe5 	bl	80002dc <__adddf3>
 8012312:	2d0f      	cmp	r5, #15
 8012314:	4682      	mov	sl, r0
 8012316:	468b      	mov	fp, r1
 8012318:	ddd5      	ble.n	80122c6 <_strtod_l+0x3ae>
 801231a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801231c:	1b2c      	subs	r4, r5, r4
 801231e:	441c      	add	r4, r3
 8012320:	2c00      	cmp	r4, #0
 8012322:	f340 8096 	ble.w	8012452 <_strtod_l+0x53a>
 8012326:	f014 030f 	ands.w	r3, r4, #15
 801232a:	d00a      	beq.n	8012342 <_strtod_l+0x42a>
 801232c:	495e      	ldr	r1, [pc, #376]	@ (80124a8 <_strtod_l+0x590>)
 801232e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012332:	4652      	mov	r2, sl
 8012334:	465b      	mov	r3, fp
 8012336:	e9d1 0100 	ldrd	r0, r1, [r1]
 801233a:	f7ee f985 	bl	8000648 <__aeabi_dmul>
 801233e:	4682      	mov	sl, r0
 8012340:	468b      	mov	fp, r1
 8012342:	f034 040f 	bics.w	r4, r4, #15
 8012346:	d073      	beq.n	8012430 <_strtod_l+0x518>
 8012348:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 801234c:	dd48      	ble.n	80123e0 <_strtod_l+0x4c8>
 801234e:	2400      	movs	r4, #0
 8012350:	46a0      	mov	r8, r4
 8012352:	940a      	str	r4, [sp, #40]	@ 0x28
 8012354:	46a1      	mov	r9, r4
 8012356:	9a05      	ldr	r2, [sp, #20]
 8012358:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80124b0 <_strtod_l+0x598>
 801235c:	2322      	movs	r3, #34	@ 0x22
 801235e:	6013      	str	r3, [r2, #0]
 8012360:	f04f 0a00 	mov.w	sl, #0
 8012364:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012366:	2b00      	cmp	r3, #0
 8012368:	f43f ae0f 	beq.w	8011f8a <_strtod_l+0x72>
 801236c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801236e:	9805      	ldr	r0, [sp, #20]
 8012370:	f7ff f942 	bl	80115f8 <_Bfree>
 8012374:	9805      	ldr	r0, [sp, #20]
 8012376:	4649      	mov	r1, r9
 8012378:	f7ff f93e 	bl	80115f8 <_Bfree>
 801237c:	9805      	ldr	r0, [sp, #20]
 801237e:	4641      	mov	r1, r8
 8012380:	f7ff f93a 	bl	80115f8 <_Bfree>
 8012384:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012386:	9805      	ldr	r0, [sp, #20]
 8012388:	f7ff f936 	bl	80115f8 <_Bfree>
 801238c:	9805      	ldr	r0, [sp, #20]
 801238e:	4621      	mov	r1, r4
 8012390:	f7ff f932 	bl	80115f8 <_Bfree>
 8012394:	e5f9      	b.n	8011f8a <_strtod_l+0x72>
 8012396:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012398:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 801239c:	4293      	cmp	r3, r2
 801239e:	dbbc      	blt.n	801231a <_strtod_l+0x402>
 80123a0:	4c41      	ldr	r4, [pc, #260]	@ (80124a8 <_strtod_l+0x590>)
 80123a2:	f1c5 050f 	rsb	r5, r5, #15
 80123a6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80123aa:	4652      	mov	r2, sl
 80123ac:	465b      	mov	r3, fp
 80123ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80123b2:	f7ee f949 	bl	8000648 <__aeabi_dmul>
 80123b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80123b8:	1b5d      	subs	r5, r3, r5
 80123ba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80123be:	e9d4 2300 	ldrd	r2, r3, [r4]
 80123c2:	e78f      	b.n	80122e4 <_strtod_l+0x3cc>
 80123c4:	3316      	adds	r3, #22
 80123c6:	dba8      	blt.n	801231a <_strtod_l+0x402>
 80123c8:	4b37      	ldr	r3, [pc, #220]	@ (80124a8 <_strtod_l+0x590>)
 80123ca:	eba9 0808 	sub.w	r8, r9, r8
 80123ce:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80123d2:	e9d8 2300 	ldrd	r2, r3, [r8]
 80123d6:	4650      	mov	r0, sl
 80123d8:	4659      	mov	r1, fp
 80123da:	f7ee fa5f 	bl	800089c <__aeabi_ddiv>
 80123de:	e783      	b.n	80122e8 <_strtod_l+0x3d0>
 80123e0:	4b32      	ldr	r3, [pc, #200]	@ (80124ac <_strtod_l+0x594>)
 80123e2:	9308      	str	r3, [sp, #32]
 80123e4:	2300      	movs	r3, #0
 80123e6:	1124      	asrs	r4, r4, #4
 80123e8:	4650      	mov	r0, sl
 80123ea:	4659      	mov	r1, fp
 80123ec:	461e      	mov	r6, r3
 80123ee:	2c01      	cmp	r4, #1
 80123f0:	dc21      	bgt.n	8012436 <_strtod_l+0x51e>
 80123f2:	b10b      	cbz	r3, 80123f8 <_strtod_l+0x4e0>
 80123f4:	4682      	mov	sl, r0
 80123f6:	468b      	mov	fp, r1
 80123f8:	492c      	ldr	r1, [pc, #176]	@ (80124ac <_strtod_l+0x594>)
 80123fa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80123fe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8012402:	4652      	mov	r2, sl
 8012404:	465b      	mov	r3, fp
 8012406:	e9d1 0100 	ldrd	r0, r1, [r1]
 801240a:	f7ee f91d 	bl	8000648 <__aeabi_dmul>
 801240e:	4b28      	ldr	r3, [pc, #160]	@ (80124b0 <_strtod_l+0x598>)
 8012410:	460a      	mov	r2, r1
 8012412:	400b      	ands	r3, r1
 8012414:	4927      	ldr	r1, [pc, #156]	@ (80124b4 <_strtod_l+0x59c>)
 8012416:	428b      	cmp	r3, r1
 8012418:	4682      	mov	sl, r0
 801241a:	d898      	bhi.n	801234e <_strtod_l+0x436>
 801241c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8012420:	428b      	cmp	r3, r1
 8012422:	bf86      	itte	hi
 8012424:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80124b8 <_strtod_l+0x5a0>
 8012428:	f04f 3aff 	movhi.w	sl, #4294967295
 801242c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8012430:	2300      	movs	r3, #0
 8012432:	9308      	str	r3, [sp, #32]
 8012434:	e07a      	b.n	801252c <_strtod_l+0x614>
 8012436:	07e2      	lsls	r2, r4, #31
 8012438:	d505      	bpl.n	8012446 <_strtod_l+0x52e>
 801243a:	9b08      	ldr	r3, [sp, #32]
 801243c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012440:	f7ee f902 	bl	8000648 <__aeabi_dmul>
 8012444:	2301      	movs	r3, #1
 8012446:	9a08      	ldr	r2, [sp, #32]
 8012448:	3208      	adds	r2, #8
 801244a:	3601      	adds	r6, #1
 801244c:	1064      	asrs	r4, r4, #1
 801244e:	9208      	str	r2, [sp, #32]
 8012450:	e7cd      	b.n	80123ee <_strtod_l+0x4d6>
 8012452:	d0ed      	beq.n	8012430 <_strtod_l+0x518>
 8012454:	4264      	negs	r4, r4
 8012456:	f014 020f 	ands.w	r2, r4, #15
 801245a:	d00a      	beq.n	8012472 <_strtod_l+0x55a>
 801245c:	4b12      	ldr	r3, [pc, #72]	@ (80124a8 <_strtod_l+0x590>)
 801245e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012462:	4650      	mov	r0, sl
 8012464:	4659      	mov	r1, fp
 8012466:	e9d3 2300 	ldrd	r2, r3, [r3]
 801246a:	f7ee fa17 	bl	800089c <__aeabi_ddiv>
 801246e:	4682      	mov	sl, r0
 8012470:	468b      	mov	fp, r1
 8012472:	1124      	asrs	r4, r4, #4
 8012474:	d0dc      	beq.n	8012430 <_strtod_l+0x518>
 8012476:	2c1f      	cmp	r4, #31
 8012478:	dd20      	ble.n	80124bc <_strtod_l+0x5a4>
 801247a:	2400      	movs	r4, #0
 801247c:	46a0      	mov	r8, r4
 801247e:	940a      	str	r4, [sp, #40]	@ 0x28
 8012480:	46a1      	mov	r9, r4
 8012482:	9a05      	ldr	r2, [sp, #20]
 8012484:	2322      	movs	r3, #34	@ 0x22
 8012486:	f04f 0a00 	mov.w	sl, #0
 801248a:	f04f 0b00 	mov.w	fp, #0
 801248e:	6013      	str	r3, [r2, #0]
 8012490:	e768      	b.n	8012364 <_strtod_l+0x44c>
 8012492:	bf00      	nop
 8012494:	08014919 	.word	0x08014919
 8012498:	08014b2c 	.word	0x08014b2c
 801249c:	08014911 	.word	0x08014911
 80124a0:	08014948 	.word	0x08014948
 80124a4:	08014cd5 	.word	0x08014cd5
 80124a8:	08014a60 	.word	0x08014a60
 80124ac:	08014a38 	.word	0x08014a38
 80124b0:	7ff00000 	.word	0x7ff00000
 80124b4:	7ca00000 	.word	0x7ca00000
 80124b8:	7fefffff 	.word	0x7fefffff
 80124bc:	f014 0310 	ands.w	r3, r4, #16
 80124c0:	bf18      	it	ne
 80124c2:	236a      	movne	r3, #106	@ 0x6a
 80124c4:	4ea9      	ldr	r6, [pc, #676]	@ (801276c <_strtod_l+0x854>)
 80124c6:	9308      	str	r3, [sp, #32]
 80124c8:	4650      	mov	r0, sl
 80124ca:	4659      	mov	r1, fp
 80124cc:	2300      	movs	r3, #0
 80124ce:	07e2      	lsls	r2, r4, #31
 80124d0:	d504      	bpl.n	80124dc <_strtod_l+0x5c4>
 80124d2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80124d6:	f7ee f8b7 	bl	8000648 <__aeabi_dmul>
 80124da:	2301      	movs	r3, #1
 80124dc:	1064      	asrs	r4, r4, #1
 80124de:	f106 0608 	add.w	r6, r6, #8
 80124e2:	d1f4      	bne.n	80124ce <_strtod_l+0x5b6>
 80124e4:	b10b      	cbz	r3, 80124ea <_strtod_l+0x5d2>
 80124e6:	4682      	mov	sl, r0
 80124e8:	468b      	mov	fp, r1
 80124ea:	9b08      	ldr	r3, [sp, #32]
 80124ec:	b1b3      	cbz	r3, 801251c <_strtod_l+0x604>
 80124ee:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80124f2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	4659      	mov	r1, fp
 80124fa:	dd0f      	ble.n	801251c <_strtod_l+0x604>
 80124fc:	2b1f      	cmp	r3, #31
 80124fe:	dd55      	ble.n	80125ac <_strtod_l+0x694>
 8012500:	2b34      	cmp	r3, #52	@ 0x34
 8012502:	bfde      	ittt	le
 8012504:	f04f 33ff 	movle.w	r3, #4294967295
 8012508:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 801250c:	4093      	lslle	r3, r2
 801250e:	f04f 0a00 	mov.w	sl, #0
 8012512:	bfcc      	ite	gt
 8012514:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8012518:	ea03 0b01 	andle.w	fp, r3, r1
 801251c:	2200      	movs	r2, #0
 801251e:	2300      	movs	r3, #0
 8012520:	4650      	mov	r0, sl
 8012522:	4659      	mov	r1, fp
 8012524:	f7ee faf8 	bl	8000b18 <__aeabi_dcmpeq>
 8012528:	2800      	cmp	r0, #0
 801252a:	d1a6      	bne.n	801247a <_strtod_l+0x562>
 801252c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801252e:	9300      	str	r3, [sp, #0]
 8012530:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012532:	9805      	ldr	r0, [sp, #20]
 8012534:	462b      	mov	r3, r5
 8012536:	463a      	mov	r2, r7
 8012538:	f7ff f8c6 	bl	80116c8 <__s2b>
 801253c:	900a      	str	r0, [sp, #40]	@ 0x28
 801253e:	2800      	cmp	r0, #0
 8012540:	f43f af05 	beq.w	801234e <_strtod_l+0x436>
 8012544:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012546:	2a00      	cmp	r2, #0
 8012548:	eba9 0308 	sub.w	r3, r9, r8
 801254c:	bfa8      	it	ge
 801254e:	2300      	movge	r3, #0
 8012550:	9312      	str	r3, [sp, #72]	@ 0x48
 8012552:	2400      	movs	r4, #0
 8012554:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8012558:	9316      	str	r3, [sp, #88]	@ 0x58
 801255a:	46a0      	mov	r8, r4
 801255c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801255e:	9805      	ldr	r0, [sp, #20]
 8012560:	6859      	ldr	r1, [r3, #4]
 8012562:	f7ff f809 	bl	8011578 <_Balloc>
 8012566:	4681      	mov	r9, r0
 8012568:	2800      	cmp	r0, #0
 801256a:	f43f aef4 	beq.w	8012356 <_strtod_l+0x43e>
 801256e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012570:	691a      	ldr	r2, [r3, #16]
 8012572:	3202      	adds	r2, #2
 8012574:	f103 010c 	add.w	r1, r3, #12
 8012578:	0092      	lsls	r2, r2, #2
 801257a:	300c      	adds	r0, #12
 801257c:	f000 fd72 	bl	8013064 <memcpy>
 8012580:	ec4b ab10 	vmov	d0, sl, fp
 8012584:	9805      	ldr	r0, [sp, #20]
 8012586:	aa1c      	add	r2, sp, #112	@ 0x70
 8012588:	a91b      	add	r1, sp, #108	@ 0x6c
 801258a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 801258e:	f7ff fbd7 	bl	8011d40 <__d2b>
 8012592:	901a      	str	r0, [sp, #104]	@ 0x68
 8012594:	2800      	cmp	r0, #0
 8012596:	f43f aede 	beq.w	8012356 <_strtod_l+0x43e>
 801259a:	9805      	ldr	r0, [sp, #20]
 801259c:	2101      	movs	r1, #1
 801259e:	f7ff f929 	bl	80117f4 <__i2b>
 80125a2:	4680      	mov	r8, r0
 80125a4:	b948      	cbnz	r0, 80125ba <_strtod_l+0x6a2>
 80125a6:	f04f 0800 	mov.w	r8, #0
 80125aa:	e6d4      	b.n	8012356 <_strtod_l+0x43e>
 80125ac:	f04f 32ff 	mov.w	r2, #4294967295
 80125b0:	fa02 f303 	lsl.w	r3, r2, r3
 80125b4:	ea03 0a0a 	and.w	sl, r3, sl
 80125b8:	e7b0      	b.n	801251c <_strtod_l+0x604>
 80125ba:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80125bc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80125be:	2d00      	cmp	r5, #0
 80125c0:	bfab      	itete	ge
 80125c2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80125c4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80125c6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80125c8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80125ca:	bfac      	ite	ge
 80125cc:	18ef      	addge	r7, r5, r3
 80125ce:	1b5e      	sublt	r6, r3, r5
 80125d0:	9b08      	ldr	r3, [sp, #32]
 80125d2:	1aed      	subs	r5, r5, r3
 80125d4:	4415      	add	r5, r2
 80125d6:	4b66      	ldr	r3, [pc, #408]	@ (8012770 <_strtod_l+0x858>)
 80125d8:	3d01      	subs	r5, #1
 80125da:	429d      	cmp	r5, r3
 80125dc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80125e0:	da50      	bge.n	8012684 <_strtod_l+0x76c>
 80125e2:	1b5b      	subs	r3, r3, r5
 80125e4:	2b1f      	cmp	r3, #31
 80125e6:	eba2 0203 	sub.w	r2, r2, r3
 80125ea:	f04f 0101 	mov.w	r1, #1
 80125ee:	dc3d      	bgt.n	801266c <_strtod_l+0x754>
 80125f0:	fa01 f303 	lsl.w	r3, r1, r3
 80125f4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80125f6:	2300      	movs	r3, #0
 80125f8:	9310      	str	r3, [sp, #64]	@ 0x40
 80125fa:	18bd      	adds	r5, r7, r2
 80125fc:	9b08      	ldr	r3, [sp, #32]
 80125fe:	42af      	cmp	r7, r5
 8012600:	4416      	add	r6, r2
 8012602:	441e      	add	r6, r3
 8012604:	463b      	mov	r3, r7
 8012606:	bfa8      	it	ge
 8012608:	462b      	movge	r3, r5
 801260a:	42b3      	cmp	r3, r6
 801260c:	bfa8      	it	ge
 801260e:	4633      	movge	r3, r6
 8012610:	2b00      	cmp	r3, #0
 8012612:	bfc2      	ittt	gt
 8012614:	1aed      	subgt	r5, r5, r3
 8012616:	1af6      	subgt	r6, r6, r3
 8012618:	1aff      	subgt	r7, r7, r3
 801261a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801261c:	2b00      	cmp	r3, #0
 801261e:	dd16      	ble.n	801264e <_strtod_l+0x736>
 8012620:	4641      	mov	r1, r8
 8012622:	9805      	ldr	r0, [sp, #20]
 8012624:	461a      	mov	r2, r3
 8012626:	f7ff f9a5 	bl	8011974 <__pow5mult>
 801262a:	4680      	mov	r8, r0
 801262c:	2800      	cmp	r0, #0
 801262e:	d0ba      	beq.n	80125a6 <_strtod_l+0x68e>
 8012630:	4601      	mov	r1, r0
 8012632:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8012634:	9805      	ldr	r0, [sp, #20]
 8012636:	f7ff f8f3 	bl	8011820 <__multiply>
 801263a:	900e      	str	r0, [sp, #56]	@ 0x38
 801263c:	2800      	cmp	r0, #0
 801263e:	f43f ae8a 	beq.w	8012356 <_strtod_l+0x43e>
 8012642:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012644:	9805      	ldr	r0, [sp, #20]
 8012646:	f7fe ffd7 	bl	80115f8 <_Bfree>
 801264a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801264c:	931a      	str	r3, [sp, #104]	@ 0x68
 801264e:	2d00      	cmp	r5, #0
 8012650:	dc1d      	bgt.n	801268e <_strtod_l+0x776>
 8012652:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012654:	2b00      	cmp	r3, #0
 8012656:	dd23      	ble.n	80126a0 <_strtod_l+0x788>
 8012658:	4649      	mov	r1, r9
 801265a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801265c:	9805      	ldr	r0, [sp, #20]
 801265e:	f7ff f989 	bl	8011974 <__pow5mult>
 8012662:	4681      	mov	r9, r0
 8012664:	b9e0      	cbnz	r0, 80126a0 <_strtod_l+0x788>
 8012666:	f04f 0900 	mov.w	r9, #0
 801266a:	e674      	b.n	8012356 <_strtod_l+0x43e>
 801266c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8012670:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8012674:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8012678:	35e2      	adds	r5, #226	@ 0xe2
 801267a:	fa01 f305 	lsl.w	r3, r1, r5
 801267e:	9310      	str	r3, [sp, #64]	@ 0x40
 8012680:	9113      	str	r1, [sp, #76]	@ 0x4c
 8012682:	e7ba      	b.n	80125fa <_strtod_l+0x6e2>
 8012684:	2300      	movs	r3, #0
 8012686:	9310      	str	r3, [sp, #64]	@ 0x40
 8012688:	2301      	movs	r3, #1
 801268a:	9313      	str	r3, [sp, #76]	@ 0x4c
 801268c:	e7b5      	b.n	80125fa <_strtod_l+0x6e2>
 801268e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012690:	9805      	ldr	r0, [sp, #20]
 8012692:	462a      	mov	r2, r5
 8012694:	f7ff f9c8 	bl	8011a28 <__lshift>
 8012698:	901a      	str	r0, [sp, #104]	@ 0x68
 801269a:	2800      	cmp	r0, #0
 801269c:	d1d9      	bne.n	8012652 <_strtod_l+0x73a>
 801269e:	e65a      	b.n	8012356 <_strtod_l+0x43e>
 80126a0:	2e00      	cmp	r6, #0
 80126a2:	dd07      	ble.n	80126b4 <_strtod_l+0x79c>
 80126a4:	4649      	mov	r1, r9
 80126a6:	9805      	ldr	r0, [sp, #20]
 80126a8:	4632      	mov	r2, r6
 80126aa:	f7ff f9bd 	bl	8011a28 <__lshift>
 80126ae:	4681      	mov	r9, r0
 80126b0:	2800      	cmp	r0, #0
 80126b2:	d0d8      	beq.n	8012666 <_strtod_l+0x74e>
 80126b4:	2f00      	cmp	r7, #0
 80126b6:	dd08      	ble.n	80126ca <_strtod_l+0x7b2>
 80126b8:	4641      	mov	r1, r8
 80126ba:	9805      	ldr	r0, [sp, #20]
 80126bc:	463a      	mov	r2, r7
 80126be:	f7ff f9b3 	bl	8011a28 <__lshift>
 80126c2:	4680      	mov	r8, r0
 80126c4:	2800      	cmp	r0, #0
 80126c6:	f43f ae46 	beq.w	8012356 <_strtod_l+0x43e>
 80126ca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80126cc:	9805      	ldr	r0, [sp, #20]
 80126ce:	464a      	mov	r2, r9
 80126d0:	f7ff fa32 	bl	8011b38 <__mdiff>
 80126d4:	4604      	mov	r4, r0
 80126d6:	2800      	cmp	r0, #0
 80126d8:	f43f ae3d 	beq.w	8012356 <_strtod_l+0x43e>
 80126dc:	68c3      	ldr	r3, [r0, #12]
 80126de:	930f      	str	r3, [sp, #60]	@ 0x3c
 80126e0:	2300      	movs	r3, #0
 80126e2:	60c3      	str	r3, [r0, #12]
 80126e4:	4641      	mov	r1, r8
 80126e6:	f7ff fa0b 	bl	8011b00 <__mcmp>
 80126ea:	2800      	cmp	r0, #0
 80126ec:	da46      	bge.n	801277c <_strtod_l+0x864>
 80126ee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80126f0:	ea53 030a 	orrs.w	r3, r3, sl
 80126f4:	d16c      	bne.n	80127d0 <_strtod_l+0x8b8>
 80126f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d168      	bne.n	80127d0 <_strtod_l+0x8b8>
 80126fe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012702:	0d1b      	lsrs	r3, r3, #20
 8012704:	051b      	lsls	r3, r3, #20
 8012706:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801270a:	d961      	bls.n	80127d0 <_strtod_l+0x8b8>
 801270c:	6963      	ldr	r3, [r4, #20]
 801270e:	b913      	cbnz	r3, 8012716 <_strtod_l+0x7fe>
 8012710:	6923      	ldr	r3, [r4, #16]
 8012712:	2b01      	cmp	r3, #1
 8012714:	dd5c      	ble.n	80127d0 <_strtod_l+0x8b8>
 8012716:	4621      	mov	r1, r4
 8012718:	2201      	movs	r2, #1
 801271a:	9805      	ldr	r0, [sp, #20]
 801271c:	f7ff f984 	bl	8011a28 <__lshift>
 8012720:	4641      	mov	r1, r8
 8012722:	4604      	mov	r4, r0
 8012724:	f7ff f9ec 	bl	8011b00 <__mcmp>
 8012728:	2800      	cmp	r0, #0
 801272a:	dd51      	ble.n	80127d0 <_strtod_l+0x8b8>
 801272c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012730:	9a08      	ldr	r2, [sp, #32]
 8012732:	0d1b      	lsrs	r3, r3, #20
 8012734:	051b      	lsls	r3, r3, #20
 8012736:	2a00      	cmp	r2, #0
 8012738:	d06b      	beq.n	8012812 <_strtod_l+0x8fa>
 801273a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801273e:	d868      	bhi.n	8012812 <_strtod_l+0x8fa>
 8012740:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8012744:	f67f ae9d 	bls.w	8012482 <_strtod_l+0x56a>
 8012748:	4b0a      	ldr	r3, [pc, #40]	@ (8012774 <_strtod_l+0x85c>)
 801274a:	4650      	mov	r0, sl
 801274c:	4659      	mov	r1, fp
 801274e:	2200      	movs	r2, #0
 8012750:	f7ed ff7a 	bl	8000648 <__aeabi_dmul>
 8012754:	4b08      	ldr	r3, [pc, #32]	@ (8012778 <_strtod_l+0x860>)
 8012756:	400b      	ands	r3, r1
 8012758:	4682      	mov	sl, r0
 801275a:	468b      	mov	fp, r1
 801275c:	2b00      	cmp	r3, #0
 801275e:	f47f ae05 	bne.w	801236c <_strtod_l+0x454>
 8012762:	9a05      	ldr	r2, [sp, #20]
 8012764:	2322      	movs	r3, #34	@ 0x22
 8012766:	6013      	str	r3, [r2, #0]
 8012768:	e600      	b.n	801236c <_strtod_l+0x454>
 801276a:	bf00      	nop
 801276c:	08014b58 	.word	0x08014b58
 8012770:	fffffc02 	.word	0xfffffc02
 8012774:	39500000 	.word	0x39500000
 8012778:	7ff00000 	.word	0x7ff00000
 801277c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8012780:	d165      	bne.n	801284e <_strtod_l+0x936>
 8012782:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8012784:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012788:	b35a      	cbz	r2, 80127e2 <_strtod_l+0x8ca>
 801278a:	4a9f      	ldr	r2, [pc, #636]	@ (8012a08 <_strtod_l+0xaf0>)
 801278c:	4293      	cmp	r3, r2
 801278e:	d12b      	bne.n	80127e8 <_strtod_l+0x8d0>
 8012790:	9b08      	ldr	r3, [sp, #32]
 8012792:	4651      	mov	r1, sl
 8012794:	b303      	cbz	r3, 80127d8 <_strtod_l+0x8c0>
 8012796:	4b9d      	ldr	r3, [pc, #628]	@ (8012a0c <_strtod_l+0xaf4>)
 8012798:	465a      	mov	r2, fp
 801279a:	4013      	ands	r3, r2
 801279c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80127a0:	f04f 32ff 	mov.w	r2, #4294967295
 80127a4:	d81b      	bhi.n	80127de <_strtod_l+0x8c6>
 80127a6:	0d1b      	lsrs	r3, r3, #20
 80127a8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80127ac:	fa02 f303 	lsl.w	r3, r2, r3
 80127b0:	4299      	cmp	r1, r3
 80127b2:	d119      	bne.n	80127e8 <_strtod_l+0x8d0>
 80127b4:	4b96      	ldr	r3, [pc, #600]	@ (8012a10 <_strtod_l+0xaf8>)
 80127b6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80127b8:	429a      	cmp	r2, r3
 80127ba:	d102      	bne.n	80127c2 <_strtod_l+0x8aa>
 80127bc:	3101      	adds	r1, #1
 80127be:	f43f adca 	beq.w	8012356 <_strtod_l+0x43e>
 80127c2:	4b92      	ldr	r3, [pc, #584]	@ (8012a0c <_strtod_l+0xaf4>)
 80127c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80127c6:	401a      	ands	r2, r3
 80127c8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80127cc:	f04f 0a00 	mov.w	sl, #0
 80127d0:	9b08      	ldr	r3, [sp, #32]
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d1b8      	bne.n	8012748 <_strtod_l+0x830>
 80127d6:	e5c9      	b.n	801236c <_strtod_l+0x454>
 80127d8:	f04f 33ff 	mov.w	r3, #4294967295
 80127dc:	e7e8      	b.n	80127b0 <_strtod_l+0x898>
 80127de:	4613      	mov	r3, r2
 80127e0:	e7e6      	b.n	80127b0 <_strtod_l+0x898>
 80127e2:	ea53 030a 	orrs.w	r3, r3, sl
 80127e6:	d0a1      	beq.n	801272c <_strtod_l+0x814>
 80127e8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80127ea:	b1db      	cbz	r3, 8012824 <_strtod_l+0x90c>
 80127ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80127ee:	4213      	tst	r3, r2
 80127f0:	d0ee      	beq.n	80127d0 <_strtod_l+0x8b8>
 80127f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80127f4:	9a08      	ldr	r2, [sp, #32]
 80127f6:	4650      	mov	r0, sl
 80127f8:	4659      	mov	r1, fp
 80127fa:	b1bb      	cbz	r3, 801282c <_strtod_l+0x914>
 80127fc:	f7ff fb6e 	bl	8011edc <sulp>
 8012800:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012804:	ec53 2b10 	vmov	r2, r3, d0
 8012808:	f7ed fd68 	bl	80002dc <__adddf3>
 801280c:	4682      	mov	sl, r0
 801280e:	468b      	mov	fp, r1
 8012810:	e7de      	b.n	80127d0 <_strtod_l+0x8b8>
 8012812:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8012816:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801281a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801281e:	f04f 3aff 	mov.w	sl, #4294967295
 8012822:	e7d5      	b.n	80127d0 <_strtod_l+0x8b8>
 8012824:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8012826:	ea13 0f0a 	tst.w	r3, sl
 801282a:	e7e1      	b.n	80127f0 <_strtod_l+0x8d8>
 801282c:	f7ff fb56 	bl	8011edc <sulp>
 8012830:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012834:	ec53 2b10 	vmov	r2, r3, d0
 8012838:	f7ed fd4e 	bl	80002d8 <__aeabi_dsub>
 801283c:	2200      	movs	r2, #0
 801283e:	2300      	movs	r3, #0
 8012840:	4682      	mov	sl, r0
 8012842:	468b      	mov	fp, r1
 8012844:	f7ee f968 	bl	8000b18 <__aeabi_dcmpeq>
 8012848:	2800      	cmp	r0, #0
 801284a:	d0c1      	beq.n	80127d0 <_strtod_l+0x8b8>
 801284c:	e619      	b.n	8012482 <_strtod_l+0x56a>
 801284e:	4641      	mov	r1, r8
 8012850:	4620      	mov	r0, r4
 8012852:	f7ff facd 	bl	8011df0 <__ratio>
 8012856:	ec57 6b10 	vmov	r6, r7, d0
 801285a:	2200      	movs	r2, #0
 801285c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8012860:	4630      	mov	r0, r6
 8012862:	4639      	mov	r1, r7
 8012864:	f7ee f96c 	bl	8000b40 <__aeabi_dcmple>
 8012868:	2800      	cmp	r0, #0
 801286a:	d06f      	beq.n	801294c <_strtod_l+0xa34>
 801286c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801286e:	2b00      	cmp	r3, #0
 8012870:	d17a      	bne.n	8012968 <_strtod_l+0xa50>
 8012872:	f1ba 0f00 	cmp.w	sl, #0
 8012876:	d158      	bne.n	801292a <_strtod_l+0xa12>
 8012878:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801287a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801287e:	2b00      	cmp	r3, #0
 8012880:	d15a      	bne.n	8012938 <_strtod_l+0xa20>
 8012882:	4b64      	ldr	r3, [pc, #400]	@ (8012a14 <_strtod_l+0xafc>)
 8012884:	2200      	movs	r2, #0
 8012886:	4630      	mov	r0, r6
 8012888:	4639      	mov	r1, r7
 801288a:	f7ee f94f 	bl	8000b2c <__aeabi_dcmplt>
 801288e:	2800      	cmp	r0, #0
 8012890:	d159      	bne.n	8012946 <_strtod_l+0xa2e>
 8012892:	4630      	mov	r0, r6
 8012894:	4639      	mov	r1, r7
 8012896:	4b60      	ldr	r3, [pc, #384]	@ (8012a18 <_strtod_l+0xb00>)
 8012898:	2200      	movs	r2, #0
 801289a:	f7ed fed5 	bl	8000648 <__aeabi_dmul>
 801289e:	4606      	mov	r6, r0
 80128a0:	460f      	mov	r7, r1
 80128a2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80128a6:	9606      	str	r6, [sp, #24]
 80128a8:	9307      	str	r3, [sp, #28]
 80128aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80128ae:	4d57      	ldr	r5, [pc, #348]	@ (8012a0c <_strtod_l+0xaf4>)
 80128b0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80128b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80128b6:	401d      	ands	r5, r3
 80128b8:	4b58      	ldr	r3, [pc, #352]	@ (8012a1c <_strtod_l+0xb04>)
 80128ba:	429d      	cmp	r5, r3
 80128bc:	f040 80b2 	bne.w	8012a24 <_strtod_l+0xb0c>
 80128c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80128c2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80128c6:	ec4b ab10 	vmov	d0, sl, fp
 80128ca:	f7ff f9c9 	bl	8011c60 <__ulp>
 80128ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80128d2:	ec51 0b10 	vmov	r0, r1, d0
 80128d6:	f7ed feb7 	bl	8000648 <__aeabi_dmul>
 80128da:	4652      	mov	r2, sl
 80128dc:	465b      	mov	r3, fp
 80128de:	f7ed fcfd 	bl	80002dc <__adddf3>
 80128e2:	460b      	mov	r3, r1
 80128e4:	4949      	ldr	r1, [pc, #292]	@ (8012a0c <_strtod_l+0xaf4>)
 80128e6:	4a4e      	ldr	r2, [pc, #312]	@ (8012a20 <_strtod_l+0xb08>)
 80128e8:	4019      	ands	r1, r3
 80128ea:	4291      	cmp	r1, r2
 80128ec:	4682      	mov	sl, r0
 80128ee:	d942      	bls.n	8012976 <_strtod_l+0xa5e>
 80128f0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80128f2:	4b47      	ldr	r3, [pc, #284]	@ (8012a10 <_strtod_l+0xaf8>)
 80128f4:	429a      	cmp	r2, r3
 80128f6:	d103      	bne.n	8012900 <_strtod_l+0x9e8>
 80128f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80128fa:	3301      	adds	r3, #1
 80128fc:	f43f ad2b 	beq.w	8012356 <_strtod_l+0x43e>
 8012900:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8012a10 <_strtod_l+0xaf8>
 8012904:	f04f 3aff 	mov.w	sl, #4294967295
 8012908:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801290a:	9805      	ldr	r0, [sp, #20]
 801290c:	f7fe fe74 	bl	80115f8 <_Bfree>
 8012910:	9805      	ldr	r0, [sp, #20]
 8012912:	4649      	mov	r1, r9
 8012914:	f7fe fe70 	bl	80115f8 <_Bfree>
 8012918:	9805      	ldr	r0, [sp, #20]
 801291a:	4641      	mov	r1, r8
 801291c:	f7fe fe6c 	bl	80115f8 <_Bfree>
 8012920:	9805      	ldr	r0, [sp, #20]
 8012922:	4621      	mov	r1, r4
 8012924:	f7fe fe68 	bl	80115f8 <_Bfree>
 8012928:	e618      	b.n	801255c <_strtod_l+0x644>
 801292a:	f1ba 0f01 	cmp.w	sl, #1
 801292e:	d103      	bne.n	8012938 <_strtod_l+0xa20>
 8012930:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012932:	2b00      	cmp	r3, #0
 8012934:	f43f ada5 	beq.w	8012482 <_strtod_l+0x56a>
 8012938:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80129e8 <_strtod_l+0xad0>
 801293c:	4f35      	ldr	r7, [pc, #212]	@ (8012a14 <_strtod_l+0xafc>)
 801293e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012942:	2600      	movs	r6, #0
 8012944:	e7b1      	b.n	80128aa <_strtod_l+0x992>
 8012946:	4f34      	ldr	r7, [pc, #208]	@ (8012a18 <_strtod_l+0xb00>)
 8012948:	2600      	movs	r6, #0
 801294a:	e7aa      	b.n	80128a2 <_strtod_l+0x98a>
 801294c:	4b32      	ldr	r3, [pc, #200]	@ (8012a18 <_strtod_l+0xb00>)
 801294e:	4630      	mov	r0, r6
 8012950:	4639      	mov	r1, r7
 8012952:	2200      	movs	r2, #0
 8012954:	f7ed fe78 	bl	8000648 <__aeabi_dmul>
 8012958:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801295a:	4606      	mov	r6, r0
 801295c:	460f      	mov	r7, r1
 801295e:	2b00      	cmp	r3, #0
 8012960:	d09f      	beq.n	80128a2 <_strtod_l+0x98a>
 8012962:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8012966:	e7a0      	b.n	80128aa <_strtod_l+0x992>
 8012968:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80129f0 <_strtod_l+0xad8>
 801296c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012970:	ec57 6b17 	vmov	r6, r7, d7
 8012974:	e799      	b.n	80128aa <_strtod_l+0x992>
 8012976:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801297a:	9b08      	ldr	r3, [sp, #32]
 801297c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8012980:	2b00      	cmp	r3, #0
 8012982:	d1c1      	bne.n	8012908 <_strtod_l+0x9f0>
 8012984:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012988:	0d1b      	lsrs	r3, r3, #20
 801298a:	051b      	lsls	r3, r3, #20
 801298c:	429d      	cmp	r5, r3
 801298e:	d1bb      	bne.n	8012908 <_strtod_l+0x9f0>
 8012990:	4630      	mov	r0, r6
 8012992:	4639      	mov	r1, r7
 8012994:	f7ee f9a0 	bl	8000cd8 <__aeabi_d2lz>
 8012998:	f7ed fe28 	bl	80005ec <__aeabi_l2d>
 801299c:	4602      	mov	r2, r0
 801299e:	460b      	mov	r3, r1
 80129a0:	4630      	mov	r0, r6
 80129a2:	4639      	mov	r1, r7
 80129a4:	f7ed fc98 	bl	80002d8 <__aeabi_dsub>
 80129a8:	460b      	mov	r3, r1
 80129aa:	4602      	mov	r2, r0
 80129ac:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80129b0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80129b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80129b6:	ea46 060a 	orr.w	r6, r6, sl
 80129ba:	431e      	orrs	r6, r3
 80129bc:	d06f      	beq.n	8012a9e <_strtod_l+0xb86>
 80129be:	a30e      	add	r3, pc, #56	@ (adr r3, 80129f8 <_strtod_l+0xae0>)
 80129c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129c4:	f7ee f8b2 	bl	8000b2c <__aeabi_dcmplt>
 80129c8:	2800      	cmp	r0, #0
 80129ca:	f47f accf 	bne.w	801236c <_strtod_l+0x454>
 80129ce:	a30c      	add	r3, pc, #48	@ (adr r3, 8012a00 <_strtod_l+0xae8>)
 80129d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80129d8:	f7ee f8c6 	bl	8000b68 <__aeabi_dcmpgt>
 80129dc:	2800      	cmp	r0, #0
 80129de:	d093      	beq.n	8012908 <_strtod_l+0x9f0>
 80129e0:	e4c4      	b.n	801236c <_strtod_l+0x454>
 80129e2:	bf00      	nop
 80129e4:	f3af 8000 	nop.w
 80129e8:	00000000 	.word	0x00000000
 80129ec:	bff00000 	.word	0xbff00000
 80129f0:	00000000 	.word	0x00000000
 80129f4:	3ff00000 	.word	0x3ff00000
 80129f8:	94a03595 	.word	0x94a03595
 80129fc:	3fdfffff 	.word	0x3fdfffff
 8012a00:	35afe535 	.word	0x35afe535
 8012a04:	3fe00000 	.word	0x3fe00000
 8012a08:	000fffff 	.word	0x000fffff
 8012a0c:	7ff00000 	.word	0x7ff00000
 8012a10:	7fefffff 	.word	0x7fefffff
 8012a14:	3ff00000 	.word	0x3ff00000
 8012a18:	3fe00000 	.word	0x3fe00000
 8012a1c:	7fe00000 	.word	0x7fe00000
 8012a20:	7c9fffff 	.word	0x7c9fffff
 8012a24:	9b08      	ldr	r3, [sp, #32]
 8012a26:	b323      	cbz	r3, 8012a72 <_strtod_l+0xb5a>
 8012a28:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8012a2c:	d821      	bhi.n	8012a72 <_strtod_l+0xb5a>
 8012a2e:	a328      	add	r3, pc, #160	@ (adr r3, 8012ad0 <_strtod_l+0xbb8>)
 8012a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a34:	4630      	mov	r0, r6
 8012a36:	4639      	mov	r1, r7
 8012a38:	f7ee f882 	bl	8000b40 <__aeabi_dcmple>
 8012a3c:	b1a0      	cbz	r0, 8012a68 <_strtod_l+0xb50>
 8012a3e:	4639      	mov	r1, r7
 8012a40:	4630      	mov	r0, r6
 8012a42:	f7ee f8d9 	bl	8000bf8 <__aeabi_d2uiz>
 8012a46:	2801      	cmp	r0, #1
 8012a48:	bf38      	it	cc
 8012a4a:	2001      	movcc	r0, #1
 8012a4c:	f7ed fd82 	bl	8000554 <__aeabi_ui2d>
 8012a50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012a52:	4606      	mov	r6, r0
 8012a54:	460f      	mov	r7, r1
 8012a56:	b9fb      	cbnz	r3, 8012a98 <_strtod_l+0xb80>
 8012a58:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012a5c:	9014      	str	r0, [sp, #80]	@ 0x50
 8012a5e:	9315      	str	r3, [sp, #84]	@ 0x54
 8012a60:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8012a64:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8012a68:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012a6a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8012a6e:	1b5b      	subs	r3, r3, r5
 8012a70:	9311      	str	r3, [sp, #68]	@ 0x44
 8012a72:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8012a76:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8012a7a:	f7ff f8f1 	bl	8011c60 <__ulp>
 8012a7e:	4650      	mov	r0, sl
 8012a80:	ec53 2b10 	vmov	r2, r3, d0
 8012a84:	4659      	mov	r1, fp
 8012a86:	f7ed fddf 	bl	8000648 <__aeabi_dmul>
 8012a8a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8012a8e:	f7ed fc25 	bl	80002dc <__adddf3>
 8012a92:	4682      	mov	sl, r0
 8012a94:	468b      	mov	fp, r1
 8012a96:	e770      	b.n	801297a <_strtod_l+0xa62>
 8012a98:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8012a9c:	e7e0      	b.n	8012a60 <_strtod_l+0xb48>
 8012a9e:	a30e      	add	r3, pc, #56	@ (adr r3, 8012ad8 <_strtod_l+0xbc0>)
 8012aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012aa4:	f7ee f842 	bl	8000b2c <__aeabi_dcmplt>
 8012aa8:	e798      	b.n	80129dc <_strtod_l+0xac4>
 8012aaa:	2300      	movs	r3, #0
 8012aac:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012aae:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8012ab0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012ab2:	6013      	str	r3, [r2, #0]
 8012ab4:	f7ff ba6d 	b.w	8011f92 <_strtod_l+0x7a>
 8012ab8:	2a65      	cmp	r2, #101	@ 0x65
 8012aba:	f43f ab66 	beq.w	801218a <_strtod_l+0x272>
 8012abe:	2a45      	cmp	r2, #69	@ 0x45
 8012ac0:	f43f ab63 	beq.w	801218a <_strtod_l+0x272>
 8012ac4:	2301      	movs	r3, #1
 8012ac6:	f7ff bb9e 	b.w	8012206 <_strtod_l+0x2ee>
 8012aca:	bf00      	nop
 8012acc:	f3af 8000 	nop.w
 8012ad0:	ffc00000 	.word	0xffc00000
 8012ad4:	41dfffff 	.word	0x41dfffff
 8012ad8:	94a03595 	.word	0x94a03595
 8012adc:	3fcfffff 	.word	0x3fcfffff

08012ae0 <_strtod_r>:
 8012ae0:	4b01      	ldr	r3, [pc, #4]	@ (8012ae8 <_strtod_r+0x8>)
 8012ae2:	f7ff ba19 	b.w	8011f18 <_strtod_l>
 8012ae6:	bf00      	nop
 8012ae8:	200001e0 	.word	0x200001e0

08012aec <_strtol_l.constprop.0>:
 8012aec:	2b24      	cmp	r3, #36	@ 0x24
 8012aee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012af2:	4686      	mov	lr, r0
 8012af4:	4690      	mov	r8, r2
 8012af6:	d801      	bhi.n	8012afc <_strtol_l.constprop.0+0x10>
 8012af8:	2b01      	cmp	r3, #1
 8012afa:	d106      	bne.n	8012b0a <_strtol_l.constprop.0+0x1e>
 8012afc:	f7fd fdba 	bl	8010674 <__errno>
 8012b00:	2316      	movs	r3, #22
 8012b02:	6003      	str	r3, [r0, #0]
 8012b04:	2000      	movs	r0, #0
 8012b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b0a:	4834      	ldr	r0, [pc, #208]	@ (8012bdc <_strtol_l.constprop.0+0xf0>)
 8012b0c:	460d      	mov	r5, r1
 8012b0e:	462a      	mov	r2, r5
 8012b10:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012b14:	5d06      	ldrb	r6, [r0, r4]
 8012b16:	f016 0608 	ands.w	r6, r6, #8
 8012b1a:	d1f8      	bne.n	8012b0e <_strtol_l.constprop.0+0x22>
 8012b1c:	2c2d      	cmp	r4, #45	@ 0x2d
 8012b1e:	d12d      	bne.n	8012b7c <_strtol_l.constprop.0+0x90>
 8012b20:	782c      	ldrb	r4, [r5, #0]
 8012b22:	2601      	movs	r6, #1
 8012b24:	1c95      	adds	r5, r2, #2
 8012b26:	f033 0210 	bics.w	r2, r3, #16
 8012b2a:	d109      	bne.n	8012b40 <_strtol_l.constprop.0+0x54>
 8012b2c:	2c30      	cmp	r4, #48	@ 0x30
 8012b2e:	d12a      	bne.n	8012b86 <_strtol_l.constprop.0+0x9a>
 8012b30:	782a      	ldrb	r2, [r5, #0]
 8012b32:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8012b36:	2a58      	cmp	r2, #88	@ 0x58
 8012b38:	d125      	bne.n	8012b86 <_strtol_l.constprop.0+0x9a>
 8012b3a:	786c      	ldrb	r4, [r5, #1]
 8012b3c:	2310      	movs	r3, #16
 8012b3e:	3502      	adds	r5, #2
 8012b40:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8012b44:	f10c 3cff 	add.w	ip, ip, #4294967295
 8012b48:	2200      	movs	r2, #0
 8012b4a:	fbbc f9f3 	udiv	r9, ip, r3
 8012b4e:	4610      	mov	r0, r2
 8012b50:	fb03 ca19 	mls	sl, r3, r9, ip
 8012b54:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8012b58:	2f09      	cmp	r7, #9
 8012b5a:	d81b      	bhi.n	8012b94 <_strtol_l.constprop.0+0xa8>
 8012b5c:	463c      	mov	r4, r7
 8012b5e:	42a3      	cmp	r3, r4
 8012b60:	dd27      	ble.n	8012bb2 <_strtol_l.constprop.0+0xc6>
 8012b62:	1c57      	adds	r7, r2, #1
 8012b64:	d007      	beq.n	8012b76 <_strtol_l.constprop.0+0x8a>
 8012b66:	4581      	cmp	r9, r0
 8012b68:	d320      	bcc.n	8012bac <_strtol_l.constprop.0+0xc0>
 8012b6a:	d101      	bne.n	8012b70 <_strtol_l.constprop.0+0x84>
 8012b6c:	45a2      	cmp	sl, r4
 8012b6e:	db1d      	blt.n	8012bac <_strtol_l.constprop.0+0xc0>
 8012b70:	fb00 4003 	mla	r0, r0, r3, r4
 8012b74:	2201      	movs	r2, #1
 8012b76:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012b7a:	e7eb      	b.n	8012b54 <_strtol_l.constprop.0+0x68>
 8012b7c:	2c2b      	cmp	r4, #43	@ 0x2b
 8012b7e:	bf04      	itt	eq
 8012b80:	782c      	ldrbeq	r4, [r5, #0]
 8012b82:	1c95      	addeq	r5, r2, #2
 8012b84:	e7cf      	b.n	8012b26 <_strtol_l.constprop.0+0x3a>
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d1da      	bne.n	8012b40 <_strtol_l.constprop.0+0x54>
 8012b8a:	2c30      	cmp	r4, #48	@ 0x30
 8012b8c:	bf0c      	ite	eq
 8012b8e:	2308      	moveq	r3, #8
 8012b90:	230a      	movne	r3, #10
 8012b92:	e7d5      	b.n	8012b40 <_strtol_l.constprop.0+0x54>
 8012b94:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8012b98:	2f19      	cmp	r7, #25
 8012b9a:	d801      	bhi.n	8012ba0 <_strtol_l.constprop.0+0xb4>
 8012b9c:	3c37      	subs	r4, #55	@ 0x37
 8012b9e:	e7de      	b.n	8012b5e <_strtol_l.constprop.0+0x72>
 8012ba0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8012ba4:	2f19      	cmp	r7, #25
 8012ba6:	d804      	bhi.n	8012bb2 <_strtol_l.constprop.0+0xc6>
 8012ba8:	3c57      	subs	r4, #87	@ 0x57
 8012baa:	e7d8      	b.n	8012b5e <_strtol_l.constprop.0+0x72>
 8012bac:	f04f 32ff 	mov.w	r2, #4294967295
 8012bb0:	e7e1      	b.n	8012b76 <_strtol_l.constprop.0+0x8a>
 8012bb2:	1c53      	adds	r3, r2, #1
 8012bb4:	d108      	bne.n	8012bc8 <_strtol_l.constprop.0+0xdc>
 8012bb6:	2322      	movs	r3, #34	@ 0x22
 8012bb8:	f8ce 3000 	str.w	r3, [lr]
 8012bbc:	4660      	mov	r0, ip
 8012bbe:	f1b8 0f00 	cmp.w	r8, #0
 8012bc2:	d0a0      	beq.n	8012b06 <_strtol_l.constprop.0+0x1a>
 8012bc4:	1e69      	subs	r1, r5, #1
 8012bc6:	e006      	b.n	8012bd6 <_strtol_l.constprop.0+0xea>
 8012bc8:	b106      	cbz	r6, 8012bcc <_strtol_l.constprop.0+0xe0>
 8012bca:	4240      	negs	r0, r0
 8012bcc:	f1b8 0f00 	cmp.w	r8, #0
 8012bd0:	d099      	beq.n	8012b06 <_strtol_l.constprop.0+0x1a>
 8012bd2:	2a00      	cmp	r2, #0
 8012bd4:	d1f6      	bne.n	8012bc4 <_strtol_l.constprop.0+0xd8>
 8012bd6:	f8c8 1000 	str.w	r1, [r8]
 8012bda:	e794      	b.n	8012b06 <_strtol_l.constprop.0+0x1a>
 8012bdc:	08014b81 	.word	0x08014b81

08012be0 <_strtol_r>:
 8012be0:	f7ff bf84 	b.w	8012aec <_strtol_l.constprop.0>

08012be4 <__ssputs_r>:
 8012be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012be8:	688e      	ldr	r6, [r1, #8]
 8012bea:	461f      	mov	r7, r3
 8012bec:	42be      	cmp	r6, r7
 8012bee:	680b      	ldr	r3, [r1, #0]
 8012bf0:	4682      	mov	sl, r0
 8012bf2:	460c      	mov	r4, r1
 8012bf4:	4690      	mov	r8, r2
 8012bf6:	d82d      	bhi.n	8012c54 <__ssputs_r+0x70>
 8012bf8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012bfc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012c00:	d026      	beq.n	8012c50 <__ssputs_r+0x6c>
 8012c02:	6965      	ldr	r5, [r4, #20]
 8012c04:	6909      	ldr	r1, [r1, #16]
 8012c06:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012c0a:	eba3 0901 	sub.w	r9, r3, r1
 8012c0e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012c12:	1c7b      	adds	r3, r7, #1
 8012c14:	444b      	add	r3, r9
 8012c16:	106d      	asrs	r5, r5, #1
 8012c18:	429d      	cmp	r5, r3
 8012c1a:	bf38      	it	cc
 8012c1c:	461d      	movcc	r5, r3
 8012c1e:	0553      	lsls	r3, r2, #21
 8012c20:	d527      	bpl.n	8012c72 <__ssputs_r+0x8e>
 8012c22:	4629      	mov	r1, r5
 8012c24:	f7fe fc1c 	bl	8011460 <_malloc_r>
 8012c28:	4606      	mov	r6, r0
 8012c2a:	b360      	cbz	r0, 8012c86 <__ssputs_r+0xa2>
 8012c2c:	6921      	ldr	r1, [r4, #16]
 8012c2e:	464a      	mov	r2, r9
 8012c30:	f000 fa18 	bl	8013064 <memcpy>
 8012c34:	89a3      	ldrh	r3, [r4, #12]
 8012c36:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8012c3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012c3e:	81a3      	strh	r3, [r4, #12]
 8012c40:	6126      	str	r6, [r4, #16]
 8012c42:	6165      	str	r5, [r4, #20]
 8012c44:	444e      	add	r6, r9
 8012c46:	eba5 0509 	sub.w	r5, r5, r9
 8012c4a:	6026      	str	r6, [r4, #0]
 8012c4c:	60a5      	str	r5, [r4, #8]
 8012c4e:	463e      	mov	r6, r7
 8012c50:	42be      	cmp	r6, r7
 8012c52:	d900      	bls.n	8012c56 <__ssputs_r+0x72>
 8012c54:	463e      	mov	r6, r7
 8012c56:	6820      	ldr	r0, [r4, #0]
 8012c58:	4632      	mov	r2, r6
 8012c5a:	4641      	mov	r1, r8
 8012c5c:	f000 f9c6 	bl	8012fec <memmove>
 8012c60:	68a3      	ldr	r3, [r4, #8]
 8012c62:	1b9b      	subs	r3, r3, r6
 8012c64:	60a3      	str	r3, [r4, #8]
 8012c66:	6823      	ldr	r3, [r4, #0]
 8012c68:	4433      	add	r3, r6
 8012c6a:	6023      	str	r3, [r4, #0]
 8012c6c:	2000      	movs	r0, #0
 8012c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c72:	462a      	mov	r2, r5
 8012c74:	f000 fd89 	bl	801378a <_realloc_r>
 8012c78:	4606      	mov	r6, r0
 8012c7a:	2800      	cmp	r0, #0
 8012c7c:	d1e0      	bne.n	8012c40 <__ssputs_r+0x5c>
 8012c7e:	6921      	ldr	r1, [r4, #16]
 8012c80:	4650      	mov	r0, sl
 8012c82:	f7fe fb79 	bl	8011378 <_free_r>
 8012c86:	230c      	movs	r3, #12
 8012c88:	f8ca 3000 	str.w	r3, [sl]
 8012c8c:	89a3      	ldrh	r3, [r4, #12]
 8012c8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012c92:	81a3      	strh	r3, [r4, #12]
 8012c94:	f04f 30ff 	mov.w	r0, #4294967295
 8012c98:	e7e9      	b.n	8012c6e <__ssputs_r+0x8a>
	...

08012c9c <_svfiprintf_r>:
 8012c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ca0:	4698      	mov	r8, r3
 8012ca2:	898b      	ldrh	r3, [r1, #12]
 8012ca4:	061b      	lsls	r3, r3, #24
 8012ca6:	b09d      	sub	sp, #116	@ 0x74
 8012ca8:	4607      	mov	r7, r0
 8012caa:	460d      	mov	r5, r1
 8012cac:	4614      	mov	r4, r2
 8012cae:	d510      	bpl.n	8012cd2 <_svfiprintf_r+0x36>
 8012cb0:	690b      	ldr	r3, [r1, #16]
 8012cb2:	b973      	cbnz	r3, 8012cd2 <_svfiprintf_r+0x36>
 8012cb4:	2140      	movs	r1, #64	@ 0x40
 8012cb6:	f7fe fbd3 	bl	8011460 <_malloc_r>
 8012cba:	6028      	str	r0, [r5, #0]
 8012cbc:	6128      	str	r0, [r5, #16]
 8012cbe:	b930      	cbnz	r0, 8012cce <_svfiprintf_r+0x32>
 8012cc0:	230c      	movs	r3, #12
 8012cc2:	603b      	str	r3, [r7, #0]
 8012cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8012cc8:	b01d      	add	sp, #116	@ 0x74
 8012cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cce:	2340      	movs	r3, #64	@ 0x40
 8012cd0:	616b      	str	r3, [r5, #20]
 8012cd2:	2300      	movs	r3, #0
 8012cd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8012cd6:	2320      	movs	r3, #32
 8012cd8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012cdc:	f8cd 800c 	str.w	r8, [sp, #12]
 8012ce0:	2330      	movs	r3, #48	@ 0x30
 8012ce2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012e80 <_svfiprintf_r+0x1e4>
 8012ce6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012cea:	f04f 0901 	mov.w	r9, #1
 8012cee:	4623      	mov	r3, r4
 8012cf0:	469a      	mov	sl, r3
 8012cf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012cf6:	b10a      	cbz	r2, 8012cfc <_svfiprintf_r+0x60>
 8012cf8:	2a25      	cmp	r2, #37	@ 0x25
 8012cfa:	d1f9      	bne.n	8012cf0 <_svfiprintf_r+0x54>
 8012cfc:	ebba 0b04 	subs.w	fp, sl, r4
 8012d00:	d00b      	beq.n	8012d1a <_svfiprintf_r+0x7e>
 8012d02:	465b      	mov	r3, fp
 8012d04:	4622      	mov	r2, r4
 8012d06:	4629      	mov	r1, r5
 8012d08:	4638      	mov	r0, r7
 8012d0a:	f7ff ff6b 	bl	8012be4 <__ssputs_r>
 8012d0e:	3001      	adds	r0, #1
 8012d10:	f000 80a7 	beq.w	8012e62 <_svfiprintf_r+0x1c6>
 8012d14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012d16:	445a      	add	r2, fp
 8012d18:	9209      	str	r2, [sp, #36]	@ 0x24
 8012d1a:	f89a 3000 	ldrb.w	r3, [sl]
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	f000 809f 	beq.w	8012e62 <_svfiprintf_r+0x1c6>
 8012d24:	2300      	movs	r3, #0
 8012d26:	f04f 32ff 	mov.w	r2, #4294967295
 8012d2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012d2e:	f10a 0a01 	add.w	sl, sl, #1
 8012d32:	9304      	str	r3, [sp, #16]
 8012d34:	9307      	str	r3, [sp, #28]
 8012d36:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012d3a:	931a      	str	r3, [sp, #104]	@ 0x68
 8012d3c:	4654      	mov	r4, sl
 8012d3e:	2205      	movs	r2, #5
 8012d40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012d44:	484e      	ldr	r0, [pc, #312]	@ (8012e80 <_svfiprintf_r+0x1e4>)
 8012d46:	f7ed fa6b 	bl	8000220 <memchr>
 8012d4a:	9a04      	ldr	r2, [sp, #16]
 8012d4c:	b9d8      	cbnz	r0, 8012d86 <_svfiprintf_r+0xea>
 8012d4e:	06d0      	lsls	r0, r2, #27
 8012d50:	bf44      	itt	mi
 8012d52:	2320      	movmi	r3, #32
 8012d54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012d58:	0711      	lsls	r1, r2, #28
 8012d5a:	bf44      	itt	mi
 8012d5c:	232b      	movmi	r3, #43	@ 0x2b
 8012d5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012d62:	f89a 3000 	ldrb.w	r3, [sl]
 8012d66:	2b2a      	cmp	r3, #42	@ 0x2a
 8012d68:	d015      	beq.n	8012d96 <_svfiprintf_r+0xfa>
 8012d6a:	9a07      	ldr	r2, [sp, #28]
 8012d6c:	4654      	mov	r4, sl
 8012d6e:	2000      	movs	r0, #0
 8012d70:	f04f 0c0a 	mov.w	ip, #10
 8012d74:	4621      	mov	r1, r4
 8012d76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012d7a:	3b30      	subs	r3, #48	@ 0x30
 8012d7c:	2b09      	cmp	r3, #9
 8012d7e:	d94b      	bls.n	8012e18 <_svfiprintf_r+0x17c>
 8012d80:	b1b0      	cbz	r0, 8012db0 <_svfiprintf_r+0x114>
 8012d82:	9207      	str	r2, [sp, #28]
 8012d84:	e014      	b.n	8012db0 <_svfiprintf_r+0x114>
 8012d86:	eba0 0308 	sub.w	r3, r0, r8
 8012d8a:	fa09 f303 	lsl.w	r3, r9, r3
 8012d8e:	4313      	orrs	r3, r2
 8012d90:	9304      	str	r3, [sp, #16]
 8012d92:	46a2      	mov	sl, r4
 8012d94:	e7d2      	b.n	8012d3c <_svfiprintf_r+0xa0>
 8012d96:	9b03      	ldr	r3, [sp, #12]
 8012d98:	1d19      	adds	r1, r3, #4
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	9103      	str	r1, [sp, #12]
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	bfbb      	ittet	lt
 8012da2:	425b      	neglt	r3, r3
 8012da4:	f042 0202 	orrlt.w	r2, r2, #2
 8012da8:	9307      	strge	r3, [sp, #28]
 8012daa:	9307      	strlt	r3, [sp, #28]
 8012dac:	bfb8      	it	lt
 8012dae:	9204      	strlt	r2, [sp, #16]
 8012db0:	7823      	ldrb	r3, [r4, #0]
 8012db2:	2b2e      	cmp	r3, #46	@ 0x2e
 8012db4:	d10a      	bne.n	8012dcc <_svfiprintf_r+0x130>
 8012db6:	7863      	ldrb	r3, [r4, #1]
 8012db8:	2b2a      	cmp	r3, #42	@ 0x2a
 8012dba:	d132      	bne.n	8012e22 <_svfiprintf_r+0x186>
 8012dbc:	9b03      	ldr	r3, [sp, #12]
 8012dbe:	1d1a      	adds	r2, r3, #4
 8012dc0:	681b      	ldr	r3, [r3, #0]
 8012dc2:	9203      	str	r2, [sp, #12]
 8012dc4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012dc8:	3402      	adds	r4, #2
 8012dca:	9305      	str	r3, [sp, #20]
 8012dcc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012e90 <_svfiprintf_r+0x1f4>
 8012dd0:	7821      	ldrb	r1, [r4, #0]
 8012dd2:	2203      	movs	r2, #3
 8012dd4:	4650      	mov	r0, sl
 8012dd6:	f7ed fa23 	bl	8000220 <memchr>
 8012dda:	b138      	cbz	r0, 8012dec <_svfiprintf_r+0x150>
 8012ddc:	9b04      	ldr	r3, [sp, #16]
 8012dde:	eba0 000a 	sub.w	r0, r0, sl
 8012de2:	2240      	movs	r2, #64	@ 0x40
 8012de4:	4082      	lsls	r2, r0
 8012de6:	4313      	orrs	r3, r2
 8012de8:	3401      	adds	r4, #1
 8012dea:	9304      	str	r3, [sp, #16]
 8012dec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012df0:	4824      	ldr	r0, [pc, #144]	@ (8012e84 <_svfiprintf_r+0x1e8>)
 8012df2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012df6:	2206      	movs	r2, #6
 8012df8:	f7ed fa12 	bl	8000220 <memchr>
 8012dfc:	2800      	cmp	r0, #0
 8012dfe:	d036      	beq.n	8012e6e <_svfiprintf_r+0x1d2>
 8012e00:	4b21      	ldr	r3, [pc, #132]	@ (8012e88 <_svfiprintf_r+0x1ec>)
 8012e02:	bb1b      	cbnz	r3, 8012e4c <_svfiprintf_r+0x1b0>
 8012e04:	9b03      	ldr	r3, [sp, #12]
 8012e06:	3307      	adds	r3, #7
 8012e08:	f023 0307 	bic.w	r3, r3, #7
 8012e0c:	3308      	adds	r3, #8
 8012e0e:	9303      	str	r3, [sp, #12]
 8012e10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012e12:	4433      	add	r3, r6
 8012e14:	9309      	str	r3, [sp, #36]	@ 0x24
 8012e16:	e76a      	b.n	8012cee <_svfiprintf_r+0x52>
 8012e18:	fb0c 3202 	mla	r2, ip, r2, r3
 8012e1c:	460c      	mov	r4, r1
 8012e1e:	2001      	movs	r0, #1
 8012e20:	e7a8      	b.n	8012d74 <_svfiprintf_r+0xd8>
 8012e22:	2300      	movs	r3, #0
 8012e24:	3401      	adds	r4, #1
 8012e26:	9305      	str	r3, [sp, #20]
 8012e28:	4619      	mov	r1, r3
 8012e2a:	f04f 0c0a 	mov.w	ip, #10
 8012e2e:	4620      	mov	r0, r4
 8012e30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012e34:	3a30      	subs	r2, #48	@ 0x30
 8012e36:	2a09      	cmp	r2, #9
 8012e38:	d903      	bls.n	8012e42 <_svfiprintf_r+0x1a6>
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	d0c6      	beq.n	8012dcc <_svfiprintf_r+0x130>
 8012e3e:	9105      	str	r1, [sp, #20]
 8012e40:	e7c4      	b.n	8012dcc <_svfiprintf_r+0x130>
 8012e42:	fb0c 2101 	mla	r1, ip, r1, r2
 8012e46:	4604      	mov	r4, r0
 8012e48:	2301      	movs	r3, #1
 8012e4a:	e7f0      	b.n	8012e2e <_svfiprintf_r+0x192>
 8012e4c:	ab03      	add	r3, sp, #12
 8012e4e:	9300      	str	r3, [sp, #0]
 8012e50:	462a      	mov	r2, r5
 8012e52:	4b0e      	ldr	r3, [pc, #56]	@ (8012e8c <_svfiprintf_r+0x1f0>)
 8012e54:	a904      	add	r1, sp, #16
 8012e56:	4638      	mov	r0, r7
 8012e58:	f7fc fcc8 	bl	800f7ec <_printf_float>
 8012e5c:	1c42      	adds	r2, r0, #1
 8012e5e:	4606      	mov	r6, r0
 8012e60:	d1d6      	bne.n	8012e10 <_svfiprintf_r+0x174>
 8012e62:	89ab      	ldrh	r3, [r5, #12]
 8012e64:	065b      	lsls	r3, r3, #25
 8012e66:	f53f af2d 	bmi.w	8012cc4 <_svfiprintf_r+0x28>
 8012e6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012e6c:	e72c      	b.n	8012cc8 <_svfiprintf_r+0x2c>
 8012e6e:	ab03      	add	r3, sp, #12
 8012e70:	9300      	str	r3, [sp, #0]
 8012e72:	462a      	mov	r2, r5
 8012e74:	4b05      	ldr	r3, [pc, #20]	@ (8012e8c <_svfiprintf_r+0x1f0>)
 8012e76:	a904      	add	r1, sp, #16
 8012e78:	4638      	mov	r0, r7
 8012e7a:	f7fc ff4f 	bl	800fd1c <_printf_i>
 8012e7e:	e7ed      	b.n	8012e5c <_svfiprintf_r+0x1c0>
 8012e80:	08014c81 	.word	0x08014c81
 8012e84:	08014c8b 	.word	0x08014c8b
 8012e88:	0800f7ed 	.word	0x0800f7ed
 8012e8c:	08012be5 	.word	0x08012be5
 8012e90:	08014c87 	.word	0x08014c87

08012e94 <__sflush_r>:
 8012e94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e9c:	0716      	lsls	r6, r2, #28
 8012e9e:	4605      	mov	r5, r0
 8012ea0:	460c      	mov	r4, r1
 8012ea2:	d454      	bmi.n	8012f4e <__sflush_r+0xba>
 8012ea4:	684b      	ldr	r3, [r1, #4]
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	dc02      	bgt.n	8012eb0 <__sflush_r+0x1c>
 8012eaa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	dd48      	ble.n	8012f42 <__sflush_r+0xae>
 8012eb0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012eb2:	2e00      	cmp	r6, #0
 8012eb4:	d045      	beq.n	8012f42 <__sflush_r+0xae>
 8012eb6:	2300      	movs	r3, #0
 8012eb8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012ebc:	682f      	ldr	r7, [r5, #0]
 8012ebe:	6a21      	ldr	r1, [r4, #32]
 8012ec0:	602b      	str	r3, [r5, #0]
 8012ec2:	d030      	beq.n	8012f26 <__sflush_r+0x92>
 8012ec4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012ec6:	89a3      	ldrh	r3, [r4, #12]
 8012ec8:	0759      	lsls	r1, r3, #29
 8012eca:	d505      	bpl.n	8012ed8 <__sflush_r+0x44>
 8012ecc:	6863      	ldr	r3, [r4, #4]
 8012ece:	1ad2      	subs	r2, r2, r3
 8012ed0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012ed2:	b10b      	cbz	r3, 8012ed8 <__sflush_r+0x44>
 8012ed4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012ed6:	1ad2      	subs	r2, r2, r3
 8012ed8:	2300      	movs	r3, #0
 8012eda:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012edc:	6a21      	ldr	r1, [r4, #32]
 8012ede:	4628      	mov	r0, r5
 8012ee0:	47b0      	blx	r6
 8012ee2:	1c43      	adds	r3, r0, #1
 8012ee4:	89a3      	ldrh	r3, [r4, #12]
 8012ee6:	d106      	bne.n	8012ef6 <__sflush_r+0x62>
 8012ee8:	6829      	ldr	r1, [r5, #0]
 8012eea:	291d      	cmp	r1, #29
 8012eec:	d82b      	bhi.n	8012f46 <__sflush_r+0xb2>
 8012eee:	4a2a      	ldr	r2, [pc, #168]	@ (8012f98 <__sflush_r+0x104>)
 8012ef0:	410a      	asrs	r2, r1
 8012ef2:	07d6      	lsls	r6, r2, #31
 8012ef4:	d427      	bmi.n	8012f46 <__sflush_r+0xb2>
 8012ef6:	2200      	movs	r2, #0
 8012ef8:	6062      	str	r2, [r4, #4]
 8012efa:	04d9      	lsls	r1, r3, #19
 8012efc:	6922      	ldr	r2, [r4, #16]
 8012efe:	6022      	str	r2, [r4, #0]
 8012f00:	d504      	bpl.n	8012f0c <__sflush_r+0x78>
 8012f02:	1c42      	adds	r2, r0, #1
 8012f04:	d101      	bne.n	8012f0a <__sflush_r+0x76>
 8012f06:	682b      	ldr	r3, [r5, #0]
 8012f08:	b903      	cbnz	r3, 8012f0c <__sflush_r+0x78>
 8012f0a:	6560      	str	r0, [r4, #84]	@ 0x54
 8012f0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012f0e:	602f      	str	r7, [r5, #0]
 8012f10:	b1b9      	cbz	r1, 8012f42 <__sflush_r+0xae>
 8012f12:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012f16:	4299      	cmp	r1, r3
 8012f18:	d002      	beq.n	8012f20 <__sflush_r+0x8c>
 8012f1a:	4628      	mov	r0, r5
 8012f1c:	f7fe fa2c 	bl	8011378 <_free_r>
 8012f20:	2300      	movs	r3, #0
 8012f22:	6363      	str	r3, [r4, #52]	@ 0x34
 8012f24:	e00d      	b.n	8012f42 <__sflush_r+0xae>
 8012f26:	2301      	movs	r3, #1
 8012f28:	4628      	mov	r0, r5
 8012f2a:	47b0      	blx	r6
 8012f2c:	4602      	mov	r2, r0
 8012f2e:	1c50      	adds	r0, r2, #1
 8012f30:	d1c9      	bne.n	8012ec6 <__sflush_r+0x32>
 8012f32:	682b      	ldr	r3, [r5, #0]
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d0c6      	beq.n	8012ec6 <__sflush_r+0x32>
 8012f38:	2b1d      	cmp	r3, #29
 8012f3a:	d001      	beq.n	8012f40 <__sflush_r+0xac>
 8012f3c:	2b16      	cmp	r3, #22
 8012f3e:	d11e      	bne.n	8012f7e <__sflush_r+0xea>
 8012f40:	602f      	str	r7, [r5, #0]
 8012f42:	2000      	movs	r0, #0
 8012f44:	e022      	b.n	8012f8c <__sflush_r+0xf8>
 8012f46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012f4a:	b21b      	sxth	r3, r3
 8012f4c:	e01b      	b.n	8012f86 <__sflush_r+0xf2>
 8012f4e:	690f      	ldr	r7, [r1, #16]
 8012f50:	2f00      	cmp	r7, #0
 8012f52:	d0f6      	beq.n	8012f42 <__sflush_r+0xae>
 8012f54:	0793      	lsls	r3, r2, #30
 8012f56:	680e      	ldr	r6, [r1, #0]
 8012f58:	bf08      	it	eq
 8012f5a:	694b      	ldreq	r3, [r1, #20]
 8012f5c:	600f      	str	r7, [r1, #0]
 8012f5e:	bf18      	it	ne
 8012f60:	2300      	movne	r3, #0
 8012f62:	eba6 0807 	sub.w	r8, r6, r7
 8012f66:	608b      	str	r3, [r1, #8]
 8012f68:	f1b8 0f00 	cmp.w	r8, #0
 8012f6c:	dde9      	ble.n	8012f42 <__sflush_r+0xae>
 8012f6e:	6a21      	ldr	r1, [r4, #32]
 8012f70:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8012f72:	4643      	mov	r3, r8
 8012f74:	463a      	mov	r2, r7
 8012f76:	4628      	mov	r0, r5
 8012f78:	47b0      	blx	r6
 8012f7a:	2800      	cmp	r0, #0
 8012f7c:	dc08      	bgt.n	8012f90 <__sflush_r+0xfc>
 8012f7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012f82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012f86:	81a3      	strh	r3, [r4, #12]
 8012f88:	f04f 30ff 	mov.w	r0, #4294967295
 8012f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f90:	4407      	add	r7, r0
 8012f92:	eba8 0800 	sub.w	r8, r8, r0
 8012f96:	e7e7      	b.n	8012f68 <__sflush_r+0xd4>
 8012f98:	dfbffffe 	.word	0xdfbffffe

08012f9c <_fflush_r>:
 8012f9c:	b538      	push	{r3, r4, r5, lr}
 8012f9e:	690b      	ldr	r3, [r1, #16]
 8012fa0:	4605      	mov	r5, r0
 8012fa2:	460c      	mov	r4, r1
 8012fa4:	b913      	cbnz	r3, 8012fac <_fflush_r+0x10>
 8012fa6:	2500      	movs	r5, #0
 8012fa8:	4628      	mov	r0, r5
 8012faa:	bd38      	pop	{r3, r4, r5, pc}
 8012fac:	b118      	cbz	r0, 8012fb6 <_fflush_r+0x1a>
 8012fae:	6a03      	ldr	r3, [r0, #32]
 8012fb0:	b90b      	cbnz	r3, 8012fb6 <_fflush_r+0x1a>
 8012fb2:	f7fd fa73 	bl	801049c <__sinit>
 8012fb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	d0f3      	beq.n	8012fa6 <_fflush_r+0xa>
 8012fbe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012fc0:	07d0      	lsls	r0, r2, #31
 8012fc2:	d404      	bmi.n	8012fce <_fflush_r+0x32>
 8012fc4:	0599      	lsls	r1, r3, #22
 8012fc6:	d402      	bmi.n	8012fce <_fflush_r+0x32>
 8012fc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012fca:	f7fd fb7e 	bl	80106ca <__retarget_lock_acquire_recursive>
 8012fce:	4628      	mov	r0, r5
 8012fd0:	4621      	mov	r1, r4
 8012fd2:	f7ff ff5f 	bl	8012e94 <__sflush_r>
 8012fd6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012fd8:	07da      	lsls	r2, r3, #31
 8012fda:	4605      	mov	r5, r0
 8012fdc:	d4e4      	bmi.n	8012fa8 <_fflush_r+0xc>
 8012fde:	89a3      	ldrh	r3, [r4, #12]
 8012fe0:	059b      	lsls	r3, r3, #22
 8012fe2:	d4e1      	bmi.n	8012fa8 <_fflush_r+0xc>
 8012fe4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012fe6:	f7fd fb71 	bl	80106cc <__retarget_lock_release_recursive>
 8012fea:	e7dd      	b.n	8012fa8 <_fflush_r+0xc>

08012fec <memmove>:
 8012fec:	4288      	cmp	r0, r1
 8012fee:	b510      	push	{r4, lr}
 8012ff0:	eb01 0402 	add.w	r4, r1, r2
 8012ff4:	d902      	bls.n	8012ffc <memmove+0x10>
 8012ff6:	4284      	cmp	r4, r0
 8012ff8:	4623      	mov	r3, r4
 8012ffa:	d807      	bhi.n	801300c <memmove+0x20>
 8012ffc:	1e43      	subs	r3, r0, #1
 8012ffe:	42a1      	cmp	r1, r4
 8013000:	d008      	beq.n	8013014 <memmove+0x28>
 8013002:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013006:	f803 2f01 	strb.w	r2, [r3, #1]!
 801300a:	e7f8      	b.n	8012ffe <memmove+0x12>
 801300c:	4402      	add	r2, r0
 801300e:	4601      	mov	r1, r0
 8013010:	428a      	cmp	r2, r1
 8013012:	d100      	bne.n	8013016 <memmove+0x2a>
 8013014:	bd10      	pop	{r4, pc}
 8013016:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801301a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801301e:	e7f7      	b.n	8013010 <memmove+0x24>

08013020 <strncmp>:
 8013020:	b510      	push	{r4, lr}
 8013022:	b16a      	cbz	r2, 8013040 <strncmp+0x20>
 8013024:	3901      	subs	r1, #1
 8013026:	1884      	adds	r4, r0, r2
 8013028:	f810 2b01 	ldrb.w	r2, [r0], #1
 801302c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8013030:	429a      	cmp	r2, r3
 8013032:	d103      	bne.n	801303c <strncmp+0x1c>
 8013034:	42a0      	cmp	r0, r4
 8013036:	d001      	beq.n	801303c <strncmp+0x1c>
 8013038:	2a00      	cmp	r2, #0
 801303a:	d1f5      	bne.n	8013028 <strncmp+0x8>
 801303c:	1ad0      	subs	r0, r2, r3
 801303e:	bd10      	pop	{r4, pc}
 8013040:	4610      	mov	r0, r2
 8013042:	e7fc      	b.n	801303e <strncmp+0x1e>

08013044 <_sbrk_r>:
 8013044:	b538      	push	{r3, r4, r5, lr}
 8013046:	4d06      	ldr	r5, [pc, #24]	@ (8013060 <_sbrk_r+0x1c>)
 8013048:	2300      	movs	r3, #0
 801304a:	4604      	mov	r4, r0
 801304c:	4608      	mov	r0, r1
 801304e:	602b      	str	r3, [r5, #0]
 8013050:	f7ef fba4 	bl	800279c <_sbrk>
 8013054:	1c43      	adds	r3, r0, #1
 8013056:	d102      	bne.n	801305e <_sbrk_r+0x1a>
 8013058:	682b      	ldr	r3, [r5, #0]
 801305a:	b103      	cbz	r3, 801305e <_sbrk_r+0x1a>
 801305c:	6023      	str	r3, [r4, #0]
 801305e:	bd38      	pop	{r3, r4, r5, pc}
 8013060:	20004230 	.word	0x20004230

08013064 <memcpy>:
 8013064:	440a      	add	r2, r1
 8013066:	4291      	cmp	r1, r2
 8013068:	f100 33ff 	add.w	r3, r0, #4294967295
 801306c:	d100      	bne.n	8013070 <memcpy+0xc>
 801306e:	4770      	bx	lr
 8013070:	b510      	push	{r4, lr}
 8013072:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013076:	f803 4f01 	strb.w	r4, [r3, #1]!
 801307a:	4291      	cmp	r1, r2
 801307c:	d1f9      	bne.n	8013072 <memcpy+0xe>
 801307e:	bd10      	pop	{r4, pc}

08013080 <nan>:
 8013080:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8013088 <nan+0x8>
 8013084:	4770      	bx	lr
 8013086:	bf00      	nop
 8013088:	00000000 	.word	0x00000000
 801308c:	7ff80000 	.word	0x7ff80000

08013090 <__assert_func>:
 8013090:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013092:	4614      	mov	r4, r2
 8013094:	461a      	mov	r2, r3
 8013096:	4b09      	ldr	r3, [pc, #36]	@ (80130bc <__assert_func+0x2c>)
 8013098:	681b      	ldr	r3, [r3, #0]
 801309a:	4605      	mov	r5, r0
 801309c:	68d8      	ldr	r0, [r3, #12]
 801309e:	b954      	cbnz	r4, 80130b6 <__assert_func+0x26>
 80130a0:	4b07      	ldr	r3, [pc, #28]	@ (80130c0 <__assert_func+0x30>)
 80130a2:	461c      	mov	r4, r3
 80130a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80130a8:	9100      	str	r1, [sp, #0]
 80130aa:	462b      	mov	r3, r5
 80130ac:	4905      	ldr	r1, [pc, #20]	@ (80130c4 <__assert_func+0x34>)
 80130ae:	f000 fba7 	bl	8013800 <fiprintf>
 80130b2:	f000 fbb7 	bl	8013824 <abort>
 80130b6:	4b04      	ldr	r3, [pc, #16]	@ (80130c8 <__assert_func+0x38>)
 80130b8:	e7f4      	b.n	80130a4 <__assert_func+0x14>
 80130ba:	bf00      	nop
 80130bc:	20000190 	.word	0x20000190
 80130c0:	08014cd5 	.word	0x08014cd5
 80130c4:	08014ca7 	.word	0x08014ca7
 80130c8:	08014c9a 	.word	0x08014c9a

080130cc <_calloc_r>:
 80130cc:	b570      	push	{r4, r5, r6, lr}
 80130ce:	fba1 5402 	umull	r5, r4, r1, r2
 80130d2:	b93c      	cbnz	r4, 80130e4 <_calloc_r+0x18>
 80130d4:	4629      	mov	r1, r5
 80130d6:	f7fe f9c3 	bl	8011460 <_malloc_r>
 80130da:	4606      	mov	r6, r0
 80130dc:	b928      	cbnz	r0, 80130ea <_calloc_r+0x1e>
 80130de:	2600      	movs	r6, #0
 80130e0:	4630      	mov	r0, r6
 80130e2:	bd70      	pop	{r4, r5, r6, pc}
 80130e4:	220c      	movs	r2, #12
 80130e6:	6002      	str	r2, [r0, #0]
 80130e8:	e7f9      	b.n	80130de <_calloc_r+0x12>
 80130ea:	462a      	mov	r2, r5
 80130ec:	4621      	mov	r1, r4
 80130ee:	f7fd fa6e 	bl	80105ce <memset>
 80130f2:	e7f5      	b.n	80130e0 <_calloc_r+0x14>

080130f4 <rshift>:
 80130f4:	6903      	ldr	r3, [r0, #16]
 80130f6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80130fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80130fe:	ea4f 1261 	mov.w	r2, r1, asr #5
 8013102:	f100 0414 	add.w	r4, r0, #20
 8013106:	dd45      	ble.n	8013194 <rshift+0xa0>
 8013108:	f011 011f 	ands.w	r1, r1, #31
 801310c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8013110:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8013114:	d10c      	bne.n	8013130 <rshift+0x3c>
 8013116:	f100 0710 	add.w	r7, r0, #16
 801311a:	4629      	mov	r1, r5
 801311c:	42b1      	cmp	r1, r6
 801311e:	d334      	bcc.n	801318a <rshift+0x96>
 8013120:	1a9b      	subs	r3, r3, r2
 8013122:	009b      	lsls	r3, r3, #2
 8013124:	1eea      	subs	r2, r5, #3
 8013126:	4296      	cmp	r6, r2
 8013128:	bf38      	it	cc
 801312a:	2300      	movcc	r3, #0
 801312c:	4423      	add	r3, r4
 801312e:	e015      	b.n	801315c <rshift+0x68>
 8013130:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8013134:	f1c1 0820 	rsb	r8, r1, #32
 8013138:	40cf      	lsrs	r7, r1
 801313a:	f105 0e04 	add.w	lr, r5, #4
 801313e:	46a1      	mov	r9, r4
 8013140:	4576      	cmp	r6, lr
 8013142:	46f4      	mov	ip, lr
 8013144:	d815      	bhi.n	8013172 <rshift+0x7e>
 8013146:	1a9a      	subs	r2, r3, r2
 8013148:	0092      	lsls	r2, r2, #2
 801314a:	3a04      	subs	r2, #4
 801314c:	3501      	adds	r5, #1
 801314e:	42ae      	cmp	r6, r5
 8013150:	bf38      	it	cc
 8013152:	2200      	movcc	r2, #0
 8013154:	18a3      	adds	r3, r4, r2
 8013156:	50a7      	str	r7, [r4, r2]
 8013158:	b107      	cbz	r7, 801315c <rshift+0x68>
 801315a:	3304      	adds	r3, #4
 801315c:	1b1a      	subs	r2, r3, r4
 801315e:	42a3      	cmp	r3, r4
 8013160:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8013164:	bf08      	it	eq
 8013166:	2300      	moveq	r3, #0
 8013168:	6102      	str	r2, [r0, #16]
 801316a:	bf08      	it	eq
 801316c:	6143      	streq	r3, [r0, #20]
 801316e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013172:	f8dc c000 	ldr.w	ip, [ip]
 8013176:	fa0c fc08 	lsl.w	ip, ip, r8
 801317a:	ea4c 0707 	orr.w	r7, ip, r7
 801317e:	f849 7b04 	str.w	r7, [r9], #4
 8013182:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013186:	40cf      	lsrs	r7, r1
 8013188:	e7da      	b.n	8013140 <rshift+0x4c>
 801318a:	f851 cb04 	ldr.w	ip, [r1], #4
 801318e:	f847 cf04 	str.w	ip, [r7, #4]!
 8013192:	e7c3      	b.n	801311c <rshift+0x28>
 8013194:	4623      	mov	r3, r4
 8013196:	e7e1      	b.n	801315c <rshift+0x68>

08013198 <__hexdig_fun>:
 8013198:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801319c:	2b09      	cmp	r3, #9
 801319e:	d802      	bhi.n	80131a6 <__hexdig_fun+0xe>
 80131a0:	3820      	subs	r0, #32
 80131a2:	b2c0      	uxtb	r0, r0
 80131a4:	4770      	bx	lr
 80131a6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80131aa:	2b05      	cmp	r3, #5
 80131ac:	d801      	bhi.n	80131b2 <__hexdig_fun+0x1a>
 80131ae:	3847      	subs	r0, #71	@ 0x47
 80131b0:	e7f7      	b.n	80131a2 <__hexdig_fun+0xa>
 80131b2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80131b6:	2b05      	cmp	r3, #5
 80131b8:	d801      	bhi.n	80131be <__hexdig_fun+0x26>
 80131ba:	3827      	subs	r0, #39	@ 0x27
 80131bc:	e7f1      	b.n	80131a2 <__hexdig_fun+0xa>
 80131be:	2000      	movs	r0, #0
 80131c0:	4770      	bx	lr
	...

080131c4 <__gethex>:
 80131c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131c8:	b085      	sub	sp, #20
 80131ca:	468a      	mov	sl, r1
 80131cc:	9302      	str	r3, [sp, #8]
 80131ce:	680b      	ldr	r3, [r1, #0]
 80131d0:	9001      	str	r0, [sp, #4]
 80131d2:	4690      	mov	r8, r2
 80131d4:	1c9c      	adds	r4, r3, #2
 80131d6:	46a1      	mov	r9, r4
 80131d8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80131dc:	2830      	cmp	r0, #48	@ 0x30
 80131de:	d0fa      	beq.n	80131d6 <__gethex+0x12>
 80131e0:	eba9 0303 	sub.w	r3, r9, r3
 80131e4:	f1a3 0b02 	sub.w	fp, r3, #2
 80131e8:	f7ff ffd6 	bl	8013198 <__hexdig_fun>
 80131ec:	4605      	mov	r5, r0
 80131ee:	2800      	cmp	r0, #0
 80131f0:	d168      	bne.n	80132c4 <__gethex+0x100>
 80131f2:	49a0      	ldr	r1, [pc, #640]	@ (8013474 <__gethex+0x2b0>)
 80131f4:	2201      	movs	r2, #1
 80131f6:	4648      	mov	r0, r9
 80131f8:	f7ff ff12 	bl	8013020 <strncmp>
 80131fc:	4607      	mov	r7, r0
 80131fe:	2800      	cmp	r0, #0
 8013200:	d167      	bne.n	80132d2 <__gethex+0x10e>
 8013202:	f899 0001 	ldrb.w	r0, [r9, #1]
 8013206:	4626      	mov	r6, r4
 8013208:	f7ff ffc6 	bl	8013198 <__hexdig_fun>
 801320c:	2800      	cmp	r0, #0
 801320e:	d062      	beq.n	80132d6 <__gethex+0x112>
 8013210:	4623      	mov	r3, r4
 8013212:	7818      	ldrb	r0, [r3, #0]
 8013214:	2830      	cmp	r0, #48	@ 0x30
 8013216:	4699      	mov	r9, r3
 8013218:	f103 0301 	add.w	r3, r3, #1
 801321c:	d0f9      	beq.n	8013212 <__gethex+0x4e>
 801321e:	f7ff ffbb 	bl	8013198 <__hexdig_fun>
 8013222:	fab0 f580 	clz	r5, r0
 8013226:	096d      	lsrs	r5, r5, #5
 8013228:	f04f 0b01 	mov.w	fp, #1
 801322c:	464a      	mov	r2, r9
 801322e:	4616      	mov	r6, r2
 8013230:	3201      	adds	r2, #1
 8013232:	7830      	ldrb	r0, [r6, #0]
 8013234:	f7ff ffb0 	bl	8013198 <__hexdig_fun>
 8013238:	2800      	cmp	r0, #0
 801323a:	d1f8      	bne.n	801322e <__gethex+0x6a>
 801323c:	498d      	ldr	r1, [pc, #564]	@ (8013474 <__gethex+0x2b0>)
 801323e:	2201      	movs	r2, #1
 8013240:	4630      	mov	r0, r6
 8013242:	f7ff feed 	bl	8013020 <strncmp>
 8013246:	2800      	cmp	r0, #0
 8013248:	d13f      	bne.n	80132ca <__gethex+0x106>
 801324a:	b944      	cbnz	r4, 801325e <__gethex+0x9a>
 801324c:	1c74      	adds	r4, r6, #1
 801324e:	4622      	mov	r2, r4
 8013250:	4616      	mov	r6, r2
 8013252:	3201      	adds	r2, #1
 8013254:	7830      	ldrb	r0, [r6, #0]
 8013256:	f7ff ff9f 	bl	8013198 <__hexdig_fun>
 801325a:	2800      	cmp	r0, #0
 801325c:	d1f8      	bne.n	8013250 <__gethex+0x8c>
 801325e:	1ba4      	subs	r4, r4, r6
 8013260:	00a7      	lsls	r7, r4, #2
 8013262:	7833      	ldrb	r3, [r6, #0]
 8013264:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8013268:	2b50      	cmp	r3, #80	@ 0x50
 801326a:	d13e      	bne.n	80132ea <__gethex+0x126>
 801326c:	7873      	ldrb	r3, [r6, #1]
 801326e:	2b2b      	cmp	r3, #43	@ 0x2b
 8013270:	d033      	beq.n	80132da <__gethex+0x116>
 8013272:	2b2d      	cmp	r3, #45	@ 0x2d
 8013274:	d034      	beq.n	80132e0 <__gethex+0x11c>
 8013276:	1c71      	adds	r1, r6, #1
 8013278:	2400      	movs	r4, #0
 801327a:	7808      	ldrb	r0, [r1, #0]
 801327c:	f7ff ff8c 	bl	8013198 <__hexdig_fun>
 8013280:	1e43      	subs	r3, r0, #1
 8013282:	b2db      	uxtb	r3, r3
 8013284:	2b18      	cmp	r3, #24
 8013286:	d830      	bhi.n	80132ea <__gethex+0x126>
 8013288:	f1a0 0210 	sub.w	r2, r0, #16
 801328c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8013290:	f7ff ff82 	bl	8013198 <__hexdig_fun>
 8013294:	f100 3cff 	add.w	ip, r0, #4294967295
 8013298:	fa5f fc8c 	uxtb.w	ip, ip
 801329c:	f1bc 0f18 	cmp.w	ip, #24
 80132a0:	f04f 030a 	mov.w	r3, #10
 80132a4:	d91e      	bls.n	80132e4 <__gethex+0x120>
 80132a6:	b104      	cbz	r4, 80132aa <__gethex+0xe6>
 80132a8:	4252      	negs	r2, r2
 80132aa:	4417      	add	r7, r2
 80132ac:	f8ca 1000 	str.w	r1, [sl]
 80132b0:	b1ed      	cbz	r5, 80132ee <__gethex+0x12a>
 80132b2:	f1bb 0f00 	cmp.w	fp, #0
 80132b6:	bf0c      	ite	eq
 80132b8:	2506      	moveq	r5, #6
 80132ba:	2500      	movne	r5, #0
 80132bc:	4628      	mov	r0, r5
 80132be:	b005      	add	sp, #20
 80132c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132c4:	2500      	movs	r5, #0
 80132c6:	462c      	mov	r4, r5
 80132c8:	e7b0      	b.n	801322c <__gethex+0x68>
 80132ca:	2c00      	cmp	r4, #0
 80132cc:	d1c7      	bne.n	801325e <__gethex+0x9a>
 80132ce:	4627      	mov	r7, r4
 80132d0:	e7c7      	b.n	8013262 <__gethex+0x9e>
 80132d2:	464e      	mov	r6, r9
 80132d4:	462f      	mov	r7, r5
 80132d6:	2501      	movs	r5, #1
 80132d8:	e7c3      	b.n	8013262 <__gethex+0x9e>
 80132da:	2400      	movs	r4, #0
 80132dc:	1cb1      	adds	r1, r6, #2
 80132de:	e7cc      	b.n	801327a <__gethex+0xb6>
 80132e0:	2401      	movs	r4, #1
 80132e2:	e7fb      	b.n	80132dc <__gethex+0x118>
 80132e4:	fb03 0002 	mla	r0, r3, r2, r0
 80132e8:	e7ce      	b.n	8013288 <__gethex+0xc4>
 80132ea:	4631      	mov	r1, r6
 80132ec:	e7de      	b.n	80132ac <__gethex+0xe8>
 80132ee:	eba6 0309 	sub.w	r3, r6, r9
 80132f2:	3b01      	subs	r3, #1
 80132f4:	4629      	mov	r1, r5
 80132f6:	2b07      	cmp	r3, #7
 80132f8:	dc0a      	bgt.n	8013310 <__gethex+0x14c>
 80132fa:	9801      	ldr	r0, [sp, #4]
 80132fc:	f7fe f93c 	bl	8011578 <_Balloc>
 8013300:	4604      	mov	r4, r0
 8013302:	b940      	cbnz	r0, 8013316 <__gethex+0x152>
 8013304:	4b5c      	ldr	r3, [pc, #368]	@ (8013478 <__gethex+0x2b4>)
 8013306:	4602      	mov	r2, r0
 8013308:	21e4      	movs	r1, #228	@ 0xe4
 801330a:	485c      	ldr	r0, [pc, #368]	@ (801347c <__gethex+0x2b8>)
 801330c:	f7ff fec0 	bl	8013090 <__assert_func>
 8013310:	3101      	adds	r1, #1
 8013312:	105b      	asrs	r3, r3, #1
 8013314:	e7ef      	b.n	80132f6 <__gethex+0x132>
 8013316:	f100 0a14 	add.w	sl, r0, #20
 801331a:	2300      	movs	r3, #0
 801331c:	4655      	mov	r5, sl
 801331e:	469b      	mov	fp, r3
 8013320:	45b1      	cmp	r9, r6
 8013322:	d337      	bcc.n	8013394 <__gethex+0x1d0>
 8013324:	f845 bb04 	str.w	fp, [r5], #4
 8013328:	eba5 050a 	sub.w	r5, r5, sl
 801332c:	10ad      	asrs	r5, r5, #2
 801332e:	6125      	str	r5, [r4, #16]
 8013330:	4658      	mov	r0, fp
 8013332:	f7fe fa13 	bl	801175c <__hi0bits>
 8013336:	016d      	lsls	r5, r5, #5
 8013338:	f8d8 6000 	ldr.w	r6, [r8]
 801333c:	1a2d      	subs	r5, r5, r0
 801333e:	42b5      	cmp	r5, r6
 8013340:	dd54      	ble.n	80133ec <__gethex+0x228>
 8013342:	1bad      	subs	r5, r5, r6
 8013344:	4629      	mov	r1, r5
 8013346:	4620      	mov	r0, r4
 8013348:	f7fe fda7 	bl	8011e9a <__any_on>
 801334c:	4681      	mov	r9, r0
 801334e:	b178      	cbz	r0, 8013370 <__gethex+0x1ac>
 8013350:	1e6b      	subs	r3, r5, #1
 8013352:	1159      	asrs	r1, r3, #5
 8013354:	f003 021f 	and.w	r2, r3, #31
 8013358:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801335c:	f04f 0901 	mov.w	r9, #1
 8013360:	fa09 f202 	lsl.w	r2, r9, r2
 8013364:	420a      	tst	r2, r1
 8013366:	d003      	beq.n	8013370 <__gethex+0x1ac>
 8013368:	454b      	cmp	r3, r9
 801336a:	dc36      	bgt.n	80133da <__gethex+0x216>
 801336c:	f04f 0902 	mov.w	r9, #2
 8013370:	4629      	mov	r1, r5
 8013372:	4620      	mov	r0, r4
 8013374:	f7ff febe 	bl	80130f4 <rshift>
 8013378:	442f      	add	r7, r5
 801337a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801337e:	42bb      	cmp	r3, r7
 8013380:	da42      	bge.n	8013408 <__gethex+0x244>
 8013382:	9801      	ldr	r0, [sp, #4]
 8013384:	4621      	mov	r1, r4
 8013386:	f7fe f937 	bl	80115f8 <_Bfree>
 801338a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801338c:	2300      	movs	r3, #0
 801338e:	6013      	str	r3, [r2, #0]
 8013390:	25a3      	movs	r5, #163	@ 0xa3
 8013392:	e793      	b.n	80132bc <__gethex+0xf8>
 8013394:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8013398:	2a2e      	cmp	r2, #46	@ 0x2e
 801339a:	d012      	beq.n	80133c2 <__gethex+0x1fe>
 801339c:	2b20      	cmp	r3, #32
 801339e:	d104      	bne.n	80133aa <__gethex+0x1e6>
 80133a0:	f845 bb04 	str.w	fp, [r5], #4
 80133a4:	f04f 0b00 	mov.w	fp, #0
 80133a8:	465b      	mov	r3, fp
 80133aa:	7830      	ldrb	r0, [r6, #0]
 80133ac:	9303      	str	r3, [sp, #12]
 80133ae:	f7ff fef3 	bl	8013198 <__hexdig_fun>
 80133b2:	9b03      	ldr	r3, [sp, #12]
 80133b4:	f000 000f 	and.w	r0, r0, #15
 80133b8:	4098      	lsls	r0, r3
 80133ba:	ea4b 0b00 	orr.w	fp, fp, r0
 80133be:	3304      	adds	r3, #4
 80133c0:	e7ae      	b.n	8013320 <__gethex+0x15c>
 80133c2:	45b1      	cmp	r9, r6
 80133c4:	d8ea      	bhi.n	801339c <__gethex+0x1d8>
 80133c6:	492b      	ldr	r1, [pc, #172]	@ (8013474 <__gethex+0x2b0>)
 80133c8:	9303      	str	r3, [sp, #12]
 80133ca:	2201      	movs	r2, #1
 80133cc:	4630      	mov	r0, r6
 80133ce:	f7ff fe27 	bl	8013020 <strncmp>
 80133d2:	9b03      	ldr	r3, [sp, #12]
 80133d4:	2800      	cmp	r0, #0
 80133d6:	d1e1      	bne.n	801339c <__gethex+0x1d8>
 80133d8:	e7a2      	b.n	8013320 <__gethex+0x15c>
 80133da:	1ea9      	subs	r1, r5, #2
 80133dc:	4620      	mov	r0, r4
 80133de:	f7fe fd5c 	bl	8011e9a <__any_on>
 80133e2:	2800      	cmp	r0, #0
 80133e4:	d0c2      	beq.n	801336c <__gethex+0x1a8>
 80133e6:	f04f 0903 	mov.w	r9, #3
 80133ea:	e7c1      	b.n	8013370 <__gethex+0x1ac>
 80133ec:	da09      	bge.n	8013402 <__gethex+0x23e>
 80133ee:	1b75      	subs	r5, r6, r5
 80133f0:	4621      	mov	r1, r4
 80133f2:	9801      	ldr	r0, [sp, #4]
 80133f4:	462a      	mov	r2, r5
 80133f6:	f7fe fb17 	bl	8011a28 <__lshift>
 80133fa:	1b7f      	subs	r7, r7, r5
 80133fc:	4604      	mov	r4, r0
 80133fe:	f100 0a14 	add.w	sl, r0, #20
 8013402:	f04f 0900 	mov.w	r9, #0
 8013406:	e7b8      	b.n	801337a <__gethex+0x1b6>
 8013408:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801340c:	42bd      	cmp	r5, r7
 801340e:	dd6f      	ble.n	80134f0 <__gethex+0x32c>
 8013410:	1bed      	subs	r5, r5, r7
 8013412:	42ae      	cmp	r6, r5
 8013414:	dc34      	bgt.n	8013480 <__gethex+0x2bc>
 8013416:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801341a:	2b02      	cmp	r3, #2
 801341c:	d022      	beq.n	8013464 <__gethex+0x2a0>
 801341e:	2b03      	cmp	r3, #3
 8013420:	d024      	beq.n	801346c <__gethex+0x2a8>
 8013422:	2b01      	cmp	r3, #1
 8013424:	d115      	bne.n	8013452 <__gethex+0x28e>
 8013426:	42ae      	cmp	r6, r5
 8013428:	d113      	bne.n	8013452 <__gethex+0x28e>
 801342a:	2e01      	cmp	r6, #1
 801342c:	d10b      	bne.n	8013446 <__gethex+0x282>
 801342e:	9a02      	ldr	r2, [sp, #8]
 8013430:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013434:	6013      	str	r3, [r2, #0]
 8013436:	2301      	movs	r3, #1
 8013438:	6123      	str	r3, [r4, #16]
 801343a:	f8ca 3000 	str.w	r3, [sl]
 801343e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013440:	2562      	movs	r5, #98	@ 0x62
 8013442:	601c      	str	r4, [r3, #0]
 8013444:	e73a      	b.n	80132bc <__gethex+0xf8>
 8013446:	1e71      	subs	r1, r6, #1
 8013448:	4620      	mov	r0, r4
 801344a:	f7fe fd26 	bl	8011e9a <__any_on>
 801344e:	2800      	cmp	r0, #0
 8013450:	d1ed      	bne.n	801342e <__gethex+0x26a>
 8013452:	9801      	ldr	r0, [sp, #4]
 8013454:	4621      	mov	r1, r4
 8013456:	f7fe f8cf 	bl	80115f8 <_Bfree>
 801345a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801345c:	2300      	movs	r3, #0
 801345e:	6013      	str	r3, [r2, #0]
 8013460:	2550      	movs	r5, #80	@ 0x50
 8013462:	e72b      	b.n	80132bc <__gethex+0xf8>
 8013464:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013466:	2b00      	cmp	r3, #0
 8013468:	d1f3      	bne.n	8013452 <__gethex+0x28e>
 801346a:	e7e0      	b.n	801342e <__gethex+0x26a>
 801346c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801346e:	2b00      	cmp	r3, #0
 8013470:	d1dd      	bne.n	801342e <__gethex+0x26a>
 8013472:	e7ee      	b.n	8013452 <__gethex+0x28e>
 8013474:	08014b28 	.word	0x08014b28
 8013478:	080149c1 	.word	0x080149c1
 801347c:	08014cd6 	.word	0x08014cd6
 8013480:	1e6f      	subs	r7, r5, #1
 8013482:	f1b9 0f00 	cmp.w	r9, #0
 8013486:	d130      	bne.n	80134ea <__gethex+0x326>
 8013488:	b127      	cbz	r7, 8013494 <__gethex+0x2d0>
 801348a:	4639      	mov	r1, r7
 801348c:	4620      	mov	r0, r4
 801348e:	f7fe fd04 	bl	8011e9a <__any_on>
 8013492:	4681      	mov	r9, r0
 8013494:	117a      	asrs	r2, r7, #5
 8013496:	2301      	movs	r3, #1
 8013498:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801349c:	f007 071f 	and.w	r7, r7, #31
 80134a0:	40bb      	lsls	r3, r7
 80134a2:	4213      	tst	r3, r2
 80134a4:	4629      	mov	r1, r5
 80134a6:	4620      	mov	r0, r4
 80134a8:	bf18      	it	ne
 80134aa:	f049 0902 	orrne.w	r9, r9, #2
 80134ae:	f7ff fe21 	bl	80130f4 <rshift>
 80134b2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80134b6:	1b76      	subs	r6, r6, r5
 80134b8:	2502      	movs	r5, #2
 80134ba:	f1b9 0f00 	cmp.w	r9, #0
 80134be:	d047      	beq.n	8013550 <__gethex+0x38c>
 80134c0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80134c4:	2b02      	cmp	r3, #2
 80134c6:	d015      	beq.n	80134f4 <__gethex+0x330>
 80134c8:	2b03      	cmp	r3, #3
 80134ca:	d017      	beq.n	80134fc <__gethex+0x338>
 80134cc:	2b01      	cmp	r3, #1
 80134ce:	d109      	bne.n	80134e4 <__gethex+0x320>
 80134d0:	f019 0f02 	tst.w	r9, #2
 80134d4:	d006      	beq.n	80134e4 <__gethex+0x320>
 80134d6:	f8da 3000 	ldr.w	r3, [sl]
 80134da:	ea49 0903 	orr.w	r9, r9, r3
 80134de:	f019 0f01 	tst.w	r9, #1
 80134e2:	d10e      	bne.n	8013502 <__gethex+0x33e>
 80134e4:	f045 0510 	orr.w	r5, r5, #16
 80134e8:	e032      	b.n	8013550 <__gethex+0x38c>
 80134ea:	f04f 0901 	mov.w	r9, #1
 80134ee:	e7d1      	b.n	8013494 <__gethex+0x2d0>
 80134f0:	2501      	movs	r5, #1
 80134f2:	e7e2      	b.n	80134ba <__gethex+0x2f6>
 80134f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80134f6:	f1c3 0301 	rsb	r3, r3, #1
 80134fa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80134fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d0f0      	beq.n	80134e4 <__gethex+0x320>
 8013502:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8013506:	f104 0314 	add.w	r3, r4, #20
 801350a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801350e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8013512:	f04f 0c00 	mov.w	ip, #0
 8013516:	4618      	mov	r0, r3
 8013518:	f853 2b04 	ldr.w	r2, [r3], #4
 801351c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8013520:	d01b      	beq.n	801355a <__gethex+0x396>
 8013522:	3201      	adds	r2, #1
 8013524:	6002      	str	r2, [r0, #0]
 8013526:	2d02      	cmp	r5, #2
 8013528:	f104 0314 	add.w	r3, r4, #20
 801352c:	d13c      	bne.n	80135a8 <__gethex+0x3e4>
 801352e:	f8d8 2000 	ldr.w	r2, [r8]
 8013532:	3a01      	subs	r2, #1
 8013534:	42b2      	cmp	r2, r6
 8013536:	d109      	bne.n	801354c <__gethex+0x388>
 8013538:	1171      	asrs	r1, r6, #5
 801353a:	2201      	movs	r2, #1
 801353c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013540:	f006 061f 	and.w	r6, r6, #31
 8013544:	fa02 f606 	lsl.w	r6, r2, r6
 8013548:	421e      	tst	r6, r3
 801354a:	d13a      	bne.n	80135c2 <__gethex+0x3fe>
 801354c:	f045 0520 	orr.w	r5, r5, #32
 8013550:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013552:	601c      	str	r4, [r3, #0]
 8013554:	9b02      	ldr	r3, [sp, #8]
 8013556:	601f      	str	r7, [r3, #0]
 8013558:	e6b0      	b.n	80132bc <__gethex+0xf8>
 801355a:	4299      	cmp	r1, r3
 801355c:	f843 cc04 	str.w	ip, [r3, #-4]
 8013560:	d8d9      	bhi.n	8013516 <__gethex+0x352>
 8013562:	68a3      	ldr	r3, [r4, #8]
 8013564:	459b      	cmp	fp, r3
 8013566:	db17      	blt.n	8013598 <__gethex+0x3d4>
 8013568:	6861      	ldr	r1, [r4, #4]
 801356a:	9801      	ldr	r0, [sp, #4]
 801356c:	3101      	adds	r1, #1
 801356e:	f7fe f803 	bl	8011578 <_Balloc>
 8013572:	4681      	mov	r9, r0
 8013574:	b918      	cbnz	r0, 801357e <__gethex+0x3ba>
 8013576:	4b1a      	ldr	r3, [pc, #104]	@ (80135e0 <__gethex+0x41c>)
 8013578:	4602      	mov	r2, r0
 801357a:	2184      	movs	r1, #132	@ 0x84
 801357c:	e6c5      	b.n	801330a <__gethex+0x146>
 801357e:	6922      	ldr	r2, [r4, #16]
 8013580:	3202      	adds	r2, #2
 8013582:	f104 010c 	add.w	r1, r4, #12
 8013586:	0092      	lsls	r2, r2, #2
 8013588:	300c      	adds	r0, #12
 801358a:	f7ff fd6b 	bl	8013064 <memcpy>
 801358e:	4621      	mov	r1, r4
 8013590:	9801      	ldr	r0, [sp, #4]
 8013592:	f7fe f831 	bl	80115f8 <_Bfree>
 8013596:	464c      	mov	r4, r9
 8013598:	6923      	ldr	r3, [r4, #16]
 801359a:	1c5a      	adds	r2, r3, #1
 801359c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80135a0:	6122      	str	r2, [r4, #16]
 80135a2:	2201      	movs	r2, #1
 80135a4:	615a      	str	r2, [r3, #20]
 80135a6:	e7be      	b.n	8013526 <__gethex+0x362>
 80135a8:	6922      	ldr	r2, [r4, #16]
 80135aa:	455a      	cmp	r2, fp
 80135ac:	dd0b      	ble.n	80135c6 <__gethex+0x402>
 80135ae:	2101      	movs	r1, #1
 80135b0:	4620      	mov	r0, r4
 80135b2:	f7ff fd9f 	bl	80130f4 <rshift>
 80135b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80135ba:	3701      	adds	r7, #1
 80135bc:	42bb      	cmp	r3, r7
 80135be:	f6ff aee0 	blt.w	8013382 <__gethex+0x1be>
 80135c2:	2501      	movs	r5, #1
 80135c4:	e7c2      	b.n	801354c <__gethex+0x388>
 80135c6:	f016 061f 	ands.w	r6, r6, #31
 80135ca:	d0fa      	beq.n	80135c2 <__gethex+0x3fe>
 80135cc:	4453      	add	r3, sl
 80135ce:	f1c6 0620 	rsb	r6, r6, #32
 80135d2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80135d6:	f7fe f8c1 	bl	801175c <__hi0bits>
 80135da:	42b0      	cmp	r0, r6
 80135dc:	dbe7      	blt.n	80135ae <__gethex+0x3ea>
 80135de:	e7f0      	b.n	80135c2 <__gethex+0x3fe>
 80135e0:	080149c1 	.word	0x080149c1

080135e4 <L_shift>:
 80135e4:	f1c2 0208 	rsb	r2, r2, #8
 80135e8:	0092      	lsls	r2, r2, #2
 80135ea:	b570      	push	{r4, r5, r6, lr}
 80135ec:	f1c2 0620 	rsb	r6, r2, #32
 80135f0:	6843      	ldr	r3, [r0, #4]
 80135f2:	6804      	ldr	r4, [r0, #0]
 80135f4:	fa03 f506 	lsl.w	r5, r3, r6
 80135f8:	432c      	orrs	r4, r5
 80135fa:	40d3      	lsrs	r3, r2
 80135fc:	6004      	str	r4, [r0, #0]
 80135fe:	f840 3f04 	str.w	r3, [r0, #4]!
 8013602:	4288      	cmp	r0, r1
 8013604:	d3f4      	bcc.n	80135f0 <L_shift+0xc>
 8013606:	bd70      	pop	{r4, r5, r6, pc}

08013608 <__match>:
 8013608:	b530      	push	{r4, r5, lr}
 801360a:	6803      	ldr	r3, [r0, #0]
 801360c:	3301      	adds	r3, #1
 801360e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013612:	b914      	cbnz	r4, 801361a <__match+0x12>
 8013614:	6003      	str	r3, [r0, #0]
 8013616:	2001      	movs	r0, #1
 8013618:	bd30      	pop	{r4, r5, pc}
 801361a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801361e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8013622:	2d19      	cmp	r5, #25
 8013624:	bf98      	it	ls
 8013626:	3220      	addls	r2, #32
 8013628:	42a2      	cmp	r2, r4
 801362a:	d0f0      	beq.n	801360e <__match+0x6>
 801362c:	2000      	movs	r0, #0
 801362e:	e7f3      	b.n	8013618 <__match+0x10>

08013630 <__hexnan>:
 8013630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013634:	680b      	ldr	r3, [r1, #0]
 8013636:	6801      	ldr	r1, [r0, #0]
 8013638:	115e      	asrs	r6, r3, #5
 801363a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801363e:	f013 031f 	ands.w	r3, r3, #31
 8013642:	b087      	sub	sp, #28
 8013644:	bf18      	it	ne
 8013646:	3604      	addne	r6, #4
 8013648:	2500      	movs	r5, #0
 801364a:	1f37      	subs	r7, r6, #4
 801364c:	4682      	mov	sl, r0
 801364e:	4690      	mov	r8, r2
 8013650:	9301      	str	r3, [sp, #4]
 8013652:	f846 5c04 	str.w	r5, [r6, #-4]
 8013656:	46b9      	mov	r9, r7
 8013658:	463c      	mov	r4, r7
 801365a:	9502      	str	r5, [sp, #8]
 801365c:	46ab      	mov	fp, r5
 801365e:	784a      	ldrb	r2, [r1, #1]
 8013660:	1c4b      	adds	r3, r1, #1
 8013662:	9303      	str	r3, [sp, #12]
 8013664:	b342      	cbz	r2, 80136b8 <__hexnan+0x88>
 8013666:	4610      	mov	r0, r2
 8013668:	9105      	str	r1, [sp, #20]
 801366a:	9204      	str	r2, [sp, #16]
 801366c:	f7ff fd94 	bl	8013198 <__hexdig_fun>
 8013670:	2800      	cmp	r0, #0
 8013672:	d151      	bne.n	8013718 <__hexnan+0xe8>
 8013674:	9a04      	ldr	r2, [sp, #16]
 8013676:	9905      	ldr	r1, [sp, #20]
 8013678:	2a20      	cmp	r2, #32
 801367a:	d818      	bhi.n	80136ae <__hexnan+0x7e>
 801367c:	9b02      	ldr	r3, [sp, #8]
 801367e:	459b      	cmp	fp, r3
 8013680:	dd13      	ble.n	80136aa <__hexnan+0x7a>
 8013682:	454c      	cmp	r4, r9
 8013684:	d206      	bcs.n	8013694 <__hexnan+0x64>
 8013686:	2d07      	cmp	r5, #7
 8013688:	dc04      	bgt.n	8013694 <__hexnan+0x64>
 801368a:	462a      	mov	r2, r5
 801368c:	4649      	mov	r1, r9
 801368e:	4620      	mov	r0, r4
 8013690:	f7ff ffa8 	bl	80135e4 <L_shift>
 8013694:	4544      	cmp	r4, r8
 8013696:	d952      	bls.n	801373e <__hexnan+0x10e>
 8013698:	2300      	movs	r3, #0
 801369a:	f1a4 0904 	sub.w	r9, r4, #4
 801369e:	f844 3c04 	str.w	r3, [r4, #-4]
 80136a2:	f8cd b008 	str.w	fp, [sp, #8]
 80136a6:	464c      	mov	r4, r9
 80136a8:	461d      	mov	r5, r3
 80136aa:	9903      	ldr	r1, [sp, #12]
 80136ac:	e7d7      	b.n	801365e <__hexnan+0x2e>
 80136ae:	2a29      	cmp	r2, #41	@ 0x29
 80136b0:	d157      	bne.n	8013762 <__hexnan+0x132>
 80136b2:	3102      	adds	r1, #2
 80136b4:	f8ca 1000 	str.w	r1, [sl]
 80136b8:	f1bb 0f00 	cmp.w	fp, #0
 80136bc:	d051      	beq.n	8013762 <__hexnan+0x132>
 80136be:	454c      	cmp	r4, r9
 80136c0:	d206      	bcs.n	80136d0 <__hexnan+0xa0>
 80136c2:	2d07      	cmp	r5, #7
 80136c4:	dc04      	bgt.n	80136d0 <__hexnan+0xa0>
 80136c6:	462a      	mov	r2, r5
 80136c8:	4649      	mov	r1, r9
 80136ca:	4620      	mov	r0, r4
 80136cc:	f7ff ff8a 	bl	80135e4 <L_shift>
 80136d0:	4544      	cmp	r4, r8
 80136d2:	d936      	bls.n	8013742 <__hexnan+0x112>
 80136d4:	f1a8 0204 	sub.w	r2, r8, #4
 80136d8:	4623      	mov	r3, r4
 80136da:	f853 1b04 	ldr.w	r1, [r3], #4
 80136de:	f842 1f04 	str.w	r1, [r2, #4]!
 80136e2:	429f      	cmp	r7, r3
 80136e4:	d2f9      	bcs.n	80136da <__hexnan+0xaa>
 80136e6:	1b3b      	subs	r3, r7, r4
 80136e8:	f023 0303 	bic.w	r3, r3, #3
 80136ec:	3304      	adds	r3, #4
 80136ee:	3401      	adds	r4, #1
 80136f0:	3e03      	subs	r6, #3
 80136f2:	42b4      	cmp	r4, r6
 80136f4:	bf88      	it	hi
 80136f6:	2304      	movhi	r3, #4
 80136f8:	4443      	add	r3, r8
 80136fa:	2200      	movs	r2, #0
 80136fc:	f843 2b04 	str.w	r2, [r3], #4
 8013700:	429f      	cmp	r7, r3
 8013702:	d2fb      	bcs.n	80136fc <__hexnan+0xcc>
 8013704:	683b      	ldr	r3, [r7, #0]
 8013706:	b91b      	cbnz	r3, 8013710 <__hexnan+0xe0>
 8013708:	4547      	cmp	r7, r8
 801370a:	d128      	bne.n	801375e <__hexnan+0x12e>
 801370c:	2301      	movs	r3, #1
 801370e:	603b      	str	r3, [r7, #0]
 8013710:	2005      	movs	r0, #5
 8013712:	b007      	add	sp, #28
 8013714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013718:	3501      	adds	r5, #1
 801371a:	2d08      	cmp	r5, #8
 801371c:	f10b 0b01 	add.w	fp, fp, #1
 8013720:	dd06      	ble.n	8013730 <__hexnan+0x100>
 8013722:	4544      	cmp	r4, r8
 8013724:	d9c1      	bls.n	80136aa <__hexnan+0x7a>
 8013726:	2300      	movs	r3, #0
 8013728:	f844 3c04 	str.w	r3, [r4, #-4]
 801372c:	2501      	movs	r5, #1
 801372e:	3c04      	subs	r4, #4
 8013730:	6822      	ldr	r2, [r4, #0]
 8013732:	f000 000f 	and.w	r0, r0, #15
 8013736:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801373a:	6020      	str	r0, [r4, #0]
 801373c:	e7b5      	b.n	80136aa <__hexnan+0x7a>
 801373e:	2508      	movs	r5, #8
 8013740:	e7b3      	b.n	80136aa <__hexnan+0x7a>
 8013742:	9b01      	ldr	r3, [sp, #4]
 8013744:	2b00      	cmp	r3, #0
 8013746:	d0dd      	beq.n	8013704 <__hexnan+0xd4>
 8013748:	f1c3 0320 	rsb	r3, r3, #32
 801374c:	f04f 32ff 	mov.w	r2, #4294967295
 8013750:	40da      	lsrs	r2, r3
 8013752:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8013756:	4013      	ands	r3, r2
 8013758:	f846 3c04 	str.w	r3, [r6, #-4]
 801375c:	e7d2      	b.n	8013704 <__hexnan+0xd4>
 801375e:	3f04      	subs	r7, #4
 8013760:	e7d0      	b.n	8013704 <__hexnan+0xd4>
 8013762:	2004      	movs	r0, #4
 8013764:	e7d5      	b.n	8013712 <__hexnan+0xe2>

08013766 <__ascii_mbtowc>:
 8013766:	b082      	sub	sp, #8
 8013768:	b901      	cbnz	r1, 801376c <__ascii_mbtowc+0x6>
 801376a:	a901      	add	r1, sp, #4
 801376c:	b142      	cbz	r2, 8013780 <__ascii_mbtowc+0x1a>
 801376e:	b14b      	cbz	r3, 8013784 <__ascii_mbtowc+0x1e>
 8013770:	7813      	ldrb	r3, [r2, #0]
 8013772:	600b      	str	r3, [r1, #0]
 8013774:	7812      	ldrb	r2, [r2, #0]
 8013776:	1e10      	subs	r0, r2, #0
 8013778:	bf18      	it	ne
 801377a:	2001      	movne	r0, #1
 801377c:	b002      	add	sp, #8
 801377e:	4770      	bx	lr
 8013780:	4610      	mov	r0, r2
 8013782:	e7fb      	b.n	801377c <__ascii_mbtowc+0x16>
 8013784:	f06f 0001 	mvn.w	r0, #1
 8013788:	e7f8      	b.n	801377c <__ascii_mbtowc+0x16>

0801378a <_realloc_r>:
 801378a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801378e:	4680      	mov	r8, r0
 8013790:	4615      	mov	r5, r2
 8013792:	460c      	mov	r4, r1
 8013794:	b921      	cbnz	r1, 80137a0 <_realloc_r+0x16>
 8013796:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801379a:	4611      	mov	r1, r2
 801379c:	f7fd be60 	b.w	8011460 <_malloc_r>
 80137a0:	b92a      	cbnz	r2, 80137ae <_realloc_r+0x24>
 80137a2:	f7fd fde9 	bl	8011378 <_free_r>
 80137a6:	2400      	movs	r4, #0
 80137a8:	4620      	mov	r0, r4
 80137aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137ae:	f000 f840 	bl	8013832 <_malloc_usable_size_r>
 80137b2:	4285      	cmp	r5, r0
 80137b4:	4606      	mov	r6, r0
 80137b6:	d802      	bhi.n	80137be <_realloc_r+0x34>
 80137b8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80137bc:	d8f4      	bhi.n	80137a8 <_realloc_r+0x1e>
 80137be:	4629      	mov	r1, r5
 80137c0:	4640      	mov	r0, r8
 80137c2:	f7fd fe4d 	bl	8011460 <_malloc_r>
 80137c6:	4607      	mov	r7, r0
 80137c8:	2800      	cmp	r0, #0
 80137ca:	d0ec      	beq.n	80137a6 <_realloc_r+0x1c>
 80137cc:	42b5      	cmp	r5, r6
 80137ce:	462a      	mov	r2, r5
 80137d0:	4621      	mov	r1, r4
 80137d2:	bf28      	it	cs
 80137d4:	4632      	movcs	r2, r6
 80137d6:	f7ff fc45 	bl	8013064 <memcpy>
 80137da:	4621      	mov	r1, r4
 80137dc:	4640      	mov	r0, r8
 80137de:	f7fd fdcb 	bl	8011378 <_free_r>
 80137e2:	463c      	mov	r4, r7
 80137e4:	e7e0      	b.n	80137a8 <_realloc_r+0x1e>

080137e6 <__ascii_wctomb>:
 80137e6:	4603      	mov	r3, r0
 80137e8:	4608      	mov	r0, r1
 80137ea:	b141      	cbz	r1, 80137fe <__ascii_wctomb+0x18>
 80137ec:	2aff      	cmp	r2, #255	@ 0xff
 80137ee:	d904      	bls.n	80137fa <__ascii_wctomb+0x14>
 80137f0:	228a      	movs	r2, #138	@ 0x8a
 80137f2:	601a      	str	r2, [r3, #0]
 80137f4:	f04f 30ff 	mov.w	r0, #4294967295
 80137f8:	4770      	bx	lr
 80137fa:	700a      	strb	r2, [r1, #0]
 80137fc:	2001      	movs	r0, #1
 80137fe:	4770      	bx	lr

08013800 <fiprintf>:
 8013800:	b40e      	push	{r1, r2, r3}
 8013802:	b503      	push	{r0, r1, lr}
 8013804:	4601      	mov	r1, r0
 8013806:	ab03      	add	r3, sp, #12
 8013808:	4805      	ldr	r0, [pc, #20]	@ (8013820 <fiprintf+0x20>)
 801380a:	f853 2b04 	ldr.w	r2, [r3], #4
 801380e:	6800      	ldr	r0, [r0, #0]
 8013810:	9301      	str	r3, [sp, #4]
 8013812:	f000 f83f 	bl	8013894 <_vfiprintf_r>
 8013816:	b002      	add	sp, #8
 8013818:	f85d eb04 	ldr.w	lr, [sp], #4
 801381c:	b003      	add	sp, #12
 801381e:	4770      	bx	lr
 8013820:	20000190 	.word	0x20000190

08013824 <abort>:
 8013824:	b508      	push	{r3, lr}
 8013826:	2006      	movs	r0, #6
 8013828:	f000 fa08 	bl	8013c3c <raise>
 801382c:	2001      	movs	r0, #1
 801382e:	f7ee ff3d 	bl	80026ac <_exit>

08013832 <_malloc_usable_size_r>:
 8013832:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013836:	1f18      	subs	r0, r3, #4
 8013838:	2b00      	cmp	r3, #0
 801383a:	bfbc      	itt	lt
 801383c:	580b      	ldrlt	r3, [r1, r0]
 801383e:	18c0      	addlt	r0, r0, r3
 8013840:	4770      	bx	lr

08013842 <__sfputc_r>:
 8013842:	6893      	ldr	r3, [r2, #8]
 8013844:	3b01      	subs	r3, #1
 8013846:	2b00      	cmp	r3, #0
 8013848:	b410      	push	{r4}
 801384a:	6093      	str	r3, [r2, #8]
 801384c:	da08      	bge.n	8013860 <__sfputc_r+0x1e>
 801384e:	6994      	ldr	r4, [r2, #24]
 8013850:	42a3      	cmp	r3, r4
 8013852:	db01      	blt.n	8013858 <__sfputc_r+0x16>
 8013854:	290a      	cmp	r1, #10
 8013856:	d103      	bne.n	8013860 <__sfputc_r+0x1e>
 8013858:	f85d 4b04 	ldr.w	r4, [sp], #4
 801385c:	f000 b932 	b.w	8013ac4 <__swbuf_r>
 8013860:	6813      	ldr	r3, [r2, #0]
 8013862:	1c58      	adds	r0, r3, #1
 8013864:	6010      	str	r0, [r2, #0]
 8013866:	7019      	strb	r1, [r3, #0]
 8013868:	4608      	mov	r0, r1
 801386a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801386e:	4770      	bx	lr

08013870 <__sfputs_r>:
 8013870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013872:	4606      	mov	r6, r0
 8013874:	460f      	mov	r7, r1
 8013876:	4614      	mov	r4, r2
 8013878:	18d5      	adds	r5, r2, r3
 801387a:	42ac      	cmp	r4, r5
 801387c:	d101      	bne.n	8013882 <__sfputs_r+0x12>
 801387e:	2000      	movs	r0, #0
 8013880:	e007      	b.n	8013892 <__sfputs_r+0x22>
 8013882:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013886:	463a      	mov	r2, r7
 8013888:	4630      	mov	r0, r6
 801388a:	f7ff ffda 	bl	8013842 <__sfputc_r>
 801388e:	1c43      	adds	r3, r0, #1
 8013890:	d1f3      	bne.n	801387a <__sfputs_r+0xa>
 8013892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013894 <_vfiprintf_r>:
 8013894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013898:	460d      	mov	r5, r1
 801389a:	b09d      	sub	sp, #116	@ 0x74
 801389c:	4614      	mov	r4, r2
 801389e:	4698      	mov	r8, r3
 80138a0:	4606      	mov	r6, r0
 80138a2:	b118      	cbz	r0, 80138ac <_vfiprintf_r+0x18>
 80138a4:	6a03      	ldr	r3, [r0, #32]
 80138a6:	b90b      	cbnz	r3, 80138ac <_vfiprintf_r+0x18>
 80138a8:	f7fc fdf8 	bl	801049c <__sinit>
 80138ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80138ae:	07d9      	lsls	r1, r3, #31
 80138b0:	d405      	bmi.n	80138be <_vfiprintf_r+0x2a>
 80138b2:	89ab      	ldrh	r3, [r5, #12]
 80138b4:	059a      	lsls	r2, r3, #22
 80138b6:	d402      	bmi.n	80138be <_vfiprintf_r+0x2a>
 80138b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80138ba:	f7fc ff06 	bl	80106ca <__retarget_lock_acquire_recursive>
 80138be:	89ab      	ldrh	r3, [r5, #12]
 80138c0:	071b      	lsls	r3, r3, #28
 80138c2:	d501      	bpl.n	80138c8 <_vfiprintf_r+0x34>
 80138c4:	692b      	ldr	r3, [r5, #16]
 80138c6:	b99b      	cbnz	r3, 80138f0 <_vfiprintf_r+0x5c>
 80138c8:	4629      	mov	r1, r5
 80138ca:	4630      	mov	r0, r6
 80138cc:	f000 f938 	bl	8013b40 <__swsetup_r>
 80138d0:	b170      	cbz	r0, 80138f0 <_vfiprintf_r+0x5c>
 80138d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80138d4:	07dc      	lsls	r4, r3, #31
 80138d6:	d504      	bpl.n	80138e2 <_vfiprintf_r+0x4e>
 80138d8:	f04f 30ff 	mov.w	r0, #4294967295
 80138dc:	b01d      	add	sp, #116	@ 0x74
 80138de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138e2:	89ab      	ldrh	r3, [r5, #12]
 80138e4:	0598      	lsls	r0, r3, #22
 80138e6:	d4f7      	bmi.n	80138d8 <_vfiprintf_r+0x44>
 80138e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80138ea:	f7fc feef 	bl	80106cc <__retarget_lock_release_recursive>
 80138ee:	e7f3      	b.n	80138d8 <_vfiprintf_r+0x44>
 80138f0:	2300      	movs	r3, #0
 80138f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80138f4:	2320      	movs	r3, #32
 80138f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80138fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80138fe:	2330      	movs	r3, #48	@ 0x30
 8013900:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013ab0 <_vfiprintf_r+0x21c>
 8013904:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013908:	f04f 0901 	mov.w	r9, #1
 801390c:	4623      	mov	r3, r4
 801390e:	469a      	mov	sl, r3
 8013910:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013914:	b10a      	cbz	r2, 801391a <_vfiprintf_r+0x86>
 8013916:	2a25      	cmp	r2, #37	@ 0x25
 8013918:	d1f9      	bne.n	801390e <_vfiprintf_r+0x7a>
 801391a:	ebba 0b04 	subs.w	fp, sl, r4
 801391e:	d00b      	beq.n	8013938 <_vfiprintf_r+0xa4>
 8013920:	465b      	mov	r3, fp
 8013922:	4622      	mov	r2, r4
 8013924:	4629      	mov	r1, r5
 8013926:	4630      	mov	r0, r6
 8013928:	f7ff ffa2 	bl	8013870 <__sfputs_r>
 801392c:	3001      	adds	r0, #1
 801392e:	f000 80a7 	beq.w	8013a80 <_vfiprintf_r+0x1ec>
 8013932:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013934:	445a      	add	r2, fp
 8013936:	9209      	str	r2, [sp, #36]	@ 0x24
 8013938:	f89a 3000 	ldrb.w	r3, [sl]
 801393c:	2b00      	cmp	r3, #0
 801393e:	f000 809f 	beq.w	8013a80 <_vfiprintf_r+0x1ec>
 8013942:	2300      	movs	r3, #0
 8013944:	f04f 32ff 	mov.w	r2, #4294967295
 8013948:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801394c:	f10a 0a01 	add.w	sl, sl, #1
 8013950:	9304      	str	r3, [sp, #16]
 8013952:	9307      	str	r3, [sp, #28]
 8013954:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013958:	931a      	str	r3, [sp, #104]	@ 0x68
 801395a:	4654      	mov	r4, sl
 801395c:	2205      	movs	r2, #5
 801395e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013962:	4853      	ldr	r0, [pc, #332]	@ (8013ab0 <_vfiprintf_r+0x21c>)
 8013964:	f7ec fc5c 	bl	8000220 <memchr>
 8013968:	9a04      	ldr	r2, [sp, #16]
 801396a:	b9d8      	cbnz	r0, 80139a4 <_vfiprintf_r+0x110>
 801396c:	06d1      	lsls	r1, r2, #27
 801396e:	bf44      	itt	mi
 8013970:	2320      	movmi	r3, #32
 8013972:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013976:	0713      	lsls	r3, r2, #28
 8013978:	bf44      	itt	mi
 801397a:	232b      	movmi	r3, #43	@ 0x2b
 801397c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013980:	f89a 3000 	ldrb.w	r3, [sl]
 8013984:	2b2a      	cmp	r3, #42	@ 0x2a
 8013986:	d015      	beq.n	80139b4 <_vfiprintf_r+0x120>
 8013988:	9a07      	ldr	r2, [sp, #28]
 801398a:	4654      	mov	r4, sl
 801398c:	2000      	movs	r0, #0
 801398e:	f04f 0c0a 	mov.w	ip, #10
 8013992:	4621      	mov	r1, r4
 8013994:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013998:	3b30      	subs	r3, #48	@ 0x30
 801399a:	2b09      	cmp	r3, #9
 801399c:	d94b      	bls.n	8013a36 <_vfiprintf_r+0x1a2>
 801399e:	b1b0      	cbz	r0, 80139ce <_vfiprintf_r+0x13a>
 80139a0:	9207      	str	r2, [sp, #28]
 80139a2:	e014      	b.n	80139ce <_vfiprintf_r+0x13a>
 80139a4:	eba0 0308 	sub.w	r3, r0, r8
 80139a8:	fa09 f303 	lsl.w	r3, r9, r3
 80139ac:	4313      	orrs	r3, r2
 80139ae:	9304      	str	r3, [sp, #16]
 80139b0:	46a2      	mov	sl, r4
 80139b2:	e7d2      	b.n	801395a <_vfiprintf_r+0xc6>
 80139b4:	9b03      	ldr	r3, [sp, #12]
 80139b6:	1d19      	adds	r1, r3, #4
 80139b8:	681b      	ldr	r3, [r3, #0]
 80139ba:	9103      	str	r1, [sp, #12]
 80139bc:	2b00      	cmp	r3, #0
 80139be:	bfbb      	ittet	lt
 80139c0:	425b      	neglt	r3, r3
 80139c2:	f042 0202 	orrlt.w	r2, r2, #2
 80139c6:	9307      	strge	r3, [sp, #28]
 80139c8:	9307      	strlt	r3, [sp, #28]
 80139ca:	bfb8      	it	lt
 80139cc:	9204      	strlt	r2, [sp, #16]
 80139ce:	7823      	ldrb	r3, [r4, #0]
 80139d0:	2b2e      	cmp	r3, #46	@ 0x2e
 80139d2:	d10a      	bne.n	80139ea <_vfiprintf_r+0x156>
 80139d4:	7863      	ldrb	r3, [r4, #1]
 80139d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80139d8:	d132      	bne.n	8013a40 <_vfiprintf_r+0x1ac>
 80139da:	9b03      	ldr	r3, [sp, #12]
 80139dc:	1d1a      	adds	r2, r3, #4
 80139de:	681b      	ldr	r3, [r3, #0]
 80139e0:	9203      	str	r2, [sp, #12]
 80139e2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80139e6:	3402      	adds	r4, #2
 80139e8:	9305      	str	r3, [sp, #20]
 80139ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013ac0 <_vfiprintf_r+0x22c>
 80139ee:	7821      	ldrb	r1, [r4, #0]
 80139f0:	2203      	movs	r2, #3
 80139f2:	4650      	mov	r0, sl
 80139f4:	f7ec fc14 	bl	8000220 <memchr>
 80139f8:	b138      	cbz	r0, 8013a0a <_vfiprintf_r+0x176>
 80139fa:	9b04      	ldr	r3, [sp, #16]
 80139fc:	eba0 000a 	sub.w	r0, r0, sl
 8013a00:	2240      	movs	r2, #64	@ 0x40
 8013a02:	4082      	lsls	r2, r0
 8013a04:	4313      	orrs	r3, r2
 8013a06:	3401      	adds	r4, #1
 8013a08:	9304      	str	r3, [sp, #16]
 8013a0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013a0e:	4829      	ldr	r0, [pc, #164]	@ (8013ab4 <_vfiprintf_r+0x220>)
 8013a10:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013a14:	2206      	movs	r2, #6
 8013a16:	f7ec fc03 	bl	8000220 <memchr>
 8013a1a:	2800      	cmp	r0, #0
 8013a1c:	d03f      	beq.n	8013a9e <_vfiprintf_r+0x20a>
 8013a1e:	4b26      	ldr	r3, [pc, #152]	@ (8013ab8 <_vfiprintf_r+0x224>)
 8013a20:	bb1b      	cbnz	r3, 8013a6a <_vfiprintf_r+0x1d6>
 8013a22:	9b03      	ldr	r3, [sp, #12]
 8013a24:	3307      	adds	r3, #7
 8013a26:	f023 0307 	bic.w	r3, r3, #7
 8013a2a:	3308      	adds	r3, #8
 8013a2c:	9303      	str	r3, [sp, #12]
 8013a2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013a30:	443b      	add	r3, r7
 8013a32:	9309      	str	r3, [sp, #36]	@ 0x24
 8013a34:	e76a      	b.n	801390c <_vfiprintf_r+0x78>
 8013a36:	fb0c 3202 	mla	r2, ip, r2, r3
 8013a3a:	460c      	mov	r4, r1
 8013a3c:	2001      	movs	r0, #1
 8013a3e:	e7a8      	b.n	8013992 <_vfiprintf_r+0xfe>
 8013a40:	2300      	movs	r3, #0
 8013a42:	3401      	adds	r4, #1
 8013a44:	9305      	str	r3, [sp, #20]
 8013a46:	4619      	mov	r1, r3
 8013a48:	f04f 0c0a 	mov.w	ip, #10
 8013a4c:	4620      	mov	r0, r4
 8013a4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013a52:	3a30      	subs	r2, #48	@ 0x30
 8013a54:	2a09      	cmp	r2, #9
 8013a56:	d903      	bls.n	8013a60 <_vfiprintf_r+0x1cc>
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	d0c6      	beq.n	80139ea <_vfiprintf_r+0x156>
 8013a5c:	9105      	str	r1, [sp, #20]
 8013a5e:	e7c4      	b.n	80139ea <_vfiprintf_r+0x156>
 8013a60:	fb0c 2101 	mla	r1, ip, r1, r2
 8013a64:	4604      	mov	r4, r0
 8013a66:	2301      	movs	r3, #1
 8013a68:	e7f0      	b.n	8013a4c <_vfiprintf_r+0x1b8>
 8013a6a:	ab03      	add	r3, sp, #12
 8013a6c:	9300      	str	r3, [sp, #0]
 8013a6e:	462a      	mov	r2, r5
 8013a70:	4b12      	ldr	r3, [pc, #72]	@ (8013abc <_vfiprintf_r+0x228>)
 8013a72:	a904      	add	r1, sp, #16
 8013a74:	4630      	mov	r0, r6
 8013a76:	f7fb feb9 	bl	800f7ec <_printf_float>
 8013a7a:	4607      	mov	r7, r0
 8013a7c:	1c78      	adds	r0, r7, #1
 8013a7e:	d1d6      	bne.n	8013a2e <_vfiprintf_r+0x19a>
 8013a80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013a82:	07d9      	lsls	r1, r3, #31
 8013a84:	d405      	bmi.n	8013a92 <_vfiprintf_r+0x1fe>
 8013a86:	89ab      	ldrh	r3, [r5, #12]
 8013a88:	059a      	lsls	r2, r3, #22
 8013a8a:	d402      	bmi.n	8013a92 <_vfiprintf_r+0x1fe>
 8013a8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013a8e:	f7fc fe1d 	bl	80106cc <__retarget_lock_release_recursive>
 8013a92:	89ab      	ldrh	r3, [r5, #12]
 8013a94:	065b      	lsls	r3, r3, #25
 8013a96:	f53f af1f 	bmi.w	80138d8 <_vfiprintf_r+0x44>
 8013a9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013a9c:	e71e      	b.n	80138dc <_vfiprintf_r+0x48>
 8013a9e:	ab03      	add	r3, sp, #12
 8013aa0:	9300      	str	r3, [sp, #0]
 8013aa2:	462a      	mov	r2, r5
 8013aa4:	4b05      	ldr	r3, [pc, #20]	@ (8013abc <_vfiprintf_r+0x228>)
 8013aa6:	a904      	add	r1, sp, #16
 8013aa8:	4630      	mov	r0, r6
 8013aaa:	f7fc f937 	bl	800fd1c <_printf_i>
 8013aae:	e7e4      	b.n	8013a7a <_vfiprintf_r+0x1e6>
 8013ab0:	08014c81 	.word	0x08014c81
 8013ab4:	08014c8b 	.word	0x08014c8b
 8013ab8:	0800f7ed 	.word	0x0800f7ed
 8013abc:	08013871 	.word	0x08013871
 8013ac0:	08014c87 	.word	0x08014c87

08013ac4 <__swbuf_r>:
 8013ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ac6:	460e      	mov	r6, r1
 8013ac8:	4614      	mov	r4, r2
 8013aca:	4605      	mov	r5, r0
 8013acc:	b118      	cbz	r0, 8013ad6 <__swbuf_r+0x12>
 8013ace:	6a03      	ldr	r3, [r0, #32]
 8013ad0:	b90b      	cbnz	r3, 8013ad6 <__swbuf_r+0x12>
 8013ad2:	f7fc fce3 	bl	801049c <__sinit>
 8013ad6:	69a3      	ldr	r3, [r4, #24]
 8013ad8:	60a3      	str	r3, [r4, #8]
 8013ada:	89a3      	ldrh	r3, [r4, #12]
 8013adc:	071a      	lsls	r2, r3, #28
 8013ade:	d501      	bpl.n	8013ae4 <__swbuf_r+0x20>
 8013ae0:	6923      	ldr	r3, [r4, #16]
 8013ae2:	b943      	cbnz	r3, 8013af6 <__swbuf_r+0x32>
 8013ae4:	4621      	mov	r1, r4
 8013ae6:	4628      	mov	r0, r5
 8013ae8:	f000 f82a 	bl	8013b40 <__swsetup_r>
 8013aec:	b118      	cbz	r0, 8013af6 <__swbuf_r+0x32>
 8013aee:	f04f 37ff 	mov.w	r7, #4294967295
 8013af2:	4638      	mov	r0, r7
 8013af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013af6:	6823      	ldr	r3, [r4, #0]
 8013af8:	6922      	ldr	r2, [r4, #16]
 8013afa:	1a98      	subs	r0, r3, r2
 8013afc:	6963      	ldr	r3, [r4, #20]
 8013afe:	b2f6      	uxtb	r6, r6
 8013b00:	4283      	cmp	r3, r0
 8013b02:	4637      	mov	r7, r6
 8013b04:	dc05      	bgt.n	8013b12 <__swbuf_r+0x4e>
 8013b06:	4621      	mov	r1, r4
 8013b08:	4628      	mov	r0, r5
 8013b0a:	f7ff fa47 	bl	8012f9c <_fflush_r>
 8013b0e:	2800      	cmp	r0, #0
 8013b10:	d1ed      	bne.n	8013aee <__swbuf_r+0x2a>
 8013b12:	68a3      	ldr	r3, [r4, #8]
 8013b14:	3b01      	subs	r3, #1
 8013b16:	60a3      	str	r3, [r4, #8]
 8013b18:	6823      	ldr	r3, [r4, #0]
 8013b1a:	1c5a      	adds	r2, r3, #1
 8013b1c:	6022      	str	r2, [r4, #0]
 8013b1e:	701e      	strb	r6, [r3, #0]
 8013b20:	6962      	ldr	r2, [r4, #20]
 8013b22:	1c43      	adds	r3, r0, #1
 8013b24:	429a      	cmp	r2, r3
 8013b26:	d004      	beq.n	8013b32 <__swbuf_r+0x6e>
 8013b28:	89a3      	ldrh	r3, [r4, #12]
 8013b2a:	07db      	lsls	r3, r3, #31
 8013b2c:	d5e1      	bpl.n	8013af2 <__swbuf_r+0x2e>
 8013b2e:	2e0a      	cmp	r6, #10
 8013b30:	d1df      	bne.n	8013af2 <__swbuf_r+0x2e>
 8013b32:	4621      	mov	r1, r4
 8013b34:	4628      	mov	r0, r5
 8013b36:	f7ff fa31 	bl	8012f9c <_fflush_r>
 8013b3a:	2800      	cmp	r0, #0
 8013b3c:	d0d9      	beq.n	8013af2 <__swbuf_r+0x2e>
 8013b3e:	e7d6      	b.n	8013aee <__swbuf_r+0x2a>

08013b40 <__swsetup_r>:
 8013b40:	b538      	push	{r3, r4, r5, lr}
 8013b42:	4b29      	ldr	r3, [pc, #164]	@ (8013be8 <__swsetup_r+0xa8>)
 8013b44:	4605      	mov	r5, r0
 8013b46:	6818      	ldr	r0, [r3, #0]
 8013b48:	460c      	mov	r4, r1
 8013b4a:	b118      	cbz	r0, 8013b54 <__swsetup_r+0x14>
 8013b4c:	6a03      	ldr	r3, [r0, #32]
 8013b4e:	b90b      	cbnz	r3, 8013b54 <__swsetup_r+0x14>
 8013b50:	f7fc fca4 	bl	801049c <__sinit>
 8013b54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013b58:	0719      	lsls	r1, r3, #28
 8013b5a:	d422      	bmi.n	8013ba2 <__swsetup_r+0x62>
 8013b5c:	06da      	lsls	r2, r3, #27
 8013b5e:	d407      	bmi.n	8013b70 <__swsetup_r+0x30>
 8013b60:	2209      	movs	r2, #9
 8013b62:	602a      	str	r2, [r5, #0]
 8013b64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013b68:	81a3      	strh	r3, [r4, #12]
 8013b6a:	f04f 30ff 	mov.w	r0, #4294967295
 8013b6e:	e033      	b.n	8013bd8 <__swsetup_r+0x98>
 8013b70:	0758      	lsls	r0, r3, #29
 8013b72:	d512      	bpl.n	8013b9a <__swsetup_r+0x5a>
 8013b74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013b76:	b141      	cbz	r1, 8013b8a <__swsetup_r+0x4a>
 8013b78:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013b7c:	4299      	cmp	r1, r3
 8013b7e:	d002      	beq.n	8013b86 <__swsetup_r+0x46>
 8013b80:	4628      	mov	r0, r5
 8013b82:	f7fd fbf9 	bl	8011378 <_free_r>
 8013b86:	2300      	movs	r3, #0
 8013b88:	6363      	str	r3, [r4, #52]	@ 0x34
 8013b8a:	89a3      	ldrh	r3, [r4, #12]
 8013b8c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8013b90:	81a3      	strh	r3, [r4, #12]
 8013b92:	2300      	movs	r3, #0
 8013b94:	6063      	str	r3, [r4, #4]
 8013b96:	6923      	ldr	r3, [r4, #16]
 8013b98:	6023      	str	r3, [r4, #0]
 8013b9a:	89a3      	ldrh	r3, [r4, #12]
 8013b9c:	f043 0308 	orr.w	r3, r3, #8
 8013ba0:	81a3      	strh	r3, [r4, #12]
 8013ba2:	6923      	ldr	r3, [r4, #16]
 8013ba4:	b94b      	cbnz	r3, 8013bba <__swsetup_r+0x7a>
 8013ba6:	89a3      	ldrh	r3, [r4, #12]
 8013ba8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8013bac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013bb0:	d003      	beq.n	8013bba <__swsetup_r+0x7a>
 8013bb2:	4621      	mov	r1, r4
 8013bb4:	4628      	mov	r0, r5
 8013bb6:	f000 f883 	bl	8013cc0 <__smakebuf_r>
 8013bba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013bbe:	f013 0201 	ands.w	r2, r3, #1
 8013bc2:	d00a      	beq.n	8013bda <__swsetup_r+0x9a>
 8013bc4:	2200      	movs	r2, #0
 8013bc6:	60a2      	str	r2, [r4, #8]
 8013bc8:	6962      	ldr	r2, [r4, #20]
 8013bca:	4252      	negs	r2, r2
 8013bcc:	61a2      	str	r2, [r4, #24]
 8013bce:	6922      	ldr	r2, [r4, #16]
 8013bd0:	b942      	cbnz	r2, 8013be4 <__swsetup_r+0xa4>
 8013bd2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8013bd6:	d1c5      	bne.n	8013b64 <__swsetup_r+0x24>
 8013bd8:	bd38      	pop	{r3, r4, r5, pc}
 8013bda:	0799      	lsls	r1, r3, #30
 8013bdc:	bf58      	it	pl
 8013bde:	6962      	ldrpl	r2, [r4, #20]
 8013be0:	60a2      	str	r2, [r4, #8]
 8013be2:	e7f4      	b.n	8013bce <__swsetup_r+0x8e>
 8013be4:	2000      	movs	r0, #0
 8013be6:	e7f7      	b.n	8013bd8 <__swsetup_r+0x98>
 8013be8:	20000190 	.word	0x20000190

08013bec <_raise_r>:
 8013bec:	291f      	cmp	r1, #31
 8013bee:	b538      	push	{r3, r4, r5, lr}
 8013bf0:	4605      	mov	r5, r0
 8013bf2:	460c      	mov	r4, r1
 8013bf4:	d904      	bls.n	8013c00 <_raise_r+0x14>
 8013bf6:	2316      	movs	r3, #22
 8013bf8:	6003      	str	r3, [r0, #0]
 8013bfa:	f04f 30ff 	mov.w	r0, #4294967295
 8013bfe:	bd38      	pop	{r3, r4, r5, pc}
 8013c00:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013c02:	b112      	cbz	r2, 8013c0a <_raise_r+0x1e>
 8013c04:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013c08:	b94b      	cbnz	r3, 8013c1e <_raise_r+0x32>
 8013c0a:	4628      	mov	r0, r5
 8013c0c:	f000 f830 	bl	8013c70 <_getpid_r>
 8013c10:	4622      	mov	r2, r4
 8013c12:	4601      	mov	r1, r0
 8013c14:	4628      	mov	r0, r5
 8013c16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013c1a:	f000 b817 	b.w	8013c4c <_kill_r>
 8013c1e:	2b01      	cmp	r3, #1
 8013c20:	d00a      	beq.n	8013c38 <_raise_r+0x4c>
 8013c22:	1c59      	adds	r1, r3, #1
 8013c24:	d103      	bne.n	8013c2e <_raise_r+0x42>
 8013c26:	2316      	movs	r3, #22
 8013c28:	6003      	str	r3, [r0, #0]
 8013c2a:	2001      	movs	r0, #1
 8013c2c:	e7e7      	b.n	8013bfe <_raise_r+0x12>
 8013c2e:	2100      	movs	r1, #0
 8013c30:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8013c34:	4620      	mov	r0, r4
 8013c36:	4798      	blx	r3
 8013c38:	2000      	movs	r0, #0
 8013c3a:	e7e0      	b.n	8013bfe <_raise_r+0x12>

08013c3c <raise>:
 8013c3c:	4b02      	ldr	r3, [pc, #8]	@ (8013c48 <raise+0xc>)
 8013c3e:	4601      	mov	r1, r0
 8013c40:	6818      	ldr	r0, [r3, #0]
 8013c42:	f7ff bfd3 	b.w	8013bec <_raise_r>
 8013c46:	bf00      	nop
 8013c48:	20000190 	.word	0x20000190

08013c4c <_kill_r>:
 8013c4c:	b538      	push	{r3, r4, r5, lr}
 8013c4e:	4d07      	ldr	r5, [pc, #28]	@ (8013c6c <_kill_r+0x20>)
 8013c50:	2300      	movs	r3, #0
 8013c52:	4604      	mov	r4, r0
 8013c54:	4608      	mov	r0, r1
 8013c56:	4611      	mov	r1, r2
 8013c58:	602b      	str	r3, [r5, #0]
 8013c5a:	f7ee fd17 	bl	800268c <_kill>
 8013c5e:	1c43      	adds	r3, r0, #1
 8013c60:	d102      	bne.n	8013c68 <_kill_r+0x1c>
 8013c62:	682b      	ldr	r3, [r5, #0]
 8013c64:	b103      	cbz	r3, 8013c68 <_kill_r+0x1c>
 8013c66:	6023      	str	r3, [r4, #0]
 8013c68:	bd38      	pop	{r3, r4, r5, pc}
 8013c6a:	bf00      	nop
 8013c6c:	20004230 	.word	0x20004230

08013c70 <_getpid_r>:
 8013c70:	f7ee bd04 	b.w	800267c <_getpid>

08013c74 <__swhatbuf_r>:
 8013c74:	b570      	push	{r4, r5, r6, lr}
 8013c76:	460c      	mov	r4, r1
 8013c78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013c7c:	2900      	cmp	r1, #0
 8013c7e:	b096      	sub	sp, #88	@ 0x58
 8013c80:	4615      	mov	r5, r2
 8013c82:	461e      	mov	r6, r3
 8013c84:	da0d      	bge.n	8013ca2 <__swhatbuf_r+0x2e>
 8013c86:	89a3      	ldrh	r3, [r4, #12]
 8013c88:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013c8c:	f04f 0100 	mov.w	r1, #0
 8013c90:	bf14      	ite	ne
 8013c92:	2340      	movne	r3, #64	@ 0x40
 8013c94:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013c98:	2000      	movs	r0, #0
 8013c9a:	6031      	str	r1, [r6, #0]
 8013c9c:	602b      	str	r3, [r5, #0]
 8013c9e:	b016      	add	sp, #88	@ 0x58
 8013ca0:	bd70      	pop	{r4, r5, r6, pc}
 8013ca2:	466a      	mov	r2, sp
 8013ca4:	f000 f848 	bl	8013d38 <_fstat_r>
 8013ca8:	2800      	cmp	r0, #0
 8013caa:	dbec      	blt.n	8013c86 <__swhatbuf_r+0x12>
 8013cac:	9901      	ldr	r1, [sp, #4]
 8013cae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013cb2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013cb6:	4259      	negs	r1, r3
 8013cb8:	4159      	adcs	r1, r3
 8013cba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013cbe:	e7eb      	b.n	8013c98 <__swhatbuf_r+0x24>

08013cc0 <__smakebuf_r>:
 8013cc0:	898b      	ldrh	r3, [r1, #12]
 8013cc2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013cc4:	079d      	lsls	r5, r3, #30
 8013cc6:	4606      	mov	r6, r0
 8013cc8:	460c      	mov	r4, r1
 8013cca:	d507      	bpl.n	8013cdc <__smakebuf_r+0x1c>
 8013ccc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013cd0:	6023      	str	r3, [r4, #0]
 8013cd2:	6123      	str	r3, [r4, #16]
 8013cd4:	2301      	movs	r3, #1
 8013cd6:	6163      	str	r3, [r4, #20]
 8013cd8:	b003      	add	sp, #12
 8013cda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013cdc:	ab01      	add	r3, sp, #4
 8013cde:	466a      	mov	r2, sp
 8013ce0:	f7ff ffc8 	bl	8013c74 <__swhatbuf_r>
 8013ce4:	9f00      	ldr	r7, [sp, #0]
 8013ce6:	4605      	mov	r5, r0
 8013ce8:	4639      	mov	r1, r7
 8013cea:	4630      	mov	r0, r6
 8013cec:	f7fd fbb8 	bl	8011460 <_malloc_r>
 8013cf0:	b948      	cbnz	r0, 8013d06 <__smakebuf_r+0x46>
 8013cf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013cf6:	059a      	lsls	r2, r3, #22
 8013cf8:	d4ee      	bmi.n	8013cd8 <__smakebuf_r+0x18>
 8013cfa:	f023 0303 	bic.w	r3, r3, #3
 8013cfe:	f043 0302 	orr.w	r3, r3, #2
 8013d02:	81a3      	strh	r3, [r4, #12]
 8013d04:	e7e2      	b.n	8013ccc <__smakebuf_r+0xc>
 8013d06:	89a3      	ldrh	r3, [r4, #12]
 8013d08:	6020      	str	r0, [r4, #0]
 8013d0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013d0e:	81a3      	strh	r3, [r4, #12]
 8013d10:	9b01      	ldr	r3, [sp, #4]
 8013d12:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8013d16:	b15b      	cbz	r3, 8013d30 <__smakebuf_r+0x70>
 8013d18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013d1c:	4630      	mov	r0, r6
 8013d1e:	f000 f81d 	bl	8013d5c <_isatty_r>
 8013d22:	b128      	cbz	r0, 8013d30 <__smakebuf_r+0x70>
 8013d24:	89a3      	ldrh	r3, [r4, #12]
 8013d26:	f023 0303 	bic.w	r3, r3, #3
 8013d2a:	f043 0301 	orr.w	r3, r3, #1
 8013d2e:	81a3      	strh	r3, [r4, #12]
 8013d30:	89a3      	ldrh	r3, [r4, #12]
 8013d32:	431d      	orrs	r5, r3
 8013d34:	81a5      	strh	r5, [r4, #12]
 8013d36:	e7cf      	b.n	8013cd8 <__smakebuf_r+0x18>

08013d38 <_fstat_r>:
 8013d38:	b538      	push	{r3, r4, r5, lr}
 8013d3a:	4d07      	ldr	r5, [pc, #28]	@ (8013d58 <_fstat_r+0x20>)
 8013d3c:	2300      	movs	r3, #0
 8013d3e:	4604      	mov	r4, r0
 8013d40:	4608      	mov	r0, r1
 8013d42:	4611      	mov	r1, r2
 8013d44:	602b      	str	r3, [r5, #0]
 8013d46:	f7ee fd01 	bl	800274c <_fstat>
 8013d4a:	1c43      	adds	r3, r0, #1
 8013d4c:	d102      	bne.n	8013d54 <_fstat_r+0x1c>
 8013d4e:	682b      	ldr	r3, [r5, #0]
 8013d50:	b103      	cbz	r3, 8013d54 <_fstat_r+0x1c>
 8013d52:	6023      	str	r3, [r4, #0]
 8013d54:	bd38      	pop	{r3, r4, r5, pc}
 8013d56:	bf00      	nop
 8013d58:	20004230 	.word	0x20004230

08013d5c <_isatty_r>:
 8013d5c:	b538      	push	{r3, r4, r5, lr}
 8013d5e:	4d06      	ldr	r5, [pc, #24]	@ (8013d78 <_isatty_r+0x1c>)
 8013d60:	2300      	movs	r3, #0
 8013d62:	4604      	mov	r4, r0
 8013d64:	4608      	mov	r0, r1
 8013d66:	602b      	str	r3, [r5, #0]
 8013d68:	f7ee fd00 	bl	800276c <_isatty>
 8013d6c:	1c43      	adds	r3, r0, #1
 8013d6e:	d102      	bne.n	8013d76 <_isatty_r+0x1a>
 8013d70:	682b      	ldr	r3, [r5, #0]
 8013d72:	b103      	cbz	r3, 8013d76 <_isatty_r+0x1a>
 8013d74:	6023      	str	r3, [r4, #0]
 8013d76:	bd38      	pop	{r3, r4, r5, pc}
 8013d78:	20004230 	.word	0x20004230

08013d7c <cosf>:
 8013d7c:	ee10 3a10 	vmov	r3, s0
 8013d80:	b507      	push	{r0, r1, r2, lr}
 8013d82:	4a1e      	ldr	r2, [pc, #120]	@ (8013dfc <cosf+0x80>)
 8013d84:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013d88:	4293      	cmp	r3, r2
 8013d8a:	d806      	bhi.n	8013d9a <cosf+0x1e>
 8013d8c:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8013e00 <cosf+0x84>
 8013d90:	b003      	add	sp, #12
 8013d92:	f85d eb04 	ldr.w	lr, [sp], #4
 8013d96:	f000 b87b 	b.w	8013e90 <__kernel_cosf>
 8013d9a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8013d9e:	d304      	bcc.n	8013daa <cosf+0x2e>
 8013da0:	ee30 0a40 	vsub.f32	s0, s0, s0
 8013da4:	b003      	add	sp, #12
 8013da6:	f85d fb04 	ldr.w	pc, [sp], #4
 8013daa:	4668      	mov	r0, sp
 8013dac:	f000 f910 	bl	8013fd0 <__ieee754_rem_pio2f>
 8013db0:	f000 0003 	and.w	r0, r0, #3
 8013db4:	2801      	cmp	r0, #1
 8013db6:	d009      	beq.n	8013dcc <cosf+0x50>
 8013db8:	2802      	cmp	r0, #2
 8013dba:	d010      	beq.n	8013dde <cosf+0x62>
 8013dbc:	b9b0      	cbnz	r0, 8013dec <cosf+0x70>
 8013dbe:	eddd 0a01 	vldr	s1, [sp, #4]
 8013dc2:	ed9d 0a00 	vldr	s0, [sp]
 8013dc6:	f000 f863 	bl	8013e90 <__kernel_cosf>
 8013dca:	e7eb      	b.n	8013da4 <cosf+0x28>
 8013dcc:	eddd 0a01 	vldr	s1, [sp, #4]
 8013dd0:	ed9d 0a00 	vldr	s0, [sp]
 8013dd4:	f000 f8b4 	bl	8013f40 <__kernel_sinf>
 8013dd8:	eeb1 0a40 	vneg.f32	s0, s0
 8013ddc:	e7e2      	b.n	8013da4 <cosf+0x28>
 8013dde:	eddd 0a01 	vldr	s1, [sp, #4]
 8013de2:	ed9d 0a00 	vldr	s0, [sp]
 8013de6:	f000 f853 	bl	8013e90 <__kernel_cosf>
 8013dea:	e7f5      	b.n	8013dd8 <cosf+0x5c>
 8013dec:	eddd 0a01 	vldr	s1, [sp, #4]
 8013df0:	ed9d 0a00 	vldr	s0, [sp]
 8013df4:	2001      	movs	r0, #1
 8013df6:	f000 f8a3 	bl	8013f40 <__kernel_sinf>
 8013dfa:	e7d3      	b.n	8013da4 <cosf+0x28>
 8013dfc:	3f490fd8 	.word	0x3f490fd8
 8013e00:	00000000 	.word	0x00000000

08013e04 <sinf>:
 8013e04:	ee10 3a10 	vmov	r3, s0
 8013e08:	b507      	push	{r0, r1, r2, lr}
 8013e0a:	4a1f      	ldr	r2, [pc, #124]	@ (8013e88 <sinf+0x84>)
 8013e0c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013e10:	4293      	cmp	r3, r2
 8013e12:	d807      	bhi.n	8013e24 <sinf+0x20>
 8013e14:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8013e8c <sinf+0x88>
 8013e18:	2000      	movs	r0, #0
 8013e1a:	b003      	add	sp, #12
 8013e1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013e20:	f000 b88e 	b.w	8013f40 <__kernel_sinf>
 8013e24:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8013e28:	d304      	bcc.n	8013e34 <sinf+0x30>
 8013e2a:	ee30 0a40 	vsub.f32	s0, s0, s0
 8013e2e:	b003      	add	sp, #12
 8013e30:	f85d fb04 	ldr.w	pc, [sp], #4
 8013e34:	4668      	mov	r0, sp
 8013e36:	f000 f8cb 	bl	8013fd0 <__ieee754_rem_pio2f>
 8013e3a:	f000 0003 	and.w	r0, r0, #3
 8013e3e:	2801      	cmp	r0, #1
 8013e40:	d00a      	beq.n	8013e58 <sinf+0x54>
 8013e42:	2802      	cmp	r0, #2
 8013e44:	d00f      	beq.n	8013e66 <sinf+0x62>
 8013e46:	b9c0      	cbnz	r0, 8013e7a <sinf+0x76>
 8013e48:	eddd 0a01 	vldr	s1, [sp, #4]
 8013e4c:	ed9d 0a00 	vldr	s0, [sp]
 8013e50:	2001      	movs	r0, #1
 8013e52:	f000 f875 	bl	8013f40 <__kernel_sinf>
 8013e56:	e7ea      	b.n	8013e2e <sinf+0x2a>
 8013e58:	eddd 0a01 	vldr	s1, [sp, #4]
 8013e5c:	ed9d 0a00 	vldr	s0, [sp]
 8013e60:	f000 f816 	bl	8013e90 <__kernel_cosf>
 8013e64:	e7e3      	b.n	8013e2e <sinf+0x2a>
 8013e66:	eddd 0a01 	vldr	s1, [sp, #4]
 8013e6a:	ed9d 0a00 	vldr	s0, [sp]
 8013e6e:	2001      	movs	r0, #1
 8013e70:	f000 f866 	bl	8013f40 <__kernel_sinf>
 8013e74:	eeb1 0a40 	vneg.f32	s0, s0
 8013e78:	e7d9      	b.n	8013e2e <sinf+0x2a>
 8013e7a:	eddd 0a01 	vldr	s1, [sp, #4]
 8013e7e:	ed9d 0a00 	vldr	s0, [sp]
 8013e82:	f000 f805 	bl	8013e90 <__kernel_cosf>
 8013e86:	e7f5      	b.n	8013e74 <sinf+0x70>
 8013e88:	3f490fd8 	.word	0x3f490fd8
 8013e8c:	00000000 	.word	0x00000000

08013e90 <__kernel_cosf>:
 8013e90:	ee10 3a10 	vmov	r3, s0
 8013e94:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013e98:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8013e9c:	eef0 6a40 	vmov.f32	s13, s0
 8013ea0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8013ea4:	d204      	bcs.n	8013eb0 <__kernel_cosf+0x20>
 8013ea6:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8013eaa:	ee17 2a90 	vmov	r2, s15
 8013eae:	b342      	cbz	r2, 8013f02 <__kernel_cosf+0x72>
 8013eb0:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8013eb4:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8013f20 <__kernel_cosf+0x90>
 8013eb8:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8013f24 <__kernel_cosf+0x94>
 8013ebc:	4a1a      	ldr	r2, [pc, #104]	@ (8013f28 <__kernel_cosf+0x98>)
 8013ebe:	eea7 6a27 	vfma.f32	s12, s14, s15
 8013ec2:	4293      	cmp	r3, r2
 8013ec4:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8013f2c <__kernel_cosf+0x9c>
 8013ec8:	eee6 7a07 	vfma.f32	s15, s12, s14
 8013ecc:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8013f30 <__kernel_cosf+0xa0>
 8013ed0:	eea7 6a87 	vfma.f32	s12, s15, s14
 8013ed4:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8013f34 <__kernel_cosf+0xa4>
 8013ed8:	eee6 7a07 	vfma.f32	s15, s12, s14
 8013edc:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8013f38 <__kernel_cosf+0xa8>
 8013ee0:	eea7 6a87 	vfma.f32	s12, s15, s14
 8013ee4:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8013ee8:	ee26 6a07 	vmul.f32	s12, s12, s14
 8013eec:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8013ef0:	eee7 0a06 	vfma.f32	s1, s14, s12
 8013ef4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013ef8:	d804      	bhi.n	8013f04 <__kernel_cosf+0x74>
 8013efa:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8013efe:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013f02:	4770      	bx	lr
 8013f04:	4a0d      	ldr	r2, [pc, #52]	@ (8013f3c <__kernel_cosf+0xac>)
 8013f06:	4293      	cmp	r3, r2
 8013f08:	bf9a      	itte	ls
 8013f0a:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8013f0e:	ee07 3a10 	vmovls	s14, r3
 8013f12:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8013f16:	ee30 0a47 	vsub.f32	s0, s0, s14
 8013f1a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013f1e:	e7ec      	b.n	8013efa <__kernel_cosf+0x6a>
 8013f20:	ad47d74e 	.word	0xad47d74e
 8013f24:	310f74f6 	.word	0x310f74f6
 8013f28:	3e999999 	.word	0x3e999999
 8013f2c:	b493f27c 	.word	0xb493f27c
 8013f30:	37d00d01 	.word	0x37d00d01
 8013f34:	bab60b61 	.word	0xbab60b61
 8013f38:	3d2aaaab 	.word	0x3d2aaaab
 8013f3c:	3f480000 	.word	0x3f480000

08013f40 <__kernel_sinf>:
 8013f40:	ee10 3a10 	vmov	r3, s0
 8013f44:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013f48:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8013f4c:	d204      	bcs.n	8013f58 <__kernel_sinf+0x18>
 8013f4e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8013f52:	ee17 3a90 	vmov	r3, s15
 8013f56:	b35b      	cbz	r3, 8013fb0 <__kernel_sinf+0x70>
 8013f58:	ee20 7a00 	vmul.f32	s14, s0, s0
 8013f5c:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8013fb4 <__kernel_sinf+0x74>
 8013f60:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8013fb8 <__kernel_sinf+0x78>
 8013f64:	eea7 6a27 	vfma.f32	s12, s14, s15
 8013f68:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8013fbc <__kernel_sinf+0x7c>
 8013f6c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8013f70:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8013fc0 <__kernel_sinf+0x80>
 8013f74:	eea7 6a87 	vfma.f32	s12, s15, s14
 8013f78:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8013fc4 <__kernel_sinf+0x84>
 8013f7c:	ee60 6a07 	vmul.f32	s13, s0, s14
 8013f80:	eee6 7a07 	vfma.f32	s15, s12, s14
 8013f84:	b930      	cbnz	r0, 8013f94 <__kernel_sinf+0x54>
 8013f86:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8013fc8 <__kernel_sinf+0x88>
 8013f8a:	eea7 6a27 	vfma.f32	s12, s14, s15
 8013f8e:	eea6 0a26 	vfma.f32	s0, s12, s13
 8013f92:	4770      	bx	lr
 8013f94:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8013f98:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8013f9c:	eee0 7a86 	vfma.f32	s15, s1, s12
 8013fa0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8013fa4:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8013fcc <__kernel_sinf+0x8c>
 8013fa8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8013fac:	ee30 0a60 	vsub.f32	s0, s0, s1
 8013fb0:	4770      	bx	lr
 8013fb2:	bf00      	nop
 8013fb4:	2f2ec9d3 	.word	0x2f2ec9d3
 8013fb8:	b2d72f34 	.word	0xb2d72f34
 8013fbc:	3638ef1b 	.word	0x3638ef1b
 8013fc0:	b9500d01 	.word	0xb9500d01
 8013fc4:	3c088889 	.word	0x3c088889
 8013fc8:	be2aaaab 	.word	0xbe2aaaab
 8013fcc:	3e2aaaab 	.word	0x3e2aaaab

08013fd0 <__ieee754_rem_pio2f>:
 8013fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013fd2:	ee10 6a10 	vmov	r6, s0
 8013fd6:	4b88      	ldr	r3, [pc, #544]	@ (80141f8 <__ieee754_rem_pio2f+0x228>)
 8013fd8:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8013fdc:	429d      	cmp	r5, r3
 8013fde:	b087      	sub	sp, #28
 8013fe0:	4604      	mov	r4, r0
 8013fe2:	d805      	bhi.n	8013ff0 <__ieee754_rem_pio2f+0x20>
 8013fe4:	2300      	movs	r3, #0
 8013fe6:	ed80 0a00 	vstr	s0, [r0]
 8013fea:	6043      	str	r3, [r0, #4]
 8013fec:	2000      	movs	r0, #0
 8013fee:	e022      	b.n	8014036 <__ieee754_rem_pio2f+0x66>
 8013ff0:	4b82      	ldr	r3, [pc, #520]	@ (80141fc <__ieee754_rem_pio2f+0x22c>)
 8013ff2:	429d      	cmp	r5, r3
 8013ff4:	d83a      	bhi.n	801406c <__ieee754_rem_pio2f+0x9c>
 8013ff6:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8013ffa:	2e00      	cmp	r6, #0
 8013ffc:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8014200 <__ieee754_rem_pio2f+0x230>
 8014000:	4a80      	ldr	r2, [pc, #512]	@ (8014204 <__ieee754_rem_pio2f+0x234>)
 8014002:	f023 030f 	bic.w	r3, r3, #15
 8014006:	dd18      	ble.n	801403a <__ieee754_rem_pio2f+0x6a>
 8014008:	4293      	cmp	r3, r2
 801400a:	ee70 7a47 	vsub.f32	s15, s0, s14
 801400e:	bf09      	itett	eq
 8014010:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8014208 <__ieee754_rem_pio2f+0x238>
 8014014:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 801420c <__ieee754_rem_pio2f+0x23c>
 8014018:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8014210 <__ieee754_rem_pio2f+0x240>
 801401c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8014020:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8014024:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014028:	ed80 7a00 	vstr	s14, [r0]
 801402c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014030:	edc0 7a01 	vstr	s15, [r0, #4]
 8014034:	2001      	movs	r0, #1
 8014036:	b007      	add	sp, #28
 8014038:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801403a:	4293      	cmp	r3, r2
 801403c:	ee70 7a07 	vadd.f32	s15, s0, s14
 8014040:	bf09      	itett	eq
 8014042:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8014208 <__ieee754_rem_pio2f+0x238>
 8014046:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 801420c <__ieee754_rem_pio2f+0x23c>
 801404a:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8014210 <__ieee754_rem_pio2f+0x240>
 801404e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8014052:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8014056:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801405a:	ed80 7a00 	vstr	s14, [r0]
 801405e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014062:	edc0 7a01 	vstr	s15, [r0, #4]
 8014066:	f04f 30ff 	mov.w	r0, #4294967295
 801406a:	e7e4      	b.n	8014036 <__ieee754_rem_pio2f+0x66>
 801406c:	4b69      	ldr	r3, [pc, #420]	@ (8014214 <__ieee754_rem_pio2f+0x244>)
 801406e:	429d      	cmp	r5, r3
 8014070:	d873      	bhi.n	801415a <__ieee754_rem_pio2f+0x18a>
 8014072:	f000 f8dd 	bl	8014230 <fabsf>
 8014076:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8014218 <__ieee754_rem_pio2f+0x248>
 801407a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801407e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8014082:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014086:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801408a:	ee17 0a90 	vmov	r0, s15
 801408e:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8014200 <__ieee754_rem_pio2f+0x230>
 8014092:	eea7 0a67 	vfms.f32	s0, s14, s15
 8014096:	281f      	cmp	r0, #31
 8014098:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 801420c <__ieee754_rem_pio2f+0x23c>
 801409c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80140a0:	eeb1 6a47 	vneg.f32	s12, s14
 80140a4:	ee70 6a67 	vsub.f32	s13, s0, s15
 80140a8:	ee16 1a90 	vmov	r1, s13
 80140ac:	dc09      	bgt.n	80140c2 <__ieee754_rem_pio2f+0xf2>
 80140ae:	4a5b      	ldr	r2, [pc, #364]	@ (801421c <__ieee754_rem_pio2f+0x24c>)
 80140b0:	1e47      	subs	r7, r0, #1
 80140b2:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80140b6:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 80140ba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80140be:	4293      	cmp	r3, r2
 80140c0:	d107      	bne.n	80140d2 <__ieee754_rem_pio2f+0x102>
 80140c2:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 80140c6:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 80140ca:	2a08      	cmp	r2, #8
 80140cc:	ea4f 53e5 	mov.w	r3, r5, asr #23
 80140d0:	dc14      	bgt.n	80140fc <__ieee754_rem_pio2f+0x12c>
 80140d2:	6021      	str	r1, [r4, #0]
 80140d4:	ed94 7a00 	vldr	s14, [r4]
 80140d8:	ee30 0a47 	vsub.f32	s0, s0, s14
 80140dc:	2e00      	cmp	r6, #0
 80140de:	ee30 0a67 	vsub.f32	s0, s0, s15
 80140e2:	ed84 0a01 	vstr	s0, [r4, #4]
 80140e6:	daa6      	bge.n	8014036 <__ieee754_rem_pio2f+0x66>
 80140e8:	eeb1 7a47 	vneg.f32	s14, s14
 80140ec:	eeb1 0a40 	vneg.f32	s0, s0
 80140f0:	ed84 7a00 	vstr	s14, [r4]
 80140f4:	ed84 0a01 	vstr	s0, [r4, #4]
 80140f8:	4240      	negs	r0, r0
 80140fa:	e79c      	b.n	8014036 <__ieee754_rem_pio2f+0x66>
 80140fc:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8014208 <__ieee754_rem_pio2f+0x238>
 8014100:	eef0 6a40 	vmov.f32	s13, s0
 8014104:	eee6 6a25 	vfma.f32	s13, s12, s11
 8014108:	ee70 7a66 	vsub.f32	s15, s0, s13
 801410c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8014110:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8014210 <__ieee754_rem_pio2f+0x240>
 8014114:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8014118:	ee76 5ae7 	vsub.f32	s11, s13, s15
 801411c:	ee15 2a90 	vmov	r2, s11
 8014120:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8014124:	1a5b      	subs	r3, r3, r1
 8014126:	2b19      	cmp	r3, #25
 8014128:	dc04      	bgt.n	8014134 <__ieee754_rem_pio2f+0x164>
 801412a:	edc4 5a00 	vstr	s11, [r4]
 801412e:	eeb0 0a66 	vmov.f32	s0, s13
 8014132:	e7cf      	b.n	80140d4 <__ieee754_rem_pio2f+0x104>
 8014134:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8014220 <__ieee754_rem_pio2f+0x250>
 8014138:	eeb0 0a66 	vmov.f32	s0, s13
 801413c:	eea6 0a25 	vfma.f32	s0, s12, s11
 8014140:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8014144:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8014224 <__ieee754_rem_pio2f+0x254>
 8014148:	eee6 7a25 	vfma.f32	s15, s12, s11
 801414c:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8014150:	ee30 7a67 	vsub.f32	s14, s0, s15
 8014154:	ed84 7a00 	vstr	s14, [r4]
 8014158:	e7bc      	b.n	80140d4 <__ieee754_rem_pio2f+0x104>
 801415a:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 801415e:	d306      	bcc.n	801416e <__ieee754_rem_pio2f+0x19e>
 8014160:	ee70 7a40 	vsub.f32	s15, s0, s0
 8014164:	edc0 7a01 	vstr	s15, [r0, #4]
 8014168:	edc0 7a00 	vstr	s15, [r0]
 801416c:	e73e      	b.n	8013fec <__ieee754_rem_pio2f+0x1c>
 801416e:	15ea      	asrs	r2, r5, #23
 8014170:	3a86      	subs	r2, #134	@ 0x86
 8014172:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8014176:	ee07 3a90 	vmov	s15, r3
 801417a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801417e:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8014228 <__ieee754_rem_pio2f+0x258>
 8014182:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014186:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801418a:	ed8d 7a03 	vstr	s14, [sp, #12]
 801418e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014192:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8014196:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801419a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801419e:	ed8d 7a04 	vstr	s14, [sp, #16]
 80141a2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80141a6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80141aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141ae:	edcd 7a05 	vstr	s15, [sp, #20]
 80141b2:	d11e      	bne.n	80141f2 <__ieee754_rem_pio2f+0x222>
 80141b4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80141b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141bc:	bf0c      	ite	eq
 80141be:	2301      	moveq	r3, #1
 80141c0:	2302      	movne	r3, #2
 80141c2:	491a      	ldr	r1, [pc, #104]	@ (801422c <__ieee754_rem_pio2f+0x25c>)
 80141c4:	9101      	str	r1, [sp, #4]
 80141c6:	2102      	movs	r1, #2
 80141c8:	9100      	str	r1, [sp, #0]
 80141ca:	a803      	add	r0, sp, #12
 80141cc:	4621      	mov	r1, r4
 80141ce:	f000 f837 	bl	8014240 <__kernel_rem_pio2f>
 80141d2:	2e00      	cmp	r6, #0
 80141d4:	f6bf af2f 	bge.w	8014036 <__ieee754_rem_pio2f+0x66>
 80141d8:	edd4 7a00 	vldr	s15, [r4]
 80141dc:	eef1 7a67 	vneg.f32	s15, s15
 80141e0:	edc4 7a00 	vstr	s15, [r4]
 80141e4:	edd4 7a01 	vldr	s15, [r4, #4]
 80141e8:	eef1 7a67 	vneg.f32	s15, s15
 80141ec:	edc4 7a01 	vstr	s15, [r4, #4]
 80141f0:	e782      	b.n	80140f8 <__ieee754_rem_pio2f+0x128>
 80141f2:	2303      	movs	r3, #3
 80141f4:	e7e5      	b.n	80141c2 <__ieee754_rem_pio2f+0x1f2>
 80141f6:	bf00      	nop
 80141f8:	3f490fd8 	.word	0x3f490fd8
 80141fc:	4016cbe3 	.word	0x4016cbe3
 8014200:	3fc90f80 	.word	0x3fc90f80
 8014204:	3fc90fd0 	.word	0x3fc90fd0
 8014208:	37354400 	.word	0x37354400
 801420c:	37354443 	.word	0x37354443
 8014210:	2e85a308 	.word	0x2e85a308
 8014214:	43490f80 	.word	0x43490f80
 8014218:	3f22f984 	.word	0x3f22f984
 801421c:	08014d38 	.word	0x08014d38
 8014220:	2e85a300 	.word	0x2e85a300
 8014224:	248d3132 	.word	0x248d3132
 8014228:	43800000 	.word	0x43800000
 801422c:	08014db8 	.word	0x08014db8

08014230 <fabsf>:
 8014230:	ee10 3a10 	vmov	r3, s0
 8014234:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8014238:	ee00 3a10 	vmov	s0, r3
 801423c:	4770      	bx	lr
	...

08014240 <__kernel_rem_pio2f>:
 8014240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014244:	ed2d 8b04 	vpush	{d8-d9}
 8014248:	b0d9      	sub	sp, #356	@ 0x164
 801424a:	4690      	mov	r8, r2
 801424c:	9001      	str	r0, [sp, #4]
 801424e:	4ab9      	ldr	r2, [pc, #740]	@ (8014534 <__kernel_rem_pio2f+0x2f4>)
 8014250:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8014252:	f118 0f04 	cmn.w	r8, #4
 8014256:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 801425a:	460f      	mov	r7, r1
 801425c:	f103 3bff 	add.w	fp, r3, #4294967295
 8014260:	db27      	blt.n	80142b2 <__kernel_rem_pio2f+0x72>
 8014262:	f1b8 0203 	subs.w	r2, r8, #3
 8014266:	bf48      	it	mi
 8014268:	f108 0204 	addmi.w	r2, r8, #4
 801426c:	10d2      	asrs	r2, r2, #3
 801426e:	1c55      	adds	r5, r2, #1
 8014270:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8014272:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8014544 <__kernel_rem_pio2f+0x304>
 8014276:	00e8      	lsls	r0, r5, #3
 8014278:	eba2 060b 	sub.w	r6, r2, fp
 801427c:	9002      	str	r0, [sp, #8]
 801427e:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8014282:	eb0a 0c0b 	add.w	ip, sl, fp
 8014286:	ac1c      	add	r4, sp, #112	@ 0x70
 8014288:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 801428c:	2000      	movs	r0, #0
 801428e:	4560      	cmp	r0, ip
 8014290:	dd11      	ble.n	80142b6 <__kernel_rem_pio2f+0x76>
 8014292:	a91c      	add	r1, sp, #112	@ 0x70
 8014294:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8014298:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 801429c:	f04f 0c00 	mov.w	ip, #0
 80142a0:	45d4      	cmp	ip, sl
 80142a2:	dc27      	bgt.n	80142f4 <__kernel_rem_pio2f+0xb4>
 80142a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80142a8:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 8014544 <__kernel_rem_pio2f+0x304>
 80142ac:	4606      	mov	r6, r0
 80142ae:	2400      	movs	r4, #0
 80142b0:	e016      	b.n	80142e0 <__kernel_rem_pio2f+0xa0>
 80142b2:	2200      	movs	r2, #0
 80142b4:	e7db      	b.n	801426e <__kernel_rem_pio2f+0x2e>
 80142b6:	42c6      	cmn	r6, r0
 80142b8:	bf5d      	ittte	pl
 80142ba:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 80142be:	ee07 1a90 	vmovpl	s15, r1
 80142c2:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80142c6:	eef0 7a47 	vmovmi.f32	s15, s14
 80142ca:	ece4 7a01 	vstmia	r4!, {s15}
 80142ce:	3001      	adds	r0, #1
 80142d0:	e7dd      	b.n	801428e <__kernel_rem_pio2f+0x4e>
 80142d2:	ecfe 6a01 	vldmia	lr!, {s13}
 80142d6:	ed96 7a00 	vldr	s14, [r6]
 80142da:	eee6 7a87 	vfma.f32	s15, s13, s14
 80142de:	3401      	adds	r4, #1
 80142e0:	455c      	cmp	r4, fp
 80142e2:	f1a6 0604 	sub.w	r6, r6, #4
 80142e6:	ddf4      	ble.n	80142d2 <__kernel_rem_pio2f+0x92>
 80142e8:	ece9 7a01 	vstmia	r9!, {s15}
 80142ec:	f10c 0c01 	add.w	ip, ip, #1
 80142f0:	3004      	adds	r0, #4
 80142f2:	e7d5      	b.n	80142a0 <__kernel_rem_pio2f+0x60>
 80142f4:	a908      	add	r1, sp, #32
 80142f6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80142fa:	9104      	str	r1, [sp, #16]
 80142fc:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80142fe:	eddf 8a90 	vldr	s17, [pc, #576]	@ 8014540 <__kernel_rem_pio2f+0x300>
 8014302:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 801453c <__kernel_rem_pio2f+0x2fc>
 8014306:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801430a:	9203      	str	r2, [sp, #12]
 801430c:	4654      	mov	r4, sl
 801430e:	00a2      	lsls	r2, r4, #2
 8014310:	9205      	str	r2, [sp, #20]
 8014312:	aa58      	add	r2, sp, #352	@ 0x160
 8014314:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8014318:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 801431c:	a944      	add	r1, sp, #272	@ 0x110
 801431e:	aa08      	add	r2, sp, #32
 8014320:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8014324:	4694      	mov	ip, r2
 8014326:	4626      	mov	r6, r4
 8014328:	2e00      	cmp	r6, #0
 801432a:	f1a0 0004 	sub.w	r0, r0, #4
 801432e:	dc4c      	bgt.n	80143ca <__kernel_rem_pio2f+0x18a>
 8014330:	4628      	mov	r0, r5
 8014332:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014336:	f000 f9f5 	bl	8014724 <scalbnf>
 801433a:	eeb0 8a40 	vmov.f32	s16, s0
 801433e:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8014342:	ee28 0a00 	vmul.f32	s0, s16, s0
 8014346:	f000 fa53 	bl	80147f0 <floorf>
 801434a:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 801434e:	eea0 8a67 	vfms.f32	s16, s0, s15
 8014352:	2d00      	cmp	r5, #0
 8014354:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014358:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801435c:	ee17 9a90 	vmov	r9, s15
 8014360:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014364:	ee38 8a67 	vsub.f32	s16, s16, s15
 8014368:	dd41      	ble.n	80143ee <__kernel_rem_pio2f+0x1ae>
 801436a:	f104 3cff 	add.w	ip, r4, #4294967295
 801436e:	a908      	add	r1, sp, #32
 8014370:	f1c5 0e08 	rsb	lr, r5, #8
 8014374:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8014378:	fa46 f00e 	asr.w	r0, r6, lr
 801437c:	4481      	add	r9, r0
 801437e:	fa00 f00e 	lsl.w	r0, r0, lr
 8014382:	1a36      	subs	r6, r6, r0
 8014384:	f1c5 0007 	rsb	r0, r5, #7
 8014388:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 801438c:	4106      	asrs	r6, r0
 801438e:	2e00      	cmp	r6, #0
 8014390:	dd3c      	ble.n	801440c <__kernel_rem_pio2f+0x1cc>
 8014392:	f04f 0e00 	mov.w	lr, #0
 8014396:	f109 0901 	add.w	r9, r9, #1
 801439a:	4670      	mov	r0, lr
 801439c:	4574      	cmp	r4, lr
 801439e:	dc68      	bgt.n	8014472 <__kernel_rem_pio2f+0x232>
 80143a0:	2d00      	cmp	r5, #0
 80143a2:	dd03      	ble.n	80143ac <__kernel_rem_pio2f+0x16c>
 80143a4:	2d01      	cmp	r5, #1
 80143a6:	d074      	beq.n	8014492 <__kernel_rem_pio2f+0x252>
 80143a8:	2d02      	cmp	r5, #2
 80143aa:	d07d      	beq.n	80144a8 <__kernel_rem_pio2f+0x268>
 80143ac:	2e02      	cmp	r6, #2
 80143ae:	d12d      	bne.n	801440c <__kernel_rem_pio2f+0x1cc>
 80143b0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80143b4:	ee30 8a48 	vsub.f32	s16, s0, s16
 80143b8:	b340      	cbz	r0, 801440c <__kernel_rem_pio2f+0x1cc>
 80143ba:	4628      	mov	r0, r5
 80143bc:	9306      	str	r3, [sp, #24]
 80143be:	f000 f9b1 	bl	8014724 <scalbnf>
 80143c2:	9b06      	ldr	r3, [sp, #24]
 80143c4:	ee38 8a40 	vsub.f32	s16, s16, s0
 80143c8:	e020      	b.n	801440c <__kernel_rem_pio2f+0x1cc>
 80143ca:	ee60 7a28 	vmul.f32	s15, s0, s17
 80143ce:	3e01      	subs	r6, #1
 80143d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80143d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80143d8:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80143dc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80143e0:	ecac 0a01 	vstmia	ip!, {s0}
 80143e4:	ed90 0a00 	vldr	s0, [r0]
 80143e8:	ee37 0a80 	vadd.f32	s0, s15, s0
 80143ec:	e79c      	b.n	8014328 <__kernel_rem_pio2f+0xe8>
 80143ee:	d105      	bne.n	80143fc <__kernel_rem_pio2f+0x1bc>
 80143f0:	1e60      	subs	r0, r4, #1
 80143f2:	a908      	add	r1, sp, #32
 80143f4:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 80143f8:	11f6      	asrs	r6, r6, #7
 80143fa:	e7c8      	b.n	801438e <__kernel_rem_pio2f+0x14e>
 80143fc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8014400:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8014404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014408:	da31      	bge.n	801446e <__kernel_rem_pio2f+0x22e>
 801440a:	2600      	movs	r6, #0
 801440c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8014410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014414:	f040 8098 	bne.w	8014548 <__kernel_rem_pio2f+0x308>
 8014418:	1e60      	subs	r0, r4, #1
 801441a:	2200      	movs	r2, #0
 801441c:	4550      	cmp	r0, sl
 801441e:	da4b      	bge.n	80144b8 <__kernel_rem_pio2f+0x278>
 8014420:	2a00      	cmp	r2, #0
 8014422:	d065      	beq.n	80144f0 <__kernel_rem_pio2f+0x2b0>
 8014424:	3c01      	subs	r4, #1
 8014426:	ab08      	add	r3, sp, #32
 8014428:	3d08      	subs	r5, #8
 801442a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801442e:	2b00      	cmp	r3, #0
 8014430:	d0f8      	beq.n	8014424 <__kernel_rem_pio2f+0x1e4>
 8014432:	4628      	mov	r0, r5
 8014434:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8014438:	f000 f974 	bl	8014724 <scalbnf>
 801443c:	1c63      	adds	r3, r4, #1
 801443e:	aa44      	add	r2, sp, #272	@ 0x110
 8014440:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8014540 <__kernel_rem_pio2f+0x300>
 8014444:	0099      	lsls	r1, r3, #2
 8014446:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801444a:	4623      	mov	r3, r4
 801444c:	2b00      	cmp	r3, #0
 801444e:	f280 80a9 	bge.w	80145a4 <__kernel_rem_pio2f+0x364>
 8014452:	4623      	mov	r3, r4
 8014454:	2b00      	cmp	r3, #0
 8014456:	f2c0 80c7 	blt.w	80145e8 <__kernel_rem_pio2f+0x3a8>
 801445a:	aa44      	add	r2, sp, #272	@ 0x110
 801445c:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8014460:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8014538 <__kernel_rem_pio2f+0x2f8>
 8014464:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8014544 <__kernel_rem_pio2f+0x304>
 8014468:	2000      	movs	r0, #0
 801446a:	1ae2      	subs	r2, r4, r3
 801446c:	e0b1      	b.n	80145d2 <__kernel_rem_pio2f+0x392>
 801446e:	2602      	movs	r6, #2
 8014470:	e78f      	b.n	8014392 <__kernel_rem_pio2f+0x152>
 8014472:	f852 1b04 	ldr.w	r1, [r2], #4
 8014476:	b948      	cbnz	r0, 801448c <__kernel_rem_pio2f+0x24c>
 8014478:	b121      	cbz	r1, 8014484 <__kernel_rem_pio2f+0x244>
 801447a:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 801447e:	f842 1c04 	str.w	r1, [r2, #-4]
 8014482:	2101      	movs	r1, #1
 8014484:	f10e 0e01 	add.w	lr, lr, #1
 8014488:	4608      	mov	r0, r1
 801448a:	e787      	b.n	801439c <__kernel_rem_pio2f+0x15c>
 801448c:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8014490:	e7f5      	b.n	801447e <__kernel_rem_pio2f+0x23e>
 8014492:	f104 3cff 	add.w	ip, r4, #4294967295
 8014496:	aa08      	add	r2, sp, #32
 8014498:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801449c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80144a0:	a908      	add	r1, sp, #32
 80144a2:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 80144a6:	e781      	b.n	80143ac <__kernel_rem_pio2f+0x16c>
 80144a8:	f104 3cff 	add.w	ip, r4, #4294967295
 80144ac:	aa08      	add	r2, sp, #32
 80144ae:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80144b2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80144b6:	e7f3      	b.n	80144a0 <__kernel_rem_pio2f+0x260>
 80144b8:	a908      	add	r1, sp, #32
 80144ba:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80144be:	3801      	subs	r0, #1
 80144c0:	430a      	orrs	r2, r1
 80144c2:	e7ab      	b.n	801441c <__kernel_rem_pio2f+0x1dc>
 80144c4:	3201      	adds	r2, #1
 80144c6:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 80144ca:	2e00      	cmp	r6, #0
 80144cc:	d0fa      	beq.n	80144c4 <__kernel_rem_pio2f+0x284>
 80144ce:	9905      	ldr	r1, [sp, #20]
 80144d0:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 80144d4:	eb0d 0001 	add.w	r0, sp, r1
 80144d8:	18e6      	adds	r6, r4, r3
 80144da:	a91c      	add	r1, sp, #112	@ 0x70
 80144dc:	f104 0c01 	add.w	ip, r4, #1
 80144e0:	384c      	subs	r0, #76	@ 0x4c
 80144e2:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 80144e6:	4422      	add	r2, r4
 80144e8:	4562      	cmp	r2, ip
 80144ea:	da04      	bge.n	80144f6 <__kernel_rem_pio2f+0x2b6>
 80144ec:	4614      	mov	r4, r2
 80144ee:	e70e      	b.n	801430e <__kernel_rem_pio2f+0xce>
 80144f0:	9804      	ldr	r0, [sp, #16]
 80144f2:	2201      	movs	r2, #1
 80144f4:	e7e7      	b.n	80144c6 <__kernel_rem_pio2f+0x286>
 80144f6:	9903      	ldr	r1, [sp, #12]
 80144f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80144fc:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8014500:	9105      	str	r1, [sp, #20]
 8014502:	ee07 1a90 	vmov	s15, r1
 8014506:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801450a:	2400      	movs	r4, #0
 801450c:	ece6 7a01 	vstmia	r6!, {s15}
 8014510:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8014544 <__kernel_rem_pio2f+0x304>
 8014514:	46b1      	mov	r9, r6
 8014516:	455c      	cmp	r4, fp
 8014518:	dd04      	ble.n	8014524 <__kernel_rem_pio2f+0x2e4>
 801451a:	ece0 7a01 	vstmia	r0!, {s15}
 801451e:	f10c 0c01 	add.w	ip, ip, #1
 8014522:	e7e1      	b.n	80144e8 <__kernel_rem_pio2f+0x2a8>
 8014524:	ecfe 6a01 	vldmia	lr!, {s13}
 8014528:	ed39 7a01 	vldmdb	r9!, {s14}
 801452c:	3401      	adds	r4, #1
 801452e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014532:	e7f0      	b.n	8014516 <__kernel_rem_pio2f+0x2d6>
 8014534:	080150fc 	.word	0x080150fc
 8014538:	080150d0 	.word	0x080150d0
 801453c:	43800000 	.word	0x43800000
 8014540:	3b800000 	.word	0x3b800000
 8014544:	00000000 	.word	0x00000000
 8014548:	9b02      	ldr	r3, [sp, #8]
 801454a:	eeb0 0a48 	vmov.f32	s0, s16
 801454e:	eba3 0008 	sub.w	r0, r3, r8
 8014552:	f000 f8e7 	bl	8014724 <scalbnf>
 8014556:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 801453c <__kernel_rem_pio2f+0x2fc>
 801455a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801455e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014562:	db19      	blt.n	8014598 <__kernel_rem_pio2f+0x358>
 8014564:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8014540 <__kernel_rem_pio2f+0x300>
 8014568:	ee60 7a27 	vmul.f32	s15, s0, s15
 801456c:	aa08      	add	r2, sp, #32
 801456e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014572:	3508      	adds	r5, #8
 8014574:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014578:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801457c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014580:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014584:	ee10 3a10 	vmov	r3, s0
 8014588:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801458c:	ee17 3a90 	vmov	r3, s15
 8014590:	3401      	adds	r4, #1
 8014592:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8014596:	e74c      	b.n	8014432 <__kernel_rem_pio2f+0x1f2>
 8014598:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801459c:	aa08      	add	r2, sp, #32
 801459e:	ee10 3a10 	vmov	r3, s0
 80145a2:	e7f6      	b.n	8014592 <__kernel_rem_pio2f+0x352>
 80145a4:	a808      	add	r0, sp, #32
 80145a6:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80145aa:	9001      	str	r0, [sp, #4]
 80145ac:	ee07 0a90 	vmov	s15, r0
 80145b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80145b4:	3b01      	subs	r3, #1
 80145b6:	ee67 7a80 	vmul.f32	s15, s15, s0
 80145ba:	ee20 0a07 	vmul.f32	s0, s0, s14
 80145be:	ed62 7a01 	vstmdb	r2!, {s15}
 80145c2:	e743      	b.n	801444c <__kernel_rem_pio2f+0x20c>
 80145c4:	ecfc 6a01 	vldmia	ip!, {s13}
 80145c8:	ecb5 7a01 	vldmia	r5!, {s14}
 80145cc:	eee6 7a87 	vfma.f32	s15, s13, s14
 80145d0:	3001      	adds	r0, #1
 80145d2:	4550      	cmp	r0, sl
 80145d4:	dc01      	bgt.n	80145da <__kernel_rem_pio2f+0x39a>
 80145d6:	4282      	cmp	r2, r0
 80145d8:	daf4      	bge.n	80145c4 <__kernel_rem_pio2f+0x384>
 80145da:	a858      	add	r0, sp, #352	@ 0x160
 80145dc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80145e0:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 80145e4:	3b01      	subs	r3, #1
 80145e6:	e735      	b.n	8014454 <__kernel_rem_pio2f+0x214>
 80145e8:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80145ea:	2b02      	cmp	r3, #2
 80145ec:	dc09      	bgt.n	8014602 <__kernel_rem_pio2f+0x3c2>
 80145ee:	2b00      	cmp	r3, #0
 80145f0:	dc2b      	bgt.n	801464a <__kernel_rem_pio2f+0x40a>
 80145f2:	d044      	beq.n	801467e <__kernel_rem_pio2f+0x43e>
 80145f4:	f009 0007 	and.w	r0, r9, #7
 80145f8:	b059      	add	sp, #356	@ 0x164
 80145fa:	ecbd 8b04 	vpop	{d8-d9}
 80145fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014602:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8014604:	2b03      	cmp	r3, #3
 8014606:	d1f5      	bne.n	80145f4 <__kernel_rem_pio2f+0x3b4>
 8014608:	aa30      	add	r2, sp, #192	@ 0xc0
 801460a:	1f0b      	subs	r3, r1, #4
 801460c:	4413      	add	r3, r2
 801460e:	461a      	mov	r2, r3
 8014610:	4620      	mov	r0, r4
 8014612:	2800      	cmp	r0, #0
 8014614:	f1a2 0204 	sub.w	r2, r2, #4
 8014618:	dc52      	bgt.n	80146c0 <__kernel_rem_pio2f+0x480>
 801461a:	4622      	mov	r2, r4
 801461c:	2a01      	cmp	r2, #1
 801461e:	f1a3 0304 	sub.w	r3, r3, #4
 8014622:	dc5d      	bgt.n	80146e0 <__kernel_rem_pio2f+0x4a0>
 8014624:	ab30      	add	r3, sp, #192	@ 0xc0
 8014626:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 8014544 <__kernel_rem_pio2f+0x304>
 801462a:	440b      	add	r3, r1
 801462c:	2c01      	cmp	r4, #1
 801462e:	dc67      	bgt.n	8014700 <__kernel_rem_pio2f+0x4c0>
 8014630:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8014634:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8014638:	2e00      	cmp	r6, #0
 801463a:	d167      	bne.n	801470c <__kernel_rem_pio2f+0x4cc>
 801463c:	edc7 6a00 	vstr	s13, [r7]
 8014640:	ed87 7a01 	vstr	s14, [r7, #4]
 8014644:	edc7 7a02 	vstr	s15, [r7, #8]
 8014648:	e7d4      	b.n	80145f4 <__kernel_rem_pio2f+0x3b4>
 801464a:	ab30      	add	r3, sp, #192	@ 0xc0
 801464c:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 8014544 <__kernel_rem_pio2f+0x304>
 8014650:	440b      	add	r3, r1
 8014652:	4622      	mov	r2, r4
 8014654:	2a00      	cmp	r2, #0
 8014656:	da24      	bge.n	80146a2 <__kernel_rem_pio2f+0x462>
 8014658:	b34e      	cbz	r6, 80146ae <__kernel_rem_pio2f+0x46e>
 801465a:	eef1 7a47 	vneg.f32	s15, s14
 801465e:	edc7 7a00 	vstr	s15, [r7]
 8014662:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8014666:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801466a:	aa31      	add	r2, sp, #196	@ 0xc4
 801466c:	2301      	movs	r3, #1
 801466e:	429c      	cmp	r4, r3
 8014670:	da20      	bge.n	80146b4 <__kernel_rem_pio2f+0x474>
 8014672:	b10e      	cbz	r6, 8014678 <__kernel_rem_pio2f+0x438>
 8014674:	eef1 7a67 	vneg.f32	s15, s15
 8014678:	edc7 7a01 	vstr	s15, [r7, #4]
 801467c:	e7ba      	b.n	80145f4 <__kernel_rem_pio2f+0x3b4>
 801467e:	ab30      	add	r3, sp, #192	@ 0xc0
 8014680:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 8014544 <__kernel_rem_pio2f+0x304>
 8014684:	440b      	add	r3, r1
 8014686:	2c00      	cmp	r4, #0
 8014688:	da05      	bge.n	8014696 <__kernel_rem_pio2f+0x456>
 801468a:	b10e      	cbz	r6, 8014690 <__kernel_rem_pio2f+0x450>
 801468c:	eef1 7a67 	vneg.f32	s15, s15
 8014690:	edc7 7a00 	vstr	s15, [r7]
 8014694:	e7ae      	b.n	80145f4 <__kernel_rem_pio2f+0x3b4>
 8014696:	ed33 7a01 	vldmdb	r3!, {s14}
 801469a:	3c01      	subs	r4, #1
 801469c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80146a0:	e7f1      	b.n	8014686 <__kernel_rem_pio2f+0x446>
 80146a2:	ed73 7a01 	vldmdb	r3!, {s15}
 80146a6:	3a01      	subs	r2, #1
 80146a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80146ac:	e7d2      	b.n	8014654 <__kernel_rem_pio2f+0x414>
 80146ae:	eef0 7a47 	vmov.f32	s15, s14
 80146b2:	e7d4      	b.n	801465e <__kernel_rem_pio2f+0x41e>
 80146b4:	ecb2 7a01 	vldmia	r2!, {s14}
 80146b8:	3301      	adds	r3, #1
 80146ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80146be:	e7d6      	b.n	801466e <__kernel_rem_pio2f+0x42e>
 80146c0:	edd2 7a00 	vldr	s15, [r2]
 80146c4:	edd2 6a01 	vldr	s13, [r2, #4]
 80146c8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80146cc:	3801      	subs	r0, #1
 80146ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80146d2:	ed82 7a00 	vstr	s14, [r2]
 80146d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80146da:	edc2 7a01 	vstr	s15, [r2, #4]
 80146de:	e798      	b.n	8014612 <__kernel_rem_pio2f+0x3d2>
 80146e0:	edd3 7a00 	vldr	s15, [r3]
 80146e4:	edd3 6a01 	vldr	s13, [r3, #4]
 80146e8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80146ec:	3a01      	subs	r2, #1
 80146ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80146f2:	ed83 7a00 	vstr	s14, [r3]
 80146f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80146fa:	edc3 7a01 	vstr	s15, [r3, #4]
 80146fe:	e78d      	b.n	801461c <__kernel_rem_pio2f+0x3dc>
 8014700:	ed33 7a01 	vldmdb	r3!, {s14}
 8014704:	3c01      	subs	r4, #1
 8014706:	ee77 7a87 	vadd.f32	s15, s15, s14
 801470a:	e78f      	b.n	801462c <__kernel_rem_pio2f+0x3ec>
 801470c:	eef1 6a66 	vneg.f32	s13, s13
 8014710:	eeb1 7a47 	vneg.f32	s14, s14
 8014714:	edc7 6a00 	vstr	s13, [r7]
 8014718:	ed87 7a01 	vstr	s14, [r7, #4]
 801471c:	eef1 7a67 	vneg.f32	s15, s15
 8014720:	e790      	b.n	8014644 <__kernel_rem_pio2f+0x404>
 8014722:	bf00      	nop

08014724 <scalbnf>:
 8014724:	ee10 3a10 	vmov	r3, s0
 8014728:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 801472c:	d02b      	beq.n	8014786 <scalbnf+0x62>
 801472e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8014732:	d302      	bcc.n	801473a <scalbnf+0x16>
 8014734:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014738:	4770      	bx	lr
 801473a:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 801473e:	d123      	bne.n	8014788 <scalbnf+0x64>
 8014740:	4b24      	ldr	r3, [pc, #144]	@ (80147d4 <scalbnf+0xb0>)
 8014742:	eddf 7a25 	vldr	s15, [pc, #148]	@ 80147d8 <scalbnf+0xb4>
 8014746:	4298      	cmp	r0, r3
 8014748:	ee20 0a27 	vmul.f32	s0, s0, s15
 801474c:	db17      	blt.n	801477e <scalbnf+0x5a>
 801474e:	ee10 3a10 	vmov	r3, s0
 8014752:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8014756:	3a19      	subs	r2, #25
 8014758:	f24c 3150 	movw	r1, #50000	@ 0xc350
 801475c:	4288      	cmp	r0, r1
 801475e:	dd15      	ble.n	801478c <scalbnf+0x68>
 8014760:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 80147dc <scalbnf+0xb8>
 8014764:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 80147e0 <scalbnf+0xbc>
 8014768:	ee10 3a10 	vmov	r3, s0
 801476c:	eeb0 7a67 	vmov.f32	s14, s15
 8014770:	2b00      	cmp	r3, #0
 8014772:	bfb8      	it	lt
 8014774:	eef0 7a66 	vmovlt.f32	s15, s13
 8014778:	ee27 0a87 	vmul.f32	s0, s15, s14
 801477c:	4770      	bx	lr
 801477e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80147e4 <scalbnf+0xc0>
 8014782:	ee27 0a80 	vmul.f32	s0, s15, s0
 8014786:	4770      	bx	lr
 8014788:	0dd2      	lsrs	r2, r2, #23
 801478a:	e7e5      	b.n	8014758 <scalbnf+0x34>
 801478c:	4410      	add	r0, r2
 801478e:	28fe      	cmp	r0, #254	@ 0xfe
 8014790:	dce6      	bgt.n	8014760 <scalbnf+0x3c>
 8014792:	2800      	cmp	r0, #0
 8014794:	dd06      	ble.n	80147a4 <scalbnf+0x80>
 8014796:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801479a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801479e:	ee00 3a10 	vmov	s0, r3
 80147a2:	4770      	bx	lr
 80147a4:	f110 0f16 	cmn.w	r0, #22
 80147a8:	da09      	bge.n	80147be <scalbnf+0x9a>
 80147aa:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 80147e4 <scalbnf+0xc0>
 80147ae:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80147e8 <scalbnf+0xc4>
 80147b2:	ee10 3a10 	vmov	r3, s0
 80147b6:	eeb0 7a67 	vmov.f32	s14, s15
 80147ba:	2b00      	cmp	r3, #0
 80147bc:	e7d9      	b.n	8014772 <scalbnf+0x4e>
 80147be:	3019      	adds	r0, #25
 80147c0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80147c4:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80147c8:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80147ec <scalbnf+0xc8>
 80147cc:	ee07 3a90 	vmov	s15, r3
 80147d0:	e7d7      	b.n	8014782 <scalbnf+0x5e>
 80147d2:	bf00      	nop
 80147d4:	ffff3cb0 	.word	0xffff3cb0
 80147d8:	4c000000 	.word	0x4c000000
 80147dc:	7149f2ca 	.word	0x7149f2ca
 80147e0:	f149f2ca 	.word	0xf149f2ca
 80147e4:	0da24260 	.word	0x0da24260
 80147e8:	8da24260 	.word	0x8da24260
 80147ec:	33000000 	.word	0x33000000

080147f0 <floorf>:
 80147f0:	ee10 3a10 	vmov	r3, s0
 80147f4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80147f8:	3a7f      	subs	r2, #127	@ 0x7f
 80147fa:	2a16      	cmp	r2, #22
 80147fc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8014800:	dc2b      	bgt.n	801485a <floorf+0x6a>
 8014802:	2a00      	cmp	r2, #0
 8014804:	da12      	bge.n	801482c <floorf+0x3c>
 8014806:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801486c <floorf+0x7c>
 801480a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801480e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014816:	dd06      	ble.n	8014826 <floorf+0x36>
 8014818:	2b00      	cmp	r3, #0
 801481a:	da24      	bge.n	8014866 <floorf+0x76>
 801481c:	2900      	cmp	r1, #0
 801481e:	4b14      	ldr	r3, [pc, #80]	@ (8014870 <floorf+0x80>)
 8014820:	bf08      	it	eq
 8014822:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8014826:	ee00 3a10 	vmov	s0, r3
 801482a:	4770      	bx	lr
 801482c:	4911      	ldr	r1, [pc, #68]	@ (8014874 <floorf+0x84>)
 801482e:	4111      	asrs	r1, r2
 8014830:	420b      	tst	r3, r1
 8014832:	d0fa      	beq.n	801482a <floorf+0x3a>
 8014834:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 801486c <floorf+0x7c>
 8014838:	ee30 0a27 	vadd.f32	s0, s0, s15
 801483c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014844:	ddef      	ble.n	8014826 <floorf+0x36>
 8014846:	2b00      	cmp	r3, #0
 8014848:	bfbe      	ittt	lt
 801484a:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 801484e:	fa40 f202 	asrlt.w	r2, r0, r2
 8014852:	189b      	addlt	r3, r3, r2
 8014854:	ea23 0301 	bic.w	r3, r3, r1
 8014858:	e7e5      	b.n	8014826 <floorf+0x36>
 801485a:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801485e:	d3e4      	bcc.n	801482a <floorf+0x3a>
 8014860:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014864:	4770      	bx	lr
 8014866:	2300      	movs	r3, #0
 8014868:	e7dd      	b.n	8014826 <floorf+0x36>
 801486a:	bf00      	nop
 801486c:	7149f2ca 	.word	0x7149f2ca
 8014870:	bf800000 	.word	0xbf800000
 8014874:	007fffff 	.word	0x007fffff

08014878 <_init>:
 8014878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801487a:	bf00      	nop
 801487c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801487e:	bc08      	pop	{r3}
 8014880:	469e      	mov	lr, r3
 8014882:	4770      	bx	lr

08014884 <_fini>:
 8014884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014886:	bf00      	nop
 8014888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801488a:	bc08      	pop	{r3}
 801488c:	469e      	mov	lr, r3
 801488e:	4770      	bx	lr
