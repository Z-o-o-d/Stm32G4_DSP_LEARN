
ETR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e298  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  0800e478  0800e478  0000f478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e514  0800e514  000101d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e514  0800e514  0000f514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e51c  0800e51c  000101d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e51c  0800e51c  0000f51c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e520  0800e520  0000f520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800e524  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006378  200001d4  0800e6f8  000101d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000654c  0800e6f8  0001054c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000101d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cf6b  00000000  00000000  00010204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043b2  00000000  00000000  0002d16f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001928  00000000  00000000  00031528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000132a  00000000  00000000  00032e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b664  00000000  00000000  0003417a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ed76  00000000  00000000  0005f7de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00113397  00000000  00000000  0007e554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001918eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ee4  00000000  00000000  00191930  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  00198814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800e460 	.word	0x0800e460

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	0800e460 	.word	0x0800e460

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b084      	sub	sp, #16
 80002c4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002c6:	f001 fbaa 	bl	8001a1e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002ca:	f000 f8b1 	bl	8000430 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ce:	f000 fd11 	bl	8000cf4 <MX_GPIO_Init>
  MX_DMA_Init();
 80002d2:	f000 fccd 	bl	8000c70 <MX_DMA_Init>
  MX_TIM2_Init();
 80002d6:	f000 fb79 	bl	80009cc <MX_TIM2_Init>
  MX_TIM4_Init();
 80002da:	f000 fc79 	bl	8000bd0 <MX_TIM4_Init>
  MX_USB_Device_Init();
 80002de:	f00c ff15 	bl	800d10c <MX_USB_Device_Init>
  MX_TIM3_Init();
 80002e2:	f000 fbff 	bl	8000ae4 <MX_TIM3_Init>
  MX_ADC1_Init();
 80002e6:	f000 f8ef 	bl	80004c8 <MX_ADC1_Init>
  MX_ADC2_Init();
 80002ea:	f000 f967 	bl	80005bc <MX_ADC2_Init>
  MX_ADC3_Init();
 80002ee:	f000 f9cd 	bl	800068c <MX_ADC3_Init>
  MX_OPAMP1_Init();
 80002f2:	f000 fa45 	bl	8000780 <MX_OPAMP1_Init>
  MX_OPAMP3_Init();
 80002f6:	f000 fa69 	bl	80007cc <MX_OPAMP3_Init>
  MX_TIM1_Init();
 80002fa:	f000 fa8d 	bl	8000818 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */




  HAL_OPAMP_Start(&hopamp1);
 80002fe:	483f      	ldr	r0, [pc, #252]	@ (80003fc <main+0x13c>)
 8000300:	f004 f87a 	bl	80043f8 <HAL_OPAMP_Start>
  HAL_OPAMP_Start(&hopamp3);
 8000304:	483e      	ldr	r0, [pc, #248]	@ (8000400 <main+0x140>)
 8000306:	f004 f877 	bl	80043f8 <HAL_OPAMP_Start>

  HAL_ADC_Start_DMA(&hadc2, ADC_BUFFER, BUFFER_SIZE);
 800030a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800030e:	493d      	ldr	r1, [pc, #244]	@ (8000404 <main+0x144>)
 8000310:	483d      	ldr	r0, [pc, #244]	@ (8000408 <main+0x148>)
 8000312:	f002 f873 	bl	80023fc <HAL_ADC_Start_DMA>

  HAL_TIM_Base_Start(&htim1);
 8000316:	483d      	ldr	r0, [pc, #244]	@ (800040c <main+0x14c>)
 8000318:	f006 fe22 	bl	8006f60 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim2);
 800031c:	483c      	ldr	r0, [pc, #240]	@ (8000410 <main+0x150>)
 800031e:	f006 fe1f 	bl	8006f60 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);
 8000322:	483c      	ldr	r0, [pc, #240]	@ (8000414 <main+0x154>)
 8000324:	f006 fe1c 	bl	8006f60 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim4);
 8000328:	483b      	ldr	r0, [pc, #236]	@ (8000418 <main+0x158>)
 800032a:	f006 fe89 	bl	8007040 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800032e:	210c      	movs	r1, #12
 8000330:	4837      	ldr	r0, [pc, #220]	@ (8000410 <main+0x150>)
 8000332:	f007 f8d3 	bl	80074dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000336:	2108      	movs	r1, #8
 8000338:	4835      	ldr	r0, [pc, #212]	@ (8000410 <main+0x150>)
 800033a:	f007 f8cf 	bl	80074dc <HAL_TIM_PWM_Start>

  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_1);
 800033e:	2100      	movs	r1, #0
 8000340:	4832      	ldr	r0, [pc, #200]	@ (800040c <main+0x14c>)
 8000342:	f006 ff57 	bl	80071f4 <HAL_TIM_OC_Start>
  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_2);
 8000346:	2104      	movs	r1, #4
 8000348:	4830      	ldr	r0, [pc, #192]	@ (800040c <main+0x14c>)
 800034a:	f006 ff53 	bl	80071f4 <HAL_TIM_OC_Start>
  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_3);
 800034e:	2108      	movs	r1, #8
 8000350:	482e      	ldr	r0, [pc, #184]	@ (800040c <main+0x14c>)
 8000352:	f006 ff4f 	bl	80071f4 <HAL_TIM_OC_Start>
  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_4);
 8000356:	210c      	movs	r1, #12
 8000358:	482c      	ldr	r0, [pc, #176]	@ (800040c <main+0x14c>)
 800035a:	f006 ff4b 	bl	80071f4 <HAL_TIM_OC_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		if (WHILE_FLAG==2) {
 800035e:	4b2f      	ldr	r3, [pc, #188]	@ (800041c <main+0x15c>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	2b02      	cmp	r3, #2
 8000364:	d1fb      	bne.n	800035e <main+0x9e>

		 ws2812_set_all(rgb_to_color(0xff, 0x00, 0x00));
 8000366:	2200      	movs	r2, #0
 8000368:	2100      	movs	r1, #0
 800036a:	20ff      	movs	r0, #255	@ 0xff
 800036c:	f001 fafc 	bl	8001968 <rgb_to_color>
 8000370:	4603      	mov	r3, r0
 8000372:	4618      	mov	r0, r3
 8000374:	f001 fadc 	bl	8001930 <ws2812_set_all>
		 ws2812_gradient(100, 10);
 8000378:	210a      	movs	r1, #10
 800037a:	2064      	movs	r0, #100	@ 0x64
 800037c:	f001 f9be 	bl	80016fc <ws2812_gradient>
		 ws2812_set_all(rgb_to_color(0x00, 0x00, 0xff));
 8000380:	22ff      	movs	r2, #255	@ 0xff
 8000382:	2100      	movs	r1, #0
 8000384:	2000      	movs	r0, #0
 8000386:	f001 faef 	bl	8001968 <rgb_to_color>
 800038a:	4603      	mov	r3, r0
 800038c:	4618      	mov	r0, r3
 800038e:	f001 facf 	bl	8001930 <ws2812_set_all>
		 ws2812_gradient(100, 10);
 8000392:	210a      	movs	r1, #10
 8000394:	2064      	movs	r0, #100	@ 0x64
 8000396:	f001 f9b1 	bl	80016fc <ws2812_gradient>
		 ws2812_set_all(rgb_to_color(0x00, 0xff, 0x00));
 800039a:	2200      	movs	r2, #0
 800039c:	21ff      	movs	r1, #255	@ 0xff
 800039e:	2000      	movs	r0, #0
 80003a0:	f001 fae2 	bl	8001968 <rgb_to_color>
 80003a4:	4603      	mov	r3, r0
 80003a6:	4618      	mov	r0, r3
 80003a8:	f001 fac2 	bl	8001930 <ws2812_set_all>
		 ws2812_gradient(100, 10);
 80003ac:	210a      	movs	r1, #10
 80003ae:	2064      	movs	r0, #100	@ 0x64
 80003b0:	f001 f9a4 	bl	80016fc <ws2812_gradient>
//	  sprintf(CDC_BUFFER,"-----WHILE-----      \r\n");
//	  CDC_Transmit_FS(CDC_BUFFER, 50);


		for (int i = 0; i < BUFFER_SIZE; ++i) {
 80003b4:	2300      	movs	r3, #0
 80003b6:	607b      	str	r3, [r7, #4]
 80003b8:	e015      	b.n	80003e6 <main+0x126>
		HAL_Delay(2);
 80003ba:	2002      	movs	r0, #2
 80003bc:	f001 fba0 	bl	8001b00 <HAL_Delay>



		  sprintf(CDC_BUFFER,"Val:%d,%d,%d\r\n",WHILE_BUFFER[i],i,USER_CounterTicks);
 80003c0:	4a17      	ldr	r2, [pc, #92]	@ (8000420 <main+0x160>)
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003c8:	4b16      	ldr	r3, [pc, #88]	@ (8000424 <main+0x164>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	9300      	str	r3, [sp, #0]
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	4915      	ldr	r1, [pc, #84]	@ (8000428 <main+0x168>)
 80003d2:	4816      	ldr	r0, [pc, #88]	@ (800042c <main+0x16c>)
 80003d4:	f00d fba4 	bl	800db20 <siprintf>
		  CDC_Transmit_FS(CDC_BUFFER, CDC_BUFFER_SIZE);
 80003d8:	2132      	movs	r1, #50	@ 0x32
 80003da:	4814      	ldr	r0, [pc, #80]	@ (800042c <main+0x16c>)
 80003dc:	f00c ff54 	bl	800d288 <CDC_Transmit_FS>
		for (int i = 0; i < BUFFER_SIZE; ++i) {
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	3301      	adds	r3, #1
 80003e4:	607b      	str	r3, [r7, #4]
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80003ec:	dbe5      	blt.n	80003ba <main+0xfa>



		}
		HAL_Delay(10);
 80003ee:	200a      	movs	r0, #10
 80003f0:	f001 fb86 	bl	8001b00 <HAL_Delay>
		  WHILE_FLAG=0;
 80003f4:	4b09      	ldr	r3, [pc, #36]	@ (800041c <main+0x15c>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	601a      	str	r2, [r3, #0]
		if (WHILE_FLAG==2) {
 80003fa:	e7b0      	b.n	800035e <main+0x9e>
 80003fc:	20000454 	.word	0x20000454
 8000400:	20000490 	.word	0x20000490
 8000404:	20000660 	.word	0x20000660
 8000408:	2000025c 	.word	0x2000025c
 800040c:	200004cc 	.word	0x200004cc
 8000410:	20000518 	.word	0x20000518
 8000414:	20000564 	.word	0x20000564
 8000418:	200005b0 	.word	0x200005b0
 800041c:	20002694 	.word	0x20002694
 8000420:	20001660 	.word	0x20001660
 8000424:	2000065c 	.word	0x2000065c
 8000428:	0800e478 	.word	0x0800e478
 800042c:	20002660 	.word	0x20002660

08000430 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b094      	sub	sp, #80	@ 0x50
 8000434:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000436:	f107 0318 	add.w	r3, r7, #24
 800043a:	2238      	movs	r2, #56	@ 0x38
 800043c:	2100      	movs	r1, #0
 800043e:	4618      	mov	r0, r3
 8000440:	f00d fb8e 	bl	800db60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000444:	1d3b      	adds	r3, r7, #4
 8000446:	2200      	movs	r2, #0
 8000448:	601a      	str	r2, [r3, #0]
 800044a:	605a      	str	r2, [r3, #4]
 800044c:	609a      	str	r2, [r3, #8]
 800044e:	60da      	str	r2, [r3, #12]
 8000450:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000452:	2000      	movs	r0, #0
 8000454:	f005 fd34 	bl	8005ec0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000458:	2321      	movs	r3, #33	@ 0x21
 800045a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800045c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000460:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000462:	2301      	movs	r3, #1
 8000464:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000466:	2302      	movs	r3, #2
 8000468:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800046a:	2303      	movs	r3, #3
 800046c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800046e:	2302      	movs	r3, #2
 8000470:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000472:	2355      	movs	r3, #85	@ 0x55
 8000474:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000476:	2302      	movs	r3, #2
 8000478:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800047a:	2302      	movs	r3, #2
 800047c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800047e:	2302      	movs	r3, #2
 8000480:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000482:	f107 0318 	add.w	r3, r7, #24
 8000486:	4618      	mov	r0, r3
 8000488:	f005 fdce 	bl	8006028 <HAL_RCC_OscConfig>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d001      	beq.n	8000496 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000492:	f000 fcdb 	bl	8000e4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000496:	230f      	movs	r3, #15
 8000498:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800049a:	2303      	movs	r3, #3
 800049c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800049e:	2300      	movs	r3, #0
 80004a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004a2:	2300      	movs	r3, #0
 80004a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004a6:	2300      	movs	r3, #0
 80004a8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80004aa:	1d3b      	adds	r3, r7, #4
 80004ac:	2104      	movs	r1, #4
 80004ae:	4618      	mov	r0, r3
 80004b0:	f006 f8cc 	bl	800664c <HAL_RCC_ClockConfig>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80004ba:	f000 fcc7 	bl	8000e4c <Error_Handler>
  }
}
 80004be:	bf00      	nop
 80004c0:	3750      	adds	r7, #80	@ 0x50
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
	...

080004c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b08c      	sub	sp, #48	@ 0x30
 80004cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80004ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	605a      	str	r2, [r3, #4]
 80004d8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80004da:	1d3b      	adds	r3, r7, #4
 80004dc:	2220      	movs	r2, #32
 80004de:	2100      	movs	r1, #0
 80004e0:	4618      	mov	r0, r3
 80004e2:	f00d fb3d 	bl	800db60 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80004e6:	4b33      	ldr	r3, [pc, #204]	@ (80005b4 <MX_ADC1_Init+0xec>)
 80004e8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80004ec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80004ee:	4b31      	ldr	r3, [pc, #196]	@ (80005b4 <MX_ADC1_Init+0xec>)
 80004f0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80004f4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004f6:	4b2f      	ldr	r3, [pc, #188]	@ (80005b4 <MX_ADC1_Init+0xec>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004fc:	4b2d      	ldr	r3, [pc, #180]	@ (80005b4 <MX_ADC1_Init+0xec>)
 80004fe:	2200      	movs	r2, #0
 8000500:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000502:	4b2c      	ldr	r3, [pc, #176]	@ (80005b4 <MX_ADC1_Init+0xec>)
 8000504:	2200      	movs	r2, #0
 8000506:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000508:	4b2a      	ldr	r3, [pc, #168]	@ (80005b4 <MX_ADC1_Init+0xec>)
 800050a:	2200      	movs	r2, #0
 800050c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800050e:	4b29      	ldr	r3, [pc, #164]	@ (80005b4 <MX_ADC1_Init+0xec>)
 8000510:	2204      	movs	r2, #4
 8000512:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000514:	4b27      	ldr	r3, [pc, #156]	@ (80005b4 <MX_ADC1_Init+0xec>)
 8000516:	2200      	movs	r2, #0
 8000518:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800051a:	4b26      	ldr	r3, [pc, #152]	@ (80005b4 <MX_ADC1_Init+0xec>)
 800051c:	2200      	movs	r2, #0
 800051e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000520:	4b24      	ldr	r3, [pc, #144]	@ (80005b4 <MX_ADC1_Init+0xec>)
 8000522:	2201      	movs	r2, #1
 8000524:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000526:	4b23      	ldr	r3, [pc, #140]	@ (80005b4 <MX_ADC1_Init+0xec>)
 8000528:	2200      	movs	r2, #0
 800052a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 800052e:	4b21      	ldr	r3, [pc, #132]	@ (80005b4 <MX_ADC1_Init+0xec>)
 8000530:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 8000534:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000536:	4b1f      	ldr	r3, [pc, #124]	@ (80005b4 <MX_ADC1_Init+0xec>)
 8000538:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800053c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800053e:	4b1d      	ldr	r3, [pc, #116]	@ (80005b4 <MX_ADC1_Init+0xec>)
 8000540:	2201      	movs	r2, #1
 8000542:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000546:	4b1b      	ldr	r3, [pc, #108]	@ (80005b4 <MX_ADC1_Init+0xec>)
 8000548:	2200      	movs	r2, #0
 800054a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800054c:	4b19      	ldr	r3, [pc, #100]	@ (80005b4 <MX_ADC1_Init+0xec>)
 800054e:	2200      	movs	r2, #0
 8000550:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000554:	4817      	ldr	r0, [pc, #92]	@ (80005b4 <MX_ADC1_Init+0xec>)
 8000556:	f001 fd95 	bl	8002084 <HAL_ADC_Init>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000560:	f000 fc74 	bl	8000e4c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000564:	2300      	movs	r3, #0
 8000566:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000568:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800056c:	4619      	mov	r1, r3
 800056e:	4811      	ldr	r0, [pc, #68]	@ (80005b4 <MX_ADC1_Init+0xec>)
 8000570:	f003 f84e 	bl	8003610 <HAL_ADCEx_MultiModeConfigChannel>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800057a:	f000 fc67 	bl	8000e4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP1;
 800057e:	4b0e      	ldr	r3, [pc, #56]	@ (80005b8 <MX_ADC1_Init+0xf0>)
 8000580:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000582:	2306      	movs	r3, #6
 8000584:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000586:	2300      	movs	r3, #0
 8000588:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800058a:	237f      	movs	r3, #127	@ 0x7f
 800058c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800058e:	2304      	movs	r3, #4
 8000590:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000592:	2300      	movs	r3, #0
 8000594:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000596:	1d3b      	adds	r3, r7, #4
 8000598:	4619      	mov	r1, r3
 800059a:	4806      	ldr	r0, [pc, #24]	@ (80005b4 <MX_ADC1_Init+0xec>)
 800059c:	f002 fa76 	bl	8002a8c <HAL_ADC_ConfigChannel>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80005a6:	f000 fc51 	bl	8000e4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005aa:	bf00      	nop
 80005ac:	3730      	adds	r7, #48	@ 0x30
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	200001f0 	.word	0x200001f0
 80005b8:	b6902000 	.word	0xb6902000

080005bc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b088      	sub	sp, #32
 80005c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005c2:	463b      	mov	r3, r7
 80005c4:	2220      	movs	r2, #32
 80005c6:	2100      	movs	r1, #0
 80005c8:	4618      	mov	r0, r3
 80005ca:	f00d fac9 	bl	800db60 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80005ce:	4b2c      	ldr	r3, [pc, #176]	@ (8000680 <MX_ADC2_Init+0xc4>)
 80005d0:	4a2c      	ldr	r2, [pc, #176]	@ (8000684 <MX_ADC2_Init+0xc8>)
 80005d2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005d4:	4b2a      	ldr	r3, [pc, #168]	@ (8000680 <MX_ADC2_Init+0xc4>)
 80005d6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80005da:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80005dc:	4b28      	ldr	r3, [pc, #160]	@ (8000680 <MX_ADC2_Init+0xc4>)
 80005de:	2200      	movs	r2, #0
 80005e0:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005e2:	4b27      	ldr	r3, [pc, #156]	@ (8000680 <MX_ADC2_Init+0xc4>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80005e8:	4b25      	ldr	r3, [pc, #148]	@ (8000680 <MX_ADC2_Init+0xc4>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005ee:	4b24      	ldr	r3, [pc, #144]	@ (8000680 <MX_ADC2_Init+0xc4>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005f4:	4b22      	ldr	r3, [pc, #136]	@ (8000680 <MX_ADC2_Init+0xc4>)
 80005f6:	2204      	movs	r2, #4
 80005f8:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80005fa:	4b21      	ldr	r3, [pc, #132]	@ (8000680 <MX_ADC2_Init+0xc4>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000600:	4b1f      	ldr	r3, [pc, #124]	@ (8000680 <MX_ADC2_Init+0xc4>)
 8000602:	2200      	movs	r2, #0
 8000604:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000606:	4b1e      	ldr	r3, [pc, #120]	@ (8000680 <MX_ADC2_Init+0xc4>)
 8000608:	2201      	movs	r2, #1
 800060a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800060c:	4b1c      	ldr	r3, [pc, #112]	@ (8000680 <MX_ADC2_Init+0xc4>)
 800060e:	2200      	movs	r2, #0
 8000610:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_CC1;
 8000614:	4b1a      	ldr	r3, [pc, #104]	@ (8000680 <MX_ADC2_Init+0xc4>)
 8000616:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800061a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800061c:	4b18      	ldr	r3, [pc, #96]	@ (8000680 <MX_ADC2_Init+0xc4>)
 800061e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000622:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000624:	4b16      	ldr	r3, [pc, #88]	@ (8000680 <MX_ADC2_Init+0xc4>)
 8000626:	2201      	movs	r2, #1
 8000628:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800062c:	4b14      	ldr	r3, [pc, #80]	@ (8000680 <MX_ADC2_Init+0xc4>)
 800062e:	2200      	movs	r2, #0
 8000630:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000632:	4b13      	ldr	r3, [pc, #76]	@ (8000680 <MX_ADC2_Init+0xc4>)
 8000634:	2200      	movs	r2, #0
 8000636:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800063a:	4811      	ldr	r0, [pc, #68]	@ (8000680 <MX_ADC2_Init+0xc4>)
 800063c:	f001 fd22 	bl	8002084 <HAL_ADC_Init>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8000646:	f000 fc01 	bl	8000e4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP3_ADC2;
 800064a:	4b0f      	ldr	r3, [pc, #60]	@ (8000688 <MX_ADC2_Init+0xcc>)
 800064c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800064e:	2306      	movs	r3, #6
 8000650:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000652:	2300      	movs	r3, #0
 8000654:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000656:	237f      	movs	r3, #127	@ 0x7f
 8000658:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800065a:	2304      	movs	r3, #4
 800065c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800065e:	2300      	movs	r3, #0
 8000660:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000662:	463b      	mov	r3, r7
 8000664:	4619      	mov	r1, r3
 8000666:	4806      	ldr	r0, [pc, #24]	@ (8000680 <MX_ADC2_Init+0xc4>)
 8000668:	f002 fa10 	bl	8002a8c <HAL_ADC_ConfigChannel>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 8000672:	f000 fbeb 	bl	8000e4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000676:	bf00      	nop
 8000678:	3720      	adds	r7, #32
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	2000025c 	.word	0x2000025c
 8000684:	50000100 	.word	0x50000100
 8000688:	cb8c0000 	.word	0xcb8c0000

0800068c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b08c      	sub	sp, #48	@ 0x30
 8000690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000692:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800069e:	1d3b      	adds	r3, r7, #4
 80006a0:	2220      	movs	r2, #32
 80006a2:	2100      	movs	r1, #0
 80006a4:	4618      	mov	r0, r3
 80006a6:	f00d fa5b 	bl	800db60 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80006aa:	4b32      	ldr	r3, [pc, #200]	@ (8000774 <MX_ADC3_Init+0xe8>)
 80006ac:	4a32      	ldr	r2, [pc, #200]	@ (8000778 <MX_ADC3_Init+0xec>)
 80006ae:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006b0:	4b30      	ldr	r3, [pc, #192]	@ (8000774 <MX_ADC3_Init+0xe8>)
 80006b2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80006b6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80006b8:	4b2e      	ldr	r3, [pc, #184]	@ (8000774 <MX_ADC3_Init+0xe8>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006be:	4b2d      	ldr	r3, [pc, #180]	@ (8000774 <MX_ADC3_Init+0xe8>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 80006c4:	4b2b      	ldr	r3, [pc, #172]	@ (8000774 <MX_ADC3_Init+0xe8>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006ca:	4b2a      	ldr	r3, [pc, #168]	@ (8000774 <MX_ADC3_Init+0xe8>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006d0:	4b28      	ldr	r3, [pc, #160]	@ (8000774 <MX_ADC3_Init+0xe8>)
 80006d2:	2204      	movs	r2, #4
 80006d4:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80006d6:	4b27      	ldr	r3, [pc, #156]	@ (8000774 <MX_ADC3_Init+0xe8>)
 80006d8:	2200      	movs	r2, #0
 80006da:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80006dc:	4b25      	ldr	r3, [pc, #148]	@ (8000774 <MX_ADC3_Init+0xe8>)
 80006de:	2200      	movs	r2, #0
 80006e0:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 80006e2:	4b24      	ldr	r3, [pc, #144]	@ (8000774 <MX_ADC3_Init+0xe8>)
 80006e4:	2201      	movs	r2, #1
 80006e6:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80006e8:	4b22      	ldr	r3, [pc, #136]	@ (8000774 <MX_ADC3_Init+0xe8>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_CC3;
 80006f0:	4b20      	ldr	r3, [pc, #128]	@ (8000774 <MX_ADC3_Init+0xe8>)
 80006f2:	f44f 6288 	mov.w	r2, #1088	@ 0x440
 80006f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80006f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000774 <MX_ADC3_Init+0xe8>)
 80006fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80006fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8000700:	4b1c      	ldr	r3, [pc, #112]	@ (8000774 <MX_ADC3_Init+0xe8>)
 8000702:	2201      	movs	r2, #1
 8000704:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000708:	4b1a      	ldr	r3, [pc, #104]	@ (8000774 <MX_ADC3_Init+0xe8>)
 800070a:	2200      	movs	r2, #0
 800070c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 800070e:	4b19      	ldr	r3, [pc, #100]	@ (8000774 <MX_ADC3_Init+0xe8>)
 8000710:	2200      	movs	r2, #0
 8000712:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000716:	4817      	ldr	r0, [pc, #92]	@ (8000774 <MX_ADC3_Init+0xe8>)
 8000718:	f001 fcb4 	bl	8002084 <HAL_ADC_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_ADC3_Init+0x9a>
  {
    Error_Handler();
 8000722:	f000 fb93 	bl	8000e4c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000726:	2300      	movs	r3, #0
 8000728:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 800072a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800072e:	4619      	mov	r1, r3
 8000730:	4810      	ldr	r0, [pc, #64]	@ (8000774 <MX_ADC3_Init+0xe8>)
 8000732:	f002 ff6d 	bl	8003610 <HAL_ADCEx_MultiModeConfigChannel>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 800073c:	f000 fb86 	bl	8000e4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP3_ADC3;
 8000740:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <MX_ADC3_Init+0xf0>)
 8000742:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000744:	2306      	movs	r3, #6
 8000746:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000748:	2300      	movs	r3, #0
 800074a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800074c:	237f      	movs	r3, #127	@ 0x7f
 800074e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000750:	2304      	movs	r3, #4
 8000752:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000754:	2300      	movs	r3, #0
 8000756:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000758:	1d3b      	adds	r3, r7, #4
 800075a:	4619      	mov	r1, r3
 800075c:	4805      	ldr	r0, [pc, #20]	@ (8000774 <MX_ADC3_Init+0xe8>)
 800075e:	f002 f995 	bl	8002a8c <HAL_ADC_ConfigChannel>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_ADC3_Init+0xe0>
  {
    Error_Handler();
 8000768:	f000 fb70 	bl	8000e4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800076c:	bf00      	nop
 800076e:	3730      	adds	r7, #48	@ 0x30
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	200002c8 	.word	0x200002c8
 8000778:	50000400 	.word	0x50000400
 800077c:	b6982000 	.word	0xb6982000

08000780 <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8000784:	4b0f      	ldr	r3, [pc, #60]	@ (80007c4 <MX_OPAMP1_Init+0x44>)
 8000786:	4a10      	ldr	r2, [pc, #64]	@ (80007c8 <MX_OPAMP1_Init+0x48>)
 8000788:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 800078a:	4b0e      	ldr	r3, [pc, #56]	@ (80007c4 <MX_OPAMP1_Init+0x44>)
 800078c:	2280      	movs	r2, #128	@ 0x80
 800078e:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_FOLLOWER_MODE;
 8000790:	4b0c      	ldr	r3, [pc, #48]	@ (80007c4 <MX_OPAMP1_Init+0x44>)
 8000792:	2260      	movs	r2, #96	@ 0x60
 8000794:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8000796:	4b0b      	ldr	r3, [pc, #44]	@ (80007c4 <MX_OPAMP1_Init+0x44>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = ENABLE;
 800079c:	4b09      	ldr	r3, [pc, #36]	@ (80007c4 <MX_OPAMP1_Init+0x44>)
 800079e:	2201      	movs	r2, #1
 80007a0:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80007a2:	4b08      	ldr	r3, [pc, #32]	@ (80007c4 <MX_OPAMP1_Init+0x44>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	619a      	str	r2, [r3, #24]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80007a8:	4b06      	ldr	r3, [pc, #24]	@ (80007c4 <MX_OPAMP1_Init+0x44>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 80007ae:	4805      	ldr	r0, [pc, #20]	@ (80007c4 <MX_OPAMP1_Init+0x44>)
 80007b0:	f003 fd52 	bl	8004258 <HAL_OPAMP_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_OPAMP1_Init+0x3e>
  {
    Error_Handler();
 80007ba:	f000 fb47 	bl	8000e4c <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000454 	.word	0x20000454
 80007c8:	40010300 	.word	0x40010300

080007cc <MX_OPAMP3_Init>:
  * @brief OPAMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP3_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 80007d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000810 <MX_OPAMP3_Init+0x44>)
 80007d2:	4a10      	ldr	r2, [pc, #64]	@ (8000814 <MX_OPAMP3_Init+0x48>)
 80007d4:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 80007d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000810 <MX_OPAMP3_Init+0x44>)
 80007d8:	2280      	movs	r2, #128	@ 0x80
 80007da:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_FOLLOWER_MODE;
 80007dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000810 <MX_OPAMP3_Init+0x44>)
 80007de:	2260      	movs	r2, #96	@ 0x60
 80007e0:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 80007e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000810 <MX_OPAMP3_Init+0x44>)
 80007e4:	2208      	movs	r2, #8
 80007e6:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = ENABLE;
 80007e8:	4b09      	ldr	r3, [pc, #36]	@ (8000810 <MX_OPAMP3_Init+0x44>)
 80007ea:	2201      	movs	r2, #1
 80007ec:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80007ee:	4b08      	ldr	r3, [pc, #32]	@ (8000810 <MX_OPAMP3_Init+0x44>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80007f4:	4b06      	ldr	r3, [pc, #24]	@ (8000810 <MX_OPAMP3_Init+0x44>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 80007fa:	4805      	ldr	r0, [pc, #20]	@ (8000810 <MX_OPAMP3_Init+0x44>)
 80007fc:	f003 fd2c 	bl	8004258 <HAL_OPAMP_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_OPAMP3_Init+0x3e>
  {
    Error_Handler();
 8000806:	f000 fb21 	bl	8000e4c <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20000490 	.word	0x20000490
 8000814:	40010308 	.word	0x40010308

08000818 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b09c      	sub	sp, #112	@ 0x70
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800081e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
 800082a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800082c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000838:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
 8000844:	60da      	str	r2, [r3, #12]
 8000846:	611a      	str	r2, [r3, #16]
 8000848:	615a      	str	r2, [r3, #20]
 800084a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800084c:	1d3b      	adds	r3, r7, #4
 800084e:	2234      	movs	r2, #52	@ 0x34
 8000850:	2100      	movs	r1, #0
 8000852:	4618      	mov	r0, r3
 8000854:	f00d f984 	bl	800db60 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000858:	4b5a      	ldr	r3, [pc, #360]	@ (80009c4 <MX_TIM1_Init+0x1ac>)
 800085a:	4a5b      	ldr	r2, [pc, #364]	@ (80009c8 <MX_TIM1_Init+0x1b0>)
 800085c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8-1;
 800085e:	4b59      	ldr	r3, [pc, #356]	@ (80009c4 <MX_TIM1_Init+0x1ac>)
 8000860:	2207      	movs	r2, #7
 8000862:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000864:	4b57      	ldr	r3, [pc, #348]	@ (80009c4 <MX_TIM1_Init+0x1ac>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2;
 800086a:	4b56      	ldr	r3, [pc, #344]	@ (80009c4 <MX_TIM1_Init+0x1ac>)
 800086c:	2202      	movs	r2, #2
 800086e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000870:	4b54      	ldr	r3, [pc, #336]	@ (80009c4 <MX_TIM1_Init+0x1ac>)
 8000872:	2200      	movs	r2, #0
 8000874:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000876:	4b53      	ldr	r3, [pc, #332]	@ (80009c4 <MX_TIM1_Init+0x1ac>)
 8000878:	2200      	movs	r2, #0
 800087a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800087c:	4b51      	ldr	r3, [pc, #324]	@ (80009c4 <MX_TIM1_Init+0x1ac>)
 800087e:	2200      	movs	r2, #0
 8000880:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000882:	4850      	ldr	r0, [pc, #320]	@ (80009c4 <MX_TIM1_Init+0x1ac>)
 8000884:	f006 fb14 	bl	8006eb0 <HAL_TIM_Base_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800088e:	f000 fadd 	bl	8000e4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000892:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000896:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000898:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800089c:	4619      	mov	r1, r3
 800089e:	4849      	ldr	r0, [pc, #292]	@ (80009c4 <MX_TIM1_Init+0x1ac>)
 80008a0:	f007 fc38 	bl	8008114 <HAL_TIM_ConfigClockSource>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80008aa:	f000 facf 	bl	8000e4c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80008ae:	4845      	ldr	r0, [pc, #276]	@ (80009c4 <MX_TIM1_Init+0x1ac>)
 80008b0:	f006 fc3e 	bl	8007130 <HAL_TIM_OC_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80008ba:	f000 fac7 	bl	8000e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80008be:	2320      	movs	r3, #32
 80008c0:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008c2:	2300      	movs	r3, #0
 80008c4:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c6:	2300      	movs	r3, #0
 80008c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008ca:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80008ce:	4619      	mov	r1, r3
 80008d0:	483c      	ldr	r0, [pc, #240]	@ (80009c4 <MX_TIM1_Init+0x1ac>)
 80008d2:	f008 faed 	bl	8008eb0 <HAL_TIMEx_MasterConfigSynchronization>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80008dc:	f000 fab6 	bl	8000e4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80008e0:	2330      	movs	r3, #48	@ 0x30
 80008e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008e8:	2300      	movs	r3, #0
 80008ea:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008ec:	2300      	movs	r3, #0
 80008ee:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008f0:	2300      	movs	r3, #0
 80008f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008f4:	2300      	movs	r3, #0
 80008f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008f8:	2300      	movs	r3, #0
 80008fa:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008fc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000900:	2200      	movs	r2, #0
 8000902:	4619      	mov	r1, r3
 8000904:	482f      	ldr	r0, [pc, #188]	@ (80009c4 <MX_TIM1_Init+0x1ac>)
 8000906:	f007 fa77 	bl	8007df8 <HAL_TIM_OC_ConfigChannel>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000910:	f000 fa9c 	bl	8000e4c <Error_Handler>
  }
  sConfigOC.Pulse = 1;
 8000914:	2301      	movs	r3, #1
 8000916:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000918:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800091c:	2204      	movs	r2, #4
 800091e:	4619      	mov	r1, r3
 8000920:	4828      	ldr	r0, [pc, #160]	@ (80009c4 <MX_TIM1_Init+0x1ac>)
 8000922:	f007 fa69 	bl	8007df8 <HAL_TIM_OC_ConfigChannel>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 800092c:	f000 fa8e 	bl	8000e4c <Error_Handler>
  }
  sConfigOC.Pulse = 2;
 8000930:	2302      	movs	r3, #2
 8000932:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000934:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000938:	2208      	movs	r2, #8
 800093a:	4619      	mov	r1, r3
 800093c:	4821      	ldr	r0, [pc, #132]	@ (80009c4 <MX_TIM1_Init+0x1ac>)
 800093e:	f007 fa5b 	bl	8007df8 <HAL_TIM_OC_ConfigChannel>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_TIM1_Init+0x134>
  {
    Error_Handler();
 8000948:	f000 fa80 	bl	8000e4c <Error_Handler>
  }
  sConfigOC.Pulse = 3;
 800094c:	2303      	movs	r3, #3
 800094e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000950:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000954:	220c      	movs	r2, #12
 8000956:	4619      	mov	r1, r3
 8000958:	481a      	ldr	r0, [pc, #104]	@ (80009c4 <MX_TIM1_Init+0x1ac>)
 800095a:	f007 fa4d 	bl	8007df8 <HAL_TIM_OC_ConfigChannel>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 8000964:	f000 fa72 	bl	8000e4c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000968:	2300      	movs	r3, #0
 800096a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800096c:	2300      	movs	r3, #0
 800096e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000970:	2300      	movs	r3, #0
 8000972:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000974:	2300      	movs	r3, #0
 8000976:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000978:	2300      	movs	r3, #0
 800097a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800097c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000980:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000982:	2300      	movs	r3, #0
 8000984:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000986:	2300      	movs	r3, #0
 8000988:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800098a:	2300      	movs	r3, #0
 800098c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800098e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000992:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000994:	2300      	movs	r3, #0
 8000996:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000998:	2300      	movs	r3, #0
 800099a:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800099c:	2300      	movs	r3, #0
 800099e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009a0:	1d3b      	adds	r3, r7, #4
 80009a2:	4619      	mov	r1, r3
 80009a4:	4807      	ldr	r0, [pc, #28]	@ (80009c4 <MX_TIM1_Init+0x1ac>)
 80009a6:	f008 fb19 	bl	8008fdc <HAL_TIMEx_ConfigBreakDeadTime>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_TIM1_Init+0x19c>
  {
    Error_Handler();
 80009b0:	f000 fa4c 	bl	8000e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80009b4:	4803      	ldr	r0, [pc, #12]	@ (80009c4 <MX_TIM1_Init+0x1ac>)
 80009b6:	f000 fcd1 	bl	800135c <HAL_TIM_MspPostInit>

}
 80009ba:	bf00      	nop
 80009bc:	3770      	adds	r7, #112	@ 0x70
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	200004cc 	.word	0x200004cc
 80009c8:	40012c00 	.word	0x40012c00

080009cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b08e      	sub	sp, #56	@ 0x38
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	605a      	str	r2, [r3, #4]
 80009dc:	609a      	str	r2, [r3, #8]
 80009de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009e0:	f107 031c 	add.w	r3, r7, #28
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009ec:	463b      	mov	r3, r7
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	605a      	str	r2, [r3, #4]
 80009f4:	609a      	str	r2, [r3, #8]
 80009f6:	60da      	str	r2, [r3, #12]
 80009f8:	611a      	str	r2, [r3, #16]
 80009fa:	615a      	str	r2, [r3, #20]
 80009fc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009fe:	4b37      	ldr	r3, [pc, #220]	@ (8000adc <MX_TIM2_Init+0x110>)
 8000a00:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a04:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a06:	4b35      	ldr	r3, [pc, #212]	@ (8000adc <MX_TIM2_Init+0x110>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a0c:	4b33      	ldr	r3, [pc, #204]	@ (8000adc <MX_TIM2_Init+0x110>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000a12:	4b32      	ldr	r3, [pc, #200]	@ (8000adc <MX_TIM2_Init+0x110>)
 8000a14:	f04f 32ff 	mov.w	r2, #4294967295
 8000a18:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a1a:	4b30      	ldr	r3, [pc, #192]	@ (8000adc <MX_TIM2_Init+0x110>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a20:	4b2e      	ldr	r3, [pc, #184]	@ (8000adc <MX_TIM2_Init+0x110>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a26:	482d      	ldr	r0, [pc, #180]	@ (8000adc <MX_TIM2_Init+0x110>)
 8000a28:	f006 fa42 	bl	8006eb0 <HAL_TIM_Base_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000a32:	f000 fa0b 	bl	8000e4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8000a36:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8000a40:	2300      	movs	r3, #0
 8000a42:	633b      	str	r3, [r7, #48]	@ 0x30
  sClockSourceConfig.ClockFilter = 0;
 8000a44:	2300      	movs	r3, #0
 8000a46:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a48:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4823      	ldr	r0, [pc, #140]	@ (8000adc <MX_TIM2_Init+0x110>)
 8000a50:	f007 fb60 	bl	8008114 <HAL_TIM_ConfigClockSource>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000a5a:	f000 f9f7 	bl	8000e4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a5e:	481f      	ldr	r0, [pc, #124]	@ (8000adc <MX_TIM2_Init+0x110>)
 8000a60:	f006 fcda 	bl	8007418 <HAL_TIM_PWM_Init>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8000a6a:	f000 f9ef 	bl	8000e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a72:	2300      	movs	r3, #0
 8000a74:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a76:	f107 031c 	add.w	r3, r7, #28
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4817      	ldr	r0, [pc, #92]	@ (8000adc <MX_TIM2_Init+0x110>)
 8000a7e:	f008 fa17 	bl	8008eb0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_TIM2_Init+0xc0>
  {
    Error_Handler();
 8000a88:	f000 f9e0 	bl	8000e4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a8c:	2360      	movs	r3, #96	@ 0x60
 8000a8e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 8000a90:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a94:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a96:	2300      	movs	r3, #0
 8000a98:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a9e:	463b      	mov	r3, r7
 8000aa0:	2208      	movs	r2, #8
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	480d      	ldr	r0, [pc, #52]	@ (8000adc <MX_TIM2_Init+0x110>)
 8000aa6:	f007 fa21 	bl	8007eec <HAL_TIM_PWM_ConfigChannel>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8000ab0:	f000 f9cc 	bl	8000e4c <Error_Handler>
  }
  sConfigOC.Pulse = 1000000;
 8000ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ae0 <MX_TIM2_Init+0x114>)
 8000ab6:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ab8:	463b      	mov	r3, r7
 8000aba:	220c      	movs	r2, #12
 8000abc:	4619      	mov	r1, r3
 8000abe:	4807      	ldr	r0, [pc, #28]	@ (8000adc <MX_TIM2_Init+0x110>)
 8000ac0:	f007 fa14 	bl	8007eec <HAL_TIM_PWM_ConfigChannel>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_TIM2_Init+0x102>
  {
    Error_Handler();
 8000aca:	f000 f9bf 	bl	8000e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ace:	4803      	ldr	r0, [pc, #12]	@ (8000adc <MX_TIM2_Init+0x110>)
 8000ad0:	f000 fc44 	bl	800135c <HAL_TIM_MspPostInit>

}
 8000ad4:	bf00      	nop
 8000ad6:	3738      	adds	r7, #56	@ 0x38
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	20000518 	.word	0x20000518
 8000ae0:	000f4240 	.word	0x000f4240

08000ae4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08e      	sub	sp, #56	@ 0x38
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	605a      	str	r2, [r3, #4]
 8000af4:	609a      	str	r2, [r3, #8]
 8000af6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000af8:	f107 031c 	add.w	r3, r7, #28
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b04:	463b      	mov	r3, r7
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	605a      	str	r2, [r3, #4]
 8000b0c:	609a      	str	r2, [r3, #8]
 8000b0e:	60da      	str	r2, [r3, #12]
 8000b10:	611a      	str	r2, [r3, #16]
 8000b12:	615a      	str	r2, [r3, #20]
 8000b14:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b16:	4b2c      	ldr	r3, [pc, #176]	@ (8000bc8 <MX_TIM3_Init+0xe4>)
 8000b18:	4a2c      	ldr	r2, [pc, #176]	@ (8000bcc <MX_TIM3_Init+0xe8>)
 8000b1a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000b1c:	4b2a      	ldr	r3, [pc, #168]	@ (8000bc8 <MX_TIM3_Init+0xe4>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b22:	4b29      	ldr	r3, [pc, #164]	@ (8000bc8 <MX_TIM3_Init+0xe4>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 200;
 8000b28:	4b27      	ldr	r3, [pc, #156]	@ (8000bc8 <MX_TIM3_Init+0xe4>)
 8000b2a:	22c8      	movs	r2, #200	@ 0xc8
 8000b2c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b2e:	4b26      	ldr	r3, [pc, #152]	@ (8000bc8 <MX_TIM3_Init+0xe4>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b34:	4b24      	ldr	r3, [pc, #144]	@ (8000bc8 <MX_TIM3_Init+0xe4>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b3a:	4823      	ldr	r0, [pc, #140]	@ (8000bc8 <MX_TIM3_Init+0xe4>)
 8000b3c:	f006 f9b8 	bl	8006eb0 <HAL_TIM_Base_Init>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000b46:	f000 f981 	bl	8000e4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b50:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b54:	4619      	mov	r1, r3
 8000b56:	481c      	ldr	r0, [pc, #112]	@ (8000bc8 <MX_TIM3_Init+0xe4>)
 8000b58:	f007 fadc 	bl	8008114 <HAL_TIM_ConfigClockSource>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000b62:	f000 f973 	bl	8000e4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b66:	4818      	ldr	r0, [pc, #96]	@ (8000bc8 <MX_TIM3_Init+0xe4>)
 8000b68:	f006 fc56 	bl	8007418 <HAL_TIM_PWM_Init>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000b72:	f000 f96b 	bl	8000e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b76:	2300      	movs	r3, #0
 8000b78:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b7e:	f107 031c 	add.w	r3, r7, #28
 8000b82:	4619      	mov	r1, r3
 8000b84:	4810      	ldr	r0, [pc, #64]	@ (8000bc8 <MX_TIM3_Init+0xe4>)
 8000b86:	f008 f993 	bl	8008eb0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000b90:	f000 f95c 	bl	8000e4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b94:	2360      	movs	r3, #96	@ 0x60
 8000b96:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ba4:	463b      	mov	r3, r7
 8000ba6:	220c      	movs	r2, #12
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4807      	ldr	r0, [pc, #28]	@ (8000bc8 <MX_TIM3_Init+0xe4>)
 8000bac:	f007 f99e 	bl	8007eec <HAL_TIM_PWM_ConfigChannel>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000bb6:	f000 f949 	bl	8000e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000bba:	4803      	ldr	r0, [pc, #12]	@ (8000bc8 <MX_TIM3_Init+0xe4>)
 8000bbc:	f000 fbce 	bl	800135c <HAL_TIM_MspPostInit>

}
 8000bc0:	bf00      	nop
 8000bc2:	3738      	adds	r7, #56	@ 0x38
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	20000564 	.word	0x20000564
 8000bcc:	40000400 	.word	0x40000400

08000bd0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b088      	sub	sp, #32
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bd6:	f107 0310 	add.w	r3, r7, #16
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	605a      	str	r2, [r3, #4]
 8000be0:	609a      	str	r2, [r3, #8]
 8000be2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000be4:	1d3b      	adds	r3, r7, #4
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000bee:	4b1e      	ldr	r3, [pc, #120]	@ (8000c68 <MX_TIM4_Init+0x98>)
 8000bf0:	4a1e      	ldr	r2, [pc, #120]	@ (8000c6c <MX_TIM4_Init+0x9c>)
 8000bf2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 17000-1;
 8000bf4:	4b1c      	ldr	r3, [pc, #112]	@ (8000c68 <MX_TIM4_Init+0x98>)
 8000bf6:	f244 2267 	movw	r2, #16999	@ 0x4267
 8000bfa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bfc:	4b1a      	ldr	r3, [pc, #104]	@ (8000c68 <MX_TIM4_Init+0x98>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8000c02:	4b19      	ldr	r3, [pc, #100]	@ (8000c68 <MX_TIM4_Init+0x98>)
 8000c04:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000c08:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c0a:	4b17      	ldr	r3, [pc, #92]	@ (8000c68 <MX_TIM4_Init+0x98>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c10:	4b15      	ldr	r3, [pc, #84]	@ (8000c68 <MX_TIM4_Init+0x98>)
 8000c12:	2280      	movs	r2, #128	@ 0x80
 8000c14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000c16:	4814      	ldr	r0, [pc, #80]	@ (8000c68 <MX_TIM4_Init+0x98>)
 8000c18:	f006 f94a 	bl	8006eb0 <HAL_TIM_Base_Init>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8000c22:	f000 f913 	bl	8000e4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c2a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000c2c:	f107 0310 	add.w	r3, r7, #16
 8000c30:	4619      	mov	r1, r3
 8000c32:	480d      	ldr	r0, [pc, #52]	@ (8000c68 <MX_TIM4_Init+0x98>)
 8000c34:	f007 fa6e 	bl	8008114 <HAL_TIM_ConfigClockSource>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8000c3e:	f000 f905 	bl	8000e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c42:	2300      	movs	r3, #0
 8000c44:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c46:	2300      	movs	r3, #0
 8000c48:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c4a:	1d3b      	adds	r3, r7, #4
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4806      	ldr	r0, [pc, #24]	@ (8000c68 <MX_TIM4_Init+0x98>)
 8000c50:	f008 f92e 	bl	8008eb0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8000c5a:	f000 f8f7 	bl	8000e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000c5e:	bf00      	nop
 8000c60:	3720      	adds	r7, #32
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	200005b0 	.word	0x200005b0
 8000c6c:	40000800 	.word	0x40000800

08000c70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000c76:	4b1e      	ldr	r3, [pc, #120]	@ (8000cf0 <MX_DMA_Init+0x80>)
 8000c78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c7a:	4a1d      	ldr	r2, [pc, #116]	@ (8000cf0 <MX_DMA_Init+0x80>)
 8000c7c:	f043 0304 	orr.w	r3, r3, #4
 8000c80:	6493      	str	r3, [r2, #72]	@ 0x48
 8000c82:	4b1b      	ldr	r3, [pc, #108]	@ (8000cf0 <MX_DMA_Init+0x80>)
 8000c84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c86:	f003 0304 	and.w	r3, r3, #4
 8000c8a:	607b      	str	r3, [r7, #4]
 8000c8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c8e:	4b18      	ldr	r3, [pc, #96]	@ (8000cf0 <MX_DMA_Init+0x80>)
 8000c90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c92:	4a17      	ldr	r2, [pc, #92]	@ (8000cf0 <MX_DMA_Init+0x80>)
 8000c94:	f043 0301 	orr.w	r3, r3, #1
 8000c98:	6493      	str	r3, [r2, #72]	@ 0x48
 8000c9a:	4b15      	ldr	r3, [pc, #84]	@ (8000cf0 <MX_DMA_Init+0x80>)
 8000c9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	603b      	str	r3, [r7, #0]
 8000ca4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2100      	movs	r1, #0
 8000caa:	200b      	movs	r0, #11
 8000cac:	f002 fe93 	bl	80039d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000cb0:	200b      	movs	r0, #11
 8000cb2:	f002 feaa 	bl	8003a0a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2100      	movs	r1, #0
 8000cba:	200c      	movs	r0, #12
 8000cbc:	f002 fe8b 	bl	80039d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000cc0:	200c      	movs	r0, #12
 8000cc2:	f002 fea2 	bl	8003a0a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2100      	movs	r1, #0
 8000cca:	200d      	movs	r0, #13
 8000ccc:	f002 fe83 	bl	80039d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000cd0:	200d      	movs	r0, #13
 8000cd2:	f002 fe9a 	bl	8003a0a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2100      	movs	r1, #0
 8000cda:	200e      	movs	r0, #14
 8000cdc:	f002 fe7b 	bl	80039d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000ce0:	200e      	movs	r0, #14
 8000ce2:	f002 fe92 	bl	8003a0a <HAL_NVIC_EnableIRQ>

}
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40021000 	.word	0x40021000

08000cf4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08a      	sub	sp, #40	@ 0x28
 8000cf8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfa:	f107 0314 	add.w	r3, r7, #20
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]
 8000d06:	60da      	str	r2, [r3, #12]
 8000d08:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d0a:	4b25      	ldr	r3, [pc, #148]	@ (8000da0 <MX_GPIO_Init+0xac>)
 8000d0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d0e:	4a24      	ldr	r2, [pc, #144]	@ (8000da0 <MX_GPIO_Init+0xac>)
 8000d10:	f043 0320 	orr.w	r3, r3, #32
 8000d14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d16:	4b22      	ldr	r3, [pc, #136]	@ (8000da0 <MX_GPIO_Init+0xac>)
 8000d18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d1a:	f003 0320 	and.w	r3, r3, #32
 8000d1e:	613b      	str	r3, [r7, #16]
 8000d20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d22:	4b1f      	ldr	r3, [pc, #124]	@ (8000da0 <MX_GPIO_Init+0xac>)
 8000d24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d26:	4a1e      	ldr	r2, [pc, #120]	@ (8000da0 <MX_GPIO_Init+0xac>)
 8000d28:	f043 0304 	orr.w	r3, r3, #4
 8000d2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d2e:	4b1c      	ldr	r3, [pc, #112]	@ (8000da0 <MX_GPIO_Init+0xac>)
 8000d30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d32:	f003 0304 	and.w	r3, r3, #4
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3a:	4b19      	ldr	r3, [pc, #100]	@ (8000da0 <MX_GPIO_Init+0xac>)
 8000d3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d3e:	4a18      	ldr	r2, [pc, #96]	@ (8000da0 <MX_GPIO_Init+0xac>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d46:	4b16      	ldr	r3, [pc, #88]	@ (8000da0 <MX_GPIO_Init+0xac>)
 8000d48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	60bb      	str	r3, [r7, #8]
 8000d50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d52:	4b13      	ldr	r3, [pc, #76]	@ (8000da0 <MX_GPIO_Init+0xac>)
 8000d54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d56:	4a12      	ldr	r2, [pc, #72]	@ (8000da0 <MX_GPIO_Init+0xac>)
 8000d58:	f043 0302 	orr.w	r3, r3, #2
 8000d5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d5e:	4b10      	ldr	r3, [pc, #64]	@ (8000da0 <MX_GPIO_Init+0xac>)
 8000d60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d62:	f003 0302 	and.w	r3, r3, #2
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d74:	f003 fa58 	bl	8004228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d86:	2300      	movs	r3, #0
 8000d88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8a:	f107 0314 	add.w	r3, r7, #20
 8000d8e:	4619      	mov	r1, r3
 8000d90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d94:	f003 f8c6 	bl	8003f24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d98:	bf00      	nop
 8000d9a:	3728      	adds	r7, #40	@ 0x28
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40021000 	.word	0x40021000

08000da4 <HAL_ADC_ConvHalfCpltCallback>:



//delay
 void HAL_ADC_ConvHalfCpltCallback	(ADC_HandleTypeDef *hadc)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]


#if TOWHILE

	//抓数据进while
	if (WHILE_FLAG==0) {
 8000dac:	4b0f      	ldr	r3, [pc, #60]	@ (8000dec <HAL_ADC_ConvHalfCpltCallback+0x48>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d114      	bne.n	8000dde <HAL_ADC_ConvHalfCpltCallback+0x3a>
		for (size_t i = 0; i < BUFFER_SIZE_HALF; i++)
 8000db4:	2300      	movs	r3, #0
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	e00a      	b.n	8000dd0 <HAL_ADC_ConvHalfCpltCallback+0x2c>
		{		WHILE_BUFFER[i] = ADC_BUFFER[i];	}
 8000dba:	4a0d      	ldr	r2, [pc, #52]	@ (8000df0 <HAL_ADC_ConvHalfCpltCallback+0x4c>)
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000dc2:	490c      	ldr	r1, [pc, #48]	@ (8000df4 <HAL_ADC_ConvHalfCpltCallback+0x50>)
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (size_t i = 0; i < BUFFER_SIZE_HALF; i++)
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000dd6:	d3f0      	bcc.n	8000dba <HAL_ADC_ConvHalfCpltCallback+0x16>
		WHILE_FLAG=1;
 8000dd8:	4b04      	ldr	r3, [pc, #16]	@ (8000dec <HAL_ADC_ConvHalfCpltCallback+0x48>)
 8000dda:	2201      	movs	r2, #1
 8000ddc:	601a      	str	r2, [r3, #0]


#endif


}
 8000dde:	bf00      	nop
 8000de0:	3714      	adds	r7, #20
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	20002694 	.word	0x20002694
 8000df0:	20000660 	.word	0x20000660
 8000df4:	20001660 	.word	0x20001660

08000df8 <HAL_ADC_ConvCpltCallback>:
 void HAL_ADC_ConvCpltCallback		(ADC_HandleTypeDef *hadc)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
#endif

#if TOWHILE

//	抓数据进while
	if (WHILE_FLAG==1) {
 8000e00:	4b0f      	ldr	r3, [pc, #60]	@ (8000e40 <HAL_ADC_ConvCpltCallback+0x48>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d115      	bne.n	8000e34 <HAL_ADC_ConvCpltCallback+0x3c>
		for (size_t i = BUFFER_SIZE_HALF; i < BUFFER_SIZE; i++)
 8000e08:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	e00a      	b.n	8000e26 <HAL_ADC_ConvCpltCallback+0x2e>
		{		WHILE_BUFFER[i] = ADC_BUFFER[i];	}
 8000e10:	4a0c      	ldr	r2, [pc, #48]	@ (8000e44 <HAL_ADC_ConvCpltCallback+0x4c>)
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e18:	490b      	ldr	r1, [pc, #44]	@ (8000e48 <HAL_ADC_ConvCpltCallback+0x50>)
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (size_t i = BUFFER_SIZE_HALF; i < BUFFER_SIZE; i++)
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	3301      	adds	r3, #1
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e2c:	d3f0      	bcc.n	8000e10 <HAL_ADC_ConvCpltCallback+0x18>
		WHILE_FLAG=2;
 8000e2e:	4b04      	ldr	r3, [pc, #16]	@ (8000e40 <HAL_ADC_ConvCpltCallback+0x48>)
 8000e30:	2202      	movs	r2, #2
 8000e32:	601a      	str	r2, [r3, #0]
	}

#endif
}
 8000e34:	bf00      	nop
 8000e36:	3714      	adds	r7, #20
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	20002694 	.word	0x20002694
 8000e44:	20000660 	.word	0x20000660
 8000e48:	20001660 	.word	0x20001660

08000e4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e50:	b672      	cpsid	i
}
 8000e52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e54:	bf00      	nop
 8000e56:	e7fd      	b.n	8000e54 <Error_Handler+0x8>

08000e58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e5e:	4b14      	ldr	r3, [pc, #80]	@ (8000eb0 <HAL_MspInit+0x58>)
 8000e60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e62:	4a13      	ldr	r2, [pc, #76]	@ (8000eb0 <HAL_MspInit+0x58>)
 8000e64:	f043 0301 	orr.w	r3, r3, #1
 8000e68:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e6a:	4b11      	ldr	r3, [pc, #68]	@ (8000eb0 <HAL_MspInit+0x58>)
 8000e6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e6e:	f003 0301 	and.w	r3, r3, #1
 8000e72:	607b      	str	r3, [r7, #4]
 8000e74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e76:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb0 <HAL_MspInit+0x58>)
 8000e78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e7a:	4a0d      	ldr	r2, [pc, #52]	@ (8000eb0 <HAL_MspInit+0x58>)
 8000e7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e80:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e82:	4b0b      	ldr	r3, [pc, #44]	@ (8000eb0 <HAL_MspInit+0x58>)
 8000e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e8a:	603b      	str	r3, [r7, #0]
 8000e8c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Tune the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_VREFBUF_TrimmingConfig(0);
 8000e8e:	2000      	movs	r0, #0
 8000e90:	f000 fe80 	bl	8001b94 <HAL_SYSCFG_VREFBUF_TrimmingConfig>

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 8000e94:	2000      	movs	r0, #0
 8000e96:	f000 fe55 	bl	8001b44 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 8000e9a:	f000 fe8f 	bl	8001bbc <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	f000 fe64 	bl	8001b6c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000ea4:	f005 f8b0 	bl	8006008 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ea8:	bf00      	nop
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40021000 	.word	0x40021000

08000eb4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b0a0      	sub	sp, #128	@ 0x80
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ecc:	f107 0318 	add.w	r3, r7, #24
 8000ed0:	2254      	movs	r2, #84	@ 0x54
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f00c fe43 	bl	800db60 <memset>
  if(hadc->Instance==ADC1)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000ee2:	d158      	bne.n	8000f96 <HAL_ADC_MspInit+0xe2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000ee4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ee8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000eea:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000eee:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ef0:	f107 0318 	add.w	r3, r7, #24
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f005 fd8d 	bl	8006a14 <HAL_RCCEx_PeriphCLKConfig>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000f00:	f7ff ffa4 	bl	8000e4c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000f04:	4b87      	ldr	r3, [pc, #540]	@ (8001124 <HAL_ADC_MspInit+0x270>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	4a86      	ldr	r2, [pc, #536]	@ (8001124 <HAL_ADC_MspInit+0x270>)
 8000f0c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000f0e:	4b85      	ldr	r3, [pc, #532]	@ (8001124 <HAL_ADC_MspInit+0x270>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d10b      	bne.n	8000f2e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000f16:	4b84      	ldr	r3, [pc, #528]	@ (8001128 <HAL_ADC_MspInit+0x274>)
 8000f18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f1a:	4a83      	ldr	r2, [pc, #524]	@ (8001128 <HAL_ADC_MspInit+0x274>)
 8000f1c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000f20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f22:	4b81      	ldr	r3, [pc, #516]	@ (8001128 <HAL_ADC_MspInit+0x274>)
 8000f24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f2a:	617b      	str	r3, [r7, #20]
 8000f2c:	697b      	ldr	r3, [r7, #20]
    }

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 8000f2e:	4b7f      	ldr	r3, [pc, #508]	@ (800112c <HAL_ADC_MspInit+0x278>)
 8000f30:	4a7f      	ldr	r2, [pc, #508]	@ (8001130 <HAL_ADC_MspInit+0x27c>)
 8000f32:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000f34:	4b7d      	ldr	r3, [pc, #500]	@ (800112c <HAL_ADC_MspInit+0x278>)
 8000f36:	2205      	movs	r2, #5
 8000f38:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f3a:	4b7c      	ldr	r3, [pc, #496]	@ (800112c <HAL_ADC_MspInit+0x278>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f40:	4b7a      	ldr	r3, [pc, #488]	@ (800112c <HAL_ADC_MspInit+0x278>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f46:	4b79      	ldr	r3, [pc, #484]	@ (800112c <HAL_ADC_MspInit+0x278>)
 8000f48:	2280      	movs	r2, #128	@ 0x80
 8000f4a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f4c:	4b77      	ldr	r3, [pc, #476]	@ (800112c <HAL_ADC_MspInit+0x278>)
 8000f4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f52:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f54:	4b75      	ldr	r3, [pc, #468]	@ (800112c <HAL_ADC_MspInit+0x278>)
 8000f56:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f5a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f5c:	4b73      	ldr	r3, [pc, #460]	@ (800112c <HAL_ADC_MspInit+0x278>)
 8000f5e:	2220      	movs	r2, #32
 8000f60:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f62:	4b72      	ldr	r3, [pc, #456]	@ (800112c <HAL_ADC_MspInit+0x278>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f68:	4870      	ldr	r0, [pc, #448]	@ (800112c <HAL_ADC_MspInit+0x278>)
 8000f6a:	f002 fd69 	bl	8003a40 <HAL_DMA_Init>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8000f74:	f7ff ff6a 	bl	8000e4c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	4a6c      	ldr	r2, [pc, #432]	@ (800112c <HAL_ADC_MspInit+0x278>)
 8000f7c:	655a      	str	r2, [r3, #84]	@ 0x54
 8000f7e:	4a6b      	ldr	r2, [pc, #428]	@ (800112c <HAL_ADC_MspInit+0x278>)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000f84:	2200      	movs	r2, #0
 8000f86:	2100      	movs	r1, #0
 8000f88:	2012      	movs	r0, #18
 8000f8a:	f002 fd24 	bl	80039d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000f8e:	2012      	movs	r0, #18
 8000f90:	f002 fd3b 	bl	8003a0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000f94:	e0c2      	b.n	800111c <HAL_ADC_MspInit+0x268>
  else if(hadc->Instance==ADC2)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a66      	ldr	r2, [pc, #408]	@ (8001134 <HAL_ADC_MspInit+0x280>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d171      	bne.n	8001084 <HAL_ADC_MspInit+0x1d0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000fa0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000fa4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000fa6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000faa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fac:	f107 0318 	add.w	r3, r7, #24
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f005 fd2f 	bl	8006a14 <HAL_RCCEx_PeriphCLKConfig>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <HAL_ADC_MspInit+0x10c>
      Error_Handler();
 8000fbc:	f7ff ff46 	bl	8000e4c <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000fc0:	4b58      	ldr	r3, [pc, #352]	@ (8001124 <HAL_ADC_MspInit+0x270>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	4a57      	ldr	r2, [pc, #348]	@ (8001124 <HAL_ADC_MspInit+0x270>)
 8000fc8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000fca:	4b56      	ldr	r3, [pc, #344]	@ (8001124 <HAL_ADC_MspInit+0x270>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d10b      	bne.n	8000fea <HAL_ADC_MspInit+0x136>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000fd2:	4b55      	ldr	r3, [pc, #340]	@ (8001128 <HAL_ADC_MspInit+0x274>)
 8000fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fd6:	4a54      	ldr	r2, [pc, #336]	@ (8001128 <HAL_ADC_MspInit+0x274>)
 8000fd8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000fdc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fde:	4b52      	ldr	r3, [pc, #328]	@ (8001128 <HAL_ADC_MspInit+0x274>)
 8000fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fe2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000fe6:	613b      	str	r3, [r7, #16]
 8000fe8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fea:	4b4f      	ldr	r3, [pc, #316]	@ (8001128 <HAL_ADC_MspInit+0x274>)
 8000fec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fee:	4a4e      	ldr	r2, [pc, #312]	@ (8001128 <HAL_ADC_MspInit+0x274>)
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ff6:	4b4c      	ldr	r3, [pc, #304]	@ (8001128 <HAL_ADC_MspInit+0x274>)
 8000ff8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001002:	2302      	movs	r3, #2
 8001004:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001006:	2303      	movs	r3, #3
 8001008:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001012:	4619      	mov	r1, r3
 8001014:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001018:	f002 ff84 	bl	8003f24 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel3;
 800101c:	4b46      	ldr	r3, [pc, #280]	@ (8001138 <HAL_ADC_MspInit+0x284>)
 800101e:	4a47      	ldr	r2, [pc, #284]	@ (800113c <HAL_ADC_MspInit+0x288>)
 8001020:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8001022:	4b45      	ldr	r3, [pc, #276]	@ (8001138 <HAL_ADC_MspInit+0x284>)
 8001024:	2224      	movs	r2, #36	@ 0x24
 8001026:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001028:	4b43      	ldr	r3, [pc, #268]	@ (8001138 <HAL_ADC_MspInit+0x284>)
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800102e:	4b42      	ldr	r3, [pc, #264]	@ (8001138 <HAL_ADC_MspInit+0x284>)
 8001030:	2200      	movs	r2, #0
 8001032:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001034:	4b40      	ldr	r3, [pc, #256]	@ (8001138 <HAL_ADC_MspInit+0x284>)
 8001036:	2280      	movs	r2, #128	@ 0x80
 8001038:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800103a:	4b3f      	ldr	r3, [pc, #252]	@ (8001138 <HAL_ADC_MspInit+0x284>)
 800103c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001040:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001042:	4b3d      	ldr	r3, [pc, #244]	@ (8001138 <HAL_ADC_MspInit+0x284>)
 8001044:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001048:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800104a:	4b3b      	ldr	r3, [pc, #236]	@ (8001138 <HAL_ADC_MspInit+0x284>)
 800104c:	2220      	movs	r2, #32
 800104e:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001050:	4b39      	ldr	r3, [pc, #228]	@ (8001138 <HAL_ADC_MspInit+0x284>)
 8001052:	2200      	movs	r2, #0
 8001054:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001056:	4838      	ldr	r0, [pc, #224]	@ (8001138 <HAL_ADC_MspInit+0x284>)
 8001058:	f002 fcf2 	bl	8003a40 <HAL_DMA_Init>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <HAL_ADC_MspInit+0x1b2>
      Error_Handler();
 8001062:	f7ff fef3 	bl	8000e4c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a33      	ldr	r2, [pc, #204]	@ (8001138 <HAL_ADC_MspInit+0x284>)
 800106a:	655a      	str	r2, [r3, #84]	@ 0x54
 800106c:	4a32      	ldr	r2, [pc, #200]	@ (8001138 <HAL_ADC_MspInit+0x284>)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001072:	2200      	movs	r2, #0
 8001074:	2100      	movs	r1, #0
 8001076:	2012      	movs	r0, #18
 8001078:	f002 fcad 	bl	80039d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800107c:	2012      	movs	r0, #18
 800107e:	f002 fcc4 	bl	8003a0a <HAL_NVIC_EnableIRQ>
}
 8001082:	e04b      	b.n	800111c <HAL_ADC_MspInit+0x268>
  else if(hadc->Instance==ADC3)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a2d      	ldr	r2, [pc, #180]	@ (8001140 <HAL_ADC_MspInit+0x28c>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d146      	bne.n	800111c <HAL_ADC_MspInit+0x268>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800108e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001092:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001094:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001098:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800109a:	f107 0318 	add.w	r3, r7, #24
 800109e:	4618      	mov	r0, r3
 80010a0:	f005 fcb8 	bl	8006a14 <HAL_RCCEx_PeriphCLKConfig>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <HAL_ADC_MspInit+0x1fa>
      Error_Handler();
 80010aa:	f7ff fecf 	bl	8000e4c <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 80010ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001128 <HAL_ADC_MspInit+0x274>)
 80010b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b2:	4a1d      	ldr	r2, [pc, #116]	@ (8001128 <HAL_ADC_MspInit+0x274>)
 80010b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001128 <HAL_ADC_MspInit+0x274>)
 80010bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	68bb      	ldr	r3, [r7, #8]
    hdma_adc3.Instance = DMA1_Channel4;
 80010c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001144 <HAL_ADC_MspInit+0x290>)
 80010c8:	4a1f      	ldr	r2, [pc, #124]	@ (8001148 <HAL_ADC_MspInit+0x294>)
 80010ca:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80010cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001144 <HAL_ADC_MspInit+0x290>)
 80010ce:	2225      	movs	r2, #37	@ 0x25
 80010d0:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001144 <HAL_ADC_MspInit+0x290>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80010d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001144 <HAL_ADC_MspInit+0x290>)
 80010da:	2200      	movs	r2, #0
 80010dc:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80010de:	4b19      	ldr	r3, [pc, #100]	@ (8001144 <HAL_ADC_MspInit+0x290>)
 80010e0:	2280      	movs	r2, #128	@ 0x80
 80010e2:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80010e4:	4b17      	ldr	r3, [pc, #92]	@ (8001144 <HAL_ADC_MspInit+0x290>)
 80010e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010ea:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80010ec:	4b15      	ldr	r3, [pc, #84]	@ (8001144 <HAL_ADC_MspInit+0x290>)
 80010ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80010f2:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 80010f4:	4b13      	ldr	r3, [pc, #76]	@ (8001144 <HAL_ADC_MspInit+0x290>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80010fa:	4b12      	ldr	r3, [pc, #72]	@ (8001144 <HAL_ADC_MspInit+0x290>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001100:	4810      	ldr	r0, [pc, #64]	@ (8001144 <HAL_ADC_MspInit+0x290>)
 8001102:	f002 fc9d 	bl	8003a40 <HAL_DMA_Init>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <HAL_ADC_MspInit+0x25c>
      Error_Handler();
 800110c:	f7ff fe9e 	bl	8000e4c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4a0c      	ldr	r2, [pc, #48]	@ (8001144 <HAL_ADC_MspInit+0x290>)
 8001114:	655a      	str	r2, [r3, #84]	@ 0x54
 8001116:	4a0b      	ldr	r2, [pc, #44]	@ (8001144 <HAL_ADC_MspInit+0x290>)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6293      	str	r3, [r2, #40]	@ 0x28
}
 800111c:	bf00      	nop
 800111e:	3780      	adds	r7, #128	@ 0x80
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20002698 	.word	0x20002698
 8001128:	40021000 	.word	0x40021000
 800112c:	20000334 	.word	0x20000334
 8001130:	4002001c 	.word	0x4002001c
 8001134:	50000100 	.word	0x50000100
 8001138:	20000394 	.word	0x20000394
 800113c:	40020030 	.word	0x40020030
 8001140:	50000400 	.word	0x50000400
 8001144:	200003f4 	.word	0x200003f4
 8001148:	40020044 	.word	0x40020044

0800114c <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08a      	sub	sp, #40	@ 0x28
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a1f      	ldr	r2, [pc, #124]	@ (80011e8 <HAL_OPAMP_MspInit+0x9c>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d119      	bne.n	80011a2 <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800116e:	4b1f      	ldr	r3, [pc, #124]	@ (80011ec <HAL_OPAMP_MspInit+0xa0>)
 8001170:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001172:	4a1e      	ldr	r2, [pc, #120]	@ (80011ec <HAL_OPAMP_MspInit+0xa0>)
 8001174:	f043 0301 	orr.w	r3, r3, #1
 8001178:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800117a:	4b1c      	ldr	r3, [pc, #112]	@ (80011ec <HAL_OPAMP_MspInit+0xa0>)
 800117c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	613b      	str	r3, [r7, #16]
 8001184:	693b      	ldr	r3, [r7, #16]
    /**OPAMP1 GPIO Configuration
    PA1     ------> OPAMP1_VINP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001186:	2302      	movs	r3, #2
 8001188:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800118a:	2303      	movs	r3, #3
 800118c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001192:	f107 0314 	add.w	r3, r7, #20
 8001196:	4619      	mov	r1, r3
 8001198:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800119c:	f002 fec2 	bl	8003f24 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }

}
 80011a0:	e01d      	b.n	80011de <HAL_OPAMP_MspInit+0x92>
  else if(hopamp->Instance==OPAMP3)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a12      	ldr	r2, [pc, #72]	@ (80011f0 <HAL_OPAMP_MspInit+0xa4>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d118      	bne.n	80011de <HAL_OPAMP_MspInit+0x92>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ac:	4b0f      	ldr	r3, [pc, #60]	@ (80011ec <HAL_OPAMP_MspInit+0xa0>)
 80011ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b0:	4a0e      	ldr	r2, [pc, #56]	@ (80011ec <HAL_OPAMP_MspInit+0xa0>)
 80011b2:	f043 0301 	orr.w	r3, r3, #1
 80011b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011b8:	4b0c      	ldr	r3, [pc, #48]	@ (80011ec <HAL_OPAMP_MspInit+0xa0>)
 80011ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011bc:	f003 0301 	and.w	r3, r3, #1
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80011c4:	2302      	movs	r3, #2
 80011c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011c8:	2303      	movs	r3, #3
 80011ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d0:	f107 0314 	add.w	r3, r7, #20
 80011d4:	4619      	mov	r1, r3
 80011d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011da:	f002 fea3 	bl	8003f24 <HAL_GPIO_Init>
}
 80011de:	bf00      	nop
 80011e0:	3728      	adds	r7, #40	@ 0x28
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40010300 	.word	0x40010300
 80011ec:	40021000 	.word	0x40021000
 80011f0:	40010308 	.word	0x40010308

080011f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08c      	sub	sp, #48	@ 0x30
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fc:	f107 031c 	add.w	r3, r7, #28
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
 800120a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a4c      	ldr	r2, [pc, #304]	@ (8001344 <HAL_TIM_Base_MspInit+0x150>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d10c      	bne.n	8001230 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001216:	4b4c      	ldr	r3, [pc, #304]	@ (8001348 <HAL_TIM_Base_MspInit+0x154>)
 8001218:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800121a:	4a4b      	ldr	r2, [pc, #300]	@ (8001348 <HAL_TIM_Base_MspInit+0x154>)
 800121c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001220:	6613      	str	r3, [r2, #96]	@ 0x60
 8001222:	4b49      	ldr	r3, [pc, #292]	@ (8001348 <HAL_TIM_Base_MspInit+0x154>)
 8001224:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001226:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800122a:	61bb      	str	r3, [r7, #24]
 800122c:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800122e:	e084      	b.n	800133a <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM2)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001238:	d129      	bne.n	800128e <HAL_TIM_Base_MspInit+0x9a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800123a:	4b43      	ldr	r3, [pc, #268]	@ (8001348 <HAL_TIM_Base_MspInit+0x154>)
 800123c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800123e:	4a42      	ldr	r2, [pc, #264]	@ (8001348 <HAL_TIM_Base_MspInit+0x154>)
 8001240:	f043 0301 	orr.w	r3, r3, #1
 8001244:	6593      	str	r3, [r2, #88]	@ 0x58
 8001246:	4b40      	ldr	r3, [pc, #256]	@ (8001348 <HAL_TIM_Base_MspInit+0x154>)
 8001248:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	617b      	str	r3, [r7, #20]
 8001250:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001252:	4b3d      	ldr	r3, [pc, #244]	@ (8001348 <HAL_TIM_Base_MspInit+0x154>)
 8001254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001256:	4a3c      	ldr	r2, [pc, #240]	@ (8001348 <HAL_TIM_Base_MspInit+0x154>)
 8001258:	f043 0301 	orr.w	r3, r3, #1
 800125c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800125e:	4b3a      	ldr	r3, [pc, #232]	@ (8001348 <HAL_TIM_Base_MspInit+0x154>)
 8001260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	613b      	str	r3, [r7, #16]
 8001268:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800126a:	2301      	movs	r3, #1
 800126c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126e:	2302      	movs	r3, #2
 8001270:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001276:	2300      	movs	r3, #0
 8001278:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM2;
 800127a:	230e      	movs	r3, #14
 800127c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127e:	f107 031c 	add.w	r3, r7, #28
 8001282:	4619      	mov	r1, r3
 8001284:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001288:	f002 fe4c 	bl	8003f24 <HAL_GPIO_Init>
}
 800128c:	e055      	b.n	800133a <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM3)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a2e      	ldr	r2, [pc, #184]	@ (800134c <HAL_TIM_Base_MspInit+0x158>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d137      	bne.n	8001308 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001298:	4b2b      	ldr	r3, [pc, #172]	@ (8001348 <HAL_TIM_Base_MspInit+0x154>)
 800129a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800129c:	4a2a      	ldr	r2, [pc, #168]	@ (8001348 <HAL_TIM_Base_MspInit+0x154>)
 800129e:	f043 0302 	orr.w	r3, r3, #2
 80012a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80012a4:	4b28      	ldr	r3, [pc, #160]	@ (8001348 <HAL_TIM_Base_MspInit+0x154>)
 80012a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012a8:	f003 0302 	and.w	r3, r3, #2
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	68fb      	ldr	r3, [r7, #12]
    hdma_tim3_ch4.Instance = DMA1_Channel1;
 80012b0:	4b27      	ldr	r3, [pc, #156]	@ (8001350 <HAL_TIM_Base_MspInit+0x15c>)
 80012b2:	4a28      	ldr	r2, [pc, #160]	@ (8001354 <HAL_TIM_Base_MspInit+0x160>)
 80012b4:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4.Init.Request = DMA_REQUEST_TIM3_CH4;
 80012b6:	4b26      	ldr	r3, [pc, #152]	@ (8001350 <HAL_TIM_Base_MspInit+0x15c>)
 80012b8:	2240      	movs	r2, #64	@ 0x40
 80012ba:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012bc:	4b24      	ldr	r3, [pc, #144]	@ (8001350 <HAL_TIM_Base_MspInit+0x15c>)
 80012be:	2210      	movs	r2, #16
 80012c0:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 80012c2:	4b23      	ldr	r3, [pc, #140]	@ (8001350 <HAL_TIM_Base_MspInit+0x15c>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4.Init.MemInc = DMA_MINC_ENABLE;
 80012c8:	4b21      	ldr	r3, [pc, #132]	@ (8001350 <HAL_TIM_Base_MspInit+0x15c>)
 80012ca:	2280      	movs	r2, #128	@ 0x80
 80012cc:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012ce:	4b20      	ldr	r3, [pc, #128]	@ (8001350 <HAL_TIM_Base_MspInit+0x15c>)
 80012d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012d4:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001350 <HAL_TIM_Base_MspInit+0x15c>)
 80012d8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012dc:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4.Init.Mode = DMA_NORMAL;
 80012de:	4b1c      	ldr	r3, [pc, #112]	@ (8001350 <HAL_TIM_Base_MspInit+0x15c>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4.Init.Priority = DMA_PRIORITY_LOW;
 80012e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001350 <HAL_TIM_Base_MspInit+0x15c>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch4) != HAL_OK)
 80012ea:	4819      	ldr	r0, [pc, #100]	@ (8001350 <HAL_TIM_Base_MspInit+0x15c>)
 80012ec:	f002 fba8 	bl	8003a40 <HAL_DMA_Init>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <HAL_TIM_Base_MspInit+0x106>
      Error_Handler();
 80012f6:	f7ff fda9 	bl	8000e4c <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a14      	ldr	r2, [pc, #80]	@ (8001350 <HAL_TIM_Base_MspInit+0x15c>)
 80012fe:	631a      	str	r2, [r3, #48]	@ 0x30
 8001300:	4a13      	ldr	r2, [pc, #76]	@ (8001350 <HAL_TIM_Base_MspInit+0x15c>)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8001306:	e018      	b.n	800133a <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM4)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a12      	ldr	r2, [pc, #72]	@ (8001358 <HAL_TIM_Base_MspInit+0x164>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d113      	bne.n	800133a <HAL_TIM_Base_MspInit+0x146>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001312:	4b0d      	ldr	r3, [pc, #52]	@ (8001348 <HAL_TIM_Base_MspInit+0x154>)
 8001314:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001316:	4a0c      	ldr	r2, [pc, #48]	@ (8001348 <HAL_TIM_Base_MspInit+0x154>)
 8001318:	f043 0304 	orr.w	r3, r3, #4
 800131c:	6593      	str	r3, [r2, #88]	@ 0x58
 800131e:	4b0a      	ldr	r3, [pc, #40]	@ (8001348 <HAL_TIM_Base_MspInit+0x154>)
 8001320:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001322:	f003 0304 	and.w	r3, r3, #4
 8001326:	60bb      	str	r3, [r7, #8]
 8001328:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800132a:	2200      	movs	r2, #0
 800132c:	2100      	movs	r1, #0
 800132e:	201e      	movs	r0, #30
 8001330:	f002 fb51 	bl	80039d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001334:	201e      	movs	r0, #30
 8001336:	f002 fb68 	bl	8003a0a <HAL_NVIC_EnableIRQ>
}
 800133a:	bf00      	nop
 800133c:	3730      	adds	r7, #48	@ 0x30
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40012c00 	.word	0x40012c00
 8001348:	40021000 	.word	0x40021000
 800134c:	40000400 	.word	0x40000400
 8001350:	200005fc 	.word	0x200005fc
 8001354:	40020008 	.word	0x40020008
 8001358:	40000800 	.word	0x40000800

0800135c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b08a      	sub	sp, #40	@ 0x28
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001364:	f107 0314 	add.w	r3, r7, #20
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
 8001372:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a33      	ldr	r2, [pc, #204]	@ (8001448 <HAL_TIM_MspPostInit+0xec>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d11c      	bne.n	80013b8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800137e:	4b33      	ldr	r3, [pc, #204]	@ (800144c <HAL_TIM_MspPostInit+0xf0>)
 8001380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001382:	4a32      	ldr	r2, [pc, #200]	@ (800144c <HAL_TIM_MspPostInit+0xf0>)
 8001384:	f043 0304 	orr.w	r3, r3, #4
 8001388:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800138a:	4b30      	ldr	r3, [pc, #192]	@ (800144c <HAL_TIM_MspPostInit+0xf0>)
 800138c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800138e:	f003 0304 	and.w	r3, r3, #4
 8001392:	613b      	str	r3, [r7, #16]
 8001394:	693b      	ldr	r3, [r7, #16]
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001396:	230f      	movs	r3, #15
 8001398:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139a:	2302      	movs	r3, #2
 800139c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a2:	2303      	movs	r3, #3
 80013a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80013a6:	2302      	movs	r3, #2
 80013a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013aa:	f107 0314 	add.w	r3, r7, #20
 80013ae:	4619      	mov	r1, r3
 80013b0:	4827      	ldr	r0, [pc, #156]	@ (8001450 <HAL_TIM_MspPostInit+0xf4>)
 80013b2:	f002 fdb7 	bl	8003f24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80013b6:	e043      	b.n	8001440 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM2)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80013c0:	d11d      	bne.n	80013fe <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c2:	4b22      	ldr	r3, [pc, #136]	@ (800144c <HAL_TIM_MspPostInit+0xf0>)
 80013c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c6:	4a21      	ldr	r2, [pc, #132]	@ (800144c <HAL_TIM_MspPostInit+0xf0>)
 80013c8:	f043 0302 	orr.w	r3, r3, #2
 80013cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013ce:	4b1f      	ldr	r3, [pc, #124]	@ (800144c <HAL_TIM_MspPostInit+0xf0>)
 80013d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80013da:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80013de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e0:	2302      	movs	r3, #2
 80013e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e8:	2300      	movs	r3, #0
 80013ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80013ec:	2301      	movs	r3, #1
 80013ee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013f0:	f107 0314 	add.w	r3, r7, #20
 80013f4:	4619      	mov	r1, r3
 80013f6:	4817      	ldr	r0, [pc, #92]	@ (8001454 <HAL_TIM_MspPostInit+0xf8>)
 80013f8:	f002 fd94 	bl	8003f24 <HAL_GPIO_Init>
}
 80013fc:	e020      	b.n	8001440 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a15      	ldr	r2, [pc, #84]	@ (8001458 <HAL_TIM_MspPostInit+0xfc>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d11b      	bne.n	8001440 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001408:	4b10      	ldr	r3, [pc, #64]	@ (800144c <HAL_TIM_MspPostInit+0xf0>)
 800140a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800140c:	4a0f      	ldr	r2, [pc, #60]	@ (800144c <HAL_TIM_MspPostInit+0xf0>)
 800140e:	f043 0302 	orr.w	r3, r3, #2
 8001412:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001414:	4b0d      	ldr	r3, [pc, #52]	@ (800144c <HAL_TIM_MspPostInit+0xf0>)
 8001416:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001418:	f003 0302 	and.w	r3, r3, #2
 800141c:	60bb      	str	r3, [r7, #8]
 800141e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001420:	2380      	movs	r3, #128	@ 0x80
 8001422:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001424:	2302      	movs	r3, #2
 8001426:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142c:	2300      	movs	r3, #0
 800142e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM3;
 8001430:	230a      	movs	r3, #10
 8001432:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001434:	f107 0314 	add.w	r3, r7, #20
 8001438:	4619      	mov	r1, r3
 800143a:	4806      	ldr	r0, [pc, #24]	@ (8001454 <HAL_TIM_MspPostInit+0xf8>)
 800143c:	f002 fd72 	bl	8003f24 <HAL_GPIO_Init>
}
 8001440:	bf00      	nop
 8001442:	3728      	adds	r7, #40	@ 0x28
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40012c00 	.word	0x40012c00
 800144c:	40021000 	.word	0x40021000
 8001450:	48000800 	.word	0x48000800
 8001454:	48000400 	.word	0x48000400
 8001458:	40000400 	.word	0x40000400

0800145c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001460:	bf00      	nop
 8001462:	e7fd      	b.n	8001460 <NMI_Handler+0x4>

08001464 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001468:	bf00      	nop
 800146a:	e7fd      	b.n	8001468 <HardFault_Handler+0x4>

0800146c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001470:	bf00      	nop
 8001472:	e7fd      	b.n	8001470 <MemManage_Handler+0x4>

08001474 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001478:	bf00      	nop
 800147a:	e7fd      	b.n	8001478 <BusFault_Handler+0x4>

0800147c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001480:	bf00      	nop
 8001482:	e7fd      	b.n	8001480 <UsageFault_Handler+0x4>

08001484 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014b2:	f000 fb07 	bl	8001ac4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
	...

080014bc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4);
 80014c0:	4802      	ldr	r0, [pc, #8]	@ (80014cc <DMA1_Channel1_IRQHandler+0x10>)
 80014c2:	f002 fbe0 	bl	8003c86 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	200005fc 	.word	0x200005fc

080014d0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80014d4:	4802      	ldr	r0, [pc, #8]	@ (80014e0 <DMA1_Channel2_IRQHandler+0x10>)
 80014d6:	f002 fbd6 	bl	8003c86 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20000334 	.word	0x20000334

080014e4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80014e8:	4802      	ldr	r0, [pc, #8]	@ (80014f4 <DMA1_Channel3_IRQHandler+0x10>)
 80014ea:	f002 fbcc 	bl	8003c86 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000394 	.word	0x20000394

080014f8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80014fc:	4802      	ldr	r0, [pc, #8]	@ (8001508 <DMA1_Channel4_IRQHandler+0x10>)
 80014fe:	f002 fbc2 	bl	8003c86 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	200003f4 	.word	0x200003f4

0800150c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001510:	4803      	ldr	r0, [pc, #12]	@ (8001520 <ADC1_2_IRQHandler+0x14>)
 8001512:	f001 f847 	bl	80025a4 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001516:	4803      	ldr	r0, [pc, #12]	@ (8001524 <ADC1_2_IRQHandler+0x18>)
 8001518:	f001 f844 	bl	80025a4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800151c:	bf00      	nop
 800151e:	bd80      	pop	{r7, pc}
 8001520:	200001f0 	.word	0x200001f0
 8001524:	2000025c 	.word	0x2000025c

08001528 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800152c:	4802      	ldr	r0, [pc, #8]	@ (8001538 <USB_LP_IRQHandler+0x10>)
 800152e:	f003 f884 	bl	800463a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	20005f08 	.word	0x20005f08

0800153c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	USER_CounterTicks= TIM2->CNT;
 8001540:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001546:	4a05      	ldr	r2, [pc, #20]	@ (800155c <TIM4_IRQHandler+0x20>)
 8001548:	6013      	str	r3, [r2, #0]
  	TIM2->CNT=0;
 800154a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800154e:	2200      	movs	r2, #0
 8001550:	625a      	str	r2, [r3, #36]	@ 0x24
//	  sprintf(&CDC_BUFFER,"FRRQ: %d \r\n",USER_CounterTicks);
//	  CDC_Transmit_FS(&CDC_BUFFER, 50);

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001552:	4803      	ldr	r0, [pc, #12]	@ (8001560 <TIM4_IRQHandler+0x24>)
 8001554:	f006 fb00 	bl	8007b58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */


  /* USER CODE END TIM4_IRQn 1 */
}
 8001558:	bf00      	nop
 800155a:	bd80      	pop	{r7, pc}
 800155c:	2000065c 	.word	0x2000065c
 8001560:	200005b0 	.word	0x200005b0

08001564 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800156c:	4a14      	ldr	r2, [pc, #80]	@ (80015c0 <_sbrk+0x5c>)
 800156e:	4b15      	ldr	r3, [pc, #84]	@ (80015c4 <_sbrk+0x60>)
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001578:	4b13      	ldr	r3, [pc, #76]	@ (80015c8 <_sbrk+0x64>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d102      	bne.n	8001586 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001580:	4b11      	ldr	r3, [pc, #68]	@ (80015c8 <_sbrk+0x64>)
 8001582:	4a12      	ldr	r2, [pc, #72]	@ (80015cc <_sbrk+0x68>)
 8001584:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001586:	4b10      	ldr	r3, [pc, #64]	@ (80015c8 <_sbrk+0x64>)
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4413      	add	r3, r2
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	429a      	cmp	r2, r3
 8001592:	d207      	bcs.n	80015a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001594:	f00c faec 	bl	800db70 <__errno>
 8001598:	4603      	mov	r3, r0
 800159a:	220c      	movs	r2, #12
 800159c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800159e:	f04f 33ff 	mov.w	r3, #4294967295
 80015a2:	e009      	b.n	80015b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015a4:	4b08      	ldr	r3, [pc, #32]	@ (80015c8 <_sbrk+0x64>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015aa:	4b07      	ldr	r3, [pc, #28]	@ (80015c8 <_sbrk+0x64>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4413      	add	r3, r2
 80015b2:	4a05      	ldr	r2, [pc, #20]	@ (80015c8 <_sbrk+0x64>)
 80015b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015b6:	68fb      	ldr	r3, [r7, #12]
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3718      	adds	r7, #24
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	20020000 	.word	0x20020000
 80015c4:	00000400 	.word	0x00000400
 80015c8:	2000269c 	.word	0x2000269c
 80015cc:	20006550 	.word	0x20006550

080015d0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80015d4:	4b06      	ldr	r3, [pc, #24]	@ (80015f0 <SystemInit+0x20>)
 80015d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015da:	4a05      	ldr	r2, [pc, #20]	@ (80015f0 <SystemInit+0x20>)
 80015dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015e4:	bf00      	nop
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	e000ed00 	.word	0xe000ed00

080015f4 <ws2812_update>:

/**
 * @brief  直接更新LED颜色
 */
void ws2812_update(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
	// 数据缓冲，每个LED占用24个字节，共10个LED，前100个字节用于复位信号
	static uint16_t ws2812_data[RST_PERIOD_NUM + WS2812_NUM * 24];

	for (uint8_t led_id = 0; led_id < WS2812_NUM; led_id++)
 80015fa:	2300      	movs	r3, #0
 80015fc:	71fb      	strb	r3, [r7, #7]
 80015fe:	e061      	b.n	80016c4 <ws2812_update+0xd0>
	{
		_ws2812_color_current[led_id] = ws2812_color[led_id];
 8001600:	79fa      	ldrb	r2, [r7, #7]
 8001602:	79fb      	ldrb	r3, [r7, #7]
 8001604:	4936      	ldr	r1, [pc, #216]	@ (80016e0 <ws2812_update+0xec>)
 8001606:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800160a:	4936      	ldr	r1, [pc, #216]	@ (80016e4 <ws2812_update+0xf0>)
 800160c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		static uint8_t r, g, b;
		color_to_rgb(_ws2812_color_current[led_id], &r, &g, &b);
 8001610:	79fb      	ldrb	r3, [r7, #7]
 8001612:	4a34      	ldr	r2, [pc, #208]	@ (80016e4 <ws2812_update+0xf0>)
 8001614:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001618:	4b33      	ldr	r3, [pc, #204]	@ (80016e8 <ws2812_update+0xf4>)
 800161a:	4a34      	ldr	r2, [pc, #208]	@ (80016ec <ws2812_update+0xf8>)
 800161c:	4934      	ldr	r1, [pc, #208]	@ (80016f0 <ws2812_update+0xfc>)
 800161e:	f000 f9b9 	bl	8001994 <color_to_rgb>
		uint16_t *p = ws2812_data + RST_PERIOD_NUM + led_id * 24;
 8001622:	79fa      	ldrb	r2, [r7, #7]
 8001624:	4613      	mov	r3, r2
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	4413      	add	r3, r2
 800162a:	011b      	lsls	r3, r3, #4
 800162c:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8001630:	4a30      	ldr	r2, [pc, #192]	@ (80016f4 <ws2812_update+0x100>)
 8001632:	4413      	add	r3, r2
 8001634:	603b      	str	r3, [r7, #0]
		for (uint8_t i = 0; i < 8; i++)
 8001636:	2300      	movs	r3, #0
 8001638:	71bb      	strb	r3, [r7, #6]
 800163a:	e03d      	b.n	80016b8 <ws2812_update+0xc4>
		{
			p[i] = (r << i) & (0x80) ? CODE_ONE_DUTY : CODE_ZERO_DUTY;
 800163c:	4b2c      	ldr	r3, [pc, #176]	@ (80016f0 <ws2812_update+0xfc>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	461a      	mov	r2, r3
 8001642:	79bb      	ldrb	r3, [r7, #6]
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <ws2812_update+0x60>
 8001650:	218c      	movs	r1, #140	@ 0x8c
 8001652:	e000      	b.n	8001656 <ws2812_update+0x62>
 8001654:	2146      	movs	r1, #70	@ 0x46
 8001656:	79bb      	ldrb	r3, [r7, #6]
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	683a      	ldr	r2, [r7, #0]
 800165c:	4413      	add	r3, r2
 800165e:	460a      	mov	r2, r1
 8001660:	801a      	strh	r2, [r3, #0]
			p[i + 8] = (g << i) & (0x80) ? CODE_ONE_DUTY : CODE_ZERO_DUTY;
 8001662:	4b22      	ldr	r3, [pc, #136]	@ (80016ec <ws2812_update+0xf8>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	461a      	mov	r2, r3
 8001668:	79bb      	ldrb	r3, [r7, #6]
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <ws2812_update+0x86>
 8001676:	218c      	movs	r1, #140	@ 0x8c
 8001678:	e000      	b.n	800167c <ws2812_update+0x88>
 800167a:	2146      	movs	r1, #70	@ 0x46
 800167c:	79bb      	ldrb	r3, [r7, #6]
 800167e:	3308      	adds	r3, #8
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	683a      	ldr	r2, [r7, #0]
 8001684:	4413      	add	r3, r2
 8001686:	460a      	mov	r2, r1
 8001688:	801a      	strh	r2, [r3, #0]
			p[i + 16] = (b << i) & (0x80) ? CODE_ONE_DUTY : CODE_ZERO_DUTY;
 800168a:	4b17      	ldr	r3, [pc, #92]	@ (80016e8 <ws2812_update+0xf4>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	461a      	mov	r2, r3
 8001690:	79bb      	ldrb	r3, [r7, #6]
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <ws2812_update+0xae>
 800169e:	218c      	movs	r1, #140	@ 0x8c
 80016a0:	e000      	b.n	80016a4 <ws2812_update+0xb0>
 80016a2:	2146      	movs	r1, #70	@ 0x46
 80016a4:	79bb      	ldrb	r3, [r7, #6]
 80016a6:	3310      	adds	r3, #16
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	683a      	ldr	r2, [r7, #0]
 80016ac:	4413      	add	r3, r2
 80016ae:	460a      	mov	r2, r1
 80016b0:	801a      	strh	r2, [r3, #0]
		for (uint8_t i = 0; i < 8; i++)
 80016b2:	79bb      	ldrb	r3, [r7, #6]
 80016b4:	3301      	adds	r3, #1
 80016b6:	71bb      	strb	r3, [r7, #6]
 80016b8:	79bb      	ldrb	r3, [r7, #6]
 80016ba:	2b07      	cmp	r3, #7
 80016bc:	d9be      	bls.n	800163c <ws2812_update+0x48>
	for (uint8_t led_id = 0; led_id < WS2812_NUM; led_id++)
 80016be:	79fb      	ldrb	r3, [r7, #7]
 80016c0:	3301      	adds	r3, #1
 80016c2:	71fb      	strb	r3, [r7, #7]
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	2b63      	cmp	r3, #99	@ 0x63
 80016c8:	d99a      	bls.n	8001600 <ws2812_update+0xc>
		}
	}
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_4, (uint32_t *)ws2812_data,
 80016ca:	f640 5348 	movw	r3, #3400	@ 0xd48
 80016ce:	4a09      	ldr	r2, [pc, #36]	@ (80016f4 <ws2812_update+0x100>)
 80016d0:	210c      	movs	r1, #12
 80016d2:	4809      	ldr	r0, [pc, #36]	@ (80016f8 <ws2812_update+0x104>)
 80016d4:	f006 f814 	bl	8007700 <HAL_TIM_PWM_Start_DMA>
						  RST_PERIOD_NUM + WS2812_NUM * 24);
}
 80016d8:	bf00      	nop
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	200026a0 	.word	0x200026a0
 80016e4:	20002830 	.word	0x20002830
 80016e8:	200029c2 	.word	0x200029c2
 80016ec:	200029c1 	.word	0x200029c1
 80016f0:	200029c0 	.word	0x200029c0
 80016f4:	200029c4 	.word	0x200029c4
 80016f8:	20000564 	.word	0x20000564

080016fc <ws2812_gradient>:
 * @brief  通过渐变方式更新LED颜色（线性插值）
 * @param  steps: 渐变步数
 * @param  delay_ms: 每步之间的延迟时间（毫秒）
 */
void ws2812_gradient(uint8_t steps, uint16_t delay_ms)
{
 80016fc:	b590      	push	{r4, r7, lr}
 80016fe:	b087      	sub	sp, #28
 8001700:	af00      	add	r7, sp, #0
 8001702:	4603      	mov	r3, r0
 8001704:	460a      	mov	r2, r1
 8001706:	71fb      	strb	r3, [r7, #7]
 8001708:	4613      	mov	r3, r2
 800170a:	80bb      	strh	r3, [r7, #4]
	static uint8_t start_r[WS2812_NUM], start_g[WS2812_NUM], start_b[WS2812_NUM];
	static float r_step[WS2812_NUM], g_step[WS2812_NUM], b_step[WS2812_NUM];

	// 提取初始颜色，并计算每步的渐变步长
	for (uint8_t i = 0; i < WS2812_NUM; i++)
 800170c:	2300      	movs	r3, #0
 800170e:	75fb      	strb	r3, [r7, #23]
 8001710:	e062      	b.n	80017d8 <ws2812_gradient+0xdc>
	{
		color_to_rgb(_ws2812_color_current[i], &start_r[i], &start_g[i], &start_b[i]);
 8001712:	7dfb      	ldrb	r3, [r7, #23]
 8001714:	4a6e      	ldr	r2, [pc, #440]	@ (80018d0 <ws2812_gradient+0x1d4>)
 8001716:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800171a:	7dfb      	ldrb	r3, [r7, #23]
 800171c:	4a6d      	ldr	r2, [pc, #436]	@ (80018d4 <ws2812_gradient+0x1d8>)
 800171e:	1899      	adds	r1, r3, r2
 8001720:	7dfb      	ldrb	r3, [r7, #23]
 8001722:	4a6d      	ldr	r2, [pc, #436]	@ (80018d8 <ws2812_gradient+0x1dc>)
 8001724:	441a      	add	r2, r3
 8001726:	7dfb      	ldrb	r3, [r7, #23]
 8001728:	4c6c      	ldr	r4, [pc, #432]	@ (80018dc <ws2812_gradient+0x1e0>)
 800172a:	4423      	add	r3, r4
 800172c:	f000 f932 	bl	8001994 <color_to_rgb>
		uint8_t target_r, target_g, target_b;
		color_to_rgb(ws2812_color[i], &target_r, &target_g, &target_b);
 8001730:	7dfb      	ldrb	r3, [r7, #23]
 8001732:	4a6b      	ldr	r2, [pc, #428]	@ (80018e0 <ws2812_gradient+0x1e4>)
 8001734:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001738:	f107 030f 	add.w	r3, r7, #15
 800173c:	f107 0210 	add.w	r2, r7, #16
 8001740:	f107 0111 	add.w	r1, r7, #17
 8001744:	f000 f926 	bl	8001994 <color_to_rgb>

		r_step[i] = (float)(target_r - start_r[i]) / steps;
 8001748:	7c7b      	ldrb	r3, [r7, #17]
 800174a:	4619      	mov	r1, r3
 800174c:	7dfb      	ldrb	r3, [r7, #23]
 800174e:	4a61      	ldr	r2, [pc, #388]	@ (80018d4 <ws2812_gradient+0x1d8>)
 8001750:	5cd3      	ldrb	r3, [r2, r3]
 8001752:	1acb      	subs	r3, r1, r3
 8001754:	ee07 3a90 	vmov	s15, r3
 8001758:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800175c:	79fb      	ldrb	r3, [r7, #7]
 800175e:	ee07 3a90 	vmov	s15, r3
 8001762:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001766:	7dfb      	ldrb	r3, [r7, #23]
 8001768:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800176c:	4a5d      	ldr	r2, [pc, #372]	@ (80018e4 <ws2812_gradient+0x1e8>)
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	4413      	add	r3, r2
 8001772:	edc3 7a00 	vstr	s15, [r3]
		g_step[i] = (float)(target_g - start_g[i]) / steps;
 8001776:	7c3b      	ldrb	r3, [r7, #16]
 8001778:	4619      	mov	r1, r3
 800177a:	7dfb      	ldrb	r3, [r7, #23]
 800177c:	4a56      	ldr	r2, [pc, #344]	@ (80018d8 <ws2812_gradient+0x1dc>)
 800177e:	5cd3      	ldrb	r3, [r2, r3]
 8001780:	1acb      	subs	r3, r1, r3
 8001782:	ee07 3a90 	vmov	s15, r3
 8001786:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800178a:	79fb      	ldrb	r3, [r7, #7]
 800178c:	ee07 3a90 	vmov	s15, r3
 8001790:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001794:	7dfb      	ldrb	r3, [r7, #23]
 8001796:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800179a:	4a53      	ldr	r2, [pc, #332]	@ (80018e8 <ws2812_gradient+0x1ec>)
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	4413      	add	r3, r2
 80017a0:	edc3 7a00 	vstr	s15, [r3]
		b_step[i] = (float)(target_b - start_b[i]) / steps;
 80017a4:	7bfb      	ldrb	r3, [r7, #15]
 80017a6:	4619      	mov	r1, r3
 80017a8:	7dfb      	ldrb	r3, [r7, #23]
 80017aa:	4a4c      	ldr	r2, [pc, #304]	@ (80018dc <ws2812_gradient+0x1e0>)
 80017ac:	5cd3      	ldrb	r3, [r2, r3]
 80017ae:	1acb      	subs	r3, r1, r3
 80017b0:	ee07 3a90 	vmov	s15, r3
 80017b4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017b8:	79fb      	ldrb	r3, [r7, #7]
 80017ba:	ee07 3a90 	vmov	s15, r3
 80017be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017c2:	7dfb      	ldrb	r3, [r7, #23]
 80017c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017c8:	4a48      	ldr	r2, [pc, #288]	@ (80018ec <ws2812_gradient+0x1f0>)
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	4413      	add	r3, r2
 80017ce:	edc3 7a00 	vstr	s15, [r3]
	for (uint8_t i = 0; i < WS2812_NUM; i++)
 80017d2:	7dfb      	ldrb	r3, [r7, #23]
 80017d4:	3301      	adds	r3, #1
 80017d6:	75fb      	strb	r3, [r7, #23]
 80017d8:	7dfb      	ldrb	r3, [r7, #23]
 80017da:	2b63      	cmp	r3, #99	@ 0x63
 80017dc:	d999      	bls.n	8001712 <ws2812_gradient+0x16>
	}

	// 逐步渐变
	for (uint8_t step = 1; step <= steps; step++)
 80017de:	2301      	movs	r3, #1
 80017e0:	75bb      	strb	r3, [r7, #22]
 80017e2:	e06b      	b.n	80018bc <ws2812_gradient+0x1c0>
	{
		for (uint8_t led_id = 0; led_id < WS2812_NUM; led_id++)
 80017e4:	2300      	movs	r3, #0
 80017e6:	757b      	strb	r3, [r7, #21]
 80017e8:	e05c      	b.n	80018a4 <ws2812_gradient+0x1a8>
		{
			// 计算当前步的颜色
			uint8_t r = (uint8_t)(start_r[led_id] + r_step[led_id] * step);
 80017ea:	7d7b      	ldrb	r3, [r7, #21]
 80017ec:	4a39      	ldr	r2, [pc, #228]	@ (80018d4 <ws2812_gradient+0x1d8>)
 80017ee:	5cd3      	ldrb	r3, [r2, r3]
 80017f0:	ee07 3a90 	vmov	s15, r3
 80017f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017f8:	7d7b      	ldrb	r3, [r7, #21]
 80017fa:	4a3a      	ldr	r2, [pc, #232]	@ (80018e4 <ws2812_gradient+0x1e8>)
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	4413      	add	r3, r2
 8001800:	edd3 6a00 	vldr	s13, [r3]
 8001804:	7dbb      	ldrb	r3, [r7, #22]
 8001806:	ee07 3a90 	vmov	s15, r3
 800180a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800180e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001812:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001816:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800181a:	edc7 7a00 	vstr	s15, [r7]
 800181e:	783b      	ldrb	r3, [r7, #0]
 8001820:	753b      	strb	r3, [r7, #20]
			uint8_t g = (uint8_t)(start_g[led_id] + g_step[led_id] * step);
 8001822:	7d7b      	ldrb	r3, [r7, #21]
 8001824:	4a2c      	ldr	r2, [pc, #176]	@ (80018d8 <ws2812_gradient+0x1dc>)
 8001826:	5cd3      	ldrb	r3, [r2, r3]
 8001828:	ee07 3a90 	vmov	s15, r3
 800182c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001830:	7d7b      	ldrb	r3, [r7, #21]
 8001832:	4a2d      	ldr	r2, [pc, #180]	@ (80018e8 <ws2812_gradient+0x1ec>)
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	4413      	add	r3, r2
 8001838:	edd3 6a00 	vldr	s13, [r3]
 800183c:	7dbb      	ldrb	r3, [r7, #22]
 800183e:	ee07 3a90 	vmov	s15, r3
 8001842:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001846:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800184a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800184e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001852:	edc7 7a00 	vstr	s15, [r7]
 8001856:	783b      	ldrb	r3, [r7, #0]
 8001858:	74fb      	strb	r3, [r7, #19]
			uint8_t b = (uint8_t)(start_b[led_id] + b_step[led_id] * step);
 800185a:	7d7b      	ldrb	r3, [r7, #21]
 800185c:	4a1f      	ldr	r2, [pc, #124]	@ (80018dc <ws2812_gradient+0x1e0>)
 800185e:	5cd3      	ldrb	r3, [r2, r3]
 8001860:	ee07 3a90 	vmov	s15, r3
 8001864:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001868:	7d7b      	ldrb	r3, [r7, #21]
 800186a:	4a20      	ldr	r2, [pc, #128]	@ (80018ec <ws2812_gradient+0x1f0>)
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	4413      	add	r3, r2
 8001870:	edd3 6a00 	vldr	s13, [r3]
 8001874:	7dbb      	ldrb	r3, [r7, #22]
 8001876:	ee07 3a90 	vmov	s15, r3
 800187a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800187e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001882:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001886:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800188a:	edc7 7a00 	vstr	s15, [r7]
 800188e:	783b      	ldrb	r3, [r7, #0]
 8001890:	74bb      	strb	r3, [r7, #18]

			ws2812_set_rgb(led_id, r, g, b);
 8001892:	7cbb      	ldrb	r3, [r7, #18]
 8001894:	7cfa      	ldrb	r2, [r7, #19]
 8001896:	7d39      	ldrb	r1, [r7, #20]
 8001898:	7d78      	ldrb	r0, [r7, #21]
 800189a:	f000 f829 	bl	80018f0 <ws2812_set_rgb>
		for (uint8_t led_id = 0; led_id < WS2812_NUM; led_id++)
 800189e:	7d7b      	ldrb	r3, [r7, #21]
 80018a0:	3301      	adds	r3, #1
 80018a2:	757b      	strb	r3, [r7, #21]
 80018a4:	7d7b      	ldrb	r3, [r7, #21]
 80018a6:	2b63      	cmp	r3, #99	@ 0x63
 80018a8:	d99f      	bls.n	80017ea <ws2812_gradient+0xee>
		}

		ws2812_update();
 80018aa:	f7ff fea3 	bl	80015f4 <ws2812_update>
		HAL_Delay(delay_ms);
 80018ae:	88bb      	ldrh	r3, [r7, #4]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f000 f925 	bl	8001b00 <HAL_Delay>
	for (uint8_t step = 1; step <= steps; step++)
 80018b6:	7dbb      	ldrb	r3, [r7, #22]
 80018b8:	3301      	adds	r3, #1
 80018ba:	75bb      	strb	r3, [r7, #22]
 80018bc:	7dba      	ldrb	r2, [r7, #22]
 80018be:	79fb      	ldrb	r3, [r7, #7]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d98f      	bls.n	80017e4 <ws2812_gradient+0xe8>
	}
}
 80018c4:	bf00      	nop
 80018c6:	bf00      	nop
 80018c8:	371c      	adds	r7, #28
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd90      	pop	{r4, r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20002830 	.word	0x20002830
 80018d4:	20004454 	.word	0x20004454
 80018d8:	200044b8 	.word	0x200044b8
 80018dc:	2000451c 	.word	0x2000451c
 80018e0:	200026a0 	.word	0x200026a0
 80018e4:	20004580 	.word	0x20004580
 80018e8:	20004710 	.word	0x20004710
 80018ec:	200048a0 	.word	0x200048a0

080018f0 <ws2812_set_rgb>:
 * @param  r: 红色亮度（0-255）
 * @param  g: 绿色亮度（0-255）
 * @param  b: 蓝色亮度（0-255）
 */
void ws2812_set_rgb(uint8_t led_id, uint8_t r, uint8_t g, uint8_t b)
{
 80018f0:	b590      	push	{r4, r7, lr}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4604      	mov	r4, r0
 80018f8:	4608      	mov	r0, r1
 80018fa:	4611      	mov	r1, r2
 80018fc:	461a      	mov	r2, r3
 80018fe:	4623      	mov	r3, r4
 8001900:	71fb      	strb	r3, [r7, #7]
 8001902:	4603      	mov	r3, r0
 8001904:	71bb      	strb	r3, [r7, #6]
 8001906:	460b      	mov	r3, r1
 8001908:	717b      	strb	r3, [r7, #5]
 800190a:	4613      	mov	r3, r2
 800190c:	713b      	strb	r3, [r7, #4]
	ws2812_color[led_id] = rgb_to_color(r, g, b);
 800190e:	79fc      	ldrb	r4, [r7, #7]
 8001910:	793a      	ldrb	r2, [r7, #4]
 8001912:	7979      	ldrb	r1, [r7, #5]
 8001914:	79bb      	ldrb	r3, [r7, #6]
 8001916:	4618      	mov	r0, r3
 8001918:	f000 f826 	bl	8001968 <rgb_to_color>
 800191c:	4603      	mov	r3, r0
 800191e:	4a03      	ldr	r2, [pc, #12]	@ (800192c <ws2812_set_rgb+0x3c>)
 8001920:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	bd90      	pop	{r4, r7, pc}
 800192c:	200026a0 	.word	0x200026a0

08001930 <ws2812_set_all>:
/**
 * @brief  设置所有LED颜色（24bit颜色格式）
 * @param  color: 24bit颜色
 */
void ws2812_set_all(uint32_t color)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
	for (uint8_t led_id = 0; led_id < WS2812_NUM; led_id++)
 8001938:	2300      	movs	r3, #0
 800193a:	73fb      	strb	r3, [r7, #15]
 800193c:	e007      	b.n	800194e <ws2812_set_all+0x1e>
	{
		ws2812_color[led_id] = color;
 800193e:	7bfb      	ldrb	r3, [r7, #15]
 8001940:	4908      	ldr	r1, [pc, #32]	@ (8001964 <ws2812_set_all+0x34>)
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (uint8_t led_id = 0; led_id < WS2812_NUM; led_id++)
 8001948:	7bfb      	ldrb	r3, [r7, #15]
 800194a:	3301      	adds	r3, #1
 800194c:	73fb      	strb	r3, [r7, #15]
 800194e:	7bfb      	ldrb	r3, [r7, #15]
 8001950:	2b63      	cmp	r3, #99	@ 0x63
 8001952:	d9f4      	bls.n	800193e <ws2812_set_all+0xe>
	}
}
 8001954:	bf00      	nop
 8001956:	bf00      	nop
 8001958:	3714      	adds	r7, #20
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	200026a0 	.word	0x200026a0

08001968 <rgb_to_color>:
 * @param  g: 绿色亮度（0-255）
 * @param  b: 蓝色亮度（0-255）
 * @retval 24bit颜色
 */
uint32_t rgb_to_color(uint8_t r, uint8_t g, uint8_t b)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	71fb      	strb	r3, [r7, #7]
 8001972:	460b      	mov	r3, r1
 8001974:	71bb      	strb	r3, [r7, #6]
 8001976:	4613      	mov	r3, r2
 8001978:	717b      	strb	r3, [r7, #5]
	return (r << 16) | (g << 8) | b;
 800197a:	79fb      	ldrb	r3, [r7, #7]
 800197c:	041a      	lsls	r2, r3, #16
 800197e:	79bb      	ldrb	r3, [r7, #6]
 8001980:	021b      	lsls	r3, r3, #8
 8001982:	431a      	orrs	r2, r3
 8001984:	797b      	ldrb	r3, [r7, #5]
 8001986:	4313      	orrs	r3, r2
}
 8001988:	4618      	mov	r0, r3
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <color_to_rgb>:
 * @param  r: 红色亮度（0-255）
 * @param  g: 绿色亮度（0-255）
 * @param  b: 蓝色亮度（0-255）
 */
void color_to_rgb(uint32_t color, uint8_t *r, uint8_t *g, uint8_t *b)
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	607a      	str	r2, [r7, #4]
 80019a0:	603b      	str	r3, [r7, #0]
	*r = (color >> 16) & 0xFF;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	0c1b      	lsrs	r3, r3, #16
 80019a6:	b2da      	uxtb	r2, r3
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	701a      	strb	r2, [r3, #0]
	*g = (color >> 8) & 0xFF;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	0a1b      	lsrs	r3, r3, #8
 80019b0:	b2da      	uxtb	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	701a      	strb	r2, [r3, #0]
	*b = color & 0xFF;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	b2da      	uxtb	r2, r3
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	701a      	strb	r2, [r3, #0]
}
 80019be:	bf00      	nop
 80019c0:	3714      	adds	r7, #20
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
	...

080019cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019cc:	480d      	ldr	r0, [pc, #52]	@ (8001a04 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019ce:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019d0:	f7ff fdfe 	bl	80015d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019d4:	480c      	ldr	r0, [pc, #48]	@ (8001a08 <LoopForever+0x6>)
  ldr r1, =_edata
 80019d6:	490d      	ldr	r1, [pc, #52]	@ (8001a0c <LoopForever+0xa>)
  ldr r2, =_sidata
 80019d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001a10 <LoopForever+0xe>)
  movs r3, #0
 80019da:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80019dc:	e002      	b.n	80019e4 <LoopCopyDataInit>

080019de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019e2:	3304      	adds	r3, #4

080019e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019e8:	d3f9      	bcc.n	80019de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001a14 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019ec:	4c0a      	ldr	r4, [pc, #40]	@ (8001a18 <LoopForever+0x16>)
  movs r3, #0
 80019ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019f0:	e001      	b.n	80019f6 <LoopFillZerobss>

080019f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019f4:	3204      	adds	r2, #4

080019f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019f8:	d3fb      	bcc.n	80019f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019fa:	f00c f8bf 	bl	800db7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019fe:	f7fe fc5f 	bl	80002c0 <main>

08001a02 <LoopForever>:

LoopForever:
    b LoopForever
 8001a02:	e7fe      	b.n	8001a02 <LoopForever>
  ldr   r0, =_estack
 8001a04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a0c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001a10:	0800e524 	.word	0x0800e524
  ldr r2, =_sbss
 8001a14:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001a18:	2000654c 	.word	0x2000654c

08001a1c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a1c:	e7fe      	b.n	8001a1c <ADC3_IRQHandler>

08001a1e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b082      	sub	sp, #8
 8001a22:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a24:	2300      	movs	r3, #0
 8001a26:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a28:	2003      	movs	r0, #3
 8001a2a:	f001 ffc9 	bl	80039c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a2e:	200f      	movs	r0, #15
 8001a30:	f000 f80e 	bl	8001a50 <HAL_InitTick>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d002      	beq.n	8001a40 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	71fb      	strb	r3, [r7, #7]
 8001a3e:	e001      	b.n	8001a44 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a40:	f7ff fa0a 	bl	8000e58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a44:	79fb      	ldrb	r3, [r7, #7]

}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
	...

08001a50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001a5c:	4b16      	ldr	r3, [pc, #88]	@ (8001ab8 <HAL_InitTick+0x68>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d022      	beq.n	8001aaa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001a64:	4b15      	ldr	r3, [pc, #84]	@ (8001abc <HAL_InitTick+0x6c>)
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	4b13      	ldr	r3, [pc, #76]	@ (8001ab8 <HAL_InitTick+0x68>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001a70:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f001 ffd4 	bl	8003a26 <HAL_SYSTICK_Config>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d10f      	bne.n	8001aa4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2b0f      	cmp	r3, #15
 8001a88:	d809      	bhi.n	8001a9e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	6879      	ldr	r1, [r7, #4]
 8001a8e:	f04f 30ff 	mov.w	r0, #4294967295
 8001a92:	f001 ffa0 	bl	80039d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a96:	4a0a      	ldr	r2, [pc, #40]	@ (8001ac0 <HAL_InitTick+0x70>)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6013      	str	r3, [r2, #0]
 8001a9c:	e007      	b.n	8001aae <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	73fb      	strb	r3, [r7, #15]
 8001aa2:	e004      	b.n	8001aae <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	73fb      	strb	r3, [r7, #15]
 8001aa8:	e001      	b.n	8001aae <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3710      	adds	r7, #16
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	20000008 	.word	0x20000008
 8001abc:	20000000 	.word	0x20000000
 8001ac0:	20000004 	.word	0x20000004

08001ac4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ac8:	4b05      	ldr	r3, [pc, #20]	@ (8001ae0 <HAL_IncTick+0x1c>)
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	4b05      	ldr	r3, [pc, #20]	@ (8001ae4 <HAL_IncTick+0x20>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	4a03      	ldr	r2, [pc, #12]	@ (8001ae0 <HAL_IncTick+0x1c>)
 8001ad4:	6013      	str	r3, [r2, #0]
}
 8001ad6:	bf00      	nop
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	20004a30 	.word	0x20004a30
 8001ae4:	20000008 	.word	0x20000008

08001ae8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  return uwTick;
 8001aec:	4b03      	ldr	r3, [pc, #12]	@ (8001afc <HAL_GetTick+0x14>)
 8001aee:	681b      	ldr	r3, [r3, #0]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	20004a30 	.word	0x20004a30

08001b00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b08:	f7ff ffee 	bl	8001ae8 <HAL_GetTick>
 8001b0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b18:	d004      	beq.n	8001b24 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b1a:	4b09      	ldr	r3, [pc, #36]	@ (8001b40 <HAL_Delay+0x40>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	68fa      	ldr	r2, [r7, #12]
 8001b20:	4413      	add	r3, r2
 8001b22:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b24:	bf00      	nop
 8001b26:	f7ff ffdf 	bl	8001ae8 <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	68fa      	ldr	r2, [r7, #12]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d8f7      	bhi.n	8001b26 <HAL_Delay+0x26>
  {
  }
}
 8001b36:	bf00      	nop
 8001b38:	bf00      	nop
 8001b3a:	3710      	adds	r7, #16
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	20000008 	.word	0x20000008

08001b44 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE2: VREFBUF_OUT around 2.9 V.
  *                                                This requires VDDA equal to or higher than 3.15 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8001b4c:	4b06      	ldr	r3, [pc, #24]	@ (8001b68 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001b54:	4904      	ldr	r1, [pc, #16]	@ (8001b68 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	600b      	str	r3, [r1, #0]
}
 8001b5c:	bf00      	nop
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	40010030 	.word	0x40010030

08001b6c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8001b74:	4b06      	ldr	r3, [pc, #24]	@ (8001b90 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f023 0202 	bic.w	r2, r3, #2
 8001b7c:	4904      	ldr	r1, [pc, #16]	@ (8001b90 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	600b      	str	r3, [r1, #0]
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	40010030 	.word	0x40010030

08001b94 <HAL_SYSCFG_VREFBUF_TrimmingConfig>:
  * @param TrimmingValue specifies trimming code for VREFBUF calibration
  *        This parameter can be a number between Min_Data = 0x00 and Max_Data = 0x3F
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_TrimmingConfig(uint32_t TrimmingValue)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_TRIMMING(TrimmingValue));

  MODIFY_REG(VREFBUF->CCR, VREFBUF_CCR_TRIM, TrimmingValue);
 8001b9c:	4b06      	ldr	r3, [pc, #24]	@ (8001bb8 <HAL_SYSCFG_VREFBUF_TrimmingConfig+0x24>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8001ba4:	4904      	ldr	r1, [pc, #16]	@ (8001bb8 <HAL_SYSCFG_VREFBUF_TrimmingConfig+0x24>)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	604b      	str	r3, [r1, #4]
}
 8001bac:	bf00      	nop
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr
 8001bb8:	40010030 	.word	0x40010030

08001bbc <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8001bc2:	4b0f      	ldr	r3, [pc, #60]	@ (8001c00 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a0e      	ldr	r2, [pc, #56]	@ (8001c00 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8001bc8:	f043 0301 	orr.w	r3, r3, #1
 8001bcc:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001bce:	f7ff ff8b 	bl	8001ae8 <HAL_GetTick>
 8001bd2:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8001bd4:	e008      	b.n	8001be8 <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 8001bd6:	f7ff ff87 	bl	8001ae8 <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	2b0a      	cmp	r3, #10
 8001be2:	d901      	bls.n	8001be8 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e006      	b.n	8001bf6 <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8001be8:	4b05      	ldr	r3, [pc, #20]	@ (8001c00 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0308 	and.w	r3, r3, #8
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d0f0      	beq.n	8001bd6 <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40010030 	.word	0x40010030

08001c04 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	431a      	orrs	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	609a      	str	r2, [r3, #8]
}
 8001c1e:	bf00      	nop
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr

08001c2a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b083      	sub	sp, #12
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
 8001c32:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	431a      	orrs	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	609a      	str	r2, [r3, #8]
}
 8001c44:	bf00      	nop
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b087      	sub	sp, #28
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
 8001c78:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	3360      	adds	r3, #96	@ 0x60
 8001c7e:	461a      	mov	r2, r3
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	4413      	add	r3, r2
 8001c86:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	4b08      	ldr	r3, [pc, #32]	@ (8001cb0 <LL_ADC_SetOffset+0x44>)
 8001c8e:	4013      	ands	r3, r2
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001c96:	683a      	ldr	r2, [r7, #0]
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001ca4:	bf00      	nop
 8001ca6:	371c      	adds	r7, #28
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	03fff000 	.word	0x03fff000

08001cb4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b085      	sub	sp, #20
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	3360      	adds	r3, #96	@ 0x60
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	4413      	add	r3, r2
 8001cca:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3714      	adds	r7, #20
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b087      	sub	sp, #28
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	3360      	adds	r3, #96	@ 0x60
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	4413      	add	r3, r2
 8001cf8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	431a      	orrs	r2, r3
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001d0a:	bf00      	nop
 8001d0c:	371c      	adds	r7, #28
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001d16:	b480      	push	{r7}
 8001d18:	b087      	sub	sp, #28
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	60f8      	str	r0, [r7, #12]
 8001d1e:	60b9      	str	r1, [r7, #8]
 8001d20:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	3360      	adds	r3, #96	@ 0x60
 8001d26:	461a      	mov	r2, r3
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	4413      	add	r3, r2
 8001d2e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	431a      	orrs	r2, r3
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001d40:	bf00      	nop
 8001d42:	371c      	adds	r7, #28
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b087      	sub	sp, #28
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	3360      	adds	r3, #96	@ 0x60
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	4413      	add	r3, r2
 8001d64:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	431a      	orrs	r2, r3
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001d76:	bf00      	nop
 8001d78:	371c      	adds	r7, #28
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b083      	sub	sp, #12
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
 8001d8a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	695b      	ldr	r3, [r3, #20]
 8001d90:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	431a      	orrs	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	615a      	str	r2, [r3, #20]
}
 8001d9c:	bf00      	nop
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d101      	bne.n	8001dc0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e000      	b.n	8001dc2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr

08001dce <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b087      	sub	sp, #28
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	60f8      	str	r0, [r7, #12]
 8001dd6:	60b9      	str	r1, [r7, #8]
 8001dd8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	3330      	adds	r3, #48	@ 0x30
 8001dde:	461a      	mov	r2, r3
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	0a1b      	lsrs	r3, r3, #8
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	f003 030c 	and.w	r3, r3, #12
 8001dea:	4413      	add	r3, r2
 8001dec:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	f003 031f 	and.w	r3, r3, #31
 8001df8:	211f      	movs	r1, #31
 8001dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	401a      	ands	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	0e9b      	lsrs	r3, r3, #26
 8001e06:	f003 011f 	and.w	r1, r3, #31
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	f003 031f 	and.w	r3, r3, #31
 8001e10:	fa01 f303 	lsl.w	r3, r1, r3
 8001e14:	431a      	orrs	r2, r3
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001e1a:	bf00      	nop
 8001e1c:	371c      	adds	r7, #28
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr

08001e26 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001e26:	b480      	push	{r7}
 8001e28:	b083      	sub	sp, #12
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e32:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d101      	bne.n	8001e3e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e000      	b.n	8001e40 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b087      	sub	sp, #28
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	3314      	adds	r3, #20
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	0e5b      	lsrs	r3, r3, #25
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	f003 0304 	and.w	r3, r3, #4
 8001e68:	4413      	add	r3, r2
 8001e6a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	0d1b      	lsrs	r3, r3, #20
 8001e74:	f003 031f 	and.w	r3, r3, #31
 8001e78:	2107      	movs	r1, #7
 8001e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7e:	43db      	mvns	r3, r3
 8001e80:	401a      	ands	r2, r3
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	0d1b      	lsrs	r3, r3, #20
 8001e86:	f003 031f 	and.w	r3, r3, #31
 8001e8a:	6879      	ldr	r1, [r7, #4]
 8001e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e90:	431a      	orrs	r2, r3
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001e96:	bf00      	nop
 8001e98:	371c      	adds	r7, #28
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
	...

08001ea4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b085      	sub	sp, #20
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	401a      	ands	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f003 0318 	and.w	r3, r3, #24
 8001ec6:	4908      	ldr	r1, [pc, #32]	@ (8001ee8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001ec8:	40d9      	lsrs	r1, r3
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	400b      	ands	r3, r1
 8001ece:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ed2:	431a      	orrs	r2, r3
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001eda:	bf00      	nop
 8001edc:	3714      	adds	r7, #20
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	0007ffff 	.word	0x0007ffff

08001eec <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f003 031f 	and.w	r3, r3, #31
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001f34:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	6093      	str	r3, [r2, #8]
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001f58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001f5c:	d101      	bne.n	8001f62 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e000      	b.n	8001f64 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001f80:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f84:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001f8c:	bf00      	nop
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fa8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001fac:	d101      	bne.n	8001fb2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e000      	b.n	8001fb4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001fd0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001fd4:	f043 0201 	orr.w	r2, r3, #1
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f003 0301 	and.w	r3, r3, #1
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d101      	bne.n	8002000 <LL_ADC_IsEnabled+0x18>
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e000      	b.n	8002002 <LL_ADC_IsEnabled+0x1a>
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr

0800200e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800200e:	b480      	push	{r7}
 8002010:	b083      	sub	sp, #12
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800201e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002022:	f043 0204 	orr.w	r2, r3, #4
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800202a:	bf00      	nop
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr

08002036 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002036:	b480      	push	{r7}
 8002038:	b083      	sub	sp, #12
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f003 0304 	and.w	r3, r3, #4
 8002046:	2b04      	cmp	r3, #4
 8002048:	d101      	bne.n	800204e <LL_ADC_REG_IsConversionOngoing+0x18>
 800204a:	2301      	movs	r3, #1
 800204c:	e000      	b.n	8002050 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f003 0308 	and.w	r3, r3, #8
 800206c:	2b08      	cmp	r3, #8
 800206e:	d101      	bne.n	8002074 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002070:	2301      	movs	r3, #1
 8002072:	e000      	b.n	8002076 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
	...

08002084 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002084:	b590      	push	{r4, r7, lr}
 8002086:	b089      	sub	sp, #36	@ 0x24
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800208c:	2300      	movs	r3, #0
 800208e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002090:	2300      	movs	r3, #0
 8002092:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e1a9      	b.n	80023f2 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d109      	bne.n	80020c0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f7fe ff01 	bl	8000eb4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff ff3f 	bl	8001f48 <LL_ADC_IsDeepPowerDownEnabled>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d004      	beq.n	80020da <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff ff25 	bl	8001f24 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4618      	mov	r0, r3
 80020e0:	f7ff ff5a 	bl	8001f98 <LL_ADC_IsInternalRegulatorEnabled>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d115      	bne.n	8002116 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7ff ff3e 	bl	8001f70 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020f4:	4b9c      	ldr	r3, [pc, #624]	@ (8002368 <HAL_ADC_Init+0x2e4>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	099b      	lsrs	r3, r3, #6
 80020fa:	4a9c      	ldr	r2, [pc, #624]	@ (800236c <HAL_ADC_Init+0x2e8>)
 80020fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002100:	099b      	lsrs	r3, r3, #6
 8002102:	3301      	adds	r3, #1
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002108:	e002      	b.n	8002110 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	3b01      	subs	r3, #1
 800210e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d1f9      	bne.n	800210a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4618      	mov	r0, r3
 800211c:	f7ff ff3c 	bl	8001f98 <LL_ADC_IsInternalRegulatorEnabled>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d10d      	bne.n	8002142 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800212a:	f043 0210 	orr.w	r2, r3, #16
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002136:	f043 0201 	orr.w	r2, r3, #1
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4618      	mov	r0, r3
 8002148:	f7ff ff75 	bl	8002036 <LL_ADC_REG_IsConversionOngoing>
 800214c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002152:	f003 0310 	and.w	r3, r3, #16
 8002156:	2b00      	cmp	r3, #0
 8002158:	f040 8142 	bne.w	80023e0 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	2b00      	cmp	r3, #0
 8002160:	f040 813e 	bne.w	80023e0 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002168:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800216c:	f043 0202 	orr.w	r2, r3, #2
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff ff35 	bl	8001fe8 <LL_ADC_IsEnabled>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d141      	bne.n	8002208 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800218c:	d004      	beq.n	8002198 <HAL_ADC_Init+0x114>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a77      	ldr	r2, [pc, #476]	@ (8002370 <HAL_ADC_Init+0x2ec>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d10f      	bne.n	80021b8 <HAL_ADC_Init+0x134>
 8002198:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800219c:	f7ff ff24 	bl	8001fe8 <LL_ADC_IsEnabled>
 80021a0:	4604      	mov	r4, r0
 80021a2:	4873      	ldr	r0, [pc, #460]	@ (8002370 <HAL_ADC_Init+0x2ec>)
 80021a4:	f7ff ff20 	bl	8001fe8 <LL_ADC_IsEnabled>
 80021a8:	4603      	mov	r3, r0
 80021aa:	4323      	orrs	r3, r4
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	bf0c      	ite	eq
 80021b0:	2301      	moveq	r3, #1
 80021b2:	2300      	movne	r3, #0
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	e012      	b.n	80021de <HAL_ADC_Init+0x15a>
 80021b8:	486e      	ldr	r0, [pc, #440]	@ (8002374 <HAL_ADC_Init+0x2f0>)
 80021ba:	f7ff ff15 	bl	8001fe8 <LL_ADC_IsEnabled>
 80021be:	4604      	mov	r4, r0
 80021c0:	486d      	ldr	r0, [pc, #436]	@ (8002378 <HAL_ADC_Init+0x2f4>)
 80021c2:	f7ff ff11 	bl	8001fe8 <LL_ADC_IsEnabled>
 80021c6:	4603      	mov	r3, r0
 80021c8:	431c      	orrs	r4, r3
 80021ca:	486c      	ldr	r0, [pc, #432]	@ (800237c <HAL_ADC_Init+0x2f8>)
 80021cc:	f7ff ff0c 	bl	8001fe8 <LL_ADC_IsEnabled>
 80021d0:	4603      	mov	r3, r0
 80021d2:	4323      	orrs	r3, r4
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	bf0c      	ite	eq
 80021d8:	2301      	moveq	r3, #1
 80021da:	2300      	movne	r3, #0
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d012      	beq.n	8002208 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80021ea:	d004      	beq.n	80021f6 <HAL_ADC_Init+0x172>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a5f      	ldr	r2, [pc, #380]	@ (8002370 <HAL_ADC_Init+0x2ec>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d101      	bne.n	80021fa <HAL_ADC_Init+0x176>
 80021f6:	4a62      	ldr	r2, [pc, #392]	@ (8002380 <HAL_ADC_Init+0x2fc>)
 80021f8:	e000      	b.n	80021fc <HAL_ADC_Init+0x178>
 80021fa:	4a62      	ldr	r2, [pc, #392]	@ (8002384 <HAL_ADC_Init+0x300>)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	4619      	mov	r1, r3
 8002202:	4610      	mov	r0, r2
 8002204:	f7ff fcfe 	bl	8001c04 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	7f5b      	ldrb	r3, [r3, #29]
 800220c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002212:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002218:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800221e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002226:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002228:	4313      	orrs	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002232:	2b01      	cmp	r3, #1
 8002234:	d106      	bne.n	8002244 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800223a:	3b01      	subs	r3, #1
 800223c:	045b      	lsls	r3, r3, #17
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	4313      	orrs	r3, r2
 8002242:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002248:	2b00      	cmp	r3, #0
 800224a:	d009      	beq.n	8002260 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002250:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002258:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	4313      	orrs	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	68da      	ldr	r2, [r3, #12]
 8002266:	4b48      	ldr	r3, [pc, #288]	@ (8002388 <HAL_ADC_Init+0x304>)
 8002268:	4013      	ands	r3, r2
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	6812      	ldr	r2, [r2, #0]
 800226e:	69b9      	ldr	r1, [r7, #24]
 8002270:	430b      	orrs	r3, r1
 8002272:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	430a      	orrs	r2, r1
 8002288:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4618      	mov	r0, r3
 8002290:	f7ff fee4 	bl	800205c <LL_ADC_INJ_IsConversionOngoing>
 8002294:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d17f      	bne.n	800239c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d17c      	bne.n	800239c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80022a6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80022ae:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80022b0:	4313      	orrs	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80022be:	f023 0302 	bic.w	r3, r3, #2
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	6812      	ldr	r2, [r2, #0]
 80022c6:	69b9      	ldr	r1, [r7, #24]
 80022c8:	430b      	orrs	r3, r1
 80022ca:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d017      	beq.n	8002304 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	691a      	ldr	r2, [r3, #16]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80022e2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80022ec:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80022f0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	6911      	ldr	r1, [r2, #16]
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	6812      	ldr	r2, [r2, #0]
 80022fc:	430b      	orrs	r3, r1
 80022fe:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002302:	e013      	b.n	800232c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	691a      	ldr	r2, [r3, #16]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002312:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	6812      	ldr	r2, [r2, #0]
 8002320:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002324:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002328:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002332:	2b01      	cmp	r3, #1
 8002334:	d12a      	bne.n	800238c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002340:	f023 0304 	bic.w	r3, r3, #4
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800234c:	4311      	orrs	r1, r2
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002352:	4311      	orrs	r1, r2
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002358:	430a      	orrs	r2, r1
 800235a:	431a      	orrs	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f042 0201 	orr.w	r2, r2, #1
 8002364:	611a      	str	r2, [r3, #16]
 8002366:	e019      	b.n	800239c <HAL_ADC_Init+0x318>
 8002368:	20000000 	.word	0x20000000
 800236c:	053e2d63 	.word	0x053e2d63
 8002370:	50000100 	.word	0x50000100
 8002374:	50000400 	.word	0x50000400
 8002378:	50000500 	.word	0x50000500
 800237c:	50000600 	.word	0x50000600
 8002380:	50000300 	.word	0x50000300
 8002384:	50000700 	.word	0x50000700
 8002388:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	691a      	ldr	r2, [r3, #16]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f022 0201 	bic.w	r2, r2, #1
 800239a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	695b      	ldr	r3, [r3, #20]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d10c      	bne.n	80023be <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023aa:	f023 010f 	bic.w	r1, r3, #15
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a1b      	ldr	r3, [r3, #32]
 80023b2:	1e5a      	subs	r2, r3, #1
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	430a      	orrs	r2, r1
 80023ba:	631a      	str	r2, [r3, #48]	@ 0x30
 80023bc:	e007      	b.n	80023ce <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f022 020f 	bic.w	r2, r2, #15
 80023cc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023d2:	f023 0303 	bic.w	r3, r3, #3
 80023d6:	f043 0201 	orr.w	r2, r3, #1
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80023de:	e007      	b.n	80023f0 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023e4:	f043 0210 	orr.w	r2, r3, #16
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80023f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3724      	adds	r7, #36	@ 0x24
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd90      	pop	{r4, r7, pc}
 80023fa:	bf00      	nop

080023fc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002410:	d004      	beq.n	800241c <HAL_ADC_Start_DMA+0x20>
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a5a      	ldr	r2, [pc, #360]	@ (8002580 <HAL_ADC_Start_DMA+0x184>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d101      	bne.n	8002420 <HAL_ADC_Start_DMA+0x24>
 800241c:	4b59      	ldr	r3, [pc, #356]	@ (8002584 <HAL_ADC_Start_DMA+0x188>)
 800241e:	e000      	b.n	8002422 <HAL_ADC_Start_DMA+0x26>
 8002420:	4b59      	ldr	r3, [pc, #356]	@ (8002588 <HAL_ADC_Start_DMA+0x18c>)
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff fd62 	bl	8001eec <LL_ADC_GetMultimode>
 8002428:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff fe01 	bl	8002036 <LL_ADC_REG_IsConversionOngoing>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	f040 809b 	bne.w	8002572 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002442:	2b01      	cmp	r3, #1
 8002444:	d101      	bne.n	800244a <HAL_ADC_Start_DMA+0x4e>
 8002446:	2302      	movs	r3, #2
 8002448:	e096      	b.n	8002578 <HAL_ADC_Start_DMA+0x17c>
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2201      	movs	r2, #1
 800244e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a4d      	ldr	r2, [pc, #308]	@ (800258c <HAL_ADC_Start_DMA+0x190>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d008      	beq.n	800246e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d005      	beq.n	800246e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	2b05      	cmp	r3, #5
 8002466:	d002      	beq.n	800246e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	2b09      	cmp	r3, #9
 800246c:	d17a      	bne.n	8002564 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800246e:	68f8      	ldr	r0, [r7, #12]
 8002470:	f000 ff4c 	bl	800330c <ADC_Enable>
 8002474:	4603      	mov	r3, r0
 8002476:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002478:	7dfb      	ldrb	r3, [r7, #23]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d16d      	bne.n	800255a <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002482:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002486:	f023 0301 	bic.w	r3, r3, #1
 800248a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a3a      	ldr	r2, [pc, #232]	@ (8002580 <HAL_ADC_Start_DMA+0x184>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d009      	beq.n	80024b0 <HAL_ADC_Start_DMA+0xb4>
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a3b      	ldr	r2, [pc, #236]	@ (8002590 <HAL_ADC_Start_DMA+0x194>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d002      	beq.n	80024ac <HAL_ADC_Start_DMA+0xb0>
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	e003      	b.n	80024b4 <HAL_ADC_Start_DMA+0xb8>
 80024ac:	4b39      	ldr	r3, [pc, #228]	@ (8002594 <HAL_ADC_Start_DMA+0x198>)
 80024ae:	e001      	b.n	80024b4 <HAL_ADC_Start_DMA+0xb8>
 80024b0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80024b4:	68fa      	ldr	r2, [r7, #12]
 80024b6:	6812      	ldr	r2, [r2, #0]
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d002      	beq.n	80024c2 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d105      	bne.n	80024ce <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024c6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d006      	beq.n	80024e8 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024de:	f023 0206 	bic.w	r2, r3, #6
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	661a      	str	r2, [r3, #96]	@ 0x60
 80024e6:	e002      	b.n	80024ee <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2200      	movs	r2, #0
 80024ec:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024f2:	4a29      	ldr	r2, [pc, #164]	@ (8002598 <HAL_ADC_Start_DMA+0x19c>)
 80024f4:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024fa:	4a28      	ldr	r2, [pc, #160]	@ (800259c <HAL_ADC_Start_DMA+0x1a0>)
 80024fc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002502:	4a27      	ldr	r2, [pc, #156]	@ (80025a0 <HAL_ADC_Start_DMA+0x1a4>)
 8002504:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	221c      	movs	r2, #28
 800250c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	685a      	ldr	r2, [r3, #4]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f042 0210 	orr.w	r2, r2, #16
 8002524:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68da      	ldr	r2, [r3, #12]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f042 0201 	orr.w	r2, r2, #1
 8002534:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	3340      	adds	r3, #64	@ 0x40
 8002540:	4619      	mov	r1, r3
 8002542:	68ba      	ldr	r2, [r7, #8]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f001 fb23 	bl	8003b90 <HAL_DMA_Start_IT>
 800254a:	4603      	mov	r3, r0
 800254c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f7ff fd5b 	bl	800200e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002558:	e00d      	b.n	8002576 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8002562:	e008      	b.n	8002576 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2200      	movs	r2, #0
 800256c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002570:	e001      	b.n	8002576 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002572:	2302      	movs	r3, #2
 8002574:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002576:	7dfb      	ldrb	r3, [r7, #23]
}
 8002578:	4618      	mov	r0, r3
 800257a:	3718      	adds	r7, #24
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	50000100 	.word	0x50000100
 8002584:	50000300 	.word	0x50000300
 8002588:	50000700 	.word	0x50000700
 800258c:	50000600 	.word	0x50000600
 8002590:	50000500 	.word	0x50000500
 8002594:	50000400 	.word	0x50000400
 8002598:	08003439 	.word	0x08003439
 800259c:	08003511 	.word	0x08003511
 80025a0:	0800352d 	.word	0x0800352d

080025a4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b08a      	sub	sp, #40	@ 0x28
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80025ac:	2300      	movs	r3, #0
 80025ae:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025c8:	d004      	beq.n	80025d4 <HAL_ADC_IRQHandler+0x30>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a8e      	ldr	r2, [pc, #568]	@ (8002808 <HAL_ADC_IRQHandler+0x264>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d101      	bne.n	80025d8 <HAL_ADC_IRQHandler+0x34>
 80025d4:	4b8d      	ldr	r3, [pc, #564]	@ (800280c <HAL_ADC_IRQHandler+0x268>)
 80025d6:	e000      	b.n	80025da <HAL_ADC_IRQHandler+0x36>
 80025d8:	4b8d      	ldr	r3, [pc, #564]	@ (8002810 <HAL_ADC_IRQHandler+0x26c>)
 80025da:	4618      	mov	r0, r3
 80025dc:	f7ff fc86 	bl	8001eec <LL_ADC_GetMultimode>
 80025e0:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	f003 0302 	and.w	r3, r3, #2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d017      	beq.n	800261c <HAL_ADC_IRQHandler+0x78>
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d012      	beq.n	800261c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025fa:	f003 0310 	and.w	r3, r3, #16
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d105      	bne.n	800260e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002606:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f000 fff4 	bl	80035fc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2202      	movs	r2, #2
 800261a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	f003 0304 	and.w	r3, r3, #4
 8002622:	2b00      	cmp	r3, #0
 8002624:	d004      	beq.n	8002630 <HAL_ADC_IRQHandler+0x8c>
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	f003 0304 	and.w	r3, r3, #4
 800262c:	2b00      	cmp	r3, #0
 800262e:	d10b      	bne.n	8002648 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002636:	2b00      	cmp	r3, #0
 8002638:	f000 8094 	beq.w	8002764 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	f003 0308 	and.w	r3, r3, #8
 8002642:	2b00      	cmp	r3, #0
 8002644:	f000 808e 	beq.w	8002764 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800264c:	f003 0310 	and.w	r3, r3, #16
 8002650:	2b00      	cmp	r3, #0
 8002652:	d105      	bne.n	8002660 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002658:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4618      	mov	r0, r3
 8002666:	f7ff fb9f 	bl	8001da8 <LL_ADC_REG_IsTriggerSourceSWStart>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d072      	beq.n	8002756 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a64      	ldr	r2, [pc, #400]	@ (8002808 <HAL_ADC_IRQHandler+0x264>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d009      	beq.n	800268e <HAL_ADC_IRQHandler+0xea>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a65      	ldr	r2, [pc, #404]	@ (8002814 <HAL_ADC_IRQHandler+0x270>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d002      	beq.n	800268a <HAL_ADC_IRQHandler+0xe6>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	e003      	b.n	8002692 <HAL_ADC_IRQHandler+0xee>
 800268a:	4b63      	ldr	r3, [pc, #396]	@ (8002818 <HAL_ADC_IRQHandler+0x274>)
 800268c:	e001      	b.n	8002692 <HAL_ADC_IRQHandler+0xee>
 800268e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	6812      	ldr	r2, [r2, #0]
 8002696:	4293      	cmp	r3, r2
 8002698:	d008      	beq.n	80026ac <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d005      	beq.n	80026ac <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	2b05      	cmp	r3, #5
 80026a4:	d002      	beq.n	80026ac <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	2b09      	cmp	r3, #9
 80026aa:	d104      	bne.n	80026b6 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	623b      	str	r3, [r7, #32]
 80026b4:	e014      	b.n	80026e0 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a53      	ldr	r2, [pc, #332]	@ (8002808 <HAL_ADC_IRQHandler+0x264>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d009      	beq.n	80026d4 <HAL_ADC_IRQHandler+0x130>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a53      	ldr	r2, [pc, #332]	@ (8002814 <HAL_ADC_IRQHandler+0x270>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d002      	beq.n	80026d0 <HAL_ADC_IRQHandler+0x12c>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	e003      	b.n	80026d8 <HAL_ADC_IRQHandler+0x134>
 80026d0:	4b51      	ldr	r3, [pc, #324]	@ (8002818 <HAL_ADC_IRQHandler+0x274>)
 80026d2:	e001      	b.n	80026d8 <HAL_ADC_IRQHandler+0x134>
 80026d4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80026d8:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80026e0:	6a3b      	ldr	r3, [r7, #32]
 80026e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d135      	bne.n	8002756 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0308 	and.w	r3, r3, #8
 80026f4:	2b08      	cmp	r3, #8
 80026f6:	d12e      	bne.n	8002756 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7ff fc9a 	bl	8002036 <LL_ADC_REG_IsConversionOngoing>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d11a      	bne.n	800273e <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	685a      	ldr	r2, [r3, #4]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f022 020c 	bic.w	r2, r2, #12
 8002716:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800271c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002728:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d112      	bne.n	8002756 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002734:	f043 0201 	orr.w	r2, r3, #1
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800273c:	e00b      	b.n	8002756 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002742:	f043 0210 	orr.w	r2, r3, #16
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800274e:	f043 0201 	orr.w	r2, r3, #1
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f7fe fb4e 	bl	8000df8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	220c      	movs	r2, #12
 8002762:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	f003 0320 	and.w	r3, r3, #32
 800276a:	2b00      	cmp	r3, #0
 800276c:	d004      	beq.n	8002778 <HAL_ADC_IRQHandler+0x1d4>
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	f003 0320 	and.w	r3, r3, #32
 8002774:	2b00      	cmp	r3, #0
 8002776:	d10b      	bne.n	8002790 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800277e:	2b00      	cmp	r3, #0
 8002780:	f000 80b3 	beq.w	80028ea <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800278a:	2b00      	cmp	r3, #0
 800278c:	f000 80ad 	beq.w	80028ea <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002794:	f003 0310 	and.w	r3, r3, #16
 8002798:	2b00      	cmp	r3, #0
 800279a:	d105      	bne.n	80027a8 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027a0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff fb3a 	bl	8001e26 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80027b2:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff faf5 	bl	8001da8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80027be:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a10      	ldr	r2, [pc, #64]	@ (8002808 <HAL_ADC_IRQHandler+0x264>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d009      	beq.n	80027de <HAL_ADC_IRQHandler+0x23a>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a11      	ldr	r2, [pc, #68]	@ (8002814 <HAL_ADC_IRQHandler+0x270>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d002      	beq.n	80027da <HAL_ADC_IRQHandler+0x236>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	e003      	b.n	80027e2 <HAL_ADC_IRQHandler+0x23e>
 80027da:	4b0f      	ldr	r3, [pc, #60]	@ (8002818 <HAL_ADC_IRQHandler+0x274>)
 80027dc:	e001      	b.n	80027e2 <HAL_ADC_IRQHandler+0x23e>
 80027de:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	6812      	ldr	r2, [r2, #0]
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d008      	beq.n	80027fc <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d005      	beq.n	80027fc <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	2b06      	cmp	r3, #6
 80027f4:	d002      	beq.n	80027fc <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	2b07      	cmp	r3, #7
 80027fa:	d10f      	bne.n	800281c <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	623b      	str	r3, [r7, #32]
 8002804:	e01f      	b.n	8002846 <HAL_ADC_IRQHandler+0x2a2>
 8002806:	bf00      	nop
 8002808:	50000100 	.word	0x50000100
 800280c:	50000300 	.word	0x50000300
 8002810:	50000700 	.word	0x50000700
 8002814:	50000500 	.word	0x50000500
 8002818:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a8b      	ldr	r2, [pc, #556]	@ (8002a50 <HAL_ADC_IRQHandler+0x4ac>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d009      	beq.n	800283a <HAL_ADC_IRQHandler+0x296>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a8a      	ldr	r2, [pc, #552]	@ (8002a54 <HAL_ADC_IRQHandler+0x4b0>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d002      	beq.n	8002836 <HAL_ADC_IRQHandler+0x292>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	e003      	b.n	800283e <HAL_ADC_IRQHandler+0x29a>
 8002836:	4b88      	ldr	r3, [pc, #544]	@ (8002a58 <HAL_ADC_IRQHandler+0x4b4>)
 8002838:	e001      	b.n	800283e <HAL_ADC_IRQHandler+0x29a>
 800283a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800283e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d047      	beq.n	80028dc <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800284c:	6a3b      	ldr	r3, [r7, #32]
 800284e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d007      	beq.n	8002866 <HAL_ADC_IRQHandler+0x2c2>
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d03f      	beq.n	80028dc <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800285c:	6a3b      	ldr	r3, [r7, #32]
 800285e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002862:	2b00      	cmp	r3, #0
 8002864:	d13a      	bne.n	80028dc <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002870:	2b40      	cmp	r3, #64	@ 0x40
 8002872:	d133      	bne.n	80028dc <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002874:	6a3b      	ldr	r3, [r7, #32]
 8002876:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d12e      	bne.n	80028dc <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	f7ff fbea 	bl	800205c <LL_ADC_INJ_IsConversionOngoing>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d11a      	bne.n	80028c4 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	685a      	ldr	r2, [r3, #4]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800289c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028a2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d112      	bne.n	80028dc <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ba:	f043 0201 	orr.w	r2, r3, #1
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80028c2:	e00b      	b.n	80028dc <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028c8:	f043 0210 	orr.w	r2, r3, #16
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028d4:	f043 0201 	orr.w	r2, r3, #1
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 fe65 	bl	80035ac <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2260      	movs	r2, #96	@ 0x60
 80028e8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d011      	beq.n	8002918 <HAL_ADC_IRQHandler+0x374>
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00c      	beq.n	8002918 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002902:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 f8aa 	bl	8002a64 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2280      	movs	r2, #128	@ 0x80
 8002916:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800291e:	2b00      	cmp	r3, #0
 8002920:	d012      	beq.n	8002948 <HAL_ADC_IRQHandler+0x3a4>
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002928:	2b00      	cmp	r3, #0
 800292a:	d00d      	beq.n	8002948 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002930:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f000 fe4b 	bl	80035d4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002946:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800294e:	2b00      	cmp	r3, #0
 8002950:	d012      	beq.n	8002978 <HAL_ADC_IRQHandler+0x3d4>
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002958:	2b00      	cmp	r3, #0
 800295a:	d00d      	beq.n	8002978 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002960:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f000 fe3d 	bl	80035e8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002976:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	f003 0310 	and.w	r3, r3, #16
 800297e:	2b00      	cmp	r3, #0
 8002980:	d043      	beq.n	8002a0a <HAL_ADC_IRQHandler+0x466>
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	f003 0310 	and.w	r3, r3, #16
 8002988:	2b00      	cmp	r3, #0
 800298a:	d03e      	beq.n	8002a0a <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002990:	2b00      	cmp	r3, #0
 8002992:	d102      	bne.n	800299a <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8002994:	2301      	movs	r3, #1
 8002996:	627b      	str	r3, [r7, #36]	@ 0x24
 8002998:	e021      	b.n	80029de <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d015      	beq.n	80029cc <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80029a8:	d004      	beq.n	80029b4 <HAL_ADC_IRQHandler+0x410>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a28      	ldr	r2, [pc, #160]	@ (8002a50 <HAL_ADC_IRQHandler+0x4ac>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d101      	bne.n	80029b8 <HAL_ADC_IRQHandler+0x414>
 80029b4:	4b29      	ldr	r3, [pc, #164]	@ (8002a5c <HAL_ADC_IRQHandler+0x4b8>)
 80029b6:	e000      	b.n	80029ba <HAL_ADC_IRQHandler+0x416>
 80029b8:	4b29      	ldr	r3, [pc, #164]	@ (8002a60 <HAL_ADC_IRQHandler+0x4bc>)
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff faa4 	bl	8001f08 <LL_ADC_GetMultiDMATransfer>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00b      	beq.n	80029de <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80029c6:	2301      	movs	r3, #1
 80029c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80029ca:	e008      	b.n	80029de <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80029da:	2301      	movs	r3, #1
 80029dc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80029de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d10e      	bne.n	8002a02 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029e8:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029f4:	f043 0202 	orr.w	r2, r3, #2
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f000 f83b 	bl	8002a78 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2210      	movs	r2, #16
 8002a08:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d018      	beq.n	8002a46 <HAL_ADC_IRQHandler+0x4a2>
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d013      	beq.n	8002a46 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a22:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a2e:	f043 0208 	orr.w	r2, r3, #8
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a3e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f000 fdbd 	bl	80035c0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002a46:	bf00      	nop
 8002a48:	3728      	adds	r7, #40	@ 0x28
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	50000100 	.word	0x50000100
 8002a54:	50000500 	.word	0x50000500
 8002a58:	50000400 	.word	0x50000400
 8002a5c:	50000300 	.word	0x50000300
 8002a60:	50000700 	.word	0x50000700

08002a64 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002a80:	bf00      	nop
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b0b6      	sub	sp, #216	@ 0xd8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a96:	2300      	movs	r3, #0
 8002a98:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d102      	bne.n	8002ab0 <HAL_ADC_ConfigChannel+0x24>
 8002aaa:	2302      	movs	r3, #2
 8002aac:	f000 bc13 	b.w	80032d6 <HAL_ADC_ConfigChannel+0x84a>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7ff faba 	bl	8002036 <LL_ADC_REG_IsConversionOngoing>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	f040 83f3 	bne.w	80032b0 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6818      	ldr	r0, [r3, #0]
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	6859      	ldr	r1, [r3, #4]
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	f7ff f979 	bl	8001dce <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7ff faa8 	bl	8002036 <LL_ADC_REG_IsConversionOngoing>
 8002ae6:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7ff fab4 	bl	800205c <LL_ADC_INJ_IsConversionOngoing>
 8002af4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002af8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f040 81d9 	bne.w	8002eb4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b02:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	f040 81d4 	bne.w	8002eb4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002b14:	d10f      	bne.n	8002b36 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6818      	ldr	r0, [r3, #0]
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	4619      	mov	r1, r3
 8002b22:	f7ff f993 	bl	8001e4c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7ff f927 	bl	8001d82 <LL_ADC_SetSamplingTimeCommonConfig>
 8002b34:	e00e      	b.n	8002b54 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6818      	ldr	r0, [r3, #0]
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	6819      	ldr	r1, [r3, #0]
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	461a      	mov	r2, r3
 8002b44:	f7ff f982 	bl	8001e4c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7ff f917 	bl	8001d82 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	695a      	ldr	r2, [r3, #20]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	08db      	lsrs	r3, r3, #3
 8002b60:	f003 0303 	and.w	r3, r3, #3
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	2b04      	cmp	r3, #4
 8002b74:	d022      	beq.n	8002bbc <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6818      	ldr	r0, [r3, #0]
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	6919      	ldr	r1, [r3, #16]
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002b86:	f7ff f871 	bl	8001c6c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6818      	ldr	r0, [r3, #0]
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	6919      	ldr	r1, [r3, #16]
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	461a      	mov	r2, r3
 8002b98:	f7ff f8bd 	bl	8001d16 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6818      	ldr	r0, [r3, #0]
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d102      	bne.n	8002bb2 <HAL_ADC_ConfigChannel+0x126>
 8002bac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002bb0:	e000      	b.n	8002bb4 <HAL_ADC_ConfigChannel+0x128>
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	f7ff f8c9 	bl	8001d4c <LL_ADC_SetOffsetSaturation>
 8002bba:	e17b      	b.n	8002eb4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7ff f876 	bl	8001cb4 <LL_ADC_GetOffsetChannel>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d10a      	bne.n	8002be8 <HAL_ADC_ConfigChannel+0x15c>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2100      	movs	r1, #0
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7ff f86b 	bl	8001cb4 <LL_ADC_GetOffsetChannel>
 8002bde:	4603      	mov	r3, r0
 8002be0:	0e9b      	lsrs	r3, r3, #26
 8002be2:	f003 021f 	and.w	r2, r3, #31
 8002be6:	e01e      	b.n	8002c26 <HAL_ADC_ConfigChannel+0x19a>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2100      	movs	r1, #0
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7ff f860 	bl	8001cb4 <LL_ADC_GetOffsetChannel>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002bfe:	fa93 f3a3 	rbit	r3, r3
 8002c02:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002c06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002c0a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002c0e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d101      	bne.n	8002c1a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002c16:	2320      	movs	r3, #32
 8002c18:	e004      	b.n	8002c24 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002c1a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c1e:	fab3 f383 	clz	r3, r3
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d105      	bne.n	8002c3e <HAL_ADC_ConfigChannel+0x1b2>
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	0e9b      	lsrs	r3, r3, #26
 8002c38:	f003 031f 	and.w	r3, r3, #31
 8002c3c:	e018      	b.n	8002c70 <HAL_ADC_ConfigChannel+0x1e4>
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c46:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002c4a:	fa93 f3a3 	rbit	r3, r3
 8002c4e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002c52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c56:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002c5a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002c62:	2320      	movs	r3, #32
 8002c64:	e004      	b.n	8002c70 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002c66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c6a:	fab3 f383 	clz	r3, r3
 8002c6e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d106      	bne.n	8002c82 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	2100      	movs	r1, #0
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7ff f82f 	bl	8001ce0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2101      	movs	r1, #1
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7ff f813 	bl	8001cb4 <LL_ADC_GetOffsetChannel>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d10a      	bne.n	8002cae <HAL_ADC_ConfigChannel+0x222>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2101      	movs	r1, #1
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7ff f808 	bl	8001cb4 <LL_ADC_GetOffsetChannel>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	0e9b      	lsrs	r3, r3, #26
 8002ca8:	f003 021f 	and.w	r2, r3, #31
 8002cac:	e01e      	b.n	8002cec <HAL_ADC_ConfigChannel+0x260>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2101      	movs	r1, #1
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7fe fffd 	bl	8001cb4 <LL_ADC_GetOffsetChannel>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002cc4:	fa93 f3a3 	rbit	r3, r3
 8002cc8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002ccc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002cd0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002cd4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d101      	bne.n	8002ce0 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002cdc:	2320      	movs	r3, #32
 8002cde:	e004      	b.n	8002cea <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002ce0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002ce4:	fab3 f383 	clz	r3, r3
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d105      	bne.n	8002d04 <HAL_ADC_ConfigChannel+0x278>
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	0e9b      	lsrs	r3, r3, #26
 8002cfe:	f003 031f 	and.w	r3, r3, #31
 8002d02:	e018      	b.n	8002d36 <HAL_ADC_ConfigChannel+0x2aa>
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002d10:	fa93 f3a3 	rbit	r3, r3
 8002d14:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002d18:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002d1c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002d20:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d101      	bne.n	8002d2c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002d28:	2320      	movs	r3, #32
 8002d2a:	e004      	b.n	8002d36 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002d2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002d30:	fab3 f383 	clz	r3, r3
 8002d34:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d106      	bne.n	8002d48 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	2101      	movs	r1, #1
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7fe ffcc 	bl	8001ce0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2102      	movs	r1, #2
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7fe ffb0 	bl	8001cb4 <LL_ADC_GetOffsetChannel>
 8002d54:	4603      	mov	r3, r0
 8002d56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d10a      	bne.n	8002d74 <HAL_ADC_ConfigChannel+0x2e8>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2102      	movs	r1, #2
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7fe ffa5 	bl	8001cb4 <LL_ADC_GetOffsetChannel>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	0e9b      	lsrs	r3, r3, #26
 8002d6e:	f003 021f 	and.w	r2, r3, #31
 8002d72:	e01e      	b.n	8002db2 <HAL_ADC_ConfigChannel+0x326>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2102      	movs	r1, #2
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7fe ff9a 	bl	8001cb4 <LL_ADC_GetOffsetChannel>
 8002d80:	4603      	mov	r3, r0
 8002d82:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d86:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d8a:	fa93 f3a3 	rbit	r3, r3
 8002d8e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002d92:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d96:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002d9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002da2:	2320      	movs	r3, #32
 8002da4:	e004      	b.n	8002db0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002da6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002daa:	fab3 f383 	clz	r3, r3
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d105      	bne.n	8002dca <HAL_ADC_ConfigChannel+0x33e>
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	0e9b      	lsrs	r3, r3, #26
 8002dc4:	f003 031f 	and.w	r3, r3, #31
 8002dc8:	e016      	b.n	8002df8 <HAL_ADC_ConfigChannel+0x36c>
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002dd6:	fa93 f3a3 	rbit	r3, r3
 8002dda:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002ddc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002dde:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002de2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d101      	bne.n	8002dee <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002dea:	2320      	movs	r3, #32
 8002dec:	e004      	b.n	8002df8 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002dee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002df2:	fab3 f383 	clz	r3, r3
 8002df6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d106      	bne.n	8002e0a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2200      	movs	r2, #0
 8002e02:	2102      	movs	r1, #2
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7fe ff6b 	bl	8001ce0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2103      	movs	r1, #3
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7fe ff4f 	bl	8001cb4 <LL_ADC_GetOffsetChannel>
 8002e16:	4603      	mov	r3, r0
 8002e18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d10a      	bne.n	8002e36 <HAL_ADC_ConfigChannel+0x3aa>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2103      	movs	r1, #3
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7fe ff44 	bl	8001cb4 <LL_ADC_GetOffsetChannel>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	0e9b      	lsrs	r3, r3, #26
 8002e30:	f003 021f 	and.w	r2, r3, #31
 8002e34:	e017      	b.n	8002e66 <HAL_ADC_ConfigChannel+0x3da>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2103      	movs	r1, #3
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7fe ff39 	bl	8001cb4 <LL_ADC_GetOffsetChannel>
 8002e42:	4603      	mov	r3, r0
 8002e44:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e46:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e48:	fa93 f3a3 	rbit	r3, r3
 8002e4c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002e4e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002e50:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002e52:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d101      	bne.n	8002e5c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002e58:	2320      	movs	r3, #32
 8002e5a:	e003      	b.n	8002e64 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002e5c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002e5e:	fab3 f383 	clz	r3, r3
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d105      	bne.n	8002e7e <HAL_ADC_ConfigChannel+0x3f2>
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	0e9b      	lsrs	r3, r3, #26
 8002e78:	f003 031f 	and.w	r3, r3, #31
 8002e7c:	e011      	b.n	8002ea2 <HAL_ADC_ConfigChannel+0x416>
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e84:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e86:	fa93 f3a3 	rbit	r3, r3
 8002e8a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002e8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002e8e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002e90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002e96:	2320      	movs	r3, #32
 8002e98:	e003      	b.n	8002ea2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002e9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e9c:	fab3 f383 	clz	r3, r3
 8002ea0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d106      	bne.n	8002eb4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	2103      	movs	r1, #3
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7fe ff16 	bl	8001ce0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7ff f895 	bl	8001fe8 <LL_ADC_IsEnabled>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	f040 813d 	bne.w	8003140 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6818      	ldr	r0, [r3, #0]
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	6819      	ldr	r1, [r3, #0]
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	f7fe ffe6 	bl	8001ea4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	4aa2      	ldr	r2, [pc, #648]	@ (8003168 <HAL_ADC_ConfigChannel+0x6dc>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	f040 812e 	bne.w	8003140 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d10b      	bne.n	8002f0c <HAL_ADC_ConfigChannel+0x480>
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	0e9b      	lsrs	r3, r3, #26
 8002efa:	3301      	adds	r3, #1
 8002efc:	f003 031f 	and.w	r3, r3, #31
 8002f00:	2b09      	cmp	r3, #9
 8002f02:	bf94      	ite	ls
 8002f04:	2301      	movls	r3, #1
 8002f06:	2300      	movhi	r3, #0
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	e019      	b.n	8002f40 <HAL_ADC_ConfigChannel+0x4b4>
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f14:	fa93 f3a3 	rbit	r3, r3
 8002f18:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002f1a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f1c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002f1e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d101      	bne.n	8002f28 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002f24:	2320      	movs	r3, #32
 8002f26:	e003      	b.n	8002f30 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002f28:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f2a:	fab3 f383 	clz	r3, r3
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	3301      	adds	r3, #1
 8002f32:	f003 031f 	and.w	r3, r3, #31
 8002f36:	2b09      	cmp	r3, #9
 8002f38:	bf94      	ite	ls
 8002f3a:	2301      	movls	r3, #1
 8002f3c:	2300      	movhi	r3, #0
 8002f3e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d079      	beq.n	8003038 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d107      	bne.n	8002f60 <HAL_ADC_ConfigChannel+0x4d4>
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	0e9b      	lsrs	r3, r3, #26
 8002f56:	3301      	adds	r3, #1
 8002f58:	069b      	lsls	r3, r3, #26
 8002f5a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f5e:	e015      	b.n	8002f8c <HAL_ADC_ConfigChannel+0x500>
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f68:	fa93 f3a3 	rbit	r3, r3
 8002f6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002f6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f70:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002f72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d101      	bne.n	8002f7c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002f78:	2320      	movs	r3, #32
 8002f7a:	e003      	b.n	8002f84 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002f7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f7e:	fab3 f383 	clz	r3, r3
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	3301      	adds	r3, #1
 8002f86:	069b      	lsls	r3, r3, #26
 8002f88:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d109      	bne.n	8002fac <HAL_ADC_ConfigChannel+0x520>
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	0e9b      	lsrs	r3, r3, #26
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	f003 031f 	and.w	r3, r3, #31
 8002fa4:	2101      	movs	r1, #1
 8002fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8002faa:	e017      	b.n	8002fdc <HAL_ADC_ConfigChannel+0x550>
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fb4:	fa93 f3a3 	rbit	r3, r3
 8002fb8:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002fba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fbc:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002fbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d101      	bne.n	8002fc8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002fc4:	2320      	movs	r3, #32
 8002fc6:	e003      	b.n	8002fd0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002fc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002fca:	fab3 f383 	clz	r3, r3
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	f003 031f 	and.w	r3, r3, #31
 8002fd6:	2101      	movs	r1, #1
 8002fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fdc:	ea42 0103 	orr.w	r1, r2, r3
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d10a      	bne.n	8003002 <HAL_ADC_ConfigChannel+0x576>
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	0e9b      	lsrs	r3, r3, #26
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	f003 021f 	and.w	r2, r3, #31
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	4413      	add	r3, r2
 8002ffe:	051b      	lsls	r3, r3, #20
 8003000:	e018      	b.n	8003034 <HAL_ADC_ConfigChannel+0x5a8>
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800300a:	fa93 f3a3 	rbit	r3, r3
 800300e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003010:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003012:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003014:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800301a:	2320      	movs	r3, #32
 800301c:	e003      	b.n	8003026 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800301e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003020:	fab3 f383 	clz	r3, r3
 8003024:	b2db      	uxtb	r3, r3
 8003026:	3301      	adds	r3, #1
 8003028:	f003 021f 	and.w	r2, r3, #31
 800302c:	4613      	mov	r3, r2
 800302e:	005b      	lsls	r3, r3, #1
 8003030:	4413      	add	r3, r2
 8003032:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003034:	430b      	orrs	r3, r1
 8003036:	e07e      	b.n	8003136 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003040:	2b00      	cmp	r3, #0
 8003042:	d107      	bne.n	8003054 <HAL_ADC_ConfigChannel+0x5c8>
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	0e9b      	lsrs	r3, r3, #26
 800304a:	3301      	adds	r3, #1
 800304c:	069b      	lsls	r3, r3, #26
 800304e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003052:	e015      	b.n	8003080 <HAL_ADC_ConfigChannel+0x5f4>
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800305c:	fa93 f3a3 	rbit	r3, r3
 8003060:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003064:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003068:	2b00      	cmp	r3, #0
 800306a:	d101      	bne.n	8003070 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800306c:	2320      	movs	r3, #32
 800306e:	e003      	b.n	8003078 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003072:	fab3 f383 	clz	r3, r3
 8003076:	b2db      	uxtb	r3, r3
 8003078:	3301      	adds	r3, #1
 800307a:	069b      	lsls	r3, r3, #26
 800307c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003088:	2b00      	cmp	r3, #0
 800308a:	d109      	bne.n	80030a0 <HAL_ADC_ConfigChannel+0x614>
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	0e9b      	lsrs	r3, r3, #26
 8003092:	3301      	adds	r3, #1
 8003094:	f003 031f 	and.w	r3, r3, #31
 8003098:	2101      	movs	r1, #1
 800309a:	fa01 f303 	lsl.w	r3, r1, r3
 800309e:	e017      	b.n	80030d0 <HAL_ADC_ConfigChannel+0x644>
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a6:	6a3b      	ldr	r3, [r7, #32]
 80030a8:	fa93 f3a3 	rbit	r3, r3
 80030ac:	61fb      	str	r3, [r7, #28]
  return result;
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80030b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d101      	bne.n	80030bc <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80030b8:	2320      	movs	r3, #32
 80030ba:	e003      	b.n	80030c4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80030bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030be:	fab3 f383 	clz	r3, r3
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	3301      	adds	r3, #1
 80030c6:	f003 031f 	and.w	r3, r3, #31
 80030ca:	2101      	movs	r1, #1
 80030cc:	fa01 f303 	lsl.w	r3, r1, r3
 80030d0:	ea42 0103 	orr.w	r1, r2, r3
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d10d      	bne.n	80030fc <HAL_ADC_ConfigChannel+0x670>
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	0e9b      	lsrs	r3, r3, #26
 80030e6:	3301      	adds	r3, #1
 80030e8:	f003 021f 	and.w	r2, r3, #31
 80030ec:	4613      	mov	r3, r2
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	4413      	add	r3, r2
 80030f2:	3b1e      	subs	r3, #30
 80030f4:	051b      	lsls	r3, r3, #20
 80030f6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80030fa:	e01b      	b.n	8003134 <HAL_ADC_ConfigChannel+0x6a8>
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	fa93 f3a3 	rbit	r3, r3
 8003108:	613b      	str	r3, [r7, #16]
  return result;
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d101      	bne.n	8003118 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003114:	2320      	movs	r3, #32
 8003116:	e003      	b.n	8003120 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	fab3 f383 	clz	r3, r3
 800311e:	b2db      	uxtb	r3, r3
 8003120:	3301      	adds	r3, #1
 8003122:	f003 021f 	and.w	r2, r3, #31
 8003126:	4613      	mov	r3, r2
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	4413      	add	r3, r2
 800312c:	3b1e      	subs	r3, #30
 800312e:	051b      	lsls	r3, r3, #20
 8003130:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003134:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003136:	683a      	ldr	r2, [r7, #0]
 8003138:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800313a:	4619      	mov	r1, r3
 800313c:	f7fe fe86 	bl	8001e4c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	4b09      	ldr	r3, [pc, #36]	@ (800316c <HAL_ADC_ConfigChannel+0x6e0>)
 8003146:	4013      	ands	r3, r2
 8003148:	2b00      	cmp	r3, #0
 800314a:	f000 80be 	beq.w	80032ca <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003156:	d004      	beq.n	8003162 <HAL_ADC_ConfigChannel+0x6d6>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a04      	ldr	r2, [pc, #16]	@ (8003170 <HAL_ADC_ConfigChannel+0x6e4>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d10a      	bne.n	8003178 <HAL_ADC_ConfigChannel+0x6ec>
 8003162:	4b04      	ldr	r3, [pc, #16]	@ (8003174 <HAL_ADC_ConfigChannel+0x6e8>)
 8003164:	e009      	b.n	800317a <HAL_ADC_ConfigChannel+0x6ee>
 8003166:	bf00      	nop
 8003168:	407f0000 	.word	0x407f0000
 800316c:	80080000 	.word	0x80080000
 8003170:	50000100 	.word	0x50000100
 8003174:	50000300 	.word	0x50000300
 8003178:	4b59      	ldr	r3, [pc, #356]	@ (80032e0 <HAL_ADC_ConfigChannel+0x854>)
 800317a:	4618      	mov	r0, r3
 800317c:	f7fe fd68 	bl	8001c50 <LL_ADC_GetCommonPathInternalCh>
 8003180:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a56      	ldr	r2, [pc, #344]	@ (80032e4 <HAL_ADC_ConfigChannel+0x858>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d004      	beq.n	8003198 <HAL_ADC_ConfigChannel+0x70c>
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a55      	ldr	r2, [pc, #340]	@ (80032e8 <HAL_ADC_ConfigChannel+0x85c>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d13a      	bne.n	800320e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003198:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800319c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d134      	bne.n	800320e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031ac:	d005      	beq.n	80031ba <HAL_ADC_ConfigChannel+0x72e>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a4e      	ldr	r2, [pc, #312]	@ (80032ec <HAL_ADC_ConfigChannel+0x860>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	f040 8085 	bne.w	80032c4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031c2:	d004      	beq.n	80031ce <HAL_ADC_ConfigChannel+0x742>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a49      	ldr	r2, [pc, #292]	@ (80032f0 <HAL_ADC_ConfigChannel+0x864>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d101      	bne.n	80031d2 <HAL_ADC_ConfigChannel+0x746>
 80031ce:	4a49      	ldr	r2, [pc, #292]	@ (80032f4 <HAL_ADC_ConfigChannel+0x868>)
 80031d0:	e000      	b.n	80031d4 <HAL_ADC_ConfigChannel+0x748>
 80031d2:	4a43      	ldr	r2, [pc, #268]	@ (80032e0 <HAL_ADC_ConfigChannel+0x854>)
 80031d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80031d8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80031dc:	4619      	mov	r1, r3
 80031de:	4610      	mov	r0, r2
 80031e0:	f7fe fd23 	bl	8001c2a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031e4:	4b44      	ldr	r3, [pc, #272]	@ (80032f8 <HAL_ADC_ConfigChannel+0x86c>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	099b      	lsrs	r3, r3, #6
 80031ea:	4a44      	ldr	r2, [pc, #272]	@ (80032fc <HAL_ADC_ConfigChannel+0x870>)
 80031ec:	fba2 2303 	umull	r2, r3, r2, r3
 80031f0:	099b      	lsrs	r3, r3, #6
 80031f2:	1c5a      	adds	r2, r3, #1
 80031f4:	4613      	mov	r3, r2
 80031f6:	005b      	lsls	r3, r3, #1
 80031f8:	4413      	add	r3, r2
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80031fe:	e002      	b.n	8003206 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	3b01      	subs	r3, #1
 8003204:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1f9      	bne.n	8003200 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800320c:	e05a      	b.n	80032c4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a3b      	ldr	r2, [pc, #236]	@ (8003300 <HAL_ADC_ConfigChannel+0x874>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d125      	bne.n	8003264 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003218:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800321c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d11f      	bne.n	8003264 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a31      	ldr	r2, [pc, #196]	@ (80032f0 <HAL_ADC_ConfigChannel+0x864>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d104      	bne.n	8003238 <HAL_ADC_ConfigChannel+0x7ac>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a34      	ldr	r2, [pc, #208]	@ (8003304 <HAL_ADC_ConfigChannel+0x878>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d047      	beq.n	80032c8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003240:	d004      	beq.n	800324c <HAL_ADC_ConfigChannel+0x7c0>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a2a      	ldr	r2, [pc, #168]	@ (80032f0 <HAL_ADC_ConfigChannel+0x864>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d101      	bne.n	8003250 <HAL_ADC_ConfigChannel+0x7c4>
 800324c:	4a29      	ldr	r2, [pc, #164]	@ (80032f4 <HAL_ADC_ConfigChannel+0x868>)
 800324e:	e000      	b.n	8003252 <HAL_ADC_ConfigChannel+0x7c6>
 8003250:	4a23      	ldr	r2, [pc, #140]	@ (80032e0 <HAL_ADC_ConfigChannel+0x854>)
 8003252:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003256:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800325a:	4619      	mov	r1, r3
 800325c:	4610      	mov	r0, r2
 800325e:	f7fe fce4 	bl	8001c2a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003262:	e031      	b.n	80032c8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a27      	ldr	r2, [pc, #156]	@ (8003308 <HAL_ADC_ConfigChannel+0x87c>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d12d      	bne.n	80032ca <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800326e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003272:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d127      	bne.n	80032ca <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a1c      	ldr	r2, [pc, #112]	@ (80032f0 <HAL_ADC_ConfigChannel+0x864>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d022      	beq.n	80032ca <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800328c:	d004      	beq.n	8003298 <HAL_ADC_ConfigChannel+0x80c>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a17      	ldr	r2, [pc, #92]	@ (80032f0 <HAL_ADC_ConfigChannel+0x864>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d101      	bne.n	800329c <HAL_ADC_ConfigChannel+0x810>
 8003298:	4a16      	ldr	r2, [pc, #88]	@ (80032f4 <HAL_ADC_ConfigChannel+0x868>)
 800329a:	e000      	b.n	800329e <HAL_ADC_ConfigChannel+0x812>
 800329c:	4a10      	ldr	r2, [pc, #64]	@ (80032e0 <HAL_ADC_ConfigChannel+0x854>)
 800329e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80032a2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80032a6:	4619      	mov	r1, r3
 80032a8:	4610      	mov	r0, r2
 80032aa:	f7fe fcbe 	bl	8001c2a <LL_ADC_SetCommonPathInternalCh>
 80032ae:	e00c      	b.n	80032ca <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032b4:	f043 0220 	orr.w	r2, r3, #32
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80032c2:	e002      	b.n	80032ca <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80032c4:	bf00      	nop
 80032c6:	e000      	b.n	80032ca <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80032c8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80032d2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	37d8      	adds	r7, #216	@ 0xd8
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	50000700 	.word	0x50000700
 80032e4:	c3210000 	.word	0xc3210000
 80032e8:	90c00010 	.word	0x90c00010
 80032ec:	50000600 	.word	0x50000600
 80032f0:	50000100 	.word	0x50000100
 80032f4:	50000300 	.word	0x50000300
 80032f8:	20000000 	.word	0x20000000
 80032fc:	053e2d63 	.word	0x053e2d63
 8003300:	c7520000 	.word	0xc7520000
 8003304:	50000500 	.word	0x50000500
 8003308:	cb840000 	.word	0xcb840000

0800330c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003314:	2300      	movs	r3, #0
 8003316:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4618      	mov	r0, r3
 800331e:	f7fe fe63 	bl	8001fe8 <LL_ADC_IsEnabled>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d176      	bne.n	8003416 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	689a      	ldr	r2, [r3, #8]
 800332e:	4b3c      	ldr	r3, [pc, #240]	@ (8003420 <ADC_Enable+0x114>)
 8003330:	4013      	ands	r3, r2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00d      	beq.n	8003352 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800333a:	f043 0210 	orr.w	r2, r3, #16
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003346:	f043 0201 	orr.w	r2, r3, #1
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e062      	b.n	8003418 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4618      	mov	r0, r3
 8003358:	f7fe fe32 	bl	8001fc0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003364:	d004      	beq.n	8003370 <ADC_Enable+0x64>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a2e      	ldr	r2, [pc, #184]	@ (8003424 <ADC_Enable+0x118>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d101      	bne.n	8003374 <ADC_Enable+0x68>
 8003370:	4b2d      	ldr	r3, [pc, #180]	@ (8003428 <ADC_Enable+0x11c>)
 8003372:	e000      	b.n	8003376 <ADC_Enable+0x6a>
 8003374:	4b2d      	ldr	r3, [pc, #180]	@ (800342c <ADC_Enable+0x120>)
 8003376:	4618      	mov	r0, r3
 8003378:	f7fe fc6a 	bl	8001c50 <LL_ADC_GetCommonPathInternalCh>
 800337c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800337e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003382:	2b00      	cmp	r3, #0
 8003384:	d013      	beq.n	80033ae <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003386:	4b2a      	ldr	r3, [pc, #168]	@ (8003430 <ADC_Enable+0x124>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	099b      	lsrs	r3, r3, #6
 800338c:	4a29      	ldr	r2, [pc, #164]	@ (8003434 <ADC_Enable+0x128>)
 800338e:	fba2 2303 	umull	r2, r3, r2, r3
 8003392:	099b      	lsrs	r3, r3, #6
 8003394:	1c5a      	adds	r2, r3, #1
 8003396:	4613      	mov	r3, r2
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	4413      	add	r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80033a0:	e002      	b.n	80033a8 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	3b01      	subs	r3, #1
 80033a6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d1f9      	bne.n	80033a2 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80033ae:	f7fe fb9b 	bl	8001ae8 <HAL_GetTick>
 80033b2:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80033b4:	e028      	b.n	8003408 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7fe fe14 	bl	8001fe8 <LL_ADC_IsEnabled>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d104      	bne.n	80033d0 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7fe fdf8 	bl	8001fc0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80033d0:	f7fe fb8a 	bl	8001ae8 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d914      	bls.n	8003408 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0301 	and.w	r3, r3, #1
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d00d      	beq.n	8003408 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033f0:	f043 0210 	orr.w	r2, r3, #16
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033fc:	f043 0201 	orr.w	r2, r3, #1
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e007      	b.n	8003418 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	2b01      	cmp	r3, #1
 8003414:	d1cf      	bne.n	80033b6 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3710      	adds	r7, #16
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	8000003f 	.word	0x8000003f
 8003424:	50000100 	.word	0x50000100
 8003428:	50000300 	.word	0x50000300
 800342c:	50000700 	.word	0x50000700
 8003430:	20000000 	.word	0x20000000
 8003434:	053e2d63 	.word	0x053e2d63

08003438 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003444:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800344a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800344e:	2b00      	cmp	r3, #0
 8003450:	d14b      	bne.n	80034ea <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003456:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0308 	and.w	r3, r3, #8
 8003468:	2b00      	cmp	r3, #0
 800346a:	d021      	beq.n	80034b0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4618      	mov	r0, r3
 8003472:	f7fe fc99 	bl	8001da8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d032      	beq.n	80034e2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d12b      	bne.n	80034e2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800348e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800349a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d11f      	bne.n	80034e2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034a6:	f043 0201 	orr.w	r2, r3, #1
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	65da      	str	r2, [r3, #92]	@ 0x5c
 80034ae:	e018      	b.n	80034e2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d111      	bne.n	80034e2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034c2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d105      	bne.n	80034e2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034da:	f043 0201 	orr.w	r2, r3, #1
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80034e2:	68f8      	ldr	r0, [r7, #12]
 80034e4:	f7fd fc88 	bl	8000df8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80034e8:	e00e      	b.n	8003508 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ee:	f003 0310 	and.w	r3, r3, #16
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d003      	beq.n	80034fe <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f7ff fabe 	bl	8002a78 <HAL_ADC_ErrorCallback>
}
 80034fc:	e004      	b.n	8003508 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003502:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	4798      	blx	r3
}
 8003508:	bf00      	nop
 800350a:	3710      	adds	r7, #16
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800351c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800351e:	68f8      	ldr	r0, [r7, #12]
 8003520:	f7fd fc40 	bl	8000da4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003524:	bf00      	nop
 8003526:	3710      	adds	r7, #16
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003538:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800353e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800354a:	f043 0204 	orr.w	r2, r3, #4
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003552:	68f8      	ldr	r0, [r7, #12]
 8003554:	f7ff fa90 	bl	8002a78 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003558:	bf00      	nop
 800355a:	3710      	adds	r7, #16
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <LL_ADC_IsEnabled>:
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f003 0301 	and.w	r3, r3, #1
 8003570:	2b01      	cmp	r3, #1
 8003572:	d101      	bne.n	8003578 <LL_ADC_IsEnabled+0x18>
 8003574:	2301      	movs	r3, #1
 8003576:	e000      	b.n	800357a <LL_ADC_IsEnabled+0x1a>
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	370c      	adds	r7, #12
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr

08003586 <LL_ADC_REG_IsConversionOngoing>:
{
 8003586:	b480      	push	{r7}
 8003588:	b083      	sub	sp, #12
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f003 0304 	and.w	r3, r3, #4
 8003596:	2b04      	cmp	r3, #4
 8003598:	d101      	bne.n	800359e <LL_ADC_REG_IsConversionOngoing+0x18>
 800359a:	2301      	movs	r3, #1
 800359c:	e000      	b.n	80035a0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800359e:	2300      	movs	r3, #0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80035b4:	bf00      	nop
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80035c8:	bf00      	nop
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80035f0:	bf00      	nop
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003604:	bf00      	nop
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003610:	b590      	push	{r4, r7, lr}
 8003612:	b0a1      	sub	sp, #132	@ 0x84
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800361a:	2300      	movs	r3, #0
 800361c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003626:	2b01      	cmp	r3, #1
 8003628:	d101      	bne.n	800362e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800362a:	2302      	movs	r3, #2
 800362c:	e0e7      	b.n	80037fe <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2201      	movs	r2, #1
 8003632:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003636:	2300      	movs	r3, #0
 8003638:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800363a:	2300      	movs	r3, #0
 800363c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003646:	d102      	bne.n	800364e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003648:	4b6f      	ldr	r3, [pc, #444]	@ (8003808 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800364a:	60bb      	str	r3, [r7, #8]
 800364c:	e009      	b.n	8003662 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a6e      	ldr	r2, [pc, #440]	@ (800380c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d102      	bne.n	800365e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003658:	4b6d      	ldr	r3, [pc, #436]	@ (8003810 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800365a:	60bb      	str	r3, [r7, #8]
 800365c:	e001      	b.n	8003662 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800365e:	2300      	movs	r3, #0
 8003660:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d10b      	bne.n	8003680 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800366c:	f043 0220 	orr.w	r2, r3, #32
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e0be      	b.n	80037fe <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	4618      	mov	r0, r3
 8003684:	f7ff ff7f 	bl	8003586 <LL_ADC_REG_IsConversionOngoing>
 8003688:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4618      	mov	r0, r3
 8003690:	f7ff ff79 	bl	8003586 <LL_ADC_REG_IsConversionOngoing>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	f040 80a0 	bne.w	80037dc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800369c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800369e:	2b00      	cmp	r3, #0
 80036a0:	f040 809c 	bne.w	80037dc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036ac:	d004      	beq.n	80036b8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a55      	ldr	r2, [pc, #340]	@ (8003808 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d101      	bne.n	80036bc <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80036b8:	4b56      	ldr	r3, [pc, #344]	@ (8003814 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80036ba:	e000      	b.n	80036be <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80036bc:	4b56      	ldr	r3, [pc, #344]	@ (8003818 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80036be:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d04b      	beq.n	8003760 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80036c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	6859      	ldr	r1, [r3, #4]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80036da:	035b      	lsls	r3, r3, #13
 80036dc:	430b      	orrs	r3, r1
 80036de:	431a      	orrs	r2, r3
 80036e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036e2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036ec:	d004      	beq.n	80036f8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a45      	ldr	r2, [pc, #276]	@ (8003808 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d10f      	bne.n	8003718 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80036f8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80036fc:	f7ff ff30 	bl	8003560 <LL_ADC_IsEnabled>
 8003700:	4604      	mov	r4, r0
 8003702:	4841      	ldr	r0, [pc, #260]	@ (8003808 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003704:	f7ff ff2c 	bl	8003560 <LL_ADC_IsEnabled>
 8003708:	4603      	mov	r3, r0
 800370a:	4323      	orrs	r3, r4
 800370c:	2b00      	cmp	r3, #0
 800370e:	bf0c      	ite	eq
 8003710:	2301      	moveq	r3, #1
 8003712:	2300      	movne	r3, #0
 8003714:	b2db      	uxtb	r3, r3
 8003716:	e012      	b.n	800373e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003718:	483c      	ldr	r0, [pc, #240]	@ (800380c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800371a:	f7ff ff21 	bl	8003560 <LL_ADC_IsEnabled>
 800371e:	4604      	mov	r4, r0
 8003720:	483b      	ldr	r0, [pc, #236]	@ (8003810 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003722:	f7ff ff1d 	bl	8003560 <LL_ADC_IsEnabled>
 8003726:	4603      	mov	r3, r0
 8003728:	431c      	orrs	r4, r3
 800372a:	483c      	ldr	r0, [pc, #240]	@ (800381c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800372c:	f7ff ff18 	bl	8003560 <LL_ADC_IsEnabled>
 8003730:	4603      	mov	r3, r0
 8003732:	4323      	orrs	r3, r4
 8003734:	2b00      	cmp	r3, #0
 8003736:	bf0c      	ite	eq
 8003738:	2301      	moveq	r3, #1
 800373a:	2300      	movne	r3, #0
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d056      	beq.n	80037f0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003742:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800374a:	f023 030f 	bic.w	r3, r3, #15
 800374e:	683a      	ldr	r2, [r7, #0]
 8003750:	6811      	ldr	r1, [r2, #0]
 8003752:	683a      	ldr	r2, [r7, #0]
 8003754:	6892      	ldr	r2, [r2, #8]
 8003756:	430a      	orrs	r2, r1
 8003758:	431a      	orrs	r2, r3
 800375a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800375c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800375e:	e047      	b.n	80037f0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003760:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003768:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800376a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003774:	d004      	beq.n	8003780 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a23      	ldr	r2, [pc, #140]	@ (8003808 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d10f      	bne.n	80037a0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003780:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003784:	f7ff feec 	bl	8003560 <LL_ADC_IsEnabled>
 8003788:	4604      	mov	r4, r0
 800378a:	481f      	ldr	r0, [pc, #124]	@ (8003808 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800378c:	f7ff fee8 	bl	8003560 <LL_ADC_IsEnabled>
 8003790:	4603      	mov	r3, r0
 8003792:	4323      	orrs	r3, r4
 8003794:	2b00      	cmp	r3, #0
 8003796:	bf0c      	ite	eq
 8003798:	2301      	moveq	r3, #1
 800379a:	2300      	movne	r3, #0
 800379c:	b2db      	uxtb	r3, r3
 800379e:	e012      	b.n	80037c6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80037a0:	481a      	ldr	r0, [pc, #104]	@ (800380c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80037a2:	f7ff fedd 	bl	8003560 <LL_ADC_IsEnabled>
 80037a6:	4604      	mov	r4, r0
 80037a8:	4819      	ldr	r0, [pc, #100]	@ (8003810 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80037aa:	f7ff fed9 	bl	8003560 <LL_ADC_IsEnabled>
 80037ae:	4603      	mov	r3, r0
 80037b0:	431c      	orrs	r4, r3
 80037b2:	481a      	ldr	r0, [pc, #104]	@ (800381c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80037b4:	f7ff fed4 	bl	8003560 <LL_ADC_IsEnabled>
 80037b8:	4603      	mov	r3, r0
 80037ba:	4323      	orrs	r3, r4
 80037bc:	2b00      	cmp	r3, #0
 80037be:	bf0c      	ite	eq
 80037c0:	2301      	moveq	r3, #1
 80037c2:	2300      	movne	r3, #0
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d012      	beq.n	80037f0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80037ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80037d2:	f023 030f 	bic.w	r3, r3, #15
 80037d6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80037d8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80037da:	e009      	b.n	80037f0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037e0:	f043 0220 	orr.w	r2, r3, #32
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80037ee:	e000      	b.n	80037f2 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80037f0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80037fa:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3784      	adds	r7, #132	@ 0x84
 8003802:	46bd      	mov	sp, r7
 8003804:	bd90      	pop	{r4, r7, pc}
 8003806:	bf00      	nop
 8003808:	50000100 	.word	0x50000100
 800380c:	50000400 	.word	0x50000400
 8003810:	50000500 	.word	0x50000500
 8003814:	50000300 	.word	0x50000300
 8003818:	50000700 	.word	0x50000700
 800381c:	50000600 	.word	0x50000600

08003820 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003820:	b480      	push	{r7}
 8003822:	b085      	sub	sp, #20
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f003 0307 	and.w	r3, r3, #7
 800382e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003830:	4b0c      	ldr	r3, [pc, #48]	@ (8003864 <__NVIC_SetPriorityGrouping+0x44>)
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003836:	68ba      	ldr	r2, [r7, #8]
 8003838:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800383c:	4013      	ands	r3, r2
 800383e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003848:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800384c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003850:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003852:	4a04      	ldr	r2, [pc, #16]	@ (8003864 <__NVIC_SetPriorityGrouping+0x44>)
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	60d3      	str	r3, [r2, #12]
}
 8003858:	bf00      	nop
 800385a:	3714      	adds	r7, #20
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr
 8003864:	e000ed00 	.word	0xe000ed00

08003868 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003868:	b480      	push	{r7}
 800386a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800386c:	4b04      	ldr	r3, [pc, #16]	@ (8003880 <__NVIC_GetPriorityGrouping+0x18>)
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	0a1b      	lsrs	r3, r3, #8
 8003872:	f003 0307 	and.w	r3, r3, #7
}
 8003876:	4618      	mov	r0, r3
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr
 8003880:	e000ed00 	.word	0xe000ed00

08003884 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	4603      	mov	r3, r0
 800388c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800388e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003892:	2b00      	cmp	r3, #0
 8003894:	db0b      	blt.n	80038ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003896:	79fb      	ldrb	r3, [r7, #7]
 8003898:	f003 021f 	and.w	r2, r3, #31
 800389c:	4907      	ldr	r1, [pc, #28]	@ (80038bc <__NVIC_EnableIRQ+0x38>)
 800389e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038a2:	095b      	lsrs	r3, r3, #5
 80038a4:	2001      	movs	r0, #1
 80038a6:	fa00 f202 	lsl.w	r2, r0, r2
 80038aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80038ae:	bf00      	nop
 80038b0:	370c      	adds	r7, #12
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	e000e100 	.word	0xe000e100

080038c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	4603      	mov	r3, r0
 80038c8:	6039      	str	r1, [r7, #0]
 80038ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	db0a      	blt.n	80038ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	b2da      	uxtb	r2, r3
 80038d8:	490c      	ldr	r1, [pc, #48]	@ (800390c <__NVIC_SetPriority+0x4c>)
 80038da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038de:	0112      	lsls	r2, r2, #4
 80038e0:	b2d2      	uxtb	r2, r2
 80038e2:	440b      	add	r3, r1
 80038e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038e8:	e00a      	b.n	8003900 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	b2da      	uxtb	r2, r3
 80038ee:	4908      	ldr	r1, [pc, #32]	@ (8003910 <__NVIC_SetPriority+0x50>)
 80038f0:	79fb      	ldrb	r3, [r7, #7]
 80038f2:	f003 030f 	and.w	r3, r3, #15
 80038f6:	3b04      	subs	r3, #4
 80038f8:	0112      	lsls	r2, r2, #4
 80038fa:	b2d2      	uxtb	r2, r2
 80038fc:	440b      	add	r3, r1
 80038fe:	761a      	strb	r2, [r3, #24]
}
 8003900:	bf00      	nop
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr
 800390c:	e000e100 	.word	0xe000e100
 8003910:	e000ed00 	.word	0xe000ed00

08003914 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003914:	b480      	push	{r7}
 8003916:	b089      	sub	sp, #36	@ 0x24
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f003 0307 	and.w	r3, r3, #7
 8003926:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	f1c3 0307 	rsb	r3, r3, #7
 800392e:	2b04      	cmp	r3, #4
 8003930:	bf28      	it	cs
 8003932:	2304      	movcs	r3, #4
 8003934:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	3304      	adds	r3, #4
 800393a:	2b06      	cmp	r3, #6
 800393c:	d902      	bls.n	8003944 <NVIC_EncodePriority+0x30>
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	3b03      	subs	r3, #3
 8003942:	e000      	b.n	8003946 <NVIC_EncodePriority+0x32>
 8003944:	2300      	movs	r3, #0
 8003946:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003948:	f04f 32ff 	mov.w	r2, #4294967295
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	fa02 f303 	lsl.w	r3, r2, r3
 8003952:	43da      	mvns	r2, r3
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	401a      	ands	r2, r3
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800395c:	f04f 31ff 	mov.w	r1, #4294967295
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	fa01 f303 	lsl.w	r3, r1, r3
 8003966:	43d9      	mvns	r1, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800396c:	4313      	orrs	r3, r2
         );
}
 800396e:	4618      	mov	r0, r3
 8003970:	3724      	adds	r7, #36	@ 0x24
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
	...

0800397c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	3b01      	subs	r3, #1
 8003988:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800398c:	d301      	bcc.n	8003992 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800398e:	2301      	movs	r3, #1
 8003990:	e00f      	b.n	80039b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003992:	4a0a      	ldr	r2, [pc, #40]	@ (80039bc <SysTick_Config+0x40>)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	3b01      	subs	r3, #1
 8003998:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800399a:	210f      	movs	r1, #15
 800399c:	f04f 30ff 	mov.w	r0, #4294967295
 80039a0:	f7ff ff8e 	bl	80038c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039a4:	4b05      	ldr	r3, [pc, #20]	@ (80039bc <SysTick_Config+0x40>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039aa:	4b04      	ldr	r3, [pc, #16]	@ (80039bc <SysTick_Config+0x40>)
 80039ac:	2207      	movs	r2, #7
 80039ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3708      	adds	r7, #8
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	e000e010 	.word	0xe000e010

080039c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f7ff ff29 	bl	8003820 <__NVIC_SetPriorityGrouping>
}
 80039ce:	bf00      	nop
 80039d0:	3708      	adds	r7, #8
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b086      	sub	sp, #24
 80039da:	af00      	add	r7, sp, #0
 80039dc:	4603      	mov	r3, r0
 80039de:	60b9      	str	r1, [r7, #8]
 80039e0:	607a      	str	r2, [r7, #4]
 80039e2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80039e4:	f7ff ff40 	bl	8003868 <__NVIC_GetPriorityGrouping>
 80039e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	68b9      	ldr	r1, [r7, #8]
 80039ee:	6978      	ldr	r0, [r7, #20]
 80039f0:	f7ff ff90 	bl	8003914 <NVIC_EncodePriority>
 80039f4:	4602      	mov	r2, r0
 80039f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039fa:	4611      	mov	r1, r2
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7ff ff5f 	bl	80038c0 <__NVIC_SetPriority>
}
 8003a02:	bf00      	nop
 8003a04:	3718      	adds	r7, #24
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b082      	sub	sp, #8
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	4603      	mov	r3, r0
 8003a12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f7ff ff33 	bl	8003884 <__NVIC_EnableIRQ>
}
 8003a1e:	bf00      	nop
 8003a20:	3708      	adds	r7, #8
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a26:	b580      	push	{r7, lr}
 8003a28:	b082      	sub	sp, #8
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f7ff ffa4 	bl	800397c <SysTick_Config>
 8003a34:	4603      	mov	r3, r0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3708      	adds	r7, #8
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
	...

08003a40 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d101      	bne.n	8003a52 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e08d      	b.n	8003b6e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	461a      	mov	r2, r3
 8003a58:	4b47      	ldr	r3, [pc, #284]	@ (8003b78 <HAL_DMA_Init+0x138>)
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d80f      	bhi.n	8003a7e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	461a      	mov	r2, r3
 8003a64:	4b45      	ldr	r3, [pc, #276]	@ (8003b7c <HAL_DMA_Init+0x13c>)
 8003a66:	4413      	add	r3, r2
 8003a68:	4a45      	ldr	r2, [pc, #276]	@ (8003b80 <HAL_DMA_Init+0x140>)
 8003a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a6e:	091b      	lsrs	r3, r3, #4
 8003a70:	009a      	lsls	r2, r3, #2
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a42      	ldr	r2, [pc, #264]	@ (8003b84 <HAL_DMA_Init+0x144>)
 8003a7a:	641a      	str	r2, [r3, #64]	@ 0x40
 8003a7c:	e00e      	b.n	8003a9c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	461a      	mov	r2, r3
 8003a84:	4b40      	ldr	r3, [pc, #256]	@ (8003b88 <HAL_DMA_Init+0x148>)
 8003a86:	4413      	add	r3, r2
 8003a88:	4a3d      	ldr	r2, [pc, #244]	@ (8003b80 <HAL_DMA_Init+0x140>)
 8003a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a8e:	091b      	lsrs	r3, r3, #4
 8003a90:	009a      	lsls	r2, r3, #2
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a3c      	ldr	r2, [pc, #240]	@ (8003b8c <HAL_DMA_Init+0x14c>)
 8003a9a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2202      	movs	r2, #2
 8003aa0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003ab2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ab6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003ac0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003acc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ad8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a1b      	ldr	r3, [r3, #32]
 8003ade:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 f9b6 	bl	8003e60 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003afc:	d102      	bne.n	8003b04 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685a      	ldr	r2, [r3, #4]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b0c:	b2d2      	uxtb	r2, r2
 8003b0e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003b18:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d010      	beq.n	8003b44 <HAL_DMA_Init+0x104>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	2b04      	cmp	r3, #4
 8003b28:	d80c      	bhi.n	8003b44 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 f9d6 	bl	8003edc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b34:	2200      	movs	r2, #0
 8003b36:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003b40:	605a      	str	r2, [r3, #4]
 8003b42:	e008      	b.n	8003b56 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3710      	adds	r7, #16
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	40020407 	.word	0x40020407
 8003b7c:	bffdfff8 	.word	0xbffdfff8
 8003b80:	cccccccd 	.word	0xcccccccd
 8003b84:	40020000 	.word	0x40020000
 8003b88:	bffdfbf8 	.word	0xbffdfbf8
 8003b8c:	40020400 	.word	0x40020400

08003b90 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b086      	sub	sp, #24
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
 8003b9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d101      	bne.n	8003bb0 <HAL_DMA_Start_IT+0x20>
 8003bac:	2302      	movs	r3, #2
 8003bae:	e066      	b.n	8003c7e <HAL_DMA_Start_IT+0xee>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d155      	bne.n	8003c70 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2202      	movs	r2, #2
 8003bc8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f022 0201 	bic.w	r2, r2, #1
 8003be0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	68b9      	ldr	r1, [r7, #8]
 8003be8:	68f8      	ldr	r0, [r7, #12]
 8003bea:	f000 f8fb 	bl	8003de4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d008      	beq.n	8003c08 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f042 020e 	orr.w	r2, r2, #14
 8003c04:	601a      	str	r2, [r3, #0]
 8003c06:	e00f      	b.n	8003c28 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f022 0204 	bic.w	r2, r2, #4
 8003c16:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f042 020a 	orr.w	r2, r2, #10
 8003c26:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d007      	beq.n	8003c46 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c40:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c44:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d007      	beq.n	8003c5e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c5c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f042 0201 	orr.w	r2, r2, #1
 8003c6c:	601a      	str	r2, [r3, #0]
 8003c6e:	e005      	b.n	8003c7c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003c78:	2302      	movs	r3, #2
 8003c7a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003c7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3718      	adds	r7, #24
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c86:	b580      	push	{r7, lr}
 8003c88:	b084      	sub	sp, #16
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ca2:	f003 031f 	and.w	r3, r3, #31
 8003ca6:	2204      	movs	r2, #4
 8003ca8:	409a      	lsls	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	4013      	ands	r3, r2
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d026      	beq.n	8003d00 <HAL_DMA_IRQHandler+0x7a>
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	f003 0304 	and.w	r3, r3, #4
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d021      	beq.n	8003d00 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0320 	and.w	r3, r3, #32
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d107      	bne.n	8003cda <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f022 0204 	bic.w	r2, r2, #4
 8003cd8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cde:	f003 021f 	and.w	r2, r3, #31
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ce6:	2104      	movs	r1, #4
 8003ce8:	fa01 f202 	lsl.w	r2, r1, r2
 8003cec:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d071      	beq.n	8003dda <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003cfe:	e06c      	b.n	8003dda <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d04:	f003 031f 	and.w	r3, r3, #31
 8003d08:	2202      	movs	r2, #2
 8003d0a:	409a      	lsls	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	4013      	ands	r3, r2
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d02e      	beq.n	8003d72 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d029      	beq.n	8003d72 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0320 	and.w	r3, r3, #32
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d10b      	bne.n	8003d44 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f022 020a 	bic.w	r2, r2, #10
 8003d3a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d48:	f003 021f 	and.w	r2, r3, #31
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d50:	2102      	movs	r1, #2
 8003d52:	fa01 f202 	lsl.w	r2, r1, r2
 8003d56:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d038      	beq.n	8003dda <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003d70:	e033      	b.n	8003dda <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d76:	f003 031f 	and.w	r3, r3, #31
 8003d7a:	2208      	movs	r2, #8
 8003d7c:	409a      	lsls	r2, r3
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	4013      	ands	r3, r2
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d02a      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	f003 0308 	and.w	r3, r3, #8
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d025      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f022 020e 	bic.w	r2, r2, #14
 8003d9e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003da4:	f003 021f 	and.w	r2, r3, #31
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dac:	2101      	movs	r1, #1
 8003dae:	fa01 f202 	lsl.w	r2, r1, r2
 8003db2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d004      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003dda:	bf00      	nop
 8003ddc:	bf00      	nop
}
 8003dde:	3710      	adds	r7, #16
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b085      	sub	sp, #20
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	607a      	str	r2, [r7, #4]
 8003df0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003dfa:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d004      	beq.n	8003e0e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e08:	68fa      	ldr	r2, [r7, #12]
 8003e0a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003e0c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e12:	f003 021f 	and.w	r2, r3, #31
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e1a:	2101      	movs	r1, #1
 8003e1c:	fa01 f202 	lsl.w	r2, r1, r2
 8003e20:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	683a      	ldr	r2, [r7, #0]
 8003e28:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	2b10      	cmp	r3, #16
 8003e30:	d108      	bne.n	8003e44 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68ba      	ldr	r2, [r7, #8]
 8003e40:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003e42:	e007      	b.n	8003e54 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68ba      	ldr	r2, [r7, #8]
 8003e4a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	60da      	str	r2, [r3, #12]
}
 8003e54:	bf00      	nop
 8003e56:	3714      	adds	r7, #20
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b087      	sub	sp, #28
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	4b16      	ldr	r3, [pc, #88]	@ (8003ec8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d802      	bhi.n	8003e7a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003e74:	4b15      	ldr	r3, [pc, #84]	@ (8003ecc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003e76:	617b      	str	r3, [r7, #20]
 8003e78:	e001      	b.n	8003e7e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003e7a:	4b15      	ldr	r3, [pc, #84]	@ (8003ed0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003e7c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	3b08      	subs	r3, #8
 8003e8a:	4a12      	ldr	r2, [pc, #72]	@ (8003ed4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e90:	091b      	lsrs	r3, r3, #4
 8003e92:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e98:	089b      	lsrs	r3, r3, #2
 8003e9a:	009a      	lsls	r2, r3, #2
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	4413      	add	r3, r2
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a0b      	ldr	r2, [pc, #44]	@ (8003ed8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003eaa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f003 031f 	and.w	r3, r3, #31
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	409a      	lsls	r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003eba:	bf00      	nop
 8003ebc:	371c      	adds	r7, #28
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
 8003ec6:	bf00      	nop
 8003ec8:	40020407 	.word	0x40020407
 8003ecc:	40020800 	.word	0x40020800
 8003ed0:	40020820 	.word	0x40020820
 8003ed4:	cccccccd 	.word	0xcccccccd
 8003ed8:	40020880 	.word	0x40020880

08003edc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b085      	sub	sp, #20
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	4b0b      	ldr	r3, [pc, #44]	@ (8003f1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003ef0:	4413      	add	r3, r2
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a08      	ldr	r2, [pc, #32]	@ (8003f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003efe:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	3b01      	subs	r3, #1
 8003f04:	f003 031f 	and.w	r3, r3, #31
 8003f08:	2201      	movs	r2, #1
 8003f0a:	409a      	lsls	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003f10:	bf00      	nop
 8003f12:	3714      	adds	r7, #20
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr
 8003f1c:	1000823f 	.word	0x1000823f
 8003f20:	40020940 	.word	0x40020940

08003f24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b087      	sub	sp, #28
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003f32:	e15a      	b.n	80041ea <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	2101      	movs	r1, #1
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f40:	4013      	ands	r3, r2
 8003f42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f000 814c 	beq.w	80041e4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f003 0303 	and.w	r3, r3, #3
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d005      	beq.n	8003f64 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d130      	bne.n	8003fc6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	005b      	lsls	r3, r3, #1
 8003f6e:	2203      	movs	r2, #3
 8003f70:	fa02 f303 	lsl.w	r3, r2, r3
 8003f74:	43db      	mvns	r3, r3
 8003f76:	693a      	ldr	r2, [r7, #16]
 8003f78:	4013      	ands	r3, r2
 8003f7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	68da      	ldr	r2, [r3, #12]
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	005b      	lsls	r3, r3, #1
 8003f84:	fa02 f303 	lsl.w	r3, r2, r3
 8003f88:	693a      	ldr	r2, [r7, #16]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa2:	43db      	mvns	r3, r3
 8003fa4:	693a      	ldr	r2, [r7, #16]
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	091b      	lsrs	r3, r3, #4
 8003fb0:	f003 0201 	and.w	r2, r3, #1
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fba:	693a      	ldr	r2, [r7, #16]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f003 0303 	and.w	r3, r3, #3
 8003fce:	2b03      	cmp	r3, #3
 8003fd0:	d017      	beq.n	8004002 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	005b      	lsls	r3, r3, #1
 8003fdc:	2203      	movs	r2, #3
 8003fde:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe2:	43db      	mvns	r3, r3
 8003fe4:	693a      	ldr	r2, [r7, #16]
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	689a      	ldr	r2, [r3, #8]
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	005b      	lsls	r3, r3, #1
 8003ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff6:	693a      	ldr	r2, [r7, #16]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f003 0303 	and.w	r3, r3, #3
 800400a:	2b02      	cmp	r3, #2
 800400c:	d123      	bne.n	8004056 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	08da      	lsrs	r2, r3, #3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	3208      	adds	r2, #8
 8004016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800401a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	f003 0307 	and.w	r3, r3, #7
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	220f      	movs	r2, #15
 8004026:	fa02 f303 	lsl.w	r3, r2, r3
 800402a:	43db      	mvns	r3, r3
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	4013      	ands	r3, r2
 8004030:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	691a      	ldr	r2, [r3, #16]
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	f003 0307 	and.w	r3, r3, #7
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	fa02 f303 	lsl.w	r3, r2, r3
 8004042:	693a      	ldr	r2, [r7, #16]
 8004044:	4313      	orrs	r3, r2
 8004046:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	08da      	lsrs	r2, r3, #3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	3208      	adds	r2, #8
 8004050:	6939      	ldr	r1, [r7, #16]
 8004052:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	005b      	lsls	r3, r3, #1
 8004060:	2203      	movs	r2, #3
 8004062:	fa02 f303 	lsl.w	r3, r2, r3
 8004066:	43db      	mvns	r3, r3
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	4013      	ands	r3, r2
 800406c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f003 0203 	and.w	r2, r3, #3
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	005b      	lsls	r3, r3, #1
 800407a:	fa02 f303 	lsl.w	r3, r2, r3
 800407e:	693a      	ldr	r2, [r7, #16]
 8004080:	4313      	orrs	r3, r2
 8004082:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	693a      	ldr	r2, [r7, #16]
 8004088:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004092:	2b00      	cmp	r3, #0
 8004094:	f000 80a6 	beq.w	80041e4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004098:	4b5b      	ldr	r3, [pc, #364]	@ (8004208 <HAL_GPIO_Init+0x2e4>)
 800409a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800409c:	4a5a      	ldr	r2, [pc, #360]	@ (8004208 <HAL_GPIO_Init+0x2e4>)
 800409e:	f043 0301 	orr.w	r3, r3, #1
 80040a2:	6613      	str	r3, [r2, #96]	@ 0x60
 80040a4:	4b58      	ldr	r3, [pc, #352]	@ (8004208 <HAL_GPIO_Init+0x2e4>)
 80040a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040a8:	f003 0301 	and.w	r3, r3, #1
 80040ac:	60bb      	str	r3, [r7, #8]
 80040ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80040b0:	4a56      	ldr	r2, [pc, #344]	@ (800420c <HAL_GPIO_Init+0x2e8>)
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	089b      	lsrs	r3, r3, #2
 80040b6:	3302      	adds	r3, #2
 80040b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	f003 0303 	and.w	r3, r3, #3
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	220f      	movs	r2, #15
 80040c8:	fa02 f303 	lsl.w	r3, r2, r3
 80040cc:	43db      	mvns	r3, r3
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	4013      	ands	r3, r2
 80040d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80040da:	d01f      	beq.n	800411c <HAL_GPIO_Init+0x1f8>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a4c      	ldr	r2, [pc, #304]	@ (8004210 <HAL_GPIO_Init+0x2ec>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d019      	beq.n	8004118 <HAL_GPIO_Init+0x1f4>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a4b      	ldr	r2, [pc, #300]	@ (8004214 <HAL_GPIO_Init+0x2f0>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d013      	beq.n	8004114 <HAL_GPIO_Init+0x1f0>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a4a      	ldr	r2, [pc, #296]	@ (8004218 <HAL_GPIO_Init+0x2f4>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d00d      	beq.n	8004110 <HAL_GPIO_Init+0x1ec>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a49      	ldr	r2, [pc, #292]	@ (800421c <HAL_GPIO_Init+0x2f8>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d007      	beq.n	800410c <HAL_GPIO_Init+0x1e8>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a48      	ldr	r2, [pc, #288]	@ (8004220 <HAL_GPIO_Init+0x2fc>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d101      	bne.n	8004108 <HAL_GPIO_Init+0x1e4>
 8004104:	2305      	movs	r3, #5
 8004106:	e00a      	b.n	800411e <HAL_GPIO_Init+0x1fa>
 8004108:	2306      	movs	r3, #6
 800410a:	e008      	b.n	800411e <HAL_GPIO_Init+0x1fa>
 800410c:	2304      	movs	r3, #4
 800410e:	e006      	b.n	800411e <HAL_GPIO_Init+0x1fa>
 8004110:	2303      	movs	r3, #3
 8004112:	e004      	b.n	800411e <HAL_GPIO_Init+0x1fa>
 8004114:	2302      	movs	r3, #2
 8004116:	e002      	b.n	800411e <HAL_GPIO_Init+0x1fa>
 8004118:	2301      	movs	r3, #1
 800411a:	e000      	b.n	800411e <HAL_GPIO_Init+0x1fa>
 800411c:	2300      	movs	r3, #0
 800411e:	697a      	ldr	r2, [r7, #20]
 8004120:	f002 0203 	and.w	r2, r2, #3
 8004124:	0092      	lsls	r2, r2, #2
 8004126:	4093      	lsls	r3, r2
 8004128:	693a      	ldr	r2, [r7, #16]
 800412a:	4313      	orrs	r3, r2
 800412c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800412e:	4937      	ldr	r1, [pc, #220]	@ (800420c <HAL_GPIO_Init+0x2e8>)
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	089b      	lsrs	r3, r3, #2
 8004134:	3302      	adds	r3, #2
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800413c:	4b39      	ldr	r3, [pc, #228]	@ (8004224 <HAL_GPIO_Init+0x300>)
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	43db      	mvns	r3, r3
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	4013      	ands	r3, r2
 800414a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d003      	beq.n	8004160 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004158:	693a      	ldr	r2, [r7, #16]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	4313      	orrs	r3, r2
 800415e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004160:	4a30      	ldr	r2, [pc, #192]	@ (8004224 <HAL_GPIO_Init+0x300>)
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004166:	4b2f      	ldr	r3, [pc, #188]	@ (8004224 <HAL_GPIO_Init+0x300>)
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	43db      	mvns	r3, r3
 8004170:	693a      	ldr	r2, [r7, #16]
 8004172:	4013      	ands	r3, r2
 8004174:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d003      	beq.n	800418a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004182:	693a      	ldr	r2, [r7, #16]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	4313      	orrs	r3, r2
 8004188:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800418a:	4a26      	ldr	r2, [pc, #152]	@ (8004224 <HAL_GPIO_Init+0x300>)
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004190:	4b24      	ldr	r3, [pc, #144]	@ (8004224 <HAL_GPIO_Init+0x300>)
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	43db      	mvns	r3, r3
 800419a:	693a      	ldr	r2, [r7, #16]
 800419c:	4013      	ands	r3, r2
 800419e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d003      	beq.n	80041b4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80041b4:	4a1b      	ldr	r2, [pc, #108]	@ (8004224 <HAL_GPIO_Init+0x300>)
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80041ba:	4b1a      	ldr	r3, [pc, #104]	@ (8004224 <HAL_GPIO_Init+0x300>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	43db      	mvns	r3, r3
 80041c4:	693a      	ldr	r2, [r7, #16]
 80041c6:	4013      	ands	r3, r2
 80041c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d003      	beq.n	80041de <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	4313      	orrs	r3, r2
 80041dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80041de:	4a11      	ldr	r2, [pc, #68]	@ (8004224 <HAL_GPIO_Init+0x300>)
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	3301      	adds	r3, #1
 80041e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	fa22 f303 	lsr.w	r3, r2, r3
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f47f ae9d 	bne.w	8003f34 <HAL_GPIO_Init+0x10>
  }
}
 80041fa:	bf00      	nop
 80041fc:	bf00      	nop
 80041fe:	371c      	adds	r7, #28
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr
 8004208:	40021000 	.word	0x40021000
 800420c:	40010000 	.word	0x40010000
 8004210:	48000400 	.word	0x48000400
 8004214:	48000800 	.word	0x48000800
 8004218:	48000c00 	.word	0x48000c00
 800421c:	48001000 	.word	0x48001000
 8004220:	48001400 	.word	0x48001400
 8004224:	40010400 	.word	0x40010400

08004228 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	460b      	mov	r3, r1
 8004232:	807b      	strh	r3, [r7, #2]
 8004234:	4613      	mov	r3, r2
 8004236:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004238:	787b      	ldrb	r3, [r7, #1]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d003      	beq.n	8004246 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800423e:	887a      	ldrh	r2, [r7, #2]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004244:	e002      	b.n	800424c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004246:	887a      	ldrh	r2, [r7, #2]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800424c:	bf00      	nop
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004260:	2300      	movs	r3, #0
 8004262:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d101      	bne.n	800426e <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e0bb      	b.n	80043e6 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8004274:	b2db      	uxtb	r3, r3
 8004276:	2b05      	cmp	r3, #5
 8004278:	d101      	bne.n	800427e <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e0b3      	b.n	80043e6 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8004284:	b2db      	uxtb	r3, r3
 8004286:	2b02      	cmp	r3, #2
 8004288:	d101      	bne.n	800428e <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e0ab      	b.n	80043e6 <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800428e:	4b58      	ldr	r3, [pc, #352]	@ (80043f0 <HAL_OPAMP_Init+0x198>)
 8004290:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004292:	4a57      	ldr	r2, [pc, #348]	@ (80043f0 <HAL_OPAMP_Init+0x198>)
 8004294:	f043 0301 	orr.w	r3, r3, #1
 8004298:	6613      	str	r3, [r2, #96]	@ 0x60
 800429a:	4b55      	ldr	r3, [pc, #340]	@ (80043f0 <HAL_OPAMP_Init+0x198>)
 800429c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	60bb      	str	r3, [r7, #8]
 80042a4:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d103      	bne.n	80042ba <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f7fc ff46 	bl	800114c <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	2b40      	cmp	r3, #64	@ 0x40
 80042c6:	d003      	beq.n	80042d0 <HAL_OPAMP_Init+0x78>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	2b60      	cmp	r3, #96	@ 0x60
 80042ce:	d133      	bne.n	8004338 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f023 0110 	bic.w	r1, r3, #16
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	430a      	orrs	r2, r1
 80042e4:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	4b41      	ldr	r3, [pc, #260]	@ (80043f4 <HAL_OPAMP_Init+0x19c>)
 80042ee:	4013      	ands	r3, r2
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	6851      	ldr	r1, [r2, #4]
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	6892      	ldr	r2, [r2, #8]
 80042f8:	4311      	orrs	r1, r2
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	6912      	ldr	r2, [r2, #16]
 80042fe:	430a      	orrs	r2, r1
 8004300:	6879      	ldr	r1, [r7, #4]
 8004302:	7d09      	ldrb	r1, [r1, #20]
 8004304:	2901      	cmp	r1, #1
 8004306:	d102      	bne.n	800430e <HAL_OPAMP_Init+0xb6>
 8004308:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800430c:	e000      	b.n	8004310 <HAL_OPAMP_Init+0xb8>
 800430e:	2100      	movs	r1, #0
 8004310:	4311      	orrs	r1, r2
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004316:	4311      	orrs	r1, r2
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800431c:	4311      	orrs	r1, r2
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004322:	04d2      	lsls	r2, r2, #19
 8004324:	4311      	orrs	r1, r2
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800432a:	0612      	lsls	r2, r2, #24
 800432c:	4311      	orrs	r1, r2
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	6812      	ldr	r2, [r2, #0]
 8004332:	430b      	orrs	r3, r1
 8004334:	6013      	str	r3, [r2, #0]
 8004336:	e035      	b.n	80043a4 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f023 0110 	bic.w	r1, r3, #16
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	430a      	orrs	r2, r1
 800434c:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	4b27      	ldr	r3, [pc, #156]	@ (80043f4 <HAL_OPAMP_Init+0x19c>)
 8004356:	4013      	ands	r3, r2
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	6851      	ldr	r1, [r2, #4]
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	6892      	ldr	r2, [r2, #8]
 8004360:	4311      	orrs	r1, r2
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	68d2      	ldr	r2, [r2, #12]
 8004366:	4311      	orrs	r1, r2
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	6912      	ldr	r2, [r2, #16]
 800436c:	430a      	orrs	r2, r1
 800436e:	6879      	ldr	r1, [r7, #4]
 8004370:	7d09      	ldrb	r1, [r1, #20]
 8004372:	2901      	cmp	r1, #1
 8004374:	d102      	bne.n	800437c <HAL_OPAMP_Init+0x124>
 8004376:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800437a:	e000      	b.n	800437e <HAL_OPAMP_Init+0x126>
 800437c:	2100      	movs	r1, #0
 800437e:	4311      	orrs	r1, r2
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004384:	4311      	orrs	r1, r2
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800438a:	4311      	orrs	r1, r2
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004390:	04d2      	lsls	r2, r2, #19
 8004392:	4311      	orrs	r1, r2
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004398:	0612      	lsls	r2, r2, #24
 800439a:	4311      	orrs	r1, r2
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	6812      	ldr	r2, [r2, #0]
 80043a0:	430b      	orrs	r3, r1
 80043a2:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	699b      	ldr	r3, [r3, #24]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	db10      	blt.n	80043d0 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	699b      	ldr	r3, [r3, #24]
 80043b4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	699a      	ldr	r2, [r3, #24]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	69db      	ldr	r3, [r3, #28]
 80043c0:	431a      	orrs	r2, r3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a1b      	ldr	r3, [r3, #32]
 80043c6:	431a      	orrs	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	430a      	orrs	r2, r1
 80043ce:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d103      	bne.n	80043e4 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 80043e4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3710      	adds	r7, #16
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	40021000 	.word	0x40021000
 80043f4:	e0003e11 	.word	0xe0003e11

080043f8 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b085      	sub	sp, #20
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004400:	2300      	movs	r3, #0
 8004402:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d102      	bne.n	8004410 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	73fb      	strb	r3, [r7, #15]
 800440e:	e01d      	b.n	800444c <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8004416:	b2db      	uxtb	r3, r3
 8004418:	2b05      	cmp	r3, #5
 800441a:	d102      	bne.n	8004422 <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	73fb      	strb	r3, [r7, #15]
 8004420:	e014      	b.n	800444c <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8004428:	b2db      	uxtb	r3, r3
 800442a:	2b01      	cmp	r3, #1
 800442c:	d10c      	bne.n	8004448 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f042 0201 	orr.w	r2, r2, #1
 800443c:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2204      	movs	r2, #4
 8004442:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8004446:	e001      	b.n	800444c <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 800444c:	7bfb      	ldrb	r3, [r7, #15]
}
 800444e:	4618      	mov	r0, r3
 8004450:	3714      	adds	r7, #20
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr

0800445a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800445a:	b580      	push	{r7, lr}
 800445c:	b084      	sub	sp, #16
 800445e:	af00      	add	r7, sp, #0
 8004460:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d101      	bne.n	800446c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e0c0      	b.n	80045ee <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8004472:	b2db      	uxtb	r3, r3
 8004474:	2b00      	cmp	r3, #0
 8004476:	d106      	bne.n	8004486 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f009 f849 	bl	800d518 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2203      	movs	r2, #3
 800448a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4618      	mov	r0, r3
 8004494:	f004 fe93 	bl	80091be <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004498:	2300      	movs	r3, #0
 800449a:	73fb      	strb	r3, [r7, #15]
 800449c:	e03e      	b.n	800451c <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800449e:	7bfa      	ldrb	r2, [r7, #15]
 80044a0:	6879      	ldr	r1, [r7, #4]
 80044a2:	4613      	mov	r3, r2
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	4413      	add	r3, r2
 80044a8:	00db      	lsls	r3, r3, #3
 80044aa:	440b      	add	r3, r1
 80044ac:	3311      	adds	r3, #17
 80044ae:	2201      	movs	r2, #1
 80044b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80044b2:	7bfa      	ldrb	r2, [r7, #15]
 80044b4:	6879      	ldr	r1, [r7, #4]
 80044b6:	4613      	mov	r3, r2
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	4413      	add	r3, r2
 80044bc:	00db      	lsls	r3, r3, #3
 80044be:	440b      	add	r3, r1
 80044c0:	3310      	adds	r3, #16
 80044c2:	7bfa      	ldrb	r2, [r7, #15]
 80044c4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80044c6:	7bfa      	ldrb	r2, [r7, #15]
 80044c8:	6879      	ldr	r1, [r7, #4]
 80044ca:	4613      	mov	r3, r2
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	4413      	add	r3, r2
 80044d0:	00db      	lsls	r3, r3, #3
 80044d2:	440b      	add	r3, r1
 80044d4:	3313      	adds	r3, #19
 80044d6:	2200      	movs	r2, #0
 80044d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80044da:	7bfa      	ldrb	r2, [r7, #15]
 80044dc:	6879      	ldr	r1, [r7, #4]
 80044de:	4613      	mov	r3, r2
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	4413      	add	r3, r2
 80044e4:	00db      	lsls	r3, r3, #3
 80044e6:	440b      	add	r3, r1
 80044e8:	3320      	adds	r3, #32
 80044ea:	2200      	movs	r2, #0
 80044ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80044ee:	7bfa      	ldrb	r2, [r7, #15]
 80044f0:	6879      	ldr	r1, [r7, #4]
 80044f2:	4613      	mov	r3, r2
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	4413      	add	r3, r2
 80044f8:	00db      	lsls	r3, r3, #3
 80044fa:	440b      	add	r3, r1
 80044fc:	3324      	adds	r3, #36	@ 0x24
 80044fe:	2200      	movs	r2, #0
 8004500:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004502:	7bfb      	ldrb	r3, [r7, #15]
 8004504:	6879      	ldr	r1, [r7, #4]
 8004506:	1c5a      	adds	r2, r3, #1
 8004508:	4613      	mov	r3, r2
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	4413      	add	r3, r2
 800450e:	00db      	lsls	r3, r3, #3
 8004510:	440b      	add	r3, r1
 8004512:	2200      	movs	r2, #0
 8004514:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004516:	7bfb      	ldrb	r3, [r7, #15]
 8004518:	3301      	adds	r3, #1
 800451a:	73fb      	strb	r3, [r7, #15]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	791b      	ldrb	r3, [r3, #4]
 8004520:	7bfa      	ldrb	r2, [r7, #15]
 8004522:	429a      	cmp	r2, r3
 8004524:	d3bb      	bcc.n	800449e <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004526:	2300      	movs	r3, #0
 8004528:	73fb      	strb	r3, [r7, #15]
 800452a:	e044      	b.n	80045b6 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800452c:	7bfa      	ldrb	r2, [r7, #15]
 800452e:	6879      	ldr	r1, [r7, #4]
 8004530:	4613      	mov	r3, r2
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	4413      	add	r3, r2
 8004536:	00db      	lsls	r3, r3, #3
 8004538:	440b      	add	r3, r1
 800453a:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800453e:	2200      	movs	r2, #0
 8004540:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004542:	7bfa      	ldrb	r2, [r7, #15]
 8004544:	6879      	ldr	r1, [r7, #4]
 8004546:	4613      	mov	r3, r2
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	4413      	add	r3, r2
 800454c:	00db      	lsls	r3, r3, #3
 800454e:	440b      	add	r3, r1
 8004550:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004554:	7bfa      	ldrb	r2, [r7, #15]
 8004556:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004558:	7bfa      	ldrb	r2, [r7, #15]
 800455a:	6879      	ldr	r1, [r7, #4]
 800455c:	4613      	mov	r3, r2
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	4413      	add	r3, r2
 8004562:	00db      	lsls	r3, r3, #3
 8004564:	440b      	add	r3, r1
 8004566:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800456a:	2200      	movs	r2, #0
 800456c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800456e:	7bfa      	ldrb	r2, [r7, #15]
 8004570:	6879      	ldr	r1, [r7, #4]
 8004572:	4613      	mov	r3, r2
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	4413      	add	r3, r2
 8004578:	00db      	lsls	r3, r3, #3
 800457a:	440b      	add	r3, r1
 800457c:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8004580:	2200      	movs	r2, #0
 8004582:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004584:	7bfa      	ldrb	r2, [r7, #15]
 8004586:	6879      	ldr	r1, [r7, #4]
 8004588:	4613      	mov	r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	4413      	add	r3, r2
 800458e:	00db      	lsls	r3, r3, #3
 8004590:	440b      	add	r3, r1
 8004592:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004596:	2200      	movs	r2, #0
 8004598:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800459a:	7bfa      	ldrb	r2, [r7, #15]
 800459c:	6879      	ldr	r1, [r7, #4]
 800459e:	4613      	mov	r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	4413      	add	r3, r2
 80045a4:	00db      	lsls	r3, r3, #3
 80045a6:	440b      	add	r3, r1
 80045a8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80045ac:	2200      	movs	r2, #0
 80045ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045b0:	7bfb      	ldrb	r3, [r7, #15]
 80045b2:	3301      	adds	r3, #1
 80045b4:	73fb      	strb	r3, [r7, #15]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	791b      	ldrb	r3, [r3, #4]
 80045ba:	7bfa      	ldrb	r2, [r7, #15]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d3b5      	bcc.n	800452c <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6818      	ldr	r0, [r3, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	3304      	adds	r3, #4
 80045c8:	e893 0006 	ldmia.w	r3, {r1, r2}
 80045cc:	f004 fe12 	bl	80091f4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2201      	movs	r2, #1
 80045da:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	7a9b      	ldrb	r3, [r3, #10]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d102      	bne.n	80045ec <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f001 fc40 	bl	8005e6c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3710      	adds	r7, #16
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}

080045f6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80045f6:	b580      	push	{r7, lr}
 80045f8:	b082      	sub	sp, #8
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004604:	2b01      	cmp	r3, #1
 8004606:	d101      	bne.n	800460c <HAL_PCD_Start+0x16>
 8004608:	2302      	movs	r3, #2
 800460a:	e012      	b.n	8004632 <HAL_PCD_Start+0x3c>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4618      	mov	r0, r3
 800461a:	f004 fdb9 	bl	8009190 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4618      	mov	r0, r3
 8004624:	f007 f879 	bl	800b71a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	3708      	adds	r7, #8
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}

0800463a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800463a:	b580      	push	{r7, lr}
 800463c:	b084      	sub	sp, #16
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4618      	mov	r0, r3
 8004648:	f007 f87e 	bl	800b748 <USB_ReadInterrupts>
 800464c:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d003      	beq.n	8004660 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 fb04 	bl	8004c66 <PCD_EP_ISR_Handler>

    return;
 800465e:	e110      	b.n	8004882 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004666:	2b00      	cmp	r3, #0
 8004668:	d013      	beq.n	8004692 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004672:	b29a      	uxth	r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800467c:	b292      	uxth	r2, r2
 800467e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f008 ffd9 	bl	800d63a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004688:	2100      	movs	r1, #0
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 f8fc 	bl	8004888 <HAL_PCD_SetAddress>

    return;
 8004690:	e0f7      	b.n	8004882 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d00c      	beq.n	80046b6 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80046a4:	b29a      	uxth	r2, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80046ae:	b292      	uxth	r2, r2
 80046b0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80046b4:	e0e5      	b.n	8004882 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d00c      	beq.n	80046da <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80046d2:	b292      	uxth	r2, r2
 80046d4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80046d8:	e0d3      	b.n	8004882 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d034      	beq.n	800474e <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80046ec:	b29a      	uxth	r2, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f022 0204 	bic.w	r2, r2, #4
 80046f6:	b292      	uxth	r2, r2
 80046f8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004704:	b29a      	uxth	r2, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f022 0208 	bic.w	r2, r2, #8
 800470e:	b292      	uxth	r2, r2
 8004710:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800471a:	2b01      	cmp	r3, #1
 800471c:	d107      	bne.n	800472e <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004726:	2100      	movs	r1, #0
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f009 f979 	bl	800da20 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f008 ffbc 	bl	800d6ac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800473c:	b29a      	uxth	r2, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004746:	b292      	uxth	r2, r2
 8004748:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800474c:	e099      	b.n	8004882 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004754:	2b00      	cmp	r3, #0
 8004756:	d027      	beq.n	80047a8 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004760:	b29a      	uxth	r2, r3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f042 0208 	orr.w	r2, r2, #8
 800476a:	b292      	uxth	r2, r2
 800476c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004778:	b29a      	uxth	r2, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004782:	b292      	uxth	r2, r2
 8004784:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004790:	b29a      	uxth	r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f042 0204 	orr.w	r2, r2, #4
 800479a:	b292      	uxth	r2, r2
 800479c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f008 ff69 	bl	800d678 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80047a6:	e06c      	b.n	8004882 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d040      	beq.n	8004834 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80047ba:	b29a      	uxth	r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80047c4:	b292      	uxth	r2, r2
 80047c6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d12b      	bne.n	800482c <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80047dc:	b29a      	uxth	r2, r3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f042 0204 	orr.w	r2, r2, #4
 80047e6:	b292      	uxth	r2, r2
 80047e8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80047f4:	b29a      	uxth	r2, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f042 0208 	orr.w	r2, r2, #8
 80047fe:	b292      	uxth	r2, r2
 8004800:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004814:	b29b      	uxth	r3, r3
 8004816:	089b      	lsrs	r3, r3, #2
 8004818:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004822:	2101      	movs	r1, #1
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f009 f8fb 	bl	800da20 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800482a:	e02a      	b.n	8004882 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f008 ff23 	bl	800d678 <HAL_PCD_SuspendCallback>
    return;
 8004832:	e026      	b.n	8004882 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00f      	beq.n	800485e <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004846:	b29a      	uxth	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004850:	b292      	uxth	r2, r2
 8004852:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f008 fee1 	bl	800d61e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800485c:	e011      	b.n	8004882 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004864:	2b00      	cmp	r3, #0
 8004866:	d00c      	beq.n	8004882 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004870:	b29a      	uxth	r2, r3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800487a:	b292      	uxth	r2, r2
 800487c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004880:	bf00      	nop
  }
}
 8004882:	3710      	adds	r7, #16
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	460b      	mov	r3, r1
 8004892:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800489a:	2b01      	cmp	r3, #1
 800489c:	d101      	bne.n	80048a2 <HAL_PCD_SetAddress+0x1a>
 800489e:	2302      	movs	r3, #2
 80048a0:	e012      	b.n	80048c8 <HAL_PCD_SetAddress+0x40>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2201      	movs	r2, #1
 80048a6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	78fa      	ldrb	r2, [r7, #3]
 80048ae:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	78fa      	ldrb	r2, [r7, #3]
 80048b6:	4611      	mov	r1, r2
 80048b8:	4618      	mov	r0, r3
 80048ba:	f006 ff1a 	bl	800b6f2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80048c6:	2300      	movs	r3, #0
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3708      	adds	r7, #8
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	4608      	mov	r0, r1
 80048da:	4611      	mov	r1, r2
 80048dc:	461a      	mov	r2, r3
 80048de:	4603      	mov	r3, r0
 80048e0:	70fb      	strb	r3, [r7, #3]
 80048e2:	460b      	mov	r3, r1
 80048e4:	803b      	strh	r3, [r7, #0]
 80048e6:	4613      	mov	r3, r2
 80048e8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80048ea:	2300      	movs	r3, #0
 80048ec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80048ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	da0e      	bge.n	8004914 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048f6:	78fb      	ldrb	r3, [r7, #3]
 80048f8:	f003 0207 	and.w	r2, r3, #7
 80048fc:	4613      	mov	r3, r2
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	4413      	add	r3, r2
 8004902:	00db      	lsls	r3, r3, #3
 8004904:	3310      	adds	r3, #16
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	4413      	add	r3, r2
 800490a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2201      	movs	r2, #1
 8004910:	705a      	strb	r2, [r3, #1]
 8004912:	e00e      	b.n	8004932 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004914:	78fb      	ldrb	r3, [r7, #3]
 8004916:	f003 0207 	and.w	r2, r3, #7
 800491a:	4613      	mov	r3, r2
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	4413      	add	r3, r2
 8004920:	00db      	lsls	r3, r3, #3
 8004922:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	4413      	add	r3, r2
 800492a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2200      	movs	r2, #0
 8004930:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004932:	78fb      	ldrb	r3, [r7, #3]
 8004934:	f003 0307 	and.w	r3, r3, #7
 8004938:	b2da      	uxtb	r2, r3
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800493e:	883a      	ldrh	r2, [r7, #0]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	78ba      	ldrb	r2, [r7, #2]
 8004948:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800494a:	78bb      	ldrb	r3, [r7, #2]
 800494c:	2b02      	cmp	r3, #2
 800494e:	d102      	bne.n	8004956 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2200      	movs	r2, #0
 8004954:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800495c:	2b01      	cmp	r3, #1
 800495e:	d101      	bne.n	8004964 <HAL_PCD_EP_Open+0x94>
 8004960:	2302      	movs	r3, #2
 8004962:	e00e      	b.n	8004982 <HAL_PCD_EP_Open+0xb2>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	68f9      	ldr	r1, [r7, #12]
 8004972:	4618      	mov	r0, r3
 8004974:	f004 fc5c 	bl	8009230 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8004980:	7afb      	ldrb	r3, [r7, #11]
}
 8004982:	4618      	mov	r0, r3
 8004984:	3710      	adds	r7, #16
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}

0800498a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800498a:	b580      	push	{r7, lr}
 800498c:	b084      	sub	sp, #16
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
 8004992:	460b      	mov	r3, r1
 8004994:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004996:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800499a:	2b00      	cmp	r3, #0
 800499c:	da0e      	bge.n	80049bc <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800499e:	78fb      	ldrb	r3, [r7, #3]
 80049a0:	f003 0207 	and.w	r2, r3, #7
 80049a4:	4613      	mov	r3, r2
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	4413      	add	r3, r2
 80049aa:	00db      	lsls	r3, r3, #3
 80049ac:	3310      	adds	r3, #16
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	4413      	add	r3, r2
 80049b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2201      	movs	r2, #1
 80049b8:	705a      	strb	r2, [r3, #1]
 80049ba:	e00e      	b.n	80049da <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049bc:	78fb      	ldrb	r3, [r7, #3]
 80049be:	f003 0207 	and.w	r2, r3, #7
 80049c2:	4613      	mov	r3, r2
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	4413      	add	r3, r2
 80049c8:	00db      	lsls	r3, r3, #3
 80049ca:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	4413      	add	r3, r2
 80049d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2200      	movs	r2, #0
 80049d8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80049da:	78fb      	ldrb	r3, [r7, #3]
 80049dc:	f003 0307 	and.w	r3, r3, #7
 80049e0:	b2da      	uxtb	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d101      	bne.n	80049f4 <HAL_PCD_EP_Close+0x6a>
 80049f0:	2302      	movs	r3, #2
 80049f2:	e00e      	b.n	8004a12 <HAL_PCD_EP_Close+0x88>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	68f9      	ldr	r1, [r7, #12]
 8004a02:	4618      	mov	r0, r3
 8004a04:	f004 ffd8 	bl	80099b8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3710      	adds	r7, #16
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}

08004a1a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004a1a:	b580      	push	{r7, lr}
 8004a1c:	b086      	sub	sp, #24
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	60f8      	str	r0, [r7, #12]
 8004a22:	607a      	str	r2, [r7, #4]
 8004a24:	603b      	str	r3, [r7, #0]
 8004a26:	460b      	mov	r3, r1
 8004a28:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a2a:	7afb      	ldrb	r3, [r7, #11]
 8004a2c:	f003 0207 	and.w	r2, r3, #7
 8004a30:	4613      	mov	r3, r2
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	4413      	add	r3, r2
 8004a36:	00db      	lsls	r3, r3, #3
 8004a38:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004a3c:	68fa      	ldr	r2, [r7, #12]
 8004a3e:	4413      	add	r3, r2
 8004a40:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	683a      	ldr	r2, [r7, #0]
 8004a4c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	2200      	movs	r2, #0
 8004a52:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	2200      	movs	r2, #0
 8004a58:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a5a:	7afb      	ldrb	r3, [r7, #11]
 8004a5c:	f003 0307 	and.w	r3, r3, #7
 8004a60:	b2da      	uxtb	r2, r3
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	6979      	ldr	r1, [r7, #20]
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f005 f990 	bl	8009d92 <USB_EPStartXfer>

  return HAL_OK;
 8004a72:	2300      	movs	r3, #0
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3718      	adds	r7, #24
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	460b      	mov	r3, r1
 8004a86:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004a88:	78fb      	ldrb	r3, [r7, #3]
 8004a8a:	f003 0207 	and.w	r2, r3, #7
 8004a8e:	6879      	ldr	r1, [r7, #4]
 8004a90:	4613      	mov	r3, r2
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	4413      	add	r3, r2
 8004a96:	00db      	lsls	r3, r3, #3
 8004a98:	440b      	add	r3, r1
 8004a9a:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8004a9e:	681b      	ldr	r3, [r3, #0]
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	370c      	adds	r7, #12
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b086      	sub	sp, #24
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	607a      	str	r2, [r7, #4]
 8004ab6:	603b      	str	r3, [r7, #0]
 8004ab8:	460b      	mov	r3, r1
 8004aba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004abc:	7afb      	ldrb	r3, [r7, #11]
 8004abe:	f003 0207 	and.w	r2, r3, #7
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	4413      	add	r3, r2
 8004ac8:	00db      	lsls	r3, r3, #3
 8004aca:	3310      	adds	r3, #16
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	4413      	add	r3, r2
 8004ad0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	683a      	ldr	r2, [r7, #0]
 8004adc:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	683a      	ldr	r2, [r7, #0]
 8004aea:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	2200      	movs	r2, #0
 8004af0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	2201      	movs	r2, #1
 8004af6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004af8:	7afb      	ldrb	r3, [r7, #11]
 8004afa:	f003 0307 	and.w	r3, r3, #7
 8004afe:	b2da      	uxtb	r2, r3
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	6979      	ldr	r1, [r7, #20]
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f005 f941 	bl	8009d92 <USB_EPStartXfer>

  return HAL_OK;
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3718      	adds	r7, #24
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}

08004b1a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b1a:	b580      	push	{r7, lr}
 8004b1c:	b084      	sub	sp, #16
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
 8004b22:	460b      	mov	r3, r1
 8004b24:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004b26:	78fb      	ldrb	r3, [r7, #3]
 8004b28:	f003 0307 	and.w	r3, r3, #7
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	7912      	ldrb	r2, [r2, #4]
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d901      	bls.n	8004b38 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e03e      	b.n	8004bb6 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004b38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	da0e      	bge.n	8004b5e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b40:	78fb      	ldrb	r3, [r7, #3]
 8004b42:	f003 0207 	and.w	r2, r3, #7
 8004b46:	4613      	mov	r3, r2
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	4413      	add	r3, r2
 8004b4c:	00db      	lsls	r3, r3, #3
 8004b4e:	3310      	adds	r3, #16
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	4413      	add	r3, r2
 8004b54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	705a      	strb	r2, [r3, #1]
 8004b5c:	e00c      	b.n	8004b78 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004b5e:	78fa      	ldrb	r2, [r7, #3]
 8004b60:	4613      	mov	r3, r2
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	4413      	add	r3, r2
 8004b66:	00db      	lsls	r3, r3, #3
 8004b68:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	4413      	add	r3, r2
 8004b70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2200      	movs	r2, #0
 8004b76:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b7e:	78fb      	ldrb	r3, [r7, #3]
 8004b80:	f003 0307 	and.w	r3, r3, #7
 8004b84:	b2da      	uxtb	r2, r3
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d101      	bne.n	8004b98 <HAL_PCD_EP_SetStall+0x7e>
 8004b94:	2302      	movs	r3, #2
 8004b96:	e00e      	b.n	8004bb6 <HAL_PCD_EP_SetStall+0x9c>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68f9      	ldr	r1, [r7, #12]
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f006 fca4 	bl	800b4f4 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3710      	adds	r7, #16
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}

08004bbe <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004bbe:	b580      	push	{r7, lr}
 8004bc0:	b084      	sub	sp, #16
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
 8004bc6:	460b      	mov	r3, r1
 8004bc8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004bca:	78fb      	ldrb	r3, [r7, #3]
 8004bcc:	f003 030f 	and.w	r3, r3, #15
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	7912      	ldrb	r2, [r2, #4]
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d901      	bls.n	8004bdc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e040      	b.n	8004c5e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004bdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	da0e      	bge.n	8004c02 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004be4:	78fb      	ldrb	r3, [r7, #3]
 8004be6:	f003 0207 	and.w	r2, r3, #7
 8004bea:	4613      	mov	r3, r2
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	4413      	add	r3, r2
 8004bf0:	00db      	lsls	r3, r3, #3
 8004bf2:	3310      	adds	r3, #16
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	4413      	add	r3, r2
 8004bf8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	705a      	strb	r2, [r3, #1]
 8004c00:	e00e      	b.n	8004c20 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c02:	78fb      	ldrb	r3, [r7, #3]
 8004c04:	f003 0207 	and.w	r2, r3, #7
 8004c08:	4613      	mov	r3, r2
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	4413      	add	r3, r2
 8004c0e:	00db      	lsls	r3, r3, #3
 8004c10:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	4413      	add	r3, r2
 8004c18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2200      	movs	r2, #0
 8004c24:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c26:	78fb      	ldrb	r3, [r7, #3]
 8004c28:	f003 0307 	and.w	r3, r3, #7
 8004c2c:	b2da      	uxtb	r2, r3
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d101      	bne.n	8004c40 <HAL_PCD_EP_ClrStall+0x82>
 8004c3c:	2302      	movs	r3, #2
 8004c3e:	e00e      	b.n	8004c5e <HAL_PCD_EP_ClrStall+0xa0>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	68f9      	ldr	r1, [r7, #12]
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f006 fca1 	bl	800b596 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3710      	adds	r7, #16
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}

08004c66 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004c66:	b580      	push	{r7, lr}
 8004c68:	b096      	sub	sp, #88	@ 0x58
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004c6e:	e3ad      	b.n	80053cc <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004c78:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004c7c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	f003 030f 	and.w	r3, r3, #15
 8004c86:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8004c8a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	f040 816f 	bne.w	8004f72 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004c94:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004c98:	f003 0310 	and.w	r3, r3, #16
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d14c      	bne.n	8004d3a <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	881b      	ldrh	r3, [r3, #0]
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004cac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cb0:	81fb      	strh	r3, [r7, #14]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	89fb      	ldrh	r3, [r7, #14]
 8004cb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	3310      	adds	r3, #16
 8004cc8:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	00db      	lsls	r3, r3, #3
 8004cdc:	4413      	add	r3, r2
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	6812      	ldr	r2, [r2, #0]
 8004ce2:	4413      	add	r3, r2
 8004ce4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004ce8:	881b      	ldrh	r3, [r3, #0]
 8004cea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004cee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cf0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004cf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cf4:	695a      	ldr	r2, [r3, #20]
 8004cf6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cf8:	69db      	ldr	r3, [r3, #28]
 8004cfa:	441a      	add	r2, r3
 8004cfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cfe:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004d00:	2100      	movs	r1, #0
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f008 fc71 	bl	800d5ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	7b1b      	ldrb	r3, [r3, #12]
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	f000 835c 	beq.w	80053cc <PCD_EP_ISR_Handler+0x766>
 8004d14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d16:	699b      	ldr	r3, [r3, #24]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	f040 8357 	bne.w	80053cc <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	7b1b      	ldrb	r3, [r3, #12]
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004d28:	b2da      	uxtb	r2, r3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	731a      	strb	r2, [r3, #12]
 8004d38:	e348      	b.n	80053cc <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004d40:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	881b      	ldrh	r3, [r3, #0]
 8004d48:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004d4c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004d50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d032      	beq.n	8004dbe <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	461a      	mov	r2, r3
 8004d64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	00db      	lsls	r3, r3, #3
 8004d6a:	4413      	add	r3, r2
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	6812      	ldr	r2, [r2, #0]
 8004d70:	4413      	add	r3, r2
 8004d72:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004d76:	881b      	ldrh	r3, [r3, #0]
 8004d78:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004d7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d7e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6818      	ldr	r0, [r3, #0]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8004d8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d8c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004d8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d90:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	f006 fd2a 	bl	800b7ec <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	881b      	ldrh	r3, [r3, #0]
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004da4:	4013      	ands	r3, r2
 8004da6:	823b      	strh	r3, [r7, #16]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	8a3a      	ldrh	r2, [r7, #16]
 8004dae:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004db2:	b292      	uxth	r2, r2
 8004db4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f008 fbea 	bl	800d590 <HAL_PCD_SetupStageCallback>
 8004dbc:	e306      	b.n	80053cc <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004dbe:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	f280 8302 	bge.w	80053cc <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	881b      	ldrh	r3, [r3, #0]
 8004dce:	b29a      	uxth	r2, r3
 8004dd0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	83fb      	strh	r3, [r7, #30]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	8bfa      	ldrh	r2, [r7, #30]
 8004dde:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004de2:	b292      	uxth	r2, r2
 8004de4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	461a      	mov	r2, r3
 8004df2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	00db      	lsls	r3, r3, #3
 8004df8:	4413      	add	r3, r2
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	6812      	ldr	r2, [r2, #0]
 8004dfe:	4413      	add	r3, r2
 8004e00:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004e04:	881b      	ldrh	r3, [r3, #0]
 8004e06:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004e0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e0c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004e0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e10:	69db      	ldr	r3, [r3, #28]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d019      	beq.n	8004e4a <PCD_EP_ISR_Handler+0x1e4>
 8004e16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e18:	695b      	ldr	r3, [r3, #20]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d015      	beq.n	8004e4a <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6818      	ldr	r0, [r3, #0]
 8004e22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e24:	6959      	ldr	r1, [r3, #20]
 8004e26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e28:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004e2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e2c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	f006 fcdc 	bl	800b7ec <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004e34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e36:	695a      	ldr	r2, [r3, #20]
 8004e38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e3a:	69db      	ldr	r3, [r3, #28]
 8004e3c:	441a      	add	r2, r3
 8004e3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e40:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004e42:	2100      	movs	r1, #0
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f008 fbb5 	bl	800d5b4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	881b      	ldrh	r3, [r3, #0]
 8004e50:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8004e54:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004e58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	f040 82b5 	bne.w	80053cc <PCD_EP_ISR_Handler+0x766>
 8004e62:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004e66:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004e6a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004e6e:	f000 82ad 	beq.w	80053cc <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	61bb      	str	r3, [r7, #24]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	461a      	mov	r2, r3
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	4413      	add	r3, r2
 8004e88:	61bb      	str	r3, [r7, #24]
 8004e8a:	69bb      	ldr	r3, [r7, #24]
 8004e8c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004e90:	617b      	str	r3, [r7, #20]
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	881b      	ldrh	r3, [r3, #0]
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e9c:	b29a      	uxth	r2, r3
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	801a      	strh	r2, [r3, #0]
 8004ea2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	2b3e      	cmp	r3, #62	@ 0x3e
 8004ea8:	d91d      	bls.n	8004ee6 <PCD_EP_ISR_Handler+0x280>
 8004eaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	095b      	lsrs	r3, r3, #5
 8004eb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004eb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	f003 031f 	and.w	r3, r3, #31
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d102      	bne.n	8004ec4 <PCD_EP_ISR_Handler+0x25e>
 8004ebe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ec0:	3b01      	subs	r3, #1
 8004ec2:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	881b      	ldrh	r3, [r3, #0]
 8004ec8:	b29a      	uxth	r2, r3
 8004eca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	029b      	lsls	r3, r3, #10
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004eda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ede:	b29a      	uxth	r2, r3
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	801a      	strh	r2, [r3, #0]
 8004ee4:	e026      	b.n	8004f34 <PCD_EP_ISR_Handler+0x2ce>
 8004ee6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d10a      	bne.n	8004f04 <PCD_EP_ISR_Handler+0x29e>
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	881b      	ldrh	r3, [r3, #0]
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ef8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004efc:	b29a      	uxth	r2, r3
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	801a      	strh	r2, [r3, #0]
 8004f02:	e017      	b.n	8004f34 <PCD_EP_ISR_Handler+0x2ce>
 8004f04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	085b      	lsrs	r3, r3, #1
 8004f0a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f0e:	691b      	ldr	r3, [r3, #16]
 8004f10:	f003 0301 	and.w	r3, r3, #1
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d002      	beq.n	8004f1e <PCD_EP_ISR_Handler+0x2b8>
 8004f18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	881b      	ldrh	r3, [r3, #0]
 8004f22:	b29a      	uxth	r2, r3
 8004f24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	029b      	lsls	r3, r3, #10
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	881b      	ldrh	r3, [r3, #0]
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f44:	827b      	strh	r3, [r7, #18]
 8004f46:	8a7b      	ldrh	r3, [r7, #18]
 8004f48:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004f4c:	827b      	strh	r3, [r7, #18]
 8004f4e:	8a7b      	ldrh	r3, [r7, #18]
 8004f50:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004f54:	827b      	strh	r3, [r7, #18]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	8a7b      	ldrh	r3, [r7, #18]
 8004f5c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f60:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	8013      	strh	r3, [r2, #0]
 8004f70:	e22c      	b.n	80053cc <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	461a      	mov	r2, r3
 8004f78:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	4413      	add	r3, r2
 8004f80:	881b      	ldrh	r3, [r3, #0]
 8004f82:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004f86:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	f280 80f6 	bge.w	800517c <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	461a      	mov	r2, r3
 8004f96:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	4413      	add	r3, r2
 8004f9e:	881b      	ldrh	r3, [r3, #0]
 8004fa0:	b29a      	uxth	r2, r3
 8004fa2:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	4413      	add	r3, r2
 8004fba:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8004fbe:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004fc2:	b292      	uxth	r2, r2
 8004fc4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004fc6:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8004fca:	4613      	mov	r3, r2
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	4413      	add	r3, r2
 8004fd0:	00db      	lsls	r3, r3, #3
 8004fd2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	4413      	add	r3, r2
 8004fda:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004fdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fde:	7b1b      	ldrb	r3, [r3, #12]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d123      	bne.n	800502c <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	461a      	mov	r2, r3
 8004ff0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	00db      	lsls	r3, r3, #3
 8004ff6:	4413      	add	r3, r2
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	6812      	ldr	r2, [r2, #0]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005002:	881b      	ldrh	r3, [r3, #0]
 8005004:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005008:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 800500c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005010:	2b00      	cmp	r3, #0
 8005012:	f000 808e 	beq.w	8005132 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6818      	ldr	r0, [r3, #0]
 800501a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800501c:	6959      	ldr	r1, [r3, #20]
 800501e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005020:	88da      	ldrh	r2, [r3, #6]
 8005022:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005026:	f006 fbe1 	bl	800b7ec <USB_ReadPMA>
 800502a:	e082      	b.n	8005132 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800502c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800502e:	78db      	ldrb	r3, [r3, #3]
 8005030:	2b02      	cmp	r3, #2
 8005032:	d10a      	bne.n	800504a <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005034:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005038:	461a      	mov	r2, r3
 800503a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f000 f9d3 	bl	80053e8 <HAL_PCD_EP_DB_Receive>
 8005042:	4603      	mov	r3, r0
 8005044:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8005048:	e073      	b.n	8005132 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	461a      	mov	r2, r3
 8005050:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	4413      	add	r3, r2
 8005058:	881b      	ldrh	r3, [r3, #0]
 800505a:	b29b      	uxth	r3, r3
 800505c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005060:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005064:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	461a      	mov	r2, r3
 800506e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	441a      	add	r2, r3
 8005076:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800507a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800507e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005082:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005086:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800508a:	b29b      	uxth	r3, r3
 800508c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	461a      	mov	r2, r3
 8005094:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	4413      	add	r3, r2
 800509c:	881b      	ldrh	r3, [r3, #0]
 800509e:	b29b      	uxth	r3, r3
 80050a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d022      	beq.n	80050ee <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	461a      	mov	r2, r3
 80050b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	00db      	lsls	r3, r3, #3
 80050ba:	4413      	add	r3, r2
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	6812      	ldr	r2, [r2, #0]
 80050c0:	4413      	add	r3, r2
 80050c2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80050c6:	881b      	ldrh	r3, [r3, #0]
 80050c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050cc:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80050d0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d02c      	beq.n	8005132 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6818      	ldr	r0, [r3, #0]
 80050dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050de:	6959      	ldr	r1, [r3, #20]
 80050e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050e2:	891a      	ldrh	r2, [r3, #8]
 80050e4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80050e8:	f006 fb80 	bl	800b7ec <USB_ReadPMA>
 80050ec:	e021      	b.n	8005132 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	461a      	mov	r2, r3
 80050fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	00db      	lsls	r3, r3, #3
 8005100:	4413      	add	r3, r2
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	6812      	ldr	r2, [r2, #0]
 8005106:	4413      	add	r3, r2
 8005108:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800510c:	881b      	ldrh	r3, [r3, #0]
 800510e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005112:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8005116:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800511a:	2b00      	cmp	r3, #0
 800511c:	d009      	beq.n	8005132 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6818      	ldr	r0, [r3, #0]
 8005122:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005124:	6959      	ldr	r1, [r3, #20]
 8005126:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005128:	895a      	ldrh	r2, [r3, #10]
 800512a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800512e:	f006 fb5d 	bl	800b7ec <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005132:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005134:	69da      	ldr	r2, [r3, #28]
 8005136:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800513a:	441a      	add	r2, r3
 800513c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800513e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005140:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005142:	695a      	ldr	r2, [r3, #20]
 8005144:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005148:	441a      	add	r2, r3
 800514a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800514c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800514e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005150:	699b      	ldr	r3, [r3, #24]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d005      	beq.n	8005162 <PCD_EP_ISR_Handler+0x4fc>
 8005156:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800515a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	429a      	cmp	r2, r3
 8005160:	d206      	bcs.n	8005170 <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005162:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	4619      	mov	r1, r3
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f008 fa23 	bl	800d5b4 <HAL_PCD_DataOutStageCallback>
 800516e:	e005      	b.n	800517c <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005176:	4618      	mov	r0, r3
 8005178:	f004 fe0b 	bl	8009d92 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800517c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005180:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005184:	2b00      	cmp	r3, #0
 8005186:	f000 8121 	beq.w	80053cc <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 800518a:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800518e:	4613      	mov	r3, r2
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	4413      	add	r3, r2
 8005194:	00db      	lsls	r3, r3, #3
 8005196:	3310      	adds	r3, #16
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	4413      	add	r3, r2
 800519c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	461a      	mov	r2, r3
 80051a4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	4413      	add	r3, r2
 80051ac:	881b      	ldrh	r3, [r3, #0]
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80051b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051b8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	461a      	mov	r2, r3
 80051c2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	441a      	add	r2, r3
 80051ca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80051ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80051da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051dc:	78db      	ldrb	r3, [r3, #3]
 80051de:	2b01      	cmp	r3, #1
 80051e0:	f040 80a2 	bne.w	8005328 <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 80051e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051e6:	2200      	movs	r2, #0
 80051e8:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80051ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051ec:	7b1b      	ldrb	r3, [r3, #12]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	f000 8093 	beq.w	800531a <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80051f4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80051f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d046      	beq.n	800528e <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005200:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005202:	785b      	ldrb	r3, [r3, #1]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d126      	bne.n	8005256 <PCD_EP_ISR_Handler+0x5f0>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	627b      	str	r3, [r7, #36]	@ 0x24
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005216:	b29b      	uxth	r3, r3
 8005218:	461a      	mov	r2, r3
 800521a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800521c:	4413      	add	r3, r2
 800521e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005220:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	00da      	lsls	r2, r3, #3
 8005226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005228:	4413      	add	r3, r2
 800522a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800522e:	623b      	str	r3, [r7, #32]
 8005230:	6a3b      	ldr	r3, [r7, #32]
 8005232:	881b      	ldrh	r3, [r3, #0]
 8005234:	b29b      	uxth	r3, r3
 8005236:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800523a:	b29a      	uxth	r2, r3
 800523c:	6a3b      	ldr	r3, [r7, #32]
 800523e:	801a      	strh	r2, [r3, #0]
 8005240:	6a3b      	ldr	r3, [r7, #32]
 8005242:	881b      	ldrh	r3, [r3, #0]
 8005244:	b29b      	uxth	r3, r3
 8005246:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800524a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800524e:	b29a      	uxth	r2, r3
 8005250:	6a3b      	ldr	r3, [r7, #32]
 8005252:	801a      	strh	r2, [r3, #0]
 8005254:	e061      	b.n	800531a <PCD_EP_ISR_Handler+0x6b4>
 8005256:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005258:	785b      	ldrb	r3, [r3, #1]
 800525a:	2b01      	cmp	r3, #1
 800525c:	d15d      	bne.n	800531a <PCD_EP_ISR_Handler+0x6b4>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800526c:	b29b      	uxth	r3, r3
 800526e:	461a      	mov	r2, r3
 8005270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005272:	4413      	add	r3, r2
 8005274:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005276:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	00da      	lsls	r2, r3, #3
 800527c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800527e:	4413      	add	r3, r2
 8005280:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005284:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005288:	2200      	movs	r2, #0
 800528a:	801a      	strh	r2, [r3, #0]
 800528c:	e045      	b.n	800531a <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005294:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005296:	785b      	ldrb	r3, [r3, #1]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d126      	bne.n	80052ea <PCD_EP_ISR_Handler+0x684>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	461a      	mov	r2, r3
 80052ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052b0:	4413      	add	r3, r2
 80052b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80052b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	00da      	lsls	r2, r3, #3
 80052ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052bc:	4413      	add	r3, r2
 80052be:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80052c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80052c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052c6:	881b      	ldrh	r3, [r3, #0]
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052ce:	b29a      	uxth	r2, r3
 80052d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052d2:	801a      	strh	r2, [r3, #0]
 80052d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052d6:	881b      	ldrh	r3, [r3, #0]
 80052d8:	b29b      	uxth	r3, r3
 80052da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052e2:	b29a      	uxth	r2, r3
 80052e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052e6:	801a      	strh	r2, [r3, #0]
 80052e8:	e017      	b.n	800531a <PCD_EP_ISR_Handler+0x6b4>
 80052ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052ec:	785b      	ldrb	r3, [r3, #1]
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d113      	bne.n	800531a <PCD_EP_ISR_Handler+0x6b4>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	461a      	mov	r2, r3
 80052fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005300:	4413      	add	r3, r2
 8005302:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005304:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	00da      	lsls	r2, r3, #3
 800530a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800530c:	4413      	add	r3, r2
 800530e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005312:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005316:	2200      	movs	r2, #0
 8005318:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800531a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	4619      	mov	r1, r3
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f008 f962 	bl	800d5ea <HAL_PCD_DataInStageCallback>
 8005326:	e051      	b.n	80053cc <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8005328:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800532c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005330:	2b00      	cmp	r3, #0
 8005332:	d144      	bne.n	80053be <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800533c:	b29b      	uxth	r3, r3
 800533e:	461a      	mov	r2, r3
 8005340:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	00db      	lsls	r3, r3, #3
 8005346:	4413      	add	r3, r2
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	6812      	ldr	r2, [r2, #0]
 800534c:	4413      	add	r3, r2
 800534e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005352:	881b      	ldrh	r3, [r3, #0]
 8005354:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005358:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 800535c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800535e:	699a      	ldr	r2, [r3, #24]
 8005360:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005364:	429a      	cmp	r2, r3
 8005366:	d907      	bls.n	8005378 <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 8005368:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800536a:	699a      	ldr	r2, [r3, #24]
 800536c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005370:	1ad2      	subs	r2, r2, r3
 8005372:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005374:	619a      	str	r2, [r3, #24]
 8005376:	e002      	b.n	800537e <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 8005378:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800537a:	2200      	movs	r2, #0
 800537c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800537e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005380:	699b      	ldr	r3, [r3, #24]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d106      	bne.n	8005394 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005386:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	4619      	mov	r1, r3
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f008 f92c 	bl	800d5ea <HAL_PCD_DataInStageCallback>
 8005392:	e01b      	b.n	80053cc <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8005394:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005396:	695a      	ldr	r2, [r3, #20]
 8005398:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800539c:	441a      	add	r2, r3
 800539e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053a0:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80053a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053a4:	69da      	ldr	r2, [r3, #28]
 80053a6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80053aa:	441a      	add	r2, r3
 80053ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053ae:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80053b6:	4618      	mov	r0, r3
 80053b8:	f004 fceb 	bl	8009d92 <USB_EPStartXfer>
 80053bc:	e006      	b.n	80053cc <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80053be:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80053c2:	461a      	mov	r2, r3
 80053c4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f000 f917 	bl	80055fa <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	b21b      	sxth	r3, r3
 80053d8:	2b00      	cmp	r3, #0
 80053da:	f6ff ac49 	blt.w	8004c70 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80053de:	2300      	movs	r3, #0
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3758      	adds	r7, #88	@ 0x58
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b088      	sub	sp, #32
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	4613      	mov	r3, r2
 80053f4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80053f6:	88fb      	ldrh	r3, [r7, #6]
 80053f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d07c      	beq.n	80054fa <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005408:	b29b      	uxth	r3, r3
 800540a:	461a      	mov	r2, r3
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	00db      	lsls	r3, r3, #3
 8005412:	4413      	add	r3, r2
 8005414:	68fa      	ldr	r2, [r7, #12]
 8005416:	6812      	ldr	r2, [r2, #0]
 8005418:	4413      	add	r3, r2
 800541a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800541e:	881b      	ldrh	r3, [r3, #0]
 8005420:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005424:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	699a      	ldr	r2, [r3, #24]
 800542a:	8b7b      	ldrh	r3, [r7, #26]
 800542c:	429a      	cmp	r2, r3
 800542e:	d306      	bcc.n	800543e <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	699a      	ldr	r2, [r3, #24]
 8005434:	8b7b      	ldrh	r3, [r7, #26]
 8005436:	1ad2      	subs	r2, r2, r3
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	619a      	str	r2, [r3, #24]
 800543c:	e002      	b.n	8005444 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	2200      	movs	r2, #0
 8005442:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	699b      	ldr	r3, [r3, #24]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d123      	bne.n	8005494 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	461a      	mov	r2, r3
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	4413      	add	r3, r2
 800545a:	881b      	ldrh	r3, [r3, #0]
 800545c:	b29b      	uxth	r3, r3
 800545e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005462:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005466:	833b      	strh	r3, [r7, #24]
 8005468:	8b3b      	ldrh	r3, [r7, #24]
 800546a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800546e:	833b      	strh	r3, [r7, #24]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	461a      	mov	r2, r3
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	441a      	add	r2, r3
 800547e:	8b3b      	ldrh	r3, [r7, #24]
 8005480:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005484:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005488:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800548c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005490:	b29b      	uxth	r3, r3
 8005492:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005494:	88fb      	ldrh	r3, [r7, #6]
 8005496:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800549a:	2b00      	cmp	r3, #0
 800549c:	d01f      	beq.n	80054de <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	461a      	mov	r2, r3
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	4413      	add	r3, r2
 80054ac:	881b      	ldrh	r3, [r3, #0]
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054b8:	82fb      	strh	r3, [r7, #22]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	461a      	mov	r2, r3
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	441a      	add	r2, r3
 80054c8:	8afb      	ldrh	r3, [r7, #22]
 80054ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054d6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80054da:	b29b      	uxth	r3, r3
 80054dc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80054de:	8b7b      	ldrh	r3, [r7, #26]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	f000 8085 	beq.w	80055f0 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	6818      	ldr	r0, [r3, #0]
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	6959      	ldr	r1, [r3, #20]
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	891a      	ldrh	r2, [r3, #8]
 80054f2:	8b7b      	ldrh	r3, [r7, #26]
 80054f4:	f006 f97a 	bl	800b7ec <USB_ReadPMA>
 80054f8:	e07a      	b.n	80055f0 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005502:	b29b      	uxth	r3, r3
 8005504:	461a      	mov	r2, r3
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	00db      	lsls	r3, r3, #3
 800550c:	4413      	add	r3, r2
 800550e:	68fa      	ldr	r2, [r7, #12]
 8005510:	6812      	ldr	r2, [r2, #0]
 8005512:	4413      	add	r3, r2
 8005514:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005518:	881b      	ldrh	r3, [r3, #0]
 800551a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800551e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	699a      	ldr	r2, [r3, #24]
 8005524:	8b7b      	ldrh	r3, [r7, #26]
 8005526:	429a      	cmp	r2, r3
 8005528:	d306      	bcc.n	8005538 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	699a      	ldr	r2, [r3, #24]
 800552e:	8b7b      	ldrh	r3, [r7, #26]
 8005530:	1ad2      	subs	r2, r2, r3
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	619a      	str	r2, [r3, #24]
 8005536:	e002      	b.n	800553e <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	2200      	movs	r2, #0
 800553c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	699b      	ldr	r3, [r3, #24]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d123      	bne.n	800558e <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	461a      	mov	r2, r3
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	4413      	add	r3, r2
 8005554:	881b      	ldrh	r3, [r3, #0]
 8005556:	b29b      	uxth	r3, r3
 8005558:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800555c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005560:	83fb      	strh	r3, [r7, #30]
 8005562:	8bfb      	ldrh	r3, [r7, #30]
 8005564:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005568:	83fb      	strh	r3, [r7, #30]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	461a      	mov	r2, r3
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	441a      	add	r2, r3
 8005578:	8bfb      	ldrh	r3, [r7, #30]
 800557a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800557e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005582:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005586:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800558a:	b29b      	uxth	r3, r3
 800558c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800558e:	88fb      	ldrh	r3, [r7, #6]
 8005590:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005594:	2b00      	cmp	r3, #0
 8005596:	d11f      	bne.n	80055d8 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	461a      	mov	r2, r3
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	4413      	add	r3, r2
 80055a6:	881b      	ldrh	r3, [r3, #0]
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055b2:	83bb      	strh	r3, [r7, #28]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	461a      	mov	r2, r3
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	441a      	add	r2, r3
 80055c2:	8bbb      	ldrh	r3, [r7, #28]
 80055c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80055c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055d0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80055d8:	8b7b      	ldrh	r3, [r7, #26]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d008      	beq.n	80055f0 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6818      	ldr	r0, [r3, #0]
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	6959      	ldr	r1, [r3, #20]
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	895a      	ldrh	r2, [r3, #10]
 80055ea:	8b7b      	ldrh	r3, [r7, #26]
 80055ec:	f006 f8fe 	bl	800b7ec <USB_ReadPMA>
    }
  }

  return count;
 80055f0:	8b7b      	ldrh	r3, [r7, #26]
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3720      	adds	r7, #32
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}

080055fa <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80055fa:	b580      	push	{r7, lr}
 80055fc:	b0a4      	sub	sp, #144	@ 0x90
 80055fe:	af00      	add	r7, sp, #0
 8005600:	60f8      	str	r0, [r7, #12]
 8005602:	60b9      	str	r1, [r7, #8]
 8005604:	4613      	mov	r3, r2
 8005606:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005608:	88fb      	ldrh	r3, [r7, #6]
 800560a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800560e:	2b00      	cmp	r3, #0
 8005610:	f000 81db 	beq.w	80059ca <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800561c:	b29b      	uxth	r3, r3
 800561e:	461a      	mov	r2, r3
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	00db      	lsls	r3, r3, #3
 8005626:	4413      	add	r3, r2
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	6812      	ldr	r2, [r2, #0]
 800562c:	4413      	add	r3, r2
 800562e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005632:	881b      	ldrh	r3, [r3, #0]
 8005634:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005638:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	699a      	ldr	r2, [r3, #24]
 8005640:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005644:	429a      	cmp	r2, r3
 8005646:	d907      	bls.n	8005658 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	699a      	ldr	r2, [r3, #24]
 800564c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005650:	1ad2      	subs	r2, r2, r3
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	619a      	str	r2, [r3, #24]
 8005656:	e002      	b.n	800565e <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	2200      	movs	r2, #0
 800565c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	2b00      	cmp	r3, #0
 8005664:	f040 80b9 	bne.w	80057da <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	785b      	ldrb	r3, [r3, #1]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d126      	bne.n	80056be <HAL_PCD_EP_DB_Transmit+0xc4>
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800567e:	b29b      	uxth	r3, r3
 8005680:	461a      	mov	r2, r3
 8005682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005684:	4413      	add	r3, r2
 8005686:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	00da      	lsls	r2, r3, #3
 800568e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005690:	4413      	add	r3, r2
 8005692:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005696:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800569a:	881b      	ldrh	r3, [r3, #0]
 800569c:	b29b      	uxth	r3, r3
 800569e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056a2:	b29a      	uxth	r2, r3
 80056a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056a6:	801a      	strh	r2, [r3, #0]
 80056a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056aa:	881b      	ldrh	r3, [r3, #0]
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056b6:	b29a      	uxth	r2, r3
 80056b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056ba:	801a      	strh	r2, [r3, #0]
 80056bc:	e01a      	b.n	80056f4 <HAL_PCD_EP_DB_Transmit+0xfa>
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	785b      	ldrb	r3, [r3, #1]
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d116      	bne.n	80056f4 <HAL_PCD_EP_DB_Transmit+0xfa>
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	461a      	mov	r2, r3
 80056d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056da:	4413      	add	r3, r2
 80056dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	00da      	lsls	r2, r3, #3
 80056e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056e6:	4413      	add	r3, r2
 80056e8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80056ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80056ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056f0:	2200      	movs	r2, #0
 80056f2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	785b      	ldrb	r3, [r3, #1]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d126      	bne.n	8005750 <HAL_PCD_EP_DB_Transmit+0x156>
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	61fb      	str	r3, [r7, #28]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005710:	b29b      	uxth	r3, r3
 8005712:	461a      	mov	r2, r3
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	4413      	add	r3, r2
 8005718:	61fb      	str	r3, [r7, #28]
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	00da      	lsls	r2, r3, #3
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	4413      	add	r3, r2
 8005724:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005728:	61bb      	str	r3, [r7, #24]
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	881b      	ldrh	r3, [r3, #0]
 800572e:	b29b      	uxth	r3, r3
 8005730:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005734:	b29a      	uxth	r2, r3
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	801a      	strh	r2, [r3, #0]
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	881b      	ldrh	r3, [r3, #0]
 800573e:	b29b      	uxth	r3, r3
 8005740:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005744:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005748:	b29a      	uxth	r2, r3
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	801a      	strh	r2, [r3, #0]
 800574e:	e017      	b.n	8005780 <HAL_PCD_EP_DB_Transmit+0x186>
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	785b      	ldrb	r3, [r3, #1]
 8005754:	2b01      	cmp	r3, #1
 8005756:	d113      	bne.n	8005780 <HAL_PCD_EP_DB_Transmit+0x186>
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005760:	b29b      	uxth	r3, r3
 8005762:	461a      	mov	r2, r3
 8005764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005766:	4413      	add	r3, r2
 8005768:	627b      	str	r3, [r7, #36]	@ 0x24
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	00da      	lsls	r2, r3, #3
 8005770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005772:	4413      	add	r3, r2
 8005774:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005778:	623b      	str	r3, [r7, #32]
 800577a:	6a3b      	ldr	r3, [r7, #32]
 800577c:	2200      	movs	r2, #0
 800577e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	4619      	mov	r1, r3
 8005786:	68f8      	ldr	r0, [r7, #12]
 8005788:	f007 ff2f 	bl	800d5ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800578c:	88fb      	ldrh	r3, [r7, #6]
 800578e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005792:	2b00      	cmp	r3, #0
 8005794:	f000 82fa 	beq.w	8005d8c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	461a      	mov	r2, r3
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	4413      	add	r3, r2
 80057a6:	881b      	ldrh	r3, [r3, #0]
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057b2:	82fb      	strh	r3, [r7, #22]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	461a      	mov	r2, r3
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	441a      	add	r2, r3
 80057c2:	8afb      	ldrh	r3, [r7, #22]
 80057c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057cc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80057d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	8013      	strh	r3, [r2, #0]
 80057d8:	e2d8      	b.n	8005d8c <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80057da:	88fb      	ldrh	r3, [r7, #6]
 80057dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d021      	beq.n	8005828 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	461a      	mov	r2, r3
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	781b      	ldrb	r3, [r3, #0]
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	4413      	add	r3, r2
 80057f2:	881b      	ldrh	r3, [r3, #0]
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057fe:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	461a      	mov	r2, r3
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	441a      	add	r2, r3
 8005810:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005814:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005818:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800581c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005820:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005824:	b29b      	uxth	r3, r3
 8005826:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800582e:	2b01      	cmp	r3, #1
 8005830:	f040 82ac 	bne.w	8005d8c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	695a      	ldr	r2, [r3, #20]
 8005838:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800583c:	441a      	add	r2, r3
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	69da      	ldr	r2, [r3, #28]
 8005846:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800584a:	441a      	add	r2, r3
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	6a1a      	ldr	r2, [r3, #32]
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	691b      	ldr	r3, [r3, #16]
 8005858:	429a      	cmp	r2, r3
 800585a:	d30b      	bcc.n	8005874 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	6a1a      	ldr	r2, [r3, #32]
 8005868:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800586c:	1ad2      	subs	r2, r2, r3
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	621a      	str	r2, [r3, #32]
 8005872:	e017      	b.n	80058a4 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	6a1b      	ldr	r3, [r3, #32]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d108      	bne.n	800588e <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 800587c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005880:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	2200      	movs	r2, #0
 8005888:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800588c:	e00a      	b.n	80058a4 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	6a1b      	ldr	r3, [r3, #32]
 800589a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	2200      	movs	r2, #0
 80058a2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	785b      	ldrb	r3, [r3, #1]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d165      	bne.n	8005978 <HAL_PCD_EP_DB_Transmit+0x37e>
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	461a      	mov	r2, r3
 80058be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058c0:	4413      	add	r3, r2
 80058c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	00da      	lsls	r2, r3, #3
 80058ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058cc:	4413      	add	r3, r2
 80058ce:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80058d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80058d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058d6:	881b      	ldrh	r3, [r3, #0]
 80058d8:	b29b      	uxth	r3, r3
 80058da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058de:	b29a      	uxth	r2, r3
 80058e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058e2:	801a      	strh	r2, [r3, #0]
 80058e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80058e8:	2b3e      	cmp	r3, #62	@ 0x3e
 80058ea:	d91d      	bls.n	8005928 <HAL_PCD_EP_DB_Transmit+0x32e>
 80058ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80058f0:	095b      	lsrs	r3, r3, #5
 80058f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80058f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80058f8:	f003 031f 	and.w	r3, r3, #31
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d102      	bne.n	8005906 <HAL_PCD_EP_DB_Transmit+0x30c>
 8005900:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005902:	3b01      	subs	r3, #1
 8005904:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005908:	881b      	ldrh	r3, [r3, #0]
 800590a:	b29a      	uxth	r2, r3
 800590c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800590e:	b29b      	uxth	r3, r3
 8005910:	029b      	lsls	r3, r3, #10
 8005912:	b29b      	uxth	r3, r3
 8005914:	4313      	orrs	r3, r2
 8005916:	b29b      	uxth	r3, r3
 8005918:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800591c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005920:	b29a      	uxth	r2, r3
 8005922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005924:	801a      	strh	r2, [r3, #0]
 8005926:	e044      	b.n	80059b2 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005928:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800592c:	2b00      	cmp	r3, #0
 800592e:	d10a      	bne.n	8005946 <HAL_PCD_EP_DB_Transmit+0x34c>
 8005930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005932:	881b      	ldrh	r3, [r3, #0]
 8005934:	b29b      	uxth	r3, r3
 8005936:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800593a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800593e:	b29a      	uxth	r2, r3
 8005940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005942:	801a      	strh	r2, [r3, #0]
 8005944:	e035      	b.n	80059b2 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005946:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800594a:	085b      	lsrs	r3, r3, #1
 800594c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800594e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005952:	f003 0301 	and.w	r3, r3, #1
 8005956:	2b00      	cmp	r3, #0
 8005958:	d002      	beq.n	8005960 <HAL_PCD_EP_DB_Transmit+0x366>
 800595a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800595c:	3301      	adds	r3, #1
 800595e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005962:	881b      	ldrh	r3, [r3, #0]
 8005964:	b29a      	uxth	r2, r3
 8005966:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005968:	b29b      	uxth	r3, r3
 800596a:	029b      	lsls	r3, r3, #10
 800596c:	b29b      	uxth	r3, r3
 800596e:	4313      	orrs	r3, r2
 8005970:	b29a      	uxth	r2, r3
 8005972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005974:	801a      	strh	r2, [r3, #0]
 8005976:	e01c      	b.n	80059b2 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	785b      	ldrb	r3, [r3, #1]
 800597c:	2b01      	cmp	r3, #1
 800597e:	d118      	bne.n	80059b2 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	647b      	str	r3, [r7, #68]	@ 0x44
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800598e:	b29b      	uxth	r3, r3
 8005990:	461a      	mov	r2, r3
 8005992:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005994:	4413      	add	r3, r2
 8005996:	647b      	str	r3, [r7, #68]	@ 0x44
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	00da      	lsls	r2, r3, #3
 800599e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059a0:	4413      	add	r3, r2
 80059a2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80059a6:	643b      	str	r3, [r7, #64]	@ 0x40
 80059a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80059ac:	b29a      	uxth	r2, r3
 80059ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059b0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6818      	ldr	r0, [r3, #0]
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	6959      	ldr	r1, [r3, #20]
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	891a      	ldrh	r2, [r3, #8]
 80059be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	f005 fed0 	bl	800b768 <USB_WritePMA>
 80059c8:	e1e0      	b.n	8005d8c <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	461a      	mov	r2, r3
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	00db      	lsls	r3, r3, #3
 80059dc:	4413      	add	r3, r2
 80059de:	68fa      	ldr	r2, [r7, #12]
 80059e0:	6812      	ldr	r2, [r2, #0]
 80059e2:	4413      	add	r3, r2
 80059e4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80059e8:	881b      	ldrh	r3, [r3, #0]
 80059ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059ee:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	699a      	ldr	r2, [r3, #24]
 80059f6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d307      	bcc.n	8005a0e <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	699a      	ldr	r2, [r3, #24]
 8005a02:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005a06:	1ad2      	subs	r2, r2, r3
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	619a      	str	r2, [r3, #24]
 8005a0c:	e002      	b.n	8005a14 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	2200      	movs	r2, #0
 8005a12:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	699b      	ldr	r3, [r3, #24]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	f040 80c0 	bne.w	8005b9e <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	785b      	ldrb	r3, [r3, #1]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d126      	bne.n	8005a74 <HAL_PCD_EP_DB_Transmit+0x47a>
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	461a      	mov	r2, r3
 8005a38:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005a3a:	4413      	add	r3, r2
 8005a3c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	00da      	lsls	r2, r3, #3
 8005a44:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005a46:	4413      	add	r3, r2
 8005a48:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005a4c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005a4e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a50:	881b      	ldrh	r3, [r3, #0]
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a58:	b29a      	uxth	r2, r3
 8005a5a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a5c:	801a      	strh	r2, [r3, #0]
 8005a5e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a60:	881b      	ldrh	r3, [r3, #0]
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a6c:	b29a      	uxth	r2, r3
 8005a6e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a70:	801a      	strh	r2, [r3, #0]
 8005a72:	e01a      	b.n	8005aaa <HAL_PCD_EP_DB_Transmit+0x4b0>
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	785b      	ldrb	r3, [r3, #1]
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d116      	bne.n	8005aaa <HAL_PCD_EP_DB_Transmit+0x4b0>
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	667b      	str	r3, [r7, #100]	@ 0x64
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a90:	4413      	add	r3, r2
 8005a92:	667b      	str	r3, [r7, #100]	@ 0x64
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	00da      	lsls	r2, r3, #3
 8005a9a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a9c:	4413      	add	r3, r2
 8005a9e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005aa2:	663b      	str	r3, [r7, #96]	@ 0x60
 8005aa4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	677b      	str	r3, [r7, #116]	@ 0x74
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	785b      	ldrb	r3, [r3, #1]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d12b      	bne.n	8005b10 <HAL_PCD_EP_DB_Transmit+0x516>
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	461a      	mov	r2, r3
 8005aca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005acc:	4413      	add	r3, r2
 8005ace:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	00da      	lsls	r2, r3, #3
 8005ad6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ad8:	4413      	add	r3, r2
 8005ada:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005ade:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005ae2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005ae6:	881b      	ldrh	r3, [r3, #0]
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005aee:	b29a      	uxth	r2, r3
 8005af0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005af4:	801a      	strh	r2, [r3, #0]
 8005af6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005afa:	881b      	ldrh	r3, [r3, #0]
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b06:	b29a      	uxth	r2, r3
 8005b08:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005b0c:	801a      	strh	r2, [r3, #0]
 8005b0e:	e017      	b.n	8005b40 <HAL_PCD_EP_DB_Transmit+0x546>
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	785b      	ldrb	r3, [r3, #1]
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d113      	bne.n	8005b40 <HAL_PCD_EP_DB_Transmit+0x546>
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	461a      	mov	r2, r3
 8005b24:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005b26:	4413      	add	r3, r2
 8005b28:	677b      	str	r3, [r7, #116]	@ 0x74
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	00da      	lsls	r2, r3, #3
 8005b30:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005b32:	4413      	add	r3, r2
 8005b34:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005b38:	673b      	str	r3, [r7, #112]	@ 0x70
 8005b3a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	4619      	mov	r1, r3
 8005b46:	68f8      	ldr	r0, [r7, #12]
 8005b48:	f007 fd4f 	bl	800d5ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005b4c:	88fb      	ldrh	r3, [r7, #6]
 8005b4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	f040 811a 	bne.w	8005d8c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	4413      	add	r3, r2
 8005b66:	881b      	ldrh	r3, [r3, #0]
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b72:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	441a      	add	r2, r3
 8005b84:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005b88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b90:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005b94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	8013      	strh	r3, [r2, #0]
 8005b9c:	e0f6      	b.n	8005d8c <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005b9e:	88fb      	ldrh	r3, [r7, #6]
 8005ba0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d121      	bne.n	8005bec <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	461a      	mov	r2, r3
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	4413      	add	r3, r2
 8005bb6:	881b      	ldrh	r3, [r3, #0]
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005bbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bc2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	461a      	mov	r2, r3
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	441a      	add	r2, r3
 8005bd4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005bd8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005bdc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005be0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005be4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	f040 80ca 	bne.w	8005d8c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	695a      	ldr	r2, [r3, #20]
 8005bfc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005c00:	441a      	add	r2, r3
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	69da      	ldr	r2, [r3, #28]
 8005c0a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005c0e:	441a      	add	r2, r3
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	6a1a      	ldr	r2, [r3, #32]
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	691b      	ldr	r3, [r3, #16]
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d30b      	bcc.n	8005c38 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	691b      	ldr	r3, [r3, #16]
 8005c24:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	6a1a      	ldr	r2, [r3, #32]
 8005c2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c30:	1ad2      	subs	r2, r2, r3
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	621a      	str	r2, [r3, #32]
 8005c36:	e017      	b.n	8005c68 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	6a1b      	ldr	r3, [r3, #32]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d108      	bne.n	8005c52 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8005c40:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005c44:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005c50:	e00a      	b.n	8005c68 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	6a1b      	ldr	r3, [r3, #32]
 8005c56:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	2200      	movs	r2, #0
 8005c64:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	657b      	str	r3, [r7, #84]	@ 0x54
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	785b      	ldrb	r3, [r3, #1]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d165      	bne.n	8005d42 <HAL_PCD_EP_DB_Transmit+0x748>
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	461a      	mov	r2, r3
 8005c88:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c8a:	4413      	add	r3, r2
 8005c8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	00da      	lsls	r2, r3, #3
 8005c94:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c96:	4413      	add	r3, r2
 8005c98:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005c9c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005c9e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005ca0:	881b      	ldrh	r3, [r3, #0]
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ca8:	b29a      	uxth	r2, r3
 8005caa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005cac:	801a      	strh	r2, [r3, #0]
 8005cae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005cb2:	2b3e      	cmp	r3, #62	@ 0x3e
 8005cb4:	d91d      	bls.n	8005cf2 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8005cb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005cba:	095b      	lsrs	r3, r3, #5
 8005cbc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005cbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005cc2:	f003 031f 	and.w	r3, r3, #31
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d102      	bne.n	8005cd0 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8005cca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005ccc:	3b01      	subs	r3, #1
 8005cce:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005cd0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005cd2:	881b      	ldrh	r3, [r3, #0]
 8005cd4:	b29a      	uxth	r2, r3
 8005cd6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	029b      	lsls	r3, r3, #10
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ce6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cea:	b29a      	uxth	r2, r3
 8005cec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005cee:	801a      	strh	r2, [r3, #0]
 8005cf0:	e041      	b.n	8005d76 <HAL_PCD_EP_DB_Transmit+0x77c>
 8005cf2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d10a      	bne.n	8005d10 <HAL_PCD_EP_DB_Transmit+0x716>
 8005cfa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005cfc:	881b      	ldrh	r3, [r3, #0]
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d08:	b29a      	uxth	r2, r3
 8005d0a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d0c:	801a      	strh	r2, [r3, #0]
 8005d0e:	e032      	b.n	8005d76 <HAL_PCD_EP_DB_Transmit+0x77c>
 8005d10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d14:	085b      	lsrs	r3, r3, #1
 8005d16:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d18:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d1c:	f003 0301 	and.w	r3, r3, #1
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d002      	beq.n	8005d2a <HAL_PCD_EP_DB_Transmit+0x730>
 8005d24:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005d26:	3301      	adds	r3, #1
 8005d28:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d2a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d2c:	881b      	ldrh	r3, [r3, #0]
 8005d2e:	b29a      	uxth	r2, r3
 8005d30:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	029b      	lsls	r3, r3, #10
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	b29a      	uxth	r2, r3
 8005d3c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d3e:	801a      	strh	r2, [r3, #0]
 8005d40:	e019      	b.n	8005d76 <HAL_PCD_EP_DB_Transmit+0x77c>
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	785b      	ldrb	r3, [r3, #1]
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d115      	bne.n	8005d76 <HAL_PCD_EP_DB_Transmit+0x77c>
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	461a      	mov	r2, r3
 8005d56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d58:	4413      	add	r3, r2
 8005d5a:	657b      	str	r3, [r7, #84]	@ 0x54
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	00da      	lsls	r2, r3, #3
 8005d62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d64:	4413      	add	r3, r2
 8005d66:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005d6a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d70:	b29a      	uxth	r2, r3
 8005d72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d74:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	6818      	ldr	r0, [r3, #0]
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	6959      	ldr	r1, [r3, #20]
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	895a      	ldrh	r2, [r3, #10]
 8005d82:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	f005 fcee 	bl	800b768 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	461a      	mov	r2, r3
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	4413      	add	r3, r2
 8005d9a:	881b      	ldrh	r3, [r3, #0]
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005da2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005da6:	82bb      	strh	r3, [r7, #20]
 8005da8:	8abb      	ldrh	r3, [r7, #20]
 8005daa:	f083 0310 	eor.w	r3, r3, #16
 8005dae:	82bb      	strh	r3, [r7, #20]
 8005db0:	8abb      	ldrh	r3, [r7, #20]
 8005db2:	f083 0320 	eor.w	r3, r3, #32
 8005db6:	82bb      	strh	r3, [r7, #20]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	441a      	add	r2, r3
 8005dc6:	8abb      	ldrh	r3, [r7, #20]
 8005dc8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005dcc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005dd0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005dd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005ddc:	2300      	movs	r3, #0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3790      	adds	r7, #144	@ 0x90
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}

08005de6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005de6:	b480      	push	{r7}
 8005de8:	b087      	sub	sp, #28
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	60f8      	str	r0, [r7, #12]
 8005dee:	607b      	str	r3, [r7, #4]
 8005df0:	460b      	mov	r3, r1
 8005df2:	817b      	strh	r3, [r7, #10]
 8005df4:	4613      	mov	r3, r2
 8005df6:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005df8:	897b      	ldrh	r3, [r7, #10]
 8005dfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d00b      	beq.n	8005e1c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e04:	897b      	ldrh	r3, [r7, #10]
 8005e06:	f003 0207 	and.w	r2, r3, #7
 8005e0a:	4613      	mov	r3, r2
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	4413      	add	r3, r2
 8005e10:	00db      	lsls	r3, r3, #3
 8005e12:	3310      	adds	r3, #16
 8005e14:	68fa      	ldr	r2, [r7, #12]
 8005e16:	4413      	add	r3, r2
 8005e18:	617b      	str	r3, [r7, #20]
 8005e1a:	e009      	b.n	8005e30 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005e1c:	897a      	ldrh	r2, [r7, #10]
 8005e1e:	4613      	mov	r3, r2
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	4413      	add	r3, r2
 8005e24:	00db      	lsls	r3, r3, #3
 8005e26:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005e2a:	68fa      	ldr	r2, [r7, #12]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005e30:	893b      	ldrh	r3, [r7, #8]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d107      	bne.n	8005e46 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	b29a      	uxth	r2, r3
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	80da      	strh	r2, [r3, #6]
 8005e44:	e00b      	b.n	8005e5e <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	2201      	movs	r2, #1
 8005e4a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	b29a      	uxth	r2, r3
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	0c1b      	lsrs	r3, r3, #16
 8005e58:	b29a      	uxth	r2, r3
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005e5e:	2300      	movs	r3, #0
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	371c      	adds	r7, #28
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b085      	sub	sp, #20
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	f043 0301 	orr.w	r3, r3, #1
 8005e96:	b29a      	uxth	r2, r3
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	f043 0302 	orr.w	r3, r3, #2
 8005eaa:	b29a      	uxth	r2, r3
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3714      	adds	r7, #20
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b085      	sub	sp, #20
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d141      	bne.n	8005f52 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005ece:	4b4b      	ldr	r3, [pc, #300]	@ (8005ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005ed6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005eda:	d131      	bne.n	8005f40 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005edc:	4b47      	ldr	r3, [pc, #284]	@ (8005ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ede:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ee2:	4a46      	ldr	r2, [pc, #280]	@ (8005ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ee4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ee8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005eec:	4b43      	ldr	r3, [pc, #268]	@ (8005ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005ef4:	4a41      	ldr	r2, [pc, #260]	@ (8005ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ef6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005efa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005efc:	4b40      	ldr	r3, [pc, #256]	@ (8006000 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	2232      	movs	r2, #50	@ 0x32
 8005f02:	fb02 f303 	mul.w	r3, r2, r3
 8005f06:	4a3f      	ldr	r2, [pc, #252]	@ (8006004 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005f08:	fba2 2303 	umull	r2, r3, r2, r3
 8005f0c:	0c9b      	lsrs	r3, r3, #18
 8005f0e:	3301      	adds	r3, #1
 8005f10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005f12:	e002      	b.n	8005f1a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	3b01      	subs	r3, #1
 8005f18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005f1a:	4b38      	ldr	r3, [pc, #224]	@ (8005ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f1c:	695b      	ldr	r3, [r3, #20]
 8005f1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f26:	d102      	bne.n	8005f2e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d1f2      	bne.n	8005f14 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005f2e:	4b33      	ldr	r3, [pc, #204]	@ (8005ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f30:	695b      	ldr	r3, [r3, #20]
 8005f32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f3a:	d158      	bne.n	8005fee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005f3c:	2303      	movs	r3, #3
 8005f3e:	e057      	b.n	8005ff0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005f40:	4b2e      	ldr	r3, [pc, #184]	@ (8005ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f46:	4a2d      	ldr	r2, [pc, #180]	@ (8005ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f4c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005f50:	e04d      	b.n	8005fee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f58:	d141      	bne.n	8005fde <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005f5a:	4b28      	ldr	r3, [pc, #160]	@ (8005ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005f62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f66:	d131      	bne.n	8005fcc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005f68:	4b24      	ldr	r3, [pc, #144]	@ (8005ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f6e:	4a23      	ldr	r2, [pc, #140]	@ (8005ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f74:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005f78:	4b20      	ldr	r3, [pc, #128]	@ (8005ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005f80:	4a1e      	ldr	r2, [pc, #120]	@ (8005ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005f86:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005f88:	4b1d      	ldr	r3, [pc, #116]	@ (8006000 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	2232      	movs	r2, #50	@ 0x32
 8005f8e:	fb02 f303 	mul.w	r3, r2, r3
 8005f92:	4a1c      	ldr	r2, [pc, #112]	@ (8006004 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005f94:	fba2 2303 	umull	r2, r3, r2, r3
 8005f98:	0c9b      	lsrs	r3, r3, #18
 8005f9a:	3301      	adds	r3, #1
 8005f9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005f9e:	e002      	b.n	8005fa6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	3b01      	subs	r3, #1
 8005fa4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005fa6:	4b15      	ldr	r3, [pc, #84]	@ (8005ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fa8:	695b      	ldr	r3, [r3, #20]
 8005faa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fb2:	d102      	bne.n	8005fba <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d1f2      	bne.n	8005fa0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005fba:	4b10      	ldr	r3, [pc, #64]	@ (8005ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fbc:	695b      	ldr	r3, [r3, #20]
 8005fbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fc6:	d112      	bne.n	8005fee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005fc8:	2303      	movs	r3, #3
 8005fca:	e011      	b.n	8005ff0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005fcc:	4b0b      	ldr	r3, [pc, #44]	@ (8005ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005fd2:	4a0a      	ldr	r2, [pc, #40]	@ (8005ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005fd8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005fdc:	e007      	b.n	8005fee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005fde:	4b07      	ldr	r3, [pc, #28]	@ (8005ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005fe6:	4a05      	ldr	r2, [pc, #20]	@ (8005ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fe8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005fec:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005fee:	2300      	movs	r3, #0
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3714      	adds	r7, #20
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr
 8005ffc:	40007000 	.word	0x40007000
 8006000:	20000000 	.word	0x20000000
 8006004:	431bde83 	.word	0x431bde83

08006008 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006008:	b480      	push	{r7}
 800600a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800600c:	4b05      	ldr	r3, [pc, #20]	@ (8006024 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	4a04      	ldr	r2, [pc, #16]	@ (8006024 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006012:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006016:	6093      	str	r3, [r2, #8]
}
 8006018:	bf00      	nop
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr
 8006022:	bf00      	nop
 8006024:	40007000 	.word	0x40007000

08006028 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b088      	sub	sp, #32
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d101      	bne.n	800603a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	e2fe      	b.n	8006638 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f003 0301 	and.w	r3, r3, #1
 8006042:	2b00      	cmp	r3, #0
 8006044:	d075      	beq.n	8006132 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006046:	4b97      	ldr	r3, [pc, #604]	@ (80062a4 <HAL_RCC_OscConfig+0x27c>)
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	f003 030c 	and.w	r3, r3, #12
 800604e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006050:	4b94      	ldr	r3, [pc, #592]	@ (80062a4 <HAL_RCC_OscConfig+0x27c>)
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	f003 0303 	and.w	r3, r3, #3
 8006058:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	2b0c      	cmp	r3, #12
 800605e:	d102      	bne.n	8006066 <HAL_RCC_OscConfig+0x3e>
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	2b03      	cmp	r3, #3
 8006064:	d002      	beq.n	800606c <HAL_RCC_OscConfig+0x44>
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	2b08      	cmp	r3, #8
 800606a:	d10b      	bne.n	8006084 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800606c:	4b8d      	ldr	r3, [pc, #564]	@ (80062a4 <HAL_RCC_OscConfig+0x27c>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006074:	2b00      	cmp	r3, #0
 8006076:	d05b      	beq.n	8006130 <HAL_RCC_OscConfig+0x108>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d157      	bne.n	8006130 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	e2d9      	b.n	8006638 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800608c:	d106      	bne.n	800609c <HAL_RCC_OscConfig+0x74>
 800608e:	4b85      	ldr	r3, [pc, #532]	@ (80062a4 <HAL_RCC_OscConfig+0x27c>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a84      	ldr	r2, [pc, #528]	@ (80062a4 <HAL_RCC_OscConfig+0x27c>)
 8006094:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006098:	6013      	str	r3, [r2, #0]
 800609a:	e01d      	b.n	80060d8 <HAL_RCC_OscConfig+0xb0>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80060a4:	d10c      	bne.n	80060c0 <HAL_RCC_OscConfig+0x98>
 80060a6:	4b7f      	ldr	r3, [pc, #508]	@ (80062a4 <HAL_RCC_OscConfig+0x27c>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a7e      	ldr	r2, [pc, #504]	@ (80062a4 <HAL_RCC_OscConfig+0x27c>)
 80060ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80060b0:	6013      	str	r3, [r2, #0]
 80060b2:	4b7c      	ldr	r3, [pc, #496]	@ (80062a4 <HAL_RCC_OscConfig+0x27c>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a7b      	ldr	r2, [pc, #492]	@ (80062a4 <HAL_RCC_OscConfig+0x27c>)
 80060b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060bc:	6013      	str	r3, [r2, #0]
 80060be:	e00b      	b.n	80060d8 <HAL_RCC_OscConfig+0xb0>
 80060c0:	4b78      	ldr	r3, [pc, #480]	@ (80062a4 <HAL_RCC_OscConfig+0x27c>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a77      	ldr	r2, [pc, #476]	@ (80062a4 <HAL_RCC_OscConfig+0x27c>)
 80060c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060ca:	6013      	str	r3, [r2, #0]
 80060cc:	4b75      	ldr	r3, [pc, #468]	@ (80062a4 <HAL_RCC_OscConfig+0x27c>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a74      	ldr	r2, [pc, #464]	@ (80062a4 <HAL_RCC_OscConfig+0x27c>)
 80060d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80060d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d013      	beq.n	8006108 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060e0:	f7fb fd02 	bl	8001ae8 <HAL_GetTick>
 80060e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80060e6:	e008      	b.n	80060fa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060e8:	f7fb fcfe 	bl	8001ae8 <HAL_GetTick>
 80060ec:	4602      	mov	r2, r0
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	1ad3      	subs	r3, r2, r3
 80060f2:	2b64      	cmp	r3, #100	@ 0x64
 80060f4:	d901      	bls.n	80060fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80060f6:	2303      	movs	r3, #3
 80060f8:	e29e      	b.n	8006638 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80060fa:	4b6a      	ldr	r3, [pc, #424]	@ (80062a4 <HAL_RCC_OscConfig+0x27c>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006102:	2b00      	cmp	r3, #0
 8006104:	d0f0      	beq.n	80060e8 <HAL_RCC_OscConfig+0xc0>
 8006106:	e014      	b.n	8006132 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006108:	f7fb fcee 	bl	8001ae8 <HAL_GetTick>
 800610c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800610e:	e008      	b.n	8006122 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006110:	f7fb fcea 	bl	8001ae8 <HAL_GetTick>
 8006114:	4602      	mov	r2, r0
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	1ad3      	subs	r3, r2, r3
 800611a:	2b64      	cmp	r3, #100	@ 0x64
 800611c:	d901      	bls.n	8006122 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800611e:	2303      	movs	r3, #3
 8006120:	e28a      	b.n	8006638 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006122:	4b60      	ldr	r3, [pc, #384]	@ (80062a4 <HAL_RCC_OscConfig+0x27c>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800612a:	2b00      	cmp	r3, #0
 800612c:	d1f0      	bne.n	8006110 <HAL_RCC_OscConfig+0xe8>
 800612e:	e000      	b.n	8006132 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006130:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f003 0302 	and.w	r3, r3, #2
 800613a:	2b00      	cmp	r3, #0
 800613c:	d075      	beq.n	800622a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800613e:	4b59      	ldr	r3, [pc, #356]	@ (80062a4 <HAL_RCC_OscConfig+0x27c>)
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	f003 030c 	and.w	r3, r3, #12
 8006146:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006148:	4b56      	ldr	r3, [pc, #344]	@ (80062a4 <HAL_RCC_OscConfig+0x27c>)
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	f003 0303 	and.w	r3, r3, #3
 8006150:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006152:	69bb      	ldr	r3, [r7, #24]
 8006154:	2b0c      	cmp	r3, #12
 8006156:	d102      	bne.n	800615e <HAL_RCC_OscConfig+0x136>
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	2b02      	cmp	r3, #2
 800615c:	d002      	beq.n	8006164 <HAL_RCC_OscConfig+0x13c>
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	2b04      	cmp	r3, #4
 8006162:	d11f      	bne.n	80061a4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006164:	4b4f      	ldr	r3, [pc, #316]	@ (80062a4 <HAL_RCC_OscConfig+0x27c>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800616c:	2b00      	cmp	r3, #0
 800616e:	d005      	beq.n	800617c <HAL_RCC_OscConfig+0x154>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d101      	bne.n	800617c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	e25d      	b.n	8006638 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800617c:	4b49      	ldr	r3, [pc, #292]	@ (80062a4 <HAL_RCC_OscConfig+0x27c>)
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	691b      	ldr	r3, [r3, #16]
 8006188:	061b      	lsls	r3, r3, #24
 800618a:	4946      	ldr	r1, [pc, #280]	@ (80062a4 <HAL_RCC_OscConfig+0x27c>)
 800618c:	4313      	orrs	r3, r2
 800618e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006190:	4b45      	ldr	r3, [pc, #276]	@ (80062a8 <HAL_RCC_OscConfig+0x280>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4618      	mov	r0, r3
 8006196:	f7fb fc5b 	bl	8001a50 <HAL_InitTick>
 800619a:	4603      	mov	r3, r0
 800619c:	2b00      	cmp	r3, #0
 800619e:	d043      	beq.n	8006228 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	e249      	b.n	8006638 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d023      	beq.n	80061f4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80061ac:	4b3d      	ldr	r3, [pc, #244]	@ (80062a4 <HAL_RCC_OscConfig+0x27c>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a3c      	ldr	r2, [pc, #240]	@ (80062a4 <HAL_RCC_OscConfig+0x27c>)
 80061b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061b8:	f7fb fc96 	bl	8001ae8 <HAL_GetTick>
 80061bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80061be:	e008      	b.n	80061d2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80061c0:	f7fb fc92 	bl	8001ae8 <HAL_GetTick>
 80061c4:	4602      	mov	r2, r0
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	1ad3      	subs	r3, r2, r3
 80061ca:	2b02      	cmp	r3, #2
 80061cc:	d901      	bls.n	80061d2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80061ce:	2303      	movs	r3, #3
 80061d0:	e232      	b.n	8006638 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80061d2:	4b34      	ldr	r3, [pc, #208]	@ (80062a4 <HAL_RCC_OscConfig+0x27c>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d0f0      	beq.n	80061c0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061de:	4b31      	ldr	r3, [pc, #196]	@ (80062a4 <HAL_RCC_OscConfig+0x27c>)
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	691b      	ldr	r3, [r3, #16]
 80061ea:	061b      	lsls	r3, r3, #24
 80061ec:	492d      	ldr	r1, [pc, #180]	@ (80062a4 <HAL_RCC_OscConfig+0x27c>)
 80061ee:	4313      	orrs	r3, r2
 80061f0:	604b      	str	r3, [r1, #4]
 80061f2:	e01a      	b.n	800622a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80061f4:	4b2b      	ldr	r3, [pc, #172]	@ (80062a4 <HAL_RCC_OscConfig+0x27c>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a2a      	ldr	r2, [pc, #168]	@ (80062a4 <HAL_RCC_OscConfig+0x27c>)
 80061fa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80061fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006200:	f7fb fc72 	bl	8001ae8 <HAL_GetTick>
 8006204:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006206:	e008      	b.n	800621a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006208:	f7fb fc6e 	bl	8001ae8 <HAL_GetTick>
 800620c:	4602      	mov	r2, r0
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	1ad3      	subs	r3, r2, r3
 8006212:	2b02      	cmp	r3, #2
 8006214:	d901      	bls.n	800621a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006216:	2303      	movs	r3, #3
 8006218:	e20e      	b.n	8006638 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800621a:	4b22      	ldr	r3, [pc, #136]	@ (80062a4 <HAL_RCC_OscConfig+0x27c>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006222:	2b00      	cmp	r3, #0
 8006224:	d1f0      	bne.n	8006208 <HAL_RCC_OscConfig+0x1e0>
 8006226:	e000      	b.n	800622a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006228:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f003 0308 	and.w	r3, r3, #8
 8006232:	2b00      	cmp	r3, #0
 8006234:	d041      	beq.n	80062ba <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	695b      	ldr	r3, [r3, #20]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d01c      	beq.n	8006278 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800623e:	4b19      	ldr	r3, [pc, #100]	@ (80062a4 <HAL_RCC_OscConfig+0x27c>)
 8006240:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006244:	4a17      	ldr	r2, [pc, #92]	@ (80062a4 <HAL_RCC_OscConfig+0x27c>)
 8006246:	f043 0301 	orr.w	r3, r3, #1
 800624a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800624e:	f7fb fc4b 	bl	8001ae8 <HAL_GetTick>
 8006252:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006254:	e008      	b.n	8006268 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006256:	f7fb fc47 	bl	8001ae8 <HAL_GetTick>
 800625a:	4602      	mov	r2, r0
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	1ad3      	subs	r3, r2, r3
 8006260:	2b02      	cmp	r3, #2
 8006262:	d901      	bls.n	8006268 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006264:	2303      	movs	r3, #3
 8006266:	e1e7      	b.n	8006638 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006268:	4b0e      	ldr	r3, [pc, #56]	@ (80062a4 <HAL_RCC_OscConfig+0x27c>)
 800626a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800626e:	f003 0302 	and.w	r3, r3, #2
 8006272:	2b00      	cmp	r3, #0
 8006274:	d0ef      	beq.n	8006256 <HAL_RCC_OscConfig+0x22e>
 8006276:	e020      	b.n	80062ba <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006278:	4b0a      	ldr	r3, [pc, #40]	@ (80062a4 <HAL_RCC_OscConfig+0x27c>)
 800627a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800627e:	4a09      	ldr	r2, [pc, #36]	@ (80062a4 <HAL_RCC_OscConfig+0x27c>)
 8006280:	f023 0301 	bic.w	r3, r3, #1
 8006284:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006288:	f7fb fc2e 	bl	8001ae8 <HAL_GetTick>
 800628c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800628e:	e00d      	b.n	80062ac <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006290:	f7fb fc2a 	bl	8001ae8 <HAL_GetTick>
 8006294:	4602      	mov	r2, r0
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	1ad3      	subs	r3, r2, r3
 800629a:	2b02      	cmp	r3, #2
 800629c:	d906      	bls.n	80062ac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800629e:	2303      	movs	r3, #3
 80062a0:	e1ca      	b.n	8006638 <HAL_RCC_OscConfig+0x610>
 80062a2:	bf00      	nop
 80062a4:	40021000 	.word	0x40021000
 80062a8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80062ac:	4b8c      	ldr	r3, [pc, #560]	@ (80064e0 <HAL_RCC_OscConfig+0x4b8>)
 80062ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80062b2:	f003 0302 	and.w	r3, r3, #2
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d1ea      	bne.n	8006290 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f003 0304 	and.w	r3, r3, #4
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	f000 80a6 	beq.w	8006414 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80062c8:	2300      	movs	r3, #0
 80062ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80062cc:	4b84      	ldr	r3, [pc, #528]	@ (80064e0 <HAL_RCC_OscConfig+0x4b8>)
 80062ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d101      	bne.n	80062dc <HAL_RCC_OscConfig+0x2b4>
 80062d8:	2301      	movs	r3, #1
 80062da:	e000      	b.n	80062de <HAL_RCC_OscConfig+0x2b6>
 80062dc:	2300      	movs	r3, #0
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d00d      	beq.n	80062fe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062e2:	4b7f      	ldr	r3, [pc, #508]	@ (80064e0 <HAL_RCC_OscConfig+0x4b8>)
 80062e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062e6:	4a7e      	ldr	r2, [pc, #504]	@ (80064e0 <HAL_RCC_OscConfig+0x4b8>)
 80062e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80062ee:	4b7c      	ldr	r3, [pc, #496]	@ (80064e0 <HAL_RCC_OscConfig+0x4b8>)
 80062f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062f6:	60fb      	str	r3, [r7, #12]
 80062f8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80062fa:	2301      	movs	r3, #1
 80062fc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80062fe:	4b79      	ldr	r3, [pc, #484]	@ (80064e4 <HAL_RCC_OscConfig+0x4bc>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006306:	2b00      	cmp	r3, #0
 8006308:	d118      	bne.n	800633c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800630a:	4b76      	ldr	r3, [pc, #472]	@ (80064e4 <HAL_RCC_OscConfig+0x4bc>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a75      	ldr	r2, [pc, #468]	@ (80064e4 <HAL_RCC_OscConfig+0x4bc>)
 8006310:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006314:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006316:	f7fb fbe7 	bl	8001ae8 <HAL_GetTick>
 800631a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800631c:	e008      	b.n	8006330 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800631e:	f7fb fbe3 	bl	8001ae8 <HAL_GetTick>
 8006322:	4602      	mov	r2, r0
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	1ad3      	subs	r3, r2, r3
 8006328:	2b02      	cmp	r3, #2
 800632a:	d901      	bls.n	8006330 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800632c:	2303      	movs	r3, #3
 800632e:	e183      	b.n	8006638 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006330:	4b6c      	ldr	r3, [pc, #432]	@ (80064e4 <HAL_RCC_OscConfig+0x4bc>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006338:	2b00      	cmp	r3, #0
 800633a:	d0f0      	beq.n	800631e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	2b01      	cmp	r3, #1
 8006342:	d108      	bne.n	8006356 <HAL_RCC_OscConfig+0x32e>
 8006344:	4b66      	ldr	r3, [pc, #408]	@ (80064e0 <HAL_RCC_OscConfig+0x4b8>)
 8006346:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800634a:	4a65      	ldr	r2, [pc, #404]	@ (80064e0 <HAL_RCC_OscConfig+0x4b8>)
 800634c:	f043 0301 	orr.w	r3, r3, #1
 8006350:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006354:	e024      	b.n	80063a0 <HAL_RCC_OscConfig+0x378>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	2b05      	cmp	r3, #5
 800635c:	d110      	bne.n	8006380 <HAL_RCC_OscConfig+0x358>
 800635e:	4b60      	ldr	r3, [pc, #384]	@ (80064e0 <HAL_RCC_OscConfig+0x4b8>)
 8006360:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006364:	4a5e      	ldr	r2, [pc, #376]	@ (80064e0 <HAL_RCC_OscConfig+0x4b8>)
 8006366:	f043 0304 	orr.w	r3, r3, #4
 800636a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800636e:	4b5c      	ldr	r3, [pc, #368]	@ (80064e0 <HAL_RCC_OscConfig+0x4b8>)
 8006370:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006374:	4a5a      	ldr	r2, [pc, #360]	@ (80064e0 <HAL_RCC_OscConfig+0x4b8>)
 8006376:	f043 0301 	orr.w	r3, r3, #1
 800637a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800637e:	e00f      	b.n	80063a0 <HAL_RCC_OscConfig+0x378>
 8006380:	4b57      	ldr	r3, [pc, #348]	@ (80064e0 <HAL_RCC_OscConfig+0x4b8>)
 8006382:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006386:	4a56      	ldr	r2, [pc, #344]	@ (80064e0 <HAL_RCC_OscConfig+0x4b8>)
 8006388:	f023 0301 	bic.w	r3, r3, #1
 800638c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006390:	4b53      	ldr	r3, [pc, #332]	@ (80064e0 <HAL_RCC_OscConfig+0x4b8>)
 8006392:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006396:	4a52      	ldr	r2, [pc, #328]	@ (80064e0 <HAL_RCC_OscConfig+0x4b8>)
 8006398:	f023 0304 	bic.w	r3, r3, #4
 800639c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d016      	beq.n	80063d6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063a8:	f7fb fb9e 	bl	8001ae8 <HAL_GetTick>
 80063ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80063ae:	e00a      	b.n	80063c6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063b0:	f7fb fb9a 	bl	8001ae8 <HAL_GetTick>
 80063b4:	4602      	mov	r2, r0
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	1ad3      	subs	r3, r2, r3
 80063ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063be:	4293      	cmp	r3, r2
 80063c0:	d901      	bls.n	80063c6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	e138      	b.n	8006638 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80063c6:	4b46      	ldr	r3, [pc, #280]	@ (80064e0 <HAL_RCC_OscConfig+0x4b8>)
 80063c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063cc:	f003 0302 	and.w	r3, r3, #2
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d0ed      	beq.n	80063b0 <HAL_RCC_OscConfig+0x388>
 80063d4:	e015      	b.n	8006402 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063d6:	f7fb fb87 	bl	8001ae8 <HAL_GetTick>
 80063da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80063dc:	e00a      	b.n	80063f4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063de:	f7fb fb83 	bl	8001ae8 <HAL_GetTick>
 80063e2:	4602      	mov	r2, r0
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	1ad3      	subs	r3, r2, r3
 80063e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d901      	bls.n	80063f4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80063f0:	2303      	movs	r3, #3
 80063f2:	e121      	b.n	8006638 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80063f4:	4b3a      	ldr	r3, [pc, #232]	@ (80064e0 <HAL_RCC_OscConfig+0x4b8>)
 80063f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063fa:	f003 0302 	and.w	r3, r3, #2
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d1ed      	bne.n	80063de <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006402:	7ffb      	ldrb	r3, [r7, #31]
 8006404:	2b01      	cmp	r3, #1
 8006406:	d105      	bne.n	8006414 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006408:	4b35      	ldr	r3, [pc, #212]	@ (80064e0 <HAL_RCC_OscConfig+0x4b8>)
 800640a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800640c:	4a34      	ldr	r2, [pc, #208]	@ (80064e0 <HAL_RCC_OscConfig+0x4b8>)
 800640e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006412:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 0320 	and.w	r3, r3, #32
 800641c:	2b00      	cmp	r3, #0
 800641e:	d03c      	beq.n	800649a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	699b      	ldr	r3, [r3, #24]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d01c      	beq.n	8006462 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006428:	4b2d      	ldr	r3, [pc, #180]	@ (80064e0 <HAL_RCC_OscConfig+0x4b8>)
 800642a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800642e:	4a2c      	ldr	r2, [pc, #176]	@ (80064e0 <HAL_RCC_OscConfig+0x4b8>)
 8006430:	f043 0301 	orr.w	r3, r3, #1
 8006434:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006438:	f7fb fb56 	bl	8001ae8 <HAL_GetTick>
 800643c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800643e:	e008      	b.n	8006452 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006440:	f7fb fb52 	bl	8001ae8 <HAL_GetTick>
 8006444:	4602      	mov	r2, r0
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	1ad3      	subs	r3, r2, r3
 800644a:	2b02      	cmp	r3, #2
 800644c:	d901      	bls.n	8006452 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800644e:	2303      	movs	r3, #3
 8006450:	e0f2      	b.n	8006638 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006452:	4b23      	ldr	r3, [pc, #140]	@ (80064e0 <HAL_RCC_OscConfig+0x4b8>)
 8006454:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006458:	f003 0302 	and.w	r3, r3, #2
 800645c:	2b00      	cmp	r3, #0
 800645e:	d0ef      	beq.n	8006440 <HAL_RCC_OscConfig+0x418>
 8006460:	e01b      	b.n	800649a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006462:	4b1f      	ldr	r3, [pc, #124]	@ (80064e0 <HAL_RCC_OscConfig+0x4b8>)
 8006464:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006468:	4a1d      	ldr	r2, [pc, #116]	@ (80064e0 <HAL_RCC_OscConfig+0x4b8>)
 800646a:	f023 0301 	bic.w	r3, r3, #1
 800646e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006472:	f7fb fb39 	bl	8001ae8 <HAL_GetTick>
 8006476:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006478:	e008      	b.n	800648c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800647a:	f7fb fb35 	bl	8001ae8 <HAL_GetTick>
 800647e:	4602      	mov	r2, r0
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	1ad3      	subs	r3, r2, r3
 8006484:	2b02      	cmp	r3, #2
 8006486:	d901      	bls.n	800648c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006488:	2303      	movs	r3, #3
 800648a:	e0d5      	b.n	8006638 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800648c:	4b14      	ldr	r3, [pc, #80]	@ (80064e0 <HAL_RCC_OscConfig+0x4b8>)
 800648e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006492:	f003 0302 	and.w	r3, r3, #2
 8006496:	2b00      	cmp	r3, #0
 8006498:	d1ef      	bne.n	800647a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	69db      	ldr	r3, [r3, #28]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	f000 80c9 	beq.w	8006636 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80064a4:	4b0e      	ldr	r3, [pc, #56]	@ (80064e0 <HAL_RCC_OscConfig+0x4b8>)
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	f003 030c 	and.w	r3, r3, #12
 80064ac:	2b0c      	cmp	r3, #12
 80064ae:	f000 8083 	beq.w	80065b8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	69db      	ldr	r3, [r3, #28]
 80064b6:	2b02      	cmp	r3, #2
 80064b8:	d15e      	bne.n	8006578 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064ba:	4b09      	ldr	r3, [pc, #36]	@ (80064e0 <HAL_RCC_OscConfig+0x4b8>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a08      	ldr	r2, [pc, #32]	@ (80064e0 <HAL_RCC_OscConfig+0x4b8>)
 80064c0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80064c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064c6:	f7fb fb0f 	bl	8001ae8 <HAL_GetTick>
 80064ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80064cc:	e00c      	b.n	80064e8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064ce:	f7fb fb0b 	bl	8001ae8 <HAL_GetTick>
 80064d2:	4602      	mov	r2, r0
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	1ad3      	subs	r3, r2, r3
 80064d8:	2b02      	cmp	r3, #2
 80064da:	d905      	bls.n	80064e8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80064dc:	2303      	movs	r3, #3
 80064de:	e0ab      	b.n	8006638 <HAL_RCC_OscConfig+0x610>
 80064e0:	40021000 	.word	0x40021000
 80064e4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80064e8:	4b55      	ldr	r3, [pc, #340]	@ (8006640 <HAL_RCC_OscConfig+0x618>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d1ec      	bne.n	80064ce <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80064f4:	4b52      	ldr	r3, [pc, #328]	@ (8006640 <HAL_RCC_OscConfig+0x618>)
 80064f6:	68da      	ldr	r2, [r3, #12]
 80064f8:	4b52      	ldr	r3, [pc, #328]	@ (8006644 <HAL_RCC_OscConfig+0x61c>)
 80064fa:	4013      	ands	r3, r2
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	6a11      	ldr	r1, [r2, #32]
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006504:	3a01      	subs	r2, #1
 8006506:	0112      	lsls	r2, r2, #4
 8006508:	4311      	orrs	r1, r2
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800650e:	0212      	lsls	r2, r2, #8
 8006510:	4311      	orrs	r1, r2
 8006512:	687a      	ldr	r2, [r7, #4]
 8006514:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006516:	0852      	lsrs	r2, r2, #1
 8006518:	3a01      	subs	r2, #1
 800651a:	0552      	lsls	r2, r2, #21
 800651c:	4311      	orrs	r1, r2
 800651e:	687a      	ldr	r2, [r7, #4]
 8006520:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006522:	0852      	lsrs	r2, r2, #1
 8006524:	3a01      	subs	r2, #1
 8006526:	0652      	lsls	r2, r2, #25
 8006528:	4311      	orrs	r1, r2
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800652e:	06d2      	lsls	r2, r2, #27
 8006530:	430a      	orrs	r2, r1
 8006532:	4943      	ldr	r1, [pc, #268]	@ (8006640 <HAL_RCC_OscConfig+0x618>)
 8006534:	4313      	orrs	r3, r2
 8006536:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006538:	4b41      	ldr	r3, [pc, #260]	@ (8006640 <HAL_RCC_OscConfig+0x618>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a40      	ldr	r2, [pc, #256]	@ (8006640 <HAL_RCC_OscConfig+0x618>)
 800653e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006542:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006544:	4b3e      	ldr	r3, [pc, #248]	@ (8006640 <HAL_RCC_OscConfig+0x618>)
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	4a3d      	ldr	r2, [pc, #244]	@ (8006640 <HAL_RCC_OscConfig+0x618>)
 800654a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800654e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006550:	f7fb faca 	bl	8001ae8 <HAL_GetTick>
 8006554:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006556:	e008      	b.n	800656a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006558:	f7fb fac6 	bl	8001ae8 <HAL_GetTick>
 800655c:	4602      	mov	r2, r0
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	1ad3      	subs	r3, r2, r3
 8006562:	2b02      	cmp	r3, #2
 8006564:	d901      	bls.n	800656a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006566:	2303      	movs	r3, #3
 8006568:	e066      	b.n	8006638 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800656a:	4b35      	ldr	r3, [pc, #212]	@ (8006640 <HAL_RCC_OscConfig+0x618>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006572:	2b00      	cmp	r3, #0
 8006574:	d0f0      	beq.n	8006558 <HAL_RCC_OscConfig+0x530>
 8006576:	e05e      	b.n	8006636 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006578:	4b31      	ldr	r3, [pc, #196]	@ (8006640 <HAL_RCC_OscConfig+0x618>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a30      	ldr	r2, [pc, #192]	@ (8006640 <HAL_RCC_OscConfig+0x618>)
 800657e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006582:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006584:	f7fb fab0 	bl	8001ae8 <HAL_GetTick>
 8006588:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800658a:	e008      	b.n	800659e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800658c:	f7fb faac 	bl	8001ae8 <HAL_GetTick>
 8006590:	4602      	mov	r2, r0
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	1ad3      	subs	r3, r2, r3
 8006596:	2b02      	cmp	r3, #2
 8006598:	d901      	bls.n	800659e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800659a:	2303      	movs	r3, #3
 800659c:	e04c      	b.n	8006638 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800659e:	4b28      	ldr	r3, [pc, #160]	@ (8006640 <HAL_RCC_OscConfig+0x618>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d1f0      	bne.n	800658c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80065aa:	4b25      	ldr	r3, [pc, #148]	@ (8006640 <HAL_RCC_OscConfig+0x618>)
 80065ac:	68da      	ldr	r2, [r3, #12]
 80065ae:	4924      	ldr	r1, [pc, #144]	@ (8006640 <HAL_RCC_OscConfig+0x618>)
 80065b0:	4b25      	ldr	r3, [pc, #148]	@ (8006648 <HAL_RCC_OscConfig+0x620>)
 80065b2:	4013      	ands	r3, r2
 80065b4:	60cb      	str	r3, [r1, #12]
 80065b6:	e03e      	b.n	8006636 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	69db      	ldr	r3, [r3, #28]
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d101      	bne.n	80065c4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	e039      	b.n	8006638 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80065c4:	4b1e      	ldr	r3, [pc, #120]	@ (8006640 <HAL_RCC_OscConfig+0x618>)
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	f003 0203 	and.w	r2, r3, #3
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6a1b      	ldr	r3, [r3, #32]
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d12c      	bne.n	8006632 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065e2:	3b01      	subs	r3, #1
 80065e4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d123      	bne.n	8006632 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065f4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d11b      	bne.n	8006632 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006604:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006606:	429a      	cmp	r2, r3
 8006608:	d113      	bne.n	8006632 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006614:	085b      	lsrs	r3, r3, #1
 8006616:	3b01      	subs	r3, #1
 8006618:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800661a:	429a      	cmp	r2, r3
 800661c:	d109      	bne.n	8006632 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006628:	085b      	lsrs	r3, r3, #1
 800662a:	3b01      	subs	r3, #1
 800662c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800662e:	429a      	cmp	r2, r3
 8006630:	d001      	beq.n	8006636 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006632:	2301      	movs	r3, #1
 8006634:	e000      	b.n	8006638 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006636:	2300      	movs	r3, #0
}
 8006638:	4618      	mov	r0, r3
 800663a:	3720      	adds	r7, #32
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}
 8006640:	40021000 	.word	0x40021000
 8006644:	019f800c 	.word	0x019f800c
 8006648:	feeefffc 	.word	0xfeeefffc

0800664c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b086      	sub	sp, #24
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006656:	2300      	movs	r3, #0
 8006658:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d101      	bne.n	8006664 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	e11e      	b.n	80068a2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006664:	4b91      	ldr	r3, [pc, #580]	@ (80068ac <HAL_RCC_ClockConfig+0x260>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f003 030f 	and.w	r3, r3, #15
 800666c:	683a      	ldr	r2, [r7, #0]
 800666e:	429a      	cmp	r2, r3
 8006670:	d910      	bls.n	8006694 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006672:	4b8e      	ldr	r3, [pc, #568]	@ (80068ac <HAL_RCC_ClockConfig+0x260>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f023 020f 	bic.w	r2, r3, #15
 800667a:	498c      	ldr	r1, [pc, #560]	@ (80068ac <HAL_RCC_ClockConfig+0x260>)
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	4313      	orrs	r3, r2
 8006680:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006682:	4b8a      	ldr	r3, [pc, #552]	@ (80068ac <HAL_RCC_ClockConfig+0x260>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f003 030f 	and.w	r3, r3, #15
 800668a:	683a      	ldr	r2, [r7, #0]
 800668c:	429a      	cmp	r2, r3
 800668e:	d001      	beq.n	8006694 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006690:	2301      	movs	r3, #1
 8006692:	e106      	b.n	80068a2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f003 0301 	and.w	r3, r3, #1
 800669c:	2b00      	cmp	r3, #0
 800669e:	d073      	beq.n	8006788 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	2b03      	cmp	r3, #3
 80066a6:	d129      	bne.n	80066fc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80066a8:	4b81      	ldr	r3, [pc, #516]	@ (80068b0 <HAL_RCC_ClockConfig+0x264>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d101      	bne.n	80066b8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	e0f4      	b.n	80068a2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80066b8:	f000 f966 	bl	8006988 <RCC_GetSysClockFreqFromPLLSource>
 80066bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	4a7c      	ldr	r2, [pc, #496]	@ (80068b4 <HAL_RCC_ClockConfig+0x268>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d93f      	bls.n	8006746 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80066c6:	4b7a      	ldr	r3, [pc, #488]	@ (80068b0 <HAL_RCC_ClockConfig+0x264>)
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d009      	beq.n	80066e6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d033      	beq.n	8006746 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d12f      	bne.n	8006746 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80066e6:	4b72      	ldr	r3, [pc, #456]	@ (80068b0 <HAL_RCC_ClockConfig+0x264>)
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80066ee:	4a70      	ldr	r2, [pc, #448]	@ (80068b0 <HAL_RCC_ClockConfig+0x264>)
 80066f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066f4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80066f6:	2380      	movs	r3, #128	@ 0x80
 80066f8:	617b      	str	r3, [r7, #20]
 80066fa:	e024      	b.n	8006746 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	2b02      	cmp	r3, #2
 8006702:	d107      	bne.n	8006714 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006704:	4b6a      	ldr	r3, [pc, #424]	@ (80068b0 <HAL_RCC_ClockConfig+0x264>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800670c:	2b00      	cmp	r3, #0
 800670e:	d109      	bne.n	8006724 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006710:	2301      	movs	r3, #1
 8006712:	e0c6      	b.n	80068a2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006714:	4b66      	ldr	r3, [pc, #408]	@ (80068b0 <HAL_RCC_ClockConfig+0x264>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800671c:	2b00      	cmp	r3, #0
 800671e:	d101      	bne.n	8006724 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006720:	2301      	movs	r3, #1
 8006722:	e0be      	b.n	80068a2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006724:	f000 f8ce 	bl	80068c4 <HAL_RCC_GetSysClockFreq>
 8006728:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	4a61      	ldr	r2, [pc, #388]	@ (80068b4 <HAL_RCC_ClockConfig+0x268>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d909      	bls.n	8006746 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006732:	4b5f      	ldr	r3, [pc, #380]	@ (80068b0 <HAL_RCC_ClockConfig+0x264>)
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800673a:	4a5d      	ldr	r2, [pc, #372]	@ (80068b0 <HAL_RCC_ClockConfig+0x264>)
 800673c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006740:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006742:	2380      	movs	r3, #128	@ 0x80
 8006744:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006746:	4b5a      	ldr	r3, [pc, #360]	@ (80068b0 <HAL_RCC_ClockConfig+0x264>)
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	f023 0203 	bic.w	r2, r3, #3
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	4957      	ldr	r1, [pc, #348]	@ (80068b0 <HAL_RCC_ClockConfig+0x264>)
 8006754:	4313      	orrs	r3, r2
 8006756:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006758:	f7fb f9c6 	bl	8001ae8 <HAL_GetTick>
 800675c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800675e:	e00a      	b.n	8006776 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006760:	f7fb f9c2 	bl	8001ae8 <HAL_GetTick>
 8006764:	4602      	mov	r2, r0
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	1ad3      	subs	r3, r2, r3
 800676a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800676e:	4293      	cmp	r3, r2
 8006770:	d901      	bls.n	8006776 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006772:	2303      	movs	r3, #3
 8006774:	e095      	b.n	80068a2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006776:	4b4e      	ldr	r3, [pc, #312]	@ (80068b0 <HAL_RCC_ClockConfig+0x264>)
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	f003 020c 	and.w	r2, r3, #12
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	009b      	lsls	r3, r3, #2
 8006784:	429a      	cmp	r2, r3
 8006786:	d1eb      	bne.n	8006760 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f003 0302 	and.w	r3, r3, #2
 8006790:	2b00      	cmp	r3, #0
 8006792:	d023      	beq.n	80067dc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f003 0304 	and.w	r3, r3, #4
 800679c:	2b00      	cmp	r3, #0
 800679e:	d005      	beq.n	80067ac <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80067a0:	4b43      	ldr	r3, [pc, #268]	@ (80068b0 <HAL_RCC_ClockConfig+0x264>)
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	4a42      	ldr	r2, [pc, #264]	@ (80068b0 <HAL_RCC_ClockConfig+0x264>)
 80067a6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80067aa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f003 0308 	and.w	r3, r3, #8
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d007      	beq.n	80067c8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80067b8:	4b3d      	ldr	r3, [pc, #244]	@ (80068b0 <HAL_RCC_ClockConfig+0x264>)
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80067c0:	4a3b      	ldr	r2, [pc, #236]	@ (80068b0 <HAL_RCC_ClockConfig+0x264>)
 80067c2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80067c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067c8:	4b39      	ldr	r3, [pc, #228]	@ (80068b0 <HAL_RCC_ClockConfig+0x264>)
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	4936      	ldr	r1, [pc, #216]	@ (80068b0 <HAL_RCC_ClockConfig+0x264>)
 80067d6:	4313      	orrs	r3, r2
 80067d8:	608b      	str	r3, [r1, #8]
 80067da:	e008      	b.n	80067ee <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	2b80      	cmp	r3, #128	@ 0x80
 80067e0:	d105      	bne.n	80067ee <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80067e2:	4b33      	ldr	r3, [pc, #204]	@ (80068b0 <HAL_RCC_ClockConfig+0x264>)
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	4a32      	ldr	r2, [pc, #200]	@ (80068b0 <HAL_RCC_ClockConfig+0x264>)
 80067e8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80067ec:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80067ee:	4b2f      	ldr	r3, [pc, #188]	@ (80068ac <HAL_RCC_ClockConfig+0x260>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f003 030f 	and.w	r3, r3, #15
 80067f6:	683a      	ldr	r2, [r7, #0]
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d21d      	bcs.n	8006838 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067fc:	4b2b      	ldr	r3, [pc, #172]	@ (80068ac <HAL_RCC_ClockConfig+0x260>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f023 020f 	bic.w	r2, r3, #15
 8006804:	4929      	ldr	r1, [pc, #164]	@ (80068ac <HAL_RCC_ClockConfig+0x260>)
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	4313      	orrs	r3, r2
 800680a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800680c:	f7fb f96c 	bl	8001ae8 <HAL_GetTick>
 8006810:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006812:	e00a      	b.n	800682a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006814:	f7fb f968 	bl	8001ae8 <HAL_GetTick>
 8006818:	4602      	mov	r2, r0
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	1ad3      	subs	r3, r2, r3
 800681e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006822:	4293      	cmp	r3, r2
 8006824:	d901      	bls.n	800682a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006826:	2303      	movs	r3, #3
 8006828:	e03b      	b.n	80068a2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800682a:	4b20      	ldr	r3, [pc, #128]	@ (80068ac <HAL_RCC_ClockConfig+0x260>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 030f 	and.w	r3, r3, #15
 8006832:	683a      	ldr	r2, [r7, #0]
 8006834:	429a      	cmp	r2, r3
 8006836:	d1ed      	bne.n	8006814 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 0304 	and.w	r3, r3, #4
 8006840:	2b00      	cmp	r3, #0
 8006842:	d008      	beq.n	8006856 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006844:	4b1a      	ldr	r3, [pc, #104]	@ (80068b0 <HAL_RCC_ClockConfig+0x264>)
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	68db      	ldr	r3, [r3, #12]
 8006850:	4917      	ldr	r1, [pc, #92]	@ (80068b0 <HAL_RCC_ClockConfig+0x264>)
 8006852:	4313      	orrs	r3, r2
 8006854:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 0308 	and.w	r3, r3, #8
 800685e:	2b00      	cmp	r3, #0
 8006860:	d009      	beq.n	8006876 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006862:	4b13      	ldr	r3, [pc, #76]	@ (80068b0 <HAL_RCC_ClockConfig+0x264>)
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	691b      	ldr	r3, [r3, #16]
 800686e:	00db      	lsls	r3, r3, #3
 8006870:	490f      	ldr	r1, [pc, #60]	@ (80068b0 <HAL_RCC_ClockConfig+0x264>)
 8006872:	4313      	orrs	r3, r2
 8006874:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006876:	f000 f825 	bl	80068c4 <HAL_RCC_GetSysClockFreq>
 800687a:	4602      	mov	r2, r0
 800687c:	4b0c      	ldr	r3, [pc, #48]	@ (80068b0 <HAL_RCC_ClockConfig+0x264>)
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	091b      	lsrs	r3, r3, #4
 8006882:	f003 030f 	and.w	r3, r3, #15
 8006886:	490c      	ldr	r1, [pc, #48]	@ (80068b8 <HAL_RCC_ClockConfig+0x26c>)
 8006888:	5ccb      	ldrb	r3, [r1, r3]
 800688a:	f003 031f 	and.w	r3, r3, #31
 800688e:	fa22 f303 	lsr.w	r3, r2, r3
 8006892:	4a0a      	ldr	r2, [pc, #40]	@ (80068bc <HAL_RCC_ClockConfig+0x270>)
 8006894:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006896:	4b0a      	ldr	r3, [pc, #40]	@ (80068c0 <HAL_RCC_ClockConfig+0x274>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4618      	mov	r0, r3
 800689c:	f7fb f8d8 	bl	8001a50 <HAL_InitTick>
 80068a0:	4603      	mov	r3, r0
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3718      	adds	r7, #24
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	bf00      	nop
 80068ac:	40022000 	.word	0x40022000
 80068b0:	40021000 	.word	0x40021000
 80068b4:	04c4b400 	.word	0x04c4b400
 80068b8:	0800e4d0 	.word	0x0800e4d0
 80068bc:	20000000 	.word	0x20000000
 80068c0:	20000004 	.word	0x20000004

080068c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b087      	sub	sp, #28
 80068c8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80068ca:	4b2c      	ldr	r3, [pc, #176]	@ (800697c <HAL_RCC_GetSysClockFreq+0xb8>)
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	f003 030c 	and.w	r3, r3, #12
 80068d2:	2b04      	cmp	r3, #4
 80068d4:	d102      	bne.n	80068dc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80068d6:	4b2a      	ldr	r3, [pc, #168]	@ (8006980 <HAL_RCC_GetSysClockFreq+0xbc>)
 80068d8:	613b      	str	r3, [r7, #16]
 80068da:	e047      	b.n	800696c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80068dc:	4b27      	ldr	r3, [pc, #156]	@ (800697c <HAL_RCC_GetSysClockFreq+0xb8>)
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	f003 030c 	and.w	r3, r3, #12
 80068e4:	2b08      	cmp	r3, #8
 80068e6:	d102      	bne.n	80068ee <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80068e8:	4b26      	ldr	r3, [pc, #152]	@ (8006984 <HAL_RCC_GetSysClockFreq+0xc0>)
 80068ea:	613b      	str	r3, [r7, #16]
 80068ec:	e03e      	b.n	800696c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80068ee:	4b23      	ldr	r3, [pc, #140]	@ (800697c <HAL_RCC_GetSysClockFreq+0xb8>)
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	f003 030c 	and.w	r3, r3, #12
 80068f6:	2b0c      	cmp	r3, #12
 80068f8:	d136      	bne.n	8006968 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80068fa:	4b20      	ldr	r3, [pc, #128]	@ (800697c <HAL_RCC_GetSysClockFreq+0xb8>)
 80068fc:	68db      	ldr	r3, [r3, #12]
 80068fe:	f003 0303 	and.w	r3, r3, #3
 8006902:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006904:	4b1d      	ldr	r3, [pc, #116]	@ (800697c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	091b      	lsrs	r3, r3, #4
 800690a:	f003 030f 	and.w	r3, r3, #15
 800690e:	3301      	adds	r3, #1
 8006910:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2b03      	cmp	r3, #3
 8006916:	d10c      	bne.n	8006932 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006918:	4a1a      	ldr	r2, [pc, #104]	@ (8006984 <HAL_RCC_GetSysClockFreq+0xc0>)
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006920:	4a16      	ldr	r2, [pc, #88]	@ (800697c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006922:	68d2      	ldr	r2, [r2, #12]
 8006924:	0a12      	lsrs	r2, r2, #8
 8006926:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800692a:	fb02 f303 	mul.w	r3, r2, r3
 800692e:	617b      	str	r3, [r7, #20]
      break;
 8006930:	e00c      	b.n	800694c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006932:	4a13      	ldr	r2, [pc, #76]	@ (8006980 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	fbb2 f3f3 	udiv	r3, r2, r3
 800693a:	4a10      	ldr	r2, [pc, #64]	@ (800697c <HAL_RCC_GetSysClockFreq+0xb8>)
 800693c:	68d2      	ldr	r2, [r2, #12]
 800693e:	0a12      	lsrs	r2, r2, #8
 8006940:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006944:	fb02 f303 	mul.w	r3, r2, r3
 8006948:	617b      	str	r3, [r7, #20]
      break;
 800694a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800694c:	4b0b      	ldr	r3, [pc, #44]	@ (800697c <HAL_RCC_GetSysClockFreq+0xb8>)
 800694e:	68db      	ldr	r3, [r3, #12]
 8006950:	0e5b      	lsrs	r3, r3, #25
 8006952:	f003 0303 	and.w	r3, r3, #3
 8006956:	3301      	adds	r3, #1
 8006958:	005b      	lsls	r3, r3, #1
 800695a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800695c:	697a      	ldr	r2, [r7, #20]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	fbb2 f3f3 	udiv	r3, r2, r3
 8006964:	613b      	str	r3, [r7, #16]
 8006966:	e001      	b.n	800696c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006968:	2300      	movs	r3, #0
 800696a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800696c:	693b      	ldr	r3, [r7, #16]
}
 800696e:	4618      	mov	r0, r3
 8006970:	371c      	adds	r7, #28
 8006972:	46bd      	mov	sp, r7
 8006974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006978:	4770      	bx	lr
 800697a:	bf00      	nop
 800697c:	40021000 	.word	0x40021000
 8006980:	00f42400 	.word	0x00f42400
 8006984:	007a1200 	.word	0x007a1200

08006988 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006988:	b480      	push	{r7}
 800698a:	b087      	sub	sp, #28
 800698c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800698e:	4b1e      	ldr	r3, [pc, #120]	@ (8006a08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	f003 0303 	and.w	r3, r3, #3
 8006996:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006998:	4b1b      	ldr	r3, [pc, #108]	@ (8006a08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800699a:	68db      	ldr	r3, [r3, #12]
 800699c:	091b      	lsrs	r3, r3, #4
 800699e:	f003 030f 	and.w	r3, r3, #15
 80069a2:	3301      	adds	r3, #1
 80069a4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	2b03      	cmp	r3, #3
 80069aa:	d10c      	bne.n	80069c6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80069ac:	4a17      	ldr	r2, [pc, #92]	@ (8006a0c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80069b4:	4a14      	ldr	r2, [pc, #80]	@ (8006a08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80069b6:	68d2      	ldr	r2, [r2, #12]
 80069b8:	0a12      	lsrs	r2, r2, #8
 80069ba:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80069be:	fb02 f303 	mul.w	r3, r2, r3
 80069c2:	617b      	str	r3, [r7, #20]
    break;
 80069c4:	e00c      	b.n	80069e0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80069c6:	4a12      	ldr	r2, [pc, #72]	@ (8006a10 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80069ce:	4a0e      	ldr	r2, [pc, #56]	@ (8006a08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80069d0:	68d2      	ldr	r2, [r2, #12]
 80069d2:	0a12      	lsrs	r2, r2, #8
 80069d4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80069d8:	fb02 f303 	mul.w	r3, r2, r3
 80069dc:	617b      	str	r3, [r7, #20]
    break;
 80069de:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80069e0:	4b09      	ldr	r3, [pc, #36]	@ (8006a08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	0e5b      	lsrs	r3, r3, #25
 80069e6:	f003 0303 	and.w	r3, r3, #3
 80069ea:	3301      	adds	r3, #1
 80069ec:	005b      	lsls	r3, r3, #1
 80069ee:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80069f0:	697a      	ldr	r2, [r7, #20]
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80069f8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80069fa:	687b      	ldr	r3, [r7, #4]
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	371c      	adds	r7, #28
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr
 8006a08:	40021000 	.word	0x40021000
 8006a0c:	007a1200 	.word	0x007a1200
 8006a10:	00f42400 	.word	0x00f42400

08006a14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b086      	sub	sp, #24
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006a20:	2300      	movs	r3, #0
 8006a22:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	f000 8098 	beq.w	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a32:	2300      	movs	r3, #0
 8006a34:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a36:	4b43      	ldr	r3, [pc, #268]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d10d      	bne.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a42:	4b40      	ldr	r3, [pc, #256]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a46:	4a3f      	ldr	r2, [pc, #252]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8006a4e:	4b3d      	ldr	r3, [pc, #244]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a56:	60bb      	str	r3, [r7, #8]
 8006a58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a5e:	4b3a      	ldr	r3, [pc, #232]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a39      	ldr	r2, [pc, #228]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006a64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a68:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006a6a:	f7fb f83d 	bl	8001ae8 <HAL_GetTick>
 8006a6e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a70:	e009      	b.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a72:	f7fb f839 	bl	8001ae8 <HAL_GetTick>
 8006a76:	4602      	mov	r2, r0
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	1ad3      	subs	r3, r2, r3
 8006a7c:	2b02      	cmp	r3, #2
 8006a7e:	d902      	bls.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006a80:	2303      	movs	r3, #3
 8006a82:	74fb      	strb	r3, [r7, #19]
        break;
 8006a84:	e005      	b.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a86:	4b30      	ldr	r3, [pc, #192]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d0ef      	beq.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006a92:	7cfb      	ldrb	r3, [r7, #19]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d159      	bne.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006a98:	4b2a      	ldr	r3, [pc, #168]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006aa2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d01e      	beq.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006aae:	697a      	ldr	r2, [r7, #20]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d019      	beq.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006ab4:	4b23      	ldr	r3, [pc, #140]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006aba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006abe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006ac0:	4b20      	ldr	r3, [pc, #128]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ac6:	4a1f      	ldr	r2, [pc, #124]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ac8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006acc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006ad0:	4b1c      	ldr	r3, [pc, #112]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ad6:	4a1b      	ldr	r2, [pc, #108]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ad8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006adc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006ae0:	4a18      	ldr	r2, [pc, #96]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	f003 0301 	and.w	r3, r3, #1
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d016      	beq.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006af2:	f7fa fff9 	bl	8001ae8 <HAL_GetTick>
 8006af6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006af8:	e00b      	b.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006afa:	f7fa fff5 	bl	8001ae8 <HAL_GetTick>
 8006afe:	4602      	mov	r2, r0
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	1ad3      	subs	r3, r2, r3
 8006b04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d902      	bls.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006b0c:	2303      	movs	r3, #3
 8006b0e:	74fb      	strb	r3, [r7, #19]
            break;
 8006b10:	e006      	b.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b12:	4b0c      	ldr	r3, [pc, #48]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b18:	f003 0302 	and.w	r3, r3, #2
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d0ec      	beq.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006b20:	7cfb      	ldrb	r3, [r7, #19]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d10b      	bne.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b26:	4b07      	ldr	r3, [pc, #28]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b2c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b34:	4903      	ldr	r1, [pc, #12]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b36:	4313      	orrs	r3, r2
 8006b38:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006b3c:	e008      	b.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006b3e:	7cfb      	ldrb	r3, [r7, #19]
 8006b40:	74bb      	strb	r3, [r7, #18]
 8006b42:	e005      	b.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006b44:	40021000 	.word	0x40021000
 8006b48:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b4c:	7cfb      	ldrb	r3, [r7, #19]
 8006b4e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b50:	7c7b      	ldrb	r3, [r7, #17]
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d105      	bne.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b56:	4ba7      	ldr	r3, [pc, #668]	@ (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b5a:	4aa6      	ldr	r2, [pc, #664]	@ (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b60:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f003 0301 	and.w	r3, r3, #1
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00a      	beq.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006b6e:	4ba1      	ldr	r3, [pc, #644]	@ (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b74:	f023 0203 	bic.w	r2, r3, #3
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	499d      	ldr	r1, [pc, #628]	@ (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f003 0302 	and.w	r3, r3, #2
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d00a      	beq.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006b90:	4b98      	ldr	r3, [pc, #608]	@ (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b96:	f023 020c 	bic.w	r2, r3, #12
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	4995      	ldr	r1, [pc, #596]	@ (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f003 0304 	and.w	r3, r3, #4
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d00a      	beq.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006bb2:	4b90      	ldr	r3, [pc, #576]	@ (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bb8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	68db      	ldr	r3, [r3, #12]
 8006bc0:	498c      	ldr	r1, [pc, #560]	@ (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f003 0308 	and.w	r3, r3, #8
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d00a      	beq.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006bd4:	4b87      	ldr	r3, [pc, #540]	@ (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bda:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	691b      	ldr	r3, [r3, #16]
 8006be2:	4984      	ldr	r1, [pc, #528]	@ (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006be4:	4313      	orrs	r3, r2
 8006be6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f003 0310 	and.w	r3, r3, #16
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d00a      	beq.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006bf6:	4b7f      	ldr	r3, [pc, #508]	@ (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bfc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	695b      	ldr	r3, [r3, #20]
 8006c04:	497b      	ldr	r1, [pc, #492]	@ (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c06:	4313      	orrs	r3, r2
 8006c08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f003 0320 	and.w	r3, r3, #32
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d00a      	beq.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006c18:	4b76      	ldr	r3, [pc, #472]	@ (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c1e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	699b      	ldr	r3, [r3, #24]
 8006c26:	4973      	ldr	r1, [pc, #460]	@ (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d00a      	beq.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006c3a:	4b6e      	ldr	r3, [pc, #440]	@ (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c40:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	69db      	ldr	r3, [r3, #28]
 8006c48:	496a      	ldr	r1, [pc, #424]	@ (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d00a      	beq.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006c5c:	4b65      	ldr	r3, [pc, #404]	@ (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c62:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6a1b      	ldr	r3, [r3, #32]
 8006c6a:	4962      	ldr	r1, [pc, #392]	@ (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d00a      	beq.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006c7e:	4b5d      	ldr	r3, [pc, #372]	@ (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c84:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c8c:	4959      	ldr	r1, [pc, #356]	@ (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d00a      	beq.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006ca0:	4b54      	ldr	r3, [pc, #336]	@ (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ca2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006ca6:	f023 0203 	bic.w	r2, r3, #3
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cae:	4951      	ldr	r1, [pc, #324]	@ (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d00a      	beq.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006cc2:	4b4c      	ldr	r3, [pc, #304]	@ (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cc8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cd0:	4948      	ldr	r1, [pc, #288]	@ (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d015      	beq.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006ce4:	4b43      	ldr	r3, [pc, #268]	@ (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cf2:	4940      	ldr	r1, [pc, #256]	@ (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cfe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d02:	d105      	bne.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d04:	4b3b      	ldr	r3, [pc, #236]	@ (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	4a3a      	ldr	r2, [pc, #232]	@ (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006d0e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d015      	beq.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006d1c:	4b35      	ldr	r3, [pc, #212]	@ (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d22:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d2a:	4932      	ldr	r1, [pc, #200]	@ (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d36:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006d3a:	d105      	bne.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d3c:	4b2d      	ldr	r3, [pc, #180]	@ (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	4a2c      	ldr	r2, [pc, #176]	@ (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006d46:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d015      	beq.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006d54:	4b27      	ldr	r3, [pc, #156]	@ (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d5a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d62:	4924      	ldr	r1, [pc, #144]	@ (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d64:	4313      	orrs	r3, r2
 8006d66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d6e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006d72:	d105      	bne.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d74:	4b1f      	ldr	r3, [pc, #124]	@ (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d76:	68db      	ldr	r3, [r3, #12]
 8006d78:	4a1e      	ldr	r2, [pc, #120]	@ (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006d7e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d015      	beq.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006d8c:	4b19      	ldr	r3, [pc, #100]	@ (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d92:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d9a:	4916      	ldr	r1, [pc, #88]	@ (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006da6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006daa:	d105      	bne.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006dac:	4b11      	ldr	r3, [pc, #68]	@ (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006dae:	68db      	ldr	r3, [r3, #12]
 8006db0:	4a10      	ldr	r2, [pc, #64]	@ (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006db2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006db6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d019      	beq.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006dc4:	4b0b      	ldr	r3, [pc, #44]	@ (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dd2:	4908      	ldr	r1, [pc, #32]	@ (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dde:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006de2:	d109      	bne.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006de4:	4b03      	ldr	r3, [pc, #12]	@ (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006de6:	68db      	ldr	r3, [r3, #12]
 8006de8:	4a02      	ldr	r2, [pc, #8]	@ (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006dea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006dee:	60d3      	str	r3, [r2, #12]
 8006df0:	e002      	b.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006df2:	bf00      	nop
 8006df4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d015      	beq.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006e04:	4b29      	ldr	r3, [pc, #164]	@ (8006eac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e0a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e12:	4926      	ldr	r1, [pc, #152]	@ (8006eac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e14:	4313      	orrs	r3, r2
 8006e16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e22:	d105      	bne.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006e24:	4b21      	ldr	r3, [pc, #132]	@ (8006eac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	4a20      	ldr	r2, [pc, #128]	@ (8006eac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e2e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d015      	beq.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006e3c:	4b1b      	ldr	r3, [pc, #108]	@ (8006eac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e42:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e4a:	4918      	ldr	r1, [pc, #96]	@ (8006eac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e5a:	d105      	bne.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006e5c:	4b13      	ldr	r3, [pc, #76]	@ (8006eac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e5e:	68db      	ldr	r3, [r3, #12]
 8006e60:	4a12      	ldr	r2, [pc, #72]	@ (8006eac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e66:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d015      	beq.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006e74:	4b0d      	ldr	r3, [pc, #52]	@ (8006eac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e76:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006e7a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e82:	490a      	ldr	r1, [pc, #40]	@ (8006eac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e84:	4313      	orrs	r3, r2
 8006e86:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e8e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006e92:	d105      	bne.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006e94:	4b05      	ldr	r3, [pc, #20]	@ (8006eac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	4a04      	ldr	r2, [pc, #16]	@ (8006eac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e9e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006ea0:	7cbb      	ldrb	r3, [r7, #18]
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3718      	adds	r7, #24
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
 8006eaa:	bf00      	nop
 8006eac:	40021000 	.word	0x40021000

08006eb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b082      	sub	sp, #8
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d101      	bne.n	8006ec2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	e049      	b.n	8006f56 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d106      	bne.n	8006edc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f7fa f98c 	bl	80011f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2202      	movs	r2, #2
 8006ee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	3304      	adds	r3, #4
 8006eec:	4619      	mov	r1, r3
 8006eee:	4610      	mov	r0, r2
 8006ef0:	f001 fb3e 	bl	8008570 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2201      	movs	r2, #1
 8006f00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2201      	movs	r2, #1
 8006f08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2201      	movs	r2, #1
 8006f18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2201      	movs	r2, #1
 8006f20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2201      	movs	r2, #1
 8006f28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2201      	movs	r2, #1
 8006f38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2201      	movs	r2, #1
 8006f48:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f54:	2300      	movs	r3, #0
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3708      	adds	r7, #8
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
	...

08006f60 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b085      	sub	sp, #20
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d001      	beq.n	8006f78 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006f74:	2301      	movs	r3, #1
 8006f76:	e04c      	b.n	8007012 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2202      	movs	r2, #2
 8006f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a26      	ldr	r2, [pc, #152]	@ (8007020 <HAL_TIM_Base_Start+0xc0>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d022      	beq.n	8006fd0 <HAL_TIM_Base_Start+0x70>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f92:	d01d      	beq.n	8006fd0 <HAL_TIM_Base_Start+0x70>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a22      	ldr	r2, [pc, #136]	@ (8007024 <HAL_TIM_Base_Start+0xc4>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d018      	beq.n	8006fd0 <HAL_TIM_Base_Start+0x70>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a21      	ldr	r2, [pc, #132]	@ (8007028 <HAL_TIM_Base_Start+0xc8>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d013      	beq.n	8006fd0 <HAL_TIM_Base_Start+0x70>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a1f      	ldr	r2, [pc, #124]	@ (800702c <HAL_TIM_Base_Start+0xcc>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d00e      	beq.n	8006fd0 <HAL_TIM_Base_Start+0x70>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a1e      	ldr	r2, [pc, #120]	@ (8007030 <HAL_TIM_Base_Start+0xd0>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d009      	beq.n	8006fd0 <HAL_TIM_Base_Start+0x70>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a1c      	ldr	r2, [pc, #112]	@ (8007034 <HAL_TIM_Base_Start+0xd4>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d004      	beq.n	8006fd0 <HAL_TIM_Base_Start+0x70>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a1b      	ldr	r2, [pc, #108]	@ (8007038 <HAL_TIM_Base_Start+0xd8>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d115      	bne.n	8006ffc <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	689a      	ldr	r2, [r3, #8]
 8006fd6:	4b19      	ldr	r3, [pc, #100]	@ (800703c <HAL_TIM_Base_Start+0xdc>)
 8006fd8:	4013      	ands	r3, r2
 8006fda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2b06      	cmp	r3, #6
 8006fe0:	d015      	beq.n	800700e <HAL_TIM_Base_Start+0xae>
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fe8:	d011      	beq.n	800700e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	681a      	ldr	r2, [r3, #0]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f042 0201 	orr.w	r2, r2, #1
 8006ff8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ffa:	e008      	b.n	800700e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f042 0201 	orr.w	r2, r2, #1
 800700a:	601a      	str	r2, [r3, #0]
 800700c:	e000      	b.n	8007010 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800700e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007010:	2300      	movs	r3, #0
}
 8007012:	4618      	mov	r0, r3
 8007014:	3714      	adds	r7, #20
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr
 800701e:	bf00      	nop
 8007020:	40012c00 	.word	0x40012c00
 8007024:	40000400 	.word	0x40000400
 8007028:	40000800 	.word	0x40000800
 800702c:	40000c00 	.word	0x40000c00
 8007030:	40013400 	.word	0x40013400
 8007034:	40014000 	.word	0x40014000
 8007038:	40015000 	.word	0x40015000
 800703c:	00010007 	.word	0x00010007

08007040 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007040:	b480      	push	{r7}
 8007042:	b085      	sub	sp, #20
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800704e:	b2db      	uxtb	r3, r3
 8007050:	2b01      	cmp	r3, #1
 8007052:	d001      	beq.n	8007058 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007054:	2301      	movs	r3, #1
 8007056:	e054      	b.n	8007102 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2202      	movs	r2, #2
 800705c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	68da      	ldr	r2, [r3, #12]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f042 0201 	orr.w	r2, r2, #1
 800706e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a26      	ldr	r2, [pc, #152]	@ (8007110 <HAL_TIM_Base_Start_IT+0xd0>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d022      	beq.n	80070c0 <HAL_TIM_Base_Start_IT+0x80>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007082:	d01d      	beq.n	80070c0 <HAL_TIM_Base_Start_IT+0x80>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a22      	ldr	r2, [pc, #136]	@ (8007114 <HAL_TIM_Base_Start_IT+0xd4>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d018      	beq.n	80070c0 <HAL_TIM_Base_Start_IT+0x80>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a21      	ldr	r2, [pc, #132]	@ (8007118 <HAL_TIM_Base_Start_IT+0xd8>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d013      	beq.n	80070c0 <HAL_TIM_Base_Start_IT+0x80>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a1f      	ldr	r2, [pc, #124]	@ (800711c <HAL_TIM_Base_Start_IT+0xdc>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d00e      	beq.n	80070c0 <HAL_TIM_Base_Start_IT+0x80>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a1e      	ldr	r2, [pc, #120]	@ (8007120 <HAL_TIM_Base_Start_IT+0xe0>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d009      	beq.n	80070c0 <HAL_TIM_Base_Start_IT+0x80>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a1c      	ldr	r2, [pc, #112]	@ (8007124 <HAL_TIM_Base_Start_IT+0xe4>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d004      	beq.n	80070c0 <HAL_TIM_Base_Start_IT+0x80>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a1b      	ldr	r2, [pc, #108]	@ (8007128 <HAL_TIM_Base_Start_IT+0xe8>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d115      	bne.n	80070ec <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	689a      	ldr	r2, [r3, #8]
 80070c6:	4b19      	ldr	r3, [pc, #100]	@ (800712c <HAL_TIM_Base_Start_IT+0xec>)
 80070c8:	4013      	ands	r3, r2
 80070ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2b06      	cmp	r3, #6
 80070d0:	d015      	beq.n	80070fe <HAL_TIM_Base_Start_IT+0xbe>
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070d8:	d011      	beq.n	80070fe <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	681a      	ldr	r2, [r3, #0]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f042 0201 	orr.w	r2, r2, #1
 80070e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070ea:	e008      	b.n	80070fe <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f042 0201 	orr.w	r2, r2, #1
 80070fa:	601a      	str	r2, [r3, #0]
 80070fc:	e000      	b.n	8007100 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007100:	2300      	movs	r3, #0
}
 8007102:	4618      	mov	r0, r3
 8007104:	3714      	adds	r7, #20
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr
 800710e:	bf00      	nop
 8007110:	40012c00 	.word	0x40012c00
 8007114:	40000400 	.word	0x40000400
 8007118:	40000800 	.word	0x40000800
 800711c:	40000c00 	.word	0x40000c00
 8007120:	40013400 	.word	0x40013400
 8007124:	40014000 	.word	0x40014000
 8007128:	40015000 	.word	0x40015000
 800712c:	00010007 	.word	0x00010007

08007130 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b082      	sub	sp, #8
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d101      	bne.n	8007142 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	e049      	b.n	80071d6 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007148:	b2db      	uxtb	r3, r3
 800714a:	2b00      	cmp	r3, #0
 800714c:	d106      	bne.n	800715c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 f841 	bl	80071de <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2202      	movs	r2, #2
 8007160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	3304      	adds	r3, #4
 800716c:	4619      	mov	r1, r3
 800716e:	4610      	mov	r0, r2
 8007170:	f001 f9fe 	bl	8008570 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2201      	movs	r2, #1
 8007178:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2201      	movs	r2, #1
 8007180:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2201      	movs	r2, #1
 8007188:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2201      	movs	r2, #1
 8007190:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2201      	movs	r2, #1
 8007198:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2201      	movs	r2, #1
 80071a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2201      	movs	r2, #1
 80071a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2201      	movs	r2, #1
 80071b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2201      	movs	r2, #1
 80071b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2201      	movs	r2, #1
 80071c8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2201      	movs	r2, #1
 80071d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80071d4:	2300      	movs	r3, #0
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3708      	adds	r7, #8
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}

080071de <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80071de:	b480      	push	{r7}
 80071e0:	b083      	sub	sp, #12
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80071e6:	bf00      	nop
 80071e8:	370c      	adds	r7, #12
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr
	...

080071f4 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d109      	bne.n	8007218 <HAL_TIM_OC_Start+0x24>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800720a:	b2db      	uxtb	r3, r3
 800720c:	2b01      	cmp	r3, #1
 800720e:	bf14      	ite	ne
 8007210:	2301      	movne	r3, #1
 8007212:	2300      	moveq	r3, #0
 8007214:	b2db      	uxtb	r3, r3
 8007216:	e03c      	b.n	8007292 <HAL_TIM_OC_Start+0x9e>
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	2b04      	cmp	r3, #4
 800721c:	d109      	bne.n	8007232 <HAL_TIM_OC_Start+0x3e>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007224:	b2db      	uxtb	r3, r3
 8007226:	2b01      	cmp	r3, #1
 8007228:	bf14      	ite	ne
 800722a:	2301      	movne	r3, #1
 800722c:	2300      	moveq	r3, #0
 800722e:	b2db      	uxtb	r3, r3
 8007230:	e02f      	b.n	8007292 <HAL_TIM_OC_Start+0x9e>
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	2b08      	cmp	r3, #8
 8007236:	d109      	bne.n	800724c <HAL_TIM_OC_Start+0x58>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800723e:	b2db      	uxtb	r3, r3
 8007240:	2b01      	cmp	r3, #1
 8007242:	bf14      	ite	ne
 8007244:	2301      	movne	r3, #1
 8007246:	2300      	moveq	r3, #0
 8007248:	b2db      	uxtb	r3, r3
 800724a:	e022      	b.n	8007292 <HAL_TIM_OC_Start+0x9e>
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	2b0c      	cmp	r3, #12
 8007250:	d109      	bne.n	8007266 <HAL_TIM_OC_Start+0x72>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007258:	b2db      	uxtb	r3, r3
 800725a:	2b01      	cmp	r3, #1
 800725c:	bf14      	ite	ne
 800725e:	2301      	movne	r3, #1
 8007260:	2300      	moveq	r3, #0
 8007262:	b2db      	uxtb	r3, r3
 8007264:	e015      	b.n	8007292 <HAL_TIM_OC_Start+0x9e>
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	2b10      	cmp	r3, #16
 800726a:	d109      	bne.n	8007280 <HAL_TIM_OC_Start+0x8c>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007272:	b2db      	uxtb	r3, r3
 8007274:	2b01      	cmp	r3, #1
 8007276:	bf14      	ite	ne
 8007278:	2301      	movne	r3, #1
 800727a:	2300      	moveq	r3, #0
 800727c:	b2db      	uxtb	r3, r3
 800727e:	e008      	b.n	8007292 <HAL_TIM_OC_Start+0x9e>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007286:	b2db      	uxtb	r3, r3
 8007288:	2b01      	cmp	r3, #1
 800728a:	bf14      	ite	ne
 800728c:	2301      	movne	r3, #1
 800728e:	2300      	moveq	r3, #0
 8007290:	b2db      	uxtb	r3, r3
 8007292:	2b00      	cmp	r3, #0
 8007294:	d001      	beq.n	800729a <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 8007296:	2301      	movs	r3, #1
 8007298:	e0a6      	b.n	80073e8 <HAL_TIM_OC_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d104      	bne.n	80072aa <HAL_TIM_OC_Start+0xb6>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2202      	movs	r2, #2
 80072a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80072a8:	e023      	b.n	80072f2 <HAL_TIM_OC_Start+0xfe>
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	2b04      	cmp	r3, #4
 80072ae:	d104      	bne.n	80072ba <HAL_TIM_OC_Start+0xc6>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2202      	movs	r2, #2
 80072b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80072b8:	e01b      	b.n	80072f2 <HAL_TIM_OC_Start+0xfe>
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	2b08      	cmp	r3, #8
 80072be:	d104      	bne.n	80072ca <HAL_TIM_OC_Start+0xd6>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2202      	movs	r2, #2
 80072c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80072c8:	e013      	b.n	80072f2 <HAL_TIM_OC_Start+0xfe>
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	2b0c      	cmp	r3, #12
 80072ce:	d104      	bne.n	80072da <HAL_TIM_OC_Start+0xe6>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2202      	movs	r2, #2
 80072d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80072d8:	e00b      	b.n	80072f2 <HAL_TIM_OC_Start+0xfe>
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	2b10      	cmp	r3, #16
 80072de:	d104      	bne.n	80072ea <HAL_TIM_OC_Start+0xf6>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2202      	movs	r2, #2
 80072e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80072e8:	e003      	b.n	80072f2 <HAL_TIM_OC_Start+0xfe>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2202      	movs	r2, #2
 80072ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	2201      	movs	r2, #1
 80072f8:	6839      	ldr	r1, [r7, #0]
 80072fa:	4618      	mov	r0, r3
 80072fc:	f001 fdb2 	bl	8008e64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a3a      	ldr	r2, [pc, #232]	@ (80073f0 <HAL_TIM_OC_Start+0x1fc>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d018      	beq.n	800733c <HAL_TIM_OC_Start+0x148>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a39      	ldr	r2, [pc, #228]	@ (80073f4 <HAL_TIM_OC_Start+0x200>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d013      	beq.n	800733c <HAL_TIM_OC_Start+0x148>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a37      	ldr	r2, [pc, #220]	@ (80073f8 <HAL_TIM_OC_Start+0x204>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d00e      	beq.n	800733c <HAL_TIM_OC_Start+0x148>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a36      	ldr	r2, [pc, #216]	@ (80073fc <HAL_TIM_OC_Start+0x208>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d009      	beq.n	800733c <HAL_TIM_OC_Start+0x148>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a34      	ldr	r2, [pc, #208]	@ (8007400 <HAL_TIM_OC_Start+0x20c>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d004      	beq.n	800733c <HAL_TIM_OC_Start+0x148>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a33      	ldr	r2, [pc, #204]	@ (8007404 <HAL_TIM_OC_Start+0x210>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d101      	bne.n	8007340 <HAL_TIM_OC_Start+0x14c>
 800733c:	2301      	movs	r3, #1
 800733e:	e000      	b.n	8007342 <HAL_TIM_OC_Start+0x14e>
 8007340:	2300      	movs	r3, #0
 8007342:	2b00      	cmp	r3, #0
 8007344:	d007      	beq.n	8007356 <HAL_TIM_OC_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007354:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a25      	ldr	r2, [pc, #148]	@ (80073f0 <HAL_TIM_OC_Start+0x1fc>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d022      	beq.n	80073a6 <HAL_TIM_OC_Start+0x1b2>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007368:	d01d      	beq.n	80073a6 <HAL_TIM_OC_Start+0x1b2>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a26      	ldr	r2, [pc, #152]	@ (8007408 <HAL_TIM_OC_Start+0x214>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d018      	beq.n	80073a6 <HAL_TIM_OC_Start+0x1b2>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a24      	ldr	r2, [pc, #144]	@ (800740c <HAL_TIM_OC_Start+0x218>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d013      	beq.n	80073a6 <HAL_TIM_OC_Start+0x1b2>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a23      	ldr	r2, [pc, #140]	@ (8007410 <HAL_TIM_OC_Start+0x21c>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d00e      	beq.n	80073a6 <HAL_TIM_OC_Start+0x1b2>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a19      	ldr	r2, [pc, #100]	@ (80073f4 <HAL_TIM_OC_Start+0x200>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d009      	beq.n	80073a6 <HAL_TIM_OC_Start+0x1b2>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a18      	ldr	r2, [pc, #96]	@ (80073f8 <HAL_TIM_OC_Start+0x204>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d004      	beq.n	80073a6 <HAL_TIM_OC_Start+0x1b2>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a18      	ldr	r2, [pc, #96]	@ (8007404 <HAL_TIM_OC_Start+0x210>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d115      	bne.n	80073d2 <HAL_TIM_OC_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	689a      	ldr	r2, [r3, #8]
 80073ac:	4b19      	ldr	r3, [pc, #100]	@ (8007414 <HAL_TIM_OC_Start+0x220>)
 80073ae:	4013      	ands	r3, r2
 80073b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2b06      	cmp	r3, #6
 80073b6:	d015      	beq.n	80073e4 <HAL_TIM_OC_Start+0x1f0>
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073be:	d011      	beq.n	80073e4 <HAL_TIM_OC_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	681a      	ldr	r2, [r3, #0]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f042 0201 	orr.w	r2, r2, #1
 80073ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073d0:	e008      	b.n	80073e4 <HAL_TIM_OC_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	681a      	ldr	r2, [r3, #0]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f042 0201 	orr.w	r2, r2, #1
 80073e0:	601a      	str	r2, [r3, #0]
 80073e2:	e000      	b.n	80073e6 <HAL_TIM_OC_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073e4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80073e6:	2300      	movs	r3, #0
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3710      	adds	r7, #16
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}
 80073f0:	40012c00 	.word	0x40012c00
 80073f4:	40013400 	.word	0x40013400
 80073f8:	40014000 	.word	0x40014000
 80073fc:	40014400 	.word	0x40014400
 8007400:	40014800 	.word	0x40014800
 8007404:	40015000 	.word	0x40015000
 8007408:	40000400 	.word	0x40000400
 800740c:	40000800 	.word	0x40000800
 8007410:	40000c00 	.word	0x40000c00
 8007414:	00010007 	.word	0x00010007

08007418 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b082      	sub	sp, #8
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d101      	bne.n	800742a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007426:	2301      	movs	r3, #1
 8007428:	e049      	b.n	80074be <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007430:	b2db      	uxtb	r3, r3
 8007432:	2b00      	cmp	r3, #0
 8007434:	d106      	bne.n	8007444 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2200      	movs	r2, #0
 800743a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f000 f841 	bl	80074c6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2202      	movs	r2, #2
 8007448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681a      	ldr	r2, [r3, #0]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	3304      	adds	r3, #4
 8007454:	4619      	mov	r1, r3
 8007456:	4610      	mov	r0, r2
 8007458:	f001 f88a 	bl	8008570 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2201      	movs	r2, #1
 8007460:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2201      	movs	r2, #1
 8007468:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2201      	movs	r2, #1
 8007470:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2201      	movs	r2, #1
 8007478:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2201      	movs	r2, #1
 8007480:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2201      	movs	r2, #1
 8007488:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2201      	movs	r2, #1
 8007490:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2201      	movs	r2, #1
 8007498:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2201      	movs	r2, #1
 80074a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2201      	movs	r2, #1
 80074a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2201      	movs	r2, #1
 80074b0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2201      	movs	r2, #1
 80074b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80074bc:	2300      	movs	r3, #0
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3708      	adds	r7, #8
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}

080074c6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80074c6:	b480      	push	{r7}
 80074c8:	b083      	sub	sp, #12
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80074ce:	bf00      	nop
 80074d0:	370c      	adds	r7, #12
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr
	...

080074dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b084      	sub	sp, #16
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d109      	bne.n	8007500 <HAL_TIM_PWM_Start+0x24>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	bf14      	ite	ne
 80074f8:	2301      	movne	r3, #1
 80074fa:	2300      	moveq	r3, #0
 80074fc:	b2db      	uxtb	r3, r3
 80074fe:	e03c      	b.n	800757a <HAL_TIM_PWM_Start+0x9e>
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	2b04      	cmp	r3, #4
 8007504:	d109      	bne.n	800751a <HAL_TIM_PWM_Start+0x3e>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800750c:	b2db      	uxtb	r3, r3
 800750e:	2b01      	cmp	r3, #1
 8007510:	bf14      	ite	ne
 8007512:	2301      	movne	r3, #1
 8007514:	2300      	moveq	r3, #0
 8007516:	b2db      	uxtb	r3, r3
 8007518:	e02f      	b.n	800757a <HAL_TIM_PWM_Start+0x9e>
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	2b08      	cmp	r3, #8
 800751e:	d109      	bne.n	8007534 <HAL_TIM_PWM_Start+0x58>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007526:	b2db      	uxtb	r3, r3
 8007528:	2b01      	cmp	r3, #1
 800752a:	bf14      	ite	ne
 800752c:	2301      	movne	r3, #1
 800752e:	2300      	moveq	r3, #0
 8007530:	b2db      	uxtb	r3, r3
 8007532:	e022      	b.n	800757a <HAL_TIM_PWM_Start+0x9e>
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	2b0c      	cmp	r3, #12
 8007538:	d109      	bne.n	800754e <HAL_TIM_PWM_Start+0x72>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007540:	b2db      	uxtb	r3, r3
 8007542:	2b01      	cmp	r3, #1
 8007544:	bf14      	ite	ne
 8007546:	2301      	movne	r3, #1
 8007548:	2300      	moveq	r3, #0
 800754a:	b2db      	uxtb	r3, r3
 800754c:	e015      	b.n	800757a <HAL_TIM_PWM_Start+0x9e>
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	2b10      	cmp	r3, #16
 8007552:	d109      	bne.n	8007568 <HAL_TIM_PWM_Start+0x8c>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800755a:	b2db      	uxtb	r3, r3
 800755c:	2b01      	cmp	r3, #1
 800755e:	bf14      	ite	ne
 8007560:	2301      	movne	r3, #1
 8007562:	2300      	moveq	r3, #0
 8007564:	b2db      	uxtb	r3, r3
 8007566:	e008      	b.n	800757a <HAL_TIM_PWM_Start+0x9e>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800756e:	b2db      	uxtb	r3, r3
 8007570:	2b01      	cmp	r3, #1
 8007572:	bf14      	ite	ne
 8007574:	2301      	movne	r3, #1
 8007576:	2300      	moveq	r3, #0
 8007578:	b2db      	uxtb	r3, r3
 800757a:	2b00      	cmp	r3, #0
 800757c:	d001      	beq.n	8007582 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800757e:	2301      	movs	r3, #1
 8007580:	e0a6      	b.n	80076d0 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d104      	bne.n	8007592 <HAL_TIM_PWM_Start+0xb6>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2202      	movs	r2, #2
 800758c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007590:	e023      	b.n	80075da <HAL_TIM_PWM_Start+0xfe>
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	2b04      	cmp	r3, #4
 8007596:	d104      	bne.n	80075a2 <HAL_TIM_PWM_Start+0xc6>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2202      	movs	r2, #2
 800759c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80075a0:	e01b      	b.n	80075da <HAL_TIM_PWM_Start+0xfe>
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	2b08      	cmp	r3, #8
 80075a6:	d104      	bne.n	80075b2 <HAL_TIM_PWM_Start+0xd6>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2202      	movs	r2, #2
 80075ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80075b0:	e013      	b.n	80075da <HAL_TIM_PWM_Start+0xfe>
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	2b0c      	cmp	r3, #12
 80075b6:	d104      	bne.n	80075c2 <HAL_TIM_PWM_Start+0xe6>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2202      	movs	r2, #2
 80075bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80075c0:	e00b      	b.n	80075da <HAL_TIM_PWM_Start+0xfe>
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	2b10      	cmp	r3, #16
 80075c6:	d104      	bne.n	80075d2 <HAL_TIM_PWM_Start+0xf6>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2202      	movs	r2, #2
 80075cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80075d0:	e003      	b.n	80075da <HAL_TIM_PWM_Start+0xfe>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2202      	movs	r2, #2
 80075d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	2201      	movs	r2, #1
 80075e0:	6839      	ldr	r1, [r7, #0]
 80075e2:	4618      	mov	r0, r3
 80075e4:	f001 fc3e 	bl	8008e64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a3a      	ldr	r2, [pc, #232]	@ (80076d8 <HAL_TIM_PWM_Start+0x1fc>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d018      	beq.n	8007624 <HAL_TIM_PWM_Start+0x148>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a39      	ldr	r2, [pc, #228]	@ (80076dc <HAL_TIM_PWM_Start+0x200>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d013      	beq.n	8007624 <HAL_TIM_PWM_Start+0x148>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a37      	ldr	r2, [pc, #220]	@ (80076e0 <HAL_TIM_PWM_Start+0x204>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d00e      	beq.n	8007624 <HAL_TIM_PWM_Start+0x148>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a36      	ldr	r2, [pc, #216]	@ (80076e4 <HAL_TIM_PWM_Start+0x208>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d009      	beq.n	8007624 <HAL_TIM_PWM_Start+0x148>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a34      	ldr	r2, [pc, #208]	@ (80076e8 <HAL_TIM_PWM_Start+0x20c>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d004      	beq.n	8007624 <HAL_TIM_PWM_Start+0x148>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a33      	ldr	r2, [pc, #204]	@ (80076ec <HAL_TIM_PWM_Start+0x210>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d101      	bne.n	8007628 <HAL_TIM_PWM_Start+0x14c>
 8007624:	2301      	movs	r3, #1
 8007626:	e000      	b.n	800762a <HAL_TIM_PWM_Start+0x14e>
 8007628:	2300      	movs	r3, #0
 800762a:	2b00      	cmp	r3, #0
 800762c:	d007      	beq.n	800763e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800763c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a25      	ldr	r2, [pc, #148]	@ (80076d8 <HAL_TIM_PWM_Start+0x1fc>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d022      	beq.n	800768e <HAL_TIM_PWM_Start+0x1b2>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007650:	d01d      	beq.n	800768e <HAL_TIM_PWM_Start+0x1b2>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a26      	ldr	r2, [pc, #152]	@ (80076f0 <HAL_TIM_PWM_Start+0x214>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d018      	beq.n	800768e <HAL_TIM_PWM_Start+0x1b2>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a24      	ldr	r2, [pc, #144]	@ (80076f4 <HAL_TIM_PWM_Start+0x218>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d013      	beq.n	800768e <HAL_TIM_PWM_Start+0x1b2>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a23      	ldr	r2, [pc, #140]	@ (80076f8 <HAL_TIM_PWM_Start+0x21c>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d00e      	beq.n	800768e <HAL_TIM_PWM_Start+0x1b2>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a19      	ldr	r2, [pc, #100]	@ (80076dc <HAL_TIM_PWM_Start+0x200>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d009      	beq.n	800768e <HAL_TIM_PWM_Start+0x1b2>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a18      	ldr	r2, [pc, #96]	@ (80076e0 <HAL_TIM_PWM_Start+0x204>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d004      	beq.n	800768e <HAL_TIM_PWM_Start+0x1b2>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a18      	ldr	r2, [pc, #96]	@ (80076ec <HAL_TIM_PWM_Start+0x210>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d115      	bne.n	80076ba <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	689a      	ldr	r2, [r3, #8]
 8007694:	4b19      	ldr	r3, [pc, #100]	@ (80076fc <HAL_TIM_PWM_Start+0x220>)
 8007696:	4013      	ands	r3, r2
 8007698:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2b06      	cmp	r3, #6
 800769e:	d015      	beq.n	80076cc <HAL_TIM_PWM_Start+0x1f0>
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076a6:	d011      	beq.n	80076cc <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	681a      	ldr	r2, [r3, #0]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f042 0201 	orr.w	r2, r2, #1
 80076b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076b8:	e008      	b.n	80076cc <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	681a      	ldr	r2, [r3, #0]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f042 0201 	orr.w	r2, r2, #1
 80076c8:	601a      	str	r2, [r3, #0]
 80076ca:	e000      	b.n	80076ce <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076cc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80076ce:	2300      	movs	r3, #0
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3710      	adds	r7, #16
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}
 80076d8:	40012c00 	.word	0x40012c00
 80076dc:	40013400 	.word	0x40013400
 80076e0:	40014000 	.word	0x40014000
 80076e4:	40014400 	.word	0x40014400
 80076e8:	40014800 	.word	0x40014800
 80076ec:	40015000 	.word	0x40015000
 80076f0:	40000400 	.word	0x40000400
 80076f4:	40000800 	.word	0x40000800
 80076f8:	40000c00 	.word	0x40000c00
 80076fc:	00010007 	.word	0x00010007

08007700 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b086      	sub	sp, #24
 8007704:	af00      	add	r7, sp, #0
 8007706:	60f8      	str	r0, [r7, #12]
 8007708:	60b9      	str	r1, [r7, #8]
 800770a:	607a      	str	r2, [r7, #4]
 800770c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800770e:	2300      	movs	r3, #0
 8007710:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d109      	bne.n	800772c <HAL_TIM_PWM_Start_DMA+0x2c>
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800771e:	b2db      	uxtb	r3, r3
 8007720:	2b02      	cmp	r3, #2
 8007722:	bf0c      	ite	eq
 8007724:	2301      	moveq	r3, #1
 8007726:	2300      	movne	r3, #0
 8007728:	b2db      	uxtb	r3, r3
 800772a:	e03c      	b.n	80077a6 <HAL_TIM_PWM_Start_DMA+0xa6>
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	2b04      	cmp	r3, #4
 8007730:	d109      	bne.n	8007746 <HAL_TIM_PWM_Start_DMA+0x46>
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007738:	b2db      	uxtb	r3, r3
 800773a:	2b02      	cmp	r3, #2
 800773c:	bf0c      	ite	eq
 800773e:	2301      	moveq	r3, #1
 8007740:	2300      	movne	r3, #0
 8007742:	b2db      	uxtb	r3, r3
 8007744:	e02f      	b.n	80077a6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	2b08      	cmp	r3, #8
 800774a:	d109      	bne.n	8007760 <HAL_TIM_PWM_Start_DMA+0x60>
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007752:	b2db      	uxtb	r3, r3
 8007754:	2b02      	cmp	r3, #2
 8007756:	bf0c      	ite	eq
 8007758:	2301      	moveq	r3, #1
 800775a:	2300      	movne	r3, #0
 800775c:	b2db      	uxtb	r3, r3
 800775e:	e022      	b.n	80077a6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	2b0c      	cmp	r3, #12
 8007764:	d109      	bne.n	800777a <HAL_TIM_PWM_Start_DMA+0x7a>
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800776c:	b2db      	uxtb	r3, r3
 800776e:	2b02      	cmp	r3, #2
 8007770:	bf0c      	ite	eq
 8007772:	2301      	moveq	r3, #1
 8007774:	2300      	movne	r3, #0
 8007776:	b2db      	uxtb	r3, r3
 8007778:	e015      	b.n	80077a6 <HAL_TIM_PWM_Start_DMA+0xa6>
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	2b10      	cmp	r3, #16
 800777e:	d109      	bne.n	8007794 <HAL_TIM_PWM_Start_DMA+0x94>
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007786:	b2db      	uxtb	r3, r3
 8007788:	2b02      	cmp	r3, #2
 800778a:	bf0c      	ite	eq
 800778c:	2301      	moveq	r3, #1
 800778e:	2300      	movne	r3, #0
 8007790:	b2db      	uxtb	r3, r3
 8007792:	e008      	b.n	80077a6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800779a:	b2db      	uxtb	r3, r3
 800779c:	2b02      	cmp	r3, #2
 800779e:	bf0c      	ite	eq
 80077a0:	2301      	moveq	r3, #1
 80077a2:	2300      	movne	r3, #0
 80077a4:	b2db      	uxtb	r3, r3
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d001      	beq.n	80077ae <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 80077aa:	2302      	movs	r3, #2
 80077ac:	e1b5      	b.n	8007b1a <HAL_TIM_PWM_Start_DMA+0x41a>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d109      	bne.n	80077c8 <HAL_TIM_PWM_Start_DMA+0xc8>
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80077ba:	b2db      	uxtb	r3, r3
 80077bc:	2b01      	cmp	r3, #1
 80077be:	bf0c      	ite	eq
 80077c0:	2301      	moveq	r3, #1
 80077c2:	2300      	movne	r3, #0
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	e03c      	b.n	8007842 <HAL_TIM_PWM_Start_DMA+0x142>
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	2b04      	cmp	r3, #4
 80077cc:	d109      	bne.n	80077e2 <HAL_TIM_PWM_Start_DMA+0xe2>
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80077d4:	b2db      	uxtb	r3, r3
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	bf0c      	ite	eq
 80077da:	2301      	moveq	r3, #1
 80077dc:	2300      	movne	r3, #0
 80077de:	b2db      	uxtb	r3, r3
 80077e0:	e02f      	b.n	8007842 <HAL_TIM_PWM_Start_DMA+0x142>
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	2b08      	cmp	r3, #8
 80077e6:	d109      	bne.n	80077fc <HAL_TIM_PWM_Start_DMA+0xfc>
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80077ee:	b2db      	uxtb	r3, r3
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	bf0c      	ite	eq
 80077f4:	2301      	moveq	r3, #1
 80077f6:	2300      	movne	r3, #0
 80077f8:	b2db      	uxtb	r3, r3
 80077fa:	e022      	b.n	8007842 <HAL_TIM_PWM_Start_DMA+0x142>
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	2b0c      	cmp	r3, #12
 8007800:	d109      	bne.n	8007816 <HAL_TIM_PWM_Start_DMA+0x116>
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007808:	b2db      	uxtb	r3, r3
 800780a:	2b01      	cmp	r3, #1
 800780c:	bf0c      	ite	eq
 800780e:	2301      	moveq	r3, #1
 8007810:	2300      	movne	r3, #0
 8007812:	b2db      	uxtb	r3, r3
 8007814:	e015      	b.n	8007842 <HAL_TIM_PWM_Start_DMA+0x142>
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	2b10      	cmp	r3, #16
 800781a:	d109      	bne.n	8007830 <HAL_TIM_PWM_Start_DMA+0x130>
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007822:	b2db      	uxtb	r3, r3
 8007824:	2b01      	cmp	r3, #1
 8007826:	bf0c      	ite	eq
 8007828:	2301      	moveq	r3, #1
 800782a:	2300      	movne	r3, #0
 800782c:	b2db      	uxtb	r3, r3
 800782e:	e008      	b.n	8007842 <HAL_TIM_PWM_Start_DMA+0x142>
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007836:	b2db      	uxtb	r3, r3
 8007838:	2b01      	cmp	r3, #1
 800783a:	bf0c      	ite	eq
 800783c:	2301      	moveq	r3, #1
 800783e:	2300      	movne	r3, #0
 8007840:	b2db      	uxtb	r3, r3
 8007842:	2b00      	cmp	r3, #0
 8007844:	d034      	beq.n	80078b0 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d002      	beq.n	8007852 <HAL_TIM_PWM_Start_DMA+0x152>
 800784c:	887b      	ldrh	r3, [r7, #2]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d101      	bne.n	8007856 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8007852:	2301      	movs	r3, #1
 8007854:	e161      	b.n	8007b1a <HAL_TIM_PWM_Start_DMA+0x41a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d104      	bne.n	8007866 <HAL_TIM_PWM_Start_DMA+0x166>
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2202      	movs	r2, #2
 8007860:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007864:	e026      	b.n	80078b4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	2b04      	cmp	r3, #4
 800786a:	d104      	bne.n	8007876 <HAL_TIM_PWM_Start_DMA+0x176>
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2202      	movs	r2, #2
 8007870:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007874:	e01e      	b.n	80078b4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	2b08      	cmp	r3, #8
 800787a:	d104      	bne.n	8007886 <HAL_TIM_PWM_Start_DMA+0x186>
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2202      	movs	r2, #2
 8007880:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007884:	e016      	b.n	80078b4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	2b0c      	cmp	r3, #12
 800788a:	d104      	bne.n	8007896 <HAL_TIM_PWM_Start_DMA+0x196>
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2202      	movs	r2, #2
 8007890:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007894:	e00e      	b.n	80078b4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	2b10      	cmp	r3, #16
 800789a:	d104      	bne.n	80078a6 <HAL_TIM_PWM_Start_DMA+0x1a6>
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2202      	movs	r2, #2
 80078a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80078a4:	e006      	b.n	80078b4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2202      	movs	r2, #2
 80078aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80078ae:	e001      	b.n	80078b4 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 80078b0:	2301      	movs	r3, #1
 80078b2:	e132      	b.n	8007b1a <HAL_TIM_PWM_Start_DMA+0x41a>
  }

  switch (Channel)
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	2b0c      	cmp	r3, #12
 80078b8:	f200 80ae 	bhi.w	8007a18 <HAL_TIM_PWM_Start_DMA+0x318>
 80078bc:	a201      	add	r2, pc, #4	@ (adr r2, 80078c4 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 80078be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078c2:	bf00      	nop
 80078c4:	080078f9 	.word	0x080078f9
 80078c8:	08007a19 	.word	0x08007a19
 80078cc:	08007a19 	.word	0x08007a19
 80078d0:	08007a19 	.word	0x08007a19
 80078d4:	08007941 	.word	0x08007941
 80078d8:	08007a19 	.word	0x08007a19
 80078dc:	08007a19 	.word	0x08007a19
 80078e0:	08007a19 	.word	0x08007a19
 80078e4:	08007989 	.word	0x08007989
 80078e8:	08007a19 	.word	0x08007a19
 80078ec:	08007a19 	.word	0x08007a19
 80078f0:	08007a19 	.word	0x08007a19
 80078f4:	080079d1 	.word	0x080079d1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078fc:	4a89      	ldr	r2, [pc, #548]	@ (8007b24 <HAL_TIM_PWM_Start_DMA+0x424>)
 80078fe:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007904:	4a88      	ldr	r2, [pc, #544]	@ (8007b28 <HAL_TIM_PWM_Start_DMA+0x428>)
 8007906:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800790c:	4a87      	ldr	r2, [pc, #540]	@ (8007b2c <HAL_TIM_PWM_Start_DMA+0x42c>)
 800790e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8007914:	6879      	ldr	r1, [r7, #4]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	3334      	adds	r3, #52	@ 0x34
 800791c:	461a      	mov	r2, r3
 800791e:	887b      	ldrh	r3, [r7, #2]
 8007920:	f7fc f936 	bl	8003b90 <HAL_DMA_Start_IT>
 8007924:	4603      	mov	r3, r0
 8007926:	2b00      	cmp	r3, #0
 8007928:	d001      	beq.n	800792e <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800792a:	2301      	movs	r3, #1
 800792c:	e0f5      	b.n	8007b1a <HAL_TIM_PWM_Start_DMA+0x41a>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	68da      	ldr	r2, [r3, #12]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800793c:	60da      	str	r2, [r3, #12]
      break;
 800793e:	e06e      	b.n	8007a1e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007944:	4a77      	ldr	r2, [pc, #476]	@ (8007b24 <HAL_TIM_PWM_Start_DMA+0x424>)
 8007946:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800794c:	4a76      	ldr	r2, [pc, #472]	@ (8007b28 <HAL_TIM_PWM_Start_DMA+0x428>)
 800794e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007954:	4a75      	ldr	r2, [pc, #468]	@ (8007b2c <HAL_TIM_PWM_Start_DMA+0x42c>)
 8007956:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800795c:	6879      	ldr	r1, [r7, #4]
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	3338      	adds	r3, #56	@ 0x38
 8007964:	461a      	mov	r2, r3
 8007966:	887b      	ldrh	r3, [r7, #2]
 8007968:	f7fc f912 	bl	8003b90 <HAL_DMA_Start_IT>
 800796c:	4603      	mov	r3, r0
 800796e:	2b00      	cmp	r3, #0
 8007970:	d001      	beq.n	8007976 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007972:	2301      	movs	r3, #1
 8007974:	e0d1      	b.n	8007b1a <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	68da      	ldr	r2, [r3, #12]
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007984:	60da      	str	r2, [r3, #12]
      break;
 8007986:	e04a      	b.n	8007a1e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800798c:	4a65      	ldr	r2, [pc, #404]	@ (8007b24 <HAL_TIM_PWM_Start_DMA+0x424>)
 800798e:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007994:	4a64      	ldr	r2, [pc, #400]	@ (8007b28 <HAL_TIM_PWM_Start_DMA+0x428>)
 8007996:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800799c:	4a63      	ldr	r2, [pc, #396]	@ (8007b2c <HAL_TIM_PWM_Start_DMA+0x42c>)
 800799e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80079a4:	6879      	ldr	r1, [r7, #4]
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	333c      	adds	r3, #60	@ 0x3c
 80079ac:	461a      	mov	r2, r3
 80079ae:	887b      	ldrh	r3, [r7, #2]
 80079b0:	f7fc f8ee 	bl	8003b90 <HAL_DMA_Start_IT>
 80079b4:	4603      	mov	r3, r0
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d001      	beq.n	80079be <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80079ba:	2301      	movs	r3, #1
 80079bc:	e0ad      	b.n	8007b1a <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	68da      	ldr	r2, [r3, #12]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80079cc:	60da      	str	r2, [r3, #12]
      break;
 80079ce:	e026      	b.n	8007a1e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079d4:	4a53      	ldr	r2, [pc, #332]	@ (8007b24 <HAL_TIM_PWM_Start_DMA+0x424>)
 80079d6:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079dc:	4a52      	ldr	r2, [pc, #328]	@ (8007b28 <HAL_TIM_PWM_Start_DMA+0x428>)
 80079de:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079e4:	4a51      	ldr	r2, [pc, #324]	@ (8007b2c <HAL_TIM_PWM_Start_DMA+0x42c>)
 80079e6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80079ec:	6879      	ldr	r1, [r7, #4]
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	3340      	adds	r3, #64	@ 0x40
 80079f4:	461a      	mov	r2, r3
 80079f6:	887b      	ldrh	r3, [r7, #2]
 80079f8:	f7fc f8ca 	bl	8003b90 <HAL_DMA_Start_IT>
 80079fc:	4603      	mov	r3, r0
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d001      	beq.n	8007a06 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007a02:	2301      	movs	r3, #1
 8007a04:	e089      	b.n	8007b1a <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	68da      	ldr	r2, [r3, #12]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007a14:	60da      	str	r2, [r3, #12]
      break;
 8007a16:	e002      	b.n	8007a1e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	75fb      	strb	r3, [r7, #23]
      break;
 8007a1c:	bf00      	nop
  }

  if (status == HAL_OK)
 8007a1e:	7dfb      	ldrb	r3, [r7, #23]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d179      	bne.n	8007b18 <HAL_TIM_PWM_Start_DMA+0x418>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	2201      	movs	r2, #1
 8007a2a:	68b9      	ldr	r1, [r7, #8]
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f001 fa19 	bl	8008e64 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a3e      	ldr	r2, [pc, #248]	@ (8007b30 <HAL_TIM_PWM_Start_DMA+0x430>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d018      	beq.n	8007a6e <HAL_TIM_PWM_Start_DMA+0x36e>
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a3c      	ldr	r2, [pc, #240]	@ (8007b34 <HAL_TIM_PWM_Start_DMA+0x434>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d013      	beq.n	8007a6e <HAL_TIM_PWM_Start_DMA+0x36e>
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a3b      	ldr	r2, [pc, #236]	@ (8007b38 <HAL_TIM_PWM_Start_DMA+0x438>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d00e      	beq.n	8007a6e <HAL_TIM_PWM_Start_DMA+0x36e>
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4a39      	ldr	r2, [pc, #228]	@ (8007b3c <HAL_TIM_PWM_Start_DMA+0x43c>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d009      	beq.n	8007a6e <HAL_TIM_PWM_Start_DMA+0x36e>
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a38      	ldr	r2, [pc, #224]	@ (8007b40 <HAL_TIM_PWM_Start_DMA+0x440>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d004      	beq.n	8007a6e <HAL_TIM_PWM_Start_DMA+0x36e>
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a36      	ldr	r2, [pc, #216]	@ (8007b44 <HAL_TIM_PWM_Start_DMA+0x444>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d101      	bne.n	8007a72 <HAL_TIM_PWM_Start_DMA+0x372>
 8007a6e:	2301      	movs	r3, #1
 8007a70:	e000      	b.n	8007a74 <HAL_TIM_PWM_Start_DMA+0x374>
 8007a72:	2300      	movs	r3, #0
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d007      	beq.n	8007a88 <HAL_TIM_PWM_Start_DMA+0x388>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007a86:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a28      	ldr	r2, [pc, #160]	@ (8007b30 <HAL_TIM_PWM_Start_DMA+0x430>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d022      	beq.n	8007ad8 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a9a:	d01d      	beq.n	8007ad8 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a29      	ldr	r2, [pc, #164]	@ (8007b48 <HAL_TIM_PWM_Start_DMA+0x448>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d018      	beq.n	8007ad8 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a28      	ldr	r2, [pc, #160]	@ (8007b4c <HAL_TIM_PWM_Start_DMA+0x44c>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d013      	beq.n	8007ad8 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a26      	ldr	r2, [pc, #152]	@ (8007b50 <HAL_TIM_PWM_Start_DMA+0x450>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d00e      	beq.n	8007ad8 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a1d      	ldr	r2, [pc, #116]	@ (8007b34 <HAL_TIM_PWM_Start_DMA+0x434>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d009      	beq.n	8007ad8 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a1b      	ldr	r2, [pc, #108]	@ (8007b38 <HAL_TIM_PWM_Start_DMA+0x438>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d004      	beq.n	8007ad8 <HAL_TIM_PWM_Start_DMA+0x3d8>
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a1c      	ldr	r2, [pc, #112]	@ (8007b44 <HAL_TIM_PWM_Start_DMA+0x444>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d115      	bne.n	8007b04 <HAL_TIM_PWM_Start_DMA+0x404>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	689a      	ldr	r2, [r3, #8]
 8007ade:	4b1d      	ldr	r3, [pc, #116]	@ (8007b54 <HAL_TIM_PWM_Start_DMA+0x454>)
 8007ae0:	4013      	ands	r3, r2
 8007ae2:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	2b06      	cmp	r3, #6
 8007ae8:	d015      	beq.n	8007b16 <HAL_TIM_PWM_Start_DMA+0x416>
 8007aea:	693b      	ldr	r3, [r7, #16]
 8007aec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007af0:	d011      	beq.n	8007b16 <HAL_TIM_PWM_Start_DMA+0x416>
      {
        __HAL_TIM_ENABLE(htim);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	681a      	ldr	r2, [r3, #0]
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f042 0201 	orr.w	r2, r2, #1
 8007b00:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b02:	e008      	b.n	8007b16 <HAL_TIM_PWM_Start_DMA+0x416>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	681a      	ldr	r2, [r3, #0]
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f042 0201 	orr.w	r2, r2, #1
 8007b12:	601a      	str	r2, [r3, #0]
 8007b14:	e000      	b.n	8007b18 <HAL_TIM_PWM_Start_DMA+0x418>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b16:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8007b18:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3718      	adds	r7, #24
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
 8007b22:	bf00      	nop
 8007b24:	0800845f 	.word	0x0800845f
 8007b28:	08008507 	.word	0x08008507
 8007b2c:	080083cd 	.word	0x080083cd
 8007b30:	40012c00 	.word	0x40012c00
 8007b34:	40013400 	.word	0x40013400
 8007b38:	40014000 	.word	0x40014000
 8007b3c:	40014400 	.word	0x40014400
 8007b40:	40014800 	.word	0x40014800
 8007b44:	40015000 	.word	0x40015000
 8007b48:	40000400 	.word	0x40000400
 8007b4c:	40000800 	.word	0x40000800
 8007b50:	40000c00 	.word	0x40000c00
 8007b54:	00010007 	.word	0x00010007

08007b58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b084      	sub	sp, #16
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	68db      	ldr	r3, [r3, #12]
 8007b66:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	691b      	ldr	r3, [r3, #16]
 8007b6e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	f003 0302 	and.w	r3, r3, #2
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d020      	beq.n	8007bbc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	f003 0302 	and.w	r3, r3, #2
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d01b      	beq.n	8007bbc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f06f 0202 	mvn.w	r2, #2
 8007b8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2201      	movs	r2, #1
 8007b92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	699b      	ldr	r3, [r3, #24]
 8007b9a:	f003 0303 	and.w	r3, r3, #3
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d003      	beq.n	8007baa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 fbe0 	bl	8008368 <HAL_TIM_IC_CaptureCallback>
 8007ba8:	e005      	b.n	8007bb6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 fbd2 	bl	8008354 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f000 fbe3 	bl	800837c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	f003 0304 	and.w	r3, r3, #4
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d020      	beq.n	8007c08 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	f003 0304 	and.w	r3, r3, #4
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d01b      	beq.n	8007c08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f06f 0204 	mvn.w	r2, #4
 8007bd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2202      	movs	r2, #2
 8007bde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	699b      	ldr	r3, [r3, #24]
 8007be6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d003      	beq.n	8007bf6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 fbba 	bl	8008368 <HAL_TIM_IC_CaptureCallback>
 8007bf4:	e005      	b.n	8007c02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 fbac 	bl	8008354 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f000 fbbd 	bl	800837c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2200      	movs	r2, #0
 8007c06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	f003 0308 	and.w	r3, r3, #8
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d020      	beq.n	8007c54 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	f003 0308 	and.w	r3, r3, #8
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d01b      	beq.n	8007c54 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f06f 0208 	mvn.w	r2, #8
 8007c24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2204      	movs	r2, #4
 8007c2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	69db      	ldr	r3, [r3, #28]
 8007c32:	f003 0303 	and.w	r3, r3, #3
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d003      	beq.n	8007c42 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f000 fb94 	bl	8008368 <HAL_TIM_IC_CaptureCallback>
 8007c40:	e005      	b.n	8007c4e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 fb86 	bl	8008354 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f000 fb97 	bl	800837c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	f003 0310 	and.w	r3, r3, #16
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d020      	beq.n	8007ca0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f003 0310 	and.w	r3, r3, #16
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d01b      	beq.n	8007ca0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f06f 0210 	mvn.w	r2, #16
 8007c70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2208      	movs	r2, #8
 8007c76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	69db      	ldr	r3, [r3, #28]
 8007c7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d003      	beq.n	8007c8e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f000 fb6e 	bl	8008368 <HAL_TIM_IC_CaptureCallback>
 8007c8c:	e005      	b.n	8007c9a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f000 fb60 	bl	8008354 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f000 fb71 	bl	800837c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	f003 0301 	and.w	r3, r3, #1
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d00c      	beq.n	8007cc4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	f003 0301 	and.w	r3, r3, #1
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d007      	beq.n	8007cc4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f06f 0201 	mvn.w	r2, #1
 8007cbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 fb3e 	bl	8008340 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d104      	bne.n	8007cd8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d00c      	beq.n	8007cf2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d007      	beq.n	8007cf2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007cea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f001 fa13 	bl	8009118 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d00c      	beq.n	8007d16 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d007      	beq.n	8007d16 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007d0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f001 fa0b 	bl	800912c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d00c      	beq.n	8007d3a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d007      	beq.n	8007d3a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007d32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f000 fb35 	bl	80083a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	f003 0320 	and.w	r3, r3, #32
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d00c      	beq.n	8007d5e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f003 0320 	and.w	r3, r3, #32
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d007      	beq.n	8007d5e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f06f 0220 	mvn.w	r2, #32
 8007d56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f001 f9d3 	bl	8009104 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d00c      	beq.n	8007d82 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d007      	beq.n	8007d82 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8007d7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f001 f9df 	bl	8009140 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d00c      	beq.n	8007da6 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d007      	beq.n	8007da6 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8007d9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f001 f9d7 	bl	8009154 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d00c      	beq.n	8007dca <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d007      	beq.n	8007dca <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8007dc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f001 f9cf 	bl	8009168 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d00c      	beq.n	8007dee <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d007      	beq.n	8007dee <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8007de6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f001 f9c7 	bl	800917c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007dee:	bf00      	nop
 8007df0:	3710      	adds	r7, #16
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
	...

08007df8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b086      	sub	sp, #24
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	60f8      	str	r0, [r7, #12]
 8007e00:	60b9      	str	r1, [r7, #8]
 8007e02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e04:	2300      	movs	r3, #0
 8007e06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e0e:	2b01      	cmp	r3, #1
 8007e10:	d101      	bne.n	8007e16 <HAL_TIM_OC_ConfigChannel+0x1e>
 8007e12:	2302      	movs	r3, #2
 8007e14:	e066      	b.n	8007ee4 <HAL_TIM_OC_ConfigChannel+0xec>
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2201      	movs	r2, #1
 8007e1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2b14      	cmp	r3, #20
 8007e22:	d857      	bhi.n	8007ed4 <HAL_TIM_OC_ConfigChannel+0xdc>
 8007e24:	a201      	add	r2, pc, #4	@ (adr r2, 8007e2c <HAL_TIM_OC_ConfigChannel+0x34>)
 8007e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e2a:	bf00      	nop
 8007e2c:	08007e81 	.word	0x08007e81
 8007e30:	08007ed5 	.word	0x08007ed5
 8007e34:	08007ed5 	.word	0x08007ed5
 8007e38:	08007ed5 	.word	0x08007ed5
 8007e3c:	08007e8f 	.word	0x08007e8f
 8007e40:	08007ed5 	.word	0x08007ed5
 8007e44:	08007ed5 	.word	0x08007ed5
 8007e48:	08007ed5 	.word	0x08007ed5
 8007e4c:	08007e9d 	.word	0x08007e9d
 8007e50:	08007ed5 	.word	0x08007ed5
 8007e54:	08007ed5 	.word	0x08007ed5
 8007e58:	08007ed5 	.word	0x08007ed5
 8007e5c:	08007eab 	.word	0x08007eab
 8007e60:	08007ed5 	.word	0x08007ed5
 8007e64:	08007ed5 	.word	0x08007ed5
 8007e68:	08007ed5 	.word	0x08007ed5
 8007e6c:	08007eb9 	.word	0x08007eb9
 8007e70:	08007ed5 	.word	0x08007ed5
 8007e74:	08007ed5 	.word	0x08007ed5
 8007e78:	08007ed5 	.word	0x08007ed5
 8007e7c:	08007ec7 	.word	0x08007ec7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	68b9      	ldr	r1, [r7, #8]
 8007e86:	4618      	mov	r0, r3
 8007e88:	f000 fc26 	bl	80086d8 <TIM_OC1_SetConfig>
      break;
 8007e8c:	e025      	b.n	8007eda <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	68b9      	ldr	r1, [r7, #8]
 8007e94:	4618      	mov	r0, r3
 8007e96:	f000 fcb9 	bl	800880c <TIM_OC2_SetConfig>
      break;
 8007e9a:	e01e      	b.n	8007eda <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	68b9      	ldr	r1, [r7, #8]
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f000 fd46 	bl	8008934 <TIM_OC3_SetConfig>
      break;
 8007ea8:	e017      	b.n	8007eda <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	68b9      	ldr	r1, [r7, #8]
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f000 fdd1 	bl	8008a58 <TIM_OC4_SetConfig>
      break;
 8007eb6:	e010      	b.n	8007eda <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	68b9      	ldr	r1, [r7, #8]
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f000 fe5e 	bl	8008b80 <TIM_OC5_SetConfig>
      break;
 8007ec4:	e009      	b.n	8007eda <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	68b9      	ldr	r1, [r7, #8]
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f000 fec1 	bl	8008c54 <TIM_OC6_SetConfig>
      break;
 8007ed2:	e002      	b.n	8007eda <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	75fb      	strb	r3, [r7, #23]
      break;
 8007ed8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2200      	movs	r2, #0
 8007ede:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007ee2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3718      	adds	r7, #24
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b086      	sub	sp, #24
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	60f8      	str	r0, [r7, #12]
 8007ef4:	60b9      	str	r1, [r7, #8]
 8007ef6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f02:	2b01      	cmp	r3, #1
 8007f04:	d101      	bne.n	8007f0a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007f06:	2302      	movs	r3, #2
 8007f08:	e0ff      	b.n	800810a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2b14      	cmp	r3, #20
 8007f16:	f200 80f0 	bhi.w	80080fa <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007f1a:	a201      	add	r2, pc, #4	@ (adr r2, 8007f20 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f20:	08007f75 	.word	0x08007f75
 8007f24:	080080fb 	.word	0x080080fb
 8007f28:	080080fb 	.word	0x080080fb
 8007f2c:	080080fb 	.word	0x080080fb
 8007f30:	08007fb5 	.word	0x08007fb5
 8007f34:	080080fb 	.word	0x080080fb
 8007f38:	080080fb 	.word	0x080080fb
 8007f3c:	080080fb 	.word	0x080080fb
 8007f40:	08007ff7 	.word	0x08007ff7
 8007f44:	080080fb 	.word	0x080080fb
 8007f48:	080080fb 	.word	0x080080fb
 8007f4c:	080080fb 	.word	0x080080fb
 8007f50:	08008037 	.word	0x08008037
 8007f54:	080080fb 	.word	0x080080fb
 8007f58:	080080fb 	.word	0x080080fb
 8007f5c:	080080fb 	.word	0x080080fb
 8007f60:	08008079 	.word	0x08008079
 8007f64:	080080fb 	.word	0x080080fb
 8007f68:	080080fb 	.word	0x080080fb
 8007f6c:	080080fb 	.word	0x080080fb
 8007f70:	080080b9 	.word	0x080080b9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	68b9      	ldr	r1, [r7, #8]
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f000 fbac 	bl	80086d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	699a      	ldr	r2, [r3, #24]
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f042 0208 	orr.w	r2, r2, #8
 8007f8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	699a      	ldr	r2, [r3, #24]
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f022 0204 	bic.w	r2, r2, #4
 8007f9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	6999      	ldr	r1, [r3, #24]
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	691a      	ldr	r2, [r3, #16]
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	430a      	orrs	r2, r1
 8007fb0:	619a      	str	r2, [r3, #24]
      break;
 8007fb2:	e0a5      	b.n	8008100 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	68b9      	ldr	r1, [r7, #8]
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f000 fc26 	bl	800880c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	699a      	ldr	r2, [r3, #24]
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007fce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	699a      	ldr	r2, [r3, #24]
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007fde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	6999      	ldr	r1, [r3, #24]
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	691b      	ldr	r3, [r3, #16]
 8007fea:	021a      	lsls	r2, r3, #8
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	430a      	orrs	r2, r1
 8007ff2:	619a      	str	r2, [r3, #24]
      break;
 8007ff4:	e084      	b.n	8008100 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	68b9      	ldr	r1, [r7, #8]
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f000 fc99 	bl	8008934 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	69da      	ldr	r2, [r3, #28]
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f042 0208 	orr.w	r2, r2, #8
 8008010:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	69da      	ldr	r2, [r3, #28]
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f022 0204 	bic.w	r2, r2, #4
 8008020:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	69d9      	ldr	r1, [r3, #28]
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	691a      	ldr	r2, [r3, #16]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	430a      	orrs	r2, r1
 8008032:	61da      	str	r2, [r3, #28]
      break;
 8008034:	e064      	b.n	8008100 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	68b9      	ldr	r1, [r7, #8]
 800803c:	4618      	mov	r0, r3
 800803e:	f000 fd0b 	bl	8008a58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	69da      	ldr	r2, [r3, #28]
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008050:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	69da      	ldr	r2, [r3, #28]
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008060:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	69d9      	ldr	r1, [r3, #28]
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	691b      	ldr	r3, [r3, #16]
 800806c:	021a      	lsls	r2, r3, #8
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	430a      	orrs	r2, r1
 8008074:	61da      	str	r2, [r3, #28]
      break;
 8008076:	e043      	b.n	8008100 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	68b9      	ldr	r1, [r7, #8]
 800807e:	4618      	mov	r0, r3
 8008080:	f000 fd7e 	bl	8008b80 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f042 0208 	orr.w	r2, r2, #8
 8008092:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f022 0204 	bic.w	r2, r2, #4
 80080a2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	691a      	ldr	r2, [r3, #16]
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	430a      	orrs	r2, r1
 80080b4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80080b6:	e023      	b.n	8008100 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	68b9      	ldr	r1, [r7, #8]
 80080be:	4618      	mov	r0, r3
 80080c0:	f000 fdc8 	bl	8008c54 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80080d2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80080e2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	691b      	ldr	r3, [r3, #16]
 80080ee:	021a      	lsls	r2, r3, #8
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	430a      	orrs	r2, r1
 80080f6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80080f8:	e002      	b.n	8008100 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80080fa:	2301      	movs	r3, #1
 80080fc:	75fb      	strb	r3, [r7, #23]
      break;
 80080fe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2200      	movs	r2, #0
 8008104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008108:	7dfb      	ldrb	r3, [r7, #23]
}
 800810a:	4618      	mov	r0, r3
 800810c:	3718      	adds	r7, #24
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}
 8008112:	bf00      	nop

08008114 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b084      	sub	sp, #16
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800811e:	2300      	movs	r3, #0
 8008120:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008128:	2b01      	cmp	r3, #1
 800812a:	d101      	bne.n	8008130 <HAL_TIM_ConfigClockSource+0x1c>
 800812c:	2302      	movs	r3, #2
 800812e:	e0f6      	b.n	800831e <HAL_TIM_ConfigClockSource+0x20a>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2201      	movs	r2, #1
 8008134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2202      	movs	r2, #2
 800813c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	689b      	ldr	r3, [r3, #8]
 8008146:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800814e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008152:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800815a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	68ba      	ldr	r2, [r7, #8]
 8008162:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a6f      	ldr	r2, [pc, #444]	@ (8008328 <HAL_TIM_ConfigClockSource+0x214>)
 800816a:	4293      	cmp	r3, r2
 800816c:	f000 80c1 	beq.w	80082f2 <HAL_TIM_ConfigClockSource+0x1de>
 8008170:	4a6d      	ldr	r2, [pc, #436]	@ (8008328 <HAL_TIM_ConfigClockSource+0x214>)
 8008172:	4293      	cmp	r3, r2
 8008174:	f200 80c6 	bhi.w	8008304 <HAL_TIM_ConfigClockSource+0x1f0>
 8008178:	4a6c      	ldr	r2, [pc, #432]	@ (800832c <HAL_TIM_ConfigClockSource+0x218>)
 800817a:	4293      	cmp	r3, r2
 800817c:	f000 80b9 	beq.w	80082f2 <HAL_TIM_ConfigClockSource+0x1de>
 8008180:	4a6a      	ldr	r2, [pc, #424]	@ (800832c <HAL_TIM_ConfigClockSource+0x218>)
 8008182:	4293      	cmp	r3, r2
 8008184:	f200 80be 	bhi.w	8008304 <HAL_TIM_ConfigClockSource+0x1f0>
 8008188:	4a69      	ldr	r2, [pc, #420]	@ (8008330 <HAL_TIM_ConfigClockSource+0x21c>)
 800818a:	4293      	cmp	r3, r2
 800818c:	f000 80b1 	beq.w	80082f2 <HAL_TIM_ConfigClockSource+0x1de>
 8008190:	4a67      	ldr	r2, [pc, #412]	@ (8008330 <HAL_TIM_ConfigClockSource+0x21c>)
 8008192:	4293      	cmp	r3, r2
 8008194:	f200 80b6 	bhi.w	8008304 <HAL_TIM_ConfigClockSource+0x1f0>
 8008198:	4a66      	ldr	r2, [pc, #408]	@ (8008334 <HAL_TIM_ConfigClockSource+0x220>)
 800819a:	4293      	cmp	r3, r2
 800819c:	f000 80a9 	beq.w	80082f2 <HAL_TIM_ConfigClockSource+0x1de>
 80081a0:	4a64      	ldr	r2, [pc, #400]	@ (8008334 <HAL_TIM_ConfigClockSource+0x220>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	f200 80ae 	bhi.w	8008304 <HAL_TIM_ConfigClockSource+0x1f0>
 80081a8:	4a63      	ldr	r2, [pc, #396]	@ (8008338 <HAL_TIM_ConfigClockSource+0x224>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	f000 80a1 	beq.w	80082f2 <HAL_TIM_ConfigClockSource+0x1de>
 80081b0:	4a61      	ldr	r2, [pc, #388]	@ (8008338 <HAL_TIM_ConfigClockSource+0x224>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	f200 80a6 	bhi.w	8008304 <HAL_TIM_ConfigClockSource+0x1f0>
 80081b8:	4a60      	ldr	r2, [pc, #384]	@ (800833c <HAL_TIM_ConfigClockSource+0x228>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	f000 8099 	beq.w	80082f2 <HAL_TIM_ConfigClockSource+0x1de>
 80081c0:	4a5e      	ldr	r2, [pc, #376]	@ (800833c <HAL_TIM_ConfigClockSource+0x228>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	f200 809e 	bhi.w	8008304 <HAL_TIM_ConfigClockSource+0x1f0>
 80081c8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80081cc:	f000 8091 	beq.w	80082f2 <HAL_TIM_ConfigClockSource+0x1de>
 80081d0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80081d4:	f200 8096 	bhi.w	8008304 <HAL_TIM_ConfigClockSource+0x1f0>
 80081d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80081dc:	f000 8089 	beq.w	80082f2 <HAL_TIM_ConfigClockSource+0x1de>
 80081e0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80081e4:	f200 808e 	bhi.w	8008304 <HAL_TIM_ConfigClockSource+0x1f0>
 80081e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80081ec:	d03e      	beq.n	800826c <HAL_TIM_ConfigClockSource+0x158>
 80081ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80081f2:	f200 8087 	bhi.w	8008304 <HAL_TIM_ConfigClockSource+0x1f0>
 80081f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081fa:	f000 8086 	beq.w	800830a <HAL_TIM_ConfigClockSource+0x1f6>
 80081fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008202:	d87f      	bhi.n	8008304 <HAL_TIM_ConfigClockSource+0x1f0>
 8008204:	2b70      	cmp	r3, #112	@ 0x70
 8008206:	d01a      	beq.n	800823e <HAL_TIM_ConfigClockSource+0x12a>
 8008208:	2b70      	cmp	r3, #112	@ 0x70
 800820a:	d87b      	bhi.n	8008304 <HAL_TIM_ConfigClockSource+0x1f0>
 800820c:	2b60      	cmp	r3, #96	@ 0x60
 800820e:	d050      	beq.n	80082b2 <HAL_TIM_ConfigClockSource+0x19e>
 8008210:	2b60      	cmp	r3, #96	@ 0x60
 8008212:	d877      	bhi.n	8008304 <HAL_TIM_ConfigClockSource+0x1f0>
 8008214:	2b50      	cmp	r3, #80	@ 0x50
 8008216:	d03c      	beq.n	8008292 <HAL_TIM_ConfigClockSource+0x17e>
 8008218:	2b50      	cmp	r3, #80	@ 0x50
 800821a:	d873      	bhi.n	8008304 <HAL_TIM_ConfigClockSource+0x1f0>
 800821c:	2b40      	cmp	r3, #64	@ 0x40
 800821e:	d058      	beq.n	80082d2 <HAL_TIM_ConfigClockSource+0x1be>
 8008220:	2b40      	cmp	r3, #64	@ 0x40
 8008222:	d86f      	bhi.n	8008304 <HAL_TIM_ConfigClockSource+0x1f0>
 8008224:	2b30      	cmp	r3, #48	@ 0x30
 8008226:	d064      	beq.n	80082f2 <HAL_TIM_ConfigClockSource+0x1de>
 8008228:	2b30      	cmp	r3, #48	@ 0x30
 800822a:	d86b      	bhi.n	8008304 <HAL_TIM_ConfigClockSource+0x1f0>
 800822c:	2b20      	cmp	r3, #32
 800822e:	d060      	beq.n	80082f2 <HAL_TIM_ConfigClockSource+0x1de>
 8008230:	2b20      	cmp	r3, #32
 8008232:	d867      	bhi.n	8008304 <HAL_TIM_ConfigClockSource+0x1f0>
 8008234:	2b00      	cmp	r3, #0
 8008236:	d05c      	beq.n	80082f2 <HAL_TIM_ConfigClockSource+0x1de>
 8008238:	2b10      	cmp	r3, #16
 800823a:	d05a      	beq.n	80082f2 <HAL_TIM_ConfigClockSource+0x1de>
 800823c:	e062      	b.n	8008304 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800824e:	f000 fde9 	bl	8008e24 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	689b      	ldr	r3, [r3, #8]
 8008258:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008260:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	68ba      	ldr	r2, [r7, #8]
 8008268:	609a      	str	r2, [r3, #8]
      break;
 800826a:	e04f      	b.n	800830c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800827c:	f000 fdd2 	bl	8008e24 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	689a      	ldr	r2, [r3, #8]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800828e:	609a      	str	r2, [r3, #8]
      break;
 8008290:	e03c      	b.n	800830c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800829e:	461a      	mov	r2, r3
 80082a0:	f000 fd44 	bl	8008d2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	2150      	movs	r1, #80	@ 0x50
 80082aa:	4618      	mov	r0, r3
 80082ac:	f000 fd9d 	bl	8008dea <TIM_ITRx_SetConfig>
      break;
 80082b0:	e02c      	b.n	800830c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80082be:	461a      	mov	r2, r3
 80082c0:	f000 fd63 	bl	8008d8a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	2160      	movs	r1, #96	@ 0x60
 80082ca:	4618      	mov	r0, r3
 80082cc:	f000 fd8d 	bl	8008dea <TIM_ITRx_SetConfig>
      break;
 80082d0:	e01c      	b.n	800830c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80082de:	461a      	mov	r2, r3
 80082e0:	f000 fd24 	bl	8008d2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	2140      	movs	r1, #64	@ 0x40
 80082ea:	4618      	mov	r0, r3
 80082ec:	f000 fd7d 	bl	8008dea <TIM_ITRx_SetConfig>
      break;
 80082f0:	e00c      	b.n	800830c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681a      	ldr	r2, [r3, #0]
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4619      	mov	r1, r3
 80082fc:	4610      	mov	r0, r2
 80082fe:	f000 fd74 	bl	8008dea <TIM_ITRx_SetConfig>
      break;
 8008302:	e003      	b.n	800830c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8008304:	2301      	movs	r3, #1
 8008306:	73fb      	strb	r3, [r7, #15]
      break;
 8008308:	e000      	b.n	800830c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800830a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2201      	movs	r2, #1
 8008310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2200      	movs	r2, #0
 8008318:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800831c:	7bfb      	ldrb	r3, [r7, #15]
}
 800831e:	4618      	mov	r0, r3
 8008320:	3710      	adds	r7, #16
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
 8008326:	bf00      	nop
 8008328:	00100070 	.word	0x00100070
 800832c:	00100060 	.word	0x00100060
 8008330:	00100050 	.word	0x00100050
 8008334:	00100040 	.word	0x00100040
 8008338:	00100030 	.word	0x00100030
 800833c:	00100020 	.word	0x00100020

08008340 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008340:	b480      	push	{r7}
 8008342:	b083      	sub	sp, #12
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008348:	bf00      	nop
 800834a:	370c      	adds	r7, #12
 800834c:	46bd      	mov	sp, r7
 800834e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008352:	4770      	bx	lr

08008354 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008354:	b480      	push	{r7}
 8008356:	b083      	sub	sp, #12
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800835c:	bf00      	nop
 800835e:	370c      	adds	r7, #12
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr

08008368 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008368:	b480      	push	{r7}
 800836a:	b083      	sub	sp, #12
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008370:	bf00      	nop
 8008372:	370c      	adds	r7, #12
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr

0800837c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800837c:	b480      	push	{r7}
 800837e:	b083      	sub	sp, #12
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008384:	bf00      	nop
 8008386:	370c      	adds	r7, #12
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr

08008390 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008390:	b480      	push	{r7}
 8008392:	b083      	sub	sp, #12
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008398:	bf00      	nop
 800839a:	370c      	adds	r7, #12
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr

080083a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b083      	sub	sp, #12
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80083ac:	bf00      	nop
 80083ae:	370c      	adds	r7, #12
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr

080083b8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b083      	sub	sp, #12
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80083c0:	bf00      	nop
 80083c2:	370c      	adds	r7, #12
 80083c4:	46bd      	mov	sp, r7
 80083c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ca:	4770      	bx	lr

080083cc <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b084      	sub	sp, #16
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083d8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083de:	687a      	ldr	r2, [r7, #4]
 80083e0:	429a      	cmp	r2, r3
 80083e2:	d107      	bne.n	80083f4 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2201      	movs	r2, #1
 80083e8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	2201      	movs	r2, #1
 80083ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80083f2:	e02a      	b.n	800844a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083f8:	687a      	ldr	r2, [r7, #4]
 80083fa:	429a      	cmp	r2, r3
 80083fc:	d107      	bne.n	800840e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2202      	movs	r2, #2
 8008402:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2201      	movs	r2, #1
 8008408:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800840c:	e01d      	b.n	800844a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008412:	687a      	ldr	r2, [r7, #4]
 8008414:	429a      	cmp	r2, r3
 8008416:	d107      	bne.n	8008428 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2204      	movs	r2, #4
 800841c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	2201      	movs	r2, #1
 8008422:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008426:	e010      	b.n	800844a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800842c:	687a      	ldr	r2, [r7, #4]
 800842e:	429a      	cmp	r2, r3
 8008430:	d107      	bne.n	8008442 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2208      	movs	r2, #8
 8008436:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2201      	movs	r2, #1
 800843c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008440:	e003      	b.n	800844a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2201      	movs	r2, #1
 8008446:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800844a:	68f8      	ldr	r0, [r7, #12]
 800844c:	f7ff ffb4 	bl	80083b8 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2200      	movs	r2, #0
 8008454:	771a      	strb	r2, [r3, #28]
}
 8008456:	bf00      	nop
 8008458:	3710      	adds	r7, #16
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}

0800845e <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800845e:	b580      	push	{r7, lr}
 8008460:	b084      	sub	sp, #16
 8008462:	af00      	add	r7, sp, #0
 8008464:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800846a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008470:	687a      	ldr	r2, [r7, #4]
 8008472:	429a      	cmp	r2, r3
 8008474:	d10b      	bne.n	800848e <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2201      	movs	r2, #1
 800847a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	69db      	ldr	r3, [r3, #28]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d136      	bne.n	80084f2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2201      	movs	r2, #1
 8008488:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800848c:	e031      	b.n	80084f2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008492:	687a      	ldr	r2, [r7, #4]
 8008494:	429a      	cmp	r2, r3
 8008496:	d10b      	bne.n	80084b0 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2202      	movs	r2, #2
 800849c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	69db      	ldr	r3, [r3, #28]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d125      	bne.n	80084f2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	2201      	movs	r2, #1
 80084aa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80084ae:	e020      	b.n	80084f2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084b4:	687a      	ldr	r2, [r7, #4]
 80084b6:	429a      	cmp	r2, r3
 80084b8:	d10b      	bne.n	80084d2 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	2204      	movs	r2, #4
 80084be:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	69db      	ldr	r3, [r3, #28]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d114      	bne.n	80084f2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	2201      	movs	r2, #1
 80084cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80084d0:	e00f      	b.n	80084f2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084d6:	687a      	ldr	r2, [r7, #4]
 80084d8:	429a      	cmp	r2, r3
 80084da:	d10a      	bne.n	80084f2 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	2208      	movs	r2, #8
 80084e0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	69db      	ldr	r3, [r3, #28]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d103      	bne.n	80084f2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	2201      	movs	r2, #1
 80084ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084f2:	68f8      	ldr	r0, [r7, #12]
 80084f4:	f7ff ff42 	bl	800837c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	2200      	movs	r2, #0
 80084fc:	771a      	strb	r2, [r3, #28]
}
 80084fe:	bf00      	nop
 8008500:	3710      	adds	r7, #16
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}

08008506 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008506:	b580      	push	{r7, lr}
 8008508:	b084      	sub	sp, #16
 800850a:	af00      	add	r7, sp, #0
 800850c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008512:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008518:	687a      	ldr	r2, [r7, #4]
 800851a:	429a      	cmp	r2, r3
 800851c:	d103      	bne.n	8008526 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2201      	movs	r2, #1
 8008522:	771a      	strb	r2, [r3, #28]
 8008524:	e019      	b.n	800855a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800852a:	687a      	ldr	r2, [r7, #4]
 800852c:	429a      	cmp	r2, r3
 800852e:	d103      	bne.n	8008538 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	2202      	movs	r2, #2
 8008534:	771a      	strb	r2, [r3, #28]
 8008536:	e010      	b.n	800855a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800853c:	687a      	ldr	r2, [r7, #4]
 800853e:	429a      	cmp	r2, r3
 8008540:	d103      	bne.n	800854a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2204      	movs	r2, #4
 8008546:	771a      	strb	r2, [r3, #28]
 8008548:	e007      	b.n	800855a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800854e:	687a      	ldr	r2, [r7, #4]
 8008550:	429a      	cmp	r2, r3
 8008552:	d102      	bne.n	800855a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	2208      	movs	r2, #8
 8008558:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800855a:	68f8      	ldr	r0, [r7, #12]
 800855c:	f7ff ff18 	bl	8008390 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	2200      	movs	r2, #0
 8008564:	771a      	strb	r2, [r3, #28]
}
 8008566:	bf00      	nop
 8008568:	3710      	adds	r7, #16
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}
	...

08008570 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008570:	b480      	push	{r7}
 8008572:	b085      	sub	sp, #20
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
 8008578:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	4a4c      	ldr	r2, [pc, #304]	@ (80086b4 <TIM_Base_SetConfig+0x144>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d017      	beq.n	80085b8 <TIM_Base_SetConfig+0x48>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800858e:	d013      	beq.n	80085b8 <TIM_Base_SetConfig+0x48>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	4a49      	ldr	r2, [pc, #292]	@ (80086b8 <TIM_Base_SetConfig+0x148>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d00f      	beq.n	80085b8 <TIM_Base_SetConfig+0x48>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	4a48      	ldr	r2, [pc, #288]	@ (80086bc <TIM_Base_SetConfig+0x14c>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d00b      	beq.n	80085b8 <TIM_Base_SetConfig+0x48>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	4a47      	ldr	r2, [pc, #284]	@ (80086c0 <TIM_Base_SetConfig+0x150>)
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d007      	beq.n	80085b8 <TIM_Base_SetConfig+0x48>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	4a46      	ldr	r2, [pc, #280]	@ (80086c4 <TIM_Base_SetConfig+0x154>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d003      	beq.n	80085b8 <TIM_Base_SetConfig+0x48>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	4a45      	ldr	r2, [pc, #276]	@ (80086c8 <TIM_Base_SetConfig+0x158>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d108      	bne.n	80085ca <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	68fa      	ldr	r2, [r7, #12]
 80085c6:	4313      	orrs	r3, r2
 80085c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	4a39      	ldr	r2, [pc, #228]	@ (80086b4 <TIM_Base_SetConfig+0x144>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d023      	beq.n	800861a <TIM_Base_SetConfig+0xaa>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085d8:	d01f      	beq.n	800861a <TIM_Base_SetConfig+0xaa>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	4a36      	ldr	r2, [pc, #216]	@ (80086b8 <TIM_Base_SetConfig+0x148>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d01b      	beq.n	800861a <TIM_Base_SetConfig+0xaa>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	4a35      	ldr	r2, [pc, #212]	@ (80086bc <TIM_Base_SetConfig+0x14c>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d017      	beq.n	800861a <TIM_Base_SetConfig+0xaa>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	4a34      	ldr	r2, [pc, #208]	@ (80086c0 <TIM_Base_SetConfig+0x150>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d013      	beq.n	800861a <TIM_Base_SetConfig+0xaa>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	4a33      	ldr	r2, [pc, #204]	@ (80086c4 <TIM_Base_SetConfig+0x154>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d00f      	beq.n	800861a <TIM_Base_SetConfig+0xaa>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	4a33      	ldr	r2, [pc, #204]	@ (80086cc <TIM_Base_SetConfig+0x15c>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d00b      	beq.n	800861a <TIM_Base_SetConfig+0xaa>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	4a32      	ldr	r2, [pc, #200]	@ (80086d0 <TIM_Base_SetConfig+0x160>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d007      	beq.n	800861a <TIM_Base_SetConfig+0xaa>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	4a31      	ldr	r2, [pc, #196]	@ (80086d4 <TIM_Base_SetConfig+0x164>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d003      	beq.n	800861a <TIM_Base_SetConfig+0xaa>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	4a2c      	ldr	r2, [pc, #176]	@ (80086c8 <TIM_Base_SetConfig+0x158>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d108      	bne.n	800862c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008620:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	68db      	ldr	r3, [r3, #12]
 8008626:	68fa      	ldr	r2, [r7, #12]
 8008628:	4313      	orrs	r3, r2
 800862a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	695b      	ldr	r3, [r3, #20]
 8008636:	4313      	orrs	r3, r2
 8008638:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	68fa      	ldr	r2, [r7, #12]
 800863e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	689a      	ldr	r2, [r3, #8]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	681a      	ldr	r2, [r3, #0]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	4a18      	ldr	r2, [pc, #96]	@ (80086b4 <TIM_Base_SetConfig+0x144>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d013      	beq.n	8008680 <TIM_Base_SetConfig+0x110>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	4a1a      	ldr	r2, [pc, #104]	@ (80086c4 <TIM_Base_SetConfig+0x154>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d00f      	beq.n	8008680 <TIM_Base_SetConfig+0x110>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	4a1a      	ldr	r2, [pc, #104]	@ (80086cc <TIM_Base_SetConfig+0x15c>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d00b      	beq.n	8008680 <TIM_Base_SetConfig+0x110>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	4a19      	ldr	r2, [pc, #100]	@ (80086d0 <TIM_Base_SetConfig+0x160>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d007      	beq.n	8008680 <TIM_Base_SetConfig+0x110>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	4a18      	ldr	r2, [pc, #96]	@ (80086d4 <TIM_Base_SetConfig+0x164>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d003      	beq.n	8008680 <TIM_Base_SetConfig+0x110>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	4a13      	ldr	r2, [pc, #76]	@ (80086c8 <TIM_Base_SetConfig+0x158>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d103      	bne.n	8008688 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	691a      	ldr	r2, [r3, #16]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2201      	movs	r2, #1
 800868c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	691b      	ldr	r3, [r3, #16]
 8008692:	f003 0301 	and.w	r3, r3, #1
 8008696:	2b01      	cmp	r3, #1
 8008698:	d105      	bne.n	80086a6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	691b      	ldr	r3, [r3, #16]
 800869e:	f023 0201 	bic.w	r2, r3, #1
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	611a      	str	r2, [r3, #16]
  }
}
 80086a6:	bf00      	nop
 80086a8:	3714      	adds	r7, #20
 80086aa:	46bd      	mov	sp, r7
 80086ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b0:	4770      	bx	lr
 80086b2:	bf00      	nop
 80086b4:	40012c00 	.word	0x40012c00
 80086b8:	40000400 	.word	0x40000400
 80086bc:	40000800 	.word	0x40000800
 80086c0:	40000c00 	.word	0x40000c00
 80086c4:	40013400 	.word	0x40013400
 80086c8:	40015000 	.word	0x40015000
 80086cc:	40014000 	.word	0x40014000
 80086d0:	40014400 	.word	0x40014400
 80086d4:	40014800 	.word	0x40014800

080086d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80086d8:	b480      	push	{r7}
 80086da:	b087      	sub	sp, #28
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6a1b      	ldr	r3, [r3, #32]
 80086e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6a1b      	ldr	r3, [r3, #32]
 80086ec:	f023 0201 	bic.w	r2, r3, #1
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	699b      	ldr	r3, [r3, #24]
 80086fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008706:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800870a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	f023 0303 	bic.w	r3, r3, #3
 8008712:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	68fa      	ldr	r2, [r7, #12]
 800871a:	4313      	orrs	r3, r2
 800871c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	f023 0302 	bic.w	r3, r3, #2
 8008724:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	689b      	ldr	r3, [r3, #8]
 800872a:	697a      	ldr	r2, [r7, #20]
 800872c:	4313      	orrs	r3, r2
 800872e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	4a30      	ldr	r2, [pc, #192]	@ (80087f4 <TIM_OC1_SetConfig+0x11c>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d013      	beq.n	8008760 <TIM_OC1_SetConfig+0x88>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	4a2f      	ldr	r2, [pc, #188]	@ (80087f8 <TIM_OC1_SetConfig+0x120>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d00f      	beq.n	8008760 <TIM_OC1_SetConfig+0x88>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	4a2e      	ldr	r2, [pc, #184]	@ (80087fc <TIM_OC1_SetConfig+0x124>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d00b      	beq.n	8008760 <TIM_OC1_SetConfig+0x88>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	4a2d      	ldr	r2, [pc, #180]	@ (8008800 <TIM_OC1_SetConfig+0x128>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d007      	beq.n	8008760 <TIM_OC1_SetConfig+0x88>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	4a2c      	ldr	r2, [pc, #176]	@ (8008804 <TIM_OC1_SetConfig+0x12c>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d003      	beq.n	8008760 <TIM_OC1_SetConfig+0x88>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	4a2b      	ldr	r2, [pc, #172]	@ (8008808 <TIM_OC1_SetConfig+0x130>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d10c      	bne.n	800877a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	f023 0308 	bic.w	r3, r3, #8
 8008766:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	68db      	ldr	r3, [r3, #12]
 800876c:	697a      	ldr	r2, [r7, #20]
 800876e:	4313      	orrs	r3, r2
 8008770:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	f023 0304 	bic.w	r3, r3, #4
 8008778:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	4a1d      	ldr	r2, [pc, #116]	@ (80087f4 <TIM_OC1_SetConfig+0x11c>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d013      	beq.n	80087aa <TIM_OC1_SetConfig+0xd2>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	4a1c      	ldr	r2, [pc, #112]	@ (80087f8 <TIM_OC1_SetConfig+0x120>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d00f      	beq.n	80087aa <TIM_OC1_SetConfig+0xd2>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	4a1b      	ldr	r2, [pc, #108]	@ (80087fc <TIM_OC1_SetConfig+0x124>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d00b      	beq.n	80087aa <TIM_OC1_SetConfig+0xd2>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	4a1a      	ldr	r2, [pc, #104]	@ (8008800 <TIM_OC1_SetConfig+0x128>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d007      	beq.n	80087aa <TIM_OC1_SetConfig+0xd2>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	4a19      	ldr	r2, [pc, #100]	@ (8008804 <TIM_OC1_SetConfig+0x12c>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d003      	beq.n	80087aa <TIM_OC1_SetConfig+0xd2>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	4a18      	ldr	r2, [pc, #96]	@ (8008808 <TIM_OC1_SetConfig+0x130>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d111      	bne.n	80087ce <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80087b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80087b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	695b      	ldr	r3, [r3, #20]
 80087be:	693a      	ldr	r2, [r7, #16]
 80087c0:	4313      	orrs	r3, r2
 80087c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	699b      	ldr	r3, [r3, #24]
 80087c8:	693a      	ldr	r2, [r7, #16]
 80087ca:	4313      	orrs	r3, r2
 80087cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	693a      	ldr	r2, [r7, #16]
 80087d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	68fa      	ldr	r2, [r7, #12]
 80087d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	685a      	ldr	r2, [r3, #4]
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	697a      	ldr	r2, [r7, #20]
 80087e6:	621a      	str	r2, [r3, #32]
}
 80087e8:	bf00      	nop
 80087ea:	371c      	adds	r7, #28
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr
 80087f4:	40012c00 	.word	0x40012c00
 80087f8:	40013400 	.word	0x40013400
 80087fc:	40014000 	.word	0x40014000
 8008800:	40014400 	.word	0x40014400
 8008804:	40014800 	.word	0x40014800
 8008808:	40015000 	.word	0x40015000

0800880c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800880c:	b480      	push	{r7}
 800880e:	b087      	sub	sp, #28
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
 8008814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6a1b      	ldr	r3, [r3, #32]
 800881a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6a1b      	ldr	r3, [r3, #32]
 8008820:	f023 0210 	bic.w	r2, r3, #16
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	685b      	ldr	r3, [r3, #4]
 800882c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	699b      	ldr	r3, [r3, #24]
 8008832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800883a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800883e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008846:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	021b      	lsls	r3, r3, #8
 800884e:	68fa      	ldr	r2, [r7, #12]
 8008850:	4313      	orrs	r3, r2
 8008852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	f023 0320 	bic.w	r3, r3, #32
 800885a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	689b      	ldr	r3, [r3, #8]
 8008860:	011b      	lsls	r3, r3, #4
 8008862:	697a      	ldr	r2, [r7, #20]
 8008864:	4313      	orrs	r3, r2
 8008866:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	4a2c      	ldr	r2, [pc, #176]	@ (800891c <TIM_OC2_SetConfig+0x110>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d007      	beq.n	8008880 <TIM_OC2_SetConfig+0x74>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	4a2b      	ldr	r2, [pc, #172]	@ (8008920 <TIM_OC2_SetConfig+0x114>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d003      	beq.n	8008880 <TIM_OC2_SetConfig+0x74>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	4a2a      	ldr	r2, [pc, #168]	@ (8008924 <TIM_OC2_SetConfig+0x118>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d10d      	bne.n	800889c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008880:	697b      	ldr	r3, [r7, #20]
 8008882:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008886:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	68db      	ldr	r3, [r3, #12]
 800888c:	011b      	lsls	r3, r3, #4
 800888e:	697a      	ldr	r2, [r7, #20]
 8008890:	4313      	orrs	r3, r2
 8008892:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800889a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	4a1f      	ldr	r2, [pc, #124]	@ (800891c <TIM_OC2_SetConfig+0x110>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d013      	beq.n	80088cc <TIM_OC2_SetConfig+0xc0>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	4a1e      	ldr	r2, [pc, #120]	@ (8008920 <TIM_OC2_SetConfig+0x114>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d00f      	beq.n	80088cc <TIM_OC2_SetConfig+0xc0>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	4a1e      	ldr	r2, [pc, #120]	@ (8008928 <TIM_OC2_SetConfig+0x11c>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d00b      	beq.n	80088cc <TIM_OC2_SetConfig+0xc0>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	4a1d      	ldr	r2, [pc, #116]	@ (800892c <TIM_OC2_SetConfig+0x120>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d007      	beq.n	80088cc <TIM_OC2_SetConfig+0xc0>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	4a1c      	ldr	r2, [pc, #112]	@ (8008930 <TIM_OC2_SetConfig+0x124>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d003      	beq.n	80088cc <TIM_OC2_SetConfig+0xc0>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	4a17      	ldr	r2, [pc, #92]	@ (8008924 <TIM_OC2_SetConfig+0x118>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d113      	bne.n	80088f4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80088d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80088da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	695b      	ldr	r3, [r3, #20]
 80088e0:	009b      	lsls	r3, r3, #2
 80088e2:	693a      	ldr	r2, [r7, #16]
 80088e4:	4313      	orrs	r3, r2
 80088e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	699b      	ldr	r3, [r3, #24]
 80088ec:	009b      	lsls	r3, r3, #2
 80088ee:	693a      	ldr	r2, [r7, #16]
 80088f0:	4313      	orrs	r3, r2
 80088f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	693a      	ldr	r2, [r7, #16]
 80088f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	68fa      	ldr	r2, [r7, #12]
 80088fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	685a      	ldr	r2, [r3, #4]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	697a      	ldr	r2, [r7, #20]
 800890c:	621a      	str	r2, [r3, #32]
}
 800890e:	bf00      	nop
 8008910:	371c      	adds	r7, #28
 8008912:	46bd      	mov	sp, r7
 8008914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008918:	4770      	bx	lr
 800891a:	bf00      	nop
 800891c:	40012c00 	.word	0x40012c00
 8008920:	40013400 	.word	0x40013400
 8008924:	40015000 	.word	0x40015000
 8008928:	40014000 	.word	0x40014000
 800892c:	40014400 	.word	0x40014400
 8008930:	40014800 	.word	0x40014800

08008934 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008934:	b480      	push	{r7}
 8008936:	b087      	sub	sp, #28
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6a1b      	ldr	r3, [r3, #32]
 8008942:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6a1b      	ldr	r3, [r3, #32]
 8008948:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	685b      	ldr	r3, [r3, #4]
 8008954:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	69db      	ldr	r3, [r3, #28]
 800895a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008962:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008966:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f023 0303 	bic.w	r3, r3, #3
 800896e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	68fa      	ldr	r2, [r7, #12]
 8008976:	4313      	orrs	r3, r2
 8008978:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008980:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	689b      	ldr	r3, [r3, #8]
 8008986:	021b      	lsls	r3, r3, #8
 8008988:	697a      	ldr	r2, [r7, #20]
 800898a:	4313      	orrs	r3, r2
 800898c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	4a2b      	ldr	r2, [pc, #172]	@ (8008a40 <TIM_OC3_SetConfig+0x10c>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d007      	beq.n	80089a6 <TIM_OC3_SetConfig+0x72>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	4a2a      	ldr	r2, [pc, #168]	@ (8008a44 <TIM_OC3_SetConfig+0x110>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d003      	beq.n	80089a6 <TIM_OC3_SetConfig+0x72>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	4a29      	ldr	r2, [pc, #164]	@ (8008a48 <TIM_OC3_SetConfig+0x114>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d10d      	bne.n	80089c2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80089ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	68db      	ldr	r3, [r3, #12]
 80089b2:	021b      	lsls	r3, r3, #8
 80089b4:	697a      	ldr	r2, [r7, #20]
 80089b6:	4313      	orrs	r3, r2
 80089b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80089c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	4a1e      	ldr	r2, [pc, #120]	@ (8008a40 <TIM_OC3_SetConfig+0x10c>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d013      	beq.n	80089f2 <TIM_OC3_SetConfig+0xbe>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	4a1d      	ldr	r2, [pc, #116]	@ (8008a44 <TIM_OC3_SetConfig+0x110>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d00f      	beq.n	80089f2 <TIM_OC3_SetConfig+0xbe>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	4a1d      	ldr	r2, [pc, #116]	@ (8008a4c <TIM_OC3_SetConfig+0x118>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d00b      	beq.n	80089f2 <TIM_OC3_SetConfig+0xbe>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	4a1c      	ldr	r2, [pc, #112]	@ (8008a50 <TIM_OC3_SetConfig+0x11c>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d007      	beq.n	80089f2 <TIM_OC3_SetConfig+0xbe>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	4a1b      	ldr	r2, [pc, #108]	@ (8008a54 <TIM_OC3_SetConfig+0x120>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d003      	beq.n	80089f2 <TIM_OC3_SetConfig+0xbe>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	4a16      	ldr	r2, [pc, #88]	@ (8008a48 <TIM_OC3_SetConfig+0x114>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d113      	bne.n	8008a1a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80089f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008a00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	695b      	ldr	r3, [r3, #20]
 8008a06:	011b      	lsls	r3, r3, #4
 8008a08:	693a      	ldr	r2, [r7, #16]
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	699b      	ldr	r3, [r3, #24]
 8008a12:	011b      	lsls	r3, r3, #4
 8008a14:	693a      	ldr	r2, [r7, #16]
 8008a16:	4313      	orrs	r3, r2
 8008a18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	693a      	ldr	r2, [r7, #16]
 8008a1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	68fa      	ldr	r2, [r7, #12]
 8008a24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	685a      	ldr	r2, [r3, #4]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	697a      	ldr	r2, [r7, #20]
 8008a32:	621a      	str	r2, [r3, #32]
}
 8008a34:	bf00      	nop
 8008a36:	371c      	adds	r7, #28
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3e:	4770      	bx	lr
 8008a40:	40012c00 	.word	0x40012c00
 8008a44:	40013400 	.word	0x40013400
 8008a48:	40015000 	.word	0x40015000
 8008a4c:	40014000 	.word	0x40014000
 8008a50:	40014400 	.word	0x40014400
 8008a54:	40014800 	.word	0x40014800

08008a58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b087      	sub	sp, #28
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
 8008a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6a1b      	ldr	r3, [r3, #32]
 8008a66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6a1b      	ldr	r3, [r3, #32]
 8008a6c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	685b      	ldr	r3, [r3, #4]
 8008a78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	69db      	ldr	r3, [r3, #28]
 8008a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008a86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008a92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	021b      	lsls	r3, r3, #8
 8008a9a:	68fa      	ldr	r2, [r7, #12]
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008aa6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	689b      	ldr	r3, [r3, #8]
 8008aac:	031b      	lsls	r3, r3, #12
 8008aae:	697a      	ldr	r2, [r7, #20]
 8008ab0:	4313      	orrs	r3, r2
 8008ab2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	4a2c      	ldr	r2, [pc, #176]	@ (8008b68 <TIM_OC4_SetConfig+0x110>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d007      	beq.n	8008acc <TIM_OC4_SetConfig+0x74>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	4a2b      	ldr	r2, [pc, #172]	@ (8008b6c <TIM_OC4_SetConfig+0x114>)
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d003      	beq.n	8008acc <TIM_OC4_SetConfig+0x74>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	4a2a      	ldr	r2, [pc, #168]	@ (8008b70 <TIM_OC4_SetConfig+0x118>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d10d      	bne.n	8008ae8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008ad2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	68db      	ldr	r3, [r3, #12]
 8008ad8:	031b      	lsls	r3, r3, #12
 8008ada:	697a      	ldr	r2, [r7, #20]
 8008adc:	4313      	orrs	r3, r2
 8008ade:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008ae6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	4a1f      	ldr	r2, [pc, #124]	@ (8008b68 <TIM_OC4_SetConfig+0x110>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d013      	beq.n	8008b18 <TIM_OC4_SetConfig+0xc0>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	4a1e      	ldr	r2, [pc, #120]	@ (8008b6c <TIM_OC4_SetConfig+0x114>)
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d00f      	beq.n	8008b18 <TIM_OC4_SetConfig+0xc0>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	4a1e      	ldr	r2, [pc, #120]	@ (8008b74 <TIM_OC4_SetConfig+0x11c>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d00b      	beq.n	8008b18 <TIM_OC4_SetConfig+0xc0>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	4a1d      	ldr	r2, [pc, #116]	@ (8008b78 <TIM_OC4_SetConfig+0x120>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d007      	beq.n	8008b18 <TIM_OC4_SetConfig+0xc0>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	4a1c      	ldr	r2, [pc, #112]	@ (8008b7c <TIM_OC4_SetConfig+0x124>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d003      	beq.n	8008b18 <TIM_OC4_SetConfig+0xc0>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	4a17      	ldr	r2, [pc, #92]	@ (8008b70 <TIM_OC4_SetConfig+0x118>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d113      	bne.n	8008b40 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008b1e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008b26:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	695b      	ldr	r3, [r3, #20]
 8008b2c:	019b      	lsls	r3, r3, #6
 8008b2e:	693a      	ldr	r2, [r7, #16]
 8008b30:	4313      	orrs	r3, r2
 8008b32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	699b      	ldr	r3, [r3, #24]
 8008b38:	019b      	lsls	r3, r3, #6
 8008b3a:	693a      	ldr	r2, [r7, #16]
 8008b3c:	4313      	orrs	r3, r2
 8008b3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	693a      	ldr	r2, [r7, #16]
 8008b44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	68fa      	ldr	r2, [r7, #12]
 8008b4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	685a      	ldr	r2, [r3, #4]
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	697a      	ldr	r2, [r7, #20]
 8008b58:	621a      	str	r2, [r3, #32]
}
 8008b5a:	bf00      	nop
 8008b5c:	371c      	adds	r7, #28
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b64:	4770      	bx	lr
 8008b66:	bf00      	nop
 8008b68:	40012c00 	.word	0x40012c00
 8008b6c:	40013400 	.word	0x40013400
 8008b70:	40015000 	.word	0x40015000
 8008b74:	40014000 	.word	0x40014000
 8008b78:	40014400 	.word	0x40014400
 8008b7c:	40014800 	.word	0x40014800

08008b80 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b087      	sub	sp, #28
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6a1b      	ldr	r3, [r3, #32]
 8008b8e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6a1b      	ldr	r3, [r3, #32]
 8008b94:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008bae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008bb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	68fa      	ldr	r2, [r7, #12]
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008bc4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	689b      	ldr	r3, [r3, #8]
 8008bca:	041b      	lsls	r3, r3, #16
 8008bcc:	693a      	ldr	r2, [r7, #16]
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	4a19      	ldr	r2, [pc, #100]	@ (8008c3c <TIM_OC5_SetConfig+0xbc>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d013      	beq.n	8008c02 <TIM_OC5_SetConfig+0x82>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	4a18      	ldr	r2, [pc, #96]	@ (8008c40 <TIM_OC5_SetConfig+0xc0>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d00f      	beq.n	8008c02 <TIM_OC5_SetConfig+0x82>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	4a17      	ldr	r2, [pc, #92]	@ (8008c44 <TIM_OC5_SetConfig+0xc4>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d00b      	beq.n	8008c02 <TIM_OC5_SetConfig+0x82>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	4a16      	ldr	r2, [pc, #88]	@ (8008c48 <TIM_OC5_SetConfig+0xc8>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d007      	beq.n	8008c02 <TIM_OC5_SetConfig+0x82>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	4a15      	ldr	r2, [pc, #84]	@ (8008c4c <TIM_OC5_SetConfig+0xcc>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d003      	beq.n	8008c02 <TIM_OC5_SetConfig+0x82>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	4a14      	ldr	r2, [pc, #80]	@ (8008c50 <TIM_OC5_SetConfig+0xd0>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d109      	bne.n	8008c16 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008c08:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	695b      	ldr	r3, [r3, #20]
 8008c0e:	021b      	lsls	r3, r3, #8
 8008c10:	697a      	ldr	r2, [r7, #20]
 8008c12:	4313      	orrs	r3, r2
 8008c14:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	697a      	ldr	r2, [r7, #20]
 8008c1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	68fa      	ldr	r2, [r7, #12]
 8008c20:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	685a      	ldr	r2, [r3, #4]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	693a      	ldr	r2, [r7, #16]
 8008c2e:	621a      	str	r2, [r3, #32]
}
 8008c30:	bf00      	nop
 8008c32:	371c      	adds	r7, #28
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr
 8008c3c:	40012c00 	.word	0x40012c00
 8008c40:	40013400 	.word	0x40013400
 8008c44:	40014000 	.word	0x40014000
 8008c48:	40014400 	.word	0x40014400
 8008c4c:	40014800 	.word	0x40014800
 8008c50:	40015000 	.word	0x40015000

08008c54 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b087      	sub	sp, #28
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
 8008c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6a1b      	ldr	r3, [r3, #32]
 8008c62:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6a1b      	ldr	r3, [r3, #32]
 8008c68:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008c82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	021b      	lsls	r3, r3, #8
 8008c8e:	68fa      	ldr	r2, [r7, #12]
 8008c90:	4313      	orrs	r3, r2
 8008c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008c9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	689b      	ldr	r3, [r3, #8]
 8008ca0:	051b      	lsls	r3, r3, #20
 8008ca2:	693a      	ldr	r2, [r7, #16]
 8008ca4:	4313      	orrs	r3, r2
 8008ca6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	4a1a      	ldr	r2, [pc, #104]	@ (8008d14 <TIM_OC6_SetConfig+0xc0>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d013      	beq.n	8008cd8 <TIM_OC6_SetConfig+0x84>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	4a19      	ldr	r2, [pc, #100]	@ (8008d18 <TIM_OC6_SetConfig+0xc4>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d00f      	beq.n	8008cd8 <TIM_OC6_SetConfig+0x84>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	4a18      	ldr	r2, [pc, #96]	@ (8008d1c <TIM_OC6_SetConfig+0xc8>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d00b      	beq.n	8008cd8 <TIM_OC6_SetConfig+0x84>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	4a17      	ldr	r2, [pc, #92]	@ (8008d20 <TIM_OC6_SetConfig+0xcc>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d007      	beq.n	8008cd8 <TIM_OC6_SetConfig+0x84>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	4a16      	ldr	r2, [pc, #88]	@ (8008d24 <TIM_OC6_SetConfig+0xd0>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d003      	beq.n	8008cd8 <TIM_OC6_SetConfig+0x84>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	4a15      	ldr	r2, [pc, #84]	@ (8008d28 <TIM_OC6_SetConfig+0xd4>)
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d109      	bne.n	8008cec <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008cde:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	695b      	ldr	r3, [r3, #20]
 8008ce4:	029b      	lsls	r3, r3, #10
 8008ce6:	697a      	ldr	r2, [r7, #20]
 8008ce8:	4313      	orrs	r3, r2
 8008cea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	697a      	ldr	r2, [r7, #20]
 8008cf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	68fa      	ldr	r2, [r7, #12]
 8008cf6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	685a      	ldr	r2, [r3, #4]
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	693a      	ldr	r2, [r7, #16]
 8008d04:	621a      	str	r2, [r3, #32]
}
 8008d06:	bf00      	nop
 8008d08:	371c      	adds	r7, #28
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d10:	4770      	bx	lr
 8008d12:	bf00      	nop
 8008d14:	40012c00 	.word	0x40012c00
 8008d18:	40013400 	.word	0x40013400
 8008d1c:	40014000 	.word	0x40014000
 8008d20:	40014400 	.word	0x40014400
 8008d24:	40014800 	.word	0x40014800
 8008d28:	40015000 	.word	0x40015000

08008d2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b087      	sub	sp, #28
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	60f8      	str	r0, [r7, #12]
 8008d34:	60b9      	str	r1, [r7, #8]
 8008d36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	6a1b      	ldr	r3, [r3, #32]
 8008d3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	6a1b      	ldr	r3, [r3, #32]
 8008d42:	f023 0201 	bic.w	r2, r3, #1
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	699b      	ldr	r3, [r3, #24]
 8008d4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008d50:	693b      	ldr	r3, [r7, #16]
 8008d52:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008d56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	011b      	lsls	r3, r3, #4
 8008d5c:	693a      	ldr	r2, [r7, #16]
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	f023 030a 	bic.w	r3, r3, #10
 8008d68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008d6a:	697a      	ldr	r2, [r7, #20]
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	4313      	orrs	r3, r2
 8008d70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	693a      	ldr	r2, [r7, #16]
 8008d76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	697a      	ldr	r2, [r7, #20]
 8008d7c:	621a      	str	r2, [r3, #32]
}
 8008d7e:	bf00      	nop
 8008d80:	371c      	adds	r7, #28
 8008d82:	46bd      	mov	sp, r7
 8008d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d88:	4770      	bx	lr

08008d8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d8a:	b480      	push	{r7}
 8008d8c:	b087      	sub	sp, #28
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	60f8      	str	r0, [r7, #12]
 8008d92:	60b9      	str	r1, [r7, #8]
 8008d94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	6a1b      	ldr	r3, [r3, #32]
 8008d9a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	6a1b      	ldr	r3, [r3, #32]
 8008da0:	f023 0210 	bic.w	r2, r3, #16
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	699b      	ldr	r3, [r3, #24]
 8008dac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008dae:	693b      	ldr	r3, [r7, #16]
 8008db0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008db4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	031b      	lsls	r3, r3, #12
 8008dba:	693a      	ldr	r2, [r7, #16]
 8008dbc:	4313      	orrs	r3, r2
 8008dbe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008dc6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	011b      	lsls	r3, r3, #4
 8008dcc:	697a      	ldr	r2, [r7, #20]
 8008dce:	4313      	orrs	r3, r2
 8008dd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	693a      	ldr	r2, [r7, #16]
 8008dd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	697a      	ldr	r2, [r7, #20]
 8008ddc:	621a      	str	r2, [r3, #32]
}
 8008dde:	bf00      	nop
 8008de0:	371c      	adds	r7, #28
 8008de2:	46bd      	mov	sp, r7
 8008de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de8:	4770      	bx	lr

08008dea <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008dea:	b480      	push	{r7}
 8008dec:	b085      	sub	sp, #20
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	6078      	str	r0, [r7, #4]
 8008df2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	689b      	ldr	r3, [r3, #8]
 8008df8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008e00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008e06:	683a      	ldr	r2, [r7, #0]
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	4313      	orrs	r3, r2
 8008e0c:	f043 0307 	orr.w	r3, r3, #7
 8008e10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	68fa      	ldr	r2, [r7, #12]
 8008e16:	609a      	str	r2, [r3, #8]
}
 8008e18:	bf00      	nop
 8008e1a:	3714      	adds	r7, #20
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e22:	4770      	bx	lr

08008e24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b087      	sub	sp, #28
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	60f8      	str	r0, [r7, #12]
 8008e2c:	60b9      	str	r1, [r7, #8]
 8008e2e:	607a      	str	r2, [r7, #4]
 8008e30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	689b      	ldr	r3, [r3, #8]
 8008e36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008e3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	021a      	lsls	r2, r3, #8
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	431a      	orrs	r2, r3
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	697a      	ldr	r2, [r7, #20]
 8008e4e:	4313      	orrs	r3, r2
 8008e50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	697a      	ldr	r2, [r7, #20]
 8008e56:	609a      	str	r2, [r3, #8]
}
 8008e58:	bf00      	nop
 8008e5a:	371c      	adds	r7, #28
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e62:	4770      	bx	lr

08008e64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008e64:	b480      	push	{r7}
 8008e66:	b087      	sub	sp, #28
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	60f8      	str	r0, [r7, #12]
 8008e6c:	60b9      	str	r1, [r7, #8]
 8008e6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	f003 031f 	and.w	r3, r3, #31
 8008e76:	2201      	movs	r2, #1
 8008e78:	fa02 f303 	lsl.w	r3, r2, r3
 8008e7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	6a1a      	ldr	r2, [r3, #32]
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	43db      	mvns	r3, r3
 8008e86:	401a      	ands	r2, r3
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	6a1a      	ldr	r2, [r3, #32]
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	f003 031f 	and.w	r3, r3, #31
 8008e96:	6879      	ldr	r1, [r7, #4]
 8008e98:	fa01 f303 	lsl.w	r3, r1, r3
 8008e9c:	431a      	orrs	r2, r3
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	621a      	str	r2, [r3, #32]
}
 8008ea2:	bf00      	nop
 8008ea4:	371c      	adds	r7, #28
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eac:	4770      	bx	lr
	...

08008eb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b085      	sub	sp, #20
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	d101      	bne.n	8008ec8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008ec4:	2302      	movs	r3, #2
 8008ec6:	e074      	b.n	8008fb2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2201      	movs	r2, #1
 8008ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2202      	movs	r2, #2
 8008ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	685b      	ldr	r3, [r3, #4]
 8008ede:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	689b      	ldr	r3, [r3, #8]
 8008ee6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	4a34      	ldr	r2, [pc, #208]	@ (8008fc0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d009      	beq.n	8008f06 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4a33      	ldr	r2, [pc, #204]	@ (8008fc4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d004      	beq.n	8008f06 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	4a31      	ldr	r2, [pc, #196]	@ (8008fc8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d108      	bne.n	8008f18 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008f0c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	685b      	ldr	r3, [r3, #4]
 8008f12:	68fa      	ldr	r2, [r7, #12]
 8008f14:	4313      	orrs	r3, r2
 8008f16:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008f1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	68fa      	ldr	r2, [r7, #12]
 8008f2a:	4313      	orrs	r3, r2
 8008f2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	68fa      	ldr	r2, [r7, #12]
 8008f34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	4a21      	ldr	r2, [pc, #132]	@ (8008fc0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d022      	beq.n	8008f86 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f48:	d01d      	beq.n	8008f86 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	4a1f      	ldr	r2, [pc, #124]	@ (8008fcc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d018      	beq.n	8008f86 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	4a1d      	ldr	r2, [pc, #116]	@ (8008fd0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d013      	beq.n	8008f86 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	4a1c      	ldr	r2, [pc, #112]	@ (8008fd4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d00e      	beq.n	8008f86 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	4a15      	ldr	r2, [pc, #84]	@ (8008fc4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d009      	beq.n	8008f86 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4a18      	ldr	r2, [pc, #96]	@ (8008fd8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d004      	beq.n	8008f86 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4a11      	ldr	r2, [pc, #68]	@ (8008fc8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d10c      	bne.n	8008fa0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008f8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	689b      	ldr	r3, [r3, #8]
 8008f92:	68ba      	ldr	r2, [r7, #8]
 8008f94:	4313      	orrs	r3, r2
 8008f96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	68ba      	ldr	r2, [r7, #8]
 8008f9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2200      	movs	r2, #0
 8008fac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008fb0:	2300      	movs	r3, #0
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3714      	adds	r7, #20
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbc:	4770      	bx	lr
 8008fbe:	bf00      	nop
 8008fc0:	40012c00 	.word	0x40012c00
 8008fc4:	40013400 	.word	0x40013400
 8008fc8:	40015000 	.word	0x40015000
 8008fcc:	40000400 	.word	0x40000400
 8008fd0:	40000800 	.word	0x40000800
 8008fd4:	40000c00 	.word	0x40000c00
 8008fd8:	40014000 	.word	0x40014000

08008fdc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b085      	sub	sp, #20
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ff0:	2b01      	cmp	r3, #1
 8008ff2:	d101      	bne.n	8008ff8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008ff4:	2302      	movs	r3, #2
 8008ff6:	e078      	b.n	80090ea <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2201      	movs	r2, #1
 8008ffc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	68db      	ldr	r3, [r3, #12]
 800900a:	4313      	orrs	r3, r2
 800900c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	689b      	ldr	r3, [r3, #8]
 8009018:	4313      	orrs	r3, r2
 800901a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	685b      	ldr	r3, [r3, #4]
 8009026:	4313      	orrs	r3, r2
 8009028:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	4313      	orrs	r3, r2
 8009036:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	691b      	ldr	r3, [r3, #16]
 8009042:	4313      	orrs	r3, r2
 8009044:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	695b      	ldr	r3, [r3, #20]
 8009050:	4313      	orrs	r3, r2
 8009052:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800905e:	4313      	orrs	r3, r2
 8009060:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	699b      	ldr	r3, [r3, #24]
 800906c:	041b      	lsls	r3, r3, #16
 800906e:	4313      	orrs	r3, r2
 8009070:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	69db      	ldr	r3, [r3, #28]
 800907c:	4313      	orrs	r3, r2
 800907e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	4a1c      	ldr	r2, [pc, #112]	@ (80090f8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d009      	beq.n	800909e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	4a1b      	ldr	r2, [pc, #108]	@ (80090fc <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d004      	beq.n	800909e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	4a19      	ldr	r2, [pc, #100]	@ (8009100 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d11c      	bne.n	80090d8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090a8:	051b      	lsls	r3, r3, #20
 80090aa:	4313      	orrs	r3, r2
 80090ac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	6a1b      	ldr	r3, [r3, #32]
 80090b8:	4313      	orrs	r3, r2
 80090ba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090c6:	4313      	orrs	r3, r2
 80090c8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090d4:	4313      	orrs	r3, r2
 80090d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	68fa      	ldr	r2, [r7, #12]
 80090de:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2200      	movs	r2, #0
 80090e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80090e8:	2300      	movs	r3, #0
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3714      	adds	r7, #20
 80090ee:	46bd      	mov	sp, r7
 80090f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f4:	4770      	bx	lr
 80090f6:	bf00      	nop
 80090f8:	40012c00 	.word	0x40012c00
 80090fc:	40013400 	.word	0x40013400
 8009100:	40015000 	.word	0x40015000

08009104 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009104:	b480      	push	{r7}
 8009106:	b083      	sub	sp, #12
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800910c:	bf00      	nop
 800910e:	370c      	adds	r7, #12
 8009110:	46bd      	mov	sp, r7
 8009112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009116:	4770      	bx	lr

08009118 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009118:	b480      	push	{r7}
 800911a:	b083      	sub	sp, #12
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009120:	bf00      	nop
 8009122:	370c      	adds	r7, #12
 8009124:	46bd      	mov	sp, r7
 8009126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912a:	4770      	bx	lr

0800912c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800912c:	b480      	push	{r7}
 800912e:	b083      	sub	sp, #12
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009134:	bf00      	nop
 8009136:	370c      	adds	r7, #12
 8009138:	46bd      	mov	sp, r7
 800913a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913e:	4770      	bx	lr

08009140 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009140:	b480      	push	{r7}
 8009142:	b083      	sub	sp, #12
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009148:	bf00      	nop
 800914a:	370c      	adds	r7, #12
 800914c:	46bd      	mov	sp, r7
 800914e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009152:	4770      	bx	lr

08009154 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009154:	b480      	push	{r7}
 8009156:	b083      	sub	sp, #12
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800915c:	bf00      	nop
 800915e:	370c      	adds	r7, #12
 8009160:	46bd      	mov	sp, r7
 8009162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009166:	4770      	bx	lr

08009168 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009168:	b480      	push	{r7}
 800916a:	b083      	sub	sp, #12
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009170:	bf00      	nop
 8009172:	370c      	adds	r7, #12
 8009174:	46bd      	mov	sp, r7
 8009176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917a:	4770      	bx	lr

0800917c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800917c:	b480      	push	{r7}
 800917e:	b083      	sub	sp, #12
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009184:	bf00      	nop
 8009186:	370c      	adds	r7, #12
 8009188:	46bd      	mov	sp, r7
 800918a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918e:	4770      	bx	lr

08009190 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8009190:	b480      	push	{r7}
 8009192:	b085      	sub	sp, #20
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2200      	movs	r2, #0
 800919c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80091a0:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80091a4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	b29a      	uxth	r2, r3
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80091b0:	2300      	movs	r3, #0
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	3714      	adds	r7, #20
 80091b6:	46bd      	mov	sp, r7
 80091b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091bc:	4770      	bx	lr

080091be <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80091be:	b480      	push	{r7}
 80091c0:	b085      	sub	sp, #20
 80091c2:	af00      	add	r7, sp, #0
 80091c4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80091c6:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80091ca:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80091d2:	b29a      	uxth	r2, r3
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	b29b      	uxth	r3, r3
 80091d8:	43db      	mvns	r3, r3
 80091da:	b29b      	uxth	r3, r3
 80091dc:	4013      	ands	r3, r2
 80091de:	b29a      	uxth	r2, r3
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80091e6:	2300      	movs	r3, #0
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	3714      	adds	r7, #20
 80091ec:	46bd      	mov	sp, r7
 80091ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f2:	4770      	bx	lr

080091f4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b085      	sub	sp, #20
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	60f8      	str	r0, [r7, #12]
 80091fc:	1d3b      	adds	r3, r7, #4
 80091fe:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	2201      	movs	r2, #1
 8009206:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	2200      	movs	r2, #0
 800920e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	2200      	movs	r2, #0
 8009216:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	2200      	movs	r2, #0
 800921e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8009222:	2300      	movs	r3, #0
}
 8009224:	4618      	mov	r0, r3
 8009226:	3714      	adds	r7, #20
 8009228:	46bd      	mov	sp, r7
 800922a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922e:	4770      	bx	lr

08009230 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009230:	b480      	push	{r7}
 8009232:	b09d      	sub	sp, #116	@ 0x74
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
 8009238:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800923a:	2300      	movs	r3, #0
 800923c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8009240:	687a      	ldr	r2, [r7, #4]
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	781b      	ldrb	r3, [r3, #0]
 8009246:	009b      	lsls	r3, r3, #2
 8009248:	4413      	add	r3, r2
 800924a:	881b      	ldrh	r3, [r3, #0]
 800924c:	b29b      	uxth	r3, r3
 800924e:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8009252:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009256:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	78db      	ldrb	r3, [r3, #3]
 800925e:	2b03      	cmp	r3, #3
 8009260:	d81f      	bhi.n	80092a2 <USB_ActivateEndpoint+0x72>
 8009262:	a201      	add	r2, pc, #4	@ (adr r2, 8009268 <USB_ActivateEndpoint+0x38>)
 8009264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009268:	08009279 	.word	0x08009279
 800926c:	08009295 	.word	0x08009295
 8009270:	080092ab 	.word	0x080092ab
 8009274:	08009287 	.word	0x08009287
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8009278:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800927c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009280:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8009284:	e012      	b.n	80092ac <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8009286:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800928a:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800928e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8009292:	e00b      	b.n	80092ac <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8009294:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009298:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800929c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80092a0:	e004      	b.n	80092ac <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80092a2:	2301      	movs	r3, #1
 80092a4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80092a8:	e000      	b.n	80092ac <USB_ActivateEndpoint+0x7c>
      break;
 80092aa:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80092ac:	687a      	ldr	r2, [r7, #4]
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	781b      	ldrb	r3, [r3, #0]
 80092b2:	009b      	lsls	r3, r3, #2
 80092b4:	441a      	add	r2, r3
 80092b6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80092ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80092be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80092c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80092c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092ca:	b29b      	uxth	r3, r3
 80092cc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80092ce:	687a      	ldr	r2, [r7, #4]
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	781b      	ldrb	r3, [r3, #0]
 80092d4:	009b      	lsls	r3, r3, #2
 80092d6:	4413      	add	r3, r2
 80092d8:	881b      	ldrh	r3, [r3, #0]
 80092da:	b29b      	uxth	r3, r3
 80092dc:	b21b      	sxth	r3, r3
 80092de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80092e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092e6:	b21a      	sxth	r2, r3
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	781b      	ldrb	r3, [r3, #0]
 80092ec:	b21b      	sxth	r3, r3
 80092ee:	4313      	orrs	r3, r2
 80092f0:	b21b      	sxth	r3, r3
 80092f2:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80092f6:	687a      	ldr	r2, [r7, #4]
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	781b      	ldrb	r3, [r3, #0]
 80092fc:	009b      	lsls	r3, r3, #2
 80092fe:	441a      	add	r2, r3
 8009300:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8009304:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009308:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800930c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009310:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009314:	b29b      	uxth	r3, r3
 8009316:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	7b1b      	ldrb	r3, [r3, #12]
 800931c:	2b00      	cmp	r3, #0
 800931e:	f040 8178 	bne.w	8009612 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	785b      	ldrb	r3, [r3, #1]
 8009326:	2b00      	cmp	r3, #0
 8009328:	f000 8084 	beq.w	8009434 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	61bb      	str	r3, [r7, #24]
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009336:	b29b      	uxth	r3, r3
 8009338:	461a      	mov	r2, r3
 800933a:	69bb      	ldr	r3, [r7, #24]
 800933c:	4413      	add	r3, r2
 800933e:	61bb      	str	r3, [r7, #24]
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	781b      	ldrb	r3, [r3, #0]
 8009344:	00da      	lsls	r2, r3, #3
 8009346:	69bb      	ldr	r3, [r7, #24]
 8009348:	4413      	add	r3, r2
 800934a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800934e:	617b      	str	r3, [r7, #20]
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	88db      	ldrh	r3, [r3, #6]
 8009354:	085b      	lsrs	r3, r3, #1
 8009356:	b29b      	uxth	r3, r3
 8009358:	005b      	lsls	r3, r3, #1
 800935a:	b29a      	uxth	r2, r3
 800935c:	697b      	ldr	r3, [r7, #20]
 800935e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009360:	687a      	ldr	r2, [r7, #4]
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	781b      	ldrb	r3, [r3, #0]
 8009366:	009b      	lsls	r3, r3, #2
 8009368:	4413      	add	r3, r2
 800936a:	881b      	ldrh	r3, [r3, #0]
 800936c:	827b      	strh	r3, [r7, #18]
 800936e:	8a7b      	ldrh	r3, [r7, #18]
 8009370:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009374:	2b00      	cmp	r3, #0
 8009376:	d01b      	beq.n	80093b0 <USB_ActivateEndpoint+0x180>
 8009378:	687a      	ldr	r2, [r7, #4]
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	781b      	ldrb	r3, [r3, #0]
 800937e:	009b      	lsls	r3, r3, #2
 8009380:	4413      	add	r3, r2
 8009382:	881b      	ldrh	r3, [r3, #0]
 8009384:	b29b      	uxth	r3, r3
 8009386:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800938a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800938e:	823b      	strh	r3, [r7, #16]
 8009390:	687a      	ldr	r2, [r7, #4]
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	781b      	ldrb	r3, [r3, #0]
 8009396:	009b      	lsls	r3, r3, #2
 8009398:	441a      	add	r2, r3
 800939a:	8a3b      	ldrh	r3, [r7, #16]
 800939c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80093a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80093a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80093a8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80093ac:	b29b      	uxth	r3, r3
 80093ae:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	78db      	ldrb	r3, [r3, #3]
 80093b4:	2b01      	cmp	r3, #1
 80093b6:	d020      	beq.n	80093fa <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80093b8:	687a      	ldr	r2, [r7, #4]
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	781b      	ldrb	r3, [r3, #0]
 80093be:	009b      	lsls	r3, r3, #2
 80093c0:	4413      	add	r3, r2
 80093c2:	881b      	ldrh	r3, [r3, #0]
 80093c4:	b29b      	uxth	r3, r3
 80093c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80093ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80093ce:	81bb      	strh	r3, [r7, #12]
 80093d0:	89bb      	ldrh	r3, [r7, #12]
 80093d2:	f083 0320 	eor.w	r3, r3, #32
 80093d6:	81bb      	strh	r3, [r7, #12]
 80093d8:	687a      	ldr	r2, [r7, #4]
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	781b      	ldrb	r3, [r3, #0]
 80093de:	009b      	lsls	r3, r3, #2
 80093e0:	441a      	add	r2, r3
 80093e2:	89bb      	ldrh	r3, [r7, #12]
 80093e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80093e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80093ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80093f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093f4:	b29b      	uxth	r3, r3
 80093f6:	8013      	strh	r3, [r2, #0]
 80093f8:	e2d5      	b.n	80099a6 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80093fa:	687a      	ldr	r2, [r7, #4]
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	781b      	ldrb	r3, [r3, #0]
 8009400:	009b      	lsls	r3, r3, #2
 8009402:	4413      	add	r3, r2
 8009404:	881b      	ldrh	r3, [r3, #0]
 8009406:	b29b      	uxth	r3, r3
 8009408:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800940c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009410:	81fb      	strh	r3, [r7, #14]
 8009412:	687a      	ldr	r2, [r7, #4]
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	781b      	ldrb	r3, [r3, #0]
 8009418:	009b      	lsls	r3, r3, #2
 800941a:	441a      	add	r2, r3
 800941c:	89fb      	ldrh	r3, [r7, #14]
 800941e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009422:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009426:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800942a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800942e:	b29b      	uxth	r3, r3
 8009430:	8013      	strh	r3, [r2, #0]
 8009432:	e2b8      	b.n	80099a6 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	633b      	str	r3, [r7, #48]	@ 0x30
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800943e:	b29b      	uxth	r3, r3
 8009440:	461a      	mov	r2, r3
 8009442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009444:	4413      	add	r3, r2
 8009446:	633b      	str	r3, [r7, #48]	@ 0x30
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	781b      	ldrb	r3, [r3, #0]
 800944c:	00da      	lsls	r2, r3, #3
 800944e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009450:	4413      	add	r3, r2
 8009452:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009456:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	88db      	ldrh	r3, [r3, #6]
 800945c:	085b      	lsrs	r3, r3, #1
 800945e:	b29b      	uxth	r3, r3
 8009460:	005b      	lsls	r3, r3, #1
 8009462:	b29a      	uxth	r2, r3
 8009464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009466:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009472:	b29b      	uxth	r3, r3
 8009474:	461a      	mov	r2, r3
 8009476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009478:	4413      	add	r3, r2
 800947a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	781b      	ldrb	r3, [r3, #0]
 8009480:	00da      	lsls	r2, r3, #3
 8009482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009484:	4413      	add	r3, r2
 8009486:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800948a:	627b      	str	r3, [r7, #36]	@ 0x24
 800948c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800948e:	881b      	ldrh	r3, [r3, #0]
 8009490:	b29b      	uxth	r3, r3
 8009492:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009496:	b29a      	uxth	r2, r3
 8009498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800949a:	801a      	strh	r2, [r3, #0]
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	691b      	ldr	r3, [r3, #16]
 80094a0:	2b3e      	cmp	r3, #62	@ 0x3e
 80094a2:	d91d      	bls.n	80094e0 <USB_ActivateEndpoint+0x2b0>
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	691b      	ldr	r3, [r3, #16]
 80094a8:	095b      	lsrs	r3, r3, #5
 80094aa:	66bb      	str	r3, [r7, #104]	@ 0x68
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	691b      	ldr	r3, [r3, #16]
 80094b0:	f003 031f 	and.w	r3, r3, #31
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d102      	bne.n	80094be <USB_ActivateEndpoint+0x28e>
 80094b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80094ba:	3b01      	subs	r3, #1
 80094bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80094be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094c0:	881b      	ldrh	r3, [r3, #0]
 80094c2:	b29a      	uxth	r2, r3
 80094c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80094c6:	b29b      	uxth	r3, r3
 80094c8:	029b      	lsls	r3, r3, #10
 80094ca:	b29b      	uxth	r3, r3
 80094cc:	4313      	orrs	r3, r2
 80094ce:	b29b      	uxth	r3, r3
 80094d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094d8:	b29a      	uxth	r2, r3
 80094da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094dc:	801a      	strh	r2, [r3, #0]
 80094de:	e026      	b.n	800952e <USB_ActivateEndpoint+0x2fe>
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	691b      	ldr	r3, [r3, #16]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d10a      	bne.n	80094fe <USB_ActivateEndpoint+0x2ce>
 80094e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ea:	881b      	ldrh	r3, [r3, #0]
 80094ec:	b29b      	uxth	r3, r3
 80094ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094f6:	b29a      	uxth	r2, r3
 80094f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094fa:	801a      	strh	r2, [r3, #0]
 80094fc:	e017      	b.n	800952e <USB_ActivateEndpoint+0x2fe>
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	691b      	ldr	r3, [r3, #16]
 8009502:	085b      	lsrs	r3, r3, #1
 8009504:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	691b      	ldr	r3, [r3, #16]
 800950a:	f003 0301 	and.w	r3, r3, #1
 800950e:	2b00      	cmp	r3, #0
 8009510:	d002      	beq.n	8009518 <USB_ActivateEndpoint+0x2e8>
 8009512:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009514:	3301      	adds	r3, #1
 8009516:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800951a:	881b      	ldrh	r3, [r3, #0]
 800951c:	b29a      	uxth	r2, r3
 800951e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009520:	b29b      	uxth	r3, r3
 8009522:	029b      	lsls	r3, r3, #10
 8009524:	b29b      	uxth	r3, r3
 8009526:	4313      	orrs	r3, r2
 8009528:	b29a      	uxth	r2, r3
 800952a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800952c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800952e:	687a      	ldr	r2, [r7, #4]
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	781b      	ldrb	r3, [r3, #0]
 8009534:	009b      	lsls	r3, r3, #2
 8009536:	4413      	add	r3, r2
 8009538:	881b      	ldrh	r3, [r3, #0]
 800953a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800953c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800953e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009542:	2b00      	cmp	r3, #0
 8009544:	d01b      	beq.n	800957e <USB_ActivateEndpoint+0x34e>
 8009546:	687a      	ldr	r2, [r7, #4]
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	781b      	ldrb	r3, [r3, #0]
 800954c:	009b      	lsls	r3, r3, #2
 800954e:	4413      	add	r3, r2
 8009550:	881b      	ldrh	r3, [r3, #0]
 8009552:	b29b      	uxth	r3, r3
 8009554:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009558:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800955c:	843b      	strh	r3, [r7, #32]
 800955e:	687a      	ldr	r2, [r7, #4]
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	781b      	ldrb	r3, [r3, #0]
 8009564:	009b      	lsls	r3, r3, #2
 8009566:	441a      	add	r2, r3
 8009568:	8c3b      	ldrh	r3, [r7, #32]
 800956a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800956e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009572:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009576:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800957a:	b29b      	uxth	r3, r3
 800957c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	781b      	ldrb	r3, [r3, #0]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d124      	bne.n	80095d0 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009586:	687a      	ldr	r2, [r7, #4]
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	781b      	ldrb	r3, [r3, #0]
 800958c:	009b      	lsls	r3, r3, #2
 800958e:	4413      	add	r3, r2
 8009590:	881b      	ldrh	r3, [r3, #0]
 8009592:	b29b      	uxth	r3, r3
 8009594:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009598:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800959c:	83bb      	strh	r3, [r7, #28]
 800959e:	8bbb      	ldrh	r3, [r7, #28]
 80095a0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80095a4:	83bb      	strh	r3, [r7, #28]
 80095a6:	8bbb      	ldrh	r3, [r7, #28]
 80095a8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80095ac:	83bb      	strh	r3, [r7, #28]
 80095ae:	687a      	ldr	r2, [r7, #4]
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	781b      	ldrb	r3, [r3, #0]
 80095b4:	009b      	lsls	r3, r3, #2
 80095b6:	441a      	add	r2, r3
 80095b8:	8bbb      	ldrh	r3, [r7, #28]
 80095ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80095be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80095c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80095c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095ca:	b29b      	uxth	r3, r3
 80095cc:	8013      	strh	r3, [r2, #0]
 80095ce:	e1ea      	b.n	80099a6 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80095d0:	687a      	ldr	r2, [r7, #4]
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	781b      	ldrb	r3, [r3, #0]
 80095d6:	009b      	lsls	r3, r3, #2
 80095d8:	4413      	add	r3, r2
 80095da:	881b      	ldrh	r3, [r3, #0]
 80095dc:	b29b      	uxth	r3, r3
 80095de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80095e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095e6:	83fb      	strh	r3, [r7, #30]
 80095e8:	8bfb      	ldrh	r3, [r7, #30]
 80095ea:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80095ee:	83fb      	strh	r3, [r7, #30]
 80095f0:	687a      	ldr	r2, [r7, #4]
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	781b      	ldrb	r3, [r3, #0]
 80095f6:	009b      	lsls	r3, r3, #2
 80095f8:	441a      	add	r2, r3
 80095fa:	8bfb      	ldrh	r3, [r7, #30]
 80095fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009600:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009604:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009608:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800960c:	b29b      	uxth	r3, r3
 800960e:	8013      	strh	r3, [r2, #0]
 8009610:	e1c9      	b.n	80099a6 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	78db      	ldrb	r3, [r3, #3]
 8009616:	2b02      	cmp	r3, #2
 8009618:	d11e      	bne.n	8009658 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800961a:	687a      	ldr	r2, [r7, #4]
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	781b      	ldrb	r3, [r3, #0]
 8009620:	009b      	lsls	r3, r3, #2
 8009622:	4413      	add	r3, r2
 8009624:	881b      	ldrh	r3, [r3, #0]
 8009626:	b29b      	uxth	r3, r3
 8009628:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800962c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009630:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8009634:	687a      	ldr	r2, [r7, #4]
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	781b      	ldrb	r3, [r3, #0]
 800963a:	009b      	lsls	r3, r3, #2
 800963c:	441a      	add	r2, r3
 800963e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8009642:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009646:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800964a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800964e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009652:	b29b      	uxth	r3, r3
 8009654:	8013      	strh	r3, [r2, #0]
 8009656:	e01d      	b.n	8009694 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8009658:	687a      	ldr	r2, [r7, #4]
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	781b      	ldrb	r3, [r3, #0]
 800965e:	009b      	lsls	r3, r3, #2
 8009660:	4413      	add	r3, r2
 8009662:	881b      	ldrh	r3, [r3, #0]
 8009664:	b29b      	uxth	r3, r3
 8009666:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800966a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800966e:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8009672:	687a      	ldr	r2, [r7, #4]
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	781b      	ldrb	r3, [r3, #0]
 8009678:	009b      	lsls	r3, r3, #2
 800967a:	441a      	add	r2, r3
 800967c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8009680:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009684:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009688:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800968c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009690:	b29b      	uxth	r3, r3
 8009692:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800969e:	b29b      	uxth	r3, r3
 80096a0:	461a      	mov	r2, r3
 80096a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80096a4:	4413      	add	r3, r2
 80096a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	781b      	ldrb	r3, [r3, #0]
 80096ac:	00da      	lsls	r2, r3, #3
 80096ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80096b0:	4413      	add	r3, r2
 80096b2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80096b6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	891b      	ldrh	r3, [r3, #8]
 80096bc:	085b      	lsrs	r3, r3, #1
 80096be:	b29b      	uxth	r3, r3
 80096c0:	005b      	lsls	r3, r3, #1
 80096c2:	b29a      	uxth	r2, r3
 80096c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80096c6:	801a      	strh	r2, [r3, #0]
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80096d2:	b29b      	uxth	r3, r3
 80096d4:	461a      	mov	r2, r3
 80096d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80096d8:	4413      	add	r3, r2
 80096da:	657b      	str	r3, [r7, #84]	@ 0x54
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	781b      	ldrb	r3, [r3, #0]
 80096e0:	00da      	lsls	r2, r3, #3
 80096e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80096e4:	4413      	add	r3, r2
 80096e6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80096ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	895b      	ldrh	r3, [r3, #10]
 80096f0:	085b      	lsrs	r3, r3, #1
 80096f2:	b29b      	uxth	r3, r3
 80096f4:	005b      	lsls	r3, r3, #1
 80096f6:	b29a      	uxth	r2, r3
 80096f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80096fa:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	785b      	ldrb	r3, [r3, #1]
 8009700:	2b00      	cmp	r3, #0
 8009702:	f040 8093 	bne.w	800982c <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009706:	687a      	ldr	r2, [r7, #4]
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	781b      	ldrb	r3, [r3, #0]
 800970c:	009b      	lsls	r3, r3, #2
 800970e:	4413      	add	r3, r2
 8009710:	881b      	ldrh	r3, [r3, #0]
 8009712:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8009716:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800971a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800971e:	2b00      	cmp	r3, #0
 8009720:	d01b      	beq.n	800975a <USB_ActivateEndpoint+0x52a>
 8009722:	687a      	ldr	r2, [r7, #4]
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	781b      	ldrb	r3, [r3, #0]
 8009728:	009b      	lsls	r3, r3, #2
 800972a:	4413      	add	r3, r2
 800972c:	881b      	ldrh	r3, [r3, #0]
 800972e:	b29b      	uxth	r3, r3
 8009730:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009734:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009738:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800973a:	687a      	ldr	r2, [r7, #4]
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	781b      	ldrb	r3, [r3, #0]
 8009740:	009b      	lsls	r3, r3, #2
 8009742:	441a      	add	r2, r3
 8009744:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009746:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800974a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800974e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009752:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009756:	b29b      	uxth	r3, r3
 8009758:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800975a:	687a      	ldr	r2, [r7, #4]
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	781b      	ldrb	r3, [r3, #0]
 8009760:	009b      	lsls	r3, r3, #2
 8009762:	4413      	add	r3, r2
 8009764:	881b      	ldrh	r3, [r3, #0]
 8009766:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8009768:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800976a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800976e:	2b00      	cmp	r3, #0
 8009770:	d01b      	beq.n	80097aa <USB_ActivateEndpoint+0x57a>
 8009772:	687a      	ldr	r2, [r7, #4]
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	781b      	ldrb	r3, [r3, #0]
 8009778:	009b      	lsls	r3, r3, #2
 800977a:	4413      	add	r3, r2
 800977c:	881b      	ldrh	r3, [r3, #0]
 800977e:	b29b      	uxth	r3, r3
 8009780:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009784:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009788:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800978a:	687a      	ldr	r2, [r7, #4]
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	781b      	ldrb	r3, [r3, #0]
 8009790:	009b      	lsls	r3, r3, #2
 8009792:	441a      	add	r2, r3
 8009794:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8009796:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800979a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800979e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80097a2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80097a6:	b29b      	uxth	r3, r3
 80097a8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80097aa:	687a      	ldr	r2, [r7, #4]
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	781b      	ldrb	r3, [r3, #0]
 80097b0:	009b      	lsls	r3, r3, #2
 80097b2:	4413      	add	r3, r2
 80097b4:	881b      	ldrh	r3, [r3, #0]
 80097b6:	b29b      	uxth	r3, r3
 80097b8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80097bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80097c0:	873b      	strh	r3, [r7, #56]	@ 0x38
 80097c2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80097c4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80097c8:	873b      	strh	r3, [r7, #56]	@ 0x38
 80097ca:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80097cc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80097d0:	873b      	strh	r3, [r7, #56]	@ 0x38
 80097d2:	687a      	ldr	r2, [r7, #4]
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	781b      	ldrb	r3, [r3, #0]
 80097d8:	009b      	lsls	r3, r3, #2
 80097da:	441a      	add	r2, r3
 80097dc:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80097de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80097e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80097e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80097ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80097ee:	b29b      	uxth	r3, r3
 80097f0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80097f2:	687a      	ldr	r2, [r7, #4]
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	781b      	ldrb	r3, [r3, #0]
 80097f8:	009b      	lsls	r3, r3, #2
 80097fa:	4413      	add	r3, r2
 80097fc:	881b      	ldrh	r3, [r3, #0]
 80097fe:	b29b      	uxth	r3, r3
 8009800:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009804:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009808:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800980a:	687a      	ldr	r2, [r7, #4]
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	781b      	ldrb	r3, [r3, #0]
 8009810:	009b      	lsls	r3, r3, #2
 8009812:	441a      	add	r2, r3
 8009814:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009816:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800981a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800981e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009822:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009826:	b29b      	uxth	r3, r3
 8009828:	8013      	strh	r3, [r2, #0]
 800982a:	e0bc      	b.n	80099a6 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800982c:	687a      	ldr	r2, [r7, #4]
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	781b      	ldrb	r3, [r3, #0]
 8009832:	009b      	lsls	r3, r3, #2
 8009834:	4413      	add	r3, r2
 8009836:	881b      	ldrh	r3, [r3, #0]
 8009838:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800983c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8009840:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009844:	2b00      	cmp	r3, #0
 8009846:	d01d      	beq.n	8009884 <USB_ActivateEndpoint+0x654>
 8009848:	687a      	ldr	r2, [r7, #4]
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	781b      	ldrb	r3, [r3, #0]
 800984e:	009b      	lsls	r3, r3, #2
 8009850:	4413      	add	r3, r2
 8009852:	881b      	ldrh	r3, [r3, #0]
 8009854:	b29b      	uxth	r3, r3
 8009856:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800985a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800985e:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8009862:	687a      	ldr	r2, [r7, #4]
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	781b      	ldrb	r3, [r3, #0]
 8009868:	009b      	lsls	r3, r3, #2
 800986a:	441a      	add	r2, r3
 800986c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8009870:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009874:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009878:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800987c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009880:	b29b      	uxth	r3, r3
 8009882:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009884:	687a      	ldr	r2, [r7, #4]
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	781b      	ldrb	r3, [r3, #0]
 800988a:	009b      	lsls	r3, r3, #2
 800988c:	4413      	add	r3, r2
 800988e:	881b      	ldrh	r3, [r3, #0]
 8009890:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8009894:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8009898:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800989c:	2b00      	cmp	r3, #0
 800989e:	d01d      	beq.n	80098dc <USB_ActivateEndpoint+0x6ac>
 80098a0:	687a      	ldr	r2, [r7, #4]
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	781b      	ldrb	r3, [r3, #0]
 80098a6:	009b      	lsls	r3, r3, #2
 80098a8:	4413      	add	r3, r2
 80098aa:	881b      	ldrh	r3, [r3, #0]
 80098ac:	b29b      	uxth	r3, r3
 80098ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80098b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80098b6:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80098ba:	687a      	ldr	r2, [r7, #4]
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	781b      	ldrb	r3, [r3, #0]
 80098c0:	009b      	lsls	r3, r3, #2
 80098c2:	441a      	add	r2, r3
 80098c4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80098c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80098cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80098d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80098d4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80098d8:	b29b      	uxth	r3, r3
 80098da:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	78db      	ldrb	r3, [r3, #3]
 80098e0:	2b01      	cmp	r3, #1
 80098e2:	d024      	beq.n	800992e <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80098e4:	687a      	ldr	r2, [r7, #4]
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	781b      	ldrb	r3, [r3, #0]
 80098ea:	009b      	lsls	r3, r3, #2
 80098ec:	4413      	add	r3, r2
 80098ee:	881b      	ldrh	r3, [r3, #0]
 80098f0:	b29b      	uxth	r3, r3
 80098f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80098f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80098fa:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80098fe:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8009902:	f083 0320 	eor.w	r3, r3, #32
 8009906:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800990a:	687a      	ldr	r2, [r7, #4]
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	781b      	ldrb	r3, [r3, #0]
 8009910:	009b      	lsls	r3, r3, #2
 8009912:	441a      	add	r2, r3
 8009914:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8009918:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800991c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009920:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009924:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009928:	b29b      	uxth	r3, r3
 800992a:	8013      	strh	r3, [r2, #0]
 800992c:	e01d      	b.n	800996a <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800992e:	687a      	ldr	r2, [r7, #4]
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	781b      	ldrb	r3, [r3, #0]
 8009934:	009b      	lsls	r3, r3, #2
 8009936:	4413      	add	r3, r2
 8009938:	881b      	ldrh	r3, [r3, #0]
 800993a:	b29b      	uxth	r3, r3
 800993c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009940:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009944:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8009948:	687a      	ldr	r2, [r7, #4]
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	781b      	ldrb	r3, [r3, #0]
 800994e:	009b      	lsls	r3, r3, #2
 8009950:	441a      	add	r2, r3
 8009952:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8009956:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800995a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800995e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009962:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009966:	b29b      	uxth	r3, r3
 8009968:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800996a:	687a      	ldr	r2, [r7, #4]
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	781b      	ldrb	r3, [r3, #0]
 8009970:	009b      	lsls	r3, r3, #2
 8009972:	4413      	add	r3, r2
 8009974:	881b      	ldrh	r3, [r3, #0]
 8009976:	b29b      	uxth	r3, r3
 8009978:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800997c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009980:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8009984:	687a      	ldr	r2, [r7, #4]
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	781b      	ldrb	r3, [r3, #0]
 800998a:	009b      	lsls	r3, r3, #2
 800998c:	441a      	add	r2, r3
 800998e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009992:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009996:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800999a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800999e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099a2:	b29b      	uxth	r3, r3
 80099a4:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80099a6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3774      	adds	r7, #116	@ 0x74
 80099ae:	46bd      	mov	sp, r7
 80099b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b4:	4770      	bx	lr
 80099b6:	bf00      	nop

080099b8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80099b8:	b480      	push	{r7}
 80099ba:	b08d      	sub	sp, #52	@ 0x34
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
 80099c0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	7b1b      	ldrb	r3, [r3, #12]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	f040 808e 	bne.w	8009ae8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	785b      	ldrb	r3, [r3, #1]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d044      	beq.n	8009a5e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80099d4:	687a      	ldr	r2, [r7, #4]
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	781b      	ldrb	r3, [r3, #0]
 80099da:	009b      	lsls	r3, r3, #2
 80099dc:	4413      	add	r3, r2
 80099de:	881b      	ldrh	r3, [r3, #0]
 80099e0:	81bb      	strh	r3, [r7, #12]
 80099e2:	89bb      	ldrh	r3, [r7, #12]
 80099e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d01b      	beq.n	8009a24 <USB_DeactivateEndpoint+0x6c>
 80099ec:	687a      	ldr	r2, [r7, #4]
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	781b      	ldrb	r3, [r3, #0]
 80099f2:	009b      	lsls	r3, r3, #2
 80099f4:	4413      	add	r3, r2
 80099f6:	881b      	ldrh	r3, [r3, #0]
 80099f8:	b29b      	uxth	r3, r3
 80099fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80099fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a02:	817b      	strh	r3, [r7, #10]
 8009a04:	687a      	ldr	r2, [r7, #4]
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	781b      	ldrb	r3, [r3, #0]
 8009a0a:	009b      	lsls	r3, r3, #2
 8009a0c:	441a      	add	r2, r3
 8009a0e:	897b      	ldrh	r3, [r7, #10]
 8009a10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009a14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009a18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009a1c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009a20:	b29b      	uxth	r3, r3
 8009a22:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009a24:	687a      	ldr	r2, [r7, #4]
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	781b      	ldrb	r3, [r3, #0]
 8009a2a:	009b      	lsls	r3, r3, #2
 8009a2c:	4413      	add	r3, r2
 8009a2e:	881b      	ldrh	r3, [r3, #0]
 8009a30:	b29b      	uxth	r3, r3
 8009a32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009a36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009a3a:	813b      	strh	r3, [r7, #8]
 8009a3c:	687a      	ldr	r2, [r7, #4]
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	781b      	ldrb	r3, [r3, #0]
 8009a42:	009b      	lsls	r3, r3, #2
 8009a44:	441a      	add	r2, r3
 8009a46:	893b      	ldrh	r3, [r7, #8]
 8009a48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009a4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009a50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009a54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a58:	b29b      	uxth	r3, r3
 8009a5a:	8013      	strh	r3, [r2, #0]
 8009a5c:	e192      	b.n	8009d84 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009a5e:	687a      	ldr	r2, [r7, #4]
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	781b      	ldrb	r3, [r3, #0]
 8009a64:	009b      	lsls	r3, r3, #2
 8009a66:	4413      	add	r3, r2
 8009a68:	881b      	ldrh	r3, [r3, #0]
 8009a6a:	827b      	strh	r3, [r7, #18]
 8009a6c:	8a7b      	ldrh	r3, [r7, #18]
 8009a6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d01b      	beq.n	8009aae <USB_DeactivateEndpoint+0xf6>
 8009a76:	687a      	ldr	r2, [r7, #4]
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	781b      	ldrb	r3, [r3, #0]
 8009a7c:	009b      	lsls	r3, r3, #2
 8009a7e:	4413      	add	r3, r2
 8009a80:	881b      	ldrh	r3, [r3, #0]
 8009a82:	b29b      	uxth	r3, r3
 8009a84:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009a88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a8c:	823b      	strh	r3, [r7, #16]
 8009a8e:	687a      	ldr	r2, [r7, #4]
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	781b      	ldrb	r3, [r3, #0]
 8009a94:	009b      	lsls	r3, r3, #2
 8009a96:	441a      	add	r2, r3
 8009a98:	8a3b      	ldrh	r3, [r7, #16]
 8009a9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009a9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009aa2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009aa6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009aaa:	b29b      	uxth	r3, r3
 8009aac:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009aae:	687a      	ldr	r2, [r7, #4]
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	781b      	ldrb	r3, [r3, #0]
 8009ab4:	009b      	lsls	r3, r3, #2
 8009ab6:	4413      	add	r3, r2
 8009ab8:	881b      	ldrh	r3, [r3, #0]
 8009aba:	b29b      	uxth	r3, r3
 8009abc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009ac0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ac4:	81fb      	strh	r3, [r7, #14]
 8009ac6:	687a      	ldr	r2, [r7, #4]
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	781b      	ldrb	r3, [r3, #0]
 8009acc:	009b      	lsls	r3, r3, #2
 8009ace:	441a      	add	r2, r3
 8009ad0:	89fb      	ldrh	r3, [r7, #14]
 8009ad2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009ad6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009ada:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009ade:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ae2:	b29b      	uxth	r3, r3
 8009ae4:	8013      	strh	r3, [r2, #0]
 8009ae6:	e14d      	b.n	8009d84 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	785b      	ldrb	r3, [r3, #1]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	f040 80a5 	bne.w	8009c3c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009af2:	687a      	ldr	r2, [r7, #4]
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	781b      	ldrb	r3, [r3, #0]
 8009af8:	009b      	lsls	r3, r3, #2
 8009afa:	4413      	add	r3, r2
 8009afc:	881b      	ldrh	r3, [r3, #0]
 8009afe:	843b      	strh	r3, [r7, #32]
 8009b00:	8c3b      	ldrh	r3, [r7, #32]
 8009b02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d01b      	beq.n	8009b42 <USB_DeactivateEndpoint+0x18a>
 8009b0a:	687a      	ldr	r2, [r7, #4]
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	781b      	ldrb	r3, [r3, #0]
 8009b10:	009b      	lsls	r3, r3, #2
 8009b12:	4413      	add	r3, r2
 8009b14:	881b      	ldrh	r3, [r3, #0]
 8009b16:	b29b      	uxth	r3, r3
 8009b18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009b1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b20:	83fb      	strh	r3, [r7, #30]
 8009b22:	687a      	ldr	r2, [r7, #4]
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	781b      	ldrb	r3, [r3, #0]
 8009b28:	009b      	lsls	r3, r3, #2
 8009b2a:	441a      	add	r2, r3
 8009b2c:	8bfb      	ldrh	r3, [r7, #30]
 8009b2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009b32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009b36:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009b3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b3e:	b29b      	uxth	r3, r3
 8009b40:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009b42:	687a      	ldr	r2, [r7, #4]
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	781b      	ldrb	r3, [r3, #0]
 8009b48:	009b      	lsls	r3, r3, #2
 8009b4a:	4413      	add	r3, r2
 8009b4c:	881b      	ldrh	r3, [r3, #0]
 8009b4e:	83bb      	strh	r3, [r7, #28]
 8009b50:	8bbb      	ldrh	r3, [r7, #28]
 8009b52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d01b      	beq.n	8009b92 <USB_DeactivateEndpoint+0x1da>
 8009b5a:	687a      	ldr	r2, [r7, #4]
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	781b      	ldrb	r3, [r3, #0]
 8009b60:	009b      	lsls	r3, r3, #2
 8009b62:	4413      	add	r3, r2
 8009b64:	881b      	ldrh	r3, [r3, #0]
 8009b66:	b29b      	uxth	r3, r3
 8009b68:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009b6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b70:	837b      	strh	r3, [r7, #26]
 8009b72:	687a      	ldr	r2, [r7, #4]
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	781b      	ldrb	r3, [r3, #0]
 8009b78:	009b      	lsls	r3, r3, #2
 8009b7a:	441a      	add	r2, r3
 8009b7c:	8b7b      	ldrh	r3, [r7, #26]
 8009b7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009b82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009b86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009b8a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009b8e:	b29b      	uxth	r3, r3
 8009b90:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009b92:	687a      	ldr	r2, [r7, #4]
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	781b      	ldrb	r3, [r3, #0]
 8009b98:	009b      	lsls	r3, r3, #2
 8009b9a:	4413      	add	r3, r2
 8009b9c:	881b      	ldrh	r3, [r3, #0]
 8009b9e:	b29b      	uxth	r3, r3
 8009ba0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009ba4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ba8:	833b      	strh	r3, [r7, #24]
 8009baa:	687a      	ldr	r2, [r7, #4]
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	781b      	ldrb	r3, [r3, #0]
 8009bb0:	009b      	lsls	r3, r3, #2
 8009bb2:	441a      	add	r2, r3
 8009bb4:	8b3b      	ldrh	r3, [r7, #24]
 8009bb6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009bba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009bbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009bc2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009bc6:	b29b      	uxth	r3, r3
 8009bc8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009bca:	687a      	ldr	r2, [r7, #4]
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	781b      	ldrb	r3, [r3, #0]
 8009bd0:	009b      	lsls	r3, r3, #2
 8009bd2:	4413      	add	r3, r2
 8009bd4:	881b      	ldrh	r3, [r3, #0]
 8009bd6:	b29b      	uxth	r3, r3
 8009bd8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009bdc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009be0:	82fb      	strh	r3, [r7, #22]
 8009be2:	687a      	ldr	r2, [r7, #4]
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	781b      	ldrb	r3, [r3, #0]
 8009be8:	009b      	lsls	r3, r3, #2
 8009bea:	441a      	add	r2, r3
 8009bec:	8afb      	ldrh	r3, [r7, #22]
 8009bee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009bf2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009bf6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009bfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009bfe:	b29b      	uxth	r3, r3
 8009c00:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009c02:	687a      	ldr	r2, [r7, #4]
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	781b      	ldrb	r3, [r3, #0]
 8009c08:	009b      	lsls	r3, r3, #2
 8009c0a:	4413      	add	r3, r2
 8009c0c:	881b      	ldrh	r3, [r3, #0]
 8009c0e:	b29b      	uxth	r3, r3
 8009c10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009c14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009c18:	82bb      	strh	r3, [r7, #20]
 8009c1a:	687a      	ldr	r2, [r7, #4]
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	781b      	ldrb	r3, [r3, #0]
 8009c20:	009b      	lsls	r3, r3, #2
 8009c22:	441a      	add	r2, r3
 8009c24:	8abb      	ldrh	r3, [r7, #20]
 8009c26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009c2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009c2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009c32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c36:	b29b      	uxth	r3, r3
 8009c38:	8013      	strh	r3, [r2, #0]
 8009c3a:	e0a3      	b.n	8009d84 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009c3c:	687a      	ldr	r2, [r7, #4]
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	781b      	ldrb	r3, [r3, #0]
 8009c42:	009b      	lsls	r3, r3, #2
 8009c44:	4413      	add	r3, r2
 8009c46:	881b      	ldrh	r3, [r3, #0]
 8009c48:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8009c4a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009c4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d01b      	beq.n	8009c8c <USB_DeactivateEndpoint+0x2d4>
 8009c54:	687a      	ldr	r2, [r7, #4]
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	781b      	ldrb	r3, [r3, #0]
 8009c5a:	009b      	lsls	r3, r3, #2
 8009c5c:	4413      	add	r3, r2
 8009c5e:	881b      	ldrh	r3, [r3, #0]
 8009c60:	b29b      	uxth	r3, r3
 8009c62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009c66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c6a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8009c6c:	687a      	ldr	r2, [r7, #4]
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	781b      	ldrb	r3, [r3, #0]
 8009c72:	009b      	lsls	r3, r3, #2
 8009c74:	441a      	add	r2, r3
 8009c76:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8009c78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009c7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009c80:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009c84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c88:	b29b      	uxth	r3, r3
 8009c8a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009c8c:	687a      	ldr	r2, [r7, #4]
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	781b      	ldrb	r3, [r3, #0]
 8009c92:	009b      	lsls	r3, r3, #2
 8009c94:	4413      	add	r3, r2
 8009c96:	881b      	ldrh	r3, [r3, #0]
 8009c98:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8009c9a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009c9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d01b      	beq.n	8009cdc <USB_DeactivateEndpoint+0x324>
 8009ca4:	687a      	ldr	r2, [r7, #4]
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	781b      	ldrb	r3, [r3, #0]
 8009caa:	009b      	lsls	r3, r3, #2
 8009cac:	4413      	add	r3, r2
 8009cae:	881b      	ldrh	r3, [r3, #0]
 8009cb0:	b29b      	uxth	r3, r3
 8009cb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009cb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009cba:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009cbc:	687a      	ldr	r2, [r7, #4]
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	781b      	ldrb	r3, [r3, #0]
 8009cc2:	009b      	lsls	r3, r3, #2
 8009cc4:	441a      	add	r2, r3
 8009cc6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009cc8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009ccc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009cd0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009cd4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009cd8:	b29b      	uxth	r3, r3
 8009cda:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009cdc:	687a      	ldr	r2, [r7, #4]
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	781b      	ldrb	r3, [r3, #0]
 8009ce2:	009b      	lsls	r3, r3, #2
 8009ce4:	4413      	add	r3, r2
 8009ce6:	881b      	ldrh	r3, [r3, #0]
 8009ce8:	b29b      	uxth	r3, r3
 8009cea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009cee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009cf2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8009cf4:	687a      	ldr	r2, [r7, #4]
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	781b      	ldrb	r3, [r3, #0]
 8009cfa:	009b      	lsls	r3, r3, #2
 8009cfc:	441a      	add	r2, r3
 8009cfe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009d00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009d04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009d08:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009d0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d10:	b29b      	uxth	r3, r3
 8009d12:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009d14:	687a      	ldr	r2, [r7, #4]
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	781b      	ldrb	r3, [r3, #0]
 8009d1a:	009b      	lsls	r3, r3, #2
 8009d1c:	4413      	add	r3, r2
 8009d1e:	881b      	ldrh	r3, [r3, #0]
 8009d20:	b29b      	uxth	r3, r3
 8009d22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009d26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d2a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8009d2c:	687a      	ldr	r2, [r7, #4]
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	781b      	ldrb	r3, [r3, #0]
 8009d32:	009b      	lsls	r3, r3, #2
 8009d34:	441a      	add	r2, r3
 8009d36:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009d38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009d3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009d40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009d44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d48:	b29b      	uxth	r3, r3
 8009d4a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009d4c:	687a      	ldr	r2, [r7, #4]
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	781b      	ldrb	r3, [r3, #0]
 8009d52:	009b      	lsls	r3, r3, #2
 8009d54:	4413      	add	r3, r2
 8009d56:	881b      	ldrh	r3, [r3, #0]
 8009d58:	b29b      	uxth	r3, r3
 8009d5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009d5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d62:	847b      	strh	r3, [r7, #34]	@ 0x22
 8009d64:	687a      	ldr	r2, [r7, #4]
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	781b      	ldrb	r3, [r3, #0]
 8009d6a:	009b      	lsls	r3, r3, #2
 8009d6c:	441a      	add	r2, r3
 8009d6e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009d70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009d74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009d78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009d7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d80:	b29b      	uxth	r3, r3
 8009d82:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8009d84:	2300      	movs	r3, #0
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	3734      	adds	r7, #52	@ 0x34
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d90:	4770      	bx	lr

08009d92 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009d92:	b580      	push	{r7, lr}
 8009d94:	b0c2      	sub	sp, #264	@ 0x108
 8009d96:	af00      	add	r7, sp, #0
 8009d98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d9c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009da0:	6018      	str	r0, [r3, #0]
 8009da2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009da6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009daa:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009dac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009db0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	785b      	ldrb	r3, [r3, #1]
 8009db8:	2b01      	cmp	r3, #1
 8009dba:	f040 86b7 	bne.w	800ab2c <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009dbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009dc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	699a      	ldr	r2, [r3, #24]
 8009dca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009dce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	691b      	ldr	r3, [r3, #16]
 8009dd6:	429a      	cmp	r2, r3
 8009dd8:	d908      	bls.n	8009dec <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8009dda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009dde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	691b      	ldr	r3, [r3, #16]
 8009de6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009dea:	e007      	b.n	8009dfc <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8009dec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009df0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	699b      	ldr	r3, [r3, #24]
 8009df8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009dfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	7b1b      	ldrb	r3, [r3, #12]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d13a      	bne.n	8009e82 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009e0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	6959      	ldr	r1, [r3, #20]
 8009e18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	88da      	ldrh	r2, [r3, #6]
 8009e24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e28:	b29b      	uxth	r3, r3
 8009e2a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009e2e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009e32:	6800      	ldr	r0, [r0, #0]
 8009e34:	f001 fc98 	bl	800b768 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009e38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	613b      	str	r3, [r7, #16]
 8009e44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009e52:	b29b      	uxth	r3, r3
 8009e54:	461a      	mov	r2, r3
 8009e56:	693b      	ldr	r3, [r7, #16]
 8009e58:	4413      	add	r3, r2
 8009e5a:	613b      	str	r3, [r7, #16]
 8009e5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	781b      	ldrb	r3, [r3, #0]
 8009e68:	00da      	lsls	r2, r3, #3
 8009e6a:	693b      	ldr	r3, [r7, #16]
 8009e6c:	4413      	add	r3, r2
 8009e6e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009e72:	60fb      	str	r3, [r7, #12]
 8009e74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e78:	b29a      	uxth	r2, r3
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	801a      	strh	r2, [r3, #0]
 8009e7e:	f000 be1f 	b.w	800aac0 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009e82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	78db      	ldrb	r3, [r3, #3]
 8009e8e:	2b02      	cmp	r3, #2
 8009e90:	f040 8462 	bne.w	800a758 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8009e94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	6a1a      	ldr	r2, [r3, #32]
 8009ea0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ea4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	691b      	ldr	r3, [r3, #16]
 8009eac:	429a      	cmp	r2, r3
 8009eae:	f240 83df 	bls.w	800a670 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009eb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009eb6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009eba:	681a      	ldr	r2, [r3, #0]
 8009ebc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ec0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	781b      	ldrb	r3, [r3, #0]
 8009ec8:	009b      	lsls	r3, r3, #2
 8009eca:	4413      	add	r3, r2
 8009ecc:	881b      	ldrh	r3, [r3, #0]
 8009ece:	b29b      	uxth	r3, r3
 8009ed0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009ed4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ed8:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8009edc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ee0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009ee4:	681a      	ldr	r2, [r3, #0]
 8009ee6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009eea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	781b      	ldrb	r3, [r3, #0]
 8009ef2:	009b      	lsls	r3, r3, #2
 8009ef4:	441a      	add	r2, r3
 8009ef6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8009efa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009efe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009f02:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8009f06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f0a:	b29b      	uxth	r3, r3
 8009f0c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8009f0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	6a1a      	ldr	r2, [r3, #32]
 8009f1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f1e:	1ad2      	subs	r2, r2, r3
 8009f20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009f2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f30:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009f34:	681a      	ldr	r2, [r3, #0]
 8009f36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	781b      	ldrb	r3, [r3, #0]
 8009f42:	009b      	lsls	r3, r3, #2
 8009f44:	4413      	add	r3, r2
 8009f46:	881b      	ldrh	r3, [r3, #0]
 8009f48:	b29b      	uxth	r3, r3
 8009f4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	f000 81c7 	beq.w	800a2e2 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009f54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f58:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009f60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	785b      	ldrb	r3, [r3, #1]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d177      	bne.n	800a060 <USB_EPStartXfer+0x2ce>
 8009f70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f74:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009f7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f80:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009f8a:	b29b      	uxth	r3, r3
 8009f8c:	461a      	mov	r2, r3
 8009f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f90:	4413      	add	r3, r2
 8009f92:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009f94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	781b      	ldrb	r3, [r3, #0]
 8009fa0:	00da      	lsls	r2, r3, #3
 8009fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fa4:	4413      	add	r3, r2
 8009fa6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009faa:	627b      	str	r3, [r7, #36]	@ 0x24
 8009fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fae:	881b      	ldrh	r3, [r3, #0]
 8009fb0:	b29b      	uxth	r3, r3
 8009fb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009fb6:	b29a      	uxth	r2, r3
 8009fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fba:	801a      	strh	r2, [r3, #0]
 8009fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fc0:	2b3e      	cmp	r3, #62	@ 0x3e
 8009fc2:	d921      	bls.n	800a008 <USB_EPStartXfer+0x276>
 8009fc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fc8:	095b      	lsrs	r3, r3, #5
 8009fca:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009fce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fd2:	f003 031f 	and.w	r3, r3, #31
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d104      	bne.n	8009fe4 <USB_EPStartXfer+0x252>
 8009fda:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8009fde:	3b01      	subs	r3, #1
 8009fe0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fe6:	881b      	ldrh	r3, [r3, #0]
 8009fe8:	b29a      	uxth	r2, r3
 8009fea:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8009fee:	b29b      	uxth	r3, r3
 8009ff0:	029b      	lsls	r3, r3, #10
 8009ff2:	b29b      	uxth	r3, r3
 8009ff4:	4313      	orrs	r3, r2
 8009ff6:	b29b      	uxth	r3, r3
 8009ff8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ffc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a000:	b29a      	uxth	r2, r3
 800a002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a004:	801a      	strh	r2, [r3, #0]
 800a006:	e050      	b.n	800a0aa <USB_EPStartXfer+0x318>
 800a008:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d10a      	bne.n	800a026 <USB_EPStartXfer+0x294>
 800a010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a012:	881b      	ldrh	r3, [r3, #0]
 800a014:	b29b      	uxth	r3, r3
 800a016:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a01a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a01e:	b29a      	uxth	r2, r3
 800a020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a022:	801a      	strh	r2, [r3, #0]
 800a024:	e041      	b.n	800a0aa <USB_EPStartXfer+0x318>
 800a026:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a02a:	085b      	lsrs	r3, r3, #1
 800a02c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a030:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a034:	f003 0301 	and.w	r3, r3, #1
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d004      	beq.n	800a046 <USB_EPStartXfer+0x2b4>
 800a03c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800a040:	3301      	adds	r3, #1
 800a042:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a048:	881b      	ldrh	r3, [r3, #0]
 800a04a:	b29a      	uxth	r2, r3
 800a04c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800a050:	b29b      	uxth	r3, r3
 800a052:	029b      	lsls	r3, r3, #10
 800a054:	b29b      	uxth	r3, r3
 800a056:	4313      	orrs	r3, r2
 800a058:	b29a      	uxth	r2, r3
 800a05a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a05c:	801a      	strh	r2, [r3, #0]
 800a05e:	e024      	b.n	800a0aa <USB_EPStartXfer+0x318>
 800a060:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a064:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	785b      	ldrb	r3, [r3, #1]
 800a06c:	2b01      	cmp	r3, #1
 800a06e:	d11c      	bne.n	800a0aa <USB_EPStartXfer+0x318>
 800a070:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a074:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a07e:	b29b      	uxth	r3, r3
 800a080:	461a      	mov	r2, r3
 800a082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a084:	4413      	add	r3, r2
 800a086:	633b      	str	r3, [r7, #48]	@ 0x30
 800a088:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a08c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	781b      	ldrb	r3, [r3, #0]
 800a094:	00da      	lsls	r2, r3, #3
 800a096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a098:	4413      	add	r3, r2
 800a09a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a09e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a0a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0a4:	b29a      	uxth	r2, r3
 800a0a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0a8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a0aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	895b      	ldrh	r3, [r3, #10]
 800a0b6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a0ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	6959      	ldr	r1, [r3, #20]
 800a0c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0ca:	b29b      	uxth	r3, r3
 800a0cc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a0d0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a0d4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a0d8:	6800      	ldr	r0, [r0, #0]
 800a0da:	f001 fb45 	bl	800b768 <USB_WritePMA>
            ep->xfer_buff += len;
 800a0de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	695a      	ldr	r2, [r3, #20]
 800a0ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0ee:	441a      	add	r2, r3
 800a0f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a0fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a100:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	6a1a      	ldr	r2, [r3, #32]
 800a108:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a10c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	691b      	ldr	r3, [r3, #16]
 800a114:	429a      	cmp	r2, r3
 800a116:	d90f      	bls.n	800a138 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800a118:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a11c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	6a1a      	ldr	r2, [r3, #32]
 800a124:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a128:	1ad2      	subs	r2, r2, r3
 800a12a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a12e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	621a      	str	r2, [r3, #32]
 800a136:	e00e      	b.n	800a156 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800a138:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a13c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	6a1b      	ldr	r3, [r3, #32]
 800a144:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800a148:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a14c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	2200      	movs	r2, #0
 800a154:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a156:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a15a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	785b      	ldrb	r3, [r3, #1]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d177      	bne.n	800a256 <USB_EPStartXfer+0x4c4>
 800a166:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a16a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	61bb      	str	r3, [r7, #24]
 800a172:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a176:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a180:	b29b      	uxth	r3, r3
 800a182:	461a      	mov	r2, r3
 800a184:	69bb      	ldr	r3, [r7, #24]
 800a186:	4413      	add	r3, r2
 800a188:	61bb      	str	r3, [r7, #24]
 800a18a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a18e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	781b      	ldrb	r3, [r3, #0]
 800a196:	00da      	lsls	r2, r3, #3
 800a198:	69bb      	ldr	r3, [r7, #24]
 800a19a:	4413      	add	r3, r2
 800a19c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a1a0:	617b      	str	r3, [r7, #20]
 800a1a2:	697b      	ldr	r3, [r7, #20]
 800a1a4:	881b      	ldrh	r3, [r3, #0]
 800a1a6:	b29b      	uxth	r3, r3
 800a1a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a1ac:	b29a      	uxth	r2, r3
 800a1ae:	697b      	ldr	r3, [r7, #20]
 800a1b0:	801a      	strh	r2, [r3, #0]
 800a1b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1b6:	2b3e      	cmp	r3, #62	@ 0x3e
 800a1b8:	d921      	bls.n	800a1fe <USB_EPStartXfer+0x46c>
 800a1ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1be:	095b      	lsrs	r3, r3, #5
 800a1c0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a1c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1c8:	f003 031f 	and.w	r3, r3, #31
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d104      	bne.n	800a1da <USB_EPStartXfer+0x448>
 800a1d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a1d4:	3b01      	subs	r3, #1
 800a1d6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a1da:	697b      	ldr	r3, [r7, #20]
 800a1dc:	881b      	ldrh	r3, [r3, #0]
 800a1de:	b29a      	uxth	r2, r3
 800a1e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a1e4:	b29b      	uxth	r3, r3
 800a1e6:	029b      	lsls	r3, r3, #10
 800a1e8:	b29b      	uxth	r3, r3
 800a1ea:	4313      	orrs	r3, r2
 800a1ec:	b29b      	uxth	r3, r3
 800a1ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a1f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a1f6:	b29a      	uxth	r2, r3
 800a1f8:	697b      	ldr	r3, [r7, #20]
 800a1fa:	801a      	strh	r2, [r3, #0]
 800a1fc:	e056      	b.n	800a2ac <USB_EPStartXfer+0x51a>
 800a1fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a202:	2b00      	cmp	r3, #0
 800a204:	d10a      	bne.n	800a21c <USB_EPStartXfer+0x48a>
 800a206:	697b      	ldr	r3, [r7, #20]
 800a208:	881b      	ldrh	r3, [r3, #0]
 800a20a:	b29b      	uxth	r3, r3
 800a20c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a210:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a214:	b29a      	uxth	r2, r3
 800a216:	697b      	ldr	r3, [r7, #20]
 800a218:	801a      	strh	r2, [r3, #0]
 800a21a:	e047      	b.n	800a2ac <USB_EPStartXfer+0x51a>
 800a21c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a220:	085b      	lsrs	r3, r3, #1
 800a222:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a226:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a22a:	f003 0301 	and.w	r3, r3, #1
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d004      	beq.n	800a23c <USB_EPStartXfer+0x4aa>
 800a232:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a236:	3301      	adds	r3, #1
 800a238:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a23c:	697b      	ldr	r3, [r7, #20]
 800a23e:	881b      	ldrh	r3, [r3, #0]
 800a240:	b29a      	uxth	r2, r3
 800a242:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a246:	b29b      	uxth	r3, r3
 800a248:	029b      	lsls	r3, r3, #10
 800a24a:	b29b      	uxth	r3, r3
 800a24c:	4313      	orrs	r3, r2
 800a24e:	b29a      	uxth	r2, r3
 800a250:	697b      	ldr	r3, [r7, #20]
 800a252:	801a      	strh	r2, [r3, #0]
 800a254:	e02a      	b.n	800a2ac <USB_EPStartXfer+0x51a>
 800a256:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a25a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	785b      	ldrb	r3, [r3, #1]
 800a262:	2b01      	cmp	r3, #1
 800a264:	d122      	bne.n	800a2ac <USB_EPStartXfer+0x51a>
 800a266:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a26a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	623b      	str	r3, [r7, #32]
 800a272:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a276:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a280:	b29b      	uxth	r3, r3
 800a282:	461a      	mov	r2, r3
 800a284:	6a3b      	ldr	r3, [r7, #32]
 800a286:	4413      	add	r3, r2
 800a288:	623b      	str	r3, [r7, #32]
 800a28a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a28e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	781b      	ldrb	r3, [r3, #0]
 800a296:	00da      	lsls	r2, r3, #3
 800a298:	6a3b      	ldr	r3, [r7, #32]
 800a29a:	4413      	add	r3, r2
 800a29c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a2a0:	61fb      	str	r3, [r7, #28]
 800a2a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2a6:	b29a      	uxth	r2, r3
 800a2a8:	69fb      	ldr	r3, [r7, #28]
 800a2aa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a2ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	891b      	ldrh	r3, [r3, #8]
 800a2b8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a2bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	6959      	ldr	r1, [r3, #20]
 800a2c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2cc:	b29b      	uxth	r3, r3
 800a2ce:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a2d2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a2d6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a2da:	6800      	ldr	r0, [r0, #0]
 800a2dc:	f001 fa44 	bl	800b768 <USB_WritePMA>
 800a2e0:	e3ee      	b.n	800aac0 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a2e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	785b      	ldrb	r3, [r3, #1]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d177      	bne.n	800a3e2 <USB_EPStartXfer+0x650>
 800a2f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a2fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a302:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a30c:	b29b      	uxth	r3, r3
 800a30e:	461a      	mov	r2, r3
 800a310:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a312:	4413      	add	r3, r2
 800a314:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a316:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a31a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	781b      	ldrb	r3, [r3, #0]
 800a322:	00da      	lsls	r2, r3, #3
 800a324:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a326:	4413      	add	r3, r2
 800a328:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a32c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a32e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a330:	881b      	ldrh	r3, [r3, #0]
 800a332:	b29b      	uxth	r3, r3
 800a334:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a338:	b29a      	uxth	r2, r3
 800a33a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a33c:	801a      	strh	r2, [r3, #0]
 800a33e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a342:	2b3e      	cmp	r3, #62	@ 0x3e
 800a344:	d921      	bls.n	800a38a <USB_EPStartXfer+0x5f8>
 800a346:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a34a:	095b      	lsrs	r3, r3, #5
 800a34c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a350:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a354:	f003 031f 	and.w	r3, r3, #31
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d104      	bne.n	800a366 <USB_EPStartXfer+0x5d4>
 800a35c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a360:	3b01      	subs	r3, #1
 800a362:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a366:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a368:	881b      	ldrh	r3, [r3, #0]
 800a36a:	b29a      	uxth	r2, r3
 800a36c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a370:	b29b      	uxth	r3, r3
 800a372:	029b      	lsls	r3, r3, #10
 800a374:	b29b      	uxth	r3, r3
 800a376:	4313      	orrs	r3, r2
 800a378:	b29b      	uxth	r3, r3
 800a37a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a37e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a382:	b29a      	uxth	r2, r3
 800a384:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a386:	801a      	strh	r2, [r3, #0]
 800a388:	e056      	b.n	800a438 <USB_EPStartXfer+0x6a6>
 800a38a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d10a      	bne.n	800a3a8 <USB_EPStartXfer+0x616>
 800a392:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a394:	881b      	ldrh	r3, [r3, #0]
 800a396:	b29b      	uxth	r3, r3
 800a398:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a39c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3a0:	b29a      	uxth	r2, r3
 800a3a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a3a4:	801a      	strh	r2, [r3, #0]
 800a3a6:	e047      	b.n	800a438 <USB_EPStartXfer+0x6a6>
 800a3a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3ac:	085b      	lsrs	r3, r3, #1
 800a3ae:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a3b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3b6:	f003 0301 	and.w	r3, r3, #1
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d004      	beq.n	800a3c8 <USB_EPStartXfer+0x636>
 800a3be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a3c2:	3301      	adds	r3, #1
 800a3c4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a3c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a3ca:	881b      	ldrh	r3, [r3, #0]
 800a3cc:	b29a      	uxth	r2, r3
 800a3ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a3d2:	b29b      	uxth	r3, r3
 800a3d4:	029b      	lsls	r3, r3, #10
 800a3d6:	b29b      	uxth	r3, r3
 800a3d8:	4313      	orrs	r3, r2
 800a3da:	b29a      	uxth	r2, r3
 800a3dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a3de:	801a      	strh	r2, [r3, #0]
 800a3e0:	e02a      	b.n	800a438 <USB_EPStartXfer+0x6a6>
 800a3e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	785b      	ldrb	r3, [r3, #1]
 800a3ee:	2b01      	cmp	r3, #1
 800a3f0:	d122      	bne.n	800a438 <USB_EPStartXfer+0x6a6>
 800a3f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	653b      	str	r3, [r7, #80]	@ 0x50
 800a3fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a402:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a40c:	b29b      	uxth	r3, r3
 800a40e:	461a      	mov	r2, r3
 800a410:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a412:	4413      	add	r3, r2
 800a414:	653b      	str	r3, [r7, #80]	@ 0x50
 800a416:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a41a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	781b      	ldrb	r3, [r3, #0]
 800a422:	00da      	lsls	r2, r3, #3
 800a424:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a426:	4413      	add	r3, r2
 800a428:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a42c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a42e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a432:	b29a      	uxth	r2, r3
 800a434:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a436:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a438:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a43c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	891b      	ldrh	r3, [r3, #8]
 800a444:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a448:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a44c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	6959      	ldr	r1, [r3, #20]
 800a454:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a458:	b29b      	uxth	r3, r3
 800a45a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a45e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a462:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a466:	6800      	ldr	r0, [r0, #0]
 800a468:	f001 f97e 	bl	800b768 <USB_WritePMA>
            ep->xfer_buff += len;
 800a46c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a470:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	695a      	ldr	r2, [r3, #20]
 800a478:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a47c:	441a      	add	r2, r3
 800a47e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a482:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a48a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a48e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	6a1a      	ldr	r2, [r3, #32]
 800a496:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a49a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	691b      	ldr	r3, [r3, #16]
 800a4a2:	429a      	cmp	r2, r3
 800a4a4:	d90f      	bls.n	800a4c6 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800a4a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	6a1a      	ldr	r2, [r3, #32]
 800a4b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4b6:	1ad2      	subs	r2, r2, r3
 800a4b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	621a      	str	r2, [r3, #32]
 800a4c4:	e00e      	b.n	800a4e4 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800a4c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	6a1b      	ldr	r3, [r3, #32]
 800a4d2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800a4d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a4e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	643b      	str	r3, [r7, #64]	@ 0x40
 800a4f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	785b      	ldrb	r3, [r3, #1]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d177      	bne.n	800a5f0 <USB_EPStartXfer+0x85e>
 800a500:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a504:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a50c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a510:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a51a:	b29b      	uxth	r3, r3
 800a51c:	461a      	mov	r2, r3
 800a51e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a520:	4413      	add	r3, r2
 800a522:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a524:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a528:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	781b      	ldrb	r3, [r3, #0]
 800a530:	00da      	lsls	r2, r3, #3
 800a532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a534:	4413      	add	r3, r2
 800a536:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a53a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a53c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a53e:	881b      	ldrh	r3, [r3, #0]
 800a540:	b29b      	uxth	r3, r3
 800a542:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a546:	b29a      	uxth	r2, r3
 800a548:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a54a:	801a      	strh	r2, [r3, #0]
 800a54c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a550:	2b3e      	cmp	r3, #62	@ 0x3e
 800a552:	d921      	bls.n	800a598 <USB_EPStartXfer+0x806>
 800a554:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a558:	095b      	lsrs	r3, r3, #5
 800a55a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a55e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a562:	f003 031f 	and.w	r3, r3, #31
 800a566:	2b00      	cmp	r3, #0
 800a568:	d104      	bne.n	800a574 <USB_EPStartXfer+0x7e2>
 800a56a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a56e:	3b01      	subs	r3, #1
 800a570:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a574:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a576:	881b      	ldrh	r3, [r3, #0]
 800a578:	b29a      	uxth	r2, r3
 800a57a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a57e:	b29b      	uxth	r3, r3
 800a580:	029b      	lsls	r3, r3, #10
 800a582:	b29b      	uxth	r3, r3
 800a584:	4313      	orrs	r3, r2
 800a586:	b29b      	uxth	r3, r3
 800a588:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a58c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a590:	b29a      	uxth	r2, r3
 800a592:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a594:	801a      	strh	r2, [r3, #0]
 800a596:	e050      	b.n	800a63a <USB_EPStartXfer+0x8a8>
 800a598:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d10a      	bne.n	800a5b6 <USB_EPStartXfer+0x824>
 800a5a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5a2:	881b      	ldrh	r3, [r3, #0]
 800a5a4:	b29b      	uxth	r3, r3
 800a5a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5ae:	b29a      	uxth	r2, r3
 800a5b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5b2:	801a      	strh	r2, [r3, #0]
 800a5b4:	e041      	b.n	800a63a <USB_EPStartXfer+0x8a8>
 800a5b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5ba:	085b      	lsrs	r3, r3, #1
 800a5bc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a5c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5c4:	f003 0301 	and.w	r3, r3, #1
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d004      	beq.n	800a5d6 <USB_EPStartXfer+0x844>
 800a5cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5d0:	3301      	adds	r3, #1
 800a5d2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a5d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5d8:	881b      	ldrh	r3, [r3, #0]
 800a5da:	b29a      	uxth	r2, r3
 800a5dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5e0:	b29b      	uxth	r3, r3
 800a5e2:	029b      	lsls	r3, r3, #10
 800a5e4:	b29b      	uxth	r3, r3
 800a5e6:	4313      	orrs	r3, r2
 800a5e8:	b29a      	uxth	r2, r3
 800a5ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5ec:	801a      	strh	r2, [r3, #0]
 800a5ee:	e024      	b.n	800a63a <USB_EPStartXfer+0x8a8>
 800a5f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	785b      	ldrb	r3, [r3, #1]
 800a5fc:	2b01      	cmp	r3, #1
 800a5fe:	d11c      	bne.n	800a63a <USB_EPStartXfer+0x8a8>
 800a600:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a604:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a60e:	b29b      	uxth	r3, r3
 800a610:	461a      	mov	r2, r3
 800a612:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a614:	4413      	add	r3, r2
 800a616:	643b      	str	r3, [r7, #64]	@ 0x40
 800a618:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a61c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	781b      	ldrb	r3, [r3, #0]
 800a624:	00da      	lsls	r2, r3, #3
 800a626:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a628:	4413      	add	r3, r2
 800a62a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a62e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a630:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a634:	b29a      	uxth	r2, r3
 800a636:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a638:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a63a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a63e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	895b      	ldrh	r3, [r3, #10]
 800a646:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a64a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a64e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	6959      	ldr	r1, [r3, #20]
 800a656:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a65a:	b29b      	uxth	r3, r3
 800a65c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a660:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a664:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a668:	6800      	ldr	r0, [r0, #0]
 800a66a:	f001 f87d 	bl	800b768 <USB_WritePMA>
 800a66e:	e227      	b.n	800aac0 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800a670:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a674:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	6a1b      	ldr	r3, [r3, #32]
 800a67c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800a680:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a684:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a688:	681a      	ldr	r2, [r3, #0]
 800a68a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a68e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	781b      	ldrb	r3, [r3, #0]
 800a696:	009b      	lsls	r3, r3, #2
 800a698:	4413      	add	r3, r2
 800a69a:	881b      	ldrh	r3, [r3, #0]
 800a69c:	b29b      	uxth	r3, r3
 800a69e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800a6a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a6a6:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800a6aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a6b2:	681a      	ldr	r2, [r3, #0]
 800a6b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	781b      	ldrb	r3, [r3, #0]
 800a6c0:	009b      	lsls	r3, r3, #2
 800a6c2:	441a      	add	r2, r3
 800a6c4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800a6c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a6cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a6d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a6d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a6d8:	b29b      	uxth	r3, r3
 800a6da:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a6dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a6e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a6f6:	b29b      	uxth	r3, r3
 800a6f8:	461a      	mov	r2, r3
 800a6fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a6fc:	4413      	add	r3, r2
 800a6fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a700:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a704:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	781b      	ldrb	r3, [r3, #0]
 800a70c:	00da      	lsls	r2, r3, #3
 800a70e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a710:	4413      	add	r3, r2
 800a712:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a716:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a718:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a71c:	b29a      	uxth	r2, r3
 800a71e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a720:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a722:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a726:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	891b      	ldrh	r3, [r3, #8]
 800a72e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a732:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a736:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	6959      	ldr	r1, [r3, #20]
 800a73e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a742:	b29b      	uxth	r3, r3
 800a744:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a748:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a74c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a750:	6800      	ldr	r0, [r0, #0]
 800a752:	f001 f809 	bl	800b768 <USB_WritePMA>
 800a756:	e1b3      	b.n	800aac0 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800a758:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a75c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	6a1a      	ldr	r2, [r3, #32]
 800a764:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a768:	1ad2      	subs	r2, r2, r3
 800a76a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a76e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a776:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a77a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a77e:	681a      	ldr	r2, [r3, #0]
 800a780:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a784:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	781b      	ldrb	r3, [r3, #0]
 800a78c:	009b      	lsls	r3, r3, #2
 800a78e:	4413      	add	r3, r2
 800a790:	881b      	ldrh	r3, [r3, #0]
 800a792:	b29b      	uxth	r3, r3
 800a794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a798:	2b00      	cmp	r3, #0
 800a79a:	f000 80c6 	beq.w	800a92a <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a79e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	673b      	str	r3, [r7, #112]	@ 0x70
 800a7aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	785b      	ldrb	r3, [r3, #1]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d177      	bne.n	800a8aa <USB_EPStartXfer+0xb18>
 800a7ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a7c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a7d4:	b29b      	uxth	r3, r3
 800a7d6:	461a      	mov	r2, r3
 800a7d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a7da:	4413      	add	r3, r2
 800a7dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a7de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	781b      	ldrb	r3, [r3, #0]
 800a7ea:	00da      	lsls	r2, r3, #3
 800a7ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a7ee:	4413      	add	r3, r2
 800a7f0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a7f4:	667b      	str	r3, [r7, #100]	@ 0x64
 800a7f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a7f8:	881b      	ldrh	r3, [r3, #0]
 800a7fa:	b29b      	uxth	r3, r3
 800a7fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a800:	b29a      	uxth	r2, r3
 800a802:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a804:	801a      	strh	r2, [r3, #0]
 800a806:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a80a:	2b3e      	cmp	r3, #62	@ 0x3e
 800a80c:	d921      	bls.n	800a852 <USB_EPStartXfer+0xac0>
 800a80e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a812:	095b      	lsrs	r3, r3, #5
 800a814:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a818:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a81c:	f003 031f 	and.w	r3, r3, #31
 800a820:	2b00      	cmp	r3, #0
 800a822:	d104      	bne.n	800a82e <USB_EPStartXfer+0xa9c>
 800a824:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a828:	3b01      	subs	r3, #1
 800a82a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a82e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a830:	881b      	ldrh	r3, [r3, #0]
 800a832:	b29a      	uxth	r2, r3
 800a834:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a838:	b29b      	uxth	r3, r3
 800a83a:	029b      	lsls	r3, r3, #10
 800a83c:	b29b      	uxth	r3, r3
 800a83e:	4313      	orrs	r3, r2
 800a840:	b29b      	uxth	r3, r3
 800a842:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a846:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a84a:	b29a      	uxth	r2, r3
 800a84c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a84e:	801a      	strh	r2, [r3, #0]
 800a850:	e050      	b.n	800a8f4 <USB_EPStartXfer+0xb62>
 800a852:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a856:	2b00      	cmp	r3, #0
 800a858:	d10a      	bne.n	800a870 <USB_EPStartXfer+0xade>
 800a85a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a85c:	881b      	ldrh	r3, [r3, #0]
 800a85e:	b29b      	uxth	r3, r3
 800a860:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a864:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a868:	b29a      	uxth	r2, r3
 800a86a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a86c:	801a      	strh	r2, [r3, #0]
 800a86e:	e041      	b.n	800a8f4 <USB_EPStartXfer+0xb62>
 800a870:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a874:	085b      	lsrs	r3, r3, #1
 800a876:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a87a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a87e:	f003 0301 	and.w	r3, r3, #1
 800a882:	2b00      	cmp	r3, #0
 800a884:	d004      	beq.n	800a890 <USB_EPStartXfer+0xafe>
 800a886:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a88a:	3301      	adds	r3, #1
 800a88c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a890:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a892:	881b      	ldrh	r3, [r3, #0]
 800a894:	b29a      	uxth	r2, r3
 800a896:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a89a:	b29b      	uxth	r3, r3
 800a89c:	029b      	lsls	r3, r3, #10
 800a89e:	b29b      	uxth	r3, r3
 800a8a0:	4313      	orrs	r3, r2
 800a8a2:	b29a      	uxth	r2, r3
 800a8a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a8a6:	801a      	strh	r2, [r3, #0]
 800a8a8:	e024      	b.n	800a8f4 <USB_EPStartXfer+0xb62>
 800a8aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	785b      	ldrb	r3, [r3, #1]
 800a8b6:	2b01      	cmp	r3, #1
 800a8b8:	d11c      	bne.n	800a8f4 <USB_EPStartXfer+0xb62>
 800a8ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a8c8:	b29b      	uxth	r3, r3
 800a8ca:	461a      	mov	r2, r3
 800a8cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a8ce:	4413      	add	r3, r2
 800a8d0:	673b      	str	r3, [r7, #112]	@ 0x70
 800a8d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	781b      	ldrb	r3, [r3, #0]
 800a8de:	00da      	lsls	r2, r3, #3
 800a8e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a8e2:	4413      	add	r3, r2
 800a8e4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a8e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a8ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8ee:	b29a      	uxth	r2, r3
 800a8f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a8f2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800a8f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	895b      	ldrh	r3, [r3, #10]
 800a900:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a904:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a908:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	6959      	ldr	r1, [r3, #20]
 800a910:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a914:	b29b      	uxth	r3, r3
 800a916:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a91a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a91e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a922:	6800      	ldr	r0, [r0, #0]
 800a924:	f000 ff20 	bl	800b768 <USB_WritePMA>
 800a928:	e0ca      	b.n	800aac0 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a92a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a92e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	785b      	ldrb	r3, [r3, #1]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d177      	bne.n	800aa2a <USB_EPStartXfer+0xc98>
 800a93a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a93e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a946:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a94a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a954:	b29b      	uxth	r3, r3
 800a956:	461a      	mov	r2, r3
 800a958:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a95a:	4413      	add	r3, r2
 800a95c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a95e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a962:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	781b      	ldrb	r3, [r3, #0]
 800a96a:	00da      	lsls	r2, r3, #3
 800a96c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a96e:	4413      	add	r3, r2
 800a970:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a974:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a976:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a978:	881b      	ldrh	r3, [r3, #0]
 800a97a:	b29b      	uxth	r3, r3
 800a97c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a980:	b29a      	uxth	r2, r3
 800a982:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a984:	801a      	strh	r2, [r3, #0]
 800a986:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a98a:	2b3e      	cmp	r3, #62	@ 0x3e
 800a98c:	d921      	bls.n	800a9d2 <USB_EPStartXfer+0xc40>
 800a98e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a992:	095b      	lsrs	r3, r3, #5
 800a994:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a998:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a99c:	f003 031f 	and.w	r3, r3, #31
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d104      	bne.n	800a9ae <USB_EPStartXfer+0xc1c>
 800a9a4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a9a8:	3b01      	subs	r3, #1
 800a9aa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a9ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a9b0:	881b      	ldrh	r3, [r3, #0]
 800a9b2:	b29a      	uxth	r2, r3
 800a9b4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a9b8:	b29b      	uxth	r3, r3
 800a9ba:	029b      	lsls	r3, r3, #10
 800a9bc:	b29b      	uxth	r3, r3
 800a9be:	4313      	orrs	r3, r2
 800a9c0:	b29b      	uxth	r3, r3
 800a9c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9ca:	b29a      	uxth	r2, r3
 800a9cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a9ce:	801a      	strh	r2, [r3, #0]
 800a9d0:	e05c      	b.n	800aa8c <USB_EPStartXfer+0xcfa>
 800a9d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d10a      	bne.n	800a9f0 <USB_EPStartXfer+0xc5e>
 800a9da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a9dc:	881b      	ldrh	r3, [r3, #0]
 800a9de:	b29b      	uxth	r3, r3
 800a9e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9e8:	b29a      	uxth	r2, r3
 800a9ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a9ec:	801a      	strh	r2, [r3, #0]
 800a9ee:	e04d      	b.n	800aa8c <USB_EPStartXfer+0xcfa>
 800a9f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9f4:	085b      	lsrs	r3, r3, #1
 800a9f6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a9fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9fe:	f003 0301 	and.w	r3, r3, #1
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d004      	beq.n	800aa10 <USB_EPStartXfer+0xc7e>
 800aa06:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800aa0a:	3301      	adds	r3, #1
 800aa0c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800aa10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800aa12:	881b      	ldrh	r3, [r3, #0]
 800aa14:	b29a      	uxth	r2, r3
 800aa16:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800aa1a:	b29b      	uxth	r3, r3
 800aa1c:	029b      	lsls	r3, r3, #10
 800aa1e:	b29b      	uxth	r3, r3
 800aa20:	4313      	orrs	r3, r2
 800aa22:	b29a      	uxth	r2, r3
 800aa24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800aa26:	801a      	strh	r2, [r3, #0]
 800aa28:	e030      	b.n	800aa8c <USB_EPStartXfer+0xcfa>
 800aa2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	785b      	ldrb	r3, [r3, #1]
 800aa36:	2b01      	cmp	r3, #1
 800aa38:	d128      	bne.n	800aa8c <USB_EPStartXfer+0xcfa>
 800aa3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800aa48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aa56:	b29b      	uxth	r3, r3
 800aa58:	461a      	mov	r2, r3
 800aa5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800aa5e:	4413      	add	r3, r2
 800aa60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800aa64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	781b      	ldrb	r3, [r3, #0]
 800aa70:	00da      	lsls	r2, r3, #3
 800aa72:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800aa76:	4413      	add	r3, r2
 800aa78:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800aa7c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800aa80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa84:	b29a      	uxth	r2, r3
 800aa86:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800aa8a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800aa8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	891b      	ldrh	r3, [r3, #8]
 800aa98:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800aa9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aaa0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	6959      	ldr	r1, [r3, #20]
 800aaa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aaac:	b29b      	uxth	r3, r3
 800aaae:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800aab2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800aab6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800aaba:	6800      	ldr	r0, [r0, #0]
 800aabc:	f000 fe54 	bl	800b768 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800aac0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aac4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aac8:	681a      	ldr	r2, [r3, #0]
 800aaca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aace:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	781b      	ldrb	r3, [r3, #0]
 800aad6:	009b      	lsls	r3, r3, #2
 800aad8:	4413      	add	r3, r2
 800aada:	881b      	ldrh	r3, [r3, #0]
 800aadc:	b29b      	uxth	r3, r3
 800aade:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aae2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aae6:	817b      	strh	r3, [r7, #10]
 800aae8:	897b      	ldrh	r3, [r7, #10]
 800aaea:	f083 0310 	eor.w	r3, r3, #16
 800aaee:	817b      	strh	r3, [r7, #10]
 800aaf0:	897b      	ldrh	r3, [r7, #10]
 800aaf2:	f083 0320 	eor.w	r3, r3, #32
 800aaf6:	817b      	strh	r3, [r7, #10]
 800aaf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aafc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ab00:	681a      	ldr	r2, [r3, #0]
 800ab02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	781b      	ldrb	r3, [r3, #0]
 800ab0e:	009b      	lsls	r3, r3, #2
 800ab10:	441a      	add	r2, r3
 800ab12:	897b      	ldrh	r3, [r7, #10]
 800ab14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ab18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ab1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ab20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab24:	b29b      	uxth	r3, r3
 800ab26:	8013      	strh	r3, [r2, #0]
 800ab28:	f000 bcde 	b.w	800b4e8 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800ab2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	7b1b      	ldrb	r3, [r3, #12]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	f040 80bb 	bne.w	800acb4 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800ab3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	699a      	ldr	r2, [r3, #24]
 800ab4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	691b      	ldr	r3, [r3, #16]
 800ab56:	429a      	cmp	r2, r3
 800ab58:	d917      	bls.n	800ab8a <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800ab5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	691b      	ldr	r3, [r3, #16]
 800ab66:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800ab6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	699a      	ldr	r2, [r3, #24]
 800ab76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab7a:	1ad2      	subs	r2, r2, r3
 800ab7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	619a      	str	r2, [r3, #24]
 800ab88:	e00e      	b.n	800aba8 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800ab8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	699b      	ldr	r3, [r3, #24]
 800ab96:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800ab9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	2200      	movs	r2, #0
 800aba6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800aba8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800abac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800abb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800abba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800abc4:	b29b      	uxth	r3, r3
 800abc6:	461a      	mov	r2, r3
 800abc8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800abcc:	4413      	add	r3, r2
 800abce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800abd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800abd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	781b      	ldrb	r3, [r3, #0]
 800abde:	00da      	lsls	r2, r3, #3
 800abe0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800abe4:	4413      	add	r3, r2
 800abe6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800abea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800abee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800abf2:	881b      	ldrh	r3, [r3, #0]
 800abf4:	b29b      	uxth	r3, r3
 800abf6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800abfa:	b29a      	uxth	r2, r3
 800abfc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ac00:	801a      	strh	r2, [r3, #0]
 800ac02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac06:	2b3e      	cmp	r3, #62	@ 0x3e
 800ac08:	d924      	bls.n	800ac54 <USB_EPStartXfer+0xec2>
 800ac0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac0e:	095b      	lsrs	r3, r3, #5
 800ac10:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800ac14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac18:	f003 031f 	and.w	r3, r3, #31
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d104      	bne.n	800ac2a <USB_EPStartXfer+0xe98>
 800ac20:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800ac24:	3b01      	subs	r3, #1
 800ac26:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800ac2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ac2e:	881b      	ldrh	r3, [r3, #0]
 800ac30:	b29a      	uxth	r2, r3
 800ac32:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800ac36:	b29b      	uxth	r3, r3
 800ac38:	029b      	lsls	r3, r3, #10
 800ac3a:	b29b      	uxth	r3, r3
 800ac3c:	4313      	orrs	r3, r2
 800ac3e:	b29b      	uxth	r3, r3
 800ac40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac48:	b29a      	uxth	r2, r3
 800ac4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ac4e:	801a      	strh	r2, [r3, #0]
 800ac50:	f000 bc10 	b.w	800b474 <USB_EPStartXfer+0x16e2>
 800ac54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d10c      	bne.n	800ac76 <USB_EPStartXfer+0xee4>
 800ac5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ac60:	881b      	ldrh	r3, [r3, #0]
 800ac62:	b29b      	uxth	r3, r3
 800ac64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac6c:	b29a      	uxth	r2, r3
 800ac6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ac72:	801a      	strh	r2, [r3, #0]
 800ac74:	e3fe      	b.n	800b474 <USB_EPStartXfer+0x16e2>
 800ac76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac7a:	085b      	lsrs	r3, r3, #1
 800ac7c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800ac80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac84:	f003 0301 	and.w	r3, r3, #1
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d004      	beq.n	800ac96 <USB_EPStartXfer+0xf04>
 800ac8c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800ac90:	3301      	adds	r3, #1
 800ac92:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800ac96:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ac9a:	881b      	ldrh	r3, [r3, #0]
 800ac9c:	b29a      	uxth	r2, r3
 800ac9e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800aca2:	b29b      	uxth	r3, r3
 800aca4:	029b      	lsls	r3, r3, #10
 800aca6:	b29b      	uxth	r3, r3
 800aca8:	4313      	orrs	r3, r2
 800acaa:	b29a      	uxth	r2, r3
 800acac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800acb0:	801a      	strh	r2, [r3, #0]
 800acb2:	e3df      	b.n	800b474 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800acb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800acb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	78db      	ldrb	r3, [r3, #3]
 800acc0:	2b02      	cmp	r3, #2
 800acc2:	f040 8218 	bne.w	800b0f6 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800acc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800acca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	785b      	ldrb	r3, [r3, #1]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	f040 809d 	bne.w	800ae12 <USB_EPStartXfer+0x1080>
 800acd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800acdc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ace6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800acea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800acf4:	b29b      	uxth	r3, r3
 800acf6:	461a      	mov	r2, r3
 800acf8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800acfc:	4413      	add	r3, r2
 800acfe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ad02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	781b      	ldrb	r3, [r3, #0]
 800ad0e:	00da      	lsls	r2, r3, #3
 800ad10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ad14:	4413      	add	r3, r2
 800ad16:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ad1a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ad1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ad22:	881b      	ldrh	r3, [r3, #0]
 800ad24:	b29b      	uxth	r3, r3
 800ad26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ad2a:	b29a      	uxth	r2, r3
 800ad2c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ad30:	801a      	strh	r2, [r3, #0]
 800ad32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	691b      	ldr	r3, [r3, #16]
 800ad3e:	2b3e      	cmp	r3, #62	@ 0x3e
 800ad40:	d92b      	bls.n	800ad9a <USB_EPStartXfer+0x1008>
 800ad42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	691b      	ldr	r3, [r3, #16]
 800ad4e:	095b      	lsrs	r3, r3, #5
 800ad50:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800ad54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	691b      	ldr	r3, [r3, #16]
 800ad60:	f003 031f 	and.w	r3, r3, #31
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d104      	bne.n	800ad72 <USB_EPStartXfer+0xfe0>
 800ad68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad6c:	3b01      	subs	r3, #1
 800ad6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800ad72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ad76:	881b      	ldrh	r3, [r3, #0]
 800ad78:	b29a      	uxth	r2, r3
 800ad7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad7e:	b29b      	uxth	r3, r3
 800ad80:	029b      	lsls	r3, r3, #10
 800ad82:	b29b      	uxth	r3, r3
 800ad84:	4313      	orrs	r3, r2
 800ad86:	b29b      	uxth	r3, r3
 800ad88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad90:	b29a      	uxth	r2, r3
 800ad92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ad96:	801a      	strh	r2, [r3, #0]
 800ad98:	e070      	b.n	800ae7c <USB_EPStartXfer+0x10ea>
 800ad9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	691b      	ldr	r3, [r3, #16]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d10c      	bne.n	800adc4 <USB_EPStartXfer+0x1032>
 800adaa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800adae:	881b      	ldrh	r3, [r3, #0]
 800adb0:	b29b      	uxth	r3, r3
 800adb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800adb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800adba:	b29a      	uxth	r2, r3
 800adbc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800adc0:	801a      	strh	r2, [r3, #0]
 800adc2:	e05b      	b.n	800ae7c <USB_EPStartXfer+0x10ea>
 800adc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800adc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	691b      	ldr	r3, [r3, #16]
 800add0:	085b      	lsrs	r3, r3, #1
 800add2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800add6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800adda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	691b      	ldr	r3, [r3, #16]
 800ade2:	f003 0301 	and.w	r3, r3, #1
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d004      	beq.n	800adf4 <USB_EPStartXfer+0x1062>
 800adea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800adee:	3301      	adds	r3, #1
 800adf0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800adf4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800adf8:	881b      	ldrh	r3, [r3, #0]
 800adfa:	b29a      	uxth	r2, r3
 800adfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae00:	b29b      	uxth	r3, r3
 800ae02:	029b      	lsls	r3, r3, #10
 800ae04:	b29b      	uxth	r3, r3
 800ae06:	4313      	orrs	r3, r2
 800ae08:	b29a      	uxth	r2, r3
 800ae0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ae0e:	801a      	strh	r2, [r3, #0]
 800ae10:	e034      	b.n	800ae7c <USB_EPStartXfer+0x10ea>
 800ae12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	785b      	ldrb	r3, [r3, #1]
 800ae1e:	2b01      	cmp	r3, #1
 800ae20:	d12c      	bne.n	800ae7c <USB_EPStartXfer+0x10ea>
 800ae22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ae30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae34:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ae3e:	b29b      	uxth	r3, r3
 800ae40:	461a      	mov	r2, r3
 800ae42:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ae46:	4413      	add	r3, r2
 800ae48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ae4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	781b      	ldrb	r3, [r3, #0]
 800ae58:	00da      	lsls	r2, r3, #3
 800ae5a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ae5e:	4413      	add	r3, r2
 800ae60:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ae64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ae68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	691b      	ldr	r3, [r3, #16]
 800ae74:	b29a      	uxth	r2, r3
 800ae76:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800ae7a:	801a      	strh	r2, [r3, #0]
 800ae7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae80:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ae8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	785b      	ldrb	r3, [r3, #1]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	f040 809d 	bne.w	800afd6 <USB_EPStartXfer+0x1244>
 800ae9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aea0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800aeaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aeae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aeb8:	b29b      	uxth	r3, r3
 800aeba:	461a      	mov	r2, r3
 800aebc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800aec0:	4413      	add	r3, r2
 800aec2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800aec6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aeca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	781b      	ldrb	r3, [r3, #0]
 800aed2:	00da      	lsls	r2, r3, #3
 800aed4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800aed8:	4413      	add	r3, r2
 800aeda:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800aede:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800aee2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800aee6:	881b      	ldrh	r3, [r3, #0]
 800aee8:	b29b      	uxth	r3, r3
 800aeea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aeee:	b29a      	uxth	r2, r3
 800aef0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800aef4:	801a      	strh	r2, [r3, #0]
 800aef6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aefa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	691b      	ldr	r3, [r3, #16]
 800af02:	2b3e      	cmp	r3, #62	@ 0x3e
 800af04:	d92b      	bls.n	800af5e <USB_EPStartXfer+0x11cc>
 800af06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	691b      	ldr	r3, [r3, #16]
 800af12:	095b      	lsrs	r3, r3, #5
 800af14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800af18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	691b      	ldr	r3, [r3, #16]
 800af24:	f003 031f 	and.w	r3, r3, #31
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d104      	bne.n	800af36 <USB_EPStartXfer+0x11a4>
 800af2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800af30:	3b01      	subs	r3, #1
 800af32:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800af36:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800af3a:	881b      	ldrh	r3, [r3, #0]
 800af3c:	b29a      	uxth	r2, r3
 800af3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800af42:	b29b      	uxth	r3, r3
 800af44:	029b      	lsls	r3, r3, #10
 800af46:	b29b      	uxth	r3, r3
 800af48:	4313      	orrs	r3, r2
 800af4a:	b29b      	uxth	r3, r3
 800af4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af54:	b29a      	uxth	r2, r3
 800af56:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800af5a:	801a      	strh	r2, [r3, #0]
 800af5c:	e069      	b.n	800b032 <USB_EPStartXfer+0x12a0>
 800af5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	691b      	ldr	r3, [r3, #16]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d10c      	bne.n	800af88 <USB_EPStartXfer+0x11f6>
 800af6e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800af72:	881b      	ldrh	r3, [r3, #0]
 800af74:	b29b      	uxth	r3, r3
 800af76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af7e:	b29a      	uxth	r2, r3
 800af80:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800af84:	801a      	strh	r2, [r3, #0]
 800af86:	e054      	b.n	800b032 <USB_EPStartXfer+0x12a0>
 800af88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	691b      	ldr	r3, [r3, #16]
 800af94:	085b      	lsrs	r3, r3, #1
 800af96:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800af9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	691b      	ldr	r3, [r3, #16]
 800afa6:	f003 0301 	and.w	r3, r3, #1
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d004      	beq.n	800afb8 <USB_EPStartXfer+0x1226>
 800afae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800afb2:	3301      	adds	r3, #1
 800afb4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800afb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800afbc:	881b      	ldrh	r3, [r3, #0]
 800afbe:	b29a      	uxth	r2, r3
 800afc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800afc4:	b29b      	uxth	r3, r3
 800afc6:	029b      	lsls	r3, r3, #10
 800afc8:	b29b      	uxth	r3, r3
 800afca:	4313      	orrs	r3, r2
 800afcc:	b29a      	uxth	r2, r3
 800afce:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800afd2:	801a      	strh	r2, [r3, #0]
 800afd4:	e02d      	b.n	800b032 <USB_EPStartXfer+0x12a0>
 800afd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800afda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	785b      	ldrb	r3, [r3, #1]
 800afe2:	2b01      	cmp	r3, #1
 800afe4:	d125      	bne.n	800b032 <USB_EPStartXfer+0x12a0>
 800afe6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800afea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aff4:	b29b      	uxth	r3, r3
 800aff6:	461a      	mov	r2, r3
 800aff8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800affc:	4413      	add	r3, r2
 800affe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b002:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b006:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	781b      	ldrb	r3, [r3, #0]
 800b00e:	00da      	lsls	r2, r3, #3
 800b010:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b014:	4413      	add	r3, r2
 800b016:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b01a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b01e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b022:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	691b      	ldr	r3, [r3, #16]
 800b02a:	b29a      	uxth	r2, r3
 800b02c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b030:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800b032:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b036:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	69db      	ldr	r3, [r3, #28]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	f000 8218 	beq.w	800b474 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800b044:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b048:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b04c:	681a      	ldr	r2, [r3, #0]
 800b04e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b052:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	781b      	ldrb	r3, [r3, #0]
 800b05a:	009b      	lsls	r3, r3, #2
 800b05c:	4413      	add	r3, r2
 800b05e:	881b      	ldrh	r3, [r3, #0]
 800b060:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b064:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b068:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d005      	beq.n	800b07c <USB_EPStartXfer+0x12ea>
 800b070:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b074:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d10d      	bne.n	800b098 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b07c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b080:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b084:	2b00      	cmp	r3, #0
 800b086:	f040 81f5 	bne.w	800b474 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b08a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b08e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b092:	2b00      	cmp	r3, #0
 800b094:	f040 81ee 	bne.w	800b474 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800b098:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b09c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b0a0:	681a      	ldr	r2, [r3, #0]
 800b0a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	781b      	ldrb	r3, [r3, #0]
 800b0ae:	009b      	lsls	r3, r3, #2
 800b0b0:	4413      	add	r3, r2
 800b0b2:	881b      	ldrh	r3, [r3, #0]
 800b0b4:	b29b      	uxth	r3, r3
 800b0b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b0ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b0be:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800b0c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b0ca:	681a      	ldr	r2, [r3, #0]
 800b0cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	781b      	ldrb	r3, [r3, #0]
 800b0d8:	009b      	lsls	r3, r3, #2
 800b0da:	441a      	add	r2, r3
 800b0dc:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800b0e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b0e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b0e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b0ec:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b0f0:	b29b      	uxth	r3, r3
 800b0f2:	8013      	strh	r3, [r2, #0]
 800b0f4:	e1be      	b.n	800b474 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800b0f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	78db      	ldrb	r3, [r3, #3]
 800b102:	2b01      	cmp	r3, #1
 800b104:	f040 81b4 	bne.w	800b470 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800b108:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b10c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	699a      	ldr	r2, [r3, #24]
 800b114:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b118:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	691b      	ldr	r3, [r3, #16]
 800b120:	429a      	cmp	r2, r3
 800b122:	d917      	bls.n	800b154 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800b124:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b128:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	691b      	ldr	r3, [r3, #16]
 800b130:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800b134:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b138:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	699a      	ldr	r2, [r3, #24]
 800b140:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b144:	1ad2      	subs	r2, r2, r3
 800b146:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b14a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	619a      	str	r2, [r3, #24]
 800b152:	e00e      	b.n	800b172 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800b154:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b158:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	699b      	ldr	r3, [r3, #24]
 800b160:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800b164:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b168:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	2200      	movs	r2, #0
 800b170:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800b172:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b176:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	785b      	ldrb	r3, [r3, #1]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	f040 8085 	bne.w	800b28e <USB_EPStartXfer+0x14fc>
 800b184:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b188:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b192:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b196:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b1a0:	b29b      	uxth	r3, r3
 800b1a2:	461a      	mov	r2, r3
 800b1a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800b1a8:	4413      	add	r3, r2
 800b1aa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b1ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b1b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	781b      	ldrb	r3, [r3, #0]
 800b1ba:	00da      	lsls	r2, r3, #3
 800b1bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800b1c0:	4413      	add	r3, r2
 800b1c2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b1c6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b1ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b1ce:	881b      	ldrh	r3, [r3, #0]
 800b1d0:	b29b      	uxth	r3, r3
 800b1d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b1d6:	b29a      	uxth	r2, r3
 800b1d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b1dc:	801a      	strh	r2, [r3, #0]
 800b1de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b1e2:	2b3e      	cmp	r3, #62	@ 0x3e
 800b1e4:	d923      	bls.n	800b22e <USB_EPStartXfer+0x149c>
 800b1e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b1ea:	095b      	lsrs	r3, r3, #5
 800b1ec:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b1f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b1f4:	f003 031f 	and.w	r3, r3, #31
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d104      	bne.n	800b206 <USB_EPStartXfer+0x1474>
 800b1fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b200:	3b01      	subs	r3, #1
 800b202:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b206:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b20a:	881b      	ldrh	r3, [r3, #0]
 800b20c:	b29a      	uxth	r2, r3
 800b20e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b212:	b29b      	uxth	r3, r3
 800b214:	029b      	lsls	r3, r3, #10
 800b216:	b29b      	uxth	r3, r3
 800b218:	4313      	orrs	r3, r2
 800b21a:	b29b      	uxth	r3, r3
 800b21c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b220:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b224:	b29a      	uxth	r2, r3
 800b226:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b22a:	801a      	strh	r2, [r3, #0]
 800b22c:	e060      	b.n	800b2f0 <USB_EPStartXfer+0x155e>
 800b22e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b232:	2b00      	cmp	r3, #0
 800b234:	d10c      	bne.n	800b250 <USB_EPStartXfer+0x14be>
 800b236:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b23a:	881b      	ldrh	r3, [r3, #0]
 800b23c:	b29b      	uxth	r3, r3
 800b23e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b242:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b246:	b29a      	uxth	r2, r3
 800b248:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b24c:	801a      	strh	r2, [r3, #0]
 800b24e:	e04f      	b.n	800b2f0 <USB_EPStartXfer+0x155e>
 800b250:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b254:	085b      	lsrs	r3, r3, #1
 800b256:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b25a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b25e:	f003 0301 	and.w	r3, r3, #1
 800b262:	2b00      	cmp	r3, #0
 800b264:	d004      	beq.n	800b270 <USB_EPStartXfer+0x14de>
 800b266:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b26a:	3301      	adds	r3, #1
 800b26c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b270:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b274:	881b      	ldrh	r3, [r3, #0]
 800b276:	b29a      	uxth	r2, r3
 800b278:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b27c:	b29b      	uxth	r3, r3
 800b27e:	029b      	lsls	r3, r3, #10
 800b280:	b29b      	uxth	r3, r3
 800b282:	4313      	orrs	r3, r2
 800b284:	b29a      	uxth	r2, r3
 800b286:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b28a:	801a      	strh	r2, [r3, #0]
 800b28c:	e030      	b.n	800b2f0 <USB_EPStartXfer+0x155e>
 800b28e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b292:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	785b      	ldrb	r3, [r3, #1]
 800b29a:	2b01      	cmp	r3, #1
 800b29c:	d128      	bne.n	800b2f0 <USB_EPStartXfer+0x155e>
 800b29e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b2a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800b2ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b2b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b2ba:	b29b      	uxth	r3, r3
 800b2bc:	461a      	mov	r2, r3
 800b2be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b2c2:	4413      	add	r3, r2
 800b2c4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800b2c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b2cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	781b      	ldrb	r3, [r3, #0]
 800b2d4:	00da      	lsls	r2, r3, #3
 800b2d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b2da:	4413      	add	r3, r2
 800b2dc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b2e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b2e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b2e8:	b29a      	uxth	r2, r3
 800b2ea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800b2ee:	801a      	strh	r2, [r3, #0]
 800b2f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b2f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b2fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b302:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	785b      	ldrb	r3, [r3, #1]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	f040 8085 	bne.w	800b41a <USB_EPStartXfer+0x1688>
 800b310:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b314:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800b31e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b322:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b32c:	b29b      	uxth	r3, r3
 800b32e:	461a      	mov	r2, r3
 800b330:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800b334:	4413      	add	r3, r2
 800b336:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800b33a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b33e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	781b      	ldrb	r3, [r3, #0]
 800b346:	00da      	lsls	r2, r3, #3
 800b348:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800b34c:	4413      	add	r3, r2
 800b34e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b352:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b356:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b35a:	881b      	ldrh	r3, [r3, #0]
 800b35c:	b29b      	uxth	r3, r3
 800b35e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b362:	b29a      	uxth	r2, r3
 800b364:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b368:	801a      	strh	r2, [r3, #0]
 800b36a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b36e:	2b3e      	cmp	r3, #62	@ 0x3e
 800b370:	d923      	bls.n	800b3ba <USB_EPStartXfer+0x1628>
 800b372:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b376:	095b      	lsrs	r3, r3, #5
 800b378:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b37c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b380:	f003 031f 	and.w	r3, r3, #31
 800b384:	2b00      	cmp	r3, #0
 800b386:	d104      	bne.n	800b392 <USB_EPStartXfer+0x1600>
 800b388:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b38c:	3b01      	subs	r3, #1
 800b38e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b392:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b396:	881b      	ldrh	r3, [r3, #0]
 800b398:	b29a      	uxth	r2, r3
 800b39a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b39e:	b29b      	uxth	r3, r3
 800b3a0:	029b      	lsls	r3, r3, #10
 800b3a2:	b29b      	uxth	r3, r3
 800b3a4:	4313      	orrs	r3, r2
 800b3a6:	b29b      	uxth	r3, r3
 800b3a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b3ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b3b0:	b29a      	uxth	r2, r3
 800b3b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b3b6:	801a      	strh	r2, [r3, #0]
 800b3b8:	e05c      	b.n	800b474 <USB_EPStartXfer+0x16e2>
 800b3ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d10c      	bne.n	800b3dc <USB_EPStartXfer+0x164a>
 800b3c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b3c6:	881b      	ldrh	r3, [r3, #0]
 800b3c8:	b29b      	uxth	r3, r3
 800b3ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b3ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b3d2:	b29a      	uxth	r2, r3
 800b3d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b3d8:	801a      	strh	r2, [r3, #0]
 800b3da:	e04b      	b.n	800b474 <USB_EPStartXfer+0x16e2>
 800b3dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b3e0:	085b      	lsrs	r3, r3, #1
 800b3e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b3e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b3ea:	f003 0301 	and.w	r3, r3, #1
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d004      	beq.n	800b3fc <USB_EPStartXfer+0x166a>
 800b3f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b3f6:	3301      	adds	r3, #1
 800b3f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b3fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b400:	881b      	ldrh	r3, [r3, #0]
 800b402:	b29a      	uxth	r2, r3
 800b404:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b408:	b29b      	uxth	r3, r3
 800b40a:	029b      	lsls	r3, r3, #10
 800b40c:	b29b      	uxth	r3, r3
 800b40e:	4313      	orrs	r3, r2
 800b410:	b29a      	uxth	r2, r3
 800b412:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b416:	801a      	strh	r2, [r3, #0]
 800b418:	e02c      	b.n	800b474 <USB_EPStartXfer+0x16e2>
 800b41a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b41e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	785b      	ldrb	r3, [r3, #1]
 800b426:	2b01      	cmp	r3, #1
 800b428:	d124      	bne.n	800b474 <USB_EPStartXfer+0x16e2>
 800b42a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b42e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b438:	b29b      	uxth	r3, r3
 800b43a:	461a      	mov	r2, r3
 800b43c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b440:	4413      	add	r3, r2
 800b442:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b446:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b44a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	781b      	ldrb	r3, [r3, #0]
 800b452:	00da      	lsls	r2, r3, #3
 800b454:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b458:	4413      	add	r3, r2
 800b45a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b45e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b462:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b466:	b29a      	uxth	r2, r3
 800b468:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b46c:	801a      	strh	r2, [r3, #0]
 800b46e:	e001      	b.n	800b474 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800b470:	2301      	movs	r3, #1
 800b472:	e03a      	b.n	800b4ea <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b474:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b478:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b47c:	681a      	ldr	r2, [r3, #0]
 800b47e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b482:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	781b      	ldrb	r3, [r3, #0]
 800b48a:	009b      	lsls	r3, r3, #2
 800b48c:	4413      	add	r3, r2
 800b48e:	881b      	ldrh	r3, [r3, #0]
 800b490:	b29b      	uxth	r3, r3
 800b492:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b496:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b49a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800b49e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800b4a2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800b4a6:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800b4aa:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800b4ae:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b4b2:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800b4b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b4be:	681a      	ldr	r2, [r3, #0]
 800b4c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	781b      	ldrb	r3, [r3, #0]
 800b4cc:	009b      	lsls	r3, r3, #2
 800b4ce:	441a      	add	r2, r3
 800b4d0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800b4d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b4d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b4dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b4e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b4e4:	b29b      	uxth	r3, r3
 800b4e6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b4e8:	2300      	movs	r3, #0
}
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bd80      	pop	{r7, pc}

0800b4f4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b4f4:	b480      	push	{r7}
 800b4f6:	b085      	sub	sp, #20
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
 800b4fc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	785b      	ldrb	r3, [r3, #1]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d020      	beq.n	800b548 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800b506:	687a      	ldr	r2, [r7, #4]
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	781b      	ldrb	r3, [r3, #0]
 800b50c:	009b      	lsls	r3, r3, #2
 800b50e:	4413      	add	r3, r2
 800b510:	881b      	ldrh	r3, [r3, #0]
 800b512:	b29b      	uxth	r3, r3
 800b514:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b518:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b51c:	81bb      	strh	r3, [r7, #12]
 800b51e:	89bb      	ldrh	r3, [r7, #12]
 800b520:	f083 0310 	eor.w	r3, r3, #16
 800b524:	81bb      	strh	r3, [r7, #12]
 800b526:	687a      	ldr	r2, [r7, #4]
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	781b      	ldrb	r3, [r3, #0]
 800b52c:	009b      	lsls	r3, r3, #2
 800b52e:	441a      	add	r2, r3
 800b530:	89bb      	ldrh	r3, [r7, #12]
 800b532:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b536:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b53a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b53e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b542:	b29b      	uxth	r3, r3
 800b544:	8013      	strh	r3, [r2, #0]
 800b546:	e01f      	b.n	800b588 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800b548:	687a      	ldr	r2, [r7, #4]
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	781b      	ldrb	r3, [r3, #0]
 800b54e:	009b      	lsls	r3, r3, #2
 800b550:	4413      	add	r3, r2
 800b552:	881b      	ldrh	r3, [r3, #0]
 800b554:	b29b      	uxth	r3, r3
 800b556:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b55a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b55e:	81fb      	strh	r3, [r7, #14]
 800b560:	89fb      	ldrh	r3, [r7, #14]
 800b562:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800b566:	81fb      	strh	r3, [r7, #14]
 800b568:	687a      	ldr	r2, [r7, #4]
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	781b      	ldrb	r3, [r3, #0]
 800b56e:	009b      	lsls	r3, r3, #2
 800b570:	441a      	add	r2, r3
 800b572:	89fb      	ldrh	r3, [r7, #14]
 800b574:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b578:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b57c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b580:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b584:	b29b      	uxth	r3, r3
 800b586:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b588:	2300      	movs	r3, #0
}
 800b58a:	4618      	mov	r0, r3
 800b58c:	3714      	adds	r7, #20
 800b58e:	46bd      	mov	sp, r7
 800b590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b594:	4770      	bx	lr

0800b596 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b596:	b480      	push	{r7}
 800b598:	b087      	sub	sp, #28
 800b59a:	af00      	add	r7, sp, #0
 800b59c:	6078      	str	r0, [r7, #4]
 800b59e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	7b1b      	ldrb	r3, [r3, #12]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	f040 809d 	bne.w	800b6e4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800b5aa:	683b      	ldr	r3, [r7, #0]
 800b5ac:	785b      	ldrb	r3, [r3, #1]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d04c      	beq.n	800b64c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b5b2:	687a      	ldr	r2, [r7, #4]
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	781b      	ldrb	r3, [r3, #0]
 800b5b8:	009b      	lsls	r3, r3, #2
 800b5ba:	4413      	add	r3, r2
 800b5bc:	881b      	ldrh	r3, [r3, #0]
 800b5be:	823b      	strh	r3, [r7, #16]
 800b5c0:	8a3b      	ldrh	r3, [r7, #16]
 800b5c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d01b      	beq.n	800b602 <USB_EPClearStall+0x6c>
 800b5ca:	687a      	ldr	r2, [r7, #4]
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	781b      	ldrb	r3, [r3, #0]
 800b5d0:	009b      	lsls	r3, r3, #2
 800b5d2:	4413      	add	r3, r2
 800b5d4:	881b      	ldrh	r3, [r3, #0]
 800b5d6:	b29b      	uxth	r3, r3
 800b5d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b5dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b5e0:	81fb      	strh	r3, [r7, #14]
 800b5e2:	687a      	ldr	r2, [r7, #4]
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	781b      	ldrb	r3, [r3, #0]
 800b5e8:	009b      	lsls	r3, r3, #2
 800b5ea:	441a      	add	r2, r3
 800b5ec:	89fb      	ldrh	r3, [r7, #14]
 800b5ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b5f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b5f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b5fa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b5fe:	b29b      	uxth	r3, r3
 800b600:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	78db      	ldrb	r3, [r3, #3]
 800b606:	2b01      	cmp	r3, #1
 800b608:	d06c      	beq.n	800b6e4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b60a:	687a      	ldr	r2, [r7, #4]
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	781b      	ldrb	r3, [r3, #0]
 800b610:	009b      	lsls	r3, r3, #2
 800b612:	4413      	add	r3, r2
 800b614:	881b      	ldrh	r3, [r3, #0]
 800b616:	b29b      	uxth	r3, r3
 800b618:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b61c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b620:	81bb      	strh	r3, [r7, #12]
 800b622:	89bb      	ldrh	r3, [r7, #12]
 800b624:	f083 0320 	eor.w	r3, r3, #32
 800b628:	81bb      	strh	r3, [r7, #12]
 800b62a:	687a      	ldr	r2, [r7, #4]
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	781b      	ldrb	r3, [r3, #0]
 800b630:	009b      	lsls	r3, r3, #2
 800b632:	441a      	add	r2, r3
 800b634:	89bb      	ldrh	r3, [r7, #12]
 800b636:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b63a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b63e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b642:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b646:	b29b      	uxth	r3, r3
 800b648:	8013      	strh	r3, [r2, #0]
 800b64a:	e04b      	b.n	800b6e4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b64c:	687a      	ldr	r2, [r7, #4]
 800b64e:	683b      	ldr	r3, [r7, #0]
 800b650:	781b      	ldrb	r3, [r3, #0]
 800b652:	009b      	lsls	r3, r3, #2
 800b654:	4413      	add	r3, r2
 800b656:	881b      	ldrh	r3, [r3, #0]
 800b658:	82fb      	strh	r3, [r7, #22]
 800b65a:	8afb      	ldrh	r3, [r7, #22]
 800b65c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b660:	2b00      	cmp	r3, #0
 800b662:	d01b      	beq.n	800b69c <USB_EPClearStall+0x106>
 800b664:	687a      	ldr	r2, [r7, #4]
 800b666:	683b      	ldr	r3, [r7, #0]
 800b668:	781b      	ldrb	r3, [r3, #0]
 800b66a:	009b      	lsls	r3, r3, #2
 800b66c:	4413      	add	r3, r2
 800b66e:	881b      	ldrh	r3, [r3, #0]
 800b670:	b29b      	uxth	r3, r3
 800b672:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b676:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b67a:	82bb      	strh	r3, [r7, #20]
 800b67c:	687a      	ldr	r2, [r7, #4]
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	781b      	ldrb	r3, [r3, #0]
 800b682:	009b      	lsls	r3, r3, #2
 800b684:	441a      	add	r2, r3
 800b686:	8abb      	ldrh	r3, [r7, #20]
 800b688:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b68c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b690:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b694:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b698:	b29b      	uxth	r3, r3
 800b69a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b69c:	687a      	ldr	r2, [r7, #4]
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	781b      	ldrb	r3, [r3, #0]
 800b6a2:	009b      	lsls	r3, r3, #2
 800b6a4:	4413      	add	r3, r2
 800b6a6:	881b      	ldrh	r3, [r3, #0]
 800b6a8:	b29b      	uxth	r3, r3
 800b6aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b6ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b6b2:	827b      	strh	r3, [r7, #18]
 800b6b4:	8a7b      	ldrh	r3, [r7, #18]
 800b6b6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800b6ba:	827b      	strh	r3, [r7, #18]
 800b6bc:	8a7b      	ldrh	r3, [r7, #18]
 800b6be:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b6c2:	827b      	strh	r3, [r7, #18]
 800b6c4:	687a      	ldr	r2, [r7, #4]
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	781b      	ldrb	r3, [r3, #0]
 800b6ca:	009b      	lsls	r3, r3, #2
 800b6cc:	441a      	add	r2, r3
 800b6ce:	8a7b      	ldrh	r3, [r7, #18]
 800b6d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b6d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b6d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b6dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b6e0:	b29b      	uxth	r3, r3
 800b6e2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800b6e4:	2300      	movs	r3, #0
}
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	371c      	adds	r7, #28
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f0:	4770      	bx	lr

0800b6f2 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800b6f2:	b480      	push	{r7}
 800b6f4:	b083      	sub	sp, #12
 800b6f6:	af00      	add	r7, sp, #0
 800b6f8:	6078      	str	r0, [r7, #4]
 800b6fa:	460b      	mov	r3, r1
 800b6fc:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800b6fe:	78fb      	ldrb	r3, [r7, #3]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d103      	bne.n	800b70c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2280      	movs	r2, #128	@ 0x80
 800b708:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800b70c:	2300      	movs	r3, #0
}
 800b70e:	4618      	mov	r0, r3
 800b710:	370c      	adds	r7, #12
 800b712:	46bd      	mov	sp, r7
 800b714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b718:	4770      	bx	lr

0800b71a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800b71a:	b480      	push	{r7}
 800b71c:	b083      	sub	sp, #12
 800b71e:	af00      	add	r7, sp, #0
 800b720:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800b728:	b29b      	uxth	r3, r3
 800b72a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b72e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b732:	b29a      	uxth	r2, r3
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800b73a:	2300      	movs	r3, #0
}
 800b73c:	4618      	mov	r0, r3
 800b73e:	370c      	adds	r7, #12
 800b740:	46bd      	mov	sp, r7
 800b742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b746:	4770      	bx	lr

0800b748 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800b748:	b480      	push	{r7}
 800b74a:	b085      	sub	sp, #20
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800b756:	b29b      	uxth	r3, r3
 800b758:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800b75a:	68fb      	ldr	r3, [r7, #12]
}
 800b75c:	4618      	mov	r0, r3
 800b75e:	3714      	adds	r7, #20
 800b760:	46bd      	mov	sp, r7
 800b762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b766:	4770      	bx	lr

0800b768 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b768:	b480      	push	{r7}
 800b76a:	b08b      	sub	sp, #44	@ 0x2c
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	60f8      	str	r0, [r7, #12]
 800b770:	60b9      	str	r1, [r7, #8]
 800b772:	4611      	mov	r1, r2
 800b774:	461a      	mov	r2, r3
 800b776:	460b      	mov	r3, r1
 800b778:	80fb      	strh	r3, [r7, #6]
 800b77a:	4613      	mov	r3, r2
 800b77c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b77e:	88bb      	ldrh	r3, [r7, #4]
 800b780:	3301      	adds	r3, #1
 800b782:	085b      	lsrs	r3, r3, #1
 800b784:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b78a:	68bb      	ldr	r3, [r7, #8]
 800b78c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b78e:	88fa      	ldrh	r2, [r7, #6]
 800b790:	697b      	ldr	r3, [r7, #20]
 800b792:	4413      	add	r3, r2
 800b794:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b798:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b79a:	69bb      	ldr	r3, [r7, #24]
 800b79c:	627b      	str	r3, [r7, #36]	@ 0x24
 800b79e:	e01b      	b.n	800b7d8 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800b7a0:	69fb      	ldr	r3, [r7, #28]
 800b7a2:	781b      	ldrb	r3, [r3, #0]
 800b7a4:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800b7a6:	69fb      	ldr	r3, [r7, #28]
 800b7a8:	3301      	adds	r3, #1
 800b7aa:	781b      	ldrb	r3, [r3, #0]
 800b7ac:	021b      	lsls	r3, r3, #8
 800b7ae:	b21a      	sxth	r2, r3
 800b7b0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b7b4:	4313      	orrs	r3, r2
 800b7b6:	b21b      	sxth	r3, r3
 800b7b8:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800b7ba:	6a3b      	ldr	r3, [r7, #32]
 800b7bc:	8a7a      	ldrh	r2, [r7, #18]
 800b7be:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800b7c0:	6a3b      	ldr	r3, [r7, #32]
 800b7c2:	3302      	adds	r3, #2
 800b7c4:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800b7c6:	69fb      	ldr	r3, [r7, #28]
 800b7c8:	3301      	adds	r3, #1
 800b7ca:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800b7cc:	69fb      	ldr	r3, [r7, #28]
 800b7ce:	3301      	adds	r3, #1
 800b7d0:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800b7d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7d4:	3b01      	subs	r3, #1
 800b7d6:	627b      	str	r3, [r7, #36]	@ 0x24
 800b7d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d1e0      	bne.n	800b7a0 <USB_WritePMA+0x38>
  }
}
 800b7de:	bf00      	nop
 800b7e0:	bf00      	nop
 800b7e2:	372c      	adds	r7, #44	@ 0x2c
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ea:	4770      	bx	lr

0800b7ec <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b7ec:	b480      	push	{r7}
 800b7ee:	b08b      	sub	sp, #44	@ 0x2c
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	60f8      	str	r0, [r7, #12]
 800b7f4:	60b9      	str	r1, [r7, #8]
 800b7f6:	4611      	mov	r1, r2
 800b7f8:	461a      	mov	r2, r3
 800b7fa:	460b      	mov	r3, r1
 800b7fc:	80fb      	strh	r3, [r7, #6]
 800b7fe:	4613      	mov	r3, r2
 800b800:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800b802:	88bb      	ldrh	r3, [r7, #4]
 800b804:	085b      	lsrs	r3, r3, #1
 800b806:	b29b      	uxth	r3, r3
 800b808:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b80e:	68bb      	ldr	r3, [r7, #8]
 800b810:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b812:	88fa      	ldrh	r2, [r7, #6]
 800b814:	697b      	ldr	r3, [r7, #20]
 800b816:	4413      	add	r3, r2
 800b818:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b81c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b81e:	69bb      	ldr	r3, [r7, #24]
 800b820:	627b      	str	r3, [r7, #36]	@ 0x24
 800b822:	e018      	b.n	800b856 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800b824:	6a3b      	ldr	r3, [r7, #32]
 800b826:	881b      	ldrh	r3, [r3, #0]
 800b828:	b29b      	uxth	r3, r3
 800b82a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800b82c:	6a3b      	ldr	r3, [r7, #32]
 800b82e:	3302      	adds	r3, #2
 800b830:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b832:	693b      	ldr	r3, [r7, #16]
 800b834:	b2da      	uxtb	r2, r3
 800b836:	69fb      	ldr	r3, [r7, #28]
 800b838:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b83a:	69fb      	ldr	r3, [r7, #28]
 800b83c:	3301      	adds	r3, #1
 800b83e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800b840:	693b      	ldr	r3, [r7, #16]
 800b842:	0a1b      	lsrs	r3, r3, #8
 800b844:	b2da      	uxtb	r2, r3
 800b846:	69fb      	ldr	r3, [r7, #28]
 800b848:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b84a:	69fb      	ldr	r3, [r7, #28]
 800b84c:	3301      	adds	r3, #1
 800b84e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800b850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b852:	3b01      	subs	r3, #1
 800b854:	627b      	str	r3, [r7, #36]	@ 0x24
 800b856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d1e3      	bne.n	800b824 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800b85c:	88bb      	ldrh	r3, [r7, #4]
 800b85e:	f003 0301 	and.w	r3, r3, #1
 800b862:	b29b      	uxth	r3, r3
 800b864:	2b00      	cmp	r3, #0
 800b866:	d007      	beq.n	800b878 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800b868:	6a3b      	ldr	r3, [r7, #32]
 800b86a:	881b      	ldrh	r3, [r3, #0]
 800b86c:	b29b      	uxth	r3, r3
 800b86e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b870:	693b      	ldr	r3, [r7, #16]
 800b872:	b2da      	uxtb	r2, r3
 800b874:	69fb      	ldr	r3, [r7, #28]
 800b876:	701a      	strb	r2, [r3, #0]
  }
}
 800b878:	bf00      	nop
 800b87a:	372c      	adds	r7, #44	@ 0x2c
 800b87c:	46bd      	mov	sp, r7
 800b87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b882:	4770      	bx	lr

0800b884 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b084      	sub	sp, #16
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
 800b88c:	460b      	mov	r3, r1
 800b88e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b890:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800b894:	f002 f8fa 	bl	800da8c <USBD_static_malloc>
 800b898:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d105      	bne.n	800b8ac <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800b8a8:	2302      	movs	r3, #2
 800b8aa:	e066      	b.n	800b97a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	68fa      	ldr	r2, [r7, #12]
 800b8b0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	7c1b      	ldrb	r3, [r3, #16]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d119      	bne.n	800b8f0 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b8bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b8c0:	2202      	movs	r2, #2
 800b8c2:	2181      	movs	r1, #129	@ 0x81
 800b8c4:	6878      	ldr	r0, [r7, #4]
 800b8c6:	f001 ff88 	bl	800d7da <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	2201      	movs	r2, #1
 800b8ce:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b8d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b8d4:	2202      	movs	r2, #2
 800b8d6:	2101      	movs	r1, #1
 800b8d8:	6878      	ldr	r0, [r7, #4]
 800b8da:	f001 ff7e 	bl	800d7da <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	2201      	movs	r2, #1
 800b8e2:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	2210      	movs	r2, #16
 800b8ea:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800b8ee:	e016      	b.n	800b91e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b8f0:	2340      	movs	r3, #64	@ 0x40
 800b8f2:	2202      	movs	r2, #2
 800b8f4:	2181      	movs	r1, #129	@ 0x81
 800b8f6:	6878      	ldr	r0, [r7, #4]
 800b8f8:	f001 ff6f 	bl	800d7da <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2201      	movs	r2, #1
 800b900:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b902:	2340      	movs	r3, #64	@ 0x40
 800b904:	2202      	movs	r2, #2
 800b906:	2101      	movs	r1, #1
 800b908:	6878      	ldr	r0, [r7, #4]
 800b90a:	f001 ff66 	bl	800d7da <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2201      	movs	r2, #1
 800b912:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2210      	movs	r2, #16
 800b91a:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b91e:	2308      	movs	r3, #8
 800b920:	2203      	movs	r2, #3
 800b922:	2182      	movs	r1, #130	@ 0x82
 800b924:	6878      	ldr	r0, [r7, #4]
 800b926:	f001 ff58 	bl	800d7da <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	2201      	movs	r2, #1
 800b92e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	2200      	movs	r2, #0
 800b940:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	2200      	movs	r2, #0
 800b948:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	7c1b      	ldrb	r3, [r3, #16]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d109      	bne.n	800b968 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b95a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b95e:	2101      	movs	r1, #1
 800b960:	6878      	ldr	r0, [r7, #4]
 800b962:	f002 f829 	bl	800d9b8 <USBD_LL_PrepareReceive>
 800b966:	e007      	b.n	800b978 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b96e:	2340      	movs	r3, #64	@ 0x40
 800b970:	2101      	movs	r1, #1
 800b972:	6878      	ldr	r0, [r7, #4]
 800b974:	f002 f820 	bl	800d9b8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b978:	2300      	movs	r3, #0
}
 800b97a:	4618      	mov	r0, r3
 800b97c:	3710      	adds	r7, #16
 800b97e:	46bd      	mov	sp, r7
 800b980:	bd80      	pop	{r7, pc}

0800b982 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b982:	b580      	push	{r7, lr}
 800b984:	b082      	sub	sp, #8
 800b986:	af00      	add	r7, sp, #0
 800b988:	6078      	str	r0, [r7, #4]
 800b98a:	460b      	mov	r3, r1
 800b98c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b98e:	2181      	movs	r1, #129	@ 0x81
 800b990:	6878      	ldr	r0, [r7, #4]
 800b992:	f001 ff48 	bl	800d826 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	2200      	movs	r2, #0
 800b99a:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b99c:	2101      	movs	r1, #1
 800b99e:	6878      	ldr	r0, [r7, #4]
 800b9a0:	f001 ff41 	bl	800d826 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b9ac:	2182      	movs	r1, #130	@ 0x82
 800b9ae:	6878      	ldr	r0, [r7, #4]
 800b9b0:	f001 ff39 	bl	800d826 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2200      	movs	r2, #0
 800b9c0:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d00e      	beq.n	800b9ec <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b9d4:	685b      	ldr	r3, [r3, #4]
 800b9d6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b9de:	4618      	mov	r0, r3
 800b9e0:	f002 f862 	bl	800daa8 <USBD_static_free>
    pdev->pClassData = NULL;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b9ec:	2300      	movs	r3, #0
}
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	3708      	adds	r7, #8
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	bd80      	pop	{r7, pc}
	...

0800b9f8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b086      	sub	sp, #24
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
 800ba00:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ba08:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba12:	2300      	movs	r3, #0
 800ba14:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ba16:	693b      	ldr	r3, [r7, #16]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d101      	bne.n	800ba20 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800ba1c:	2303      	movs	r3, #3
 800ba1e:	e0af      	b.n	800bb80 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	781b      	ldrb	r3, [r3, #0]
 800ba24:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d03f      	beq.n	800baac <USBD_CDC_Setup+0xb4>
 800ba2c:	2b20      	cmp	r3, #32
 800ba2e:	f040 809f 	bne.w	800bb70 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	88db      	ldrh	r3, [r3, #6]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d02e      	beq.n	800ba98 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ba3a:	683b      	ldr	r3, [r7, #0]
 800ba3c:	781b      	ldrb	r3, [r3, #0]
 800ba3e:	b25b      	sxtb	r3, r3
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	da16      	bge.n	800ba72 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ba4a:	689b      	ldr	r3, [r3, #8]
 800ba4c:	683a      	ldr	r2, [r7, #0]
 800ba4e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800ba50:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ba52:	683a      	ldr	r2, [r7, #0]
 800ba54:	88d2      	ldrh	r2, [r2, #6]
 800ba56:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	88db      	ldrh	r3, [r3, #6]
 800ba5c:	2b07      	cmp	r3, #7
 800ba5e:	bf28      	it	cs
 800ba60:	2307      	movcs	r3, #7
 800ba62:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ba64:	693b      	ldr	r3, [r7, #16]
 800ba66:	89fa      	ldrh	r2, [r7, #14]
 800ba68:	4619      	mov	r1, r3
 800ba6a:	6878      	ldr	r0, [r7, #4]
 800ba6c:	f001 facd 	bl	800d00a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800ba70:	e085      	b.n	800bb7e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	785a      	ldrb	r2, [r3, #1]
 800ba76:	693b      	ldr	r3, [r7, #16]
 800ba78:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	88db      	ldrh	r3, [r3, #6]
 800ba80:	b2da      	uxtb	r2, r3
 800ba82:	693b      	ldr	r3, [r7, #16]
 800ba84:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800ba88:	6939      	ldr	r1, [r7, #16]
 800ba8a:	683b      	ldr	r3, [r7, #0]
 800ba8c:	88db      	ldrh	r3, [r3, #6]
 800ba8e:	461a      	mov	r2, r3
 800ba90:	6878      	ldr	r0, [r7, #4]
 800ba92:	f001 fae6 	bl	800d062 <USBD_CtlPrepareRx>
      break;
 800ba96:	e072      	b.n	800bb7e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ba9e:	689b      	ldr	r3, [r3, #8]
 800baa0:	683a      	ldr	r2, [r7, #0]
 800baa2:	7850      	ldrb	r0, [r2, #1]
 800baa4:	2200      	movs	r2, #0
 800baa6:	6839      	ldr	r1, [r7, #0]
 800baa8:	4798      	blx	r3
      break;
 800baaa:	e068      	b.n	800bb7e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800baac:	683b      	ldr	r3, [r7, #0]
 800baae:	785b      	ldrb	r3, [r3, #1]
 800bab0:	2b0b      	cmp	r3, #11
 800bab2:	d852      	bhi.n	800bb5a <USBD_CDC_Setup+0x162>
 800bab4:	a201      	add	r2, pc, #4	@ (adr r2, 800babc <USBD_CDC_Setup+0xc4>)
 800bab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baba:	bf00      	nop
 800babc:	0800baed 	.word	0x0800baed
 800bac0:	0800bb69 	.word	0x0800bb69
 800bac4:	0800bb5b 	.word	0x0800bb5b
 800bac8:	0800bb5b 	.word	0x0800bb5b
 800bacc:	0800bb5b 	.word	0x0800bb5b
 800bad0:	0800bb5b 	.word	0x0800bb5b
 800bad4:	0800bb5b 	.word	0x0800bb5b
 800bad8:	0800bb5b 	.word	0x0800bb5b
 800badc:	0800bb5b 	.word	0x0800bb5b
 800bae0:	0800bb5b 	.word	0x0800bb5b
 800bae4:	0800bb17 	.word	0x0800bb17
 800bae8:	0800bb41 	.word	0x0800bb41
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800baf2:	b2db      	uxtb	r3, r3
 800baf4:	2b03      	cmp	r3, #3
 800baf6:	d107      	bne.n	800bb08 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800baf8:	f107 030a 	add.w	r3, r7, #10
 800bafc:	2202      	movs	r2, #2
 800bafe:	4619      	mov	r1, r3
 800bb00:	6878      	ldr	r0, [r7, #4]
 800bb02:	f001 fa82 	bl	800d00a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bb06:	e032      	b.n	800bb6e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800bb08:	6839      	ldr	r1, [r7, #0]
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	f001 fa0c 	bl	800cf28 <USBD_CtlError>
            ret = USBD_FAIL;
 800bb10:	2303      	movs	r3, #3
 800bb12:	75fb      	strb	r3, [r7, #23]
          break;
 800bb14:	e02b      	b.n	800bb6e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb1c:	b2db      	uxtb	r3, r3
 800bb1e:	2b03      	cmp	r3, #3
 800bb20:	d107      	bne.n	800bb32 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800bb22:	f107 030d 	add.w	r3, r7, #13
 800bb26:	2201      	movs	r2, #1
 800bb28:	4619      	mov	r1, r3
 800bb2a:	6878      	ldr	r0, [r7, #4]
 800bb2c:	f001 fa6d 	bl	800d00a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bb30:	e01d      	b.n	800bb6e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800bb32:	6839      	ldr	r1, [r7, #0]
 800bb34:	6878      	ldr	r0, [r7, #4]
 800bb36:	f001 f9f7 	bl	800cf28 <USBD_CtlError>
            ret = USBD_FAIL;
 800bb3a:	2303      	movs	r3, #3
 800bb3c:	75fb      	strb	r3, [r7, #23]
          break;
 800bb3e:	e016      	b.n	800bb6e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb46:	b2db      	uxtb	r3, r3
 800bb48:	2b03      	cmp	r3, #3
 800bb4a:	d00f      	beq.n	800bb6c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800bb4c:	6839      	ldr	r1, [r7, #0]
 800bb4e:	6878      	ldr	r0, [r7, #4]
 800bb50:	f001 f9ea 	bl	800cf28 <USBD_CtlError>
            ret = USBD_FAIL;
 800bb54:	2303      	movs	r3, #3
 800bb56:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800bb58:	e008      	b.n	800bb6c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800bb5a:	6839      	ldr	r1, [r7, #0]
 800bb5c:	6878      	ldr	r0, [r7, #4]
 800bb5e:	f001 f9e3 	bl	800cf28 <USBD_CtlError>
          ret = USBD_FAIL;
 800bb62:	2303      	movs	r3, #3
 800bb64:	75fb      	strb	r3, [r7, #23]
          break;
 800bb66:	e002      	b.n	800bb6e <USBD_CDC_Setup+0x176>
          break;
 800bb68:	bf00      	nop
 800bb6a:	e008      	b.n	800bb7e <USBD_CDC_Setup+0x186>
          break;
 800bb6c:	bf00      	nop
      }
      break;
 800bb6e:	e006      	b.n	800bb7e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800bb70:	6839      	ldr	r1, [r7, #0]
 800bb72:	6878      	ldr	r0, [r7, #4]
 800bb74:	f001 f9d8 	bl	800cf28 <USBD_CtlError>
      ret = USBD_FAIL;
 800bb78:	2303      	movs	r3, #3
 800bb7a:	75fb      	strb	r3, [r7, #23]
      break;
 800bb7c:	bf00      	nop
  }

  return (uint8_t)ret;
 800bb7e:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb80:	4618      	mov	r0, r3
 800bb82:	3718      	adds	r7, #24
 800bb84:	46bd      	mov	sp, r7
 800bb86:	bd80      	pop	{r7, pc}

0800bb88 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b084      	sub	sp, #16
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
 800bb90:	460b      	mov	r3, r1
 800bb92:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800bb9a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d101      	bne.n	800bbaa <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bba6:	2303      	movs	r3, #3
 800bba8:	e04f      	b.n	800bc4a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800bbb0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800bbb2:	78fa      	ldrb	r2, [r7, #3]
 800bbb4:	6879      	ldr	r1, [r7, #4]
 800bbb6:	4613      	mov	r3, r2
 800bbb8:	009b      	lsls	r3, r3, #2
 800bbba:	4413      	add	r3, r2
 800bbbc:	009b      	lsls	r3, r3, #2
 800bbbe:	440b      	add	r3, r1
 800bbc0:	3318      	adds	r3, #24
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d029      	beq.n	800bc1c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800bbc8:	78fa      	ldrb	r2, [r7, #3]
 800bbca:	6879      	ldr	r1, [r7, #4]
 800bbcc:	4613      	mov	r3, r2
 800bbce:	009b      	lsls	r3, r3, #2
 800bbd0:	4413      	add	r3, r2
 800bbd2:	009b      	lsls	r3, r3, #2
 800bbd4:	440b      	add	r3, r1
 800bbd6:	3318      	adds	r3, #24
 800bbd8:	681a      	ldr	r2, [r3, #0]
 800bbda:	78f9      	ldrb	r1, [r7, #3]
 800bbdc:	68f8      	ldr	r0, [r7, #12]
 800bbde:	460b      	mov	r3, r1
 800bbe0:	009b      	lsls	r3, r3, #2
 800bbe2:	440b      	add	r3, r1
 800bbe4:	00db      	lsls	r3, r3, #3
 800bbe6:	4403      	add	r3, r0
 800bbe8:	3320      	adds	r3, #32
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	fbb2 f1f3 	udiv	r1, r2, r3
 800bbf0:	fb01 f303 	mul.w	r3, r1, r3
 800bbf4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d110      	bne.n	800bc1c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800bbfa:	78fa      	ldrb	r2, [r7, #3]
 800bbfc:	6879      	ldr	r1, [r7, #4]
 800bbfe:	4613      	mov	r3, r2
 800bc00:	009b      	lsls	r3, r3, #2
 800bc02:	4413      	add	r3, r2
 800bc04:	009b      	lsls	r3, r3, #2
 800bc06:	440b      	add	r3, r1
 800bc08:	3318      	adds	r3, #24
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800bc0e:	78f9      	ldrb	r1, [r7, #3]
 800bc10:	2300      	movs	r3, #0
 800bc12:	2200      	movs	r2, #0
 800bc14:	6878      	ldr	r0, [r7, #4]
 800bc16:	f001 feae 	bl	800d976 <USBD_LL_Transmit>
 800bc1a:	e015      	b.n	800bc48 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800bc1c:	68bb      	ldr	r3, [r7, #8]
 800bc1e:	2200      	movs	r2, #0
 800bc20:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800bc2a:	691b      	ldr	r3, [r3, #16]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d00b      	beq.n	800bc48 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800bc36:	691b      	ldr	r3, [r3, #16]
 800bc38:	68ba      	ldr	r2, [r7, #8]
 800bc3a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800bc3e:	68ba      	ldr	r2, [r7, #8]
 800bc40:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800bc44:	78fa      	ldrb	r2, [r7, #3]
 800bc46:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800bc48:	2300      	movs	r3, #0
}
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	3710      	adds	r7, #16
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	bd80      	pop	{r7, pc}

0800bc52 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bc52:	b580      	push	{r7, lr}
 800bc54:	b084      	sub	sp, #16
 800bc56:	af00      	add	r7, sp, #0
 800bc58:	6078      	str	r0, [r7, #4]
 800bc5a:	460b      	mov	r3, r1
 800bc5c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800bc64:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d101      	bne.n	800bc74 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bc70:	2303      	movs	r3, #3
 800bc72:	e015      	b.n	800bca0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bc74:	78fb      	ldrb	r3, [r7, #3]
 800bc76:	4619      	mov	r1, r3
 800bc78:	6878      	ldr	r0, [r7, #4]
 800bc7a:	f001 febe 	bl	800d9fa <USBD_LL_GetRxDataSize>
 800bc7e:	4602      	mov	r2, r0
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800bc8c:	68db      	ldr	r3, [r3, #12]
 800bc8e:	68fa      	ldr	r2, [r7, #12]
 800bc90:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800bc94:	68fa      	ldr	r2, [r7, #12]
 800bc96:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800bc9a:	4611      	mov	r1, r2
 800bc9c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800bc9e:	2300      	movs	r3, #0
}
 800bca0:	4618      	mov	r0, r3
 800bca2:	3710      	adds	r7, #16
 800bca4:	46bd      	mov	sp, r7
 800bca6:	bd80      	pop	{r7, pc}

0800bca8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b084      	sub	sp, #16
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800bcb6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d101      	bne.n	800bcc2 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800bcbe:	2303      	movs	r3, #3
 800bcc0:	e01a      	b.n	800bcf8 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d014      	beq.n	800bcf6 <USBD_CDC_EP0_RxReady+0x4e>
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800bcd2:	2bff      	cmp	r3, #255	@ 0xff
 800bcd4:	d00f      	beq.n	800bcf6 <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800bcdc:	689b      	ldr	r3, [r3, #8]
 800bcde:	68fa      	ldr	r2, [r7, #12]
 800bce0:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800bce4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800bce6:	68fa      	ldr	r2, [r7, #12]
 800bce8:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bcec:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	22ff      	movs	r2, #255	@ 0xff
 800bcf2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800bcf6:	2300      	movs	r3, #0
}
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	3710      	adds	r7, #16
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	bd80      	pop	{r7, pc}

0800bd00 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800bd00:	b480      	push	{r7}
 800bd02:	b083      	sub	sp, #12
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2243      	movs	r2, #67	@ 0x43
 800bd0c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800bd0e:	4b03      	ldr	r3, [pc, #12]	@ (800bd1c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800bd10:	4618      	mov	r0, r3
 800bd12:	370c      	adds	r7, #12
 800bd14:	46bd      	mov	sp, r7
 800bd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1a:	4770      	bx	lr
 800bd1c:	20000094 	.word	0x20000094

0800bd20 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800bd20:	b480      	push	{r7}
 800bd22:	b083      	sub	sp, #12
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	2243      	movs	r2, #67	@ 0x43
 800bd2c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800bd2e:	4b03      	ldr	r3, [pc, #12]	@ (800bd3c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800bd30:	4618      	mov	r0, r3
 800bd32:	370c      	adds	r7, #12
 800bd34:	46bd      	mov	sp, r7
 800bd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3a:	4770      	bx	lr
 800bd3c:	20000050 	.word	0x20000050

0800bd40 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800bd40:	b480      	push	{r7}
 800bd42:	b083      	sub	sp, #12
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	2243      	movs	r2, #67	@ 0x43
 800bd4c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800bd4e:	4b03      	ldr	r3, [pc, #12]	@ (800bd5c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800bd50:	4618      	mov	r0, r3
 800bd52:	370c      	adds	r7, #12
 800bd54:	46bd      	mov	sp, r7
 800bd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5a:	4770      	bx	lr
 800bd5c:	200000d8 	.word	0x200000d8

0800bd60 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800bd60:	b480      	push	{r7}
 800bd62:	b083      	sub	sp, #12
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	220a      	movs	r2, #10
 800bd6c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800bd6e:	4b03      	ldr	r3, [pc, #12]	@ (800bd7c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800bd70:	4618      	mov	r0, r3
 800bd72:	370c      	adds	r7, #12
 800bd74:	46bd      	mov	sp, r7
 800bd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7a:	4770      	bx	lr
 800bd7c:	2000000c 	.word	0x2000000c

0800bd80 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800bd80:	b480      	push	{r7}
 800bd82:	b083      	sub	sp, #12
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
 800bd88:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d101      	bne.n	800bd94 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800bd90:	2303      	movs	r3, #3
 800bd92:	e004      	b.n	800bd9e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	683a      	ldr	r2, [r7, #0]
 800bd98:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800bd9c:	2300      	movs	r3, #0
}
 800bd9e:	4618      	mov	r0, r3
 800bda0:	370c      	adds	r7, #12
 800bda2:	46bd      	mov	sp, r7
 800bda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda8:	4770      	bx	lr

0800bdaa <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800bdaa:	b480      	push	{r7}
 800bdac:	b087      	sub	sp, #28
 800bdae:	af00      	add	r7, sp, #0
 800bdb0:	60f8      	str	r0, [r7, #12]
 800bdb2:	60b9      	str	r1, [r7, #8]
 800bdb4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800bdbc:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800bdbe:	697b      	ldr	r3, [r7, #20]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d101      	bne.n	800bdc8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800bdc4:	2303      	movs	r3, #3
 800bdc6:	e008      	b.n	800bdda <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800bdc8:	697b      	ldr	r3, [r7, #20]
 800bdca:	68ba      	ldr	r2, [r7, #8]
 800bdcc:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800bdd0:	697b      	ldr	r3, [r7, #20]
 800bdd2:	687a      	ldr	r2, [r7, #4]
 800bdd4:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800bdd8:	2300      	movs	r3, #0
}
 800bdda:	4618      	mov	r0, r3
 800bddc:	371c      	adds	r7, #28
 800bdde:	46bd      	mov	sp, r7
 800bde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde4:	4770      	bx	lr

0800bde6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800bde6:	b480      	push	{r7}
 800bde8:	b085      	sub	sp, #20
 800bdea:	af00      	add	r7, sp, #0
 800bdec:	6078      	str	r0, [r7, #4]
 800bdee:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800bdf6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d101      	bne.n	800be02 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800bdfe:	2303      	movs	r3, #3
 800be00:	e004      	b.n	800be0c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	683a      	ldr	r2, [r7, #0]
 800be06:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800be0a:	2300      	movs	r3, #0
}
 800be0c:	4618      	mov	r0, r3
 800be0e:	3714      	adds	r7, #20
 800be10:	46bd      	mov	sp, r7
 800be12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be16:	4770      	bx	lr

0800be18 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b084      	sub	sp, #16
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800be26:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800be28:	2301      	movs	r3, #1
 800be2a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800be32:	2b00      	cmp	r3, #0
 800be34:	d101      	bne.n	800be3a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800be36:	2303      	movs	r3, #3
 800be38:	e01a      	b.n	800be70 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800be3a:	68bb      	ldr	r3, [r7, #8]
 800be3c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800be40:	2b00      	cmp	r3, #0
 800be42:	d114      	bne.n	800be6e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800be44:	68bb      	ldr	r3, [r7, #8]
 800be46:	2201      	movs	r2, #1
 800be48:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800be4c:	68bb      	ldr	r3, [r7, #8]
 800be4e:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800be56:	68bb      	ldr	r3, [r7, #8]
 800be58:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800be5c:	68bb      	ldr	r3, [r7, #8]
 800be5e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800be62:	2181      	movs	r1, #129	@ 0x81
 800be64:	6878      	ldr	r0, [r7, #4]
 800be66:	f001 fd86 	bl	800d976 <USBD_LL_Transmit>

    ret = USBD_OK;
 800be6a:	2300      	movs	r3, #0
 800be6c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800be6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800be70:	4618      	mov	r0, r3
 800be72:	3710      	adds	r7, #16
 800be74:	46bd      	mov	sp, r7
 800be76:	bd80      	pop	{r7, pc}

0800be78 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b084      	sub	sp, #16
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800be86:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d101      	bne.n	800be96 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800be92:	2303      	movs	r3, #3
 800be94:	e016      	b.n	800bec4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	7c1b      	ldrb	r3, [r3, #16]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d109      	bne.n	800beb2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bea4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bea8:	2101      	movs	r1, #1
 800beaa:	6878      	ldr	r0, [r7, #4]
 800beac:	f001 fd84 	bl	800d9b8 <USBD_LL_PrepareReceive>
 800beb0:	e007      	b.n	800bec2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800beb8:	2340      	movs	r3, #64	@ 0x40
 800beba:	2101      	movs	r1, #1
 800bebc:	6878      	ldr	r0, [r7, #4]
 800bebe:	f001 fd7b 	bl	800d9b8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bec2:	2300      	movs	r3, #0
}
 800bec4:	4618      	mov	r0, r3
 800bec6:	3710      	adds	r7, #16
 800bec8:	46bd      	mov	sp, r7
 800beca:	bd80      	pop	{r7, pc}

0800becc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b086      	sub	sp, #24
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	60f8      	str	r0, [r7, #12]
 800bed4:	60b9      	str	r1, [r7, #8]
 800bed6:	4613      	mov	r3, r2
 800bed8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d101      	bne.n	800bee4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800bee0:	2303      	movs	r3, #3
 800bee2:	e01f      	b.n	800bf24 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	2200      	movs	r2, #0
 800bee8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	2200      	movs	r2, #0
 800bef0:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	2200      	movs	r2, #0
 800bef8:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800befc:	68bb      	ldr	r3, [r7, #8]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d003      	beq.n	800bf0a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	68ba      	ldr	r2, [r7, #8]
 800bf06:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	2201      	movs	r2, #1
 800bf0e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	79fa      	ldrb	r2, [r7, #7]
 800bf16:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800bf18:	68f8      	ldr	r0, [r7, #12]
 800bf1a:	f001 fbe3 	bl	800d6e4 <USBD_LL_Init>
 800bf1e:	4603      	mov	r3, r0
 800bf20:	75fb      	strb	r3, [r7, #23]

  return ret;
 800bf22:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf24:	4618      	mov	r0, r3
 800bf26:	3718      	adds	r7, #24
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	bd80      	pop	{r7, pc}

0800bf2c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b084      	sub	sp, #16
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
 800bf34:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bf36:	2300      	movs	r3, #0
 800bf38:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800bf3a:	683b      	ldr	r3, [r7, #0]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d101      	bne.n	800bf44 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800bf40:	2303      	movs	r3, #3
 800bf42:	e016      	b.n	800bf72 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	683a      	ldr	r2, [r7, #0]
 800bf48:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d00b      	beq.n	800bf70 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf60:	f107 020e 	add.w	r2, r7, #14
 800bf64:	4610      	mov	r0, r2
 800bf66:	4798      	blx	r3
 800bf68:	4602      	mov	r2, r0
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800bf70:	2300      	movs	r3, #0
}
 800bf72:	4618      	mov	r0, r3
 800bf74:	3710      	adds	r7, #16
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}

0800bf7a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800bf7a:	b580      	push	{r7, lr}
 800bf7c:	b082      	sub	sp, #8
 800bf7e:	af00      	add	r7, sp, #0
 800bf80:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800bf82:	6878      	ldr	r0, [r7, #4]
 800bf84:	f001 fc0e 	bl	800d7a4 <USBD_LL_Start>
 800bf88:	4603      	mov	r3, r0
}
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	3708      	adds	r7, #8
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	bd80      	pop	{r7, pc}

0800bf92 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800bf92:	b480      	push	{r7}
 800bf94:	b083      	sub	sp, #12
 800bf96:	af00      	add	r7, sp, #0
 800bf98:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bf9a:	2300      	movs	r3, #0
}
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	370c      	adds	r7, #12
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa6:	4770      	bx	lr

0800bfa8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b084      	sub	sp, #16
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
 800bfb0:	460b      	mov	r3, r1
 800bfb2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800bfb4:	2303      	movs	r3, #3
 800bfb6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d009      	beq.n	800bfd6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	78fa      	ldrb	r2, [r7, #3]
 800bfcc:	4611      	mov	r1, r2
 800bfce:	6878      	ldr	r0, [r7, #4]
 800bfd0:	4798      	blx	r3
 800bfd2:	4603      	mov	r3, r0
 800bfd4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800bfd6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfd8:	4618      	mov	r0, r3
 800bfda:	3710      	adds	r7, #16
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	bd80      	pop	{r7, pc}

0800bfe0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b082      	sub	sp, #8
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
 800bfe8:	460b      	mov	r3, r1
 800bfea:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d007      	beq.n	800c006 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bffc:	685b      	ldr	r3, [r3, #4]
 800bffe:	78fa      	ldrb	r2, [r7, #3]
 800c000:	4611      	mov	r1, r2
 800c002:	6878      	ldr	r0, [r7, #4]
 800c004:	4798      	blx	r3
  }

  return USBD_OK;
 800c006:	2300      	movs	r3, #0
}
 800c008:	4618      	mov	r0, r3
 800c00a:	3708      	adds	r7, #8
 800c00c:	46bd      	mov	sp, r7
 800c00e:	bd80      	pop	{r7, pc}

0800c010 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b084      	sub	sp, #16
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
 800c018:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c020:	6839      	ldr	r1, [r7, #0]
 800c022:	4618      	mov	r0, r3
 800c024:	f000 ff46 	bl	800ceb4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2201      	movs	r2, #1
 800c02c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800c036:	461a      	mov	r2, r3
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c044:	f003 031f 	and.w	r3, r3, #31
 800c048:	2b02      	cmp	r3, #2
 800c04a:	d01a      	beq.n	800c082 <USBD_LL_SetupStage+0x72>
 800c04c:	2b02      	cmp	r3, #2
 800c04e:	d822      	bhi.n	800c096 <USBD_LL_SetupStage+0x86>
 800c050:	2b00      	cmp	r3, #0
 800c052:	d002      	beq.n	800c05a <USBD_LL_SetupStage+0x4a>
 800c054:	2b01      	cmp	r3, #1
 800c056:	d00a      	beq.n	800c06e <USBD_LL_SetupStage+0x5e>
 800c058:	e01d      	b.n	800c096 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c060:	4619      	mov	r1, r3
 800c062:	6878      	ldr	r0, [r7, #4]
 800c064:	f000 f9ee 	bl	800c444 <USBD_StdDevReq>
 800c068:	4603      	mov	r3, r0
 800c06a:	73fb      	strb	r3, [r7, #15]
      break;
 800c06c:	e020      	b.n	800c0b0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c074:	4619      	mov	r1, r3
 800c076:	6878      	ldr	r0, [r7, #4]
 800c078:	f000 fa52 	bl	800c520 <USBD_StdItfReq>
 800c07c:	4603      	mov	r3, r0
 800c07e:	73fb      	strb	r3, [r7, #15]
      break;
 800c080:	e016      	b.n	800c0b0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c088:	4619      	mov	r1, r3
 800c08a:	6878      	ldr	r0, [r7, #4]
 800c08c:	f000 fa91 	bl	800c5b2 <USBD_StdEPReq>
 800c090:	4603      	mov	r3, r0
 800c092:	73fb      	strb	r3, [r7, #15]
      break;
 800c094:	e00c      	b.n	800c0b0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c09c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c0a0:	b2db      	uxtb	r3, r3
 800c0a2:	4619      	mov	r1, r3
 800c0a4:	6878      	ldr	r0, [r7, #4]
 800c0a6:	f001 fbdd 	bl	800d864 <USBD_LL_StallEP>
 800c0aa:	4603      	mov	r3, r0
 800c0ac:	73fb      	strb	r3, [r7, #15]
      break;
 800c0ae:	bf00      	nop
  }

  return ret;
 800c0b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	3710      	adds	r7, #16
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bd80      	pop	{r7, pc}

0800c0ba <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c0ba:	b580      	push	{r7, lr}
 800c0bc:	b086      	sub	sp, #24
 800c0be:	af00      	add	r7, sp, #0
 800c0c0:	60f8      	str	r0, [r7, #12]
 800c0c2:	460b      	mov	r3, r1
 800c0c4:	607a      	str	r2, [r7, #4]
 800c0c6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c0c8:	7afb      	ldrb	r3, [r7, #11]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d138      	bne.n	800c140 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800c0d4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c0dc:	2b03      	cmp	r3, #3
 800c0de:	d14a      	bne.n	800c176 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800c0e0:	693b      	ldr	r3, [r7, #16]
 800c0e2:	689a      	ldr	r2, [r3, #8]
 800c0e4:	693b      	ldr	r3, [r7, #16]
 800c0e6:	68db      	ldr	r3, [r3, #12]
 800c0e8:	429a      	cmp	r2, r3
 800c0ea:	d913      	bls.n	800c114 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c0ec:	693b      	ldr	r3, [r7, #16]
 800c0ee:	689a      	ldr	r2, [r3, #8]
 800c0f0:	693b      	ldr	r3, [r7, #16]
 800c0f2:	68db      	ldr	r3, [r3, #12]
 800c0f4:	1ad2      	subs	r2, r2, r3
 800c0f6:	693b      	ldr	r3, [r7, #16]
 800c0f8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c0fa:	693b      	ldr	r3, [r7, #16]
 800c0fc:	68da      	ldr	r2, [r3, #12]
 800c0fe:	693b      	ldr	r3, [r7, #16]
 800c100:	689b      	ldr	r3, [r3, #8]
 800c102:	4293      	cmp	r3, r2
 800c104:	bf28      	it	cs
 800c106:	4613      	movcs	r3, r2
 800c108:	461a      	mov	r2, r3
 800c10a:	6879      	ldr	r1, [r7, #4]
 800c10c:	68f8      	ldr	r0, [r7, #12]
 800c10e:	f000 ffc5 	bl	800d09c <USBD_CtlContinueRx>
 800c112:	e030      	b.n	800c176 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c11a:	b2db      	uxtb	r3, r3
 800c11c:	2b03      	cmp	r3, #3
 800c11e:	d10b      	bne.n	800c138 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c126:	691b      	ldr	r3, [r3, #16]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d005      	beq.n	800c138 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c132:	691b      	ldr	r3, [r3, #16]
 800c134:	68f8      	ldr	r0, [r7, #12]
 800c136:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c138:	68f8      	ldr	r0, [r7, #12]
 800c13a:	f000 ffc0 	bl	800d0be <USBD_CtlSendStatus>
 800c13e:	e01a      	b.n	800c176 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c146:	b2db      	uxtb	r3, r3
 800c148:	2b03      	cmp	r3, #3
 800c14a:	d114      	bne.n	800c176 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c152:	699b      	ldr	r3, [r3, #24]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d00e      	beq.n	800c176 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c15e:	699b      	ldr	r3, [r3, #24]
 800c160:	7afa      	ldrb	r2, [r7, #11]
 800c162:	4611      	mov	r1, r2
 800c164:	68f8      	ldr	r0, [r7, #12]
 800c166:	4798      	blx	r3
 800c168:	4603      	mov	r3, r0
 800c16a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c16c:	7dfb      	ldrb	r3, [r7, #23]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d001      	beq.n	800c176 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800c172:	7dfb      	ldrb	r3, [r7, #23]
 800c174:	e000      	b.n	800c178 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800c176:	2300      	movs	r3, #0
}
 800c178:	4618      	mov	r0, r3
 800c17a:	3718      	adds	r7, #24
 800c17c:	46bd      	mov	sp, r7
 800c17e:	bd80      	pop	{r7, pc}

0800c180 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b086      	sub	sp, #24
 800c184:	af00      	add	r7, sp, #0
 800c186:	60f8      	str	r0, [r7, #12]
 800c188:	460b      	mov	r3, r1
 800c18a:	607a      	str	r2, [r7, #4]
 800c18c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c18e:	7afb      	ldrb	r3, [r7, #11]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d16b      	bne.n	800c26c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	3314      	adds	r3, #20
 800c198:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c1a0:	2b02      	cmp	r3, #2
 800c1a2:	d156      	bne.n	800c252 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800c1a4:	693b      	ldr	r3, [r7, #16]
 800c1a6:	689a      	ldr	r2, [r3, #8]
 800c1a8:	693b      	ldr	r3, [r7, #16]
 800c1aa:	68db      	ldr	r3, [r3, #12]
 800c1ac:	429a      	cmp	r2, r3
 800c1ae:	d914      	bls.n	800c1da <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c1b0:	693b      	ldr	r3, [r7, #16]
 800c1b2:	689a      	ldr	r2, [r3, #8]
 800c1b4:	693b      	ldr	r3, [r7, #16]
 800c1b6:	68db      	ldr	r3, [r3, #12]
 800c1b8:	1ad2      	subs	r2, r2, r3
 800c1ba:	693b      	ldr	r3, [r7, #16]
 800c1bc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c1be:	693b      	ldr	r3, [r7, #16]
 800c1c0:	689b      	ldr	r3, [r3, #8]
 800c1c2:	461a      	mov	r2, r3
 800c1c4:	6879      	ldr	r1, [r7, #4]
 800c1c6:	68f8      	ldr	r0, [r7, #12]
 800c1c8:	f000 ff3a 	bl	800d040 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	2100      	movs	r1, #0
 800c1d2:	68f8      	ldr	r0, [r7, #12]
 800c1d4:	f001 fbf0 	bl	800d9b8 <USBD_LL_PrepareReceive>
 800c1d8:	e03b      	b.n	800c252 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c1da:	693b      	ldr	r3, [r7, #16]
 800c1dc:	68da      	ldr	r2, [r3, #12]
 800c1de:	693b      	ldr	r3, [r7, #16]
 800c1e0:	689b      	ldr	r3, [r3, #8]
 800c1e2:	429a      	cmp	r2, r3
 800c1e4:	d11c      	bne.n	800c220 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c1e6:	693b      	ldr	r3, [r7, #16]
 800c1e8:	685a      	ldr	r2, [r3, #4]
 800c1ea:	693b      	ldr	r3, [r7, #16]
 800c1ec:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c1ee:	429a      	cmp	r2, r3
 800c1f0:	d316      	bcc.n	800c220 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c1f2:	693b      	ldr	r3, [r7, #16]
 800c1f4:	685a      	ldr	r2, [r3, #4]
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c1fc:	429a      	cmp	r2, r3
 800c1fe:	d20f      	bcs.n	800c220 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c200:	2200      	movs	r2, #0
 800c202:	2100      	movs	r1, #0
 800c204:	68f8      	ldr	r0, [r7, #12]
 800c206:	f000 ff1b 	bl	800d040 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	2200      	movs	r2, #0
 800c20e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c212:	2300      	movs	r3, #0
 800c214:	2200      	movs	r2, #0
 800c216:	2100      	movs	r1, #0
 800c218:	68f8      	ldr	r0, [r7, #12]
 800c21a:	f001 fbcd 	bl	800d9b8 <USBD_LL_PrepareReceive>
 800c21e:	e018      	b.n	800c252 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c226:	b2db      	uxtb	r3, r3
 800c228:	2b03      	cmp	r3, #3
 800c22a:	d10b      	bne.n	800c244 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c232:	68db      	ldr	r3, [r3, #12]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d005      	beq.n	800c244 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c23e:	68db      	ldr	r3, [r3, #12]
 800c240:	68f8      	ldr	r0, [r7, #12]
 800c242:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c244:	2180      	movs	r1, #128	@ 0x80
 800c246:	68f8      	ldr	r0, [r7, #12]
 800c248:	f001 fb0c 	bl	800d864 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c24c:	68f8      	ldr	r0, [r7, #12]
 800c24e:	f000 ff49 	bl	800d0e4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800c258:	2b01      	cmp	r3, #1
 800c25a:	d122      	bne.n	800c2a2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800c25c:	68f8      	ldr	r0, [r7, #12]
 800c25e:	f7ff fe98 	bl	800bf92 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	2200      	movs	r2, #0
 800c266:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800c26a:	e01a      	b.n	800c2a2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c272:	b2db      	uxtb	r3, r3
 800c274:	2b03      	cmp	r3, #3
 800c276:	d114      	bne.n	800c2a2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c27e:	695b      	ldr	r3, [r3, #20]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d00e      	beq.n	800c2a2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c28a:	695b      	ldr	r3, [r3, #20]
 800c28c:	7afa      	ldrb	r2, [r7, #11]
 800c28e:	4611      	mov	r1, r2
 800c290:	68f8      	ldr	r0, [r7, #12]
 800c292:	4798      	blx	r3
 800c294:	4603      	mov	r3, r0
 800c296:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c298:	7dfb      	ldrb	r3, [r7, #23]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d001      	beq.n	800c2a2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800c29e:	7dfb      	ldrb	r3, [r7, #23]
 800c2a0:	e000      	b.n	800c2a4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800c2a2:	2300      	movs	r3, #0
}
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	3718      	adds	r7, #24
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	bd80      	pop	{r7, pc}

0800c2ac <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b082      	sub	sp, #8
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2201      	movs	r2, #1
 800c2b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	2200      	movs	r2, #0
 800c2c0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	2200      	movs	r2, #0
 800c2ce:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d101      	bne.n	800c2e0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800c2dc:	2303      	movs	r3, #3
 800c2de:	e02f      	b.n	800c340 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d00f      	beq.n	800c30a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c2f0:	685b      	ldr	r3, [r3, #4]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d009      	beq.n	800c30a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c2fc:	685b      	ldr	r3, [r3, #4]
 800c2fe:	687a      	ldr	r2, [r7, #4]
 800c300:	6852      	ldr	r2, [r2, #4]
 800c302:	b2d2      	uxtb	r2, r2
 800c304:	4611      	mov	r1, r2
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c30a:	2340      	movs	r3, #64	@ 0x40
 800c30c:	2200      	movs	r2, #0
 800c30e:	2100      	movs	r1, #0
 800c310:	6878      	ldr	r0, [r7, #4]
 800c312:	f001 fa62 	bl	800d7da <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	2201      	movs	r2, #1
 800c31a:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	2240      	movs	r2, #64	@ 0x40
 800c322:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c326:	2340      	movs	r3, #64	@ 0x40
 800c328:	2200      	movs	r2, #0
 800c32a:	2180      	movs	r1, #128	@ 0x80
 800c32c:	6878      	ldr	r0, [r7, #4]
 800c32e:	f001 fa54 	bl	800d7da <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	2201      	movs	r2, #1
 800c336:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2240      	movs	r2, #64	@ 0x40
 800c33c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800c33e:	2300      	movs	r3, #0
}
 800c340:	4618      	mov	r0, r3
 800c342:	3708      	adds	r7, #8
 800c344:	46bd      	mov	sp, r7
 800c346:	bd80      	pop	{r7, pc}

0800c348 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c348:	b480      	push	{r7}
 800c34a:	b083      	sub	sp, #12
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
 800c350:	460b      	mov	r3, r1
 800c352:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	78fa      	ldrb	r2, [r7, #3]
 800c358:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c35a:	2300      	movs	r3, #0
}
 800c35c:	4618      	mov	r0, r3
 800c35e:	370c      	adds	r7, #12
 800c360:	46bd      	mov	sp, r7
 800c362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c366:	4770      	bx	lr

0800c368 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c368:	b480      	push	{r7}
 800c36a:	b083      	sub	sp, #12
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c376:	b2da      	uxtb	r2, r3
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	2204      	movs	r2, #4
 800c382:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800c386:	2300      	movs	r3, #0
}
 800c388:	4618      	mov	r0, r3
 800c38a:	370c      	adds	r7, #12
 800c38c:	46bd      	mov	sp, r7
 800c38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c392:	4770      	bx	lr

0800c394 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c394:	b480      	push	{r7}
 800c396:	b083      	sub	sp, #12
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c3a2:	b2db      	uxtb	r3, r3
 800c3a4:	2b04      	cmp	r3, #4
 800c3a6:	d106      	bne.n	800c3b6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800c3ae:	b2da      	uxtb	r2, r3
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800c3b6:	2300      	movs	r3, #0
}
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	370c      	adds	r7, #12
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c2:	4770      	bx	lr

0800c3c4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b082      	sub	sp, #8
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d101      	bne.n	800c3da <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800c3d6:	2303      	movs	r3, #3
 800c3d8:	e012      	b.n	800c400 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c3e0:	b2db      	uxtb	r3, r3
 800c3e2:	2b03      	cmp	r3, #3
 800c3e4:	d10b      	bne.n	800c3fe <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c3ec:	69db      	ldr	r3, [r3, #28]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d005      	beq.n	800c3fe <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c3f8:	69db      	ldr	r3, [r3, #28]
 800c3fa:	6878      	ldr	r0, [r7, #4]
 800c3fc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c3fe:	2300      	movs	r3, #0
}
 800c400:	4618      	mov	r0, r3
 800c402:	3708      	adds	r7, #8
 800c404:	46bd      	mov	sp, r7
 800c406:	bd80      	pop	{r7, pc}

0800c408 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c408:	b480      	push	{r7}
 800c40a:	b087      	sub	sp, #28
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c414:	697b      	ldr	r3, [r7, #20]
 800c416:	781b      	ldrb	r3, [r3, #0]
 800c418:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c41a:	697b      	ldr	r3, [r7, #20]
 800c41c:	3301      	adds	r3, #1
 800c41e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c420:	697b      	ldr	r3, [r7, #20]
 800c422:	781b      	ldrb	r3, [r3, #0]
 800c424:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c426:	8a3b      	ldrh	r3, [r7, #16]
 800c428:	021b      	lsls	r3, r3, #8
 800c42a:	b21a      	sxth	r2, r3
 800c42c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c430:	4313      	orrs	r3, r2
 800c432:	b21b      	sxth	r3, r3
 800c434:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c436:	89fb      	ldrh	r3, [r7, #14]
}
 800c438:	4618      	mov	r0, r3
 800c43a:	371c      	adds	r7, #28
 800c43c:	46bd      	mov	sp, r7
 800c43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c442:	4770      	bx	lr

0800c444 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c444:	b580      	push	{r7, lr}
 800c446:	b084      	sub	sp, #16
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]
 800c44c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c44e:	2300      	movs	r3, #0
 800c450:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c452:	683b      	ldr	r3, [r7, #0]
 800c454:	781b      	ldrb	r3, [r3, #0]
 800c456:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c45a:	2b40      	cmp	r3, #64	@ 0x40
 800c45c:	d005      	beq.n	800c46a <USBD_StdDevReq+0x26>
 800c45e:	2b40      	cmp	r3, #64	@ 0x40
 800c460:	d853      	bhi.n	800c50a <USBD_StdDevReq+0xc6>
 800c462:	2b00      	cmp	r3, #0
 800c464:	d00b      	beq.n	800c47e <USBD_StdDevReq+0x3a>
 800c466:	2b20      	cmp	r3, #32
 800c468:	d14f      	bne.n	800c50a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c470:	689b      	ldr	r3, [r3, #8]
 800c472:	6839      	ldr	r1, [r7, #0]
 800c474:	6878      	ldr	r0, [r7, #4]
 800c476:	4798      	blx	r3
 800c478:	4603      	mov	r3, r0
 800c47a:	73fb      	strb	r3, [r7, #15]
      break;
 800c47c:	e04a      	b.n	800c514 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c47e:	683b      	ldr	r3, [r7, #0]
 800c480:	785b      	ldrb	r3, [r3, #1]
 800c482:	2b09      	cmp	r3, #9
 800c484:	d83b      	bhi.n	800c4fe <USBD_StdDevReq+0xba>
 800c486:	a201      	add	r2, pc, #4	@ (adr r2, 800c48c <USBD_StdDevReq+0x48>)
 800c488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c48c:	0800c4e1 	.word	0x0800c4e1
 800c490:	0800c4f5 	.word	0x0800c4f5
 800c494:	0800c4ff 	.word	0x0800c4ff
 800c498:	0800c4eb 	.word	0x0800c4eb
 800c49c:	0800c4ff 	.word	0x0800c4ff
 800c4a0:	0800c4bf 	.word	0x0800c4bf
 800c4a4:	0800c4b5 	.word	0x0800c4b5
 800c4a8:	0800c4ff 	.word	0x0800c4ff
 800c4ac:	0800c4d7 	.word	0x0800c4d7
 800c4b0:	0800c4c9 	.word	0x0800c4c9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c4b4:	6839      	ldr	r1, [r7, #0]
 800c4b6:	6878      	ldr	r0, [r7, #4]
 800c4b8:	f000 f9de 	bl	800c878 <USBD_GetDescriptor>
          break;
 800c4bc:	e024      	b.n	800c508 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c4be:	6839      	ldr	r1, [r7, #0]
 800c4c0:	6878      	ldr	r0, [r7, #4]
 800c4c2:	f000 fb6d 	bl	800cba0 <USBD_SetAddress>
          break;
 800c4c6:	e01f      	b.n	800c508 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c4c8:	6839      	ldr	r1, [r7, #0]
 800c4ca:	6878      	ldr	r0, [r7, #4]
 800c4cc:	f000 fbac 	bl	800cc28 <USBD_SetConfig>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	73fb      	strb	r3, [r7, #15]
          break;
 800c4d4:	e018      	b.n	800c508 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c4d6:	6839      	ldr	r1, [r7, #0]
 800c4d8:	6878      	ldr	r0, [r7, #4]
 800c4da:	f000 fc4b 	bl	800cd74 <USBD_GetConfig>
          break;
 800c4de:	e013      	b.n	800c508 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c4e0:	6839      	ldr	r1, [r7, #0]
 800c4e2:	6878      	ldr	r0, [r7, #4]
 800c4e4:	f000 fc7c 	bl	800cde0 <USBD_GetStatus>
          break;
 800c4e8:	e00e      	b.n	800c508 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c4ea:	6839      	ldr	r1, [r7, #0]
 800c4ec:	6878      	ldr	r0, [r7, #4]
 800c4ee:	f000 fcab 	bl	800ce48 <USBD_SetFeature>
          break;
 800c4f2:	e009      	b.n	800c508 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c4f4:	6839      	ldr	r1, [r7, #0]
 800c4f6:	6878      	ldr	r0, [r7, #4]
 800c4f8:	f000 fcba 	bl	800ce70 <USBD_ClrFeature>
          break;
 800c4fc:	e004      	b.n	800c508 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800c4fe:	6839      	ldr	r1, [r7, #0]
 800c500:	6878      	ldr	r0, [r7, #4]
 800c502:	f000 fd11 	bl	800cf28 <USBD_CtlError>
          break;
 800c506:	bf00      	nop
      }
      break;
 800c508:	e004      	b.n	800c514 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800c50a:	6839      	ldr	r1, [r7, #0]
 800c50c:	6878      	ldr	r0, [r7, #4]
 800c50e:	f000 fd0b 	bl	800cf28 <USBD_CtlError>
      break;
 800c512:	bf00      	nop
  }

  return ret;
 800c514:	7bfb      	ldrb	r3, [r7, #15]
}
 800c516:	4618      	mov	r0, r3
 800c518:	3710      	adds	r7, #16
 800c51a:	46bd      	mov	sp, r7
 800c51c:	bd80      	pop	{r7, pc}
 800c51e:	bf00      	nop

0800c520 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b084      	sub	sp, #16
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
 800c528:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c52a:	2300      	movs	r3, #0
 800c52c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	781b      	ldrb	r3, [r3, #0]
 800c532:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c536:	2b40      	cmp	r3, #64	@ 0x40
 800c538:	d005      	beq.n	800c546 <USBD_StdItfReq+0x26>
 800c53a:	2b40      	cmp	r3, #64	@ 0x40
 800c53c:	d82f      	bhi.n	800c59e <USBD_StdItfReq+0x7e>
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d001      	beq.n	800c546 <USBD_StdItfReq+0x26>
 800c542:	2b20      	cmp	r3, #32
 800c544:	d12b      	bne.n	800c59e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c54c:	b2db      	uxtb	r3, r3
 800c54e:	3b01      	subs	r3, #1
 800c550:	2b02      	cmp	r3, #2
 800c552:	d81d      	bhi.n	800c590 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c554:	683b      	ldr	r3, [r7, #0]
 800c556:	889b      	ldrh	r3, [r3, #4]
 800c558:	b2db      	uxtb	r3, r3
 800c55a:	2b01      	cmp	r3, #1
 800c55c:	d813      	bhi.n	800c586 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c564:	689b      	ldr	r3, [r3, #8]
 800c566:	6839      	ldr	r1, [r7, #0]
 800c568:	6878      	ldr	r0, [r7, #4]
 800c56a:	4798      	blx	r3
 800c56c:	4603      	mov	r3, r0
 800c56e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c570:	683b      	ldr	r3, [r7, #0]
 800c572:	88db      	ldrh	r3, [r3, #6]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d110      	bne.n	800c59a <USBD_StdItfReq+0x7a>
 800c578:	7bfb      	ldrb	r3, [r7, #15]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d10d      	bne.n	800c59a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c57e:	6878      	ldr	r0, [r7, #4]
 800c580:	f000 fd9d 	bl	800d0be <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c584:	e009      	b.n	800c59a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800c586:	6839      	ldr	r1, [r7, #0]
 800c588:	6878      	ldr	r0, [r7, #4]
 800c58a:	f000 fccd 	bl	800cf28 <USBD_CtlError>
          break;
 800c58e:	e004      	b.n	800c59a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800c590:	6839      	ldr	r1, [r7, #0]
 800c592:	6878      	ldr	r0, [r7, #4]
 800c594:	f000 fcc8 	bl	800cf28 <USBD_CtlError>
          break;
 800c598:	e000      	b.n	800c59c <USBD_StdItfReq+0x7c>
          break;
 800c59a:	bf00      	nop
      }
      break;
 800c59c:	e004      	b.n	800c5a8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800c59e:	6839      	ldr	r1, [r7, #0]
 800c5a0:	6878      	ldr	r0, [r7, #4]
 800c5a2:	f000 fcc1 	bl	800cf28 <USBD_CtlError>
      break;
 800c5a6:	bf00      	nop
  }

  return ret;
 800c5a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	3710      	adds	r7, #16
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	bd80      	pop	{r7, pc}

0800c5b2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5b2:	b580      	push	{r7, lr}
 800c5b4:	b084      	sub	sp, #16
 800c5b6:	af00      	add	r7, sp, #0
 800c5b8:	6078      	str	r0, [r7, #4]
 800c5ba:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c5bc:	2300      	movs	r3, #0
 800c5be:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800c5c0:	683b      	ldr	r3, [r7, #0]
 800c5c2:	889b      	ldrh	r3, [r3, #4]
 800c5c4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c5c6:	683b      	ldr	r3, [r7, #0]
 800c5c8:	781b      	ldrb	r3, [r3, #0]
 800c5ca:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c5ce:	2b40      	cmp	r3, #64	@ 0x40
 800c5d0:	d007      	beq.n	800c5e2 <USBD_StdEPReq+0x30>
 800c5d2:	2b40      	cmp	r3, #64	@ 0x40
 800c5d4:	f200 8145 	bhi.w	800c862 <USBD_StdEPReq+0x2b0>
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d00c      	beq.n	800c5f6 <USBD_StdEPReq+0x44>
 800c5dc:	2b20      	cmp	r3, #32
 800c5de:	f040 8140 	bne.w	800c862 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c5e8:	689b      	ldr	r3, [r3, #8]
 800c5ea:	6839      	ldr	r1, [r7, #0]
 800c5ec:	6878      	ldr	r0, [r7, #4]
 800c5ee:	4798      	blx	r3
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	73fb      	strb	r3, [r7, #15]
      break;
 800c5f4:	e13a      	b.n	800c86c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c5f6:	683b      	ldr	r3, [r7, #0]
 800c5f8:	785b      	ldrb	r3, [r3, #1]
 800c5fa:	2b03      	cmp	r3, #3
 800c5fc:	d007      	beq.n	800c60e <USBD_StdEPReq+0x5c>
 800c5fe:	2b03      	cmp	r3, #3
 800c600:	f300 8129 	bgt.w	800c856 <USBD_StdEPReq+0x2a4>
 800c604:	2b00      	cmp	r3, #0
 800c606:	d07f      	beq.n	800c708 <USBD_StdEPReq+0x156>
 800c608:	2b01      	cmp	r3, #1
 800c60a:	d03c      	beq.n	800c686 <USBD_StdEPReq+0xd4>
 800c60c:	e123      	b.n	800c856 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c614:	b2db      	uxtb	r3, r3
 800c616:	2b02      	cmp	r3, #2
 800c618:	d002      	beq.n	800c620 <USBD_StdEPReq+0x6e>
 800c61a:	2b03      	cmp	r3, #3
 800c61c:	d016      	beq.n	800c64c <USBD_StdEPReq+0x9a>
 800c61e:	e02c      	b.n	800c67a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c620:	7bbb      	ldrb	r3, [r7, #14]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d00d      	beq.n	800c642 <USBD_StdEPReq+0x90>
 800c626:	7bbb      	ldrb	r3, [r7, #14]
 800c628:	2b80      	cmp	r3, #128	@ 0x80
 800c62a:	d00a      	beq.n	800c642 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c62c:	7bbb      	ldrb	r3, [r7, #14]
 800c62e:	4619      	mov	r1, r3
 800c630:	6878      	ldr	r0, [r7, #4]
 800c632:	f001 f917 	bl	800d864 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c636:	2180      	movs	r1, #128	@ 0x80
 800c638:	6878      	ldr	r0, [r7, #4]
 800c63a:	f001 f913 	bl	800d864 <USBD_LL_StallEP>
 800c63e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c640:	e020      	b.n	800c684 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800c642:	6839      	ldr	r1, [r7, #0]
 800c644:	6878      	ldr	r0, [r7, #4]
 800c646:	f000 fc6f 	bl	800cf28 <USBD_CtlError>
              break;
 800c64a:	e01b      	b.n	800c684 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	885b      	ldrh	r3, [r3, #2]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d10e      	bne.n	800c672 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c654:	7bbb      	ldrb	r3, [r7, #14]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d00b      	beq.n	800c672 <USBD_StdEPReq+0xc0>
 800c65a:	7bbb      	ldrb	r3, [r7, #14]
 800c65c:	2b80      	cmp	r3, #128	@ 0x80
 800c65e:	d008      	beq.n	800c672 <USBD_StdEPReq+0xc0>
 800c660:	683b      	ldr	r3, [r7, #0]
 800c662:	88db      	ldrh	r3, [r3, #6]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d104      	bne.n	800c672 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c668:	7bbb      	ldrb	r3, [r7, #14]
 800c66a:	4619      	mov	r1, r3
 800c66c:	6878      	ldr	r0, [r7, #4]
 800c66e:	f001 f8f9 	bl	800d864 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c672:	6878      	ldr	r0, [r7, #4]
 800c674:	f000 fd23 	bl	800d0be <USBD_CtlSendStatus>

              break;
 800c678:	e004      	b.n	800c684 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800c67a:	6839      	ldr	r1, [r7, #0]
 800c67c:	6878      	ldr	r0, [r7, #4]
 800c67e:	f000 fc53 	bl	800cf28 <USBD_CtlError>
              break;
 800c682:	bf00      	nop
          }
          break;
 800c684:	e0ec      	b.n	800c860 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c68c:	b2db      	uxtb	r3, r3
 800c68e:	2b02      	cmp	r3, #2
 800c690:	d002      	beq.n	800c698 <USBD_StdEPReq+0xe6>
 800c692:	2b03      	cmp	r3, #3
 800c694:	d016      	beq.n	800c6c4 <USBD_StdEPReq+0x112>
 800c696:	e030      	b.n	800c6fa <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c698:	7bbb      	ldrb	r3, [r7, #14]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d00d      	beq.n	800c6ba <USBD_StdEPReq+0x108>
 800c69e:	7bbb      	ldrb	r3, [r7, #14]
 800c6a0:	2b80      	cmp	r3, #128	@ 0x80
 800c6a2:	d00a      	beq.n	800c6ba <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c6a4:	7bbb      	ldrb	r3, [r7, #14]
 800c6a6:	4619      	mov	r1, r3
 800c6a8:	6878      	ldr	r0, [r7, #4]
 800c6aa:	f001 f8db 	bl	800d864 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c6ae:	2180      	movs	r1, #128	@ 0x80
 800c6b0:	6878      	ldr	r0, [r7, #4]
 800c6b2:	f001 f8d7 	bl	800d864 <USBD_LL_StallEP>
 800c6b6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c6b8:	e025      	b.n	800c706 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800c6ba:	6839      	ldr	r1, [r7, #0]
 800c6bc:	6878      	ldr	r0, [r7, #4]
 800c6be:	f000 fc33 	bl	800cf28 <USBD_CtlError>
              break;
 800c6c2:	e020      	b.n	800c706 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	885b      	ldrh	r3, [r3, #2]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d11b      	bne.n	800c704 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c6cc:	7bbb      	ldrb	r3, [r7, #14]
 800c6ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d004      	beq.n	800c6e0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c6d6:	7bbb      	ldrb	r3, [r7, #14]
 800c6d8:	4619      	mov	r1, r3
 800c6da:	6878      	ldr	r0, [r7, #4]
 800c6dc:	f001 f8e1 	bl	800d8a2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c6e0:	6878      	ldr	r0, [r7, #4]
 800c6e2:	f000 fcec 	bl	800d0be <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c6ec:	689b      	ldr	r3, [r3, #8]
 800c6ee:	6839      	ldr	r1, [r7, #0]
 800c6f0:	6878      	ldr	r0, [r7, #4]
 800c6f2:	4798      	blx	r3
 800c6f4:	4603      	mov	r3, r0
 800c6f6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800c6f8:	e004      	b.n	800c704 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800c6fa:	6839      	ldr	r1, [r7, #0]
 800c6fc:	6878      	ldr	r0, [r7, #4]
 800c6fe:	f000 fc13 	bl	800cf28 <USBD_CtlError>
              break;
 800c702:	e000      	b.n	800c706 <USBD_StdEPReq+0x154>
              break;
 800c704:	bf00      	nop
          }
          break;
 800c706:	e0ab      	b.n	800c860 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c70e:	b2db      	uxtb	r3, r3
 800c710:	2b02      	cmp	r3, #2
 800c712:	d002      	beq.n	800c71a <USBD_StdEPReq+0x168>
 800c714:	2b03      	cmp	r3, #3
 800c716:	d032      	beq.n	800c77e <USBD_StdEPReq+0x1cc>
 800c718:	e097      	b.n	800c84a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c71a:	7bbb      	ldrb	r3, [r7, #14]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d007      	beq.n	800c730 <USBD_StdEPReq+0x17e>
 800c720:	7bbb      	ldrb	r3, [r7, #14]
 800c722:	2b80      	cmp	r3, #128	@ 0x80
 800c724:	d004      	beq.n	800c730 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800c726:	6839      	ldr	r1, [r7, #0]
 800c728:	6878      	ldr	r0, [r7, #4]
 800c72a:	f000 fbfd 	bl	800cf28 <USBD_CtlError>
                break;
 800c72e:	e091      	b.n	800c854 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c730:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c734:	2b00      	cmp	r3, #0
 800c736:	da0b      	bge.n	800c750 <USBD_StdEPReq+0x19e>
 800c738:	7bbb      	ldrb	r3, [r7, #14]
 800c73a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c73e:	4613      	mov	r3, r2
 800c740:	009b      	lsls	r3, r3, #2
 800c742:	4413      	add	r3, r2
 800c744:	009b      	lsls	r3, r3, #2
 800c746:	3310      	adds	r3, #16
 800c748:	687a      	ldr	r2, [r7, #4]
 800c74a:	4413      	add	r3, r2
 800c74c:	3304      	adds	r3, #4
 800c74e:	e00b      	b.n	800c768 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c750:	7bbb      	ldrb	r3, [r7, #14]
 800c752:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c756:	4613      	mov	r3, r2
 800c758:	009b      	lsls	r3, r3, #2
 800c75a:	4413      	add	r3, r2
 800c75c:	009b      	lsls	r3, r3, #2
 800c75e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c762:	687a      	ldr	r2, [r7, #4]
 800c764:	4413      	add	r3, r2
 800c766:	3304      	adds	r3, #4
 800c768:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c76a:	68bb      	ldr	r3, [r7, #8]
 800c76c:	2200      	movs	r2, #0
 800c76e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c770:	68bb      	ldr	r3, [r7, #8]
 800c772:	2202      	movs	r2, #2
 800c774:	4619      	mov	r1, r3
 800c776:	6878      	ldr	r0, [r7, #4]
 800c778:	f000 fc47 	bl	800d00a <USBD_CtlSendData>
              break;
 800c77c:	e06a      	b.n	800c854 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c77e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c782:	2b00      	cmp	r3, #0
 800c784:	da11      	bge.n	800c7aa <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c786:	7bbb      	ldrb	r3, [r7, #14]
 800c788:	f003 020f 	and.w	r2, r3, #15
 800c78c:	6879      	ldr	r1, [r7, #4]
 800c78e:	4613      	mov	r3, r2
 800c790:	009b      	lsls	r3, r3, #2
 800c792:	4413      	add	r3, r2
 800c794:	009b      	lsls	r3, r3, #2
 800c796:	440b      	add	r3, r1
 800c798:	3324      	adds	r3, #36	@ 0x24
 800c79a:	881b      	ldrh	r3, [r3, #0]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d117      	bne.n	800c7d0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c7a0:	6839      	ldr	r1, [r7, #0]
 800c7a2:	6878      	ldr	r0, [r7, #4]
 800c7a4:	f000 fbc0 	bl	800cf28 <USBD_CtlError>
                  break;
 800c7a8:	e054      	b.n	800c854 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c7aa:	7bbb      	ldrb	r3, [r7, #14]
 800c7ac:	f003 020f 	and.w	r2, r3, #15
 800c7b0:	6879      	ldr	r1, [r7, #4]
 800c7b2:	4613      	mov	r3, r2
 800c7b4:	009b      	lsls	r3, r3, #2
 800c7b6:	4413      	add	r3, r2
 800c7b8:	009b      	lsls	r3, r3, #2
 800c7ba:	440b      	add	r3, r1
 800c7bc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c7c0:	881b      	ldrh	r3, [r3, #0]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d104      	bne.n	800c7d0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c7c6:	6839      	ldr	r1, [r7, #0]
 800c7c8:	6878      	ldr	r0, [r7, #4]
 800c7ca:	f000 fbad 	bl	800cf28 <USBD_CtlError>
                  break;
 800c7ce:	e041      	b.n	800c854 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c7d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	da0b      	bge.n	800c7f0 <USBD_StdEPReq+0x23e>
 800c7d8:	7bbb      	ldrb	r3, [r7, #14]
 800c7da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c7de:	4613      	mov	r3, r2
 800c7e0:	009b      	lsls	r3, r3, #2
 800c7e2:	4413      	add	r3, r2
 800c7e4:	009b      	lsls	r3, r3, #2
 800c7e6:	3310      	adds	r3, #16
 800c7e8:	687a      	ldr	r2, [r7, #4]
 800c7ea:	4413      	add	r3, r2
 800c7ec:	3304      	adds	r3, #4
 800c7ee:	e00b      	b.n	800c808 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c7f0:	7bbb      	ldrb	r3, [r7, #14]
 800c7f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c7f6:	4613      	mov	r3, r2
 800c7f8:	009b      	lsls	r3, r3, #2
 800c7fa:	4413      	add	r3, r2
 800c7fc:	009b      	lsls	r3, r3, #2
 800c7fe:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c802:	687a      	ldr	r2, [r7, #4]
 800c804:	4413      	add	r3, r2
 800c806:	3304      	adds	r3, #4
 800c808:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c80a:	7bbb      	ldrb	r3, [r7, #14]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d002      	beq.n	800c816 <USBD_StdEPReq+0x264>
 800c810:	7bbb      	ldrb	r3, [r7, #14]
 800c812:	2b80      	cmp	r3, #128	@ 0x80
 800c814:	d103      	bne.n	800c81e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800c816:	68bb      	ldr	r3, [r7, #8]
 800c818:	2200      	movs	r2, #0
 800c81a:	601a      	str	r2, [r3, #0]
 800c81c:	e00e      	b.n	800c83c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c81e:	7bbb      	ldrb	r3, [r7, #14]
 800c820:	4619      	mov	r1, r3
 800c822:	6878      	ldr	r0, [r7, #4]
 800c824:	f001 f85c 	bl	800d8e0 <USBD_LL_IsStallEP>
 800c828:	4603      	mov	r3, r0
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d003      	beq.n	800c836 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800c82e:	68bb      	ldr	r3, [r7, #8]
 800c830:	2201      	movs	r2, #1
 800c832:	601a      	str	r2, [r3, #0]
 800c834:	e002      	b.n	800c83c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800c836:	68bb      	ldr	r3, [r7, #8]
 800c838:	2200      	movs	r2, #0
 800c83a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c83c:	68bb      	ldr	r3, [r7, #8]
 800c83e:	2202      	movs	r2, #2
 800c840:	4619      	mov	r1, r3
 800c842:	6878      	ldr	r0, [r7, #4]
 800c844:	f000 fbe1 	bl	800d00a <USBD_CtlSendData>
              break;
 800c848:	e004      	b.n	800c854 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800c84a:	6839      	ldr	r1, [r7, #0]
 800c84c:	6878      	ldr	r0, [r7, #4]
 800c84e:	f000 fb6b 	bl	800cf28 <USBD_CtlError>
              break;
 800c852:	bf00      	nop
          }
          break;
 800c854:	e004      	b.n	800c860 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800c856:	6839      	ldr	r1, [r7, #0]
 800c858:	6878      	ldr	r0, [r7, #4]
 800c85a:	f000 fb65 	bl	800cf28 <USBD_CtlError>
          break;
 800c85e:	bf00      	nop
      }
      break;
 800c860:	e004      	b.n	800c86c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800c862:	6839      	ldr	r1, [r7, #0]
 800c864:	6878      	ldr	r0, [r7, #4]
 800c866:	f000 fb5f 	bl	800cf28 <USBD_CtlError>
      break;
 800c86a:	bf00      	nop
  }

  return ret;
 800c86c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c86e:	4618      	mov	r0, r3
 800c870:	3710      	adds	r7, #16
 800c872:	46bd      	mov	sp, r7
 800c874:	bd80      	pop	{r7, pc}
	...

0800c878 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b084      	sub	sp, #16
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
 800c880:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c882:	2300      	movs	r3, #0
 800c884:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c886:	2300      	movs	r3, #0
 800c888:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c88a:	2300      	movs	r3, #0
 800c88c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c88e:	683b      	ldr	r3, [r7, #0]
 800c890:	885b      	ldrh	r3, [r3, #2]
 800c892:	0a1b      	lsrs	r3, r3, #8
 800c894:	b29b      	uxth	r3, r3
 800c896:	3b01      	subs	r3, #1
 800c898:	2b0e      	cmp	r3, #14
 800c89a:	f200 8152 	bhi.w	800cb42 <USBD_GetDescriptor+0x2ca>
 800c89e:	a201      	add	r2, pc, #4	@ (adr r2, 800c8a4 <USBD_GetDescriptor+0x2c>)
 800c8a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8a4:	0800c915 	.word	0x0800c915
 800c8a8:	0800c92d 	.word	0x0800c92d
 800c8ac:	0800c96d 	.word	0x0800c96d
 800c8b0:	0800cb43 	.word	0x0800cb43
 800c8b4:	0800cb43 	.word	0x0800cb43
 800c8b8:	0800cae3 	.word	0x0800cae3
 800c8bc:	0800cb0f 	.word	0x0800cb0f
 800c8c0:	0800cb43 	.word	0x0800cb43
 800c8c4:	0800cb43 	.word	0x0800cb43
 800c8c8:	0800cb43 	.word	0x0800cb43
 800c8cc:	0800cb43 	.word	0x0800cb43
 800c8d0:	0800cb43 	.word	0x0800cb43
 800c8d4:	0800cb43 	.word	0x0800cb43
 800c8d8:	0800cb43 	.word	0x0800cb43
 800c8dc:	0800c8e1 	.word	0x0800c8e1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c8e6:	69db      	ldr	r3, [r3, #28]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d00b      	beq.n	800c904 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c8f2:	69db      	ldr	r3, [r3, #28]
 800c8f4:	687a      	ldr	r2, [r7, #4]
 800c8f6:	7c12      	ldrb	r2, [r2, #16]
 800c8f8:	f107 0108 	add.w	r1, r7, #8
 800c8fc:	4610      	mov	r0, r2
 800c8fe:	4798      	blx	r3
 800c900:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c902:	e126      	b.n	800cb52 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c904:	6839      	ldr	r1, [r7, #0]
 800c906:	6878      	ldr	r0, [r7, #4]
 800c908:	f000 fb0e 	bl	800cf28 <USBD_CtlError>
        err++;
 800c90c:	7afb      	ldrb	r3, [r7, #11]
 800c90e:	3301      	adds	r3, #1
 800c910:	72fb      	strb	r3, [r7, #11]
      break;
 800c912:	e11e      	b.n	800cb52 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	687a      	ldr	r2, [r7, #4]
 800c91e:	7c12      	ldrb	r2, [r2, #16]
 800c920:	f107 0108 	add.w	r1, r7, #8
 800c924:	4610      	mov	r0, r2
 800c926:	4798      	blx	r3
 800c928:	60f8      	str	r0, [r7, #12]
      break;
 800c92a:	e112      	b.n	800cb52 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	7c1b      	ldrb	r3, [r3, #16]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d10d      	bne.n	800c950 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c93a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c93c:	f107 0208 	add.w	r2, r7, #8
 800c940:	4610      	mov	r0, r2
 800c942:	4798      	blx	r3
 800c944:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	3301      	adds	r3, #1
 800c94a:	2202      	movs	r2, #2
 800c94c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c94e:	e100      	b.n	800cb52 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c958:	f107 0208 	add.w	r2, r7, #8
 800c95c:	4610      	mov	r0, r2
 800c95e:	4798      	blx	r3
 800c960:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	3301      	adds	r3, #1
 800c966:	2202      	movs	r2, #2
 800c968:	701a      	strb	r2, [r3, #0]
      break;
 800c96a:	e0f2      	b.n	800cb52 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c96c:	683b      	ldr	r3, [r7, #0]
 800c96e:	885b      	ldrh	r3, [r3, #2]
 800c970:	b2db      	uxtb	r3, r3
 800c972:	2b05      	cmp	r3, #5
 800c974:	f200 80ac 	bhi.w	800cad0 <USBD_GetDescriptor+0x258>
 800c978:	a201      	add	r2, pc, #4	@ (adr r2, 800c980 <USBD_GetDescriptor+0x108>)
 800c97a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c97e:	bf00      	nop
 800c980:	0800c999 	.word	0x0800c999
 800c984:	0800c9cd 	.word	0x0800c9cd
 800c988:	0800ca01 	.word	0x0800ca01
 800c98c:	0800ca35 	.word	0x0800ca35
 800c990:	0800ca69 	.word	0x0800ca69
 800c994:	0800ca9d 	.word	0x0800ca9d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c99e:	685b      	ldr	r3, [r3, #4]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d00b      	beq.n	800c9bc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c9aa:	685b      	ldr	r3, [r3, #4]
 800c9ac:	687a      	ldr	r2, [r7, #4]
 800c9ae:	7c12      	ldrb	r2, [r2, #16]
 800c9b0:	f107 0108 	add.w	r1, r7, #8
 800c9b4:	4610      	mov	r0, r2
 800c9b6:	4798      	blx	r3
 800c9b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c9ba:	e091      	b.n	800cae0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c9bc:	6839      	ldr	r1, [r7, #0]
 800c9be:	6878      	ldr	r0, [r7, #4]
 800c9c0:	f000 fab2 	bl	800cf28 <USBD_CtlError>
            err++;
 800c9c4:	7afb      	ldrb	r3, [r7, #11]
 800c9c6:	3301      	adds	r3, #1
 800c9c8:	72fb      	strb	r3, [r7, #11]
          break;
 800c9ca:	e089      	b.n	800cae0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c9d2:	689b      	ldr	r3, [r3, #8]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d00b      	beq.n	800c9f0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c9de:	689b      	ldr	r3, [r3, #8]
 800c9e0:	687a      	ldr	r2, [r7, #4]
 800c9e2:	7c12      	ldrb	r2, [r2, #16]
 800c9e4:	f107 0108 	add.w	r1, r7, #8
 800c9e8:	4610      	mov	r0, r2
 800c9ea:	4798      	blx	r3
 800c9ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c9ee:	e077      	b.n	800cae0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c9f0:	6839      	ldr	r1, [r7, #0]
 800c9f2:	6878      	ldr	r0, [r7, #4]
 800c9f4:	f000 fa98 	bl	800cf28 <USBD_CtlError>
            err++;
 800c9f8:	7afb      	ldrb	r3, [r7, #11]
 800c9fa:	3301      	adds	r3, #1
 800c9fc:	72fb      	strb	r3, [r7, #11]
          break;
 800c9fe:	e06f      	b.n	800cae0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ca06:	68db      	ldr	r3, [r3, #12]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d00b      	beq.n	800ca24 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ca12:	68db      	ldr	r3, [r3, #12]
 800ca14:	687a      	ldr	r2, [r7, #4]
 800ca16:	7c12      	ldrb	r2, [r2, #16]
 800ca18:	f107 0108 	add.w	r1, r7, #8
 800ca1c:	4610      	mov	r0, r2
 800ca1e:	4798      	blx	r3
 800ca20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ca22:	e05d      	b.n	800cae0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ca24:	6839      	ldr	r1, [r7, #0]
 800ca26:	6878      	ldr	r0, [r7, #4]
 800ca28:	f000 fa7e 	bl	800cf28 <USBD_CtlError>
            err++;
 800ca2c:	7afb      	ldrb	r3, [r7, #11]
 800ca2e:	3301      	adds	r3, #1
 800ca30:	72fb      	strb	r3, [r7, #11]
          break;
 800ca32:	e055      	b.n	800cae0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ca3a:	691b      	ldr	r3, [r3, #16]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d00b      	beq.n	800ca58 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ca46:	691b      	ldr	r3, [r3, #16]
 800ca48:	687a      	ldr	r2, [r7, #4]
 800ca4a:	7c12      	ldrb	r2, [r2, #16]
 800ca4c:	f107 0108 	add.w	r1, r7, #8
 800ca50:	4610      	mov	r0, r2
 800ca52:	4798      	blx	r3
 800ca54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ca56:	e043      	b.n	800cae0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ca58:	6839      	ldr	r1, [r7, #0]
 800ca5a:	6878      	ldr	r0, [r7, #4]
 800ca5c:	f000 fa64 	bl	800cf28 <USBD_CtlError>
            err++;
 800ca60:	7afb      	ldrb	r3, [r7, #11]
 800ca62:	3301      	adds	r3, #1
 800ca64:	72fb      	strb	r3, [r7, #11]
          break;
 800ca66:	e03b      	b.n	800cae0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ca6e:	695b      	ldr	r3, [r3, #20]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d00b      	beq.n	800ca8c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ca7a:	695b      	ldr	r3, [r3, #20]
 800ca7c:	687a      	ldr	r2, [r7, #4]
 800ca7e:	7c12      	ldrb	r2, [r2, #16]
 800ca80:	f107 0108 	add.w	r1, r7, #8
 800ca84:	4610      	mov	r0, r2
 800ca86:	4798      	blx	r3
 800ca88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ca8a:	e029      	b.n	800cae0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ca8c:	6839      	ldr	r1, [r7, #0]
 800ca8e:	6878      	ldr	r0, [r7, #4]
 800ca90:	f000 fa4a 	bl	800cf28 <USBD_CtlError>
            err++;
 800ca94:	7afb      	ldrb	r3, [r7, #11]
 800ca96:	3301      	adds	r3, #1
 800ca98:	72fb      	strb	r3, [r7, #11]
          break;
 800ca9a:	e021      	b.n	800cae0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800caa2:	699b      	ldr	r3, [r3, #24]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d00b      	beq.n	800cac0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800caae:	699b      	ldr	r3, [r3, #24]
 800cab0:	687a      	ldr	r2, [r7, #4]
 800cab2:	7c12      	ldrb	r2, [r2, #16]
 800cab4:	f107 0108 	add.w	r1, r7, #8
 800cab8:	4610      	mov	r0, r2
 800caba:	4798      	blx	r3
 800cabc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cabe:	e00f      	b.n	800cae0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cac0:	6839      	ldr	r1, [r7, #0]
 800cac2:	6878      	ldr	r0, [r7, #4]
 800cac4:	f000 fa30 	bl	800cf28 <USBD_CtlError>
            err++;
 800cac8:	7afb      	ldrb	r3, [r7, #11]
 800caca:	3301      	adds	r3, #1
 800cacc:	72fb      	strb	r3, [r7, #11]
          break;
 800cace:	e007      	b.n	800cae0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800cad0:	6839      	ldr	r1, [r7, #0]
 800cad2:	6878      	ldr	r0, [r7, #4]
 800cad4:	f000 fa28 	bl	800cf28 <USBD_CtlError>
          err++;
 800cad8:	7afb      	ldrb	r3, [r7, #11]
 800cada:	3301      	adds	r3, #1
 800cadc:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800cade:	bf00      	nop
      }
      break;
 800cae0:	e037      	b.n	800cb52 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	7c1b      	ldrb	r3, [r3, #16]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d109      	bne.n	800cafe <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800caf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800caf2:	f107 0208 	add.w	r2, r7, #8
 800caf6:	4610      	mov	r0, r2
 800caf8:	4798      	blx	r3
 800cafa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cafc:	e029      	b.n	800cb52 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cafe:	6839      	ldr	r1, [r7, #0]
 800cb00:	6878      	ldr	r0, [r7, #4]
 800cb02:	f000 fa11 	bl	800cf28 <USBD_CtlError>
        err++;
 800cb06:	7afb      	ldrb	r3, [r7, #11]
 800cb08:	3301      	adds	r3, #1
 800cb0a:	72fb      	strb	r3, [r7, #11]
      break;
 800cb0c:	e021      	b.n	800cb52 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	7c1b      	ldrb	r3, [r3, #16]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d10d      	bne.n	800cb32 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cb1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb1e:	f107 0208 	add.w	r2, r7, #8
 800cb22:	4610      	mov	r0, r2
 800cb24:	4798      	blx	r3
 800cb26:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	3301      	adds	r3, #1
 800cb2c:	2207      	movs	r2, #7
 800cb2e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cb30:	e00f      	b.n	800cb52 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cb32:	6839      	ldr	r1, [r7, #0]
 800cb34:	6878      	ldr	r0, [r7, #4]
 800cb36:	f000 f9f7 	bl	800cf28 <USBD_CtlError>
        err++;
 800cb3a:	7afb      	ldrb	r3, [r7, #11]
 800cb3c:	3301      	adds	r3, #1
 800cb3e:	72fb      	strb	r3, [r7, #11]
      break;
 800cb40:	e007      	b.n	800cb52 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800cb42:	6839      	ldr	r1, [r7, #0]
 800cb44:	6878      	ldr	r0, [r7, #4]
 800cb46:	f000 f9ef 	bl	800cf28 <USBD_CtlError>
      err++;
 800cb4a:	7afb      	ldrb	r3, [r7, #11]
 800cb4c:	3301      	adds	r3, #1
 800cb4e:	72fb      	strb	r3, [r7, #11]
      break;
 800cb50:	bf00      	nop
  }

  if (err != 0U)
 800cb52:	7afb      	ldrb	r3, [r7, #11]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d11e      	bne.n	800cb96 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800cb58:	683b      	ldr	r3, [r7, #0]
 800cb5a:	88db      	ldrh	r3, [r3, #6]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d016      	beq.n	800cb8e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800cb60:	893b      	ldrh	r3, [r7, #8]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d00e      	beq.n	800cb84 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800cb66:	683b      	ldr	r3, [r7, #0]
 800cb68:	88da      	ldrh	r2, [r3, #6]
 800cb6a:	893b      	ldrh	r3, [r7, #8]
 800cb6c:	4293      	cmp	r3, r2
 800cb6e:	bf28      	it	cs
 800cb70:	4613      	movcs	r3, r2
 800cb72:	b29b      	uxth	r3, r3
 800cb74:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800cb76:	893b      	ldrh	r3, [r7, #8]
 800cb78:	461a      	mov	r2, r3
 800cb7a:	68f9      	ldr	r1, [r7, #12]
 800cb7c:	6878      	ldr	r0, [r7, #4]
 800cb7e:	f000 fa44 	bl	800d00a <USBD_CtlSendData>
 800cb82:	e009      	b.n	800cb98 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800cb84:	6839      	ldr	r1, [r7, #0]
 800cb86:	6878      	ldr	r0, [r7, #4]
 800cb88:	f000 f9ce 	bl	800cf28 <USBD_CtlError>
 800cb8c:	e004      	b.n	800cb98 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800cb8e:	6878      	ldr	r0, [r7, #4]
 800cb90:	f000 fa95 	bl	800d0be <USBD_CtlSendStatus>
 800cb94:	e000      	b.n	800cb98 <USBD_GetDescriptor+0x320>
    return;
 800cb96:	bf00      	nop
  }
}
 800cb98:	3710      	adds	r7, #16
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	bd80      	pop	{r7, pc}
 800cb9e:	bf00      	nop

0800cba0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b084      	sub	sp, #16
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
 800cba8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cbaa:	683b      	ldr	r3, [r7, #0]
 800cbac:	889b      	ldrh	r3, [r3, #4]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d131      	bne.n	800cc16 <USBD_SetAddress+0x76>
 800cbb2:	683b      	ldr	r3, [r7, #0]
 800cbb4:	88db      	ldrh	r3, [r3, #6]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d12d      	bne.n	800cc16 <USBD_SetAddress+0x76>
 800cbba:	683b      	ldr	r3, [r7, #0]
 800cbbc:	885b      	ldrh	r3, [r3, #2]
 800cbbe:	2b7f      	cmp	r3, #127	@ 0x7f
 800cbc0:	d829      	bhi.n	800cc16 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cbc2:	683b      	ldr	r3, [r7, #0]
 800cbc4:	885b      	ldrh	r3, [r3, #2]
 800cbc6:	b2db      	uxtb	r3, r3
 800cbc8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cbcc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cbd4:	b2db      	uxtb	r3, r3
 800cbd6:	2b03      	cmp	r3, #3
 800cbd8:	d104      	bne.n	800cbe4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800cbda:	6839      	ldr	r1, [r7, #0]
 800cbdc:	6878      	ldr	r0, [r7, #4]
 800cbde:	f000 f9a3 	bl	800cf28 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cbe2:	e01d      	b.n	800cc20 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	7bfa      	ldrb	r2, [r7, #15]
 800cbe8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800cbec:	7bfb      	ldrb	r3, [r7, #15]
 800cbee:	4619      	mov	r1, r3
 800cbf0:	6878      	ldr	r0, [r7, #4]
 800cbf2:	f000 fea1 	bl	800d938 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800cbf6:	6878      	ldr	r0, [r7, #4]
 800cbf8:	f000 fa61 	bl	800d0be <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800cbfc:	7bfb      	ldrb	r3, [r7, #15]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d004      	beq.n	800cc0c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	2202      	movs	r2, #2
 800cc06:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc0a:	e009      	b.n	800cc20 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	2201      	movs	r2, #1
 800cc10:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc14:	e004      	b.n	800cc20 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800cc16:	6839      	ldr	r1, [r7, #0]
 800cc18:	6878      	ldr	r0, [r7, #4]
 800cc1a:	f000 f985 	bl	800cf28 <USBD_CtlError>
  }
}
 800cc1e:	bf00      	nop
 800cc20:	bf00      	nop
 800cc22:	3710      	adds	r7, #16
 800cc24:	46bd      	mov	sp, r7
 800cc26:	bd80      	pop	{r7, pc}

0800cc28 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b084      	sub	sp, #16
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
 800cc30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cc32:	2300      	movs	r3, #0
 800cc34:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800cc36:	683b      	ldr	r3, [r7, #0]
 800cc38:	885b      	ldrh	r3, [r3, #2]
 800cc3a:	b2da      	uxtb	r2, r3
 800cc3c:	4b4c      	ldr	r3, [pc, #304]	@ (800cd70 <USBD_SetConfig+0x148>)
 800cc3e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800cc40:	4b4b      	ldr	r3, [pc, #300]	@ (800cd70 <USBD_SetConfig+0x148>)
 800cc42:	781b      	ldrb	r3, [r3, #0]
 800cc44:	2b01      	cmp	r3, #1
 800cc46:	d905      	bls.n	800cc54 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800cc48:	6839      	ldr	r1, [r7, #0]
 800cc4a:	6878      	ldr	r0, [r7, #4]
 800cc4c:	f000 f96c 	bl	800cf28 <USBD_CtlError>
    return USBD_FAIL;
 800cc50:	2303      	movs	r3, #3
 800cc52:	e088      	b.n	800cd66 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cc5a:	b2db      	uxtb	r3, r3
 800cc5c:	2b02      	cmp	r3, #2
 800cc5e:	d002      	beq.n	800cc66 <USBD_SetConfig+0x3e>
 800cc60:	2b03      	cmp	r3, #3
 800cc62:	d025      	beq.n	800ccb0 <USBD_SetConfig+0x88>
 800cc64:	e071      	b.n	800cd4a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800cc66:	4b42      	ldr	r3, [pc, #264]	@ (800cd70 <USBD_SetConfig+0x148>)
 800cc68:	781b      	ldrb	r3, [r3, #0]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d01c      	beq.n	800cca8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800cc6e:	4b40      	ldr	r3, [pc, #256]	@ (800cd70 <USBD_SetConfig+0x148>)
 800cc70:	781b      	ldrb	r3, [r3, #0]
 800cc72:	461a      	mov	r2, r3
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cc78:	4b3d      	ldr	r3, [pc, #244]	@ (800cd70 <USBD_SetConfig+0x148>)
 800cc7a:	781b      	ldrb	r3, [r3, #0]
 800cc7c:	4619      	mov	r1, r3
 800cc7e:	6878      	ldr	r0, [r7, #4]
 800cc80:	f7ff f992 	bl	800bfa8 <USBD_SetClassConfig>
 800cc84:	4603      	mov	r3, r0
 800cc86:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800cc88:	7bfb      	ldrb	r3, [r7, #15]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d004      	beq.n	800cc98 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800cc8e:	6839      	ldr	r1, [r7, #0]
 800cc90:	6878      	ldr	r0, [r7, #4]
 800cc92:	f000 f949 	bl	800cf28 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cc96:	e065      	b.n	800cd64 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800cc98:	6878      	ldr	r0, [r7, #4]
 800cc9a:	f000 fa10 	bl	800d0be <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	2203      	movs	r2, #3
 800cca2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800cca6:	e05d      	b.n	800cd64 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800cca8:	6878      	ldr	r0, [r7, #4]
 800ccaa:	f000 fa08 	bl	800d0be <USBD_CtlSendStatus>
      break;
 800ccae:	e059      	b.n	800cd64 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ccb0:	4b2f      	ldr	r3, [pc, #188]	@ (800cd70 <USBD_SetConfig+0x148>)
 800ccb2:	781b      	ldrb	r3, [r3, #0]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d112      	bne.n	800ccde <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	2202      	movs	r2, #2
 800ccbc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800ccc0:	4b2b      	ldr	r3, [pc, #172]	@ (800cd70 <USBD_SetConfig+0x148>)
 800ccc2:	781b      	ldrb	r3, [r3, #0]
 800ccc4:	461a      	mov	r2, r3
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ccca:	4b29      	ldr	r3, [pc, #164]	@ (800cd70 <USBD_SetConfig+0x148>)
 800cccc:	781b      	ldrb	r3, [r3, #0]
 800ccce:	4619      	mov	r1, r3
 800ccd0:	6878      	ldr	r0, [r7, #4]
 800ccd2:	f7ff f985 	bl	800bfe0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ccd6:	6878      	ldr	r0, [r7, #4]
 800ccd8:	f000 f9f1 	bl	800d0be <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ccdc:	e042      	b.n	800cd64 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800ccde:	4b24      	ldr	r3, [pc, #144]	@ (800cd70 <USBD_SetConfig+0x148>)
 800cce0:	781b      	ldrb	r3, [r3, #0]
 800cce2:	461a      	mov	r2, r3
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	685b      	ldr	r3, [r3, #4]
 800cce8:	429a      	cmp	r2, r3
 800ccea:	d02a      	beq.n	800cd42 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	685b      	ldr	r3, [r3, #4]
 800ccf0:	b2db      	uxtb	r3, r3
 800ccf2:	4619      	mov	r1, r3
 800ccf4:	6878      	ldr	r0, [r7, #4]
 800ccf6:	f7ff f973 	bl	800bfe0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ccfa:	4b1d      	ldr	r3, [pc, #116]	@ (800cd70 <USBD_SetConfig+0x148>)
 800ccfc:	781b      	ldrb	r3, [r3, #0]
 800ccfe:	461a      	mov	r2, r3
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cd04:	4b1a      	ldr	r3, [pc, #104]	@ (800cd70 <USBD_SetConfig+0x148>)
 800cd06:	781b      	ldrb	r3, [r3, #0]
 800cd08:	4619      	mov	r1, r3
 800cd0a:	6878      	ldr	r0, [r7, #4]
 800cd0c:	f7ff f94c 	bl	800bfa8 <USBD_SetClassConfig>
 800cd10:	4603      	mov	r3, r0
 800cd12:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800cd14:	7bfb      	ldrb	r3, [r7, #15]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d00f      	beq.n	800cd3a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800cd1a:	6839      	ldr	r1, [r7, #0]
 800cd1c:	6878      	ldr	r0, [r7, #4]
 800cd1e:	f000 f903 	bl	800cf28 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	685b      	ldr	r3, [r3, #4]
 800cd26:	b2db      	uxtb	r3, r3
 800cd28:	4619      	mov	r1, r3
 800cd2a:	6878      	ldr	r0, [r7, #4]
 800cd2c:	f7ff f958 	bl	800bfe0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	2202      	movs	r2, #2
 800cd34:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800cd38:	e014      	b.n	800cd64 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800cd3a:	6878      	ldr	r0, [r7, #4]
 800cd3c:	f000 f9bf 	bl	800d0be <USBD_CtlSendStatus>
      break;
 800cd40:	e010      	b.n	800cd64 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800cd42:	6878      	ldr	r0, [r7, #4]
 800cd44:	f000 f9bb 	bl	800d0be <USBD_CtlSendStatus>
      break;
 800cd48:	e00c      	b.n	800cd64 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800cd4a:	6839      	ldr	r1, [r7, #0]
 800cd4c:	6878      	ldr	r0, [r7, #4]
 800cd4e:	f000 f8eb 	bl	800cf28 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cd52:	4b07      	ldr	r3, [pc, #28]	@ (800cd70 <USBD_SetConfig+0x148>)
 800cd54:	781b      	ldrb	r3, [r3, #0]
 800cd56:	4619      	mov	r1, r3
 800cd58:	6878      	ldr	r0, [r7, #4]
 800cd5a:	f7ff f941 	bl	800bfe0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800cd5e:	2303      	movs	r3, #3
 800cd60:	73fb      	strb	r3, [r7, #15]
      break;
 800cd62:	bf00      	nop
  }

  return ret;
 800cd64:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd66:	4618      	mov	r0, r3
 800cd68:	3710      	adds	r7, #16
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	bd80      	pop	{r7, pc}
 800cd6e:	bf00      	nop
 800cd70:	20004a34 	.word	0x20004a34

0800cd74 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd74:	b580      	push	{r7, lr}
 800cd76:	b082      	sub	sp, #8
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	6078      	str	r0, [r7, #4]
 800cd7c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800cd7e:	683b      	ldr	r3, [r7, #0]
 800cd80:	88db      	ldrh	r3, [r3, #6]
 800cd82:	2b01      	cmp	r3, #1
 800cd84:	d004      	beq.n	800cd90 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800cd86:	6839      	ldr	r1, [r7, #0]
 800cd88:	6878      	ldr	r0, [r7, #4]
 800cd8a:	f000 f8cd 	bl	800cf28 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800cd8e:	e023      	b.n	800cdd8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cd96:	b2db      	uxtb	r3, r3
 800cd98:	2b02      	cmp	r3, #2
 800cd9a:	dc02      	bgt.n	800cda2 <USBD_GetConfig+0x2e>
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	dc03      	bgt.n	800cda8 <USBD_GetConfig+0x34>
 800cda0:	e015      	b.n	800cdce <USBD_GetConfig+0x5a>
 800cda2:	2b03      	cmp	r3, #3
 800cda4:	d00b      	beq.n	800cdbe <USBD_GetConfig+0x4a>
 800cda6:	e012      	b.n	800cdce <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	2200      	movs	r2, #0
 800cdac:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	3308      	adds	r3, #8
 800cdb2:	2201      	movs	r2, #1
 800cdb4:	4619      	mov	r1, r3
 800cdb6:	6878      	ldr	r0, [r7, #4]
 800cdb8:	f000 f927 	bl	800d00a <USBD_CtlSendData>
        break;
 800cdbc:	e00c      	b.n	800cdd8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	3304      	adds	r3, #4
 800cdc2:	2201      	movs	r2, #1
 800cdc4:	4619      	mov	r1, r3
 800cdc6:	6878      	ldr	r0, [r7, #4]
 800cdc8:	f000 f91f 	bl	800d00a <USBD_CtlSendData>
        break;
 800cdcc:	e004      	b.n	800cdd8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800cdce:	6839      	ldr	r1, [r7, #0]
 800cdd0:	6878      	ldr	r0, [r7, #4]
 800cdd2:	f000 f8a9 	bl	800cf28 <USBD_CtlError>
        break;
 800cdd6:	bf00      	nop
}
 800cdd8:	bf00      	nop
 800cdda:	3708      	adds	r7, #8
 800cddc:	46bd      	mov	sp, r7
 800cdde:	bd80      	pop	{r7, pc}

0800cde0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cde0:	b580      	push	{r7, lr}
 800cde2:	b082      	sub	sp, #8
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]
 800cde8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cdf0:	b2db      	uxtb	r3, r3
 800cdf2:	3b01      	subs	r3, #1
 800cdf4:	2b02      	cmp	r3, #2
 800cdf6:	d81e      	bhi.n	800ce36 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800cdf8:	683b      	ldr	r3, [r7, #0]
 800cdfa:	88db      	ldrh	r3, [r3, #6]
 800cdfc:	2b02      	cmp	r3, #2
 800cdfe:	d004      	beq.n	800ce0a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ce00:	6839      	ldr	r1, [r7, #0]
 800ce02:	6878      	ldr	r0, [r7, #4]
 800ce04:	f000 f890 	bl	800cf28 <USBD_CtlError>
        break;
 800ce08:	e01a      	b.n	800ce40 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	2201      	movs	r2, #1
 800ce0e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d005      	beq.n	800ce26 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	68db      	ldr	r3, [r3, #12]
 800ce1e:	f043 0202 	orr.w	r2, r3, #2
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	330c      	adds	r3, #12
 800ce2a:	2202      	movs	r2, #2
 800ce2c:	4619      	mov	r1, r3
 800ce2e:	6878      	ldr	r0, [r7, #4]
 800ce30:	f000 f8eb 	bl	800d00a <USBD_CtlSendData>
      break;
 800ce34:	e004      	b.n	800ce40 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ce36:	6839      	ldr	r1, [r7, #0]
 800ce38:	6878      	ldr	r0, [r7, #4]
 800ce3a:	f000 f875 	bl	800cf28 <USBD_CtlError>
      break;
 800ce3e:	bf00      	nop
  }
}
 800ce40:	bf00      	nop
 800ce42:	3708      	adds	r7, #8
 800ce44:	46bd      	mov	sp, r7
 800ce46:	bd80      	pop	{r7, pc}

0800ce48 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b082      	sub	sp, #8
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
 800ce50:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ce52:	683b      	ldr	r3, [r7, #0]
 800ce54:	885b      	ldrh	r3, [r3, #2]
 800ce56:	2b01      	cmp	r3, #1
 800ce58:	d106      	bne.n	800ce68 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	2201      	movs	r2, #1
 800ce5e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ce62:	6878      	ldr	r0, [r7, #4]
 800ce64:	f000 f92b 	bl	800d0be <USBD_CtlSendStatus>
  }
}
 800ce68:	bf00      	nop
 800ce6a:	3708      	adds	r7, #8
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	bd80      	pop	{r7, pc}

0800ce70 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b082      	sub	sp, #8
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
 800ce78:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ce80:	b2db      	uxtb	r3, r3
 800ce82:	3b01      	subs	r3, #1
 800ce84:	2b02      	cmp	r3, #2
 800ce86:	d80b      	bhi.n	800cea0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ce88:	683b      	ldr	r3, [r7, #0]
 800ce8a:	885b      	ldrh	r3, [r3, #2]
 800ce8c:	2b01      	cmp	r3, #1
 800ce8e:	d10c      	bne.n	800ceaa <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	2200      	movs	r2, #0
 800ce94:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ce98:	6878      	ldr	r0, [r7, #4]
 800ce9a:	f000 f910 	bl	800d0be <USBD_CtlSendStatus>
      }
      break;
 800ce9e:	e004      	b.n	800ceaa <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800cea0:	6839      	ldr	r1, [r7, #0]
 800cea2:	6878      	ldr	r0, [r7, #4]
 800cea4:	f000 f840 	bl	800cf28 <USBD_CtlError>
      break;
 800cea8:	e000      	b.n	800ceac <USBD_ClrFeature+0x3c>
      break;
 800ceaa:	bf00      	nop
  }
}
 800ceac:	bf00      	nop
 800ceae:	3708      	adds	r7, #8
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	bd80      	pop	{r7, pc}

0800ceb4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b084      	sub	sp, #16
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]
 800cebc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800cebe:	683b      	ldr	r3, [r7, #0]
 800cec0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	781a      	ldrb	r2, [r3, #0]
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	3301      	adds	r3, #1
 800cece:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	781a      	ldrb	r2, [r3, #0]
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	3301      	adds	r3, #1
 800cedc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800cede:	68f8      	ldr	r0, [r7, #12]
 800cee0:	f7ff fa92 	bl	800c408 <SWAPBYTE>
 800cee4:	4603      	mov	r3, r0
 800cee6:	461a      	mov	r2, r3
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	3301      	adds	r3, #1
 800cef0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	3301      	adds	r3, #1
 800cef6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cef8:	68f8      	ldr	r0, [r7, #12]
 800cefa:	f7ff fa85 	bl	800c408 <SWAPBYTE>
 800cefe:	4603      	mov	r3, r0
 800cf00:	461a      	mov	r2, r3
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	3301      	adds	r3, #1
 800cf0a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	3301      	adds	r3, #1
 800cf10:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800cf12:	68f8      	ldr	r0, [r7, #12]
 800cf14:	f7ff fa78 	bl	800c408 <SWAPBYTE>
 800cf18:	4603      	mov	r3, r0
 800cf1a:	461a      	mov	r2, r3
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	80da      	strh	r2, [r3, #6]
}
 800cf20:	bf00      	nop
 800cf22:	3710      	adds	r7, #16
 800cf24:	46bd      	mov	sp, r7
 800cf26:	bd80      	pop	{r7, pc}

0800cf28 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b082      	sub	sp, #8
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
 800cf30:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cf32:	2180      	movs	r1, #128	@ 0x80
 800cf34:	6878      	ldr	r0, [r7, #4]
 800cf36:	f000 fc95 	bl	800d864 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cf3a:	2100      	movs	r1, #0
 800cf3c:	6878      	ldr	r0, [r7, #4]
 800cf3e:	f000 fc91 	bl	800d864 <USBD_LL_StallEP>
}
 800cf42:	bf00      	nop
 800cf44:	3708      	adds	r7, #8
 800cf46:	46bd      	mov	sp, r7
 800cf48:	bd80      	pop	{r7, pc}

0800cf4a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cf4a:	b580      	push	{r7, lr}
 800cf4c:	b086      	sub	sp, #24
 800cf4e:	af00      	add	r7, sp, #0
 800cf50:	60f8      	str	r0, [r7, #12]
 800cf52:	60b9      	str	r1, [r7, #8]
 800cf54:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cf56:	2300      	movs	r3, #0
 800cf58:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d036      	beq.n	800cfce <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800cf64:	6938      	ldr	r0, [r7, #16]
 800cf66:	f000 f836 	bl	800cfd6 <USBD_GetLen>
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	3301      	adds	r3, #1
 800cf6e:	b29b      	uxth	r3, r3
 800cf70:	005b      	lsls	r3, r3, #1
 800cf72:	b29a      	uxth	r2, r3
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800cf78:	7dfb      	ldrb	r3, [r7, #23]
 800cf7a:	68ba      	ldr	r2, [r7, #8]
 800cf7c:	4413      	add	r3, r2
 800cf7e:	687a      	ldr	r2, [r7, #4]
 800cf80:	7812      	ldrb	r2, [r2, #0]
 800cf82:	701a      	strb	r2, [r3, #0]
  idx++;
 800cf84:	7dfb      	ldrb	r3, [r7, #23]
 800cf86:	3301      	adds	r3, #1
 800cf88:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800cf8a:	7dfb      	ldrb	r3, [r7, #23]
 800cf8c:	68ba      	ldr	r2, [r7, #8]
 800cf8e:	4413      	add	r3, r2
 800cf90:	2203      	movs	r2, #3
 800cf92:	701a      	strb	r2, [r3, #0]
  idx++;
 800cf94:	7dfb      	ldrb	r3, [r7, #23]
 800cf96:	3301      	adds	r3, #1
 800cf98:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800cf9a:	e013      	b.n	800cfc4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800cf9c:	7dfb      	ldrb	r3, [r7, #23]
 800cf9e:	68ba      	ldr	r2, [r7, #8]
 800cfa0:	4413      	add	r3, r2
 800cfa2:	693a      	ldr	r2, [r7, #16]
 800cfa4:	7812      	ldrb	r2, [r2, #0]
 800cfa6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800cfa8:	693b      	ldr	r3, [r7, #16]
 800cfaa:	3301      	adds	r3, #1
 800cfac:	613b      	str	r3, [r7, #16]
    idx++;
 800cfae:	7dfb      	ldrb	r3, [r7, #23]
 800cfb0:	3301      	adds	r3, #1
 800cfb2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800cfb4:	7dfb      	ldrb	r3, [r7, #23]
 800cfb6:	68ba      	ldr	r2, [r7, #8]
 800cfb8:	4413      	add	r3, r2
 800cfba:	2200      	movs	r2, #0
 800cfbc:	701a      	strb	r2, [r3, #0]
    idx++;
 800cfbe:	7dfb      	ldrb	r3, [r7, #23]
 800cfc0:	3301      	adds	r3, #1
 800cfc2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800cfc4:	693b      	ldr	r3, [r7, #16]
 800cfc6:	781b      	ldrb	r3, [r3, #0]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d1e7      	bne.n	800cf9c <USBD_GetString+0x52>
 800cfcc:	e000      	b.n	800cfd0 <USBD_GetString+0x86>
    return;
 800cfce:	bf00      	nop
  }
}
 800cfd0:	3718      	adds	r7, #24
 800cfd2:	46bd      	mov	sp, r7
 800cfd4:	bd80      	pop	{r7, pc}

0800cfd6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cfd6:	b480      	push	{r7}
 800cfd8:	b085      	sub	sp, #20
 800cfda:	af00      	add	r7, sp, #0
 800cfdc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cfde:	2300      	movs	r3, #0
 800cfe0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800cfe6:	e005      	b.n	800cff4 <USBD_GetLen+0x1e>
  {
    len++;
 800cfe8:	7bfb      	ldrb	r3, [r7, #15]
 800cfea:	3301      	adds	r3, #1
 800cfec:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800cfee:	68bb      	ldr	r3, [r7, #8]
 800cff0:	3301      	adds	r3, #1
 800cff2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cff4:	68bb      	ldr	r3, [r7, #8]
 800cff6:	781b      	ldrb	r3, [r3, #0]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d1f5      	bne.n	800cfe8 <USBD_GetLen+0x12>
  }

  return len;
 800cffc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cffe:	4618      	mov	r0, r3
 800d000:	3714      	adds	r7, #20
 800d002:	46bd      	mov	sp, r7
 800d004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d008:	4770      	bx	lr

0800d00a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d00a:	b580      	push	{r7, lr}
 800d00c:	b084      	sub	sp, #16
 800d00e:	af00      	add	r7, sp, #0
 800d010:	60f8      	str	r0, [r7, #12]
 800d012:	60b9      	str	r1, [r7, #8]
 800d014:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	2202      	movs	r2, #2
 800d01a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	687a      	ldr	r2, [r7, #4]
 800d022:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	687a      	ldr	r2, [r7, #4]
 800d028:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	68ba      	ldr	r2, [r7, #8]
 800d02e:	2100      	movs	r1, #0
 800d030:	68f8      	ldr	r0, [r7, #12]
 800d032:	f000 fca0 	bl	800d976 <USBD_LL_Transmit>

  return USBD_OK;
 800d036:	2300      	movs	r3, #0
}
 800d038:	4618      	mov	r0, r3
 800d03a:	3710      	adds	r7, #16
 800d03c:	46bd      	mov	sp, r7
 800d03e:	bd80      	pop	{r7, pc}

0800d040 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d040:	b580      	push	{r7, lr}
 800d042:	b084      	sub	sp, #16
 800d044:	af00      	add	r7, sp, #0
 800d046:	60f8      	str	r0, [r7, #12]
 800d048:	60b9      	str	r1, [r7, #8]
 800d04a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	68ba      	ldr	r2, [r7, #8]
 800d050:	2100      	movs	r1, #0
 800d052:	68f8      	ldr	r0, [r7, #12]
 800d054:	f000 fc8f 	bl	800d976 <USBD_LL_Transmit>

  return USBD_OK;
 800d058:	2300      	movs	r3, #0
}
 800d05a:	4618      	mov	r0, r3
 800d05c:	3710      	adds	r7, #16
 800d05e:	46bd      	mov	sp, r7
 800d060:	bd80      	pop	{r7, pc}

0800d062 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d062:	b580      	push	{r7, lr}
 800d064:	b084      	sub	sp, #16
 800d066:	af00      	add	r7, sp, #0
 800d068:	60f8      	str	r0, [r7, #12]
 800d06a:	60b9      	str	r1, [r7, #8]
 800d06c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	2203      	movs	r2, #3
 800d072:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	687a      	ldr	r2, [r7, #4]
 800d07a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	687a      	ldr	r2, [r7, #4]
 800d082:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	68ba      	ldr	r2, [r7, #8]
 800d08a:	2100      	movs	r1, #0
 800d08c:	68f8      	ldr	r0, [r7, #12]
 800d08e:	f000 fc93 	bl	800d9b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d092:	2300      	movs	r3, #0
}
 800d094:	4618      	mov	r0, r3
 800d096:	3710      	adds	r7, #16
 800d098:	46bd      	mov	sp, r7
 800d09a:	bd80      	pop	{r7, pc}

0800d09c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d09c:	b580      	push	{r7, lr}
 800d09e:	b084      	sub	sp, #16
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	60f8      	str	r0, [r7, #12]
 800d0a4:	60b9      	str	r1, [r7, #8]
 800d0a6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	68ba      	ldr	r2, [r7, #8]
 800d0ac:	2100      	movs	r1, #0
 800d0ae:	68f8      	ldr	r0, [r7, #12]
 800d0b0:	f000 fc82 	bl	800d9b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d0b4:	2300      	movs	r3, #0
}
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	3710      	adds	r7, #16
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	bd80      	pop	{r7, pc}

0800d0be <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d0be:	b580      	push	{r7, lr}
 800d0c0:	b082      	sub	sp, #8
 800d0c2:	af00      	add	r7, sp, #0
 800d0c4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	2204      	movs	r2, #4
 800d0ca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	2100      	movs	r1, #0
 800d0d4:	6878      	ldr	r0, [r7, #4]
 800d0d6:	f000 fc4e 	bl	800d976 <USBD_LL_Transmit>

  return USBD_OK;
 800d0da:	2300      	movs	r3, #0
}
 800d0dc:	4618      	mov	r0, r3
 800d0de:	3708      	adds	r7, #8
 800d0e0:	46bd      	mov	sp, r7
 800d0e2:	bd80      	pop	{r7, pc}

0800d0e4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d0e4:	b580      	push	{r7, lr}
 800d0e6:	b082      	sub	sp, #8
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	2205      	movs	r2, #5
 800d0f0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	2200      	movs	r2, #0
 800d0f8:	2100      	movs	r1, #0
 800d0fa:	6878      	ldr	r0, [r7, #4]
 800d0fc:	f000 fc5c 	bl	800d9b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d100:	2300      	movs	r3, #0
}
 800d102:	4618      	mov	r0, r3
 800d104:	3708      	adds	r7, #8
 800d106:	46bd      	mov	sp, r7
 800d108:	bd80      	pop	{r7, pc}
	...

0800d10c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800d10c:	b580      	push	{r7, lr}
 800d10e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800d110:	2200      	movs	r2, #0
 800d112:	4912      	ldr	r1, [pc, #72]	@ (800d15c <MX_USB_Device_Init+0x50>)
 800d114:	4812      	ldr	r0, [pc, #72]	@ (800d160 <MX_USB_Device_Init+0x54>)
 800d116:	f7fe fed9 	bl	800becc <USBD_Init>
 800d11a:	4603      	mov	r3, r0
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d001      	beq.n	800d124 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800d120:	f7f3 fe94 	bl	8000e4c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800d124:	490f      	ldr	r1, [pc, #60]	@ (800d164 <MX_USB_Device_Init+0x58>)
 800d126:	480e      	ldr	r0, [pc, #56]	@ (800d160 <MX_USB_Device_Init+0x54>)
 800d128:	f7fe ff00 	bl	800bf2c <USBD_RegisterClass>
 800d12c:	4603      	mov	r3, r0
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d001      	beq.n	800d136 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800d132:	f7f3 fe8b 	bl	8000e4c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800d136:	490c      	ldr	r1, [pc, #48]	@ (800d168 <MX_USB_Device_Init+0x5c>)
 800d138:	4809      	ldr	r0, [pc, #36]	@ (800d160 <MX_USB_Device_Init+0x54>)
 800d13a:	f7fe fe21 	bl	800bd80 <USBD_CDC_RegisterInterface>
 800d13e:	4603      	mov	r3, r0
 800d140:	2b00      	cmp	r3, #0
 800d142:	d001      	beq.n	800d148 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800d144:	f7f3 fe82 	bl	8000e4c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800d148:	4805      	ldr	r0, [pc, #20]	@ (800d160 <MX_USB_Device_Init+0x54>)
 800d14a:	f7fe ff16 	bl	800bf7a <USBD_Start>
 800d14e:	4603      	mov	r3, r0
 800d150:	2b00      	cmp	r3, #0
 800d152:	d001      	beq.n	800d158 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800d154:	f7f3 fe7a 	bl	8000e4c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800d158:	bf00      	nop
 800d15a:	bd80      	pop	{r7, pc}
 800d15c:	20000130 	.word	0x20000130
 800d160:	20004a38 	.word	0x20004a38
 800d164:	20000018 	.word	0x20000018
 800d168:	2000011c 	.word	0x2000011c

0800d16c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d170:	2200      	movs	r2, #0
 800d172:	4905      	ldr	r1, [pc, #20]	@ (800d188 <CDC_Init_FS+0x1c>)
 800d174:	4805      	ldr	r0, [pc, #20]	@ (800d18c <CDC_Init_FS+0x20>)
 800d176:	f7fe fe18 	bl	800bdaa <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d17a:	4905      	ldr	r1, [pc, #20]	@ (800d190 <CDC_Init_FS+0x24>)
 800d17c:	4803      	ldr	r0, [pc, #12]	@ (800d18c <CDC_Init_FS+0x20>)
 800d17e:	f7fe fe32 	bl	800bde6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d182:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d184:	4618      	mov	r0, r3
 800d186:	bd80      	pop	{r7, pc}
 800d188:	20005508 	.word	0x20005508
 800d18c:	20004a38 	.word	0x20004a38
 800d190:	20004d08 	.word	0x20004d08

0800d194 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d194:	b480      	push	{r7}
 800d196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d198:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d19a:	4618      	mov	r0, r3
 800d19c:	46bd      	mov	sp, r7
 800d19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a2:	4770      	bx	lr

0800d1a4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d1a4:	b480      	push	{r7}
 800d1a6:	b083      	sub	sp, #12
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	4603      	mov	r3, r0
 800d1ac:	6039      	str	r1, [r7, #0]
 800d1ae:	71fb      	strb	r3, [r7, #7]
 800d1b0:	4613      	mov	r3, r2
 800d1b2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d1b4:	79fb      	ldrb	r3, [r7, #7]
 800d1b6:	2b23      	cmp	r3, #35	@ 0x23
 800d1b8:	d84a      	bhi.n	800d250 <CDC_Control_FS+0xac>
 800d1ba:	a201      	add	r2, pc, #4	@ (adr r2, 800d1c0 <CDC_Control_FS+0x1c>)
 800d1bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1c0:	0800d251 	.word	0x0800d251
 800d1c4:	0800d251 	.word	0x0800d251
 800d1c8:	0800d251 	.word	0x0800d251
 800d1cc:	0800d251 	.word	0x0800d251
 800d1d0:	0800d251 	.word	0x0800d251
 800d1d4:	0800d251 	.word	0x0800d251
 800d1d8:	0800d251 	.word	0x0800d251
 800d1dc:	0800d251 	.word	0x0800d251
 800d1e0:	0800d251 	.word	0x0800d251
 800d1e4:	0800d251 	.word	0x0800d251
 800d1e8:	0800d251 	.word	0x0800d251
 800d1ec:	0800d251 	.word	0x0800d251
 800d1f0:	0800d251 	.word	0x0800d251
 800d1f4:	0800d251 	.word	0x0800d251
 800d1f8:	0800d251 	.word	0x0800d251
 800d1fc:	0800d251 	.word	0x0800d251
 800d200:	0800d251 	.word	0x0800d251
 800d204:	0800d251 	.word	0x0800d251
 800d208:	0800d251 	.word	0x0800d251
 800d20c:	0800d251 	.word	0x0800d251
 800d210:	0800d251 	.word	0x0800d251
 800d214:	0800d251 	.word	0x0800d251
 800d218:	0800d251 	.word	0x0800d251
 800d21c:	0800d251 	.word	0x0800d251
 800d220:	0800d251 	.word	0x0800d251
 800d224:	0800d251 	.word	0x0800d251
 800d228:	0800d251 	.word	0x0800d251
 800d22c:	0800d251 	.word	0x0800d251
 800d230:	0800d251 	.word	0x0800d251
 800d234:	0800d251 	.word	0x0800d251
 800d238:	0800d251 	.word	0x0800d251
 800d23c:	0800d251 	.word	0x0800d251
 800d240:	0800d251 	.word	0x0800d251
 800d244:	0800d251 	.word	0x0800d251
 800d248:	0800d251 	.word	0x0800d251
 800d24c:	0800d251 	.word	0x0800d251
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d250:	bf00      	nop
  }

  return (USBD_OK);
 800d252:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d254:	4618      	mov	r0, r3
 800d256:	370c      	adds	r7, #12
 800d258:	46bd      	mov	sp, r7
 800d25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d25e:	4770      	bx	lr

0800d260 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d260:	b580      	push	{r7, lr}
 800d262:	b082      	sub	sp, #8
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
 800d268:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d26a:	6879      	ldr	r1, [r7, #4]
 800d26c:	4805      	ldr	r0, [pc, #20]	@ (800d284 <CDC_Receive_FS+0x24>)
 800d26e:	f7fe fdba 	bl	800bde6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d272:	4804      	ldr	r0, [pc, #16]	@ (800d284 <CDC_Receive_FS+0x24>)
 800d274:	f7fe fe00 	bl	800be78 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d278:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d27a:	4618      	mov	r0, r3
 800d27c:	3708      	adds	r7, #8
 800d27e:	46bd      	mov	sp, r7
 800d280:	bd80      	pop	{r7, pc}
 800d282:	bf00      	nop
 800d284:	20004a38 	.word	0x20004a38

0800d288 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d288:	b580      	push	{r7, lr}
 800d28a:	b084      	sub	sp, #16
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
 800d290:	460b      	mov	r3, r1
 800d292:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d294:	2300      	movs	r3, #0
 800d296:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d298:	4b0d      	ldr	r3, [pc, #52]	@ (800d2d0 <CDC_Transmit_FS+0x48>)
 800d29a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d29e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d2a0:	68bb      	ldr	r3, [r7, #8]
 800d2a2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d001      	beq.n	800d2ae <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d2aa:	2301      	movs	r3, #1
 800d2ac:	e00b      	b.n	800d2c6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d2ae:	887b      	ldrh	r3, [r7, #2]
 800d2b0:	461a      	mov	r2, r3
 800d2b2:	6879      	ldr	r1, [r7, #4]
 800d2b4:	4806      	ldr	r0, [pc, #24]	@ (800d2d0 <CDC_Transmit_FS+0x48>)
 800d2b6:	f7fe fd78 	bl	800bdaa <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d2ba:	4805      	ldr	r0, [pc, #20]	@ (800d2d0 <CDC_Transmit_FS+0x48>)
 800d2bc:	f7fe fdac 	bl	800be18 <USBD_CDC_TransmitPacket>
 800d2c0:	4603      	mov	r3, r0
 800d2c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d2c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	3710      	adds	r7, #16
 800d2ca:	46bd      	mov	sp, r7
 800d2cc:	bd80      	pop	{r7, pc}
 800d2ce:	bf00      	nop
 800d2d0:	20004a38 	.word	0x20004a38

0800d2d4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d2d4:	b480      	push	{r7}
 800d2d6:	b087      	sub	sp, #28
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	60f8      	str	r0, [r7, #12]
 800d2dc:	60b9      	str	r1, [r7, #8]
 800d2de:	4613      	mov	r3, r2
 800d2e0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d2e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	371c      	adds	r7, #28
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f4:	4770      	bx	lr
	...

0800d2f8 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d2f8:	b480      	push	{r7}
 800d2fa:	b083      	sub	sp, #12
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	4603      	mov	r3, r0
 800d300:	6039      	str	r1, [r7, #0]
 800d302:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800d304:	683b      	ldr	r3, [r7, #0]
 800d306:	2212      	movs	r2, #18
 800d308:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800d30a:	4b03      	ldr	r3, [pc, #12]	@ (800d318 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800d30c:	4618      	mov	r0, r3
 800d30e:	370c      	adds	r7, #12
 800d310:	46bd      	mov	sp, r7
 800d312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d316:	4770      	bx	lr
 800d318:	20000150 	.word	0x20000150

0800d31c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d31c:	b480      	push	{r7}
 800d31e:	b083      	sub	sp, #12
 800d320:	af00      	add	r7, sp, #0
 800d322:	4603      	mov	r3, r0
 800d324:	6039      	str	r1, [r7, #0]
 800d326:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d328:	683b      	ldr	r3, [r7, #0]
 800d32a:	2204      	movs	r2, #4
 800d32c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d32e:	4b03      	ldr	r3, [pc, #12]	@ (800d33c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800d330:	4618      	mov	r0, r3
 800d332:	370c      	adds	r7, #12
 800d334:	46bd      	mov	sp, r7
 800d336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33a:	4770      	bx	lr
 800d33c:	20000164 	.word	0x20000164

0800d340 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d340:	b580      	push	{r7, lr}
 800d342:	b082      	sub	sp, #8
 800d344:	af00      	add	r7, sp, #0
 800d346:	4603      	mov	r3, r0
 800d348:	6039      	str	r1, [r7, #0]
 800d34a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d34c:	79fb      	ldrb	r3, [r7, #7]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d105      	bne.n	800d35e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800d352:	683a      	ldr	r2, [r7, #0]
 800d354:	4907      	ldr	r1, [pc, #28]	@ (800d374 <USBD_CDC_ProductStrDescriptor+0x34>)
 800d356:	4808      	ldr	r0, [pc, #32]	@ (800d378 <USBD_CDC_ProductStrDescriptor+0x38>)
 800d358:	f7ff fdf7 	bl	800cf4a <USBD_GetString>
 800d35c:	e004      	b.n	800d368 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800d35e:	683a      	ldr	r2, [r7, #0]
 800d360:	4904      	ldr	r1, [pc, #16]	@ (800d374 <USBD_CDC_ProductStrDescriptor+0x34>)
 800d362:	4805      	ldr	r0, [pc, #20]	@ (800d378 <USBD_CDC_ProductStrDescriptor+0x38>)
 800d364:	f7ff fdf1 	bl	800cf4a <USBD_GetString>
  }
  return USBD_StrDesc;
 800d368:	4b02      	ldr	r3, [pc, #8]	@ (800d374 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800d36a:	4618      	mov	r0, r3
 800d36c:	3708      	adds	r7, #8
 800d36e:	46bd      	mov	sp, r7
 800d370:	bd80      	pop	{r7, pc}
 800d372:	bf00      	nop
 800d374:	20005d08 	.word	0x20005d08
 800d378:	0800e488 	.word	0x0800e488

0800d37c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d37c:	b580      	push	{r7, lr}
 800d37e:	b082      	sub	sp, #8
 800d380:	af00      	add	r7, sp, #0
 800d382:	4603      	mov	r3, r0
 800d384:	6039      	str	r1, [r7, #0]
 800d386:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d388:	683a      	ldr	r2, [r7, #0]
 800d38a:	4904      	ldr	r1, [pc, #16]	@ (800d39c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800d38c:	4804      	ldr	r0, [pc, #16]	@ (800d3a0 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800d38e:	f7ff fddc 	bl	800cf4a <USBD_GetString>
  return USBD_StrDesc;
 800d392:	4b02      	ldr	r3, [pc, #8]	@ (800d39c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800d394:	4618      	mov	r0, r3
 800d396:	3708      	adds	r7, #8
 800d398:	46bd      	mov	sp, r7
 800d39a:	bd80      	pop	{r7, pc}
 800d39c:	20005d08 	.word	0x20005d08
 800d3a0:	0800e4a0 	.word	0x0800e4a0

0800d3a4 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d3a4:	b580      	push	{r7, lr}
 800d3a6:	b082      	sub	sp, #8
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	4603      	mov	r3, r0
 800d3ac:	6039      	str	r1, [r7, #0]
 800d3ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d3b0:	683b      	ldr	r3, [r7, #0]
 800d3b2:	221a      	movs	r2, #26
 800d3b4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d3b6:	f000 f843 	bl	800d440 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800d3ba:	4b02      	ldr	r3, [pc, #8]	@ (800d3c4 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800d3bc:	4618      	mov	r0, r3
 800d3be:	3708      	adds	r7, #8
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	bd80      	pop	{r7, pc}
 800d3c4:	20000168 	.word	0x20000168

0800d3c8 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b082      	sub	sp, #8
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	4603      	mov	r3, r0
 800d3d0:	6039      	str	r1, [r7, #0]
 800d3d2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d3d4:	79fb      	ldrb	r3, [r7, #7]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d105      	bne.n	800d3e6 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800d3da:	683a      	ldr	r2, [r7, #0]
 800d3dc:	4907      	ldr	r1, [pc, #28]	@ (800d3fc <USBD_CDC_ConfigStrDescriptor+0x34>)
 800d3de:	4808      	ldr	r0, [pc, #32]	@ (800d400 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800d3e0:	f7ff fdb3 	bl	800cf4a <USBD_GetString>
 800d3e4:	e004      	b.n	800d3f0 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800d3e6:	683a      	ldr	r2, [r7, #0]
 800d3e8:	4904      	ldr	r1, [pc, #16]	@ (800d3fc <USBD_CDC_ConfigStrDescriptor+0x34>)
 800d3ea:	4805      	ldr	r0, [pc, #20]	@ (800d400 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800d3ec:	f7ff fdad 	bl	800cf4a <USBD_GetString>
  }
  return USBD_StrDesc;
 800d3f0:	4b02      	ldr	r3, [pc, #8]	@ (800d3fc <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	3708      	adds	r7, #8
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	bd80      	pop	{r7, pc}
 800d3fa:	bf00      	nop
 800d3fc:	20005d08 	.word	0x20005d08
 800d400:	0800e4b4 	.word	0x0800e4b4

0800d404 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d404:	b580      	push	{r7, lr}
 800d406:	b082      	sub	sp, #8
 800d408:	af00      	add	r7, sp, #0
 800d40a:	4603      	mov	r3, r0
 800d40c:	6039      	str	r1, [r7, #0]
 800d40e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d410:	79fb      	ldrb	r3, [r7, #7]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d105      	bne.n	800d422 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800d416:	683a      	ldr	r2, [r7, #0]
 800d418:	4907      	ldr	r1, [pc, #28]	@ (800d438 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800d41a:	4808      	ldr	r0, [pc, #32]	@ (800d43c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800d41c:	f7ff fd95 	bl	800cf4a <USBD_GetString>
 800d420:	e004      	b.n	800d42c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800d422:	683a      	ldr	r2, [r7, #0]
 800d424:	4904      	ldr	r1, [pc, #16]	@ (800d438 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800d426:	4805      	ldr	r0, [pc, #20]	@ (800d43c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800d428:	f7ff fd8f 	bl	800cf4a <USBD_GetString>
  }
  return USBD_StrDesc;
 800d42c:	4b02      	ldr	r3, [pc, #8]	@ (800d438 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800d42e:	4618      	mov	r0, r3
 800d430:	3708      	adds	r7, #8
 800d432:	46bd      	mov	sp, r7
 800d434:	bd80      	pop	{r7, pc}
 800d436:	bf00      	nop
 800d438:	20005d08 	.word	0x20005d08
 800d43c:	0800e4c0 	.word	0x0800e4c0

0800d440 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d440:	b580      	push	{r7, lr}
 800d442:	b084      	sub	sp, #16
 800d444:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d446:	4b0f      	ldr	r3, [pc, #60]	@ (800d484 <Get_SerialNum+0x44>)
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d44c:	4b0e      	ldr	r3, [pc, #56]	@ (800d488 <Get_SerialNum+0x48>)
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d452:	4b0e      	ldr	r3, [pc, #56]	@ (800d48c <Get_SerialNum+0x4c>)
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d458:	68fa      	ldr	r2, [r7, #12]
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	4413      	add	r3, r2
 800d45e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d009      	beq.n	800d47a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d466:	2208      	movs	r2, #8
 800d468:	4909      	ldr	r1, [pc, #36]	@ (800d490 <Get_SerialNum+0x50>)
 800d46a:	68f8      	ldr	r0, [r7, #12]
 800d46c:	f000 f814 	bl	800d498 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d470:	2204      	movs	r2, #4
 800d472:	4908      	ldr	r1, [pc, #32]	@ (800d494 <Get_SerialNum+0x54>)
 800d474:	68b8      	ldr	r0, [r7, #8]
 800d476:	f000 f80f 	bl	800d498 <IntToUnicode>
  }
}
 800d47a:	bf00      	nop
 800d47c:	3710      	adds	r7, #16
 800d47e:	46bd      	mov	sp, r7
 800d480:	bd80      	pop	{r7, pc}
 800d482:	bf00      	nop
 800d484:	1fff7590 	.word	0x1fff7590
 800d488:	1fff7594 	.word	0x1fff7594
 800d48c:	1fff7598 	.word	0x1fff7598
 800d490:	2000016a 	.word	0x2000016a
 800d494:	2000017a 	.word	0x2000017a

0800d498 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d498:	b480      	push	{r7}
 800d49a:	b087      	sub	sp, #28
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	60f8      	str	r0, [r7, #12]
 800d4a0:	60b9      	str	r1, [r7, #8]
 800d4a2:	4613      	mov	r3, r2
 800d4a4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	75fb      	strb	r3, [r7, #23]
 800d4ae:	e027      	b.n	800d500 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	0f1b      	lsrs	r3, r3, #28
 800d4b4:	2b09      	cmp	r3, #9
 800d4b6:	d80b      	bhi.n	800d4d0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	0f1b      	lsrs	r3, r3, #28
 800d4bc:	b2da      	uxtb	r2, r3
 800d4be:	7dfb      	ldrb	r3, [r7, #23]
 800d4c0:	005b      	lsls	r3, r3, #1
 800d4c2:	4619      	mov	r1, r3
 800d4c4:	68bb      	ldr	r3, [r7, #8]
 800d4c6:	440b      	add	r3, r1
 800d4c8:	3230      	adds	r2, #48	@ 0x30
 800d4ca:	b2d2      	uxtb	r2, r2
 800d4cc:	701a      	strb	r2, [r3, #0]
 800d4ce:	e00a      	b.n	800d4e6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	0f1b      	lsrs	r3, r3, #28
 800d4d4:	b2da      	uxtb	r2, r3
 800d4d6:	7dfb      	ldrb	r3, [r7, #23]
 800d4d8:	005b      	lsls	r3, r3, #1
 800d4da:	4619      	mov	r1, r3
 800d4dc:	68bb      	ldr	r3, [r7, #8]
 800d4de:	440b      	add	r3, r1
 800d4e0:	3237      	adds	r2, #55	@ 0x37
 800d4e2:	b2d2      	uxtb	r2, r2
 800d4e4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	011b      	lsls	r3, r3, #4
 800d4ea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d4ec:	7dfb      	ldrb	r3, [r7, #23]
 800d4ee:	005b      	lsls	r3, r3, #1
 800d4f0:	3301      	adds	r3, #1
 800d4f2:	68ba      	ldr	r2, [r7, #8]
 800d4f4:	4413      	add	r3, r2
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d4fa:	7dfb      	ldrb	r3, [r7, #23]
 800d4fc:	3301      	adds	r3, #1
 800d4fe:	75fb      	strb	r3, [r7, #23]
 800d500:	7dfa      	ldrb	r2, [r7, #23]
 800d502:	79fb      	ldrb	r3, [r7, #7]
 800d504:	429a      	cmp	r2, r3
 800d506:	d3d3      	bcc.n	800d4b0 <IntToUnicode+0x18>
  }
}
 800d508:	bf00      	nop
 800d50a:	bf00      	nop
 800d50c:	371c      	adds	r7, #28
 800d50e:	46bd      	mov	sp, r7
 800d510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d514:	4770      	bx	lr
	...

0800d518 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d518:	b580      	push	{r7, lr}
 800d51a:	b098      	sub	sp, #96	@ 0x60
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800d520:	f107 030c 	add.w	r3, r7, #12
 800d524:	2254      	movs	r2, #84	@ 0x54
 800d526:	2100      	movs	r1, #0
 800d528:	4618      	mov	r0, r3
 800d52a:	f000 fb19 	bl	800db60 <memset>
  if(pcdHandle->Instance==USB)
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	4a15      	ldr	r2, [pc, #84]	@ (800d588 <HAL_PCD_MspInit+0x70>)
 800d534:	4293      	cmp	r3, r2
 800d536:	d122      	bne.n	800d57e <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800d538:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d53c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800d53e:	2300      	movs	r3, #0
 800d540:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800d542:	f107 030c 	add.w	r3, r7, #12
 800d546:	4618      	mov	r0, r3
 800d548:	f7f9 fa64 	bl	8006a14 <HAL_RCCEx_PeriphCLKConfig>
 800d54c:	4603      	mov	r3, r0
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d001      	beq.n	800d556 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800d552:	f7f3 fc7b 	bl	8000e4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800d556:	4b0d      	ldr	r3, [pc, #52]	@ (800d58c <HAL_PCD_MspInit+0x74>)
 800d558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d55a:	4a0c      	ldr	r2, [pc, #48]	@ (800d58c <HAL_PCD_MspInit+0x74>)
 800d55c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800d560:	6593      	str	r3, [r2, #88]	@ 0x58
 800d562:	4b0a      	ldr	r3, [pc, #40]	@ (800d58c <HAL_PCD_MspInit+0x74>)
 800d564:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d566:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d56a:	60bb      	str	r3, [r7, #8]
 800d56c:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800d56e:	2200      	movs	r2, #0
 800d570:	2100      	movs	r1, #0
 800d572:	2014      	movs	r0, #20
 800d574:	f7f6 fa2f 	bl	80039d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800d578:	2014      	movs	r0, #20
 800d57a:	f7f6 fa46 	bl	8003a0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800d57e:	bf00      	nop
 800d580:	3760      	adds	r7, #96	@ 0x60
 800d582:	46bd      	mov	sp, r7
 800d584:	bd80      	pop	{r7, pc}
 800d586:	bf00      	nop
 800d588:	40005c00 	.word	0x40005c00
 800d58c:	40021000 	.word	0x40021000

0800d590 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d590:	b580      	push	{r7, lr}
 800d592:	b082      	sub	sp, #8
 800d594:	af00      	add	r7, sp, #0
 800d596:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800d5a4:	4619      	mov	r1, r3
 800d5a6:	4610      	mov	r0, r2
 800d5a8:	f7fe fd32 	bl	800c010 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800d5ac:	bf00      	nop
 800d5ae:	3708      	adds	r7, #8
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	bd80      	pop	{r7, pc}

0800d5b4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5b4:	b580      	push	{r7, lr}
 800d5b6:	b082      	sub	sp, #8
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	6078      	str	r0, [r7, #4]
 800d5bc:	460b      	mov	r3, r1
 800d5be:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800d5c6:	78fa      	ldrb	r2, [r7, #3]
 800d5c8:	6879      	ldr	r1, [r7, #4]
 800d5ca:	4613      	mov	r3, r2
 800d5cc:	009b      	lsls	r3, r3, #2
 800d5ce:	4413      	add	r3, r2
 800d5d0:	00db      	lsls	r3, r3, #3
 800d5d2:	440b      	add	r3, r1
 800d5d4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d5d8:	681a      	ldr	r2, [r3, #0]
 800d5da:	78fb      	ldrb	r3, [r7, #3]
 800d5dc:	4619      	mov	r1, r3
 800d5de:	f7fe fd6c 	bl	800c0ba <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800d5e2:	bf00      	nop
 800d5e4:	3708      	adds	r7, #8
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	bd80      	pop	{r7, pc}

0800d5ea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5ea:	b580      	push	{r7, lr}
 800d5ec:	b082      	sub	sp, #8
 800d5ee:	af00      	add	r7, sp, #0
 800d5f0:	6078      	str	r0, [r7, #4]
 800d5f2:	460b      	mov	r3, r1
 800d5f4:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800d5fc:	78fa      	ldrb	r2, [r7, #3]
 800d5fe:	6879      	ldr	r1, [r7, #4]
 800d600:	4613      	mov	r3, r2
 800d602:	009b      	lsls	r3, r3, #2
 800d604:	4413      	add	r3, r2
 800d606:	00db      	lsls	r3, r3, #3
 800d608:	440b      	add	r3, r1
 800d60a:	3324      	adds	r3, #36	@ 0x24
 800d60c:	681a      	ldr	r2, [r3, #0]
 800d60e:	78fb      	ldrb	r3, [r7, #3]
 800d610:	4619      	mov	r1, r3
 800d612:	f7fe fdb5 	bl	800c180 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800d616:	bf00      	nop
 800d618:	3708      	adds	r7, #8
 800d61a:	46bd      	mov	sp, r7
 800d61c:	bd80      	pop	{r7, pc}

0800d61e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d61e:	b580      	push	{r7, lr}
 800d620:	b082      	sub	sp, #8
 800d622:	af00      	add	r7, sp, #0
 800d624:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d62c:	4618      	mov	r0, r3
 800d62e:	f7fe fec9 	bl	800c3c4 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800d632:	bf00      	nop
 800d634:	3708      	adds	r7, #8
 800d636:	46bd      	mov	sp, r7
 800d638:	bd80      	pop	{r7, pc}

0800d63a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d63a:	b580      	push	{r7, lr}
 800d63c:	b084      	sub	sp, #16
 800d63e:	af00      	add	r7, sp, #0
 800d640:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d642:	2301      	movs	r3, #1
 800d644:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	795b      	ldrb	r3, [r3, #5]
 800d64a:	2b02      	cmp	r3, #2
 800d64c:	d001      	beq.n	800d652 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d64e:	f7f3 fbfd 	bl	8000e4c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d658:	7bfa      	ldrb	r2, [r7, #15]
 800d65a:	4611      	mov	r1, r2
 800d65c:	4618      	mov	r0, r3
 800d65e:	f7fe fe73 	bl	800c348 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d668:	4618      	mov	r0, r3
 800d66a:	f7fe fe1f 	bl	800c2ac <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800d66e:	bf00      	nop
 800d670:	3710      	adds	r7, #16
 800d672:	46bd      	mov	sp, r7
 800d674:	bd80      	pop	{r7, pc}
	...

0800d678 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d678:	b580      	push	{r7, lr}
 800d67a:	b082      	sub	sp, #8
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d686:	4618      	mov	r0, r3
 800d688:	f7fe fe6e 	bl	800c368 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	7a5b      	ldrb	r3, [r3, #9]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d005      	beq.n	800d6a0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d694:	4b04      	ldr	r3, [pc, #16]	@ (800d6a8 <HAL_PCD_SuspendCallback+0x30>)
 800d696:	691b      	ldr	r3, [r3, #16]
 800d698:	4a03      	ldr	r2, [pc, #12]	@ (800d6a8 <HAL_PCD_SuspendCallback+0x30>)
 800d69a:	f043 0306 	orr.w	r3, r3, #6
 800d69e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800d6a0:	bf00      	nop
 800d6a2:	3708      	adds	r7, #8
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	bd80      	pop	{r7, pc}
 800d6a8:	e000ed00 	.word	0xe000ed00

0800d6ac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b082      	sub	sp, #8
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	7a5b      	ldrb	r3, [r3, #9]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d007      	beq.n	800d6cc <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d6bc:	4b08      	ldr	r3, [pc, #32]	@ (800d6e0 <HAL_PCD_ResumeCallback+0x34>)
 800d6be:	691b      	ldr	r3, [r3, #16]
 800d6c0:	4a07      	ldr	r2, [pc, #28]	@ (800d6e0 <HAL_PCD_ResumeCallback+0x34>)
 800d6c2:	f023 0306 	bic.w	r3, r3, #6
 800d6c6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800d6c8:	f000 f9f8 	bl	800dabc <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	f7fe fe5e 	bl	800c394 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800d6d8:	bf00      	nop
 800d6da:	3708      	adds	r7, #8
 800d6dc:	46bd      	mov	sp, r7
 800d6de:	bd80      	pop	{r7, pc}
 800d6e0:	e000ed00 	.word	0xe000ed00

0800d6e4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	b082      	sub	sp, #8
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800d6ec:	4a2b      	ldr	r2, [pc, #172]	@ (800d79c <USBD_LL_Init+0xb8>)
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	4a29      	ldr	r2, [pc, #164]	@ (800d79c <USBD_LL_Init+0xb8>)
 800d6f8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800d6fc:	4b27      	ldr	r3, [pc, #156]	@ (800d79c <USBD_LL_Init+0xb8>)
 800d6fe:	4a28      	ldr	r2, [pc, #160]	@ (800d7a0 <USBD_LL_Init+0xbc>)
 800d700:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d702:	4b26      	ldr	r3, [pc, #152]	@ (800d79c <USBD_LL_Init+0xb8>)
 800d704:	2208      	movs	r2, #8
 800d706:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d708:	4b24      	ldr	r3, [pc, #144]	@ (800d79c <USBD_LL_Init+0xb8>)
 800d70a:	2202      	movs	r2, #2
 800d70c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d70e:	4b23      	ldr	r3, [pc, #140]	@ (800d79c <USBD_LL_Init+0xb8>)
 800d710:	2202      	movs	r2, #2
 800d712:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800d714:	4b21      	ldr	r3, [pc, #132]	@ (800d79c <USBD_LL_Init+0xb8>)
 800d716:	2200      	movs	r2, #0
 800d718:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d71a:	4b20      	ldr	r3, [pc, #128]	@ (800d79c <USBD_LL_Init+0xb8>)
 800d71c:	2200      	movs	r2, #0
 800d71e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800d720:	4b1e      	ldr	r3, [pc, #120]	@ (800d79c <USBD_LL_Init+0xb8>)
 800d722:	2200      	movs	r2, #0
 800d724:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d726:	4b1d      	ldr	r3, [pc, #116]	@ (800d79c <USBD_LL_Init+0xb8>)
 800d728:	2200      	movs	r2, #0
 800d72a:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d72c:	481b      	ldr	r0, [pc, #108]	@ (800d79c <USBD_LL_Init+0xb8>)
 800d72e:	f7f6 fe94 	bl	800445a <HAL_PCD_Init>
 800d732:	4603      	mov	r3, r0
 800d734:	2b00      	cmp	r3, #0
 800d736:	d001      	beq.n	800d73c <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800d738:	f7f3 fb88 	bl	8000e4c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800d742:	2318      	movs	r3, #24
 800d744:	2200      	movs	r2, #0
 800d746:	2100      	movs	r1, #0
 800d748:	f7f8 fb4d 	bl	8005de6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800d752:	2358      	movs	r3, #88	@ 0x58
 800d754:	2200      	movs	r2, #0
 800d756:	2180      	movs	r1, #128	@ 0x80
 800d758:	f7f8 fb45 	bl	8005de6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800d762:	23c0      	movs	r3, #192	@ 0xc0
 800d764:	2200      	movs	r2, #0
 800d766:	2181      	movs	r1, #129	@ 0x81
 800d768:	f7f8 fb3d 	bl	8005de6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800d772:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800d776:	2200      	movs	r2, #0
 800d778:	2101      	movs	r1, #1
 800d77a:	f7f8 fb34 	bl	8005de6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800d784:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d788:	2200      	movs	r2, #0
 800d78a:	2182      	movs	r1, #130	@ 0x82
 800d78c:	f7f8 fb2b 	bl	8005de6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800d790:	2300      	movs	r3, #0
}
 800d792:	4618      	mov	r0, r3
 800d794:	3708      	adds	r7, #8
 800d796:	46bd      	mov	sp, r7
 800d798:	bd80      	pop	{r7, pc}
 800d79a:	bf00      	nop
 800d79c:	20005f08 	.word	0x20005f08
 800d7a0:	40005c00 	.word	0x40005c00

0800d7a4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d7a4:	b580      	push	{r7, lr}
 800d7a6:	b084      	sub	sp, #16
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	f7f6 ff1b 	bl	80045f6 <HAL_PCD_Start>
 800d7c0:	4603      	mov	r3, r0
 800d7c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d7c4:	7bfb      	ldrb	r3, [r7, #15]
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	f000 f97e 	bl	800dac8 <USBD_Get_USB_Status>
 800d7cc:	4603      	mov	r3, r0
 800d7ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d7d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	3710      	adds	r7, #16
 800d7d6:	46bd      	mov	sp, r7
 800d7d8:	bd80      	pop	{r7, pc}

0800d7da <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d7da:	b580      	push	{r7, lr}
 800d7dc:	b084      	sub	sp, #16
 800d7de:	af00      	add	r7, sp, #0
 800d7e0:	6078      	str	r0, [r7, #4]
 800d7e2:	4608      	mov	r0, r1
 800d7e4:	4611      	mov	r1, r2
 800d7e6:	461a      	mov	r2, r3
 800d7e8:	4603      	mov	r3, r0
 800d7ea:	70fb      	strb	r3, [r7, #3]
 800d7ec:	460b      	mov	r3, r1
 800d7ee:	70bb      	strb	r3, [r7, #2]
 800d7f0:	4613      	mov	r3, r2
 800d7f2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d7f4:	2300      	movs	r3, #0
 800d7f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800d802:	78bb      	ldrb	r3, [r7, #2]
 800d804:	883a      	ldrh	r2, [r7, #0]
 800d806:	78f9      	ldrb	r1, [r7, #3]
 800d808:	f7f7 f862 	bl	80048d0 <HAL_PCD_EP_Open>
 800d80c:	4603      	mov	r3, r0
 800d80e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d810:	7bfb      	ldrb	r3, [r7, #15]
 800d812:	4618      	mov	r0, r3
 800d814:	f000 f958 	bl	800dac8 <USBD_Get_USB_Status>
 800d818:	4603      	mov	r3, r0
 800d81a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d81c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d81e:	4618      	mov	r0, r3
 800d820:	3710      	adds	r7, #16
 800d822:	46bd      	mov	sp, r7
 800d824:	bd80      	pop	{r7, pc}

0800d826 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d826:	b580      	push	{r7, lr}
 800d828:	b084      	sub	sp, #16
 800d82a:	af00      	add	r7, sp, #0
 800d82c:	6078      	str	r0, [r7, #4]
 800d82e:	460b      	mov	r3, r1
 800d830:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d832:	2300      	movs	r3, #0
 800d834:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d836:	2300      	movs	r3, #0
 800d838:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d840:	78fa      	ldrb	r2, [r7, #3]
 800d842:	4611      	mov	r1, r2
 800d844:	4618      	mov	r0, r3
 800d846:	f7f7 f8a0 	bl	800498a <HAL_PCD_EP_Close>
 800d84a:	4603      	mov	r3, r0
 800d84c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d84e:	7bfb      	ldrb	r3, [r7, #15]
 800d850:	4618      	mov	r0, r3
 800d852:	f000 f939 	bl	800dac8 <USBD_Get_USB_Status>
 800d856:	4603      	mov	r3, r0
 800d858:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d85a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d85c:	4618      	mov	r0, r3
 800d85e:	3710      	adds	r7, #16
 800d860:	46bd      	mov	sp, r7
 800d862:	bd80      	pop	{r7, pc}

0800d864 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d864:	b580      	push	{r7, lr}
 800d866:	b084      	sub	sp, #16
 800d868:	af00      	add	r7, sp, #0
 800d86a:	6078      	str	r0, [r7, #4]
 800d86c:	460b      	mov	r3, r1
 800d86e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d870:	2300      	movs	r3, #0
 800d872:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d874:	2300      	movs	r3, #0
 800d876:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d87e:	78fa      	ldrb	r2, [r7, #3]
 800d880:	4611      	mov	r1, r2
 800d882:	4618      	mov	r0, r3
 800d884:	f7f7 f949 	bl	8004b1a <HAL_PCD_EP_SetStall>
 800d888:	4603      	mov	r3, r0
 800d88a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d88c:	7bfb      	ldrb	r3, [r7, #15]
 800d88e:	4618      	mov	r0, r3
 800d890:	f000 f91a 	bl	800dac8 <USBD_Get_USB_Status>
 800d894:	4603      	mov	r3, r0
 800d896:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d898:	7bbb      	ldrb	r3, [r7, #14]
}
 800d89a:	4618      	mov	r0, r3
 800d89c:	3710      	adds	r7, #16
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	bd80      	pop	{r7, pc}

0800d8a2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d8a2:	b580      	push	{r7, lr}
 800d8a4:	b084      	sub	sp, #16
 800d8a6:	af00      	add	r7, sp, #0
 800d8a8:	6078      	str	r0, [r7, #4]
 800d8aa:	460b      	mov	r3, r1
 800d8ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d8bc:	78fa      	ldrb	r2, [r7, #3]
 800d8be:	4611      	mov	r1, r2
 800d8c0:	4618      	mov	r0, r3
 800d8c2:	f7f7 f97c 	bl	8004bbe <HAL_PCD_EP_ClrStall>
 800d8c6:	4603      	mov	r3, r0
 800d8c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d8ca:	7bfb      	ldrb	r3, [r7, #15]
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	f000 f8fb 	bl	800dac8 <USBD_Get_USB_Status>
 800d8d2:	4603      	mov	r3, r0
 800d8d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d8d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800d8d8:	4618      	mov	r0, r3
 800d8da:	3710      	adds	r7, #16
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	bd80      	pop	{r7, pc}

0800d8e0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d8e0:	b480      	push	{r7}
 800d8e2:	b085      	sub	sp, #20
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
 800d8e8:	460b      	mov	r3, r1
 800d8ea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d8f2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d8f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	da0b      	bge.n	800d914 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d8fc:	78fb      	ldrb	r3, [r7, #3]
 800d8fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d902:	68f9      	ldr	r1, [r7, #12]
 800d904:	4613      	mov	r3, r2
 800d906:	009b      	lsls	r3, r3, #2
 800d908:	4413      	add	r3, r2
 800d90a:	00db      	lsls	r3, r3, #3
 800d90c:	440b      	add	r3, r1
 800d90e:	3312      	adds	r3, #18
 800d910:	781b      	ldrb	r3, [r3, #0]
 800d912:	e00b      	b.n	800d92c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d914:	78fb      	ldrb	r3, [r7, #3]
 800d916:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d91a:	68f9      	ldr	r1, [r7, #12]
 800d91c:	4613      	mov	r3, r2
 800d91e:	009b      	lsls	r3, r3, #2
 800d920:	4413      	add	r3, r2
 800d922:	00db      	lsls	r3, r3, #3
 800d924:	440b      	add	r3, r1
 800d926:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800d92a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d92c:	4618      	mov	r0, r3
 800d92e:	3714      	adds	r7, #20
 800d930:	46bd      	mov	sp, r7
 800d932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d936:	4770      	bx	lr

0800d938 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d938:	b580      	push	{r7, lr}
 800d93a:	b084      	sub	sp, #16
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	6078      	str	r0, [r7, #4]
 800d940:	460b      	mov	r3, r1
 800d942:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d944:	2300      	movs	r3, #0
 800d946:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d948:	2300      	movs	r3, #0
 800d94a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d952:	78fa      	ldrb	r2, [r7, #3]
 800d954:	4611      	mov	r1, r2
 800d956:	4618      	mov	r0, r3
 800d958:	f7f6 ff96 	bl	8004888 <HAL_PCD_SetAddress>
 800d95c:	4603      	mov	r3, r0
 800d95e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d960:	7bfb      	ldrb	r3, [r7, #15]
 800d962:	4618      	mov	r0, r3
 800d964:	f000 f8b0 	bl	800dac8 <USBD_Get_USB_Status>
 800d968:	4603      	mov	r3, r0
 800d96a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d96c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d96e:	4618      	mov	r0, r3
 800d970:	3710      	adds	r7, #16
 800d972:	46bd      	mov	sp, r7
 800d974:	bd80      	pop	{r7, pc}

0800d976 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d976:	b580      	push	{r7, lr}
 800d978:	b086      	sub	sp, #24
 800d97a:	af00      	add	r7, sp, #0
 800d97c:	60f8      	str	r0, [r7, #12]
 800d97e:	607a      	str	r2, [r7, #4]
 800d980:	603b      	str	r3, [r7, #0]
 800d982:	460b      	mov	r3, r1
 800d984:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d986:	2300      	movs	r3, #0
 800d988:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d98a:	2300      	movs	r3, #0
 800d98c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800d994:	7af9      	ldrb	r1, [r7, #11]
 800d996:	683b      	ldr	r3, [r7, #0]
 800d998:	687a      	ldr	r2, [r7, #4]
 800d99a:	f7f7 f887 	bl	8004aac <HAL_PCD_EP_Transmit>
 800d99e:	4603      	mov	r3, r0
 800d9a0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d9a2:	7dfb      	ldrb	r3, [r7, #23]
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	f000 f88f 	bl	800dac8 <USBD_Get_USB_Status>
 800d9aa:	4603      	mov	r3, r0
 800d9ac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d9ae:	7dbb      	ldrb	r3, [r7, #22]
}
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	3718      	adds	r7, #24
 800d9b4:	46bd      	mov	sp, r7
 800d9b6:	bd80      	pop	{r7, pc}

0800d9b8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d9b8:	b580      	push	{r7, lr}
 800d9ba:	b086      	sub	sp, #24
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	60f8      	str	r0, [r7, #12]
 800d9c0:	607a      	str	r2, [r7, #4]
 800d9c2:	603b      	str	r3, [r7, #0]
 800d9c4:	460b      	mov	r3, r1
 800d9c6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d9c8:	2300      	movs	r3, #0
 800d9ca:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d9cc:	2300      	movs	r3, #0
 800d9ce:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800d9d6:	7af9      	ldrb	r1, [r7, #11]
 800d9d8:	683b      	ldr	r3, [r7, #0]
 800d9da:	687a      	ldr	r2, [r7, #4]
 800d9dc:	f7f7 f81d 	bl	8004a1a <HAL_PCD_EP_Receive>
 800d9e0:	4603      	mov	r3, r0
 800d9e2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d9e4:	7dfb      	ldrb	r3, [r7, #23]
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	f000 f86e 	bl	800dac8 <USBD_Get_USB_Status>
 800d9ec:	4603      	mov	r3, r0
 800d9ee:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d9f0:	7dbb      	ldrb	r3, [r7, #22]
}
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	3718      	adds	r7, #24
 800d9f6:	46bd      	mov	sp, r7
 800d9f8:	bd80      	pop	{r7, pc}

0800d9fa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d9fa:	b580      	push	{r7, lr}
 800d9fc:	b082      	sub	sp, #8
 800d9fe:	af00      	add	r7, sp, #0
 800da00:	6078      	str	r0, [r7, #4]
 800da02:	460b      	mov	r3, r1
 800da04:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800da0c:	78fa      	ldrb	r2, [r7, #3]
 800da0e:	4611      	mov	r1, r2
 800da10:	4618      	mov	r0, r3
 800da12:	f7f7 f833 	bl	8004a7c <HAL_PCD_EP_GetRxCount>
 800da16:	4603      	mov	r3, r0
}
 800da18:	4618      	mov	r0, r3
 800da1a:	3708      	adds	r7, #8
 800da1c:	46bd      	mov	sp, r7
 800da1e:	bd80      	pop	{r7, pc}

0800da20 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da20:	b580      	push	{r7, lr}
 800da22:	b082      	sub	sp, #8
 800da24:	af00      	add	r7, sp, #0
 800da26:	6078      	str	r0, [r7, #4]
 800da28:	460b      	mov	r3, r1
 800da2a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800da2c:	78fb      	ldrb	r3, [r7, #3]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d002      	beq.n	800da38 <HAL_PCDEx_LPM_Callback+0x18>
 800da32:	2b01      	cmp	r3, #1
 800da34:	d013      	beq.n	800da5e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800da36:	e023      	b.n	800da80 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	7a5b      	ldrb	r3, [r3, #9]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d007      	beq.n	800da50 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800da40:	f000 f83c 	bl	800dabc <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800da44:	4b10      	ldr	r3, [pc, #64]	@ (800da88 <HAL_PCDEx_LPM_Callback+0x68>)
 800da46:	691b      	ldr	r3, [r3, #16]
 800da48:	4a0f      	ldr	r2, [pc, #60]	@ (800da88 <HAL_PCDEx_LPM_Callback+0x68>)
 800da4a:	f023 0306 	bic.w	r3, r3, #6
 800da4e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800da56:	4618      	mov	r0, r3
 800da58:	f7fe fc9c 	bl	800c394 <USBD_LL_Resume>
    break;
 800da5c:	e010      	b.n	800da80 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800da64:	4618      	mov	r0, r3
 800da66:	f7fe fc7f 	bl	800c368 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	7a5b      	ldrb	r3, [r3, #9]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d005      	beq.n	800da7e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800da72:	4b05      	ldr	r3, [pc, #20]	@ (800da88 <HAL_PCDEx_LPM_Callback+0x68>)
 800da74:	691b      	ldr	r3, [r3, #16]
 800da76:	4a04      	ldr	r2, [pc, #16]	@ (800da88 <HAL_PCDEx_LPM_Callback+0x68>)
 800da78:	f043 0306 	orr.w	r3, r3, #6
 800da7c:	6113      	str	r3, [r2, #16]
    break;
 800da7e:	bf00      	nop
}
 800da80:	bf00      	nop
 800da82:	3708      	adds	r7, #8
 800da84:	46bd      	mov	sp, r7
 800da86:	bd80      	pop	{r7, pc}
 800da88:	e000ed00 	.word	0xe000ed00

0800da8c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800da8c:	b480      	push	{r7}
 800da8e:	b083      	sub	sp, #12
 800da90:	af00      	add	r7, sp, #0
 800da92:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800da94:	4b03      	ldr	r3, [pc, #12]	@ (800daa4 <USBD_static_malloc+0x18>)
}
 800da96:	4618      	mov	r0, r3
 800da98:	370c      	adds	r7, #12
 800da9a:	46bd      	mov	sp, r7
 800da9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa0:	4770      	bx	lr
 800daa2:	bf00      	nop
 800daa4:	200061e4 	.word	0x200061e4

0800daa8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800daa8:	b480      	push	{r7}
 800daaa:	b083      	sub	sp, #12
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]

}
 800dab0:	bf00      	nop
 800dab2:	370c      	adds	r7, #12
 800dab4:	46bd      	mov	sp, r7
 800dab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daba:	4770      	bx	lr

0800dabc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800dabc:	b580      	push	{r7, lr}
 800dabe:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800dac0:	f7f2 fcb6 	bl	8000430 <SystemClock_Config>
}
 800dac4:	bf00      	nop
 800dac6:	bd80      	pop	{r7, pc}

0800dac8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800dac8:	b480      	push	{r7}
 800daca:	b085      	sub	sp, #20
 800dacc:	af00      	add	r7, sp, #0
 800dace:	4603      	mov	r3, r0
 800dad0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dad2:	2300      	movs	r3, #0
 800dad4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800dad6:	79fb      	ldrb	r3, [r7, #7]
 800dad8:	2b03      	cmp	r3, #3
 800dada:	d817      	bhi.n	800db0c <USBD_Get_USB_Status+0x44>
 800dadc:	a201      	add	r2, pc, #4	@ (adr r2, 800dae4 <USBD_Get_USB_Status+0x1c>)
 800dade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dae2:	bf00      	nop
 800dae4:	0800daf5 	.word	0x0800daf5
 800dae8:	0800dafb 	.word	0x0800dafb
 800daec:	0800db01 	.word	0x0800db01
 800daf0:	0800db07 	.word	0x0800db07
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800daf4:	2300      	movs	r3, #0
 800daf6:	73fb      	strb	r3, [r7, #15]
    break;
 800daf8:	e00b      	b.n	800db12 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dafa:	2303      	movs	r3, #3
 800dafc:	73fb      	strb	r3, [r7, #15]
    break;
 800dafe:	e008      	b.n	800db12 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800db00:	2301      	movs	r3, #1
 800db02:	73fb      	strb	r3, [r7, #15]
    break;
 800db04:	e005      	b.n	800db12 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800db06:	2303      	movs	r3, #3
 800db08:	73fb      	strb	r3, [r7, #15]
    break;
 800db0a:	e002      	b.n	800db12 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800db0c:	2303      	movs	r3, #3
 800db0e:	73fb      	strb	r3, [r7, #15]
    break;
 800db10:	bf00      	nop
  }
  return usb_status;
 800db12:	7bfb      	ldrb	r3, [r7, #15]
}
 800db14:	4618      	mov	r0, r3
 800db16:	3714      	adds	r7, #20
 800db18:	46bd      	mov	sp, r7
 800db1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1e:	4770      	bx	lr

0800db20 <siprintf>:
 800db20:	b40e      	push	{r1, r2, r3}
 800db22:	b500      	push	{lr}
 800db24:	b09c      	sub	sp, #112	@ 0x70
 800db26:	ab1d      	add	r3, sp, #116	@ 0x74
 800db28:	9002      	str	r0, [sp, #8]
 800db2a:	9006      	str	r0, [sp, #24]
 800db2c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800db30:	4809      	ldr	r0, [pc, #36]	@ (800db58 <siprintf+0x38>)
 800db32:	9107      	str	r1, [sp, #28]
 800db34:	9104      	str	r1, [sp, #16]
 800db36:	4909      	ldr	r1, [pc, #36]	@ (800db5c <siprintf+0x3c>)
 800db38:	f853 2b04 	ldr.w	r2, [r3], #4
 800db3c:	9105      	str	r1, [sp, #20]
 800db3e:	6800      	ldr	r0, [r0, #0]
 800db40:	9301      	str	r3, [sp, #4]
 800db42:	a902      	add	r1, sp, #8
 800db44:	f000 f994 	bl	800de70 <_svfiprintf_r>
 800db48:	9b02      	ldr	r3, [sp, #8]
 800db4a:	2200      	movs	r2, #0
 800db4c:	701a      	strb	r2, [r3, #0]
 800db4e:	b01c      	add	sp, #112	@ 0x70
 800db50:	f85d eb04 	ldr.w	lr, [sp], #4
 800db54:	b003      	add	sp, #12
 800db56:	4770      	bx	lr
 800db58:	20000184 	.word	0x20000184
 800db5c:	ffff0208 	.word	0xffff0208

0800db60 <memset>:
 800db60:	4402      	add	r2, r0
 800db62:	4603      	mov	r3, r0
 800db64:	4293      	cmp	r3, r2
 800db66:	d100      	bne.n	800db6a <memset+0xa>
 800db68:	4770      	bx	lr
 800db6a:	f803 1b01 	strb.w	r1, [r3], #1
 800db6e:	e7f9      	b.n	800db64 <memset+0x4>

0800db70 <__errno>:
 800db70:	4b01      	ldr	r3, [pc, #4]	@ (800db78 <__errno+0x8>)
 800db72:	6818      	ldr	r0, [r3, #0]
 800db74:	4770      	bx	lr
 800db76:	bf00      	nop
 800db78:	20000184 	.word	0x20000184

0800db7c <__libc_init_array>:
 800db7c:	b570      	push	{r4, r5, r6, lr}
 800db7e:	4d0d      	ldr	r5, [pc, #52]	@ (800dbb4 <__libc_init_array+0x38>)
 800db80:	4c0d      	ldr	r4, [pc, #52]	@ (800dbb8 <__libc_init_array+0x3c>)
 800db82:	1b64      	subs	r4, r4, r5
 800db84:	10a4      	asrs	r4, r4, #2
 800db86:	2600      	movs	r6, #0
 800db88:	42a6      	cmp	r6, r4
 800db8a:	d109      	bne.n	800dba0 <__libc_init_array+0x24>
 800db8c:	4d0b      	ldr	r5, [pc, #44]	@ (800dbbc <__libc_init_array+0x40>)
 800db8e:	4c0c      	ldr	r4, [pc, #48]	@ (800dbc0 <__libc_init_array+0x44>)
 800db90:	f000 fc66 	bl	800e460 <_init>
 800db94:	1b64      	subs	r4, r4, r5
 800db96:	10a4      	asrs	r4, r4, #2
 800db98:	2600      	movs	r6, #0
 800db9a:	42a6      	cmp	r6, r4
 800db9c:	d105      	bne.n	800dbaa <__libc_init_array+0x2e>
 800db9e:	bd70      	pop	{r4, r5, r6, pc}
 800dba0:	f855 3b04 	ldr.w	r3, [r5], #4
 800dba4:	4798      	blx	r3
 800dba6:	3601      	adds	r6, #1
 800dba8:	e7ee      	b.n	800db88 <__libc_init_array+0xc>
 800dbaa:	f855 3b04 	ldr.w	r3, [r5], #4
 800dbae:	4798      	blx	r3
 800dbb0:	3601      	adds	r6, #1
 800dbb2:	e7f2      	b.n	800db9a <__libc_init_array+0x1e>
 800dbb4:	0800e51c 	.word	0x0800e51c
 800dbb8:	0800e51c 	.word	0x0800e51c
 800dbbc:	0800e51c 	.word	0x0800e51c
 800dbc0:	0800e520 	.word	0x0800e520

0800dbc4 <__retarget_lock_acquire_recursive>:
 800dbc4:	4770      	bx	lr

0800dbc6 <__retarget_lock_release_recursive>:
 800dbc6:	4770      	bx	lr

0800dbc8 <_free_r>:
 800dbc8:	b538      	push	{r3, r4, r5, lr}
 800dbca:	4605      	mov	r5, r0
 800dbcc:	2900      	cmp	r1, #0
 800dbce:	d041      	beq.n	800dc54 <_free_r+0x8c>
 800dbd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dbd4:	1f0c      	subs	r4, r1, #4
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	bfb8      	it	lt
 800dbda:	18e4      	addlt	r4, r4, r3
 800dbdc:	f000 f8e0 	bl	800dda0 <__malloc_lock>
 800dbe0:	4a1d      	ldr	r2, [pc, #116]	@ (800dc58 <_free_r+0x90>)
 800dbe2:	6813      	ldr	r3, [r2, #0]
 800dbe4:	b933      	cbnz	r3, 800dbf4 <_free_r+0x2c>
 800dbe6:	6063      	str	r3, [r4, #4]
 800dbe8:	6014      	str	r4, [r2, #0]
 800dbea:	4628      	mov	r0, r5
 800dbec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dbf0:	f000 b8dc 	b.w	800ddac <__malloc_unlock>
 800dbf4:	42a3      	cmp	r3, r4
 800dbf6:	d908      	bls.n	800dc0a <_free_r+0x42>
 800dbf8:	6820      	ldr	r0, [r4, #0]
 800dbfa:	1821      	adds	r1, r4, r0
 800dbfc:	428b      	cmp	r3, r1
 800dbfe:	bf01      	itttt	eq
 800dc00:	6819      	ldreq	r1, [r3, #0]
 800dc02:	685b      	ldreq	r3, [r3, #4]
 800dc04:	1809      	addeq	r1, r1, r0
 800dc06:	6021      	streq	r1, [r4, #0]
 800dc08:	e7ed      	b.n	800dbe6 <_free_r+0x1e>
 800dc0a:	461a      	mov	r2, r3
 800dc0c:	685b      	ldr	r3, [r3, #4]
 800dc0e:	b10b      	cbz	r3, 800dc14 <_free_r+0x4c>
 800dc10:	42a3      	cmp	r3, r4
 800dc12:	d9fa      	bls.n	800dc0a <_free_r+0x42>
 800dc14:	6811      	ldr	r1, [r2, #0]
 800dc16:	1850      	adds	r0, r2, r1
 800dc18:	42a0      	cmp	r0, r4
 800dc1a:	d10b      	bne.n	800dc34 <_free_r+0x6c>
 800dc1c:	6820      	ldr	r0, [r4, #0]
 800dc1e:	4401      	add	r1, r0
 800dc20:	1850      	adds	r0, r2, r1
 800dc22:	4283      	cmp	r3, r0
 800dc24:	6011      	str	r1, [r2, #0]
 800dc26:	d1e0      	bne.n	800dbea <_free_r+0x22>
 800dc28:	6818      	ldr	r0, [r3, #0]
 800dc2a:	685b      	ldr	r3, [r3, #4]
 800dc2c:	6053      	str	r3, [r2, #4]
 800dc2e:	4408      	add	r0, r1
 800dc30:	6010      	str	r0, [r2, #0]
 800dc32:	e7da      	b.n	800dbea <_free_r+0x22>
 800dc34:	d902      	bls.n	800dc3c <_free_r+0x74>
 800dc36:	230c      	movs	r3, #12
 800dc38:	602b      	str	r3, [r5, #0]
 800dc3a:	e7d6      	b.n	800dbea <_free_r+0x22>
 800dc3c:	6820      	ldr	r0, [r4, #0]
 800dc3e:	1821      	adds	r1, r4, r0
 800dc40:	428b      	cmp	r3, r1
 800dc42:	bf04      	itt	eq
 800dc44:	6819      	ldreq	r1, [r3, #0]
 800dc46:	685b      	ldreq	r3, [r3, #4]
 800dc48:	6063      	str	r3, [r4, #4]
 800dc4a:	bf04      	itt	eq
 800dc4c:	1809      	addeq	r1, r1, r0
 800dc4e:	6021      	streq	r1, [r4, #0]
 800dc50:	6054      	str	r4, [r2, #4]
 800dc52:	e7ca      	b.n	800dbea <_free_r+0x22>
 800dc54:	bd38      	pop	{r3, r4, r5, pc}
 800dc56:	bf00      	nop
 800dc58:	20006548 	.word	0x20006548

0800dc5c <sbrk_aligned>:
 800dc5c:	b570      	push	{r4, r5, r6, lr}
 800dc5e:	4e0f      	ldr	r6, [pc, #60]	@ (800dc9c <sbrk_aligned+0x40>)
 800dc60:	460c      	mov	r4, r1
 800dc62:	6831      	ldr	r1, [r6, #0]
 800dc64:	4605      	mov	r5, r0
 800dc66:	b911      	cbnz	r1, 800dc6e <sbrk_aligned+0x12>
 800dc68:	f000 fba6 	bl	800e3b8 <_sbrk_r>
 800dc6c:	6030      	str	r0, [r6, #0]
 800dc6e:	4621      	mov	r1, r4
 800dc70:	4628      	mov	r0, r5
 800dc72:	f000 fba1 	bl	800e3b8 <_sbrk_r>
 800dc76:	1c43      	adds	r3, r0, #1
 800dc78:	d103      	bne.n	800dc82 <sbrk_aligned+0x26>
 800dc7a:	f04f 34ff 	mov.w	r4, #4294967295
 800dc7e:	4620      	mov	r0, r4
 800dc80:	bd70      	pop	{r4, r5, r6, pc}
 800dc82:	1cc4      	adds	r4, r0, #3
 800dc84:	f024 0403 	bic.w	r4, r4, #3
 800dc88:	42a0      	cmp	r0, r4
 800dc8a:	d0f8      	beq.n	800dc7e <sbrk_aligned+0x22>
 800dc8c:	1a21      	subs	r1, r4, r0
 800dc8e:	4628      	mov	r0, r5
 800dc90:	f000 fb92 	bl	800e3b8 <_sbrk_r>
 800dc94:	3001      	adds	r0, #1
 800dc96:	d1f2      	bne.n	800dc7e <sbrk_aligned+0x22>
 800dc98:	e7ef      	b.n	800dc7a <sbrk_aligned+0x1e>
 800dc9a:	bf00      	nop
 800dc9c:	20006544 	.word	0x20006544

0800dca0 <_malloc_r>:
 800dca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dca4:	1ccd      	adds	r5, r1, #3
 800dca6:	f025 0503 	bic.w	r5, r5, #3
 800dcaa:	3508      	adds	r5, #8
 800dcac:	2d0c      	cmp	r5, #12
 800dcae:	bf38      	it	cc
 800dcb0:	250c      	movcc	r5, #12
 800dcb2:	2d00      	cmp	r5, #0
 800dcb4:	4606      	mov	r6, r0
 800dcb6:	db01      	blt.n	800dcbc <_malloc_r+0x1c>
 800dcb8:	42a9      	cmp	r1, r5
 800dcba:	d904      	bls.n	800dcc6 <_malloc_r+0x26>
 800dcbc:	230c      	movs	r3, #12
 800dcbe:	6033      	str	r3, [r6, #0]
 800dcc0:	2000      	movs	r0, #0
 800dcc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dcc6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800dd9c <_malloc_r+0xfc>
 800dcca:	f000 f869 	bl	800dda0 <__malloc_lock>
 800dcce:	f8d8 3000 	ldr.w	r3, [r8]
 800dcd2:	461c      	mov	r4, r3
 800dcd4:	bb44      	cbnz	r4, 800dd28 <_malloc_r+0x88>
 800dcd6:	4629      	mov	r1, r5
 800dcd8:	4630      	mov	r0, r6
 800dcda:	f7ff ffbf 	bl	800dc5c <sbrk_aligned>
 800dcde:	1c43      	adds	r3, r0, #1
 800dce0:	4604      	mov	r4, r0
 800dce2:	d158      	bne.n	800dd96 <_malloc_r+0xf6>
 800dce4:	f8d8 4000 	ldr.w	r4, [r8]
 800dce8:	4627      	mov	r7, r4
 800dcea:	2f00      	cmp	r7, #0
 800dcec:	d143      	bne.n	800dd76 <_malloc_r+0xd6>
 800dcee:	2c00      	cmp	r4, #0
 800dcf0:	d04b      	beq.n	800dd8a <_malloc_r+0xea>
 800dcf2:	6823      	ldr	r3, [r4, #0]
 800dcf4:	4639      	mov	r1, r7
 800dcf6:	4630      	mov	r0, r6
 800dcf8:	eb04 0903 	add.w	r9, r4, r3
 800dcfc:	f000 fb5c 	bl	800e3b8 <_sbrk_r>
 800dd00:	4581      	cmp	r9, r0
 800dd02:	d142      	bne.n	800dd8a <_malloc_r+0xea>
 800dd04:	6821      	ldr	r1, [r4, #0]
 800dd06:	1a6d      	subs	r5, r5, r1
 800dd08:	4629      	mov	r1, r5
 800dd0a:	4630      	mov	r0, r6
 800dd0c:	f7ff ffa6 	bl	800dc5c <sbrk_aligned>
 800dd10:	3001      	adds	r0, #1
 800dd12:	d03a      	beq.n	800dd8a <_malloc_r+0xea>
 800dd14:	6823      	ldr	r3, [r4, #0]
 800dd16:	442b      	add	r3, r5
 800dd18:	6023      	str	r3, [r4, #0]
 800dd1a:	f8d8 3000 	ldr.w	r3, [r8]
 800dd1e:	685a      	ldr	r2, [r3, #4]
 800dd20:	bb62      	cbnz	r2, 800dd7c <_malloc_r+0xdc>
 800dd22:	f8c8 7000 	str.w	r7, [r8]
 800dd26:	e00f      	b.n	800dd48 <_malloc_r+0xa8>
 800dd28:	6822      	ldr	r2, [r4, #0]
 800dd2a:	1b52      	subs	r2, r2, r5
 800dd2c:	d420      	bmi.n	800dd70 <_malloc_r+0xd0>
 800dd2e:	2a0b      	cmp	r2, #11
 800dd30:	d917      	bls.n	800dd62 <_malloc_r+0xc2>
 800dd32:	1961      	adds	r1, r4, r5
 800dd34:	42a3      	cmp	r3, r4
 800dd36:	6025      	str	r5, [r4, #0]
 800dd38:	bf18      	it	ne
 800dd3a:	6059      	strne	r1, [r3, #4]
 800dd3c:	6863      	ldr	r3, [r4, #4]
 800dd3e:	bf08      	it	eq
 800dd40:	f8c8 1000 	streq.w	r1, [r8]
 800dd44:	5162      	str	r2, [r4, r5]
 800dd46:	604b      	str	r3, [r1, #4]
 800dd48:	4630      	mov	r0, r6
 800dd4a:	f000 f82f 	bl	800ddac <__malloc_unlock>
 800dd4e:	f104 000b 	add.w	r0, r4, #11
 800dd52:	1d23      	adds	r3, r4, #4
 800dd54:	f020 0007 	bic.w	r0, r0, #7
 800dd58:	1ac2      	subs	r2, r0, r3
 800dd5a:	bf1c      	itt	ne
 800dd5c:	1a1b      	subne	r3, r3, r0
 800dd5e:	50a3      	strne	r3, [r4, r2]
 800dd60:	e7af      	b.n	800dcc2 <_malloc_r+0x22>
 800dd62:	6862      	ldr	r2, [r4, #4]
 800dd64:	42a3      	cmp	r3, r4
 800dd66:	bf0c      	ite	eq
 800dd68:	f8c8 2000 	streq.w	r2, [r8]
 800dd6c:	605a      	strne	r2, [r3, #4]
 800dd6e:	e7eb      	b.n	800dd48 <_malloc_r+0xa8>
 800dd70:	4623      	mov	r3, r4
 800dd72:	6864      	ldr	r4, [r4, #4]
 800dd74:	e7ae      	b.n	800dcd4 <_malloc_r+0x34>
 800dd76:	463c      	mov	r4, r7
 800dd78:	687f      	ldr	r7, [r7, #4]
 800dd7a:	e7b6      	b.n	800dcea <_malloc_r+0x4a>
 800dd7c:	461a      	mov	r2, r3
 800dd7e:	685b      	ldr	r3, [r3, #4]
 800dd80:	42a3      	cmp	r3, r4
 800dd82:	d1fb      	bne.n	800dd7c <_malloc_r+0xdc>
 800dd84:	2300      	movs	r3, #0
 800dd86:	6053      	str	r3, [r2, #4]
 800dd88:	e7de      	b.n	800dd48 <_malloc_r+0xa8>
 800dd8a:	230c      	movs	r3, #12
 800dd8c:	6033      	str	r3, [r6, #0]
 800dd8e:	4630      	mov	r0, r6
 800dd90:	f000 f80c 	bl	800ddac <__malloc_unlock>
 800dd94:	e794      	b.n	800dcc0 <_malloc_r+0x20>
 800dd96:	6005      	str	r5, [r0, #0]
 800dd98:	e7d6      	b.n	800dd48 <_malloc_r+0xa8>
 800dd9a:	bf00      	nop
 800dd9c:	20006548 	.word	0x20006548

0800dda0 <__malloc_lock>:
 800dda0:	4801      	ldr	r0, [pc, #4]	@ (800dda8 <__malloc_lock+0x8>)
 800dda2:	f7ff bf0f 	b.w	800dbc4 <__retarget_lock_acquire_recursive>
 800dda6:	bf00      	nop
 800dda8:	20006540 	.word	0x20006540

0800ddac <__malloc_unlock>:
 800ddac:	4801      	ldr	r0, [pc, #4]	@ (800ddb4 <__malloc_unlock+0x8>)
 800ddae:	f7ff bf0a 	b.w	800dbc6 <__retarget_lock_release_recursive>
 800ddb2:	bf00      	nop
 800ddb4:	20006540 	.word	0x20006540

0800ddb8 <__ssputs_r>:
 800ddb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ddbc:	688e      	ldr	r6, [r1, #8]
 800ddbe:	461f      	mov	r7, r3
 800ddc0:	42be      	cmp	r6, r7
 800ddc2:	680b      	ldr	r3, [r1, #0]
 800ddc4:	4682      	mov	sl, r0
 800ddc6:	460c      	mov	r4, r1
 800ddc8:	4690      	mov	r8, r2
 800ddca:	d82d      	bhi.n	800de28 <__ssputs_r+0x70>
 800ddcc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ddd0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ddd4:	d026      	beq.n	800de24 <__ssputs_r+0x6c>
 800ddd6:	6965      	ldr	r5, [r4, #20]
 800ddd8:	6909      	ldr	r1, [r1, #16]
 800ddda:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ddde:	eba3 0901 	sub.w	r9, r3, r1
 800dde2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dde6:	1c7b      	adds	r3, r7, #1
 800dde8:	444b      	add	r3, r9
 800ddea:	106d      	asrs	r5, r5, #1
 800ddec:	429d      	cmp	r5, r3
 800ddee:	bf38      	it	cc
 800ddf0:	461d      	movcc	r5, r3
 800ddf2:	0553      	lsls	r3, r2, #21
 800ddf4:	d527      	bpl.n	800de46 <__ssputs_r+0x8e>
 800ddf6:	4629      	mov	r1, r5
 800ddf8:	f7ff ff52 	bl	800dca0 <_malloc_r>
 800ddfc:	4606      	mov	r6, r0
 800ddfe:	b360      	cbz	r0, 800de5a <__ssputs_r+0xa2>
 800de00:	6921      	ldr	r1, [r4, #16]
 800de02:	464a      	mov	r2, r9
 800de04:	f000 fae8 	bl	800e3d8 <memcpy>
 800de08:	89a3      	ldrh	r3, [r4, #12]
 800de0a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800de0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800de12:	81a3      	strh	r3, [r4, #12]
 800de14:	6126      	str	r6, [r4, #16]
 800de16:	6165      	str	r5, [r4, #20]
 800de18:	444e      	add	r6, r9
 800de1a:	eba5 0509 	sub.w	r5, r5, r9
 800de1e:	6026      	str	r6, [r4, #0]
 800de20:	60a5      	str	r5, [r4, #8]
 800de22:	463e      	mov	r6, r7
 800de24:	42be      	cmp	r6, r7
 800de26:	d900      	bls.n	800de2a <__ssputs_r+0x72>
 800de28:	463e      	mov	r6, r7
 800de2a:	6820      	ldr	r0, [r4, #0]
 800de2c:	4632      	mov	r2, r6
 800de2e:	4641      	mov	r1, r8
 800de30:	f000 faa8 	bl	800e384 <memmove>
 800de34:	68a3      	ldr	r3, [r4, #8]
 800de36:	1b9b      	subs	r3, r3, r6
 800de38:	60a3      	str	r3, [r4, #8]
 800de3a:	6823      	ldr	r3, [r4, #0]
 800de3c:	4433      	add	r3, r6
 800de3e:	6023      	str	r3, [r4, #0]
 800de40:	2000      	movs	r0, #0
 800de42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de46:	462a      	mov	r2, r5
 800de48:	f000 fad4 	bl	800e3f4 <_realloc_r>
 800de4c:	4606      	mov	r6, r0
 800de4e:	2800      	cmp	r0, #0
 800de50:	d1e0      	bne.n	800de14 <__ssputs_r+0x5c>
 800de52:	6921      	ldr	r1, [r4, #16]
 800de54:	4650      	mov	r0, sl
 800de56:	f7ff feb7 	bl	800dbc8 <_free_r>
 800de5a:	230c      	movs	r3, #12
 800de5c:	f8ca 3000 	str.w	r3, [sl]
 800de60:	89a3      	ldrh	r3, [r4, #12]
 800de62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800de66:	81a3      	strh	r3, [r4, #12]
 800de68:	f04f 30ff 	mov.w	r0, #4294967295
 800de6c:	e7e9      	b.n	800de42 <__ssputs_r+0x8a>
	...

0800de70 <_svfiprintf_r>:
 800de70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de74:	4698      	mov	r8, r3
 800de76:	898b      	ldrh	r3, [r1, #12]
 800de78:	061b      	lsls	r3, r3, #24
 800de7a:	b09d      	sub	sp, #116	@ 0x74
 800de7c:	4607      	mov	r7, r0
 800de7e:	460d      	mov	r5, r1
 800de80:	4614      	mov	r4, r2
 800de82:	d510      	bpl.n	800dea6 <_svfiprintf_r+0x36>
 800de84:	690b      	ldr	r3, [r1, #16]
 800de86:	b973      	cbnz	r3, 800dea6 <_svfiprintf_r+0x36>
 800de88:	2140      	movs	r1, #64	@ 0x40
 800de8a:	f7ff ff09 	bl	800dca0 <_malloc_r>
 800de8e:	6028      	str	r0, [r5, #0]
 800de90:	6128      	str	r0, [r5, #16]
 800de92:	b930      	cbnz	r0, 800dea2 <_svfiprintf_r+0x32>
 800de94:	230c      	movs	r3, #12
 800de96:	603b      	str	r3, [r7, #0]
 800de98:	f04f 30ff 	mov.w	r0, #4294967295
 800de9c:	b01d      	add	sp, #116	@ 0x74
 800de9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dea2:	2340      	movs	r3, #64	@ 0x40
 800dea4:	616b      	str	r3, [r5, #20]
 800dea6:	2300      	movs	r3, #0
 800dea8:	9309      	str	r3, [sp, #36]	@ 0x24
 800deaa:	2320      	movs	r3, #32
 800deac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800deb0:	f8cd 800c 	str.w	r8, [sp, #12]
 800deb4:	2330      	movs	r3, #48	@ 0x30
 800deb6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e054 <_svfiprintf_r+0x1e4>
 800deba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800debe:	f04f 0901 	mov.w	r9, #1
 800dec2:	4623      	mov	r3, r4
 800dec4:	469a      	mov	sl, r3
 800dec6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800deca:	b10a      	cbz	r2, 800ded0 <_svfiprintf_r+0x60>
 800decc:	2a25      	cmp	r2, #37	@ 0x25
 800dece:	d1f9      	bne.n	800dec4 <_svfiprintf_r+0x54>
 800ded0:	ebba 0b04 	subs.w	fp, sl, r4
 800ded4:	d00b      	beq.n	800deee <_svfiprintf_r+0x7e>
 800ded6:	465b      	mov	r3, fp
 800ded8:	4622      	mov	r2, r4
 800deda:	4629      	mov	r1, r5
 800dedc:	4638      	mov	r0, r7
 800dede:	f7ff ff6b 	bl	800ddb8 <__ssputs_r>
 800dee2:	3001      	adds	r0, #1
 800dee4:	f000 80a7 	beq.w	800e036 <_svfiprintf_r+0x1c6>
 800dee8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800deea:	445a      	add	r2, fp
 800deec:	9209      	str	r2, [sp, #36]	@ 0x24
 800deee:	f89a 3000 	ldrb.w	r3, [sl]
 800def2:	2b00      	cmp	r3, #0
 800def4:	f000 809f 	beq.w	800e036 <_svfiprintf_r+0x1c6>
 800def8:	2300      	movs	r3, #0
 800defa:	f04f 32ff 	mov.w	r2, #4294967295
 800defe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800df02:	f10a 0a01 	add.w	sl, sl, #1
 800df06:	9304      	str	r3, [sp, #16]
 800df08:	9307      	str	r3, [sp, #28]
 800df0a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800df0e:	931a      	str	r3, [sp, #104]	@ 0x68
 800df10:	4654      	mov	r4, sl
 800df12:	2205      	movs	r2, #5
 800df14:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df18:	484e      	ldr	r0, [pc, #312]	@ (800e054 <_svfiprintf_r+0x1e4>)
 800df1a:	f7f2 f981 	bl	8000220 <memchr>
 800df1e:	9a04      	ldr	r2, [sp, #16]
 800df20:	b9d8      	cbnz	r0, 800df5a <_svfiprintf_r+0xea>
 800df22:	06d0      	lsls	r0, r2, #27
 800df24:	bf44      	itt	mi
 800df26:	2320      	movmi	r3, #32
 800df28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800df2c:	0711      	lsls	r1, r2, #28
 800df2e:	bf44      	itt	mi
 800df30:	232b      	movmi	r3, #43	@ 0x2b
 800df32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800df36:	f89a 3000 	ldrb.w	r3, [sl]
 800df3a:	2b2a      	cmp	r3, #42	@ 0x2a
 800df3c:	d015      	beq.n	800df6a <_svfiprintf_r+0xfa>
 800df3e:	9a07      	ldr	r2, [sp, #28]
 800df40:	4654      	mov	r4, sl
 800df42:	2000      	movs	r0, #0
 800df44:	f04f 0c0a 	mov.w	ip, #10
 800df48:	4621      	mov	r1, r4
 800df4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800df4e:	3b30      	subs	r3, #48	@ 0x30
 800df50:	2b09      	cmp	r3, #9
 800df52:	d94b      	bls.n	800dfec <_svfiprintf_r+0x17c>
 800df54:	b1b0      	cbz	r0, 800df84 <_svfiprintf_r+0x114>
 800df56:	9207      	str	r2, [sp, #28]
 800df58:	e014      	b.n	800df84 <_svfiprintf_r+0x114>
 800df5a:	eba0 0308 	sub.w	r3, r0, r8
 800df5e:	fa09 f303 	lsl.w	r3, r9, r3
 800df62:	4313      	orrs	r3, r2
 800df64:	9304      	str	r3, [sp, #16]
 800df66:	46a2      	mov	sl, r4
 800df68:	e7d2      	b.n	800df10 <_svfiprintf_r+0xa0>
 800df6a:	9b03      	ldr	r3, [sp, #12]
 800df6c:	1d19      	adds	r1, r3, #4
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	9103      	str	r1, [sp, #12]
 800df72:	2b00      	cmp	r3, #0
 800df74:	bfbb      	ittet	lt
 800df76:	425b      	neglt	r3, r3
 800df78:	f042 0202 	orrlt.w	r2, r2, #2
 800df7c:	9307      	strge	r3, [sp, #28]
 800df7e:	9307      	strlt	r3, [sp, #28]
 800df80:	bfb8      	it	lt
 800df82:	9204      	strlt	r2, [sp, #16]
 800df84:	7823      	ldrb	r3, [r4, #0]
 800df86:	2b2e      	cmp	r3, #46	@ 0x2e
 800df88:	d10a      	bne.n	800dfa0 <_svfiprintf_r+0x130>
 800df8a:	7863      	ldrb	r3, [r4, #1]
 800df8c:	2b2a      	cmp	r3, #42	@ 0x2a
 800df8e:	d132      	bne.n	800dff6 <_svfiprintf_r+0x186>
 800df90:	9b03      	ldr	r3, [sp, #12]
 800df92:	1d1a      	adds	r2, r3, #4
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	9203      	str	r2, [sp, #12]
 800df98:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800df9c:	3402      	adds	r4, #2
 800df9e:	9305      	str	r3, [sp, #20]
 800dfa0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e064 <_svfiprintf_r+0x1f4>
 800dfa4:	7821      	ldrb	r1, [r4, #0]
 800dfa6:	2203      	movs	r2, #3
 800dfa8:	4650      	mov	r0, sl
 800dfaa:	f7f2 f939 	bl	8000220 <memchr>
 800dfae:	b138      	cbz	r0, 800dfc0 <_svfiprintf_r+0x150>
 800dfb0:	9b04      	ldr	r3, [sp, #16]
 800dfb2:	eba0 000a 	sub.w	r0, r0, sl
 800dfb6:	2240      	movs	r2, #64	@ 0x40
 800dfb8:	4082      	lsls	r2, r0
 800dfba:	4313      	orrs	r3, r2
 800dfbc:	3401      	adds	r4, #1
 800dfbe:	9304      	str	r3, [sp, #16]
 800dfc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dfc4:	4824      	ldr	r0, [pc, #144]	@ (800e058 <_svfiprintf_r+0x1e8>)
 800dfc6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dfca:	2206      	movs	r2, #6
 800dfcc:	f7f2 f928 	bl	8000220 <memchr>
 800dfd0:	2800      	cmp	r0, #0
 800dfd2:	d036      	beq.n	800e042 <_svfiprintf_r+0x1d2>
 800dfd4:	4b21      	ldr	r3, [pc, #132]	@ (800e05c <_svfiprintf_r+0x1ec>)
 800dfd6:	bb1b      	cbnz	r3, 800e020 <_svfiprintf_r+0x1b0>
 800dfd8:	9b03      	ldr	r3, [sp, #12]
 800dfda:	3307      	adds	r3, #7
 800dfdc:	f023 0307 	bic.w	r3, r3, #7
 800dfe0:	3308      	adds	r3, #8
 800dfe2:	9303      	str	r3, [sp, #12]
 800dfe4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dfe6:	4433      	add	r3, r6
 800dfe8:	9309      	str	r3, [sp, #36]	@ 0x24
 800dfea:	e76a      	b.n	800dec2 <_svfiprintf_r+0x52>
 800dfec:	fb0c 3202 	mla	r2, ip, r2, r3
 800dff0:	460c      	mov	r4, r1
 800dff2:	2001      	movs	r0, #1
 800dff4:	e7a8      	b.n	800df48 <_svfiprintf_r+0xd8>
 800dff6:	2300      	movs	r3, #0
 800dff8:	3401      	adds	r4, #1
 800dffa:	9305      	str	r3, [sp, #20]
 800dffc:	4619      	mov	r1, r3
 800dffe:	f04f 0c0a 	mov.w	ip, #10
 800e002:	4620      	mov	r0, r4
 800e004:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e008:	3a30      	subs	r2, #48	@ 0x30
 800e00a:	2a09      	cmp	r2, #9
 800e00c:	d903      	bls.n	800e016 <_svfiprintf_r+0x1a6>
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d0c6      	beq.n	800dfa0 <_svfiprintf_r+0x130>
 800e012:	9105      	str	r1, [sp, #20]
 800e014:	e7c4      	b.n	800dfa0 <_svfiprintf_r+0x130>
 800e016:	fb0c 2101 	mla	r1, ip, r1, r2
 800e01a:	4604      	mov	r4, r0
 800e01c:	2301      	movs	r3, #1
 800e01e:	e7f0      	b.n	800e002 <_svfiprintf_r+0x192>
 800e020:	ab03      	add	r3, sp, #12
 800e022:	9300      	str	r3, [sp, #0]
 800e024:	462a      	mov	r2, r5
 800e026:	4b0e      	ldr	r3, [pc, #56]	@ (800e060 <_svfiprintf_r+0x1f0>)
 800e028:	a904      	add	r1, sp, #16
 800e02a:	4638      	mov	r0, r7
 800e02c:	f3af 8000 	nop.w
 800e030:	1c42      	adds	r2, r0, #1
 800e032:	4606      	mov	r6, r0
 800e034:	d1d6      	bne.n	800dfe4 <_svfiprintf_r+0x174>
 800e036:	89ab      	ldrh	r3, [r5, #12]
 800e038:	065b      	lsls	r3, r3, #25
 800e03a:	f53f af2d 	bmi.w	800de98 <_svfiprintf_r+0x28>
 800e03e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e040:	e72c      	b.n	800de9c <_svfiprintf_r+0x2c>
 800e042:	ab03      	add	r3, sp, #12
 800e044:	9300      	str	r3, [sp, #0]
 800e046:	462a      	mov	r2, r5
 800e048:	4b05      	ldr	r3, [pc, #20]	@ (800e060 <_svfiprintf_r+0x1f0>)
 800e04a:	a904      	add	r1, sp, #16
 800e04c:	4638      	mov	r0, r7
 800e04e:	f000 f879 	bl	800e144 <_printf_i>
 800e052:	e7ed      	b.n	800e030 <_svfiprintf_r+0x1c0>
 800e054:	0800e4e0 	.word	0x0800e4e0
 800e058:	0800e4ea 	.word	0x0800e4ea
 800e05c:	00000000 	.word	0x00000000
 800e060:	0800ddb9 	.word	0x0800ddb9
 800e064:	0800e4e6 	.word	0x0800e4e6

0800e068 <_printf_common>:
 800e068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e06c:	4616      	mov	r6, r2
 800e06e:	4698      	mov	r8, r3
 800e070:	688a      	ldr	r2, [r1, #8]
 800e072:	690b      	ldr	r3, [r1, #16]
 800e074:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e078:	4293      	cmp	r3, r2
 800e07a:	bfb8      	it	lt
 800e07c:	4613      	movlt	r3, r2
 800e07e:	6033      	str	r3, [r6, #0]
 800e080:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e084:	4607      	mov	r7, r0
 800e086:	460c      	mov	r4, r1
 800e088:	b10a      	cbz	r2, 800e08e <_printf_common+0x26>
 800e08a:	3301      	adds	r3, #1
 800e08c:	6033      	str	r3, [r6, #0]
 800e08e:	6823      	ldr	r3, [r4, #0]
 800e090:	0699      	lsls	r1, r3, #26
 800e092:	bf42      	ittt	mi
 800e094:	6833      	ldrmi	r3, [r6, #0]
 800e096:	3302      	addmi	r3, #2
 800e098:	6033      	strmi	r3, [r6, #0]
 800e09a:	6825      	ldr	r5, [r4, #0]
 800e09c:	f015 0506 	ands.w	r5, r5, #6
 800e0a0:	d106      	bne.n	800e0b0 <_printf_common+0x48>
 800e0a2:	f104 0a19 	add.w	sl, r4, #25
 800e0a6:	68e3      	ldr	r3, [r4, #12]
 800e0a8:	6832      	ldr	r2, [r6, #0]
 800e0aa:	1a9b      	subs	r3, r3, r2
 800e0ac:	42ab      	cmp	r3, r5
 800e0ae:	dc26      	bgt.n	800e0fe <_printf_common+0x96>
 800e0b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e0b4:	6822      	ldr	r2, [r4, #0]
 800e0b6:	3b00      	subs	r3, #0
 800e0b8:	bf18      	it	ne
 800e0ba:	2301      	movne	r3, #1
 800e0bc:	0692      	lsls	r2, r2, #26
 800e0be:	d42b      	bmi.n	800e118 <_printf_common+0xb0>
 800e0c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e0c4:	4641      	mov	r1, r8
 800e0c6:	4638      	mov	r0, r7
 800e0c8:	47c8      	blx	r9
 800e0ca:	3001      	adds	r0, #1
 800e0cc:	d01e      	beq.n	800e10c <_printf_common+0xa4>
 800e0ce:	6823      	ldr	r3, [r4, #0]
 800e0d0:	6922      	ldr	r2, [r4, #16]
 800e0d2:	f003 0306 	and.w	r3, r3, #6
 800e0d6:	2b04      	cmp	r3, #4
 800e0d8:	bf02      	ittt	eq
 800e0da:	68e5      	ldreq	r5, [r4, #12]
 800e0dc:	6833      	ldreq	r3, [r6, #0]
 800e0de:	1aed      	subeq	r5, r5, r3
 800e0e0:	68a3      	ldr	r3, [r4, #8]
 800e0e2:	bf0c      	ite	eq
 800e0e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e0e8:	2500      	movne	r5, #0
 800e0ea:	4293      	cmp	r3, r2
 800e0ec:	bfc4      	itt	gt
 800e0ee:	1a9b      	subgt	r3, r3, r2
 800e0f0:	18ed      	addgt	r5, r5, r3
 800e0f2:	2600      	movs	r6, #0
 800e0f4:	341a      	adds	r4, #26
 800e0f6:	42b5      	cmp	r5, r6
 800e0f8:	d11a      	bne.n	800e130 <_printf_common+0xc8>
 800e0fa:	2000      	movs	r0, #0
 800e0fc:	e008      	b.n	800e110 <_printf_common+0xa8>
 800e0fe:	2301      	movs	r3, #1
 800e100:	4652      	mov	r2, sl
 800e102:	4641      	mov	r1, r8
 800e104:	4638      	mov	r0, r7
 800e106:	47c8      	blx	r9
 800e108:	3001      	adds	r0, #1
 800e10a:	d103      	bne.n	800e114 <_printf_common+0xac>
 800e10c:	f04f 30ff 	mov.w	r0, #4294967295
 800e110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e114:	3501      	adds	r5, #1
 800e116:	e7c6      	b.n	800e0a6 <_printf_common+0x3e>
 800e118:	18e1      	adds	r1, r4, r3
 800e11a:	1c5a      	adds	r2, r3, #1
 800e11c:	2030      	movs	r0, #48	@ 0x30
 800e11e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e122:	4422      	add	r2, r4
 800e124:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e128:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e12c:	3302      	adds	r3, #2
 800e12e:	e7c7      	b.n	800e0c0 <_printf_common+0x58>
 800e130:	2301      	movs	r3, #1
 800e132:	4622      	mov	r2, r4
 800e134:	4641      	mov	r1, r8
 800e136:	4638      	mov	r0, r7
 800e138:	47c8      	blx	r9
 800e13a:	3001      	adds	r0, #1
 800e13c:	d0e6      	beq.n	800e10c <_printf_common+0xa4>
 800e13e:	3601      	adds	r6, #1
 800e140:	e7d9      	b.n	800e0f6 <_printf_common+0x8e>
	...

0800e144 <_printf_i>:
 800e144:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e148:	7e0f      	ldrb	r7, [r1, #24]
 800e14a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e14c:	2f78      	cmp	r7, #120	@ 0x78
 800e14e:	4691      	mov	r9, r2
 800e150:	4680      	mov	r8, r0
 800e152:	460c      	mov	r4, r1
 800e154:	469a      	mov	sl, r3
 800e156:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e15a:	d807      	bhi.n	800e16c <_printf_i+0x28>
 800e15c:	2f62      	cmp	r7, #98	@ 0x62
 800e15e:	d80a      	bhi.n	800e176 <_printf_i+0x32>
 800e160:	2f00      	cmp	r7, #0
 800e162:	f000 80d2 	beq.w	800e30a <_printf_i+0x1c6>
 800e166:	2f58      	cmp	r7, #88	@ 0x58
 800e168:	f000 80b9 	beq.w	800e2de <_printf_i+0x19a>
 800e16c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e170:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e174:	e03a      	b.n	800e1ec <_printf_i+0xa8>
 800e176:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e17a:	2b15      	cmp	r3, #21
 800e17c:	d8f6      	bhi.n	800e16c <_printf_i+0x28>
 800e17e:	a101      	add	r1, pc, #4	@ (adr r1, 800e184 <_printf_i+0x40>)
 800e180:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e184:	0800e1dd 	.word	0x0800e1dd
 800e188:	0800e1f1 	.word	0x0800e1f1
 800e18c:	0800e16d 	.word	0x0800e16d
 800e190:	0800e16d 	.word	0x0800e16d
 800e194:	0800e16d 	.word	0x0800e16d
 800e198:	0800e16d 	.word	0x0800e16d
 800e19c:	0800e1f1 	.word	0x0800e1f1
 800e1a0:	0800e16d 	.word	0x0800e16d
 800e1a4:	0800e16d 	.word	0x0800e16d
 800e1a8:	0800e16d 	.word	0x0800e16d
 800e1ac:	0800e16d 	.word	0x0800e16d
 800e1b0:	0800e2f1 	.word	0x0800e2f1
 800e1b4:	0800e21b 	.word	0x0800e21b
 800e1b8:	0800e2ab 	.word	0x0800e2ab
 800e1bc:	0800e16d 	.word	0x0800e16d
 800e1c0:	0800e16d 	.word	0x0800e16d
 800e1c4:	0800e313 	.word	0x0800e313
 800e1c8:	0800e16d 	.word	0x0800e16d
 800e1cc:	0800e21b 	.word	0x0800e21b
 800e1d0:	0800e16d 	.word	0x0800e16d
 800e1d4:	0800e16d 	.word	0x0800e16d
 800e1d8:	0800e2b3 	.word	0x0800e2b3
 800e1dc:	6833      	ldr	r3, [r6, #0]
 800e1de:	1d1a      	adds	r2, r3, #4
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	6032      	str	r2, [r6, #0]
 800e1e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e1e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e1ec:	2301      	movs	r3, #1
 800e1ee:	e09d      	b.n	800e32c <_printf_i+0x1e8>
 800e1f0:	6833      	ldr	r3, [r6, #0]
 800e1f2:	6820      	ldr	r0, [r4, #0]
 800e1f4:	1d19      	adds	r1, r3, #4
 800e1f6:	6031      	str	r1, [r6, #0]
 800e1f8:	0606      	lsls	r6, r0, #24
 800e1fa:	d501      	bpl.n	800e200 <_printf_i+0xbc>
 800e1fc:	681d      	ldr	r5, [r3, #0]
 800e1fe:	e003      	b.n	800e208 <_printf_i+0xc4>
 800e200:	0645      	lsls	r5, r0, #25
 800e202:	d5fb      	bpl.n	800e1fc <_printf_i+0xb8>
 800e204:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e208:	2d00      	cmp	r5, #0
 800e20a:	da03      	bge.n	800e214 <_printf_i+0xd0>
 800e20c:	232d      	movs	r3, #45	@ 0x2d
 800e20e:	426d      	negs	r5, r5
 800e210:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e214:	4859      	ldr	r0, [pc, #356]	@ (800e37c <_printf_i+0x238>)
 800e216:	230a      	movs	r3, #10
 800e218:	e011      	b.n	800e23e <_printf_i+0xfa>
 800e21a:	6821      	ldr	r1, [r4, #0]
 800e21c:	6833      	ldr	r3, [r6, #0]
 800e21e:	0608      	lsls	r0, r1, #24
 800e220:	f853 5b04 	ldr.w	r5, [r3], #4
 800e224:	d402      	bmi.n	800e22c <_printf_i+0xe8>
 800e226:	0649      	lsls	r1, r1, #25
 800e228:	bf48      	it	mi
 800e22a:	b2ad      	uxthmi	r5, r5
 800e22c:	2f6f      	cmp	r7, #111	@ 0x6f
 800e22e:	4853      	ldr	r0, [pc, #332]	@ (800e37c <_printf_i+0x238>)
 800e230:	6033      	str	r3, [r6, #0]
 800e232:	bf14      	ite	ne
 800e234:	230a      	movne	r3, #10
 800e236:	2308      	moveq	r3, #8
 800e238:	2100      	movs	r1, #0
 800e23a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e23e:	6866      	ldr	r6, [r4, #4]
 800e240:	60a6      	str	r6, [r4, #8]
 800e242:	2e00      	cmp	r6, #0
 800e244:	bfa2      	ittt	ge
 800e246:	6821      	ldrge	r1, [r4, #0]
 800e248:	f021 0104 	bicge.w	r1, r1, #4
 800e24c:	6021      	strge	r1, [r4, #0]
 800e24e:	b90d      	cbnz	r5, 800e254 <_printf_i+0x110>
 800e250:	2e00      	cmp	r6, #0
 800e252:	d04b      	beq.n	800e2ec <_printf_i+0x1a8>
 800e254:	4616      	mov	r6, r2
 800e256:	fbb5 f1f3 	udiv	r1, r5, r3
 800e25a:	fb03 5711 	mls	r7, r3, r1, r5
 800e25e:	5dc7      	ldrb	r7, [r0, r7]
 800e260:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e264:	462f      	mov	r7, r5
 800e266:	42bb      	cmp	r3, r7
 800e268:	460d      	mov	r5, r1
 800e26a:	d9f4      	bls.n	800e256 <_printf_i+0x112>
 800e26c:	2b08      	cmp	r3, #8
 800e26e:	d10b      	bne.n	800e288 <_printf_i+0x144>
 800e270:	6823      	ldr	r3, [r4, #0]
 800e272:	07df      	lsls	r7, r3, #31
 800e274:	d508      	bpl.n	800e288 <_printf_i+0x144>
 800e276:	6923      	ldr	r3, [r4, #16]
 800e278:	6861      	ldr	r1, [r4, #4]
 800e27a:	4299      	cmp	r1, r3
 800e27c:	bfde      	ittt	le
 800e27e:	2330      	movle	r3, #48	@ 0x30
 800e280:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e284:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e288:	1b92      	subs	r2, r2, r6
 800e28a:	6122      	str	r2, [r4, #16]
 800e28c:	f8cd a000 	str.w	sl, [sp]
 800e290:	464b      	mov	r3, r9
 800e292:	aa03      	add	r2, sp, #12
 800e294:	4621      	mov	r1, r4
 800e296:	4640      	mov	r0, r8
 800e298:	f7ff fee6 	bl	800e068 <_printf_common>
 800e29c:	3001      	adds	r0, #1
 800e29e:	d14a      	bne.n	800e336 <_printf_i+0x1f2>
 800e2a0:	f04f 30ff 	mov.w	r0, #4294967295
 800e2a4:	b004      	add	sp, #16
 800e2a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2aa:	6823      	ldr	r3, [r4, #0]
 800e2ac:	f043 0320 	orr.w	r3, r3, #32
 800e2b0:	6023      	str	r3, [r4, #0]
 800e2b2:	4833      	ldr	r0, [pc, #204]	@ (800e380 <_printf_i+0x23c>)
 800e2b4:	2778      	movs	r7, #120	@ 0x78
 800e2b6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e2ba:	6823      	ldr	r3, [r4, #0]
 800e2bc:	6831      	ldr	r1, [r6, #0]
 800e2be:	061f      	lsls	r7, r3, #24
 800e2c0:	f851 5b04 	ldr.w	r5, [r1], #4
 800e2c4:	d402      	bmi.n	800e2cc <_printf_i+0x188>
 800e2c6:	065f      	lsls	r7, r3, #25
 800e2c8:	bf48      	it	mi
 800e2ca:	b2ad      	uxthmi	r5, r5
 800e2cc:	6031      	str	r1, [r6, #0]
 800e2ce:	07d9      	lsls	r1, r3, #31
 800e2d0:	bf44      	itt	mi
 800e2d2:	f043 0320 	orrmi.w	r3, r3, #32
 800e2d6:	6023      	strmi	r3, [r4, #0]
 800e2d8:	b11d      	cbz	r5, 800e2e2 <_printf_i+0x19e>
 800e2da:	2310      	movs	r3, #16
 800e2dc:	e7ac      	b.n	800e238 <_printf_i+0xf4>
 800e2de:	4827      	ldr	r0, [pc, #156]	@ (800e37c <_printf_i+0x238>)
 800e2e0:	e7e9      	b.n	800e2b6 <_printf_i+0x172>
 800e2e2:	6823      	ldr	r3, [r4, #0]
 800e2e4:	f023 0320 	bic.w	r3, r3, #32
 800e2e8:	6023      	str	r3, [r4, #0]
 800e2ea:	e7f6      	b.n	800e2da <_printf_i+0x196>
 800e2ec:	4616      	mov	r6, r2
 800e2ee:	e7bd      	b.n	800e26c <_printf_i+0x128>
 800e2f0:	6833      	ldr	r3, [r6, #0]
 800e2f2:	6825      	ldr	r5, [r4, #0]
 800e2f4:	6961      	ldr	r1, [r4, #20]
 800e2f6:	1d18      	adds	r0, r3, #4
 800e2f8:	6030      	str	r0, [r6, #0]
 800e2fa:	062e      	lsls	r6, r5, #24
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	d501      	bpl.n	800e304 <_printf_i+0x1c0>
 800e300:	6019      	str	r1, [r3, #0]
 800e302:	e002      	b.n	800e30a <_printf_i+0x1c6>
 800e304:	0668      	lsls	r0, r5, #25
 800e306:	d5fb      	bpl.n	800e300 <_printf_i+0x1bc>
 800e308:	8019      	strh	r1, [r3, #0]
 800e30a:	2300      	movs	r3, #0
 800e30c:	6123      	str	r3, [r4, #16]
 800e30e:	4616      	mov	r6, r2
 800e310:	e7bc      	b.n	800e28c <_printf_i+0x148>
 800e312:	6833      	ldr	r3, [r6, #0]
 800e314:	1d1a      	adds	r2, r3, #4
 800e316:	6032      	str	r2, [r6, #0]
 800e318:	681e      	ldr	r6, [r3, #0]
 800e31a:	6862      	ldr	r2, [r4, #4]
 800e31c:	2100      	movs	r1, #0
 800e31e:	4630      	mov	r0, r6
 800e320:	f7f1 ff7e 	bl	8000220 <memchr>
 800e324:	b108      	cbz	r0, 800e32a <_printf_i+0x1e6>
 800e326:	1b80      	subs	r0, r0, r6
 800e328:	6060      	str	r0, [r4, #4]
 800e32a:	6863      	ldr	r3, [r4, #4]
 800e32c:	6123      	str	r3, [r4, #16]
 800e32e:	2300      	movs	r3, #0
 800e330:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e334:	e7aa      	b.n	800e28c <_printf_i+0x148>
 800e336:	6923      	ldr	r3, [r4, #16]
 800e338:	4632      	mov	r2, r6
 800e33a:	4649      	mov	r1, r9
 800e33c:	4640      	mov	r0, r8
 800e33e:	47d0      	blx	sl
 800e340:	3001      	adds	r0, #1
 800e342:	d0ad      	beq.n	800e2a0 <_printf_i+0x15c>
 800e344:	6823      	ldr	r3, [r4, #0]
 800e346:	079b      	lsls	r3, r3, #30
 800e348:	d413      	bmi.n	800e372 <_printf_i+0x22e>
 800e34a:	68e0      	ldr	r0, [r4, #12]
 800e34c:	9b03      	ldr	r3, [sp, #12]
 800e34e:	4298      	cmp	r0, r3
 800e350:	bfb8      	it	lt
 800e352:	4618      	movlt	r0, r3
 800e354:	e7a6      	b.n	800e2a4 <_printf_i+0x160>
 800e356:	2301      	movs	r3, #1
 800e358:	4632      	mov	r2, r6
 800e35a:	4649      	mov	r1, r9
 800e35c:	4640      	mov	r0, r8
 800e35e:	47d0      	blx	sl
 800e360:	3001      	adds	r0, #1
 800e362:	d09d      	beq.n	800e2a0 <_printf_i+0x15c>
 800e364:	3501      	adds	r5, #1
 800e366:	68e3      	ldr	r3, [r4, #12]
 800e368:	9903      	ldr	r1, [sp, #12]
 800e36a:	1a5b      	subs	r3, r3, r1
 800e36c:	42ab      	cmp	r3, r5
 800e36e:	dcf2      	bgt.n	800e356 <_printf_i+0x212>
 800e370:	e7eb      	b.n	800e34a <_printf_i+0x206>
 800e372:	2500      	movs	r5, #0
 800e374:	f104 0619 	add.w	r6, r4, #25
 800e378:	e7f5      	b.n	800e366 <_printf_i+0x222>
 800e37a:	bf00      	nop
 800e37c:	0800e4f1 	.word	0x0800e4f1
 800e380:	0800e502 	.word	0x0800e502

0800e384 <memmove>:
 800e384:	4288      	cmp	r0, r1
 800e386:	b510      	push	{r4, lr}
 800e388:	eb01 0402 	add.w	r4, r1, r2
 800e38c:	d902      	bls.n	800e394 <memmove+0x10>
 800e38e:	4284      	cmp	r4, r0
 800e390:	4623      	mov	r3, r4
 800e392:	d807      	bhi.n	800e3a4 <memmove+0x20>
 800e394:	1e43      	subs	r3, r0, #1
 800e396:	42a1      	cmp	r1, r4
 800e398:	d008      	beq.n	800e3ac <memmove+0x28>
 800e39a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e39e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e3a2:	e7f8      	b.n	800e396 <memmove+0x12>
 800e3a4:	4402      	add	r2, r0
 800e3a6:	4601      	mov	r1, r0
 800e3a8:	428a      	cmp	r2, r1
 800e3aa:	d100      	bne.n	800e3ae <memmove+0x2a>
 800e3ac:	bd10      	pop	{r4, pc}
 800e3ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e3b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e3b6:	e7f7      	b.n	800e3a8 <memmove+0x24>

0800e3b8 <_sbrk_r>:
 800e3b8:	b538      	push	{r3, r4, r5, lr}
 800e3ba:	4d06      	ldr	r5, [pc, #24]	@ (800e3d4 <_sbrk_r+0x1c>)
 800e3bc:	2300      	movs	r3, #0
 800e3be:	4604      	mov	r4, r0
 800e3c0:	4608      	mov	r0, r1
 800e3c2:	602b      	str	r3, [r5, #0]
 800e3c4:	f7f3 f8ce 	bl	8001564 <_sbrk>
 800e3c8:	1c43      	adds	r3, r0, #1
 800e3ca:	d102      	bne.n	800e3d2 <_sbrk_r+0x1a>
 800e3cc:	682b      	ldr	r3, [r5, #0]
 800e3ce:	b103      	cbz	r3, 800e3d2 <_sbrk_r+0x1a>
 800e3d0:	6023      	str	r3, [r4, #0]
 800e3d2:	bd38      	pop	{r3, r4, r5, pc}
 800e3d4:	2000653c 	.word	0x2000653c

0800e3d8 <memcpy>:
 800e3d8:	440a      	add	r2, r1
 800e3da:	4291      	cmp	r1, r2
 800e3dc:	f100 33ff 	add.w	r3, r0, #4294967295
 800e3e0:	d100      	bne.n	800e3e4 <memcpy+0xc>
 800e3e2:	4770      	bx	lr
 800e3e4:	b510      	push	{r4, lr}
 800e3e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e3ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e3ee:	4291      	cmp	r1, r2
 800e3f0:	d1f9      	bne.n	800e3e6 <memcpy+0xe>
 800e3f2:	bd10      	pop	{r4, pc}

0800e3f4 <_realloc_r>:
 800e3f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3f8:	4680      	mov	r8, r0
 800e3fa:	4615      	mov	r5, r2
 800e3fc:	460c      	mov	r4, r1
 800e3fe:	b921      	cbnz	r1, 800e40a <_realloc_r+0x16>
 800e400:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e404:	4611      	mov	r1, r2
 800e406:	f7ff bc4b 	b.w	800dca0 <_malloc_r>
 800e40a:	b92a      	cbnz	r2, 800e418 <_realloc_r+0x24>
 800e40c:	f7ff fbdc 	bl	800dbc8 <_free_r>
 800e410:	2400      	movs	r4, #0
 800e412:	4620      	mov	r0, r4
 800e414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e418:	f000 f81a 	bl	800e450 <_malloc_usable_size_r>
 800e41c:	4285      	cmp	r5, r0
 800e41e:	4606      	mov	r6, r0
 800e420:	d802      	bhi.n	800e428 <_realloc_r+0x34>
 800e422:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e426:	d8f4      	bhi.n	800e412 <_realloc_r+0x1e>
 800e428:	4629      	mov	r1, r5
 800e42a:	4640      	mov	r0, r8
 800e42c:	f7ff fc38 	bl	800dca0 <_malloc_r>
 800e430:	4607      	mov	r7, r0
 800e432:	2800      	cmp	r0, #0
 800e434:	d0ec      	beq.n	800e410 <_realloc_r+0x1c>
 800e436:	42b5      	cmp	r5, r6
 800e438:	462a      	mov	r2, r5
 800e43a:	4621      	mov	r1, r4
 800e43c:	bf28      	it	cs
 800e43e:	4632      	movcs	r2, r6
 800e440:	f7ff ffca 	bl	800e3d8 <memcpy>
 800e444:	4621      	mov	r1, r4
 800e446:	4640      	mov	r0, r8
 800e448:	f7ff fbbe 	bl	800dbc8 <_free_r>
 800e44c:	463c      	mov	r4, r7
 800e44e:	e7e0      	b.n	800e412 <_realloc_r+0x1e>

0800e450 <_malloc_usable_size_r>:
 800e450:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e454:	1f18      	subs	r0, r3, #4
 800e456:	2b00      	cmp	r3, #0
 800e458:	bfbc      	itt	lt
 800e45a:	580b      	ldrlt	r3, [r1, r0]
 800e45c:	18c0      	addlt	r0, r0, r3
 800e45e:	4770      	bx	lr

0800e460 <_init>:
 800e460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e462:	bf00      	nop
 800e464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e466:	bc08      	pop	{r3}
 800e468:	469e      	mov	lr, r3
 800e46a:	4770      	bx	lr

0800e46c <_fini>:
 800e46c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e46e:	bf00      	nop
 800e470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e472:	bc08      	pop	{r3}
 800e474:	469e      	mov	lr, r3
 800e476:	4770      	bx	lr
