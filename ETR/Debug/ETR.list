
ETR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fc88  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000478  0800fe68  0800fe68  00010e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080102e0  080102e0  000121d4  2**0
                  CONTENTS
  4 .ARM          00000008  080102e0  080102e0  000112e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080102e8  080102e8  000121d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080102e8  080102e8  000112e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080102ec  080102ec  000112ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080102f0  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004e34  200001d4  080104c4  000121d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005008  080104c4  00013008  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000121d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d309  00000000  00000000  00012204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043e5  00000000  00000000  0002f50d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001958  00000000  00000000  000338f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001351  00000000  00000000  00035250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b4b8  00000000  00000000  000365a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ef27  00000000  00000000  00061a59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00112cd4  00000000  00000000  00080980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00193654  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007128  00000000  00000000  00193698  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  0019a7c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800fe50 	.word	0x0800fe50

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	0800fe50 	.word	0x0800fe50

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002c0:	b5b0      	push	{r4, r5, r7, lr}
 80002c2:	b088      	sub	sp, #32
 80002c4:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002c6:	f001 fe70 	bl	8001faa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002ca:	f000 f8ef 	bl	80004ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ce:	f000 fded 	bl	8000eac <MX_GPIO_Init>
  MX_DMA_Init();
 80002d2:	f000 fda9 	bl	8000e28 <MX_DMA_Init>
  MX_TIM2_Init();
 80002d6:	f000 fbb7 	bl	8000a48 <MX_TIM2_Init>
  MX_TIM4_Init();
 80002da:	f000 fcb7 	bl	8000c4c <MX_TIM4_Init>
  MX_USB_Device_Init();
 80002de:	f00d fed3 	bl	800e088 <MX_USB_Device_Init>
  MX_TIM3_Init();
 80002e2:	f000 fc3d 	bl	8000b60 <MX_TIM3_Init>
  MX_ADC1_Init();
 80002e6:	f000 f92d 	bl	8000544 <MX_ADC1_Init>
  MX_ADC2_Init();
 80002ea:	f000 f9a5 	bl	8000638 <MX_ADC2_Init>
  MX_ADC3_Init();
 80002ee:	f000 fa0b 	bl	8000708 <MX_ADC3_Init>
  MX_OPAMP1_Init();
 80002f2:	f000 fa83 	bl	80007fc <MX_OPAMP1_Init>
  MX_OPAMP3_Init();
 80002f6:	f000 faa7 	bl	8000848 <MX_OPAMP3_Init>
  MX_TIM1_Init();
 80002fa:	f000 facb 	bl	8000894 <MX_TIM1_Init>
  MX_TIM15_Init();
 80002fe:	f000 fcf5 	bl	8000cec <MX_TIM15_Init>





  HAL_OPAMP_Start(&hopamp1);
 8000302:	4858      	ldr	r0, [pc, #352]	@ (8000464 <main+0x1a4>)
 8000304:	f004 fb62 	bl	80049cc <HAL_OPAMP_Start>
  HAL_OPAMP_Start(&hopamp3);
 8000308:	4857      	ldr	r0, [pc, #348]	@ (8000468 <main+0x1a8>)
 800030a:	f004 fb5f 	bl	80049cc <HAL_OPAMP_Start>

  HAL_ADC_Start_DMA(&hadc2, ADC_BUFFER, BUFFER_SIZE);
 800030e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000312:	4956      	ldr	r1, [pc, #344]	@ (800046c <main+0x1ac>)
 8000314:	4856      	ldr	r0, [pc, #344]	@ (8000470 <main+0x1b0>)
 8000316:	f002 fb37 	bl	8002988 <HAL_ADC_Start_DMA>

  HAL_TIM_Base_Start(&htim1);
 800031a:	4856      	ldr	r0, [pc, #344]	@ (8000474 <main+0x1b4>)
 800031c:	f007 f90a 	bl	8007534 <HAL_TIM_Base_Start>

  HAL_TIM_Base_Start(&htim2);
 8000320:	4855      	ldr	r0, [pc, #340]	@ (8000478 <main+0x1b8>)
 8000322:	f007 f907 	bl	8007534 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);
 8000326:	4855      	ldr	r0, [pc, #340]	@ (800047c <main+0x1bc>)
 8000328:	f007 f904 	bl	8007534 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim4);
 800032c:	4854      	ldr	r0, [pc, #336]	@ (8000480 <main+0x1c0>)
 800032e:	f007 f971 	bl	8007614 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000332:	210c      	movs	r1, #12
 8000334:	4850      	ldr	r0, [pc, #320]	@ (8000478 <main+0x1b8>)
 8000336:	f007 fbbb 	bl	8007ab0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800033a:	2108      	movs	r1, #8
 800033c:	484e      	ldr	r0, [pc, #312]	@ (8000478 <main+0x1b8>)
 800033e:	f007 fbb7 	bl	8007ab0 <HAL_TIM_PWM_Start>



  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_1);
 8000342:	2100      	movs	r1, #0
 8000344:	484b      	ldr	r0, [pc, #300]	@ (8000474 <main+0x1b4>)
 8000346:	f007 fa3f 	bl	80077c8 <HAL_TIM_OC_Start>
  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_2);
 800034a:	2104      	movs	r1, #4
 800034c:	4849      	ldr	r0, [pc, #292]	@ (8000474 <main+0x1b4>)
 800034e:	f007 fa3b 	bl	80077c8 <HAL_TIM_OC_Start>
  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_3);
 8000352:	2108      	movs	r1, #8
 8000354:	4847      	ldr	r0, [pc, #284]	@ (8000474 <main+0x1b4>)
 8000356:	f007 fa37 	bl	80077c8 <HAL_TIM_OC_Start>
  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_4);
 800035a:	210c      	movs	r1, #12
 800035c:	4845      	ldr	r0, [pc, #276]	@ (8000474 <main+0x1b4>)
 800035e:	f007 fa33 	bl	80077c8 <HAL_TIM_OC_Start>

  HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_1);
 8000362:	2100      	movs	r1, #0
 8000364:	4847      	ldr	r0, [pc, #284]	@ (8000484 <main+0x1c4>)
 8000366:	f007 ff43 	bl	80081f0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_2);
 800036a:	2104      	movs	r1, #4
 800036c:	4845      	ldr	r0, [pc, #276]	@ (8000484 <main+0x1c4>)
 800036e:	f007 ff3f 	bl	80081f0 <HAL_TIM_IC_Start_IT>

  HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, 1);
 8000372:	2201      	movs	r2, #1
 8000374:	2110      	movs	r1, #16
 8000376:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800037a:	f004 fa1b 	bl	80047b4 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  __HAL_TIM_PRESCALER(&htim1,BOOT0_BTN_COUNT);//when 170Mhz 9 is best
 800037e:	4b3d      	ldr	r3, [pc, #244]	@ (8000474 <main+0x1b4>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	4a41      	ldr	r2, [pc, #260]	@ (8000488 <main+0x1c8>)
 8000384:	6812      	ldr	r2, [r2, #0]
 8000386:	629a      	str	r2, [r3, #40]	@ 0x28

//	  WS2812_BRIGHTNESS=BOOT0_BTN_COUNT;
		if (WHILE_FLAG==2) {
 8000388:	4b40      	ldr	r3, [pc, #256]	@ (800048c <main+0x1cc>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	2b02      	cmp	r3, #2
 800038e:	d1f6      	bne.n	800037e <main+0xbe>

		 ws2812_set_all(rgb_to_color(0x00, 0x00, 0x0f));
 8000390:	220f      	movs	r2, #15
 8000392:	2100      	movs	r1, #0
 8000394:	2000      	movs	r0, #0
 8000396:	f001 fc77 	bl	8001c88 <rgb_to_color>
 800039a:	4603      	mov	r3, r0
 800039c:	4618      	mov	r0, r3
 800039e:	f001 fc57 	bl	8001c50 <ws2812_set_all>
		 ws2812_gradient(100, 10);
 80003a2:	210a      	movs	r1, #10
 80003a4:	2064      	movs	r0, #100	@ 0x64
 80003a6:	f001 fb43 	bl	8001a30 <ws2812_gradient>
		 ws2812_set_all(rgb_to_color(0x00, 0x0f, 0x00));
 80003aa:	2200      	movs	r2, #0
 80003ac:	210f      	movs	r1, #15
 80003ae:	2000      	movs	r0, #0
 80003b0:	f001 fc6a 	bl	8001c88 <rgb_to_color>
 80003b4:	4603      	mov	r3, r0
 80003b6:	4618      	mov	r0, r3
 80003b8:	f001 fc4a 	bl	8001c50 <ws2812_set_all>
		 ws2812_gradient(100, 10);
 80003bc:	210a      	movs	r1, #10
 80003be:	2064      	movs	r0, #100	@ 0x64
 80003c0:	f001 fb36 	bl	8001a30 <ws2812_gradient>
		 ws2812_set_all(rgb_to_color(0x0f, 0x00, 0x00));
 80003c4:	2200      	movs	r2, #0
 80003c6:	2100      	movs	r1, #0
 80003c8:	200f      	movs	r0, #15
 80003ca:	f001 fc5d 	bl	8001c88 <rgb_to_color>
 80003ce:	4603      	mov	r3, r0
 80003d0:	4618      	mov	r0, r3
 80003d2:	f001 fc3d 	bl	8001c50 <ws2812_set_all>
		 ws2812_gradient(100, 10);
 80003d6:	210a      	movs	r1, #10
 80003d8:	2064      	movs	r0, #100	@ 0x64
 80003da:	f001 fb29 	bl	8001a30 <ws2812_gradient>


//	  sprintf(CDC_BUFFER,"-----WHILE-----      \r\n");
//	  CDC_Transmit_FS(CDC_BUFFER, 50);

			rainbow_effect(255, 10);
 80003de:	210a      	movs	r1, #10
 80003e0:	20ff      	movs	r0, #255	@ 0xff
 80003e2:	f001 fd79 	bl	8001ed8 <rainbow_effect>

		for (int i = 0; i < BUFFER_SIZE; ++i) {
 80003e6:	2300      	movs	r3, #0
 80003e8:	607b      	str	r3, [r7, #4]
 80003ea:	e02f      	b.n	800044c <main+0x18c>


		ws2812_set_all(rgb_to_color(255-uwDutyCycle, uwDutyCycle, 0x00));
 80003ec:	4b28      	ldr	r3, [pc, #160]	@ (8000490 <main+0x1d0>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 80003f4:	4a26      	ldr	r2, [pc, #152]	@ (8000490 <main+0x1d0>)
 80003f6:	6811      	ldr	r1, [r2, #0]
 80003f8:	2200      	movs	r2, #0
 80003fa:	4618      	mov	r0, r3
 80003fc:	f001 fc44 	bl	8001c88 <rgb_to_color>
 8000400:	4603      	mov	r3, r0
 8000402:	4618      	mov	r0, r3
 8000404:	f001 fc24 	bl	8001c50 <ws2812_set_all>
		ws2812_update();
 8000408:	f001 fa8e 	bl	8001928 <ws2812_update>
		  sprintf(CDC_BUFFER,"Val:%d,%d,%d,%d,%d,%d,%d\r\n",WHILE_BUFFER[i],i,USER_CounterTicks,uwDutyCycle,uwFrequency,uwIC2Value,BOOT0_BTN_COUNT);
 800040c:	4a21      	ldr	r2, [pc, #132]	@ (8000494 <main+0x1d4>)
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8000414:	4b20      	ldr	r3, [pc, #128]	@ (8000498 <main+0x1d8>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4a1d      	ldr	r2, [pc, #116]	@ (8000490 <main+0x1d0>)
 800041a:	6812      	ldr	r2, [r2, #0]
 800041c:	491f      	ldr	r1, [pc, #124]	@ (800049c <main+0x1dc>)
 800041e:	6809      	ldr	r1, [r1, #0]
 8000420:	481f      	ldr	r0, [pc, #124]	@ (80004a0 <main+0x1e0>)
 8000422:	6800      	ldr	r0, [r0, #0]
 8000424:	4c18      	ldr	r4, [pc, #96]	@ (8000488 <main+0x1c8>)
 8000426:	6824      	ldr	r4, [r4, #0]
 8000428:	9404      	str	r4, [sp, #16]
 800042a:	9003      	str	r0, [sp, #12]
 800042c:	9102      	str	r1, [sp, #8]
 800042e:	9201      	str	r2, [sp, #4]
 8000430:	9300      	str	r3, [sp, #0]
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	462a      	mov	r2, r5
 8000436:	491b      	ldr	r1, [pc, #108]	@ (80004a4 <main+0x1e4>)
 8000438:	481b      	ldr	r0, [pc, #108]	@ (80004a8 <main+0x1e8>)
 800043a:	f00e fb2f 	bl	800ea9c <siprintf>
		  CDC_Transmit_FS(CDC_BUFFER, CDC_BUFFER_SIZE);
 800043e:	2132      	movs	r1, #50	@ 0x32
 8000440:	4819      	ldr	r0, [pc, #100]	@ (80004a8 <main+0x1e8>)
 8000442:	f00d fedf 	bl	800e204 <CDC_Transmit_FS>
		for (int i = 0; i < BUFFER_SIZE; ++i) {
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	3301      	adds	r3, #1
 800044a:	607b      	str	r3, [r7, #4]
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000452:	dbcb      	blt.n	80003ec <main+0x12c>



		}

		HAL_Delay(10);
 8000454:	200a      	movs	r0, #10
 8000456:	f001 fe19 	bl	800208c <HAL_Delay>
		  WHILE_FLAG=0;
 800045a:	4b0c      	ldr	r3, [pc, #48]	@ (800048c <main+0x1cc>)
 800045c:	2200      	movs	r2, #0
 800045e:	601a      	str	r2, [r3, #0]
	  __HAL_TIM_PRESCALER(&htim1,BOOT0_BTN_COUNT);//when 170Mhz 9 is best
 8000460:	e78d      	b.n	800037e <main+0xbe>
 8000462:	bf00      	nop
 8000464:	20000454 	.word	0x20000454
 8000468:	20000490 	.word	0x20000490
 800046c:	200006b8 	.word	0x200006b8
 8000470:	2000025c 	.word	0x2000025c
 8000474:	200004cc 	.word	0x200004cc
 8000478:	20000518 	.word	0x20000518
 800047c:	20000564 	.word	0x20000564
 8000480:	200005b0 	.word	0x200005b0
 8000484:	200005fc 	.word	0x200005fc
 8000488:	20002630 	.word	0x20002630
 800048c:	2000262c 	.word	0x2000262c
 8000490:	200006ac 	.word	0x200006ac
 8000494:	20001658 	.word	0x20001658
 8000498:	200006b4 	.word	0x200006b4
 800049c:	200006b0 	.word	0x200006b0
 80004a0:	200006a8 	.word	0x200006a8
 80004a4:	0800fe68 	.word	0x0800fe68
 80004a8:	200025f8 	.word	0x200025f8

080004ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b094      	sub	sp, #80	@ 0x50
 80004b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004b2:	f107 0318 	add.w	r3, r7, #24
 80004b6:	2238      	movs	r2, #56	@ 0x38
 80004b8:	2100      	movs	r1, #0
 80004ba:	4618      	mov	r0, r3
 80004bc:	f00e fb0e 	bl	800eadc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004c0:	1d3b      	adds	r3, r7, #4
 80004c2:	2200      	movs	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
 80004c6:	605a      	str	r2, [r3, #4]
 80004c8:	609a      	str	r2, [r3, #8]
 80004ca:	60da      	str	r2, [r3, #12]
 80004cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80004ce:	2000      	movs	r0, #0
 80004d0:	f005 ffe0 	bl	8006494 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80004d4:	2321      	movs	r3, #33	@ 0x21
 80004d6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80004dc:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80004de:	2301      	movs	r3, #1
 80004e0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004e2:	2302      	movs	r3, #2
 80004e4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004e6:	2303      	movs	r3, #3
 80004e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80004ea:	2302      	movs	r3, #2
 80004ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80004ee:	2355      	movs	r3, #85	@ 0x55
 80004f0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80004f2:	2302      	movs	r3, #2
 80004f4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80004f6:	2302      	movs	r3, #2
 80004f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80004fa:	2302      	movs	r3, #2
 80004fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004fe:	f107 0318 	add.w	r3, r7, #24
 8000502:	4618      	mov	r0, r3
 8000504:	f006 f87a 	bl	80065fc <HAL_RCC_OscConfig>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800050e:	f000 fdd5 	bl	80010bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000512:	230f      	movs	r3, #15
 8000514:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000516:	2303      	movs	r3, #3
 8000518:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800051a:	2300      	movs	r3, #0
 800051c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800051e:	2300      	movs	r3, #0
 8000520:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000522:	2300      	movs	r3, #0
 8000524:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000526:	1d3b      	adds	r3, r7, #4
 8000528:	2104      	movs	r1, #4
 800052a:	4618      	mov	r0, r3
 800052c:	f006 fb78 	bl	8006c20 <HAL_RCC_ClockConfig>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000536:	f000 fdc1 	bl	80010bc <Error_Handler>
  }
}
 800053a:	bf00      	nop
 800053c:	3750      	adds	r7, #80	@ 0x50
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
	...

08000544 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b08c      	sub	sp, #48	@ 0x30
 8000548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800054a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	605a      	str	r2, [r3, #4]
 8000554:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000556:	1d3b      	adds	r3, r7, #4
 8000558:	2220      	movs	r2, #32
 800055a:	2100      	movs	r1, #0
 800055c:	4618      	mov	r0, r3
 800055e:	f00e fabd 	bl	800eadc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000562:	4b33      	ldr	r3, [pc, #204]	@ (8000630 <MX_ADC1_Init+0xec>)
 8000564:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000568:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800056a:	4b31      	ldr	r3, [pc, #196]	@ (8000630 <MX_ADC1_Init+0xec>)
 800056c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000570:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000572:	4b2f      	ldr	r3, [pc, #188]	@ (8000630 <MX_ADC1_Init+0xec>)
 8000574:	2200      	movs	r2, #0
 8000576:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000578:	4b2d      	ldr	r3, [pc, #180]	@ (8000630 <MX_ADC1_Init+0xec>)
 800057a:	2200      	movs	r2, #0
 800057c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800057e:	4b2c      	ldr	r3, [pc, #176]	@ (8000630 <MX_ADC1_Init+0xec>)
 8000580:	2200      	movs	r2, #0
 8000582:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000584:	4b2a      	ldr	r3, [pc, #168]	@ (8000630 <MX_ADC1_Init+0xec>)
 8000586:	2200      	movs	r2, #0
 8000588:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800058a:	4b29      	ldr	r3, [pc, #164]	@ (8000630 <MX_ADC1_Init+0xec>)
 800058c:	2204      	movs	r2, #4
 800058e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000590:	4b27      	ldr	r3, [pc, #156]	@ (8000630 <MX_ADC1_Init+0xec>)
 8000592:	2200      	movs	r2, #0
 8000594:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000596:	4b26      	ldr	r3, [pc, #152]	@ (8000630 <MX_ADC1_Init+0xec>)
 8000598:	2200      	movs	r2, #0
 800059a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800059c:	4b24      	ldr	r3, [pc, #144]	@ (8000630 <MX_ADC1_Init+0xec>)
 800059e:	2201      	movs	r2, #1
 80005a0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005a2:	4b23      	ldr	r3, [pc, #140]	@ (8000630 <MX_ADC1_Init+0xec>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_CC1;
 80005aa:	4b21      	ldr	r3, [pc, #132]	@ (8000630 <MX_ADC1_Init+0xec>)
 80005ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80005b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80005b2:	4b1f      	ldr	r3, [pc, #124]	@ (8000630 <MX_ADC1_Init+0xec>)
 80005b4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80005b8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005ba:	4b1d      	ldr	r3, [pc, #116]	@ (8000630 <MX_ADC1_Init+0xec>)
 80005bc:	2201      	movs	r2, #1
 80005be:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005c2:	4b1b      	ldr	r3, [pc, #108]	@ (8000630 <MX_ADC1_Init+0xec>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80005c8:	4b19      	ldr	r3, [pc, #100]	@ (8000630 <MX_ADC1_Init+0xec>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005d0:	4817      	ldr	r0, [pc, #92]	@ (8000630 <MX_ADC1_Init+0xec>)
 80005d2:	f002 f81d 	bl	8002610 <HAL_ADC_Init>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80005dc:	f000 fd6e 	bl	80010bc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005e0:	2300      	movs	r3, #0
 80005e2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005e8:	4619      	mov	r1, r3
 80005ea:	4811      	ldr	r0, [pc, #68]	@ (8000630 <MX_ADC1_Init+0xec>)
 80005ec:	f003 fad6 	bl	8003b9c <HAL_ADCEx_MultiModeConfigChannel>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80005f6:	f000 fd61 	bl	80010bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP1;
 80005fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000634 <MX_ADC1_Init+0xf0>)
 80005fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005fe:	2306      	movs	r3, #6
 8000600:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000602:	2300      	movs	r3, #0
 8000604:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000606:	237f      	movs	r3, #127	@ 0x7f
 8000608:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800060a:	2304      	movs	r3, #4
 800060c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800060e:	2300      	movs	r3, #0
 8000610:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000612:	1d3b      	adds	r3, r7, #4
 8000614:	4619      	mov	r1, r3
 8000616:	4806      	ldr	r0, [pc, #24]	@ (8000630 <MX_ADC1_Init+0xec>)
 8000618:	f002 fcfe 	bl	8003018 <HAL_ADC_ConfigChannel>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000622:	f000 fd4b 	bl	80010bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000626:	bf00      	nop
 8000628:	3730      	adds	r7, #48	@ 0x30
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	200001f0 	.word	0x200001f0
 8000634:	b6902000 	.word	0xb6902000

08000638 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b088      	sub	sp, #32
 800063c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800063e:	463b      	mov	r3, r7
 8000640:	2220      	movs	r2, #32
 8000642:	2100      	movs	r1, #0
 8000644:	4618      	mov	r0, r3
 8000646:	f00e fa49 	bl	800eadc <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800064a:	4b2c      	ldr	r3, [pc, #176]	@ (80006fc <MX_ADC2_Init+0xc4>)
 800064c:	4a2c      	ldr	r2, [pc, #176]	@ (8000700 <MX_ADC2_Init+0xc8>)
 800064e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000650:	4b2a      	ldr	r3, [pc, #168]	@ (80006fc <MX_ADC2_Init+0xc4>)
 8000652:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000656:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000658:	4b28      	ldr	r3, [pc, #160]	@ (80006fc <MX_ADC2_Init+0xc4>)
 800065a:	2200      	movs	r2, #0
 800065c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800065e:	4b27      	ldr	r3, [pc, #156]	@ (80006fc <MX_ADC2_Init+0xc4>)
 8000660:	2200      	movs	r2, #0
 8000662:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000664:	4b25      	ldr	r3, [pc, #148]	@ (80006fc <MX_ADC2_Init+0xc4>)
 8000666:	2200      	movs	r2, #0
 8000668:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800066a:	4b24      	ldr	r3, [pc, #144]	@ (80006fc <MX_ADC2_Init+0xc4>)
 800066c:	2200      	movs	r2, #0
 800066e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000670:	4b22      	ldr	r3, [pc, #136]	@ (80006fc <MX_ADC2_Init+0xc4>)
 8000672:	2204      	movs	r2, #4
 8000674:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000676:	4b21      	ldr	r3, [pc, #132]	@ (80006fc <MX_ADC2_Init+0xc4>)
 8000678:	2200      	movs	r2, #0
 800067a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800067c:	4b1f      	ldr	r3, [pc, #124]	@ (80006fc <MX_ADC2_Init+0xc4>)
 800067e:	2200      	movs	r2, #0
 8000680:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000682:	4b1e      	ldr	r3, [pc, #120]	@ (80006fc <MX_ADC2_Init+0xc4>)
 8000684:	2201      	movs	r2, #1
 8000686:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000688:	4b1c      	ldr	r3, [pc, #112]	@ (80006fc <MX_ADC2_Init+0xc4>)
 800068a:	2200      	movs	r2, #0
 800068c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_CC2;
 8000690:	4b1a      	ldr	r3, [pc, #104]	@ (80006fc <MX_ADC2_Init+0xc4>)
 8000692:	f44f 6284 	mov.w	r2, #1056	@ 0x420
 8000696:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000698:	4b18      	ldr	r3, [pc, #96]	@ (80006fc <MX_ADC2_Init+0xc4>)
 800069a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800069e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80006a0:	4b16      	ldr	r3, [pc, #88]	@ (80006fc <MX_ADC2_Init+0xc4>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006a8:	4b14      	ldr	r3, [pc, #80]	@ (80006fc <MX_ADC2_Init+0xc4>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80006ae:	4b13      	ldr	r3, [pc, #76]	@ (80006fc <MX_ADC2_Init+0xc4>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80006b6:	4811      	ldr	r0, [pc, #68]	@ (80006fc <MX_ADC2_Init+0xc4>)
 80006b8:	f001 ffaa 	bl	8002610 <HAL_ADC_Init>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80006c2:	f000 fcfb 	bl	80010bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP3_ADC2;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000704 <MX_ADC2_Init+0xcc>)
 80006c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006ca:	2306      	movs	r3, #6
 80006cc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006ce:	2300      	movs	r3, #0
 80006d0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006d2:	237f      	movs	r3, #127	@ 0x7f
 80006d4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006d6:	2304      	movs	r3, #4
 80006d8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80006de:	463b      	mov	r3, r7
 80006e0:	4619      	mov	r1, r3
 80006e2:	4806      	ldr	r0, [pc, #24]	@ (80006fc <MX_ADC2_Init+0xc4>)
 80006e4:	f002 fc98 	bl	8003018 <HAL_ADC_ConfigChannel>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 80006ee:	f000 fce5 	bl	80010bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80006f2:	bf00      	nop
 80006f4:	3720      	adds	r7, #32
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	2000025c 	.word	0x2000025c
 8000700:	50000100 	.word	0x50000100
 8000704:	cb8c0000 	.word	0xcb8c0000

08000708 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b08c      	sub	sp, #48	@ 0x30
 800070c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800070e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	2220      	movs	r2, #32
 800071e:	2100      	movs	r1, #0
 8000720:	4618      	mov	r0, r3
 8000722:	f00e f9db 	bl	800eadc <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000726:	4b32      	ldr	r3, [pc, #200]	@ (80007f0 <MX_ADC3_Init+0xe8>)
 8000728:	4a32      	ldr	r2, [pc, #200]	@ (80007f4 <MX_ADC3_Init+0xec>)
 800072a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800072c:	4b30      	ldr	r3, [pc, #192]	@ (80007f0 <MX_ADC3_Init+0xe8>)
 800072e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000732:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000734:	4b2e      	ldr	r3, [pc, #184]	@ (80007f0 <MX_ADC3_Init+0xe8>)
 8000736:	2200      	movs	r2, #0
 8000738:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800073a:	4b2d      	ldr	r3, [pc, #180]	@ (80007f0 <MX_ADC3_Init+0xe8>)
 800073c:	2200      	movs	r2, #0
 800073e:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8000740:	4b2b      	ldr	r3, [pc, #172]	@ (80007f0 <MX_ADC3_Init+0xe8>)
 8000742:	2200      	movs	r2, #0
 8000744:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000746:	4b2a      	ldr	r3, [pc, #168]	@ (80007f0 <MX_ADC3_Init+0xe8>)
 8000748:	2200      	movs	r2, #0
 800074a:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800074c:	4b28      	ldr	r3, [pc, #160]	@ (80007f0 <MX_ADC3_Init+0xe8>)
 800074e:	2204      	movs	r2, #4
 8000750:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000752:	4b27      	ldr	r3, [pc, #156]	@ (80007f0 <MX_ADC3_Init+0xe8>)
 8000754:	2200      	movs	r2, #0
 8000756:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000758:	4b25      	ldr	r3, [pc, #148]	@ (80007f0 <MX_ADC3_Init+0xe8>)
 800075a:	2200      	movs	r2, #0
 800075c:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 800075e:	4b24      	ldr	r3, [pc, #144]	@ (80007f0 <MX_ADC3_Init+0xe8>)
 8000760:	2201      	movs	r2, #1
 8000762:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000764:	4b22      	ldr	r3, [pc, #136]	@ (80007f0 <MX_ADC3_Init+0xe8>)
 8000766:	2200      	movs	r2, #0
 8000768:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_CC3;
 800076c:	4b20      	ldr	r3, [pc, #128]	@ (80007f0 <MX_ADC3_Init+0xe8>)
 800076e:	f44f 6288 	mov.w	r2, #1088	@ 0x440
 8000772:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000774:	4b1e      	ldr	r3, [pc, #120]	@ (80007f0 <MX_ADC3_Init+0xe8>)
 8000776:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800077a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800077c:	4b1c      	ldr	r3, [pc, #112]	@ (80007f0 <MX_ADC3_Init+0xe8>)
 800077e:	2201      	movs	r2, #1
 8000780:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000784:	4b1a      	ldr	r3, [pc, #104]	@ (80007f0 <MX_ADC3_Init+0xe8>)
 8000786:	2200      	movs	r2, #0
 8000788:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 800078a:	4b19      	ldr	r3, [pc, #100]	@ (80007f0 <MX_ADC3_Init+0xe8>)
 800078c:	2200      	movs	r2, #0
 800078e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000792:	4817      	ldr	r0, [pc, #92]	@ (80007f0 <MX_ADC3_Init+0xe8>)
 8000794:	f001 ff3c 	bl	8002610 <HAL_ADC_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_ADC3_Init+0x9a>
  {
    Error_Handler();
 800079e:	f000 fc8d 	bl	80010bc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007a2:	2300      	movs	r3, #0
 80007a4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80007a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007aa:	4619      	mov	r1, r3
 80007ac:	4810      	ldr	r0, [pc, #64]	@ (80007f0 <MX_ADC3_Init+0xe8>)
 80007ae:	f003 f9f5 	bl	8003b9c <HAL_ADCEx_MultiModeConfigChannel>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 80007b8:	f000 fc80 	bl	80010bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP3_ADC3;
 80007bc:	4b0e      	ldr	r3, [pc, #56]	@ (80007f8 <MX_ADC3_Init+0xf0>)
 80007be:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007c0:	2306      	movs	r3, #6
 80007c2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007c4:	2300      	movs	r3, #0
 80007c6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007c8:	237f      	movs	r3, #127	@ 0x7f
 80007ca:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007cc:	2304      	movs	r3, #4
 80007ce:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80007d4:	1d3b      	adds	r3, r7, #4
 80007d6:	4619      	mov	r1, r3
 80007d8:	4805      	ldr	r0, [pc, #20]	@ (80007f0 <MX_ADC3_Init+0xe8>)
 80007da:	f002 fc1d 	bl	8003018 <HAL_ADC_ConfigChannel>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_ADC3_Init+0xe0>
  {
    Error_Handler();
 80007e4:	f000 fc6a 	bl	80010bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80007e8:	bf00      	nop
 80007ea:	3730      	adds	r7, #48	@ 0x30
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	200002c8 	.word	0x200002c8
 80007f4:	50000400 	.word	0x50000400
 80007f8:	b6982000 	.word	0xb6982000

080007fc <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8000800:	4b0f      	ldr	r3, [pc, #60]	@ (8000840 <MX_OPAMP1_Init+0x44>)
 8000802:	4a10      	ldr	r2, [pc, #64]	@ (8000844 <MX_OPAMP1_Init+0x48>)
 8000804:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 8000806:	4b0e      	ldr	r3, [pc, #56]	@ (8000840 <MX_OPAMP1_Init+0x44>)
 8000808:	2280      	movs	r2, #128	@ 0x80
 800080a:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_FOLLOWER_MODE;
 800080c:	4b0c      	ldr	r3, [pc, #48]	@ (8000840 <MX_OPAMP1_Init+0x44>)
 800080e:	2260      	movs	r2, #96	@ 0x60
 8000810:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8000812:	4b0b      	ldr	r3, [pc, #44]	@ (8000840 <MX_OPAMP1_Init+0x44>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = ENABLE;
 8000818:	4b09      	ldr	r3, [pc, #36]	@ (8000840 <MX_OPAMP1_Init+0x44>)
 800081a:	2201      	movs	r2, #1
 800081c:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800081e:	4b08      	ldr	r3, [pc, #32]	@ (8000840 <MX_OPAMP1_Init+0x44>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000824:	4b06      	ldr	r3, [pc, #24]	@ (8000840 <MX_OPAMP1_Init+0x44>)
 8000826:	2200      	movs	r2, #0
 8000828:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 800082a:	4805      	ldr	r0, [pc, #20]	@ (8000840 <MX_OPAMP1_Init+0x44>)
 800082c:	f003 fffe 	bl	800482c <HAL_OPAMP_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_OPAMP1_Init+0x3e>
  {
    Error_Handler();
 8000836:	f000 fc41 	bl	80010bc <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20000454 	.word	0x20000454
 8000844:	40010300 	.word	0x40010300

08000848 <MX_OPAMP3_Init>:
  * @brief OPAMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP3_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 800084c:	4b0f      	ldr	r3, [pc, #60]	@ (800088c <MX_OPAMP3_Init+0x44>)
 800084e:	4a10      	ldr	r2, [pc, #64]	@ (8000890 <MX_OPAMP3_Init+0x48>)
 8000850:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 8000852:	4b0e      	ldr	r3, [pc, #56]	@ (800088c <MX_OPAMP3_Init+0x44>)
 8000854:	2280      	movs	r2, #128	@ 0x80
 8000856:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_FOLLOWER_MODE;
 8000858:	4b0c      	ldr	r3, [pc, #48]	@ (800088c <MX_OPAMP3_Init+0x44>)
 800085a:	2260      	movs	r2, #96	@ 0x60
 800085c:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 800085e:	4b0b      	ldr	r3, [pc, #44]	@ (800088c <MX_OPAMP3_Init+0x44>)
 8000860:	2208      	movs	r2, #8
 8000862:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = ENABLE;
 8000864:	4b09      	ldr	r3, [pc, #36]	@ (800088c <MX_OPAMP3_Init+0x44>)
 8000866:	2201      	movs	r2, #1
 8000868:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800086a:	4b08      	ldr	r3, [pc, #32]	@ (800088c <MX_OPAMP3_Init+0x44>)
 800086c:	2200      	movs	r2, #0
 800086e:	619a      	str	r2, [r3, #24]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000870:	4b06      	ldr	r3, [pc, #24]	@ (800088c <MX_OPAMP3_Init+0x44>)
 8000872:	2200      	movs	r2, #0
 8000874:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8000876:	4805      	ldr	r0, [pc, #20]	@ (800088c <MX_OPAMP3_Init+0x44>)
 8000878:	f003 ffd8 	bl	800482c <HAL_OPAMP_Init>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_OPAMP3_Init+0x3e>
  {
    Error_Handler();
 8000882:	f000 fc1b 	bl	80010bc <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000490 	.word	0x20000490
 8000890:	40010308 	.word	0x40010308

08000894 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b09c      	sub	sp, #112	@ 0x70
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800089a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]
 80008a4:	609a      	str	r2, [r3, #8]
 80008a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008a8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008b4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
 80008c2:	611a      	str	r2, [r3, #16]
 80008c4:	615a      	str	r2, [r3, #20]
 80008c6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008c8:	1d3b      	adds	r3, r7, #4
 80008ca:	2234      	movs	r2, #52	@ 0x34
 80008cc:	2100      	movs	r1, #0
 80008ce:	4618      	mov	r0, r3
 80008d0:	f00e f904 	bl	800eadc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008d4:	4b5a      	ldr	r3, [pc, #360]	@ (8000a40 <MX_TIM1_Init+0x1ac>)
 80008d6:	4a5b      	ldr	r2, [pc, #364]	@ (8000a44 <MX_TIM1_Init+0x1b0>)
 80008d8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15-1;
 80008da:	4b59      	ldr	r3, [pc, #356]	@ (8000a40 <MX_TIM1_Init+0x1ac>)
 80008dc:	220e      	movs	r2, #14
 80008de:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e0:	4b57      	ldr	r3, [pc, #348]	@ (8000a40 <MX_TIM1_Init+0x1ac>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2;
 80008e6:	4b56      	ldr	r3, [pc, #344]	@ (8000a40 <MX_TIM1_Init+0x1ac>)
 80008e8:	2202      	movs	r2, #2
 80008ea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ec:	4b54      	ldr	r3, [pc, #336]	@ (8000a40 <MX_TIM1_Init+0x1ac>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008f2:	4b53      	ldr	r3, [pc, #332]	@ (8000a40 <MX_TIM1_Init+0x1ac>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f8:	4b51      	ldr	r3, [pc, #324]	@ (8000a40 <MX_TIM1_Init+0x1ac>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008fe:	4850      	ldr	r0, [pc, #320]	@ (8000a40 <MX_TIM1_Init+0x1ac>)
 8000900:	f006 fdc0 	bl	8007484 <HAL_TIM_Base_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800090a:	f000 fbd7 	bl	80010bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800090e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000912:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000914:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000918:	4619      	mov	r1, r3
 800091a:	4849      	ldr	r0, [pc, #292]	@ (8000a40 <MX_TIM1_Init+0x1ac>)
 800091c:	f008 f932 	bl	8008b84 <HAL_TIM_ConfigClockSource>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000926:	f000 fbc9 	bl	80010bc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800092a:	4845      	ldr	r0, [pc, #276]	@ (8000a40 <MX_TIM1_Init+0x1ac>)
 800092c:	f006 feea 	bl	8007704 <HAL_TIM_OC_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000936:	f000 fbc1 	bl	80010bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800093a:	2320      	movs	r3, #32
 800093c:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800093e:	2300      	movs	r3, #0
 8000940:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000942:	2300      	movs	r3, #0
 8000944:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000946:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800094a:	4619      	mov	r1, r3
 800094c:	483c      	ldr	r0, [pc, #240]	@ (8000a40 <MX_TIM1_Init+0x1ac>)
 800094e:	f009 fa6d 	bl	8009e2c <HAL_TIMEx_MasterConfigSynchronization>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000958:	f000 fbb0 	bl	80010bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800095c:	2330      	movs	r3, #48	@ 0x30
 800095e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000960:	2300      	movs	r3, #0
 8000962:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000964:	2300      	movs	r3, #0
 8000966:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000968:	2300      	movs	r3, #0
 800096a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800096c:	2300      	movs	r3, #0
 800096e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000970:	2300      	movs	r3, #0
 8000972:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000974:	2300      	movs	r3, #0
 8000976:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000978:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800097c:	2200      	movs	r2, #0
 800097e:	4619      	mov	r1, r3
 8000980:	482f      	ldr	r0, [pc, #188]	@ (8000a40 <MX_TIM1_Init+0x1ac>)
 8000982:	f007 fed5 	bl	8008730 <HAL_TIM_OC_ConfigChannel>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 800098c:	f000 fb96 	bl	80010bc <Error_Handler>
  }
  sConfigOC.Pulse = 1;
 8000990:	2301      	movs	r3, #1
 8000992:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000994:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000998:	2204      	movs	r2, #4
 800099a:	4619      	mov	r1, r3
 800099c:	4828      	ldr	r0, [pc, #160]	@ (8000a40 <MX_TIM1_Init+0x1ac>)
 800099e:	f007 fec7 	bl	8008730 <HAL_TIM_OC_ConfigChannel>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 80009a8:	f000 fb88 	bl	80010bc <Error_Handler>
  }
  sConfigOC.Pulse = 2;
 80009ac:	2302      	movs	r3, #2
 80009ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80009b0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80009b4:	2208      	movs	r2, #8
 80009b6:	4619      	mov	r1, r3
 80009b8:	4821      	ldr	r0, [pc, #132]	@ (8000a40 <MX_TIM1_Init+0x1ac>)
 80009ba:	f007 feb9 	bl	8008730 <HAL_TIM_OC_ConfigChannel>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_TIM1_Init+0x134>
  {
    Error_Handler();
 80009c4:	f000 fb7a 	bl	80010bc <Error_Handler>
  }
  sConfigOC.Pulse = 3;
 80009c8:	2303      	movs	r3, #3
 80009ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80009cc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80009d0:	220c      	movs	r2, #12
 80009d2:	4619      	mov	r1, r3
 80009d4:	481a      	ldr	r0, [pc, #104]	@ (8000a40 <MX_TIM1_Init+0x1ac>)
 80009d6:	f007 feab 	bl	8008730 <HAL_TIM_OC_ConfigChannel>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 80009e0:	f000 fb6c 	bl	80010bc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009e4:	2300      	movs	r3, #0
 80009e6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009e8:	2300      	movs	r3, #0
 80009ea:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009ec:	2300      	movs	r3, #0
 80009ee:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009f4:	2300      	movs	r3, #0
 80009f6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009fc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000a02:	2300      	movs	r3, #0
 8000a04:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a06:	2300      	movs	r3, #0
 8000a08:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a0a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000a0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000a14:	2300      	movs	r3, #0
 8000a16:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a1c:	1d3b      	adds	r3, r7, #4
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4807      	ldr	r0, [pc, #28]	@ (8000a40 <MX_TIM1_Init+0x1ac>)
 8000a22:	f009 fa99 	bl	8009f58 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_TIM1_Init+0x19c>
  {
    Error_Handler();
 8000a2c:	f000 fb46 	bl	80010bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a30:	4803      	ldr	r0, [pc, #12]	@ (8000a40 <MX_TIM1_Init+0x1ac>)
 8000a32:	f000 fe0f 	bl	8001654 <HAL_TIM_MspPostInit>

}
 8000a36:	bf00      	nop
 8000a38:	3770      	adds	r7, #112	@ 0x70
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	200004cc 	.word	0x200004cc
 8000a44:	40012c00 	.word	0x40012c00

08000a48 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08e      	sub	sp, #56	@ 0x38
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a4e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	609a      	str	r2, [r3, #8]
 8000a5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a5c:	f107 031c 	add.w	r3, r7, #28
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a68:	463b      	mov	r3, r7
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]
 8000a74:	611a      	str	r2, [r3, #16]
 8000a76:	615a      	str	r2, [r3, #20]
 8000a78:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a7a:	4b37      	ldr	r3, [pc, #220]	@ (8000b58 <MX_TIM2_Init+0x110>)
 8000a7c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a80:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a82:	4b35      	ldr	r3, [pc, #212]	@ (8000b58 <MX_TIM2_Init+0x110>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a88:	4b33      	ldr	r3, [pc, #204]	@ (8000b58 <MX_TIM2_Init+0x110>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000a8e:	4b32      	ldr	r3, [pc, #200]	@ (8000b58 <MX_TIM2_Init+0x110>)
 8000a90:	f04f 32ff 	mov.w	r2, #4294967295
 8000a94:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a96:	4b30      	ldr	r3, [pc, #192]	@ (8000b58 <MX_TIM2_Init+0x110>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a9c:	4b2e      	ldr	r3, [pc, #184]	@ (8000b58 <MX_TIM2_Init+0x110>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000aa2:	482d      	ldr	r0, [pc, #180]	@ (8000b58 <MX_TIM2_Init+0x110>)
 8000aa4:	f006 fcee 	bl	8007484 <HAL_TIM_Base_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000aae:	f000 fb05 	bl	80010bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8000ab2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ab6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8000abc:	2300      	movs	r3, #0
 8000abe:	633b      	str	r3, [r7, #48]	@ 0x30
  sClockSourceConfig.ClockFilter = 0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ac4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4823      	ldr	r0, [pc, #140]	@ (8000b58 <MX_TIM2_Init+0x110>)
 8000acc:	f008 f85a 	bl	8008b84 <HAL_TIM_ConfigClockSource>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000ad6:	f000 faf1 	bl	80010bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ada:	481f      	ldr	r0, [pc, #124]	@ (8000b58 <MX_TIM2_Init+0x110>)
 8000adc:	f006 ff86 	bl	80079ec <HAL_TIM_PWM_Init>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8000ae6:	f000 fae9 	bl	80010bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aea:	2300      	movs	r3, #0
 8000aec:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aee:	2300      	movs	r3, #0
 8000af0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000af2:	f107 031c 	add.w	r3, r7, #28
 8000af6:	4619      	mov	r1, r3
 8000af8:	4817      	ldr	r0, [pc, #92]	@ (8000b58 <MX_TIM2_Init+0x110>)
 8000afa:	f009 f997 	bl	8009e2c <HAL_TIMEx_MasterConfigSynchronization>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_TIM2_Init+0xc0>
  {
    Error_Handler();
 8000b04:	f000 fada 	bl	80010bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b08:	2360      	movs	r3, #96	@ 0x60
 8000b0a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 8000b0c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b10:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b12:	2300      	movs	r3, #0
 8000b14:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b16:	2300      	movs	r3, #0
 8000b18:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b1a:	463b      	mov	r3, r7
 8000b1c:	2208      	movs	r2, #8
 8000b1e:	4619      	mov	r1, r3
 8000b20:	480d      	ldr	r0, [pc, #52]	@ (8000b58 <MX_TIM2_Init+0x110>)
 8000b22:	f007 ff1b 	bl	800895c <HAL_TIM_PWM_ConfigChannel>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8000b2c:	f000 fac6 	bl	80010bc <Error_Handler>
  }
  sConfigOC.Pulse = 1000000;
 8000b30:	4b0a      	ldr	r3, [pc, #40]	@ (8000b5c <MX_TIM2_Init+0x114>)
 8000b32:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b34:	463b      	mov	r3, r7
 8000b36:	220c      	movs	r2, #12
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4807      	ldr	r0, [pc, #28]	@ (8000b58 <MX_TIM2_Init+0x110>)
 8000b3c:	f007 ff0e 	bl	800895c <HAL_TIM_PWM_ConfigChannel>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_TIM2_Init+0x102>
  {
    Error_Handler();
 8000b46:	f000 fab9 	bl	80010bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b4a:	4803      	ldr	r0, [pc, #12]	@ (8000b58 <MX_TIM2_Init+0x110>)
 8000b4c:	f000 fd82 	bl	8001654 <HAL_TIM_MspPostInit>

}
 8000b50:	bf00      	nop
 8000b52:	3738      	adds	r7, #56	@ 0x38
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20000518 	.word	0x20000518
 8000b5c:	000f4240 	.word	0x000f4240

08000b60 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08e      	sub	sp, #56	@ 0x38
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b66:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	609a      	str	r2, [r3, #8]
 8000b72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b74:	f107 031c 	add.w	r3, r7, #28
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b80:	463b      	mov	r3, r7
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	605a      	str	r2, [r3, #4]
 8000b88:	609a      	str	r2, [r3, #8]
 8000b8a:	60da      	str	r2, [r3, #12]
 8000b8c:	611a      	str	r2, [r3, #16]
 8000b8e:	615a      	str	r2, [r3, #20]
 8000b90:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b92:	4b2c      	ldr	r3, [pc, #176]	@ (8000c44 <MX_TIM3_Init+0xe4>)
 8000b94:	4a2c      	ldr	r2, [pc, #176]	@ (8000c48 <MX_TIM3_Init+0xe8>)
 8000b96:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000b98:	4b2a      	ldr	r3, [pc, #168]	@ (8000c44 <MX_TIM3_Init+0xe4>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b9e:	4b29      	ldr	r3, [pc, #164]	@ (8000c44 <MX_TIM3_Init+0xe4>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 200;
 8000ba4:	4b27      	ldr	r3, [pc, #156]	@ (8000c44 <MX_TIM3_Init+0xe4>)
 8000ba6:	22c8      	movs	r2, #200	@ 0xc8
 8000ba8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000baa:	4b26      	ldr	r3, [pc, #152]	@ (8000c44 <MX_TIM3_Init+0xe4>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bb0:	4b24      	ldr	r3, [pc, #144]	@ (8000c44 <MX_TIM3_Init+0xe4>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000bb6:	4823      	ldr	r0, [pc, #140]	@ (8000c44 <MX_TIM3_Init+0xe4>)
 8000bb8:	f006 fc64 	bl	8007484 <HAL_TIM_Base_Init>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000bc2:	f000 fa7b 	bl	80010bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bca:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000bcc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	481c      	ldr	r0, [pc, #112]	@ (8000c44 <MX_TIM3_Init+0xe4>)
 8000bd4:	f007 ffd6 	bl	8008b84 <HAL_TIM_ConfigClockSource>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000bde:	f000 fa6d 	bl	80010bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000be2:	4818      	ldr	r0, [pc, #96]	@ (8000c44 <MX_TIM3_Init+0xe4>)
 8000be4:	f006 ff02 	bl	80079ec <HAL_TIM_PWM_Init>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000bee:	f000 fa65 	bl	80010bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bfa:	f107 031c 	add.w	r3, r7, #28
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4810      	ldr	r0, [pc, #64]	@ (8000c44 <MX_TIM3_Init+0xe4>)
 8000c02:	f009 f913 	bl	8009e2c <HAL_TIMEx_MasterConfigSynchronization>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000c0c:	f000 fa56 	bl	80010bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c10:	2360      	movs	r3, #96	@ 0x60
 8000c12:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c14:	2300      	movs	r3, #0
 8000c16:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c20:	463b      	mov	r3, r7
 8000c22:	220c      	movs	r2, #12
 8000c24:	4619      	mov	r1, r3
 8000c26:	4807      	ldr	r0, [pc, #28]	@ (8000c44 <MX_TIM3_Init+0xe4>)
 8000c28:	f007 fe98 	bl	800895c <HAL_TIM_PWM_ConfigChannel>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000c32:	f000 fa43 	bl	80010bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c36:	4803      	ldr	r0, [pc, #12]	@ (8000c44 <MX_TIM3_Init+0xe4>)
 8000c38:	f000 fd0c 	bl	8001654 <HAL_TIM_MspPostInit>

}
 8000c3c:	bf00      	nop
 8000c3e:	3738      	adds	r7, #56	@ 0x38
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	20000564 	.word	0x20000564
 8000c48:	40000400 	.word	0x40000400

08000c4c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b088      	sub	sp, #32
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c52:	f107 0310 	add.w	r3, r7, #16
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	605a      	str	r2, [r3, #4]
 8000c5c:	609a      	str	r2, [r3, #8]
 8000c5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c60:	1d3b      	adds	r3, r7, #4
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]
 8000c68:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c6a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ce4 <MX_TIM4_Init+0x98>)
 8000c6c:	4a1e      	ldr	r2, [pc, #120]	@ (8000ce8 <MX_TIM4_Init+0x9c>)
 8000c6e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 17000-1;
 8000c70:	4b1c      	ldr	r3, [pc, #112]	@ (8000ce4 <MX_TIM4_Init+0x98>)
 8000c72:	f244 2267 	movw	r2, #16999	@ 0x4267
 8000c76:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c78:	4b1a      	ldr	r3, [pc, #104]	@ (8000ce4 <MX_TIM4_Init+0x98>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8000c7e:	4b19      	ldr	r3, [pc, #100]	@ (8000ce4 <MX_TIM4_Init+0x98>)
 8000c80:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000c84:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c86:	4b17      	ldr	r3, [pc, #92]	@ (8000ce4 <MX_TIM4_Init+0x98>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c8c:	4b15      	ldr	r3, [pc, #84]	@ (8000ce4 <MX_TIM4_Init+0x98>)
 8000c8e:	2280      	movs	r2, #128	@ 0x80
 8000c90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000c92:	4814      	ldr	r0, [pc, #80]	@ (8000ce4 <MX_TIM4_Init+0x98>)
 8000c94:	f006 fbf6 	bl	8007484 <HAL_TIM_Base_Init>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8000c9e:	f000 fa0d 	bl	80010bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ca2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ca6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000ca8:	f107 0310 	add.w	r3, r7, #16
 8000cac:	4619      	mov	r1, r3
 8000cae:	480d      	ldr	r0, [pc, #52]	@ (8000ce4 <MX_TIM4_Init+0x98>)
 8000cb0:	f007 ff68 	bl	8008b84 <HAL_TIM_ConfigClockSource>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8000cba:	f000 f9ff 	bl	80010bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000cc6:	1d3b      	adds	r3, r7, #4
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4806      	ldr	r0, [pc, #24]	@ (8000ce4 <MX_TIM4_Init+0x98>)
 8000ccc:	f009 f8ae 	bl	8009e2c <HAL_TIMEx_MasterConfigSynchronization>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8000cd6:	f000 f9f1 	bl	80010bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000cda:	bf00      	nop
 8000cdc:	3720      	adds	r7, #32
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	200005b0 	.word	0x200005b0
 8000ce8:	40000800 	.word	0x40000800

08000cec <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b090      	sub	sp, #64	@ 0x40
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cf2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	605a      	str	r2, [r3, #4]
 8000cfc:	609a      	str	r2, [r3, #8]
 8000cfe:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000d00:	f107 031c 	add.w	r3, r7, #28
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d10:	f107 0310 	add.w	r3, r7, #16
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000d1c:	463b      	mov	r3, r7
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	605a      	str	r2, [r3, #4]
 8000d24:	609a      	str	r2, [r3, #8]
 8000d26:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000d28:	4b3d      	ldr	r3, [pc, #244]	@ (8000e20 <MX_TIM15_Init+0x134>)
 8000d2a:	4a3e      	ldr	r2, [pc, #248]	@ (8000e24 <MX_TIM15_Init+0x138>)
 8000d2c:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000d2e:	4b3c      	ldr	r3, [pc, #240]	@ (8000e20 <MX_TIM15_Init+0x134>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d34:	4b3a      	ldr	r3, [pc, #232]	@ (8000e20 <MX_TIM15_Init+0x134>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000d3a:	4b39      	ldr	r3, [pc, #228]	@ (8000e20 <MX_TIM15_Init+0x134>)
 8000d3c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d40:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d42:	4b37      	ldr	r3, [pc, #220]	@ (8000e20 <MX_TIM15_Init+0x134>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000d48:	4b35      	ldr	r3, [pc, #212]	@ (8000e20 <MX_TIM15_Init+0x134>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d4e:	4b34      	ldr	r3, [pc, #208]	@ (8000e20 <MX_TIM15_Init+0x134>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000d54:	4832      	ldr	r0, [pc, #200]	@ (8000e20 <MX_TIM15_Init+0x134>)
 8000d56:	f006 fb95 	bl	8007484 <HAL_TIM_Base_Init>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8000d60:	f000 f9ac 	bl	80010bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d68:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000d6a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d6e:	4619      	mov	r1, r3
 8000d70:	482b      	ldr	r0, [pc, #172]	@ (8000e20 <MX_TIM15_Init+0x134>)
 8000d72:	f007 ff07 	bl	8008b84 <HAL_TIM_ConfigClockSource>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8000d7c:	f000 f99e 	bl	80010bc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8000d80:	4827      	ldr	r0, [pc, #156]	@ (8000e20 <MX_TIM15_Init+0x134>)
 8000d82:	f007 f9d3 	bl	800812c <HAL_TIM_IC_Init>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_TIM15_Init+0xa4>
  {
    Error_Handler();
 8000d8c:	f000 f996 	bl	80010bc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000d90:	2304      	movs	r3, #4
 8000d92:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000d94:	2350      	movs	r3, #80	@ 0x50
 8000d96:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerFilter = 0;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim15, &sSlaveConfig) != HAL_OK)
 8000da0:	f107 031c 	add.w	r3, r7, #28
 8000da4:	4619      	mov	r1, r3
 8000da6:	481e      	ldr	r0, [pc, #120]	@ (8000e20 <MX_TIM15_Init+0x134>)
 8000da8:	f008 f802 	bl	8008db0 <HAL_TIM_SlaveConfigSynchro>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_TIM15_Init+0xca>
  {
    Error_Handler();
 8000db2:	f000 f983 	bl	80010bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000db6:	2300      	movs	r3, #0
 8000db8:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000dbe:	f107 0310 	add.w	r3, r7, #16
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4816      	ldr	r0, [pc, #88]	@ (8000e20 <MX_TIM15_Init+0x134>)
 8000dc6:	f009 f831 	bl	8009e2c <HAL_TIMEx_MasterConfigSynchronization>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_TIM15_Init+0xe8>
  {
    Error_Handler();
 8000dd0:	f000 f974 	bl	80010bc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000de0:	2300      	movs	r3, #0
 8000de2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000de4:	463b      	mov	r3, r7
 8000de6:	2200      	movs	r2, #0
 8000de8:	4619      	mov	r1, r3
 8000dea:	480d      	ldr	r0, [pc, #52]	@ (8000e20 <MX_TIM15_Init+0x134>)
 8000dec:	f007 fd1a 	bl	8008824 <HAL_TIM_IC_ConfigChannel>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8000df6:	f000 f961 	bl	80010bc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000e02:	463b      	mov	r3, r7
 8000e04:	2204      	movs	r2, #4
 8000e06:	4619      	mov	r1, r3
 8000e08:	4805      	ldr	r0, [pc, #20]	@ (8000e20 <MX_TIM15_Init+0x134>)
 8000e0a:	f007 fd0b 	bl	8008824 <HAL_TIM_IC_ConfigChannel>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_TIM15_Init+0x12c>
  {
    Error_Handler();
 8000e14:	f000 f952 	bl	80010bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8000e18:	bf00      	nop
 8000e1a:	3740      	adds	r7, #64	@ 0x40
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	200005fc 	.word	0x200005fc
 8000e24:	40014000 	.word	0x40014000

08000e28 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000e2e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ea8 <MX_DMA_Init+0x80>)
 8000e30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e32:	4a1d      	ldr	r2, [pc, #116]	@ (8000ea8 <MX_DMA_Init+0x80>)
 8000e34:	f043 0304 	orr.w	r3, r3, #4
 8000e38:	6493      	str	r3, [r2, #72]	@ 0x48
 8000e3a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ea8 <MX_DMA_Init+0x80>)
 8000e3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e3e:	f003 0304 	and.w	r3, r3, #4
 8000e42:	607b      	str	r3, [r7, #4]
 8000e44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e46:	4b18      	ldr	r3, [pc, #96]	@ (8000ea8 <MX_DMA_Init+0x80>)
 8000e48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e4a:	4a17      	ldr	r2, [pc, #92]	@ (8000ea8 <MX_DMA_Init+0x80>)
 8000e4c:	f043 0301 	orr.w	r3, r3, #1
 8000e50:	6493      	str	r3, [r2, #72]	@ 0x48
 8000e52:	4b15      	ldr	r3, [pc, #84]	@ (8000ea8 <MX_DMA_Init+0x80>)
 8000e54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	603b      	str	r3, [r7, #0]
 8000e5c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	2100      	movs	r1, #0
 8000e62:	200b      	movs	r0, #11
 8000e64:	f003 f87d 	bl	8003f62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e68:	200b      	movs	r0, #11
 8000e6a:	f003 f894 	bl	8003f96 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2100      	movs	r1, #0
 8000e72:	200c      	movs	r0, #12
 8000e74:	f003 f875 	bl	8003f62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000e78:	200c      	movs	r0, #12
 8000e7a:	f003 f88c 	bl	8003f96 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2100      	movs	r1, #0
 8000e82:	200d      	movs	r0, #13
 8000e84:	f003 f86d 	bl	8003f62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000e88:	200d      	movs	r0, #13
 8000e8a:	f003 f884 	bl	8003f96 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2100      	movs	r1, #0
 8000e92:	200e      	movs	r0, #14
 8000e94:	f003 f865 	bl	8003f62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000e98:	200e      	movs	r0, #14
 8000e9a:	f003 f87c 	bl	8003f96 <HAL_NVIC_EnableIRQ>

}
 8000e9e:	bf00      	nop
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40021000 	.word	0x40021000

08000eac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08a      	sub	sp, #40	@ 0x28
 8000eb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb2:	f107 0314 	add.w	r3, r7, #20
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]
 8000ebc:	609a      	str	r2, [r3, #8]
 8000ebe:	60da      	str	r2, [r3, #12]
 8000ec0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ec2:	4b30      	ldr	r3, [pc, #192]	@ (8000f84 <MX_GPIO_Init+0xd8>)
 8000ec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec6:	4a2f      	ldr	r2, [pc, #188]	@ (8000f84 <MX_GPIO_Init+0xd8>)
 8000ec8:	f043 0320 	orr.w	r3, r3, #32
 8000ecc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ece:	4b2d      	ldr	r3, [pc, #180]	@ (8000f84 <MX_GPIO_Init+0xd8>)
 8000ed0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ed2:	f003 0320 	and.w	r3, r3, #32
 8000ed6:	613b      	str	r3, [r7, #16]
 8000ed8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eda:	4b2a      	ldr	r3, [pc, #168]	@ (8000f84 <MX_GPIO_Init+0xd8>)
 8000edc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ede:	4a29      	ldr	r2, [pc, #164]	@ (8000f84 <MX_GPIO_Init+0xd8>)
 8000ee0:	f043 0304 	orr.w	r3, r3, #4
 8000ee4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ee6:	4b27      	ldr	r3, [pc, #156]	@ (8000f84 <MX_GPIO_Init+0xd8>)
 8000ee8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eea:	f003 0304 	and.w	r3, r3, #4
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef2:	4b24      	ldr	r3, [pc, #144]	@ (8000f84 <MX_GPIO_Init+0xd8>)
 8000ef4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ef6:	4a23      	ldr	r2, [pc, #140]	@ (8000f84 <MX_GPIO_Init+0xd8>)
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000efe:	4b21      	ldr	r3, [pc, #132]	@ (8000f84 <MX_GPIO_Init+0xd8>)
 8000f00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	60bb      	str	r3, [r7, #8]
 8000f08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0a:	4b1e      	ldr	r3, [pc, #120]	@ (8000f84 <MX_GPIO_Init+0xd8>)
 8000f0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f0e:	4a1d      	ldr	r2, [pc, #116]	@ (8000f84 <MX_GPIO_Init+0xd8>)
 8000f10:	f043 0302 	orr.w	r3, r3, #2
 8000f14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f16:	4b1b      	ldr	r3, [pc, #108]	@ (8000f84 <MX_GPIO_Init+0xd8>)
 8000f18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f1a:	f003 0302 	and.w	r3, r3, #2
 8000f1e:	607b      	str	r3, [r7, #4]
 8000f20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ERROR_LED_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8000f22:	2200      	movs	r2, #0
 8000f24:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8000f28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f2c:	f003 fc42 	bl	80047b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ERROR_LED_Pin PA10 */
  GPIO_InitStruct.Pin = ERROR_LED_Pin|GPIO_PIN_10;
 8000f30:	f44f 6382 	mov.w	r3, #1040	@ 0x410
 8000f34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f36:	2301      	movs	r3, #1
 8000f38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f42:	f107 0314 	add.w	r3, r7, #20
 8000f46:	4619      	mov	r1, r3
 8000f48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f4c:	f003 fab0 	bl	80044b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f50:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f56:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f60:	f107 0314 	add.w	r3, r7, #20
 8000f64:	4619      	mov	r1, r3
 8000f66:	4808      	ldr	r0, [pc, #32]	@ (8000f88 <MX_GPIO_Init+0xdc>)
 8000f68:	f003 faa2 	bl	80044b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	2100      	movs	r1, #0
 8000f70:	2017      	movs	r0, #23
 8000f72:	f002 fff6 	bl	8003f62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f76:	2017      	movs	r0, #23
 8000f78:	f003 f80d 	bl	8003f96 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f7c:	bf00      	nop
 8000f7e:	3728      	adds	r7, #40	@ 0x28
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40021000 	.word	0x40021000
 8000f88:	48000400 	.word	0x48000400

08000f8c <HAL_ADC_ConvHalfCpltCallback>:



//delay
 void HAL_ADC_ConvHalfCpltCallback	(ADC_HandleTypeDef *hadc)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]


#if TOWHILE

	//抓数据进while
	if (WHILE_FLAG==0) {
 8000f94:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd4 <HAL_ADC_ConvHalfCpltCallback+0x48>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d114      	bne.n	8000fc6 <HAL_ADC_ConvHalfCpltCallback+0x3a>
		for (size_t i = 0; i < BUFFER_SIZE_HALF; i++)
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	e00a      	b.n	8000fb8 <HAL_ADC_ConvHalfCpltCallback+0x2c>
		{		WHILE_BUFFER[i] = ADC_BUFFER[i];	}
 8000fa2:	4a0d      	ldr	r2, [pc, #52]	@ (8000fd8 <HAL_ADC_ConvHalfCpltCallback+0x4c>)
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000faa:	490c      	ldr	r1, [pc, #48]	@ (8000fdc <HAL_ADC_ConvHalfCpltCallback+0x50>)
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (size_t i = 0; i < BUFFER_SIZE_HALF; i++)
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000fbe:	d3f0      	bcc.n	8000fa2 <HAL_ADC_ConvHalfCpltCallback+0x16>
		WHILE_FLAG=1;
 8000fc0:	4b04      	ldr	r3, [pc, #16]	@ (8000fd4 <HAL_ADC_ConvHalfCpltCallback+0x48>)
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	601a      	str	r2, [r3, #0]


#endif


}
 8000fc6:	bf00      	nop
 8000fc8:	3714      	adds	r7, #20
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	2000262c 	.word	0x2000262c
 8000fd8:	200006b8 	.word	0x200006b8
 8000fdc:	20001658 	.word	0x20001658

08000fe0 <HAL_ADC_ConvCpltCallback>:
 void HAL_ADC_ConvCpltCallback		(ADC_HandleTypeDef *hadc)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
#endif

#if TOWHILE

//	抓数据进while
	if (WHILE_FLAG==1) {
 8000fe8:	4b0f      	ldr	r3, [pc, #60]	@ (8001028 <HAL_ADC_ConvCpltCallback+0x48>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d115      	bne.n	800101c <HAL_ADC_ConvCpltCallback+0x3c>
		for (size_t i = BUFFER_SIZE_HALF; i < BUFFER_SIZE; i++)
 8000ff0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	e00a      	b.n	800100e <HAL_ADC_ConvCpltCallback+0x2e>
		{		WHILE_BUFFER[i] = ADC_BUFFER[i];	}
 8000ff8:	4a0c      	ldr	r2, [pc, #48]	@ (800102c <HAL_ADC_ConvCpltCallback+0x4c>)
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001000:	490b      	ldr	r1, [pc, #44]	@ (8001030 <HAL_ADC_ConvCpltCallback+0x50>)
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (size_t i = BUFFER_SIZE_HALF; i < BUFFER_SIZE; i++)
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	3301      	adds	r3, #1
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001014:	d3f0      	bcc.n	8000ff8 <HAL_ADC_ConvCpltCallback+0x18>
		WHILE_FLAG=2;
 8001016:	4b04      	ldr	r3, [pc, #16]	@ (8001028 <HAL_ADC_ConvCpltCallback+0x48>)
 8001018:	2202      	movs	r2, #2
 800101a:	601a      	str	r2, [r3, #0]
	}

#endif
}
 800101c:	bf00      	nop
 800101e:	3714      	adds	r7, #20
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	2000262c 	.word	0x2000262c
 800102c:	200006b8 	.word	0x200006b8
 8001030:	20001658 	.word	0x20001658

08001034 <HAL_TIM_IC_CaptureCallback>:




 void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 {
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]

   if (htim->Instance == TIM15) // 判断是否为TIM15
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a1a      	ldr	r2, [pc, #104]	@ (80010ac <HAL_TIM_IC_CaptureCallback+0x78>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d12e      	bne.n	80010a4 <HAL_TIM_IC_CaptureCallback+0x70>
   {


     if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	7f1b      	ldrb	r3, [r3, #28]
 800104a:	2b01      	cmp	r3, #1
 800104c:	d12a      	bne.n	80010a4 <HAL_TIM_IC_CaptureCallback+0x70>
     {

//  	   HAL_GPIO_TogglePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin);

       /* Get the Input Capture value */
       uwIC2Value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800104e:	2100      	movs	r1, #0
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f007 feef 	bl	8008e34 <HAL_TIM_ReadCapturedValue>
 8001056:	4603      	mov	r3, r0
 8001058:	4a15      	ldr	r2, [pc, #84]	@ (80010b0 <HAL_TIM_IC_CaptureCallback+0x7c>)
 800105a:	6013      	str	r3, [r2, #0]

       if (uwIC2Value != 0)
 800105c:	4b14      	ldr	r3, [pc, #80]	@ (80010b0 <HAL_TIM_IC_CaptureCallback+0x7c>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d019      	beq.n	8001098 <HAL_TIM_IC_CaptureCallback+0x64>
       {
         /* Duty cycle computation */
         uwDutyCycle = 255-((HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2)) * 255) / uwIC2Value;
 8001064:	2104      	movs	r1, #4
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f007 fee4 	bl	8008e34 <HAL_TIM_ReadCapturedValue>
 800106c:	4602      	mov	r2, r0
 800106e:	4613      	mov	r3, r2
 8001070:	021b      	lsls	r3, r3, #8
 8001072:	1a9a      	subs	r2, r3, r2
 8001074:	4b0e      	ldr	r3, [pc, #56]	@ (80010b0 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	fbb2 f3f3 	udiv	r3, r2, r3
 800107c:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8001080:	4a0c      	ldr	r2, [pc, #48]	@ (80010b4 <HAL_TIM_IC_CaptureCallback+0x80>)
 8001082:	6013      	str	r3, [r2, #0]

         /* uwFrequency computation
         TIM1 counter clock = (System Clock) */
         uwFrequency = ( HAL_RCC_GetSysClockFreq()  ) / uwIC2Value;
 8001084:	f005 ff08 	bl	8006e98 <HAL_RCC_GetSysClockFreq>
 8001088:	4602      	mov	r2, r0
 800108a:	4b09      	ldr	r3, [pc, #36]	@ (80010b0 <HAL_TIM_IC_CaptureCallback+0x7c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001092:	4a09      	ldr	r2, [pc, #36]	@ (80010b8 <HAL_TIM_IC_CaptureCallback+0x84>)
 8001094:	6013      	str	r3, [r2, #0]
         uwDutyCycle = 0;
         uwFrequency = 0;
       }
     }
   }
 }
 8001096:	e005      	b.n	80010a4 <HAL_TIM_IC_CaptureCallback+0x70>
         uwDutyCycle = 0;
 8001098:	4b06      	ldr	r3, [pc, #24]	@ (80010b4 <HAL_TIM_IC_CaptureCallback+0x80>)
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
         uwFrequency = 0;
 800109e:	4b06      	ldr	r3, [pc, #24]	@ (80010b8 <HAL_TIM_IC_CaptureCallback+0x84>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 }
 80010a4:	bf00      	nop
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	40014000 	.word	0x40014000
 80010b0:	200006a8 	.word	0x200006a8
 80010b4:	200006ac 	.word	0x200006ac
 80010b8:	200006b0 	.word	0x200006b0

080010bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* User can add his own implementation to report the HAL error return state */



//  __disable_irq();
  HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, 0);
 80010c0:	2200      	movs	r2, #0
 80010c2:	2110      	movs	r1, #16
 80010c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010c8:	f003 fb74 	bl	80047b4 <HAL_GPIO_WritePin>
//  while (1)
//  {
//
//  }
  /* USER CODE END Error_Handler_Debug */
}
 80010cc:	bf00      	nop
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d6:	4b14      	ldr	r3, [pc, #80]	@ (8001128 <HAL_MspInit+0x58>)
 80010d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010da:	4a13      	ldr	r2, [pc, #76]	@ (8001128 <HAL_MspInit+0x58>)
 80010dc:	f043 0301 	orr.w	r3, r3, #1
 80010e0:	6613      	str	r3, [r2, #96]	@ 0x60
 80010e2:	4b11      	ldr	r3, [pc, #68]	@ (8001128 <HAL_MspInit+0x58>)
 80010e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	607b      	str	r3, [r7, #4]
 80010ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001128 <HAL_MspInit+0x58>)
 80010f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010f2:	4a0d      	ldr	r2, [pc, #52]	@ (8001128 <HAL_MspInit+0x58>)
 80010f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80010fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001128 <HAL_MspInit+0x58>)
 80010fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001102:	603b      	str	r3, [r7, #0]
 8001104:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Tune the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_VREFBUF_TrimmingConfig(0);
 8001106:	2000      	movs	r0, #0
 8001108:	f001 f80a 	bl	8002120 <HAL_SYSCFG_VREFBUF_TrimmingConfig>

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 800110c:	2000      	movs	r0, #0
 800110e:	f000 ffdf 	bl	80020d0 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 8001112:	f001 f819 	bl	8002148 <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8001116:	2000      	movs	r0, #0
 8001118:	f000 ffee 	bl	80020f8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800111c:	f005 fa5e 	bl	80065dc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001120:	bf00      	nop
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40021000 	.word	0x40021000

0800112c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b0a0      	sub	sp, #128	@ 0x80
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001134:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001144:	f107 0318 	add.w	r3, r7, #24
 8001148:	2254      	movs	r2, #84	@ 0x54
 800114a:	2100      	movs	r1, #0
 800114c:	4618      	mov	r0, r3
 800114e:	f00d fcc5 	bl	800eadc <memset>
  if(hadc->Instance==ADC1)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800115a:	d158      	bne.n	800120e <HAL_ADC_MspInit+0xe2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800115c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001160:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001162:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001166:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001168:	f107 0318 	add.w	r3, r7, #24
 800116c:	4618      	mov	r0, r3
 800116e:	f005 ff3b 	bl	8006fe8 <HAL_RCCEx_PeriphCLKConfig>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001178:	f7ff ffa0 	bl	80010bc <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800117c:	4b87      	ldr	r3, [pc, #540]	@ (800139c <HAL_ADC_MspInit+0x270>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	3301      	adds	r3, #1
 8001182:	4a86      	ldr	r2, [pc, #536]	@ (800139c <HAL_ADC_MspInit+0x270>)
 8001184:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001186:	4b85      	ldr	r3, [pc, #532]	@ (800139c <HAL_ADC_MspInit+0x270>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2b01      	cmp	r3, #1
 800118c:	d10b      	bne.n	80011a6 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800118e:	4b84      	ldr	r3, [pc, #528]	@ (80013a0 <HAL_ADC_MspInit+0x274>)
 8001190:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001192:	4a83      	ldr	r2, [pc, #524]	@ (80013a0 <HAL_ADC_MspInit+0x274>)
 8001194:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001198:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800119a:	4b81      	ldr	r3, [pc, #516]	@ (80013a0 <HAL_ADC_MspInit+0x274>)
 800119c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800119e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011a2:	617b      	str	r3, [r7, #20]
 80011a4:	697b      	ldr	r3, [r7, #20]
    }

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 80011a6:	4b7f      	ldr	r3, [pc, #508]	@ (80013a4 <HAL_ADC_MspInit+0x278>)
 80011a8:	4a7f      	ldr	r2, [pc, #508]	@ (80013a8 <HAL_ADC_MspInit+0x27c>)
 80011aa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80011ac:	4b7d      	ldr	r3, [pc, #500]	@ (80013a4 <HAL_ADC_MspInit+0x278>)
 80011ae:	2205      	movs	r2, #5
 80011b0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011b2:	4b7c      	ldr	r3, [pc, #496]	@ (80013a4 <HAL_ADC_MspInit+0x278>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011b8:	4b7a      	ldr	r3, [pc, #488]	@ (80013a4 <HAL_ADC_MspInit+0x278>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011be:	4b79      	ldr	r3, [pc, #484]	@ (80013a4 <HAL_ADC_MspInit+0x278>)
 80011c0:	2280      	movs	r2, #128	@ 0x80
 80011c2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80011c4:	4b77      	ldr	r3, [pc, #476]	@ (80013a4 <HAL_ADC_MspInit+0x278>)
 80011c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011ca:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80011cc:	4b75      	ldr	r3, [pc, #468]	@ (80013a4 <HAL_ADC_MspInit+0x278>)
 80011ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80011d2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80011d4:	4b73      	ldr	r3, [pc, #460]	@ (80013a4 <HAL_ADC_MspInit+0x278>)
 80011d6:	2220      	movs	r2, #32
 80011d8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80011da:	4b72      	ldr	r3, [pc, #456]	@ (80013a4 <HAL_ADC_MspInit+0x278>)
 80011dc:	2200      	movs	r2, #0
 80011de:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011e0:	4870      	ldr	r0, [pc, #448]	@ (80013a4 <HAL_ADC_MspInit+0x278>)
 80011e2:	f002 fef3 	bl	8003fcc <HAL_DMA_Init>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 80011ec:	f7ff ff66 	bl	80010bc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	4a6c      	ldr	r2, [pc, #432]	@ (80013a4 <HAL_ADC_MspInit+0x278>)
 80011f4:	655a      	str	r2, [r3, #84]	@ 0x54
 80011f6:	4a6b      	ldr	r2, [pc, #428]	@ (80013a4 <HAL_ADC_MspInit+0x278>)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80011fc:	2200      	movs	r2, #0
 80011fe:	2100      	movs	r1, #0
 8001200:	2012      	movs	r0, #18
 8001202:	f002 feae 	bl	8003f62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001206:	2012      	movs	r0, #18
 8001208:	f002 fec5 	bl	8003f96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800120c:	e0c2      	b.n	8001394 <HAL_ADC_MspInit+0x268>
  else if(hadc->Instance==ADC2)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a66      	ldr	r2, [pc, #408]	@ (80013ac <HAL_ADC_MspInit+0x280>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d171      	bne.n	80012fc <HAL_ADC_MspInit+0x1d0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001218:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800121c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800121e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001222:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001224:	f107 0318 	add.w	r3, r7, #24
 8001228:	4618      	mov	r0, r3
 800122a:	f005 fedd 	bl	8006fe8 <HAL_RCCEx_PeriphCLKConfig>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <HAL_ADC_MspInit+0x10c>
      Error_Handler();
 8001234:	f7ff ff42 	bl	80010bc <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001238:	4b58      	ldr	r3, [pc, #352]	@ (800139c <HAL_ADC_MspInit+0x270>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	3301      	adds	r3, #1
 800123e:	4a57      	ldr	r2, [pc, #348]	@ (800139c <HAL_ADC_MspInit+0x270>)
 8001240:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001242:	4b56      	ldr	r3, [pc, #344]	@ (800139c <HAL_ADC_MspInit+0x270>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d10b      	bne.n	8001262 <HAL_ADC_MspInit+0x136>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800124a:	4b55      	ldr	r3, [pc, #340]	@ (80013a0 <HAL_ADC_MspInit+0x274>)
 800124c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800124e:	4a54      	ldr	r2, [pc, #336]	@ (80013a0 <HAL_ADC_MspInit+0x274>)
 8001250:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001254:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001256:	4b52      	ldr	r3, [pc, #328]	@ (80013a0 <HAL_ADC_MspInit+0x274>)
 8001258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800125a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800125e:	613b      	str	r3, [r7, #16]
 8001260:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001262:	4b4f      	ldr	r3, [pc, #316]	@ (80013a0 <HAL_ADC_MspInit+0x274>)
 8001264:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001266:	4a4e      	ldr	r2, [pc, #312]	@ (80013a0 <HAL_ADC_MspInit+0x274>)
 8001268:	f043 0301 	orr.w	r3, r3, #1
 800126c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800126e:	4b4c      	ldr	r3, [pc, #304]	@ (80013a0 <HAL_ADC_MspInit+0x274>)
 8001270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800127a:	2302      	movs	r3, #2
 800127c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800127e:	2303      	movs	r3, #3
 8001280:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001286:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800128a:	4619      	mov	r1, r3
 800128c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001290:	f003 f90e 	bl	80044b0 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel3;
 8001294:	4b46      	ldr	r3, [pc, #280]	@ (80013b0 <HAL_ADC_MspInit+0x284>)
 8001296:	4a47      	ldr	r2, [pc, #284]	@ (80013b4 <HAL_ADC_MspInit+0x288>)
 8001298:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 800129a:	4b45      	ldr	r3, [pc, #276]	@ (80013b0 <HAL_ADC_MspInit+0x284>)
 800129c:	2224      	movs	r2, #36	@ 0x24
 800129e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012a0:	4b43      	ldr	r3, [pc, #268]	@ (80013b0 <HAL_ADC_MspInit+0x284>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80012a6:	4b42      	ldr	r3, [pc, #264]	@ (80013b0 <HAL_ADC_MspInit+0x284>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80012ac:	4b40      	ldr	r3, [pc, #256]	@ (80013b0 <HAL_ADC_MspInit+0x284>)
 80012ae:	2280      	movs	r2, #128	@ 0x80
 80012b0:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80012b2:	4b3f      	ldr	r3, [pc, #252]	@ (80013b0 <HAL_ADC_MspInit+0x284>)
 80012b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012b8:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80012ba:	4b3d      	ldr	r3, [pc, #244]	@ (80013b0 <HAL_ADC_MspInit+0x284>)
 80012bc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80012c0:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80012c2:	4b3b      	ldr	r3, [pc, #236]	@ (80013b0 <HAL_ADC_MspInit+0x284>)
 80012c4:	2220      	movs	r2, #32
 80012c6:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80012c8:	4b39      	ldr	r3, [pc, #228]	@ (80013b0 <HAL_ADC_MspInit+0x284>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80012ce:	4838      	ldr	r0, [pc, #224]	@ (80013b0 <HAL_ADC_MspInit+0x284>)
 80012d0:	f002 fe7c 	bl	8003fcc <HAL_DMA_Init>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <HAL_ADC_MspInit+0x1b2>
      Error_Handler();
 80012da:	f7ff feef 	bl	80010bc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a33      	ldr	r2, [pc, #204]	@ (80013b0 <HAL_ADC_MspInit+0x284>)
 80012e2:	655a      	str	r2, [r3, #84]	@ 0x54
 80012e4:	4a32      	ldr	r2, [pc, #200]	@ (80013b0 <HAL_ADC_MspInit+0x284>)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80012ea:	2200      	movs	r2, #0
 80012ec:	2100      	movs	r1, #0
 80012ee:	2012      	movs	r0, #18
 80012f0:	f002 fe37 	bl	8003f62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80012f4:	2012      	movs	r0, #18
 80012f6:	f002 fe4e 	bl	8003f96 <HAL_NVIC_EnableIRQ>
}
 80012fa:	e04b      	b.n	8001394 <HAL_ADC_MspInit+0x268>
  else if(hadc->Instance==ADC3)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a2d      	ldr	r2, [pc, #180]	@ (80013b8 <HAL_ADC_MspInit+0x28c>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d146      	bne.n	8001394 <HAL_ADC_MspInit+0x268>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001306:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800130a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 800130c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001310:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001312:	f107 0318 	add.w	r3, r7, #24
 8001316:	4618      	mov	r0, r3
 8001318:	f005 fe66 	bl	8006fe8 <HAL_RCCEx_PeriphCLKConfig>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <HAL_ADC_MspInit+0x1fa>
      Error_Handler();
 8001322:	f7ff fecb 	bl	80010bc <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 8001326:	4b1e      	ldr	r3, [pc, #120]	@ (80013a0 <HAL_ADC_MspInit+0x274>)
 8001328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800132a:	4a1d      	ldr	r2, [pc, #116]	@ (80013a0 <HAL_ADC_MspInit+0x274>)
 800132c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001330:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001332:	4b1b      	ldr	r3, [pc, #108]	@ (80013a0 <HAL_ADC_MspInit+0x274>)
 8001334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001336:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800133a:	60bb      	str	r3, [r7, #8]
 800133c:	68bb      	ldr	r3, [r7, #8]
    hdma_adc3.Instance = DMA1_Channel4;
 800133e:	4b1f      	ldr	r3, [pc, #124]	@ (80013bc <HAL_ADC_MspInit+0x290>)
 8001340:	4a1f      	ldr	r2, [pc, #124]	@ (80013c0 <HAL_ADC_MspInit+0x294>)
 8001342:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001344:	4b1d      	ldr	r3, [pc, #116]	@ (80013bc <HAL_ADC_MspInit+0x290>)
 8001346:	2225      	movs	r2, #37	@ 0x25
 8001348:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800134a:	4b1c      	ldr	r3, [pc, #112]	@ (80013bc <HAL_ADC_MspInit+0x290>)
 800134c:	2200      	movs	r2, #0
 800134e:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001350:	4b1a      	ldr	r3, [pc, #104]	@ (80013bc <HAL_ADC_MspInit+0x290>)
 8001352:	2200      	movs	r2, #0
 8001354:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001356:	4b19      	ldr	r3, [pc, #100]	@ (80013bc <HAL_ADC_MspInit+0x290>)
 8001358:	2280      	movs	r2, #128	@ 0x80
 800135a:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800135c:	4b17      	ldr	r3, [pc, #92]	@ (80013bc <HAL_ADC_MspInit+0x290>)
 800135e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001362:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001364:	4b15      	ldr	r3, [pc, #84]	@ (80013bc <HAL_ADC_MspInit+0x290>)
 8001366:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800136a:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 800136c:	4b13      	ldr	r3, [pc, #76]	@ (80013bc <HAL_ADC_MspInit+0x290>)
 800136e:	2200      	movs	r2, #0
 8001370:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001372:	4b12      	ldr	r3, [pc, #72]	@ (80013bc <HAL_ADC_MspInit+0x290>)
 8001374:	2200      	movs	r2, #0
 8001376:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001378:	4810      	ldr	r0, [pc, #64]	@ (80013bc <HAL_ADC_MspInit+0x290>)
 800137a:	f002 fe27 	bl	8003fcc <HAL_DMA_Init>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <HAL_ADC_MspInit+0x25c>
      Error_Handler();
 8001384:	f7ff fe9a 	bl	80010bc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4a0c      	ldr	r2, [pc, #48]	@ (80013bc <HAL_ADC_MspInit+0x290>)
 800138c:	655a      	str	r2, [r3, #84]	@ 0x54
 800138e:	4a0b      	ldr	r2, [pc, #44]	@ (80013bc <HAL_ADC_MspInit+0x290>)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8001394:	bf00      	nop
 8001396:	3780      	adds	r7, #128	@ 0x80
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	20002634 	.word	0x20002634
 80013a0:	40021000 	.word	0x40021000
 80013a4:	20000334 	.word	0x20000334
 80013a8:	4002001c 	.word	0x4002001c
 80013ac:	50000100 	.word	0x50000100
 80013b0:	20000394 	.word	0x20000394
 80013b4:	40020030 	.word	0x40020030
 80013b8:	50000400 	.word	0x50000400
 80013bc:	200003f4 	.word	0x200003f4
 80013c0:	40020044 	.word	0x40020044

080013c4 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b08a      	sub	sp, #40	@ 0x28
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013cc:	f107 0314 	add.w	r3, r7, #20
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
 80013da:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a1f      	ldr	r2, [pc, #124]	@ (8001460 <HAL_OPAMP_MspInit+0x9c>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d119      	bne.n	800141a <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001464 <HAL_OPAMP_MspInit+0xa0>)
 80013e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ea:	4a1e      	ldr	r2, [pc, #120]	@ (8001464 <HAL_OPAMP_MspInit+0xa0>)
 80013ec:	f043 0301 	orr.w	r3, r3, #1
 80013f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001464 <HAL_OPAMP_MspInit+0xa0>)
 80013f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	613b      	str	r3, [r7, #16]
 80013fc:	693b      	ldr	r3, [r7, #16]
    /**OPAMP1 GPIO Configuration
    PA1     ------> OPAMP1_VINP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80013fe:	2302      	movs	r3, #2
 8001400:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001402:	2303      	movs	r3, #3
 8001404:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140a:	f107 0314 	add.w	r3, r7, #20
 800140e:	4619      	mov	r1, r3
 8001410:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001414:	f003 f84c 	bl	80044b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }

}
 8001418:	e01d      	b.n	8001456 <HAL_OPAMP_MspInit+0x92>
  else if(hopamp->Instance==OPAMP3)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a12      	ldr	r2, [pc, #72]	@ (8001468 <HAL_OPAMP_MspInit+0xa4>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d118      	bne.n	8001456 <HAL_OPAMP_MspInit+0x92>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001424:	4b0f      	ldr	r3, [pc, #60]	@ (8001464 <HAL_OPAMP_MspInit+0xa0>)
 8001426:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001428:	4a0e      	ldr	r2, [pc, #56]	@ (8001464 <HAL_OPAMP_MspInit+0xa0>)
 800142a:	f043 0301 	orr.w	r3, r3, #1
 800142e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001430:	4b0c      	ldr	r3, [pc, #48]	@ (8001464 <HAL_OPAMP_MspInit+0xa0>)
 8001432:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001434:	f003 0301 	and.w	r3, r3, #1
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800143c:	2302      	movs	r3, #2
 800143e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001440:	2303      	movs	r3, #3
 8001442:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001448:	f107 0314 	add.w	r3, r7, #20
 800144c:	4619      	mov	r1, r3
 800144e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001452:	f003 f82d 	bl	80044b0 <HAL_GPIO_Init>
}
 8001456:	bf00      	nop
 8001458:	3728      	adds	r7, #40	@ 0x28
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40010300 	.word	0x40010300
 8001464:	40021000 	.word	0x40021000
 8001468:	40010308 	.word	0x40010308

0800146c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b08e      	sub	sp, #56	@ 0x38
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001474:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
 8001482:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a6b      	ldr	r2, [pc, #428]	@ (8001638 <HAL_TIM_Base_MspInit+0x1cc>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d114      	bne.n	80014b8 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800148e:	4b6b      	ldr	r3, [pc, #428]	@ (800163c <HAL_TIM_Base_MspInit+0x1d0>)
 8001490:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001492:	4a6a      	ldr	r2, [pc, #424]	@ (800163c <HAL_TIM_Base_MspInit+0x1d0>)
 8001494:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001498:	6613      	str	r3, [r2, #96]	@ 0x60
 800149a:	4b68      	ldr	r3, [pc, #416]	@ (800163c <HAL_TIM_Base_MspInit+0x1d0>)
 800149c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800149e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80014a2:	623b      	str	r3, [r7, #32]
 80014a4:	6a3b      	ldr	r3, [r7, #32]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2100      	movs	r1, #0
 80014aa:	2018      	movs	r0, #24
 80014ac:	f002 fd59 	bl	8003f62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80014b0:	2018      	movs	r0, #24
 80014b2:	f002 fd70 	bl	8003f96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80014b6:	e0bb      	b.n	8001630 <HAL_TIM_Base_MspInit+0x1c4>
  else if(htim_base->Instance==TIM2)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014c0:	d129      	bne.n	8001516 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014c2:	4b5e      	ldr	r3, [pc, #376]	@ (800163c <HAL_TIM_Base_MspInit+0x1d0>)
 80014c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014c6:	4a5d      	ldr	r2, [pc, #372]	@ (800163c <HAL_TIM_Base_MspInit+0x1d0>)
 80014c8:	f043 0301 	orr.w	r3, r3, #1
 80014cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80014ce:	4b5b      	ldr	r3, [pc, #364]	@ (800163c <HAL_TIM_Base_MspInit+0x1d0>)
 80014d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	61fb      	str	r3, [r7, #28]
 80014d8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014da:	4b58      	ldr	r3, [pc, #352]	@ (800163c <HAL_TIM_Base_MspInit+0x1d0>)
 80014dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014de:	4a57      	ldr	r2, [pc, #348]	@ (800163c <HAL_TIM_Base_MspInit+0x1d0>)
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014e6:	4b55      	ldr	r3, [pc, #340]	@ (800163c <HAL_TIM_Base_MspInit+0x1d0>)
 80014e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	61bb      	str	r3, [r7, #24]
 80014f0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014f2:	2301      	movs	r3, #1
 80014f4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f6:	2302      	movs	r3, #2
 80014f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fe:	2300      	movs	r3, #0
 8001500:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM2;
 8001502:	230e      	movs	r3, #14
 8001504:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001506:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800150a:	4619      	mov	r1, r3
 800150c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001510:	f002 ffce 	bl	80044b0 <HAL_GPIO_Init>
}
 8001514:	e08c      	b.n	8001630 <HAL_TIM_Base_MspInit+0x1c4>
  else if(htim_base->Instance==TIM3)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a49      	ldr	r2, [pc, #292]	@ (8001640 <HAL_TIM_Base_MspInit+0x1d4>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d137      	bne.n	8001590 <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001520:	4b46      	ldr	r3, [pc, #280]	@ (800163c <HAL_TIM_Base_MspInit+0x1d0>)
 8001522:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001524:	4a45      	ldr	r2, [pc, #276]	@ (800163c <HAL_TIM_Base_MspInit+0x1d0>)
 8001526:	f043 0302 	orr.w	r3, r3, #2
 800152a:	6593      	str	r3, [r2, #88]	@ 0x58
 800152c:	4b43      	ldr	r3, [pc, #268]	@ (800163c <HAL_TIM_Base_MspInit+0x1d0>)
 800152e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001530:	f003 0302 	and.w	r3, r3, #2
 8001534:	617b      	str	r3, [r7, #20]
 8001536:	697b      	ldr	r3, [r7, #20]
    hdma_tim3_ch4.Instance = DMA1_Channel1;
 8001538:	4b42      	ldr	r3, [pc, #264]	@ (8001644 <HAL_TIM_Base_MspInit+0x1d8>)
 800153a:	4a43      	ldr	r2, [pc, #268]	@ (8001648 <HAL_TIM_Base_MspInit+0x1dc>)
 800153c:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4.Init.Request = DMA_REQUEST_TIM3_CH4;
 800153e:	4b41      	ldr	r3, [pc, #260]	@ (8001644 <HAL_TIM_Base_MspInit+0x1d8>)
 8001540:	2240      	movs	r2, #64	@ 0x40
 8001542:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001544:	4b3f      	ldr	r3, [pc, #252]	@ (8001644 <HAL_TIM_Base_MspInit+0x1d8>)
 8001546:	2210      	movs	r2, #16
 8001548:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 800154a:	4b3e      	ldr	r3, [pc, #248]	@ (8001644 <HAL_TIM_Base_MspInit+0x1d8>)
 800154c:	2200      	movs	r2, #0
 800154e:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8001550:	4b3c      	ldr	r3, [pc, #240]	@ (8001644 <HAL_TIM_Base_MspInit+0x1d8>)
 8001552:	2280      	movs	r2, #128	@ 0x80
 8001554:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001556:	4b3b      	ldr	r3, [pc, #236]	@ (8001644 <HAL_TIM_Base_MspInit+0x1d8>)
 8001558:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800155c:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800155e:	4b39      	ldr	r3, [pc, #228]	@ (8001644 <HAL_TIM_Base_MspInit+0x1d8>)
 8001560:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001564:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4.Init.Mode = DMA_NORMAL;
 8001566:	4b37      	ldr	r3, [pc, #220]	@ (8001644 <HAL_TIM_Base_MspInit+0x1d8>)
 8001568:	2200      	movs	r2, #0
 800156a:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4.Init.Priority = DMA_PRIORITY_LOW;
 800156c:	4b35      	ldr	r3, [pc, #212]	@ (8001644 <HAL_TIM_Base_MspInit+0x1d8>)
 800156e:	2200      	movs	r2, #0
 8001570:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch4) != HAL_OK)
 8001572:	4834      	ldr	r0, [pc, #208]	@ (8001644 <HAL_TIM_Base_MspInit+0x1d8>)
 8001574:	f002 fd2a 	bl	8003fcc <HAL_DMA_Init>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <HAL_TIM_Base_MspInit+0x116>
      Error_Handler();
 800157e:	f7ff fd9d 	bl	80010bc <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a2f      	ldr	r2, [pc, #188]	@ (8001644 <HAL_TIM_Base_MspInit+0x1d8>)
 8001586:	631a      	str	r2, [r3, #48]	@ 0x30
 8001588:	4a2e      	ldr	r2, [pc, #184]	@ (8001644 <HAL_TIM_Base_MspInit+0x1d8>)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6293      	str	r3, [r2, #40]	@ 0x28
}
 800158e:	e04f      	b.n	8001630 <HAL_TIM_Base_MspInit+0x1c4>
  else if(htim_base->Instance==TIM4)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a2d      	ldr	r2, [pc, #180]	@ (800164c <HAL_TIM_Base_MspInit+0x1e0>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d114      	bne.n	80015c4 <HAL_TIM_Base_MspInit+0x158>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800159a:	4b28      	ldr	r3, [pc, #160]	@ (800163c <HAL_TIM_Base_MspInit+0x1d0>)
 800159c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800159e:	4a27      	ldr	r2, [pc, #156]	@ (800163c <HAL_TIM_Base_MspInit+0x1d0>)
 80015a0:	f043 0304 	orr.w	r3, r3, #4
 80015a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80015a6:	4b25      	ldr	r3, [pc, #148]	@ (800163c <HAL_TIM_Base_MspInit+0x1d0>)
 80015a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015aa:	f003 0304 	and.w	r3, r3, #4
 80015ae:	613b      	str	r3, [r7, #16]
 80015b0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80015b2:	2200      	movs	r2, #0
 80015b4:	2100      	movs	r1, #0
 80015b6:	201e      	movs	r0, #30
 80015b8:	f002 fcd3 	bl	8003f62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80015bc:	201e      	movs	r0, #30
 80015be:	f002 fcea 	bl	8003f96 <HAL_NVIC_EnableIRQ>
}
 80015c2:	e035      	b.n	8001630 <HAL_TIM_Base_MspInit+0x1c4>
  else if(htim_base->Instance==TIM15)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a21      	ldr	r2, [pc, #132]	@ (8001650 <HAL_TIM_Base_MspInit+0x1e4>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d130      	bne.n	8001630 <HAL_TIM_Base_MspInit+0x1c4>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80015ce:	4b1b      	ldr	r3, [pc, #108]	@ (800163c <HAL_TIM_Base_MspInit+0x1d0>)
 80015d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015d2:	4a1a      	ldr	r2, [pc, #104]	@ (800163c <HAL_TIM_Base_MspInit+0x1d0>)
 80015d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80015da:	4b18      	ldr	r3, [pc, #96]	@ (800163c <HAL_TIM_Base_MspInit+0x1d0>)
 80015dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e6:	4b15      	ldr	r3, [pc, #84]	@ (800163c <HAL_TIM_Base_MspInit+0x1d0>)
 80015e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ea:	4a14      	ldr	r2, [pc, #80]	@ (800163c <HAL_TIM_Base_MspInit+0x1d0>)
 80015ec:	f043 0301 	orr.w	r3, r3, #1
 80015f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015f2:	4b12      	ldr	r3, [pc, #72]	@ (800163c <HAL_TIM_Base_MspInit+0x1d0>)
 80015f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	60bb      	str	r3, [r7, #8]
 80015fc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015fe:	2304      	movs	r3, #4
 8001600:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001602:	2302      	movs	r3, #2
 8001604:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160a:	2300      	movs	r3, #0
 800160c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 800160e:	2309      	movs	r3, #9
 8001610:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001612:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001616:	4619      	mov	r1, r3
 8001618:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800161c:	f002 ff48 	bl	80044b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001620:	2200      	movs	r2, #0
 8001622:	2100      	movs	r1, #0
 8001624:	2018      	movs	r0, #24
 8001626:	f002 fc9c 	bl	8003f62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800162a:	2018      	movs	r0, #24
 800162c:	f002 fcb3 	bl	8003f96 <HAL_NVIC_EnableIRQ>
}
 8001630:	bf00      	nop
 8001632:	3738      	adds	r7, #56	@ 0x38
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40012c00 	.word	0x40012c00
 800163c:	40021000 	.word	0x40021000
 8001640:	40000400 	.word	0x40000400
 8001644:	20000648 	.word	0x20000648
 8001648:	40020008 	.word	0x40020008
 800164c:	40000800 	.word	0x40000800
 8001650:	40014000 	.word	0x40014000

08001654 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b08a      	sub	sp, #40	@ 0x28
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165c:	f107 0314 	add.w	r3, r7, #20
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	60da      	str	r2, [r3, #12]
 800166a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a33      	ldr	r2, [pc, #204]	@ (8001740 <HAL_TIM_MspPostInit+0xec>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d11c      	bne.n	80016b0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001676:	4b33      	ldr	r3, [pc, #204]	@ (8001744 <HAL_TIM_MspPostInit+0xf0>)
 8001678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800167a:	4a32      	ldr	r2, [pc, #200]	@ (8001744 <HAL_TIM_MspPostInit+0xf0>)
 800167c:	f043 0304 	orr.w	r3, r3, #4
 8001680:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001682:	4b30      	ldr	r3, [pc, #192]	@ (8001744 <HAL_TIM_MspPostInit+0xf0>)
 8001684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001686:	f003 0304 	and.w	r3, r3, #4
 800168a:	613b      	str	r3, [r7, #16]
 800168c:	693b      	ldr	r3, [r7, #16]
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800168e:	230f      	movs	r3, #15
 8001690:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001692:	2302      	movs	r3, #2
 8001694:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001696:	2300      	movs	r3, #0
 8001698:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169a:	2303      	movs	r3, #3
 800169c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800169e:	2302      	movs	r3, #2
 80016a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016a2:	f107 0314 	add.w	r3, r7, #20
 80016a6:	4619      	mov	r1, r3
 80016a8:	4827      	ldr	r0, [pc, #156]	@ (8001748 <HAL_TIM_MspPostInit+0xf4>)
 80016aa:	f002 ff01 	bl	80044b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80016ae:	e043      	b.n	8001738 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM2)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016b8:	d11d      	bne.n	80016f6 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ba:	4b22      	ldr	r3, [pc, #136]	@ (8001744 <HAL_TIM_MspPostInit+0xf0>)
 80016bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016be:	4a21      	ldr	r2, [pc, #132]	@ (8001744 <HAL_TIM_MspPostInit+0xf0>)
 80016c0:	f043 0302 	orr.w	r3, r3, #2
 80016c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001744 <HAL_TIM_MspPostInit+0xf0>)
 80016c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80016d2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80016d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d8:	2302      	movs	r3, #2
 80016da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e0:	2300      	movs	r3, #0
 80016e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80016e4:	2301      	movs	r3, #1
 80016e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e8:	f107 0314 	add.w	r3, r7, #20
 80016ec:	4619      	mov	r1, r3
 80016ee:	4817      	ldr	r0, [pc, #92]	@ (800174c <HAL_TIM_MspPostInit+0xf8>)
 80016f0:	f002 fede 	bl	80044b0 <HAL_GPIO_Init>
}
 80016f4:	e020      	b.n	8001738 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a15      	ldr	r2, [pc, #84]	@ (8001750 <HAL_TIM_MspPostInit+0xfc>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d11b      	bne.n	8001738 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001700:	4b10      	ldr	r3, [pc, #64]	@ (8001744 <HAL_TIM_MspPostInit+0xf0>)
 8001702:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001704:	4a0f      	ldr	r2, [pc, #60]	@ (8001744 <HAL_TIM_MspPostInit+0xf0>)
 8001706:	f043 0302 	orr.w	r3, r3, #2
 800170a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800170c:	4b0d      	ldr	r3, [pc, #52]	@ (8001744 <HAL_TIM_MspPostInit+0xf0>)
 800170e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001710:	f003 0302 	and.w	r3, r3, #2
 8001714:	60bb      	str	r3, [r7, #8]
 8001716:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001718:	2380      	movs	r3, #128	@ 0x80
 800171a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171c:	2302      	movs	r3, #2
 800171e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001724:	2300      	movs	r3, #0
 8001726:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM3;
 8001728:	230a      	movs	r3, #10
 800172a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800172c:	f107 0314 	add.w	r3, r7, #20
 8001730:	4619      	mov	r1, r3
 8001732:	4806      	ldr	r0, [pc, #24]	@ (800174c <HAL_TIM_MspPostInit+0xf8>)
 8001734:	f002 febc 	bl	80044b0 <HAL_GPIO_Init>
}
 8001738:	bf00      	nop
 800173a:	3728      	adds	r7, #40	@ 0x28
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40012c00 	.word	0x40012c00
 8001744:	40021000 	.word	0x40021000
 8001748:	48000800 	.word	0x48000800
 800174c:	48000400 	.word	0x48000400
 8001750:	40000400 	.word	0x40000400

08001754 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001758:	bf00      	nop
 800175a:	e7fd      	b.n	8001758 <NMI_Handler+0x4>

0800175c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001760:	bf00      	nop
 8001762:	e7fd      	b.n	8001760 <HardFault_Handler+0x4>

08001764 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001768:	bf00      	nop
 800176a:	e7fd      	b.n	8001768 <MemManage_Handler+0x4>

0800176c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001770:	bf00      	nop
 8001772:	e7fd      	b.n	8001770 <BusFault_Handler+0x4>

08001774 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001778:	bf00      	nop
 800177a:	e7fd      	b.n	8001778 <UsageFault_Handler+0x4>

0800177c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001780:	bf00      	nop
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800178a:	b480      	push	{r7}
 800178c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr

080017a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017aa:	f000 fc51 	bl	8002050 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
	...

080017b4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4);
 80017b8:	4802      	ldr	r0, [pc, #8]	@ (80017c4 <DMA1_Channel1_IRQHandler+0x10>)
 80017ba:	f002 fd2a 	bl	8004212 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000648 	.word	0x20000648

080017c8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80017cc:	4802      	ldr	r0, [pc, #8]	@ (80017d8 <DMA1_Channel2_IRQHandler+0x10>)
 80017ce:	f002 fd20 	bl	8004212 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000334 	.word	0x20000334

080017dc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80017e0:	4802      	ldr	r0, [pc, #8]	@ (80017ec <DMA1_Channel3_IRQHandler+0x10>)
 80017e2:	f002 fd16 	bl	8004212 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000394 	.word	0x20000394

080017f0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80017f4:	4802      	ldr	r0, [pc, #8]	@ (8001800 <DMA1_Channel4_IRQHandler+0x10>)
 80017f6:	f002 fd0c 	bl	8004212 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	200003f4 	.word	0x200003f4

08001804 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001808:	4803      	ldr	r0, [pc, #12]	@ (8001818 <ADC1_2_IRQHandler+0x14>)
 800180a:	f001 f991 	bl	8002b30 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800180e:	4803      	ldr	r0, [pc, #12]	@ (800181c <ADC1_2_IRQHandler+0x18>)
 8001810:	f001 f98e 	bl	8002b30 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001814:	bf00      	nop
 8001816:	bd80      	pop	{r7, pc}
 8001818:	200001f0 	.word	0x200001f0
 800181c:	2000025c 	.word	0x2000025c

08001820 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001824:	4802      	ldr	r0, [pc, #8]	@ (8001830 <USB_LP_IRQHandler+0x10>)
 8001826:	f003 f9f2 	bl	8004c0e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	200049c4 	.word	0x200049c4

08001834 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	BOOT0_BTN_COUNT=BOOT0_BTN_COUNT+1;
 8001838:	4b05      	ldr	r3, [pc, #20]	@ (8001850 <EXTI9_5_IRQHandler+0x1c>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	3301      	adds	r3, #1
 800183e:	4a04      	ldr	r2, [pc, #16]	@ (8001850 <EXTI9_5_IRQHandler+0x1c>)
 8001840:	6013      	str	r3, [r2, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001842:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001846:	f002 ffcd 	bl	80047e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	20002630 	.word	0x20002630

08001854 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001858:	4803      	ldr	r0, [pc, #12]	@ (8001868 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 800185a:	f006 fe19 	bl	8008490 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 800185e:	4803      	ldr	r0, [pc, #12]	@ (800186c <TIM1_BRK_TIM15_IRQHandler+0x18>)
 8001860:	f006 fe16 	bl	8008490 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001864:	bf00      	nop
 8001866:	bd80      	pop	{r7, pc}
 8001868:	200004cc 	.word	0x200004cc
 800186c:	200005fc 	.word	0x200005fc

08001870 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	USER_CounterTicks= TIM2->CNT;
 8001874:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800187a:	4a05      	ldr	r2, [pc, #20]	@ (8001890 <TIM4_IRQHandler+0x20>)
 800187c:	6013      	str	r3, [r2, #0]
  	TIM2->CNT=0;
 800187e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001882:	2200      	movs	r2, #0
 8001884:	625a      	str	r2, [r3, #36]	@ 0x24
//	  sprintf(&CDC_BUFFER,"FRRQ: %d \r\n",USER_CounterTicks);
//	  CDC_Transmit_FS(&CDC_BUFFER, 50);

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001886:	4803      	ldr	r0, [pc, #12]	@ (8001894 <TIM4_IRQHandler+0x24>)
 8001888:	f006 fe02 	bl	8008490 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */


  /* USER CODE END TIM4_IRQn 1 */
}
 800188c:	bf00      	nop
 800188e:	bd80      	pop	{r7, pc}
 8001890:	200006b4 	.word	0x200006b4
 8001894:	200005b0 	.word	0x200005b0

08001898 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018a0:	4a14      	ldr	r2, [pc, #80]	@ (80018f4 <_sbrk+0x5c>)
 80018a2:	4b15      	ldr	r3, [pc, #84]	@ (80018f8 <_sbrk+0x60>)
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018ac:	4b13      	ldr	r3, [pc, #76]	@ (80018fc <_sbrk+0x64>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d102      	bne.n	80018ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018b4:	4b11      	ldr	r3, [pc, #68]	@ (80018fc <_sbrk+0x64>)
 80018b6:	4a12      	ldr	r2, [pc, #72]	@ (8001900 <_sbrk+0x68>)
 80018b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ba:	4b10      	ldr	r3, [pc, #64]	@ (80018fc <_sbrk+0x64>)
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4413      	add	r3, r2
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d207      	bcs.n	80018d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018c8:	f00d f910 	bl	800eaec <__errno>
 80018cc:	4603      	mov	r3, r0
 80018ce:	220c      	movs	r2, #12
 80018d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018d2:	f04f 33ff 	mov.w	r3, #4294967295
 80018d6:	e009      	b.n	80018ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018d8:	4b08      	ldr	r3, [pc, #32]	@ (80018fc <_sbrk+0x64>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018de:	4b07      	ldr	r3, [pc, #28]	@ (80018fc <_sbrk+0x64>)
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4413      	add	r3, r2
 80018e6:	4a05      	ldr	r2, [pc, #20]	@ (80018fc <_sbrk+0x64>)
 80018e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ea:	68fb      	ldr	r3, [r7, #12]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3718      	adds	r7, #24
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	20020000 	.word	0x20020000
 80018f8:	00000400 	.word	0x00000400
 80018fc:	20002638 	.word	0x20002638
 8001900:	20005008 	.word	0x20005008

08001904 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001908:	4b06      	ldr	r3, [pc, #24]	@ (8001924 <SystemInit+0x20>)
 800190a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800190e:	4a05      	ldr	r2, [pc, #20]	@ (8001924 <SystemInit+0x20>)
 8001910:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001914:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001918:	bf00      	nop
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	e000ed00 	.word	0xe000ed00

08001928 <ws2812_update>:

/**
 * @brief  直接更新LED颜色
 */
void ws2812_update(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
	// 数据缓冲，每个LED占用24个字节，共10个LED，前100个字节用于复位信号
	static uint16_t ws2812_data[RST_PERIOD_NUM + WS2812_NUM * 24];

	for (uint8_t led_id = 0; led_id < WS2812_NUM; led_id++)
 800192e:	2300      	movs	r3, #0
 8001930:	71fb      	strb	r3, [r7, #7]
 8001932:	e060      	b.n	80019f6 <ws2812_update+0xce>
	{
		_ws2812_color_current[led_id] = ws2812_color[led_id];
 8001934:	79fa      	ldrb	r2, [r7, #7]
 8001936:	79fb      	ldrb	r3, [r7, #7]
 8001938:	4936      	ldr	r1, [pc, #216]	@ (8001a14 <ws2812_update+0xec>)
 800193a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800193e:	4936      	ldr	r1, [pc, #216]	@ (8001a18 <ws2812_update+0xf0>)
 8001940:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		static uint8_t r, g, b;
		color_to_rgb(_ws2812_color_current[led_id], &r, &g, &b);
 8001944:	79fb      	ldrb	r3, [r7, #7]
 8001946:	4a34      	ldr	r2, [pc, #208]	@ (8001a18 <ws2812_update+0xf0>)
 8001948:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800194c:	4b33      	ldr	r3, [pc, #204]	@ (8001a1c <ws2812_update+0xf4>)
 800194e:	4a34      	ldr	r2, [pc, #208]	@ (8001a20 <ws2812_update+0xf8>)
 8001950:	4934      	ldr	r1, [pc, #208]	@ (8001a24 <ws2812_update+0xfc>)
 8001952:	f000 f9f1 	bl	8001d38 <color_to_rgb>
		uint16_t *p = ws2812_data + RST_PERIOD_NUM + led_id * 24;
 8001956:	79fa      	ldrb	r2, [r7, #7]
 8001958:	4613      	mov	r3, r2
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	4413      	add	r3, r2
 800195e:	011b      	lsls	r3, r3, #4
 8001960:	33c8      	adds	r3, #200	@ 0xc8
 8001962:	4a31      	ldr	r2, [pc, #196]	@ (8001a28 <ws2812_update+0x100>)
 8001964:	4413      	add	r3, r2
 8001966:	603b      	str	r3, [r7, #0]
		for (uint8_t i = 0; i < 8; i++)
 8001968:	2300      	movs	r3, #0
 800196a:	71bb      	strb	r3, [r7, #6]
 800196c:	e03d      	b.n	80019ea <ws2812_update+0xc2>
		{
			p[i] = (r << i) & (0x80) ? CODE_ONE_DUTY : CODE_ZERO_DUTY;
 800196e:	4b2d      	ldr	r3, [pc, #180]	@ (8001a24 <ws2812_update+0xfc>)
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	461a      	mov	r2, r3
 8001974:	79bb      	ldrb	r3, [r7, #6]
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <ws2812_update+0x5e>
 8001982:	2185      	movs	r1, #133	@ 0x85
 8001984:	e000      	b.n	8001988 <ws2812_update+0x60>
 8001986:	2142      	movs	r1, #66	@ 0x42
 8001988:	79bb      	ldrb	r3, [r7, #6]
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	4413      	add	r3, r2
 8001990:	460a      	mov	r2, r1
 8001992:	801a      	strh	r2, [r3, #0]
			p[i + 8] = (g << i) & (0x80) ? CODE_ONE_DUTY : CODE_ZERO_DUTY;
 8001994:	4b22      	ldr	r3, [pc, #136]	@ (8001a20 <ws2812_update+0xf8>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	461a      	mov	r2, r3
 800199a:	79bb      	ldrb	r3, [r7, #6]
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <ws2812_update+0x84>
 80019a8:	2185      	movs	r1, #133	@ 0x85
 80019aa:	e000      	b.n	80019ae <ws2812_update+0x86>
 80019ac:	2142      	movs	r1, #66	@ 0x42
 80019ae:	79bb      	ldrb	r3, [r7, #6]
 80019b0:	3308      	adds	r3, #8
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	683a      	ldr	r2, [r7, #0]
 80019b6:	4413      	add	r3, r2
 80019b8:	460a      	mov	r2, r1
 80019ba:	801a      	strh	r2, [r3, #0]
			p[i + 16] = (b << i) & (0x80) ? CODE_ONE_DUTY : CODE_ZERO_DUTY;
 80019bc:	4b17      	ldr	r3, [pc, #92]	@ (8001a1c <ws2812_update+0xf4>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	461a      	mov	r2, r3
 80019c2:	79bb      	ldrb	r3, [r7, #6]
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <ws2812_update+0xac>
 80019d0:	2185      	movs	r1, #133	@ 0x85
 80019d2:	e000      	b.n	80019d6 <ws2812_update+0xae>
 80019d4:	2142      	movs	r1, #66	@ 0x42
 80019d6:	79bb      	ldrb	r3, [r7, #6]
 80019d8:	3310      	adds	r3, #16
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	683a      	ldr	r2, [r7, #0]
 80019de:	4413      	add	r3, r2
 80019e0:	460a      	mov	r2, r1
 80019e2:	801a      	strh	r2, [r3, #0]
		for (uint8_t i = 0; i < 8; i++)
 80019e4:	79bb      	ldrb	r3, [r7, #6]
 80019e6:	3301      	adds	r3, #1
 80019e8:	71bb      	strb	r3, [r7, #6]
 80019ea:	79bb      	ldrb	r3, [r7, #6]
 80019ec:	2b07      	cmp	r3, #7
 80019ee:	d9be      	bls.n	800196e <ws2812_update+0x46>
	for (uint8_t led_id = 0; led_id < WS2812_NUM; led_id++)
 80019f0:	79fb      	ldrb	r3, [r7, #7]
 80019f2:	3301      	adds	r3, #1
 80019f4:	71fb      	strb	r3, [r7, #7]
 80019f6:	79fb      	ldrb	r3, [r7, #7]
 80019f8:	2b31      	cmp	r3, #49	@ 0x31
 80019fa:	d99b      	bls.n	8001934 <ws2812_update+0xc>
		}
	}
	HAL_TIM_PWM_Start_DMA(&WS2812TIM, TIM_CHANNEL_4, (uint32_t *)ws2812_data,
 80019fc:	f240 5314 	movw	r3, #1300	@ 0x514
 8001a00:	4a09      	ldr	r2, [pc, #36]	@ (8001a28 <ws2812_update+0x100>)
 8001a02:	210c      	movs	r1, #12
 8001a04:	4809      	ldr	r0, [pc, #36]	@ (8001a2c <ws2812_update+0x104>)
 8001a06:	f006 f965 	bl	8007cd4 <HAL_TIM_PWM_Start_DMA>
						  RST_PERIOD_NUM + WS2812_NUM * 24);
}
 8001a0a:	bf00      	nop
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	2000263c 	.word	0x2000263c
 8001a18:	20002704 	.word	0x20002704
 8001a1c:	200027ce 	.word	0x200027ce
 8001a20:	200027cd 	.word	0x200027cd
 8001a24:	200027cc 	.word	0x200027cc
 8001a28:	200027d0 	.word	0x200027d0
 8001a2c:	20000564 	.word	0x20000564

08001a30 <ws2812_gradient>:
 * @brief  通过渐变方式更新LED颜色（线性插值）
 * @param  steps: 渐变步数
 * @param  delay_ms: 每步之间的延迟时间（毫秒）
 */
void ws2812_gradient(uint8_t steps, uint16_t delay_ms)
{
 8001a30:	b590      	push	{r4, r7, lr}
 8001a32:	b089      	sub	sp, #36	@ 0x24
 8001a34:	af02      	add	r7, sp, #8
 8001a36:	4603      	mov	r3, r0
 8001a38:	460a      	mov	r2, r1
 8001a3a:	71fb      	strb	r3, [r7, #7]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	80bb      	strh	r3, [r7, #4]
	static uint8_t start_r[WS2812_NUM], start_g[WS2812_NUM], start_b[WS2812_NUM];
	static float r_step[WS2812_NUM], g_step[WS2812_NUM], b_step[WS2812_NUM];

	// 提取初始颜色，并计算每步的渐变步长
	for (uint8_t i = 0; i < WS2812_NUM; i++)
 8001a40:	2300      	movs	r3, #0
 8001a42:	75fb      	strb	r3, [r7, #23]
 8001a44:	e062      	b.n	8001b0c <ws2812_gradient+0xdc>
	{
		color_to_rgb(_ws2812_color_current[i], &start_r[i], &start_g[i], &start_b[i]);
 8001a46:	7dfb      	ldrb	r3, [r7, #23]
 8001a48:	4a6f      	ldr	r2, [pc, #444]	@ (8001c08 <ws2812_gradient+0x1d8>)
 8001a4a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001a4e:	7dfb      	ldrb	r3, [r7, #23]
 8001a50:	4a6e      	ldr	r2, [pc, #440]	@ (8001c0c <ws2812_gradient+0x1dc>)
 8001a52:	1899      	adds	r1, r3, r2
 8001a54:	7dfb      	ldrb	r3, [r7, #23]
 8001a56:	4a6e      	ldr	r2, [pc, #440]	@ (8001c10 <ws2812_gradient+0x1e0>)
 8001a58:	441a      	add	r2, r3
 8001a5a:	7dfb      	ldrb	r3, [r7, #23]
 8001a5c:	4c6d      	ldr	r4, [pc, #436]	@ (8001c14 <ws2812_gradient+0x1e4>)
 8001a5e:	4423      	add	r3, r4
 8001a60:	f000 f96a 	bl	8001d38 <color_to_rgb>
		uint8_t target_r, target_g, target_b;
		color_to_rgb(ws2812_color[i], &target_r, &target_g, &target_b);
 8001a64:	7dfb      	ldrb	r3, [r7, #23]
 8001a66:	4a6c      	ldr	r2, [pc, #432]	@ (8001c18 <ws2812_gradient+0x1e8>)
 8001a68:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001a6c:	f107 030f 	add.w	r3, r7, #15
 8001a70:	f107 0210 	add.w	r2, r7, #16
 8001a74:	f107 0111 	add.w	r1, r7, #17
 8001a78:	f000 f95e 	bl	8001d38 <color_to_rgb>

		r_step[i] = (float)(target_r - start_r[i]) / steps;
 8001a7c:	7c7b      	ldrb	r3, [r7, #17]
 8001a7e:	4619      	mov	r1, r3
 8001a80:	7dfb      	ldrb	r3, [r7, #23]
 8001a82:	4a62      	ldr	r2, [pc, #392]	@ (8001c0c <ws2812_gradient+0x1dc>)
 8001a84:	5cd3      	ldrb	r3, [r2, r3]
 8001a86:	1acb      	subs	r3, r1, r3
 8001a88:	ee07 3a90 	vmov	s15, r3
 8001a8c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a90:	79fb      	ldrb	r3, [r7, #7]
 8001a92:	ee07 3a90 	vmov	s15, r3
 8001a96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a9a:	7dfb      	ldrb	r3, [r7, #23]
 8001a9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001aa0:	4a5e      	ldr	r2, [pc, #376]	@ (8001c1c <ws2812_gradient+0x1ec>)
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	4413      	add	r3, r2
 8001aa6:	edc3 7a00 	vstr	s15, [r3]
		g_step[i] = (float)(target_g - start_g[i]) / steps;
 8001aaa:	7c3b      	ldrb	r3, [r7, #16]
 8001aac:	4619      	mov	r1, r3
 8001aae:	7dfb      	ldrb	r3, [r7, #23]
 8001ab0:	4a57      	ldr	r2, [pc, #348]	@ (8001c10 <ws2812_gradient+0x1e0>)
 8001ab2:	5cd3      	ldrb	r3, [r2, r3]
 8001ab4:	1acb      	subs	r3, r1, r3
 8001ab6:	ee07 3a90 	vmov	s15, r3
 8001aba:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001abe:	79fb      	ldrb	r3, [r7, #7]
 8001ac0:	ee07 3a90 	vmov	s15, r3
 8001ac4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ac8:	7dfb      	ldrb	r3, [r7, #23]
 8001aca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ace:	4a54      	ldr	r2, [pc, #336]	@ (8001c20 <ws2812_gradient+0x1f0>)
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	4413      	add	r3, r2
 8001ad4:	edc3 7a00 	vstr	s15, [r3]
		b_step[i] = (float)(target_b - start_b[i]) / steps;
 8001ad8:	7bfb      	ldrb	r3, [r7, #15]
 8001ada:	4619      	mov	r1, r3
 8001adc:	7dfb      	ldrb	r3, [r7, #23]
 8001ade:	4a4d      	ldr	r2, [pc, #308]	@ (8001c14 <ws2812_gradient+0x1e4>)
 8001ae0:	5cd3      	ldrb	r3, [r2, r3]
 8001ae2:	1acb      	subs	r3, r1, r3
 8001ae4:	ee07 3a90 	vmov	s15, r3
 8001ae8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001aec:	79fb      	ldrb	r3, [r7, #7]
 8001aee:	ee07 3a90 	vmov	s15, r3
 8001af2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001af6:	7dfb      	ldrb	r3, [r7, #23]
 8001af8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001afc:	4a49      	ldr	r2, [pc, #292]	@ (8001c24 <ws2812_gradient+0x1f4>)
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	4413      	add	r3, r2
 8001b02:	edc3 7a00 	vstr	s15, [r3]
	for (uint8_t i = 0; i < WS2812_NUM; i++)
 8001b06:	7dfb      	ldrb	r3, [r7, #23]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	75fb      	strb	r3, [r7, #23]
 8001b0c:	7dfb      	ldrb	r3, [r7, #23]
 8001b0e:	2b31      	cmp	r3, #49	@ 0x31
 8001b10:	d999      	bls.n	8001a46 <ws2812_gradient+0x16>
	}

	// 逐步渐变
	for (uint8_t step = 1; step <= steps; step++)
 8001b12:	2301      	movs	r3, #1
 8001b14:	75bb      	strb	r3, [r7, #22]
 8001b16:	e06d      	b.n	8001bf4 <ws2812_gradient+0x1c4>
	{
		for (uint8_t led_id = 0; led_id < WS2812_NUM; led_id++)
 8001b18:	2300      	movs	r3, #0
 8001b1a:	757b      	strb	r3, [r7, #21]
 8001b1c:	e05e      	b.n	8001bdc <ws2812_gradient+0x1ac>
		{
			// 计算当前步的颜色
			uint8_t r = (uint8_t)(start_r[led_id] + r_step[led_id] * step);
 8001b1e:	7d7b      	ldrb	r3, [r7, #21]
 8001b20:	4a3a      	ldr	r2, [pc, #232]	@ (8001c0c <ws2812_gradient+0x1dc>)
 8001b22:	5cd3      	ldrb	r3, [r2, r3]
 8001b24:	ee07 3a90 	vmov	s15, r3
 8001b28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b2c:	7d7b      	ldrb	r3, [r7, #21]
 8001b2e:	4a3b      	ldr	r2, [pc, #236]	@ (8001c1c <ws2812_gradient+0x1ec>)
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	4413      	add	r3, r2
 8001b34:	edd3 6a00 	vldr	s13, [r3]
 8001b38:	7dbb      	ldrb	r3, [r7, #22]
 8001b3a:	ee07 3a90 	vmov	s15, r3
 8001b3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b4e:	edc7 7a00 	vstr	s15, [r7]
 8001b52:	783b      	ldrb	r3, [r7, #0]
 8001b54:	753b      	strb	r3, [r7, #20]
			uint8_t g = (uint8_t)(start_g[led_id] + g_step[led_id] * step);
 8001b56:	7d7b      	ldrb	r3, [r7, #21]
 8001b58:	4a2d      	ldr	r2, [pc, #180]	@ (8001c10 <ws2812_gradient+0x1e0>)
 8001b5a:	5cd3      	ldrb	r3, [r2, r3]
 8001b5c:	ee07 3a90 	vmov	s15, r3
 8001b60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b64:	7d7b      	ldrb	r3, [r7, #21]
 8001b66:	4a2e      	ldr	r2, [pc, #184]	@ (8001c20 <ws2812_gradient+0x1f0>)
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	4413      	add	r3, r2
 8001b6c:	edd3 6a00 	vldr	s13, [r3]
 8001b70:	7dbb      	ldrb	r3, [r7, #22]
 8001b72:	ee07 3a90 	vmov	s15, r3
 8001b76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b86:	edc7 7a00 	vstr	s15, [r7]
 8001b8a:	783b      	ldrb	r3, [r7, #0]
 8001b8c:	74fb      	strb	r3, [r7, #19]
			uint8_t b = (uint8_t)(start_b[led_id] + b_step[led_id] * step);
 8001b8e:	7d7b      	ldrb	r3, [r7, #21]
 8001b90:	4a20      	ldr	r2, [pc, #128]	@ (8001c14 <ws2812_gradient+0x1e4>)
 8001b92:	5cd3      	ldrb	r3, [r2, r3]
 8001b94:	ee07 3a90 	vmov	s15, r3
 8001b98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b9c:	7d7b      	ldrb	r3, [r7, #21]
 8001b9e:	4a21      	ldr	r2, [pc, #132]	@ (8001c24 <ws2812_gradient+0x1f4>)
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	4413      	add	r3, r2
 8001ba4:	edd3 6a00 	vldr	s13, [r3]
 8001ba8:	7dbb      	ldrb	r3, [r7, #22]
 8001baa:	ee07 3a90 	vmov	s15, r3
 8001bae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bbe:	edc7 7a00 	vstr	s15, [r7]
 8001bc2:	783b      	ldrb	r3, [r7, #0]
 8001bc4:	74bb      	strb	r3, [r7, #18]

			ws2812_set_rgba(led_id, r, g, b , 255);
 8001bc6:	7cbb      	ldrb	r3, [r7, #18]
 8001bc8:	7cfa      	ldrb	r2, [r7, #19]
 8001bca:	7d39      	ldrb	r1, [r7, #20]
 8001bcc:	7d78      	ldrb	r0, [r7, #21]
 8001bce:	24ff      	movs	r4, #255	@ 0xff
 8001bd0:	9400      	str	r4, [sp, #0]
 8001bd2:	f000 f8cd 	bl	8001d70 <ws2812_set_rgba>
		for (uint8_t led_id = 0; led_id < WS2812_NUM; led_id++)
 8001bd6:	7d7b      	ldrb	r3, [r7, #21]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	757b      	strb	r3, [r7, #21]
 8001bdc:	7d7b      	ldrb	r3, [r7, #21]
 8001bde:	2b31      	cmp	r3, #49	@ 0x31
 8001be0:	d99d      	bls.n	8001b1e <ws2812_gradient+0xee>
		}

		ws2812_update();
 8001be2:	f7ff fea1 	bl	8001928 <ws2812_update>
		HAL_Delay(delay_ms);
 8001be6:	88bb      	ldrh	r3, [r7, #4]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f000 fa4f 	bl	800208c <HAL_Delay>
	for (uint8_t step = 1; step <= steps; step++)
 8001bee:	7dbb      	ldrb	r3, [r7, #22]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	75bb      	strb	r3, [r7, #22]
 8001bf4:	7dba      	ldrb	r2, [r7, #22]
 8001bf6:	79fb      	ldrb	r3, [r7, #7]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d98d      	bls.n	8001b18 <ws2812_gradient+0xe8>
	}
}
 8001bfc:	bf00      	nop
 8001bfe:	bf00      	nop
 8001c00:	371c      	adds	r7, #28
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd90      	pop	{r4, r7, pc}
 8001c06:	bf00      	nop
 8001c08:	20002704 	.word	0x20002704
 8001c0c:	200031f8 	.word	0x200031f8
 8001c10:	2000322c 	.word	0x2000322c
 8001c14:	20003260 	.word	0x20003260
 8001c18:	2000263c 	.word	0x2000263c
 8001c1c:	20003294 	.word	0x20003294
 8001c20:	2000335c 	.word	0x2000335c
 8001c24:	20003424 	.word	0x20003424

08001c28 <ws2812_set_24bit>:
 * @brief  设置LED颜色（24bit颜色格式）
 * @param  led_id: LED编号（学习板一共有10个LED，编号范围0-9）
 * @param  color: 24bit颜色
 */
void ws2812_set_24bit(uint8_t led_id, uint32_t color)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	4603      	mov	r3, r0
 8001c30:	6039      	str	r1, [r7, #0]
 8001c32:	71fb      	strb	r3, [r7, #7]
	ws2812_color[led_id] = color;
 8001c34:	79fb      	ldrb	r3, [r7, #7]
 8001c36:	4905      	ldr	r1, [pc, #20]	@ (8001c4c <ws2812_set_24bit+0x24>)
 8001c38:	683a      	ldr	r2, [r7, #0]
 8001c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	2000263c 	.word	0x2000263c

08001c50 <ws2812_set_all>:
/**
 * @brief  设置所有LED颜色（24bit颜色格式）
 * @param  color: 24bit颜色
 */
void ws2812_set_all(uint32_t color)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
	for (uint8_t led_id = 0; led_id < WS2812_NUM; led_id++)
 8001c58:	2300      	movs	r3, #0
 8001c5a:	73fb      	strb	r3, [r7, #15]
 8001c5c:	e007      	b.n	8001c6e <ws2812_set_all+0x1e>
	{
		ws2812_color[led_id] = color;
 8001c5e:	7bfb      	ldrb	r3, [r7, #15]
 8001c60:	4908      	ldr	r1, [pc, #32]	@ (8001c84 <ws2812_set_all+0x34>)
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (uint8_t led_id = 0; led_id < WS2812_NUM; led_id++)
 8001c68:	7bfb      	ldrb	r3, [r7, #15]
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	73fb      	strb	r3, [r7, #15]
 8001c6e:	7bfb      	ldrb	r3, [r7, #15]
 8001c70:	2b31      	cmp	r3, #49	@ 0x31
 8001c72:	d9f4      	bls.n	8001c5e <ws2812_set_all+0xe>
	}
}
 8001c74:	bf00      	nop
 8001c76:	bf00      	nop
 8001c78:	3714      	adds	r7, #20
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	2000263c 	.word	0x2000263c

08001c88 <rgb_to_color>:
 * @param  g: 绿色亮度（0-255）
 * @param  b: 蓝色亮度（0-255）
 * @retval 24bit颜色
 */
uint32_t rgb_to_color(uint8_t r, uint8_t g, uint8_t b)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	71fb      	strb	r3, [r7, #7]
 8001c92:	460b      	mov	r3, r1
 8001c94:	71bb      	strb	r3, [r7, #6]
 8001c96:	4613      	mov	r3, r2
 8001c98:	717b      	strb	r3, [r7, #5]
	return (r << 16) | (g << 8) | b;
 8001c9a:	79fb      	ldrb	r3, [r7, #7]
 8001c9c:	041a      	lsls	r2, r3, #16
 8001c9e:	79bb      	ldrb	r3, [r7, #6]
 8001ca0:	021b      	lsls	r3, r3, #8
 8001ca2:	431a      	orrs	r2, r3
 8001ca4:	797b      	ldrb	r3, [r7, #5]
 8001ca6:	4313      	orrs	r3, r2
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <rgba_to_color>:
 * @param  b: 蓝色亮度（0-255）
 * @param  a: 透明度  （0-255）
 * @retval 24bit颜色
 */
uint32_t rgba_to_color(uint8_t r, uint8_t g, uint8_t b, uint8_t a)
{
 8001cb4:	b490      	push	{r4, r7}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4604      	mov	r4, r0
 8001cbc:	4608      	mov	r0, r1
 8001cbe:	4611      	mov	r1, r2
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	4623      	mov	r3, r4
 8001cc4:	71fb      	strb	r3, [r7, #7]
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	71bb      	strb	r3, [r7, #6]
 8001cca:	460b      	mov	r3, r1
 8001ccc:	717b      	strb	r3, [r7, #5]
 8001cce:	4613      	mov	r3, r2
 8001cd0:	713b      	strb	r3, [r7, #4]
	r=r*a/255;
 8001cd2:	79fb      	ldrb	r3, [r7, #7]
 8001cd4:	793a      	ldrb	r2, [r7, #4]
 8001cd6:	fb02 f303 	mul.w	r3, r2, r3
 8001cda:	4a16      	ldr	r2, [pc, #88]	@ (8001d34 <rgba_to_color+0x80>)
 8001cdc:	fb82 1203 	smull	r1, r2, r2, r3
 8001ce0:	441a      	add	r2, r3
 8001ce2:	11d2      	asrs	r2, r2, #7
 8001ce4:	17db      	asrs	r3, r3, #31
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	71fb      	strb	r3, [r7, #7]
	g=g*a/255;
 8001cea:	79bb      	ldrb	r3, [r7, #6]
 8001cec:	793a      	ldrb	r2, [r7, #4]
 8001cee:	fb02 f303 	mul.w	r3, r2, r3
 8001cf2:	4a10      	ldr	r2, [pc, #64]	@ (8001d34 <rgba_to_color+0x80>)
 8001cf4:	fb82 1203 	smull	r1, r2, r2, r3
 8001cf8:	441a      	add	r2, r3
 8001cfa:	11d2      	asrs	r2, r2, #7
 8001cfc:	17db      	asrs	r3, r3, #31
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	71bb      	strb	r3, [r7, #6]
	b=b*a/255;
 8001d02:	797b      	ldrb	r3, [r7, #5]
 8001d04:	793a      	ldrb	r2, [r7, #4]
 8001d06:	fb02 f303 	mul.w	r3, r2, r3
 8001d0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d34 <rgba_to_color+0x80>)
 8001d0c:	fb82 1203 	smull	r1, r2, r2, r3
 8001d10:	441a      	add	r2, r3
 8001d12:	11d2      	asrs	r2, r2, #7
 8001d14:	17db      	asrs	r3, r3, #31
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	717b      	strb	r3, [r7, #5]
	return (r << 16) | (g << 8) | b;
 8001d1a:	79fb      	ldrb	r3, [r7, #7]
 8001d1c:	041a      	lsls	r2, r3, #16
 8001d1e:	79bb      	ldrb	r3, [r7, #6]
 8001d20:	021b      	lsls	r3, r3, #8
 8001d22:	431a      	orrs	r2, r3
 8001d24:	797b      	ldrb	r3, [r7, #5]
 8001d26:	4313      	orrs	r3, r2
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bc90      	pop	{r4, r7}
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	80808081 	.word	0x80808081

08001d38 <color_to_rgb>:
 * @param  r: 红色亮度（0-255）
 * @param  g: 绿色亮度（0-255）
 * @param  b: 蓝色亮度（0-255）
 */
void color_to_rgb(uint32_t color, uint8_t *r, uint8_t *g, uint8_t *b)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	607a      	str	r2, [r7, #4]
 8001d44:	603b      	str	r3, [r7, #0]
	*r = (color >> 16) & 0xFF;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	0c1b      	lsrs	r3, r3, #16
 8001d4a:	b2da      	uxtb	r2, r3
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	701a      	strb	r2, [r3, #0]
	*g = (color >> 8) & 0xFF;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	0a1b      	lsrs	r3, r3, #8
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	701a      	strb	r2, [r3, #0]
	*b = color & 0xFF;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	b2da      	uxtb	r2, r3
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	701a      	strb	r2, [r3, #0]
}
 8001d62:	bf00      	nop
 8001d64:	3714      	adds	r7, #20
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
	...

08001d70 <ws2812_set_rgba>:
 * @param  g: 绿色亮度（0-255）
 * @param  b: 蓝色亮度（0-255）
 * @param  a: 透明度  （0-255）
 */
void ws2812_set_rgba(uint8_t led_id, uint8_t r, uint8_t g, uint8_t b, uint8_t a)
{
 8001d70:	b590      	push	{r4, r7, lr}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4604      	mov	r4, r0
 8001d78:	4608      	mov	r0, r1
 8001d7a:	4611      	mov	r1, r2
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	4623      	mov	r3, r4
 8001d80:	71fb      	strb	r3, [r7, #7]
 8001d82:	4603      	mov	r3, r0
 8001d84:	71bb      	strb	r3, [r7, #6]
 8001d86:	460b      	mov	r3, r1
 8001d88:	717b      	strb	r3, [r7, #5]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	713b      	strb	r3, [r7, #4]
	ws2812_color[led_id] = rgba_to_color(r, g, b, a);
 8001d8e:	79fc      	ldrb	r4, [r7, #7]
 8001d90:	7e3b      	ldrb	r3, [r7, #24]
 8001d92:	793a      	ldrb	r2, [r7, #4]
 8001d94:	7979      	ldrb	r1, [r7, #5]
 8001d96:	79b8      	ldrb	r0, [r7, #6]
 8001d98:	f7ff ff8c 	bl	8001cb4 <rgba_to_color>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	4a03      	ldr	r2, [pc, #12]	@ (8001dac <ws2812_set_rgba+0x3c>)
 8001da0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd90      	pop	{r4, r7, pc}
 8001dac:	2000263c 	.word	0x2000263c

08001db0 <rainbow_color>:
}

// =============== 以下为额外的效果演示函数 ================

uint32_t rainbow_color(float frequency, int phase, int center, int width)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b08a      	sub	sp, #40	@ 0x28
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	ed87 0a05 	vstr	s0, [r7, #20]
 8001dba:	6138      	str	r0, [r7, #16]
 8001dbc:	60f9      	str	r1, [r7, #12]
 8001dbe:	60ba      	str	r2, [r7, #8]
	float r = sinf(frequency * phase + 0) * width + center;
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	ee07 3a90 	vmov	s15, r3
 8001dc6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dca:	edd7 7a05 	vldr	s15, [r7, #20]
 8001dce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dd2:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8001ed4 <rainbow_color+0x124>
 8001dd6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001dda:	eeb0 0a67 	vmov.f32	s0, s15
 8001dde:	f00d fafd 	bl	800f3dc <sinf>
 8001de2:	eeb0 7a40 	vmov.f32	s14, s0
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	ee07 3a90 	vmov	s15, r3
 8001dec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001df0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	ee07 3a90 	vmov	s15, r3
 8001dfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e02:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	float g = sinf(frequency * phase + 2) * width + center;
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	ee07 3a90 	vmov	s15, r3
 8001e0c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e10:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e18:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001e1c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e20:	eeb0 0a67 	vmov.f32	s0, s15
 8001e24:	f00d fada 	bl	800f3dc <sinf>
 8001e28:	eeb0 7a40 	vmov.f32	s14, s0
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	ee07 3a90 	vmov	s15, r3
 8001e32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	ee07 3a90 	vmov	s15, r3
 8001e40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e48:	edc7 7a08 	vstr	s15, [r7, #32]
	float b = sinf(frequency * phase + 4) * width + center;
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	ee07 3a90 	vmov	s15, r3
 8001e52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e56:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e5e:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001e62:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e66:	eeb0 0a67 	vmov.f32	s0, s15
 8001e6a:	f00d fab7 	bl	800f3dc <sinf>
 8001e6e:	eeb0 7a40 	vmov.f32	s14, s0
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	ee07 3a90 	vmov	s15, r3
 8001e78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	ee07 3a90 	vmov	s15, r3
 8001e86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e8e:	edc7 7a07 	vstr	s15, [r7, #28]
	return rgb_to_color((uint8_t)r, (uint8_t)g, (uint8_t)b);
 8001e92:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001e96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e9a:	edc7 7a01 	vstr	s15, [r7, #4]
 8001e9e:	793b      	ldrb	r3, [r7, #4]
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	edd7 7a08 	vldr	s15, [r7, #32]
 8001ea6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001eaa:	edc7 7a01 	vstr	s15, [r7, #4]
 8001eae:	793a      	ldrb	r2, [r7, #4]
 8001eb0:	b2d1      	uxtb	r1, r2
 8001eb2:	edd7 7a07 	vldr	s15, [r7, #28]
 8001eb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001eba:	edc7 7a01 	vstr	s15, [r7, #4]
 8001ebe:	793a      	ldrb	r2, [r7, #4]
 8001ec0:	b2d2      	uxtb	r2, r2
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff fee0 	bl	8001c88 <rgb_to_color>
 8001ec8:	4603      	mov	r3, r0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3728      	adds	r7, #40	@ 0x28
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	00000000 	.word	0x00000000

08001ed8 <rainbow_effect>:

void rainbow_effect(uint8_t steps, uint16_t delay_ms)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b088      	sub	sp, #32
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	4603      	mov	r3, r0
 8001ee0:	460a      	mov	r2, r1
 8001ee2:	71fb      	strb	r3, [r7, #7]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	80bb      	strh	r3, [r7, #4]
	float frequency = 0.1;
 8001ee8:	4b1a      	ldr	r3, [pc, #104]	@ (8001f54 <rainbow_effect+0x7c>)
 8001eea:	617b      	str	r3, [r7, #20]
	int center = 128;
 8001eec:	2380      	movs	r3, #128	@ 0x80
 8001eee:	613b      	str	r3, [r7, #16]
	int width = 127;
 8001ef0:	237f      	movs	r3, #127	@ 0x7f
 8001ef2:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < steps; i++)
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	61fb      	str	r3, [r7, #28]
 8001ef8:	e022      	b.n	8001f40 <rainbow_effect+0x68>
	{
		for (uint8_t led_id = 0; led_id < WS2812_NUM; led_id++)
 8001efa:	2300      	movs	r3, #0
 8001efc:	76fb      	strb	r3, [r7, #27]
 8001efe:	e013      	b.n	8001f28 <rainbow_effect+0x50>
		{
			uint32_t color = rainbow_color(frequency, i + led_id * 2, center, width);
 8001f00:	7efb      	ldrb	r3, [r7, #27]
 8001f02:	005a      	lsls	r2, r3, #1
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	4413      	add	r3, r2
 8001f08:	68fa      	ldr	r2, [r7, #12]
 8001f0a:	6939      	ldr	r1, [r7, #16]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	ed97 0a05 	vldr	s0, [r7, #20]
 8001f12:	f7ff ff4d 	bl	8001db0 <rainbow_color>
 8001f16:	60b8      	str	r0, [r7, #8]
			ws2812_set_24bit(led_id, color);
 8001f18:	7efb      	ldrb	r3, [r7, #27]
 8001f1a:	68b9      	ldr	r1, [r7, #8]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff fe83 	bl	8001c28 <ws2812_set_24bit>
		for (uint8_t led_id = 0; led_id < WS2812_NUM; led_id++)
 8001f22:	7efb      	ldrb	r3, [r7, #27]
 8001f24:	3301      	adds	r3, #1
 8001f26:	76fb      	strb	r3, [r7, #27]
 8001f28:	7efb      	ldrb	r3, [r7, #27]
 8001f2a:	2b31      	cmp	r3, #49	@ 0x31
 8001f2c:	d9e8      	bls.n	8001f00 <rainbow_effect+0x28>
		}
		ws2812_update();
 8001f2e:	f7ff fcfb 	bl	8001928 <ws2812_update>
		HAL_Delay(delay_ms);
 8001f32:	88bb      	ldrh	r3, [r7, #4]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f000 f8a9 	bl	800208c <HAL_Delay>
	for (int i = 0; i < steps; i++)
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	61fb      	str	r3, [r7, #28]
 8001f40:	79fb      	ldrb	r3, [r7, #7]
 8001f42:	69fa      	ldr	r2, [r7, #28]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	dbd8      	blt.n	8001efa <rainbow_effect+0x22>
	}
}
 8001f48:	bf00      	nop
 8001f4a:	bf00      	nop
 8001f4c:	3720      	adds	r7, #32
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	3dcccccd 	.word	0x3dcccccd

08001f58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f58:	480d      	ldr	r0, [pc, #52]	@ (8001f90 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f5a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f5c:	f7ff fcd2 	bl	8001904 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f60:	480c      	ldr	r0, [pc, #48]	@ (8001f94 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f62:	490d      	ldr	r1, [pc, #52]	@ (8001f98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f64:	4a0d      	ldr	r2, [pc, #52]	@ (8001f9c <LoopForever+0xe>)
  movs r3, #0
 8001f66:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001f68:	e002      	b.n	8001f70 <LoopCopyDataInit>

08001f6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f6e:	3304      	adds	r3, #4

08001f70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f74:	d3f9      	bcc.n	8001f6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f76:	4a0a      	ldr	r2, [pc, #40]	@ (8001fa0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f78:	4c0a      	ldr	r4, [pc, #40]	@ (8001fa4 <LoopForever+0x16>)
  movs r3, #0
 8001f7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f7c:	e001      	b.n	8001f82 <LoopFillZerobss>

08001f7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f80:	3204      	adds	r2, #4

08001f82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f84:	d3fb      	bcc.n	8001f7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f86:	f00c fdb7 	bl	800eaf8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f8a:	f7fe f999 	bl	80002c0 <main>

08001f8e <LoopForever>:

LoopForever:
    b LoopForever
 8001f8e:	e7fe      	b.n	8001f8e <LoopForever>
  ldr   r0, =_estack
 8001f90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f98:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001f9c:	080102f0 	.word	0x080102f0
  ldr r2, =_sbss
 8001fa0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001fa4:	20005008 	.word	0x20005008

08001fa8 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fa8:	e7fe      	b.n	8001fa8 <ADC3_IRQHandler>

08001faa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b082      	sub	sp, #8
 8001fae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fb4:	2003      	movs	r0, #3
 8001fb6:	f001 ffc9 	bl	8003f4c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fba:	200f      	movs	r0, #15
 8001fbc:	f000 f80e 	bl	8001fdc <HAL_InitTick>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d002      	beq.n	8001fcc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	71fb      	strb	r3, [r7, #7]
 8001fca:	e001      	b.n	8001fd0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001fcc:	f7ff f880 	bl	80010d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001fd0:	79fb      	ldrb	r3, [r7, #7]

}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
	...

08001fdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001fe8:	4b16      	ldr	r3, [pc, #88]	@ (8002044 <HAL_InitTick+0x68>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d022      	beq.n	8002036 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001ff0:	4b15      	ldr	r3, [pc, #84]	@ (8002048 <HAL_InitTick+0x6c>)
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	4b13      	ldr	r3, [pc, #76]	@ (8002044 <HAL_InitTick+0x68>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001ffc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002000:	fbb2 f3f3 	udiv	r3, r2, r3
 8002004:	4618      	mov	r0, r3
 8002006:	f001 ffd4 	bl	8003fb2 <HAL_SYSTICK_Config>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d10f      	bne.n	8002030 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2b0f      	cmp	r3, #15
 8002014:	d809      	bhi.n	800202a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002016:	2200      	movs	r2, #0
 8002018:	6879      	ldr	r1, [r7, #4]
 800201a:	f04f 30ff 	mov.w	r0, #4294967295
 800201e:	f001 ffa0 	bl	8003f62 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002022:	4a0a      	ldr	r2, [pc, #40]	@ (800204c <HAL_InitTick+0x70>)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6013      	str	r3, [r2, #0]
 8002028:	e007      	b.n	800203a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	73fb      	strb	r3, [r7, #15]
 800202e:	e004      	b.n	800203a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	73fb      	strb	r3, [r7, #15]
 8002034:	e001      	b.n	800203a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800203a:	7bfb      	ldrb	r3, [r7, #15]
}
 800203c:	4618      	mov	r0, r3
 800203e:	3710      	adds	r7, #16
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	20000008 	.word	0x20000008
 8002048:	20000000 	.word	0x20000000
 800204c:	20000004 	.word	0x20000004

08002050 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002054:	4b05      	ldr	r3, [pc, #20]	@ (800206c <HAL_IncTick+0x1c>)
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	4b05      	ldr	r3, [pc, #20]	@ (8002070 <HAL_IncTick+0x20>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4413      	add	r3, r2
 800205e:	4a03      	ldr	r2, [pc, #12]	@ (800206c <HAL_IncTick+0x1c>)
 8002060:	6013      	str	r3, [r2, #0]
}
 8002062:	bf00      	nop
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	200034ec 	.word	0x200034ec
 8002070:	20000008 	.word	0x20000008

08002074 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  return uwTick;
 8002078:	4b03      	ldr	r3, [pc, #12]	@ (8002088 <HAL_GetTick+0x14>)
 800207a:	681b      	ldr	r3, [r3, #0]
}
 800207c:	4618      	mov	r0, r3
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	200034ec 	.word	0x200034ec

0800208c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002094:	f7ff ffee 	bl	8002074 <HAL_GetTick>
 8002098:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020a4:	d004      	beq.n	80020b0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80020a6:	4b09      	ldr	r3, [pc, #36]	@ (80020cc <HAL_Delay+0x40>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	4413      	add	r3, r2
 80020ae:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020b0:	bf00      	nop
 80020b2:	f7ff ffdf 	bl	8002074 <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	68fa      	ldr	r2, [r7, #12]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d8f7      	bhi.n	80020b2 <HAL_Delay+0x26>
  {
  }
}
 80020c2:	bf00      	nop
 80020c4:	bf00      	nop
 80020c6:	3710      	adds	r7, #16
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	20000008 	.word	0x20000008

080020d0 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE2: VREFBUF_OUT around 2.9 V.
  *                                                This requires VDDA equal to or higher than 3.15 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 80020d8:	4b06      	ldr	r3, [pc, #24]	@ (80020f4 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80020e0:	4904      	ldr	r1, [pc, #16]	@ (80020f4 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	600b      	str	r3, [r1, #0]
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr
 80020f4:	40010030 	.word	0x40010030

080020f8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8002100:	4b06      	ldr	r3, [pc, #24]	@ (800211c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f023 0202 	bic.w	r2, r3, #2
 8002108:	4904      	ldr	r1, [pc, #16]	@ (800211c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4313      	orrs	r3, r2
 800210e:	600b      	str	r3, [r1, #0]
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr
 800211c:	40010030 	.word	0x40010030

08002120 <HAL_SYSCFG_VREFBUF_TrimmingConfig>:
  * @param TrimmingValue specifies trimming code for VREFBUF calibration
  *        This parameter can be a number between Min_Data = 0x00 and Max_Data = 0x3F
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_TrimmingConfig(uint32_t TrimmingValue)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_TRIMMING(TrimmingValue));

  MODIFY_REG(VREFBUF->CCR, VREFBUF_CCR_TRIM, TrimmingValue);
 8002128:	4b06      	ldr	r3, [pc, #24]	@ (8002144 <HAL_SYSCFG_VREFBUF_TrimmingConfig+0x24>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8002130:	4904      	ldr	r1, [pc, #16]	@ (8002144 <HAL_SYSCFG_VREFBUF_TrimmingConfig+0x24>)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4313      	orrs	r3, r2
 8002136:	604b      	str	r3, [r1, #4]
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	40010030 	.word	0x40010030

08002148 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 800214e:	4b0f      	ldr	r3, [pc, #60]	@ (800218c <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a0e      	ldr	r2, [pc, #56]	@ (800218c <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8002154:	f043 0301 	orr.w	r3, r3, #1
 8002158:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800215a:	f7ff ff8b 	bl	8002074 <HAL_GetTick>
 800215e:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8002160:	e008      	b.n	8002174 <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 8002162:	f7ff ff87 	bl	8002074 <HAL_GetTick>
 8002166:	4602      	mov	r2, r0
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	2b0a      	cmp	r3, #10
 800216e:	d901      	bls.n	8002174 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e006      	b.n	8002182 <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8002174:	4b05      	ldr	r3, [pc, #20]	@ (800218c <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0308 	and.w	r3, r3, #8
 800217c:	2b00      	cmp	r3, #0
 800217e:	d0f0      	beq.n	8002162 <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40010030 	.word	0x40010030

08002190 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	431a      	orrs	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	609a      	str	r2, [r3, #8]
}
 80021aa:	bf00      	nop
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr

080021b6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80021b6:	b480      	push	{r7}
 80021b8:	b083      	sub	sp, #12
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
 80021be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	431a      	orrs	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	609a      	str	r2, [r3, #8]
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b087      	sub	sp, #28
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]
 8002204:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	3360      	adds	r3, #96	@ 0x60
 800220a:	461a      	mov	r2, r3
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	4413      	add	r3, r2
 8002212:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	4b08      	ldr	r3, [pc, #32]	@ (800223c <LL_ADC_SetOffset+0x44>)
 800221a:	4013      	ands	r3, r2
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	430a      	orrs	r2, r1
 8002226:	4313      	orrs	r3, r2
 8002228:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002230:	bf00      	nop
 8002232:	371c      	adds	r7, #28
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	03fff000 	.word	0x03fff000

08002240 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	3360      	adds	r3, #96	@ 0x60
 800224e:	461a      	mov	r2, r3
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	4413      	add	r3, r2
 8002256:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002260:	4618      	mov	r0, r3
 8002262:	3714      	adds	r7, #20
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800226c:	b480      	push	{r7}
 800226e:	b087      	sub	sp, #28
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	3360      	adds	r3, #96	@ 0x60
 800227c:	461a      	mov	r2, r3
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	4413      	add	r3, r2
 8002284:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	431a      	orrs	r2, r3
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002296:	bf00      	nop
 8002298:	371c      	adds	r7, #28
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr

080022a2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80022a2:	b480      	push	{r7}
 80022a4:	b087      	sub	sp, #28
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	60f8      	str	r0, [r7, #12]
 80022aa:	60b9      	str	r1, [r7, #8]
 80022ac:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	3360      	adds	r3, #96	@ 0x60
 80022b2:	461a      	mov	r2, r3
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	4413      	add	r3, r2
 80022ba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	431a      	orrs	r2, r3
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80022cc:	bf00      	nop
 80022ce:	371c      	adds	r7, #28
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80022d8:	b480      	push	{r7}
 80022da:	b087      	sub	sp, #28
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	3360      	adds	r3, #96	@ 0x60
 80022e8:	461a      	mov	r2, r3
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	4413      	add	r3, r2
 80022f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	431a      	orrs	r2, r3
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002302:	bf00      	nop
 8002304:	371c      	adds	r7, #28
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr

0800230e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800230e:	b480      	push	{r7}
 8002310:	b083      	sub	sp, #12
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
 8002316:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	695b      	ldr	r3, [r3, #20]
 800231c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	431a      	orrs	r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	615a      	str	r2, [r3, #20]
}
 8002328:	bf00      	nop
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002344:	2b00      	cmp	r3, #0
 8002346:	d101      	bne.n	800234c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002348:	2301      	movs	r3, #1
 800234a:	e000      	b.n	800234e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr

0800235a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800235a:	b480      	push	{r7}
 800235c:	b087      	sub	sp, #28
 800235e:	af00      	add	r7, sp, #0
 8002360:	60f8      	str	r0, [r7, #12]
 8002362:	60b9      	str	r1, [r7, #8]
 8002364:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	3330      	adds	r3, #48	@ 0x30
 800236a:	461a      	mov	r2, r3
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	0a1b      	lsrs	r3, r3, #8
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	f003 030c 	and.w	r3, r3, #12
 8002376:	4413      	add	r3, r2
 8002378:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	f003 031f 	and.w	r3, r3, #31
 8002384:	211f      	movs	r1, #31
 8002386:	fa01 f303 	lsl.w	r3, r1, r3
 800238a:	43db      	mvns	r3, r3
 800238c:	401a      	ands	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	0e9b      	lsrs	r3, r3, #26
 8002392:	f003 011f 	and.w	r1, r3, #31
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	f003 031f 	and.w	r3, r3, #31
 800239c:	fa01 f303 	lsl.w	r3, r1, r3
 80023a0:	431a      	orrs	r2, r3
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80023a6:	bf00      	nop
 80023a8:	371c      	adds	r7, #28
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr

080023b2 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80023b2:	b480      	push	{r7}
 80023b4:	b083      	sub	sp, #12
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023be:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80023c6:	2301      	movs	r3, #1
 80023c8:	e000      	b.n	80023cc <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80023ca:	2300      	movs	r3, #0
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80023d8:	b480      	push	{r7}
 80023da:	b087      	sub	sp, #28
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	3314      	adds	r3, #20
 80023e8:	461a      	mov	r2, r3
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	0e5b      	lsrs	r3, r3, #25
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	f003 0304 	and.w	r3, r3, #4
 80023f4:	4413      	add	r3, r2
 80023f6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	0d1b      	lsrs	r3, r3, #20
 8002400:	f003 031f 	and.w	r3, r3, #31
 8002404:	2107      	movs	r1, #7
 8002406:	fa01 f303 	lsl.w	r3, r1, r3
 800240a:	43db      	mvns	r3, r3
 800240c:	401a      	ands	r2, r3
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	0d1b      	lsrs	r3, r3, #20
 8002412:	f003 031f 	and.w	r3, r3, #31
 8002416:	6879      	ldr	r1, [r7, #4]
 8002418:	fa01 f303 	lsl.w	r3, r1, r3
 800241c:	431a      	orrs	r2, r3
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002422:	bf00      	nop
 8002424:	371c      	adds	r7, #28
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
	...

08002430 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002448:	43db      	mvns	r3, r3
 800244a:	401a      	ands	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f003 0318 	and.w	r3, r3, #24
 8002452:	4908      	ldr	r1, [pc, #32]	@ (8002474 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002454:	40d9      	lsrs	r1, r3
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	400b      	ands	r3, r1
 800245a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800245e:	431a      	orrs	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002466:	bf00      	nop
 8002468:	3714      	adds	r7, #20
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	0007ffff 	.word	0x0007ffff

08002478 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f003 031f 	and.w	r3, r3, #31
}
 8002488:	4618      	mov	r0, r3
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80024c0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	6093      	str	r3, [r2, #8]
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80024e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80024e8:	d101      	bne.n	80024ee <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80024ea:	2301      	movs	r3, #1
 80024ec:	e000      	b.n	80024f0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80024ee:	2300      	movs	r3, #0
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800250c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002510:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002518:	bf00      	nop
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002534:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002538:	d101      	bne.n	800253e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800253a:	2301      	movs	r3, #1
 800253c:	e000      	b.n	8002540 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800253e:	2300      	movs	r3, #0
}
 8002540:	4618      	mov	r0, r3
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800255c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002560:	f043 0201 	orr.w	r2, r3, #1
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	2b01      	cmp	r3, #1
 8002586:	d101      	bne.n	800258c <LL_ADC_IsEnabled+0x18>
 8002588:	2301      	movs	r3, #1
 800258a:	e000      	b.n	800258e <LL_ADC_IsEnabled+0x1a>
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr

0800259a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800259a:	b480      	push	{r7}
 800259c:	b083      	sub	sp, #12
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80025aa:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80025ae:	f043 0204 	orr.w	r2, r3, #4
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80025b6:	bf00      	nop
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr

080025c2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80025c2:	b480      	push	{r7}
 80025c4:	b083      	sub	sp, #12
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f003 0304 	and.w	r3, r3, #4
 80025d2:	2b04      	cmp	r3, #4
 80025d4:	d101      	bne.n	80025da <LL_ADC_REG_IsConversionOngoing+0x18>
 80025d6:	2301      	movs	r3, #1
 80025d8:	e000      	b.n	80025dc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f003 0308 	and.w	r3, r3, #8
 80025f8:	2b08      	cmp	r3, #8
 80025fa:	d101      	bne.n	8002600 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80025fc:	2301      	movs	r3, #1
 80025fe:	e000      	b.n	8002602 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
	...

08002610 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002610:	b590      	push	{r4, r7, lr}
 8002612:	b089      	sub	sp, #36	@ 0x24
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002618:	2300      	movs	r3, #0
 800261a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800261c:	2300      	movs	r3, #0
 800261e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e1a9      	b.n	800297e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	695b      	ldr	r3, [r3, #20]
 800262e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002634:	2b00      	cmp	r3, #0
 8002636:	d109      	bne.n	800264c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f7fe fd77 	bl	800112c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4618      	mov	r0, r3
 8002652:	f7ff ff3f 	bl	80024d4 <LL_ADC_IsDeepPowerDownEnabled>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d004      	beq.n	8002666 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4618      	mov	r0, r3
 8002662:	f7ff ff25 	bl	80024b0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4618      	mov	r0, r3
 800266c:	f7ff ff5a 	bl	8002524 <LL_ADC_IsInternalRegulatorEnabled>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d115      	bne.n	80026a2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4618      	mov	r0, r3
 800267c:	f7ff ff3e 	bl	80024fc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002680:	4b9c      	ldr	r3, [pc, #624]	@ (80028f4 <HAL_ADC_Init+0x2e4>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	099b      	lsrs	r3, r3, #6
 8002686:	4a9c      	ldr	r2, [pc, #624]	@ (80028f8 <HAL_ADC_Init+0x2e8>)
 8002688:	fba2 2303 	umull	r2, r3, r2, r3
 800268c:	099b      	lsrs	r3, r3, #6
 800268e:	3301      	adds	r3, #1
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002694:	e002      	b.n	800269c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	3b01      	subs	r3, #1
 800269a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1f9      	bne.n	8002696 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7ff ff3c 	bl	8002524 <LL_ADC_IsInternalRegulatorEnabled>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10d      	bne.n	80026ce <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026b6:	f043 0210 	orr.w	r2, r3, #16
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026c2:	f043 0201 	orr.w	r2, r3, #1
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7ff ff75 	bl	80025c2 <LL_ADC_REG_IsConversionOngoing>
 80026d8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026de:	f003 0310 	and.w	r3, r3, #16
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f040 8142 	bne.w	800296c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	f040 813e 	bne.w	800296c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026f4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80026f8:	f043 0202 	orr.w	r2, r3, #2
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff ff35 	bl	8002574 <LL_ADC_IsEnabled>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d141      	bne.n	8002794 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002718:	d004      	beq.n	8002724 <HAL_ADC_Init+0x114>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a77      	ldr	r2, [pc, #476]	@ (80028fc <HAL_ADC_Init+0x2ec>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d10f      	bne.n	8002744 <HAL_ADC_Init+0x134>
 8002724:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002728:	f7ff ff24 	bl	8002574 <LL_ADC_IsEnabled>
 800272c:	4604      	mov	r4, r0
 800272e:	4873      	ldr	r0, [pc, #460]	@ (80028fc <HAL_ADC_Init+0x2ec>)
 8002730:	f7ff ff20 	bl	8002574 <LL_ADC_IsEnabled>
 8002734:	4603      	mov	r3, r0
 8002736:	4323      	orrs	r3, r4
 8002738:	2b00      	cmp	r3, #0
 800273a:	bf0c      	ite	eq
 800273c:	2301      	moveq	r3, #1
 800273e:	2300      	movne	r3, #0
 8002740:	b2db      	uxtb	r3, r3
 8002742:	e012      	b.n	800276a <HAL_ADC_Init+0x15a>
 8002744:	486e      	ldr	r0, [pc, #440]	@ (8002900 <HAL_ADC_Init+0x2f0>)
 8002746:	f7ff ff15 	bl	8002574 <LL_ADC_IsEnabled>
 800274a:	4604      	mov	r4, r0
 800274c:	486d      	ldr	r0, [pc, #436]	@ (8002904 <HAL_ADC_Init+0x2f4>)
 800274e:	f7ff ff11 	bl	8002574 <LL_ADC_IsEnabled>
 8002752:	4603      	mov	r3, r0
 8002754:	431c      	orrs	r4, r3
 8002756:	486c      	ldr	r0, [pc, #432]	@ (8002908 <HAL_ADC_Init+0x2f8>)
 8002758:	f7ff ff0c 	bl	8002574 <LL_ADC_IsEnabled>
 800275c:	4603      	mov	r3, r0
 800275e:	4323      	orrs	r3, r4
 8002760:	2b00      	cmp	r3, #0
 8002762:	bf0c      	ite	eq
 8002764:	2301      	moveq	r3, #1
 8002766:	2300      	movne	r3, #0
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b00      	cmp	r3, #0
 800276c:	d012      	beq.n	8002794 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002776:	d004      	beq.n	8002782 <HAL_ADC_Init+0x172>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a5f      	ldr	r2, [pc, #380]	@ (80028fc <HAL_ADC_Init+0x2ec>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d101      	bne.n	8002786 <HAL_ADC_Init+0x176>
 8002782:	4a62      	ldr	r2, [pc, #392]	@ (800290c <HAL_ADC_Init+0x2fc>)
 8002784:	e000      	b.n	8002788 <HAL_ADC_Init+0x178>
 8002786:	4a62      	ldr	r2, [pc, #392]	@ (8002910 <HAL_ADC_Init+0x300>)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	4619      	mov	r1, r3
 800278e:	4610      	mov	r0, r2
 8002790:	f7ff fcfe 	bl	8002190 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	7f5b      	ldrb	r3, [r3, #29]
 8002798:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800279e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80027a4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80027aa:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80027b2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80027b4:	4313      	orrs	r3, r2
 80027b6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d106      	bne.n	80027d0 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027c6:	3b01      	subs	r3, #1
 80027c8:	045b      	lsls	r3, r3, #17
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d009      	beq.n	80027ec <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027dc:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68da      	ldr	r2, [r3, #12]
 80027f2:	4b48      	ldr	r3, [pc, #288]	@ (8002914 <HAL_ADC_Init+0x304>)
 80027f4:	4013      	ands	r3, r2
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	6812      	ldr	r2, [r2, #0]
 80027fa:	69b9      	ldr	r1, [r7, #24]
 80027fc:	430b      	orrs	r3, r1
 80027fe:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	430a      	orrs	r2, r1
 8002814:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4618      	mov	r0, r3
 800281c:	f7ff fee4 	bl	80025e8 <LL_ADC_INJ_IsConversionOngoing>
 8002820:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d17f      	bne.n	8002928 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d17c      	bne.n	8002928 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002832:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800283a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800283c:	4313      	orrs	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800284a:	f023 0302 	bic.w	r3, r3, #2
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	6812      	ldr	r2, [r2, #0]
 8002852:	69b9      	ldr	r1, [r7, #24]
 8002854:	430b      	orrs	r3, r1
 8002856:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d017      	beq.n	8002890 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	691a      	ldr	r2, [r3, #16]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800286e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002878:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800287c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	6911      	ldr	r1, [r2, #16]
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	6812      	ldr	r2, [r2, #0]
 8002888:	430b      	orrs	r3, r1
 800288a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800288e:	e013      	b.n	80028b8 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	691a      	ldr	r2, [r3, #16]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800289e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	6812      	ldr	r2, [r2, #0]
 80028ac:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80028b0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80028b4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d12a      	bne.n	8002918 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80028cc:	f023 0304 	bic.w	r3, r3, #4
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80028d8:	4311      	orrs	r1, r2
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80028de:	4311      	orrs	r1, r2
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80028e4:	430a      	orrs	r2, r1
 80028e6:	431a      	orrs	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f042 0201 	orr.w	r2, r2, #1
 80028f0:	611a      	str	r2, [r3, #16]
 80028f2:	e019      	b.n	8002928 <HAL_ADC_Init+0x318>
 80028f4:	20000000 	.word	0x20000000
 80028f8:	053e2d63 	.word	0x053e2d63
 80028fc:	50000100 	.word	0x50000100
 8002900:	50000400 	.word	0x50000400
 8002904:	50000500 	.word	0x50000500
 8002908:	50000600 	.word	0x50000600
 800290c:	50000300 	.word	0x50000300
 8002910:	50000700 	.word	0x50000700
 8002914:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	691a      	ldr	r2, [r3, #16]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 0201 	bic.w	r2, r2, #1
 8002926:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	695b      	ldr	r3, [r3, #20]
 800292c:	2b01      	cmp	r3, #1
 800292e:	d10c      	bne.n	800294a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002936:	f023 010f 	bic.w	r1, r3, #15
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a1b      	ldr	r3, [r3, #32]
 800293e:	1e5a      	subs	r2, r3, #1
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	430a      	orrs	r2, r1
 8002946:	631a      	str	r2, [r3, #48]	@ 0x30
 8002948:	e007      	b.n	800295a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f022 020f 	bic.w	r2, r2, #15
 8002958:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800295e:	f023 0303 	bic.w	r3, r3, #3
 8002962:	f043 0201 	orr.w	r2, r3, #1
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	65da      	str	r2, [r3, #92]	@ 0x5c
 800296a:	e007      	b.n	800297c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002970:	f043 0210 	orr.w	r2, r3, #16
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800297c:	7ffb      	ldrb	r3, [r7, #31]
}
 800297e:	4618      	mov	r0, r3
 8002980:	3724      	adds	r7, #36	@ 0x24
 8002982:	46bd      	mov	sp, r7
 8002984:	bd90      	pop	{r4, r7, pc}
 8002986:	bf00      	nop

08002988 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b086      	sub	sp, #24
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800299c:	d004      	beq.n	80029a8 <HAL_ADC_Start_DMA+0x20>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a5a      	ldr	r2, [pc, #360]	@ (8002b0c <HAL_ADC_Start_DMA+0x184>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d101      	bne.n	80029ac <HAL_ADC_Start_DMA+0x24>
 80029a8:	4b59      	ldr	r3, [pc, #356]	@ (8002b10 <HAL_ADC_Start_DMA+0x188>)
 80029aa:	e000      	b.n	80029ae <HAL_ADC_Start_DMA+0x26>
 80029ac:	4b59      	ldr	r3, [pc, #356]	@ (8002b14 <HAL_ADC_Start_DMA+0x18c>)
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7ff fd62 	bl	8002478 <LL_ADC_GetMultimode>
 80029b4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff fe01 	bl	80025c2 <LL_ADC_REG_IsConversionOngoing>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	f040 809b 	bne.w	8002afe <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d101      	bne.n	80029d6 <HAL_ADC_Start_DMA+0x4e>
 80029d2:	2302      	movs	r3, #2
 80029d4:	e096      	b.n	8002b04 <HAL_ADC_Start_DMA+0x17c>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2201      	movs	r2, #1
 80029da:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a4d      	ldr	r2, [pc, #308]	@ (8002b18 <HAL_ADC_Start_DMA+0x190>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d008      	beq.n	80029fa <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d005      	beq.n	80029fa <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	2b05      	cmp	r3, #5
 80029f2:	d002      	beq.n	80029fa <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	2b09      	cmp	r3, #9
 80029f8:	d17a      	bne.n	8002af0 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80029fa:	68f8      	ldr	r0, [r7, #12]
 80029fc:	f000 ff4c 	bl	8003898 <ADC_Enable>
 8002a00:	4603      	mov	r3, r0
 8002a02:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002a04:	7dfb      	ldrb	r3, [r7, #23]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d16d      	bne.n	8002ae6 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a0e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002a12:	f023 0301 	bic.w	r3, r3, #1
 8002a16:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a3a      	ldr	r2, [pc, #232]	@ (8002b0c <HAL_ADC_Start_DMA+0x184>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d009      	beq.n	8002a3c <HAL_ADC_Start_DMA+0xb4>
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a3b      	ldr	r2, [pc, #236]	@ (8002b1c <HAL_ADC_Start_DMA+0x194>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d002      	beq.n	8002a38 <HAL_ADC_Start_DMA+0xb0>
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	e003      	b.n	8002a40 <HAL_ADC_Start_DMA+0xb8>
 8002a38:	4b39      	ldr	r3, [pc, #228]	@ (8002b20 <HAL_ADC_Start_DMA+0x198>)
 8002a3a:	e001      	b.n	8002a40 <HAL_ADC_Start_DMA+0xb8>
 8002a3c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002a40:	68fa      	ldr	r2, [r7, #12]
 8002a42:	6812      	ldr	r2, [r2, #0]
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d002      	beq.n	8002a4e <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d105      	bne.n	8002a5a <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a52:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a5e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d006      	beq.n	8002a74 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a6a:	f023 0206 	bic.w	r2, r3, #6
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	661a      	str	r2, [r3, #96]	@ 0x60
 8002a72:	e002      	b.n	8002a7a <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2200      	movs	r2, #0
 8002a78:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a7e:	4a29      	ldr	r2, [pc, #164]	@ (8002b24 <HAL_ADC_Start_DMA+0x19c>)
 8002a80:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a86:	4a28      	ldr	r2, [pc, #160]	@ (8002b28 <HAL_ADC_Start_DMA+0x1a0>)
 8002a88:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a8e:	4a27      	ldr	r2, [pc, #156]	@ (8002b2c <HAL_ADC_Start_DMA+0x1a4>)
 8002a90:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	221c      	movs	r2, #28
 8002a98:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	685a      	ldr	r2, [r3, #4]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f042 0210 	orr.w	r2, r2, #16
 8002ab0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68da      	ldr	r2, [r3, #12]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f042 0201 	orr.w	r2, r2, #1
 8002ac0:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	3340      	adds	r3, #64	@ 0x40
 8002acc:	4619      	mov	r1, r3
 8002ace:	68ba      	ldr	r2, [r7, #8]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f001 fb23 	bl	800411c <HAL_DMA_Start_IT>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7ff fd5b 	bl	800259a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002ae4:	e00d      	b.n	8002b02 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8002aee:	e008      	b.n	8002b02 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002afc:	e001      	b.n	8002b02 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002afe:	2302      	movs	r3, #2
 8002b00:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b02:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3718      	adds	r7, #24
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	50000100 	.word	0x50000100
 8002b10:	50000300 	.word	0x50000300
 8002b14:	50000700 	.word	0x50000700
 8002b18:	50000600 	.word	0x50000600
 8002b1c:	50000500 	.word	0x50000500
 8002b20:	50000400 	.word	0x50000400
 8002b24:	080039c5 	.word	0x080039c5
 8002b28:	08003a9d 	.word	0x08003a9d
 8002b2c:	08003ab9 	.word	0x08003ab9

08002b30 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b08a      	sub	sp, #40	@ 0x28
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002b38:	2300      	movs	r3, #0
 8002b3a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b54:	d004      	beq.n	8002b60 <HAL_ADC_IRQHandler+0x30>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a8e      	ldr	r2, [pc, #568]	@ (8002d94 <HAL_ADC_IRQHandler+0x264>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d101      	bne.n	8002b64 <HAL_ADC_IRQHandler+0x34>
 8002b60:	4b8d      	ldr	r3, [pc, #564]	@ (8002d98 <HAL_ADC_IRQHandler+0x268>)
 8002b62:	e000      	b.n	8002b66 <HAL_ADC_IRQHandler+0x36>
 8002b64:	4b8d      	ldr	r3, [pc, #564]	@ (8002d9c <HAL_ADC_IRQHandler+0x26c>)
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7ff fc86 	bl	8002478 <LL_ADC_GetMultimode>
 8002b6c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	f003 0302 	and.w	r3, r3, #2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d017      	beq.n	8002ba8 <HAL_ADC_IRQHandler+0x78>
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d012      	beq.n	8002ba8 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b86:	f003 0310 	and.w	r3, r3, #16
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d105      	bne.n	8002b9a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b92:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 fff4 	bl	8003b88 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2202      	movs	r2, #2
 8002ba6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	f003 0304 	and.w	r3, r3, #4
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d004      	beq.n	8002bbc <HAL_ADC_IRQHandler+0x8c>
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	f003 0304 	and.w	r3, r3, #4
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d10b      	bne.n	8002bd4 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	f000 8094 	beq.w	8002cf0 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	f003 0308 	and.w	r3, r3, #8
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f000 808e 	beq.w	8002cf0 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bd8:	f003 0310 	and.w	r3, r3, #16
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d105      	bne.n	8002bec <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002be4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7ff fb9f 	bl	8002334 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d072      	beq.n	8002ce2 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a64      	ldr	r2, [pc, #400]	@ (8002d94 <HAL_ADC_IRQHandler+0x264>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d009      	beq.n	8002c1a <HAL_ADC_IRQHandler+0xea>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a65      	ldr	r2, [pc, #404]	@ (8002da0 <HAL_ADC_IRQHandler+0x270>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d002      	beq.n	8002c16 <HAL_ADC_IRQHandler+0xe6>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	e003      	b.n	8002c1e <HAL_ADC_IRQHandler+0xee>
 8002c16:	4b63      	ldr	r3, [pc, #396]	@ (8002da4 <HAL_ADC_IRQHandler+0x274>)
 8002c18:	e001      	b.n	8002c1e <HAL_ADC_IRQHandler+0xee>
 8002c1a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	6812      	ldr	r2, [r2, #0]
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d008      	beq.n	8002c38 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d005      	beq.n	8002c38 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	2b05      	cmp	r3, #5
 8002c30:	d002      	beq.n	8002c38 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	2b09      	cmp	r3, #9
 8002c36:	d104      	bne.n	8002c42 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	623b      	str	r3, [r7, #32]
 8002c40:	e014      	b.n	8002c6c <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a53      	ldr	r2, [pc, #332]	@ (8002d94 <HAL_ADC_IRQHandler+0x264>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d009      	beq.n	8002c60 <HAL_ADC_IRQHandler+0x130>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a53      	ldr	r2, [pc, #332]	@ (8002da0 <HAL_ADC_IRQHandler+0x270>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d002      	beq.n	8002c5c <HAL_ADC_IRQHandler+0x12c>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	e003      	b.n	8002c64 <HAL_ADC_IRQHandler+0x134>
 8002c5c:	4b51      	ldr	r3, [pc, #324]	@ (8002da4 <HAL_ADC_IRQHandler+0x274>)
 8002c5e:	e001      	b.n	8002c64 <HAL_ADC_IRQHandler+0x134>
 8002c60:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002c64:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002c6c:	6a3b      	ldr	r3, [r7, #32]
 8002c6e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d135      	bne.n	8002ce2 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0308 	and.w	r3, r3, #8
 8002c80:	2b08      	cmp	r3, #8
 8002c82:	d12e      	bne.n	8002ce2 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7ff fc9a 	bl	80025c2 <LL_ADC_REG_IsConversionOngoing>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d11a      	bne.n	8002cca <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	685a      	ldr	r2, [r3, #4]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f022 020c 	bic.w	r2, r2, #12
 8002ca2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ca8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cb4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d112      	bne.n	8002ce2 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cc0:	f043 0201 	orr.w	r2, r3, #1
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002cc8:	e00b      	b.n	8002ce2 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cce:	f043 0210 	orr.w	r2, r3, #16
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cda:	f043 0201 	orr.w	r2, r3, #1
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f7fe f97c 	bl	8000fe0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	220c      	movs	r2, #12
 8002cee:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	f003 0320 	and.w	r3, r3, #32
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d004      	beq.n	8002d04 <HAL_ADC_IRQHandler+0x1d4>
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	f003 0320 	and.w	r3, r3, #32
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d10b      	bne.n	8002d1c <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f000 80b3 	beq.w	8002e76 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f000 80ad 	beq.w	8002e76 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d20:	f003 0310 	and.w	r3, r3, #16
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d105      	bne.n	8002d34 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d2c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7ff fb3a 	bl	80023b2 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002d3e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7ff faf5 	bl	8002334 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002d4a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a10      	ldr	r2, [pc, #64]	@ (8002d94 <HAL_ADC_IRQHandler+0x264>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d009      	beq.n	8002d6a <HAL_ADC_IRQHandler+0x23a>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a11      	ldr	r2, [pc, #68]	@ (8002da0 <HAL_ADC_IRQHandler+0x270>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d002      	beq.n	8002d66 <HAL_ADC_IRQHandler+0x236>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	e003      	b.n	8002d6e <HAL_ADC_IRQHandler+0x23e>
 8002d66:	4b0f      	ldr	r3, [pc, #60]	@ (8002da4 <HAL_ADC_IRQHandler+0x274>)
 8002d68:	e001      	b.n	8002d6e <HAL_ADC_IRQHandler+0x23e>
 8002d6a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	6812      	ldr	r2, [r2, #0]
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d008      	beq.n	8002d88 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d005      	beq.n	8002d88 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	2b06      	cmp	r3, #6
 8002d80:	d002      	beq.n	8002d88 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	2b07      	cmp	r3, #7
 8002d86:	d10f      	bne.n	8002da8 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	623b      	str	r3, [r7, #32]
 8002d90:	e01f      	b.n	8002dd2 <HAL_ADC_IRQHandler+0x2a2>
 8002d92:	bf00      	nop
 8002d94:	50000100 	.word	0x50000100
 8002d98:	50000300 	.word	0x50000300
 8002d9c:	50000700 	.word	0x50000700
 8002da0:	50000500 	.word	0x50000500
 8002da4:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a8b      	ldr	r2, [pc, #556]	@ (8002fdc <HAL_ADC_IRQHandler+0x4ac>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d009      	beq.n	8002dc6 <HAL_ADC_IRQHandler+0x296>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a8a      	ldr	r2, [pc, #552]	@ (8002fe0 <HAL_ADC_IRQHandler+0x4b0>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d002      	beq.n	8002dc2 <HAL_ADC_IRQHandler+0x292>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	e003      	b.n	8002dca <HAL_ADC_IRQHandler+0x29a>
 8002dc2:	4b88      	ldr	r3, [pc, #544]	@ (8002fe4 <HAL_ADC_IRQHandler+0x4b4>)
 8002dc4:	e001      	b.n	8002dca <HAL_ADC_IRQHandler+0x29a>
 8002dc6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002dca:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d047      	beq.n	8002e68 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002dd8:	6a3b      	ldr	r3, [r7, #32]
 8002dda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d007      	beq.n	8002df2 <HAL_ADC_IRQHandler+0x2c2>
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d03f      	beq.n	8002e68 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002de8:	6a3b      	ldr	r3, [r7, #32]
 8002dea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d13a      	bne.n	8002e68 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dfc:	2b40      	cmp	r3, #64	@ 0x40
 8002dfe:	d133      	bne.n	8002e68 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002e00:	6a3b      	ldr	r3, [r7, #32]
 8002e02:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d12e      	bne.n	8002e68 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7ff fbea 	bl	80025e8 <LL_ADC_INJ_IsConversionOngoing>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d11a      	bne.n	8002e50 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	685a      	ldr	r2, [r3, #4]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002e28:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e2e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d112      	bne.n	8002e68 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e46:	f043 0201 	orr.w	r2, r3, #1
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002e4e:	e00b      	b.n	8002e68 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e54:	f043 0210 	orr.w	r2, r3, #16
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e60:	f043 0201 	orr.w	r2, r3, #1
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f000 fe65 	bl	8003b38 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2260      	movs	r2, #96	@ 0x60
 8002e74:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d011      	beq.n	8002ea4 <HAL_ADC_IRQHandler+0x374>
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00c      	beq.n	8002ea4 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e8e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 f8aa 	bl	8002ff0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2280      	movs	r2, #128	@ 0x80
 8002ea2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d012      	beq.n	8002ed4 <HAL_ADC_IRQHandler+0x3a4>
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d00d      	beq.n	8002ed4 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ebc:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f000 fe4b 	bl	8003b60 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002ed2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d012      	beq.n	8002f04 <HAL_ADC_IRQHandler+0x3d4>
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d00d      	beq.n	8002f04 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eec:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f000 fe3d 	bl	8003b74 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f02:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	f003 0310 	and.w	r3, r3, #16
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d043      	beq.n	8002f96 <HAL_ADC_IRQHandler+0x466>
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	f003 0310 	and.w	r3, r3, #16
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d03e      	beq.n	8002f96 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d102      	bne.n	8002f26 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8002f20:	2301      	movs	r3, #1
 8002f22:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f24:	e021      	b.n	8002f6a <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d015      	beq.n	8002f58 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f34:	d004      	beq.n	8002f40 <HAL_ADC_IRQHandler+0x410>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a28      	ldr	r2, [pc, #160]	@ (8002fdc <HAL_ADC_IRQHandler+0x4ac>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d101      	bne.n	8002f44 <HAL_ADC_IRQHandler+0x414>
 8002f40:	4b29      	ldr	r3, [pc, #164]	@ (8002fe8 <HAL_ADC_IRQHandler+0x4b8>)
 8002f42:	e000      	b.n	8002f46 <HAL_ADC_IRQHandler+0x416>
 8002f44:	4b29      	ldr	r3, [pc, #164]	@ (8002fec <HAL_ADC_IRQHandler+0x4bc>)
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7ff faa4 	bl	8002494 <LL_ADC_GetMultiDMATransfer>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d00b      	beq.n	8002f6a <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002f52:	2301      	movs	r3, #1
 8002f54:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f56:	e008      	b.n	8002f6a <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002f66:	2301      	movs	r3, #1
 8002f68:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d10e      	bne.n	8002f8e <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f74:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f80:	f043 0202 	orr.w	r2, r3, #2
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f000 f83b 	bl	8003004 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2210      	movs	r2, #16
 8002f94:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d018      	beq.n	8002fd2 <HAL_ADC_IRQHandler+0x4a2>
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d013      	beq.n	8002fd2 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fae:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fba:	f043 0208 	orr.w	r2, r3, #8
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002fca:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f000 fdbd 	bl	8003b4c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002fd2:	bf00      	nop
 8002fd4:	3728      	adds	r7, #40	@ 0x28
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	50000100 	.word	0x50000100
 8002fe0:	50000500 	.word	0x50000500
 8002fe4:	50000400 	.word	0x50000400
 8002fe8:	50000300 	.word	0x50000300
 8002fec:	50000700 	.word	0x50000700

08002ff0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002ff8:	bf00      	nop
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800300c:	bf00      	nop
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b0b6      	sub	sp, #216	@ 0xd8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003022:	2300      	movs	r3, #0
 8003024:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003028:	2300      	movs	r3, #0
 800302a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003032:	2b01      	cmp	r3, #1
 8003034:	d102      	bne.n	800303c <HAL_ADC_ConfigChannel+0x24>
 8003036:	2302      	movs	r3, #2
 8003038:	f000 bc13 	b.w	8003862 <HAL_ADC_ConfigChannel+0x84a>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4618      	mov	r0, r3
 800304a:	f7ff faba 	bl	80025c2 <LL_ADC_REG_IsConversionOngoing>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	f040 83f3 	bne.w	800383c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6818      	ldr	r0, [r3, #0]
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	6859      	ldr	r1, [r3, #4]
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	461a      	mov	r2, r3
 8003064:	f7ff f979 	bl	800235a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4618      	mov	r0, r3
 800306e:	f7ff faa8 	bl	80025c2 <LL_ADC_REG_IsConversionOngoing>
 8003072:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4618      	mov	r0, r3
 800307c:	f7ff fab4 	bl	80025e8 <LL_ADC_INJ_IsConversionOngoing>
 8003080:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003084:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003088:	2b00      	cmp	r3, #0
 800308a:	f040 81d9 	bne.w	8003440 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800308e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003092:	2b00      	cmp	r3, #0
 8003094:	f040 81d4 	bne.w	8003440 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80030a0:	d10f      	bne.n	80030c2 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6818      	ldr	r0, [r3, #0]
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2200      	movs	r2, #0
 80030ac:	4619      	mov	r1, r3
 80030ae:	f7ff f993 	bl	80023d8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7ff f927 	bl	800230e <LL_ADC_SetSamplingTimeCommonConfig>
 80030c0:	e00e      	b.n	80030e0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6818      	ldr	r0, [r3, #0]
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	6819      	ldr	r1, [r3, #0]
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	461a      	mov	r2, r3
 80030d0:	f7ff f982 	bl	80023d8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2100      	movs	r1, #0
 80030da:	4618      	mov	r0, r3
 80030dc:	f7ff f917 	bl	800230e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	695a      	ldr	r2, [r3, #20]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	08db      	lsrs	r3, r3, #3
 80030ec:	f003 0303 	and.w	r3, r3, #3
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	fa02 f303 	lsl.w	r3, r2, r3
 80030f6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	2b04      	cmp	r3, #4
 8003100:	d022      	beq.n	8003148 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6818      	ldr	r0, [r3, #0]
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	6919      	ldr	r1, [r3, #16]
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003112:	f7ff f871 	bl	80021f8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6818      	ldr	r0, [r3, #0]
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	6919      	ldr	r1, [r3, #16]
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	461a      	mov	r2, r3
 8003124:	f7ff f8bd 	bl	80022a2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6818      	ldr	r0, [r3, #0]
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003134:	2b01      	cmp	r3, #1
 8003136:	d102      	bne.n	800313e <HAL_ADC_ConfigChannel+0x126>
 8003138:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800313c:	e000      	b.n	8003140 <HAL_ADC_ConfigChannel+0x128>
 800313e:	2300      	movs	r3, #0
 8003140:	461a      	mov	r2, r3
 8003142:	f7ff f8c9 	bl	80022d8 <LL_ADC_SetOffsetSaturation>
 8003146:	e17b      	b.n	8003440 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2100      	movs	r1, #0
 800314e:	4618      	mov	r0, r3
 8003150:	f7ff f876 	bl	8002240 <LL_ADC_GetOffsetChannel>
 8003154:	4603      	mov	r3, r0
 8003156:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800315a:	2b00      	cmp	r3, #0
 800315c:	d10a      	bne.n	8003174 <HAL_ADC_ConfigChannel+0x15c>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2100      	movs	r1, #0
 8003164:	4618      	mov	r0, r3
 8003166:	f7ff f86b 	bl	8002240 <LL_ADC_GetOffsetChannel>
 800316a:	4603      	mov	r3, r0
 800316c:	0e9b      	lsrs	r3, r3, #26
 800316e:	f003 021f 	and.w	r2, r3, #31
 8003172:	e01e      	b.n	80031b2 <HAL_ADC_ConfigChannel+0x19a>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2100      	movs	r1, #0
 800317a:	4618      	mov	r0, r3
 800317c:	f7ff f860 	bl	8002240 <LL_ADC_GetOffsetChannel>
 8003180:	4603      	mov	r3, r0
 8003182:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003186:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800318a:	fa93 f3a3 	rbit	r3, r3
 800318e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003192:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003196:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800319a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80031a2:	2320      	movs	r3, #32
 80031a4:	e004      	b.n	80031b0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80031a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80031aa:	fab3 f383 	clz	r3, r3
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d105      	bne.n	80031ca <HAL_ADC_ConfigChannel+0x1b2>
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	0e9b      	lsrs	r3, r3, #26
 80031c4:	f003 031f 	and.w	r3, r3, #31
 80031c8:	e018      	b.n	80031fc <HAL_ADC_ConfigChannel+0x1e4>
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80031d6:	fa93 f3a3 	rbit	r3, r3
 80031da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80031de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80031e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80031e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d101      	bne.n	80031f2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80031ee:	2320      	movs	r3, #32
 80031f0:	e004      	b.n	80031fc <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80031f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80031f6:	fab3 f383 	clz	r3, r3
 80031fa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d106      	bne.n	800320e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2200      	movs	r2, #0
 8003206:	2100      	movs	r1, #0
 8003208:	4618      	mov	r0, r3
 800320a:	f7ff f82f 	bl	800226c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2101      	movs	r1, #1
 8003214:	4618      	mov	r0, r3
 8003216:	f7ff f813 	bl	8002240 <LL_ADC_GetOffsetChannel>
 800321a:	4603      	mov	r3, r0
 800321c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003220:	2b00      	cmp	r3, #0
 8003222:	d10a      	bne.n	800323a <HAL_ADC_ConfigChannel+0x222>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2101      	movs	r1, #1
 800322a:	4618      	mov	r0, r3
 800322c:	f7ff f808 	bl	8002240 <LL_ADC_GetOffsetChannel>
 8003230:	4603      	mov	r3, r0
 8003232:	0e9b      	lsrs	r3, r3, #26
 8003234:	f003 021f 	and.w	r2, r3, #31
 8003238:	e01e      	b.n	8003278 <HAL_ADC_ConfigChannel+0x260>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2101      	movs	r1, #1
 8003240:	4618      	mov	r0, r3
 8003242:	f7fe fffd 	bl	8002240 <LL_ADC_GetOffsetChannel>
 8003246:	4603      	mov	r3, r0
 8003248:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800324c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003250:	fa93 f3a3 	rbit	r3, r3
 8003254:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003258:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800325c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003260:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003264:	2b00      	cmp	r3, #0
 8003266:	d101      	bne.n	800326c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003268:	2320      	movs	r3, #32
 800326a:	e004      	b.n	8003276 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800326c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003270:	fab3 f383 	clz	r3, r3
 8003274:	b2db      	uxtb	r3, r3
 8003276:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003280:	2b00      	cmp	r3, #0
 8003282:	d105      	bne.n	8003290 <HAL_ADC_ConfigChannel+0x278>
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	0e9b      	lsrs	r3, r3, #26
 800328a:	f003 031f 	and.w	r3, r3, #31
 800328e:	e018      	b.n	80032c2 <HAL_ADC_ConfigChannel+0x2aa>
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003298:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800329c:	fa93 f3a3 	rbit	r3, r3
 80032a0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80032a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80032a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80032ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d101      	bne.n	80032b8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80032b4:	2320      	movs	r3, #32
 80032b6:	e004      	b.n	80032c2 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80032b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80032bc:	fab3 f383 	clz	r3, r3
 80032c0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d106      	bne.n	80032d4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2200      	movs	r2, #0
 80032cc:	2101      	movs	r1, #1
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7fe ffcc 	bl	800226c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2102      	movs	r1, #2
 80032da:	4618      	mov	r0, r3
 80032dc:	f7fe ffb0 	bl	8002240 <LL_ADC_GetOffsetChannel>
 80032e0:	4603      	mov	r3, r0
 80032e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d10a      	bne.n	8003300 <HAL_ADC_ConfigChannel+0x2e8>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2102      	movs	r1, #2
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7fe ffa5 	bl	8002240 <LL_ADC_GetOffsetChannel>
 80032f6:	4603      	mov	r3, r0
 80032f8:	0e9b      	lsrs	r3, r3, #26
 80032fa:	f003 021f 	and.w	r2, r3, #31
 80032fe:	e01e      	b.n	800333e <HAL_ADC_ConfigChannel+0x326>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2102      	movs	r1, #2
 8003306:	4618      	mov	r0, r3
 8003308:	f7fe ff9a 	bl	8002240 <LL_ADC_GetOffsetChannel>
 800330c:	4603      	mov	r3, r0
 800330e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003312:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003316:	fa93 f3a3 	rbit	r3, r3
 800331a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800331e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003322:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003326:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800332a:	2b00      	cmp	r3, #0
 800332c:	d101      	bne.n	8003332 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800332e:	2320      	movs	r3, #32
 8003330:	e004      	b.n	800333c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003332:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003336:	fab3 f383 	clz	r3, r3
 800333a:	b2db      	uxtb	r3, r3
 800333c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003346:	2b00      	cmp	r3, #0
 8003348:	d105      	bne.n	8003356 <HAL_ADC_ConfigChannel+0x33e>
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	0e9b      	lsrs	r3, r3, #26
 8003350:	f003 031f 	and.w	r3, r3, #31
 8003354:	e016      	b.n	8003384 <HAL_ADC_ConfigChannel+0x36c>
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800335e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003362:	fa93 f3a3 	rbit	r3, r3
 8003366:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003368:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800336a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800336e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003376:	2320      	movs	r3, #32
 8003378:	e004      	b.n	8003384 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800337a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800337e:	fab3 f383 	clz	r3, r3
 8003382:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003384:	429a      	cmp	r2, r3
 8003386:	d106      	bne.n	8003396 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2200      	movs	r2, #0
 800338e:	2102      	movs	r1, #2
 8003390:	4618      	mov	r0, r3
 8003392:	f7fe ff6b 	bl	800226c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2103      	movs	r1, #3
 800339c:	4618      	mov	r0, r3
 800339e:	f7fe ff4f 	bl	8002240 <LL_ADC_GetOffsetChannel>
 80033a2:	4603      	mov	r3, r0
 80033a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d10a      	bne.n	80033c2 <HAL_ADC_ConfigChannel+0x3aa>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2103      	movs	r1, #3
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7fe ff44 	bl	8002240 <LL_ADC_GetOffsetChannel>
 80033b8:	4603      	mov	r3, r0
 80033ba:	0e9b      	lsrs	r3, r3, #26
 80033bc:	f003 021f 	and.w	r2, r3, #31
 80033c0:	e017      	b.n	80033f2 <HAL_ADC_ConfigChannel+0x3da>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2103      	movs	r1, #3
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7fe ff39 	bl	8002240 <LL_ADC_GetOffsetChannel>
 80033ce:	4603      	mov	r3, r0
 80033d0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033d4:	fa93 f3a3 	rbit	r3, r3
 80033d8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80033da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80033dc:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80033de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d101      	bne.n	80033e8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80033e4:	2320      	movs	r3, #32
 80033e6:	e003      	b.n	80033f0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80033e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80033ea:	fab3 f383 	clz	r3, r3
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d105      	bne.n	800340a <HAL_ADC_ConfigChannel+0x3f2>
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	0e9b      	lsrs	r3, r3, #26
 8003404:	f003 031f 	and.w	r3, r3, #31
 8003408:	e011      	b.n	800342e <HAL_ADC_ConfigChannel+0x416>
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003410:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003412:	fa93 f3a3 	rbit	r3, r3
 8003416:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003418:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800341a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800341c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800341e:	2b00      	cmp	r3, #0
 8003420:	d101      	bne.n	8003426 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003422:	2320      	movs	r3, #32
 8003424:	e003      	b.n	800342e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003426:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003428:	fab3 f383 	clz	r3, r3
 800342c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800342e:	429a      	cmp	r2, r3
 8003430:	d106      	bne.n	8003440 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2200      	movs	r2, #0
 8003438:	2103      	movs	r1, #3
 800343a:	4618      	mov	r0, r3
 800343c:	f7fe ff16 	bl	800226c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4618      	mov	r0, r3
 8003446:	f7ff f895 	bl	8002574 <LL_ADC_IsEnabled>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	f040 813d 	bne.w	80036cc <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6818      	ldr	r0, [r3, #0]
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	6819      	ldr	r1, [r3, #0]
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	461a      	mov	r2, r3
 8003460:	f7fe ffe6 	bl	8002430 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	4aa2      	ldr	r2, [pc, #648]	@ (80036f4 <HAL_ADC_ConfigChannel+0x6dc>)
 800346a:	4293      	cmp	r3, r2
 800346c:	f040 812e 	bne.w	80036cc <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800347c:	2b00      	cmp	r3, #0
 800347e:	d10b      	bne.n	8003498 <HAL_ADC_ConfigChannel+0x480>
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	0e9b      	lsrs	r3, r3, #26
 8003486:	3301      	adds	r3, #1
 8003488:	f003 031f 	and.w	r3, r3, #31
 800348c:	2b09      	cmp	r3, #9
 800348e:	bf94      	ite	ls
 8003490:	2301      	movls	r3, #1
 8003492:	2300      	movhi	r3, #0
 8003494:	b2db      	uxtb	r3, r3
 8003496:	e019      	b.n	80034cc <HAL_ADC_ConfigChannel+0x4b4>
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800349e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034a0:	fa93 f3a3 	rbit	r3, r3
 80034a4:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80034a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80034a8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80034aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d101      	bne.n	80034b4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80034b0:	2320      	movs	r3, #32
 80034b2:	e003      	b.n	80034bc <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80034b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80034b6:	fab3 f383 	clz	r3, r3
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	3301      	adds	r3, #1
 80034be:	f003 031f 	and.w	r3, r3, #31
 80034c2:	2b09      	cmp	r3, #9
 80034c4:	bf94      	ite	ls
 80034c6:	2301      	movls	r3, #1
 80034c8:	2300      	movhi	r3, #0
 80034ca:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d079      	beq.n	80035c4 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d107      	bne.n	80034ec <HAL_ADC_ConfigChannel+0x4d4>
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	0e9b      	lsrs	r3, r3, #26
 80034e2:	3301      	adds	r3, #1
 80034e4:	069b      	lsls	r3, r3, #26
 80034e6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80034ea:	e015      	b.n	8003518 <HAL_ADC_ConfigChannel+0x500>
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80034f4:	fa93 f3a3 	rbit	r3, r3
 80034f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80034fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034fc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80034fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003500:	2b00      	cmp	r3, #0
 8003502:	d101      	bne.n	8003508 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003504:	2320      	movs	r3, #32
 8003506:	e003      	b.n	8003510 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003508:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800350a:	fab3 f383 	clz	r3, r3
 800350e:	b2db      	uxtb	r3, r3
 8003510:	3301      	adds	r3, #1
 8003512:	069b      	lsls	r3, r3, #26
 8003514:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003520:	2b00      	cmp	r3, #0
 8003522:	d109      	bne.n	8003538 <HAL_ADC_ConfigChannel+0x520>
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	0e9b      	lsrs	r3, r3, #26
 800352a:	3301      	adds	r3, #1
 800352c:	f003 031f 	and.w	r3, r3, #31
 8003530:	2101      	movs	r1, #1
 8003532:	fa01 f303 	lsl.w	r3, r1, r3
 8003536:	e017      	b.n	8003568 <HAL_ADC_ConfigChannel+0x550>
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800353e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003540:	fa93 f3a3 	rbit	r3, r3
 8003544:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003546:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003548:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800354a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800354c:	2b00      	cmp	r3, #0
 800354e:	d101      	bne.n	8003554 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003550:	2320      	movs	r3, #32
 8003552:	e003      	b.n	800355c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003554:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003556:	fab3 f383 	clz	r3, r3
 800355a:	b2db      	uxtb	r3, r3
 800355c:	3301      	adds	r3, #1
 800355e:	f003 031f 	and.w	r3, r3, #31
 8003562:	2101      	movs	r1, #1
 8003564:	fa01 f303 	lsl.w	r3, r1, r3
 8003568:	ea42 0103 	orr.w	r1, r2, r3
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003574:	2b00      	cmp	r3, #0
 8003576:	d10a      	bne.n	800358e <HAL_ADC_ConfigChannel+0x576>
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	0e9b      	lsrs	r3, r3, #26
 800357e:	3301      	adds	r3, #1
 8003580:	f003 021f 	and.w	r2, r3, #31
 8003584:	4613      	mov	r3, r2
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	4413      	add	r3, r2
 800358a:	051b      	lsls	r3, r3, #20
 800358c:	e018      	b.n	80035c0 <HAL_ADC_ConfigChannel+0x5a8>
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003596:	fa93 f3a3 	rbit	r3, r3
 800359a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800359c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800359e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80035a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d101      	bne.n	80035aa <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80035a6:	2320      	movs	r3, #32
 80035a8:	e003      	b.n	80035b2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80035aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035ac:	fab3 f383 	clz	r3, r3
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	3301      	adds	r3, #1
 80035b4:	f003 021f 	and.w	r2, r3, #31
 80035b8:	4613      	mov	r3, r2
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	4413      	add	r3, r2
 80035be:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035c0:	430b      	orrs	r3, r1
 80035c2:	e07e      	b.n	80036c2 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d107      	bne.n	80035e0 <HAL_ADC_ConfigChannel+0x5c8>
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	0e9b      	lsrs	r3, r3, #26
 80035d6:	3301      	adds	r3, #1
 80035d8:	069b      	lsls	r3, r3, #26
 80035da:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80035de:	e015      	b.n	800360c <HAL_ADC_ConfigChannel+0x5f4>
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035e8:	fa93 f3a3 	rbit	r3, r3
 80035ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80035ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035f0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80035f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d101      	bne.n	80035fc <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80035f8:	2320      	movs	r3, #32
 80035fa:	e003      	b.n	8003604 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80035fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035fe:	fab3 f383 	clz	r3, r3
 8003602:	b2db      	uxtb	r3, r3
 8003604:	3301      	adds	r3, #1
 8003606:	069b      	lsls	r3, r3, #26
 8003608:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003614:	2b00      	cmp	r3, #0
 8003616:	d109      	bne.n	800362c <HAL_ADC_ConfigChannel+0x614>
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	0e9b      	lsrs	r3, r3, #26
 800361e:	3301      	adds	r3, #1
 8003620:	f003 031f 	and.w	r3, r3, #31
 8003624:	2101      	movs	r1, #1
 8003626:	fa01 f303 	lsl.w	r3, r1, r3
 800362a:	e017      	b.n	800365c <HAL_ADC_ConfigChannel+0x644>
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003632:	6a3b      	ldr	r3, [r7, #32]
 8003634:	fa93 f3a3 	rbit	r3, r3
 8003638:	61fb      	str	r3, [r7, #28]
  return result;
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800363e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003640:	2b00      	cmp	r3, #0
 8003642:	d101      	bne.n	8003648 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003644:	2320      	movs	r3, #32
 8003646:	e003      	b.n	8003650 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800364a:	fab3 f383 	clz	r3, r3
 800364e:	b2db      	uxtb	r3, r3
 8003650:	3301      	adds	r3, #1
 8003652:	f003 031f 	and.w	r3, r3, #31
 8003656:	2101      	movs	r1, #1
 8003658:	fa01 f303 	lsl.w	r3, r1, r3
 800365c:	ea42 0103 	orr.w	r1, r2, r3
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003668:	2b00      	cmp	r3, #0
 800366a:	d10d      	bne.n	8003688 <HAL_ADC_ConfigChannel+0x670>
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	0e9b      	lsrs	r3, r3, #26
 8003672:	3301      	adds	r3, #1
 8003674:	f003 021f 	and.w	r2, r3, #31
 8003678:	4613      	mov	r3, r2
 800367a:	005b      	lsls	r3, r3, #1
 800367c:	4413      	add	r3, r2
 800367e:	3b1e      	subs	r3, #30
 8003680:	051b      	lsls	r3, r3, #20
 8003682:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003686:	e01b      	b.n	80036c0 <HAL_ADC_ConfigChannel+0x6a8>
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	fa93 f3a3 	rbit	r3, r3
 8003694:	613b      	str	r3, [r7, #16]
  return result;
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d101      	bne.n	80036a4 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80036a0:	2320      	movs	r3, #32
 80036a2:	e003      	b.n	80036ac <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	fab3 f383 	clz	r3, r3
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	3301      	adds	r3, #1
 80036ae:	f003 021f 	and.w	r2, r3, #31
 80036b2:	4613      	mov	r3, r2
 80036b4:	005b      	lsls	r3, r3, #1
 80036b6:	4413      	add	r3, r2
 80036b8:	3b1e      	subs	r3, #30
 80036ba:	051b      	lsls	r3, r3, #20
 80036bc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036c0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80036c2:	683a      	ldr	r2, [r7, #0]
 80036c4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036c6:	4619      	mov	r1, r3
 80036c8:	f7fe fe86 	bl	80023d8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	4b09      	ldr	r3, [pc, #36]	@ (80036f8 <HAL_ADC_ConfigChannel+0x6e0>)
 80036d2:	4013      	ands	r3, r2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	f000 80be 	beq.w	8003856 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036e2:	d004      	beq.n	80036ee <HAL_ADC_ConfigChannel+0x6d6>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a04      	ldr	r2, [pc, #16]	@ (80036fc <HAL_ADC_ConfigChannel+0x6e4>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d10a      	bne.n	8003704 <HAL_ADC_ConfigChannel+0x6ec>
 80036ee:	4b04      	ldr	r3, [pc, #16]	@ (8003700 <HAL_ADC_ConfigChannel+0x6e8>)
 80036f0:	e009      	b.n	8003706 <HAL_ADC_ConfigChannel+0x6ee>
 80036f2:	bf00      	nop
 80036f4:	407f0000 	.word	0x407f0000
 80036f8:	80080000 	.word	0x80080000
 80036fc:	50000100 	.word	0x50000100
 8003700:	50000300 	.word	0x50000300
 8003704:	4b59      	ldr	r3, [pc, #356]	@ (800386c <HAL_ADC_ConfigChannel+0x854>)
 8003706:	4618      	mov	r0, r3
 8003708:	f7fe fd68 	bl	80021dc <LL_ADC_GetCommonPathInternalCh>
 800370c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a56      	ldr	r2, [pc, #344]	@ (8003870 <HAL_ADC_ConfigChannel+0x858>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d004      	beq.n	8003724 <HAL_ADC_ConfigChannel+0x70c>
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a55      	ldr	r2, [pc, #340]	@ (8003874 <HAL_ADC_ConfigChannel+0x85c>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d13a      	bne.n	800379a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003724:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003728:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d134      	bne.n	800379a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003738:	d005      	beq.n	8003746 <HAL_ADC_ConfigChannel+0x72e>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a4e      	ldr	r2, [pc, #312]	@ (8003878 <HAL_ADC_ConfigChannel+0x860>)
 8003740:	4293      	cmp	r3, r2
 8003742:	f040 8085 	bne.w	8003850 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800374e:	d004      	beq.n	800375a <HAL_ADC_ConfigChannel+0x742>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a49      	ldr	r2, [pc, #292]	@ (800387c <HAL_ADC_ConfigChannel+0x864>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d101      	bne.n	800375e <HAL_ADC_ConfigChannel+0x746>
 800375a:	4a49      	ldr	r2, [pc, #292]	@ (8003880 <HAL_ADC_ConfigChannel+0x868>)
 800375c:	e000      	b.n	8003760 <HAL_ADC_ConfigChannel+0x748>
 800375e:	4a43      	ldr	r2, [pc, #268]	@ (800386c <HAL_ADC_ConfigChannel+0x854>)
 8003760:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003764:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003768:	4619      	mov	r1, r3
 800376a:	4610      	mov	r0, r2
 800376c:	f7fe fd23 	bl	80021b6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003770:	4b44      	ldr	r3, [pc, #272]	@ (8003884 <HAL_ADC_ConfigChannel+0x86c>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	099b      	lsrs	r3, r3, #6
 8003776:	4a44      	ldr	r2, [pc, #272]	@ (8003888 <HAL_ADC_ConfigChannel+0x870>)
 8003778:	fba2 2303 	umull	r2, r3, r2, r3
 800377c:	099b      	lsrs	r3, r3, #6
 800377e:	1c5a      	adds	r2, r3, #1
 8003780:	4613      	mov	r3, r2
 8003782:	005b      	lsls	r3, r3, #1
 8003784:	4413      	add	r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800378a:	e002      	b.n	8003792 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	3b01      	subs	r3, #1
 8003790:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d1f9      	bne.n	800378c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003798:	e05a      	b.n	8003850 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a3b      	ldr	r2, [pc, #236]	@ (800388c <HAL_ADC_ConfigChannel+0x874>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d125      	bne.n	80037f0 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80037a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80037a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d11f      	bne.n	80037f0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a31      	ldr	r2, [pc, #196]	@ (800387c <HAL_ADC_ConfigChannel+0x864>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d104      	bne.n	80037c4 <HAL_ADC_ConfigChannel+0x7ac>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a34      	ldr	r2, [pc, #208]	@ (8003890 <HAL_ADC_ConfigChannel+0x878>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d047      	beq.n	8003854 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037cc:	d004      	beq.n	80037d8 <HAL_ADC_ConfigChannel+0x7c0>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a2a      	ldr	r2, [pc, #168]	@ (800387c <HAL_ADC_ConfigChannel+0x864>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d101      	bne.n	80037dc <HAL_ADC_ConfigChannel+0x7c4>
 80037d8:	4a29      	ldr	r2, [pc, #164]	@ (8003880 <HAL_ADC_ConfigChannel+0x868>)
 80037da:	e000      	b.n	80037de <HAL_ADC_ConfigChannel+0x7c6>
 80037dc:	4a23      	ldr	r2, [pc, #140]	@ (800386c <HAL_ADC_ConfigChannel+0x854>)
 80037de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80037e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037e6:	4619      	mov	r1, r3
 80037e8:	4610      	mov	r0, r2
 80037ea:	f7fe fce4 	bl	80021b6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037ee:	e031      	b.n	8003854 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a27      	ldr	r2, [pc, #156]	@ (8003894 <HAL_ADC_ConfigChannel+0x87c>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d12d      	bne.n	8003856 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80037fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80037fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d127      	bne.n	8003856 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a1c      	ldr	r2, [pc, #112]	@ (800387c <HAL_ADC_ConfigChannel+0x864>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d022      	beq.n	8003856 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003818:	d004      	beq.n	8003824 <HAL_ADC_ConfigChannel+0x80c>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a17      	ldr	r2, [pc, #92]	@ (800387c <HAL_ADC_ConfigChannel+0x864>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d101      	bne.n	8003828 <HAL_ADC_ConfigChannel+0x810>
 8003824:	4a16      	ldr	r2, [pc, #88]	@ (8003880 <HAL_ADC_ConfigChannel+0x868>)
 8003826:	e000      	b.n	800382a <HAL_ADC_ConfigChannel+0x812>
 8003828:	4a10      	ldr	r2, [pc, #64]	@ (800386c <HAL_ADC_ConfigChannel+0x854>)
 800382a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800382e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003832:	4619      	mov	r1, r3
 8003834:	4610      	mov	r0, r2
 8003836:	f7fe fcbe 	bl	80021b6 <LL_ADC_SetCommonPathInternalCh>
 800383a:	e00c      	b.n	8003856 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003840:	f043 0220 	orr.w	r2, r3, #32
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800384e:	e002      	b.n	8003856 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003850:	bf00      	nop
 8003852:	e000      	b.n	8003856 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003854:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800385e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003862:	4618      	mov	r0, r3
 8003864:	37d8      	adds	r7, #216	@ 0xd8
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	50000700 	.word	0x50000700
 8003870:	c3210000 	.word	0xc3210000
 8003874:	90c00010 	.word	0x90c00010
 8003878:	50000600 	.word	0x50000600
 800387c:	50000100 	.word	0x50000100
 8003880:	50000300 	.word	0x50000300
 8003884:	20000000 	.word	0x20000000
 8003888:	053e2d63 	.word	0x053e2d63
 800388c:	c7520000 	.word	0xc7520000
 8003890:	50000500 	.word	0x50000500
 8003894:	cb840000 	.word	0xcb840000

08003898 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80038a0:	2300      	movs	r3, #0
 80038a2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7fe fe63 	bl	8002574 <LL_ADC_IsEnabled>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d176      	bne.n	80039a2 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	689a      	ldr	r2, [r3, #8]
 80038ba:	4b3c      	ldr	r3, [pc, #240]	@ (80039ac <ADC_Enable+0x114>)
 80038bc:	4013      	ands	r3, r2
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d00d      	beq.n	80038de <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038c6:	f043 0210 	orr.w	r2, r3, #16
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038d2:	f043 0201 	orr.w	r2, r3, #1
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e062      	b.n	80039a4 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7fe fe32 	bl	800254c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038f0:	d004      	beq.n	80038fc <ADC_Enable+0x64>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a2e      	ldr	r2, [pc, #184]	@ (80039b0 <ADC_Enable+0x118>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d101      	bne.n	8003900 <ADC_Enable+0x68>
 80038fc:	4b2d      	ldr	r3, [pc, #180]	@ (80039b4 <ADC_Enable+0x11c>)
 80038fe:	e000      	b.n	8003902 <ADC_Enable+0x6a>
 8003900:	4b2d      	ldr	r3, [pc, #180]	@ (80039b8 <ADC_Enable+0x120>)
 8003902:	4618      	mov	r0, r3
 8003904:	f7fe fc6a 	bl	80021dc <LL_ADC_GetCommonPathInternalCh>
 8003908:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800390a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800390e:	2b00      	cmp	r3, #0
 8003910:	d013      	beq.n	800393a <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003912:	4b2a      	ldr	r3, [pc, #168]	@ (80039bc <ADC_Enable+0x124>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	099b      	lsrs	r3, r3, #6
 8003918:	4a29      	ldr	r2, [pc, #164]	@ (80039c0 <ADC_Enable+0x128>)
 800391a:	fba2 2303 	umull	r2, r3, r2, r3
 800391e:	099b      	lsrs	r3, r3, #6
 8003920:	1c5a      	adds	r2, r3, #1
 8003922:	4613      	mov	r3, r2
 8003924:	005b      	lsls	r3, r3, #1
 8003926:	4413      	add	r3, r2
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800392c:	e002      	b.n	8003934 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	3b01      	subs	r3, #1
 8003932:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1f9      	bne.n	800392e <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800393a:	f7fe fb9b 	bl	8002074 <HAL_GetTick>
 800393e:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003940:	e028      	b.n	8003994 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4618      	mov	r0, r3
 8003948:	f7fe fe14 	bl	8002574 <LL_ADC_IsEnabled>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d104      	bne.n	800395c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4618      	mov	r0, r3
 8003958:	f7fe fdf8 	bl	800254c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800395c:	f7fe fb8a 	bl	8002074 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b02      	cmp	r3, #2
 8003968:	d914      	bls.n	8003994 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0301 	and.w	r3, r3, #1
 8003974:	2b01      	cmp	r3, #1
 8003976:	d00d      	beq.n	8003994 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800397c:	f043 0210 	orr.w	r2, r3, #16
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003988:	f043 0201 	orr.w	r2, r3, #1
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e007      	b.n	80039a4 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0301 	and.w	r3, r3, #1
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d1cf      	bne.n	8003942 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3710      	adds	r7, #16
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	8000003f 	.word	0x8000003f
 80039b0:	50000100 	.word	0x50000100
 80039b4:	50000300 	.word	0x50000300
 80039b8:	50000700 	.word	0x50000700
 80039bc:	20000000 	.word	0x20000000
 80039c0:	053e2d63 	.word	0x053e2d63

080039c4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039d0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039d6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d14b      	bne.n	8003a76 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039e2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0308 	and.w	r3, r3, #8
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d021      	beq.n	8003a3c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7fe fc99 	bl	8002334 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d032      	beq.n	8003a6e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d12b      	bne.n	8003a6e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a1a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a26:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d11f      	bne.n	8003a6e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a32:	f043 0201 	orr.w	r2, r3, #1
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003a3a:	e018      	b.n	8003a6e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	f003 0302 	and.w	r3, r3, #2
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d111      	bne.n	8003a6e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a4e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a5a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d105      	bne.n	8003a6e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a66:	f043 0201 	orr.w	r2, r3, #1
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003a6e:	68f8      	ldr	r0, [r7, #12]
 8003a70:	f7fd fab6 	bl	8000fe0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003a74:	e00e      	b.n	8003a94 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a7a:	f003 0310 	and.w	r3, r3, #16
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d003      	beq.n	8003a8a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003a82:	68f8      	ldr	r0, [r7, #12]
 8003a84:	f7ff fabe 	bl	8003004 <HAL_ADC_ErrorCallback>
}
 8003a88:	e004      	b.n	8003a94 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	4798      	blx	r3
}
 8003a94:	bf00      	nop
 8003a96:	3710      	adds	r7, #16
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aa8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003aaa:	68f8      	ldr	r0, [r7, #12]
 8003aac:	f7fd fa6e 	bl	8000f8c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003ab0:	bf00      	nop
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ac4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ad6:	f043 0204 	orr.w	r2, r3, #4
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003ade:	68f8      	ldr	r0, [r7, #12]
 8003ae0:	f7ff fa90 	bl	8003004 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003ae4:	bf00      	nop
 8003ae6:	3710      	adds	r7, #16
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <LL_ADC_IsEnabled>:
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f003 0301 	and.w	r3, r3, #1
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d101      	bne.n	8003b04 <LL_ADC_IsEnabled+0x18>
 8003b00:	2301      	movs	r3, #1
 8003b02:	e000      	b.n	8003b06 <LL_ADC_IsEnabled+0x1a>
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	370c      	adds	r7, #12
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr

08003b12 <LL_ADC_REG_IsConversionOngoing>:
{
 8003b12:	b480      	push	{r7}
 8003b14:	b083      	sub	sp, #12
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f003 0304 	and.w	r3, r3, #4
 8003b22:	2b04      	cmp	r3, #4
 8003b24:	d101      	bne.n	8003b2a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003b26:	2301      	movs	r3, #1
 8003b28:	e000      	b.n	8003b2c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003b40:	bf00      	nop
 8003b42:	370c      	adds	r7, #12
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003b54:	bf00      	nop
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003b68:	bf00      	nop
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003b7c:	bf00      	nop
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003b90:	bf00      	nop
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003b9c:	b590      	push	{r4, r7, lr}
 8003b9e:	b0a1      	sub	sp, #132	@ 0x84
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d101      	bne.n	8003bba <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	e0e7      	b.n	8003d8a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003bd2:	d102      	bne.n	8003bda <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003bd4:	4b6f      	ldr	r3, [pc, #444]	@ (8003d94 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003bd6:	60bb      	str	r3, [r7, #8]
 8003bd8:	e009      	b.n	8003bee <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a6e      	ldr	r2, [pc, #440]	@ (8003d98 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d102      	bne.n	8003bea <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003be4:	4b6d      	ldr	r3, [pc, #436]	@ (8003d9c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003be6:	60bb      	str	r3, [r7, #8]
 8003be8:	e001      	b.n	8003bee <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003bea:	2300      	movs	r3, #0
 8003bec:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d10b      	bne.n	8003c0c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bf8:	f043 0220 	orr.w	r2, r3, #32
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e0be      	b.n	8003d8a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7ff ff7f 	bl	8003b12 <LL_ADC_REG_IsConversionOngoing>
 8003c14:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7ff ff79 	bl	8003b12 <LL_ADC_REG_IsConversionOngoing>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	f040 80a0 	bne.w	8003d68 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003c28:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	f040 809c 	bne.w	8003d68 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c38:	d004      	beq.n	8003c44 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a55      	ldr	r2, [pc, #340]	@ (8003d94 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d101      	bne.n	8003c48 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003c44:	4b56      	ldr	r3, [pc, #344]	@ (8003da0 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003c46:	e000      	b.n	8003c4a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003c48:	4b56      	ldr	r3, [pc, #344]	@ (8003da4 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003c4a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d04b      	beq.n	8003cec <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003c54:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	6859      	ldr	r1, [r3, #4]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003c66:	035b      	lsls	r3, r3, #13
 8003c68:	430b      	orrs	r3, r1
 8003c6a:	431a      	orrs	r2, r3
 8003c6c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c6e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c78:	d004      	beq.n	8003c84 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a45      	ldr	r2, [pc, #276]	@ (8003d94 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d10f      	bne.n	8003ca4 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003c84:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003c88:	f7ff ff30 	bl	8003aec <LL_ADC_IsEnabled>
 8003c8c:	4604      	mov	r4, r0
 8003c8e:	4841      	ldr	r0, [pc, #260]	@ (8003d94 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003c90:	f7ff ff2c 	bl	8003aec <LL_ADC_IsEnabled>
 8003c94:	4603      	mov	r3, r0
 8003c96:	4323      	orrs	r3, r4
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	bf0c      	ite	eq
 8003c9c:	2301      	moveq	r3, #1
 8003c9e:	2300      	movne	r3, #0
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	e012      	b.n	8003cca <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003ca4:	483c      	ldr	r0, [pc, #240]	@ (8003d98 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003ca6:	f7ff ff21 	bl	8003aec <LL_ADC_IsEnabled>
 8003caa:	4604      	mov	r4, r0
 8003cac:	483b      	ldr	r0, [pc, #236]	@ (8003d9c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003cae:	f7ff ff1d 	bl	8003aec <LL_ADC_IsEnabled>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	431c      	orrs	r4, r3
 8003cb6:	483c      	ldr	r0, [pc, #240]	@ (8003da8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003cb8:	f7ff ff18 	bl	8003aec <LL_ADC_IsEnabled>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	4323      	orrs	r3, r4
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	bf0c      	ite	eq
 8003cc4:	2301      	moveq	r3, #1
 8003cc6:	2300      	movne	r3, #0
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d056      	beq.n	8003d7c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003cce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003cd6:	f023 030f 	bic.w	r3, r3, #15
 8003cda:	683a      	ldr	r2, [r7, #0]
 8003cdc:	6811      	ldr	r1, [r2, #0]
 8003cde:	683a      	ldr	r2, [r7, #0]
 8003ce0:	6892      	ldr	r2, [r2, #8]
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	431a      	orrs	r2, r3
 8003ce6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ce8:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003cea:	e047      	b.n	8003d7c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003cec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003cf4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003cf6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d00:	d004      	beq.n	8003d0c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a23      	ldr	r2, [pc, #140]	@ (8003d94 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d10f      	bne.n	8003d2c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003d0c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003d10:	f7ff feec 	bl	8003aec <LL_ADC_IsEnabled>
 8003d14:	4604      	mov	r4, r0
 8003d16:	481f      	ldr	r0, [pc, #124]	@ (8003d94 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003d18:	f7ff fee8 	bl	8003aec <LL_ADC_IsEnabled>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	4323      	orrs	r3, r4
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	bf0c      	ite	eq
 8003d24:	2301      	moveq	r3, #1
 8003d26:	2300      	movne	r3, #0
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	e012      	b.n	8003d52 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003d2c:	481a      	ldr	r0, [pc, #104]	@ (8003d98 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003d2e:	f7ff fedd 	bl	8003aec <LL_ADC_IsEnabled>
 8003d32:	4604      	mov	r4, r0
 8003d34:	4819      	ldr	r0, [pc, #100]	@ (8003d9c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003d36:	f7ff fed9 	bl	8003aec <LL_ADC_IsEnabled>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	431c      	orrs	r4, r3
 8003d3e:	481a      	ldr	r0, [pc, #104]	@ (8003da8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003d40:	f7ff fed4 	bl	8003aec <LL_ADC_IsEnabled>
 8003d44:	4603      	mov	r3, r0
 8003d46:	4323      	orrs	r3, r4
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	bf0c      	ite	eq
 8003d4c:	2301      	moveq	r3, #1
 8003d4e:	2300      	movne	r3, #0
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d012      	beq.n	8003d7c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003d56:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003d5e:	f023 030f 	bic.w	r3, r3, #15
 8003d62:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003d64:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003d66:	e009      	b.n	8003d7c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d6c:	f043 0220 	orr.w	r2, r3, #32
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003d7a:	e000      	b.n	8003d7e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003d7c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003d86:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3784      	adds	r7, #132	@ 0x84
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd90      	pop	{r4, r7, pc}
 8003d92:	bf00      	nop
 8003d94:	50000100 	.word	0x50000100
 8003d98:	50000400 	.word	0x50000400
 8003d9c:	50000500 	.word	0x50000500
 8003da0:	50000300 	.word	0x50000300
 8003da4:	50000700 	.word	0x50000700
 8003da8:	50000600 	.word	0x50000600

08003dac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b085      	sub	sp, #20
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f003 0307 	and.w	r3, r3, #7
 8003dba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8003df0 <__NVIC_SetPriorityGrouping+0x44>)
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dc2:	68ba      	ldr	r2, [r7, #8]
 8003dc4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003dc8:	4013      	ands	r3, r2
 8003dca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003dd4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003dd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ddc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dde:	4a04      	ldr	r2, [pc, #16]	@ (8003df0 <__NVIC_SetPriorityGrouping+0x44>)
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	60d3      	str	r3, [r2, #12]
}
 8003de4:	bf00      	nop
 8003de6:	3714      	adds	r7, #20
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr
 8003df0:	e000ed00 	.word	0xe000ed00

08003df4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003df4:	b480      	push	{r7}
 8003df6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003df8:	4b04      	ldr	r3, [pc, #16]	@ (8003e0c <__NVIC_GetPriorityGrouping+0x18>)
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	0a1b      	lsrs	r3, r3, #8
 8003dfe:	f003 0307 	and.w	r3, r3, #7
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr
 8003e0c:	e000ed00 	.word	0xe000ed00

08003e10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	4603      	mov	r3, r0
 8003e18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	db0b      	blt.n	8003e3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e22:	79fb      	ldrb	r3, [r7, #7]
 8003e24:	f003 021f 	and.w	r2, r3, #31
 8003e28:	4907      	ldr	r1, [pc, #28]	@ (8003e48 <__NVIC_EnableIRQ+0x38>)
 8003e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e2e:	095b      	lsrs	r3, r3, #5
 8003e30:	2001      	movs	r0, #1
 8003e32:	fa00 f202 	lsl.w	r2, r0, r2
 8003e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003e3a:	bf00      	nop
 8003e3c:	370c      	adds	r7, #12
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	e000e100 	.word	0xe000e100

08003e4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	4603      	mov	r3, r0
 8003e54:	6039      	str	r1, [r7, #0]
 8003e56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	db0a      	blt.n	8003e76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	b2da      	uxtb	r2, r3
 8003e64:	490c      	ldr	r1, [pc, #48]	@ (8003e98 <__NVIC_SetPriority+0x4c>)
 8003e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e6a:	0112      	lsls	r2, r2, #4
 8003e6c:	b2d2      	uxtb	r2, r2
 8003e6e:	440b      	add	r3, r1
 8003e70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e74:	e00a      	b.n	8003e8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	b2da      	uxtb	r2, r3
 8003e7a:	4908      	ldr	r1, [pc, #32]	@ (8003e9c <__NVIC_SetPriority+0x50>)
 8003e7c:	79fb      	ldrb	r3, [r7, #7]
 8003e7e:	f003 030f 	and.w	r3, r3, #15
 8003e82:	3b04      	subs	r3, #4
 8003e84:	0112      	lsls	r2, r2, #4
 8003e86:	b2d2      	uxtb	r2, r2
 8003e88:	440b      	add	r3, r1
 8003e8a:	761a      	strb	r2, [r3, #24]
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr
 8003e98:	e000e100 	.word	0xe000e100
 8003e9c:	e000ed00 	.word	0xe000ed00

08003ea0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b089      	sub	sp, #36	@ 0x24
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f003 0307 	and.w	r3, r3, #7
 8003eb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	f1c3 0307 	rsb	r3, r3, #7
 8003eba:	2b04      	cmp	r3, #4
 8003ebc:	bf28      	it	cs
 8003ebe:	2304      	movcs	r3, #4
 8003ec0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	3304      	adds	r3, #4
 8003ec6:	2b06      	cmp	r3, #6
 8003ec8:	d902      	bls.n	8003ed0 <NVIC_EncodePriority+0x30>
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	3b03      	subs	r3, #3
 8003ece:	e000      	b.n	8003ed2 <NVIC_EncodePriority+0x32>
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	fa02 f303 	lsl.w	r3, r2, r3
 8003ede:	43da      	mvns	r2, r3
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	401a      	ands	r2, r3
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ee8:	f04f 31ff 	mov.w	r1, #4294967295
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	fa01 f303 	lsl.w	r3, r1, r3
 8003ef2:	43d9      	mvns	r1, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ef8:	4313      	orrs	r3, r2
         );
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3724      	adds	r7, #36	@ 0x24
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
	...

08003f08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	3b01      	subs	r3, #1
 8003f14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f18:	d301      	bcc.n	8003f1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e00f      	b.n	8003f3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f1e:	4a0a      	ldr	r2, [pc, #40]	@ (8003f48 <SysTick_Config+0x40>)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	3b01      	subs	r3, #1
 8003f24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f26:	210f      	movs	r1, #15
 8003f28:	f04f 30ff 	mov.w	r0, #4294967295
 8003f2c:	f7ff ff8e 	bl	8003e4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f30:	4b05      	ldr	r3, [pc, #20]	@ (8003f48 <SysTick_Config+0x40>)
 8003f32:	2200      	movs	r2, #0
 8003f34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f36:	4b04      	ldr	r3, [pc, #16]	@ (8003f48 <SysTick_Config+0x40>)
 8003f38:	2207      	movs	r2, #7
 8003f3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3708      	adds	r7, #8
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	e000e010 	.word	0xe000e010

08003f4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f7ff ff29 	bl	8003dac <__NVIC_SetPriorityGrouping>
}
 8003f5a:	bf00      	nop
 8003f5c:	3708      	adds	r7, #8
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b086      	sub	sp, #24
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	4603      	mov	r3, r0
 8003f6a:	60b9      	str	r1, [r7, #8]
 8003f6c:	607a      	str	r2, [r7, #4]
 8003f6e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f70:	f7ff ff40 	bl	8003df4 <__NVIC_GetPriorityGrouping>
 8003f74:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	68b9      	ldr	r1, [r7, #8]
 8003f7a:	6978      	ldr	r0, [r7, #20]
 8003f7c:	f7ff ff90 	bl	8003ea0 <NVIC_EncodePriority>
 8003f80:	4602      	mov	r2, r0
 8003f82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f86:	4611      	mov	r1, r2
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f7ff ff5f 	bl	8003e4c <__NVIC_SetPriority>
}
 8003f8e:	bf00      	nop
 8003f90:	3718      	adds	r7, #24
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}

08003f96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b082      	sub	sp, #8
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7ff ff33 	bl	8003e10 <__NVIC_EnableIRQ>
}
 8003faa:	bf00      	nop
 8003fac:	3708      	adds	r7, #8
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}

08003fb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003fb2:	b580      	push	{r7, lr}
 8003fb4:	b082      	sub	sp, #8
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f7ff ffa4 	bl	8003f08 <SysTick_Config>
 8003fc0:	4603      	mov	r3, r0
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3708      	adds	r7, #8
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
	...

08003fcc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d101      	bne.n	8003fde <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e08d      	b.n	80040fa <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	4b47      	ldr	r3, [pc, #284]	@ (8004104 <HAL_DMA_Init+0x138>)
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d80f      	bhi.n	800400a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	461a      	mov	r2, r3
 8003ff0:	4b45      	ldr	r3, [pc, #276]	@ (8004108 <HAL_DMA_Init+0x13c>)
 8003ff2:	4413      	add	r3, r2
 8003ff4:	4a45      	ldr	r2, [pc, #276]	@ (800410c <HAL_DMA_Init+0x140>)
 8003ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8003ffa:	091b      	lsrs	r3, r3, #4
 8003ffc:	009a      	lsls	r2, r3, #2
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a42      	ldr	r2, [pc, #264]	@ (8004110 <HAL_DMA_Init+0x144>)
 8004006:	641a      	str	r2, [r3, #64]	@ 0x40
 8004008:	e00e      	b.n	8004028 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	461a      	mov	r2, r3
 8004010:	4b40      	ldr	r3, [pc, #256]	@ (8004114 <HAL_DMA_Init+0x148>)
 8004012:	4413      	add	r3, r2
 8004014:	4a3d      	ldr	r2, [pc, #244]	@ (800410c <HAL_DMA_Init+0x140>)
 8004016:	fba2 2303 	umull	r2, r3, r2, r3
 800401a:	091b      	lsrs	r3, r3, #4
 800401c:	009a      	lsls	r2, r3, #2
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a3c      	ldr	r2, [pc, #240]	@ (8004118 <HAL_DMA_Init+0x14c>)
 8004026:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2202      	movs	r2, #2
 800402c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800403e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004042:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800404c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004058:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004064:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a1b      	ldr	r3, [r3, #32]
 800406a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800406c:	68fa      	ldr	r2, [r7, #12]
 800406e:	4313      	orrs	r3, r2
 8004070:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 f9b6 	bl	80043ec <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004088:	d102      	bne.n	8004090 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685a      	ldr	r2, [r3, #4]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004098:	b2d2      	uxtb	r2, r2
 800409a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80040a4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d010      	beq.n	80040d0 <HAL_DMA_Init+0x104>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	2b04      	cmp	r3, #4
 80040b4:	d80c      	bhi.n	80040d0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 f9d6 	bl	8004468 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040c0:	2200      	movs	r2, #0
 80040c2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80040cc:	605a      	str	r2, [r3, #4]
 80040ce:	e008      	b.n	80040e2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3710      	adds	r7, #16
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	40020407 	.word	0x40020407
 8004108:	bffdfff8 	.word	0xbffdfff8
 800410c:	cccccccd 	.word	0xcccccccd
 8004110:	40020000 	.word	0x40020000
 8004114:	bffdfbf8 	.word	0xbffdfbf8
 8004118:	40020400 	.word	0x40020400

0800411c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b086      	sub	sp, #24
 8004120:	af00      	add	r7, sp, #0
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	607a      	str	r2, [r7, #4]
 8004128:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800412a:	2300      	movs	r3, #0
 800412c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004134:	2b01      	cmp	r3, #1
 8004136:	d101      	bne.n	800413c <HAL_DMA_Start_IT+0x20>
 8004138:	2302      	movs	r3, #2
 800413a:	e066      	b.n	800420a <HAL_DMA_Start_IT+0xee>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800414a:	b2db      	uxtb	r3, r3
 800414c:	2b01      	cmp	r3, #1
 800414e:	d155      	bne.n	80041fc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2202      	movs	r2, #2
 8004154:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f022 0201 	bic.w	r2, r2, #1
 800416c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	68b9      	ldr	r1, [r7, #8]
 8004174:	68f8      	ldr	r0, [r7, #12]
 8004176:	f000 f8fb 	bl	8004370 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800417e:	2b00      	cmp	r3, #0
 8004180:	d008      	beq.n	8004194 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f042 020e 	orr.w	r2, r2, #14
 8004190:	601a      	str	r2, [r3, #0]
 8004192:	e00f      	b.n	80041b4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f022 0204 	bic.w	r2, r2, #4
 80041a2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f042 020a 	orr.w	r2, r2, #10
 80041b2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d007      	beq.n	80041d2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041d0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d007      	beq.n	80041ea <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041e8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f042 0201 	orr.w	r2, r2, #1
 80041f8:	601a      	str	r2, [r3, #0]
 80041fa:	e005      	b.n	8004208 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004204:	2302      	movs	r3, #2
 8004206:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004208:	7dfb      	ldrb	r3, [r7, #23]
}
 800420a:	4618      	mov	r0, r3
 800420c:	3718      	adds	r7, #24
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}

08004212 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004212:	b580      	push	{r7, lr}
 8004214:	b084      	sub	sp, #16
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800422e:	f003 031f 	and.w	r3, r3, #31
 8004232:	2204      	movs	r2, #4
 8004234:	409a      	lsls	r2, r3
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	4013      	ands	r3, r2
 800423a:	2b00      	cmp	r3, #0
 800423c:	d026      	beq.n	800428c <HAL_DMA_IRQHandler+0x7a>
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	f003 0304 	and.w	r3, r3, #4
 8004244:	2b00      	cmp	r3, #0
 8004246:	d021      	beq.n	800428c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0320 	and.w	r3, r3, #32
 8004252:	2b00      	cmp	r3, #0
 8004254:	d107      	bne.n	8004266 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f022 0204 	bic.w	r2, r2, #4
 8004264:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800426a:	f003 021f 	and.w	r2, r3, #31
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004272:	2104      	movs	r1, #4
 8004274:	fa01 f202 	lsl.w	r2, r1, r2
 8004278:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800427e:	2b00      	cmp	r3, #0
 8004280:	d071      	beq.n	8004366 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800428a:	e06c      	b.n	8004366 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004290:	f003 031f 	and.w	r3, r3, #31
 8004294:	2202      	movs	r2, #2
 8004296:	409a      	lsls	r2, r3
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	4013      	ands	r3, r2
 800429c:	2b00      	cmp	r3, #0
 800429e:	d02e      	beq.n	80042fe <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d029      	beq.n	80042fe <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0320 	and.w	r3, r3, #32
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d10b      	bne.n	80042d0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f022 020a 	bic.w	r2, r2, #10
 80042c6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042d4:	f003 021f 	and.w	r2, r3, #31
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042dc:	2102      	movs	r1, #2
 80042de:	fa01 f202 	lsl.w	r2, r1, r2
 80042e2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d038      	beq.n	8004366 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80042fc:	e033      	b.n	8004366 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004302:	f003 031f 	and.w	r3, r3, #31
 8004306:	2208      	movs	r2, #8
 8004308:	409a      	lsls	r2, r3
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	4013      	ands	r3, r2
 800430e:	2b00      	cmp	r3, #0
 8004310:	d02a      	beq.n	8004368 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	f003 0308 	and.w	r3, r3, #8
 8004318:	2b00      	cmp	r3, #0
 800431a:	d025      	beq.n	8004368 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f022 020e 	bic.w	r2, r2, #14
 800432a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004330:	f003 021f 	and.w	r2, r3, #31
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004338:	2101      	movs	r1, #1
 800433a:	fa01 f202 	lsl.w	r2, r1, r2
 800433e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2201      	movs	r2, #1
 800434a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800435a:	2b00      	cmp	r3, #0
 800435c:	d004      	beq.n	8004368 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004366:	bf00      	nop
 8004368:	bf00      	nop
}
 800436a:	3710      	adds	r7, #16
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004370:	b480      	push	{r7}
 8004372:	b085      	sub	sp, #20
 8004374:	af00      	add	r7, sp, #0
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	607a      	str	r2, [r7, #4]
 800437c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004382:	68fa      	ldr	r2, [r7, #12]
 8004384:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004386:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800438c:	2b00      	cmp	r3, #0
 800438e:	d004      	beq.n	800439a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004398:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800439e:	f003 021f 	and.w	r2, r3, #31
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a6:	2101      	movs	r1, #1
 80043a8:	fa01 f202 	lsl.w	r2, r1, r2
 80043ac:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	683a      	ldr	r2, [r7, #0]
 80043b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	2b10      	cmp	r3, #16
 80043bc:	d108      	bne.n	80043d0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68ba      	ldr	r2, [r7, #8]
 80043cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80043ce:	e007      	b.n	80043e0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68ba      	ldr	r2, [r7, #8]
 80043d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	60da      	str	r2, [r3, #12]
}
 80043e0:	bf00      	nop
 80043e2:	3714      	adds	r7, #20
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b087      	sub	sp, #28
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	461a      	mov	r2, r3
 80043fa:	4b16      	ldr	r3, [pc, #88]	@ (8004454 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d802      	bhi.n	8004406 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004400:	4b15      	ldr	r3, [pc, #84]	@ (8004458 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004402:	617b      	str	r3, [r7, #20]
 8004404:	e001      	b.n	800440a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004406:	4b15      	ldr	r3, [pc, #84]	@ (800445c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004408:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	b2db      	uxtb	r3, r3
 8004414:	3b08      	subs	r3, #8
 8004416:	4a12      	ldr	r2, [pc, #72]	@ (8004460 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004418:	fba2 2303 	umull	r2, r3, r2, r3
 800441c:	091b      	lsrs	r3, r3, #4
 800441e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004424:	089b      	lsrs	r3, r3, #2
 8004426:	009a      	lsls	r2, r3, #2
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	4413      	add	r3, r2
 800442c:	461a      	mov	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a0b      	ldr	r2, [pc, #44]	@ (8004464 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004436:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f003 031f 	and.w	r3, r3, #31
 800443e:	2201      	movs	r2, #1
 8004440:	409a      	lsls	r2, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004446:	bf00      	nop
 8004448:	371c      	adds	r7, #28
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	40020407 	.word	0x40020407
 8004458:	40020800 	.word	0x40020800
 800445c:	40020820 	.word	0x40020820
 8004460:	cccccccd 	.word	0xcccccccd
 8004464:	40020880 	.word	0x40020880

08004468 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004468:	b480      	push	{r7}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	b2db      	uxtb	r3, r3
 8004476:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	4b0b      	ldr	r3, [pc, #44]	@ (80044a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800447c:	4413      	add	r3, r2
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	461a      	mov	r2, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a08      	ldr	r2, [pc, #32]	@ (80044ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800448a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	3b01      	subs	r3, #1
 8004490:	f003 031f 	and.w	r3, r3, #31
 8004494:	2201      	movs	r2, #1
 8004496:	409a      	lsls	r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800449c:	bf00      	nop
 800449e:	3714      	adds	r7, #20
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr
 80044a8:	1000823f 	.word	0x1000823f
 80044ac:	40020940 	.word	0x40020940

080044b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b087      	sub	sp, #28
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80044ba:	2300      	movs	r3, #0
 80044bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80044be:	e15a      	b.n	8004776 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	2101      	movs	r1, #1
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	fa01 f303 	lsl.w	r3, r1, r3
 80044cc:	4013      	ands	r3, r2
 80044ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	f000 814c 	beq.w	8004770 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f003 0303 	and.w	r3, r3, #3
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d005      	beq.n	80044f0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d130      	bne.n	8004552 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	005b      	lsls	r3, r3, #1
 80044fa:	2203      	movs	r2, #3
 80044fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004500:	43db      	mvns	r3, r3
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	4013      	ands	r3, r2
 8004506:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	68da      	ldr	r2, [r3, #12]
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	005b      	lsls	r3, r3, #1
 8004510:	fa02 f303 	lsl.w	r3, r2, r3
 8004514:	693a      	ldr	r2, [r7, #16]
 8004516:	4313      	orrs	r3, r2
 8004518:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	693a      	ldr	r2, [r7, #16]
 800451e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004526:	2201      	movs	r2, #1
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	fa02 f303 	lsl.w	r3, r2, r3
 800452e:	43db      	mvns	r3, r3
 8004530:	693a      	ldr	r2, [r7, #16]
 8004532:	4013      	ands	r3, r2
 8004534:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	091b      	lsrs	r3, r3, #4
 800453c:	f003 0201 	and.w	r2, r3, #1
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	fa02 f303 	lsl.w	r3, r2, r3
 8004546:	693a      	ldr	r2, [r7, #16]
 8004548:	4313      	orrs	r3, r2
 800454a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	693a      	ldr	r2, [r7, #16]
 8004550:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	f003 0303 	and.w	r3, r3, #3
 800455a:	2b03      	cmp	r3, #3
 800455c:	d017      	beq.n	800458e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	005b      	lsls	r3, r3, #1
 8004568:	2203      	movs	r2, #3
 800456a:	fa02 f303 	lsl.w	r3, r2, r3
 800456e:	43db      	mvns	r3, r3
 8004570:	693a      	ldr	r2, [r7, #16]
 8004572:	4013      	ands	r3, r2
 8004574:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	689a      	ldr	r2, [r3, #8]
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	005b      	lsls	r3, r3, #1
 800457e:	fa02 f303 	lsl.w	r3, r2, r3
 8004582:	693a      	ldr	r2, [r7, #16]
 8004584:	4313      	orrs	r3, r2
 8004586:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	693a      	ldr	r2, [r7, #16]
 800458c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f003 0303 	and.w	r3, r3, #3
 8004596:	2b02      	cmp	r3, #2
 8004598:	d123      	bne.n	80045e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	08da      	lsrs	r2, r3, #3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	3208      	adds	r2, #8
 80045a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	f003 0307 	and.w	r3, r3, #7
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	220f      	movs	r2, #15
 80045b2:	fa02 f303 	lsl.w	r3, r2, r3
 80045b6:	43db      	mvns	r3, r3
 80045b8:	693a      	ldr	r2, [r7, #16]
 80045ba:	4013      	ands	r3, r2
 80045bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	691a      	ldr	r2, [r3, #16]
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	f003 0307 	and.w	r3, r3, #7
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	fa02 f303 	lsl.w	r3, r2, r3
 80045ce:	693a      	ldr	r2, [r7, #16]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	08da      	lsrs	r2, r3, #3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	3208      	adds	r2, #8
 80045dc:	6939      	ldr	r1, [r7, #16]
 80045de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	005b      	lsls	r3, r3, #1
 80045ec:	2203      	movs	r2, #3
 80045ee:	fa02 f303 	lsl.w	r3, r2, r3
 80045f2:	43db      	mvns	r3, r3
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	4013      	ands	r3, r2
 80045f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f003 0203 	and.w	r2, r3, #3
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	005b      	lsls	r3, r3, #1
 8004606:	fa02 f303 	lsl.w	r3, r2, r3
 800460a:	693a      	ldr	r2, [r7, #16]
 800460c:	4313      	orrs	r3, r2
 800460e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	693a      	ldr	r2, [r7, #16]
 8004614:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800461e:	2b00      	cmp	r3, #0
 8004620:	f000 80a6 	beq.w	8004770 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004624:	4b5b      	ldr	r3, [pc, #364]	@ (8004794 <HAL_GPIO_Init+0x2e4>)
 8004626:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004628:	4a5a      	ldr	r2, [pc, #360]	@ (8004794 <HAL_GPIO_Init+0x2e4>)
 800462a:	f043 0301 	orr.w	r3, r3, #1
 800462e:	6613      	str	r3, [r2, #96]	@ 0x60
 8004630:	4b58      	ldr	r3, [pc, #352]	@ (8004794 <HAL_GPIO_Init+0x2e4>)
 8004632:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	60bb      	str	r3, [r7, #8]
 800463a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800463c:	4a56      	ldr	r2, [pc, #344]	@ (8004798 <HAL_GPIO_Init+0x2e8>)
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	089b      	lsrs	r3, r3, #2
 8004642:	3302      	adds	r3, #2
 8004644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004648:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	f003 0303 	and.w	r3, r3, #3
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	220f      	movs	r2, #15
 8004654:	fa02 f303 	lsl.w	r3, r2, r3
 8004658:	43db      	mvns	r3, r3
 800465a:	693a      	ldr	r2, [r7, #16]
 800465c:	4013      	ands	r3, r2
 800465e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004666:	d01f      	beq.n	80046a8 <HAL_GPIO_Init+0x1f8>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	4a4c      	ldr	r2, [pc, #304]	@ (800479c <HAL_GPIO_Init+0x2ec>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d019      	beq.n	80046a4 <HAL_GPIO_Init+0x1f4>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a4b      	ldr	r2, [pc, #300]	@ (80047a0 <HAL_GPIO_Init+0x2f0>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d013      	beq.n	80046a0 <HAL_GPIO_Init+0x1f0>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a4a      	ldr	r2, [pc, #296]	@ (80047a4 <HAL_GPIO_Init+0x2f4>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d00d      	beq.n	800469c <HAL_GPIO_Init+0x1ec>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a49      	ldr	r2, [pc, #292]	@ (80047a8 <HAL_GPIO_Init+0x2f8>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d007      	beq.n	8004698 <HAL_GPIO_Init+0x1e8>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a48      	ldr	r2, [pc, #288]	@ (80047ac <HAL_GPIO_Init+0x2fc>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d101      	bne.n	8004694 <HAL_GPIO_Init+0x1e4>
 8004690:	2305      	movs	r3, #5
 8004692:	e00a      	b.n	80046aa <HAL_GPIO_Init+0x1fa>
 8004694:	2306      	movs	r3, #6
 8004696:	e008      	b.n	80046aa <HAL_GPIO_Init+0x1fa>
 8004698:	2304      	movs	r3, #4
 800469a:	e006      	b.n	80046aa <HAL_GPIO_Init+0x1fa>
 800469c:	2303      	movs	r3, #3
 800469e:	e004      	b.n	80046aa <HAL_GPIO_Init+0x1fa>
 80046a0:	2302      	movs	r3, #2
 80046a2:	e002      	b.n	80046aa <HAL_GPIO_Init+0x1fa>
 80046a4:	2301      	movs	r3, #1
 80046a6:	e000      	b.n	80046aa <HAL_GPIO_Init+0x1fa>
 80046a8:	2300      	movs	r3, #0
 80046aa:	697a      	ldr	r2, [r7, #20]
 80046ac:	f002 0203 	and.w	r2, r2, #3
 80046b0:	0092      	lsls	r2, r2, #2
 80046b2:	4093      	lsls	r3, r2
 80046b4:	693a      	ldr	r2, [r7, #16]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80046ba:	4937      	ldr	r1, [pc, #220]	@ (8004798 <HAL_GPIO_Init+0x2e8>)
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	089b      	lsrs	r3, r3, #2
 80046c0:	3302      	adds	r3, #2
 80046c2:	693a      	ldr	r2, [r7, #16]
 80046c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80046c8:	4b39      	ldr	r3, [pc, #228]	@ (80047b0 <HAL_GPIO_Init+0x300>)
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	43db      	mvns	r3, r3
 80046d2:	693a      	ldr	r2, [r7, #16]
 80046d4:	4013      	ands	r3, r2
 80046d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d003      	beq.n	80046ec <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80046ec:	4a30      	ldr	r2, [pc, #192]	@ (80047b0 <HAL_GPIO_Init+0x300>)
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80046f2:	4b2f      	ldr	r3, [pc, #188]	@ (80047b0 <HAL_GPIO_Init+0x300>)
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	43db      	mvns	r3, r3
 80046fc:	693a      	ldr	r2, [r7, #16]
 80046fe:	4013      	ands	r3, r2
 8004700:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d003      	beq.n	8004716 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800470e:	693a      	ldr	r2, [r7, #16]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	4313      	orrs	r3, r2
 8004714:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004716:	4a26      	ldr	r2, [pc, #152]	@ (80047b0 <HAL_GPIO_Init+0x300>)
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800471c:	4b24      	ldr	r3, [pc, #144]	@ (80047b0 <HAL_GPIO_Init+0x300>)
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	43db      	mvns	r3, r3
 8004726:	693a      	ldr	r2, [r7, #16]
 8004728:	4013      	ands	r3, r2
 800472a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004734:	2b00      	cmp	r3, #0
 8004736:	d003      	beq.n	8004740 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004738:	693a      	ldr	r2, [r7, #16]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	4313      	orrs	r3, r2
 800473e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004740:	4a1b      	ldr	r2, [pc, #108]	@ (80047b0 <HAL_GPIO_Init+0x300>)
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004746:	4b1a      	ldr	r3, [pc, #104]	@ (80047b0 <HAL_GPIO_Init+0x300>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	43db      	mvns	r3, r3
 8004750:	693a      	ldr	r2, [r7, #16]
 8004752:	4013      	ands	r3, r2
 8004754:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d003      	beq.n	800476a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004762:	693a      	ldr	r2, [r7, #16]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	4313      	orrs	r3, r2
 8004768:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800476a:	4a11      	ldr	r2, [pc, #68]	@ (80047b0 <HAL_GPIO_Init+0x300>)
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	3301      	adds	r3, #1
 8004774:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	fa22 f303 	lsr.w	r3, r2, r3
 8004780:	2b00      	cmp	r3, #0
 8004782:	f47f ae9d 	bne.w	80044c0 <HAL_GPIO_Init+0x10>
  }
}
 8004786:	bf00      	nop
 8004788:	bf00      	nop
 800478a:	371c      	adds	r7, #28
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr
 8004794:	40021000 	.word	0x40021000
 8004798:	40010000 	.word	0x40010000
 800479c:	48000400 	.word	0x48000400
 80047a0:	48000800 	.word	0x48000800
 80047a4:	48000c00 	.word	0x48000c00
 80047a8:	48001000 	.word	0x48001000
 80047ac:	48001400 	.word	0x48001400
 80047b0:	40010400 	.word	0x40010400

080047b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	460b      	mov	r3, r1
 80047be:	807b      	strh	r3, [r7, #2]
 80047c0:	4613      	mov	r3, r2
 80047c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80047c4:	787b      	ldrb	r3, [r7, #1]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d003      	beq.n	80047d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80047ca:	887a      	ldrh	r2, [r7, #2]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80047d0:	e002      	b.n	80047d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80047d2:	887a      	ldrh	r2, [r7, #2]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b082      	sub	sp, #8
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	4603      	mov	r3, r0
 80047ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80047ee:	4b08      	ldr	r3, [pc, #32]	@ (8004810 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047f0:	695a      	ldr	r2, [r3, #20]
 80047f2:	88fb      	ldrh	r3, [r7, #6]
 80047f4:	4013      	ands	r3, r2
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d006      	beq.n	8004808 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80047fa:	4a05      	ldr	r2, [pc, #20]	@ (8004810 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047fc:	88fb      	ldrh	r3, [r7, #6]
 80047fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004800:	88fb      	ldrh	r3, [r7, #6]
 8004802:	4618      	mov	r0, r3
 8004804:	f000 f806 	bl	8004814 <HAL_GPIO_EXTI_Callback>
  }
}
 8004808:	bf00      	nop
 800480a:	3708      	adds	r7, #8
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}
 8004810:	40010400 	.word	0x40010400

08004814 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	4603      	mov	r3, r0
 800481c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800481e:	bf00      	nop
 8004820:	370c      	adds	r7, #12
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
	...

0800482c <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004834:	2300      	movs	r3, #0
 8004836:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d101      	bne.n	8004842 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e0bb      	b.n	80049ba <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8004848:	b2db      	uxtb	r3, r3
 800484a:	2b05      	cmp	r3, #5
 800484c:	d101      	bne.n	8004852 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e0b3      	b.n	80049ba <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8004858:	b2db      	uxtb	r3, r3
 800485a:	2b02      	cmp	r3, #2
 800485c:	d101      	bne.n	8004862 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e0ab      	b.n	80049ba <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004862:	4b58      	ldr	r3, [pc, #352]	@ (80049c4 <HAL_OPAMP_Init+0x198>)
 8004864:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004866:	4a57      	ldr	r2, [pc, #348]	@ (80049c4 <HAL_OPAMP_Init+0x198>)
 8004868:	f043 0301 	orr.w	r3, r3, #1
 800486c:	6613      	str	r3, [r2, #96]	@ 0x60
 800486e:	4b55      	ldr	r3, [pc, #340]	@ (80049c4 <HAL_OPAMP_Init+0x198>)
 8004870:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004872:	f003 0301 	and.w	r3, r3, #1
 8004876:	60bb      	str	r3, [r7, #8]
 8004878:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8004880:	b2db      	uxtb	r3, r3
 8004882:	2b00      	cmp	r3, #0
 8004884:	d103      	bne.n	800488e <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f7fc fd98 	bl	80013c4 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	2b40      	cmp	r3, #64	@ 0x40
 800489a:	d003      	beq.n	80048a4 <HAL_OPAMP_Init+0x78>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	2b60      	cmp	r3, #96	@ 0x60
 80048a2:	d133      	bne.n	800490c <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f023 0110 	bic.w	r1, r3, #16
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	430a      	orrs	r2, r1
 80048b8:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	4b41      	ldr	r3, [pc, #260]	@ (80049c8 <HAL_OPAMP_Init+0x19c>)
 80048c2:	4013      	ands	r3, r2
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	6851      	ldr	r1, [r2, #4]
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	6892      	ldr	r2, [r2, #8]
 80048cc:	4311      	orrs	r1, r2
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	6912      	ldr	r2, [r2, #16]
 80048d2:	430a      	orrs	r2, r1
 80048d4:	6879      	ldr	r1, [r7, #4]
 80048d6:	7d09      	ldrb	r1, [r1, #20]
 80048d8:	2901      	cmp	r1, #1
 80048da:	d102      	bne.n	80048e2 <HAL_OPAMP_Init+0xb6>
 80048dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80048e0:	e000      	b.n	80048e4 <HAL_OPAMP_Init+0xb8>
 80048e2:	2100      	movs	r1, #0
 80048e4:	4311      	orrs	r1, r2
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80048ea:	4311      	orrs	r1, r2
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80048f0:	4311      	orrs	r1, r2
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80048f6:	04d2      	lsls	r2, r2, #19
 80048f8:	4311      	orrs	r1, r2
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80048fe:	0612      	lsls	r2, r2, #24
 8004900:	4311      	orrs	r1, r2
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	6812      	ldr	r2, [r2, #0]
 8004906:	430b      	orrs	r3, r1
 8004908:	6013      	str	r3, [r2, #0]
 800490a:	e035      	b.n	8004978 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f023 0110 	bic.w	r1, r3, #16
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	430a      	orrs	r2, r1
 8004920:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	4b27      	ldr	r3, [pc, #156]	@ (80049c8 <HAL_OPAMP_Init+0x19c>)
 800492a:	4013      	ands	r3, r2
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	6851      	ldr	r1, [r2, #4]
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	6892      	ldr	r2, [r2, #8]
 8004934:	4311      	orrs	r1, r2
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	68d2      	ldr	r2, [r2, #12]
 800493a:	4311      	orrs	r1, r2
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	6912      	ldr	r2, [r2, #16]
 8004940:	430a      	orrs	r2, r1
 8004942:	6879      	ldr	r1, [r7, #4]
 8004944:	7d09      	ldrb	r1, [r1, #20]
 8004946:	2901      	cmp	r1, #1
 8004948:	d102      	bne.n	8004950 <HAL_OPAMP_Init+0x124>
 800494a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800494e:	e000      	b.n	8004952 <HAL_OPAMP_Init+0x126>
 8004950:	2100      	movs	r1, #0
 8004952:	4311      	orrs	r1, r2
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004958:	4311      	orrs	r1, r2
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800495e:	4311      	orrs	r1, r2
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004964:	04d2      	lsls	r2, r2, #19
 8004966:	4311      	orrs	r1, r2
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800496c:	0612      	lsls	r2, r2, #24
 800496e:	4311      	orrs	r1, r2
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	6812      	ldr	r2, [r2, #0]
 8004974:	430b      	orrs	r3, r1
 8004976:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	699b      	ldr	r3, [r3, #24]
 800497e:	2b00      	cmp	r3, #0
 8004980:	db10      	blt.n	80049a4 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	699a      	ldr	r2, [r3, #24]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	69db      	ldr	r3, [r3, #28]
 8004994:	431a      	orrs	r2, r3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	431a      	orrs	r2, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	430a      	orrs	r2, r1
 80049a2:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d103      	bne.n	80049b8 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 80049b8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3710      	adds	r7, #16
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	40021000 	.word	0x40021000
 80049c8:	e0003e11 	.word	0xe0003e11

080049cc <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b085      	sub	sp, #20
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049d4:	2300      	movs	r3, #0
 80049d6:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d102      	bne.n	80049e4 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	73fb      	strb	r3, [r7, #15]
 80049e2:	e01d      	b.n	8004a20 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	2b05      	cmp	r3, #5
 80049ee:	d102      	bne.n	80049f6 <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	73fb      	strb	r3, [r7, #15]
 80049f4:	e014      	b.n	8004a20 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d10c      	bne.n	8004a1c <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f042 0201 	orr.w	r2, r2, #1
 8004a10:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2204      	movs	r2, #4
 8004a16:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8004a1a:	e001      	b.n	8004a20 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 8004a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3714      	adds	r7, #20
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr

08004a2e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004a2e:	b580      	push	{r7, lr}
 8004a30:	b084      	sub	sp, #16
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d101      	bne.n	8004a40 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e0c0      	b.n	8004bc2 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d106      	bne.n	8004a5a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f009 fd1d 	bl	800e494 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2203      	movs	r2, #3
 8004a5e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4618      	mov	r0, r3
 8004a68:	f005 fb67 	bl	800a13a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	73fb      	strb	r3, [r7, #15]
 8004a70:	e03e      	b.n	8004af0 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004a72:	7bfa      	ldrb	r2, [r7, #15]
 8004a74:	6879      	ldr	r1, [r7, #4]
 8004a76:	4613      	mov	r3, r2
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	4413      	add	r3, r2
 8004a7c:	00db      	lsls	r3, r3, #3
 8004a7e:	440b      	add	r3, r1
 8004a80:	3311      	adds	r3, #17
 8004a82:	2201      	movs	r2, #1
 8004a84:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004a86:	7bfa      	ldrb	r2, [r7, #15]
 8004a88:	6879      	ldr	r1, [r7, #4]
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	4413      	add	r3, r2
 8004a90:	00db      	lsls	r3, r3, #3
 8004a92:	440b      	add	r3, r1
 8004a94:	3310      	adds	r3, #16
 8004a96:	7bfa      	ldrb	r2, [r7, #15]
 8004a98:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004a9a:	7bfa      	ldrb	r2, [r7, #15]
 8004a9c:	6879      	ldr	r1, [r7, #4]
 8004a9e:	4613      	mov	r3, r2
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	4413      	add	r3, r2
 8004aa4:	00db      	lsls	r3, r3, #3
 8004aa6:	440b      	add	r3, r1
 8004aa8:	3313      	adds	r3, #19
 8004aaa:	2200      	movs	r2, #0
 8004aac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004aae:	7bfa      	ldrb	r2, [r7, #15]
 8004ab0:	6879      	ldr	r1, [r7, #4]
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	4413      	add	r3, r2
 8004ab8:	00db      	lsls	r3, r3, #3
 8004aba:	440b      	add	r3, r1
 8004abc:	3320      	adds	r3, #32
 8004abe:	2200      	movs	r2, #0
 8004ac0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004ac2:	7bfa      	ldrb	r2, [r7, #15]
 8004ac4:	6879      	ldr	r1, [r7, #4]
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	4413      	add	r3, r2
 8004acc:	00db      	lsls	r3, r3, #3
 8004ace:	440b      	add	r3, r1
 8004ad0:	3324      	adds	r3, #36	@ 0x24
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004ad6:	7bfb      	ldrb	r3, [r7, #15]
 8004ad8:	6879      	ldr	r1, [r7, #4]
 8004ada:	1c5a      	adds	r2, r3, #1
 8004adc:	4613      	mov	r3, r2
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	4413      	add	r3, r2
 8004ae2:	00db      	lsls	r3, r3, #3
 8004ae4:	440b      	add	r3, r1
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004aea:	7bfb      	ldrb	r3, [r7, #15]
 8004aec:	3301      	adds	r3, #1
 8004aee:	73fb      	strb	r3, [r7, #15]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	791b      	ldrb	r3, [r3, #4]
 8004af4:	7bfa      	ldrb	r2, [r7, #15]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d3bb      	bcc.n	8004a72 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004afa:	2300      	movs	r3, #0
 8004afc:	73fb      	strb	r3, [r7, #15]
 8004afe:	e044      	b.n	8004b8a <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004b00:	7bfa      	ldrb	r2, [r7, #15]
 8004b02:	6879      	ldr	r1, [r7, #4]
 8004b04:	4613      	mov	r3, r2
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	4413      	add	r3, r2
 8004b0a:	00db      	lsls	r3, r3, #3
 8004b0c:	440b      	add	r3, r1
 8004b0e:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8004b12:	2200      	movs	r2, #0
 8004b14:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004b16:	7bfa      	ldrb	r2, [r7, #15]
 8004b18:	6879      	ldr	r1, [r7, #4]
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	4413      	add	r3, r2
 8004b20:	00db      	lsls	r3, r3, #3
 8004b22:	440b      	add	r3, r1
 8004b24:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004b28:	7bfa      	ldrb	r2, [r7, #15]
 8004b2a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004b2c:	7bfa      	ldrb	r2, [r7, #15]
 8004b2e:	6879      	ldr	r1, [r7, #4]
 8004b30:	4613      	mov	r3, r2
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	4413      	add	r3, r2
 8004b36:	00db      	lsls	r3, r3, #3
 8004b38:	440b      	add	r3, r1
 8004b3a:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8004b3e:	2200      	movs	r2, #0
 8004b40:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004b42:	7bfa      	ldrb	r2, [r7, #15]
 8004b44:	6879      	ldr	r1, [r7, #4]
 8004b46:	4613      	mov	r3, r2
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	4413      	add	r3, r2
 8004b4c:	00db      	lsls	r3, r3, #3
 8004b4e:	440b      	add	r3, r1
 8004b50:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8004b54:	2200      	movs	r2, #0
 8004b56:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004b58:	7bfa      	ldrb	r2, [r7, #15]
 8004b5a:	6879      	ldr	r1, [r7, #4]
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	4413      	add	r3, r2
 8004b62:	00db      	lsls	r3, r3, #3
 8004b64:	440b      	add	r3, r1
 8004b66:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004b6e:	7bfa      	ldrb	r2, [r7, #15]
 8004b70:	6879      	ldr	r1, [r7, #4]
 8004b72:	4613      	mov	r3, r2
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	4413      	add	r3, r2
 8004b78:	00db      	lsls	r3, r3, #3
 8004b7a:	440b      	add	r3, r1
 8004b7c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004b80:	2200      	movs	r2, #0
 8004b82:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b84:	7bfb      	ldrb	r3, [r7, #15]
 8004b86:	3301      	adds	r3, #1
 8004b88:	73fb      	strb	r3, [r7, #15]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	791b      	ldrb	r3, [r3, #4]
 8004b8e:	7bfa      	ldrb	r2, [r7, #15]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d3b5      	bcc.n	8004b00 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6818      	ldr	r0, [r3, #0]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	3304      	adds	r3, #4
 8004b9c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004ba0:	f005 fae6 	bl	800a170 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2201      	movs	r2, #1
 8004bae:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	7a9b      	ldrb	r3, [r3, #10]
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d102      	bne.n	8004bc0 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f001 fc40 	bl	8006440 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3710      	adds	r7, #16
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}

08004bca <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004bca:	b580      	push	{r7, lr}
 8004bcc:	b082      	sub	sp, #8
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d101      	bne.n	8004be0 <HAL_PCD_Start+0x16>
 8004bdc:	2302      	movs	r3, #2
 8004bde:	e012      	b.n	8004c06 <HAL_PCD_Start+0x3c>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4618      	mov	r0, r3
 8004bee:	f005 fa8d 	bl	800a10c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f007 fd4d 	bl	800c696 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004c04:	2300      	movs	r3, #0
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3708      	adds	r7, #8
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}

08004c0e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004c0e:	b580      	push	{r7, lr}
 8004c10:	b084      	sub	sp, #16
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f007 fd52 	bl	800c6c4 <USB_ReadInterrupts>
 8004c20:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d003      	beq.n	8004c34 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 fb04 	bl	800523a <PCD_EP_ISR_Handler>

    return;
 8004c32:	e110      	b.n	8004e56 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d013      	beq.n	8004c66 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004c46:	b29a      	uxth	r2, r3
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c50:	b292      	uxth	r2, r2
 8004c52:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f009 fcad 	bl	800e5b6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004c5c:	2100      	movs	r1, #0
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 f8fc 	bl	8004e5c <HAL_PCD_SetAddress>

    return;
 8004c64:	e0f7      	b.n	8004e56 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d00c      	beq.n	8004c8a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004c78:	b29a      	uxth	r2, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004c82:	b292      	uxth	r2, r2
 8004c84:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004c88:	e0e5      	b.n	8004e56 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d00c      	beq.n	8004cae <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004c9c:	b29a      	uxth	r2, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ca6:	b292      	uxth	r2, r2
 8004ca8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004cac:	e0d3      	b.n	8004e56 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d034      	beq.n	8004d22 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004cc0:	b29a      	uxth	r2, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f022 0204 	bic.w	r2, r2, #4
 8004cca:	b292      	uxth	r2, r2
 8004ccc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004cd8:	b29a      	uxth	r2, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f022 0208 	bic.w	r2, r2, #8
 8004ce2:	b292      	uxth	r2, r2
 8004ce4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d107      	bne.n	8004d02 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004cfa:	2100      	movs	r1, #0
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f009 fe4d 	bl	800e99c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f009 fc90 	bl	800e628 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004d10:	b29a      	uxth	r2, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004d1a:	b292      	uxth	r2, r2
 8004d1c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004d20:	e099      	b.n	8004e56 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d027      	beq.n	8004d7c <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004d34:	b29a      	uxth	r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f042 0208 	orr.w	r2, r2, #8
 8004d3e:	b292      	uxth	r2, r2
 8004d40:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004d4c:	b29a      	uxth	r2, r3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d56:	b292      	uxth	r2, r2
 8004d58:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004d64:	b29a      	uxth	r2, r3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f042 0204 	orr.w	r2, r2, #4
 8004d6e:	b292      	uxth	r2, r2
 8004d70:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f009 fc3d 	bl	800e5f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004d7a:	e06c      	b.n	8004e56 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d040      	beq.n	8004e08 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004d98:	b292      	uxth	r2, r2
 8004d9a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d12b      	bne.n	8004e00 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004db0:	b29a      	uxth	r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f042 0204 	orr.w	r2, r2, #4
 8004dba:	b292      	uxth	r2, r2
 8004dbc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004dc8:	b29a      	uxth	r2, r3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f042 0208 	orr.w	r2, r2, #8
 8004dd2:	b292      	uxth	r2, r2
 8004dd4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	089b      	lsrs	r3, r3, #2
 8004dec:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004df6:	2101      	movs	r1, #1
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f009 fdcf 	bl	800e99c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8004dfe:	e02a      	b.n	8004e56 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f009 fbf7 	bl	800e5f4 <HAL_PCD_SuspendCallback>
    return;
 8004e06:	e026      	b.n	8004e56 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d00f      	beq.n	8004e32 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004e1a:	b29a      	uxth	r2, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004e24:	b292      	uxth	r2, r2
 8004e26:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f009 fbb5 	bl	800e59a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004e30:	e011      	b.n	8004e56 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d00c      	beq.n	8004e56 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004e44:	b29a      	uxth	r2, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004e4e:	b292      	uxth	r2, r2
 8004e50:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004e54:	bf00      	nop
  }
}
 8004e56:	3710      	adds	r7, #16
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	460b      	mov	r3, r1
 8004e66:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d101      	bne.n	8004e76 <HAL_PCD_SetAddress+0x1a>
 8004e72:	2302      	movs	r3, #2
 8004e74:	e012      	b.n	8004e9c <HAL_PCD_SetAddress+0x40>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	78fa      	ldrb	r2, [r7, #3]
 8004e82:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	78fa      	ldrb	r2, [r7, #3]
 8004e8a:	4611      	mov	r1, r2
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f007 fbee 	bl	800c66e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3708      	adds	r7, #8
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	4608      	mov	r0, r1
 8004eae:	4611      	mov	r1, r2
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	70fb      	strb	r3, [r7, #3]
 8004eb6:	460b      	mov	r3, r1
 8004eb8:	803b      	strh	r3, [r7, #0]
 8004eba:	4613      	mov	r3, r2
 8004ebc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004ec2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	da0e      	bge.n	8004ee8 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004eca:	78fb      	ldrb	r3, [r7, #3]
 8004ecc:	f003 0207 	and.w	r2, r3, #7
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	4413      	add	r3, r2
 8004ed6:	00db      	lsls	r3, r3, #3
 8004ed8:	3310      	adds	r3, #16
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	4413      	add	r3, r2
 8004ede:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	705a      	strb	r2, [r3, #1]
 8004ee6:	e00e      	b.n	8004f06 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ee8:	78fb      	ldrb	r3, [r7, #3]
 8004eea:	f003 0207 	and.w	r2, r3, #7
 8004eee:	4613      	mov	r3, r2
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	4413      	add	r3, r2
 8004ef4:	00db      	lsls	r3, r3, #3
 8004ef6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	4413      	add	r3, r2
 8004efe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2200      	movs	r2, #0
 8004f04:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004f06:	78fb      	ldrb	r3, [r7, #3]
 8004f08:	f003 0307 	and.w	r3, r3, #7
 8004f0c:	b2da      	uxtb	r2, r3
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004f12:	883a      	ldrh	r2, [r7, #0]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	78ba      	ldrb	r2, [r7, #2]
 8004f1c:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004f1e:	78bb      	ldrb	r3, [r7, #2]
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d102      	bne.n	8004f2a <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2200      	movs	r2, #0
 8004f28:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d101      	bne.n	8004f38 <HAL_PCD_EP_Open+0x94>
 8004f34:	2302      	movs	r3, #2
 8004f36:	e00e      	b.n	8004f56 <HAL_PCD_EP_Open+0xb2>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	68f9      	ldr	r1, [r7, #12]
 8004f46:	4618      	mov	r0, r3
 8004f48:	f005 f930 	bl	800a1ac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8004f54:	7afb      	ldrb	r3, [r7, #11]
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3710      	adds	r7, #16
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}

08004f5e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f5e:	b580      	push	{r7, lr}
 8004f60:	b084      	sub	sp, #16
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
 8004f66:	460b      	mov	r3, r1
 8004f68:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004f6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	da0e      	bge.n	8004f90 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f72:	78fb      	ldrb	r3, [r7, #3]
 8004f74:	f003 0207 	and.w	r2, r3, #7
 8004f78:	4613      	mov	r3, r2
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	4413      	add	r3, r2
 8004f7e:	00db      	lsls	r3, r3, #3
 8004f80:	3310      	adds	r3, #16
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	4413      	add	r3, r2
 8004f86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	705a      	strb	r2, [r3, #1]
 8004f8e:	e00e      	b.n	8004fae <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f90:	78fb      	ldrb	r3, [r7, #3]
 8004f92:	f003 0207 	and.w	r2, r3, #7
 8004f96:	4613      	mov	r3, r2
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	4413      	add	r3, r2
 8004f9c:	00db      	lsls	r3, r3, #3
 8004f9e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2200      	movs	r2, #0
 8004fac:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004fae:	78fb      	ldrb	r3, [r7, #3]
 8004fb0:	f003 0307 	and.w	r3, r3, #7
 8004fb4:	b2da      	uxtb	r2, r3
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d101      	bne.n	8004fc8 <HAL_PCD_EP_Close+0x6a>
 8004fc4:	2302      	movs	r3, #2
 8004fc6:	e00e      	b.n	8004fe6 <HAL_PCD_EP_Close+0x88>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68f9      	ldr	r1, [r7, #12]
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f005 fcac 	bl	800a934 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3710      	adds	r7, #16
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}

08004fee <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004fee:	b580      	push	{r7, lr}
 8004ff0:	b086      	sub	sp, #24
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	60f8      	str	r0, [r7, #12]
 8004ff6:	607a      	str	r2, [r7, #4]
 8004ff8:	603b      	str	r3, [r7, #0]
 8004ffa:	460b      	mov	r3, r1
 8004ffc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ffe:	7afb      	ldrb	r3, [r7, #11]
 8005000:	f003 0207 	and.w	r2, r3, #7
 8005004:	4613      	mov	r3, r2
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	4413      	add	r3, r2
 800500a:	00db      	lsls	r3, r3, #3
 800500c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005010:	68fa      	ldr	r2, [r7, #12]
 8005012:	4413      	add	r3, r2
 8005014:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	683a      	ldr	r2, [r7, #0]
 8005020:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	2200      	movs	r2, #0
 8005026:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	2200      	movs	r2, #0
 800502c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800502e:	7afb      	ldrb	r3, [r7, #11]
 8005030:	f003 0307 	and.w	r3, r3, #7
 8005034:	b2da      	uxtb	r2, r3
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	6979      	ldr	r1, [r7, #20]
 8005040:	4618      	mov	r0, r3
 8005042:	f005 fe64 	bl	800ad0e <USB_EPStartXfer>

  return HAL_OK;
 8005046:	2300      	movs	r3, #0
}
 8005048:	4618      	mov	r0, r3
 800504a:	3718      	adds	r7, #24
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	460b      	mov	r3, r1
 800505a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800505c:	78fb      	ldrb	r3, [r7, #3]
 800505e:	f003 0207 	and.w	r2, r3, #7
 8005062:	6879      	ldr	r1, [r7, #4]
 8005064:	4613      	mov	r3, r2
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	4413      	add	r3, r2
 800506a:	00db      	lsls	r3, r3, #3
 800506c:	440b      	add	r3, r1
 800506e:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8005072:	681b      	ldr	r3, [r3, #0]
}
 8005074:	4618      	mov	r0, r3
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b086      	sub	sp, #24
 8005084:	af00      	add	r7, sp, #0
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	607a      	str	r2, [r7, #4]
 800508a:	603b      	str	r3, [r7, #0]
 800508c:	460b      	mov	r3, r1
 800508e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005090:	7afb      	ldrb	r3, [r7, #11]
 8005092:	f003 0207 	and.w	r2, r3, #7
 8005096:	4613      	mov	r3, r2
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	4413      	add	r3, r2
 800509c:	00db      	lsls	r3, r3, #3
 800509e:	3310      	adds	r3, #16
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	4413      	add	r3, r2
 80050a4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	683a      	ldr	r2, [r7, #0]
 80050b0:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	2201      	movs	r2, #1
 80050b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	683a      	ldr	r2, [r7, #0]
 80050be:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	2200      	movs	r2, #0
 80050c4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	2201      	movs	r2, #1
 80050ca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80050cc:	7afb      	ldrb	r3, [r7, #11]
 80050ce:	f003 0307 	and.w	r3, r3, #7
 80050d2:	b2da      	uxtb	r2, r3
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	6979      	ldr	r1, [r7, #20]
 80050de:	4618      	mov	r0, r3
 80050e0:	f005 fe15 	bl	800ad0e <USB_EPStartXfer>

  return HAL_OK;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3718      	adds	r7, #24
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}

080050ee <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80050ee:	b580      	push	{r7, lr}
 80050f0:	b084      	sub	sp, #16
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
 80050f6:	460b      	mov	r3, r1
 80050f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80050fa:	78fb      	ldrb	r3, [r7, #3]
 80050fc:	f003 0307 	and.w	r3, r3, #7
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	7912      	ldrb	r2, [r2, #4]
 8005104:	4293      	cmp	r3, r2
 8005106:	d901      	bls.n	800510c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e03e      	b.n	800518a <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800510c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005110:	2b00      	cmp	r3, #0
 8005112:	da0e      	bge.n	8005132 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005114:	78fb      	ldrb	r3, [r7, #3]
 8005116:	f003 0207 	and.w	r2, r3, #7
 800511a:	4613      	mov	r3, r2
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	4413      	add	r3, r2
 8005120:	00db      	lsls	r3, r3, #3
 8005122:	3310      	adds	r3, #16
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	4413      	add	r3, r2
 8005128:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2201      	movs	r2, #1
 800512e:	705a      	strb	r2, [r3, #1]
 8005130:	e00c      	b.n	800514c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005132:	78fa      	ldrb	r2, [r7, #3]
 8005134:	4613      	mov	r3, r2
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	4413      	add	r3, r2
 800513a:	00db      	lsls	r3, r3, #3
 800513c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	4413      	add	r3, r2
 8005144:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2200      	movs	r2, #0
 800514a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2201      	movs	r2, #1
 8005150:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005152:	78fb      	ldrb	r3, [r7, #3]
 8005154:	f003 0307 	and.w	r3, r3, #7
 8005158:	b2da      	uxtb	r2, r3
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005164:	2b01      	cmp	r3, #1
 8005166:	d101      	bne.n	800516c <HAL_PCD_EP_SetStall+0x7e>
 8005168:	2302      	movs	r3, #2
 800516a:	e00e      	b.n	800518a <HAL_PCD_EP_SetStall+0x9c>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	68f9      	ldr	r1, [r7, #12]
 800517a:	4618      	mov	r0, r3
 800517c:	f007 f978 	bl	800c470 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005188:	2300      	movs	r3, #0
}
 800518a:	4618      	mov	r0, r3
 800518c:	3710      	adds	r7, #16
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}

08005192 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005192:	b580      	push	{r7, lr}
 8005194:	b084      	sub	sp, #16
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
 800519a:	460b      	mov	r3, r1
 800519c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800519e:	78fb      	ldrb	r3, [r7, #3]
 80051a0:	f003 030f 	and.w	r3, r3, #15
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	7912      	ldrb	r2, [r2, #4]
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d901      	bls.n	80051b0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e040      	b.n	8005232 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80051b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	da0e      	bge.n	80051d6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80051b8:	78fb      	ldrb	r3, [r7, #3]
 80051ba:	f003 0207 	and.w	r2, r3, #7
 80051be:	4613      	mov	r3, r2
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	4413      	add	r3, r2
 80051c4:	00db      	lsls	r3, r3, #3
 80051c6:	3310      	adds	r3, #16
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	4413      	add	r3, r2
 80051cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2201      	movs	r2, #1
 80051d2:	705a      	strb	r2, [r3, #1]
 80051d4:	e00e      	b.n	80051f4 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80051d6:	78fb      	ldrb	r3, [r7, #3]
 80051d8:	f003 0207 	and.w	r2, r3, #7
 80051dc:	4613      	mov	r3, r2
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	4413      	add	r3, r2
 80051e2:	00db      	lsls	r3, r3, #3
 80051e4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	4413      	add	r3, r2
 80051ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2200      	movs	r2, #0
 80051f2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2200      	movs	r2, #0
 80051f8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80051fa:	78fb      	ldrb	r3, [r7, #3]
 80051fc:	f003 0307 	and.w	r3, r3, #7
 8005200:	b2da      	uxtb	r2, r3
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800520c:	2b01      	cmp	r3, #1
 800520e:	d101      	bne.n	8005214 <HAL_PCD_EP_ClrStall+0x82>
 8005210:	2302      	movs	r3, #2
 8005212:	e00e      	b.n	8005232 <HAL_PCD_EP_ClrStall+0xa0>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68f9      	ldr	r1, [r7, #12]
 8005222:	4618      	mov	r0, r3
 8005224:	f007 f975 	bl	800c512 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	3710      	adds	r7, #16
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}

0800523a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800523a:	b580      	push	{r7, lr}
 800523c:	b096      	sub	sp, #88	@ 0x58
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005242:	e3ad      	b.n	80059a0 <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800524c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005250:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005254:	b2db      	uxtb	r3, r3
 8005256:	f003 030f 	and.w	r3, r3, #15
 800525a:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 800525e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005262:	2b00      	cmp	r3, #0
 8005264:	f040 816f 	bne.w	8005546 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005268:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800526c:	f003 0310 	and.w	r3, r3, #16
 8005270:	2b00      	cmp	r3, #0
 8005272:	d14c      	bne.n	800530e <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	881b      	ldrh	r3, [r3, #0]
 800527a:	b29b      	uxth	r3, r3
 800527c:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8005280:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005284:	81fb      	strh	r3, [r7, #14]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	89fb      	ldrh	r3, [r7, #14]
 800528c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005290:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005294:	b29b      	uxth	r3, r3
 8005296:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	3310      	adds	r3, #16
 800529c:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	461a      	mov	r2, r3
 80052aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	00db      	lsls	r3, r3, #3
 80052b0:	4413      	add	r3, r2
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	6812      	ldr	r2, [r2, #0]
 80052b6:	4413      	add	r3, r2
 80052b8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80052bc:	881b      	ldrh	r3, [r3, #0]
 80052be:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80052c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052c4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80052c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052c8:	695a      	ldr	r2, [r3, #20]
 80052ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052cc:	69db      	ldr	r3, [r3, #28]
 80052ce:	441a      	add	r2, r3
 80052d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052d2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80052d4:	2100      	movs	r1, #0
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f009 f945 	bl	800e566 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	7b1b      	ldrb	r3, [r3, #12]
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	f000 835c 	beq.w	80059a0 <PCD_EP_ISR_Handler+0x766>
 80052e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052ea:	699b      	ldr	r3, [r3, #24]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	f040 8357 	bne.w	80059a0 <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	7b1b      	ldrb	r3, [r3, #12]
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80052fc:	b2da      	uxtb	r2, r3
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	731a      	strb	r2, [r3, #12]
 800530c:	e348      	b.n	80059a0 <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005314:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	881b      	ldrh	r3, [r3, #0]
 800531c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005320:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005324:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005328:	2b00      	cmp	r3, #0
 800532a:	d032      	beq.n	8005392 <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005334:	b29b      	uxth	r3, r3
 8005336:	461a      	mov	r2, r3
 8005338:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	00db      	lsls	r3, r3, #3
 800533e:	4413      	add	r3, r2
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	6812      	ldr	r2, [r2, #0]
 8005344:	4413      	add	r3, r2
 8005346:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800534a:	881b      	ldrh	r3, [r3, #0]
 800534c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005350:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005352:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6818      	ldr	r0, [r3, #0]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800535e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005360:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005362:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005364:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005366:	b29b      	uxth	r3, r3
 8005368:	f007 f9fe 	bl	800c768 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	881b      	ldrh	r3, [r3, #0]
 8005372:	b29a      	uxth	r2, r3
 8005374:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005378:	4013      	ands	r3, r2
 800537a:	823b      	strh	r3, [r7, #16]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	8a3a      	ldrh	r2, [r7, #16]
 8005382:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005386:	b292      	uxth	r2, r2
 8005388:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f009 f8be 	bl	800e50c <HAL_PCD_SetupStageCallback>
 8005390:	e306      	b.n	80059a0 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005392:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8005396:	2b00      	cmp	r3, #0
 8005398:	f280 8302 	bge.w	80059a0 <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	881b      	ldrh	r3, [r3, #0]
 80053a2:	b29a      	uxth	r2, r3
 80053a4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80053a8:	4013      	ands	r3, r2
 80053aa:	83fb      	strh	r3, [r7, #30]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	8bfa      	ldrh	r2, [r7, #30]
 80053b2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80053b6:	b292      	uxth	r2, r2
 80053b8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	461a      	mov	r2, r3
 80053c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	00db      	lsls	r3, r3, #3
 80053cc:	4413      	add	r3, r2
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	6812      	ldr	r2, [r2, #0]
 80053d2:	4413      	add	r3, r2
 80053d4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80053d8:	881b      	ldrh	r3, [r3, #0]
 80053da:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80053de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053e0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80053e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053e4:	69db      	ldr	r3, [r3, #28]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d019      	beq.n	800541e <PCD_EP_ISR_Handler+0x1e4>
 80053ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053ec:	695b      	ldr	r3, [r3, #20]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d015      	beq.n	800541e <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6818      	ldr	r0, [r3, #0]
 80053f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053f8:	6959      	ldr	r1, [r3, #20]
 80053fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053fc:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80053fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005400:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005402:	b29b      	uxth	r3, r3
 8005404:	f007 f9b0 	bl	800c768 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005408:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800540a:	695a      	ldr	r2, [r3, #20]
 800540c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800540e:	69db      	ldr	r3, [r3, #28]
 8005410:	441a      	add	r2, r3
 8005412:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005414:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005416:	2100      	movs	r1, #0
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f009 f889 	bl	800e530 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	881b      	ldrh	r3, [r3, #0]
 8005424:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8005428:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800542c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005430:	2b00      	cmp	r3, #0
 8005432:	f040 82b5 	bne.w	80059a0 <PCD_EP_ISR_Handler+0x766>
 8005436:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800543a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800543e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005442:	f000 82ad 	beq.w	80059a0 <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	61bb      	str	r3, [r7, #24]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005454:	b29b      	uxth	r3, r3
 8005456:	461a      	mov	r2, r3
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	4413      	add	r3, r2
 800545c:	61bb      	str	r3, [r7, #24]
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005464:	617b      	str	r3, [r7, #20]
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	881b      	ldrh	r3, [r3, #0]
 800546a:	b29b      	uxth	r3, r3
 800546c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005470:	b29a      	uxth	r2, r3
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	801a      	strh	r2, [r3, #0]
 8005476:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	2b3e      	cmp	r3, #62	@ 0x3e
 800547c:	d91d      	bls.n	80054ba <PCD_EP_ISR_Handler+0x280>
 800547e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	095b      	lsrs	r3, r3, #5
 8005484:	647b      	str	r3, [r7, #68]	@ 0x44
 8005486:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	f003 031f 	and.w	r3, r3, #31
 800548e:	2b00      	cmp	r3, #0
 8005490:	d102      	bne.n	8005498 <PCD_EP_ISR_Handler+0x25e>
 8005492:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005494:	3b01      	subs	r3, #1
 8005496:	647b      	str	r3, [r7, #68]	@ 0x44
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	881b      	ldrh	r3, [r3, #0]
 800549c:	b29a      	uxth	r2, r3
 800549e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	029b      	lsls	r3, r3, #10
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	4313      	orrs	r3, r2
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054b2:	b29a      	uxth	r2, r3
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	801a      	strh	r2, [r3, #0]
 80054b8:	e026      	b.n	8005508 <PCD_EP_ISR_Handler+0x2ce>
 80054ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d10a      	bne.n	80054d8 <PCD_EP_ISR_Handler+0x29e>
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	881b      	ldrh	r3, [r3, #0]
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054d0:	b29a      	uxth	r2, r3
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	801a      	strh	r2, [r3, #0]
 80054d6:	e017      	b.n	8005508 <PCD_EP_ISR_Handler+0x2ce>
 80054d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054da:	691b      	ldr	r3, [r3, #16]
 80054dc:	085b      	lsrs	r3, r3, #1
 80054de:	647b      	str	r3, [r7, #68]	@ 0x44
 80054e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054e2:	691b      	ldr	r3, [r3, #16]
 80054e4:	f003 0301 	and.w	r3, r3, #1
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d002      	beq.n	80054f2 <PCD_EP_ISR_Handler+0x2b8>
 80054ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054ee:	3301      	adds	r3, #1
 80054f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	881b      	ldrh	r3, [r3, #0]
 80054f6:	b29a      	uxth	r2, r3
 80054f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	029b      	lsls	r3, r3, #10
 80054fe:	b29b      	uxth	r3, r3
 8005500:	4313      	orrs	r3, r2
 8005502:	b29a      	uxth	r2, r3
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	881b      	ldrh	r3, [r3, #0]
 800550e:	b29b      	uxth	r3, r3
 8005510:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005514:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005518:	827b      	strh	r3, [r7, #18]
 800551a:	8a7b      	ldrh	r3, [r7, #18]
 800551c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005520:	827b      	strh	r3, [r7, #18]
 8005522:	8a7b      	ldrh	r3, [r7, #18]
 8005524:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005528:	827b      	strh	r3, [r7, #18]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	8a7b      	ldrh	r3, [r7, #18]
 8005530:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005534:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005538:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800553c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005540:	b29b      	uxth	r3, r3
 8005542:	8013      	strh	r3, [r2, #0]
 8005544:	e22c      	b.n	80059a0 <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	461a      	mov	r2, r3
 800554c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	4413      	add	r3, r2
 8005554:	881b      	ldrh	r3, [r3, #0]
 8005556:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800555a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800555e:	2b00      	cmp	r3, #0
 8005560:	f280 80f6 	bge.w	8005750 <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	461a      	mov	r2, r3
 800556a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	4413      	add	r3, r2
 8005572:	881b      	ldrh	r3, [r3, #0]
 8005574:	b29a      	uxth	r2, r3
 8005576:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800557a:	4013      	ands	r3, r2
 800557c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	461a      	mov	r2, r3
 8005586:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	4413      	add	r3, r2
 800558e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8005592:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005596:	b292      	uxth	r2, r2
 8005598:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800559a:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800559e:	4613      	mov	r3, r2
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	4413      	add	r3, r2
 80055a4:	00db      	lsls	r3, r3, #3
 80055a6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	4413      	add	r3, r2
 80055ae:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80055b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055b2:	7b1b      	ldrb	r3, [r3, #12]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d123      	bne.n	8005600 <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	461a      	mov	r2, r3
 80055c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	00db      	lsls	r3, r3, #3
 80055ca:	4413      	add	r3, r2
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	6812      	ldr	r2, [r2, #0]
 80055d0:	4413      	add	r3, r2
 80055d2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80055d6:	881b      	ldrh	r3, [r3, #0]
 80055d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055dc:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80055e0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	f000 808e 	beq.w	8005706 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6818      	ldr	r0, [r3, #0]
 80055ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055f0:	6959      	ldr	r1, [r3, #20]
 80055f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055f4:	88da      	ldrh	r2, [r3, #6]
 80055f6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80055fa:	f007 f8b5 	bl	800c768 <USB_ReadPMA>
 80055fe:	e082      	b.n	8005706 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005600:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005602:	78db      	ldrb	r3, [r3, #3]
 8005604:	2b02      	cmp	r3, #2
 8005606:	d10a      	bne.n	800561e <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005608:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800560c:	461a      	mov	r2, r3
 800560e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f000 f9d3 	bl	80059bc <HAL_PCD_EP_DB_Receive>
 8005616:	4603      	mov	r3, r0
 8005618:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 800561c:	e073      	b.n	8005706 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	461a      	mov	r2, r3
 8005624:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	4413      	add	r3, r2
 800562c:	881b      	ldrh	r3, [r3, #0]
 800562e:	b29b      	uxth	r3, r3
 8005630:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005634:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005638:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	461a      	mov	r2, r3
 8005642:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005644:	781b      	ldrb	r3, [r3, #0]
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	441a      	add	r2, r3
 800564a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800564e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005652:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005656:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800565a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800565e:	b29b      	uxth	r3, r3
 8005660:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	461a      	mov	r2, r3
 8005668:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	4413      	add	r3, r2
 8005670:	881b      	ldrh	r3, [r3, #0]
 8005672:	b29b      	uxth	r3, r3
 8005674:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005678:	2b00      	cmp	r3, #0
 800567a:	d022      	beq.n	80056c2 <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005684:	b29b      	uxth	r3, r3
 8005686:	461a      	mov	r2, r3
 8005688:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	00db      	lsls	r3, r3, #3
 800568e:	4413      	add	r3, r2
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	6812      	ldr	r2, [r2, #0]
 8005694:	4413      	add	r3, r2
 8005696:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800569a:	881b      	ldrh	r3, [r3, #0]
 800569c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056a0:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80056a4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d02c      	beq.n	8005706 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6818      	ldr	r0, [r3, #0]
 80056b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056b2:	6959      	ldr	r1, [r3, #20]
 80056b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056b6:	891a      	ldrh	r2, [r3, #8]
 80056b8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80056bc:	f007 f854 	bl	800c768 <USB_ReadPMA>
 80056c0:	e021      	b.n	8005706 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	461a      	mov	r2, r3
 80056ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	00db      	lsls	r3, r3, #3
 80056d4:	4413      	add	r3, r2
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	6812      	ldr	r2, [r2, #0]
 80056da:	4413      	add	r3, r2
 80056dc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80056e0:	881b      	ldrh	r3, [r3, #0]
 80056e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056e6:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80056ea:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d009      	beq.n	8005706 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6818      	ldr	r0, [r3, #0]
 80056f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056f8:	6959      	ldr	r1, [r3, #20]
 80056fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056fc:	895a      	ldrh	r2, [r3, #10]
 80056fe:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005702:	f007 f831 	bl	800c768 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005706:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005708:	69da      	ldr	r2, [r3, #28]
 800570a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800570e:	441a      	add	r2, r3
 8005710:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005712:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005714:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005716:	695a      	ldr	r2, [r3, #20]
 8005718:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800571c:	441a      	add	r2, r3
 800571e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005720:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005722:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005724:	699b      	ldr	r3, [r3, #24]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d005      	beq.n	8005736 <PCD_EP_ISR_Handler+0x4fc>
 800572a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800572e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	429a      	cmp	r2, r3
 8005734:	d206      	bcs.n	8005744 <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005736:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	4619      	mov	r1, r3
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f008 fef7 	bl	800e530 <HAL_PCD_DataOutStageCallback>
 8005742:	e005      	b.n	8005750 <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800574a:	4618      	mov	r0, r3
 800574c:	f005 fadf 	bl	800ad0e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005750:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005754:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005758:	2b00      	cmp	r3, #0
 800575a:	f000 8121 	beq.w	80059a0 <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 800575e:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8005762:	4613      	mov	r3, r2
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	4413      	add	r3, r2
 8005768:	00db      	lsls	r3, r3, #3
 800576a:	3310      	adds	r3, #16
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	4413      	add	r3, r2
 8005770:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	461a      	mov	r2, r3
 8005778:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	4413      	add	r3, r2
 8005780:	881b      	ldrh	r3, [r3, #0]
 8005782:	b29b      	uxth	r3, r3
 8005784:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8005788:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800578c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	461a      	mov	r2, r3
 8005796:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	441a      	add	r2, r3
 800579e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80057a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80057ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057b0:	78db      	ldrb	r3, [r3, #3]
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	f040 80a2 	bne.w	80058fc <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 80057b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057ba:	2200      	movs	r2, #0
 80057bc:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80057be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057c0:	7b1b      	ldrb	r3, [r3, #12]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	f000 8093 	beq.w	80058ee <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80057c8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80057cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d046      	beq.n	8005862 <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80057d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057d6:	785b      	ldrb	r3, [r3, #1]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d126      	bne.n	800582a <PCD_EP_ISR_Handler+0x5f0>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	461a      	mov	r2, r3
 80057ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f0:	4413      	add	r3, r2
 80057f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80057f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	00da      	lsls	r2, r3, #3
 80057fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057fc:	4413      	add	r3, r2
 80057fe:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005802:	623b      	str	r3, [r7, #32]
 8005804:	6a3b      	ldr	r3, [r7, #32]
 8005806:	881b      	ldrh	r3, [r3, #0]
 8005808:	b29b      	uxth	r3, r3
 800580a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800580e:	b29a      	uxth	r2, r3
 8005810:	6a3b      	ldr	r3, [r7, #32]
 8005812:	801a      	strh	r2, [r3, #0]
 8005814:	6a3b      	ldr	r3, [r7, #32]
 8005816:	881b      	ldrh	r3, [r3, #0]
 8005818:	b29b      	uxth	r3, r3
 800581a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800581e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005822:	b29a      	uxth	r2, r3
 8005824:	6a3b      	ldr	r3, [r7, #32]
 8005826:	801a      	strh	r2, [r3, #0]
 8005828:	e061      	b.n	80058ee <PCD_EP_ISR_Handler+0x6b4>
 800582a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800582c:	785b      	ldrb	r3, [r3, #1]
 800582e:	2b01      	cmp	r3, #1
 8005830:	d15d      	bne.n	80058ee <PCD_EP_ISR_Handler+0x6b4>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005840:	b29b      	uxth	r3, r3
 8005842:	461a      	mov	r2, r3
 8005844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005846:	4413      	add	r3, r2
 8005848:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800584a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	00da      	lsls	r2, r3, #3
 8005850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005852:	4413      	add	r3, r2
 8005854:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005858:	62bb      	str	r3, [r7, #40]	@ 0x28
 800585a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800585c:	2200      	movs	r2, #0
 800585e:	801a      	strh	r2, [r3, #0]
 8005860:	e045      	b.n	80058ee <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005868:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800586a:	785b      	ldrb	r3, [r3, #1]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d126      	bne.n	80058be <PCD_EP_ISR_Handler+0x684>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	637b      	str	r3, [r7, #52]	@ 0x34
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800587e:	b29b      	uxth	r3, r3
 8005880:	461a      	mov	r2, r3
 8005882:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005884:	4413      	add	r3, r2
 8005886:	637b      	str	r3, [r7, #52]	@ 0x34
 8005888:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	00da      	lsls	r2, r3, #3
 800588e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005890:	4413      	add	r3, r2
 8005892:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005896:	633b      	str	r3, [r7, #48]	@ 0x30
 8005898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800589a:	881b      	ldrh	r3, [r3, #0]
 800589c:	b29b      	uxth	r3, r3
 800589e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058a2:	b29a      	uxth	r2, r3
 80058a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058a6:	801a      	strh	r2, [r3, #0]
 80058a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058aa:	881b      	ldrh	r3, [r3, #0]
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058b6:	b29a      	uxth	r2, r3
 80058b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ba:	801a      	strh	r2, [r3, #0]
 80058bc:	e017      	b.n	80058ee <PCD_EP_ISR_Handler+0x6b4>
 80058be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058c0:	785b      	ldrb	r3, [r3, #1]
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d113      	bne.n	80058ee <PCD_EP_ISR_Handler+0x6b4>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	461a      	mov	r2, r3
 80058d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058d4:	4413      	add	r3, r2
 80058d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80058d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	00da      	lsls	r2, r3, #3
 80058de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058e0:	4413      	add	r3, r2
 80058e2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80058e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80058e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058ea:	2200      	movs	r2, #0
 80058ec:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80058ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	4619      	mov	r1, r3
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f008 fe36 	bl	800e566 <HAL_PCD_DataInStageCallback>
 80058fa:	e051      	b.n	80059a0 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80058fc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005900:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005904:	2b00      	cmp	r3, #0
 8005906:	d144      	bne.n	8005992 <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005910:	b29b      	uxth	r3, r3
 8005912:	461a      	mov	r2, r3
 8005914:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	00db      	lsls	r3, r3, #3
 800591a:	4413      	add	r3, r2
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	6812      	ldr	r2, [r2, #0]
 8005920:	4413      	add	r3, r2
 8005922:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005926:	881b      	ldrh	r3, [r3, #0]
 8005928:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800592c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8005930:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005932:	699a      	ldr	r2, [r3, #24]
 8005934:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005938:	429a      	cmp	r2, r3
 800593a:	d907      	bls.n	800594c <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 800593c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800593e:	699a      	ldr	r2, [r3, #24]
 8005940:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005944:	1ad2      	subs	r2, r2, r3
 8005946:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005948:	619a      	str	r2, [r3, #24]
 800594a:	e002      	b.n	8005952 <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 800594c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800594e:	2200      	movs	r2, #0
 8005950:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8005952:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005954:	699b      	ldr	r3, [r3, #24]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d106      	bne.n	8005968 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800595a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	4619      	mov	r1, r3
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f008 fe00 	bl	800e566 <HAL_PCD_DataInStageCallback>
 8005966:	e01b      	b.n	80059a0 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8005968:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800596a:	695a      	ldr	r2, [r3, #20]
 800596c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005970:	441a      	add	r2, r3
 8005972:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005974:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8005976:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005978:	69da      	ldr	r2, [r3, #28]
 800597a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800597e:	441a      	add	r2, r3
 8005980:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005982:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800598a:	4618      	mov	r0, r3
 800598c:	f005 f9bf 	bl	800ad0e <USB_EPStartXfer>
 8005990:	e006      	b.n	80059a0 <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005992:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005996:	461a      	mov	r2, r3
 8005998:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 f917 	bl	8005bce <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	b21b      	sxth	r3, r3
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	f6ff ac49 	blt.w	8005244 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80059b2:	2300      	movs	r3, #0
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3758      	adds	r7, #88	@ 0x58
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b088      	sub	sp, #32
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	4613      	mov	r3, r2
 80059c8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80059ca:	88fb      	ldrh	r3, [r7, #6]
 80059cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d07c      	beq.n	8005ace <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059dc:	b29b      	uxth	r3, r3
 80059de:	461a      	mov	r2, r3
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	00db      	lsls	r3, r3, #3
 80059e6:	4413      	add	r3, r2
 80059e8:	68fa      	ldr	r2, [r7, #12]
 80059ea:	6812      	ldr	r2, [r2, #0]
 80059ec:	4413      	add	r3, r2
 80059ee:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80059f2:	881b      	ldrh	r3, [r3, #0]
 80059f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059f8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	699a      	ldr	r2, [r3, #24]
 80059fe:	8b7b      	ldrh	r3, [r7, #26]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d306      	bcc.n	8005a12 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	699a      	ldr	r2, [r3, #24]
 8005a08:	8b7b      	ldrh	r3, [r7, #26]
 8005a0a:	1ad2      	subs	r2, r2, r3
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	619a      	str	r2, [r3, #24]
 8005a10:	e002      	b.n	8005a18 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	2200      	movs	r2, #0
 8005a16:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	699b      	ldr	r3, [r3, #24]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d123      	bne.n	8005a68 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	461a      	mov	r2, r3
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	4413      	add	r3, r2
 8005a2e:	881b      	ldrh	r3, [r3, #0]
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a3a:	833b      	strh	r3, [r7, #24]
 8005a3c:	8b3b      	ldrh	r3, [r7, #24]
 8005a3e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005a42:	833b      	strh	r3, [r7, #24]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	461a      	mov	r2, r3
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	441a      	add	r2, r3
 8005a52:	8b3b      	ldrh	r3, [r7, #24]
 8005a54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005a68:	88fb      	ldrh	r3, [r7, #6]
 8005a6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d01f      	beq.n	8005ab2 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	461a      	mov	r2, r3
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	009b      	lsls	r3, r3, #2
 8005a7e:	4413      	add	r3, r2
 8005a80:	881b      	ldrh	r3, [r3, #0]
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a8c:	82fb      	strh	r3, [r7, #22]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	461a      	mov	r2, r3
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	441a      	add	r2, r3
 8005a9c:	8afb      	ldrh	r3, [r7, #22]
 8005a9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005aa2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005aa6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005aaa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005ab2:	8b7b      	ldrh	r3, [r7, #26]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	f000 8085 	beq.w	8005bc4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6818      	ldr	r0, [r3, #0]
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	6959      	ldr	r1, [r3, #20]
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	891a      	ldrh	r2, [r3, #8]
 8005ac6:	8b7b      	ldrh	r3, [r7, #26]
 8005ac8:	f006 fe4e 	bl	800c768 <USB_ReadPMA>
 8005acc:	e07a      	b.n	8005bc4 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	461a      	mov	r2, r3
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	00db      	lsls	r3, r3, #3
 8005ae0:	4413      	add	r3, r2
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	6812      	ldr	r2, [r2, #0]
 8005ae6:	4413      	add	r3, r2
 8005ae8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005aec:	881b      	ldrh	r3, [r3, #0]
 8005aee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005af2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	699a      	ldr	r2, [r3, #24]
 8005af8:	8b7b      	ldrh	r3, [r7, #26]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d306      	bcc.n	8005b0c <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	699a      	ldr	r2, [r3, #24]
 8005b02:	8b7b      	ldrh	r3, [r7, #26]
 8005b04:	1ad2      	subs	r2, r2, r3
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	619a      	str	r2, [r3, #24]
 8005b0a:	e002      	b.n	8005b12 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	699b      	ldr	r3, [r3, #24]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d123      	bne.n	8005b62 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	461a      	mov	r2, r3
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	4413      	add	r3, r2
 8005b28:	881b      	ldrh	r3, [r3, #0]
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b34:	83fb      	strh	r3, [r7, #30]
 8005b36:	8bfb      	ldrh	r3, [r7, #30]
 8005b38:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005b3c:	83fb      	strh	r3, [r7, #30]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	461a      	mov	r2, r3
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	441a      	add	r2, r3
 8005b4c:	8bfb      	ldrh	r3, [r7, #30]
 8005b4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005b62:	88fb      	ldrh	r3, [r7, #6]
 8005b64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d11f      	bne.n	8005bac <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	461a      	mov	r2, r3
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	4413      	add	r3, r2
 8005b7a:	881b      	ldrh	r3, [r3, #0]
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b86:	83bb      	strh	r3, [r7, #28]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	441a      	add	r2, r3
 8005b96:	8bbb      	ldrh	r3, [r7, #28]
 8005b98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ba0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ba4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005bac:	8b7b      	ldrh	r3, [r7, #26]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d008      	beq.n	8005bc4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6818      	ldr	r0, [r3, #0]
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	6959      	ldr	r1, [r3, #20]
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	895a      	ldrh	r2, [r3, #10]
 8005bbe:	8b7b      	ldrh	r3, [r7, #26]
 8005bc0:	f006 fdd2 	bl	800c768 <USB_ReadPMA>
    }
  }

  return count;
 8005bc4:	8b7b      	ldrh	r3, [r7, #26]
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3720      	adds	r7, #32
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}

08005bce <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005bce:	b580      	push	{r7, lr}
 8005bd0:	b0a4      	sub	sp, #144	@ 0x90
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	60f8      	str	r0, [r7, #12]
 8005bd6:	60b9      	str	r1, [r7, #8]
 8005bd8:	4613      	mov	r3, r2
 8005bda:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005bdc:	88fb      	ldrh	r3, [r7, #6]
 8005bde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	f000 81db 	beq.w	8005f9e <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	00db      	lsls	r3, r3, #3
 8005bfa:	4413      	add	r3, r2
 8005bfc:	68fa      	ldr	r2, [r7, #12]
 8005bfe:	6812      	ldr	r2, [r2, #0]
 8005c00:	4413      	add	r3, r2
 8005c02:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005c06:	881b      	ldrh	r3, [r3, #0]
 8005c08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c0c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	699a      	ldr	r2, [r3, #24]
 8005c14:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d907      	bls.n	8005c2c <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	699a      	ldr	r2, [r3, #24]
 8005c20:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005c24:	1ad2      	subs	r2, r2, r3
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	619a      	str	r2, [r3, #24]
 8005c2a:	e002      	b.n	8005c32 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	699b      	ldr	r3, [r3, #24]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	f040 80b9 	bne.w	8005dae <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	785b      	ldrb	r3, [r3, #1]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d126      	bne.n	8005c92 <HAL_PCD_EP_DB_Transmit+0xc4>
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	461a      	mov	r2, r3
 8005c56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c58:	4413      	add	r3, r2
 8005c5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	00da      	lsls	r2, r3, #3
 8005c62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c64:	4413      	add	r3, r2
 8005c66:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005c6a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c6e:	881b      	ldrh	r3, [r3, #0]
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c76:	b29a      	uxth	r2, r3
 8005c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c7a:	801a      	strh	r2, [r3, #0]
 8005c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c7e:	881b      	ldrh	r3, [r3, #0]
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c8a:	b29a      	uxth	r2, r3
 8005c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c8e:	801a      	strh	r2, [r3, #0]
 8005c90:	e01a      	b.n	8005cc8 <HAL_PCD_EP_DB_Transmit+0xfa>
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	785b      	ldrb	r3, [r3, #1]
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d116      	bne.n	8005cc8 <HAL_PCD_EP_DB_Transmit+0xfa>
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	461a      	mov	r2, r3
 8005cac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cae:	4413      	add	r3, r2
 8005cb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	00da      	lsls	r2, r3, #3
 8005cb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cba:	4413      	add	r3, r2
 8005cbc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005cc0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	785b      	ldrb	r3, [r3, #1]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d126      	bne.n	8005d24 <HAL_PCD_EP_DB_Transmit+0x156>
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	61fb      	str	r3, [r7, #28]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	4413      	add	r3, r2
 8005cec:	61fb      	str	r3, [r7, #28]
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	00da      	lsls	r2, r3, #3
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005cfc:	61bb      	str	r3, [r7, #24]
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	881b      	ldrh	r3, [r3, #0]
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d08:	b29a      	uxth	r2, r3
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	801a      	strh	r2, [r3, #0]
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	881b      	ldrh	r3, [r3, #0]
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d1c:	b29a      	uxth	r2, r3
 8005d1e:	69bb      	ldr	r3, [r7, #24]
 8005d20:	801a      	strh	r2, [r3, #0]
 8005d22:	e017      	b.n	8005d54 <HAL_PCD_EP_DB_Transmit+0x186>
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	785b      	ldrb	r3, [r3, #1]
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d113      	bne.n	8005d54 <HAL_PCD_EP_DB_Transmit+0x186>
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	461a      	mov	r2, r3
 8005d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d3a:	4413      	add	r3, r2
 8005d3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	00da      	lsls	r2, r3, #3
 8005d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d46:	4413      	add	r3, r2
 8005d48:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005d4c:	623b      	str	r3, [r7, #32]
 8005d4e:	6a3b      	ldr	r3, [r7, #32]
 8005d50:	2200      	movs	r2, #0
 8005d52:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	4619      	mov	r1, r3
 8005d5a:	68f8      	ldr	r0, [r7, #12]
 8005d5c:	f008 fc03 	bl	800e566 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005d60:	88fb      	ldrh	r3, [r7, #6]
 8005d62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	f000 82fa 	beq.w	8006360 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	461a      	mov	r2, r3
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	4413      	add	r3, r2
 8005d7a:	881b      	ldrh	r3, [r3, #0]
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d86:	82fb      	strh	r3, [r7, #22]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	441a      	add	r2, r3
 8005d96:	8afb      	ldrh	r3, [r7, #22]
 8005d98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005da0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005da4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	8013      	strh	r3, [r2, #0]
 8005dac:	e2d8      	b.n	8006360 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005dae:	88fb      	ldrh	r3, [r7, #6]
 8005db0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d021      	beq.n	8005dfc <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	4413      	add	r3, r2
 8005dc6:	881b      	ldrh	r3, [r3, #0]
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005dce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dd2:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	461a      	mov	r2, r3
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	441a      	add	r2, r3
 8005de4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005de8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005dec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005df0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005df4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	f040 82ac 	bne.w	8006360 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	695a      	ldr	r2, [r3, #20]
 8005e0c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005e10:	441a      	add	r2, r3
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	69da      	ldr	r2, [r3, #28]
 8005e1a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005e1e:	441a      	add	r2, r3
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	6a1a      	ldr	r2, [r3, #32]
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	691b      	ldr	r3, [r3, #16]
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d30b      	bcc.n	8005e48 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	691b      	ldr	r3, [r3, #16]
 8005e34:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	6a1a      	ldr	r2, [r3, #32]
 8005e3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005e40:	1ad2      	subs	r2, r2, r3
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	621a      	str	r2, [r3, #32]
 8005e46:	e017      	b.n	8005e78 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	6a1b      	ldr	r3, [r3, #32]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d108      	bne.n	8005e62 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8005e50:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005e54:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005e60:	e00a      	b.n	8005e78 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	6a1b      	ldr	r3, [r3, #32]
 8005e6e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	2200      	movs	r2, #0
 8005e76:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	785b      	ldrb	r3, [r3, #1]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d165      	bne.n	8005f4c <HAL_PCD_EP_DB_Transmit+0x37e>
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	461a      	mov	r2, r3
 8005e92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e94:	4413      	add	r3, r2
 8005e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	00da      	lsls	r2, r3, #3
 8005e9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ea0:	4413      	add	r3, r2
 8005ea2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005ea6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eaa:	881b      	ldrh	r3, [r3, #0]
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005eb2:	b29a      	uxth	r2, r3
 8005eb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eb6:	801a      	strh	r2, [r3, #0]
 8005eb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ebc:	2b3e      	cmp	r3, #62	@ 0x3e
 8005ebe:	d91d      	bls.n	8005efc <HAL_PCD_EP_DB_Transmit+0x32e>
 8005ec0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ec4:	095b      	lsrs	r3, r3, #5
 8005ec6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ec8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ecc:	f003 031f 	and.w	r3, r3, #31
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d102      	bne.n	8005eda <HAL_PCD_EP_DB_Transmit+0x30c>
 8005ed4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ed6:	3b01      	subs	r3, #1
 8005ed8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005eda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005edc:	881b      	ldrh	r3, [r3, #0]
 8005ede:	b29a      	uxth	r2, r3
 8005ee0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	029b      	lsls	r3, r3, #10
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ef0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ef4:	b29a      	uxth	r2, r3
 8005ef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ef8:	801a      	strh	r2, [r3, #0]
 8005efa:	e044      	b.n	8005f86 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005efc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d10a      	bne.n	8005f1a <HAL_PCD_EP_DB_Transmit+0x34c>
 8005f04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f06:	881b      	ldrh	r3, [r3, #0]
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f12:	b29a      	uxth	r2, r3
 8005f14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f16:	801a      	strh	r2, [r3, #0]
 8005f18:	e035      	b.n	8005f86 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005f1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f1e:	085b      	lsrs	r3, r3, #1
 8005f20:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f22:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f26:	f003 0301 	and.w	r3, r3, #1
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d002      	beq.n	8005f34 <HAL_PCD_EP_DB_Transmit+0x366>
 8005f2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f30:	3301      	adds	r3, #1
 8005f32:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f36:	881b      	ldrh	r3, [r3, #0]
 8005f38:	b29a      	uxth	r2, r3
 8005f3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	029b      	lsls	r3, r3, #10
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	4313      	orrs	r3, r2
 8005f44:	b29a      	uxth	r2, r3
 8005f46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f48:	801a      	strh	r2, [r3, #0]
 8005f4a:	e01c      	b.n	8005f86 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	785b      	ldrb	r3, [r3, #1]
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d118      	bne.n	8005f86 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	461a      	mov	r2, r3
 8005f66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f68:	4413      	add	r3, r2
 8005f6a:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	00da      	lsls	r2, r3, #3
 8005f72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f74:	4413      	add	r3, r2
 8005f76:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005f7a:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f80:	b29a      	uxth	r2, r3
 8005f82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f84:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	6818      	ldr	r0, [r3, #0]
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	6959      	ldr	r1, [r3, #20]
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	891a      	ldrh	r2, [r3, #8]
 8005f92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	f006 fba4 	bl	800c6e4 <USB_WritePMA>
 8005f9c:	e1e0      	b.n	8006360 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	461a      	mov	r2, r3
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	00db      	lsls	r3, r3, #3
 8005fb0:	4413      	add	r3, r2
 8005fb2:	68fa      	ldr	r2, [r7, #12]
 8005fb4:	6812      	ldr	r2, [r2, #0]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005fbc:	881b      	ldrh	r3, [r3, #0]
 8005fbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fc2:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	699a      	ldr	r2, [r3, #24]
 8005fca:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d307      	bcc.n	8005fe2 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	699a      	ldr	r2, [r3, #24]
 8005fd6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005fda:	1ad2      	subs	r2, r2, r3
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	619a      	str	r2, [r3, #24]
 8005fe0:	e002      	b.n	8005fe8 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	699b      	ldr	r3, [r3, #24]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	f040 80c0 	bne.w	8006172 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	785b      	ldrb	r3, [r3, #1]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d126      	bne.n	8006048 <HAL_PCD_EP_DB_Transmit+0x47a>
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006008:	b29b      	uxth	r3, r3
 800600a:	461a      	mov	r2, r3
 800600c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800600e:	4413      	add	r3, r2
 8006010:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	00da      	lsls	r2, r3, #3
 8006018:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800601a:	4413      	add	r3, r2
 800601c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006020:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006022:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006024:	881b      	ldrh	r3, [r3, #0]
 8006026:	b29b      	uxth	r3, r3
 8006028:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800602c:	b29a      	uxth	r2, r3
 800602e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006030:	801a      	strh	r2, [r3, #0]
 8006032:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006034:	881b      	ldrh	r3, [r3, #0]
 8006036:	b29b      	uxth	r3, r3
 8006038:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800603c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006040:	b29a      	uxth	r2, r3
 8006042:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006044:	801a      	strh	r2, [r3, #0]
 8006046:	e01a      	b.n	800607e <HAL_PCD_EP_DB_Transmit+0x4b0>
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	785b      	ldrb	r3, [r3, #1]
 800604c:	2b01      	cmp	r3, #1
 800604e:	d116      	bne.n	800607e <HAL_PCD_EP_DB_Transmit+0x4b0>
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	667b      	str	r3, [r7, #100]	@ 0x64
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800605e:	b29b      	uxth	r3, r3
 8006060:	461a      	mov	r2, r3
 8006062:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006064:	4413      	add	r3, r2
 8006066:	667b      	str	r3, [r7, #100]	@ 0x64
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	00da      	lsls	r2, r3, #3
 800606e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006070:	4413      	add	r3, r2
 8006072:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006076:	663b      	str	r3, [r7, #96]	@ 0x60
 8006078:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800607a:	2200      	movs	r2, #0
 800607c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	677b      	str	r3, [r7, #116]	@ 0x74
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	785b      	ldrb	r3, [r3, #1]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d12b      	bne.n	80060e4 <HAL_PCD_EP_DB_Transmit+0x516>
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800609a:	b29b      	uxth	r3, r3
 800609c:	461a      	mov	r2, r3
 800609e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060a0:	4413      	add	r3, r2
 80060a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	00da      	lsls	r2, r3, #3
 80060aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060ac:	4413      	add	r3, r2
 80060ae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80060b2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80060b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80060ba:	881b      	ldrh	r3, [r3, #0]
 80060bc:	b29b      	uxth	r3, r3
 80060be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060c2:	b29a      	uxth	r2, r3
 80060c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80060c8:	801a      	strh	r2, [r3, #0]
 80060ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80060ce:	881b      	ldrh	r3, [r3, #0]
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060da:	b29a      	uxth	r2, r3
 80060dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80060e0:	801a      	strh	r2, [r3, #0]
 80060e2:	e017      	b.n	8006114 <HAL_PCD_EP_DB_Transmit+0x546>
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	785b      	ldrb	r3, [r3, #1]
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d113      	bne.n	8006114 <HAL_PCD_EP_DB_Transmit+0x546>
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	461a      	mov	r2, r3
 80060f8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80060fa:	4413      	add	r3, r2
 80060fc:	677b      	str	r3, [r7, #116]	@ 0x74
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	00da      	lsls	r2, r3, #3
 8006104:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006106:	4413      	add	r3, r2
 8006108:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800610c:	673b      	str	r3, [r7, #112]	@ 0x70
 800610e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006110:	2200      	movs	r2, #0
 8006112:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	4619      	mov	r1, r3
 800611a:	68f8      	ldr	r0, [r7, #12]
 800611c:	f008 fa23 	bl	800e566 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006120:	88fb      	ldrh	r3, [r7, #6]
 8006122:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006126:	2b00      	cmp	r3, #0
 8006128:	f040 811a 	bne.w	8006360 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	461a      	mov	r2, r3
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	4413      	add	r3, r2
 800613a:	881b      	ldrh	r3, [r3, #0]
 800613c:	b29b      	uxth	r3, r3
 800613e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006142:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006146:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	461a      	mov	r2, r3
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	441a      	add	r2, r3
 8006158:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800615c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006160:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006164:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006168:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800616c:	b29b      	uxth	r3, r3
 800616e:	8013      	strh	r3, [r2, #0]
 8006170:	e0f6      	b.n	8006360 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006172:	88fb      	ldrh	r3, [r7, #6]
 8006174:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006178:	2b00      	cmp	r3, #0
 800617a:	d121      	bne.n	80061c0 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	461a      	mov	r2, r3
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	4413      	add	r3, r2
 800618a:	881b      	ldrh	r3, [r3, #0]
 800618c:	b29b      	uxth	r3, r3
 800618e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006192:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006196:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	461a      	mov	r2, r3
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	441a      	add	r2, r3
 80061a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80061ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80061b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061bc:	b29b      	uxth	r3, r3
 80061be:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	f040 80ca 	bne.w	8006360 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	695a      	ldr	r2, [r3, #20]
 80061d0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80061d4:	441a      	add	r2, r3
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	69da      	ldr	r2, [r3, #28]
 80061de:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80061e2:	441a      	add	r2, r3
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	6a1a      	ldr	r2, [r3, #32]
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	691b      	ldr	r3, [r3, #16]
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d30b      	bcc.n	800620c <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	691b      	ldr	r3, [r3, #16]
 80061f8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	6a1a      	ldr	r2, [r3, #32]
 8006200:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006204:	1ad2      	subs	r2, r2, r3
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	621a      	str	r2, [r3, #32]
 800620a:	e017      	b.n	800623c <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	6a1b      	ldr	r3, [r3, #32]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d108      	bne.n	8006226 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8006214:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006218:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	2200      	movs	r2, #0
 8006220:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006224:	e00a      	b.n	800623c <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	6a1b      	ldr	r3, [r3, #32]
 800622a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	2200      	movs	r2, #0
 8006232:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	2200      	movs	r2, #0
 8006238:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	657b      	str	r3, [r7, #84]	@ 0x54
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	785b      	ldrb	r3, [r3, #1]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d165      	bne.n	8006316 <HAL_PCD_EP_DB_Transmit+0x748>
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006258:	b29b      	uxth	r3, r3
 800625a:	461a      	mov	r2, r3
 800625c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800625e:	4413      	add	r3, r2
 8006260:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	00da      	lsls	r2, r3, #3
 8006268:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800626a:	4413      	add	r3, r2
 800626c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006270:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006272:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006274:	881b      	ldrh	r3, [r3, #0]
 8006276:	b29b      	uxth	r3, r3
 8006278:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800627c:	b29a      	uxth	r2, r3
 800627e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006280:	801a      	strh	r2, [r3, #0]
 8006282:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006286:	2b3e      	cmp	r3, #62	@ 0x3e
 8006288:	d91d      	bls.n	80062c6 <HAL_PCD_EP_DB_Transmit+0x6f8>
 800628a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800628e:	095b      	lsrs	r3, r3, #5
 8006290:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006292:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006296:	f003 031f 	and.w	r3, r3, #31
 800629a:	2b00      	cmp	r3, #0
 800629c:	d102      	bne.n	80062a4 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800629e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80062a0:	3b01      	subs	r3, #1
 80062a2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80062a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80062a6:	881b      	ldrh	r3, [r3, #0]
 80062a8:	b29a      	uxth	r2, r3
 80062aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	029b      	lsls	r3, r3, #10
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	4313      	orrs	r3, r2
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062be:	b29a      	uxth	r2, r3
 80062c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80062c2:	801a      	strh	r2, [r3, #0]
 80062c4:	e041      	b.n	800634a <HAL_PCD_EP_DB_Transmit+0x77c>
 80062c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d10a      	bne.n	80062e4 <HAL_PCD_EP_DB_Transmit+0x716>
 80062ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80062d0:	881b      	ldrh	r3, [r3, #0]
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062dc:	b29a      	uxth	r2, r3
 80062de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80062e0:	801a      	strh	r2, [r3, #0]
 80062e2:	e032      	b.n	800634a <HAL_PCD_EP_DB_Transmit+0x77c>
 80062e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80062e8:	085b      	lsrs	r3, r3, #1
 80062ea:	66bb      	str	r3, [r7, #104]	@ 0x68
 80062ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80062f0:	f003 0301 	and.w	r3, r3, #1
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d002      	beq.n	80062fe <HAL_PCD_EP_DB_Transmit+0x730>
 80062f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80062fa:	3301      	adds	r3, #1
 80062fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80062fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006300:	881b      	ldrh	r3, [r3, #0]
 8006302:	b29a      	uxth	r2, r3
 8006304:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006306:	b29b      	uxth	r3, r3
 8006308:	029b      	lsls	r3, r3, #10
 800630a:	b29b      	uxth	r3, r3
 800630c:	4313      	orrs	r3, r2
 800630e:	b29a      	uxth	r2, r3
 8006310:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006312:	801a      	strh	r2, [r3, #0]
 8006314:	e019      	b.n	800634a <HAL_PCD_EP_DB_Transmit+0x77c>
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	785b      	ldrb	r3, [r3, #1]
 800631a:	2b01      	cmp	r3, #1
 800631c:	d115      	bne.n	800634a <HAL_PCD_EP_DB_Transmit+0x77c>
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006326:	b29b      	uxth	r3, r3
 8006328:	461a      	mov	r2, r3
 800632a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800632c:	4413      	add	r3, r2
 800632e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	00da      	lsls	r2, r3, #3
 8006336:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006338:	4413      	add	r3, r2
 800633a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800633e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006340:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006344:	b29a      	uxth	r2, r3
 8006346:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006348:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6818      	ldr	r0, [r3, #0]
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	6959      	ldr	r1, [r3, #20]
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	895a      	ldrh	r2, [r3, #10]
 8006356:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800635a:	b29b      	uxth	r3, r3
 800635c:	f006 f9c2 	bl	800c6e4 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	461a      	mov	r2, r3
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	4413      	add	r3, r2
 800636e:	881b      	ldrh	r3, [r3, #0]
 8006370:	b29b      	uxth	r3, r3
 8006372:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006376:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800637a:	82bb      	strh	r3, [r7, #20]
 800637c:	8abb      	ldrh	r3, [r7, #20]
 800637e:	f083 0310 	eor.w	r3, r3, #16
 8006382:	82bb      	strh	r3, [r7, #20]
 8006384:	8abb      	ldrh	r3, [r7, #20]
 8006386:	f083 0320 	eor.w	r3, r3, #32
 800638a:	82bb      	strh	r3, [r7, #20]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	461a      	mov	r2, r3
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	781b      	ldrb	r3, [r3, #0]
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	441a      	add	r2, r3
 800639a:	8abb      	ldrh	r3, [r7, #20]
 800639c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3790      	adds	r7, #144	@ 0x90
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}

080063ba <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80063ba:	b480      	push	{r7}
 80063bc:	b087      	sub	sp, #28
 80063be:	af00      	add	r7, sp, #0
 80063c0:	60f8      	str	r0, [r7, #12]
 80063c2:	607b      	str	r3, [r7, #4]
 80063c4:	460b      	mov	r3, r1
 80063c6:	817b      	strh	r3, [r7, #10]
 80063c8:	4613      	mov	r3, r2
 80063ca:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80063cc:	897b      	ldrh	r3, [r7, #10]
 80063ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d00b      	beq.n	80063f0 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80063d8:	897b      	ldrh	r3, [r7, #10]
 80063da:	f003 0207 	and.w	r2, r3, #7
 80063de:	4613      	mov	r3, r2
 80063e0:	009b      	lsls	r3, r3, #2
 80063e2:	4413      	add	r3, r2
 80063e4:	00db      	lsls	r3, r3, #3
 80063e6:	3310      	adds	r3, #16
 80063e8:	68fa      	ldr	r2, [r7, #12]
 80063ea:	4413      	add	r3, r2
 80063ec:	617b      	str	r3, [r7, #20]
 80063ee:	e009      	b.n	8006404 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80063f0:	897a      	ldrh	r2, [r7, #10]
 80063f2:	4613      	mov	r3, r2
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	4413      	add	r3, r2
 80063f8:	00db      	lsls	r3, r3, #3
 80063fa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80063fe:	68fa      	ldr	r2, [r7, #12]
 8006400:	4413      	add	r3, r2
 8006402:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006404:	893b      	ldrh	r3, [r7, #8]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d107      	bne.n	800641a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	2200      	movs	r2, #0
 800640e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	b29a      	uxth	r2, r3
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	80da      	strh	r2, [r3, #6]
 8006418:	e00b      	b.n	8006432 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	2201      	movs	r2, #1
 800641e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	b29a      	uxth	r2, r3
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	0c1b      	lsrs	r3, r3, #16
 800642c:	b29a      	uxth	r2, r3
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006432:	2300      	movs	r3, #0
}
 8006434:	4618      	mov	r0, r3
 8006436:	371c      	adds	r7, #28
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr

08006440 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006440:	b480      	push	{r7}
 8006442:	b085      	sub	sp, #20
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2201      	movs	r2, #1
 8006452:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8006464:	b29b      	uxth	r3, r3
 8006466:	f043 0301 	orr.w	r3, r3, #1
 800646a:	b29a      	uxth	r2, r3
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8006478:	b29b      	uxth	r3, r3
 800647a:	f043 0302 	orr.w	r3, r3, #2
 800647e:	b29a      	uxth	r2, r3
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8006486:	2300      	movs	r3, #0
}
 8006488:	4618      	mov	r0, r3
 800648a:	3714      	adds	r7, #20
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr

08006494 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006494:	b480      	push	{r7}
 8006496:	b085      	sub	sp, #20
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d141      	bne.n	8006526 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80064a2:	4b4b      	ldr	r3, [pc, #300]	@ (80065d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80064aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064ae:	d131      	bne.n	8006514 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80064b0:	4b47      	ldr	r3, [pc, #284]	@ (80065d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064b6:	4a46      	ldr	r2, [pc, #280]	@ (80065d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80064bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80064c0:	4b43      	ldr	r3, [pc, #268]	@ (80065d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80064c8:	4a41      	ldr	r2, [pc, #260]	@ (80065d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80064ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80064d0:	4b40      	ldr	r3, [pc, #256]	@ (80065d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	2232      	movs	r2, #50	@ 0x32
 80064d6:	fb02 f303 	mul.w	r3, r2, r3
 80064da:	4a3f      	ldr	r2, [pc, #252]	@ (80065d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80064dc:	fba2 2303 	umull	r2, r3, r2, r3
 80064e0:	0c9b      	lsrs	r3, r3, #18
 80064e2:	3301      	adds	r3, #1
 80064e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80064e6:	e002      	b.n	80064ee <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	3b01      	subs	r3, #1
 80064ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80064ee:	4b38      	ldr	r3, [pc, #224]	@ (80065d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064f0:	695b      	ldr	r3, [r3, #20]
 80064f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064fa:	d102      	bne.n	8006502 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d1f2      	bne.n	80064e8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006502:	4b33      	ldr	r3, [pc, #204]	@ (80065d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006504:	695b      	ldr	r3, [r3, #20]
 8006506:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800650a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800650e:	d158      	bne.n	80065c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006510:	2303      	movs	r3, #3
 8006512:	e057      	b.n	80065c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006514:	4b2e      	ldr	r3, [pc, #184]	@ (80065d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006516:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800651a:	4a2d      	ldr	r2, [pc, #180]	@ (80065d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800651c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006520:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006524:	e04d      	b.n	80065c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800652c:	d141      	bne.n	80065b2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800652e:	4b28      	ldr	r3, [pc, #160]	@ (80065d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006536:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800653a:	d131      	bne.n	80065a0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800653c:	4b24      	ldr	r3, [pc, #144]	@ (80065d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800653e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006542:	4a23      	ldr	r2, [pc, #140]	@ (80065d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006544:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006548:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800654c:	4b20      	ldr	r3, [pc, #128]	@ (80065d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006554:	4a1e      	ldr	r2, [pc, #120]	@ (80065d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006556:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800655a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800655c:	4b1d      	ldr	r3, [pc, #116]	@ (80065d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	2232      	movs	r2, #50	@ 0x32
 8006562:	fb02 f303 	mul.w	r3, r2, r3
 8006566:	4a1c      	ldr	r2, [pc, #112]	@ (80065d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006568:	fba2 2303 	umull	r2, r3, r2, r3
 800656c:	0c9b      	lsrs	r3, r3, #18
 800656e:	3301      	adds	r3, #1
 8006570:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006572:	e002      	b.n	800657a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	3b01      	subs	r3, #1
 8006578:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800657a:	4b15      	ldr	r3, [pc, #84]	@ (80065d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800657c:	695b      	ldr	r3, [r3, #20]
 800657e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006582:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006586:	d102      	bne.n	800658e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d1f2      	bne.n	8006574 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800658e:	4b10      	ldr	r3, [pc, #64]	@ (80065d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006590:	695b      	ldr	r3, [r3, #20]
 8006592:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006596:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800659a:	d112      	bne.n	80065c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800659c:	2303      	movs	r3, #3
 800659e:	e011      	b.n	80065c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80065a0:	4b0b      	ldr	r3, [pc, #44]	@ (80065d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065a6:	4a0a      	ldr	r2, [pc, #40]	@ (80065d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065ac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80065b0:	e007      	b.n	80065c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80065b2:	4b07      	ldr	r3, [pc, #28]	@ (80065d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80065ba:	4a05      	ldr	r2, [pc, #20]	@ (80065d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065bc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80065c0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80065c2:	2300      	movs	r3, #0
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3714      	adds	r7, #20
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr
 80065d0:	40007000 	.word	0x40007000
 80065d4:	20000000 	.word	0x20000000
 80065d8:	431bde83 	.word	0x431bde83

080065dc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80065dc:	b480      	push	{r7}
 80065de:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80065e0:	4b05      	ldr	r3, [pc, #20]	@ (80065f8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	4a04      	ldr	r2, [pc, #16]	@ (80065f8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80065e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80065ea:	6093      	str	r3, [r2, #8]
}
 80065ec:	bf00      	nop
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr
 80065f6:	bf00      	nop
 80065f8:	40007000 	.word	0x40007000

080065fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b088      	sub	sp, #32
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d101      	bne.n	800660e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	e2fe      	b.n	8006c0c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 0301 	and.w	r3, r3, #1
 8006616:	2b00      	cmp	r3, #0
 8006618:	d075      	beq.n	8006706 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800661a:	4b97      	ldr	r3, [pc, #604]	@ (8006878 <HAL_RCC_OscConfig+0x27c>)
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	f003 030c 	and.w	r3, r3, #12
 8006622:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006624:	4b94      	ldr	r3, [pc, #592]	@ (8006878 <HAL_RCC_OscConfig+0x27c>)
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	f003 0303 	and.w	r3, r3, #3
 800662c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800662e:	69bb      	ldr	r3, [r7, #24]
 8006630:	2b0c      	cmp	r3, #12
 8006632:	d102      	bne.n	800663a <HAL_RCC_OscConfig+0x3e>
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	2b03      	cmp	r3, #3
 8006638:	d002      	beq.n	8006640 <HAL_RCC_OscConfig+0x44>
 800663a:	69bb      	ldr	r3, [r7, #24]
 800663c:	2b08      	cmp	r3, #8
 800663e:	d10b      	bne.n	8006658 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006640:	4b8d      	ldr	r3, [pc, #564]	@ (8006878 <HAL_RCC_OscConfig+0x27c>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006648:	2b00      	cmp	r3, #0
 800664a:	d05b      	beq.n	8006704 <HAL_RCC_OscConfig+0x108>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d157      	bne.n	8006704 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	e2d9      	b.n	8006c0c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006660:	d106      	bne.n	8006670 <HAL_RCC_OscConfig+0x74>
 8006662:	4b85      	ldr	r3, [pc, #532]	@ (8006878 <HAL_RCC_OscConfig+0x27c>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a84      	ldr	r2, [pc, #528]	@ (8006878 <HAL_RCC_OscConfig+0x27c>)
 8006668:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800666c:	6013      	str	r3, [r2, #0]
 800666e:	e01d      	b.n	80066ac <HAL_RCC_OscConfig+0xb0>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006678:	d10c      	bne.n	8006694 <HAL_RCC_OscConfig+0x98>
 800667a:	4b7f      	ldr	r3, [pc, #508]	@ (8006878 <HAL_RCC_OscConfig+0x27c>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a7e      	ldr	r2, [pc, #504]	@ (8006878 <HAL_RCC_OscConfig+0x27c>)
 8006680:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006684:	6013      	str	r3, [r2, #0]
 8006686:	4b7c      	ldr	r3, [pc, #496]	@ (8006878 <HAL_RCC_OscConfig+0x27c>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a7b      	ldr	r2, [pc, #492]	@ (8006878 <HAL_RCC_OscConfig+0x27c>)
 800668c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006690:	6013      	str	r3, [r2, #0]
 8006692:	e00b      	b.n	80066ac <HAL_RCC_OscConfig+0xb0>
 8006694:	4b78      	ldr	r3, [pc, #480]	@ (8006878 <HAL_RCC_OscConfig+0x27c>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a77      	ldr	r2, [pc, #476]	@ (8006878 <HAL_RCC_OscConfig+0x27c>)
 800669a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800669e:	6013      	str	r3, [r2, #0]
 80066a0:	4b75      	ldr	r3, [pc, #468]	@ (8006878 <HAL_RCC_OscConfig+0x27c>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a74      	ldr	r2, [pc, #464]	@ (8006878 <HAL_RCC_OscConfig+0x27c>)
 80066a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80066aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d013      	beq.n	80066dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066b4:	f7fb fcde 	bl	8002074 <HAL_GetTick>
 80066b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80066ba:	e008      	b.n	80066ce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066bc:	f7fb fcda 	bl	8002074 <HAL_GetTick>
 80066c0:	4602      	mov	r2, r0
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	1ad3      	subs	r3, r2, r3
 80066c6:	2b64      	cmp	r3, #100	@ 0x64
 80066c8:	d901      	bls.n	80066ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80066ca:	2303      	movs	r3, #3
 80066cc:	e29e      	b.n	8006c0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80066ce:	4b6a      	ldr	r3, [pc, #424]	@ (8006878 <HAL_RCC_OscConfig+0x27c>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d0f0      	beq.n	80066bc <HAL_RCC_OscConfig+0xc0>
 80066da:	e014      	b.n	8006706 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066dc:	f7fb fcca 	bl	8002074 <HAL_GetTick>
 80066e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80066e2:	e008      	b.n	80066f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066e4:	f7fb fcc6 	bl	8002074 <HAL_GetTick>
 80066e8:	4602      	mov	r2, r0
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	1ad3      	subs	r3, r2, r3
 80066ee:	2b64      	cmp	r3, #100	@ 0x64
 80066f0:	d901      	bls.n	80066f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80066f2:	2303      	movs	r3, #3
 80066f4:	e28a      	b.n	8006c0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80066f6:	4b60      	ldr	r3, [pc, #384]	@ (8006878 <HAL_RCC_OscConfig+0x27c>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d1f0      	bne.n	80066e4 <HAL_RCC_OscConfig+0xe8>
 8006702:	e000      	b.n	8006706 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006704:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f003 0302 	and.w	r3, r3, #2
 800670e:	2b00      	cmp	r3, #0
 8006710:	d075      	beq.n	80067fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006712:	4b59      	ldr	r3, [pc, #356]	@ (8006878 <HAL_RCC_OscConfig+0x27c>)
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	f003 030c 	and.w	r3, r3, #12
 800671a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800671c:	4b56      	ldr	r3, [pc, #344]	@ (8006878 <HAL_RCC_OscConfig+0x27c>)
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	f003 0303 	and.w	r3, r3, #3
 8006724:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006726:	69bb      	ldr	r3, [r7, #24]
 8006728:	2b0c      	cmp	r3, #12
 800672a:	d102      	bne.n	8006732 <HAL_RCC_OscConfig+0x136>
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	2b02      	cmp	r3, #2
 8006730:	d002      	beq.n	8006738 <HAL_RCC_OscConfig+0x13c>
 8006732:	69bb      	ldr	r3, [r7, #24]
 8006734:	2b04      	cmp	r3, #4
 8006736:	d11f      	bne.n	8006778 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006738:	4b4f      	ldr	r3, [pc, #316]	@ (8006878 <HAL_RCC_OscConfig+0x27c>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006740:	2b00      	cmp	r3, #0
 8006742:	d005      	beq.n	8006750 <HAL_RCC_OscConfig+0x154>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	68db      	ldr	r3, [r3, #12]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d101      	bne.n	8006750 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800674c:	2301      	movs	r3, #1
 800674e:	e25d      	b.n	8006c0c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006750:	4b49      	ldr	r3, [pc, #292]	@ (8006878 <HAL_RCC_OscConfig+0x27c>)
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	691b      	ldr	r3, [r3, #16]
 800675c:	061b      	lsls	r3, r3, #24
 800675e:	4946      	ldr	r1, [pc, #280]	@ (8006878 <HAL_RCC_OscConfig+0x27c>)
 8006760:	4313      	orrs	r3, r2
 8006762:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006764:	4b45      	ldr	r3, [pc, #276]	@ (800687c <HAL_RCC_OscConfig+0x280>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4618      	mov	r0, r3
 800676a:	f7fb fc37 	bl	8001fdc <HAL_InitTick>
 800676e:	4603      	mov	r3, r0
 8006770:	2b00      	cmp	r3, #0
 8006772:	d043      	beq.n	80067fc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	e249      	b.n	8006c0c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	68db      	ldr	r3, [r3, #12]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d023      	beq.n	80067c8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006780:	4b3d      	ldr	r3, [pc, #244]	@ (8006878 <HAL_RCC_OscConfig+0x27c>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a3c      	ldr	r2, [pc, #240]	@ (8006878 <HAL_RCC_OscConfig+0x27c>)
 8006786:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800678a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800678c:	f7fb fc72 	bl	8002074 <HAL_GetTick>
 8006790:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006792:	e008      	b.n	80067a6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006794:	f7fb fc6e 	bl	8002074 <HAL_GetTick>
 8006798:	4602      	mov	r2, r0
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	1ad3      	subs	r3, r2, r3
 800679e:	2b02      	cmp	r3, #2
 80067a0:	d901      	bls.n	80067a6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80067a2:	2303      	movs	r3, #3
 80067a4:	e232      	b.n	8006c0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80067a6:	4b34      	ldr	r3, [pc, #208]	@ (8006878 <HAL_RCC_OscConfig+0x27c>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d0f0      	beq.n	8006794 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067b2:	4b31      	ldr	r3, [pc, #196]	@ (8006878 <HAL_RCC_OscConfig+0x27c>)
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	691b      	ldr	r3, [r3, #16]
 80067be:	061b      	lsls	r3, r3, #24
 80067c0:	492d      	ldr	r1, [pc, #180]	@ (8006878 <HAL_RCC_OscConfig+0x27c>)
 80067c2:	4313      	orrs	r3, r2
 80067c4:	604b      	str	r3, [r1, #4]
 80067c6:	e01a      	b.n	80067fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80067c8:	4b2b      	ldr	r3, [pc, #172]	@ (8006878 <HAL_RCC_OscConfig+0x27c>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a2a      	ldr	r2, [pc, #168]	@ (8006878 <HAL_RCC_OscConfig+0x27c>)
 80067ce:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80067d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067d4:	f7fb fc4e 	bl	8002074 <HAL_GetTick>
 80067d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80067da:	e008      	b.n	80067ee <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067dc:	f7fb fc4a 	bl	8002074 <HAL_GetTick>
 80067e0:	4602      	mov	r2, r0
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	1ad3      	subs	r3, r2, r3
 80067e6:	2b02      	cmp	r3, #2
 80067e8:	d901      	bls.n	80067ee <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80067ea:	2303      	movs	r3, #3
 80067ec:	e20e      	b.n	8006c0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80067ee:	4b22      	ldr	r3, [pc, #136]	@ (8006878 <HAL_RCC_OscConfig+0x27c>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d1f0      	bne.n	80067dc <HAL_RCC_OscConfig+0x1e0>
 80067fa:	e000      	b.n	80067fe <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80067fc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f003 0308 	and.w	r3, r3, #8
 8006806:	2b00      	cmp	r3, #0
 8006808:	d041      	beq.n	800688e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	695b      	ldr	r3, [r3, #20]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d01c      	beq.n	800684c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006812:	4b19      	ldr	r3, [pc, #100]	@ (8006878 <HAL_RCC_OscConfig+0x27c>)
 8006814:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006818:	4a17      	ldr	r2, [pc, #92]	@ (8006878 <HAL_RCC_OscConfig+0x27c>)
 800681a:	f043 0301 	orr.w	r3, r3, #1
 800681e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006822:	f7fb fc27 	bl	8002074 <HAL_GetTick>
 8006826:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006828:	e008      	b.n	800683c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800682a:	f7fb fc23 	bl	8002074 <HAL_GetTick>
 800682e:	4602      	mov	r2, r0
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	1ad3      	subs	r3, r2, r3
 8006834:	2b02      	cmp	r3, #2
 8006836:	d901      	bls.n	800683c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006838:	2303      	movs	r3, #3
 800683a:	e1e7      	b.n	8006c0c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800683c:	4b0e      	ldr	r3, [pc, #56]	@ (8006878 <HAL_RCC_OscConfig+0x27c>)
 800683e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006842:	f003 0302 	and.w	r3, r3, #2
 8006846:	2b00      	cmp	r3, #0
 8006848:	d0ef      	beq.n	800682a <HAL_RCC_OscConfig+0x22e>
 800684a:	e020      	b.n	800688e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800684c:	4b0a      	ldr	r3, [pc, #40]	@ (8006878 <HAL_RCC_OscConfig+0x27c>)
 800684e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006852:	4a09      	ldr	r2, [pc, #36]	@ (8006878 <HAL_RCC_OscConfig+0x27c>)
 8006854:	f023 0301 	bic.w	r3, r3, #1
 8006858:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800685c:	f7fb fc0a 	bl	8002074 <HAL_GetTick>
 8006860:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006862:	e00d      	b.n	8006880 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006864:	f7fb fc06 	bl	8002074 <HAL_GetTick>
 8006868:	4602      	mov	r2, r0
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	1ad3      	subs	r3, r2, r3
 800686e:	2b02      	cmp	r3, #2
 8006870:	d906      	bls.n	8006880 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006872:	2303      	movs	r3, #3
 8006874:	e1ca      	b.n	8006c0c <HAL_RCC_OscConfig+0x610>
 8006876:	bf00      	nop
 8006878:	40021000 	.word	0x40021000
 800687c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006880:	4b8c      	ldr	r3, [pc, #560]	@ (8006ab4 <HAL_RCC_OscConfig+0x4b8>)
 8006882:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006886:	f003 0302 	and.w	r3, r3, #2
 800688a:	2b00      	cmp	r3, #0
 800688c:	d1ea      	bne.n	8006864 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f003 0304 	and.w	r3, r3, #4
 8006896:	2b00      	cmp	r3, #0
 8006898:	f000 80a6 	beq.w	80069e8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800689c:	2300      	movs	r3, #0
 800689e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80068a0:	4b84      	ldr	r3, [pc, #528]	@ (8006ab4 <HAL_RCC_OscConfig+0x4b8>)
 80068a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d101      	bne.n	80068b0 <HAL_RCC_OscConfig+0x2b4>
 80068ac:	2301      	movs	r3, #1
 80068ae:	e000      	b.n	80068b2 <HAL_RCC_OscConfig+0x2b6>
 80068b0:	2300      	movs	r3, #0
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d00d      	beq.n	80068d2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068b6:	4b7f      	ldr	r3, [pc, #508]	@ (8006ab4 <HAL_RCC_OscConfig+0x4b8>)
 80068b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068ba:	4a7e      	ldr	r2, [pc, #504]	@ (8006ab4 <HAL_RCC_OscConfig+0x4b8>)
 80068bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80068c2:	4b7c      	ldr	r3, [pc, #496]	@ (8006ab4 <HAL_RCC_OscConfig+0x4b8>)
 80068c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068ca:	60fb      	str	r3, [r7, #12]
 80068cc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80068ce:	2301      	movs	r3, #1
 80068d0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80068d2:	4b79      	ldr	r3, [pc, #484]	@ (8006ab8 <HAL_RCC_OscConfig+0x4bc>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d118      	bne.n	8006910 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80068de:	4b76      	ldr	r3, [pc, #472]	@ (8006ab8 <HAL_RCC_OscConfig+0x4bc>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a75      	ldr	r2, [pc, #468]	@ (8006ab8 <HAL_RCC_OscConfig+0x4bc>)
 80068e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80068ea:	f7fb fbc3 	bl	8002074 <HAL_GetTick>
 80068ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80068f0:	e008      	b.n	8006904 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068f2:	f7fb fbbf 	bl	8002074 <HAL_GetTick>
 80068f6:	4602      	mov	r2, r0
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	1ad3      	subs	r3, r2, r3
 80068fc:	2b02      	cmp	r3, #2
 80068fe:	d901      	bls.n	8006904 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006900:	2303      	movs	r3, #3
 8006902:	e183      	b.n	8006c0c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006904:	4b6c      	ldr	r3, [pc, #432]	@ (8006ab8 <HAL_RCC_OscConfig+0x4bc>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800690c:	2b00      	cmp	r3, #0
 800690e:	d0f0      	beq.n	80068f2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	2b01      	cmp	r3, #1
 8006916:	d108      	bne.n	800692a <HAL_RCC_OscConfig+0x32e>
 8006918:	4b66      	ldr	r3, [pc, #408]	@ (8006ab4 <HAL_RCC_OscConfig+0x4b8>)
 800691a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800691e:	4a65      	ldr	r2, [pc, #404]	@ (8006ab4 <HAL_RCC_OscConfig+0x4b8>)
 8006920:	f043 0301 	orr.w	r3, r3, #1
 8006924:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006928:	e024      	b.n	8006974 <HAL_RCC_OscConfig+0x378>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	2b05      	cmp	r3, #5
 8006930:	d110      	bne.n	8006954 <HAL_RCC_OscConfig+0x358>
 8006932:	4b60      	ldr	r3, [pc, #384]	@ (8006ab4 <HAL_RCC_OscConfig+0x4b8>)
 8006934:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006938:	4a5e      	ldr	r2, [pc, #376]	@ (8006ab4 <HAL_RCC_OscConfig+0x4b8>)
 800693a:	f043 0304 	orr.w	r3, r3, #4
 800693e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006942:	4b5c      	ldr	r3, [pc, #368]	@ (8006ab4 <HAL_RCC_OscConfig+0x4b8>)
 8006944:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006948:	4a5a      	ldr	r2, [pc, #360]	@ (8006ab4 <HAL_RCC_OscConfig+0x4b8>)
 800694a:	f043 0301 	orr.w	r3, r3, #1
 800694e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006952:	e00f      	b.n	8006974 <HAL_RCC_OscConfig+0x378>
 8006954:	4b57      	ldr	r3, [pc, #348]	@ (8006ab4 <HAL_RCC_OscConfig+0x4b8>)
 8006956:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800695a:	4a56      	ldr	r2, [pc, #344]	@ (8006ab4 <HAL_RCC_OscConfig+0x4b8>)
 800695c:	f023 0301 	bic.w	r3, r3, #1
 8006960:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006964:	4b53      	ldr	r3, [pc, #332]	@ (8006ab4 <HAL_RCC_OscConfig+0x4b8>)
 8006966:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800696a:	4a52      	ldr	r2, [pc, #328]	@ (8006ab4 <HAL_RCC_OscConfig+0x4b8>)
 800696c:	f023 0304 	bic.w	r3, r3, #4
 8006970:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d016      	beq.n	80069aa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800697c:	f7fb fb7a 	bl	8002074 <HAL_GetTick>
 8006980:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006982:	e00a      	b.n	800699a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006984:	f7fb fb76 	bl	8002074 <HAL_GetTick>
 8006988:	4602      	mov	r2, r0
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	1ad3      	subs	r3, r2, r3
 800698e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006992:	4293      	cmp	r3, r2
 8006994:	d901      	bls.n	800699a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006996:	2303      	movs	r3, #3
 8006998:	e138      	b.n	8006c0c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800699a:	4b46      	ldr	r3, [pc, #280]	@ (8006ab4 <HAL_RCC_OscConfig+0x4b8>)
 800699c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069a0:	f003 0302 	and.w	r3, r3, #2
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d0ed      	beq.n	8006984 <HAL_RCC_OscConfig+0x388>
 80069a8:	e015      	b.n	80069d6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069aa:	f7fb fb63 	bl	8002074 <HAL_GetTick>
 80069ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80069b0:	e00a      	b.n	80069c8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069b2:	f7fb fb5f 	bl	8002074 <HAL_GetTick>
 80069b6:	4602      	mov	r2, r0
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	1ad3      	subs	r3, r2, r3
 80069bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d901      	bls.n	80069c8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80069c4:	2303      	movs	r3, #3
 80069c6:	e121      	b.n	8006c0c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80069c8:	4b3a      	ldr	r3, [pc, #232]	@ (8006ab4 <HAL_RCC_OscConfig+0x4b8>)
 80069ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069ce:	f003 0302 	and.w	r3, r3, #2
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d1ed      	bne.n	80069b2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80069d6:	7ffb      	ldrb	r3, [r7, #31]
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d105      	bne.n	80069e8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069dc:	4b35      	ldr	r3, [pc, #212]	@ (8006ab4 <HAL_RCC_OscConfig+0x4b8>)
 80069de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069e0:	4a34      	ldr	r2, [pc, #208]	@ (8006ab4 <HAL_RCC_OscConfig+0x4b8>)
 80069e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80069e6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f003 0320 	and.w	r3, r3, #32
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d03c      	beq.n	8006a6e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	699b      	ldr	r3, [r3, #24]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d01c      	beq.n	8006a36 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80069fc:	4b2d      	ldr	r3, [pc, #180]	@ (8006ab4 <HAL_RCC_OscConfig+0x4b8>)
 80069fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a02:	4a2c      	ldr	r2, [pc, #176]	@ (8006ab4 <HAL_RCC_OscConfig+0x4b8>)
 8006a04:	f043 0301 	orr.w	r3, r3, #1
 8006a08:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a0c:	f7fb fb32 	bl	8002074 <HAL_GetTick>
 8006a10:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006a12:	e008      	b.n	8006a26 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006a14:	f7fb fb2e 	bl	8002074 <HAL_GetTick>
 8006a18:	4602      	mov	r2, r0
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	1ad3      	subs	r3, r2, r3
 8006a1e:	2b02      	cmp	r3, #2
 8006a20:	d901      	bls.n	8006a26 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006a22:	2303      	movs	r3, #3
 8006a24:	e0f2      	b.n	8006c0c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006a26:	4b23      	ldr	r3, [pc, #140]	@ (8006ab4 <HAL_RCC_OscConfig+0x4b8>)
 8006a28:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a2c:	f003 0302 	and.w	r3, r3, #2
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d0ef      	beq.n	8006a14 <HAL_RCC_OscConfig+0x418>
 8006a34:	e01b      	b.n	8006a6e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006a36:	4b1f      	ldr	r3, [pc, #124]	@ (8006ab4 <HAL_RCC_OscConfig+0x4b8>)
 8006a38:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a3c:	4a1d      	ldr	r2, [pc, #116]	@ (8006ab4 <HAL_RCC_OscConfig+0x4b8>)
 8006a3e:	f023 0301 	bic.w	r3, r3, #1
 8006a42:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a46:	f7fb fb15 	bl	8002074 <HAL_GetTick>
 8006a4a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006a4c:	e008      	b.n	8006a60 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006a4e:	f7fb fb11 	bl	8002074 <HAL_GetTick>
 8006a52:	4602      	mov	r2, r0
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	1ad3      	subs	r3, r2, r3
 8006a58:	2b02      	cmp	r3, #2
 8006a5a:	d901      	bls.n	8006a60 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006a5c:	2303      	movs	r3, #3
 8006a5e:	e0d5      	b.n	8006c0c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006a60:	4b14      	ldr	r3, [pc, #80]	@ (8006ab4 <HAL_RCC_OscConfig+0x4b8>)
 8006a62:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a66:	f003 0302 	and.w	r3, r3, #2
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d1ef      	bne.n	8006a4e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	69db      	ldr	r3, [r3, #28]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	f000 80c9 	beq.w	8006c0a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006a78:	4b0e      	ldr	r3, [pc, #56]	@ (8006ab4 <HAL_RCC_OscConfig+0x4b8>)
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	f003 030c 	and.w	r3, r3, #12
 8006a80:	2b0c      	cmp	r3, #12
 8006a82:	f000 8083 	beq.w	8006b8c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	69db      	ldr	r3, [r3, #28]
 8006a8a:	2b02      	cmp	r3, #2
 8006a8c:	d15e      	bne.n	8006b4c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a8e:	4b09      	ldr	r3, [pc, #36]	@ (8006ab4 <HAL_RCC_OscConfig+0x4b8>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a08      	ldr	r2, [pc, #32]	@ (8006ab4 <HAL_RCC_OscConfig+0x4b8>)
 8006a94:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a9a:	f7fb faeb 	bl	8002074 <HAL_GetTick>
 8006a9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006aa0:	e00c      	b.n	8006abc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006aa2:	f7fb fae7 	bl	8002074 <HAL_GetTick>
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	1ad3      	subs	r3, r2, r3
 8006aac:	2b02      	cmp	r3, #2
 8006aae:	d905      	bls.n	8006abc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006ab0:	2303      	movs	r3, #3
 8006ab2:	e0ab      	b.n	8006c0c <HAL_RCC_OscConfig+0x610>
 8006ab4:	40021000 	.word	0x40021000
 8006ab8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006abc:	4b55      	ldr	r3, [pc, #340]	@ (8006c14 <HAL_RCC_OscConfig+0x618>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d1ec      	bne.n	8006aa2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006ac8:	4b52      	ldr	r3, [pc, #328]	@ (8006c14 <HAL_RCC_OscConfig+0x618>)
 8006aca:	68da      	ldr	r2, [r3, #12]
 8006acc:	4b52      	ldr	r3, [pc, #328]	@ (8006c18 <HAL_RCC_OscConfig+0x61c>)
 8006ace:	4013      	ands	r3, r2
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	6a11      	ldr	r1, [r2, #32]
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006ad8:	3a01      	subs	r2, #1
 8006ada:	0112      	lsls	r2, r2, #4
 8006adc:	4311      	orrs	r1, r2
 8006ade:	687a      	ldr	r2, [r7, #4]
 8006ae0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006ae2:	0212      	lsls	r2, r2, #8
 8006ae4:	4311      	orrs	r1, r2
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006aea:	0852      	lsrs	r2, r2, #1
 8006aec:	3a01      	subs	r2, #1
 8006aee:	0552      	lsls	r2, r2, #21
 8006af0:	4311      	orrs	r1, r2
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006af6:	0852      	lsrs	r2, r2, #1
 8006af8:	3a01      	subs	r2, #1
 8006afa:	0652      	lsls	r2, r2, #25
 8006afc:	4311      	orrs	r1, r2
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006b02:	06d2      	lsls	r2, r2, #27
 8006b04:	430a      	orrs	r2, r1
 8006b06:	4943      	ldr	r1, [pc, #268]	@ (8006c14 <HAL_RCC_OscConfig+0x618>)
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b0c:	4b41      	ldr	r3, [pc, #260]	@ (8006c14 <HAL_RCC_OscConfig+0x618>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a40      	ldr	r2, [pc, #256]	@ (8006c14 <HAL_RCC_OscConfig+0x618>)
 8006b12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006b16:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006b18:	4b3e      	ldr	r3, [pc, #248]	@ (8006c14 <HAL_RCC_OscConfig+0x618>)
 8006b1a:	68db      	ldr	r3, [r3, #12]
 8006b1c:	4a3d      	ldr	r2, [pc, #244]	@ (8006c14 <HAL_RCC_OscConfig+0x618>)
 8006b1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006b22:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b24:	f7fb faa6 	bl	8002074 <HAL_GetTick>
 8006b28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b2a:	e008      	b.n	8006b3e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b2c:	f7fb faa2 	bl	8002074 <HAL_GetTick>
 8006b30:	4602      	mov	r2, r0
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	1ad3      	subs	r3, r2, r3
 8006b36:	2b02      	cmp	r3, #2
 8006b38:	d901      	bls.n	8006b3e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006b3a:	2303      	movs	r3, #3
 8006b3c:	e066      	b.n	8006c0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b3e:	4b35      	ldr	r3, [pc, #212]	@ (8006c14 <HAL_RCC_OscConfig+0x618>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d0f0      	beq.n	8006b2c <HAL_RCC_OscConfig+0x530>
 8006b4a:	e05e      	b.n	8006c0a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b4c:	4b31      	ldr	r3, [pc, #196]	@ (8006c14 <HAL_RCC_OscConfig+0x618>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a30      	ldr	r2, [pc, #192]	@ (8006c14 <HAL_RCC_OscConfig+0x618>)
 8006b52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006b56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b58:	f7fb fa8c 	bl	8002074 <HAL_GetTick>
 8006b5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b5e:	e008      	b.n	8006b72 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b60:	f7fb fa88 	bl	8002074 <HAL_GetTick>
 8006b64:	4602      	mov	r2, r0
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	1ad3      	subs	r3, r2, r3
 8006b6a:	2b02      	cmp	r3, #2
 8006b6c:	d901      	bls.n	8006b72 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006b6e:	2303      	movs	r3, #3
 8006b70:	e04c      	b.n	8006c0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b72:	4b28      	ldr	r3, [pc, #160]	@ (8006c14 <HAL_RCC_OscConfig+0x618>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d1f0      	bne.n	8006b60 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006b7e:	4b25      	ldr	r3, [pc, #148]	@ (8006c14 <HAL_RCC_OscConfig+0x618>)
 8006b80:	68da      	ldr	r2, [r3, #12]
 8006b82:	4924      	ldr	r1, [pc, #144]	@ (8006c14 <HAL_RCC_OscConfig+0x618>)
 8006b84:	4b25      	ldr	r3, [pc, #148]	@ (8006c1c <HAL_RCC_OscConfig+0x620>)
 8006b86:	4013      	ands	r3, r2
 8006b88:	60cb      	str	r3, [r1, #12]
 8006b8a:	e03e      	b.n	8006c0a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	69db      	ldr	r3, [r3, #28]
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d101      	bne.n	8006b98 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006b94:	2301      	movs	r3, #1
 8006b96:	e039      	b.n	8006c0c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006b98:	4b1e      	ldr	r3, [pc, #120]	@ (8006c14 <HAL_RCC_OscConfig+0x618>)
 8006b9a:	68db      	ldr	r3, [r3, #12]
 8006b9c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	f003 0203 	and.w	r2, r3, #3
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6a1b      	ldr	r3, [r3, #32]
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d12c      	bne.n	8006c06 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bb6:	3b01      	subs	r3, #1
 8006bb8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d123      	bne.n	8006c06 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bc8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d11b      	bne.n	8006c06 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bd8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d113      	bne.n	8006c06 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006be8:	085b      	lsrs	r3, r3, #1
 8006bea:	3b01      	subs	r3, #1
 8006bec:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006bee:	429a      	cmp	r2, r3
 8006bf0:	d109      	bne.n	8006c06 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bfc:	085b      	lsrs	r3, r3, #1
 8006bfe:	3b01      	subs	r3, #1
 8006c00:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d001      	beq.n	8006c0a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006c06:	2301      	movs	r3, #1
 8006c08:	e000      	b.n	8006c0c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006c0a:	2300      	movs	r3, #0
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3720      	adds	r7, #32
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}
 8006c14:	40021000 	.word	0x40021000
 8006c18:	019f800c 	.word	0x019f800c
 8006c1c:	feeefffc 	.word	0xfeeefffc

08006c20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b086      	sub	sp, #24
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d101      	bne.n	8006c38 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006c34:	2301      	movs	r3, #1
 8006c36:	e11e      	b.n	8006e76 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006c38:	4b91      	ldr	r3, [pc, #580]	@ (8006e80 <HAL_RCC_ClockConfig+0x260>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f003 030f 	and.w	r3, r3, #15
 8006c40:	683a      	ldr	r2, [r7, #0]
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d910      	bls.n	8006c68 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c46:	4b8e      	ldr	r3, [pc, #568]	@ (8006e80 <HAL_RCC_ClockConfig+0x260>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f023 020f 	bic.w	r2, r3, #15
 8006c4e:	498c      	ldr	r1, [pc, #560]	@ (8006e80 <HAL_RCC_ClockConfig+0x260>)
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	4313      	orrs	r3, r2
 8006c54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c56:	4b8a      	ldr	r3, [pc, #552]	@ (8006e80 <HAL_RCC_ClockConfig+0x260>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f003 030f 	and.w	r3, r3, #15
 8006c5e:	683a      	ldr	r2, [r7, #0]
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d001      	beq.n	8006c68 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
 8006c66:	e106      	b.n	8006e76 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f003 0301 	and.w	r3, r3, #1
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d073      	beq.n	8006d5c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	2b03      	cmp	r3, #3
 8006c7a:	d129      	bne.n	8006cd0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c7c:	4b81      	ldr	r3, [pc, #516]	@ (8006e84 <HAL_RCC_ClockConfig+0x264>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d101      	bne.n	8006c8c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	e0f4      	b.n	8006e76 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006c8c:	f000 f966 	bl	8006f5c <RCC_GetSysClockFreqFromPLLSource>
 8006c90:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	4a7c      	ldr	r2, [pc, #496]	@ (8006e88 <HAL_RCC_ClockConfig+0x268>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d93f      	bls.n	8006d1a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006c9a:	4b7a      	ldr	r3, [pc, #488]	@ (8006e84 <HAL_RCC_ClockConfig+0x264>)
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d009      	beq.n	8006cba <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d033      	beq.n	8006d1a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d12f      	bne.n	8006d1a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006cba:	4b72      	ldr	r3, [pc, #456]	@ (8006e84 <HAL_RCC_ClockConfig+0x264>)
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006cc2:	4a70      	ldr	r2, [pc, #448]	@ (8006e84 <HAL_RCC_ClockConfig+0x264>)
 8006cc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cc8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006cca:	2380      	movs	r3, #128	@ 0x80
 8006ccc:	617b      	str	r3, [r7, #20]
 8006cce:	e024      	b.n	8006d1a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	2b02      	cmp	r3, #2
 8006cd6:	d107      	bne.n	8006ce8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006cd8:	4b6a      	ldr	r3, [pc, #424]	@ (8006e84 <HAL_RCC_ClockConfig+0x264>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d109      	bne.n	8006cf8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	e0c6      	b.n	8006e76 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006ce8:	4b66      	ldr	r3, [pc, #408]	@ (8006e84 <HAL_RCC_ClockConfig+0x264>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d101      	bne.n	8006cf8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	e0be      	b.n	8006e76 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006cf8:	f000 f8ce 	bl	8006e98 <HAL_RCC_GetSysClockFreq>
 8006cfc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	4a61      	ldr	r2, [pc, #388]	@ (8006e88 <HAL_RCC_ClockConfig+0x268>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d909      	bls.n	8006d1a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006d06:	4b5f      	ldr	r3, [pc, #380]	@ (8006e84 <HAL_RCC_ClockConfig+0x264>)
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006d0e:	4a5d      	ldr	r2, [pc, #372]	@ (8006e84 <HAL_RCC_ClockConfig+0x264>)
 8006d10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d14:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006d16:	2380      	movs	r3, #128	@ 0x80
 8006d18:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006d1a:	4b5a      	ldr	r3, [pc, #360]	@ (8006e84 <HAL_RCC_ClockConfig+0x264>)
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	f023 0203 	bic.w	r2, r3, #3
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	4957      	ldr	r1, [pc, #348]	@ (8006e84 <HAL_RCC_ClockConfig+0x264>)
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d2c:	f7fb f9a2 	bl	8002074 <HAL_GetTick>
 8006d30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d32:	e00a      	b.n	8006d4a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d34:	f7fb f99e 	bl	8002074 <HAL_GetTick>
 8006d38:	4602      	mov	r2, r0
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	1ad3      	subs	r3, r2, r3
 8006d3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d901      	bls.n	8006d4a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006d46:	2303      	movs	r3, #3
 8006d48:	e095      	b.n	8006e76 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d4a:	4b4e      	ldr	r3, [pc, #312]	@ (8006e84 <HAL_RCC_ClockConfig+0x264>)
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	f003 020c 	and.w	r2, r3, #12
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d1eb      	bne.n	8006d34 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f003 0302 	and.w	r3, r3, #2
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d023      	beq.n	8006db0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f003 0304 	and.w	r3, r3, #4
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d005      	beq.n	8006d80 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d74:	4b43      	ldr	r3, [pc, #268]	@ (8006e84 <HAL_RCC_ClockConfig+0x264>)
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	4a42      	ldr	r2, [pc, #264]	@ (8006e84 <HAL_RCC_ClockConfig+0x264>)
 8006d7a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006d7e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f003 0308 	and.w	r3, r3, #8
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d007      	beq.n	8006d9c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006d8c:	4b3d      	ldr	r3, [pc, #244]	@ (8006e84 <HAL_RCC_ClockConfig+0x264>)
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006d94:	4a3b      	ldr	r2, [pc, #236]	@ (8006e84 <HAL_RCC_ClockConfig+0x264>)
 8006d96:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006d9a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d9c:	4b39      	ldr	r3, [pc, #228]	@ (8006e84 <HAL_RCC_ClockConfig+0x264>)
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	4936      	ldr	r1, [pc, #216]	@ (8006e84 <HAL_RCC_ClockConfig+0x264>)
 8006daa:	4313      	orrs	r3, r2
 8006dac:	608b      	str	r3, [r1, #8]
 8006dae:	e008      	b.n	8006dc2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	2b80      	cmp	r3, #128	@ 0x80
 8006db4:	d105      	bne.n	8006dc2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006db6:	4b33      	ldr	r3, [pc, #204]	@ (8006e84 <HAL_RCC_ClockConfig+0x264>)
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	4a32      	ldr	r2, [pc, #200]	@ (8006e84 <HAL_RCC_ClockConfig+0x264>)
 8006dbc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006dc0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006dc2:	4b2f      	ldr	r3, [pc, #188]	@ (8006e80 <HAL_RCC_ClockConfig+0x260>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 030f 	and.w	r3, r3, #15
 8006dca:	683a      	ldr	r2, [r7, #0]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d21d      	bcs.n	8006e0c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dd0:	4b2b      	ldr	r3, [pc, #172]	@ (8006e80 <HAL_RCC_ClockConfig+0x260>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f023 020f 	bic.w	r2, r3, #15
 8006dd8:	4929      	ldr	r1, [pc, #164]	@ (8006e80 <HAL_RCC_ClockConfig+0x260>)
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006de0:	f7fb f948 	bl	8002074 <HAL_GetTick>
 8006de4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006de6:	e00a      	b.n	8006dfe <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006de8:	f7fb f944 	bl	8002074 <HAL_GetTick>
 8006dec:	4602      	mov	r2, r0
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	1ad3      	subs	r3, r2, r3
 8006df2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d901      	bls.n	8006dfe <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006dfa:	2303      	movs	r3, #3
 8006dfc:	e03b      	b.n	8006e76 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dfe:	4b20      	ldr	r3, [pc, #128]	@ (8006e80 <HAL_RCC_ClockConfig+0x260>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f003 030f 	and.w	r3, r3, #15
 8006e06:	683a      	ldr	r2, [r7, #0]
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d1ed      	bne.n	8006de8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f003 0304 	and.w	r3, r3, #4
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d008      	beq.n	8006e2a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e18:	4b1a      	ldr	r3, [pc, #104]	@ (8006e84 <HAL_RCC_ClockConfig+0x264>)
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	68db      	ldr	r3, [r3, #12]
 8006e24:	4917      	ldr	r1, [pc, #92]	@ (8006e84 <HAL_RCC_ClockConfig+0x264>)
 8006e26:	4313      	orrs	r3, r2
 8006e28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f003 0308 	and.w	r3, r3, #8
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d009      	beq.n	8006e4a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006e36:	4b13      	ldr	r3, [pc, #76]	@ (8006e84 <HAL_RCC_ClockConfig+0x264>)
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	691b      	ldr	r3, [r3, #16]
 8006e42:	00db      	lsls	r3, r3, #3
 8006e44:	490f      	ldr	r1, [pc, #60]	@ (8006e84 <HAL_RCC_ClockConfig+0x264>)
 8006e46:	4313      	orrs	r3, r2
 8006e48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006e4a:	f000 f825 	bl	8006e98 <HAL_RCC_GetSysClockFreq>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	4b0c      	ldr	r3, [pc, #48]	@ (8006e84 <HAL_RCC_ClockConfig+0x264>)
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	091b      	lsrs	r3, r3, #4
 8006e56:	f003 030f 	and.w	r3, r3, #15
 8006e5a:	490c      	ldr	r1, [pc, #48]	@ (8006e8c <HAL_RCC_ClockConfig+0x26c>)
 8006e5c:	5ccb      	ldrb	r3, [r1, r3]
 8006e5e:	f003 031f 	and.w	r3, r3, #31
 8006e62:	fa22 f303 	lsr.w	r3, r2, r3
 8006e66:	4a0a      	ldr	r2, [pc, #40]	@ (8006e90 <HAL_RCC_ClockConfig+0x270>)
 8006e68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006e6a:	4b0a      	ldr	r3, [pc, #40]	@ (8006e94 <HAL_RCC_ClockConfig+0x274>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f7fb f8b4 	bl	8001fdc <HAL_InitTick>
 8006e74:	4603      	mov	r3, r0
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3718      	adds	r7, #24
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	40022000 	.word	0x40022000
 8006e84:	40021000 	.word	0x40021000
 8006e88:	04c4b400 	.word	0x04c4b400
 8006e8c:	0800fecc 	.word	0x0800fecc
 8006e90:	20000000 	.word	0x20000000
 8006e94:	20000004 	.word	0x20000004

08006e98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b087      	sub	sp, #28
 8006e9c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006e9e:	4b2c      	ldr	r3, [pc, #176]	@ (8006f50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	f003 030c 	and.w	r3, r3, #12
 8006ea6:	2b04      	cmp	r3, #4
 8006ea8:	d102      	bne.n	8006eb0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006eaa:	4b2a      	ldr	r3, [pc, #168]	@ (8006f54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006eac:	613b      	str	r3, [r7, #16]
 8006eae:	e047      	b.n	8006f40 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006eb0:	4b27      	ldr	r3, [pc, #156]	@ (8006f50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	f003 030c 	and.w	r3, r3, #12
 8006eb8:	2b08      	cmp	r3, #8
 8006eba:	d102      	bne.n	8006ec2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006ebc:	4b26      	ldr	r3, [pc, #152]	@ (8006f58 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006ebe:	613b      	str	r3, [r7, #16]
 8006ec0:	e03e      	b.n	8006f40 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006ec2:	4b23      	ldr	r3, [pc, #140]	@ (8006f50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	f003 030c 	and.w	r3, r3, #12
 8006eca:	2b0c      	cmp	r3, #12
 8006ecc:	d136      	bne.n	8006f3c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006ece:	4b20      	ldr	r3, [pc, #128]	@ (8006f50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ed0:	68db      	ldr	r3, [r3, #12]
 8006ed2:	f003 0303 	and.w	r3, r3, #3
 8006ed6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006ed8:	4b1d      	ldr	r3, [pc, #116]	@ (8006f50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	091b      	lsrs	r3, r3, #4
 8006ede:	f003 030f 	and.w	r3, r3, #15
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2b03      	cmp	r3, #3
 8006eea:	d10c      	bne.n	8006f06 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006eec:	4a1a      	ldr	r2, [pc, #104]	@ (8006f58 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ef4:	4a16      	ldr	r2, [pc, #88]	@ (8006f50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ef6:	68d2      	ldr	r2, [r2, #12]
 8006ef8:	0a12      	lsrs	r2, r2, #8
 8006efa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006efe:	fb02 f303 	mul.w	r3, r2, r3
 8006f02:	617b      	str	r3, [r7, #20]
      break;
 8006f04:	e00c      	b.n	8006f20 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006f06:	4a13      	ldr	r2, [pc, #76]	@ (8006f54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f0e:	4a10      	ldr	r2, [pc, #64]	@ (8006f50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006f10:	68d2      	ldr	r2, [r2, #12]
 8006f12:	0a12      	lsrs	r2, r2, #8
 8006f14:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006f18:	fb02 f303 	mul.w	r3, r2, r3
 8006f1c:	617b      	str	r3, [r7, #20]
      break;
 8006f1e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006f20:	4b0b      	ldr	r3, [pc, #44]	@ (8006f50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006f22:	68db      	ldr	r3, [r3, #12]
 8006f24:	0e5b      	lsrs	r3, r3, #25
 8006f26:	f003 0303 	and.w	r3, r3, #3
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	005b      	lsls	r3, r3, #1
 8006f2e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006f30:	697a      	ldr	r2, [r7, #20]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f38:	613b      	str	r3, [r7, #16]
 8006f3a:	e001      	b.n	8006f40 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006f40:	693b      	ldr	r3, [r7, #16]
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	371c      	adds	r7, #28
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr
 8006f4e:	bf00      	nop
 8006f50:	40021000 	.word	0x40021000
 8006f54:	00f42400 	.word	0x00f42400
 8006f58:	007a1200 	.word	0x007a1200

08006f5c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b087      	sub	sp, #28
 8006f60:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006f62:	4b1e      	ldr	r3, [pc, #120]	@ (8006fdc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006f64:	68db      	ldr	r3, [r3, #12]
 8006f66:	f003 0303 	and.w	r3, r3, #3
 8006f6a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006f6c:	4b1b      	ldr	r3, [pc, #108]	@ (8006fdc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	091b      	lsrs	r3, r3, #4
 8006f72:	f003 030f 	and.w	r3, r3, #15
 8006f76:	3301      	adds	r3, #1
 8006f78:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	2b03      	cmp	r3, #3
 8006f7e:	d10c      	bne.n	8006f9a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006f80:	4a17      	ldr	r2, [pc, #92]	@ (8006fe0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f88:	4a14      	ldr	r2, [pc, #80]	@ (8006fdc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006f8a:	68d2      	ldr	r2, [r2, #12]
 8006f8c:	0a12      	lsrs	r2, r2, #8
 8006f8e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006f92:	fb02 f303 	mul.w	r3, r2, r3
 8006f96:	617b      	str	r3, [r7, #20]
    break;
 8006f98:	e00c      	b.n	8006fb4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006f9a:	4a12      	ldr	r2, [pc, #72]	@ (8006fe4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fa2:	4a0e      	ldr	r2, [pc, #56]	@ (8006fdc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006fa4:	68d2      	ldr	r2, [r2, #12]
 8006fa6:	0a12      	lsrs	r2, r2, #8
 8006fa8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006fac:	fb02 f303 	mul.w	r3, r2, r3
 8006fb0:	617b      	str	r3, [r7, #20]
    break;
 8006fb2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006fb4:	4b09      	ldr	r3, [pc, #36]	@ (8006fdc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006fb6:	68db      	ldr	r3, [r3, #12]
 8006fb8:	0e5b      	lsrs	r3, r3, #25
 8006fba:	f003 0303 	and.w	r3, r3, #3
 8006fbe:	3301      	adds	r3, #1
 8006fc0:	005b      	lsls	r3, r3, #1
 8006fc2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006fc4:	697a      	ldr	r2, [r7, #20]
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fcc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006fce:	687b      	ldr	r3, [r7, #4]
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	371c      	adds	r7, #28
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr
 8006fdc:	40021000 	.word	0x40021000
 8006fe0:	007a1200 	.word	0x007a1200
 8006fe4:	00f42400 	.word	0x00f42400

08006fe8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b086      	sub	sp, #24
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007000:	2b00      	cmp	r3, #0
 8007002:	f000 8098 	beq.w	8007136 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007006:	2300      	movs	r3, #0
 8007008:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800700a:	4b43      	ldr	r3, [pc, #268]	@ (8007118 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800700c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800700e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007012:	2b00      	cmp	r3, #0
 8007014:	d10d      	bne.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007016:	4b40      	ldr	r3, [pc, #256]	@ (8007118 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007018:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800701a:	4a3f      	ldr	r2, [pc, #252]	@ (8007118 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800701c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007020:	6593      	str	r3, [r2, #88]	@ 0x58
 8007022:	4b3d      	ldr	r3, [pc, #244]	@ (8007118 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007024:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007026:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800702a:	60bb      	str	r3, [r7, #8]
 800702c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800702e:	2301      	movs	r3, #1
 8007030:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007032:	4b3a      	ldr	r3, [pc, #232]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a39      	ldr	r2, [pc, #228]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007038:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800703c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800703e:	f7fb f819 	bl	8002074 <HAL_GetTick>
 8007042:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007044:	e009      	b.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007046:	f7fb f815 	bl	8002074 <HAL_GetTick>
 800704a:	4602      	mov	r2, r0
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	1ad3      	subs	r3, r2, r3
 8007050:	2b02      	cmp	r3, #2
 8007052:	d902      	bls.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007054:	2303      	movs	r3, #3
 8007056:	74fb      	strb	r3, [r7, #19]
        break;
 8007058:	e005      	b.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800705a:	4b30      	ldr	r3, [pc, #192]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007062:	2b00      	cmp	r3, #0
 8007064:	d0ef      	beq.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007066:	7cfb      	ldrb	r3, [r7, #19]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d159      	bne.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800706c:	4b2a      	ldr	r3, [pc, #168]	@ (8007118 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800706e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007072:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007076:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d01e      	beq.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007082:	697a      	ldr	r2, [r7, #20]
 8007084:	429a      	cmp	r2, r3
 8007086:	d019      	beq.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007088:	4b23      	ldr	r3, [pc, #140]	@ (8007118 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800708a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800708e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007092:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007094:	4b20      	ldr	r3, [pc, #128]	@ (8007118 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007096:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800709a:	4a1f      	ldr	r2, [pc, #124]	@ (8007118 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800709c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80070a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80070a4:	4b1c      	ldr	r3, [pc, #112]	@ (8007118 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80070a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070aa:	4a1b      	ldr	r2, [pc, #108]	@ (8007118 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80070ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80070b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80070b4:	4a18      	ldr	r2, [pc, #96]	@ (8007118 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	f003 0301 	and.w	r3, r3, #1
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d016      	beq.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070c6:	f7fa ffd5 	bl	8002074 <HAL_GetTick>
 80070ca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80070cc:	e00b      	b.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070ce:	f7fa ffd1 	bl	8002074 <HAL_GetTick>
 80070d2:	4602      	mov	r2, r0
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	1ad3      	subs	r3, r2, r3
 80070d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070dc:	4293      	cmp	r3, r2
 80070de:	d902      	bls.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80070e0:	2303      	movs	r3, #3
 80070e2:	74fb      	strb	r3, [r7, #19]
            break;
 80070e4:	e006      	b.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80070e6:	4b0c      	ldr	r3, [pc, #48]	@ (8007118 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80070e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070ec:	f003 0302 	and.w	r3, r3, #2
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d0ec      	beq.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80070f4:	7cfb      	ldrb	r3, [r7, #19]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d10b      	bne.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80070fa:	4b07      	ldr	r3, [pc, #28]	@ (8007118 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80070fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007100:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007108:	4903      	ldr	r1, [pc, #12]	@ (8007118 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800710a:	4313      	orrs	r3, r2
 800710c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007110:	e008      	b.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007112:	7cfb      	ldrb	r3, [r7, #19]
 8007114:	74bb      	strb	r3, [r7, #18]
 8007116:	e005      	b.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007118:	40021000 	.word	0x40021000
 800711c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007120:	7cfb      	ldrb	r3, [r7, #19]
 8007122:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007124:	7c7b      	ldrb	r3, [r7, #17]
 8007126:	2b01      	cmp	r3, #1
 8007128:	d105      	bne.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800712a:	4ba7      	ldr	r3, [pc, #668]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800712c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800712e:	4aa6      	ldr	r2, [pc, #664]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007130:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007134:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f003 0301 	and.w	r3, r3, #1
 800713e:	2b00      	cmp	r3, #0
 8007140:	d00a      	beq.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007142:	4ba1      	ldr	r3, [pc, #644]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007144:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007148:	f023 0203 	bic.w	r2, r3, #3
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	499d      	ldr	r1, [pc, #628]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007152:	4313      	orrs	r3, r2
 8007154:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f003 0302 	and.w	r3, r3, #2
 8007160:	2b00      	cmp	r3, #0
 8007162:	d00a      	beq.n	800717a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007164:	4b98      	ldr	r3, [pc, #608]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007166:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800716a:	f023 020c 	bic.w	r2, r3, #12
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	4995      	ldr	r1, [pc, #596]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007174:	4313      	orrs	r3, r2
 8007176:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f003 0304 	and.w	r3, r3, #4
 8007182:	2b00      	cmp	r3, #0
 8007184:	d00a      	beq.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007186:	4b90      	ldr	r3, [pc, #576]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007188:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800718c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	68db      	ldr	r3, [r3, #12]
 8007194:	498c      	ldr	r1, [pc, #560]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007196:	4313      	orrs	r3, r2
 8007198:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f003 0308 	and.w	r3, r3, #8
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d00a      	beq.n	80071be <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80071a8:	4b87      	ldr	r3, [pc, #540]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071ae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	691b      	ldr	r3, [r3, #16]
 80071b6:	4984      	ldr	r1, [pc, #528]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071b8:	4313      	orrs	r3, r2
 80071ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f003 0310 	and.w	r3, r3, #16
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d00a      	beq.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80071ca:	4b7f      	ldr	r3, [pc, #508]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	695b      	ldr	r3, [r3, #20]
 80071d8:	497b      	ldr	r1, [pc, #492]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071da:	4313      	orrs	r3, r2
 80071dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f003 0320 	and.w	r3, r3, #32
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d00a      	beq.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80071ec:	4b76      	ldr	r3, [pc, #472]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071f2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	699b      	ldr	r3, [r3, #24]
 80071fa:	4973      	ldr	r1, [pc, #460]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071fc:	4313      	orrs	r3, r2
 80071fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800720a:	2b00      	cmp	r3, #0
 800720c:	d00a      	beq.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800720e:	4b6e      	ldr	r3, [pc, #440]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007210:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007214:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	69db      	ldr	r3, [r3, #28]
 800721c:	496a      	ldr	r1, [pc, #424]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800721e:	4313      	orrs	r3, r2
 8007220:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800722c:	2b00      	cmp	r3, #0
 800722e:	d00a      	beq.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007230:	4b65      	ldr	r3, [pc, #404]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007232:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007236:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6a1b      	ldr	r3, [r3, #32]
 800723e:	4962      	ldr	r1, [pc, #392]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007240:	4313      	orrs	r3, r2
 8007242:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800724e:	2b00      	cmp	r3, #0
 8007250:	d00a      	beq.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007252:	4b5d      	ldr	r3, [pc, #372]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007254:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007258:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007260:	4959      	ldr	r1, [pc, #356]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007262:	4313      	orrs	r3, r2
 8007264:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007270:	2b00      	cmp	r3, #0
 8007272:	d00a      	beq.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007274:	4b54      	ldr	r3, [pc, #336]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007276:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800727a:	f023 0203 	bic.w	r2, r3, #3
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007282:	4951      	ldr	r1, [pc, #324]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007284:	4313      	orrs	r3, r2
 8007286:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007292:	2b00      	cmp	r3, #0
 8007294:	d00a      	beq.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007296:	4b4c      	ldr	r3, [pc, #304]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007298:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800729c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072a4:	4948      	ldr	r1, [pc, #288]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072a6:	4313      	orrs	r3, r2
 80072a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d015      	beq.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80072b8:	4b43      	ldr	r3, [pc, #268]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072c6:	4940      	ldr	r1, [pc, #256]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072c8:	4313      	orrs	r3, r2
 80072ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80072d6:	d105      	bne.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80072d8:	4b3b      	ldr	r3, [pc, #236]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072da:	68db      	ldr	r3, [r3, #12]
 80072dc:	4a3a      	ldr	r2, [pc, #232]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80072e2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d015      	beq.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80072f0:	4b35      	ldr	r3, [pc, #212]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072f6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072fe:	4932      	ldr	r1, [pc, #200]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007300:	4313      	orrs	r3, r2
 8007302:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800730a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800730e:	d105      	bne.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007310:	4b2d      	ldr	r3, [pc, #180]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007312:	68db      	ldr	r3, [r3, #12]
 8007314:	4a2c      	ldr	r2, [pc, #176]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007316:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800731a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007324:	2b00      	cmp	r3, #0
 8007326:	d015      	beq.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007328:	4b27      	ldr	r3, [pc, #156]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800732a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800732e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007336:	4924      	ldr	r1, [pc, #144]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007338:	4313      	orrs	r3, r2
 800733a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007342:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007346:	d105      	bne.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007348:	4b1f      	ldr	r3, [pc, #124]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800734a:	68db      	ldr	r3, [r3, #12]
 800734c:	4a1e      	ldr	r2, [pc, #120]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800734e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007352:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800735c:	2b00      	cmp	r3, #0
 800735e:	d015      	beq.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007360:	4b19      	ldr	r3, [pc, #100]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007362:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007366:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800736e:	4916      	ldr	r1, [pc, #88]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007370:	4313      	orrs	r3, r2
 8007372:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800737a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800737e:	d105      	bne.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007380:	4b11      	ldr	r3, [pc, #68]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007382:	68db      	ldr	r3, [r3, #12]
 8007384:	4a10      	ldr	r2, [pc, #64]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007386:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800738a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007394:	2b00      	cmp	r3, #0
 8007396:	d019      	beq.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007398:	4b0b      	ldr	r3, [pc, #44]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800739a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800739e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073a6:	4908      	ldr	r1, [pc, #32]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073a8:	4313      	orrs	r3, r2
 80073aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80073b6:	d109      	bne.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80073b8:	4b03      	ldr	r3, [pc, #12]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073ba:	68db      	ldr	r3, [r3, #12]
 80073bc:	4a02      	ldr	r2, [pc, #8]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80073c2:	60d3      	str	r3, [r2, #12]
 80073c4:	e002      	b.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80073c6:	bf00      	nop
 80073c8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d015      	beq.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80073d8:	4b29      	ldr	r3, [pc, #164]	@ (8007480 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80073da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073de:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073e6:	4926      	ldr	r1, [pc, #152]	@ (8007480 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80073e8:	4313      	orrs	r3, r2
 80073ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80073f6:	d105      	bne.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80073f8:	4b21      	ldr	r3, [pc, #132]	@ (8007480 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80073fa:	68db      	ldr	r3, [r3, #12]
 80073fc:	4a20      	ldr	r2, [pc, #128]	@ (8007480 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80073fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007402:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800740c:	2b00      	cmp	r3, #0
 800740e:	d015      	beq.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007410:	4b1b      	ldr	r3, [pc, #108]	@ (8007480 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007412:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007416:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800741e:	4918      	ldr	r1, [pc, #96]	@ (8007480 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007420:	4313      	orrs	r3, r2
 8007422:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800742a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800742e:	d105      	bne.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007430:	4b13      	ldr	r3, [pc, #76]	@ (8007480 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007432:	68db      	ldr	r3, [r3, #12]
 8007434:	4a12      	ldr	r2, [pc, #72]	@ (8007480 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007436:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800743a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007444:	2b00      	cmp	r3, #0
 8007446:	d015      	beq.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007448:	4b0d      	ldr	r3, [pc, #52]	@ (8007480 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800744a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800744e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007456:	490a      	ldr	r1, [pc, #40]	@ (8007480 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007458:	4313      	orrs	r3, r2
 800745a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007462:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007466:	d105      	bne.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007468:	4b05      	ldr	r3, [pc, #20]	@ (8007480 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800746a:	68db      	ldr	r3, [r3, #12]
 800746c:	4a04      	ldr	r2, [pc, #16]	@ (8007480 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800746e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007472:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007474:	7cbb      	ldrb	r3, [r7, #18]
}
 8007476:	4618      	mov	r0, r3
 8007478:	3718      	adds	r7, #24
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
 800747e:	bf00      	nop
 8007480:	40021000 	.word	0x40021000

08007484 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d101      	bne.n	8007496 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007492:	2301      	movs	r3, #1
 8007494:	e049      	b.n	800752a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800749c:	b2db      	uxtb	r3, r3
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d106      	bne.n	80074b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f7f9 ffde 	bl	800146c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2202      	movs	r2, #2
 80074b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	3304      	adds	r3, #4
 80074c0:	4619      	mov	r1, r3
 80074c2:	4610      	mov	r0, r2
 80074c4:	f001 fe08 	bl	80090d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2201      	movs	r2, #1
 80074d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2201      	movs	r2, #1
 80074dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2201      	movs	r2, #1
 80074e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2201      	movs	r2, #1
 80074ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2201      	movs	r2, #1
 80074f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2201      	movs	r2, #1
 80074fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2201      	movs	r2, #1
 8007504:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2201      	movs	r2, #1
 800750c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2201      	movs	r2, #1
 800751c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2201      	movs	r2, #1
 8007524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007528:	2300      	movs	r3, #0
}
 800752a:	4618      	mov	r0, r3
 800752c:	3708      	adds	r7, #8
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}
	...

08007534 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007534:	b480      	push	{r7}
 8007536:	b085      	sub	sp, #20
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007542:	b2db      	uxtb	r3, r3
 8007544:	2b01      	cmp	r3, #1
 8007546:	d001      	beq.n	800754c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007548:	2301      	movs	r3, #1
 800754a:	e04c      	b.n	80075e6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2202      	movs	r2, #2
 8007550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a26      	ldr	r2, [pc, #152]	@ (80075f4 <HAL_TIM_Base_Start+0xc0>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d022      	beq.n	80075a4 <HAL_TIM_Base_Start+0x70>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007566:	d01d      	beq.n	80075a4 <HAL_TIM_Base_Start+0x70>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a22      	ldr	r2, [pc, #136]	@ (80075f8 <HAL_TIM_Base_Start+0xc4>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d018      	beq.n	80075a4 <HAL_TIM_Base_Start+0x70>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a21      	ldr	r2, [pc, #132]	@ (80075fc <HAL_TIM_Base_Start+0xc8>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d013      	beq.n	80075a4 <HAL_TIM_Base_Start+0x70>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a1f      	ldr	r2, [pc, #124]	@ (8007600 <HAL_TIM_Base_Start+0xcc>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d00e      	beq.n	80075a4 <HAL_TIM_Base_Start+0x70>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a1e      	ldr	r2, [pc, #120]	@ (8007604 <HAL_TIM_Base_Start+0xd0>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d009      	beq.n	80075a4 <HAL_TIM_Base_Start+0x70>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a1c      	ldr	r2, [pc, #112]	@ (8007608 <HAL_TIM_Base_Start+0xd4>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d004      	beq.n	80075a4 <HAL_TIM_Base_Start+0x70>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a1b      	ldr	r2, [pc, #108]	@ (800760c <HAL_TIM_Base_Start+0xd8>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d115      	bne.n	80075d0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	689a      	ldr	r2, [r3, #8]
 80075aa:	4b19      	ldr	r3, [pc, #100]	@ (8007610 <HAL_TIM_Base_Start+0xdc>)
 80075ac:	4013      	ands	r3, r2
 80075ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2b06      	cmp	r3, #6
 80075b4:	d015      	beq.n	80075e2 <HAL_TIM_Base_Start+0xae>
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075bc:	d011      	beq.n	80075e2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f042 0201 	orr.w	r2, r2, #1
 80075cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075ce:	e008      	b.n	80075e2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f042 0201 	orr.w	r2, r2, #1
 80075de:	601a      	str	r2, [r3, #0]
 80075e0:	e000      	b.n	80075e4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80075e4:	2300      	movs	r3, #0
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3714      	adds	r7, #20
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr
 80075f2:	bf00      	nop
 80075f4:	40012c00 	.word	0x40012c00
 80075f8:	40000400 	.word	0x40000400
 80075fc:	40000800 	.word	0x40000800
 8007600:	40000c00 	.word	0x40000c00
 8007604:	40013400 	.word	0x40013400
 8007608:	40014000 	.word	0x40014000
 800760c:	40015000 	.word	0x40015000
 8007610:	00010007 	.word	0x00010007

08007614 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007614:	b480      	push	{r7}
 8007616:	b085      	sub	sp, #20
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007622:	b2db      	uxtb	r3, r3
 8007624:	2b01      	cmp	r3, #1
 8007626:	d001      	beq.n	800762c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007628:	2301      	movs	r3, #1
 800762a:	e054      	b.n	80076d6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2202      	movs	r2, #2
 8007630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	68da      	ldr	r2, [r3, #12]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f042 0201 	orr.w	r2, r2, #1
 8007642:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a26      	ldr	r2, [pc, #152]	@ (80076e4 <HAL_TIM_Base_Start_IT+0xd0>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d022      	beq.n	8007694 <HAL_TIM_Base_Start_IT+0x80>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007656:	d01d      	beq.n	8007694 <HAL_TIM_Base_Start_IT+0x80>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a22      	ldr	r2, [pc, #136]	@ (80076e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d018      	beq.n	8007694 <HAL_TIM_Base_Start_IT+0x80>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a21      	ldr	r2, [pc, #132]	@ (80076ec <HAL_TIM_Base_Start_IT+0xd8>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d013      	beq.n	8007694 <HAL_TIM_Base_Start_IT+0x80>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a1f      	ldr	r2, [pc, #124]	@ (80076f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d00e      	beq.n	8007694 <HAL_TIM_Base_Start_IT+0x80>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a1e      	ldr	r2, [pc, #120]	@ (80076f4 <HAL_TIM_Base_Start_IT+0xe0>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d009      	beq.n	8007694 <HAL_TIM_Base_Start_IT+0x80>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a1c      	ldr	r2, [pc, #112]	@ (80076f8 <HAL_TIM_Base_Start_IT+0xe4>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d004      	beq.n	8007694 <HAL_TIM_Base_Start_IT+0x80>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a1b      	ldr	r2, [pc, #108]	@ (80076fc <HAL_TIM_Base_Start_IT+0xe8>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d115      	bne.n	80076c0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	689a      	ldr	r2, [r3, #8]
 800769a:	4b19      	ldr	r3, [pc, #100]	@ (8007700 <HAL_TIM_Base_Start_IT+0xec>)
 800769c:	4013      	ands	r3, r2
 800769e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2b06      	cmp	r3, #6
 80076a4:	d015      	beq.n	80076d2 <HAL_TIM_Base_Start_IT+0xbe>
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076ac:	d011      	beq.n	80076d2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	681a      	ldr	r2, [r3, #0]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f042 0201 	orr.w	r2, r2, #1
 80076bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076be:	e008      	b.n	80076d2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	681a      	ldr	r2, [r3, #0]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f042 0201 	orr.w	r2, r2, #1
 80076ce:	601a      	str	r2, [r3, #0]
 80076d0:	e000      	b.n	80076d4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80076d4:	2300      	movs	r3, #0
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3714      	adds	r7, #20
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr
 80076e2:	bf00      	nop
 80076e4:	40012c00 	.word	0x40012c00
 80076e8:	40000400 	.word	0x40000400
 80076ec:	40000800 	.word	0x40000800
 80076f0:	40000c00 	.word	0x40000c00
 80076f4:	40013400 	.word	0x40013400
 80076f8:	40014000 	.word	0x40014000
 80076fc:	40015000 	.word	0x40015000
 8007700:	00010007 	.word	0x00010007

08007704 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b082      	sub	sp, #8
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d101      	bne.n	8007716 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007712:	2301      	movs	r3, #1
 8007714:	e049      	b.n	80077aa <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800771c:	b2db      	uxtb	r3, r3
 800771e:	2b00      	cmp	r3, #0
 8007720:	d106      	bne.n	8007730 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2200      	movs	r2, #0
 8007726:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 f841 	bl	80077b2 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2202      	movs	r2, #2
 8007734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681a      	ldr	r2, [r3, #0]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	3304      	adds	r3, #4
 8007740:	4619      	mov	r1, r3
 8007742:	4610      	mov	r0, r2
 8007744:	f001 fcc8 	bl	80090d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2201      	movs	r2, #1
 800774c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2201      	movs	r2, #1
 8007754:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2201      	movs	r2, #1
 800775c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2201      	movs	r2, #1
 8007764:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2201      	movs	r2, #1
 800776c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2201      	movs	r2, #1
 8007774:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2201      	movs	r2, #1
 800777c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2201      	movs	r2, #1
 8007784:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2201      	movs	r2, #1
 800778c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2201      	movs	r2, #1
 8007794:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2201      	movs	r2, #1
 800779c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2201      	movs	r2, #1
 80077a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80077a8:	2300      	movs	r3, #0
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3708      	adds	r7, #8
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}

080077b2 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80077b2:	b480      	push	{r7}
 80077b4:	b083      	sub	sp, #12
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80077ba:	bf00      	nop
 80077bc:	370c      	adds	r7, #12
 80077be:	46bd      	mov	sp, r7
 80077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c4:	4770      	bx	lr
	...

080077c8 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b084      	sub	sp, #16
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d109      	bne.n	80077ec <HAL_TIM_OC_Start+0x24>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80077de:	b2db      	uxtb	r3, r3
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	bf14      	ite	ne
 80077e4:	2301      	movne	r3, #1
 80077e6:	2300      	moveq	r3, #0
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	e03c      	b.n	8007866 <HAL_TIM_OC_Start+0x9e>
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	2b04      	cmp	r3, #4
 80077f0:	d109      	bne.n	8007806 <HAL_TIM_OC_Start+0x3e>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80077f8:	b2db      	uxtb	r3, r3
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	bf14      	ite	ne
 80077fe:	2301      	movne	r3, #1
 8007800:	2300      	moveq	r3, #0
 8007802:	b2db      	uxtb	r3, r3
 8007804:	e02f      	b.n	8007866 <HAL_TIM_OC_Start+0x9e>
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	2b08      	cmp	r3, #8
 800780a:	d109      	bne.n	8007820 <HAL_TIM_OC_Start+0x58>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007812:	b2db      	uxtb	r3, r3
 8007814:	2b01      	cmp	r3, #1
 8007816:	bf14      	ite	ne
 8007818:	2301      	movne	r3, #1
 800781a:	2300      	moveq	r3, #0
 800781c:	b2db      	uxtb	r3, r3
 800781e:	e022      	b.n	8007866 <HAL_TIM_OC_Start+0x9e>
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	2b0c      	cmp	r3, #12
 8007824:	d109      	bne.n	800783a <HAL_TIM_OC_Start+0x72>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800782c:	b2db      	uxtb	r3, r3
 800782e:	2b01      	cmp	r3, #1
 8007830:	bf14      	ite	ne
 8007832:	2301      	movne	r3, #1
 8007834:	2300      	moveq	r3, #0
 8007836:	b2db      	uxtb	r3, r3
 8007838:	e015      	b.n	8007866 <HAL_TIM_OC_Start+0x9e>
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	2b10      	cmp	r3, #16
 800783e:	d109      	bne.n	8007854 <HAL_TIM_OC_Start+0x8c>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007846:	b2db      	uxtb	r3, r3
 8007848:	2b01      	cmp	r3, #1
 800784a:	bf14      	ite	ne
 800784c:	2301      	movne	r3, #1
 800784e:	2300      	moveq	r3, #0
 8007850:	b2db      	uxtb	r3, r3
 8007852:	e008      	b.n	8007866 <HAL_TIM_OC_Start+0x9e>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800785a:	b2db      	uxtb	r3, r3
 800785c:	2b01      	cmp	r3, #1
 800785e:	bf14      	ite	ne
 8007860:	2301      	movne	r3, #1
 8007862:	2300      	moveq	r3, #0
 8007864:	b2db      	uxtb	r3, r3
 8007866:	2b00      	cmp	r3, #0
 8007868:	d001      	beq.n	800786e <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 800786a:	2301      	movs	r3, #1
 800786c:	e0a6      	b.n	80079bc <HAL_TIM_OC_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d104      	bne.n	800787e <HAL_TIM_OC_Start+0xb6>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2202      	movs	r2, #2
 8007878:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800787c:	e023      	b.n	80078c6 <HAL_TIM_OC_Start+0xfe>
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	2b04      	cmp	r3, #4
 8007882:	d104      	bne.n	800788e <HAL_TIM_OC_Start+0xc6>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2202      	movs	r2, #2
 8007888:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800788c:	e01b      	b.n	80078c6 <HAL_TIM_OC_Start+0xfe>
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	2b08      	cmp	r3, #8
 8007892:	d104      	bne.n	800789e <HAL_TIM_OC_Start+0xd6>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2202      	movs	r2, #2
 8007898:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800789c:	e013      	b.n	80078c6 <HAL_TIM_OC_Start+0xfe>
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	2b0c      	cmp	r3, #12
 80078a2:	d104      	bne.n	80078ae <HAL_TIM_OC_Start+0xe6>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2202      	movs	r2, #2
 80078a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80078ac:	e00b      	b.n	80078c6 <HAL_TIM_OC_Start+0xfe>
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	2b10      	cmp	r3, #16
 80078b2:	d104      	bne.n	80078be <HAL_TIM_OC_Start+0xf6>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2202      	movs	r2, #2
 80078b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80078bc:	e003      	b.n	80078c6 <HAL_TIM_OC_Start+0xfe>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2202      	movs	r2, #2
 80078c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	2201      	movs	r2, #1
 80078cc:	6839      	ldr	r1, [r7, #0]
 80078ce:	4618      	mov	r0, r3
 80078d0:	f002 fa86 	bl	8009de0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a3a      	ldr	r2, [pc, #232]	@ (80079c4 <HAL_TIM_OC_Start+0x1fc>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d018      	beq.n	8007910 <HAL_TIM_OC_Start+0x148>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a39      	ldr	r2, [pc, #228]	@ (80079c8 <HAL_TIM_OC_Start+0x200>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d013      	beq.n	8007910 <HAL_TIM_OC_Start+0x148>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a37      	ldr	r2, [pc, #220]	@ (80079cc <HAL_TIM_OC_Start+0x204>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d00e      	beq.n	8007910 <HAL_TIM_OC_Start+0x148>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a36      	ldr	r2, [pc, #216]	@ (80079d0 <HAL_TIM_OC_Start+0x208>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d009      	beq.n	8007910 <HAL_TIM_OC_Start+0x148>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a34      	ldr	r2, [pc, #208]	@ (80079d4 <HAL_TIM_OC_Start+0x20c>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d004      	beq.n	8007910 <HAL_TIM_OC_Start+0x148>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a33      	ldr	r2, [pc, #204]	@ (80079d8 <HAL_TIM_OC_Start+0x210>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d101      	bne.n	8007914 <HAL_TIM_OC_Start+0x14c>
 8007910:	2301      	movs	r3, #1
 8007912:	e000      	b.n	8007916 <HAL_TIM_OC_Start+0x14e>
 8007914:	2300      	movs	r3, #0
 8007916:	2b00      	cmp	r3, #0
 8007918:	d007      	beq.n	800792a <HAL_TIM_OC_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007928:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4a25      	ldr	r2, [pc, #148]	@ (80079c4 <HAL_TIM_OC_Start+0x1fc>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d022      	beq.n	800797a <HAL_TIM_OC_Start+0x1b2>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800793c:	d01d      	beq.n	800797a <HAL_TIM_OC_Start+0x1b2>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a26      	ldr	r2, [pc, #152]	@ (80079dc <HAL_TIM_OC_Start+0x214>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d018      	beq.n	800797a <HAL_TIM_OC_Start+0x1b2>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a24      	ldr	r2, [pc, #144]	@ (80079e0 <HAL_TIM_OC_Start+0x218>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d013      	beq.n	800797a <HAL_TIM_OC_Start+0x1b2>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4a23      	ldr	r2, [pc, #140]	@ (80079e4 <HAL_TIM_OC_Start+0x21c>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d00e      	beq.n	800797a <HAL_TIM_OC_Start+0x1b2>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a19      	ldr	r2, [pc, #100]	@ (80079c8 <HAL_TIM_OC_Start+0x200>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d009      	beq.n	800797a <HAL_TIM_OC_Start+0x1b2>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a18      	ldr	r2, [pc, #96]	@ (80079cc <HAL_TIM_OC_Start+0x204>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d004      	beq.n	800797a <HAL_TIM_OC_Start+0x1b2>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a18      	ldr	r2, [pc, #96]	@ (80079d8 <HAL_TIM_OC_Start+0x210>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d115      	bne.n	80079a6 <HAL_TIM_OC_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	689a      	ldr	r2, [r3, #8]
 8007980:	4b19      	ldr	r3, [pc, #100]	@ (80079e8 <HAL_TIM_OC_Start+0x220>)
 8007982:	4013      	ands	r3, r2
 8007984:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2b06      	cmp	r3, #6
 800798a:	d015      	beq.n	80079b8 <HAL_TIM_OC_Start+0x1f0>
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007992:	d011      	beq.n	80079b8 <HAL_TIM_OC_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	681a      	ldr	r2, [r3, #0]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f042 0201 	orr.w	r2, r2, #1
 80079a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079a4:	e008      	b.n	80079b8 <HAL_TIM_OC_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	681a      	ldr	r2, [r3, #0]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f042 0201 	orr.w	r2, r2, #1
 80079b4:	601a      	str	r2, [r3, #0]
 80079b6:	e000      	b.n	80079ba <HAL_TIM_OC_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079b8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80079ba:	2300      	movs	r3, #0
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3710      	adds	r7, #16
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}
 80079c4:	40012c00 	.word	0x40012c00
 80079c8:	40013400 	.word	0x40013400
 80079cc:	40014000 	.word	0x40014000
 80079d0:	40014400 	.word	0x40014400
 80079d4:	40014800 	.word	0x40014800
 80079d8:	40015000 	.word	0x40015000
 80079dc:	40000400 	.word	0x40000400
 80079e0:	40000800 	.word	0x40000800
 80079e4:	40000c00 	.word	0x40000c00
 80079e8:	00010007 	.word	0x00010007

080079ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b082      	sub	sp, #8
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d101      	bne.n	80079fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80079fa:	2301      	movs	r3, #1
 80079fc:	e049      	b.n	8007a92 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a04:	b2db      	uxtb	r3, r3
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d106      	bne.n	8007a18 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f000 f841 	bl	8007a9a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2202      	movs	r2, #2
 8007a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681a      	ldr	r2, [r3, #0]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	3304      	adds	r3, #4
 8007a28:	4619      	mov	r1, r3
 8007a2a:	4610      	mov	r0, r2
 8007a2c:	f001 fb54 	bl	80090d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2201      	movs	r2, #1
 8007a34:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2201      	movs	r2, #1
 8007a44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2201      	movs	r2, #1
 8007a54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2201      	movs	r2, #1
 8007a64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2201      	movs	r2, #1
 8007a74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2201      	movs	r2, #1
 8007a84:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007a90:	2300      	movs	r3, #0
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3708      	adds	r7, #8
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}

08007a9a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007a9a:	b480      	push	{r7}
 8007a9c:	b083      	sub	sp, #12
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007aa2:	bf00      	nop
 8007aa4:	370c      	adds	r7, #12
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aac:	4770      	bx	lr
	...

08007ab0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b084      	sub	sp, #16
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d109      	bne.n	8007ad4 <HAL_TIM_PWM_Start+0x24>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007ac6:	b2db      	uxtb	r3, r3
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	bf14      	ite	ne
 8007acc:	2301      	movne	r3, #1
 8007ace:	2300      	moveq	r3, #0
 8007ad0:	b2db      	uxtb	r3, r3
 8007ad2:	e03c      	b.n	8007b4e <HAL_TIM_PWM_Start+0x9e>
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	2b04      	cmp	r3, #4
 8007ad8:	d109      	bne.n	8007aee <HAL_TIM_PWM_Start+0x3e>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007ae0:	b2db      	uxtb	r3, r3
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	bf14      	ite	ne
 8007ae6:	2301      	movne	r3, #1
 8007ae8:	2300      	moveq	r3, #0
 8007aea:	b2db      	uxtb	r3, r3
 8007aec:	e02f      	b.n	8007b4e <HAL_TIM_PWM_Start+0x9e>
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	2b08      	cmp	r3, #8
 8007af2:	d109      	bne.n	8007b08 <HAL_TIM_PWM_Start+0x58>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	bf14      	ite	ne
 8007b00:	2301      	movne	r3, #1
 8007b02:	2300      	moveq	r3, #0
 8007b04:	b2db      	uxtb	r3, r3
 8007b06:	e022      	b.n	8007b4e <HAL_TIM_PWM_Start+0x9e>
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	2b0c      	cmp	r3, #12
 8007b0c:	d109      	bne.n	8007b22 <HAL_TIM_PWM_Start+0x72>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b14:	b2db      	uxtb	r3, r3
 8007b16:	2b01      	cmp	r3, #1
 8007b18:	bf14      	ite	ne
 8007b1a:	2301      	movne	r3, #1
 8007b1c:	2300      	moveq	r3, #0
 8007b1e:	b2db      	uxtb	r3, r3
 8007b20:	e015      	b.n	8007b4e <HAL_TIM_PWM_Start+0x9e>
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	2b10      	cmp	r3, #16
 8007b26:	d109      	bne.n	8007b3c <HAL_TIM_PWM_Start+0x8c>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007b2e:	b2db      	uxtb	r3, r3
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	bf14      	ite	ne
 8007b34:	2301      	movne	r3, #1
 8007b36:	2300      	moveq	r3, #0
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	e008      	b.n	8007b4e <HAL_TIM_PWM_Start+0x9e>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007b42:	b2db      	uxtb	r3, r3
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	bf14      	ite	ne
 8007b48:	2301      	movne	r3, #1
 8007b4a:	2300      	moveq	r3, #0
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d001      	beq.n	8007b56 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007b52:	2301      	movs	r3, #1
 8007b54:	e0a6      	b.n	8007ca4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d104      	bne.n	8007b66 <HAL_TIM_PWM_Start+0xb6>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2202      	movs	r2, #2
 8007b60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007b64:	e023      	b.n	8007bae <HAL_TIM_PWM_Start+0xfe>
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	2b04      	cmp	r3, #4
 8007b6a:	d104      	bne.n	8007b76 <HAL_TIM_PWM_Start+0xc6>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2202      	movs	r2, #2
 8007b70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007b74:	e01b      	b.n	8007bae <HAL_TIM_PWM_Start+0xfe>
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	2b08      	cmp	r3, #8
 8007b7a:	d104      	bne.n	8007b86 <HAL_TIM_PWM_Start+0xd6>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2202      	movs	r2, #2
 8007b80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007b84:	e013      	b.n	8007bae <HAL_TIM_PWM_Start+0xfe>
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	2b0c      	cmp	r3, #12
 8007b8a:	d104      	bne.n	8007b96 <HAL_TIM_PWM_Start+0xe6>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2202      	movs	r2, #2
 8007b90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007b94:	e00b      	b.n	8007bae <HAL_TIM_PWM_Start+0xfe>
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	2b10      	cmp	r3, #16
 8007b9a:	d104      	bne.n	8007ba6 <HAL_TIM_PWM_Start+0xf6>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2202      	movs	r2, #2
 8007ba0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007ba4:	e003      	b.n	8007bae <HAL_TIM_PWM_Start+0xfe>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2202      	movs	r2, #2
 8007baa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	6839      	ldr	r1, [r7, #0]
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f002 f912 	bl	8009de0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a3a      	ldr	r2, [pc, #232]	@ (8007cac <HAL_TIM_PWM_Start+0x1fc>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d018      	beq.n	8007bf8 <HAL_TIM_PWM_Start+0x148>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a39      	ldr	r2, [pc, #228]	@ (8007cb0 <HAL_TIM_PWM_Start+0x200>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d013      	beq.n	8007bf8 <HAL_TIM_PWM_Start+0x148>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a37      	ldr	r2, [pc, #220]	@ (8007cb4 <HAL_TIM_PWM_Start+0x204>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d00e      	beq.n	8007bf8 <HAL_TIM_PWM_Start+0x148>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a36      	ldr	r2, [pc, #216]	@ (8007cb8 <HAL_TIM_PWM_Start+0x208>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d009      	beq.n	8007bf8 <HAL_TIM_PWM_Start+0x148>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a34      	ldr	r2, [pc, #208]	@ (8007cbc <HAL_TIM_PWM_Start+0x20c>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d004      	beq.n	8007bf8 <HAL_TIM_PWM_Start+0x148>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a33      	ldr	r2, [pc, #204]	@ (8007cc0 <HAL_TIM_PWM_Start+0x210>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d101      	bne.n	8007bfc <HAL_TIM_PWM_Start+0x14c>
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	e000      	b.n	8007bfe <HAL_TIM_PWM_Start+0x14e>
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d007      	beq.n	8007c12 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007c10:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a25      	ldr	r2, [pc, #148]	@ (8007cac <HAL_TIM_PWM_Start+0x1fc>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d022      	beq.n	8007c62 <HAL_TIM_PWM_Start+0x1b2>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c24:	d01d      	beq.n	8007c62 <HAL_TIM_PWM_Start+0x1b2>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a26      	ldr	r2, [pc, #152]	@ (8007cc4 <HAL_TIM_PWM_Start+0x214>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d018      	beq.n	8007c62 <HAL_TIM_PWM_Start+0x1b2>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a24      	ldr	r2, [pc, #144]	@ (8007cc8 <HAL_TIM_PWM_Start+0x218>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d013      	beq.n	8007c62 <HAL_TIM_PWM_Start+0x1b2>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a23      	ldr	r2, [pc, #140]	@ (8007ccc <HAL_TIM_PWM_Start+0x21c>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d00e      	beq.n	8007c62 <HAL_TIM_PWM_Start+0x1b2>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4a19      	ldr	r2, [pc, #100]	@ (8007cb0 <HAL_TIM_PWM_Start+0x200>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d009      	beq.n	8007c62 <HAL_TIM_PWM_Start+0x1b2>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4a18      	ldr	r2, [pc, #96]	@ (8007cb4 <HAL_TIM_PWM_Start+0x204>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d004      	beq.n	8007c62 <HAL_TIM_PWM_Start+0x1b2>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4a18      	ldr	r2, [pc, #96]	@ (8007cc0 <HAL_TIM_PWM_Start+0x210>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d115      	bne.n	8007c8e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	689a      	ldr	r2, [r3, #8]
 8007c68:	4b19      	ldr	r3, [pc, #100]	@ (8007cd0 <HAL_TIM_PWM_Start+0x220>)
 8007c6a:	4013      	ands	r3, r2
 8007c6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2b06      	cmp	r3, #6
 8007c72:	d015      	beq.n	8007ca0 <HAL_TIM_PWM_Start+0x1f0>
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c7a:	d011      	beq.n	8007ca0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f042 0201 	orr.w	r2, r2, #1
 8007c8a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c8c:	e008      	b.n	8007ca0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f042 0201 	orr.w	r2, r2, #1
 8007c9c:	601a      	str	r2, [r3, #0]
 8007c9e:	e000      	b.n	8007ca2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ca0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007ca2:	2300      	movs	r3, #0
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3710      	adds	r7, #16
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}
 8007cac:	40012c00 	.word	0x40012c00
 8007cb0:	40013400 	.word	0x40013400
 8007cb4:	40014000 	.word	0x40014000
 8007cb8:	40014400 	.word	0x40014400
 8007cbc:	40014800 	.word	0x40014800
 8007cc0:	40015000 	.word	0x40015000
 8007cc4:	40000400 	.word	0x40000400
 8007cc8:	40000800 	.word	0x40000800
 8007ccc:	40000c00 	.word	0x40000c00
 8007cd0:	00010007 	.word	0x00010007

08007cd4 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b086      	sub	sp, #24
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	60f8      	str	r0, [r7, #12]
 8007cdc:	60b9      	str	r1, [r7, #8]
 8007cde:	607a      	str	r2, [r7, #4]
 8007ce0:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d109      	bne.n	8007d00 <HAL_TIM_PWM_Start_DMA+0x2c>
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007cf2:	b2db      	uxtb	r3, r3
 8007cf4:	2b02      	cmp	r3, #2
 8007cf6:	bf0c      	ite	eq
 8007cf8:	2301      	moveq	r3, #1
 8007cfa:	2300      	movne	r3, #0
 8007cfc:	b2db      	uxtb	r3, r3
 8007cfe:	e03c      	b.n	8007d7a <HAL_TIM_PWM_Start_DMA+0xa6>
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	2b04      	cmp	r3, #4
 8007d04:	d109      	bne.n	8007d1a <HAL_TIM_PWM_Start_DMA+0x46>
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007d0c:	b2db      	uxtb	r3, r3
 8007d0e:	2b02      	cmp	r3, #2
 8007d10:	bf0c      	ite	eq
 8007d12:	2301      	moveq	r3, #1
 8007d14:	2300      	movne	r3, #0
 8007d16:	b2db      	uxtb	r3, r3
 8007d18:	e02f      	b.n	8007d7a <HAL_TIM_PWM_Start_DMA+0xa6>
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	2b08      	cmp	r3, #8
 8007d1e:	d109      	bne.n	8007d34 <HAL_TIM_PWM_Start_DMA+0x60>
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007d26:	b2db      	uxtb	r3, r3
 8007d28:	2b02      	cmp	r3, #2
 8007d2a:	bf0c      	ite	eq
 8007d2c:	2301      	moveq	r3, #1
 8007d2e:	2300      	movne	r3, #0
 8007d30:	b2db      	uxtb	r3, r3
 8007d32:	e022      	b.n	8007d7a <HAL_TIM_PWM_Start_DMA+0xa6>
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	2b0c      	cmp	r3, #12
 8007d38:	d109      	bne.n	8007d4e <HAL_TIM_PWM_Start_DMA+0x7a>
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d40:	b2db      	uxtb	r3, r3
 8007d42:	2b02      	cmp	r3, #2
 8007d44:	bf0c      	ite	eq
 8007d46:	2301      	moveq	r3, #1
 8007d48:	2300      	movne	r3, #0
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	e015      	b.n	8007d7a <HAL_TIM_PWM_Start_DMA+0xa6>
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	2b10      	cmp	r3, #16
 8007d52:	d109      	bne.n	8007d68 <HAL_TIM_PWM_Start_DMA+0x94>
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007d5a:	b2db      	uxtb	r3, r3
 8007d5c:	2b02      	cmp	r3, #2
 8007d5e:	bf0c      	ite	eq
 8007d60:	2301      	moveq	r3, #1
 8007d62:	2300      	movne	r3, #0
 8007d64:	b2db      	uxtb	r3, r3
 8007d66:	e008      	b.n	8007d7a <HAL_TIM_PWM_Start_DMA+0xa6>
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007d6e:	b2db      	uxtb	r3, r3
 8007d70:	2b02      	cmp	r3, #2
 8007d72:	bf0c      	ite	eq
 8007d74:	2301      	moveq	r3, #1
 8007d76:	2300      	movne	r3, #0
 8007d78:	b2db      	uxtb	r3, r3
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d001      	beq.n	8007d82 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8007d7e:	2302      	movs	r3, #2
 8007d80:	e1b5      	b.n	80080ee <HAL_TIM_PWM_Start_DMA+0x41a>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d109      	bne.n	8007d9c <HAL_TIM_PWM_Start_DMA+0xc8>
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007d8e:	b2db      	uxtb	r3, r3
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	bf0c      	ite	eq
 8007d94:	2301      	moveq	r3, #1
 8007d96:	2300      	movne	r3, #0
 8007d98:	b2db      	uxtb	r3, r3
 8007d9a:	e03c      	b.n	8007e16 <HAL_TIM_PWM_Start_DMA+0x142>
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	2b04      	cmp	r3, #4
 8007da0:	d109      	bne.n	8007db6 <HAL_TIM_PWM_Start_DMA+0xe2>
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007da8:	b2db      	uxtb	r3, r3
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	bf0c      	ite	eq
 8007dae:	2301      	moveq	r3, #1
 8007db0:	2300      	movne	r3, #0
 8007db2:	b2db      	uxtb	r3, r3
 8007db4:	e02f      	b.n	8007e16 <HAL_TIM_PWM_Start_DMA+0x142>
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	2b08      	cmp	r3, #8
 8007dba:	d109      	bne.n	8007dd0 <HAL_TIM_PWM_Start_DMA+0xfc>
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007dc2:	b2db      	uxtb	r3, r3
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	bf0c      	ite	eq
 8007dc8:	2301      	moveq	r3, #1
 8007dca:	2300      	movne	r3, #0
 8007dcc:	b2db      	uxtb	r3, r3
 8007dce:	e022      	b.n	8007e16 <HAL_TIM_PWM_Start_DMA+0x142>
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	2b0c      	cmp	r3, #12
 8007dd4:	d109      	bne.n	8007dea <HAL_TIM_PWM_Start_DMA+0x116>
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ddc:	b2db      	uxtb	r3, r3
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	bf0c      	ite	eq
 8007de2:	2301      	moveq	r3, #1
 8007de4:	2300      	movne	r3, #0
 8007de6:	b2db      	uxtb	r3, r3
 8007de8:	e015      	b.n	8007e16 <HAL_TIM_PWM_Start_DMA+0x142>
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	2b10      	cmp	r3, #16
 8007dee:	d109      	bne.n	8007e04 <HAL_TIM_PWM_Start_DMA+0x130>
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007df6:	b2db      	uxtb	r3, r3
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	bf0c      	ite	eq
 8007dfc:	2301      	moveq	r3, #1
 8007dfe:	2300      	movne	r3, #0
 8007e00:	b2db      	uxtb	r3, r3
 8007e02:	e008      	b.n	8007e16 <HAL_TIM_PWM_Start_DMA+0x142>
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	bf0c      	ite	eq
 8007e10:	2301      	moveq	r3, #1
 8007e12:	2300      	movne	r3, #0
 8007e14:	b2db      	uxtb	r3, r3
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d034      	beq.n	8007e84 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d002      	beq.n	8007e26 <HAL_TIM_PWM_Start_DMA+0x152>
 8007e20:	887b      	ldrh	r3, [r7, #2]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d101      	bne.n	8007e2a <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8007e26:	2301      	movs	r3, #1
 8007e28:	e161      	b.n	80080ee <HAL_TIM_PWM_Start_DMA+0x41a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d104      	bne.n	8007e3a <HAL_TIM_PWM_Start_DMA+0x166>
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2202      	movs	r2, #2
 8007e34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007e38:	e026      	b.n	8007e88 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	2b04      	cmp	r3, #4
 8007e3e:	d104      	bne.n	8007e4a <HAL_TIM_PWM_Start_DMA+0x176>
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2202      	movs	r2, #2
 8007e44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007e48:	e01e      	b.n	8007e88 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	2b08      	cmp	r3, #8
 8007e4e:	d104      	bne.n	8007e5a <HAL_TIM_PWM_Start_DMA+0x186>
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2202      	movs	r2, #2
 8007e54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007e58:	e016      	b.n	8007e88 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	2b0c      	cmp	r3, #12
 8007e5e:	d104      	bne.n	8007e6a <HAL_TIM_PWM_Start_DMA+0x196>
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2202      	movs	r2, #2
 8007e64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007e68:	e00e      	b.n	8007e88 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	2b10      	cmp	r3, #16
 8007e6e:	d104      	bne.n	8007e7a <HAL_TIM_PWM_Start_DMA+0x1a6>
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	2202      	movs	r2, #2
 8007e74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007e78:	e006      	b.n	8007e88 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2202      	movs	r2, #2
 8007e7e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007e82:	e001      	b.n	8007e88 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8007e84:	2301      	movs	r3, #1
 8007e86:	e132      	b.n	80080ee <HAL_TIM_PWM_Start_DMA+0x41a>
  }

  switch (Channel)
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	2b0c      	cmp	r3, #12
 8007e8c:	f200 80ae 	bhi.w	8007fec <HAL_TIM_PWM_Start_DMA+0x318>
 8007e90:	a201      	add	r2, pc, #4	@ (adr r2, 8007e98 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8007e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e96:	bf00      	nop
 8007e98:	08007ecd 	.word	0x08007ecd
 8007e9c:	08007fed 	.word	0x08007fed
 8007ea0:	08007fed 	.word	0x08007fed
 8007ea4:	08007fed 	.word	0x08007fed
 8007ea8:	08007f15 	.word	0x08007f15
 8007eac:	08007fed 	.word	0x08007fed
 8007eb0:	08007fed 	.word	0x08007fed
 8007eb4:	08007fed 	.word	0x08007fed
 8007eb8:	08007f5d 	.word	0x08007f5d
 8007ebc:	08007fed 	.word	0x08007fed
 8007ec0:	08007fed 	.word	0x08007fed
 8007ec4:	08007fed 	.word	0x08007fed
 8007ec8:	08007fa5 	.word	0x08007fa5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ed0:	4a89      	ldr	r2, [pc, #548]	@ (80080f8 <HAL_TIM_PWM_Start_DMA+0x424>)
 8007ed2:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ed8:	4a88      	ldr	r2, [pc, #544]	@ (80080fc <HAL_TIM_PWM_Start_DMA+0x428>)
 8007eda:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ee0:	4a87      	ldr	r2, [pc, #540]	@ (8008100 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8007ee2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8007ee8:	6879      	ldr	r1, [r7, #4]
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	3334      	adds	r3, #52	@ 0x34
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	887b      	ldrh	r3, [r7, #2]
 8007ef4:	f7fc f912 	bl	800411c <HAL_DMA_Start_IT>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d001      	beq.n	8007f02 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007efe:	2301      	movs	r3, #1
 8007f00:	e0f5      	b.n	80080ee <HAL_TIM_PWM_Start_DMA+0x41a>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	68da      	ldr	r2, [r3, #12]
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007f10:	60da      	str	r2, [r3, #12]
      break;
 8007f12:	e06e      	b.n	8007ff2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f18:	4a77      	ldr	r2, [pc, #476]	@ (80080f8 <HAL_TIM_PWM_Start_DMA+0x424>)
 8007f1a:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f20:	4a76      	ldr	r2, [pc, #472]	@ (80080fc <HAL_TIM_PWM_Start_DMA+0x428>)
 8007f22:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f28:	4a75      	ldr	r2, [pc, #468]	@ (8008100 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8007f2a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8007f30:	6879      	ldr	r1, [r7, #4]
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	3338      	adds	r3, #56	@ 0x38
 8007f38:	461a      	mov	r2, r3
 8007f3a:	887b      	ldrh	r3, [r7, #2]
 8007f3c:	f7fc f8ee 	bl	800411c <HAL_DMA_Start_IT>
 8007f40:	4603      	mov	r3, r0
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d001      	beq.n	8007f4a <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007f46:	2301      	movs	r3, #1
 8007f48:	e0d1      	b.n	80080ee <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	68da      	ldr	r2, [r3, #12]
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007f58:	60da      	str	r2, [r3, #12]
      break;
 8007f5a:	e04a      	b.n	8007ff2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f60:	4a65      	ldr	r2, [pc, #404]	@ (80080f8 <HAL_TIM_PWM_Start_DMA+0x424>)
 8007f62:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f68:	4a64      	ldr	r2, [pc, #400]	@ (80080fc <HAL_TIM_PWM_Start_DMA+0x428>)
 8007f6a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f70:	4a63      	ldr	r2, [pc, #396]	@ (8008100 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8007f72:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8007f78:	6879      	ldr	r1, [r7, #4]
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	333c      	adds	r3, #60	@ 0x3c
 8007f80:	461a      	mov	r2, r3
 8007f82:	887b      	ldrh	r3, [r7, #2]
 8007f84:	f7fc f8ca 	bl	800411c <HAL_DMA_Start_IT>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d001      	beq.n	8007f92 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007f8e:	2301      	movs	r3, #1
 8007f90:	e0ad      	b.n	80080ee <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	68da      	ldr	r2, [r3, #12]
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007fa0:	60da      	str	r2, [r3, #12]
      break;
 8007fa2:	e026      	b.n	8007ff2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fa8:	4a53      	ldr	r2, [pc, #332]	@ (80080f8 <HAL_TIM_PWM_Start_DMA+0x424>)
 8007faa:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fb0:	4a52      	ldr	r2, [pc, #328]	@ (80080fc <HAL_TIM_PWM_Start_DMA+0x428>)
 8007fb2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fb8:	4a51      	ldr	r2, [pc, #324]	@ (8008100 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8007fba:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007fc0:	6879      	ldr	r1, [r7, #4]
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	3340      	adds	r3, #64	@ 0x40
 8007fc8:	461a      	mov	r2, r3
 8007fca:	887b      	ldrh	r3, [r7, #2]
 8007fcc:	f7fc f8a6 	bl	800411c <HAL_DMA_Start_IT>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d001      	beq.n	8007fda <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	e089      	b.n	80080ee <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	68da      	ldr	r2, [r3, #12]
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007fe8:	60da      	str	r2, [r3, #12]
      break;
 8007fea:	e002      	b.n	8007ff2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8007fec:	2301      	movs	r3, #1
 8007fee:	75fb      	strb	r3, [r7, #23]
      break;
 8007ff0:	bf00      	nop
  }

  if (status == HAL_OK)
 8007ff2:	7dfb      	ldrb	r3, [r7, #23]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d179      	bne.n	80080ec <HAL_TIM_PWM_Start_DMA+0x418>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	2201      	movs	r2, #1
 8007ffe:	68b9      	ldr	r1, [r7, #8]
 8008000:	4618      	mov	r0, r3
 8008002:	f001 feed 	bl	8009de0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a3e      	ldr	r2, [pc, #248]	@ (8008104 <HAL_TIM_PWM_Start_DMA+0x430>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d018      	beq.n	8008042 <HAL_TIM_PWM_Start_DMA+0x36e>
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a3c      	ldr	r2, [pc, #240]	@ (8008108 <HAL_TIM_PWM_Start_DMA+0x434>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d013      	beq.n	8008042 <HAL_TIM_PWM_Start_DMA+0x36e>
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a3b      	ldr	r2, [pc, #236]	@ (800810c <HAL_TIM_PWM_Start_DMA+0x438>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d00e      	beq.n	8008042 <HAL_TIM_PWM_Start_DMA+0x36e>
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a39      	ldr	r2, [pc, #228]	@ (8008110 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d009      	beq.n	8008042 <HAL_TIM_PWM_Start_DMA+0x36e>
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4a38      	ldr	r2, [pc, #224]	@ (8008114 <HAL_TIM_PWM_Start_DMA+0x440>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d004      	beq.n	8008042 <HAL_TIM_PWM_Start_DMA+0x36e>
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a36      	ldr	r2, [pc, #216]	@ (8008118 <HAL_TIM_PWM_Start_DMA+0x444>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d101      	bne.n	8008046 <HAL_TIM_PWM_Start_DMA+0x372>
 8008042:	2301      	movs	r3, #1
 8008044:	e000      	b.n	8008048 <HAL_TIM_PWM_Start_DMA+0x374>
 8008046:	2300      	movs	r3, #0
 8008048:	2b00      	cmp	r3, #0
 800804a:	d007      	beq.n	800805c <HAL_TIM_PWM_Start_DMA+0x388>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800805a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a28      	ldr	r2, [pc, #160]	@ (8008104 <HAL_TIM_PWM_Start_DMA+0x430>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d022      	beq.n	80080ac <HAL_TIM_PWM_Start_DMA+0x3d8>
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800806e:	d01d      	beq.n	80080ac <HAL_TIM_PWM_Start_DMA+0x3d8>
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4a29      	ldr	r2, [pc, #164]	@ (800811c <HAL_TIM_PWM_Start_DMA+0x448>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d018      	beq.n	80080ac <HAL_TIM_PWM_Start_DMA+0x3d8>
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4a28      	ldr	r2, [pc, #160]	@ (8008120 <HAL_TIM_PWM_Start_DMA+0x44c>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d013      	beq.n	80080ac <HAL_TIM_PWM_Start_DMA+0x3d8>
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4a26      	ldr	r2, [pc, #152]	@ (8008124 <HAL_TIM_PWM_Start_DMA+0x450>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d00e      	beq.n	80080ac <HAL_TIM_PWM_Start_DMA+0x3d8>
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4a1d      	ldr	r2, [pc, #116]	@ (8008108 <HAL_TIM_PWM_Start_DMA+0x434>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d009      	beq.n	80080ac <HAL_TIM_PWM_Start_DMA+0x3d8>
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a1b      	ldr	r2, [pc, #108]	@ (800810c <HAL_TIM_PWM_Start_DMA+0x438>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d004      	beq.n	80080ac <HAL_TIM_PWM_Start_DMA+0x3d8>
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4a1c      	ldr	r2, [pc, #112]	@ (8008118 <HAL_TIM_PWM_Start_DMA+0x444>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d115      	bne.n	80080d8 <HAL_TIM_PWM_Start_DMA+0x404>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	689a      	ldr	r2, [r3, #8]
 80080b2:	4b1d      	ldr	r3, [pc, #116]	@ (8008128 <HAL_TIM_PWM_Start_DMA+0x454>)
 80080b4:	4013      	ands	r3, r2
 80080b6:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	2b06      	cmp	r3, #6
 80080bc:	d015      	beq.n	80080ea <HAL_TIM_PWM_Start_DMA+0x416>
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80080c4:	d011      	beq.n	80080ea <HAL_TIM_PWM_Start_DMA+0x416>
      {
        __HAL_TIM_ENABLE(htim);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	681a      	ldr	r2, [r3, #0]
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f042 0201 	orr.w	r2, r2, #1
 80080d4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080d6:	e008      	b.n	80080ea <HAL_TIM_PWM_Start_DMA+0x416>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	681a      	ldr	r2, [r3, #0]
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f042 0201 	orr.w	r2, r2, #1
 80080e6:	601a      	str	r2, [r3, #0]
 80080e8:	e000      	b.n	80080ec <HAL_TIM_PWM_Start_DMA+0x418>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080ea:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80080ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3718      	adds	r7, #24
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}
 80080f6:	bf00      	nop
 80080f8:	08008fc7 	.word	0x08008fc7
 80080fc:	0800906f 	.word	0x0800906f
 8008100:	08008f35 	.word	0x08008f35
 8008104:	40012c00 	.word	0x40012c00
 8008108:	40013400 	.word	0x40013400
 800810c:	40014000 	.word	0x40014000
 8008110:	40014400 	.word	0x40014400
 8008114:	40014800 	.word	0x40014800
 8008118:	40015000 	.word	0x40015000
 800811c:	40000400 	.word	0x40000400
 8008120:	40000800 	.word	0x40000800
 8008124:	40000c00 	.word	0x40000c00
 8008128:	00010007 	.word	0x00010007

0800812c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b082      	sub	sp, #8
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d101      	bne.n	800813e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800813a:	2301      	movs	r3, #1
 800813c:	e049      	b.n	80081d2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008144:	b2db      	uxtb	r3, r3
 8008146:	2b00      	cmp	r3, #0
 8008148:	d106      	bne.n	8008158 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2200      	movs	r2, #0
 800814e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f000 f841 	bl	80081da <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2202      	movs	r2, #2
 800815c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681a      	ldr	r2, [r3, #0]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	3304      	adds	r3, #4
 8008168:	4619      	mov	r1, r3
 800816a:	4610      	mov	r0, r2
 800816c:	f000 ffb4 	bl	80090d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2201      	movs	r2, #1
 8008174:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2201      	movs	r2, #1
 800817c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2201      	movs	r2, #1
 8008184:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2201      	movs	r2, #1
 800818c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2201      	movs	r2, #1
 8008194:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2201      	movs	r2, #1
 800819c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2201      	movs	r2, #1
 80081a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2201      	movs	r2, #1
 80081ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2201      	movs	r2, #1
 80081b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2201      	movs	r2, #1
 80081bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2201      	movs	r2, #1
 80081c4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2201      	movs	r2, #1
 80081cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80081d0:	2300      	movs	r3, #0
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3708      	adds	r7, #8
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}

080081da <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80081da:	b480      	push	{r7}
 80081dc:	b083      	sub	sp, #12
 80081de:	af00      	add	r7, sp, #0
 80081e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80081e2:	bf00      	nop
 80081e4:	370c      	adds	r7, #12
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr
	...

080081f0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b084      	sub	sp, #16
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80081fa:	2300      	movs	r3, #0
 80081fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d104      	bne.n	800820e <HAL_TIM_IC_Start_IT+0x1e>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800820a:	b2db      	uxtb	r3, r3
 800820c:	e023      	b.n	8008256 <HAL_TIM_IC_Start_IT+0x66>
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	2b04      	cmp	r3, #4
 8008212:	d104      	bne.n	800821e <HAL_TIM_IC_Start_IT+0x2e>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800821a:	b2db      	uxtb	r3, r3
 800821c:	e01b      	b.n	8008256 <HAL_TIM_IC_Start_IT+0x66>
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	2b08      	cmp	r3, #8
 8008222:	d104      	bne.n	800822e <HAL_TIM_IC_Start_IT+0x3e>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800822a:	b2db      	uxtb	r3, r3
 800822c:	e013      	b.n	8008256 <HAL_TIM_IC_Start_IT+0x66>
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	2b0c      	cmp	r3, #12
 8008232:	d104      	bne.n	800823e <HAL_TIM_IC_Start_IT+0x4e>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800823a:	b2db      	uxtb	r3, r3
 800823c:	e00b      	b.n	8008256 <HAL_TIM_IC_Start_IT+0x66>
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	2b10      	cmp	r3, #16
 8008242:	d104      	bne.n	800824e <HAL_TIM_IC_Start_IT+0x5e>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800824a:	b2db      	uxtb	r3, r3
 800824c:	e003      	b.n	8008256 <HAL_TIM_IC_Start_IT+0x66>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008254:	b2db      	uxtb	r3, r3
 8008256:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d104      	bne.n	8008268 <HAL_TIM_IC_Start_IT+0x78>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008264:	b2db      	uxtb	r3, r3
 8008266:	e013      	b.n	8008290 <HAL_TIM_IC_Start_IT+0xa0>
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	2b04      	cmp	r3, #4
 800826c:	d104      	bne.n	8008278 <HAL_TIM_IC_Start_IT+0x88>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008274:	b2db      	uxtb	r3, r3
 8008276:	e00b      	b.n	8008290 <HAL_TIM_IC_Start_IT+0xa0>
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	2b08      	cmp	r3, #8
 800827c:	d104      	bne.n	8008288 <HAL_TIM_IC_Start_IT+0x98>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8008284:	b2db      	uxtb	r3, r3
 8008286:	e003      	b.n	8008290 <HAL_TIM_IC_Start_IT+0xa0>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800828e:	b2db      	uxtb	r3, r3
 8008290:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8008292:	7bbb      	ldrb	r3, [r7, #14]
 8008294:	2b01      	cmp	r3, #1
 8008296:	d102      	bne.n	800829e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8008298:	7b7b      	ldrb	r3, [r7, #13]
 800829a:	2b01      	cmp	r3, #1
 800829c:	d001      	beq.n	80082a2 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800829e:	2301      	movs	r3, #1
 80082a0:	e0e2      	b.n	8008468 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d104      	bne.n	80082b2 <HAL_TIM_IC_Start_IT+0xc2>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2202      	movs	r2, #2
 80082ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80082b0:	e023      	b.n	80082fa <HAL_TIM_IC_Start_IT+0x10a>
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	2b04      	cmp	r3, #4
 80082b6:	d104      	bne.n	80082c2 <HAL_TIM_IC_Start_IT+0xd2>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2202      	movs	r2, #2
 80082bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80082c0:	e01b      	b.n	80082fa <HAL_TIM_IC_Start_IT+0x10a>
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	2b08      	cmp	r3, #8
 80082c6:	d104      	bne.n	80082d2 <HAL_TIM_IC_Start_IT+0xe2>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2202      	movs	r2, #2
 80082cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80082d0:	e013      	b.n	80082fa <HAL_TIM_IC_Start_IT+0x10a>
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	2b0c      	cmp	r3, #12
 80082d6:	d104      	bne.n	80082e2 <HAL_TIM_IC_Start_IT+0xf2>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2202      	movs	r2, #2
 80082dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80082e0:	e00b      	b.n	80082fa <HAL_TIM_IC_Start_IT+0x10a>
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	2b10      	cmp	r3, #16
 80082e6:	d104      	bne.n	80082f2 <HAL_TIM_IC_Start_IT+0x102>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2202      	movs	r2, #2
 80082ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80082f0:	e003      	b.n	80082fa <HAL_TIM_IC_Start_IT+0x10a>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2202      	movs	r2, #2
 80082f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d104      	bne.n	800830a <HAL_TIM_IC_Start_IT+0x11a>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2202      	movs	r2, #2
 8008304:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008308:	e013      	b.n	8008332 <HAL_TIM_IC_Start_IT+0x142>
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	2b04      	cmp	r3, #4
 800830e:	d104      	bne.n	800831a <HAL_TIM_IC_Start_IT+0x12a>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2202      	movs	r2, #2
 8008314:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008318:	e00b      	b.n	8008332 <HAL_TIM_IC_Start_IT+0x142>
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	2b08      	cmp	r3, #8
 800831e:	d104      	bne.n	800832a <HAL_TIM_IC_Start_IT+0x13a>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2202      	movs	r2, #2
 8008324:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008328:	e003      	b.n	8008332 <HAL_TIM_IC_Start_IT+0x142>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2202      	movs	r2, #2
 800832e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	2b0c      	cmp	r3, #12
 8008336:	d841      	bhi.n	80083bc <HAL_TIM_IC_Start_IT+0x1cc>
 8008338:	a201      	add	r2, pc, #4	@ (adr r2, 8008340 <HAL_TIM_IC_Start_IT+0x150>)
 800833a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800833e:	bf00      	nop
 8008340:	08008375 	.word	0x08008375
 8008344:	080083bd 	.word	0x080083bd
 8008348:	080083bd 	.word	0x080083bd
 800834c:	080083bd 	.word	0x080083bd
 8008350:	08008387 	.word	0x08008387
 8008354:	080083bd 	.word	0x080083bd
 8008358:	080083bd 	.word	0x080083bd
 800835c:	080083bd 	.word	0x080083bd
 8008360:	08008399 	.word	0x08008399
 8008364:	080083bd 	.word	0x080083bd
 8008368:	080083bd 	.word	0x080083bd
 800836c:	080083bd 	.word	0x080083bd
 8008370:	080083ab 	.word	0x080083ab
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	68da      	ldr	r2, [r3, #12]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f042 0202 	orr.w	r2, r2, #2
 8008382:	60da      	str	r2, [r3, #12]
      break;
 8008384:	e01d      	b.n	80083c2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	68da      	ldr	r2, [r3, #12]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f042 0204 	orr.w	r2, r2, #4
 8008394:	60da      	str	r2, [r3, #12]
      break;
 8008396:	e014      	b.n	80083c2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	68da      	ldr	r2, [r3, #12]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f042 0208 	orr.w	r2, r2, #8
 80083a6:	60da      	str	r2, [r3, #12]
      break;
 80083a8:	e00b      	b.n	80083c2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	68da      	ldr	r2, [r3, #12]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f042 0210 	orr.w	r2, r2, #16
 80083b8:	60da      	str	r2, [r3, #12]
      break;
 80083ba:	e002      	b.n	80083c2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80083bc:	2301      	movs	r3, #1
 80083be:	73fb      	strb	r3, [r7, #15]
      break;
 80083c0:	bf00      	nop
  }

  if (status == HAL_OK)
 80083c2:	7bfb      	ldrb	r3, [r7, #15]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d14e      	bne.n	8008466 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	2201      	movs	r2, #1
 80083ce:	6839      	ldr	r1, [r7, #0]
 80083d0:	4618      	mov	r0, r3
 80083d2:	f001 fd05 	bl	8009de0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a25      	ldr	r2, [pc, #148]	@ (8008470 <HAL_TIM_IC_Start_IT+0x280>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d022      	beq.n	8008426 <HAL_TIM_IC_Start_IT+0x236>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083e8:	d01d      	beq.n	8008426 <HAL_TIM_IC_Start_IT+0x236>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4a21      	ldr	r2, [pc, #132]	@ (8008474 <HAL_TIM_IC_Start_IT+0x284>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d018      	beq.n	8008426 <HAL_TIM_IC_Start_IT+0x236>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a1f      	ldr	r2, [pc, #124]	@ (8008478 <HAL_TIM_IC_Start_IT+0x288>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d013      	beq.n	8008426 <HAL_TIM_IC_Start_IT+0x236>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4a1e      	ldr	r2, [pc, #120]	@ (800847c <HAL_TIM_IC_Start_IT+0x28c>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d00e      	beq.n	8008426 <HAL_TIM_IC_Start_IT+0x236>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4a1c      	ldr	r2, [pc, #112]	@ (8008480 <HAL_TIM_IC_Start_IT+0x290>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d009      	beq.n	8008426 <HAL_TIM_IC_Start_IT+0x236>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4a1b      	ldr	r2, [pc, #108]	@ (8008484 <HAL_TIM_IC_Start_IT+0x294>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d004      	beq.n	8008426 <HAL_TIM_IC_Start_IT+0x236>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a19      	ldr	r2, [pc, #100]	@ (8008488 <HAL_TIM_IC_Start_IT+0x298>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d115      	bne.n	8008452 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	689a      	ldr	r2, [r3, #8]
 800842c:	4b17      	ldr	r3, [pc, #92]	@ (800848c <HAL_TIM_IC_Start_IT+0x29c>)
 800842e:	4013      	ands	r3, r2
 8008430:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	2b06      	cmp	r3, #6
 8008436:	d015      	beq.n	8008464 <HAL_TIM_IC_Start_IT+0x274>
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800843e:	d011      	beq.n	8008464 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	681a      	ldr	r2, [r3, #0]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f042 0201 	orr.w	r2, r2, #1
 800844e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008450:	e008      	b.n	8008464 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f042 0201 	orr.w	r2, r2, #1
 8008460:	601a      	str	r2, [r3, #0]
 8008462:	e000      	b.n	8008466 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008464:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8008466:	7bfb      	ldrb	r3, [r7, #15]
}
 8008468:	4618      	mov	r0, r3
 800846a:	3710      	adds	r7, #16
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}
 8008470:	40012c00 	.word	0x40012c00
 8008474:	40000400 	.word	0x40000400
 8008478:	40000800 	.word	0x40000800
 800847c:	40000c00 	.word	0x40000c00
 8008480:	40013400 	.word	0x40013400
 8008484:	40014000 	.word	0x40014000
 8008488:	40015000 	.word	0x40015000
 800848c:	00010007 	.word	0x00010007

08008490 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b084      	sub	sp, #16
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	68db      	ldr	r3, [r3, #12]
 800849e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	691b      	ldr	r3, [r3, #16]
 80084a6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	f003 0302 	and.w	r3, r3, #2
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d020      	beq.n	80084f4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	f003 0302 	and.w	r3, r3, #2
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d01b      	beq.n	80084f4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f06f 0202 	mvn.w	r2, #2
 80084c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2201      	movs	r2, #1
 80084ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	699b      	ldr	r3, [r3, #24]
 80084d2:	f003 0303 	and.w	r3, r3, #3
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d003      	beq.n	80084e2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f7f8 fdaa 	bl	8001034 <HAL_TIM_IC_CaptureCallback>
 80084e0:	e005      	b.n	80084ee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 fcf4 	bl	8008ed0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f000 fcfb 	bl	8008ee4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2200      	movs	r2, #0
 80084f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	f003 0304 	and.w	r3, r3, #4
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d020      	beq.n	8008540 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	f003 0304 	and.w	r3, r3, #4
 8008504:	2b00      	cmp	r3, #0
 8008506:	d01b      	beq.n	8008540 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f06f 0204 	mvn.w	r2, #4
 8008510:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2202      	movs	r2, #2
 8008516:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	699b      	ldr	r3, [r3, #24]
 800851e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008522:	2b00      	cmp	r3, #0
 8008524:	d003      	beq.n	800852e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f7f8 fd84 	bl	8001034 <HAL_TIM_IC_CaptureCallback>
 800852c:	e005      	b.n	800853a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f000 fcce 	bl	8008ed0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f000 fcd5 	bl	8008ee4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2200      	movs	r2, #0
 800853e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	f003 0308 	and.w	r3, r3, #8
 8008546:	2b00      	cmp	r3, #0
 8008548:	d020      	beq.n	800858c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	f003 0308 	and.w	r3, r3, #8
 8008550:	2b00      	cmp	r3, #0
 8008552:	d01b      	beq.n	800858c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f06f 0208 	mvn.w	r2, #8
 800855c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2204      	movs	r2, #4
 8008562:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	69db      	ldr	r3, [r3, #28]
 800856a:	f003 0303 	and.w	r3, r3, #3
 800856e:	2b00      	cmp	r3, #0
 8008570:	d003      	beq.n	800857a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f7f8 fd5e 	bl	8001034 <HAL_TIM_IC_CaptureCallback>
 8008578:	e005      	b.n	8008586 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 fca8 	bl	8008ed0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f000 fcaf 	bl	8008ee4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2200      	movs	r2, #0
 800858a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	f003 0310 	and.w	r3, r3, #16
 8008592:	2b00      	cmp	r3, #0
 8008594:	d020      	beq.n	80085d8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	f003 0310 	and.w	r3, r3, #16
 800859c:	2b00      	cmp	r3, #0
 800859e:	d01b      	beq.n	80085d8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f06f 0210 	mvn.w	r2, #16
 80085a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2208      	movs	r2, #8
 80085ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	69db      	ldr	r3, [r3, #28]
 80085b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d003      	beq.n	80085c6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f7f8 fd38 	bl	8001034 <HAL_TIM_IC_CaptureCallback>
 80085c4:	e005      	b.n	80085d2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f000 fc82 	bl	8008ed0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f000 fc89 	bl	8008ee4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2200      	movs	r2, #0
 80085d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	f003 0301 	and.w	r3, r3, #1
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d00c      	beq.n	80085fc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	f003 0301 	and.w	r3, r3, #1
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d007      	beq.n	80085fc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f06f 0201 	mvn.w	r2, #1
 80085f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f000 fc60 	bl	8008ebc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008602:	2b00      	cmp	r3, #0
 8008604:	d104      	bne.n	8008610 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800860c:	2b00      	cmp	r3, #0
 800860e:	d00c      	beq.n	800862a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008616:	2b00      	cmp	r3, #0
 8008618:	d007      	beq.n	800862a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008622:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f001 fd35 	bl	800a094 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008630:	2b00      	cmp	r3, #0
 8008632:	d00c      	beq.n	800864e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800863a:	2b00      	cmp	r3, #0
 800863c:	d007      	beq.n	800864e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008646:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f001 fd2d 	bl	800a0a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008654:	2b00      	cmp	r3, #0
 8008656:	d00c      	beq.n	8008672 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800865e:	2b00      	cmp	r3, #0
 8008660:	d007      	beq.n	8008672 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800866a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f000 fc4d 	bl	8008f0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	f003 0320 	and.w	r3, r3, #32
 8008678:	2b00      	cmp	r3, #0
 800867a:	d00c      	beq.n	8008696 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f003 0320 	and.w	r3, r3, #32
 8008682:	2b00      	cmp	r3, #0
 8008684:	d007      	beq.n	8008696 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f06f 0220 	mvn.w	r2, #32
 800868e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f001 fcf5 	bl	800a080 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800869c:	2b00      	cmp	r3, #0
 800869e:	d00c      	beq.n	80086ba <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d007      	beq.n	80086ba <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80086b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f001 fd01 	bl	800a0bc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d00c      	beq.n	80086de <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d007      	beq.n	80086de <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80086d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f001 fcf9 	bl	800a0d0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d00c      	beq.n	8008702 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d007      	beq.n	8008702 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80086fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f001 fcf1 	bl	800a0e4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008708:	2b00      	cmp	r3, #0
 800870a:	d00c      	beq.n	8008726 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008712:	2b00      	cmp	r3, #0
 8008714:	d007      	beq.n	8008726 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800871e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f001 fce9 	bl	800a0f8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008726:	bf00      	nop
 8008728:	3710      	adds	r7, #16
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}
	...

08008730 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b086      	sub	sp, #24
 8008734:	af00      	add	r7, sp, #0
 8008736:	60f8      	str	r0, [r7, #12]
 8008738:	60b9      	str	r1, [r7, #8]
 800873a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800873c:	2300      	movs	r3, #0
 800873e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008746:	2b01      	cmp	r3, #1
 8008748:	d101      	bne.n	800874e <HAL_TIM_OC_ConfigChannel+0x1e>
 800874a:	2302      	movs	r3, #2
 800874c:	e066      	b.n	800881c <HAL_TIM_OC_ConfigChannel+0xec>
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2201      	movs	r2, #1
 8008752:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2b14      	cmp	r3, #20
 800875a:	d857      	bhi.n	800880c <HAL_TIM_OC_ConfigChannel+0xdc>
 800875c:	a201      	add	r2, pc, #4	@ (adr r2, 8008764 <HAL_TIM_OC_ConfigChannel+0x34>)
 800875e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008762:	bf00      	nop
 8008764:	080087b9 	.word	0x080087b9
 8008768:	0800880d 	.word	0x0800880d
 800876c:	0800880d 	.word	0x0800880d
 8008770:	0800880d 	.word	0x0800880d
 8008774:	080087c7 	.word	0x080087c7
 8008778:	0800880d 	.word	0x0800880d
 800877c:	0800880d 	.word	0x0800880d
 8008780:	0800880d 	.word	0x0800880d
 8008784:	080087d5 	.word	0x080087d5
 8008788:	0800880d 	.word	0x0800880d
 800878c:	0800880d 	.word	0x0800880d
 8008790:	0800880d 	.word	0x0800880d
 8008794:	080087e3 	.word	0x080087e3
 8008798:	0800880d 	.word	0x0800880d
 800879c:	0800880d 	.word	0x0800880d
 80087a0:	0800880d 	.word	0x0800880d
 80087a4:	080087f1 	.word	0x080087f1
 80087a8:	0800880d 	.word	0x0800880d
 80087ac:	0800880d 	.word	0x0800880d
 80087b0:	0800880d 	.word	0x0800880d
 80087b4:	080087ff 	.word	0x080087ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	68b9      	ldr	r1, [r7, #8]
 80087be:	4618      	mov	r0, r3
 80087c0:	f000 fd3e 	bl	8009240 <TIM_OC1_SetConfig>
      break;
 80087c4:	e025      	b.n	8008812 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	68b9      	ldr	r1, [r7, #8]
 80087cc:	4618      	mov	r0, r3
 80087ce:	f000 fdd1 	bl	8009374 <TIM_OC2_SetConfig>
      break;
 80087d2:	e01e      	b.n	8008812 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	68b9      	ldr	r1, [r7, #8]
 80087da:	4618      	mov	r0, r3
 80087dc:	f000 fe5e 	bl	800949c <TIM_OC3_SetConfig>
      break;
 80087e0:	e017      	b.n	8008812 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	68b9      	ldr	r1, [r7, #8]
 80087e8:	4618      	mov	r0, r3
 80087ea:	f000 fee9 	bl	80095c0 <TIM_OC4_SetConfig>
      break;
 80087ee:	e010      	b.n	8008812 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	68b9      	ldr	r1, [r7, #8]
 80087f6:	4618      	mov	r0, r3
 80087f8:	f000 ff76 	bl	80096e8 <TIM_OC5_SetConfig>
      break;
 80087fc:	e009      	b.n	8008812 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	68b9      	ldr	r1, [r7, #8]
 8008804:	4618      	mov	r0, r3
 8008806:	f000 ffd9 	bl	80097bc <TIM_OC6_SetConfig>
      break;
 800880a:	e002      	b.n	8008812 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800880c:	2301      	movs	r3, #1
 800880e:	75fb      	strb	r3, [r7, #23]
      break;
 8008810:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	2200      	movs	r2, #0
 8008816:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800881a:	7dfb      	ldrb	r3, [r7, #23]
}
 800881c:	4618      	mov	r0, r3
 800881e:	3718      	adds	r7, #24
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}

08008824 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b086      	sub	sp, #24
 8008828:	af00      	add	r7, sp, #0
 800882a:	60f8      	str	r0, [r7, #12]
 800882c:	60b9      	str	r1, [r7, #8]
 800882e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008830:	2300      	movs	r3, #0
 8008832:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800883a:	2b01      	cmp	r3, #1
 800883c:	d101      	bne.n	8008842 <HAL_TIM_IC_ConfigChannel+0x1e>
 800883e:	2302      	movs	r3, #2
 8008840:	e088      	b.n	8008954 <HAL_TIM_IC_ConfigChannel+0x130>
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	2201      	movs	r2, #1
 8008846:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d11b      	bne.n	8008888 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8008860:	f001 f8f8 	bl	8009a54 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	699a      	ldr	r2, [r3, #24]
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f022 020c 	bic.w	r2, r2, #12
 8008872:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	6999      	ldr	r1, [r3, #24]
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	689a      	ldr	r2, [r3, #8]
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	430a      	orrs	r2, r1
 8008884:	619a      	str	r2, [r3, #24]
 8008886:	e060      	b.n	800894a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2b04      	cmp	r3, #4
 800888c:	d11c      	bne.n	80088c8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800889e:	f001 f97c 	bl	8009b9a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	699a      	ldr	r2, [r3, #24]
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80088b0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	6999      	ldr	r1, [r3, #24]
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	689b      	ldr	r3, [r3, #8]
 80088bc:	021a      	lsls	r2, r3, #8
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	430a      	orrs	r2, r1
 80088c4:	619a      	str	r2, [r3, #24]
 80088c6:	e040      	b.n	800894a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2b08      	cmp	r3, #8
 80088cc:	d11b      	bne.n	8008906 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80088de:	f001 f9c9 	bl	8009c74 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	69da      	ldr	r2, [r3, #28]
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f022 020c 	bic.w	r2, r2, #12
 80088f0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	69d9      	ldr	r1, [r3, #28]
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	689a      	ldr	r2, [r3, #8]
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	430a      	orrs	r2, r1
 8008902:	61da      	str	r2, [r3, #28]
 8008904:	e021      	b.n	800894a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2b0c      	cmp	r3, #12
 800890a:	d11c      	bne.n	8008946 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800891c:	f001 f9e6 	bl	8009cec <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	69da      	ldr	r2, [r3, #28]
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800892e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	69d9      	ldr	r1, [r3, #28]
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	689b      	ldr	r3, [r3, #8]
 800893a:	021a      	lsls	r2, r3, #8
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	430a      	orrs	r2, r1
 8008942:	61da      	str	r2, [r3, #28]
 8008944:	e001      	b.n	800894a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008946:	2301      	movs	r3, #1
 8008948:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	2200      	movs	r2, #0
 800894e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008952:	7dfb      	ldrb	r3, [r7, #23]
}
 8008954:	4618      	mov	r0, r3
 8008956:	3718      	adds	r7, #24
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}

0800895c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b086      	sub	sp, #24
 8008960:	af00      	add	r7, sp, #0
 8008962:	60f8      	str	r0, [r7, #12]
 8008964:	60b9      	str	r1, [r7, #8]
 8008966:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008968:	2300      	movs	r3, #0
 800896a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008972:	2b01      	cmp	r3, #1
 8008974:	d101      	bne.n	800897a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008976:	2302      	movs	r3, #2
 8008978:	e0ff      	b.n	8008b7a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	2201      	movs	r2, #1
 800897e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2b14      	cmp	r3, #20
 8008986:	f200 80f0 	bhi.w	8008b6a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800898a:	a201      	add	r2, pc, #4	@ (adr r2, 8008990 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800898c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008990:	080089e5 	.word	0x080089e5
 8008994:	08008b6b 	.word	0x08008b6b
 8008998:	08008b6b 	.word	0x08008b6b
 800899c:	08008b6b 	.word	0x08008b6b
 80089a0:	08008a25 	.word	0x08008a25
 80089a4:	08008b6b 	.word	0x08008b6b
 80089a8:	08008b6b 	.word	0x08008b6b
 80089ac:	08008b6b 	.word	0x08008b6b
 80089b0:	08008a67 	.word	0x08008a67
 80089b4:	08008b6b 	.word	0x08008b6b
 80089b8:	08008b6b 	.word	0x08008b6b
 80089bc:	08008b6b 	.word	0x08008b6b
 80089c0:	08008aa7 	.word	0x08008aa7
 80089c4:	08008b6b 	.word	0x08008b6b
 80089c8:	08008b6b 	.word	0x08008b6b
 80089cc:	08008b6b 	.word	0x08008b6b
 80089d0:	08008ae9 	.word	0x08008ae9
 80089d4:	08008b6b 	.word	0x08008b6b
 80089d8:	08008b6b 	.word	0x08008b6b
 80089dc:	08008b6b 	.word	0x08008b6b
 80089e0:	08008b29 	.word	0x08008b29
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	68b9      	ldr	r1, [r7, #8]
 80089ea:	4618      	mov	r0, r3
 80089ec:	f000 fc28 	bl	8009240 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	699a      	ldr	r2, [r3, #24]
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f042 0208 	orr.w	r2, r2, #8
 80089fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	699a      	ldr	r2, [r3, #24]
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f022 0204 	bic.w	r2, r2, #4
 8008a0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	6999      	ldr	r1, [r3, #24]
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	691a      	ldr	r2, [r3, #16]
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	430a      	orrs	r2, r1
 8008a20:	619a      	str	r2, [r3, #24]
      break;
 8008a22:	e0a5      	b.n	8008b70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	68b9      	ldr	r1, [r7, #8]
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f000 fca2 	bl	8009374 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	699a      	ldr	r2, [r3, #24]
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008a3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	699a      	ldr	r2, [r3, #24]
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008a4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	6999      	ldr	r1, [r3, #24]
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	691b      	ldr	r3, [r3, #16]
 8008a5a:	021a      	lsls	r2, r3, #8
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	430a      	orrs	r2, r1
 8008a62:	619a      	str	r2, [r3, #24]
      break;
 8008a64:	e084      	b.n	8008b70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	68b9      	ldr	r1, [r7, #8]
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f000 fd15 	bl	800949c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	69da      	ldr	r2, [r3, #28]
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f042 0208 	orr.w	r2, r2, #8
 8008a80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	69da      	ldr	r2, [r3, #28]
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f022 0204 	bic.w	r2, r2, #4
 8008a90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	69d9      	ldr	r1, [r3, #28]
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	691a      	ldr	r2, [r3, #16]
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	430a      	orrs	r2, r1
 8008aa2:	61da      	str	r2, [r3, #28]
      break;
 8008aa4:	e064      	b.n	8008b70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	68b9      	ldr	r1, [r7, #8]
 8008aac:	4618      	mov	r0, r3
 8008aae:	f000 fd87 	bl	80095c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	69da      	ldr	r2, [r3, #28]
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008ac0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	69da      	ldr	r2, [r3, #28]
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008ad0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	69d9      	ldr	r1, [r3, #28]
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	691b      	ldr	r3, [r3, #16]
 8008adc:	021a      	lsls	r2, r3, #8
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	430a      	orrs	r2, r1
 8008ae4:	61da      	str	r2, [r3, #28]
      break;
 8008ae6:	e043      	b.n	8008b70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	68b9      	ldr	r1, [r7, #8]
 8008aee:	4618      	mov	r0, r3
 8008af0:	f000 fdfa 	bl	80096e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f042 0208 	orr.w	r2, r2, #8
 8008b02:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f022 0204 	bic.w	r2, r2, #4
 8008b12:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	691a      	ldr	r2, [r3, #16]
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	430a      	orrs	r2, r1
 8008b24:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008b26:	e023      	b.n	8008b70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	68b9      	ldr	r1, [r7, #8]
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f000 fe44 	bl	80097bc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008b42:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008b52:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	691b      	ldr	r3, [r3, #16]
 8008b5e:	021a      	lsls	r2, r3, #8
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	430a      	orrs	r2, r1
 8008b66:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008b68:	e002      	b.n	8008b70 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	75fb      	strb	r3, [r7, #23]
      break;
 8008b6e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2200      	movs	r2, #0
 8008b74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008b78:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3718      	adds	r7, #24
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}
 8008b82:	bf00      	nop

08008b84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b084      	sub	sp, #16
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
 8008b8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008b98:	2b01      	cmp	r3, #1
 8008b9a:	d101      	bne.n	8008ba0 <HAL_TIM_ConfigClockSource+0x1c>
 8008b9c:	2302      	movs	r3, #2
 8008b9e:	e0f6      	b.n	8008d8e <HAL_TIM_ConfigClockSource+0x20a>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2202      	movs	r2, #2
 8008bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	689b      	ldr	r3, [r3, #8]
 8008bb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008bbe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008bc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008bca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	68ba      	ldr	r2, [r7, #8]
 8008bd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	4a6f      	ldr	r2, [pc, #444]	@ (8008d98 <HAL_TIM_ConfigClockSource+0x214>)
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	f000 80c1 	beq.w	8008d62 <HAL_TIM_ConfigClockSource+0x1de>
 8008be0:	4a6d      	ldr	r2, [pc, #436]	@ (8008d98 <HAL_TIM_ConfigClockSource+0x214>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	f200 80c6 	bhi.w	8008d74 <HAL_TIM_ConfigClockSource+0x1f0>
 8008be8:	4a6c      	ldr	r2, [pc, #432]	@ (8008d9c <HAL_TIM_ConfigClockSource+0x218>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	f000 80b9 	beq.w	8008d62 <HAL_TIM_ConfigClockSource+0x1de>
 8008bf0:	4a6a      	ldr	r2, [pc, #424]	@ (8008d9c <HAL_TIM_ConfigClockSource+0x218>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	f200 80be 	bhi.w	8008d74 <HAL_TIM_ConfigClockSource+0x1f0>
 8008bf8:	4a69      	ldr	r2, [pc, #420]	@ (8008da0 <HAL_TIM_ConfigClockSource+0x21c>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	f000 80b1 	beq.w	8008d62 <HAL_TIM_ConfigClockSource+0x1de>
 8008c00:	4a67      	ldr	r2, [pc, #412]	@ (8008da0 <HAL_TIM_ConfigClockSource+0x21c>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	f200 80b6 	bhi.w	8008d74 <HAL_TIM_ConfigClockSource+0x1f0>
 8008c08:	4a66      	ldr	r2, [pc, #408]	@ (8008da4 <HAL_TIM_ConfigClockSource+0x220>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	f000 80a9 	beq.w	8008d62 <HAL_TIM_ConfigClockSource+0x1de>
 8008c10:	4a64      	ldr	r2, [pc, #400]	@ (8008da4 <HAL_TIM_ConfigClockSource+0x220>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	f200 80ae 	bhi.w	8008d74 <HAL_TIM_ConfigClockSource+0x1f0>
 8008c18:	4a63      	ldr	r2, [pc, #396]	@ (8008da8 <HAL_TIM_ConfigClockSource+0x224>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	f000 80a1 	beq.w	8008d62 <HAL_TIM_ConfigClockSource+0x1de>
 8008c20:	4a61      	ldr	r2, [pc, #388]	@ (8008da8 <HAL_TIM_ConfigClockSource+0x224>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	f200 80a6 	bhi.w	8008d74 <HAL_TIM_ConfigClockSource+0x1f0>
 8008c28:	4a60      	ldr	r2, [pc, #384]	@ (8008dac <HAL_TIM_ConfigClockSource+0x228>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	f000 8099 	beq.w	8008d62 <HAL_TIM_ConfigClockSource+0x1de>
 8008c30:	4a5e      	ldr	r2, [pc, #376]	@ (8008dac <HAL_TIM_ConfigClockSource+0x228>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	f200 809e 	bhi.w	8008d74 <HAL_TIM_ConfigClockSource+0x1f0>
 8008c38:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008c3c:	f000 8091 	beq.w	8008d62 <HAL_TIM_ConfigClockSource+0x1de>
 8008c40:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008c44:	f200 8096 	bhi.w	8008d74 <HAL_TIM_ConfigClockSource+0x1f0>
 8008c48:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008c4c:	f000 8089 	beq.w	8008d62 <HAL_TIM_ConfigClockSource+0x1de>
 8008c50:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008c54:	f200 808e 	bhi.w	8008d74 <HAL_TIM_ConfigClockSource+0x1f0>
 8008c58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c5c:	d03e      	beq.n	8008cdc <HAL_TIM_ConfigClockSource+0x158>
 8008c5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c62:	f200 8087 	bhi.w	8008d74 <HAL_TIM_ConfigClockSource+0x1f0>
 8008c66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c6a:	f000 8086 	beq.w	8008d7a <HAL_TIM_ConfigClockSource+0x1f6>
 8008c6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c72:	d87f      	bhi.n	8008d74 <HAL_TIM_ConfigClockSource+0x1f0>
 8008c74:	2b70      	cmp	r3, #112	@ 0x70
 8008c76:	d01a      	beq.n	8008cae <HAL_TIM_ConfigClockSource+0x12a>
 8008c78:	2b70      	cmp	r3, #112	@ 0x70
 8008c7a:	d87b      	bhi.n	8008d74 <HAL_TIM_ConfigClockSource+0x1f0>
 8008c7c:	2b60      	cmp	r3, #96	@ 0x60
 8008c7e:	d050      	beq.n	8008d22 <HAL_TIM_ConfigClockSource+0x19e>
 8008c80:	2b60      	cmp	r3, #96	@ 0x60
 8008c82:	d877      	bhi.n	8008d74 <HAL_TIM_ConfigClockSource+0x1f0>
 8008c84:	2b50      	cmp	r3, #80	@ 0x50
 8008c86:	d03c      	beq.n	8008d02 <HAL_TIM_ConfigClockSource+0x17e>
 8008c88:	2b50      	cmp	r3, #80	@ 0x50
 8008c8a:	d873      	bhi.n	8008d74 <HAL_TIM_ConfigClockSource+0x1f0>
 8008c8c:	2b40      	cmp	r3, #64	@ 0x40
 8008c8e:	d058      	beq.n	8008d42 <HAL_TIM_ConfigClockSource+0x1be>
 8008c90:	2b40      	cmp	r3, #64	@ 0x40
 8008c92:	d86f      	bhi.n	8008d74 <HAL_TIM_ConfigClockSource+0x1f0>
 8008c94:	2b30      	cmp	r3, #48	@ 0x30
 8008c96:	d064      	beq.n	8008d62 <HAL_TIM_ConfigClockSource+0x1de>
 8008c98:	2b30      	cmp	r3, #48	@ 0x30
 8008c9a:	d86b      	bhi.n	8008d74 <HAL_TIM_ConfigClockSource+0x1f0>
 8008c9c:	2b20      	cmp	r3, #32
 8008c9e:	d060      	beq.n	8008d62 <HAL_TIM_ConfigClockSource+0x1de>
 8008ca0:	2b20      	cmp	r3, #32
 8008ca2:	d867      	bhi.n	8008d74 <HAL_TIM_ConfigClockSource+0x1f0>
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d05c      	beq.n	8008d62 <HAL_TIM_ConfigClockSource+0x1de>
 8008ca8:	2b10      	cmp	r3, #16
 8008caa:	d05a      	beq.n	8008d62 <HAL_TIM_ConfigClockSource+0x1de>
 8008cac:	e062      	b.n	8008d74 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008cbe:	f001 f86f 	bl	8009da0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	689b      	ldr	r3, [r3, #8]
 8008cc8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008cd0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	68ba      	ldr	r2, [r7, #8]
 8008cd8:	609a      	str	r2, [r3, #8]
      break;
 8008cda:	e04f      	b.n	8008d7c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008cec:	f001 f858 	bl	8009da0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	689a      	ldr	r2, [r3, #8]
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008cfe:	609a      	str	r2, [r3, #8]
      break;
 8008d00:	e03c      	b.n	8008d7c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d0e:	461a      	mov	r2, r3
 8008d10:	f000 ff14 	bl	8009b3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	2150      	movs	r1, #80	@ 0x50
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f001 f823 	bl	8009d66 <TIM_ITRx_SetConfig>
      break;
 8008d20:	e02c      	b.n	8008d7c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008d2e:	461a      	mov	r2, r3
 8008d30:	f000 ff70 	bl	8009c14 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	2160      	movs	r1, #96	@ 0x60
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f001 f813 	bl	8009d66 <TIM_ITRx_SetConfig>
      break;
 8008d40:	e01c      	b.n	8008d7c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d4e:	461a      	mov	r2, r3
 8008d50:	f000 fef4 	bl	8009b3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	2140      	movs	r1, #64	@ 0x40
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f001 f803 	bl	8009d66 <TIM_ITRx_SetConfig>
      break;
 8008d60:	e00c      	b.n	8008d7c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681a      	ldr	r2, [r3, #0]
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4619      	mov	r1, r3
 8008d6c:	4610      	mov	r0, r2
 8008d6e:	f000 fffa 	bl	8009d66 <TIM_ITRx_SetConfig>
      break;
 8008d72:	e003      	b.n	8008d7c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8008d74:	2301      	movs	r3, #1
 8008d76:	73fb      	strb	r3, [r7, #15]
      break;
 8008d78:	e000      	b.n	8008d7c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8008d7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2201      	movs	r2, #1
 8008d80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2200      	movs	r2, #0
 8008d88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3710      	adds	r7, #16
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}
 8008d96:	bf00      	nop
 8008d98:	00100070 	.word	0x00100070
 8008d9c:	00100060 	.word	0x00100060
 8008da0:	00100050 	.word	0x00100050
 8008da4:	00100040 	.word	0x00100040
 8008da8:	00100030 	.word	0x00100030
 8008dac:	00100020 	.word	0x00100020

08008db0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b082      	sub	sp, #8
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008dc0:	2b01      	cmp	r3, #1
 8008dc2:	d101      	bne.n	8008dc8 <HAL_TIM_SlaveConfigSynchro+0x18>
 8008dc4:	2302      	movs	r3, #2
 8008dc6:	e031      	b.n	8008e2c <HAL_TIM_SlaveConfigSynchro+0x7c>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2201      	movs	r2, #1
 8008dcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2202      	movs	r2, #2
 8008dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8008dd8:	6839      	ldr	r1, [r7, #0]
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f000 fd5a 	bl	8009894 <TIM_SlaveTimer_SetConfig>
 8008de0:	4603      	mov	r3, r0
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d009      	beq.n	8008dfa <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2201      	movs	r2, #1
 8008dea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2200      	movs	r2, #0
 8008df2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8008df6:	2301      	movs	r3, #1
 8008df8:	e018      	b.n	8008e2c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	68da      	ldr	r2, [r3, #12]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008e08:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	68da      	ldr	r2, [r3, #12]
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008e18:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2201      	movs	r2, #1
 8008e1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2200      	movs	r2, #0
 8008e26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008e2a:	2300      	movs	r3, #0
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3708      	adds	r7, #8
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}

08008e34 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b085      	sub	sp, #20
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	2b0c      	cmp	r3, #12
 8008e46:	d831      	bhi.n	8008eac <HAL_TIM_ReadCapturedValue+0x78>
 8008e48:	a201      	add	r2, pc, #4	@ (adr r2, 8008e50 <HAL_TIM_ReadCapturedValue+0x1c>)
 8008e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e4e:	bf00      	nop
 8008e50:	08008e85 	.word	0x08008e85
 8008e54:	08008ead 	.word	0x08008ead
 8008e58:	08008ead 	.word	0x08008ead
 8008e5c:	08008ead 	.word	0x08008ead
 8008e60:	08008e8f 	.word	0x08008e8f
 8008e64:	08008ead 	.word	0x08008ead
 8008e68:	08008ead 	.word	0x08008ead
 8008e6c:	08008ead 	.word	0x08008ead
 8008e70:	08008e99 	.word	0x08008e99
 8008e74:	08008ead 	.word	0x08008ead
 8008e78:	08008ead 	.word	0x08008ead
 8008e7c:	08008ead 	.word	0x08008ead
 8008e80:	08008ea3 	.word	0x08008ea3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e8a:	60fb      	str	r3, [r7, #12]

      break;
 8008e8c:	e00f      	b.n	8008eae <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e94:	60fb      	str	r3, [r7, #12]

      break;
 8008e96:	e00a      	b.n	8008eae <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e9e:	60fb      	str	r3, [r7, #12]

      break;
 8008ea0:	e005      	b.n	8008eae <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ea8:	60fb      	str	r3, [r7, #12]

      break;
 8008eaa:	e000      	b.n	8008eae <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8008eac:	bf00      	nop
  }

  return tmpreg;
 8008eae:	68fb      	ldr	r3, [r7, #12]
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3714      	adds	r7, #20
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eba:	4770      	bx	lr

08008ebc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b083      	sub	sp, #12
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008ec4:	bf00      	nop
 8008ec6:	370c      	adds	r7, #12
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ece:	4770      	bx	lr

08008ed0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	b083      	sub	sp, #12
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008ed8:	bf00      	nop
 8008eda:	370c      	adds	r7, #12
 8008edc:	46bd      	mov	sp, r7
 8008ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee2:	4770      	bx	lr

08008ee4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b083      	sub	sp, #12
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008eec:	bf00      	nop
 8008eee:	370c      	adds	r7, #12
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef6:	4770      	bx	lr

08008ef8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b083      	sub	sp, #12
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008f00:	bf00      	nop
 8008f02:	370c      	adds	r7, #12
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr

08008f0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b083      	sub	sp, #12
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008f14:	bf00      	nop
 8008f16:	370c      	adds	r7, #12
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1e:	4770      	bx	lr

08008f20 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b083      	sub	sp, #12
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008f28:	bf00      	nop
 8008f2a:	370c      	adds	r7, #12
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f32:	4770      	bx	lr

08008f34 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b084      	sub	sp, #16
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f40:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f46:	687a      	ldr	r2, [r7, #4]
 8008f48:	429a      	cmp	r2, r3
 8008f4a:	d107      	bne.n	8008f5c <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	2201      	movs	r2, #1
 8008f50:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	2201      	movs	r2, #1
 8008f56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008f5a:	e02a      	b.n	8008fb2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f60:	687a      	ldr	r2, [r7, #4]
 8008f62:	429a      	cmp	r2, r3
 8008f64:	d107      	bne.n	8008f76 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	2202      	movs	r2, #2
 8008f6a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	2201      	movs	r2, #1
 8008f70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008f74:	e01d      	b.n	8008fb2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f7a:	687a      	ldr	r2, [r7, #4]
 8008f7c:	429a      	cmp	r2, r3
 8008f7e:	d107      	bne.n	8008f90 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	2204      	movs	r2, #4
 8008f84:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	2201      	movs	r2, #1
 8008f8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008f8e:	e010      	b.n	8008fb2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f94:	687a      	ldr	r2, [r7, #4]
 8008f96:	429a      	cmp	r2, r3
 8008f98:	d107      	bne.n	8008faa <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	2208      	movs	r2, #8
 8008f9e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008fa8:	e003      	b.n	8008fb2 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	2201      	movs	r2, #1
 8008fae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8008fb2:	68f8      	ldr	r0, [r7, #12]
 8008fb4:	f7ff ffb4 	bl	8008f20 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	771a      	strb	r2, [r3, #28]
}
 8008fbe:	bf00      	nop
 8008fc0:	3710      	adds	r7, #16
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}

08008fc6 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8008fc6:	b580      	push	{r7, lr}
 8008fc8:	b084      	sub	sp, #16
 8008fca:	af00      	add	r7, sp, #0
 8008fcc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fd2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fd8:	687a      	ldr	r2, [r7, #4]
 8008fda:	429a      	cmp	r2, r3
 8008fdc:	d10b      	bne.n	8008ff6 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	2201      	movs	r2, #1
 8008fe2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	69db      	ldr	r3, [r3, #28]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d136      	bne.n	800905a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	2201      	movs	r2, #1
 8008ff0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008ff4:	e031      	b.n	800905a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ffa:	687a      	ldr	r2, [r7, #4]
 8008ffc:	429a      	cmp	r2, r3
 8008ffe:	d10b      	bne.n	8009018 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2202      	movs	r2, #2
 8009004:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	69db      	ldr	r3, [r3, #28]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d125      	bne.n	800905a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	2201      	movs	r2, #1
 8009012:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009016:	e020      	b.n	800905a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800901c:	687a      	ldr	r2, [r7, #4]
 800901e:	429a      	cmp	r2, r3
 8009020:	d10b      	bne.n	800903a <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	2204      	movs	r2, #4
 8009026:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	69db      	ldr	r3, [r3, #28]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d114      	bne.n	800905a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	2201      	movs	r2, #1
 8009034:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009038:	e00f      	b.n	800905a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800903e:	687a      	ldr	r2, [r7, #4]
 8009040:	429a      	cmp	r2, r3
 8009042:	d10a      	bne.n	800905a <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	2208      	movs	r2, #8
 8009048:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	69db      	ldr	r3, [r3, #28]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d103      	bne.n	800905a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	2201      	movs	r2, #1
 8009056:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800905a:	68f8      	ldr	r0, [r7, #12]
 800905c:	f7ff ff42 	bl	8008ee4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	2200      	movs	r2, #0
 8009064:	771a      	strb	r2, [r3, #28]
}
 8009066:	bf00      	nop
 8009068:	3710      	adds	r7, #16
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}

0800906e <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800906e:	b580      	push	{r7, lr}
 8009070:	b084      	sub	sp, #16
 8009072:	af00      	add	r7, sp, #0
 8009074:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800907a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009080:	687a      	ldr	r2, [r7, #4]
 8009082:	429a      	cmp	r2, r3
 8009084:	d103      	bne.n	800908e <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	2201      	movs	r2, #1
 800908a:	771a      	strb	r2, [r3, #28]
 800908c:	e019      	b.n	80090c2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009092:	687a      	ldr	r2, [r7, #4]
 8009094:	429a      	cmp	r2, r3
 8009096:	d103      	bne.n	80090a0 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	2202      	movs	r2, #2
 800909c:	771a      	strb	r2, [r3, #28]
 800909e:	e010      	b.n	80090c2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090a4:	687a      	ldr	r2, [r7, #4]
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d103      	bne.n	80090b2 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	2204      	movs	r2, #4
 80090ae:	771a      	strb	r2, [r3, #28]
 80090b0:	e007      	b.n	80090c2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090b6:	687a      	ldr	r2, [r7, #4]
 80090b8:	429a      	cmp	r2, r3
 80090ba:	d102      	bne.n	80090c2 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	2208      	movs	r2, #8
 80090c0:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80090c2:	68f8      	ldr	r0, [r7, #12]
 80090c4:	f7ff ff18 	bl	8008ef8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	2200      	movs	r2, #0
 80090cc:	771a      	strb	r2, [r3, #28]
}
 80090ce:	bf00      	nop
 80090d0:	3710      	adds	r7, #16
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}
	...

080090d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80090d8:	b480      	push	{r7}
 80090da:	b085      	sub	sp, #20
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
 80090e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	4a4c      	ldr	r2, [pc, #304]	@ (800921c <TIM_Base_SetConfig+0x144>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d017      	beq.n	8009120 <TIM_Base_SetConfig+0x48>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090f6:	d013      	beq.n	8009120 <TIM_Base_SetConfig+0x48>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	4a49      	ldr	r2, [pc, #292]	@ (8009220 <TIM_Base_SetConfig+0x148>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d00f      	beq.n	8009120 <TIM_Base_SetConfig+0x48>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	4a48      	ldr	r2, [pc, #288]	@ (8009224 <TIM_Base_SetConfig+0x14c>)
 8009104:	4293      	cmp	r3, r2
 8009106:	d00b      	beq.n	8009120 <TIM_Base_SetConfig+0x48>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	4a47      	ldr	r2, [pc, #284]	@ (8009228 <TIM_Base_SetConfig+0x150>)
 800910c:	4293      	cmp	r3, r2
 800910e:	d007      	beq.n	8009120 <TIM_Base_SetConfig+0x48>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	4a46      	ldr	r2, [pc, #280]	@ (800922c <TIM_Base_SetConfig+0x154>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d003      	beq.n	8009120 <TIM_Base_SetConfig+0x48>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	4a45      	ldr	r2, [pc, #276]	@ (8009230 <TIM_Base_SetConfig+0x158>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d108      	bne.n	8009132 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009126:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	685b      	ldr	r3, [r3, #4]
 800912c:	68fa      	ldr	r2, [r7, #12]
 800912e:	4313      	orrs	r3, r2
 8009130:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	4a39      	ldr	r2, [pc, #228]	@ (800921c <TIM_Base_SetConfig+0x144>)
 8009136:	4293      	cmp	r3, r2
 8009138:	d023      	beq.n	8009182 <TIM_Base_SetConfig+0xaa>
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009140:	d01f      	beq.n	8009182 <TIM_Base_SetConfig+0xaa>
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	4a36      	ldr	r2, [pc, #216]	@ (8009220 <TIM_Base_SetConfig+0x148>)
 8009146:	4293      	cmp	r3, r2
 8009148:	d01b      	beq.n	8009182 <TIM_Base_SetConfig+0xaa>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	4a35      	ldr	r2, [pc, #212]	@ (8009224 <TIM_Base_SetConfig+0x14c>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d017      	beq.n	8009182 <TIM_Base_SetConfig+0xaa>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	4a34      	ldr	r2, [pc, #208]	@ (8009228 <TIM_Base_SetConfig+0x150>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d013      	beq.n	8009182 <TIM_Base_SetConfig+0xaa>
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	4a33      	ldr	r2, [pc, #204]	@ (800922c <TIM_Base_SetConfig+0x154>)
 800915e:	4293      	cmp	r3, r2
 8009160:	d00f      	beq.n	8009182 <TIM_Base_SetConfig+0xaa>
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	4a33      	ldr	r2, [pc, #204]	@ (8009234 <TIM_Base_SetConfig+0x15c>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d00b      	beq.n	8009182 <TIM_Base_SetConfig+0xaa>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	4a32      	ldr	r2, [pc, #200]	@ (8009238 <TIM_Base_SetConfig+0x160>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d007      	beq.n	8009182 <TIM_Base_SetConfig+0xaa>
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	4a31      	ldr	r2, [pc, #196]	@ (800923c <TIM_Base_SetConfig+0x164>)
 8009176:	4293      	cmp	r3, r2
 8009178:	d003      	beq.n	8009182 <TIM_Base_SetConfig+0xaa>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	4a2c      	ldr	r2, [pc, #176]	@ (8009230 <TIM_Base_SetConfig+0x158>)
 800917e:	4293      	cmp	r3, r2
 8009180:	d108      	bne.n	8009194 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009188:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	68db      	ldr	r3, [r3, #12]
 800918e:	68fa      	ldr	r2, [r7, #12]
 8009190:	4313      	orrs	r3, r2
 8009192:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	695b      	ldr	r3, [r3, #20]
 800919e:	4313      	orrs	r3, r2
 80091a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	68fa      	ldr	r2, [r7, #12]
 80091a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	689a      	ldr	r2, [r3, #8]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	681a      	ldr	r2, [r3, #0]
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	4a18      	ldr	r2, [pc, #96]	@ (800921c <TIM_Base_SetConfig+0x144>)
 80091bc:	4293      	cmp	r3, r2
 80091be:	d013      	beq.n	80091e8 <TIM_Base_SetConfig+0x110>
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	4a1a      	ldr	r2, [pc, #104]	@ (800922c <TIM_Base_SetConfig+0x154>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d00f      	beq.n	80091e8 <TIM_Base_SetConfig+0x110>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	4a1a      	ldr	r2, [pc, #104]	@ (8009234 <TIM_Base_SetConfig+0x15c>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d00b      	beq.n	80091e8 <TIM_Base_SetConfig+0x110>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	4a19      	ldr	r2, [pc, #100]	@ (8009238 <TIM_Base_SetConfig+0x160>)
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d007      	beq.n	80091e8 <TIM_Base_SetConfig+0x110>
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	4a18      	ldr	r2, [pc, #96]	@ (800923c <TIM_Base_SetConfig+0x164>)
 80091dc:	4293      	cmp	r3, r2
 80091de:	d003      	beq.n	80091e8 <TIM_Base_SetConfig+0x110>
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	4a13      	ldr	r2, [pc, #76]	@ (8009230 <TIM_Base_SetConfig+0x158>)
 80091e4:	4293      	cmp	r3, r2
 80091e6:	d103      	bne.n	80091f0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	691a      	ldr	r2, [r3, #16]
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2201      	movs	r2, #1
 80091f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	691b      	ldr	r3, [r3, #16]
 80091fa:	f003 0301 	and.w	r3, r3, #1
 80091fe:	2b01      	cmp	r3, #1
 8009200:	d105      	bne.n	800920e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	691b      	ldr	r3, [r3, #16]
 8009206:	f023 0201 	bic.w	r2, r3, #1
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	611a      	str	r2, [r3, #16]
  }
}
 800920e:	bf00      	nop
 8009210:	3714      	adds	r7, #20
 8009212:	46bd      	mov	sp, r7
 8009214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009218:	4770      	bx	lr
 800921a:	bf00      	nop
 800921c:	40012c00 	.word	0x40012c00
 8009220:	40000400 	.word	0x40000400
 8009224:	40000800 	.word	0x40000800
 8009228:	40000c00 	.word	0x40000c00
 800922c:	40013400 	.word	0x40013400
 8009230:	40015000 	.word	0x40015000
 8009234:	40014000 	.word	0x40014000
 8009238:	40014400 	.word	0x40014400
 800923c:	40014800 	.word	0x40014800

08009240 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009240:	b480      	push	{r7}
 8009242:	b087      	sub	sp, #28
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
 8009248:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6a1b      	ldr	r3, [r3, #32]
 800924e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6a1b      	ldr	r3, [r3, #32]
 8009254:	f023 0201 	bic.w	r2, r3, #1
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	685b      	ldr	r3, [r3, #4]
 8009260:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	699b      	ldr	r3, [r3, #24]
 8009266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800926e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009272:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	f023 0303 	bic.w	r3, r3, #3
 800927a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	68fa      	ldr	r2, [r7, #12]
 8009282:	4313      	orrs	r3, r2
 8009284:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	f023 0302 	bic.w	r3, r3, #2
 800928c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	689b      	ldr	r3, [r3, #8]
 8009292:	697a      	ldr	r2, [r7, #20]
 8009294:	4313      	orrs	r3, r2
 8009296:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	4a30      	ldr	r2, [pc, #192]	@ (800935c <TIM_OC1_SetConfig+0x11c>)
 800929c:	4293      	cmp	r3, r2
 800929e:	d013      	beq.n	80092c8 <TIM_OC1_SetConfig+0x88>
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	4a2f      	ldr	r2, [pc, #188]	@ (8009360 <TIM_OC1_SetConfig+0x120>)
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d00f      	beq.n	80092c8 <TIM_OC1_SetConfig+0x88>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	4a2e      	ldr	r2, [pc, #184]	@ (8009364 <TIM_OC1_SetConfig+0x124>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d00b      	beq.n	80092c8 <TIM_OC1_SetConfig+0x88>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	4a2d      	ldr	r2, [pc, #180]	@ (8009368 <TIM_OC1_SetConfig+0x128>)
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d007      	beq.n	80092c8 <TIM_OC1_SetConfig+0x88>
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	4a2c      	ldr	r2, [pc, #176]	@ (800936c <TIM_OC1_SetConfig+0x12c>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d003      	beq.n	80092c8 <TIM_OC1_SetConfig+0x88>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	4a2b      	ldr	r2, [pc, #172]	@ (8009370 <TIM_OC1_SetConfig+0x130>)
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d10c      	bne.n	80092e2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	f023 0308 	bic.w	r3, r3, #8
 80092ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	68db      	ldr	r3, [r3, #12]
 80092d4:	697a      	ldr	r2, [r7, #20]
 80092d6:	4313      	orrs	r3, r2
 80092d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	f023 0304 	bic.w	r3, r3, #4
 80092e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	4a1d      	ldr	r2, [pc, #116]	@ (800935c <TIM_OC1_SetConfig+0x11c>)
 80092e6:	4293      	cmp	r3, r2
 80092e8:	d013      	beq.n	8009312 <TIM_OC1_SetConfig+0xd2>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	4a1c      	ldr	r2, [pc, #112]	@ (8009360 <TIM_OC1_SetConfig+0x120>)
 80092ee:	4293      	cmp	r3, r2
 80092f0:	d00f      	beq.n	8009312 <TIM_OC1_SetConfig+0xd2>
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	4a1b      	ldr	r2, [pc, #108]	@ (8009364 <TIM_OC1_SetConfig+0x124>)
 80092f6:	4293      	cmp	r3, r2
 80092f8:	d00b      	beq.n	8009312 <TIM_OC1_SetConfig+0xd2>
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	4a1a      	ldr	r2, [pc, #104]	@ (8009368 <TIM_OC1_SetConfig+0x128>)
 80092fe:	4293      	cmp	r3, r2
 8009300:	d007      	beq.n	8009312 <TIM_OC1_SetConfig+0xd2>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	4a19      	ldr	r2, [pc, #100]	@ (800936c <TIM_OC1_SetConfig+0x12c>)
 8009306:	4293      	cmp	r3, r2
 8009308:	d003      	beq.n	8009312 <TIM_OC1_SetConfig+0xd2>
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	4a18      	ldr	r2, [pc, #96]	@ (8009370 <TIM_OC1_SetConfig+0x130>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d111      	bne.n	8009336 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009318:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800931a:	693b      	ldr	r3, [r7, #16]
 800931c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009320:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	695b      	ldr	r3, [r3, #20]
 8009326:	693a      	ldr	r2, [r7, #16]
 8009328:	4313      	orrs	r3, r2
 800932a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	699b      	ldr	r3, [r3, #24]
 8009330:	693a      	ldr	r2, [r7, #16]
 8009332:	4313      	orrs	r3, r2
 8009334:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	693a      	ldr	r2, [r7, #16]
 800933a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	68fa      	ldr	r2, [r7, #12]
 8009340:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	685a      	ldr	r2, [r3, #4]
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	697a      	ldr	r2, [r7, #20]
 800934e:	621a      	str	r2, [r3, #32]
}
 8009350:	bf00      	nop
 8009352:	371c      	adds	r7, #28
 8009354:	46bd      	mov	sp, r7
 8009356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935a:	4770      	bx	lr
 800935c:	40012c00 	.word	0x40012c00
 8009360:	40013400 	.word	0x40013400
 8009364:	40014000 	.word	0x40014000
 8009368:	40014400 	.word	0x40014400
 800936c:	40014800 	.word	0x40014800
 8009370:	40015000 	.word	0x40015000

08009374 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009374:	b480      	push	{r7}
 8009376:	b087      	sub	sp, #28
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
 800937c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6a1b      	ldr	r3, [r3, #32]
 8009382:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6a1b      	ldr	r3, [r3, #32]
 8009388:	f023 0210 	bic.w	r2, r3, #16
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	685b      	ldr	r3, [r3, #4]
 8009394:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	699b      	ldr	r3, [r3, #24]
 800939a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80093a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80093a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80093ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	021b      	lsls	r3, r3, #8
 80093b6:	68fa      	ldr	r2, [r7, #12]
 80093b8:	4313      	orrs	r3, r2
 80093ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	f023 0320 	bic.w	r3, r3, #32
 80093c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	689b      	ldr	r3, [r3, #8]
 80093c8:	011b      	lsls	r3, r3, #4
 80093ca:	697a      	ldr	r2, [r7, #20]
 80093cc:	4313      	orrs	r3, r2
 80093ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	4a2c      	ldr	r2, [pc, #176]	@ (8009484 <TIM_OC2_SetConfig+0x110>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d007      	beq.n	80093e8 <TIM_OC2_SetConfig+0x74>
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	4a2b      	ldr	r2, [pc, #172]	@ (8009488 <TIM_OC2_SetConfig+0x114>)
 80093dc:	4293      	cmp	r3, r2
 80093de:	d003      	beq.n	80093e8 <TIM_OC2_SetConfig+0x74>
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	4a2a      	ldr	r2, [pc, #168]	@ (800948c <TIM_OC2_SetConfig+0x118>)
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d10d      	bne.n	8009404 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80093ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	68db      	ldr	r3, [r3, #12]
 80093f4:	011b      	lsls	r3, r3, #4
 80093f6:	697a      	ldr	r2, [r7, #20]
 80093f8:	4313      	orrs	r3, r2
 80093fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009402:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	4a1f      	ldr	r2, [pc, #124]	@ (8009484 <TIM_OC2_SetConfig+0x110>)
 8009408:	4293      	cmp	r3, r2
 800940a:	d013      	beq.n	8009434 <TIM_OC2_SetConfig+0xc0>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	4a1e      	ldr	r2, [pc, #120]	@ (8009488 <TIM_OC2_SetConfig+0x114>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d00f      	beq.n	8009434 <TIM_OC2_SetConfig+0xc0>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	4a1e      	ldr	r2, [pc, #120]	@ (8009490 <TIM_OC2_SetConfig+0x11c>)
 8009418:	4293      	cmp	r3, r2
 800941a:	d00b      	beq.n	8009434 <TIM_OC2_SetConfig+0xc0>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	4a1d      	ldr	r2, [pc, #116]	@ (8009494 <TIM_OC2_SetConfig+0x120>)
 8009420:	4293      	cmp	r3, r2
 8009422:	d007      	beq.n	8009434 <TIM_OC2_SetConfig+0xc0>
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	4a1c      	ldr	r2, [pc, #112]	@ (8009498 <TIM_OC2_SetConfig+0x124>)
 8009428:	4293      	cmp	r3, r2
 800942a:	d003      	beq.n	8009434 <TIM_OC2_SetConfig+0xc0>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	4a17      	ldr	r2, [pc, #92]	@ (800948c <TIM_OC2_SetConfig+0x118>)
 8009430:	4293      	cmp	r3, r2
 8009432:	d113      	bne.n	800945c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800943a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800943c:	693b      	ldr	r3, [r7, #16]
 800943e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009442:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	695b      	ldr	r3, [r3, #20]
 8009448:	009b      	lsls	r3, r3, #2
 800944a:	693a      	ldr	r2, [r7, #16]
 800944c:	4313      	orrs	r3, r2
 800944e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	699b      	ldr	r3, [r3, #24]
 8009454:	009b      	lsls	r3, r3, #2
 8009456:	693a      	ldr	r2, [r7, #16]
 8009458:	4313      	orrs	r3, r2
 800945a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	693a      	ldr	r2, [r7, #16]
 8009460:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	68fa      	ldr	r2, [r7, #12]
 8009466:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	685a      	ldr	r2, [r3, #4]
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	697a      	ldr	r2, [r7, #20]
 8009474:	621a      	str	r2, [r3, #32]
}
 8009476:	bf00      	nop
 8009478:	371c      	adds	r7, #28
 800947a:	46bd      	mov	sp, r7
 800947c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009480:	4770      	bx	lr
 8009482:	bf00      	nop
 8009484:	40012c00 	.word	0x40012c00
 8009488:	40013400 	.word	0x40013400
 800948c:	40015000 	.word	0x40015000
 8009490:	40014000 	.word	0x40014000
 8009494:	40014400 	.word	0x40014400
 8009498:	40014800 	.word	0x40014800

0800949c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800949c:	b480      	push	{r7}
 800949e:	b087      	sub	sp, #28
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
 80094a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6a1b      	ldr	r3, [r3, #32]
 80094aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6a1b      	ldr	r3, [r3, #32]
 80094b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	685b      	ldr	r3, [r3, #4]
 80094bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	69db      	ldr	r3, [r3, #28]
 80094c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80094ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80094ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	f023 0303 	bic.w	r3, r3, #3
 80094d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	68fa      	ldr	r2, [r7, #12]
 80094de:	4313      	orrs	r3, r2
 80094e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80094e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	689b      	ldr	r3, [r3, #8]
 80094ee:	021b      	lsls	r3, r3, #8
 80094f0:	697a      	ldr	r2, [r7, #20]
 80094f2:	4313      	orrs	r3, r2
 80094f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	4a2b      	ldr	r2, [pc, #172]	@ (80095a8 <TIM_OC3_SetConfig+0x10c>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d007      	beq.n	800950e <TIM_OC3_SetConfig+0x72>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	4a2a      	ldr	r2, [pc, #168]	@ (80095ac <TIM_OC3_SetConfig+0x110>)
 8009502:	4293      	cmp	r3, r2
 8009504:	d003      	beq.n	800950e <TIM_OC3_SetConfig+0x72>
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	4a29      	ldr	r2, [pc, #164]	@ (80095b0 <TIM_OC3_SetConfig+0x114>)
 800950a:	4293      	cmp	r3, r2
 800950c:	d10d      	bne.n	800952a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800950e:	697b      	ldr	r3, [r7, #20]
 8009510:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009514:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	68db      	ldr	r3, [r3, #12]
 800951a:	021b      	lsls	r3, r3, #8
 800951c:	697a      	ldr	r2, [r7, #20]
 800951e:	4313      	orrs	r3, r2
 8009520:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009528:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	4a1e      	ldr	r2, [pc, #120]	@ (80095a8 <TIM_OC3_SetConfig+0x10c>)
 800952e:	4293      	cmp	r3, r2
 8009530:	d013      	beq.n	800955a <TIM_OC3_SetConfig+0xbe>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	4a1d      	ldr	r2, [pc, #116]	@ (80095ac <TIM_OC3_SetConfig+0x110>)
 8009536:	4293      	cmp	r3, r2
 8009538:	d00f      	beq.n	800955a <TIM_OC3_SetConfig+0xbe>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	4a1d      	ldr	r2, [pc, #116]	@ (80095b4 <TIM_OC3_SetConfig+0x118>)
 800953e:	4293      	cmp	r3, r2
 8009540:	d00b      	beq.n	800955a <TIM_OC3_SetConfig+0xbe>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	4a1c      	ldr	r2, [pc, #112]	@ (80095b8 <TIM_OC3_SetConfig+0x11c>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d007      	beq.n	800955a <TIM_OC3_SetConfig+0xbe>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	4a1b      	ldr	r2, [pc, #108]	@ (80095bc <TIM_OC3_SetConfig+0x120>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d003      	beq.n	800955a <TIM_OC3_SetConfig+0xbe>
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	4a16      	ldr	r2, [pc, #88]	@ (80095b0 <TIM_OC3_SetConfig+0x114>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d113      	bne.n	8009582 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009560:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009562:	693b      	ldr	r3, [r7, #16]
 8009564:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009568:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	695b      	ldr	r3, [r3, #20]
 800956e:	011b      	lsls	r3, r3, #4
 8009570:	693a      	ldr	r2, [r7, #16]
 8009572:	4313      	orrs	r3, r2
 8009574:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	699b      	ldr	r3, [r3, #24]
 800957a:	011b      	lsls	r3, r3, #4
 800957c:	693a      	ldr	r2, [r7, #16]
 800957e:	4313      	orrs	r3, r2
 8009580:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	693a      	ldr	r2, [r7, #16]
 8009586:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	68fa      	ldr	r2, [r7, #12]
 800958c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	685a      	ldr	r2, [r3, #4]
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	697a      	ldr	r2, [r7, #20]
 800959a:	621a      	str	r2, [r3, #32]
}
 800959c:	bf00      	nop
 800959e:	371c      	adds	r7, #28
 80095a0:	46bd      	mov	sp, r7
 80095a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a6:	4770      	bx	lr
 80095a8:	40012c00 	.word	0x40012c00
 80095ac:	40013400 	.word	0x40013400
 80095b0:	40015000 	.word	0x40015000
 80095b4:	40014000 	.word	0x40014000
 80095b8:	40014400 	.word	0x40014400
 80095bc:	40014800 	.word	0x40014800

080095c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b087      	sub	sp, #28
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6a1b      	ldr	r3, [r3, #32]
 80095ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6a1b      	ldr	r3, [r3, #32]
 80095d4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	685b      	ldr	r3, [r3, #4]
 80095e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	69db      	ldr	r3, [r3, #28]
 80095e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80095ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80095f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80095fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	021b      	lsls	r3, r3, #8
 8009602:	68fa      	ldr	r2, [r7, #12]
 8009604:	4313      	orrs	r3, r2
 8009606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800960e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	689b      	ldr	r3, [r3, #8]
 8009614:	031b      	lsls	r3, r3, #12
 8009616:	697a      	ldr	r2, [r7, #20]
 8009618:	4313      	orrs	r3, r2
 800961a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	4a2c      	ldr	r2, [pc, #176]	@ (80096d0 <TIM_OC4_SetConfig+0x110>)
 8009620:	4293      	cmp	r3, r2
 8009622:	d007      	beq.n	8009634 <TIM_OC4_SetConfig+0x74>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	4a2b      	ldr	r2, [pc, #172]	@ (80096d4 <TIM_OC4_SetConfig+0x114>)
 8009628:	4293      	cmp	r3, r2
 800962a:	d003      	beq.n	8009634 <TIM_OC4_SetConfig+0x74>
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	4a2a      	ldr	r2, [pc, #168]	@ (80096d8 <TIM_OC4_SetConfig+0x118>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d10d      	bne.n	8009650 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800963a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	68db      	ldr	r3, [r3, #12]
 8009640:	031b      	lsls	r3, r3, #12
 8009642:	697a      	ldr	r2, [r7, #20]
 8009644:	4313      	orrs	r3, r2
 8009646:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009648:	697b      	ldr	r3, [r7, #20]
 800964a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800964e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	4a1f      	ldr	r2, [pc, #124]	@ (80096d0 <TIM_OC4_SetConfig+0x110>)
 8009654:	4293      	cmp	r3, r2
 8009656:	d013      	beq.n	8009680 <TIM_OC4_SetConfig+0xc0>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	4a1e      	ldr	r2, [pc, #120]	@ (80096d4 <TIM_OC4_SetConfig+0x114>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d00f      	beq.n	8009680 <TIM_OC4_SetConfig+0xc0>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	4a1e      	ldr	r2, [pc, #120]	@ (80096dc <TIM_OC4_SetConfig+0x11c>)
 8009664:	4293      	cmp	r3, r2
 8009666:	d00b      	beq.n	8009680 <TIM_OC4_SetConfig+0xc0>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	4a1d      	ldr	r2, [pc, #116]	@ (80096e0 <TIM_OC4_SetConfig+0x120>)
 800966c:	4293      	cmp	r3, r2
 800966e:	d007      	beq.n	8009680 <TIM_OC4_SetConfig+0xc0>
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	4a1c      	ldr	r2, [pc, #112]	@ (80096e4 <TIM_OC4_SetConfig+0x124>)
 8009674:	4293      	cmp	r3, r2
 8009676:	d003      	beq.n	8009680 <TIM_OC4_SetConfig+0xc0>
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	4a17      	ldr	r2, [pc, #92]	@ (80096d8 <TIM_OC4_SetConfig+0x118>)
 800967c:	4293      	cmp	r3, r2
 800967e:	d113      	bne.n	80096a8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009680:	693b      	ldr	r3, [r7, #16]
 8009682:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009686:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009688:	693b      	ldr	r3, [r7, #16]
 800968a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800968e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	695b      	ldr	r3, [r3, #20]
 8009694:	019b      	lsls	r3, r3, #6
 8009696:	693a      	ldr	r2, [r7, #16]
 8009698:	4313      	orrs	r3, r2
 800969a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	699b      	ldr	r3, [r3, #24]
 80096a0:	019b      	lsls	r3, r3, #6
 80096a2:	693a      	ldr	r2, [r7, #16]
 80096a4:	4313      	orrs	r3, r2
 80096a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	693a      	ldr	r2, [r7, #16]
 80096ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	68fa      	ldr	r2, [r7, #12]
 80096b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	685a      	ldr	r2, [r3, #4]
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	697a      	ldr	r2, [r7, #20]
 80096c0:	621a      	str	r2, [r3, #32]
}
 80096c2:	bf00      	nop
 80096c4:	371c      	adds	r7, #28
 80096c6:	46bd      	mov	sp, r7
 80096c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096cc:	4770      	bx	lr
 80096ce:	bf00      	nop
 80096d0:	40012c00 	.word	0x40012c00
 80096d4:	40013400 	.word	0x40013400
 80096d8:	40015000 	.word	0x40015000
 80096dc:	40014000 	.word	0x40014000
 80096e0:	40014400 	.word	0x40014400
 80096e4:	40014800 	.word	0x40014800

080096e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80096e8:	b480      	push	{r7}
 80096ea:	b087      	sub	sp, #28
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
 80096f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6a1b      	ldr	r3, [r3, #32]
 80096f6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6a1b      	ldr	r3, [r3, #32]
 80096fc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	685b      	ldr	r3, [r3, #4]
 8009708:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800970e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009716:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800971a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	68fa      	ldr	r2, [r7, #12]
 8009722:	4313      	orrs	r3, r2
 8009724:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800972c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	689b      	ldr	r3, [r3, #8]
 8009732:	041b      	lsls	r3, r3, #16
 8009734:	693a      	ldr	r2, [r7, #16]
 8009736:	4313      	orrs	r3, r2
 8009738:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	4a19      	ldr	r2, [pc, #100]	@ (80097a4 <TIM_OC5_SetConfig+0xbc>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d013      	beq.n	800976a <TIM_OC5_SetConfig+0x82>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	4a18      	ldr	r2, [pc, #96]	@ (80097a8 <TIM_OC5_SetConfig+0xc0>)
 8009746:	4293      	cmp	r3, r2
 8009748:	d00f      	beq.n	800976a <TIM_OC5_SetConfig+0x82>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	4a17      	ldr	r2, [pc, #92]	@ (80097ac <TIM_OC5_SetConfig+0xc4>)
 800974e:	4293      	cmp	r3, r2
 8009750:	d00b      	beq.n	800976a <TIM_OC5_SetConfig+0x82>
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	4a16      	ldr	r2, [pc, #88]	@ (80097b0 <TIM_OC5_SetConfig+0xc8>)
 8009756:	4293      	cmp	r3, r2
 8009758:	d007      	beq.n	800976a <TIM_OC5_SetConfig+0x82>
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	4a15      	ldr	r2, [pc, #84]	@ (80097b4 <TIM_OC5_SetConfig+0xcc>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d003      	beq.n	800976a <TIM_OC5_SetConfig+0x82>
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	4a14      	ldr	r2, [pc, #80]	@ (80097b8 <TIM_OC5_SetConfig+0xd0>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d109      	bne.n	800977e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009770:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	695b      	ldr	r3, [r3, #20]
 8009776:	021b      	lsls	r3, r3, #8
 8009778:	697a      	ldr	r2, [r7, #20]
 800977a:	4313      	orrs	r3, r2
 800977c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	697a      	ldr	r2, [r7, #20]
 8009782:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	68fa      	ldr	r2, [r7, #12]
 8009788:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	685a      	ldr	r2, [r3, #4]
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	693a      	ldr	r2, [r7, #16]
 8009796:	621a      	str	r2, [r3, #32]
}
 8009798:	bf00      	nop
 800979a:	371c      	adds	r7, #28
 800979c:	46bd      	mov	sp, r7
 800979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a2:	4770      	bx	lr
 80097a4:	40012c00 	.word	0x40012c00
 80097a8:	40013400 	.word	0x40013400
 80097ac:	40014000 	.word	0x40014000
 80097b0:	40014400 	.word	0x40014400
 80097b4:	40014800 	.word	0x40014800
 80097b8:	40015000 	.word	0x40015000

080097bc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80097bc:	b480      	push	{r7}
 80097be:	b087      	sub	sp, #28
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
 80097c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6a1b      	ldr	r3, [r3, #32]
 80097ca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6a1b      	ldr	r3, [r3, #32]
 80097d0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	685b      	ldr	r3, [r3, #4]
 80097dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80097e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80097ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80097ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	021b      	lsls	r3, r3, #8
 80097f6:	68fa      	ldr	r2, [r7, #12]
 80097f8:	4313      	orrs	r3, r2
 80097fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80097fc:	693b      	ldr	r3, [r7, #16]
 80097fe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009802:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	689b      	ldr	r3, [r3, #8]
 8009808:	051b      	lsls	r3, r3, #20
 800980a:	693a      	ldr	r2, [r7, #16]
 800980c:	4313      	orrs	r3, r2
 800980e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	4a1a      	ldr	r2, [pc, #104]	@ (800987c <TIM_OC6_SetConfig+0xc0>)
 8009814:	4293      	cmp	r3, r2
 8009816:	d013      	beq.n	8009840 <TIM_OC6_SetConfig+0x84>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	4a19      	ldr	r2, [pc, #100]	@ (8009880 <TIM_OC6_SetConfig+0xc4>)
 800981c:	4293      	cmp	r3, r2
 800981e:	d00f      	beq.n	8009840 <TIM_OC6_SetConfig+0x84>
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	4a18      	ldr	r2, [pc, #96]	@ (8009884 <TIM_OC6_SetConfig+0xc8>)
 8009824:	4293      	cmp	r3, r2
 8009826:	d00b      	beq.n	8009840 <TIM_OC6_SetConfig+0x84>
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	4a17      	ldr	r2, [pc, #92]	@ (8009888 <TIM_OC6_SetConfig+0xcc>)
 800982c:	4293      	cmp	r3, r2
 800982e:	d007      	beq.n	8009840 <TIM_OC6_SetConfig+0x84>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	4a16      	ldr	r2, [pc, #88]	@ (800988c <TIM_OC6_SetConfig+0xd0>)
 8009834:	4293      	cmp	r3, r2
 8009836:	d003      	beq.n	8009840 <TIM_OC6_SetConfig+0x84>
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	4a15      	ldr	r2, [pc, #84]	@ (8009890 <TIM_OC6_SetConfig+0xd4>)
 800983c:	4293      	cmp	r3, r2
 800983e:	d109      	bne.n	8009854 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009840:	697b      	ldr	r3, [r7, #20]
 8009842:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009846:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	695b      	ldr	r3, [r3, #20]
 800984c:	029b      	lsls	r3, r3, #10
 800984e:	697a      	ldr	r2, [r7, #20]
 8009850:	4313      	orrs	r3, r2
 8009852:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	697a      	ldr	r2, [r7, #20]
 8009858:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	68fa      	ldr	r2, [r7, #12]
 800985e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	685a      	ldr	r2, [r3, #4]
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	693a      	ldr	r2, [r7, #16]
 800986c:	621a      	str	r2, [r3, #32]
}
 800986e:	bf00      	nop
 8009870:	371c      	adds	r7, #28
 8009872:	46bd      	mov	sp, r7
 8009874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009878:	4770      	bx	lr
 800987a:	bf00      	nop
 800987c:	40012c00 	.word	0x40012c00
 8009880:	40013400 	.word	0x40013400
 8009884:	40014000 	.word	0x40014000
 8009888:	40014400 	.word	0x40014400
 800988c:	40014800 	.word	0x40014800
 8009890:	40015000 	.word	0x40015000

08009894 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b086      	sub	sp, #24
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
 800989c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800989e:	2300      	movs	r3, #0
 80098a0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	689b      	ldr	r3, [r3, #8]
 80098a8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80098aa:	693b      	ldr	r3, [r7, #16]
 80098ac:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80098b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80098b4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	685b      	ldr	r3, [r3, #4]
 80098ba:	693a      	ldr	r2, [r7, #16]
 80098bc:	4313      	orrs	r3, r2
 80098be:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80098c0:	693b      	ldr	r3, [r7, #16]
 80098c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80098c6:	f023 0307 	bic.w	r3, r3, #7
 80098ca:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	693a      	ldr	r2, [r7, #16]
 80098d2:	4313      	orrs	r3, r2
 80098d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	693a      	ldr	r2, [r7, #16]
 80098dc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	685b      	ldr	r3, [r3, #4]
 80098e2:	4a56      	ldr	r2, [pc, #344]	@ (8009a3c <TIM_SlaveTimer_SetConfig+0x1a8>)
 80098e4:	4293      	cmp	r3, r2
 80098e6:	f000 80a2 	beq.w	8009a2e <TIM_SlaveTimer_SetConfig+0x19a>
 80098ea:	4a54      	ldr	r2, [pc, #336]	@ (8009a3c <TIM_SlaveTimer_SetConfig+0x1a8>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	f200 809b 	bhi.w	8009a28 <TIM_SlaveTimer_SetConfig+0x194>
 80098f2:	4a53      	ldr	r2, [pc, #332]	@ (8009a40 <TIM_SlaveTimer_SetConfig+0x1ac>)
 80098f4:	4293      	cmp	r3, r2
 80098f6:	f000 809a 	beq.w	8009a2e <TIM_SlaveTimer_SetConfig+0x19a>
 80098fa:	4a51      	ldr	r2, [pc, #324]	@ (8009a40 <TIM_SlaveTimer_SetConfig+0x1ac>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	f200 8093 	bhi.w	8009a28 <TIM_SlaveTimer_SetConfig+0x194>
 8009902:	4a50      	ldr	r2, [pc, #320]	@ (8009a44 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8009904:	4293      	cmp	r3, r2
 8009906:	f000 8092 	beq.w	8009a2e <TIM_SlaveTimer_SetConfig+0x19a>
 800990a:	4a4e      	ldr	r2, [pc, #312]	@ (8009a44 <TIM_SlaveTimer_SetConfig+0x1b0>)
 800990c:	4293      	cmp	r3, r2
 800990e:	f200 808b 	bhi.w	8009a28 <TIM_SlaveTimer_SetConfig+0x194>
 8009912:	4a4d      	ldr	r2, [pc, #308]	@ (8009a48 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8009914:	4293      	cmp	r3, r2
 8009916:	f000 808a 	beq.w	8009a2e <TIM_SlaveTimer_SetConfig+0x19a>
 800991a:	4a4b      	ldr	r2, [pc, #300]	@ (8009a48 <TIM_SlaveTimer_SetConfig+0x1b4>)
 800991c:	4293      	cmp	r3, r2
 800991e:	f200 8083 	bhi.w	8009a28 <TIM_SlaveTimer_SetConfig+0x194>
 8009922:	4a4a      	ldr	r2, [pc, #296]	@ (8009a4c <TIM_SlaveTimer_SetConfig+0x1b8>)
 8009924:	4293      	cmp	r3, r2
 8009926:	f000 8082 	beq.w	8009a2e <TIM_SlaveTimer_SetConfig+0x19a>
 800992a:	4a48      	ldr	r2, [pc, #288]	@ (8009a4c <TIM_SlaveTimer_SetConfig+0x1b8>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d87b      	bhi.n	8009a28 <TIM_SlaveTimer_SetConfig+0x194>
 8009930:	4a47      	ldr	r2, [pc, #284]	@ (8009a50 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8009932:	4293      	cmp	r3, r2
 8009934:	d07b      	beq.n	8009a2e <TIM_SlaveTimer_SetConfig+0x19a>
 8009936:	4a46      	ldr	r2, [pc, #280]	@ (8009a50 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8009938:	4293      	cmp	r3, r2
 800993a:	d875      	bhi.n	8009a28 <TIM_SlaveTimer_SetConfig+0x194>
 800993c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009940:	d075      	beq.n	8009a2e <TIM_SlaveTimer_SetConfig+0x19a>
 8009942:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009946:	d86f      	bhi.n	8009a28 <TIM_SlaveTimer_SetConfig+0x194>
 8009948:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800994c:	d06f      	beq.n	8009a2e <TIM_SlaveTimer_SetConfig+0x19a>
 800994e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009952:	d869      	bhi.n	8009a28 <TIM_SlaveTimer_SetConfig+0x194>
 8009954:	2b70      	cmp	r3, #112	@ 0x70
 8009956:	d01a      	beq.n	800998e <TIM_SlaveTimer_SetConfig+0xfa>
 8009958:	2b70      	cmp	r3, #112	@ 0x70
 800995a:	d865      	bhi.n	8009a28 <TIM_SlaveTimer_SetConfig+0x194>
 800995c:	2b60      	cmp	r3, #96	@ 0x60
 800995e:	d059      	beq.n	8009a14 <TIM_SlaveTimer_SetConfig+0x180>
 8009960:	2b60      	cmp	r3, #96	@ 0x60
 8009962:	d861      	bhi.n	8009a28 <TIM_SlaveTimer_SetConfig+0x194>
 8009964:	2b50      	cmp	r3, #80	@ 0x50
 8009966:	d04b      	beq.n	8009a00 <TIM_SlaveTimer_SetConfig+0x16c>
 8009968:	2b50      	cmp	r3, #80	@ 0x50
 800996a:	d85d      	bhi.n	8009a28 <TIM_SlaveTimer_SetConfig+0x194>
 800996c:	2b40      	cmp	r3, #64	@ 0x40
 800996e:	d019      	beq.n	80099a4 <TIM_SlaveTimer_SetConfig+0x110>
 8009970:	2b40      	cmp	r3, #64	@ 0x40
 8009972:	d859      	bhi.n	8009a28 <TIM_SlaveTimer_SetConfig+0x194>
 8009974:	2b30      	cmp	r3, #48	@ 0x30
 8009976:	d05a      	beq.n	8009a2e <TIM_SlaveTimer_SetConfig+0x19a>
 8009978:	2b30      	cmp	r3, #48	@ 0x30
 800997a:	d855      	bhi.n	8009a28 <TIM_SlaveTimer_SetConfig+0x194>
 800997c:	2b20      	cmp	r3, #32
 800997e:	d056      	beq.n	8009a2e <TIM_SlaveTimer_SetConfig+0x19a>
 8009980:	2b20      	cmp	r3, #32
 8009982:	d851      	bhi.n	8009a28 <TIM_SlaveTimer_SetConfig+0x194>
 8009984:	2b00      	cmp	r3, #0
 8009986:	d052      	beq.n	8009a2e <TIM_SlaveTimer_SetConfig+0x19a>
 8009988:	2b10      	cmp	r3, #16
 800998a:	d050      	beq.n	8009a2e <TIM_SlaveTimer_SetConfig+0x19a>
 800998c:	e04c      	b.n	8009a28 <TIM_SlaveTimer_SetConfig+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800999e:	f000 f9ff 	bl	8009da0 <TIM_ETR_SetConfig>
      break;
 80099a2:	e045      	b.n	8009a30 <TIM_SlaveTimer_SetConfig+0x19c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	2b05      	cmp	r3, #5
 80099aa:	d004      	beq.n	80099b6 <TIM_SlaveTimer_SetConfig+0x122>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 80099b0:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 80099b4:	d101      	bne.n	80099ba <TIM_SlaveTimer_SetConfig+0x126>
      {
        return HAL_ERROR;
 80099b6:	2301      	movs	r3, #1
 80099b8:	e03b      	b.n	8009a32 <TIM_SlaveTimer_SetConfig+0x19e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	6a1b      	ldr	r3, [r3, #32]
 80099c0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	6a1a      	ldr	r2, [r3, #32]
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f022 0201 	bic.w	r2, r2, #1
 80099d0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	699b      	ldr	r3, [r3, #24]
 80099d8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80099e0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	691b      	ldr	r3, [r3, #16]
 80099e6:	011b      	lsls	r3, r3, #4
 80099e8:	68ba      	ldr	r2, [r7, #8]
 80099ea:	4313      	orrs	r3, r2
 80099ec:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	68ba      	ldr	r2, [r7, #8]
 80099f4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	68fa      	ldr	r2, [r7, #12]
 80099fc:	621a      	str	r2, [r3, #32]
      break;
 80099fe:	e017      	b.n	8009a30 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a0c:	461a      	mov	r2, r3
 8009a0e:	f000 f895 	bl	8009b3c <TIM_TI1_ConfigInputStage>
      break;
 8009a12:	e00d      	b.n	8009a30 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009a20:	461a      	mov	r2, r3
 8009a22:	f000 f8f7 	bl	8009c14 <TIM_TI2_ConfigInputStage>
      break;
 8009a26:	e003      	b.n	8009a30 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 8009a28:	2301      	movs	r3, #1
 8009a2a:	75fb      	strb	r3, [r7, #23]
      break;
 8009a2c:	e000      	b.n	8009a30 <TIM_SlaveTimer_SetConfig+0x19c>
      break;
 8009a2e:	bf00      	nop
  }

  return status;
 8009a30:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	3718      	adds	r7, #24
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}
 8009a3a:	bf00      	nop
 8009a3c:	00100070 	.word	0x00100070
 8009a40:	00100060 	.word	0x00100060
 8009a44:	00100050 	.word	0x00100050
 8009a48:	00100040 	.word	0x00100040
 8009a4c:	00100030 	.word	0x00100030
 8009a50:	00100020 	.word	0x00100020

08009a54 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009a54:	b480      	push	{r7}
 8009a56:	b087      	sub	sp, #28
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	60f8      	str	r0, [r7, #12]
 8009a5c:	60b9      	str	r1, [r7, #8]
 8009a5e:	607a      	str	r2, [r7, #4]
 8009a60:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	6a1b      	ldr	r3, [r3, #32]
 8009a66:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	6a1b      	ldr	r3, [r3, #32]
 8009a6c:	f023 0201 	bic.w	r2, r3, #1
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	699b      	ldr	r3, [r3, #24]
 8009a78:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	4a28      	ldr	r2, [pc, #160]	@ (8009b20 <TIM_TI1_SetConfig+0xcc>)
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	d01b      	beq.n	8009aba <TIM_TI1_SetConfig+0x66>
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a88:	d017      	beq.n	8009aba <TIM_TI1_SetConfig+0x66>
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	4a25      	ldr	r2, [pc, #148]	@ (8009b24 <TIM_TI1_SetConfig+0xd0>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d013      	beq.n	8009aba <TIM_TI1_SetConfig+0x66>
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	4a24      	ldr	r2, [pc, #144]	@ (8009b28 <TIM_TI1_SetConfig+0xd4>)
 8009a96:	4293      	cmp	r3, r2
 8009a98:	d00f      	beq.n	8009aba <TIM_TI1_SetConfig+0x66>
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	4a23      	ldr	r2, [pc, #140]	@ (8009b2c <TIM_TI1_SetConfig+0xd8>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d00b      	beq.n	8009aba <TIM_TI1_SetConfig+0x66>
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	4a22      	ldr	r2, [pc, #136]	@ (8009b30 <TIM_TI1_SetConfig+0xdc>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d007      	beq.n	8009aba <TIM_TI1_SetConfig+0x66>
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	4a21      	ldr	r2, [pc, #132]	@ (8009b34 <TIM_TI1_SetConfig+0xe0>)
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	d003      	beq.n	8009aba <TIM_TI1_SetConfig+0x66>
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	4a20      	ldr	r2, [pc, #128]	@ (8009b38 <TIM_TI1_SetConfig+0xe4>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d101      	bne.n	8009abe <TIM_TI1_SetConfig+0x6a>
 8009aba:	2301      	movs	r3, #1
 8009abc:	e000      	b.n	8009ac0 <TIM_TI1_SetConfig+0x6c>
 8009abe:	2300      	movs	r3, #0
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d008      	beq.n	8009ad6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009ac4:	697b      	ldr	r3, [r7, #20]
 8009ac6:	f023 0303 	bic.w	r3, r3, #3
 8009aca:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009acc:	697a      	ldr	r2, [r7, #20]
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	4313      	orrs	r3, r2
 8009ad2:	617b      	str	r3, [r7, #20]
 8009ad4:	e003      	b.n	8009ade <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009ad6:	697b      	ldr	r3, [r7, #20]
 8009ad8:	f043 0301 	orr.w	r3, r3, #1
 8009adc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009ae4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	011b      	lsls	r3, r3, #4
 8009aea:	b2db      	uxtb	r3, r3
 8009aec:	697a      	ldr	r2, [r7, #20]
 8009aee:	4313      	orrs	r3, r2
 8009af0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	f023 030a 	bic.w	r3, r3, #10
 8009af8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	f003 030a 	and.w	r3, r3, #10
 8009b00:	693a      	ldr	r2, [r7, #16]
 8009b02:	4313      	orrs	r3, r2
 8009b04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	697a      	ldr	r2, [r7, #20]
 8009b0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	693a      	ldr	r2, [r7, #16]
 8009b10:	621a      	str	r2, [r3, #32]
}
 8009b12:	bf00      	nop
 8009b14:	371c      	adds	r7, #28
 8009b16:	46bd      	mov	sp, r7
 8009b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1c:	4770      	bx	lr
 8009b1e:	bf00      	nop
 8009b20:	40012c00 	.word	0x40012c00
 8009b24:	40000400 	.word	0x40000400
 8009b28:	40000800 	.word	0x40000800
 8009b2c:	40000c00 	.word	0x40000c00
 8009b30:	40013400 	.word	0x40013400
 8009b34:	40014000 	.word	0x40014000
 8009b38:	40015000 	.word	0x40015000

08009b3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b087      	sub	sp, #28
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	60f8      	str	r0, [r7, #12]
 8009b44:	60b9      	str	r1, [r7, #8]
 8009b46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	6a1b      	ldr	r3, [r3, #32]
 8009b4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	6a1b      	ldr	r3, [r3, #32]
 8009b52:	f023 0201 	bic.w	r2, r3, #1
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	699b      	ldr	r3, [r3, #24]
 8009b5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009b60:	693b      	ldr	r3, [r7, #16]
 8009b62:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009b66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	011b      	lsls	r3, r3, #4
 8009b6c:	693a      	ldr	r2, [r7, #16]
 8009b6e:	4313      	orrs	r3, r2
 8009b70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	f023 030a 	bic.w	r3, r3, #10
 8009b78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009b7a:	697a      	ldr	r2, [r7, #20]
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	4313      	orrs	r3, r2
 8009b80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	693a      	ldr	r2, [r7, #16]
 8009b86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	697a      	ldr	r2, [r7, #20]
 8009b8c:	621a      	str	r2, [r3, #32]
}
 8009b8e:	bf00      	nop
 8009b90:	371c      	adds	r7, #28
 8009b92:	46bd      	mov	sp, r7
 8009b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b98:	4770      	bx	lr

08009b9a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009b9a:	b480      	push	{r7}
 8009b9c:	b087      	sub	sp, #28
 8009b9e:	af00      	add	r7, sp, #0
 8009ba0:	60f8      	str	r0, [r7, #12]
 8009ba2:	60b9      	str	r1, [r7, #8]
 8009ba4:	607a      	str	r2, [r7, #4]
 8009ba6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	6a1b      	ldr	r3, [r3, #32]
 8009bac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	6a1b      	ldr	r3, [r3, #32]
 8009bb2:	f023 0210 	bic.w	r2, r3, #16
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	699b      	ldr	r3, [r3, #24]
 8009bbe:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009bc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	021b      	lsls	r3, r3, #8
 8009bcc:	693a      	ldr	r2, [r7, #16]
 8009bce:	4313      	orrs	r3, r2
 8009bd0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009bd2:	693b      	ldr	r3, [r7, #16]
 8009bd4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009bd8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	031b      	lsls	r3, r3, #12
 8009bde:	b29b      	uxth	r3, r3
 8009be0:	693a      	ldr	r2, [r7, #16]
 8009be2:	4313      	orrs	r3, r2
 8009be4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009be6:	697b      	ldr	r3, [r7, #20]
 8009be8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009bec:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	011b      	lsls	r3, r3, #4
 8009bf2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8009bf6:	697a      	ldr	r2, [r7, #20]
 8009bf8:	4313      	orrs	r3, r2
 8009bfa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	693a      	ldr	r2, [r7, #16]
 8009c00:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	697a      	ldr	r2, [r7, #20]
 8009c06:	621a      	str	r2, [r3, #32]
}
 8009c08:	bf00      	nop
 8009c0a:	371c      	adds	r7, #28
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c12:	4770      	bx	lr

08009c14 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009c14:	b480      	push	{r7}
 8009c16:	b087      	sub	sp, #28
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	60f8      	str	r0, [r7, #12]
 8009c1c:	60b9      	str	r1, [r7, #8]
 8009c1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	6a1b      	ldr	r3, [r3, #32]
 8009c24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	6a1b      	ldr	r3, [r3, #32]
 8009c2a:	f023 0210 	bic.w	r2, r3, #16
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	699b      	ldr	r3, [r3, #24]
 8009c36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009c3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	031b      	lsls	r3, r3, #12
 8009c44:	693a      	ldr	r2, [r7, #16]
 8009c46:	4313      	orrs	r3, r2
 8009c48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009c4a:	697b      	ldr	r3, [r7, #20]
 8009c4c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009c50:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	011b      	lsls	r3, r3, #4
 8009c56:	697a      	ldr	r2, [r7, #20]
 8009c58:	4313      	orrs	r3, r2
 8009c5a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	693a      	ldr	r2, [r7, #16]
 8009c60:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	697a      	ldr	r2, [r7, #20]
 8009c66:	621a      	str	r2, [r3, #32]
}
 8009c68:	bf00      	nop
 8009c6a:	371c      	adds	r7, #28
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c72:	4770      	bx	lr

08009c74 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009c74:	b480      	push	{r7}
 8009c76:	b087      	sub	sp, #28
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	60f8      	str	r0, [r7, #12]
 8009c7c:	60b9      	str	r1, [r7, #8]
 8009c7e:	607a      	str	r2, [r7, #4]
 8009c80:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	6a1b      	ldr	r3, [r3, #32]
 8009c86:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	6a1b      	ldr	r3, [r3, #32]
 8009c8c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	69db      	ldr	r3, [r3, #28]
 8009c98:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009c9a:	693b      	ldr	r3, [r7, #16]
 8009c9c:	f023 0303 	bic.w	r3, r3, #3
 8009ca0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8009ca2:	693a      	ldr	r2, [r7, #16]
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	4313      	orrs	r3, r2
 8009ca8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009caa:	693b      	ldr	r3, [r7, #16]
 8009cac:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009cb0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	011b      	lsls	r3, r3, #4
 8009cb6:	b2db      	uxtb	r3, r3
 8009cb8:	693a      	ldr	r2, [r7, #16]
 8009cba:	4313      	orrs	r3, r2
 8009cbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009cbe:	697b      	ldr	r3, [r7, #20]
 8009cc0:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8009cc4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	021b      	lsls	r3, r3, #8
 8009cca:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8009cce:	697a      	ldr	r2, [r7, #20]
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	693a      	ldr	r2, [r7, #16]
 8009cd8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	697a      	ldr	r2, [r7, #20]
 8009cde:	621a      	str	r2, [r3, #32]
}
 8009ce0:	bf00      	nop
 8009ce2:	371c      	adds	r7, #28
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cea:	4770      	bx	lr

08009cec <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009cec:	b480      	push	{r7}
 8009cee:	b087      	sub	sp, #28
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	60f8      	str	r0, [r7, #12]
 8009cf4:	60b9      	str	r1, [r7, #8]
 8009cf6:	607a      	str	r2, [r7, #4]
 8009cf8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	6a1b      	ldr	r3, [r3, #32]
 8009cfe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	6a1b      	ldr	r3, [r3, #32]
 8009d04:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	69db      	ldr	r3, [r3, #28]
 8009d10:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009d12:	693b      	ldr	r3, [r7, #16]
 8009d14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009d18:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	021b      	lsls	r3, r3, #8
 8009d1e:	693a      	ldr	r2, [r7, #16]
 8009d20:	4313      	orrs	r3, r2
 8009d22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009d24:	693b      	ldr	r3, [r7, #16]
 8009d26:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009d2a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	031b      	lsls	r3, r3, #12
 8009d30:	b29b      	uxth	r3, r3
 8009d32:	693a      	ldr	r2, [r7, #16]
 8009d34:	4313      	orrs	r3, r2
 8009d36:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009d38:	697b      	ldr	r3, [r7, #20]
 8009d3a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8009d3e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	031b      	lsls	r3, r3, #12
 8009d44:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8009d48:	697a      	ldr	r2, [r7, #20]
 8009d4a:	4313      	orrs	r3, r2
 8009d4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	693a      	ldr	r2, [r7, #16]
 8009d52:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	697a      	ldr	r2, [r7, #20]
 8009d58:	621a      	str	r2, [r3, #32]
}
 8009d5a:	bf00      	nop
 8009d5c:	371c      	adds	r7, #28
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d64:	4770      	bx	lr

08009d66 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009d66:	b480      	push	{r7}
 8009d68:	b085      	sub	sp, #20
 8009d6a:	af00      	add	r7, sp, #0
 8009d6c:	6078      	str	r0, [r7, #4]
 8009d6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	689b      	ldr	r3, [r3, #8]
 8009d74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009d7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009d82:	683a      	ldr	r2, [r7, #0]
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	4313      	orrs	r3, r2
 8009d88:	f043 0307 	orr.w	r3, r3, #7
 8009d8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	68fa      	ldr	r2, [r7, #12]
 8009d92:	609a      	str	r2, [r3, #8]
}
 8009d94:	bf00      	nop
 8009d96:	3714      	adds	r7, #20
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9e:	4770      	bx	lr

08009da0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009da0:	b480      	push	{r7}
 8009da2:	b087      	sub	sp, #28
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	60f8      	str	r0, [r7, #12]
 8009da8:	60b9      	str	r1, [r7, #8]
 8009daa:	607a      	str	r2, [r7, #4]
 8009dac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	689b      	ldr	r3, [r3, #8]
 8009db2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009dba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	021a      	lsls	r2, r3, #8
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	431a      	orrs	r2, r3
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	4313      	orrs	r3, r2
 8009dc8:	697a      	ldr	r2, [r7, #20]
 8009dca:	4313      	orrs	r3, r2
 8009dcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	697a      	ldr	r2, [r7, #20]
 8009dd2:	609a      	str	r2, [r3, #8]
}
 8009dd4:	bf00      	nop
 8009dd6:	371c      	adds	r7, #28
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dde:	4770      	bx	lr

08009de0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009de0:	b480      	push	{r7}
 8009de2:	b087      	sub	sp, #28
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	60f8      	str	r0, [r7, #12]
 8009de8:	60b9      	str	r1, [r7, #8]
 8009dea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	f003 031f 	and.w	r3, r3, #31
 8009df2:	2201      	movs	r2, #1
 8009df4:	fa02 f303 	lsl.w	r3, r2, r3
 8009df8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	6a1a      	ldr	r2, [r3, #32]
 8009dfe:	697b      	ldr	r3, [r7, #20]
 8009e00:	43db      	mvns	r3, r3
 8009e02:	401a      	ands	r2, r3
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	6a1a      	ldr	r2, [r3, #32]
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	f003 031f 	and.w	r3, r3, #31
 8009e12:	6879      	ldr	r1, [r7, #4]
 8009e14:	fa01 f303 	lsl.w	r3, r1, r3
 8009e18:	431a      	orrs	r2, r3
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	621a      	str	r2, [r3, #32]
}
 8009e1e:	bf00      	nop
 8009e20:	371c      	adds	r7, #28
 8009e22:	46bd      	mov	sp, r7
 8009e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e28:	4770      	bx	lr
	...

08009e2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b085      	sub	sp, #20
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
 8009e34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009e3c:	2b01      	cmp	r3, #1
 8009e3e:	d101      	bne.n	8009e44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009e40:	2302      	movs	r3, #2
 8009e42:	e074      	b.n	8009f2e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2201      	movs	r2, #1
 8009e48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2202      	movs	r2, #2
 8009e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	685b      	ldr	r3, [r3, #4]
 8009e5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	689b      	ldr	r3, [r3, #8]
 8009e62:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	4a34      	ldr	r2, [pc, #208]	@ (8009f3c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009e6a:	4293      	cmp	r3, r2
 8009e6c:	d009      	beq.n	8009e82 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	4a33      	ldr	r2, [pc, #204]	@ (8009f40 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009e74:	4293      	cmp	r3, r2
 8009e76:	d004      	beq.n	8009e82 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	4a31      	ldr	r2, [pc, #196]	@ (8009f44 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	d108      	bne.n	8009e94 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009e88:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	685b      	ldr	r3, [r3, #4]
 8009e8e:	68fa      	ldr	r2, [r7, #12]
 8009e90:	4313      	orrs	r3, r2
 8009e92:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009e9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	68fa      	ldr	r2, [r7, #12]
 8009ea6:	4313      	orrs	r3, r2
 8009ea8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	68fa      	ldr	r2, [r7, #12]
 8009eb0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	4a21      	ldr	r2, [pc, #132]	@ (8009f3c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	d022      	beq.n	8009f02 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ec4:	d01d      	beq.n	8009f02 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	4a1f      	ldr	r2, [pc, #124]	@ (8009f48 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	d018      	beq.n	8009f02 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	4a1d      	ldr	r2, [pc, #116]	@ (8009f4c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009ed6:	4293      	cmp	r3, r2
 8009ed8:	d013      	beq.n	8009f02 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	4a1c      	ldr	r2, [pc, #112]	@ (8009f50 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	d00e      	beq.n	8009f02 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	4a15      	ldr	r2, [pc, #84]	@ (8009f40 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d009      	beq.n	8009f02 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	4a18      	ldr	r2, [pc, #96]	@ (8009f54 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	d004      	beq.n	8009f02 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	4a11      	ldr	r2, [pc, #68]	@ (8009f44 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009efe:	4293      	cmp	r3, r2
 8009f00:	d10c      	bne.n	8009f1c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009f02:	68bb      	ldr	r3, [r7, #8]
 8009f04:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009f08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	689b      	ldr	r3, [r3, #8]
 8009f0e:	68ba      	ldr	r2, [r7, #8]
 8009f10:	4313      	orrs	r3, r2
 8009f12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	68ba      	ldr	r2, [r7, #8]
 8009f1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2201      	movs	r2, #1
 8009f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2200      	movs	r2, #0
 8009f28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009f2c:	2300      	movs	r3, #0
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3714      	adds	r7, #20
 8009f32:	46bd      	mov	sp, r7
 8009f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f38:	4770      	bx	lr
 8009f3a:	bf00      	nop
 8009f3c:	40012c00 	.word	0x40012c00
 8009f40:	40013400 	.word	0x40013400
 8009f44:	40015000 	.word	0x40015000
 8009f48:	40000400 	.word	0x40000400
 8009f4c:	40000800 	.word	0x40000800
 8009f50:	40000c00 	.word	0x40000c00
 8009f54:	40014000 	.word	0x40014000

08009f58 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009f58:	b480      	push	{r7}
 8009f5a:	b085      	sub	sp, #20
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
 8009f60:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009f62:	2300      	movs	r3, #0
 8009f64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009f6c:	2b01      	cmp	r3, #1
 8009f6e:	d101      	bne.n	8009f74 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009f70:	2302      	movs	r3, #2
 8009f72:	e078      	b.n	800a066 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2201      	movs	r2, #1
 8009f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	68db      	ldr	r3, [r3, #12]
 8009f86:	4313      	orrs	r3, r2
 8009f88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	689b      	ldr	r3, [r3, #8]
 8009f94:	4313      	orrs	r3, r2
 8009f96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	685b      	ldr	r3, [r3, #4]
 8009fa2:	4313      	orrs	r3, r2
 8009fa4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	4313      	orrs	r3, r2
 8009fb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	691b      	ldr	r3, [r3, #16]
 8009fbe:	4313      	orrs	r3, r2
 8009fc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	695b      	ldr	r3, [r3, #20]
 8009fcc:	4313      	orrs	r3, r2
 8009fce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fda:	4313      	orrs	r3, r2
 8009fdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	699b      	ldr	r3, [r3, #24]
 8009fe8:	041b      	lsls	r3, r3, #16
 8009fea:	4313      	orrs	r3, r2
 8009fec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	69db      	ldr	r3, [r3, #28]
 8009ff8:	4313      	orrs	r3, r2
 8009ffa:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	4a1c      	ldr	r2, [pc, #112]	@ (800a074 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800a002:	4293      	cmp	r3, r2
 800a004:	d009      	beq.n	800a01a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	4a1b      	ldr	r2, [pc, #108]	@ (800a078 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800a00c:	4293      	cmp	r3, r2
 800a00e:	d004      	beq.n	800a01a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	4a19      	ldr	r2, [pc, #100]	@ (800a07c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800a016:	4293      	cmp	r3, r2
 800a018:	d11c      	bne.n	800a054 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a024:	051b      	lsls	r3, r3, #20
 800a026:	4313      	orrs	r3, r2
 800a028:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	6a1b      	ldr	r3, [r3, #32]
 800a034:	4313      	orrs	r3, r2
 800a036:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a042:	4313      	orrs	r3, r2
 800a044:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a050:	4313      	orrs	r3, r2
 800a052:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	68fa      	ldr	r2, [r7, #12]
 800a05a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2200      	movs	r2, #0
 800a060:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a064:	2300      	movs	r3, #0
}
 800a066:	4618      	mov	r0, r3
 800a068:	3714      	adds	r7, #20
 800a06a:	46bd      	mov	sp, r7
 800a06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a070:	4770      	bx	lr
 800a072:	bf00      	nop
 800a074:	40012c00 	.word	0x40012c00
 800a078:	40013400 	.word	0x40013400
 800a07c:	40015000 	.word	0x40015000

0800a080 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a080:	b480      	push	{r7}
 800a082:	b083      	sub	sp, #12
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a088:	bf00      	nop
 800a08a:	370c      	adds	r7, #12
 800a08c:	46bd      	mov	sp, r7
 800a08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a092:	4770      	bx	lr

0800a094 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a094:	b480      	push	{r7}
 800a096:	b083      	sub	sp, #12
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a09c:	bf00      	nop
 800a09e:	370c      	adds	r7, #12
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a6:	4770      	bx	lr

0800a0a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a0a8:	b480      	push	{r7}
 800a0aa:	b083      	sub	sp, #12
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a0b0:	bf00      	nop
 800a0b2:	370c      	adds	r7, #12
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ba:	4770      	bx	lr

0800a0bc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a0bc:	b480      	push	{r7}
 800a0be:	b083      	sub	sp, #12
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a0c4:	bf00      	nop
 800a0c6:	370c      	adds	r7, #12
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ce:	4770      	bx	lr

0800a0d0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	b083      	sub	sp, #12
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a0d8:	bf00      	nop
 800a0da:	370c      	adds	r7, #12
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e2:	4770      	bx	lr

0800a0e4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b083      	sub	sp, #12
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a0ec:	bf00      	nop
 800a0ee:	370c      	adds	r7, #12
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f6:	4770      	bx	lr

0800a0f8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a0f8:	b480      	push	{r7}
 800a0fa:	b083      	sub	sp, #12
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a100:	bf00      	nop
 800a102:	370c      	adds	r7, #12
 800a104:	46bd      	mov	sp, r7
 800a106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10a:	4770      	bx	lr

0800a10c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800a10c:	b480      	push	{r7}
 800a10e:	b085      	sub	sp, #20
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2200      	movs	r2, #0
 800a118:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a11c:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800a120:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	b29a      	uxth	r2, r3
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800a12c:	2300      	movs	r3, #0
}
 800a12e:	4618      	mov	r0, r3
 800a130:	3714      	adds	r7, #20
 800a132:	46bd      	mov	sp, r7
 800a134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a138:	4770      	bx	lr

0800a13a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800a13a:	b480      	push	{r7}
 800a13c:	b085      	sub	sp, #20
 800a13e:	af00      	add	r7, sp, #0
 800a140:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a142:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800a146:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a14e:	b29a      	uxth	r2, r3
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	b29b      	uxth	r3, r3
 800a154:	43db      	mvns	r3, r3
 800a156:	b29b      	uxth	r3, r3
 800a158:	4013      	ands	r3, r2
 800a15a:	b29a      	uxth	r2, r3
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800a162:	2300      	movs	r3, #0
}
 800a164:	4618      	mov	r0, r3
 800a166:	3714      	adds	r7, #20
 800a168:	46bd      	mov	sp, r7
 800a16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16e:	4770      	bx	lr

0800a170 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a170:	b480      	push	{r7}
 800a172:	b085      	sub	sp, #20
 800a174:	af00      	add	r7, sp, #0
 800a176:	60f8      	str	r0, [r7, #12]
 800a178:	1d3b      	adds	r3, r7, #4
 800a17a:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	2201      	movs	r2, #1
 800a182:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	2200      	movs	r2, #0
 800a18a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	2200      	movs	r2, #0
 800a192:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	2200      	movs	r2, #0
 800a19a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800a19e:	2300      	movs	r3, #0
}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	3714      	adds	r7, #20
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1aa:	4770      	bx	lr

0800a1ac <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	b09d      	sub	sp, #116	@ 0x74
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
 800a1b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800a1bc:	687a      	ldr	r2, [r7, #4]
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	781b      	ldrb	r3, [r3, #0]
 800a1c2:	009b      	lsls	r3, r3, #2
 800a1c4:	4413      	add	r3, r2
 800a1c6:	881b      	ldrh	r3, [r3, #0]
 800a1c8:	b29b      	uxth	r3, r3
 800a1ca:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800a1ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a1d2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	78db      	ldrb	r3, [r3, #3]
 800a1da:	2b03      	cmp	r3, #3
 800a1dc:	d81f      	bhi.n	800a21e <USB_ActivateEndpoint+0x72>
 800a1de:	a201      	add	r2, pc, #4	@ (adr r2, 800a1e4 <USB_ActivateEndpoint+0x38>)
 800a1e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1e4:	0800a1f5 	.word	0x0800a1f5
 800a1e8:	0800a211 	.word	0x0800a211
 800a1ec:	0800a227 	.word	0x0800a227
 800a1f0:	0800a203 	.word	0x0800a203
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800a1f4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a1f8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800a1fc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800a200:	e012      	b.n	800a228 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800a202:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a206:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800a20a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800a20e:	e00b      	b.n	800a228 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800a210:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a214:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800a218:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800a21c:	e004      	b.n	800a228 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800a21e:	2301      	movs	r3, #1
 800a220:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800a224:	e000      	b.n	800a228 <USB_ActivateEndpoint+0x7c>
      break;
 800a226:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800a228:	687a      	ldr	r2, [r7, #4]
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	781b      	ldrb	r3, [r3, #0]
 800a22e:	009b      	lsls	r3, r3, #2
 800a230:	441a      	add	r2, r3
 800a232:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a236:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a23a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a23e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a242:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a246:	b29b      	uxth	r3, r3
 800a248:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800a24a:	687a      	ldr	r2, [r7, #4]
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	781b      	ldrb	r3, [r3, #0]
 800a250:	009b      	lsls	r3, r3, #2
 800a252:	4413      	add	r3, r2
 800a254:	881b      	ldrh	r3, [r3, #0]
 800a256:	b29b      	uxth	r3, r3
 800a258:	b21b      	sxth	r3, r3
 800a25a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a25e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a262:	b21a      	sxth	r2, r3
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	781b      	ldrb	r3, [r3, #0]
 800a268:	b21b      	sxth	r3, r3
 800a26a:	4313      	orrs	r3, r2
 800a26c:	b21b      	sxth	r3, r3
 800a26e:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800a272:	687a      	ldr	r2, [r7, #4]
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	781b      	ldrb	r3, [r3, #0]
 800a278:	009b      	lsls	r3, r3, #2
 800a27a:	441a      	add	r2, r3
 800a27c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800a280:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a284:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a288:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a28c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a290:	b29b      	uxth	r3, r3
 800a292:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	7b1b      	ldrb	r3, [r3, #12]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	f040 8178 	bne.w	800a58e <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	785b      	ldrb	r3, [r3, #1]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	f000 8084 	beq.w	800a3b0 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	61bb      	str	r3, [r7, #24]
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a2b2:	b29b      	uxth	r3, r3
 800a2b4:	461a      	mov	r2, r3
 800a2b6:	69bb      	ldr	r3, [r7, #24]
 800a2b8:	4413      	add	r3, r2
 800a2ba:	61bb      	str	r3, [r7, #24]
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	781b      	ldrb	r3, [r3, #0]
 800a2c0:	00da      	lsls	r2, r3, #3
 800a2c2:	69bb      	ldr	r3, [r7, #24]
 800a2c4:	4413      	add	r3, r2
 800a2c6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a2ca:	617b      	str	r3, [r7, #20]
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	88db      	ldrh	r3, [r3, #6]
 800a2d0:	085b      	lsrs	r3, r3, #1
 800a2d2:	b29b      	uxth	r3, r3
 800a2d4:	005b      	lsls	r3, r3, #1
 800a2d6:	b29a      	uxth	r2, r3
 800a2d8:	697b      	ldr	r3, [r7, #20]
 800a2da:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a2dc:	687a      	ldr	r2, [r7, #4]
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	781b      	ldrb	r3, [r3, #0]
 800a2e2:	009b      	lsls	r3, r3, #2
 800a2e4:	4413      	add	r3, r2
 800a2e6:	881b      	ldrh	r3, [r3, #0]
 800a2e8:	827b      	strh	r3, [r7, #18]
 800a2ea:	8a7b      	ldrh	r3, [r7, #18]
 800a2ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d01b      	beq.n	800a32c <USB_ActivateEndpoint+0x180>
 800a2f4:	687a      	ldr	r2, [r7, #4]
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	781b      	ldrb	r3, [r3, #0]
 800a2fa:	009b      	lsls	r3, r3, #2
 800a2fc:	4413      	add	r3, r2
 800a2fe:	881b      	ldrh	r3, [r3, #0]
 800a300:	b29b      	uxth	r3, r3
 800a302:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a306:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a30a:	823b      	strh	r3, [r7, #16]
 800a30c:	687a      	ldr	r2, [r7, #4]
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	781b      	ldrb	r3, [r3, #0]
 800a312:	009b      	lsls	r3, r3, #2
 800a314:	441a      	add	r2, r3
 800a316:	8a3b      	ldrh	r3, [r7, #16]
 800a318:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a31c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a320:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a324:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a328:	b29b      	uxth	r3, r3
 800a32a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	78db      	ldrb	r3, [r3, #3]
 800a330:	2b01      	cmp	r3, #1
 800a332:	d020      	beq.n	800a376 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a334:	687a      	ldr	r2, [r7, #4]
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	781b      	ldrb	r3, [r3, #0]
 800a33a:	009b      	lsls	r3, r3, #2
 800a33c:	4413      	add	r3, r2
 800a33e:	881b      	ldrh	r3, [r3, #0]
 800a340:	b29b      	uxth	r3, r3
 800a342:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a346:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a34a:	81bb      	strh	r3, [r7, #12]
 800a34c:	89bb      	ldrh	r3, [r7, #12]
 800a34e:	f083 0320 	eor.w	r3, r3, #32
 800a352:	81bb      	strh	r3, [r7, #12]
 800a354:	687a      	ldr	r2, [r7, #4]
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	781b      	ldrb	r3, [r3, #0]
 800a35a:	009b      	lsls	r3, r3, #2
 800a35c:	441a      	add	r2, r3
 800a35e:	89bb      	ldrh	r3, [r7, #12]
 800a360:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a364:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a368:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a36c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a370:	b29b      	uxth	r3, r3
 800a372:	8013      	strh	r3, [r2, #0]
 800a374:	e2d5      	b.n	800a922 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a376:	687a      	ldr	r2, [r7, #4]
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	781b      	ldrb	r3, [r3, #0]
 800a37c:	009b      	lsls	r3, r3, #2
 800a37e:	4413      	add	r3, r2
 800a380:	881b      	ldrh	r3, [r3, #0]
 800a382:	b29b      	uxth	r3, r3
 800a384:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a388:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a38c:	81fb      	strh	r3, [r7, #14]
 800a38e:	687a      	ldr	r2, [r7, #4]
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	781b      	ldrb	r3, [r3, #0]
 800a394:	009b      	lsls	r3, r3, #2
 800a396:	441a      	add	r2, r3
 800a398:	89fb      	ldrh	r3, [r7, #14]
 800a39a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a39e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a3a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a3a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a3aa:	b29b      	uxth	r3, r3
 800a3ac:	8013      	strh	r3, [r2, #0]
 800a3ae:	e2b8      	b.n	800a922 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	633b      	str	r3, [r7, #48]	@ 0x30
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a3ba:	b29b      	uxth	r3, r3
 800a3bc:	461a      	mov	r2, r3
 800a3be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3c0:	4413      	add	r3, r2
 800a3c2:	633b      	str	r3, [r7, #48]	@ 0x30
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	781b      	ldrb	r3, [r3, #0]
 800a3c8:	00da      	lsls	r2, r3, #3
 800a3ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3cc:	4413      	add	r3, r2
 800a3ce:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a3d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	88db      	ldrh	r3, [r3, #6]
 800a3d8:	085b      	lsrs	r3, r3, #1
 800a3da:	b29b      	uxth	r3, r3
 800a3dc:	005b      	lsls	r3, r3, #1
 800a3de:	b29a      	uxth	r2, r3
 800a3e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3e2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a3ee:	b29b      	uxth	r3, r3
 800a3f0:	461a      	mov	r2, r3
 800a3f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3f4:	4413      	add	r3, r2
 800a3f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	781b      	ldrb	r3, [r3, #0]
 800a3fc:	00da      	lsls	r2, r3, #3
 800a3fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a400:	4413      	add	r3, r2
 800a402:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a406:	627b      	str	r3, [r7, #36]	@ 0x24
 800a408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a40a:	881b      	ldrh	r3, [r3, #0]
 800a40c:	b29b      	uxth	r3, r3
 800a40e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a412:	b29a      	uxth	r2, r3
 800a414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a416:	801a      	strh	r2, [r3, #0]
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	691b      	ldr	r3, [r3, #16]
 800a41c:	2b3e      	cmp	r3, #62	@ 0x3e
 800a41e:	d91d      	bls.n	800a45c <USB_ActivateEndpoint+0x2b0>
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	691b      	ldr	r3, [r3, #16]
 800a424:	095b      	lsrs	r3, r3, #5
 800a426:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	691b      	ldr	r3, [r3, #16]
 800a42c:	f003 031f 	and.w	r3, r3, #31
 800a430:	2b00      	cmp	r3, #0
 800a432:	d102      	bne.n	800a43a <USB_ActivateEndpoint+0x28e>
 800a434:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a436:	3b01      	subs	r3, #1
 800a438:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a43a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a43c:	881b      	ldrh	r3, [r3, #0]
 800a43e:	b29a      	uxth	r2, r3
 800a440:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a442:	b29b      	uxth	r3, r3
 800a444:	029b      	lsls	r3, r3, #10
 800a446:	b29b      	uxth	r3, r3
 800a448:	4313      	orrs	r3, r2
 800a44a:	b29b      	uxth	r3, r3
 800a44c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a450:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a454:	b29a      	uxth	r2, r3
 800a456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a458:	801a      	strh	r2, [r3, #0]
 800a45a:	e026      	b.n	800a4aa <USB_ActivateEndpoint+0x2fe>
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	691b      	ldr	r3, [r3, #16]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d10a      	bne.n	800a47a <USB_ActivateEndpoint+0x2ce>
 800a464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a466:	881b      	ldrh	r3, [r3, #0]
 800a468:	b29b      	uxth	r3, r3
 800a46a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a46e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a472:	b29a      	uxth	r2, r3
 800a474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a476:	801a      	strh	r2, [r3, #0]
 800a478:	e017      	b.n	800a4aa <USB_ActivateEndpoint+0x2fe>
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	691b      	ldr	r3, [r3, #16]
 800a47e:	085b      	lsrs	r3, r3, #1
 800a480:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	691b      	ldr	r3, [r3, #16]
 800a486:	f003 0301 	and.w	r3, r3, #1
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d002      	beq.n	800a494 <USB_ActivateEndpoint+0x2e8>
 800a48e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a490:	3301      	adds	r3, #1
 800a492:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a496:	881b      	ldrh	r3, [r3, #0]
 800a498:	b29a      	uxth	r2, r3
 800a49a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a49c:	b29b      	uxth	r3, r3
 800a49e:	029b      	lsls	r3, r3, #10
 800a4a0:	b29b      	uxth	r3, r3
 800a4a2:	4313      	orrs	r3, r2
 800a4a4:	b29a      	uxth	r2, r3
 800a4a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4a8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a4aa:	687a      	ldr	r2, [r7, #4]
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	781b      	ldrb	r3, [r3, #0]
 800a4b0:	009b      	lsls	r3, r3, #2
 800a4b2:	4413      	add	r3, r2
 800a4b4:	881b      	ldrh	r3, [r3, #0]
 800a4b6:	847b      	strh	r3, [r7, #34]	@ 0x22
 800a4b8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a4ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d01b      	beq.n	800a4fa <USB_ActivateEndpoint+0x34e>
 800a4c2:	687a      	ldr	r2, [r7, #4]
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	781b      	ldrb	r3, [r3, #0]
 800a4c8:	009b      	lsls	r3, r3, #2
 800a4ca:	4413      	add	r3, r2
 800a4cc:	881b      	ldrh	r3, [r3, #0]
 800a4ce:	b29b      	uxth	r3, r3
 800a4d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a4d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a4d8:	843b      	strh	r3, [r7, #32]
 800a4da:	687a      	ldr	r2, [r7, #4]
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	781b      	ldrb	r3, [r3, #0]
 800a4e0:	009b      	lsls	r3, r3, #2
 800a4e2:	441a      	add	r2, r3
 800a4e4:	8c3b      	ldrh	r3, [r7, #32]
 800a4e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a4ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a4ee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a4f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a4f6:	b29b      	uxth	r3, r3
 800a4f8:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	781b      	ldrb	r3, [r3, #0]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d124      	bne.n	800a54c <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a502:	687a      	ldr	r2, [r7, #4]
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	781b      	ldrb	r3, [r3, #0]
 800a508:	009b      	lsls	r3, r3, #2
 800a50a:	4413      	add	r3, r2
 800a50c:	881b      	ldrh	r3, [r3, #0]
 800a50e:	b29b      	uxth	r3, r3
 800a510:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a514:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a518:	83bb      	strh	r3, [r7, #28]
 800a51a:	8bbb      	ldrh	r3, [r7, #28]
 800a51c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a520:	83bb      	strh	r3, [r7, #28]
 800a522:	8bbb      	ldrh	r3, [r7, #28]
 800a524:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a528:	83bb      	strh	r3, [r7, #28]
 800a52a:	687a      	ldr	r2, [r7, #4]
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	781b      	ldrb	r3, [r3, #0]
 800a530:	009b      	lsls	r3, r3, #2
 800a532:	441a      	add	r2, r3
 800a534:	8bbb      	ldrh	r3, [r7, #28]
 800a536:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a53a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a53e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a542:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a546:	b29b      	uxth	r3, r3
 800a548:	8013      	strh	r3, [r2, #0]
 800a54a:	e1ea      	b.n	800a922 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800a54c:	687a      	ldr	r2, [r7, #4]
 800a54e:	683b      	ldr	r3, [r7, #0]
 800a550:	781b      	ldrb	r3, [r3, #0]
 800a552:	009b      	lsls	r3, r3, #2
 800a554:	4413      	add	r3, r2
 800a556:	881b      	ldrh	r3, [r3, #0]
 800a558:	b29b      	uxth	r3, r3
 800a55a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a55e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a562:	83fb      	strh	r3, [r7, #30]
 800a564:	8bfb      	ldrh	r3, [r7, #30]
 800a566:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a56a:	83fb      	strh	r3, [r7, #30]
 800a56c:	687a      	ldr	r2, [r7, #4]
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	781b      	ldrb	r3, [r3, #0]
 800a572:	009b      	lsls	r3, r3, #2
 800a574:	441a      	add	r2, r3
 800a576:	8bfb      	ldrh	r3, [r7, #30]
 800a578:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a57c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a580:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a584:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a588:	b29b      	uxth	r3, r3
 800a58a:	8013      	strh	r3, [r2, #0]
 800a58c:	e1c9      	b.n	800a922 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	78db      	ldrb	r3, [r3, #3]
 800a592:	2b02      	cmp	r3, #2
 800a594:	d11e      	bne.n	800a5d4 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a596:	687a      	ldr	r2, [r7, #4]
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	781b      	ldrb	r3, [r3, #0]
 800a59c:	009b      	lsls	r3, r3, #2
 800a59e:	4413      	add	r3, r2
 800a5a0:	881b      	ldrh	r3, [r3, #0]
 800a5a2:	b29b      	uxth	r3, r3
 800a5a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a5a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a5ac:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800a5b0:	687a      	ldr	r2, [r7, #4]
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	781b      	ldrb	r3, [r3, #0]
 800a5b6:	009b      	lsls	r3, r3, #2
 800a5b8:	441a      	add	r2, r3
 800a5ba:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800a5be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a5c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a5c6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800a5ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a5ce:	b29b      	uxth	r3, r3
 800a5d0:	8013      	strh	r3, [r2, #0]
 800a5d2:	e01d      	b.n	800a610 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800a5d4:	687a      	ldr	r2, [r7, #4]
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	781b      	ldrb	r3, [r3, #0]
 800a5da:	009b      	lsls	r3, r3, #2
 800a5dc:	4413      	add	r3, r2
 800a5de:	881b      	ldrh	r3, [r3, #0]
 800a5e0:	b29b      	uxth	r3, r3
 800a5e2:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800a5e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a5ea:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800a5ee:	687a      	ldr	r2, [r7, #4]
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	781b      	ldrb	r3, [r3, #0]
 800a5f4:	009b      	lsls	r3, r3, #2
 800a5f6:	441a      	add	r2, r3
 800a5f8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800a5fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a600:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a604:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a608:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a60c:	b29b      	uxth	r3, r3
 800a60e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a61a:	b29b      	uxth	r3, r3
 800a61c:	461a      	mov	r2, r3
 800a61e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a620:	4413      	add	r3, r2
 800a622:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	781b      	ldrb	r3, [r3, #0]
 800a628:	00da      	lsls	r2, r3, #3
 800a62a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a62c:	4413      	add	r3, r2
 800a62e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a632:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	891b      	ldrh	r3, [r3, #8]
 800a638:	085b      	lsrs	r3, r3, #1
 800a63a:	b29b      	uxth	r3, r3
 800a63c:	005b      	lsls	r3, r3, #1
 800a63e:	b29a      	uxth	r2, r3
 800a640:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a642:	801a      	strh	r2, [r3, #0]
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	657b      	str	r3, [r7, #84]	@ 0x54
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a64e:	b29b      	uxth	r3, r3
 800a650:	461a      	mov	r2, r3
 800a652:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a654:	4413      	add	r3, r2
 800a656:	657b      	str	r3, [r7, #84]	@ 0x54
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	781b      	ldrb	r3, [r3, #0]
 800a65c:	00da      	lsls	r2, r3, #3
 800a65e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a660:	4413      	add	r3, r2
 800a662:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a666:	653b      	str	r3, [r7, #80]	@ 0x50
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	895b      	ldrh	r3, [r3, #10]
 800a66c:	085b      	lsrs	r3, r3, #1
 800a66e:	b29b      	uxth	r3, r3
 800a670:	005b      	lsls	r3, r3, #1
 800a672:	b29a      	uxth	r2, r3
 800a674:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a676:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	785b      	ldrb	r3, [r3, #1]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	f040 8093 	bne.w	800a7a8 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a682:	687a      	ldr	r2, [r7, #4]
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	781b      	ldrb	r3, [r3, #0]
 800a688:	009b      	lsls	r3, r3, #2
 800a68a:	4413      	add	r3, r2
 800a68c:	881b      	ldrh	r3, [r3, #0]
 800a68e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800a692:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800a696:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d01b      	beq.n	800a6d6 <USB_ActivateEndpoint+0x52a>
 800a69e:	687a      	ldr	r2, [r7, #4]
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	781b      	ldrb	r3, [r3, #0]
 800a6a4:	009b      	lsls	r3, r3, #2
 800a6a6:	4413      	add	r3, r2
 800a6a8:	881b      	ldrh	r3, [r3, #0]
 800a6aa:	b29b      	uxth	r3, r3
 800a6ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a6b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a6b4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800a6b6:	687a      	ldr	r2, [r7, #4]
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	781b      	ldrb	r3, [r3, #0]
 800a6bc:	009b      	lsls	r3, r3, #2
 800a6be:	441a      	add	r2, r3
 800a6c0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a6c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a6c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a6ca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a6ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a6d2:	b29b      	uxth	r3, r3
 800a6d4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a6d6:	687a      	ldr	r2, [r7, #4]
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	781b      	ldrb	r3, [r3, #0]
 800a6dc:	009b      	lsls	r3, r3, #2
 800a6de:	4413      	add	r3, r2
 800a6e0:	881b      	ldrh	r3, [r3, #0]
 800a6e2:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800a6e4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800a6e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d01b      	beq.n	800a726 <USB_ActivateEndpoint+0x57a>
 800a6ee:	687a      	ldr	r2, [r7, #4]
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	781b      	ldrb	r3, [r3, #0]
 800a6f4:	009b      	lsls	r3, r3, #2
 800a6f6:	4413      	add	r3, r2
 800a6f8:	881b      	ldrh	r3, [r3, #0]
 800a6fa:	b29b      	uxth	r3, r3
 800a6fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a700:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a704:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800a706:	687a      	ldr	r2, [r7, #4]
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	781b      	ldrb	r3, [r3, #0]
 800a70c:	009b      	lsls	r3, r3, #2
 800a70e:	441a      	add	r2, r3
 800a710:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800a712:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a716:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a71a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a71e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a722:	b29b      	uxth	r3, r3
 800a724:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a726:	687a      	ldr	r2, [r7, #4]
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	781b      	ldrb	r3, [r3, #0]
 800a72c:	009b      	lsls	r3, r3, #2
 800a72e:	4413      	add	r3, r2
 800a730:	881b      	ldrh	r3, [r3, #0]
 800a732:	b29b      	uxth	r3, r3
 800a734:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a738:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a73c:	873b      	strh	r3, [r7, #56]	@ 0x38
 800a73e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800a740:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a744:	873b      	strh	r3, [r7, #56]	@ 0x38
 800a746:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800a748:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a74c:	873b      	strh	r3, [r7, #56]	@ 0x38
 800a74e:	687a      	ldr	r2, [r7, #4]
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	781b      	ldrb	r3, [r3, #0]
 800a754:	009b      	lsls	r3, r3, #2
 800a756:	441a      	add	r2, r3
 800a758:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800a75a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a75e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a762:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a766:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a76a:	b29b      	uxth	r3, r3
 800a76c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a76e:	687a      	ldr	r2, [r7, #4]
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	781b      	ldrb	r3, [r3, #0]
 800a774:	009b      	lsls	r3, r3, #2
 800a776:	4413      	add	r3, r2
 800a778:	881b      	ldrh	r3, [r3, #0]
 800a77a:	b29b      	uxth	r3, r3
 800a77c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a780:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a784:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800a786:	687a      	ldr	r2, [r7, #4]
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	781b      	ldrb	r3, [r3, #0]
 800a78c:	009b      	lsls	r3, r3, #2
 800a78e:	441a      	add	r2, r3
 800a790:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a792:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a796:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a79a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a79e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a7a2:	b29b      	uxth	r3, r3
 800a7a4:	8013      	strh	r3, [r2, #0]
 800a7a6:	e0bc      	b.n	800a922 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a7a8:	687a      	ldr	r2, [r7, #4]
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	781b      	ldrb	r3, [r3, #0]
 800a7ae:	009b      	lsls	r3, r3, #2
 800a7b0:	4413      	add	r3, r2
 800a7b2:	881b      	ldrh	r3, [r3, #0]
 800a7b4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800a7b8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800a7bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d01d      	beq.n	800a800 <USB_ActivateEndpoint+0x654>
 800a7c4:	687a      	ldr	r2, [r7, #4]
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	781b      	ldrb	r3, [r3, #0]
 800a7ca:	009b      	lsls	r3, r3, #2
 800a7cc:	4413      	add	r3, r2
 800a7ce:	881b      	ldrh	r3, [r3, #0]
 800a7d0:	b29b      	uxth	r3, r3
 800a7d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a7d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a7da:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800a7de:	687a      	ldr	r2, [r7, #4]
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	781b      	ldrb	r3, [r3, #0]
 800a7e4:	009b      	lsls	r3, r3, #2
 800a7e6:	441a      	add	r2, r3
 800a7e8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800a7ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a7f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a7f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a7f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a7fc:	b29b      	uxth	r3, r3
 800a7fe:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a800:	687a      	ldr	r2, [r7, #4]
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	781b      	ldrb	r3, [r3, #0]
 800a806:	009b      	lsls	r3, r3, #2
 800a808:	4413      	add	r3, r2
 800a80a:	881b      	ldrh	r3, [r3, #0]
 800a80c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800a810:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800a814:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d01d      	beq.n	800a858 <USB_ActivateEndpoint+0x6ac>
 800a81c:	687a      	ldr	r2, [r7, #4]
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	781b      	ldrb	r3, [r3, #0]
 800a822:	009b      	lsls	r3, r3, #2
 800a824:	4413      	add	r3, r2
 800a826:	881b      	ldrh	r3, [r3, #0]
 800a828:	b29b      	uxth	r3, r3
 800a82a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a82e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a832:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800a836:	687a      	ldr	r2, [r7, #4]
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	781b      	ldrb	r3, [r3, #0]
 800a83c:	009b      	lsls	r3, r3, #2
 800a83e:	441a      	add	r2, r3
 800a840:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800a844:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a848:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a84c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a850:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a854:	b29b      	uxth	r3, r3
 800a856:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	78db      	ldrb	r3, [r3, #3]
 800a85c:	2b01      	cmp	r3, #1
 800a85e:	d024      	beq.n	800a8aa <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a860:	687a      	ldr	r2, [r7, #4]
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	781b      	ldrb	r3, [r3, #0]
 800a866:	009b      	lsls	r3, r3, #2
 800a868:	4413      	add	r3, r2
 800a86a:	881b      	ldrh	r3, [r3, #0]
 800a86c:	b29b      	uxth	r3, r3
 800a86e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a872:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a876:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800a87a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800a87e:	f083 0320 	eor.w	r3, r3, #32
 800a882:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800a886:	687a      	ldr	r2, [r7, #4]
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	781b      	ldrb	r3, [r3, #0]
 800a88c:	009b      	lsls	r3, r3, #2
 800a88e:	441a      	add	r2, r3
 800a890:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800a894:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a898:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a89c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a8a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a8a4:	b29b      	uxth	r3, r3
 800a8a6:	8013      	strh	r3, [r2, #0]
 800a8a8:	e01d      	b.n	800a8e6 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a8aa:	687a      	ldr	r2, [r7, #4]
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	781b      	ldrb	r3, [r3, #0]
 800a8b0:	009b      	lsls	r3, r3, #2
 800a8b2:	4413      	add	r3, r2
 800a8b4:	881b      	ldrh	r3, [r3, #0]
 800a8b6:	b29b      	uxth	r3, r3
 800a8b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a8bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a8c0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800a8c4:	687a      	ldr	r2, [r7, #4]
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	781b      	ldrb	r3, [r3, #0]
 800a8ca:	009b      	lsls	r3, r3, #2
 800a8cc:	441a      	add	r2, r3
 800a8ce:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a8d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a8d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a8da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a8de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a8e2:	b29b      	uxth	r3, r3
 800a8e4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a8e6:	687a      	ldr	r2, [r7, #4]
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	781b      	ldrb	r3, [r3, #0]
 800a8ec:	009b      	lsls	r3, r3, #2
 800a8ee:	4413      	add	r3, r2
 800a8f0:	881b      	ldrh	r3, [r3, #0]
 800a8f2:	b29b      	uxth	r3, r3
 800a8f4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a8f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a8fc:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800a900:	687a      	ldr	r2, [r7, #4]
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	781b      	ldrb	r3, [r3, #0]
 800a906:	009b      	lsls	r3, r3, #2
 800a908:	441a      	add	r2, r3
 800a90a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a90e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a912:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a916:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a91a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a91e:	b29b      	uxth	r3, r3
 800a920:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800a922:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800a926:	4618      	mov	r0, r3
 800a928:	3774      	adds	r7, #116	@ 0x74
 800a92a:	46bd      	mov	sp, r7
 800a92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a930:	4770      	bx	lr
 800a932:	bf00      	nop

0800a934 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a934:	b480      	push	{r7}
 800a936:	b08d      	sub	sp, #52	@ 0x34
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
 800a93c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	7b1b      	ldrb	r3, [r3, #12]
 800a942:	2b00      	cmp	r3, #0
 800a944:	f040 808e 	bne.w	800aa64 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	785b      	ldrb	r3, [r3, #1]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d044      	beq.n	800a9da <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a950:	687a      	ldr	r2, [r7, #4]
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	781b      	ldrb	r3, [r3, #0]
 800a956:	009b      	lsls	r3, r3, #2
 800a958:	4413      	add	r3, r2
 800a95a:	881b      	ldrh	r3, [r3, #0]
 800a95c:	81bb      	strh	r3, [r7, #12]
 800a95e:	89bb      	ldrh	r3, [r7, #12]
 800a960:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a964:	2b00      	cmp	r3, #0
 800a966:	d01b      	beq.n	800a9a0 <USB_DeactivateEndpoint+0x6c>
 800a968:	687a      	ldr	r2, [r7, #4]
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	781b      	ldrb	r3, [r3, #0]
 800a96e:	009b      	lsls	r3, r3, #2
 800a970:	4413      	add	r3, r2
 800a972:	881b      	ldrh	r3, [r3, #0]
 800a974:	b29b      	uxth	r3, r3
 800a976:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a97a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a97e:	817b      	strh	r3, [r7, #10]
 800a980:	687a      	ldr	r2, [r7, #4]
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	781b      	ldrb	r3, [r3, #0]
 800a986:	009b      	lsls	r3, r3, #2
 800a988:	441a      	add	r2, r3
 800a98a:	897b      	ldrh	r3, [r7, #10]
 800a98c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a990:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a994:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a998:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a99c:	b29b      	uxth	r3, r3
 800a99e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a9a0:	687a      	ldr	r2, [r7, #4]
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	781b      	ldrb	r3, [r3, #0]
 800a9a6:	009b      	lsls	r3, r3, #2
 800a9a8:	4413      	add	r3, r2
 800a9aa:	881b      	ldrh	r3, [r3, #0]
 800a9ac:	b29b      	uxth	r3, r3
 800a9ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a9b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a9b6:	813b      	strh	r3, [r7, #8]
 800a9b8:	687a      	ldr	r2, [r7, #4]
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	781b      	ldrb	r3, [r3, #0]
 800a9be:	009b      	lsls	r3, r3, #2
 800a9c0:	441a      	add	r2, r3
 800a9c2:	893b      	ldrh	r3, [r7, #8]
 800a9c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a9c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a9cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a9d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a9d4:	b29b      	uxth	r3, r3
 800a9d6:	8013      	strh	r3, [r2, #0]
 800a9d8:	e192      	b.n	800ad00 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a9da:	687a      	ldr	r2, [r7, #4]
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	781b      	ldrb	r3, [r3, #0]
 800a9e0:	009b      	lsls	r3, r3, #2
 800a9e2:	4413      	add	r3, r2
 800a9e4:	881b      	ldrh	r3, [r3, #0]
 800a9e6:	827b      	strh	r3, [r7, #18]
 800a9e8:	8a7b      	ldrh	r3, [r7, #18]
 800a9ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d01b      	beq.n	800aa2a <USB_DeactivateEndpoint+0xf6>
 800a9f2:	687a      	ldr	r2, [r7, #4]
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	781b      	ldrb	r3, [r3, #0]
 800a9f8:	009b      	lsls	r3, r3, #2
 800a9fa:	4413      	add	r3, r2
 800a9fc:	881b      	ldrh	r3, [r3, #0]
 800a9fe:	b29b      	uxth	r3, r3
 800aa00:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aa04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa08:	823b      	strh	r3, [r7, #16]
 800aa0a:	687a      	ldr	r2, [r7, #4]
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	781b      	ldrb	r3, [r3, #0]
 800aa10:	009b      	lsls	r3, r3, #2
 800aa12:	441a      	add	r2, r3
 800aa14:	8a3b      	ldrh	r3, [r7, #16]
 800aa16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aa1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aa1e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800aa22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa26:	b29b      	uxth	r3, r3
 800aa28:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800aa2a:	687a      	ldr	r2, [r7, #4]
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	781b      	ldrb	r3, [r3, #0]
 800aa30:	009b      	lsls	r3, r3, #2
 800aa32:	4413      	add	r3, r2
 800aa34:	881b      	ldrh	r3, [r3, #0]
 800aa36:	b29b      	uxth	r3, r3
 800aa38:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800aa3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa40:	81fb      	strh	r3, [r7, #14]
 800aa42:	687a      	ldr	r2, [r7, #4]
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	781b      	ldrb	r3, [r3, #0]
 800aa48:	009b      	lsls	r3, r3, #2
 800aa4a:	441a      	add	r2, r3
 800aa4c:	89fb      	ldrh	r3, [r7, #14]
 800aa4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aa52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aa56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aa5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa5e:	b29b      	uxth	r3, r3
 800aa60:	8013      	strh	r3, [r2, #0]
 800aa62:	e14d      	b.n	800ad00 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	785b      	ldrb	r3, [r3, #1]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	f040 80a5 	bne.w	800abb8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800aa6e:	687a      	ldr	r2, [r7, #4]
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	781b      	ldrb	r3, [r3, #0]
 800aa74:	009b      	lsls	r3, r3, #2
 800aa76:	4413      	add	r3, r2
 800aa78:	881b      	ldrh	r3, [r3, #0]
 800aa7a:	843b      	strh	r3, [r7, #32]
 800aa7c:	8c3b      	ldrh	r3, [r7, #32]
 800aa7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d01b      	beq.n	800aabe <USB_DeactivateEndpoint+0x18a>
 800aa86:	687a      	ldr	r2, [r7, #4]
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	781b      	ldrb	r3, [r3, #0]
 800aa8c:	009b      	lsls	r3, r3, #2
 800aa8e:	4413      	add	r3, r2
 800aa90:	881b      	ldrh	r3, [r3, #0]
 800aa92:	b29b      	uxth	r3, r3
 800aa94:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aa98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa9c:	83fb      	strh	r3, [r7, #30]
 800aa9e:	687a      	ldr	r2, [r7, #4]
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	781b      	ldrb	r3, [r3, #0]
 800aaa4:	009b      	lsls	r3, r3, #2
 800aaa6:	441a      	add	r2, r3
 800aaa8:	8bfb      	ldrh	r3, [r7, #30]
 800aaaa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aaae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aab2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800aab6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aaba:	b29b      	uxth	r3, r3
 800aabc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800aabe:	687a      	ldr	r2, [r7, #4]
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	781b      	ldrb	r3, [r3, #0]
 800aac4:	009b      	lsls	r3, r3, #2
 800aac6:	4413      	add	r3, r2
 800aac8:	881b      	ldrh	r3, [r3, #0]
 800aaca:	83bb      	strh	r3, [r7, #28]
 800aacc:	8bbb      	ldrh	r3, [r7, #28]
 800aace:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d01b      	beq.n	800ab0e <USB_DeactivateEndpoint+0x1da>
 800aad6:	687a      	ldr	r2, [r7, #4]
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	781b      	ldrb	r3, [r3, #0]
 800aadc:	009b      	lsls	r3, r3, #2
 800aade:	4413      	add	r3, r2
 800aae0:	881b      	ldrh	r3, [r3, #0]
 800aae2:	b29b      	uxth	r3, r3
 800aae4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aae8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aaec:	837b      	strh	r3, [r7, #26]
 800aaee:	687a      	ldr	r2, [r7, #4]
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	781b      	ldrb	r3, [r3, #0]
 800aaf4:	009b      	lsls	r3, r3, #2
 800aaf6:	441a      	add	r2, r3
 800aaf8:	8b7b      	ldrh	r3, [r7, #26]
 800aafa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aafe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ab02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ab06:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ab0a:	b29b      	uxth	r3, r3
 800ab0c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800ab0e:	687a      	ldr	r2, [r7, #4]
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	781b      	ldrb	r3, [r3, #0]
 800ab14:	009b      	lsls	r3, r3, #2
 800ab16:	4413      	add	r3, r2
 800ab18:	881b      	ldrh	r3, [r3, #0]
 800ab1a:	b29b      	uxth	r3, r3
 800ab1c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ab20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab24:	833b      	strh	r3, [r7, #24]
 800ab26:	687a      	ldr	r2, [r7, #4]
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	781b      	ldrb	r3, [r3, #0]
 800ab2c:	009b      	lsls	r3, r3, #2
 800ab2e:	441a      	add	r2, r3
 800ab30:	8b3b      	ldrh	r3, [r7, #24]
 800ab32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ab36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ab3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ab3e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ab42:	b29b      	uxth	r3, r3
 800ab44:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ab46:	687a      	ldr	r2, [r7, #4]
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	781b      	ldrb	r3, [r3, #0]
 800ab4c:	009b      	lsls	r3, r3, #2
 800ab4e:	4413      	add	r3, r2
 800ab50:	881b      	ldrh	r3, [r3, #0]
 800ab52:	b29b      	uxth	r3, r3
 800ab54:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ab58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab5c:	82fb      	strh	r3, [r7, #22]
 800ab5e:	687a      	ldr	r2, [r7, #4]
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	781b      	ldrb	r3, [r3, #0]
 800ab64:	009b      	lsls	r3, r3, #2
 800ab66:	441a      	add	r2, r3
 800ab68:	8afb      	ldrh	r3, [r7, #22]
 800ab6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ab6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ab72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ab76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab7a:	b29b      	uxth	r3, r3
 800ab7c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ab7e:	687a      	ldr	r2, [r7, #4]
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	781b      	ldrb	r3, [r3, #0]
 800ab84:	009b      	lsls	r3, r3, #2
 800ab86:	4413      	add	r3, r2
 800ab88:	881b      	ldrh	r3, [r3, #0]
 800ab8a:	b29b      	uxth	r3, r3
 800ab8c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ab90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ab94:	82bb      	strh	r3, [r7, #20]
 800ab96:	687a      	ldr	r2, [r7, #4]
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	781b      	ldrb	r3, [r3, #0]
 800ab9c:	009b      	lsls	r3, r3, #2
 800ab9e:	441a      	add	r2, r3
 800aba0:	8abb      	ldrh	r3, [r7, #20]
 800aba2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aba6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800abaa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800abae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800abb2:	b29b      	uxth	r3, r3
 800abb4:	8013      	strh	r3, [r2, #0]
 800abb6:	e0a3      	b.n	800ad00 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800abb8:	687a      	ldr	r2, [r7, #4]
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	781b      	ldrb	r3, [r3, #0]
 800abbe:	009b      	lsls	r3, r3, #2
 800abc0:	4413      	add	r3, r2
 800abc2:	881b      	ldrh	r3, [r3, #0]
 800abc4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800abc6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800abc8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d01b      	beq.n	800ac08 <USB_DeactivateEndpoint+0x2d4>
 800abd0:	687a      	ldr	r2, [r7, #4]
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	781b      	ldrb	r3, [r3, #0]
 800abd6:	009b      	lsls	r3, r3, #2
 800abd8:	4413      	add	r3, r2
 800abda:	881b      	ldrh	r3, [r3, #0]
 800abdc:	b29b      	uxth	r3, r3
 800abde:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800abe2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800abe6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800abe8:	687a      	ldr	r2, [r7, #4]
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	781b      	ldrb	r3, [r3, #0]
 800abee:	009b      	lsls	r3, r3, #2
 800abf0:	441a      	add	r2, r3
 800abf2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800abf4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800abf8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800abfc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ac00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac04:	b29b      	uxth	r3, r3
 800ac06:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ac08:	687a      	ldr	r2, [r7, #4]
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	781b      	ldrb	r3, [r3, #0]
 800ac0e:	009b      	lsls	r3, r3, #2
 800ac10:	4413      	add	r3, r2
 800ac12:	881b      	ldrh	r3, [r3, #0]
 800ac14:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800ac16:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ac18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d01b      	beq.n	800ac58 <USB_DeactivateEndpoint+0x324>
 800ac20:	687a      	ldr	r2, [r7, #4]
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	781b      	ldrb	r3, [r3, #0]
 800ac26:	009b      	lsls	r3, r3, #2
 800ac28:	4413      	add	r3, r2
 800ac2a:	881b      	ldrh	r3, [r3, #0]
 800ac2c:	b29b      	uxth	r3, r3
 800ac2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ac32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac36:	853b      	strh	r3, [r7, #40]	@ 0x28
 800ac38:	687a      	ldr	r2, [r7, #4]
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	781b      	ldrb	r3, [r3, #0]
 800ac3e:	009b      	lsls	r3, r3, #2
 800ac40:	441a      	add	r2, r3
 800ac42:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ac44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ac48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ac4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ac50:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ac54:	b29b      	uxth	r3, r3
 800ac56:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800ac58:	687a      	ldr	r2, [r7, #4]
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	781b      	ldrb	r3, [r3, #0]
 800ac5e:	009b      	lsls	r3, r3, #2
 800ac60:	4413      	add	r3, r2
 800ac62:	881b      	ldrh	r3, [r3, #0]
 800ac64:	b29b      	uxth	r3, r3
 800ac66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ac6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac6e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800ac70:	687a      	ldr	r2, [r7, #4]
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	781b      	ldrb	r3, [r3, #0]
 800ac76:	009b      	lsls	r3, r3, #2
 800ac78:	441a      	add	r2, r3
 800ac7a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ac7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ac80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ac84:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ac88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac8c:	b29b      	uxth	r3, r3
 800ac8e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ac90:	687a      	ldr	r2, [r7, #4]
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	781b      	ldrb	r3, [r3, #0]
 800ac96:	009b      	lsls	r3, r3, #2
 800ac98:	4413      	add	r3, r2
 800ac9a:	881b      	ldrh	r3, [r3, #0]
 800ac9c:	b29b      	uxth	r3, r3
 800ac9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aca2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aca6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800aca8:	687a      	ldr	r2, [r7, #4]
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	781b      	ldrb	r3, [r3, #0]
 800acae:	009b      	lsls	r3, r3, #2
 800acb0:	441a      	add	r2, r3
 800acb2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800acb4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800acb8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800acbc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800acc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800acc4:	b29b      	uxth	r3, r3
 800acc6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800acc8:	687a      	ldr	r2, [r7, #4]
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	781b      	ldrb	r3, [r3, #0]
 800acce:	009b      	lsls	r3, r3, #2
 800acd0:	4413      	add	r3, r2
 800acd2:	881b      	ldrh	r3, [r3, #0]
 800acd4:	b29b      	uxth	r3, r3
 800acd6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800acda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800acde:	847b      	strh	r3, [r7, #34]	@ 0x22
 800ace0:	687a      	ldr	r2, [r7, #4]
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	781b      	ldrb	r3, [r3, #0]
 800ace6:	009b      	lsls	r3, r3, #2
 800ace8:	441a      	add	r2, r3
 800acea:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800acec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800acf0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800acf4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800acf8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800acfc:	b29b      	uxth	r3, r3
 800acfe:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800ad00:	2300      	movs	r3, #0
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	3734      	adds	r7, #52	@ 0x34
 800ad06:	46bd      	mov	sp, r7
 800ad08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0c:	4770      	bx	lr

0800ad0e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ad0e:	b580      	push	{r7, lr}
 800ad10:	b0c2      	sub	sp, #264	@ 0x108
 800ad12:	af00      	add	r7, sp, #0
 800ad14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad18:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ad1c:	6018      	str	r0, [r3, #0]
 800ad1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad26:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ad28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	785b      	ldrb	r3, [r3, #1]
 800ad34:	2b01      	cmp	r3, #1
 800ad36:	f040 86b7 	bne.w	800baa8 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800ad3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	699a      	ldr	r2, [r3, #24]
 800ad46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	691b      	ldr	r3, [r3, #16]
 800ad52:	429a      	cmp	r2, r3
 800ad54:	d908      	bls.n	800ad68 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800ad56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	691b      	ldr	r3, [r3, #16]
 800ad62:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800ad66:	e007      	b.n	800ad78 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800ad68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	699b      	ldr	r3, [r3, #24]
 800ad74:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800ad78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	7b1b      	ldrb	r3, [r3, #12]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d13a      	bne.n	800adfe <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800ad88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	6959      	ldr	r1, [r3, #20]
 800ad94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	88da      	ldrh	r2, [r3, #6]
 800ada0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ada4:	b29b      	uxth	r3, r3
 800ada6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800adaa:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800adae:	6800      	ldr	r0, [r0, #0]
 800adb0:	f001 fc98 	bl	800c6e4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800adb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800adb8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	613b      	str	r3, [r7, #16]
 800adc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800adc4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800adce:	b29b      	uxth	r3, r3
 800add0:	461a      	mov	r2, r3
 800add2:	693b      	ldr	r3, [r7, #16]
 800add4:	4413      	add	r3, r2
 800add6:	613b      	str	r3, [r7, #16]
 800add8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800addc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	781b      	ldrb	r3, [r3, #0]
 800ade4:	00da      	lsls	r2, r3, #3
 800ade6:	693b      	ldr	r3, [r7, #16]
 800ade8:	4413      	add	r3, r2
 800adea:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800adee:	60fb      	str	r3, [r7, #12]
 800adf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adf4:	b29a      	uxth	r2, r3
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	801a      	strh	r2, [r3, #0]
 800adfa:	f000 be1f 	b.w	800ba3c <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800adfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	78db      	ldrb	r3, [r3, #3]
 800ae0a:	2b02      	cmp	r3, #2
 800ae0c:	f040 8462 	bne.w	800b6d4 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800ae10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	6a1a      	ldr	r2, [r3, #32]
 800ae1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	691b      	ldr	r3, [r3, #16]
 800ae28:	429a      	cmp	r2, r3
 800ae2a:	f240 83df 	bls.w	800b5ec <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800ae2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ae36:	681a      	ldr	r2, [r3, #0]
 800ae38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	781b      	ldrb	r3, [r3, #0]
 800ae44:	009b      	lsls	r3, r3, #2
 800ae46:	4413      	add	r3, r2
 800ae48:	881b      	ldrh	r3, [r3, #0]
 800ae4a:	b29b      	uxth	r3, r3
 800ae4c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ae50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae54:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800ae58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae5c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ae60:	681a      	ldr	r2, [r3, #0]
 800ae62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	781b      	ldrb	r3, [r3, #0]
 800ae6e:	009b      	lsls	r3, r3, #2
 800ae70:	441a      	add	r2, r3
 800ae72:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800ae76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ae7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ae7e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800ae82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae86:	b29b      	uxth	r3, r3
 800ae88:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800ae8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	6a1a      	ldr	r2, [r3, #32]
 800ae96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae9a:	1ad2      	subs	r2, r2, r3
 800ae9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aea0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800aea8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aeac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aeb0:	681a      	ldr	r2, [r3, #0]
 800aeb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aeb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	781b      	ldrb	r3, [r3, #0]
 800aebe:	009b      	lsls	r3, r3, #2
 800aec0:	4413      	add	r3, r2
 800aec2:	881b      	ldrh	r3, [r3, #0]
 800aec4:	b29b      	uxth	r3, r3
 800aec6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	f000 81c7 	beq.w	800b25e <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800aed0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aed4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	633b      	str	r3, [r7, #48]	@ 0x30
 800aedc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aee0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	785b      	ldrb	r3, [r3, #1]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d177      	bne.n	800afdc <USB_EPStartXfer+0x2ce>
 800aeec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aef0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800aef8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aefc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800af06:	b29b      	uxth	r3, r3
 800af08:	461a      	mov	r2, r3
 800af0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af0c:	4413      	add	r3, r2
 800af0e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800af10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	781b      	ldrb	r3, [r3, #0]
 800af1c:	00da      	lsls	r2, r3, #3
 800af1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af20:	4413      	add	r3, r2
 800af22:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800af26:	627b      	str	r3, [r7, #36]	@ 0x24
 800af28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af2a:	881b      	ldrh	r3, [r3, #0]
 800af2c:	b29b      	uxth	r3, r3
 800af2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800af32:	b29a      	uxth	r2, r3
 800af34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af36:	801a      	strh	r2, [r3, #0]
 800af38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af3c:	2b3e      	cmp	r3, #62	@ 0x3e
 800af3e:	d921      	bls.n	800af84 <USB_EPStartXfer+0x276>
 800af40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af44:	095b      	lsrs	r3, r3, #5
 800af46:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800af4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af4e:	f003 031f 	and.w	r3, r3, #31
 800af52:	2b00      	cmp	r3, #0
 800af54:	d104      	bne.n	800af60 <USB_EPStartXfer+0x252>
 800af56:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800af5a:	3b01      	subs	r3, #1
 800af5c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800af60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af62:	881b      	ldrh	r3, [r3, #0]
 800af64:	b29a      	uxth	r2, r3
 800af66:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800af6a:	b29b      	uxth	r3, r3
 800af6c:	029b      	lsls	r3, r3, #10
 800af6e:	b29b      	uxth	r3, r3
 800af70:	4313      	orrs	r3, r2
 800af72:	b29b      	uxth	r3, r3
 800af74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af7c:	b29a      	uxth	r2, r3
 800af7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af80:	801a      	strh	r2, [r3, #0]
 800af82:	e050      	b.n	800b026 <USB_EPStartXfer+0x318>
 800af84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d10a      	bne.n	800afa2 <USB_EPStartXfer+0x294>
 800af8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af8e:	881b      	ldrh	r3, [r3, #0]
 800af90:	b29b      	uxth	r3, r3
 800af92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af9a:	b29a      	uxth	r2, r3
 800af9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af9e:	801a      	strh	r2, [r3, #0]
 800afa0:	e041      	b.n	800b026 <USB_EPStartXfer+0x318>
 800afa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afa6:	085b      	lsrs	r3, r3, #1
 800afa8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800afac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afb0:	f003 0301 	and.w	r3, r3, #1
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d004      	beq.n	800afc2 <USB_EPStartXfer+0x2b4>
 800afb8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800afbc:	3301      	adds	r3, #1
 800afbe:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800afc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afc4:	881b      	ldrh	r3, [r3, #0]
 800afc6:	b29a      	uxth	r2, r3
 800afc8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800afcc:	b29b      	uxth	r3, r3
 800afce:	029b      	lsls	r3, r3, #10
 800afd0:	b29b      	uxth	r3, r3
 800afd2:	4313      	orrs	r3, r2
 800afd4:	b29a      	uxth	r2, r3
 800afd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afd8:	801a      	strh	r2, [r3, #0]
 800afda:	e024      	b.n	800b026 <USB_EPStartXfer+0x318>
 800afdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800afe0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	785b      	ldrb	r3, [r3, #1]
 800afe8:	2b01      	cmp	r3, #1
 800afea:	d11c      	bne.n	800b026 <USB_EPStartXfer+0x318>
 800afec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aff0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800affa:	b29b      	uxth	r3, r3
 800affc:	461a      	mov	r2, r3
 800affe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b000:	4413      	add	r3, r2
 800b002:	633b      	str	r3, [r7, #48]	@ 0x30
 800b004:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b008:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	781b      	ldrb	r3, [r3, #0]
 800b010:	00da      	lsls	r2, r3, #3
 800b012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b014:	4413      	add	r3, r2
 800b016:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b01a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b01c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b020:	b29a      	uxth	r2, r3
 800b022:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b024:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b026:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b02a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	895b      	ldrh	r3, [r3, #10]
 800b032:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b036:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b03a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	6959      	ldr	r1, [r3, #20]
 800b042:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b046:	b29b      	uxth	r3, r3
 800b048:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b04c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b050:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b054:	6800      	ldr	r0, [r0, #0]
 800b056:	f001 fb45 	bl	800c6e4 <USB_WritePMA>
            ep->xfer_buff += len;
 800b05a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b05e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	695a      	ldr	r2, [r3, #20]
 800b066:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b06a:	441a      	add	r2, r3
 800b06c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b070:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b078:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b07c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	6a1a      	ldr	r2, [r3, #32]
 800b084:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b088:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	691b      	ldr	r3, [r3, #16]
 800b090:	429a      	cmp	r2, r3
 800b092:	d90f      	bls.n	800b0b4 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800b094:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b098:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	6a1a      	ldr	r2, [r3, #32]
 800b0a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b0a4:	1ad2      	subs	r2, r2, r3
 800b0a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	621a      	str	r2, [r3, #32]
 800b0b2:	e00e      	b.n	800b0d2 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800b0b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	6a1b      	ldr	r3, [r3, #32]
 800b0c0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800b0c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b0d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	785b      	ldrb	r3, [r3, #1]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d177      	bne.n	800b1d2 <USB_EPStartXfer+0x4c4>
 800b0e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	61bb      	str	r3, [r7, #24]
 800b0ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b0fc:	b29b      	uxth	r3, r3
 800b0fe:	461a      	mov	r2, r3
 800b100:	69bb      	ldr	r3, [r7, #24]
 800b102:	4413      	add	r3, r2
 800b104:	61bb      	str	r3, [r7, #24]
 800b106:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b10a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	781b      	ldrb	r3, [r3, #0]
 800b112:	00da      	lsls	r2, r3, #3
 800b114:	69bb      	ldr	r3, [r7, #24]
 800b116:	4413      	add	r3, r2
 800b118:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b11c:	617b      	str	r3, [r7, #20]
 800b11e:	697b      	ldr	r3, [r7, #20]
 800b120:	881b      	ldrh	r3, [r3, #0]
 800b122:	b29b      	uxth	r3, r3
 800b124:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b128:	b29a      	uxth	r2, r3
 800b12a:	697b      	ldr	r3, [r7, #20]
 800b12c:	801a      	strh	r2, [r3, #0]
 800b12e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b132:	2b3e      	cmp	r3, #62	@ 0x3e
 800b134:	d921      	bls.n	800b17a <USB_EPStartXfer+0x46c>
 800b136:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b13a:	095b      	lsrs	r3, r3, #5
 800b13c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b140:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b144:	f003 031f 	and.w	r3, r3, #31
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d104      	bne.n	800b156 <USB_EPStartXfer+0x448>
 800b14c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b150:	3b01      	subs	r3, #1
 800b152:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b156:	697b      	ldr	r3, [r7, #20]
 800b158:	881b      	ldrh	r3, [r3, #0]
 800b15a:	b29a      	uxth	r2, r3
 800b15c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b160:	b29b      	uxth	r3, r3
 800b162:	029b      	lsls	r3, r3, #10
 800b164:	b29b      	uxth	r3, r3
 800b166:	4313      	orrs	r3, r2
 800b168:	b29b      	uxth	r3, r3
 800b16a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b16e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b172:	b29a      	uxth	r2, r3
 800b174:	697b      	ldr	r3, [r7, #20]
 800b176:	801a      	strh	r2, [r3, #0]
 800b178:	e056      	b.n	800b228 <USB_EPStartXfer+0x51a>
 800b17a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d10a      	bne.n	800b198 <USB_EPStartXfer+0x48a>
 800b182:	697b      	ldr	r3, [r7, #20]
 800b184:	881b      	ldrh	r3, [r3, #0]
 800b186:	b29b      	uxth	r3, r3
 800b188:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b18c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b190:	b29a      	uxth	r2, r3
 800b192:	697b      	ldr	r3, [r7, #20]
 800b194:	801a      	strh	r2, [r3, #0]
 800b196:	e047      	b.n	800b228 <USB_EPStartXfer+0x51a>
 800b198:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b19c:	085b      	lsrs	r3, r3, #1
 800b19e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b1a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b1a6:	f003 0301 	and.w	r3, r3, #1
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d004      	beq.n	800b1b8 <USB_EPStartXfer+0x4aa>
 800b1ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b1b2:	3301      	adds	r3, #1
 800b1b4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b1b8:	697b      	ldr	r3, [r7, #20]
 800b1ba:	881b      	ldrh	r3, [r3, #0]
 800b1bc:	b29a      	uxth	r2, r3
 800b1be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b1c2:	b29b      	uxth	r3, r3
 800b1c4:	029b      	lsls	r3, r3, #10
 800b1c6:	b29b      	uxth	r3, r3
 800b1c8:	4313      	orrs	r3, r2
 800b1ca:	b29a      	uxth	r2, r3
 800b1cc:	697b      	ldr	r3, [r7, #20]
 800b1ce:	801a      	strh	r2, [r3, #0]
 800b1d0:	e02a      	b.n	800b228 <USB_EPStartXfer+0x51a>
 800b1d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b1d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	785b      	ldrb	r3, [r3, #1]
 800b1de:	2b01      	cmp	r3, #1
 800b1e0:	d122      	bne.n	800b228 <USB_EPStartXfer+0x51a>
 800b1e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b1e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	623b      	str	r3, [r7, #32]
 800b1ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b1f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b1fc:	b29b      	uxth	r3, r3
 800b1fe:	461a      	mov	r2, r3
 800b200:	6a3b      	ldr	r3, [r7, #32]
 800b202:	4413      	add	r3, r2
 800b204:	623b      	str	r3, [r7, #32]
 800b206:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b20a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	781b      	ldrb	r3, [r3, #0]
 800b212:	00da      	lsls	r2, r3, #3
 800b214:	6a3b      	ldr	r3, [r7, #32]
 800b216:	4413      	add	r3, r2
 800b218:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b21c:	61fb      	str	r3, [r7, #28]
 800b21e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b222:	b29a      	uxth	r2, r3
 800b224:	69fb      	ldr	r3, [r7, #28]
 800b226:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b228:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b22c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	891b      	ldrh	r3, [r3, #8]
 800b234:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b238:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b23c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	6959      	ldr	r1, [r3, #20]
 800b244:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b248:	b29b      	uxth	r3, r3
 800b24a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b24e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b252:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b256:	6800      	ldr	r0, [r0, #0]
 800b258:	f001 fa44 	bl	800c6e4 <USB_WritePMA>
 800b25c:	e3ee      	b.n	800ba3c <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b25e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b262:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	785b      	ldrb	r3, [r3, #1]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d177      	bne.n	800b35e <USB_EPStartXfer+0x650>
 800b26e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b272:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b27a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b27e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b288:	b29b      	uxth	r3, r3
 800b28a:	461a      	mov	r2, r3
 800b28c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b28e:	4413      	add	r3, r2
 800b290:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b292:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b296:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	781b      	ldrb	r3, [r3, #0]
 800b29e:	00da      	lsls	r2, r3, #3
 800b2a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b2a2:	4413      	add	r3, r2
 800b2a4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b2a8:	647b      	str	r3, [r7, #68]	@ 0x44
 800b2aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b2ac:	881b      	ldrh	r3, [r3, #0]
 800b2ae:	b29b      	uxth	r3, r3
 800b2b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b2b4:	b29a      	uxth	r2, r3
 800b2b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b2b8:	801a      	strh	r2, [r3, #0]
 800b2ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b2be:	2b3e      	cmp	r3, #62	@ 0x3e
 800b2c0:	d921      	bls.n	800b306 <USB_EPStartXfer+0x5f8>
 800b2c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b2c6:	095b      	lsrs	r3, r3, #5
 800b2c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800b2cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b2d0:	f003 031f 	and.w	r3, r3, #31
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d104      	bne.n	800b2e2 <USB_EPStartXfer+0x5d4>
 800b2d8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b2dc:	3b01      	subs	r3, #1
 800b2de:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800b2e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b2e4:	881b      	ldrh	r3, [r3, #0]
 800b2e6:	b29a      	uxth	r2, r3
 800b2e8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b2ec:	b29b      	uxth	r3, r3
 800b2ee:	029b      	lsls	r3, r3, #10
 800b2f0:	b29b      	uxth	r3, r3
 800b2f2:	4313      	orrs	r3, r2
 800b2f4:	b29b      	uxth	r3, r3
 800b2f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b2fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b2fe:	b29a      	uxth	r2, r3
 800b300:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b302:	801a      	strh	r2, [r3, #0]
 800b304:	e056      	b.n	800b3b4 <USB_EPStartXfer+0x6a6>
 800b306:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d10a      	bne.n	800b324 <USB_EPStartXfer+0x616>
 800b30e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b310:	881b      	ldrh	r3, [r3, #0]
 800b312:	b29b      	uxth	r3, r3
 800b314:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b318:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b31c:	b29a      	uxth	r2, r3
 800b31e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b320:	801a      	strh	r2, [r3, #0]
 800b322:	e047      	b.n	800b3b4 <USB_EPStartXfer+0x6a6>
 800b324:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b328:	085b      	lsrs	r3, r3, #1
 800b32a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800b32e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b332:	f003 0301 	and.w	r3, r3, #1
 800b336:	2b00      	cmp	r3, #0
 800b338:	d004      	beq.n	800b344 <USB_EPStartXfer+0x636>
 800b33a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b33e:	3301      	adds	r3, #1
 800b340:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800b344:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b346:	881b      	ldrh	r3, [r3, #0]
 800b348:	b29a      	uxth	r2, r3
 800b34a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b34e:	b29b      	uxth	r3, r3
 800b350:	029b      	lsls	r3, r3, #10
 800b352:	b29b      	uxth	r3, r3
 800b354:	4313      	orrs	r3, r2
 800b356:	b29a      	uxth	r2, r3
 800b358:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b35a:	801a      	strh	r2, [r3, #0]
 800b35c:	e02a      	b.n	800b3b4 <USB_EPStartXfer+0x6a6>
 800b35e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b362:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	785b      	ldrb	r3, [r3, #1]
 800b36a:	2b01      	cmp	r3, #1
 800b36c:	d122      	bne.n	800b3b4 <USB_EPStartXfer+0x6a6>
 800b36e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b372:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	653b      	str	r3, [r7, #80]	@ 0x50
 800b37a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b37e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b388:	b29b      	uxth	r3, r3
 800b38a:	461a      	mov	r2, r3
 800b38c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b38e:	4413      	add	r3, r2
 800b390:	653b      	str	r3, [r7, #80]	@ 0x50
 800b392:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b396:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	781b      	ldrb	r3, [r3, #0]
 800b39e:	00da      	lsls	r2, r3, #3
 800b3a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b3a2:	4413      	add	r3, r2
 800b3a4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b3a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b3aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b3ae:	b29a      	uxth	r2, r3
 800b3b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b3b2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b3b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	891b      	ldrh	r3, [r3, #8]
 800b3c0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b3c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	6959      	ldr	r1, [r3, #20]
 800b3d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b3d4:	b29b      	uxth	r3, r3
 800b3d6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b3da:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b3de:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b3e2:	6800      	ldr	r0, [r0, #0]
 800b3e4:	f001 f97e 	bl	800c6e4 <USB_WritePMA>
            ep->xfer_buff += len;
 800b3e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	695a      	ldr	r2, [r3, #20]
 800b3f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b3f8:	441a      	add	r2, r3
 800b3fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b406:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b40a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	6a1a      	ldr	r2, [r3, #32]
 800b412:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b416:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	691b      	ldr	r3, [r3, #16]
 800b41e:	429a      	cmp	r2, r3
 800b420:	d90f      	bls.n	800b442 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800b422:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b426:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	6a1a      	ldr	r2, [r3, #32]
 800b42e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b432:	1ad2      	subs	r2, r2, r3
 800b434:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b438:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	621a      	str	r2, [r3, #32]
 800b440:	e00e      	b.n	800b460 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800b442:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b446:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	6a1b      	ldr	r3, [r3, #32]
 800b44e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800b452:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b456:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	2200      	movs	r2, #0
 800b45e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b460:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b464:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	643b      	str	r3, [r7, #64]	@ 0x40
 800b46c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b470:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	785b      	ldrb	r3, [r3, #1]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d177      	bne.n	800b56c <USB_EPStartXfer+0x85e>
 800b47c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b480:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b488:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b48c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b496:	b29b      	uxth	r3, r3
 800b498:	461a      	mov	r2, r3
 800b49a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b49c:	4413      	add	r3, r2
 800b49e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b4a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	781b      	ldrb	r3, [r3, #0]
 800b4ac:	00da      	lsls	r2, r3, #3
 800b4ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4b0:	4413      	add	r3, r2
 800b4b2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b4b6:	637b      	str	r3, [r7, #52]	@ 0x34
 800b4b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4ba:	881b      	ldrh	r3, [r3, #0]
 800b4bc:	b29b      	uxth	r3, r3
 800b4be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b4c2:	b29a      	uxth	r2, r3
 800b4c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4c6:	801a      	strh	r2, [r3, #0]
 800b4c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b4cc:	2b3e      	cmp	r3, #62	@ 0x3e
 800b4ce:	d921      	bls.n	800b514 <USB_EPStartXfer+0x806>
 800b4d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b4d4:	095b      	lsrs	r3, r3, #5
 800b4d6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b4da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b4de:	f003 031f 	and.w	r3, r3, #31
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d104      	bne.n	800b4f0 <USB_EPStartXfer+0x7e2>
 800b4e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b4ea:	3b01      	subs	r3, #1
 800b4ec:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b4f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4f2:	881b      	ldrh	r3, [r3, #0]
 800b4f4:	b29a      	uxth	r2, r3
 800b4f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b4fa:	b29b      	uxth	r3, r3
 800b4fc:	029b      	lsls	r3, r3, #10
 800b4fe:	b29b      	uxth	r3, r3
 800b500:	4313      	orrs	r3, r2
 800b502:	b29b      	uxth	r3, r3
 800b504:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b508:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b50c:	b29a      	uxth	r2, r3
 800b50e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b510:	801a      	strh	r2, [r3, #0]
 800b512:	e050      	b.n	800b5b6 <USB_EPStartXfer+0x8a8>
 800b514:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d10a      	bne.n	800b532 <USB_EPStartXfer+0x824>
 800b51c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b51e:	881b      	ldrh	r3, [r3, #0]
 800b520:	b29b      	uxth	r3, r3
 800b522:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b526:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b52a:	b29a      	uxth	r2, r3
 800b52c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b52e:	801a      	strh	r2, [r3, #0]
 800b530:	e041      	b.n	800b5b6 <USB_EPStartXfer+0x8a8>
 800b532:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b536:	085b      	lsrs	r3, r3, #1
 800b538:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b53c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b540:	f003 0301 	and.w	r3, r3, #1
 800b544:	2b00      	cmp	r3, #0
 800b546:	d004      	beq.n	800b552 <USB_EPStartXfer+0x844>
 800b548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b54c:	3301      	adds	r3, #1
 800b54e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b552:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b554:	881b      	ldrh	r3, [r3, #0]
 800b556:	b29a      	uxth	r2, r3
 800b558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b55c:	b29b      	uxth	r3, r3
 800b55e:	029b      	lsls	r3, r3, #10
 800b560:	b29b      	uxth	r3, r3
 800b562:	4313      	orrs	r3, r2
 800b564:	b29a      	uxth	r2, r3
 800b566:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b568:	801a      	strh	r2, [r3, #0]
 800b56a:	e024      	b.n	800b5b6 <USB_EPStartXfer+0x8a8>
 800b56c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b570:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	785b      	ldrb	r3, [r3, #1]
 800b578:	2b01      	cmp	r3, #1
 800b57a:	d11c      	bne.n	800b5b6 <USB_EPStartXfer+0x8a8>
 800b57c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b580:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b58a:	b29b      	uxth	r3, r3
 800b58c:	461a      	mov	r2, r3
 800b58e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b590:	4413      	add	r3, r2
 800b592:	643b      	str	r3, [r7, #64]	@ 0x40
 800b594:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b598:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	781b      	ldrb	r3, [r3, #0]
 800b5a0:	00da      	lsls	r2, r3, #3
 800b5a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b5a4:	4413      	add	r3, r2
 800b5a6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b5aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b5ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b5b0:	b29a      	uxth	r2, r3
 800b5b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5b4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b5b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b5ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	895b      	ldrh	r3, [r3, #10]
 800b5c2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b5c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b5ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	6959      	ldr	r1, [r3, #20]
 800b5d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b5d6:	b29b      	uxth	r3, r3
 800b5d8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b5dc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b5e0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b5e4:	6800      	ldr	r0, [r0, #0]
 800b5e6:	f001 f87d 	bl	800c6e4 <USB_WritePMA>
 800b5ea:	e227      	b.n	800ba3c <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800b5ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b5f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	6a1b      	ldr	r3, [r3, #32]
 800b5f8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800b5fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b600:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b604:	681a      	ldr	r2, [r3, #0]
 800b606:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b60a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	781b      	ldrb	r3, [r3, #0]
 800b612:	009b      	lsls	r3, r3, #2
 800b614:	4413      	add	r3, r2
 800b616:	881b      	ldrh	r3, [r3, #0]
 800b618:	b29b      	uxth	r3, r3
 800b61a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800b61e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b622:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800b626:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b62a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b62e:	681a      	ldr	r2, [r3, #0]
 800b630:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b634:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	781b      	ldrb	r3, [r3, #0]
 800b63c:	009b      	lsls	r3, r3, #2
 800b63e:	441a      	add	r2, r3
 800b640:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800b644:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b648:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b64c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b650:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b654:	b29b      	uxth	r3, r3
 800b656:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b658:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b65c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b664:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b668:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b672:	b29b      	uxth	r3, r3
 800b674:	461a      	mov	r2, r3
 800b676:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b678:	4413      	add	r3, r2
 800b67a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b67c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b680:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	781b      	ldrb	r3, [r3, #0]
 800b688:	00da      	lsls	r2, r3, #3
 800b68a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b68c:	4413      	add	r3, r2
 800b68e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b692:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b694:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b698:	b29a      	uxth	r2, r3
 800b69a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b69c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b69e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	891b      	ldrh	r3, [r3, #8]
 800b6aa:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b6ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	6959      	ldr	r1, [r3, #20]
 800b6ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b6be:	b29b      	uxth	r3, r3
 800b6c0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b6c4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b6c8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b6cc:	6800      	ldr	r0, [r0, #0]
 800b6ce:	f001 f809 	bl	800c6e4 <USB_WritePMA>
 800b6d2:	e1b3      	b.n	800ba3c <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800b6d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	6a1a      	ldr	r2, [r3, #32]
 800b6e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b6e4:	1ad2      	subs	r2, r2, r3
 800b6e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b6f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b6fa:	681a      	ldr	r2, [r3, #0]
 800b6fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b700:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	781b      	ldrb	r3, [r3, #0]
 800b708:	009b      	lsls	r3, r3, #2
 800b70a:	4413      	add	r3, r2
 800b70c:	881b      	ldrh	r3, [r3, #0]
 800b70e:	b29b      	uxth	r3, r3
 800b710:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b714:	2b00      	cmp	r3, #0
 800b716:	f000 80c6 	beq.w	800b8a6 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b71a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b71e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	673b      	str	r3, [r7, #112]	@ 0x70
 800b726:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b72a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	785b      	ldrb	r3, [r3, #1]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d177      	bne.n	800b826 <USB_EPStartXfer+0xb18>
 800b736:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b73a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b742:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b746:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b750:	b29b      	uxth	r3, r3
 800b752:	461a      	mov	r2, r3
 800b754:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b756:	4413      	add	r3, r2
 800b758:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b75a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b75e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	781b      	ldrb	r3, [r3, #0]
 800b766:	00da      	lsls	r2, r3, #3
 800b768:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b76a:	4413      	add	r3, r2
 800b76c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b770:	667b      	str	r3, [r7, #100]	@ 0x64
 800b772:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b774:	881b      	ldrh	r3, [r3, #0]
 800b776:	b29b      	uxth	r3, r3
 800b778:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b77c:	b29a      	uxth	r2, r3
 800b77e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b780:	801a      	strh	r2, [r3, #0]
 800b782:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b786:	2b3e      	cmp	r3, #62	@ 0x3e
 800b788:	d921      	bls.n	800b7ce <USB_EPStartXfer+0xac0>
 800b78a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b78e:	095b      	lsrs	r3, r3, #5
 800b790:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800b794:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b798:	f003 031f 	and.w	r3, r3, #31
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d104      	bne.n	800b7aa <USB_EPStartXfer+0xa9c>
 800b7a0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800b7a4:	3b01      	subs	r3, #1
 800b7a6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800b7aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b7ac:	881b      	ldrh	r3, [r3, #0]
 800b7ae:	b29a      	uxth	r2, r3
 800b7b0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800b7b4:	b29b      	uxth	r3, r3
 800b7b6:	029b      	lsls	r3, r3, #10
 800b7b8:	b29b      	uxth	r3, r3
 800b7ba:	4313      	orrs	r3, r2
 800b7bc:	b29b      	uxth	r3, r3
 800b7be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b7c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b7c6:	b29a      	uxth	r2, r3
 800b7c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b7ca:	801a      	strh	r2, [r3, #0]
 800b7cc:	e050      	b.n	800b870 <USB_EPStartXfer+0xb62>
 800b7ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d10a      	bne.n	800b7ec <USB_EPStartXfer+0xade>
 800b7d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b7d8:	881b      	ldrh	r3, [r3, #0]
 800b7da:	b29b      	uxth	r3, r3
 800b7dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b7e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b7e4:	b29a      	uxth	r2, r3
 800b7e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b7e8:	801a      	strh	r2, [r3, #0]
 800b7ea:	e041      	b.n	800b870 <USB_EPStartXfer+0xb62>
 800b7ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7f0:	085b      	lsrs	r3, r3, #1
 800b7f2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800b7f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7fa:	f003 0301 	and.w	r3, r3, #1
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d004      	beq.n	800b80c <USB_EPStartXfer+0xafe>
 800b802:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800b806:	3301      	adds	r3, #1
 800b808:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800b80c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b80e:	881b      	ldrh	r3, [r3, #0]
 800b810:	b29a      	uxth	r2, r3
 800b812:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800b816:	b29b      	uxth	r3, r3
 800b818:	029b      	lsls	r3, r3, #10
 800b81a:	b29b      	uxth	r3, r3
 800b81c:	4313      	orrs	r3, r2
 800b81e:	b29a      	uxth	r2, r3
 800b820:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b822:	801a      	strh	r2, [r3, #0]
 800b824:	e024      	b.n	800b870 <USB_EPStartXfer+0xb62>
 800b826:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b82a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	785b      	ldrb	r3, [r3, #1]
 800b832:	2b01      	cmp	r3, #1
 800b834:	d11c      	bne.n	800b870 <USB_EPStartXfer+0xb62>
 800b836:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b83a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b844:	b29b      	uxth	r3, r3
 800b846:	461a      	mov	r2, r3
 800b848:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b84a:	4413      	add	r3, r2
 800b84c:	673b      	str	r3, [r7, #112]	@ 0x70
 800b84e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b852:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	781b      	ldrb	r3, [r3, #0]
 800b85a:	00da      	lsls	r2, r3, #3
 800b85c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b85e:	4413      	add	r3, r2
 800b860:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b864:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b866:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b86a:	b29a      	uxth	r2, r3
 800b86c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b86e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800b870:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b874:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	895b      	ldrh	r3, [r3, #10]
 800b87c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b880:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b884:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	6959      	ldr	r1, [r3, #20]
 800b88c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b890:	b29b      	uxth	r3, r3
 800b892:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b896:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b89a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b89e:	6800      	ldr	r0, [r0, #0]
 800b8a0:	f000 ff20 	bl	800c6e4 <USB_WritePMA>
 800b8a4:	e0ca      	b.n	800ba3c <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b8a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	785b      	ldrb	r3, [r3, #1]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d177      	bne.n	800b9a6 <USB_EPStartXfer+0xc98>
 800b8b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b8c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b8d0:	b29b      	uxth	r3, r3
 800b8d2:	461a      	mov	r2, r3
 800b8d4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b8d6:	4413      	add	r3, r2
 800b8d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b8da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	781b      	ldrb	r3, [r3, #0]
 800b8e6:	00da      	lsls	r2, r3, #3
 800b8e8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b8ea:	4413      	add	r3, r2
 800b8ec:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b8f0:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b8f2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b8f4:	881b      	ldrh	r3, [r3, #0]
 800b8f6:	b29b      	uxth	r3, r3
 800b8f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b8fc:	b29a      	uxth	r2, r3
 800b8fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b900:	801a      	strh	r2, [r3, #0]
 800b902:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b906:	2b3e      	cmp	r3, #62	@ 0x3e
 800b908:	d921      	bls.n	800b94e <USB_EPStartXfer+0xc40>
 800b90a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b90e:	095b      	lsrs	r3, r3, #5
 800b910:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b914:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b918:	f003 031f 	and.w	r3, r3, #31
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d104      	bne.n	800b92a <USB_EPStartXfer+0xc1c>
 800b920:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800b924:	3b01      	subs	r3, #1
 800b926:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b92a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b92c:	881b      	ldrh	r3, [r3, #0]
 800b92e:	b29a      	uxth	r2, r3
 800b930:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800b934:	b29b      	uxth	r3, r3
 800b936:	029b      	lsls	r3, r3, #10
 800b938:	b29b      	uxth	r3, r3
 800b93a:	4313      	orrs	r3, r2
 800b93c:	b29b      	uxth	r3, r3
 800b93e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b942:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b946:	b29a      	uxth	r2, r3
 800b948:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b94a:	801a      	strh	r2, [r3, #0]
 800b94c:	e05c      	b.n	800ba08 <USB_EPStartXfer+0xcfa>
 800b94e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b952:	2b00      	cmp	r3, #0
 800b954:	d10a      	bne.n	800b96c <USB_EPStartXfer+0xc5e>
 800b956:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b958:	881b      	ldrh	r3, [r3, #0]
 800b95a:	b29b      	uxth	r3, r3
 800b95c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b960:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b964:	b29a      	uxth	r2, r3
 800b966:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b968:	801a      	strh	r2, [r3, #0]
 800b96a:	e04d      	b.n	800ba08 <USB_EPStartXfer+0xcfa>
 800b96c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b970:	085b      	lsrs	r3, r3, #1
 800b972:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b976:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b97a:	f003 0301 	and.w	r3, r3, #1
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d004      	beq.n	800b98c <USB_EPStartXfer+0xc7e>
 800b982:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800b986:	3301      	adds	r3, #1
 800b988:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b98c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b98e:	881b      	ldrh	r3, [r3, #0]
 800b990:	b29a      	uxth	r2, r3
 800b992:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800b996:	b29b      	uxth	r3, r3
 800b998:	029b      	lsls	r3, r3, #10
 800b99a:	b29b      	uxth	r3, r3
 800b99c:	4313      	orrs	r3, r2
 800b99e:	b29a      	uxth	r2, r3
 800b9a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b9a2:	801a      	strh	r2, [r3, #0]
 800b9a4:	e030      	b.n	800ba08 <USB_EPStartXfer+0xcfa>
 800b9a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	785b      	ldrb	r3, [r3, #1]
 800b9b2:	2b01      	cmp	r3, #1
 800b9b4:	d128      	bne.n	800ba08 <USB_EPStartXfer+0xcfa>
 800b9b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b9c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b9d2:	b29b      	uxth	r3, r3
 800b9d4:	461a      	mov	r2, r3
 800b9d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b9da:	4413      	add	r3, r2
 800b9dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b9e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	781b      	ldrb	r3, [r3, #0]
 800b9ec:	00da      	lsls	r2, r3, #3
 800b9ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b9f2:	4413      	add	r3, r2
 800b9f4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b9f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b9fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba00:	b29a      	uxth	r2, r3
 800ba02:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ba06:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ba08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	891b      	ldrh	r3, [r3, #8]
 800ba14:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ba18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	6959      	ldr	r1, [r3, #20]
 800ba24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba28:	b29b      	uxth	r3, r3
 800ba2a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ba2e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800ba32:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800ba36:	6800      	ldr	r0, [r0, #0]
 800ba38:	f000 fe54 	bl	800c6e4 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800ba3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba40:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ba44:	681a      	ldr	r2, [r3, #0]
 800ba46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	781b      	ldrb	r3, [r3, #0]
 800ba52:	009b      	lsls	r3, r3, #2
 800ba54:	4413      	add	r3, r2
 800ba56:	881b      	ldrh	r3, [r3, #0]
 800ba58:	b29b      	uxth	r3, r3
 800ba5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ba5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ba62:	817b      	strh	r3, [r7, #10]
 800ba64:	897b      	ldrh	r3, [r7, #10]
 800ba66:	f083 0310 	eor.w	r3, r3, #16
 800ba6a:	817b      	strh	r3, [r7, #10]
 800ba6c:	897b      	ldrh	r3, [r7, #10]
 800ba6e:	f083 0320 	eor.w	r3, r3, #32
 800ba72:	817b      	strh	r3, [r7, #10]
 800ba74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ba7c:	681a      	ldr	r2, [r3, #0]
 800ba7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	781b      	ldrb	r3, [r3, #0]
 800ba8a:	009b      	lsls	r3, r3, #2
 800ba8c:	441a      	add	r2, r3
 800ba8e:	897b      	ldrh	r3, [r7, #10]
 800ba90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ba94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ba98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ba9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800baa0:	b29b      	uxth	r3, r3
 800baa2:	8013      	strh	r3, [r2, #0]
 800baa4:	f000 bcde 	b.w	800c464 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800baa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800baac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	7b1b      	ldrb	r3, [r3, #12]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	f040 80bb 	bne.w	800bc30 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800baba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800babe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	699a      	ldr	r2, [r3, #24]
 800bac6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800baca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	691b      	ldr	r3, [r3, #16]
 800bad2:	429a      	cmp	r2, r3
 800bad4:	d917      	bls.n	800bb06 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800bad6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bada:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	691b      	ldr	r3, [r3, #16]
 800bae2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800bae6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800baea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	699a      	ldr	r2, [r3, #24]
 800baf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800baf6:	1ad2      	subs	r2, r2, r3
 800baf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bafc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	619a      	str	r2, [r3, #24]
 800bb04:	e00e      	b.n	800bb24 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800bb06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	699b      	ldr	r3, [r3, #24]
 800bb12:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800bb16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	2200      	movs	r2, #0
 800bb22:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800bb24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb28:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800bb32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bb40:	b29b      	uxth	r3, r3
 800bb42:	461a      	mov	r2, r3
 800bb44:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800bb48:	4413      	add	r3, r2
 800bb4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800bb4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	781b      	ldrb	r3, [r3, #0]
 800bb5a:	00da      	lsls	r2, r3, #3
 800bb5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800bb60:	4413      	add	r3, r2
 800bb62:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bb66:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800bb6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bb6e:	881b      	ldrh	r3, [r3, #0]
 800bb70:	b29b      	uxth	r3, r3
 800bb72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bb76:	b29a      	uxth	r2, r3
 800bb78:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bb7c:	801a      	strh	r2, [r3, #0]
 800bb7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb82:	2b3e      	cmp	r3, #62	@ 0x3e
 800bb84:	d924      	bls.n	800bbd0 <USB_EPStartXfer+0xec2>
 800bb86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb8a:	095b      	lsrs	r3, r3, #5
 800bb8c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800bb90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb94:	f003 031f 	and.w	r3, r3, #31
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d104      	bne.n	800bba6 <USB_EPStartXfer+0xe98>
 800bb9c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800bba0:	3b01      	subs	r3, #1
 800bba2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800bba6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bbaa:	881b      	ldrh	r3, [r3, #0]
 800bbac:	b29a      	uxth	r2, r3
 800bbae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800bbb2:	b29b      	uxth	r3, r3
 800bbb4:	029b      	lsls	r3, r3, #10
 800bbb6:	b29b      	uxth	r3, r3
 800bbb8:	4313      	orrs	r3, r2
 800bbba:	b29b      	uxth	r3, r3
 800bbbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bbc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bbc4:	b29a      	uxth	r2, r3
 800bbc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bbca:	801a      	strh	r2, [r3, #0]
 800bbcc:	f000 bc10 	b.w	800c3f0 <USB_EPStartXfer+0x16e2>
 800bbd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d10c      	bne.n	800bbf2 <USB_EPStartXfer+0xee4>
 800bbd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bbdc:	881b      	ldrh	r3, [r3, #0]
 800bbde:	b29b      	uxth	r3, r3
 800bbe0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bbe4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bbe8:	b29a      	uxth	r2, r3
 800bbea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bbee:	801a      	strh	r2, [r3, #0]
 800bbf0:	e3fe      	b.n	800c3f0 <USB_EPStartXfer+0x16e2>
 800bbf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbf6:	085b      	lsrs	r3, r3, #1
 800bbf8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800bbfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc00:	f003 0301 	and.w	r3, r3, #1
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d004      	beq.n	800bc12 <USB_EPStartXfer+0xf04>
 800bc08:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800bc0c:	3301      	adds	r3, #1
 800bc0e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800bc12:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bc16:	881b      	ldrh	r3, [r3, #0]
 800bc18:	b29a      	uxth	r2, r3
 800bc1a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800bc1e:	b29b      	uxth	r3, r3
 800bc20:	029b      	lsls	r3, r3, #10
 800bc22:	b29b      	uxth	r3, r3
 800bc24:	4313      	orrs	r3, r2
 800bc26:	b29a      	uxth	r2, r3
 800bc28:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bc2c:	801a      	strh	r2, [r3, #0]
 800bc2e:	e3df      	b.n	800c3f0 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800bc30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	78db      	ldrb	r3, [r3, #3]
 800bc3c:	2b02      	cmp	r3, #2
 800bc3e:	f040 8218 	bne.w	800c072 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800bc42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	785b      	ldrb	r3, [r3, #1]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	f040 809d 	bne.w	800bd8e <USB_EPStartXfer+0x1080>
 800bc54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc58:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800bc62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bc70:	b29b      	uxth	r3, r3
 800bc72:	461a      	mov	r2, r3
 800bc74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bc78:	4413      	add	r3, r2
 800bc7a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800bc7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	781b      	ldrb	r3, [r3, #0]
 800bc8a:	00da      	lsls	r2, r3, #3
 800bc8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bc90:	4413      	add	r3, r2
 800bc92:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bc96:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800bc9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bc9e:	881b      	ldrh	r3, [r3, #0]
 800bca0:	b29b      	uxth	r3, r3
 800bca2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bca6:	b29a      	uxth	r2, r3
 800bca8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bcac:	801a      	strh	r2, [r3, #0]
 800bcae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bcb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	691b      	ldr	r3, [r3, #16]
 800bcba:	2b3e      	cmp	r3, #62	@ 0x3e
 800bcbc:	d92b      	bls.n	800bd16 <USB_EPStartXfer+0x1008>
 800bcbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bcc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	691b      	ldr	r3, [r3, #16]
 800bcca:	095b      	lsrs	r3, r3, #5
 800bccc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800bcd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bcd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	691b      	ldr	r3, [r3, #16]
 800bcdc:	f003 031f 	and.w	r3, r3, #31
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d104      	bne.n	800bcee <USB_EPStartXfer+0xfe0>
 800bce4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bce8:	3b01      	subs	r3, #1
 800bcea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800bcee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bcf2:	881b      	ldrh	r3, [r3, #0]
 800bcf4:	b29a      	uxth	r2, r3
 800bcf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bcfa:	b29b      	uxth	r3, r3
 800bcfc:	029b      	lsls	r3, r3, #10
 800bcfe:	b29b      	uxth	r3, r3
 800bd00:	4313      	orrs	r3, r2
 800bd02:	b29b      	uxth	r3, r3
 800bd04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bd08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bd0c:	b29a      	uxth	r2, r3
 800bd0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bd12:	801a      	strh	r2, [r3, #0]
 800bd14:	e070      	b.n	800bdf8 <USB_EPStartXfer+0x10ea>
 800bd16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	691b      	ldr	r3, [r3, #16]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d10c      	bne.n	800bd40 <USB_EPStartXfer+0x1032>
 800bd26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bd2a:	881b      	ldrh	r3, [r3, #0]
 800bd2c:	b29b      	uxth	r3, r3
 800bd2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bd32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bd36:	b29a      	uxth	r2, r3
 800bd38:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bd3c:	801a      	strh	r2, [r3, #0]
 800bd3e:	e05b      	b.n	800bdf8 <USB_EPStartXfer+0x10ea>
 800bd40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	691b      	ldr	r3, [r3, #16]
 800bd4c:	085b      	lsrs	r3, r3, #1
 800bd4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800bd52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	691b      	ldr	r3, [r3, #16]
 800bd5e:	f003 0301 	and.w	r3, r3, #1
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d004      	beq.n	800bd70 <USB_EPStartXfer+0x1062>
 800bd66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bd6a:	3301      	adds	r3, #1
 800bd6c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800bd70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bd74:	881b      	ldrh	r3, [r3, #0]
 800bd76:	b29a      	uxth	r2, r3
 800bd78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bd7c:	b29b      	uxth	r3, r3
 800bd7e:	029b      	lsls	r3, r3, #10
 800bd80:	b29b      	uxth	r3, r3
 800bd82:	4313      	orrs	r3, r2
 800bd84:	b29a      	uxth	r2, r3
 800bd86:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bd8a:	801a      	strh	r2, [r3, #0]
 800bd8c:	e034      	b.n	800bdf8 <USB_EPStartXfer+0x10ea>
 800bd8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	785b      	ldrb	r3, [r3, #1]
 800bd9a:	2b01      	cmp	r3, #1
 800bd9c:	d12c      	bne.n	800bdf8 <USB_EPStartXfer+0x10ea>
 800bd9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bda2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bdac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bdb0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bdba:	b29b      	uxth	r3, r3
 800bdbc:	461a      	mov	r2, r3
 800bdbe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bdc2:	4413      	add	r3, r2
 800bdc4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bdc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bdcc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	781b      	ldrb	r3, [r3, #0]
 800bdd4:	00da      	lsls	r2, r3, #3
 800bdd6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bdda:	4413      	add	r3, r2
 800bddc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bde0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bde4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bde8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	691b      	ldr	r3, [r3, #16]
 800bdf0:	b29a      	uxth	r2, r3
 800bdf2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800bdf6:	801a      	strh	r2, [r3, #0]
 800bdf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bdfc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800be06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	785b      	ldrb	r3, [r3, #1]
 800be12:	2b00      	cmp	r3, #0
 800be14:	f040 809d 	bne.w	800bf52 <USB_EPStartXfer+0x1244>
 800be18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800be26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be2a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800be34:	b29b      	uxth	r3, r3
 800be36:	461a      	mov	r2, r3
 800be38:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800be3c:	4413      	add	r3, r2
 800be3e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800be42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	781b      	ldrb	r3, [r3, #0]
 800be4e:	00da      	lsls	r2, r3, #3
 800be50:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800be54:	4413      	add	r3, r2
 800be56:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800be5a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800be5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800be62:	881b      	ldrh	r3, [r3, #0]
 800be64:	b29b      	uxth	r3, r3
 800be66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800be6a:	b29a      	uxth	r2, r3
 800be6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800be70:	801a      	strh	r2, [r3, #0]
 800be72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	691b      	ldr	r3, [r3, #16]
 800be7e:	2b3e      	cmp	r3, #62	@ 0x3e
 800be80:	d92b      	bls.n	800beda <USB_EPStartXfer+0x11cc>
 800be82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	691b      	ldr	r3, [r3, #16]
 800be8e:	095b      	lsrs	r3, r3, #5
 800be90:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800be94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	691b      	ldr	r3, [r3, #16]
 800bea0:	f003 031f 	and.w	r3, r3, #31
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d104      	bne.n	800beb2 <USB_EPStartXfer+0x11a4>
 800bea8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800beac:	3b01      	subs	r3, #1
 800beae:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800beb2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800beb6:	881b      	ldrh	r3, [r3, #0]
 800beb8:	b29a      	uxth	r2, r3
 800beba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bebe:	b29b      	uxth	r3, r3
 800bec0:	029b      	lsls	r3, r3, #10
 800bec2:	b29b      	uxth	r3, r3
 800bec4:	4313      	orrs	r3, r2
 800bec6:	b29b      	uxth	r3, r3
 800bec8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800becc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bed0:	b29a      	uxth	r2, r3
 800bed2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bed6:	801a      	strh	r2, [r3, #0]
 800bed8:	e069      	b.n	800bfae <USB_EPStartXfer+0x12a0>
 800beda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bede:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	691b      	ldr	r3, [r3, #16]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d10c      	bne.n	800bf04 <USB_EPStartXfer+0x11f6>
 800beea:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800beee:	881b      	ldrh	r3, [r3, #0]
 800bef0:	b29b      	uxth	r3, r3
 800bef2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bef6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800befa:	b29a      	uxth	r2, r3
 800befc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bf00:	801a      	strh	r2, [r3, #0]
 800bf02:	e054      	b.n	800bfae <USB_EPStartXfer+0x12a0>
 800bf04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	691b      	ldr	r3, [r3, #16]
 800bf10:	085b      	lsrs	r3, r3, #1
 800bf12:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800bf16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	691b      	ldr	r3, [r3, #16]
 800bf22:	f003 0301 	and.w	r3, r3, #1
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d004      	beq.n	800bf34 <USB_EPStartXfer+0x1226>
 800bf2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bf2e:	3301      	adds	r3, #1
 800bf30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800bf34:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bf38:	881b      	ldrh	r3, [r3, #0]
 800bf3a:	b29a      	uxth	r2, r3
 800bf3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bf40:	b29b      	uxth	r3, r3
 800bf42:	029b      	lsls	r3, r3, #10
 800bf44:	b29b      	uxth	r3, r3
 800bf46:	4313      	orrs	r3, r2
 800bf48:	b29a      	uxth	r2, r3
 800bf4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bf4e:	801a      	strh	r2, [r3, #0]
 800bf50:	e02d      	b.n	800bfae <USB_EPStartXfer+0x12a0>
 800bf52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	785b      	ldrb	r3, [r3, #1]
 800bf5e:	2b01      	cmp	r3, #1
 800bf60:	d125      	bne.n	800bfae <USB_EPStartXfer+0x12a0>
 800bf62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bf70:	b29b      	uxth	r3, r3
 800bf72:	461a      	mov	r2, r3
 800bf74:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bf78:	4413      	add	r3, r2
 800bf7a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800bf7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	781b      	ldrb	r3, [r3, #0]
 800bf8a:	00da      	lsls	r2, r3, #3
 800bf8c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bf90:	4413      	add	r3, r2
 800bf92:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bf96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800bf9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	691b      	ldr	r3, [r3, #16]
 800bfa6:	b29a      	uxth	r2, r3
 800bfa8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bfac:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800bfae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bfb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	69db      	ldr	r3, [r3, #28]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	f000 8218 	beq.w	800c3f0 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800bfc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bfc4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bfc8:	681a      	ldr	r2, [r3, #0]
 800bfca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bfce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	781b      	ldrb	r3, [r3, #0]
 800bfd6:	009b      	lsls	r3, r3, #2
 800bfd8:	4413      	add	r3, r2
 800bfda:	881b      	ldrh	r3, [r3, #0]
 800bfdc:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800bfe0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800bfe4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d005      	beq.n	800bff8 <USB_EPStartXfer+0x12ea>
 800bfec:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800bff0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d10d      	bne.n	800c014 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800bff8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800bffc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c000:	2b00      	cmp	r3, #0
 800c002:	f040 81f5 	bne.w	800c3f0 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c006:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800c00a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c00e:	2b00      	cmp	r3, #0
 800c010:	f040 81ee 	bne.w	800c3f0 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800c014:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c018:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c01c:	681a      	ldr	r2, [r3, #0]
 800c01e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c022:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	781b      	ldrb	r3, [r3, #0]
 800c02a:	009b      	lsls	r3, r3, #2
 800c02c:	4413      	add	r3, r2
 800c02e:	881b      	ldrh	r3, [r3, #0]
 800c030:	b29b      	uxth	r3, r3
 800c032:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c036:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c03a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800c03e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c042:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c046:	681a      	ldr	r2, [r3, #0]
 800c048:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c04c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	781b      	ldrb	r3, [r3, #0]
 800c054:	009b      	lsls	r3, r3, #2
 800c056:	441a      	add	r2, r3
 800c058:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800c05c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c060:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c064:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c068:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c06c:	b29b      	uxth	r3, r3
 800c06e:	8013      	strh	r3, [r2, #0]
 800c070:	e1be      	b.n	800c3f0 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800c072:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c076:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	78db      	ldrb	r3, [r3, #3]
 800c07e:	2b01      	cmp	r3, #1
 800c080:	f040 81b4 	bne.w	800c3ec <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800c084:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c088:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	699a      	ldr	r2, [r3, #24]
 800c090:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c094:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	691b      	ldr	r3, [r3, #16]
 800c09c:	429a      	cmp	r2, r3
 800c09e:	d917      	bls.n	800c0d0 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800c0a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	691b      	ldr	r3, [r3, #16]
 800c0ac:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800c0b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	699a      	ldr	r2, [r3, #24]
 800c0bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0c0:	1ad2      	subs	r2, r2, r3
 800c0c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	619a      	str	r2, [r3, #24]
 800c0ce:	e00e      	b.n	800c0ee <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800c0d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	699b      	ldr	r3, [r3, #24]
 800c0dc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800c0e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800c0ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	785b      	ldrb	r3, [r3, #1]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	f040 8085 	bne.w	800c20a <USB_EPStartXfer+0x14fc>
 800c100:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c104:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c10e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c112:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c11c:	b29b      	uxth	r3, r3
 800c11e:	461a      	mov	r2, r3
 800c120:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800c124:	4413      	add	r3, r2
 800c126:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c12a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c12e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	781b      	ldrb	r3, [r3, #0]
 800c136:	00da      	lsls	r2, r3, #3
 800c138:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800c13c:	4413      	add	r3, r2
 800c13e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c142:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c146:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c14a:	881b      	ldrh	r3, [r3, #0]
 800c14c:	b29b      	uxth	r3, r3
 800c14e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c152:	b29a      	uxth	r2, r3
 800c154:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c158:	801a      	strh	r2, [r3, #0]
 800c15a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c15e:	2b3e      	cmp	r3, #62	@ 0x3e
 800c160:	d923      	bls.n	800c1aa <USB_EPStartXfer+0x149c>
 800c162:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c166:	095b      	lsrs	r3, r3, #5
 800c168:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800c16c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c170:	f003 031f 	and.w	r3, r3, #31
 800c174:	2b00      	cmp	r3, #0
 800c176:	d104      	bne.n	800c182 <USB_EPStartXfer+0x1474>
 800c178:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c17c:	3b01      	subs	r3, #1
 800c17e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800c182:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c186:	881b      	ldrh	r3, [r3, #0]
 800c188:	b29a      	uxth	r2, r3
 800c18a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c18e:	b29b      	uxth	r3, r3
 800c190:	029b      	lsls	r3, r3, #10
 800c192:	b29b      	uxth	r3, r3
 800c194:	4313      	orrs	r3, r2
 800c196:	b29b      	uxth	r3, r3
 800c198:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c19c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c1a0:	b29a      	uxth	r2, r3
 800c1a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c1a6:	801a      	strh	r2, [r3, #0]
 800c1a8:	e060      	b.n	800c26c <USB_EPStartXfer+0x155e>
 800c1aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d10c      	bne.n	800c1cc <USB_EPStartXfer+0x14be>
 800c1b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c1b6:	881b      	ldrh	r3, [r3, #0]
 800c1b8:	b29b      	uxth	r3, r3
 800c1ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c1be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c1c2:	b29a      	uxth	r2, r3
 800c1c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c1c8:	801a      	strh	r2, [r3, #0]
 800c1ca:	e04f      	b.n	800c26c <USB_EPStartXfer+0x155e>
 800c1cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1d0:	085b      	lsrs	r3, r3, #1
 800c1d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800c1d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1da:	f003 0301 	and.w	r3, r3, #1
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d004      	beq.n	800c1ec <USB_EPStartXfer+0x14de>
 800c1e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c1e6:	3301      	adds	r3, #1
 800c1e8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800c1ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c1f0:	881b      	ldrh	r3, [r3, #0]
 800c1f2:	b29a      	uxth	r2, r3
 800c1f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c1f8:	b29b      	uxth	r3, r3
 800c1fa:	029b      	lsls	r3, r3, #10
 800c1fc:	b29b      	uxth	r3, r3
 800c1fe:	4313      	orrs	r3, r2
 800c200:	b29a      	uxth	r2, r3
 800c202:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c206:	801a      	strh	r2, [r3, #0]
 800c208:	e030      	b.n	800c26c <USB_EPStartXfer+0x155e>
 800c20a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c20e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	785b      	ldrb	r3, [r3, #1]
 800c216:	2b01      	cmp	r3, #1
 800c218:	d128      	bne.n	800c26c <USB_EPStartXfer+0x155e>
 800c21a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c21e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c228:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c22c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c236:	b29b      	uxth	r3, r3
 800c238:	461a      	mov	r2, r3
 800c23a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c23e:	4413      	add	r3, r2
 800c240:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c244:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c248:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	781b      	ldrb	r3, [r3, #0]
 800c250:	00da      	lsls	r2, r3, #3
 800c252:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c256:	4413      	add	r3, r2
 800c258:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c25c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c260:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c264:	b29a      	uxth	r2, r3
 800c266:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800c26a:	801a      	strh	r2, [r3, #0]
 800c26c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c270:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c27a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c27e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	785b      	ldrb	r3, [r3, #1]
 800c286:	2b00      	cmp	r3, #0
 800c288:	f040 8085 	bne.w	800c396 <USB_EPStartXfer+0x1688>
 800c28c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c290:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800c29a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c29e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c2a8:	b29b      	uxth	r3, r3
 800c2aa:	461a      	mov	r2, r3
 800c2ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800c2b0:	4413      	add	r3, r2
 800c2b2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800c2b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	781b      	ldrb	r3, [r3, #0]
 800c2c2:	00da      	lsls	r2, r3, #3
 800c2c4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800c2c8:	4413      	add	r3, r2
 800c2ca:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c2ce:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c2d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c2d6:	881b      	ldrh	r3, [r3, #0]
 800c2d8:	b29b      	uxth	r3, r3
 800c2da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c2de:	b29a      	uxth	r2, r3
 800c2e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c2e4:	801a      	strh	r2, [r3, #0]
 800c2e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2ea:	2b3e      	cmp	r3, #62	@ 0x3e
 800c2ec:	d923      	bls.n	800c336 <USB_EPStartXfer+0x1628>
 800c2ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2f2:	095b      	lsrs	r3, r3, #5
 800c2f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c2f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2fc:	f003 031f 	and.w	r3, r3, #31
 800c300:	2b00      	cmp	r3, #0
 800c302:	d104      	bne.n	800c30e <USB_EPStartXfer+0x1600>
 800c304:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c308:	3b01      	subs	r3, #1
 800c30a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c30e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c312:	881b      	ldrh	r3, [r3, #0]
 800c314:	b29a      	uxth	r2, r3
 800c316:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c31a:	b29b      	uxth	r3, r3
 800c31c:	029b      	lsls	r3, r3, #10
 800c31e:	b29b      	uxth	r3, r3
 800c320:	4313      	orrs	r3, r2
 800c322:	b29b      	uxth	r3, r3
 800c324:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c328:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c32c:	b29a      	uxth	r2, r3
 800c32e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c332:	801a      	strh	r2, [r3, #0]
 800c334:	e05c      	b.n	800c3f0 <USB_EPStartXfer+0x16e2>
 800c336:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d10c      	bne.n	800c358 <USB_EPStartXfer+0x164a>
 800c33e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c342:	881b      	ldrh	r3, [r3, #0]
 800c344:	b29b      	uxth	r3, r3
 800c346:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c34a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c34e:	b29a      	uxth	r2, r3
 800c350:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c354:	801a      	strh	r2, [r3, #0]
 800c356:	e04b      	b.n	800c3f0 <USB_EPStartXfer+0x16e2>
 800c358:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c35c:	085b      	lsrs	r3, r3, #1
 800c35e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c362:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c366:	f003 0301 	and.w	r3, r3, #1
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d004      	beq.n	800c378 <USB_EPStartXfer+0x166a>
 800c36e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c372:	3301      	adds	r3, #1
 800c374:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c378:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c37c:	881b      	ldrh	r3, [r3, #0]
 800c37e:	b29a      	uxth	r2, r3
 800c380:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c384:	b29b      	uxth	r3, r3
 800c386:	029b      	lsls	r3, r3, #10
 800c388:	b29b      	uxth	r3, r3
 800c38a:	4313      	orrs	r3, r2
 800c38c:	b29a      	uxth	r2, r3
 800c38e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c392:	801a      	strh	r2, [r3, #0]
 800c394:	e02c      	b.n	800c3f0 <USB_EPStartXfer+0x16e2>
 800c396:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c39a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	785b      	ldrb	r3, [r3, #1]
 800c3a2:	2b01      	cmp	r3, #1
 800c3a4:	d124      	bne.n	800c3f0 <USB_EPStartXfer+0x16e2>
 800c3a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c3aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c3b4:	b29b      	uxth	r3, r3
 800c3b6:	461a      	mov	r2, r3
 800c3b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c3bc:	4413      	add	r3, r2
 800c3be:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c3c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c3c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	781b      	ldrb	r3, [r3, #0]
 800c3ce:	00da      	lsls	r2, r3, #3
 800c3d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c3d4:	4413      	add	r3, r2
 800c3d6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c3da:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c3de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3e2:	b29a      	uxth	r2, r3
 800c3e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c3e8:	801a      	strh	r2, [r3, #0]
 800c3ea:	e001      	b.n	800c3f0 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800c3ec:	2301      	movs	r3, #1
 800c3ee:	e03a      	b.n	800c466 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c3f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c3f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c3f8:	681a      	ldr	r2, [r3, #0]
 800c3fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c3fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	781b      	ldrb	r3, [r3, #0]
 800c406:	009b      	lsls	r3, r3, #2
 800c408:	4413      	add	r3, r2
 800c40a:	881b      	ldrh	r3, [r3, #0]
 800c40c:	b29b      	uxth	r3, r3
 800c40e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c412:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c416:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800c41a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800c41e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c422:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800c426:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800c42a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c42e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800c432:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c436:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c43a:	681a      	ldr	r2, [r3, #0]
 800c43c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c440:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	781b      	ldrb	r3, [r3, #0]
 800c448:	009b      	lsls	r3, r3, #2
 800c44a:	441a      	add	r2, r3
 800c44c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800c450:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c454:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c458:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c45c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c460:	b29b      	uxth	r3, r3
 800c462:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c464:	2300      	movs	r3, #0
}
 800c466:	4618      	mov	r0, r3
 800c468:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800c46c:	46bd      	mov	sp, r7
 800c46e:	bd80      	pop	{r7, pc}

0800c470 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c470:	b480      	push	{r7}
 800c472:	b085      	sub	sp, #20
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
 800c478:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800c47a:	683b      	ldr	r3, [r7, #0]
 800c47c:	785b      	ldrb	r3, [r3, #1]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d020      	beq.n	800c4c4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800c482:	687a      	ldr	r2, [r7, #4]
 800c484:	683b      	ldr	r3, [r7, #0]
 800c486:	781b      	ldrb	r3, [r3, #0]
 800c488:	009b      	lsls	r3, r3, #2
 800c48a:	4413      	add	r3, r2
 800c48c:	881b      	ldrh	r3, [r3, #0]
 800c48e:	b29b      	uxth	r3, r3
 800c490:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c494:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c498:	81bb      	strh	r3, [r7, #12]
 800c49a:	89bb      	ldrh	r3, [r7, #12]
 800c49c:	f083 0310 	eor.w	r3, r3, #16
 800c4a0:	81bb      	strh	r3, [r7, #12]
 800c4a2:	687a      	ldr	r2, [r7, #4]
 800c4a4:	683b      	ldr	r3, [r7, #0]
 800c4a6:	781b      	ldrb	r3, [r3, #0]
 800c4a8:	009b      	lsls	r3, r3, #2
 800c4aa:	441a      	add	r2, r3
 800c4ac:	89bb      	ldrh	r3, [r7, #12]
 800c4ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c4b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c4b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c4ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c4be:	b29b      	uxth	r3, r3
 800c4c0:	8013      	strh	r3, [r2, #0]
 800c4c2:	e01f      	b.n	800c504 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800c4c4:	687a      	ldr	r2, [r7, #4]
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	781b      	ldrb	r3, [r3, #0]
 800c4ca:	009b      	lsls	r3, r3, #2
 800c4cc:	4413      	add	r3, r2
 800c4ce:	881b      	ldrh	r3, [r3, #0]
 800c4d0:	b29b      	uxth	r3, r3
 800c4d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c4d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c4da:	81fb      	strh	r3, [r7, #14]
 800c4dc:	89fb      	ldrh	r3, [r7, #14]
 800c4de:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c4e2:	81fb      	strh	r3, [r7, #14]
 800c4e4:	687a      	ldr	r2, [r7, #4]
 800c4e6:	683b      	ldr	r3, [r7, #0]
 800c4e8:	781b      	ldrb	r3, [r3, #0]
 800c4ea:	009b      	lsls	r3, r3, #2
 800c4ec:	441a      	add	r2, r3
 800c4ee:	89fb      	ldrh	r3, [r7, #14]
 800c4f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c4f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c4f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c4fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c500:	b29b      	uxth	r3, r3
 800c502:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c504:	2300      	movs	r3, #0
}
 800c506:	4618      	mov	r0, r3
 800c508:	3714      	adds	r7, #20
 800c50a:	46bd      	mov	sp, r7
 800c50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c510:	4770      	bx	lr

0800c512 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c512:	b480      	push	{r7}
 800c514:	b087      	sub	sp, #28
 800c516:	af00      	add	r7, sp, #0
 800c518:	6078      	str	r0, [r7, #4]
 800c51a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c51c:	683b      	ldr	r3, [r7, #0]
 800c51e:	7b1b      	ldrb	r3, [r3, #12]
 800c520:	2b00      	cmp	r3, #0
 800c522:	f040 809d 	bne.w	800c660 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800c526:	683b      	ldr	r3, [r7, #0]
 800c528:	785b      	ldrb	r3, [r3, #1]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d04c      	beq.n	800c5c8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c52e:	687a      	ldr	r2, [r7, #4]
 800c530:	683b      	ldr	r3, [r7, #0]
 800c532:	781b      	ldrb	r3, [r3, #0]
 800c534:	009b      	lsls	r3, r3, #2
 800c536:	4413      	add	r3, r2
 800c538:	881b      	ldrh	r3, [r3, #0]
 800c53a:	823b      	strh	r3, [r7, #16]
 800c53c:	8a3b      	ldrh	r3, [r7, #16]
 800c53e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c542:	2b00      	cmp	r3, #0
 800c544:	d01b      	beq.n	800c57e <USB_EPClearStall+0x6c>
 800c546:	687a      	ldr	r2, [r7, #4]
 800c548:	683b      	ldr	r3, [r7, #0]
 800c54a:	781b      	ldrb	r3, [r3, #0]
 800c54c:	009b      	lsls	r3, r3, #2
 800c54e:	4413      	add	r3, r2
 800c550:	881b      	ldrh	r3, [r3, #0]
 800c552:	b29b      	uxth	r3, r3
 800c554:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c558:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c55c:	81fb      	strh	r3, [r7, #14]
 800c55e:	687a      	ldr	r2, [r7, #4]
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	781b      	ldrb	r3, [r3, #0]
 800c564:	009b      	lsls	r3, r3, #2
 800c566:	441a      	add	r2, r3
 800c568:	89fb      	ldrh	r3, [r7, #14]
 800c56a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c56e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c572:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c576:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c57a:	b29b      	uxth	r3, r3
 800c57c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c57e:	683b      	ldr	r3, [r7, #0]
 800c580:	78db      	ldrb	r3, [r3, #3]
 800c582:	2b01      	cmp	r3, #1
 800c584:	d06c      	beq.n	800c660 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c586:	687a      	ldr	r2, [r7, #4]
 800c588:	683b      	ldr	r3, [r7, #0]
 800c58a:	781b      	ldrb	r3, [r3, #0]
 800c58c:	009b      	lsls	r3, r3, #2
 800c58e:	4413      	add	r3, r2
 800c590:	881b      	ldrh	r3, [r3, #0]
 800c592:	b29b      	uxth	r3, r3
 800c594:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c598:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c59c:	81bb      	strh	r3, [r7, #12]
 800c59e:	89bb      	ldrh	r3, [r7, #12]
 800c5a0:	f083 0320 	eor.w	r3, r3, #32
 800c5a4:	81bb      	strh	r3, [r7, #12]
 800c5a6:	687a      	ldr	r2, [r7, #4]
 800c5a8:	683b      	ldr	r3, [r7, #0]
 800c5aa:	781b      	ldrb	r3, [r3, #0]
 800c5ac:	009b      	lsls	r3, r3, #2
 800c5ae:	441a      	add	r2, r3
 800c5b0:	89bb      	ldrh	r3, [r7, #12]
 800c5b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c5b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c5ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c5be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c5c2:	b29b      	uxth	r3, r3
 800c5c4:	8013      	strh	r3, [r2, #0]
 800c5c6:	e04b      	b.n	800c660 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c5c8:	687a      	ldr	r2, [r7, #4]
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	781b      	ldrb	r3, [r3, #0]
 800c5ce:	009b      	lsls	r3, r3, #2
 800c5d0:	4413      	add	r3, r2
 800c5d2:	881b      	ldrh	r3, [r3, #0]
 800c5d4:	82fb      	strh	r3, [r7, #22]
 800c5d6:	8afb      	ldrh	r3, [r7, #22]
 800c5d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d01b      	beq.n	800c618 <USB_EPClearStall+0x106>
 800c5e0:	687a      	ldr	r2, [r7, #4]
 800c5e2:	683b      	ldr	r3, [r7, #0]
 800c5e4:	781b      	ldrb	r3, [r3, #0]
 800c5e6:	009b      	lsls	r3, r3, #2
 800c5e8:	4413      	add	r3, r2
 800c5ea:	881b      	ldrh	r3, [r3, #0]
 800c5ec:	b29b      	uxth	r3, r3
 800c5ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c5f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c5f6:	82bb      	strh	r3, [r7, #20]
 800c5f8:	687a      	ldr	r2, [r7, #4]
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	781b      	ldrb	r3, [r3, #0]
 800c5fe:	009b      	lsls	r3, r3, #2
 800c600:	441a      	add	r2, r3
 800c602:	8abb      	ldrh	r3, [r7, #20]
 800c604:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c608:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c60c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c610:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c614:	b29b      	uxth	r3, r3
 800c616:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c618:	687a      	ldr	r2, [r7, #4]
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	781b      	ldrb	r3, [r3, #0]
 800c61e:	009b      	lsls	r3, r3, #2
 800c620:	4413      	add	r3, r2
 800c622:	881b      	ldrh	r3, [r3, #0]
 800c624:	b29b      	uxth	r3, r3
 800c626:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c62a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c62e:	827b      	strh	r3, [r7, #18]
 800c630:	8a7b      	ldrh	r3, [r7, #18]
 800c632:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c636:	827b      	strh	r3, [r7, #18]
 800c638:	8a7b      	ldrh	r3, [r7, #18]
 800c63a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c63e:	827b      	strh	r3, [r7, #18]
 800c640:	687a      	ldr	r2, [r7, #4]
 800c642:	683b      	ldr	r3, [r7, #0]
 800c644:	781b      	ldrb	r3, [r3, #0]
 800c646:	009b      	lsls	r3, r3, #2
 800c648:	441a      	add	r2, r3
 800c64a:	8a7b      	ldrh	r3, [r7, #18]
 800c64c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c650:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c654:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c658:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c65c:	b29b      	uxth	r3, r3
 800c65e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800c660:	2300      	movs	r3, #0
}
 800c662:	4618      	mov	r0, r3
 800c664:	371c      	adds	r7, #28
 800c666:	46bd      	mov	sp, r7
 800c668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66c:	4770      	bx	lr

0800c66e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800c66e:	b480      	push	{r7}
 800c670:	b083      	sub	sp, #12
 800c672:	af00      	add	r7, sp, #0
 800c674:	6078      	str	r0, [r7, #4]
 800c676:	460b      	mov	r3, r1
 800c678:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800c67a:	78fb      	ldrb	r3, [r7, #3]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d103      	bne.n	800c688 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	2280      	movs	r2, #128	@ 0x80
 800c684:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800c688:	2300      	movs	r3, #0
}
 800c68a:	4618      	mov	r0, r3
 800c68c:	370c      	adds	r7, #12
 800c68e:	46bd      	mov	sp, r7
 800c690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c694:	4770      	bx	lr

0800c696 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800c696:	b480      	push	{r7}
 800c698:	b083      	sub	sp, #12
 800c69a:	af00      	add	r7, sp, #0
 800c69c:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800c6a4:	b29b      	uxth	r3, r3
 800c6a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c6aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c6ae:	b29a      	uxth	r2, r3
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800c6b6:	2300      	movs	r3, #0
}
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	370c      	adds	r7, #12
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c2:	4770      	bx	lr

0800c6c4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800c6c4:	b480      	push	{r7}
 800c6c6:	b085      	sub	sp, #20
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800c6d2:	b29b      	uxth	r3, r3
 800c6d4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800c6d6:	68fb      	ldr	r3, [r7, #12]
}
 800c6d8:	4618      	mov	r0, r3
 800c6da:	3714      	adds	r7, #20
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e2:	4770      	bx	lr

0800c6e4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c6e4:	b480      	push	{r7}
 800c6e6:	b08b      	sub	sp, #44	@ 0x2c
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	60f8      	str	r0, [r7, #12]
 800c6ec:	60b9      	str	r1, [r7, #8]
 800c6ee:	4611      	mov	r1, r2
 800c6f0:	461a      	mov	r2, r3
 800c6f2:	460b      	mov	r3, r1
 800c6f4:	80fb      	strh	r3, [r7, #6]
 800c6f6:	4613      	mov	r3, r2
 800c6f8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c6fa:	88bb      	ldrh	r3, [r7, #4]
 800c6fc:	3301      	adds	r3, #1
 800c6fe:	085b      	lsrs	r3, r3, #1
 800c700:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c706:	68bb      	ldr	r3, [r7, #8]
 800c708:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c70a:	88fa      	ldrh	r2, [r7, #6]
 800c70c:	697b      	ldr	r3, [r7, #20]
 800c70e:	4413      	add	r3, r2
 800c710:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c714:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800c716:	69bb      	ldr	r3, [r7, #24]
 800c718:	627b      	str	r3, [r7, #36]	@ 0x24
 800c71a:	e01b      	b.n	800c754 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800c71c:	69fb      	ldr	r3, [r7, #28]
 800c71e:	781b      	ldrb	r3, [r3, #0]
 800c720:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800c722:	69fb      	ldr	r3, [r7, #28]
 800c724:	3301      	adds	r3, #1
 800c726:	781b      	ldrb	r3, [r3, #0]
 800c728:	021b      	lsls	r3, r3, #8
 800c72a:	b21a      	sxth	r2, r3
 800c72c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c730:	4313      	orrs	r3, r2
 800c732:	b21b      	sxth	r3, r3
 800c734:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800c736:	6a3b      	ldr	r3, [r7, #32]
 800c738:	8a7a      	ldrh	r2, [r7, #18]
 800c73a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800c73c:	6a3b      	ldr	r3, [r7, #32]
 800c73e:	3302      	adds	r3, #2
 800c740:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800c742:	69fb      	ldr	r3, [r7, #28]
 800c744:	3301      	adds	r3, #1
 800c746:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800c748:	69fb      	ldr	r3, [r7, #28]
 800c74a:	3301      	adds	r3, #1
 800c74c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800c74e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c750:	3b01      	subs	r3, #1
 800c752:	627b      	str	r3, [r7, #36]	@ 0x24
 800c754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c756:	2b00      	cmp	r3, #0
 800c758:	d1e0      	bne.n	800c71c <USB_WritePMA+0x38>
  }
}
 800c75a:	bf00      	nop
 800c75c:	bf00      	nop
 800c75e:	372c      	adds	r7, #44	@ 0x2c
 800c760:	46bd      	mov	sp, r7
 800c762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c766:	4770      	bx	lr

0800c768 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c768:	b480      	push	{r7}
 800c76a:	b08b      	sub	sp, #44	@ 0x2c
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	60f8      	str	r0, [r7, #12]
 800c770:	60b9      	str	r1, [r7, #8]
 800c772:	4611      	mov	r1, r2
 800c774:	461a      	mov	r2, r3
 800c776:	460b      	mov	r3, r1
 800c778:	80fb      	strh	r3, [r7, #6]
 800c77a:	4613      	mov	r3, r2
 800c77c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800c77e:	88bb      	ldrh	r3, [r7, #4]
 800c780:	085b      	lsrs	r3, r3, #1
 800c782:	b29b      	uxth	r3, r3
 800c784:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c78a:	68bb      	ldr	r3, [r7, #8]
 800c78c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c78e:	88fa      	ldrh	r2, [r7, #6]
 800c790:	697b      	ldr	r3, [r7, #20]
 800c792:	4413      	add	r3, r2
 800c794:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c798:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800c79a:	69bb      	ldr	r3, [r7, #24]
 800c79c:	627b      	str	r3, [r7, #36]	@ 0x24
 800c79e:	e018      	b.n	800c7d2 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800c7a0:	6a3b      	ldr	r3, [r7, #32]
 800c7a2:	881b      	ldrh	r3, [r3, #0]
 800c7a4:	b29b      	uxth	r3, r3
 800c7a6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800c7a8:	6a3b      	ldr	r3, [r7, #32]
 800c7aa:	3302      	adds	r3, #2
 800c7ac:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800c7ae:	693b      	ldr	r3, [r7, #16]
 800c7b0:	b2da      	uxtb	r2, r3
 800c7b2:	69fb      	ldr	r3, [r7, #28]
 800c7b4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c7b6:	69fb      	ldr	r3, [r7, #28]
 800c7b8:	3301      	adds	r3, #1
 800c7ba:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800c7bc:	693b      	ldr	r3, [r7, #16]
 800c7be:	0a1b      	lsrs	r3, r3, #8
 800c7c0:	b2da      	uxtb	r2, r3
 800c7c2:	69fb      	ldr	r3, [r7, #28]
 800c7c4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c7c6:	69fb      	ldr	r3, [r7, #28]
 800c7c8:	3301      	adds	r3, #1
 800c7ca:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800c7cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7ce:	3b01      	subs	r3, #1
 800c7d0:	627b      	str	r3, [r7, #36]	@ 0x24
 800c7d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d1e3      	bne.n	800c7a0 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800c7d8:	88bb      	ldrh	r3, [r7, #4]
 800c7da:	f003 0301 	and.w	r3, r3, #1
 800c7de:	b29b      	uxth	r3, r3
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d007      	beq.n	800c7f4 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800c7e4:	6a3b      	ldr	r3, [r7, #32]
 800c7e6:	881b      	ldrh	r3, [r3, #0]
 800c7e8:	b29b      	uxth	r3, r3
 800c7ea:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800c7ec:	693b      	ldr	r3, [r7, #16]
 800c7ee:	b2da      	uxtb	r2, r3
 800c7f0:	69fb      	ldr	r3, [r7, #28]
 800c7f2:	701a      	strb	r2, [r3, #0]
  }
}
 800c7f4:	bf00      	nop
 800c7f6:	372c      	adds	r7, #44	@ 0x2c
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fe:	4770      	bx	lr

0800c800 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c800:	b580      	push	{r7, lr}
 800c802:	b084      	sub	sp, #16
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
 800c808:	460b      	mov	r3, r1
 800c80a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c80c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800c810:	f002 f8fa 	bl	800ea08 <USBD_static_malloc>
 800c814:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d105      	bne.n	800c828 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	2200      	movs	r2, #0
 800c820:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800c824:	2302      	movs	r3, #2
 800c826:	e066      	b.n	800c8f6 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	68fa      	ldr	r2, [r7, #12]
 800c82c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	7c1b      	ldrb	r3, [r3, #16]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d119      	bne.n	800c86c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c838:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c83c:	2202      	movs	r2, #2
 800c83e:	2181      	movs	r1, #129	@ 0x81
 800c840:	6878      	ldr	r0, [r7, #4]
 800c842:	f001 ff88 	bl	800e756 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	2201      	movs	r2, #1
 800c84a:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c84c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c850:	2202      	movs	r2, #2
 800c852:	2101      	movs	r1, #1
 800c854:	6878      	ldr	r0, [r7, #4]
 800c856:	f001 ff7e 	bl	800e756 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	2201      	movs	r2, #1
 800c85e:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	2210      	movs	r2, #16
 800c866:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800c86a:	e016      	b.n	800c89a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c86c:	2340      	movs	r3, #64	@ 0x40
 800c86e:	2202      	movs	r2, #2
 800c870:	2181      	movs	r1, #129	@ 0x81
 800c872:	6878      	ldr	r0, [r7, #4]
 800c874:	f001 ff6f 	bl	800e756 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2201      	movs	r2, #1
 800c87c:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c87e:	2340      	movs	r3, #64	@ 0x40
 800c880:	2202      	movs	r2, #2
 800c882:	2101      	movs	r1, #1
 800c884:	6878      	ldr	r0, [r7, #4]
 800c886:	f001 ff66 	bl	800e756 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2201      	movs	r2, #1
 800c88e:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	2210      	movs	r2, #16
 800c896:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c89a:	2308      	movs	r3, #8
 800c89c:	2203      	movs	r2, #3
 800c89e:	2182      	movs	r1, #130	@ 0x82
 800c8a0:	6878      	ldr	r0, [r7, #4]
 800c8a2:	f001 ff58 	bl	800e756 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	2201      	movs	r2, #1
 800c8aa:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	7c1b      	ldrb	r3, [r3, #16]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d109      	bne.n	800c8e4 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c8d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c8da:	2101      	movs	r1, #1
 800c8dc:	6878      	ldr	r0, [r7, #4]
 800c8de:	f002 f829 	bl	800e934 <USBD_LL_PrepareReceive>
 800c8e2:	e007      	b.n	800c8f4 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c8ea:	2340      	movs	r3, #64	@ 0x40
 800c8ec:	2101      	movs	r1, #1
 800c8ee:	6878      	ldr	r0, [r7, #4]
 800c8f0:	f002 f820 	bl	800e934 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c8f4:	2300      	movs	r3, #0
}
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	3710      	adds	r7, #16
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	bd80      	pop	{r7, pc}

0800c8fe <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c8fe:	b580      	push	{r7, lr}
 800c900:	b082      	sub	sp, #8
 800c902:	af00      	add	r7, sp, #0
 800c904:	6078      	str	r0, [r7, #4]
 800c906:	460b      	mov	r3, r1
 800c908:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800c90a:	2181      	movs	r1, #129	@ 0x81
 800c90c:	6878      	ldr	r0, [r7, #4]
 800c90e:	f001 ff48 	bl	800e7a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	2200      	movs	r2, #0
 800c916:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800c918:	2101      	movs	r1, #1
 800c91a:	6878      	ldr	r0, [r7, #4]
 800c91c:	f001 ff41 	bl	800e7a2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	2200      	movs	r2, #0
 800c924:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800c928:	2182      	movs	r1, #130	@ 0x82
 800c92a:	6878      	ldr	r0, [r7, #4]
 800c92c:	f001 ff39 	bl	800e7a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	2200      	movs	r2, #0
 800c934:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	2200      	movs	r2, #0
 800c93c:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c946:	2b00      	cmp	r3, #0
 800c948:	d00e      	beq.n	800c968 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c950:	685b      	ldr	r3, [r3, #4]
 800c952:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c95a:	4618      	mov	r0, r3
 800c95c:	f002 f862 	bl	800ea24 <USBD_static_free>
    pdev->pClassData = NULL;
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	2200      	movs	r2, #0
 800c964:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c968:	2300      	movs	r3, #0
}
 800c96a:	4618      	mov	r0, r3
 800c96c:	3708      	adds	r7, #8
 800c96e:	46bd      	mov	sp, r7
 800c970:	bd80      	pop	{r7, pc}
	...

0800c974 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c974:	b580      	push	{r7, lr}
 800c976:	b086      	sub	sp, #24
 800c978:	af00      	add	r7, sp, #0
 800c97a:	6078      	str	r0, [r7, #4]
 800c97c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c984:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c986:	2300      	movs	r3, #0
 800c988:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c98a:	2300      	movs	r3, #0
 800c98c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c98e:	2300      	movs	r3, #0
 800c990:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c992:	693b      	ldr	r3, [r7, #16]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d101      	bne.n	800c99c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800c998:	2303      	movs	r3, #3
 800c99a:	e0af      	b.n	800cafc <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c99c:	683b      	ldr	r3, [r7, #0]
 800c99e:	781b      	ldrb	r3, [r3, #0]
 800c9a0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d03f      	beq.n	800ca28 <USBD_CDC_Setup+0xb4>
 800c9a8:	2b20      	cmp	r3, #32
 800c9aa:	f040 809f 	bne.w	800caec <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c9ae:	683b      	ldr	r3, [r7, #0]
 800c9b0:	88db      	ldrh	r3, [r3, #6]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d02e      	beq.n	800ca14 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	781b      	ldrb	r3, [r3, #0]
 800c9ba:	b25b      	sxtb	r3, r3
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	da16      	bge.n	800c9ee <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c9c6:	689b      	ldr	r3, [r3, #8]
 800c9c8:	683a      	ldr	r2, [r7, #0]
 800c9ca:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800c9cc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c9ce:	683a      	ldr	r2, [r7, #0]
 800c9d0:	88d2      	ldrh	r2, [r2, #6]
 800c9d2:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c9d4:	683b      	ldr	r3, [r7, #0]
 800c9d6:	88db      	ldrh	r3, [r3, #6]
 800c9d8:	2b07      	cmp	r3, #7
 800c9da:	bf28      	it	cs
 800c9dc:	2307      	movcs	r3, #7
 800c9de:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c9e0:	693b      	ldr	r3, [r7, #16]
 800c9e2:	89fa      	ldrh	r2, [r7, #14]
 800c9e4:	4619      	mov	r1, r3
 800c9e6:	6878      	ldr	r0, [r7, #4]
 800c9e8:	f001 facd 	bl	800df86 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800c9ec:	e085      	b.n	800cafa <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800c9ee:	683b      	ldr	r3, [r7, #0]
 800c9f0:	785a      	ldrb	r2, [r3, #1]
 800c9f2:	693b      	ldr	r3, [r7, #16]
 800c9f4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800c9f8:	683b      	ldr	r3, [r7, #0]
 800c9fa:	88db      	ldrh	r3, [r3, #6]
 800c9fc:	b2da      	uxtb	r2, r3
 800c9fe:	693b      	ldr	r3, [r7, #16]
 800ca00:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800ca04:	6939      	ldr	r1, [r7, #16]
 800ca06:	683b      	ldr	r3, [r7, #0]
 800ca08:	88db      	ldrh	r3, [r3, #6]
 800ca0a:	461a      	mov	r2, r3
 800ca0c:	6878      	ldr	r0, [r7, #4]
 800ca0e:	f001 fae6 	bl	800dfde <USBD_CtlPrepareRx>
      break;
 800ca12:	e072      	b.n	800cafa <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ca1a:	689b      	ldr	r3, [r3, #8]
 800ca1c:	683a      	ldr	r2, [r7, #0]
 800ca1e:	7850      	ldrb	r0, [r2, #1]
 800ca20:	2200      	movs	r2, #0
 800ca22:	6839      	ldr	r1, [r7, #0]
 800ca24:	4798      	blx	r3
      break;
 800ca26:	e068      	b.n	800cafa <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ca28:	683b      	ldr	r3, [r7, #0]
 800ca2a:	785b      	ldrb	r3, [r3, #1]
 800ca2c:	2b0b      	cmp	r3, #11
 800ca2e:	d852      	bhi.n	800cad6 <USBD_CDC_Setup+0x162>
 800ca30:	a201      	add	r2, pc, #4	@ (adr r2, 800ca38 <USBD_CDC_Setup+0xc4>)
 800ca32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca36:	bf00      	nop
 800ca38:	0800ca69 	.word	0x0800ca69
 800ca3c:	0800cae5 	.word	0x0800cae5
 800ca40:	0800cad7 	.word	0x0800cad7
 800ca44:	0800cad7 	.word	0x0800cad7
 800ca48:	0800cad7 	.word	0x0800cad7
 800ca4c:	0800cad7 	.word	0x0800cad7
 800ca50:	0800cad7 	.word	0x0800cad7
 800ca54:	0800cad7 	.word	0x0800cad7
 800ca58:	0800cad7 	.word	0x0800cad7
 800ca5c:	0800cad7 	.word	0x0800cad7
 800ca60:	0800ca93 	.word	0x0800ca93
 800ca64:	0800cabd 	.word	0x0800cabd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca6e:	b2db      	uxtb	r3, r3
 800ca70:	2b03      	cmp	r3, #3
 800ca72:	d107      	bne.n	800ca84 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ca74:	f107 030a 	add.w	r3, r7, #10
 800ca78:	2202      	movs	r2, #2
 800ca7a:	4619      	mov	r1, r3
 800ca7c:	6878      	ldr	r0, [r7, #4]
 800ca7e:	f001 fa82 	bl	800df86 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ca82:	e032      	b.n	800caea <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800ca84:	6839      	ldr	r1, [r7, #0]
 800ca86:	6878      	ldr	r0, [r7, #4]
 800ca88:	f001 fa0c 	bl	800dea4 <USBD_CtlError>
            ret = USBD_FAIL;
 800ca8c:	2303      	movs	r3, #3
 800ca8e:	75fb      	strb	r3, [r7, #23]
          break;
 800ca90:	e02b      	b.n	800caea <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca98:	b2db      	uxtb	r3, r3
 800ca9a:	2b03      	cmp	r3, #3
 800ca9c:	d107      	bne.n	800caae <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ca9e:	f107 030d 	add.w	r3, r7, #13
 800caa2:	2201      	movs	r2, #1
 800caa4:	4619      	mov	r1, r3
 800caa6:	6878      	ldr	r0, [r7, #4]
 800caa8:	f001 fa6d 	bl	800df86 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800caac:	e01d      	b.n	800caea <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800caae:	6839      	ldr	r1, [r7, #0]
 800cab0:	6878      	ldr	r0, [r7, #4]
 800cab2:	f001 f9f7 	bl	800dea4 <USBD_CtlError>
            ret = USBD_FAIL;
 800cab6:	2303      	movs	r3, #3
 800cab8:	75fb      	strb	r3, [r7, #23]
          break;
 800caba:	e016      	b.n	800caea <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cac2:	b2db      	uxtb	r3, r3
 800cac4:	2b03      	cmp	r3, #3
 800cac6:	d00f      	beq.n	800cae8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800cac8:	6839      	ldr	r1, [r7, #0]
 800caca:	6878      	ldr	r0, [r7, #4]
 800cacc:	f001 f9ea 	bl	800dea4 <USBD_CtlError>
            ret = USBD_FAIL;
 800cad0:	2303      	movs	r3, #3
 800cad2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800cad4:	e008      	b.n	800cae8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800cad6:	6839      	ldr	r1, [r7, #0]
 800cad8:	6878      	ldr	r0, [r7, #4]
 800cada:	f001 f9e3 	bl	800dea4 <USBD_CtlError>
          ret = USBD_FAIL;
 800cade:	2303      	movs	r3, #3
 800cae0:	75fb      	strb	r3, [r7, #23]
          break;
 800cae2:	e002      	b.n	800caea <USBD_CDC_Setup+0x176>
          break;
 800cae4:	bf00      	nop
 800cae6:	e008      	b.n	800cafa <USBD_CDC_Setup+0x186>
          break;
 800cae8:	bf00      	nop
      }
      break;
 800caea:	e006      	b.n	800cafa <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800caec:	6839      	ldr	r1, [r7, #0]
 800caee:	6878      	ldr	r0, [r7, #4]
 800caf0:	f001 f9d8 	bl	800dea4 <USBD_CtlError>
      ret = USBD_FAIL;
 800caf4:	2303      	movs	r3, #3
 800caf6:	75fb      	strb	r3, [r7, #23]
      break;
 800caf8:	bf00      	nop
  }

  return (uint8_t)ret;
 800cafa:	7dfb      	ldrb	r3, [r7, #23]
}
 800cafc:	4618      	mov	r0, r3
 800cafe:	3718      	adds	r7, #24
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd80      	pop	{r7, pc}

0800cb04 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b084      	sub	sp, #16
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
 800cb0c:	460b      	mov	r3, r1
 800cb0e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800cb16:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d101      	bne.n	800cb26 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800cb22:	2303      	movs	r3, #3
 800cb24:	e04f      	b.n	800cbc6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800cb2c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800cb2e:	78fa      	ldrb	r2, [r7, #3]
 800cb30:	6879      	ldr	r1, [r7, #4]
 800cb32:	4613      	mov	r3, r2
 800cb34:	009b      	lsls	r3, r3, #2
 800cb36:	4413      	add	r3, r2
 800cb38:	009b      	lsls	r3, r3, #2
 800cb3a:	440b      	add	r3, r1
 800cb3c:	3318      	adds	r3, #24
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d029      	beq.n	800cb98 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800cb44:	78fa      	ldrb	r2, [r7, #3]
 800cb46:	6879      	ldr	r1, [r7, #4]
 800cb48:	4613      	mov	r3, r2
 800cb4a:	009b      	lsls	r3, r3, #2
 800cb4c:	4413      	add	r3, r2
 800cb4e:	009b      	lsls	r3, r3, #2
 800cb50:	440b      	add	r3, r1
 800cb52:	3318      	adds	r3, #24
 800cb54:	681a      	ldr	r2, [r3, #0]
 800cb56:	78f9      	ldrb	r1, [r7, #3]
 800cb58:	68f8      	ldr	r0, [r7, #12]
 800cb5a:	460b      	mov	r3, r1
 800cb5c:	009b      	lsls	r3, r3, #2
 800cb5e:	440b      	add	r3, r1
 800cb60:	00db      	lsls	r3, r3, #3
 800cb62:	4403      	add	r3, r0
 800cb64:	3320      	adds	r3, #32
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	fbb2 f1f3 	udiv	r1, r2, r3
 800cb6c:	fb01 f303 	mul.w	r3, r1, r3
 800cb70:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d110      	bne.n	800cb98 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800cb76:	78fa      	ldrb	r2, [r7, #3]
 800cb78:	6879      	ldr	r1, [r7, #4]
 800cb7a:	4613      	mov	r3, r2
 800cb7c:	009b      	lsls	r3, r3, #2
 800cb7e:	4413      	add	r3, r2
 800cb80:	009b      	lsls	r3, r3, #2
 800cb82:	440b      	add	r3, r1
 800cb84:	3318      	adds	r3, #24
 800cb86:	2200      	movs	r2, #0
 800cb88:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800cb8a:	78f9      	ldrb	r1, [r7, #3]
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	2200      	movs	r2, #0
 800cb90:	6878      	ldr	r0, [r7, #4]
 800cb92:	f001 feae 	bl	800e8f2 <USBD_LL_Transmit>
 800cb96:	e015      	b.n	800cbc4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800cb98:	68bb      	ldr	r3, [r7, #8]
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cba6:	691b      	ldr	r3, [r3, #16]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d00b      	beq.n	800cbc4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cbb2:	691b      	ldr	r3, [r3, #16]
 800cbb4:	68ba      	ldr	r2, [r7, #8]
 800cbb6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800cbba:	68ba      	ldr	r2, [r7, #8]
 800cbbc:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800cbc0:	78fa      	ldrb	r2, [r7, #3]
 800cbc2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800cbc4:	2300      	movs	r3, #0
}
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	3710      	adds	r7, #16
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	bd80      	pop	{r7, pc}

0800cbce <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cbce:	b580      	push	{r7, lr}
 800cbd0:	b084      	sub	sp, #16
 800cbd2:	af00      	add	r7, sp, #0
 800cbd4:	6078      	str	r0, [r7, #4]
 800cbd6:	460b      	mov	r3, r1
 800cbd8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800cbe0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d101      	bne.n	800cbf0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800cbec:	2303      	movs	r3, #3
 800cbee:	e015      	b.n	800cc1c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800cbf0:	78fb      	ldrb	r3, [r7, #3]
 800cbf2:	4619      	mov	r1, r3
 800cbf4:	6878      	ldr	r0, [r7, #4]
 800cbf6:	f001 febe 	bl	800e976 <USBD_LL_GetRxDataSize>
 800cbfa:	4602      	mov	r2, r0
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cc08:	68db      	ldr	r3, [r3, #12]
 800cc0a:	68fa      	ldr	r2, [r7, #12]
 800cc0c:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800cc10:	68fa      	ldr	r2, [r7, #12]
 800cc12:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800cc16:	4611      	mov	r1, r2
 800cc18:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800cc1a:	2300      	movs	r3, #0
}
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	3710      	adds	r7, #16
 800cc20:	46bd      	mov	sp, r7
 800cc22:	bd80      	pop	{r7, pc}

0800cc24 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b084      	sub	sp, #16
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800cc32:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d101      	bne.n	800cc3e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800cc3a:	2303      	movs	r3, #3
 800cc3c:	e01a      	b.n	800cc74 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d014      	beq.n	800cc72 <USBD_CDC_EP0_RxReady+0x4e>
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800cc4e:	2bff      	cmp	r3, #255	@ 0xff
 800cc50:	d00f      	beq.n	800cc72 <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cc58:	689b      	ldr	r3, [r3, #8]
 800cc5a:	68fa      	ldr	r2, [r7, #12]
 800cc5c:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800cc60:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800cc62:	68fa      	ldr	r2, [r7, #12]
 800cc64:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800cc68:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	22ff      	movs	r2, #255	@ 0xff
 800cc6e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800cc72:	2300      	movs	r3, #0
}
 800cc74:	4618      	mov	r0, r3
 800cc76:	3710      	adds	r7, #16
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	bd80      	pop	{r7, pc}

0800cc7c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800cc7c:	b480      	push	{r7}
 800cc7e:	b083      	sub	sp, #12
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	2243      	movs	r2, #67	@ 0x43
 800cc88:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800cc8a:	4b03      	ldr	r3, [pc, #12]	@ (800cc98 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	370c      	adds	r7, #12
 800cc90:	46bd      	mov	sp, r7
 800cc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc96:	4770      	bx	lr
 800cc98:	20000094 	.word	0x20000094

0800cc9c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800cc9c:	b480      	push	{r7}
 800cc9e:	b083      	sub	sp, #12
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	2243      	movs	r2, #67	@ 0x43
 800cca8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800ccaa:	4b03      	ldr	r3, [pc, #12]	@ (800ccb8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800ccac:	4618      	mov	r0, r3
 800ccae:	370c      	adds	r7, #12
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb6:	4770      	bx	lr
 800ccb8:	20000050 	.word	0x20000050

0800ccbc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ccbc:	b480      	push	{r7}
 800ccbe:	b083      	sub	sp, #12
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	2243      	movs	r2, #67	@ 0x43
 800ccc8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800ccca:	4b03      	ldr	r3, [pc, #12]	@ (800ccd8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800cccc:	4618      	mov	r0, r3
 800ccce:	370c      	adds	r7, #12
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd6:	4770      	bx	lr
 800ccd8:	200000d8 	.word	0x200000d8

0800ccdc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ccdc:	b480      	push	{r7}
 800ccde:	b083      	sub	sp, #12
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	220a      	movs	r2, #10
 800cce8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ccea:	4b03      	ldr	r3, [pc, #12]	@ (800ccf8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ccec:	4618      	mov	r0, r3
 800ccee:	370c      	adds	r7, #12
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf6:	4770      	bx	lr
 800ccf8:	2000000c 	.word	0x2000000c

0800ccfc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ccfc:	b480      	push	{r7}
 800ccfe:	b083      	sub	sp, #12
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
 800cd04:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800cd06:	683b      	ldr	r3, [r7, #0]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d101      	bne.n	800cd10 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800cd0c:	2303      	movs	r3, #3
 800cd0e:	e004      	b.n	800cd1a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	683a      	ldr	r2, [r7, #0]
 800cd14:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800cd18:	2300      	movs	r3, #0
}
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	370c      	adds	r7, #12
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd24:	4770      	bx	lr

0800cd26 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800cd26:	b480      	push	{r7}
 800cd28:	b087      	sub	sp, #28
 800cd2a:	af00      	add	r7, sp, #0
 800cd2c:	60f8      	str	r0, [r7, #12]
 800cd2e:	60b9      	str	r1, [r7, #8]
 800cd30:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800cd38:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800cd3a:	697b      	ldr	r3, [r7, #20]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d101      	bne.n	800cd44 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800cd40:	2303      	movs	r3, #3
 800cd42:	e008      	b.n	800cd56 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800cd44:	697b      	ldr	r3, [r7, #20]
 800cd46:	68ba      	ldr	r2, [r7, #8]
 800cd48:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800cd4c:	697b      	ldr	r3, [r7, #20]
 800cd4e:	687a      	ldr	r2, [r7, #4]
 800cd50:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800cd54:	2300      	movs	r3, #0
}
 800cd56:	4618      	mov	r0, r3
 800cd58:	371c      	adds	r7, #28
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd60:	4770      	bx	lr

0800cd62 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800cd62:	b480      	push	{r7}
 800cd64:	b085      	sub	sp, #20
 800cd66:	af00      	add	r7, sp, #0
 800cd68:	6078      	str	r0, [r7, #4]
 800cd6a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800cd72:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d101      	bne.n	800cd7e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800cd7a:	2303      	movs	r3, #3
 800cd7c:	e004      	b.n	800cd88 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	683a      	ldr	r2, [r7, #0]
 800cd82:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800cd86:	2300      	movs	r3, #0
}
 800cd88:	4618      	mov	r0, r3
 800cd8a:	3714      	adds	r7, #20
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd92:	4770      	bx	lr

0800cd94 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b084      	sub	sp, #16
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800cda2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800cda4:	2301      	movs	r3, #1
 800cda6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d101      	bne.n	800cdb6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800cdb2:	2303      	movs	r3, #3
 800cdb4:	e01a      	b.n	800cdec <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800cdb6:	68bb      	ldr	r3, [r7, #8]
 800cdb8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d114      	bne.n	800cdea <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800cdc0:	68bb      	ldr	r3, [r7, #8]
 800cdc2:	2201      	movs	r2, #1
 800cdc4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800cdc8:	68bb      	ldr	r3, [r7, #8]
 800cdca:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800cdd2:	68bb      	ldr	r3, [r7, #8]
 800cdd4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800cdd8:	68bb      	ldr	r3, [r7, #8]
 800cdda:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800cdde:	2181      	movs	r1, #129	@ 0x81
 800cde0:	6878      	ldr	r0, [r7, #4]
 800cde2:	f001 fd86 	bl	800e8f2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800cde6:	2300      	movs	r3, #0
 800cde8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800cdea:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdec:	4618      	mov	r0, r3
 800cdee:	3710      	adds	r7, #16
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	bd80      	pop	{r7, pc}

0800cdf4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b084      	sub	sp, #16
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ce02:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d101      	bne.n	800ce12 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800ce0e:	2303      	movs	r3, #3
 800ce10:	e016      	b.n	800ce40 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	7c1b      	ldrb	r3, [r3, #16]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d109      	bne.n	800ce2e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ce20:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ce24:	2101      	movs	r1, #1
 800ce26:	6878      	ldr	r0, [r7, #4]
 800ce28:	f001 fd84 	bl	800e934 <USBD_LL_PrepareReceive>
 800ce2c:	e007      	b.n	800ce3e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ce34:	2340      	movs	r3, #64	@ 0x40
 800ce36:	2101      	movs	r1, #1
 800ce38:	6878      	ldr	r0, [r7, #4]
 800ce3a:	f001 fd7b 	bl	800e934 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ce3e:	2300      	movs	r3, #0
}
 800ce40:	4618      	mov	r0, r3
 800ce42:	3710      	adds	r7, #16
 800ce44:	46bd      	mov	sp, r7
 800ce46:	bd80      	pop	{r7, pc}

0800ce48 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b086      	sub	sp, #24
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	60f8      	str	r0, [r7, #12]
 800ce50:	60b9      	str	r1, [r7, #8]
 800ce52:	4613      	mov	r3, r2
 800ce54:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d101      	bne.n	800ce60 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ce5c:	2303      	movs	r3, #3
 800ce5e:	e01f      	b.n	800cea0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	2200      	movs	r2, #0
 800ce64:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	2200      	movs	r2, #0
 800ce6c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	2200      	movs	r2, #0
 800ce74:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ce78:	68bb      	ldr	r3, [r7, #8]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d003      	beq.n	800ce86 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	68ba      	ldr	r2, [r7, #8]
 800ce82:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	2201      	movs	r2, #1
 800ce8a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	79fa      	ldrb	r2, [r7, #7]
 800ce92:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ce94:	68f8      	ldr	r0, [r7, #12]
 800ce96:	f001 fbe3 	bl	800e660 <USBD_LL_Init>
 800ce9a:	4603      	mov	r3, r0
 800ce9c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ce9e:	7dfb      	ldrb	r3, [r7, #23]
}
 800cea0:	4618      	mov	r0, r3
 800cea2:	3718      	adds	r7, #24
 800cea4:	46bd      	mov	sp, r7
 800cea6:	bd80      	pop	{r7, pc}

0800cea8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b084      	sub	sp, #16
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	6078      	str	r0, [r7, #4]
 800ceb0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ceb6:	683b      	ldr	r3, [r7, #0]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d101      	bne.n	800cec0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800cebc:	2303      	movs	r3, #3
 800cebe:	e016      	b.n	800ceee <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	683a      	ldr	r2, [r7, #0]
 800cec4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d00b      	beq.n	800ceec <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ceda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cedc:	f107 020e 	add.w	r2, r7, #14
 800cee0:	4610      	mov	r0, r2
 800cee2:	4798      	blx	r3
 800cee4:	4602      	mov	r2, r0
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800ceec:	2300      	movs	r3, #0
}
 800ceee:	4618      	mov	r0, r3
 800cef0:	3710      	adds	r7, #16
 800cef2:	46bd      	mov	sp, r7
 800cef4:	bd80      	pop	{r7, pc}

0800cef6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800cef6:	b580      	push	{r7, lr}
 800cef8:	b082      	sub	sp, #8
 800cefa:	af00      	add	r7, sp, #0
 800cefc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800cefe:	6878      	ldr	r0, [r7, #4]
 800cf00:	f001 fc0e 	bl	800e720 <USBD_LL_Start>
 800cf04:	4603      	mov	r3, r0
}
 800cf06:	4618      	mov	r0, r3
 800cf08:	3708      	adds	r7, #8
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	bd80      	pop	{r7, pc}

0800cf0e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800cf0e:	b480      	push	{r7}
 800cf10:	b083      	sub	sp, #12
 800cf12:	af00      	add	r7, sp, #0
 800cf14:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cf16:	2300      	movs	r3, #0
}
 800cf18:	4618      	mov	r0, r3
 800cf1a:	370c      	adds	r7, #12
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf22:	4770      	bx	lr

0800cf24 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b084      	sub	sp, #16
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
 800cf2c:	460b      	mov	r3, r1
 800cf2e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800cf30:	2303      	movs	r3, #3
 800cf32:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d009      	beq.n	800cf52 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	78fa      	ldrb	r2, [r7, #3]
 800cf48:	4611      	mov	r1, r2
 800cf4a:	6878      	ldr	r0, [r7, #4]
 800cf4c:	4798      	blx	r3
 800cf4e:	4603      	mov	r3, r0
 800cf50:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800cf52:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf54:	4618      	mov	r0, r3
 800cf56:	3710      	adds	r7, #16
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	bd80      	pop	{r7, pc}

0800cf5c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b082      	sub	sp, #8
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	6078      	str	r0, [r7, #4]
 800cf64:	460b      	mov	r3, r1
 800cf66:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d007      	beq.n	800cf82 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cf78:	685b      	ldr	r3, [r3, #4]
 800cf7a:	78fa      	ldrb	r2, [r7, #3]
 800cf7c:	4611      	mov	r1, r2
 800cf7e:	6878      	ldr	r0, [r7, #4]
 800cf80:	4798      	blx	r3
  }

  return USBD_OK;
 800cf82:	2300      	movs	r3, #0
}
 800cf84:	4618      	mov	r0, r3
 800cf86:	3708      	adds	r7, #8
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	bd80      	pop	{r7, pc}

0800cf8c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b084      	sub	sp, #16
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
 800cf94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800cf9c:	6839      	ldr	r1, [r7, #0]
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	f000 ff46 	bl	800de30 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	2201      	movs	r2, #1
 800cfa8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800cfb2:	461a      	mov	r2, r3
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800cfc0:	f003 031f 	and.w	r3, r3, #31
 800cfc4:	2b02      	cmp	r3, #2
 800cfc6:	d01a      	beq.n	800cffe <USBD_LL_SetupStage+0x72>
 800cfc8:	2b02      	cmp	r3, #2
 800cfca:	d822      	bhi.n	800d012 <USBD_LL_SetupStage+0x86>
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d002      	beq.n	800cfd6 <USBD_LL_SetupStage+0x4a>
 800cfd0:	2b01      	cmp	r3, #1
 800cfd2:	d00a      	beq.n	800cfea <USBD_LL_SetupStage+0x5e>
 800cfd4:	e01d      	b.n	800d012 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800cfdc:	4619      	mov	r1, r3
 800cfde:	6878      	ldr	r0, [r7, #4]
 800cfe0:	f000 f9ee 	bl	800d3c0 <USBD_StdDevReq>
 800cfe4:	4603      	mov	r3, r0
 800cfe6:	73fb      	strb	r3, [r7, #15]
      break;
 800cfe8:	e020      	b.n	800d02c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800cff0:	4619      	mov	r1, r3
 800cff2:	6878      	ldr	r0, [r7, #4]
 800cff4:	f000 fa52 	bl	800d49c <USBD_StdItfReq>
 800cff8:	4603      	mov	r3, r0
 800cffa:	73fb      	strb	r3, [r7, #15]
      break;
 800cffc:	e016      	b.n	800d02c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d004:	4619      	mov	r1, r3
 800d006:	6878      	ldr	r0, [r7, #4]
 800d008:	f000 fa91 	bl	800d52e <USBD_StdEPReq>
 800d00c:	4603      	mov	r3, r0
 800d00e:	73fb      	strb	r3, [r7, #15]
      break;
 800d010:	e00c      	b.n	800d02c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d018:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800d01c:	b2db      	uxtb	r3, r3
 800d01e:	4619      	mov	r1, r3
 800d020:	6878      	ldr	r0, [r7, #4]
 800d022:	f001 fbdd 	bl	800e7e0 <USBD_LL_StallEP>
 800d026:	4603      	mov	r3, r0
 800d028:	73fb      	strb	r3, [r7, #15]
      break;
 800d02a:	bf00      	nop
  }

  return ret;
 800d02c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d02e:	4618      	mov	r0, r3
 800d030:	3710      	adds	r7, #16
 800d032:	46bd      	mov	sp, r7
 800d034:	bd80      	pop	{r7, pc}

0800d036 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d036:	b580      	push	{r7, lr}
 800d038:	b086      	sub	sp, #24
 800d03a:	af00      	add	r7, sp, #0
 800d03c:	60f8      	str	r0, [r7, #12]
 800d03e:	460b      	mov	r3, r1
 800d040:	607a      	str	r2, [r7, #4]
 800d042:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d044:	7afb      	ldrb	r3, [r7, #11]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d138      	bne.n	800d0bc <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800d050:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d058:	2b03      	cmp	r3, #3
 800d05a:	d14a      	bne.n	800d0f2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800d05c:	693b      	ldr	r3, [r7, #16]
 800d05e:	689a      	ldr	r2, [r3, #8]
 800d060:	693b      	ldr	r3, [r7, #16]
 800d062:	68db      	ldr	r3, [r3, #12]
 800d064:	429a      	cmp	r2, r3
 800d066:	d913      	bls.n	800d090 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d068:	693b      	ldr	r3, [r7, #16]
 800d06a:	689a      	ldr	r2, [r3, #8]
 800d06c:	693b      	ldr	r3, [r7, #16]
 800d06e:	68db      	ldr	r3, [r3, #12]
 800d070:	1ad2      	subs	r2, r2, r3
 800d072:	693b      	ldr	r3, [r7, #16]
 800d074:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d076:	693b      	ldr	r3, [r7, #16]
 800d078:	68da      	ldr	r2, [r3, #12]
 800d07a:	693b      	ldr	r3, [r7, #16]
 800d07c:	689b      	ldr	r3, [r3, #8]
 800d07e:	4293      	cmp	r3, r2
 800d080:	bf28      	it	cs
 800d082:	4613      	movcs	r3, r2
 800d084:	461a      	mov	r2, r3
 800d086:	6879      	ldr	r1, [r7, #4]
 800d088:	68f8      	ldr	r0, [r7, #12]
 800d08a:	f000 ffc5 	bl	800e018 <USBD_CtlContinueRx>
 800d08e:	e030      	b.n	800d0f2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d096:	b2db      	uxtb	r3, r3
 800d098:	2b03      	cmp	r3, #3
 800d09a:	d10b      	bne.n	800d0b4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d0a2:	691b      	ldr	r3, [r3, #16]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d005      	beq.n	800d0b4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d0ae:	691b      	ldr	r3, [r3, #16]
 800d0b0:	68f8      	ldr	r0, [r7, #12]
 800d0b2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d0b4:	68f8      	ldr	r0, [r7, #12]
 800d0b6:	f000 ffc0 	bl	800e03a <USBD_CtlSendStatus>
 800d0ba:	e01a      	b.n	800d0f2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d0c2:	b2db      	uxtb	r3, r3
 800d0c4:	2b03      	cmp	r3, #3
 800d0c6:	d114      	bne.n	800d0f2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d0ce:	699b      	ldr	r3, [r3, #24]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d00e      	beq.n	800d0f2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d0da:	699b      	ldr	r3, [r3, #24]
 800d0dc:	7afa      	ldrb	r2, [r7, #11]
 800d0de:	4611      	mov	r1, r2
 800d0e0:	68f8      	ldr	r0, [r7, #12]
 800d0e2:	4798      	blx	r3
 800d0e4:	4603      	mov	r3, r0
 800d0e6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800d0e8:	7dfb      	ldrb	r3, [r7, #23]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d001      	beq.n	800d0f2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800d0ee:	7dfb      	ldrb	r3, [r7, #23]
 800d0f0:	e000      	b.n	800d0f4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800d0f2:	2300      	movs	r3, #0
}
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	3718      	adds	r7, #24
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	bd80      	pop	{r7, pc}

0800d0fc <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b086      	sub	sp, #24
 800d100:	af00      	add	r7, sp, #0
 800d102:	60f8      	str	r0, [r7, #12]
 800d104:	460b      	mov	r3, r1
 800d106:	607a      	str	r2, [r7, #4]
 800d108:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d10a:	7afb      	ldrb	r3, [r7, #11]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d16b      	bne.n	800d1e8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	3314      	adds	r3, #20
 800d114:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d11c:	2b02      	cmp	r3, #2
 800d11e:	d156      	bne.n	800d1ce <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800d120:	693b      	ldr	r3, [r7, #16]
 800d122:	689a      	ldr	r2, [r3, #8]
 800d124:	693b      	ldr	r3, [r7, #16]
 800d126:	68db      	ldr	r3, [r3, #12]
 800d128:	429a      	cmp	r2, r3
 800d12a:	d914      	bls.n	800d156 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d12c:	693b      	ldr	r3, [r7, #16]
 800d12e:	689a      	ldr	r2, [r3, #8]
 800d130:	693b      	ldr	r3, [r7, #16]
 800d132:	68db      	ldr	r3, [r3, #12]
 800d134:	1ad2      	subs	r2, r2, r3
 800d136:	693b      	ldr	r3, [r7, #16]
 800d138:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d13a:	693b      	ldr	r3, [r7, #16]
 800d13c:	689b      	ldr	r3, [r3, #8]
 800d13e:	461a      	mov	r2, r3
 800d140:	6879      	ldr	r1, [r7, #4]
 800d142:	68f8      	ldr	r0, [r7, #12]
 800d144:	f000 ff3a 	bl	800dfbc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d148:	2300      	movs	r3, #0
 800d14a:	2200      	movs	r2, #0
 800d14c:	2100      	movs	r1, #0
 800d14e:	68f8      	ldr	r0, [r7, #12]
 800d150:	f001 fbf0 	bl	800e934 <USBD_LL_PrepareReceive>
 800d154:	e03b      	b.n	800d1ce <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d156:	693b      	ldr	r3, [r7, #16]
 800d158:	68da      	ldr	r2, [r3, #12]
 800d15a:	693b      	ldr	r3, [r7, #16]
 800d15c:	689b      	ldr	r3, [r3, #8]
 800d15e:	429a      	cmp	r2, r3
 800d160:	d11c      	bne.n	800d19c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d162:	693b      	ldr	r3, [r7, #16]
 800d164:	685a      	ldr	r2, [r3, #4]
 800d166:	693b      	ldr	r3, [r7, #16]
 800d168:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d16a:	429a      	cmp	r2, r3
 800d16c:	d316      	bcc.n	800d19c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d16e:	693b      	ldr	r3, [r7, #16]
 800d170:	685a      	ldr	r2, [r3, #4]
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d178:	429a      	cmp	r2, r3
 800d17a:	d20f      	bcs.n	800d19c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d17c:	2200      	movs	r2, #0
 800d17e:	2100      	movs	r1, #0
 800d180:	68f8      	ldr	r0, [r7, #12]
 800d182:	f000 ff1b 	bl	800dfbc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	2200      	movs	r2, #0
 800d18a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d18e:	2300      	movs	r3, #0
 800d190:	2200      	movs	r2, #0
 800d192:	2100      	movs	r1, #0
 800d194:	68f8      	ldr	r0, [r7, #12]
 800d196:	f001 fbcd 	bl	800e934 <USBD_LL_PrepareReceive>
 800d19a:	e018      	b.n	800d1ce <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d1a2:	b2db      	uxtb	r3, r3
 800d1a4:	2b03      	cmp	r3, #3
 800d1a6:	d10b      	bne.n	800d1c0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d1ae:	68db      	ldr	r3, [r3, #12]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d005      	beq.n	800d1c0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d1ba:	68db      	ldr	r3, [r3, #12]
 800d1bc:	68f8      	ldr	r0, [r7, #12]
 800d1be:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d1c0:	2180      	movs	r1, #128	@ 0x80
 800d1c2:	68f8      	ldr	r0, [r7, #12]
 800d1c4:	f001 fb0c 	bl	800e7e0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d1c8:	68f8      	ldr	r0, [r7, #12]
 800d1ca:	f000 ff49 	bl	800e060 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800d1d4:	2b01      	cmp	r3, #1
 800d1d6:	d122      	bne.n	800d21e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800d1d8:	68f8      	ldr	r0, [r7, #12]
 800d1da:	f7ff fe98 	bl	800cf0e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800d1e6:	e01a      	b.n	800d21e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d1ee:	b2db      	uxtb	r3, r3
 800d1f0:	2b03      	cmp	r3, #3
 800d1f2:	d114      	bne.n	800d21e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d1fa:	695b      	ldr	r3, [r3, #20]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d00e      	beq.n	800d21e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d206:	695b      	ldr	r3, [r3, #20]
 800d208:	7afa      	ldrb	r2, [r7, #11]
 800d20a:	4611      	mov	r1, r2
 800d20c:	68f8      	ldr	r0, [r7, #12]
 800d20e:	4798      	blx	r3
 800d210:	4603      	mov	r3, r0
 800d212:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800d214:	7dfb      	ldrb	r3, [r7, #23]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d001      	beq.n	800d21e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800d21a:	7dfb      	ldrb	r3, [r7, #23]
 800d21c:	e000      	b.n	800d220 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800d21e:	2300      	movs	r3, #0
}
 800d220:	4618      	mov	r0, r3
 800d222:	3718      	adds	r7, #24
 800d224:	46bd      	mov	sp, r7
 800d226:	bd80      	pop	{r7, pc}

0800d228 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d228:	b580      	push	{r7, lr}
 800d22a:	b082      	sub	sp, #8
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	2201      	movs	r2, #1
 800d234:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	2200      	movs	r2, #0
 800d23c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	2200      	movs	r2, #0
 800d244:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	2200      	movs	r2, #0
 800d24a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d254:	2b00      	cmp	r3, #0
 800d256:	d101      	bne.n	800d25c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800d258:	2303      	movs	r3, #3
 800d25a:	e02f      	b.n	800d2bc <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d262:	2b00      	cmp	r3, #0
 800d264:	d00f      	beq.n	800d286 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d26c:	685b      	ldr	r3, [r3, #4]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d009      	beq.n	800d286 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d278:	685b      	ldr	r3, [r3, #4]
 800d27a:	687a      	ldr	r2, [r7, #4]
 800d27c:	6852      	ldr	r2, [r2, #4]
 800d27e:	b2d2      	uxtb	r2, r2
 800d280:	4611      	mov	r1, r2
 800d282:	6878      	ldr	r0, [r7, #4]
 800d284:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d286:	2340      	movs	r3, #64	@ 0x40
 800d288:	2200      	movs	r2, #0
 800d28a:	2100      	movs	r1, #0
 800d28c:	6878      	ldr	r0, [r7, #4]
 800d28e:	f001 fa62 	bl	800e756 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	2201      	movs	r2, #1
 800d296:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	2240      	movs	r2, #64	@ 0x40
 800d29e:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d2a2:	2340      	movs	r3, #64	@ 0x40
 800d2a4:	2200      	movs	r2, #0
 800d2a6:	2180      	movs	r1, #128	@ 0x80
 800d2a8:	6878      	ldr	r0, [r7, #4]
 800d2aa:	f001 fa54 	bl	800e756 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	2201      	movs	r2, #1
 800d2b2:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	2240      	movs	r2, #64	@ 0x40
 800d2b8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800d2ba:	2300      	movs	r3, #0
}
 800d2bc:	4618      	mov	r0, r3
 800d2be:	3708      	adds	r7, #8
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	bd80      	pop	{r7, pc}

0800d2c4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d2c4:	b480      	push	{r7}
 800d2c6:	b083      	sub	sp, #12
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	6078      	str	r0, [r7, #4]
 800d2cc:	460b      	mov	r3, r1
 800d2ce:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	78fa      	ldrb	r2, [r7, #3]
 800d2d4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d2d6:	2300      	movs	r3, #0
}
 800d2d8:	4618      	mov	r0, r3
 800d2da:	370c      	adds	r7, #12
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e2:	4770      	bx	lr

0800d2e4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d2e4:	b480      	push	{r7}
 800d2e6:	b083      	sub	sp, #12
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d2f2:	b2da      	uxtb	r2, r3
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	2204      	movs	r2, #4
 800d2fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800d302:	2300      	movs	r3, #0
}
 800d304:	4618      	mov	r0, r3
 800d306:	370c      	adds	r7, #12
 800d308:	46bd      	mov	sp, r7
 800d30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d30e:	4770      	bx	lr

0800d310 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d310:	b480      	push	{r7}
 800d312:	b083      	sub	sp, #12
 800d314:	af00      	add	r7, sp, #0
 800d316:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d31e:	b2db      	uxtb	r3, r3
 800d320:	2b04      	cmp	r3, #4
 800d322:	d106      	bne.n	800d332 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800d32a:	b2da      	uxtb	r2, r3
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800d332:	2300      	movs	r3, #0
}
 800d334:	4618      	mov	r0, r3
 800d336:	370c      	adds	r7, #12
 800d338:	46bd      	mov	sp, r7
 800d33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33e:	4770      	bx	lr

0800d340 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d340:	b580      	push	{r7, lr}
 800d342:	b082      	sub	sp, #8
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d101      	bne.n	800d356 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800d352:	2303      	movs	r3, #3
 800d354:	e012      	b.n	800d37c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d35c:	b2db      	uxtb	r3, r3
 800d35e:	2b03      	cmp	r3, #3
 800d360:	d10b      	bne.n	800d37a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d368:	69db      	ldr	r3, [r3, #28]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d005      	beq.n	800d37a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d374:	69db      	ldr	r3, [r3, #28]
 800d376:	6878      	ldr	r0, [r7, #4]
 800d378:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d37a:	2300      	movs	r3, #0
}
 800d37c:	4618      	mov	r0, r3
 800d37e:	3708      	adds	r7, #8
 800d380:	46bd      	mov	sp, r7
 800d382:	bd80      	pop	{r7, pc}

0800d384 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d384:	b480      	push	{r7}
 800d386:	b087      	sub	sp, #28
 800d388:	af00      	add	r7, sp, #0
 800d38a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d390:	697b      	ldr	r3, [r7, #20]
 800d392:	781b      	ldrb	r3, [r3, #0]
 800d394:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d396:	697b      	ldr	r3, [r7, #20]
 800d398:	3301      	adds	r3, #1
 800d39a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d39c:	697b      	ldr	r3, [r7, #20]
 800d39e:	781b      	ldrb	r3, [r3, #0]
 800d3a0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d3a2:	8a3b      	ldrh	r3, [r7, #16]
 800d3a4:	021b      	lsls	r3, r3, #8
 800d3a6:	b21a      	sxth	r2, r3
 800d3a8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d3ac:	4313      	orrs	r3, r2
 800d3ae:	b21b      	sxth	r3, r3
 800d3b0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d3b2:	89fb      	ldrh	r3, [r7, #14]
}
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	371c      	adds	r7, #28
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3be:	4770      	bx	lr

0800d3c0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b084      	sub	sp, #16
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
 800d3c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d3ce:	683b      	ldr	r3, [r7, #0]
 800d3d0:	781b      	ldrb	r3, [r3, #0]
 800d3d2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d3d6:	2b40      	cmp	r3, #64	@ 0x40
 800d3d8:	d005      	beq.n	800d3e6 <USBD_StdDevReq+0x26>
 800d3da:	2b40      	cmp	r3, #64	@ 0x40
 800d3dc:	d853      	bhi.n	800d486 <USBD_StdDevReq+0xc6>
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d00b      	beq.n	800d3fa <USBD_StdDevReq+0x3a>
 800d3e2:	2b20      	cmp	r3, #32
 800d3e4:	d14f      	bne.n	800d486 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d3ec:	689b      	ldr	r3, [r3, #8]
 800d3ee:	6839      	ldr	r1, [r7, #0]
 800d3f0:	6878      	ldr	r0, [r7, #4]
 800d3f2:	4798      	blx	r3
 800d3f4:	4603      	mov	r3, r0
 800d3f6:	73fb      	strb	r3, [r7, #15]
      break;
 800d3f8:	e04a      	b.n	800d490 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d3fa:	683b      	ldr	r3, [r7, #0]
 800d3fc:	785b      	ldrb	r3, [r3, #1]
 800d3fe:	2b09      	cmp	r3, #9
 800d400:	d83b      	bhi.n	800d47a <USBD_StdDevReq+0xba>
 800d402:	a201      	add	r2, pc, #4	@ (adr r2, 800d408 <USBD_StdDevReq+0x48>)
 800d404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d408:	0800d45d 	.word	0x0800d45d
 800d40c:	0800d471 	.word	0x0800d471
 800d410:	0800d47b 	.word	0x0800d47b
 800d414:	0800d467 	.word	0x0800d467
 800d418:	0800d47b 	.word	0x0800d47b
 800d41c:	0800d43b 	.word	0x0800d43b
 800d420:	0800d431 	.word	0x0800d431
 800d424:	0800d47b 	.word	0x0800d47b
 800d428:	0800d453 	.word	0x0800d453
 800d42c:	0800d445 	.word	0x0800d445
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d430:	6839      	ldr	r1, [r7, #0]
 800d432:	6878      	ldr	r0, [r7, #4]
 800d434:	f000 f9de 	bl	800d7f4 <USBD_GetDescriptor>
          break;
 800d438:	e024      	b.n	800d484 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d43a:	6839      	ldr	r1, [r7, #0]
 800d43c:	6878      	ldr	r0, [r7, #4]
 800d43e:	f000 fb6d 	bl	800db1c <USBD_SetAddress>
          break;
 800d442:	e01f      	b.n	800d484 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d444:	6839      	ldr	r1, [r7, #0]
 800d446:	6878      	ldr	r0, [r7, #4]
 800d448:	f000 fbac 	bl	800dba4 <USBD_SetConfig>
 800d44c:	4603      	mov	r3, r0
 800d44e:	73fb      	strb	r3, [r7, #15]
          break;
 800d450:	e018      	b.n	800d484 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d452:	6839      	ldr	r1, [r7, #0]
 800d454:	6878      	ldr	r0, [r7, #4]
 800d456:	f000 fc4b 	bl	800dcf0 <USBD_GetConfig>
          break;
 800d45a:	e013      	b.n	800d484 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d45c:	6839      	ldr	r1, [r7, #0]
 800d45e:	6878      	ldr	r0, [r7, #4]
 800d460:	f000 fc7c 	bl	800dd5c <USBD_GetStatus>
          break;
 800d464:	e00e      	b.n	800d484 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d466:	6839      	ldr	r1, [r7, #0]
 800d468:	6878      	ldr	r0, [r7, #4]
 800d46a:	f000 fcab 	bl	800ddc4 <USBD_SetFeature>
          break;
 800d46e:	e009      	b.n	800d484 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d470:	6839      	ldr	r1, [r7, #0]
 800d472:	6878      	ldr	r0, [r7, #4]
 800d474:	f000 fcba 	bl	800ddec <USBD_ClrFeature>
          break;
 800d478:	e004      	b.n	800d484 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800d47a:	6839      	ldr	r1, [r7, #0]
 800d47c:	6878      	ldr	r0, [r7, #4]
 800d47e:	f000 fd11 	bl	800dea4 <USBD_CtlError>
          break;
 800d482:	bf00      	nop
      }
      break;
 800d484:	e004      	b.n	800d490 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800d486:	6839      	ldr	r1, [r7, #0]
 800d488:	6878      	ldr	r0, [r7, #4]
 800d48a:	f000 fd0b 	bl	800dea4 <USBD_CtlError>
      break;
 800d48e:	bf00      	nop
  }

  return ret;
 800d490:	7bfb      	ldrb	r3, [r7, #15]
}
 800d492:	4618      	mov	r0, r3
 800d494:	3710      	adds	r7, #16
 800d496:	46bd      	mov	sp, r7
 800d498:	bd80      	pop	{r7, pc}
 800d49a:	bf00      	nop

0800d49c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d49c:	b580      	push	{r7, lr}
 800d49e:	b084      	sub	sp, #16
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
 800d4a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d4aa:	683b      	ldr	r3, [r7, #0]
 800d4ac:	781b      	ldrb	r3, [r3, #0]
 800d4ae:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d4b2:	2b40      	cmp	r3, #64	@ 0x40
 800d4b4:	d005      	beq.n	800d4c2 <USBD_StdItfReq+0x26>
 800d4b6:	2b40      	cmp	r3, #64	@ 0x40
 800d4b8:	d82f      	bhi.n	800d51a <USBD_StdItfReq+0x7e>
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d001      	beq.n	800d4c2 <USBD_StdItfReq+0x26>
 800d4be:	2b20      	cmp	r3, #32
 800d4c0:	d12b      	bne.n	800d51a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d4c8:	b2db      	uxtb	r3, r3
 800d4ca:	3b01      	subs	r3, #1
 800d4cc:	2b02      	cmp	r3, #2
 800d4ce:	d81d      	bhi.n	800d50c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d4d0:	683b      	ldr	r3, [r7, #0]
 800d4d2:	889b      	ldrh	r3, [r3, #4]
 800d4d4:	b2db      	uxtb	r3, r3
 800d4d6:	2b01      	cmp	r3, #1
 800d4d8:	d813      	bhi.n	800d502 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d4e0:	689b      	ldr	r3, [r3, #8]
 800d4e2:	6839      	ldr	r1, [r7, #0]
 800d4e4:	6878      	ldr	r0, [r7, #4]
 800d4e6:	4798      	blx	r3
 800d4e8:	4603      	mov	r3, r0
 800d4ea:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d4ec:	683b      	ldr	r3, [r7, #0]
 800d4ee:	88db      	ldrh	r3, [r3, #6]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d110      	bne.n	800d516 <USBD_StdItfReq+0x7a>
 800d4f4:	7bfb      	ldrb	r3, [r7, #15]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d10d      	bne.n	800d516 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d4fa:	6878      	ldr	r0, [r7, #4]
 800d4fc:	f000 fd9d 	bl	800e03a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d500:	e009      	b.n	800d516 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800d502:	6839      	ldr	r1, [r7, #0]
 800d504:	6878      	ldr	r0, [r7, #4]
 800d506:	f000 fccd 	bl	800dea4 <USBD_CtlError>
          break;
 800d50a:	e004      	b.n	800d516 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800d50c:	6839      	ldr	r1, [r7, #0]
 800d50e:	6878      	ldr	r0, [r7, #4]
 800d510:	f000 fcc8 	bl	800dea4 <USBD_CtlError>
          break;
 800d514:	e000      	b.n	800d518 <USBD_StdItfReq+0x7c>
          break;
 800d516:	bf00      	nop
      }
      break;
 800d518:	e004      	b.n	800d524 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800d51a:	6839      	ldr	r1, [r7, #0]
 800d51c:	6878      	ldr	r0, [r7, #4]
 800d51e:	f000 fcc1 	bl	800dea4 <USBD_CtlError>
      break;
 800d522:	bf00      	nop
  }

  return ret;
 800d524:	7bfb      	ldrb	r3, [r7, #15]
}
 800d526:	4618      	mov	r0, r3
 800d528:	3710      	adds	r7, #16
 800d52a:	46bd      	mov	sp, r7
 800d52c:	bd80      	pop	{r7, pc}

0800d52e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d52e:	b580      	push	{r7, lr}
 800d530:	b084      	sub	sp, #16
 800d532:	af00      	add	r7, sp, #0
 800d534:	6078      	str	r0, [r7, #4]
 800d536:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800d538:	2300      	movs	r3, #0
 800d53a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800d53c:	683b      	ldr	r3, [r7, #0]
 800d53e:	889b      	ldrh	r3, [r3, #4]
 800d540:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d542:	683b      	ldr	r3, [r7, #0]
 800d544:	781b      	ldrb	r3, [r3, #0]
 800d546:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d54a:	2b40      	cmp	r3, #64	@ 0x40
 800d54c:	d007      	beq.n	800d55e <USBD_StdEPReq+0x30>
 800d54e:	2b40      	cmp	r3, #64	@ 0x40
 800d550:	f200 8145 	bhi.w	800d7de <USBD_StdEPReq+0x2b0>
 800d554:	2b00      	cmp	r3, #0
 800d556:	d00c      	beq.n	800d572 <USBD_StdEPReq+0x44>
 800d558:	2b20      	cmp	r3, #32
 800d55a:	f040 8140 	bne.w	800d7de <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d564:	689b      	ldr	r3, [r3, #8]
 800d566:	6839      	ldr	r1, [r7, #0]
 800d568:	6878      	ldr	r0, [r7, #4]
 800d56a:	4798      	blx	r3
 800d56c:	4603      	mov	r3, r0
 800d56e:	73fb      	strb	r3, [r7, #15]
      break;
 800d570:	e13a      	b.n	800d7e8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d572:	683b      	ldr	r3, [r7, #0]
 800d574:	785b      	ldrb	r3, [r3, #1]
 800d576:	2b03      	cmp	r3, #3
 800d578:	d007      	beq.n	800d58a <USBD_StdEPReq+0x5c>
 800d57a:	2b03      	cmp	r3, #3
 800d57c:	f300 8129 	bgt.w	800d7d2 <USBD_StdEPReq+0x2a4>
 800d580:	2b00      	cmp	r3, #0
 800d582:	d07f      	beq.n	800d684 <USBD_StdEPReq+0x156>
 800d584:	2b01      	cmp	r3, #1
 800d586:	d03c      	beq.n	800d602 <USBD_StdEPReq+0xd4>
 800d588:	e123      	b.n	800d7d2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d590:	b2db      	uxtb	r3, r3
 800d592:	2b02      	cmp	r3, #2
 800d594:	d002      	beq.n	800d59c <USBD_StdEPReq+0x6e>
 800d596:	2b03      	cmp	r3, #3
 800d598:	d016      	beq.n	800d5c8 <USBD_StdEPReq+0x9a>
 800d59a:	e02c      	b.n	800d5f6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d59c:	7bbb      	ldrb	r3, [r7, #14]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d00d      	beq.n	800d5be <USBD_StdEPReq+0x90>
 800d5a2:	7bbb      	ldrb	r3, [r7, #14]
 800d5a4:	2b80      	cmp	r3, #128	@ 0x80
 800d5a6:	d00a      	beq.n	800d5be <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d5a8:	7bbb      	ldrb	r3, [r7, #14]
 800d5aa:	4619      	mov	r1, r3
 800d5ac:	6878      	ldr	r0, [r7, #4]
 800d5ae:	f001 f917 	bl	800e7e0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d5b2:	2180      	movs	r1, #128	@ 0x80
 800d5b4:	6878      	ldr	r0, [r7, #4]
 800d5b6:	f001 f913 	bl	800e7e0 <USBD_LL_StallEP>
 800d5ba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d5bc:	e020      	b.n	800d600 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800d5be:	6839      	ldr	r1, [r7, #0]
 800d5c0:	6878      	ldr	r0, [r7, #4]
 800d5c2:	f000 fc6f 	bl	800dea4 <USBD_CtlError>
              break;
 800d5c6:	e01b      	b.n	800d600 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d5c8:	683b      	ldr	r3, [r7, #0]
 800d5ca:	885b      	ldrh	r3, [r3, #2]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d10e      	bne.n	800d5ee <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d5d0:	7bbb      	ldrb	r3, [r7, #14]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d00b      	beq.n	800d5ee <USBD_StdEPReq+0xc0>
 800d5d6:	7bbb      	ldrb	r3, [r7, #14]
 800d5d8:	2b80      	cmp	r3, #128	@ 0x80
 800d5da:	d008      	beq.n	800d5ee <USBD_StdEPReq+0xc0>
 800d5dc:	683b      	ldr	r3, [r7, #0]
 800d5de:	88db      	ldrh	r3, [r3, #6]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d104      	bne.n	800d5ee <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d5e4:	7bbb      	ldrb	r3, [r7, #14]
 800d5e6:	4619      	mov	r1, r3
 800d5e8:	6878      	ldr	r0, [r7, #4]
 800d5ea:	f001 f8f9 	bl	800e7e0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d5ee:	6878      	ldr	r0, [r7, #4]
 800d5f0:	f000 fd23 	bl	800e03a <USBD_CtlSendStatus>

              break;
 800d5f4:	e004      	b.n	800d600 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800d5f6:	6839      	ldr	r1, [r7, #0]
 800d5f8:	6878      	ldr	r0, [r7, #4]
 800d5fa:	f000 fc53 	bl	800dea4 <USBD_CtlError>
              break;
 800d5fe:	bf00      	nop
          }
          break;
 800d600:	e0ec      	b.n	800d7dc <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d608:	b2db      	uxtb	r3, r3
 800d60a:	2b02      	cmp	r3, #2
 800d60c:	d002      	beq.n	800d614 <USBD_StdEPReq+0xe6>
 800d60e:	2b03      	cmp	r3, #3
 800d610:	d016      	beq.n	800d640 <USBD_StdEPReq+0x112>
 800d612:	e030      	b.n	800d676 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d614:	7bbb      	ldrb	r3, [r7, #14]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d00d      	beq.n	800d636 <USBD_StdEPReq+0x108>
 800d61a:	7bbb      	ldrb	r3, [r7, #14]
 800d61c:	2b80      	cmp	r3, #128	@ 0x80
 800d61e:	d00a      	beq.n	800d636 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d620:	7bbb      	ldrb	r3, [r7, #14]
 800d622:	4619      	mov	r1, r3
 800d624:	6878      	ldr	r0, [r7, #4]
 800d626:	f001 f8db 	bl	800e7e0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d62a:	2180      	movs	r1, #128	@ 0x80
 800d62c:	6878      	ldr	r0, [r7, #4]
 800d62e:	f001 f8d7 	bl	800e7e0 <USBD_LL_StallEP>
 800d632:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d634:	e025      	b.n	800d682 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800d636:	6839      	ldr	r1, [r7, #0]
 800d638:	6878      	ldr	r0, [r7, #4]
 800d63a:	f000 fc33 	bl	800dea4 <USBD_CtlError>
              break;
 800d63e:	e020      	b.n	800d682 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d640:	683b      	ldr	r3, [r7, #0]
 800d642:	885b      	ldrh	r3, [r3, #2]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d11b      	bne.n	800d680 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d648:	7bbb      	ldrb	r3, [r7, #14]
 800d64a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d004      	beq.n	800d65c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d652:	7bbb      	ldrb	r3, [r7, #14]
 800d654:	4619      	mov	r1, r3
 800d656:	6878      	ldr	r0, [r7, #4]
 800d658:	f001 f8e1 	bl	800e81e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d65c:	6878      	ldr	r0, [r7, #4]
 800d65e:	f000 fcec 	bl	800e03a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d668:	689b      	ldr	r3, [r3, #8]
 800d66a:	6839      	ldr	r1, [r7, #0]
 800d66c:	6878      	ldr	r0, [r7, #4]
 800d66e:	4798      	blx	r3
 800d670:	4603      	mov	r3, r0
 800d672:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800d674:	e004      	b.n	800d680 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800d676:	6839      	ldr	r1, [r7, #0]
 800d678:	6878      	ldr	r0, [r7, #4]
 800d67a:	f000 fc13 	bl	800dea4 <USBD_CtlError>
              break;
 800d67e:	e000      	b.n	800d682 <USBD_StdEPReq+0x154>
              break;
 800d680:	bf00      	nop
          }
          break;
 800d682:	e0ab      	b.n	800d7dc <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d68a:	b2db      	uxtb	r3, r3
 800d68c:	2b02      	cmp	r3, #2
 800d68e:	d002      	beq.n	800d696 <USBD_StdEPReq+0x168>
 800d690:	2b03      	cmp	r3, #3
 800d692:	d032      	beq.n	800d6fa <USBD_StdEPReq+0x1cc>
 800d694:	e097      	b.n	800d7c6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d696:	7bbb      	ldrb	r3, [r7, #14]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d007      	beq.n	800d6ac <USBD_StdEPReq+0x17e>
 800d69c:	7bbb      	ldrb	r3, [r7, #14]
 800d69e:	2b80      	cmp	r3, #128	@ 0x80
 800d6a0:	d004      	beq.n	800d6ac <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800d6a2:	6839      	ldr	r1, [r7, #0]
 800d6a4:	6878      	ldr	r0, [r7, #4]
 800d6a6:	f000 fbfd 	bl	800dea4 <USBD_CtlError>
                break;
 800d6aa:	e091      	b.n	800d7d0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d6ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	da0b      	bge.n	800d6cc <USBD_StdEPReq+0x19e>
 800d6b4:	7bbb      	ldrb	r3, [r7, #14]
 800d6b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d6ba:	4613      	mov	r3, r2
 800d6bc:	009b      	lsls	r3, r3, #2
 800d6be:	4413      	add	r3, r2
 800d6c0:	009b      	lsls	r3, r3, #2
 800d6c2:	3310      	adds	r3, #16
 800d6c4:	687a      	ldr	r2, [r7, #4]
 800d6c6:	4413      	add	r3, r2
 800d6c8:	3304      	adds	r3, #4
 800d6ca:	e00b      	b.n	800d6e4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d6cc:	7bbb      	ldrb	r3, [r7, #14]
 800d6ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d6d2:	4613      	mov	r3, r2
 800d6d4:	009b      	lsls	r3, r3, #2
 800d6d6:	4413      	add	r3, r2
 800d6d8:	009b      	lsls	r3, r3, #2
 800d6da:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d6de:	687a      	ldr	r2, [r7, #4]
 800d6e0:	4413      	add	r3, r2
 800d6e2:	3304      	adds	r3, #4
 800d6e4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d6e6:	68bb      	ldr	r3, [r7, #8]
 800d6e8:	2200      	movs	r2, #0
 800d6ea:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d6ec:	68bb      	ldr	r3, [r7, #8]
 800d6ee:	2202      	movs	r2, #2
 800d6f0:	4619      	mov	r1, r3
 800d6f2:	6878      	ldr	r0, [r7, #4]
 800d6f4:	f000 fc47 	bl	800df86 <USBD_CtlSendData>
              break;
 800d6f8:	e06a      	b.n	800d7d0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d6fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	da11      	bge.n	800d726 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d702:	7bbb      	ldrb	r3, [r7, #14]
 800d704:	f003 020f 	and.w	r2, r3, #15
 800d708:	6879      	ldr	r1, [r7, #4]
 800d70a:	4613      	mov	r3, r2
 800d70c:	009b      	lsls	r3, r3, #2
 800d70e:	4413      	add	r3, r2
 800d710:	009b      	lsls	r3, r3, #2
 800d712:	440b      	add	r3, r1
 800d714:	3324      	adds	r3, #36	@ 0x24
 800d716:	881b      	ldrh	r3, [r3, #0]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d117      	bne.n	800d74c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800d71c:	6839      	ldr	r1, [r7, #0]
 800d71e:	6878      	ldr	r0, [r7, #4]
 800d720:	f000 fbc0 	bl	800dea4 <USBD_CtlError>
                  break;
 800d724:	e054      	b.n	800d7d0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d726:	7bbb      	ldrb	r3, [r7, #14]
 800d728:	f003 020f 	and.w	r2, r3, #15
 800d72c:	6879      	ldr	r1, [r7, #4]
 800d72e:	4613      	mov	r3, r2
 800d730:	009b      	lsls	r3, r3, #2
 800d732:	4413      	add	r3, r2
 800d734:	009b      	lsls	r3, r3, #2
 800d736:	440b      	add	r3, r1
 800d738:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d73c:	881b      	ldrh	r3, [r3, #0]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d104      	bne.n	800d74c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800d742:	6839      	ldr	r1, [r7, #0]
 800d744:	6878      	ldr	r0, [r7, #4]
 800d746:	f000 fbad 	bl	800dea4 <USBD_CtlError>
                  break;
 800d74a:	e041      	b.n	800d7d0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d74c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d750:	2b00      	cmp	r3, #0
 800d752:	da0b      	bge.n	800d76c <USBD_StdEPReq+0x23e>
 800d754:	7bbb      	ldrb	r3, [r7, #14]
 800d756:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d75a:	4613      	mov	r3, r2
 800d75c:	009b      	lsls	r3, r3, #2
 800d75e:	4413      	add	r3, r2
 800d760:	009b      	lsls	r3, r3, #2
 800d762:	3310      	adds	r3, #16
 800d764:	687a      	ldr	r2, [r7, #4]
 800d766:	4413      	add	r3, r2
 800d768:	3304      	adds	r3, #4
 800d76a:	e00b      	b.n	800d784 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d76c:	7bbb      	ldrb	r3, [r7, #14]
 800d76e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d772:	4613      	mov	r3, r2
 800d774:	009b      	lsls	r3, r3, #2
 800d776:	4413      	add	r3, r2
 800d778:	009b      	lsls	r3, r3, #2
 800d77a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d77e:	687a      	ldr	r2, [r7, #4]
 800d780:	4413      	add	r3, r2
 800d782:	3304      	adds	r3, #4
 800d784:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d786:	7bbb      	ldrb	r3, [r7, #14]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d002      	beq.n	800d792 <USBD_StdEPReq+0x264>
 800d78c:	7bbb      	ldrb	r3, [r7, #14]
 800d78e:	2b80      	cmp	r3, #128	@ 0x80
 800d790:	d103      	bne.n	800d79a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800d792:	68bb      	ldr	r3, [r7, #8]
 800d794:	2200      	movs	r2, #0
 800d796:	601a      	str	r2, [r3, #0]
 800d798:	e00e      	b.n	800d7b8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d79a:	7bbb      	ldrb	r3, [r7, #14]
 800d79c:	4619      	mov	r1, r3
 800d79e:	6878      	ldr	r0, [r7, #4]
 800d7a0:	f001 f85c 	bl	800e85c <USBD_LL_IsStallEP>
 800d7a4:	4603      	mov	r3, r0
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d003      	beq.n	800d7b2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800d7aa:	68bb      	ldr	r3, [r7, #8]
 800d7ac:	2201      	movs	r2, #1
 800d7ae:	601a      	str	r2, [r3, #0]
 800d7b0:	e002      	b.n	800d7b8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800d7b2:	68bb      	ldr	r3, [r7, #8]
 800d7b4:	2200      	movs	r2, #0
 800d7b6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d7b8:	68bb      	ldr	r3, [r7, #8]
 800d7ba:	2202      	movs	r2, #2
 800d7bc:	4619      	mov	r1, r3
 800d7be:	6878      	ldr	r0, [r7, #4]
 800d7c0:	f000 fbe1 	bl	800df86 <USBD_CtlSendData>
              break;
 800d7c4:	e004      	b.n	800d7d0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800d7c6:	6839      	ldr	r1, [r7, #0]
 800d7c8:	6878      	ldr	r0, [r7, #4]
 800d7ca:	f000 fb6b 	bl	800dea4 <USBD_CtlError>
              break;
 800d7ce:	bf00      	nop
          }
          break;
 800d7d0:	e004      	b.n	800d7dc <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800d7d2:	6839      	ldr	r1, [r7, #0]
 800d7d4:	6878      	ldr	r0, [r7, #4]
 800d7d6:	f000 fb65 	bl	800dea4 <USBD_CtlError>
          break;
 800d7da:	bf00      	nop
      }
      break;
 800d7dc:	e004      	b.n	800d7e8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800d7de:	6839      	ldr	r1, [r7, #0]
 800d7e0:	6878      	ldr	r0, [r7, #4]
 800d7e2:	f000 fb5f 	bl	800dea4 <USBD_CtlError>
      break;
 800d7e6:	bf00      	nop
  }

  return ret;
 800d7e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	3710      	adds	r7, #16
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	bd80      	pop	{r7, pc}
	...

0800d7f4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d7f4:	b580      	push	{r7, lr}
 800d7f6:	b084      	sub	sp, #16
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]
 800d7fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d7fe:	2300      	movs	r3, #0
 800d800:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d802:	2300      	movs	r3, #0
 800d804:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d806:	2300      	movs	r3, #0
 800d808:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d80a:	683b      	ldr	r3, [r7, #0]
 800d80c:	885b      	ldrh	r3, [r3, #2]
 800d80e:	0a1b      	lsrs	r3, r3, #8
 800d810:	b29b      	uxth	r3, r3
 800d812:	3b01      	subs	r3, #1
 800d814:	2b0e      	cmp	r3, #14
 800d816:	f200 8152 	bhi.w	800dabe <USBD_GetDescriptor+0x2ca>
 800d81a:	a201      	add	r2, pc, #4	@ (adr r2, 800d820 <USBD_GetDescriptor+0x2c>)
 800d81c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d820:	0800d891 	.word	0x0800d891
 800d824:	0800d8a9 	.word	0x0800d8a9
 800d828:	0800d8e9 	.word	0x0800d8e9
 800d82c:	0800dabf 	.word	0x0800dabf
 800d830:	0800dabf 	.word	0x0800dabf
 800d834:	0800da5f 	.word	0x0800da5f
 800d838:	0800da8b 	.word	0x0800da8b
 800d83c:	0800dabf 	.word	0x0800dabf
 800d840:	0800dabf 	.word	0x0800dabf
 800d844:	0800dabf 	.word	0x0800dabf
 800d848:	0800dabf 	.word	0x0800dabf
 800d84c:	0800dabf 	.word	0x0800dabf
 800d850:	0800dabf 	.word	0x0800dabf
 800d854:	0800dabf 	.word	0x0800dabf
 800d858:	0800d85d 	.word	0x0800d85d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d862:	69db      	ldr	r3, [r3, #28]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d00b      	beq.n	800d880 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d86e:	69db      	ldr	r3, [r3, #28]
 800d870:	687a      	ldr	r2, [r7, #4]
 800d872:	7c12      	ldrb	r2, [r2, #16]
 800d874:	f107 0108 	add.w	r1, r7, #8
 800d878:	4610      	mov	r0, r2
 800d87a:	4798      	blx	r3
 800d87c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d87e:	e126      	b.n	800dace <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d880:	6839      	ldr	r1, [r7, #0]
 800d882:	6878      	ldr	r0, [r7, #4]
 800d884:	f000 fb0e 	bl	800dea4 <USBD_CtlError>
        err++;
 800d888:	7afb      	ldrb	r3, [r7, #11]
 800d88a:	3301      	adds	r3, #1
 800d88c:	72fb      	strb	r3, [r7, #11]
      break;
 800d88e:	e11e      	b.n	800dace <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	687a      	ldr	r2, [r7, #4]
 800d89a:	7c12      	ldrb	r2, [r2, #16]
 800d89c:	f107 0108 	add.w	r1, r7, #8
 800d8a0:	4610      	mov	r0, r2
 800d8a2:	4798      	blx	r3
 800d8a4:	60f8      	str	r0, [r7, #12]
      break;
 800d8a6:	e112      	b.n	800dace <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	7c1b      	ldrb	r3, [r3, #16]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d10d      	bne.n	800d8cc <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d8b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8b8:	f107 0208 	add.w	r2, r7, #8
 800d8bc:	4610      	mov	r0, r2
 800d8be:	4798      	blx	r3
 800d8c0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	3301      	adds	r3, #1
 800d8c6:	2202      	movs	r2, #2
 800d8c8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d8ca:	e100      	b.n	800dace <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d8d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8d4:	f107 0208 	add.w	r2, r7, #8
 800d8d8:	4610      	mov	r0, r2
 800d8da:	4798      	blx	r3
 800d8dc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	3301      	adds	r3, #1
 800d8e2:	2202      	movs	r2, #2
 800d8e4:	701a      	strb	r2, [r3, #0]
      break;
 800d8e6:	e0f2      	b.n	800dace <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d8e8:	683b      	ldr	r3, [r7, #0]
 800d8ea:	885b      	ldrh	r3, [r3, #2]
 800d8ec:	b2db      	uxtb	r3, r3
 800d8ee:	2b05      	cmp	r3, #5
 800d8f0:	f200 80ac 	bhi.w	800da4c <USBD_GetDescriptor+0x258>
 800d8f4:	a201      	add	r2, pc, #4	@ (adr r2, 800d8fc <USBD_GetDescriptor+0x108>)
 800d8f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8fa:	bf00      	nop
 800d8fc:	0800d915 	.word	0x0800d915
 800d900:	0800d949 	.word	0x0800d949
 800d904:	0800d97d 	.word	0x0800d97d
 800d908:	0800d9b1 	.word	0x0800d9b1
 800d90c:	0800d9e5 	.word	0x0800d9e5
 800d910:	0800da19 	.word	0x0800da19
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d91a:	685b      	ldr	r3, [r3, #4]
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d00b      	beq.n	800d938 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d926:	685b      	ldr	r3, [r3, #4]
 800d928:	687a      	ldr	r2, [r7, #4]
 800d92a:	7c12      	ldrb	r2, [r2, #16]
 800d92c:	f107 0108 	add.w	r1, r7, #8
 800d930:	4610      	mov	r0, r2
 800d932:	4798      	blx	r3
 800d934:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d936:	e091      	b.n	800da5c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d938:	6839      	ldr	r1, [r7, #0]
 800d93a:	6878      	ldr	r0, [r7, #4]
 800d93c:	f000 fab2 	bl	800dea4 <USBD_CtlError>
            err++;
 800d940:	7afb      	ldrb	r3, [r7, #11]
 800d942:	3301      	adds	r3, #1
 800d944:	72fb      	strb	r3, [r7, #11]
          break;
 800d946:	e089      	b.n	800da5c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d94e:	689b      	ldr	r3, [r3, #8]
 800d950:	2b00      	cmp	r3, #0
 800d952:	d00b      	beq.n	800d96c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d95a:	689b      	ldr	r3, [r3, #8]
 800d95c:	687a      	ldr	r2, [r7, #4]
 800d95e:	7c12      	ldrb	r2, [r2, #16]
 800d960:	f107 0108 	add.w	r1, r7, #8
 800d964:	4610      	mov	r0, r2
 800d966:	4798      	blx	r3
 800d968:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d96a:	e077      	b.n	800da5c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d96c:	6839      	ldr	r1, [r7, #0]
 800d96e:	6878      	ldr	r0, [r7, #4]
 800d970:	f000 fa98 	bl	800dea4 <USBD_CtlError>
            err++;
 800d974:	7afb      	ldrb	r3, [r7, #11]
 800d976:	3301      	adds	r3, #1
 800d978:	72fb      	strb	r3, [r7, #11]
          break;
 800d97a:	e06f      	b.n	800da5c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d982:	68db      	ldr	r3, [r3, #12]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d00b      	beq.n	800d9a0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d98e:	68db      	ldr	r3, [r3, #12]
 800d990:	687a      	ldr	r2, [r7, #4]
 800d992:	7c12      	ldrb	r2, [r2, #16]
 800d994:	f107 0108 	add.w	r1, r7, #8
 800d998:	4610      	mov	r0, r2
 800d99a:	4798      	blx	r3
 800d99c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d99e:	e05d      	b.n	800da5c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d9a0:	6839      	ldr	r1, [r7, #0]
 800d9a2:	6878      	ldr	r0, [r7, #4]
 800d9a4:	f000 fa7e 	bl	800dea4 <USBD_CtlError>
            err++;
 800d9a8:	7afb      	ldrb	r3, [r7, #11]
 800d9aa:	3301      	adds	r3, #1
 800d9ac:	72fb      	strb	r3, [r7, #11]
          break;
 800d9ae:	e055      	b.n	800da5c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d9b6:	691b      	ldr	r3, [r3, #16]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d00b      	beq.n	800d9d4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d9c2:	691b      	ldr	r3, [r3, #16]
 800d9c4:	687a      	ldr	r2, [r7, #4]
 800d9c6:	7c12      	ldrb	r2, [r2, #16]
 800d9c8:	f107 0108 	add.w	r1, r7, #8
 800d9cc:	4610      	mov	r0, r2
 800d9ce:	4798      	blx	r3
 800d9d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d9d2:	e043      	b.n	800da5c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d9d4:	6839      	ldr	r1, [r7, #0]
 800d9d6:	6878      	ldr	r0, [r7, #4]
 800d9d8:	f000 fa64 	bl	800dea4 <USBD_CtlError>
            err++;
 800d9dc:	7afb      	ldrb	r3, [r7, #11]
 800d9de:	3301      	adds	r3, #1
 800d9e0:	72fb      	strb	r3, [r7, #11]
          break;
 800d9e2:	e03b      	b.n	800da5c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d9ea:	695b      	ldr	r3, [r3, #20]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d00b      	beq.n	800da08 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d9f6:	695b      	ldr	r3, [r3, #20]
 800d9f8:	687a      	ldr	r2, [r7, #4]
 800d9fa:	7c12      	ldrb	r2, [r2, #16]
 800d9fc:	f107 0108 	add.w	r1, r7, #8
 800da00:	4610      	mov	r0, r2
 800da02:	4798      	blx	r3
 800da04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800da06:	e029      	b.n	800da5c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800da08:	6839      	ldr	r1, [r7, #0]
 800da0a:	6878      	ldr	r0, [r7, #4]
 800da0c:	f000 fa4a 	bl	800dea4 <USBD_CtlError>
            err++;
 800da10:	7afb      	ldrb	r3, [r7, #11]
 800da12:	3301      	adds	r3, #1
 800da14:	72fb      	strb	r3, [r7, #11]
          break;
 800da16:	e021      	b.n	800da5c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800da1e:	699b      	ldr	r3, [r3, #24]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d00b      	beq.n	800da3c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800da2a:	699b      	ldr	r3, [r3, #24]
 800da2c:	687a      	ldr	r2, [r7, #4]
 800da2e:	7c12      	ldrb	r2, [r2, #16]
 800da30:	f107 0108 	add.w	r1, r7, #8
 800da34:	4610      	mov	r0, r2
 800da36:	4798      	blx	r3
 800da38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800da3a:	e00f      	b.n	800da5c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800da3c:	6839      	ldr	r1, [r7, #0]
 800da3e:	6878      	ldr	r0, [r7, #4]
 800da40:	f000 fa30 	bl	800dea4 <USBD_CtlError>
            err++;
 800da44:	7afb      	ldrb	r3, [r7, #11]
 800da46:	3301      	adds	r3, #1
 800da48:	72fb      	strb	r3, [r7, #11]
          break;
 800da4a:	e007      	b.n	800da5c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800da4c:	6839      	ldr	r1, [r7, #0]
 800da4e:	6878      	ldr	r0, [r7, #4]
 800da50:	f000 fa28 	bl	800dea4 <USBD_CtlError>
          err++;
 800da54:	7afb      	ldrb	r3, [r7, #11]
 800da56:	3301      	adds	r3, #1
 800da58:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800da5a:	bf00      	nop
      }
      break;
 800da5c:	e037      	b.n	800dace <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	7c1b      	ldrb	r3, [r3, #16]
 800da62:	2b00      	cmp	r3, #0
 800da64:	d109      	bne.n	800da7a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800da6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da6e:	f107 0208 	add.w	r2, r7, #8
 800da72:	4610      	mov	r0, r2
 800da74:	4798      	blx	r3
 800da76:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800da78:	e029      	b.n	800dace <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800da7a:	6839      	ldr	r1, [r7, #0]
 800da7c:	6878      	ldr	r0, [r7, #4]
 800da7e:	f000 fa11 	bl	800dea4 <USBD_CtlError>
        err++;
 800da82:	7afb      	ldrb	r3, [r7, #11]
 800da84:	3301      	adds	r3, #1
 800da86:	72fb      	strb	r3, [r7, #11]
      break;
 800da88:	e021      	b.n	800dace <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	7c1b      	ldrb	r3, [r3, #16]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d10d      	bne.n	800daae <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800da98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800da9a:	f107 0208 	add.w	r2, r7, #8
 800da9e:	4610      	mov	r0, r2
 800daa0:	4798      	blx	r3
 800daa2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	3301      	adds	r3, #1
 800daa8:	2207      	movs	r2, #7
 800daaa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800daac:	e00f      	b.n	800dace <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800daae:	6839      	ldr	r1, [r7, #0]
 800dab0:	6878      	ldr	r0, [r7, #4]
 800dab2:	f000 f9f7 	bl	800dea4 <USBD_CtlError>
        err++;
 800dab6:	7afb      	ldrb	r3, [r7, #11]
 800dab8:	3301      	adds	r3, #1
 800daba:	72fb      	strb	r3, [r7, #11]
      break;
 800dabc:	e007      	b.n	800dace <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800dabe:	6839      	ldr	r1, [r7, #0]
 800dac0:	6878      	ldr	r0, [r7, #4]
 800dac2:	f000 f9ef 	bl	800dea4 <USBD_CtlError>
      err++;
 800dac6:	7afb      	ldrb	r3, [r7, #11]
 800dac8:	3301      	adds	r3, #1
 800daca:	72fb      	strb	r3, [r7, #11]
      break;
 800dacc:	bf00      	nop
  }

  if (err != 0U)
 800dace:	7afb      	ldrb	r3, [r7, #11]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d11e      	bne.n	800db12 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800dad4:	683b      	ldr	r3, [r7, #0]
 800dad6:	88db      	ldrh	r3, [r3, #6]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d016      	beq.n	800db0a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800dadc:	893b      	ldrh	r3, [r7, #8]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d00e      	beq.n	800db00 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800dae2:	683b      	ldr	r3, [r7, #0]
 800dae4:	88da      	ldrh	r2, [r3, #6]
 800dae6:	893b      	ldrh	r3, [r7, #8]
 800dae8:	4293      	cmp	r3, r2
 800daea:	bf28      	it	cs
 800daec:	4613      	movcs	r3, r2
 800daee:	b29b      	uxth	r3, r3
 800daf0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800daf2:	893b      	ldrh	r3, [r7, #8]
 800daf4:	461a      	mov	r2, r3
 800daf6:	68f9      	ldr	r1, [r7, #12]
 800daf8:	6878      	ldr	r0, [r7, #4]
 800dafa:	f000 fa44 	bl	800df86 <USBD_CtlSendData>
 800dafe:	e009      	b.n	800db14 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800db00:	6839      	ldr	r1, [r7, #0]
 800db02:	6878      	ldr	r0, [r7, #4]
 800db04:	f000 f9ce 	bl	800dea4 <USBD_CtlError>
 800db08:	e004      	b.n	800db14 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800db0a:	6878      	ldr	r0, [r7, #4]
 800db0c:	f000 fa95 	bl	800e03a <USBD_CtlSendStatus>
 800db10:	e000      	b.n	800db14 <USBD_GetDescriptor+0x320>
    return;
 800db12:	bf00      	nop
  }
}
 800db14:	3710      	adds	r7, #16
 800db16:	46bd      	mov	sp, r7
 800db18:	bd80      	pop	{r7, pc}
 800db1a:	bf00      	nop

0800db1c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db1c:	b580      	push	{r7, lr}
 800db1e:	b084      	sub	sp, #16
 800db20:	af00      	add	r7, sp, #0
 800db22:	6078      	str	r0, [r7, #4]
 800db24:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800db26:	683b      	ldr	r3, [r7, #0]
 800db28:	889b      	ldrh	r3, [r3, #4]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d131      	bne.n	800db92 <USBD_SetAddress+0x76>
 800db2e:	683b      	ldr	r3, [r7, #0]
 800db30:	88db      	ldrh	r3, [r3, #6]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d12d      	bne.n	800db92 <USBD_SetAddress+0x76>
 800db36:	683b      	ldr	r3, [r7, #0]
 800db38:	885b      	ldrh	r3, [r3, #2]
 800db3a:	2b7f      	cmp	r3, #127	@ 0x7f
 800db3c:	d829      	bhi.n	800db92 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800db3e:	683b      	ldr	r3, [r7, #0]
 800db40:	885b      	ldrh	r3, [r3, #2]
 800db42:	b2db      	uxtb	r3, r3
 800db44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800db48:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800db50:	b2db      	uxtb	r3, r3
 800db52:	2b03      	cmp	r3, #3
 800db54:	d104      	bne.n	800db60 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800db56:	6839      	ldr	r1, [r7, #0]
 800db58:	6878      	ldr	r0, [r7, #4]
 800db5a:	f000 f9a3 	bl	800dea4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db5e:	e01d      	b.n	800db9c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	7bfa      	ldrb	r2, [r7, #15]
 800db64:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800db68:	7bfb      	ldrb	r3, [r7, #15]
 800db6a:	4619      	mov	r1, r3
 800db6c:	6878      	ldr	r0, [r7, #4]
 800db6e:	f000 fea1 	bl	800e8b4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800db72:	6878      	ldr	r0, [r7, #4]
 800db74:	f000 fa61 	bl	800e03a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800db78:	7bfb      	ldrb	r3, [r7, #15]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d004      	beq.n	800db88 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	2202      	movs	r2, #2
 800db82:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db86:	e009      	b.n	800db9c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	2201      	movs	r2, #1
 800db8c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db90:	e004      	b.n	800db9c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800db92:	6839      	ldr	r1, [r7, #0]
 800db94:	6878      	ldr	r0, [r7, #4]
 800db96:	f000 f985 	bl	800dea4 <USBD_CtlError>
  }
}
 800db9a:	bf00      	nop
 800db9c:	bf00      	nop
 800db9e:	3710      	adds	r7, #16
 800dba0:	46bd      	mov	sp, r7
 800dba2:	bd80      	pop	{r7, pc}

0800dba4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b084      	sub	sp, #16
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
 800dbac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dbae:	2300      	movs	r3, #0
 800dbb0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800dbb2:	683b      	ldr	r3, [r7, #0]
 800dbb4:	885b      	ldrh	r3, [r3, #2]
 800dbb6:	b2da      	uxtb	r2, r3
 800dbb8:	4b4c      	ldr	r3, [pc, #304]	@ (800dcec <USBD_SetConfig+0x148>)
 800dbba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800dbbc:	4b4b      	ldr	r3, [pc, #300]	@ (800dcec <USBD_SetConfig+0x148>)
 800dbbe:	781b      	ldrb	r3, [r3, #0]
 800dbc0:	2b01      	cmp	r3, #1
 800dbc2:	d905      	bls.n	800dbd0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800dbc4:	6839      	ldr	r1, [r7, #0]
 800dbc6:	6878      	ldr	r0, [r7, #4]
 800dbc8:	f000 f96c 	bl	800dea4 <USBD_CtlError>
    return USBD_FAIL;
 800dbcc:	2303      	movs	r3, #3
 800dbce:	e088      	b.n	800dce2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dbd6:	b2db      	uxtb	r3, r3
 800dbd8:	2b02      	cmp	r3, #2
 800dbda:	d002      	beq.n	800dbe2 <USBD_SetConfig+0x3e>
 800dbdc:	2b03      	cmp	r3, #3
 800dbde:	d025      	beq.n	800dc2c <USBD_SetConfig+0x88>
 800dbe0:	e071      	b.n	800dcc6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800dbe2:	4b42      	ldr	r3, [pc, #264]	@ (800dcec <USBD_SetConfig+0x148>)
 800dbe4:	781b      	ldrb	r3, [r3, #0]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d01c      	beq.n	800dc24 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800dbea:	4b40      	ldr	r3, [pc, #256]	@ (800dcec <USBD_SetConfig+0x148>)
 800dbec:	781b      	ldrb	r3, [r3, #0]
 800dbee:	461a      	mov	r2, r3
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800dbf4:	4b3d      	ldr	r3, [pc, #244]	@ (800dcec <USBD_SetConfig+0x148>)
 800dbf6:	781b      	ldrb	r3, [r3, #0]
 800dbf8:	4619      	mov	r1, r3
 800dbfa:	6878      	ldr	r0, [r7, #4]
 800dbfc:	f7ff f992 	bl	800cf24 <USBD_SetClassConfig>
 800dc00:	4603      	mov	r3, r0
 800dc02:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800dc04:	7bfb      	ldrb	r3, [r7, #15]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d004      	beq.n	800dc14 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800dc0a:	6839      	ldr	r1, [r7, #0]
 800dc0c:	6878      	ldr	r0, [r7, #4]
 800dc0e:	f000 f949 	bl	800dea4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800dc12:	e065      	b.n	800dce0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800dc14:	6878      	ldr	r0, [r7, #4]
 800dc16:	f000 fa10 	bl	800e03a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	2203      	movs	r2, #3
 800dc1e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800dc22:	e05d      	b.n	800dce0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800dc24:	6878      	ldr	r0, [r7, #4]
 800dc26:	f000 fa08 	bl	800e03a <USBD_CtlSendStatus>
      break;
 800dc2a:	e059      	b.n	800dce0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800dc2c:	4b2f      	ldr	r3, [pc, #188]	@ (800dcec <USBD_SetConfig+0x148>)
 800dc2e:	781b      	ldrb	r3, [r3, #0]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d112      	bne.n	800dc5a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	2202      	movs	r2, #2
 800dc38:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800dc3c:	4b2b      	ldr	r3, [pc, #172]	@ (800dcec <USBD_SetConfig+0x148>)
 800dc3e:	781b      	ldrb	r3, [r3, #0]
 800dc40:	461a      	mov	r2, r3
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800dc46:	4b29      	ldr	r3, [pc, #164]	@ (800dcec <USBD_SetConfig+0x148>)
 800dc48:	781b      	ldrb	r3, [r3, #0]
 800dc4a:	4619      	mov	r1, r3
 800dc4c:	6878      	ldr	r0, [r7, #4]
 800dc4e:	f7ff f985 	bl	800cf5c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800dc52:	6878      	ldr	r0, [r7, #4]
 800dc54:	f000 f9f1 	bl	800e03a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800dc58:	e042      	b.n	800dce0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800dc5a:	4b24      	ldr	r3, [pc, #144]	@ (800dcec <USBD_SetConfig+0x148>)
 800dc5c:	781b      	ldrb	r3, [r3, #0]
 800dc5e:	461a      	mov	r2, r3
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	685b      	ldr	r3, [r3, #4]
 800dc64:	429a      	cmp	r2, r3
 800dc66:	d02a      	beq.n	800dcbe <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	685b      	ldr	r3, [r3, #4]
 800dc6c:	b2db      	uxtb	r3, r3
 800dc6e:	4619      	mov	r1, r3
 800dc70:	6878      	ldr	r0, [r7, #4]
 800dc72:	f7ff f973 	bl	800cf5c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800dc76:	4b1d      	ldr	r3, [pc, #116]	@ (800dcec <USBD_SetConfig+0x148>)
 800dc78:	781b      	ldrb	r3, [r3, #0]
 800dc7a:	461a      	mov	r2, r3
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800dc80:	4b1a      	ldr	r3, [pc, #104]	@ (800dcec <USBD_SetConfig+0x148>)
 800dc82:	781b      	ldrb	r3, [r3, #0]
 800dc84:	4619      	mov	r1, r3
 800dc86:	6878      	ldr	r0, [r7, #4]
 800dc88:	f7ff f94c 	bl	800cf24 <USBD_SetClassConfig>
 800dc8c:	4603      	mov	r3, r0
 800dc8e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800dc90:	7bfb      	ldrb	r3, [r7, #15]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d00f      	beq.n	800dcb6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800dc96:	6839      	ldr	r1, [r7, #0]
 800dc98:	6878      	ldr	r0, [r7, #4]
 800dc9a:	f000 f903 	bl	800dea4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	685b      	ldr	r3, [r3, #4]
 800dca2:	b2db      	uxtb	r3, r3
 800dca4:	4619      	mov	r1, r3
 800dca6:	6878      	ldr	r0, [r7, #4]
 800dca8:	f7ff f958 	bl	800cf5c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	2202      	movs	r2, #2
 800dcb0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800dcb4:	e014      	b.n	800dce0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800dcb6:	6878      	ldr	r0, [r7, #4]
 800dcb8:	f000 f9bf 	bl	800e03a <USBD_CtlSendStatus>
      break;
 800dcbc:	e010      	b.n	800dce0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800dcbe:	6878      	ldr	r0, [r7, #4]
 800dcc0:	f000 f9bb 	bl	800e03a <USBD_CtlSendStatus>
      break;
 800dcc4:	e00c      	b.n	800dce0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800dcc6:	6839      	ldr	r1, [r7, #0]
 800dcc8:	6878      	ldr	r0, [r7, #4]
 800dcca:	f000 f8eb 	bl	800dea4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800dcce:	4b07      	ldr	r3, [pc, #28]	@ (800dcec <USBD_SetConfig+0x148>)
 800dcd0:	781b      	ldrb	r3, [r3, #0]
 800dcd2:	4619      	mov	r1, r3
 800dcd4:	6878      	ldr	r0, [r7, #4]
 800dcd6:	f7ff f941 	bl	800cf5c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800dcda:	2303      	movs	r3, #3
 800dcdc:	73fb      	strb	r3, [r7, #15]
      break;
 800dcde:	bf00      	nop
  }

  return ret;
 800dce0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dce2:	4618      	mov	r0, r3
 800dce4:	3710      	adds	r7, #16
 800dce6:	46bd      	mov	sp, r7
 800dce8:	bd80      	pop	{r7, pc}
 800dcea:	bf00      	nop
 800dcec:	200034f0 	.word	0x200034f0

0800dcf0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dcf0:	b580      	push	{r7, lr}
 800dcf2:	b082      	sub	sp, #8
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	6078      	str	r0, [r7, #4]
 800dcf8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800dcfa:	683b      	ldr	r3, [r7, #0]
 800dcfc:	88db      	ldrh	r3, [r3, #6]
 800dcfe:	2b01      	cmp	r3, #1
 800dd00:	d004      	beq.n	800dd0c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800dd02:	6839      	ldr	r1, [r7, #0]
 800dd04:	6878      	ldr	r0, [r7, #4]
 800dd06:	f000 f8cd 	bl	800dea4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800dd0a:	e023      	b.n	800dd54 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dd12:	b2db      	uxtb	r3, r3
 800dd14:	2b02      	cmp	r3, #2
 800dd16:	dc02      	bgt.n	800dd1e <USBD_GetConfig+0x2e>
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	dc03      	bgt.n	800dd24 <USBD_GetConfig+0x34>
 800dd1c:	e015      	b.n	800dd4a <USBD_GetConfig+0x5a>
 800dd1e:	2b03      	cmp	r3, #3
 800dd20:	d00b      	beq.n	800dd3a <USBD_GetConfig+0x4a>
 800dd22:	e012      	b.n	800dd4a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	2200      	movs	r2, #0
 800dd28:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	3308      	adds	r3, #8
 800dd2e:	2201      	movs	r2, #1
 800dd30:	4619      	mov	r1, r3
 800dd32:	6878      	ldr	r0, [r7, #4]
 800dd34:	f000 f927 	bl	800df86 <USBD_CtlSendData>
        break;
 800dd38:	e00c      	b.n	800dd54 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	3304      	adds	r3, #4
 800dd3e:	2201      	movs	r2, #1
 800dd40:	4619      	mov	r1, r3
 800dd42:	6878      	ldr	r0, [r7, #4]
 800dd44:	f000 f91f 	bl	800df86 <USBD_CtlSendData>
        break;
 800dd48:	e004      	b.n	800dd54 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800dd4a:	6839      	ldr	r1, [r7, #0]
 800dd4c:	6878      	ldr	r0, [r7, #4]
 800dd4e:	f000 f8a9 	bl	800dea4 <USBD_CtlError>
        break;
 800dd52:	bf00      	nop
}
 800dd54:	bf00      	nop
 800dd56:	3708      	adds	r7, #8
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	bd80      	pop	{r7, pc}

0800dd5c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b082      	sub	sp, #8
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]
 800dd64:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dd6c:	b2db      	uxtb	r3, r3
 800dd6e:	3b01      	subs	r3, #1
 800dd70:	2b02      	cmp	r3, #2
 800dd72:	d81e      	bhi.n	800ddb2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800dd74:	683b      	ldr	r3, [r7, #0]
 800dd76:	88db      	ldrh	r3, [r3, #6]
 800dd78:	2b02      	cmp	r3, #2
 800dd7a:	d004      	beq.n	800dd86 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800dd7c:	6839      	ldr	r1, [r7, #0]
 800dd7e:	6878      	ldr	r0, [r7, #4]
 800dd80:	f000 f890 	bl	800dea4 <USBD_CtlError>
        break;
 800dd84:	e01a      	b.n	800ddbc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	2201      	movs	r2, #1
 800dd8a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d005      	beq.n	800dda2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	68db      	ldr	r3, [r3, #12]
 800dd9a:	f043 0202 	orr.w	r2, r3, #2
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	330c      	adds	r3, #12
 800dda6:	2202      	movs	r2, #2
 800dda8:	4619      	mov	r1, r3
 800ddaa:	6878      	ldr	r0, [r7, #4]
 800ddac:	f000 f8eb 	bl	800df86 <USBD_CtlSendData>
      break;
 800ddb0:	e004      	b.n	800ddbc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ddb2:	6839      	ldr	r1, [r7, #0]
 800ddb4:	6878      	ldr	r0, [r7, #4]
 800ddb6:	f000 f875 	bl	800dea4 <USBD_CtlError>
      break;
 800ddba:	bf00      	nop
  }
}
 800ddbc:	bf00      	nop
 800ddbe:	3708      	adds	r7, #8
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	bd80      	pop	{r7, pc}

0800ddc4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b082      	sub	sp, #8
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	6078      	str	r0, [r7, #4]
 800ddcc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ddce:	683b      	ldr	r3, [r7, #0]
 800ddd0:	885b      	ldrh	r3, [r3, #2]
 800ddd2:	2b01      	cmp	r3, #1
 800ddd4:	d106      	bne.n	800dde4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	2201      	movs	r2, #1
 800ddda:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ddde:	6878      	ldr	r0, [r7, #4]
 800dde0:	f000 f92b 	bl	800e03a <USBD_CtlSendStatus>
  }
}
 800dde4:	bf00      	nop
 800dde6:	3708      	adds	r7, #8
 800dde8:	46bd      	mov	sp, r7
 800ddea:	bd80      	pop	{r7, pc}

0800ddec <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ddec:	b580      	push	{r7, lr}
 800ddee:	b082      	sub	sp, #8
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	6078      	str	r0, [r7, #4]
 800ddf4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ddfc:	b2db      	uxtb	r3, r3
 800ddfe:	3b01      	subs	r3, #1
 800de00:	2b02      	cmp	r3, #2
 800de02:	d80b      	bhi.n	800de1c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800de04:	683b      	ldr	r3, [r7, #0]
 800de06:	885b      	ldrh	r3, [r3, #2]
 800de08:	2b01      	cmp	r3, #1
 800de0a:	d10c      	bne.n	800de26 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	2200      	movs	r2, #0
 800de10:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800de14:	6878      	ldr	r0, [r7, #4]
 800de16:	f000 f910 	bl	800e03a <USBD_CtlSendStatus>
      }
      break;
 800de1a:	e004      	b.n	800de26 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800de1c:	6839      	ldr	r1, [r7, #0]
 800de1e:	6878      	ldr	r0, [r7, #4]
 800de20:	f000 f840 	bl	800dea4 <USBD_CtlError>
      break;
 800de24:	e000      	b.n	800de28 <USBD_ClrFeature+0x3c>
      break;
 800de26:	bf00      	nop
  }
}
 800de28:	bf00      	nop
 800de2a:	3708      	adds	r7, #8
 800de2c:	46bd      	mov	sp, r7
 800de2e:	bd80      	pop	{r7, pc}

0800de30 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800de30:	b580      	push	{r7, lr}
 800de32:	b084      	sub	sp, #16
 800de34:	af00      	add	r7, sp, #0
 800de36:	6078      	str	r0, [r7, #4]
 800de38:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800de3a:	683b      	ldr	r3, [r7, #0]
 800de3c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	781a      	ldrb	r2, [r3, #0]
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	3301      	adds	r3, #1
 800de4a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	781a      	ldrb	r2, [r3, #0]
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	3301      	adds	r3, #1
 800de58:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800de5a:	68f8      	ldr	r0, [r7, #12]
 800de5c:	f7ff fa92 	bl	800d384 <SWAPBYTE>
 800de60:	4603      	mov	r3, r0
 800de62:	461a      	mov	r2, r3
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	3301      	adds	r3, #1
 800de6c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	3301      	adds	r3, #1
 800de72:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800de74:	68f8      	ldr	r0, [r7, #12]
 800de76:	f7ff fa85 	bl	800d384 <SWAPBYTE>
 800de7a:	4603      	mov	r3, r0
 800de7c:	461a      	mov	r2, r3
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	3301      	adds	r3, #1
 800de86:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	3301      	adds	r3, #1
 800de8c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800de8e:	68f8      	ldr	r0, [r7, #12]
 800de90:	f7ff fa78 	bl	800d384 <SWAPBYTE>
 800de94:	4603      	mov	r3, r0
 800de96:	461a      	mov	r2, r3
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	80da      	strh	r2, [r3, #6]
}
 800de9c:	bf00      	nop
 800de9e:	3710      	adds	r7, #16
 800dea0:	46bd      	mov	sp, r7
 800dea2:	bd80      	pop	{r7, pc}

0800dea4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dea4:	b580      	push	{r7, lr}
 800dea6:	b082      	sub	sp, #8
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	6078      	str	r0, [r7, #4]
 800deac:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800deae:	2180      	movs	r1, #128	@ 0x80
 800deb0:	6878      	ldr	r0, [r7, #4]
 800deb2:	f000 fc95 	bl	800e7e0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800deb6:	2100      	movs	r1, #0
 800deb8:	6878      	ldr	r0, [r7, #4]
 800deba:	f000 fc91 	bl	800e7e0 <USBD_LL_StallEP>
}
 800debe:	bf00      	nop
 800dec0:	3708      	adds	r7, #8
 800dec2:	46bd      	mov	sp, r7
 800dec4:	bd80      	pop	{r7, pc}

0800dec6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800dec6:	b580      	push	{r7, lr}
 800dec8:	b086      	sub	sp, #24
 800deca:	af00      	add	r7, sp, #0
 800decc:	60f8      	str	r0, [r7, #12]
 800dece:	60b9      	str	r1, [r7, #8]
 800ded0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ded2:	2300      	movs	r3, #0
 800ded4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d036      	beq.n	800df4a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800dee0:	6938      	ldr	r0, [r7, #16]
 800dee2:	f000 f836 	bl	800df52 <USBD_GetLen>
 800dee6:	4603      	mov	r3, r0
 800dee8:	3301      	adds	r3, #1
 800deea:	b29b      	uxth	r3, r3
 800deec:	005b      	lsls	r3, r3, #1
 800deee:	b29a      	uxth	r2, r3
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800def4:	7dfb      	ldrb	r3, [r7, #23]
 800def6:	68ba      	ldr	r2, [r7, #8]
 800def8:	4413      	add	r3, r2
 800defa:	687a      	ldr	r2, [r7, #4]
 800defc:	7812      	ldrb	r2, [r2, #0]
 800defe:	701a      	strb	r2, [r3, #0]
  idx++;
 800df00:	7dfb      	ldrb	r3, [r7, #23]
 800df02:	3301      	adds	r3, #1
 800df04:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800df06:	7dfb      	ldrb	r3, [r7, #23]
 800df08:	68ba      	ldr	r2, [r7, #8]
 800df0a:	4413      	add	r3, r2
 800df0c:	2203      	movs	r2, #3
 800df0e:	701a      	strb	r2, [r3, #0]
  idx++;
 800df10:	7dfb      	ldrb	r3, [r7, #23]
 800df12:	3301      	adds	r3, #1
 800df14:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800df16:	e013      	b.n	800df40 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800df18:	7dfb      	ldrb	r3, [r7, #23]
 800df1a:	68ba      	ldr	r2, [r7, #8]
 800df1c:	4413      	add	r3, r2
 800df1e:	693a      	ldr	r2, [r7, #16]
 800df20:	7812      	ldrb	r2, [r2, #0]
 800df22:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800df24:	693b      	ldr	r3, [r7, #16]
 800df26:	3301      	adds	r3, #1
 800df28:	613b      	str	r3, [r7, #16]
    idx++;
 800df2a:	7dfb      	ldrb	r3, [r7, #23]
 800df2c:	3301      	adds	r3, #1
 800df2e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800df30:	7dfb      	ldrb	r3, [r7, #23]
 800df32:	68ba      	ldr	r2, [r7, #8]
 800df34:	4413      	add	r3, r2
 800df36:	2200      	movs	r2, #0
 800df38:	701a      	strb	r2, [r3, #0]
    idx++;
 800df3a:	7dfb      	ldrb	r3, [r7, #23]
 800df3c:	3301      	adds	r3, #1
 800df3e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800df40:	693b      	ldr	r3, [r7, #16]
 800df42:	781b      	ldrb	r3, [r3, #0]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d1e7      	bne.n	800df18 <USBD_GetString+0x52>
 800df48:	e000      	b.n	800df4c <USBD_GetString+0x86>
    return;
 800df4a:	bf00      	nop
  }
}
 800df4c:	3718      	adds	r7, #24
 800df4e:	46bd      	mov	sp, r7
 800df50:	bd80      	pop	{r7, pc}

0800df52 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800df52:	b480      	push	{r7}
 800df54:	b085      	sub	sp, #20
 800df56:	af00      	add	r7, sp, #0
 800df58:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800df5a:	2300      	movs	r3, #0
 800df5c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800df62:	e005      	b.n	800df70 <USBD_GetLen+0x1e>
  {
    len++;
 800df64:	7bfb      	ldrb	r3, [r7, #15]
 800df66:	3301      	adds	r3, #1
 800df68:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800df6a:	68bb      	ldr	r3, [r7, #8]
 800df6c:	3301      	adds	r3, #1
 800df6e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800df70:	68bb      	ldr	r3, [r7, #8]
 800df72:	781b      	ldrb	r3, [r3, #0]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d1f5      	bne.n	800df64 <USBD_GetLen+0x12>
  }

  return len;
 800df78:	7bfb      	ldrb	r3, [r7, #15]
}
 800df7a:	4618      	mov	r0, r3
 800df7c:	3714      	adds	r7, #20
 800df7e:	46bd      	mov	sp, r7
 800df80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df84:	4770      	bx	lr

0800df86 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800df86:	b580      	push	{r7, lr}
 800df88:	b084      	sub	sp, #16
 800df8a:	af00      	add	r7, sp, #0
 800df8c:	60f8      	str	r0, [r7, #12]
 800df8e:	60b9      	str	r1, [r7, #8]
 800df90:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	2202      	movs	r2, #2
 800df96:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	687a      	ldr	r2, [r7, #4]
 800df9e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	687a      	ldr	r2, [r7, #4]
 800dfa4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	68ba      	ldr	r2, [r7, #8]
 800dfaa:	2100      	movs	r1, #0
 800dfac:	68f8      	ldr	r0, [r7, #12]
 800dfae:	f000 fca0 	bl	800e8f2 <USBD_LL_Transmit>

  return USBD_OK;
 800dfb2:	2300      	movs	r3, #0
}
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	3710      	adds	r7, #16
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	bd80      	pop	{r7, pc}

0800dfbc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800dfbc:	b580      	push	{r7, lr}
 800dfbe:	b084      	sub	sp, #16
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	60f8      	str	r0, [r7, #12]
 800dfc4:	60b9      	str	r1, [r7, #8]
 800dfc6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	68ba      	ldr	r2, [r7, #8]
 800dfcc:	2100      	movs	r1, #0
 800dfce:	68f8      	ldr	r0, [r7, #12]
 800dfd0:	f000 fc8f 	bl	800e8f2 <USBD_LL_Transmit>

  return USBD_OK;
 800dfd4:	2300      	movs	r3, #0
}
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	3710      	adds	r7, #16
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	bd80      	pop	{r7, pc}

0800dfde <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800dfde:	b580      	push	{r7, lr}
 800dfe0:	b084      	sub	sp, #16
 800dfe2:	af00      	add	r7, sp, #0
 800dfe4:	60f8      	str	r0, [r7, #12]
 800dfe6:	60b9      	str	r1, [r7, #8]
 800dfe8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	2203      	movs	r2, #3
 800dfee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	687a      	ldr	r2, [r7, #4]
 800dff6:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	687a      	ldr	r2, [r7, #4]
 800dffe:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	68ba      	ldr	r2, [r7, #8]
 800e006:	2100      	movs	r1, #0
 800e008:	68f8      	ldr	r0, [r7, #12]
 800e00a:	f000 fc93 	bl	800e934 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e00e:	2300      	movs	r3, #0
}
 800e010:	4618      	mov	r0, r3
 800e012:	3710      	adds	r7, #16
 800e014:	46bd      	mov	sp, r7
 800e016:	bd80      	pop	{r7, pc}

0800e018 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e018:	b580      	push	{r7, lr}
 800e01a:	b084      	sub	sp, #16
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	60f8      	str	r0, [r7, #12]
 800e020:	60b9      	str	r1, [r7, #8]
 800e022:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	68ba      	ldr	r2, [r7, #8]
 800e028:	2100      	movs	r1, #0
 800e02a:	68f8      	ldr	r0, [r7, #12]
 800e02c:	f000 fc82 	bl	800e934 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e030:	2300      	movs	r3, #0
}
 800e032:	4618      	mov	r0, r3
 800e034:	3710      	adds	r7, #16
 800e036:	46bd      	mov	sp, r7
 800e038:	bd80      	pop	{r7, pc}

0800e03a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e03a:	b580      	push	{r7, lr}
 800e03c:	b082      	sub	sp, #8
 800e03e:	af00      	add	r7, sp, #0
 800e040:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	2204      	movs	r2, #4
 800e046:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e04a:	2300      	movs	r3, #0
 800e04c:	2200      	movs	r2, #0
 800e04e:	2100      	movs	r1, #0
 800e050:	6878      	ldr	r0, [r7, #4]
 800e052:	f000 fc4e 	bl	800e8f2 <USBD_LL_Transmit>

  return USBD_OK;
 800e056:	2300      	movs	r3, #0
}
 800e058:	4618      	mov	r0, r3
 800e05a:	3708      	adds	r7, #8
 800e05c:	46bd      	mov	sp, r7
 800e05e:	bd80      	pop	{r7, pc}

0800e060 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e060:	b580      	push	{r7, lr}
 800e062:	b082      	sub	sp, #8
 800e064:	af00      	add	r7, sp, #0
 800e066:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	2205      	movs	r2, #5
 800e06c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e070:	2300      	movs	r3, #0
 800e072:	2200      	movs	r2, #0
 800e074:	2100      	movs	r1, #0
 800e076:	6878      	ldr	r0, [r7, #4]
 800e078:	f000 fc5c 	bl	800e934 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e07c:	2300      	movs	r3, #0
}
 800e07e:	4618      	mov	r0, r3
 800e080:	3708      	adds	r7, #8
 800e082:	46bd      	mov	sp, r7
 800e084:	bd80      	pop	{r7, pc}
	...

0800e088 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800e08c:	2200      	movs	r2, #0
 800e08e:	4912      	ldr	r1, [pc, #72]	@ (800e0d8 <MX_USB_Device_Init+0x50>)
 800e090:	4812      	ldr	r0, [pc, #72]	@ (800e0dc <MX_USB_Device_Init+0x54>)
 800e092:	f7fe fed9 	bl	800ce48 <USBD_Init>
 800e096:	4603      	mov	r3, r0
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d001      	beq.n	800e0a0 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800e09c:	f7f3 f80e 	bl	80010bc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800e0a0:	490f      	ldr	r1, [pc, #60]	@ (800e0e0 <MX_USB_Device_Init+0x58>)
 800e0a2:	480e      	ldr	r0, [pc, #56]	@ (800e0dc <MX_USB_Device_Init+0x54>)
 800e0a4:	f7fe ff00 	bl	800cea8 <USBD_RegisterClass>
 800e0a8:	4603      	mov	r3, r0
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d001      	beq.n	800e0b2 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800e0ae:	f7f3 f805 	bl	80010bc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800e0b2:	490c      	ldr	r1, [pc, #48]	@ (800e0e4 <MX_USB_Device_Init+0x5c>)
 800e0b4:	4809      	ldr	r0, [pc, #36]	@ (800e0dc <MX_USB_Device_Init+0x54>)
 800e0b6:	f7fe fe21 	bl	800ccfc <USBD_CDC_RegisterInterface>
 800e0ba:	4603      	mov	r3, r0
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d001      	beq.n	800e0c4 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800e0c0:	f7f2 fffc 	bl	80010bc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800e0c4:	4805      	ldr	r0, [pc, #20]	@ (800e0dc <MX_USB_Device_Init+0x54>)
 800e0c6:	f7fe ff16 	bl	800cef6 <USBD_Start>
 800e0ca:	4603      	mov	r3, r0
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d001      	beq.n	800e0d4 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800e0d0:	f7f2 fff4 	bl	80010bc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800e0d4:	bf00      	nop
 800e0d6:	bd80      	pop	{r7, pc}
 800e0d8:	20000130 	.word	0x20000130
 800e0dc:	200034f4 	.word	0x200034f4
 800e0e0:	20000018 	.word	0x20000018
 800e0e4:	2000011c 	.word	0x2000011c

0800e0e8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e0ec:	2200      	movs	r2, #0
 800e0ee:	4905      	ldr	r1, [pc, #20]	@ (800e104 <CDC_Init_FS+0x1c>)
 800e0f0:	4805      	ldr	r0, [pc, #20]	@ (800e108 <CDC_Init_FS+0x20>)
 800e0f2:	f7fe fe18 	bl	800cd26 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e0f6:	4905      	ldr	r1, [pc, #20]	@ (800e10c <CDC_Init_FS+0x24>)
 800e0f8:	4803      	ldr	r0, [pc, #12]	@ (800e108 <CDC_Init_FS+0x20>)
 800e0fa:	f7fe fe32 	bl	800cd62 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e0fe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e100:	4618      	mov	r0, r3
 800e102:	bd80      	pop	{r7, pc}
 800e104:	20003fc4 	.word	0x20003fc4
 800e108:	200034f4 	.word	0x200034f4
 800e10c:	200037c4 	.word	0x200037c4

0800e110 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e110:	b480      	push	{r7}
 800e112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e114:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e116:	4618      	mov	r0, r3
 800e118:	46bd      	mov	sp, r7
 800e11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e11e:	4770      	bx	lr

0800e120 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e120:	b480      	push	{r7}
 800e122:	b083      	sub	sp, #12
 800e124:	af00      	add	r7, sp, #0
 800e126:	4603      	mov	r3, r0
 800e128:	6039      	str	r1, [r7, #0]
 800e12a:	71fb      	strb	r3, [r7, #7]
 800e12c:	4613      	mov	r3, r2
 800e12e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e130:	79fb      	ldrb	r3, [r7, #7]
 800e132:	2b23      	cmp	r3, #35	@ 0x23
 800e134:	d84a      	bhi.n	800e1cc <CDC_Control_FS+0xac>
 800e136:	a201      	add	r2, pc, #4	@ (adr r2, 800e13c <CDC_Control_FS+0x1c>)
 800e138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e13c:	0800e1cd 	.word	0x0800e1cd
 800e140:	0800e1cd 	.word	0x0800e1cd
 800e144:	0800e1cd 	.word	0x0800e1cd
 800e148:	0800e1cd 	.word	0x0800e1cd
 800e14c:	0800e1cd 	.word	0x0800e1cd
 800e150:	0800e1cd 	.word	0x0800e1cd
 800e154:	0800e1cd 	.word	0x0800e1cd
 800e158:	0800e1cd 	.word	0x0800e1cd
 800e15c:	0800e1cd 	.word	0x0800e1cd
 800e160:	0800e1cd 	.word	0x0800e1cd
 800e164:	0800e1cd 	.word	0x0800e1cd
 800e168:	0800e1cd 	.word	0x0800e1cd
 800e16c:	0800e1cd 	.word	0x0800e1cd
 800e170:	0800e1cd 	.word	0x0800e1cd
 800e174:	0800e1cd 	.word	0x0800e1cd
 800e178:	0800e1cd 	.word	0x0800e1cd
 800e17c:	0800e1cd 	.word	0x0800e1cd
 800e180:	0800e1cd 	.word	0x0800e1cd
 800e184:	0800e1cd 	.word	0x0800e1cd
 800e188:	0800e1cd 	.word	0x0800e1cd
 800e18c:	0800e1cd 	.word	0x0800e1cd
 800e190:	0800e1cd 	.word	0x0800e1cd
 800e194:	0800e1cd 	.word	0x0800e1cd
 800e198:	0800e1cd 	.word	0x0800e1cd
 800e19c:	0800e1cd 	.word	0x0800e1cd
 800e1a0:	0800e1cd 	.word	0x0800e1cd
 800e1a4:	0800e1cd 	.word	0x0800e1cd
 800e1a8:	0800e1cd 	.word	0x0800e1cd
 800e1ac:	0800e1cd 	.word	0x0800e1cd
 800e1b0:	0800e1cd 	.word	0x0800e1cd
 800e1b4:	0800e1cd 	.word	0x0800e1cd
 800e1b8:	0800e1cd 	.word	0x0800e1cd
 800e1bc:	0800e1cd 	.word	0x0800e1cd
 800e1c0:	0800e1cd 	.word	0x0800e1cd
 800e1c4:	0800e1cd 	.word	0x0800e1cd
 800e1c8:	0800e1cd 	.word	0x0800e1cd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e1cc:	bf00      	nop
  }

  return (USBD_OK);
 800e1ce:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e1d0:	4618      	mov	r0, r3
 800e1d2:	370c      	adds	r7, #12
 800e1d4:	46bd      	mov	sp, r7
 800e1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1da:	4770      	bx	lr

0800e1dc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e1dc:	b580      	push	{r7, lr}
 800e1de:	b082      	sub	sp, #8
 800e1e0:	af00      	add	r7, sp, #0
 800e1e2:	6078      	str	r0, [r7, #4]
 800e1e4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e1e6:	6879      	ldr	r1, [r7, #4]
 800e1e8:	4805      	ldr	r0, [pc, #20]	@ (800e200 <CDC_Receive_FS+0x24>)
 800e1ea:	f7fe fdba 	bl	800cd62 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e1ee:	4804      	ldr	r0, [pc, #16]	@ (800e200 <CDC_Receive_FS+0x24>)
 800e1f0:	f7fe fe00 	bl	800cdf4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800e1f4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e1f6:	4618      	mov	r0, r3
 800e1f8:	3708      	adds	r7, #8
 800e1fa:	46bd      	mov	sp, r7
 800e1fc:	bd80      	pop	{r7, pc}
 800e1fe:	bf00      	nop
 800e200:	200034f4 	.word	0x200034f4

0800e204 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800e204:	b580      	push	{r7, lr}
 800e206:	b084      	sub	sp, #16
 800e208:	af00      	add	r7, sp, #0
 800e20a:	6078      	str	r0, [r7, #4]
 800e20c:	460b      	mov	r3, r1
 800e20e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e210:	2300      	movs	r3, #0
 800e212:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800e214:	4b0d      	ldr	r3, [pc, #52]	@ (800e24c <CDC_Transmit_FS+0x48>)
 800e216:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e21a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800e21c:	68bb      	ldr	r3, [r7, #8]
 800e21e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800e222:	2b00      	cmp	r3, #0
 800e224:	d001      	beq.n	800e22a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800e226:	2301      	movs	r3, #1
 800e228:	e00b      	b.n	800e242 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e22a:	887b      	ldrh	r3, [r7, #2]
 800e22c:	461a      	mov	r2, r3
 800e22e:	6879      	ldr	r1, [r7, #4]
 800e230:	4806      	ldr	r0, [pc, #24]	@ (800e24c <CDC_Transmit_FS+0x48>)
 800e232:	f7fe fd78 	bl	800cd26 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e236:	4805      	ldr	r0, [pc, #20]	@ (800e24c <CDC_Transmit_FS+0x48>)
 800e238:	f7fe fdac 	bl	800cd94 <USBD_CDC_TransmitPacket>
 800e23c:	4603      	mov	r3, r0
 800e23e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800e240:	7bfb      	ldrb	r3, [r7, #15]
}
 800e242:	4618      	mov	r0, r3
 800e244:	3710      	adds	r7, #16
 800e246:	46bd      	mov	sp, r7
 800e248:	bd80      	pop	{r7, pc}
 800e24a:	bf00      	nop
 800e24c:	200034f4 	.word	0x200034f4

0800e250 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e250:	b480      	push	{r7}
 800e252:	b087      	sub	sp, #28
 800e254:	af00      	add	r7, sp, #0
 800e256:	60f8      	str	r0, [r7, #12]
 800e258:	60b9      	str	r1, [r7, #8]
 800e25a:	4613      	mov	r3, r2
 800e25c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e25e:	2300      	movs	r3, #0
 800e260:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e262:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e266:	4618      	mov	r0, r3
 800e268:	371c      	adds	r7, #28
 800e26a:	46bd      	mov	sp, r7
 800e26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e270:	4770      	bx	lr
	...

0800e274 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e274:	b480      	push	{r7}
 800e276:	b083      	sub	sp, #12
 800e278:	af00      	add	r7, sp, #0
 800e27a:	4603      	mov	r3, r0
 800e27c:	6039      	str	r1, [r7, #0]
 800e27e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800e280:	683b      	ldr	r3, [r7, #0]
 800e282:	2212      	movs	r2, #18
 800e284:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800e286:	4b03      	ldr	r3, [pc, #12]	@ (800e294 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800e288:	4618      	mov	r0, r3
 800e28a:	370c      	adds	r7, #12
 800e28c:	46bd      	mov	sp, r7
 800e28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e292:	4770      	bx	lr
 800e294:	20000150 	.word	0x20000150

0800e298 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e298:	b480      	push	{r7}
 800e29a:	b083      	sub	sp, #12
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	4603      	mov	r3, r0
 800e2a0:	6039      	str	r1, [r7, #0]
 800e2a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e2a4:	683b      	ldr	r3, [r7, #0]
 800e2a6:	2204      	movs	r2, #4
 800e2a8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e2aa:	4b03      	ldr	r3, [pc, #12]	@ (800e2b8 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	370c      	adds	r7, #12
 800e2b0:	46bd      	mov	sp, r7
 800e2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b6:	4770      	bx	lr
 800e2b8:	20000164 	.word	0x20000164

0800e2bc <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e2bc:	b580      	push	{r7, lr}
 800e2be:	b082      	sub	sp, #8
 800e2c0:	af00      	add	r7, sp, #0
 800e2c2:	4603      	mov	r3, r0
 800e2c4:	6039      	str	r1, [r7, #0]
 800e2c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e2c8:	79fb      	ldrb	r3, [r7, #7]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d105      	bne.n	800e2da <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800e2ce:	683a      	ldr	r2, [r7, #0]
 800e2d0:	4907      	ldr	r1, [pc, #28]	@ (800e2f0 <USBD_CDC_ProductStrDescriptor+0x34>)
 800e2d2:	4808      	ldr	r0, [pc, #32]	@ (800e2f4 <USBD_CDC_ProductStrDescriptor+0x38>)
 800e2d4:	f7ff fdf7 	bl	800dec6 <USBD_GetString>
 800e2d8:	e004      	b.n	800e2e4 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800e2da:	683a      	ldr	r2, [r7, #0]
 800e2dc:	4904      	ldr	r1, [pc, #16]	@ (800e2f0 <USBD_CDC_ProductStrDescriptor+0x34>)
 800e2de:	4805      	ldr	r0, [pc, #20]	@ (800e2f4 <USBD_CDC_ProductStrDescriptor+0x38>)
 800e2e0:	f7ff fdf1 	bl	800dec6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e2e4:	4b02      	ldr	r3, [pc, #8]	@ (800e2f0 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	3708      	adds	r7, #8
 800e2ea:	46bd      	mov	sp, r7
 800e2ec:	bd80      	pop	{r7, pc}
 800e2ee:	bf00      	nop
 800e2f0:	200047c4 	.word	0x200047c4
 800e2f4:	0800fe84 	.word	0x0800fe84

0800e2f8 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b082      	sub	sp, #8
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	4603      	mov	r3, r0
 800e300:	6039      	str	r1, [r7, #0]
 800e302:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e304:	683a      	ldr	r2, [r7, #0]
 800e306:	4904      	ldr	r1, [pc, #16]	@ (800e318 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800e308:	4804      	ldr	r0, [pc, #16]	@ (800e31c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800e30a:	f7ff fddc 	bl	800dec6 <USBD_GetString>
  return USBD_StrDesc;
 800e30e:	4b02      	ldr	r3, [pc, #8]	@ (800e318 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800e310:	4618      	mov	r0, r3
 800e312:	3708      	adds	r7, #8
 800e314:	46bd      	mov	sp, r7
 800e316:	bd80      	pop	{r7, pc}
 800e318:	200047c4 	.word	0x200047c4
 800e31c:	0800fe9c 	.word	0x0800fe9c

0800e320 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e320:	b580      	push	{r7, lr}
 800e322:	b082      	sub	sp, #8
 800e324:	af00      	add	r7, sp, #0
 800e326:	4603      	mov	r3, r0
 800e328:	6039      	str	r1, [r7, #0]
 800e32a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e32c:	683b      	ldr	r3, [r7, #0]
 800e32e:	221a      	movs	r2, #26
 800e330:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e332:	f000 f843 	bl	800e3bc <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800e336:	4b02      	ldr	r3, [pc, #8]	@ (800e340 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800e338:	4618      	mov	r0, r3
 800e33a:	3708      	adds	r7, #8
 800e33c:	46bd      	mov	sp, r7
 800e33e:	bd80      	pop	{r7, pc}
 800e340:	20000168 	.word	0x20000168

0800e344 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e344:	b580      	push	{r7, lr}
 800e346:	b082      	sub	sp, #8
 800e348:	af00      	add	r7, sp, #0
 800e34a:	4603      	mov	r3, r0
 800e34c:	6039      	str	r1, [r7, #0]
 800e34e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e350:	79fb      	ldrb	r3, [r7, #7]
 800e352:	2b00      	cmp	r3, #0
 800e354:	d105      	bne.n	800e362 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800e356:	683a      	ldr	r2, [r7, #0]
 800e358:	4907      	ldr	r1, [pc, #28]	@ (800e378 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800e35a:	4808      	ldr	r0, [pc, #32]	@ (800e37c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800e35c:	f7ff fdb3 	bl	800dec6 <USBD_GetString>
 800e360:	e004      	b.n	800e36c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800e362:	683a      	ldr	r2, [r7, #0]
 800e364:	4904      	ldr	r1, [pc, #16]	@ (800e378 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800e366:	4805      	ldr	r0, [pc, #20]	@ (800e37c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800e368:	f7ff fdad 	bl	800dec6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e36c:	4b02      	ldr	r3, [pc, #8]	@ (800e378 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800e36e:	4618      	mov	r0, r3
 800e370:	3708      	adds	r7, #8
 800e372:	46bd      	mov	sp, r7
 800e374:	bd80      	pop	{r7, pc}
 800e376:	bf00      	nop
 800e378:	200047c4 	.word	0x200047c4
 800e37c:	0800feb0 	.word	0x0800feb0

0800e380 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e380:	b580      	push	{r7, lr}
 800e382:	b082      	sub	sp, #8
 800e384:	af00      	add	r7, sp, #0
 800e386:	4603      	mov	r3, r0
 800e388:	6039      	str	r1, [r7, #0]
 800e38a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e38c:	79fb      	ldrb	r3, [r7, #7]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d105      	bne.n	800e39e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800e392:	683a      	ldr	r2, [r7, #0]
 800e394:	4907      	ldr	r1, [pc, #28]	@ (800e3b4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800e396:	4808      	ldr	r0, [pc, #32]	@ (800e3b8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800e398:	f7ff fd95 	bl	800dec6 <USBD_GetString>
 800e39c:	e004      	b.n	800e3a8 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800e39e:	683a      	ldr	r2, [r7, #0]
 800e3a0:	4904      	ldr	r1, [pc, #16]	@ (800e3b4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800e3a2:	4805      	ldr	r0, [pc, #20]	@ (800e3b8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800e3a4:	f7ff fd8f 	bl	800dec6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e3a8:	4b02      	ldr	r3, [pc, #8]	@ (800e3b4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	3708      	adds	r7, #8
 800e3ae:	46bd      	mov	sp, r7
 800e3b0:	bd80      	pop	{r7, pc}
 800e3b2:	bf00      	nop
 800e3b4:	200047c4 	.word	0x200047c4
 800e3b8:	0800febc 	.word	0x0800febc

0800e3bc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e3bc:	b580      	push	{r7, lr}
 800e3be:	b084      	sub	sp, #16
 800e3c0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e3c2:	4b0f      	ldr	r3, [pc, #60]	@ (800e400 <Get_SerialNum+0x44>)
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e3c8:	4b0e      	ldr	r3, [pc, #56]	@ (800e404 <Get_SerialNum+0x48>)
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e3ce:	4b0e      	ldr	r3, [pc, #56]	@ (800e408 <Get_SerialNum+0x4c>)
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e3d4:	68fa      	ldr	r2, [r7, #12]
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	4413      	add	r3, r2
 800e3da:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d009      	beq.n	800e3f6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e3e2:	2208      	movs	r2, #8
 800e3e4:	4909      	ldr	r1, [pc, #36]	@ (800e40c <Get_SerialNum+0x50>)
 800e3e6:	68f8      	ldr	r0, [r7, #12]
 800e3e8:	f000 f814 	bl	800e414 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e3ec:	2204      	movs	r2, #4
 800e3ee:	4908      	ldr	r1, [pc, #32]	@ (800e410 <Get_SerialNum+0x54>)
 800e3f0:	68b8      	ldr	r0, [r7, #8]
 800e3f2:	f000 f80f 	bl	800e414 <IntToUnicode>
  }
}
 800e3f6:	bf00      	nop
 800e3f8:	3710      	adds	r7, #16
 800e3fa:	46bd      	mov	sp, r7
 800e3fc:	bd80      	pop	{r7, pc}
 800e3fe:	bf00      	nop
 800e400:	1fff7590 	.word	0x1fff7590
 800e404:	1fff7594 	.word	0x1fff7594
 800e408:	1fff7598 	.word	0x1fff7598
 800e40c:	2000016a 	.word	0x2000016a
 800e410:	2000017a 	.word	0x2000017a

0800e414 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e414:	b480      	push	{r7}
 800e416:	b087      	sub	sp, #28
 800e418:	af00      	add	r7, sp, #0
 800e41a:	60f8      	str	r0, [r7, #12]
 800e41c:	60b9      	str	r1, [r7, #8]
 800e41e:	4613      	mov	r3, r2
 800e420:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e422:	2300      	movs	r3, #0
 800e424:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e426:	2300      	movs	r3, #0
 800e428:	75fb      	strb	r3, [r7, #23]
 800e42a:	e027      	b.n	800e47c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	0f1b      	lsrs	r3, r3, #28
 800e430:	2b09      	cmp	r3, #9
 800e432:	d80b      	bhi.n	800e44c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	0f1b      	lsrs	r3, r3, #28
 800e438:	b2da      	uxtb	r2, r3
 800e43a:	7dfb      	ldrb	r3, [r7, #23]
 800e43c:	005b      	lsls	r3, r3, #1
 800e43e:	4619      	mov	r1, r3
 800e440:	68bb      	ldr	r3, [r7, #8]
 800e442:	440b      	add	r3, r1
 800e444:	3230      	adds	r2, #48	@ 0x30
 800e446:	b2d2      	uxtb	r2, r2
 800e448:	701a      	strb	r2, [r3, #0]
 800e44a:	e00a      	b.n	800e462 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	0f1b      	lsrs	r3, r3, #28
 800e450:	b2da      	uxtb	r2, r3
 800e452:	7dfb      	ldrb	r3, [r7, #23]
 800e454:	005b      	lsls	r3, r3, #1
 800e456:	4619      	mov	r1, r3
 800e458:	68bb      	ldr	r3, [r7, #8]
 800e45a:	440b      	add	r3, r1
 800e45c:	3237      	adds	r2, #55	@ 0x37
 800e45e:	b2d2      	uxtb	r2, r2
 800e460:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	011b      	lsls	r3, r3, #4
 800e466:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e468:	7dfb      	ldrb	r3, [r7, #23]
 800e46a:	005b      	lsls	r3, r3, #1
 800e46c:	3301      	adds	r3, #1
 800e46e:	68ba      	ldr	r2, [r7, #8]
 800e470:	4413      	add	r3, r2
 800e472:	2200      	movs	r2, #0
 800e474:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e476:	7dfb      	ldrb	r3, [r7, #23]
 800e478:	3301      	adds	r3, #1
 800e47a:	75fb      	strb	r3, [r7, #23]
 800e47c:	7dfa      	ldrb	r2, [r7, #23]
 800e47e:	79fb      	ldrb	r3, [r7, #7]
 800e480:	429a      	cmp	r2, r3
 800e482:	d3d3      	bcc.n	800e42c <IntToUnicode+0x18>
  }
}
 800e484:	bf00      	nop
 800e486:	bf00      	nop
 800e488:	371c      	adds	r7, #28
 800e48a:	46bd      	mov	sp, r7
 800e48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e490:	4770      	bx	lr
	...

0800e494 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e494:	b580      	push	{r7, lr}
 800e496:	b098      	sub	sp, #96	@ 0x60
 800e498:	af00      	add	r7, sp, #0
 800e49a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800e49c:	f107 030c 	add.w	r3, r7, #12
 800e4a0:	2254      	movs	r2, #84	@ 0x54
 800e4a2:	2100      	movs	r1, #0
 800e4a4:	4618      	mov	r0, r3
 800e4a6:	f000 fb19 	bl	800eadc <memset>
  if(pcdHandle->Instance==USB)
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	4a15      	ldr	r2, [pc, #84]	@ (800e504 <HAL_PCD_MspInit+0x70>)
 800e4b0:	4293      	cmp	r3, r2
 800e4b2:	d122      	bne.n	800e4fa <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800e4b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800e4b8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800e4ba:	2300      	movs	r3, #0
 800e4bc:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800e4be:	f107 030c 	add.w	r3, r7, #12
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	f7f8 fd90 	bl	8006fe8 <HAL_RCCEx_PeriphCLKConfig>
 800e4c8:	4603      	mov	r3, r0
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d001      	beq.n	800e4d2 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800e4ce:	f7f2 fdf5 	bl	80010bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800e4d2:	4b0d      	ldr	r3, [pc, #52]	@ (800e508 <HAL_PCD_MspInit+0x74>)
 800e4d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e4d6:	4a0c      	ldr	r2, [pc, #48]	@ (800e508 <HAL_PCD_MspInit+0x74>)
 800e4d8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800e4dc:	6593      	str	r3, [r2, #88]	@ 0x58
 800e4de:	4b0a      	ldr	r3, [pc, #40]	@ (800e508 <HAL_PCD_MspInit+0x74>)
 800e4e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e4e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e4e6:	60bb      	str	r3, [r7, #8]
 800e4e8:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800e4ea:	2200      	movs	r2, #0
 800e4ec:	2100      	movs	r1, #0
 800e4ee:	2014      	movs	r0, #20
 800e4f0:	f7f5 fd37 	bl	8003f62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800e4f4:	2014      	movs	r0, #20
 800e4f6:	f7f5 fd4e 	bl	8003f96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800e4fa:	bf00      	nop
 800e4fc:	3760      	adds	r7, #96	@ 0x60
 800e4fe:	46bd      	mov	sp, r7
 800e500:	bd80      	pop	{r7, pc}
 800e502:	bf00      	nop
 800e504:	40005c00 	.word	0x40005c00
 800e508:	40021000 	.word	0x40021000

0800e50c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e50c:	b580      	push	{r7, lr}
 800e50e:	b082      	sub	sp, #8
 800e510:	af00      	add	r7, sp, #0
 800e512:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800e520:	4619      	mov	r1, r3
 800e522:	4610      	mov	r0, r2
 800e524:	f7fe fd32 	bl	800cf8c <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800e528:	bf00      	nop
 800e52a:	3708      	adds	r7, #8
 800e52c:	46bd      	mov	sp, r7
 800e52e:	bd80      	pop	{r7, pc}

0800e530 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e530:	b580      	push	{r7, lr}
 800e532:	b082      	sub	sp, #8
 800e534:	af00      	add	r7, sp, #0
 800e536:	6078      	str	r0, [r7, #4]
 800e538:	460b      	mov	r3, r1
 800e53a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800e542:	78fa      	ldrb	r2, [r7, #3]
 800e544:	6879      	ldr	r1, [r7, #4]
 800e546:	4613      	mov	r3, r2
 800e548:	009b      	lsls	r3, r3, #2
 800e54a:	4413      	add	r3, r2
 800e54c:	00db      	lsls	r3, r3, #3
 800e54e:	440b      	add	r3, r1
 800e550:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e554:	681a      	ldr	r2, [r3, #0]
 800e556:	78fb      	ldrb	r3, [r7, #3]
 800e558:	4619      	mov	r1, r3
 800e55a:	f7fe fd6c 	bl	800d036 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800e55e:	bf00      	nop
 800e560:	3708      	adds	r7, #8
 800e562:	46bd      	mov	sp, r7
 800e564:	bd80      	pop	{r7, pc}

0800e566 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e566:	b580      	push	{r7, lr}
 800e568:	b082      	sub	sp, #8
 800e56a:	af00      	add	r7, sp, #0
 800e56c:	6078      	str	r0, [r7, #4]
 800e56e:	460b      	mov	r3, r1
 800e570:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800e578:	78fa      	ldrb	r2, [r7, #3]
 800e57a:	6879      	ldr	r1, [r7, #4]
 800e57c:	4613      	mov	r3, r2
 800e57e:	009b      	lsls	r3, r3, #2
 800e580:	4413      	add	r3, r2
 800e582:	00db      	lsls	r3, r3, #3
 800e584:	440b      	add	r3, r1
 800e586:	3324      	adds	r3, #36	@ 0x24
 800e588:	681a      	ldr	r2, [r3, #0]
 800e58a:	78fb      	ldrb	r3, [r7, #3]
 800e58c:	4619      	mov	r1, r3
 800e58e:	f7fe fdb5 	bl	800d0fc <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800e592:	bf00      	nop
 800e594:	3708      	adds	r7, #8
 800e596:	46bd      	mov	sp, r7
 800e598:	bd80      	pop	{r7, pc}

0800e59a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e59a:	b580      	push	{r7, lr}
 800e59c:	b082      	sub	sp, #8
 800e59e:	af00      	add	r7, sp, #0
 800e5a0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e5a8:	4618      	mov	r0, r3
 800e5aa:	f7fe fec9 	bl	800d340 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800e5ae:	bf00      	nop
 800e5b0:	3708      	adds	r7, #8
 800e5b2:	46bd      	mov	sp, r7
 800e5b4:	bd80      	pop	{r7, pc}

0800e5b6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e5b6:	b580      	push	{r7, lr}
 800e5b8:	b084      	sub	sp, #16
 800e5ba:	af00      	add	r7, sp, #0
 800e5bc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e5be:	2301      	movs	r3, #1
 800e5c0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	795b      	ldrb	r3, [r3, #5]
 800e5c6:	2b02      	cmp	r3, #2
 800e5c8:	d001      	beq.n	800e5ce <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e5ca:	f7f2 fd77 	bl	80010bc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e5d4:	7bfa      	ldrb	r2, [r7, #15]
 800e5d6:	4611      	mov	r1, r2
 800e5d8:	4618      	mov	r0, r3
 800e5da:	f7fe fe73 	bl	800d2c4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	f7fe fe1f 	bl	800d228 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800e5ea:	bf00      	nop
 800e5ec:	3710      	adds	r7, #16
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	bd80      	pop	{r7, pc}
	...

0800e5f4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	b082      	sub	sp, #8
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e602:	4618      	mov	r0, r3
 800e604:	f7fe fe6e 	bl	800d2e4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	7a5b      	ldrb	r3, [r3, #9]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d005      	beq.n	800e61c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e610:	4b04      	ldr	r3, [pc, #16]	@ (800e624 <HAL_PCD_SuspendCallback+0x30>)
 800e612:	691b      	ldr	r3, [r3, #16]
 800e614:	4a03      	ldr	r2, [pc, #12]	@ (800e624 <HAL_PCD_SuspendCallback+0x30>)
 800e616:	f043 0306 	orr.w	r3, r3, #6
 800e61a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800e61c:	bf00      	nop
 800e61e:	3708      	adds	r7, #8
 800e620:	46bd      	mov	sp, r7
 800e622:	bd80      	pop	{r7, pc}
 800e624:	e000ed00 	.word	0xe000ed00

0800e628 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e628:	b580      	push	{r7, lr}
 800e62a:	b082      	sub	sp, #8
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	7a5b      	ldrb	r3, [r3, #9]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d007      	beq.n	800e648 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e638:	4b08      	ldr	r3, [pc, #32]	@ (800e65c <HAL_PCD_ResumeCallback+0x34>)
 800e63a:	691b      	ldr	r3, [r3, #16]
 800e63c:	4a07      	ldr	r2, [pc, #28]	@ (800e65c <HAL_PCD_ResumeCallback+0x34>)
 800e63e:	f023 0306 	bic.w	r3, r3, #6
 800e642:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800e644:	f000 f9f8 	bl	800ea38 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e64e:	4618      	mov	r0, r3
 800e650:	f7fe fe5e 	bl	800d310 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800e654:	bf00      	nop
 800e656:	3708      	adds	r7, #8
 800e658:	46bd      	mov	sp, r7
 800e65a:	bd80      	pop	{r7, pc}
 800e65c:	e000ed00 	.word	0xe000ed00

0800e660 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e660:	b580      	push	{r7, lr}
 800e662:	b082      	sub	sp, #8
 800e664:	af00      	add	r7, sp, #0
 800e666:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800e668:	4a2b      	ldr	r2, [pc, #172]	@ (800e718 <USBD_LL_Init+0xb8>)
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	4a29      	ldr	r2, [pc, #164]	@ (800e718 <USBD_LL_Init+0xb8>)
 800e674:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800e678:	4b27      	ldr	r3, [pc, #156]	@ (800e718 <USBD_LL_Init+0xb8>)
 800e67a:	4a28      	ldr	r2, [pc, #160]	@ (800e71c <USBD_LL_Init+0xbc>)
 800e67c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800e67e:	4b26      	ldr	r3, [pc, #152]	@ (800e718 <USBD_LL_Init+0xb8>)
 800e680:	2208      	movs	r2, #8
 800e682:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800e684:	4b24      	ldr	r3, [pc, #144]	@ (800e718 <USBD_LL_Init+0xb8>)
 800e686:	2202      	movs	r2, #2
 800e688:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e68a:	4b23      	ldr	r3, [pc, #140]	@ (800e718 <USBD_LL_Init+0xb8>)
 800e68c:	2202      	movs	r2, #2
 800e68e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800e690:	4b21      	ldr	r3, [pc, #132]	@ (800e718 <USBD_LL_Init+0xb8>)
 800e692:	2200      	movs	r2, #0
 800e694:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800e696:	4b20      	ldr	r3, [pc, #128]	@ (800e718 <USBD_LL_Init+0xb8>)
 800e698:	2200      	movs	r2, #0
 800e69a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800e69c:	4b1e      	ldr	r3, [pc, #120]	@ (800e718 <USBD_LL_Init+0xb8>)
 800e69e:	2200      	movs	r2, #0
 800e6a0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800e6a2:	4b1d      	ldr	r3, [pc, #116]	@ (800e718 <USBD_LL_Init+0xb8>)
 800e6a4:	2200      	movs	r2, #0
 800e6a6:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800e6a8:	481b      	ldr	r0, [pc, #108]	@ (800e718 <USBD_LL_Init+0xb8>)
 800e6aa:	f7f6 f9c0 	bl	8004a2e <HAL_PCD_Init>
 800e6ae:	4603      	mov	r3, r0
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d001      	beq.n	800e6b8 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800e6b4:	f7f2 fd02 	bl	80010bc <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800e6be:	2318      	movs	r3, #24
 800e6c0:	2200      	movs	r2, #0
 800e6c2:	2100      	movs	r1, #0
 800e6c4:	f7f7 fe79 	bl	80063ba <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800e6ce:	2358      	movs	r3, #88	@ 0x58
 800e6d0:	2200      	movs	r2, #0
 800e6d2:	2180      	movs	r1, #128	@ 0x80
 800e6d4:	f7f7 fe71 	bl	80063ba <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800e6de:	23c0      	movs	r3, #192	@ 0xc0
 800e6e0:	2200      	movs	r2, #0
 800e6e2:	2181      	movs	r1, #129	@ 0x81
 800e6e4:	f7f7 fe69 	bl	80063ba <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800e6ee:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800e6f2:	2200      	movs	r2, #0
 800e6f4:	2101      	movs	r1, #1
 800e6f6:	f7f7 fe60 	bl	80063ba <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800e700:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e704:	2200      	movs	r2, #0
 800e706:	2182      	movs	r1, #130	@ 0x82
 800e708:	f7f7 fe57 	bl	80063ba <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800e70c:	2300      	movs	r3, #0
}
 800e70e:	4618      	mov	r0, r3
 800e710:	3708      	adds	r7, #8
 800e712:	46bd      	mov	sp, r7
 800e714:	bd80      	pop	{r7, pc}
 800e716:	bf00      	nop
 800e718:	200049c4 	.word	0x200049c4
 800e71c:	40005c00 	.word	0x40005c00

0800e720 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e720:	b580      	push	{r7, lr}
 800e722:	b084      	sub	sp, #16
 800e724:	af00      	add	r7, sp, #0
 800e726:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e728:	2300      	movs	r3, #0
 800e72a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e72c:	2300      	movs	r3, #0
 800e72e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e736:	4618      	mov	r0, r3
 800e738:	f7f6 fa47 	bl	8004bca <HAL_PCD_Start>
 800e73c:	4603      	mov	r3, r0
 800e73e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e740:	7bfb      	ldrb	r3, [r7, #15]
 800e742:	4618      	mov	r0, r3
 800e744:	f000 f97e 	bl	800ea44 <USBD_Get_USB_Status>
 800e748:	4603      	mov	r3, r0
 800e74a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e74c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e74e:	4618      	mov	r0, r3
 800e750:	3710      	adds	r7, #16
 800e752:	46bd      	mov	sp, r7
 800e754:	bd80      	pop	{r7, pc}

0800e756 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e756:	b580      	push	{r7, lr}
 800e758:	b084      	sub	sp, #16
 800e75a:	af00      	add	r7, sp, #0
 800e75c:	6078      	str	r0, [r7, #4]
 800e75e:	4608      	mov	r0, r1
 800e760:	4611      	mov	r1, r2
 800e762:	461a      	mov	r2, r3
 800e764:	4603      	mov	r3, r0
 800e766:	70fb      	strb	r3, [r7, #3]
 800e768:	460b      	mov	r3, r1
 800e76a:	70bb      	strb	r3, [r7, #2]
 800e76c:	4613      	mov	r3, r2
 800e76e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e770:	2300      	movs	r3, #0
 800e772:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e774:	2300      	movs	r3, #0
 800e776:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800e77e:	78bb      	ldrb	r3, [r7, #2]
 800e780:	883a      	ldrh	r2, [r7, #0]
 800e782:	78f9      	ldrb	r1, [r7, #3]
 800e784:	f7f6 fb8e 	bl	8004ea4 <HAL_PCD_EP_Open>
 800e788:	4603      	mov	r3, r0
 800e78a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e78c:	7bfb      	ldrb	r3, [r7, #15]
 800e78e:	4618      	mov	r0, r3
 800e790:	f000 f958 	bl	800ea44 <USBD_Get_USB_Status>
 800e794:	4603      	mov	r3, r0
 800e796:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e798:	7bbb      	ldrb	r3, [r7, #14]
}
 800e79a:	4618      	mov	r0, r3
 800e79c:	3710      	adds	r7, #16
 800e79e:	46bd      	mov	sp, r7
 800e7a0:	bd80      	pop	{r7, pc}

0800e7a2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e7a2:	b580      	push	{r7, lr}
 800e7a4:	b084      	sub	sp, #16
 800e7a6:	af00      	add	r7, sp, #0
 800e7a8:	6078      	str	r0, [r7, #4]
 800e7aa:	460b      	mov	r3, r1
 800e7ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e7b2:	2300      	movs	r3, #0
 800e7b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e7bc:	78fa      	ldrb	r2, [r7, #3]
 800e7be:	4611      	mov	r1, r2
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	f7f6 fbcc 	bl	8004f5e <HAL_PCD_EP_Close>
 800e7c6:	4603      	mov	r3, r0
 800e7c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e7ca:	7bfb      	ldrb	r3, [r7, #15]
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	f000 f939 	bl	800ea44 <USBD_Get_USB_Status>
 800e7d2:	4603      	mov	r3, r0
 800e7d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e7d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800e7d8:	4618      	mov	r0, r3
 800e7da:	3710      	adds	r7, #16
 800e7dc:	46bd      	mov	sp, r7
 800e7de:	bd80      	pop	{r7, pc}

0800e7e0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	b084      	sub	sp, #16
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]
 800e7e8:	460b      	mov	r3, r1
 800e7ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e7ec:	2300      	movs	r3, #0
 800e7ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e7f0:	2300      	movs	r3, #0
 800e7f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e7fa:	78fa      	ldrb	r2, [r7, #3]
 800e7fc:	4611      	mov	r1, r2
 800e7fe:	4618      	mov	r0, r3
 800e800:	f7f6 fc75 	bl	80050ee <HAL_PCD_EP_SetStall>
 800e804:	4603      	mov	r3, r0
 800e806:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e808:	7bfb      	ldrb	r3, [r7, #15]
 800e80a:	4618      	mov	r0, r3
 800e80c:	f000 f91a 	bl	800ea44 <USBD_Get_USB_Status>
 800e810:	4603      	mov	r3, r0
 800e812:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e814:	7bbb      	ldrb	r3, [r7, #14]
}
 800e816:	4618      	mov	r0, r3
 800e818:	3710      	adds	r7, #16
 800e81a:	46bd      	mov	sp, r7
 800e81c:	bd80      	pop	{r7, pc}

0800e81e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e81e:	b580      	push	{r7, lr}
 800e820:	b084      	sub	sp, #16
 800e822:	af00      	add	r7, sp, #0
 800e824:	6078      	str	r0, [r7, #4]
 800e826:	460b      	mov	r3, r1
 800e828:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e82a:	2300      	movs	r3, #0
 800e82c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e82e:	2300      	movs	r3, #0
 800e830:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e838:	78fa      	ldrb	r2, [r7, #3]
 800e83a:	4611      	mov	r1, r2
 800e83c:	4618      	mov	r0, r3
 800e83e:	f7f6 fca8 	bl	8005192 <HAL_PCD_EP_ClrStall>
 800e842:	4603      	mov	r3, r0
 800e844:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e846:	7bfb      	ldrb	r3, [r7, #15]
 800e848:	4618      	mov	r0, r3
 800e84a:	f000 f8fb 	bl	800ea44 <USBD_Get_USB_Status>
 800e84e:	4603      	mov	r3, r0
 800e850:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e852:	7bbb      	ldrb	r3, [r7, #14]
}
 800e854:	4618      	mov	r0, r3
 800e856:	3710      	adds	r7, #16
 800e858:	46bd      	mov	sp, r7
 800e85a:	bd80      	pop	{r7, pc}

0800e85c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e85c:	b480      	push	{r7}
 800e85e:	b085      	sub	sp, #20
 800e860:	af00      	add	r7, sp, #0
 800e862:	6078      	str	r0, [r7, #4]
 800e864:	460b      	mov	r3, r1
 800e866:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e86e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e870:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e874:	2b00      	cmp	r3, #0
 800e876:	da0b      	bge.n	800e890 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e878:	78fb      	ldrb	r3, [r7, #3]
 800e87a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e87e:	68f9      	ldr	r1, [r7, #12]
 800e880:	4613      	mov	r3, r2
 800e882:	009b      	lsls	r3, r3, #2
 800e884:	4413      	add	r3, r2
 800e886:	00db      	lsls	r3, r3, #3
 800e888:	440b      	add	r3, r1
 800e88a:	3312      	adds	r3, #18
 800e88c:	781b      	ldrb	r3, [r3, #0]
 800e88e:	e00b      	b.n	800e8a8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e890:	78fb      	ldrb	r3, [r7, #3]
 800e892:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e896:	68f9      	ldr	r1, [r7, #12]
 800e898:	4613      	mov	r3, r2
 800e89a:	009b      	lsls	r3, r3, #2
 800e89c:	4413      	add	r3, r2
 800e89e:	00db      	lsls	r3, r3, #3
 800e8a0:	440b      	add	r3, r1
 800e8a2:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800e8a6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e8a8:	4618      	mov	r0, r3
 800e8aa:	3714      	adds	r7, #20
 800e8ac:	46bd      	mov	sp, r7
 800e8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b2:	4770      	bx	lr

0800e8b4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	b084      	sub	sp, #16
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	6078      	str	r0, [r7, #4]
 800e8bc:	460b      	mov	r3, r1
 800e8be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e8c0:	2300      	movs	r3, #0
 800e8c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e8c4:	2300      	movs	r3, #0
 800e8c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e8ce:	78fa      	ldrb	r2, [r7, #3]
 800e8d0:	4611      	mov	r1, r2
 800e8d2:	4618      	mov	r0, r3
 800e8d4:	f7f6 fac2 	bl	8004e5c <HAL_PCD_SetAddress>
 800e8d8:	4603      	mov	r3, r0
 800e8da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e8dc:	7bfb      	ldrb	r3, [r7, #15]
 800e8de:	4618      	mov	r0, r3
 800e8e0:	f000 f8b0 	bl	800ea44 <USBD_Get_USB_Status>
 800e8e4:	4603      	mov	r3, r0
 800e8e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e8e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	3710      	adds	r7, #16
 800e8ee:	46bd      	mov	sp, r7
 800e8f0:	bd80      	pop	{r7, pc}

0800e8f2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e8f2:	b580      	push	{r7, lr}
 800e8f4:	b086      	sub	sp, #24
 800e8f6:	af00      	add	r7, sp, #0
 800e8f8:	60f8      	str	r0, [r7, #12]
 800e8fa:	607a      	str	r2, [r7, #4]
 800e8fc:	603b      	str	r3, [r7, #0]
 800e8fe:	460b      	mov	r3, r1
 800e900:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e902:	2300      	movs	r3, #0
 800e904:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e906:	2300      	movs	r3, #0
 800e908:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800e910:	7af9      	ldrb	r1, [r7, #11]
 800e912:	683b      	ldr	r3, [r7, #0]
 800e914:	687a      	ldr	r2, [r7, #4]
 800e916:	f7f6 fbb3 	bl	8005080 <HAL_PCD_EP_Transmit>
 800e91a:	4603      	mov	r3, r0
 800e91c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e91e:	7dfb      	ldrb	r3, [r7, #23]
 800e920:	4618      	mov	r0, r3
 800e922:	f000 f88f 	bl	800ea44 <USBD_Get_USB_Status>
 800e926:	4603      	mov	r3, r0
 800e928:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e92a:	7dbb      	ldrb	r3, [r7, #22]
}
 800e92c:	4618      	mov	r0, r3
 800e92e:	3718      	adds	r7, #24
 800e930:	46bd      	mov	sp, r7
 800e932:	bd80      	pop	{r7, pc}

0800e934 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e934:	b580      	push	{r7, lr}
 800e936:	b086      	sub	sp, #24
 800e938:	af00      	add	r7, sp, #0
 800e93a:	60f8      	str	r0, [r7, #12]
 800e93c:	607a      	str	r2, [r7, #4]
 800e93e:	603b      	str	r3, [r7, #0]
 800e940:	460b      	mov	r3, r1
 800e942:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e944:	2300      	movs	r3, #0
 800e946:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e948:	2300      	movs	r3, #0
 800e94a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800e952:	7af9      	ldrb	r1, [r7, #11]
 800e954:	683b      	ldr	r3, [r7, #0]
 800e956:	687a      	ldr	r2, [r7, #4]
 800e958:	f7f6 fb49 	bl	8004fee <HAL_PCD_EP_Receive>
 800e95c:	4603      	mov	r3, r0
 800e95e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e960:	7dfb      	ldrb	r3, [r7, #23]
 800e962:	4618      	mov	r0, r3
 800e964:	f000 f86e 	bl	800ea44 <USBD_Get_USB_Status>
 800e968:	4603      	mov	r3, r0
 800e96a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e96c:	7dbb      	ldrb	r3, [r7, #22]
}
 800e96e:	4618      	mov	r0, r3
 800e970:	3718      	adds	r7, #24
 800e972:	46bd      	mov	sp, r7
 800e974:	bd80      	pop	{r7, pc}

0800e976 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e976:	b580      	push	{r7, lr}
 800e978:	b082      	sub	sp, #8
 800e97a:	af00      	add	r7, sp, #0
 800e97c:	6078      	str	r0, [r7, #4]
 800e97e:	460b      	mov	r3, r1
 800e980:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e988:	78fa      	ldrb	r2, [r7, #3]
 800e98a:	4611      	mov	r1, r2
 800e98c:	4618      	mov	r0, r3
 800e98e:	f7f6 fb5f 	bl	8005050 <HAL_PCD_EP_GetRxCount>
 800e992:	4603      	mov	r3, r0
}
 800e994:	4618      	mov	r0, r3
 800e996:	3708      	adds	r7, #8
 800e998:	46bd      	mov	sp, r7
 800e99a:	bd80      	pop	{r7, pc}

0800e99c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e99c:	b580      	push	{r7, lr}
 800e99e:	b082      	sub	sp, #8
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	6078      	str	r0, [r7, #4]
 800e9a4:	460b      	mov	r3, r1
 800e9a6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800e9a8:	78fb      	ldrb	r3, [r7, #3]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d002      	beq.n	800e9b4 <HAL_PCDEx_LPM_Callback+0x18>
 800e9ae:	2b01      	cmp	r3, #1
 800e9b0:	d013      	beq.n	800e9da <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800e9b2:	e023      	b.n	800e9fc <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	7a5b      	ldrb	r3, [r3, #9]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d007      	beq.n	800e9cc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800e9bc:	f000 f83c 	bl	800ea38 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e9c0:	4b10      	ldr	r3, [pc, #64]	@ (800ea04 <HAL_PCDEx_LPM_Callback+0x68>)
 800e9c2:	691b      	ldr	r3, [r3, #16]
 800e9c4:	4a0f      	ldr	r2, [pc, #60]	@ (800ea04 <HAL_PCDEx_LPM_Callback+0x68>)
 800e9c6:	f023 0306 	bic.w	r3, r3, #6
 800e9ca:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e9d2:	4618      	mov	r0, r3
 800e9d4:	f7fe fc9c 	bl	800d310 <USBD_LL_Resume>
    break;
 800e9d8:	e010      	b.n	800e9fc <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e9e0:	4618      	mov	r0, r3
 800e9e2:	f7fe fc7f 	bl	800d2e4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	7a5b      	ldrb	r3, [r3, #9]
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d005      	beq.n	800e9fa <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e9ee:	4b05      	ldr	r3, [pc, #20]	@ (800ea04 <HAL_PCDEx_LPM_Callback+0x68>)
 800e9f0:	691b      	ldr	r3, [r3, #16]
 800e9f2:	4a04      	ldr	r2, [pc, #16]	@ (800ea04 <HAL_PCDEx_LPM_Callback+0x68>)
 800e9f4:	f043 0306 	orr.w	r3, r3, #6
 800e9f8:	6113      	str	r3, [r2, #16]
    break;
 800e9fa:	bf00      	nop
}
 800e9fc:	bf00      	nop
 800e9fe:	3708      	adds	r7, #8
 800ea00:	46bd      	mov	sp, r7
 800ea02:	bd80      	pop	{r7, pc}
 800ea04:	e000ed00 	.word	0xe000ed00

0800ea08 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ea08:	b480      	push	{r7}
 800ea0a:	b083      	sub	sp, #12
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ea10:	4b03      	ldr	r3, [pc, #12]	@ (800ea20 <USBD_static_malloc+0x18>)
}
 800ea12:	4618      	mov	r0, r3
 800ea14:	370c      	adds	r7, #12
 800ea16:	46bd      	mov	sp, r7
 800ea18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1c:	4770      	bx	lr
 800ea1e:	bf00      	nop
 800ea20:	20004ca0 	.word	0x20004ca0

0800ea24 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ea24:	b480      	push	{r7}
 800ea26:	b083      	sub	sp, #12
 800ea28:	af00      	add	r7, sp, #0
 800ea2a:	6078      	str	r0, [r7, #4]

}
 800ea2c:	bf00      	nop
 800ea2e:	370c      	adds	r7, #12
 800ea30:	46bd      	mov	sp, r7
 800ea32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea36:	4770      	bx	lr

0800ea38 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800ea38:	b580      	push	{r7, lr}
 800ea3a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800ea3c:	f7f1 fd36 	bl	80004ac <SystemClock_Config>
}
 800ea40:	bf00      	nop
 800ea42:	bd80      	pop	{r7, pc}

0800ea44 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ea44:	b480      	push	{r7}
 800ea46:	b085      	sub	sp, #20
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	4603      	mov	r3, r0
 800ea4c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ea4e:	2300      	movs	r3, #0
 800ea50:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ea52:	79fb      	ldrb	r3, [r7, #7]
 800ea54:	2b03      	cmp	r3, #3
 800ea56:	d817      	bhi.n	800ea88 <USBD_Get_USB_Status+0x44>
 800ea58:	a201      	add	r2, pc, #4	@ (adr r2, 800ea60 <USBD_Get_USB_Status+0x1c>)
 800ea5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea5e:	bf00      	nop
 800ea60:	0800ea71 	.word	0x0800ea71
 800ea64:	0800ea77 	.word	0x0800ea77
 800ea68:	0800ea7d 	.word	0x0800ea7d
 800ea6c:	0800ea83 	.word	0x0800ea83
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ea70:	2300      	movs	r3, #0
 800ea72:	73fb      	strb	r3, [r7, #15]
    break;
 800ea74:	e00b      	b.n	800ea8e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ea76:	2303      	movs	r3, #3
 800ea78:	73fb      	strb	r3, [r7, #15]
    break;
 800ea7a:	e008      	b.n	800ea8e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ea7c:	2301      	movs	r3, #1
 800ea7e:	73fb      	strb	r3, [r7, #15]
    break;
 800ea80:	e005      	b.n	800ea8e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ea82:	2303      	movs	r3, #3
 800ea84:	73fb      	strb	r3, [r7, #15]
    break;
 800ea86:	e002      	b.n	800ea8e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ea88:	2303      	movs	r3, #3
 800ea8a:	73fb      	strb	r3, [r7, #15]
    break;
 800ea8c:	bf00      	nop
  }
  return usb_status;
 800ea8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea90:	4618      	mov	r0, r3
 800ea92:	3714      	adds	r7, #20
 800ea94:	46bd      	mov	sp, r7
 800ea96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea9a:	4770      	bx	lr

0800ea9c <siprintf>:
 800ea9c:	b40e      	push	{r1, r2, r3}
 800ea9e:	b500      	push	{lr}
 800eaa0:	b09c      	sub	sp, #112	@ 0x70
 800eaa2:	ab1d      	add	r3, sp, #116	@ 0x74
 800eaa4:	9002      	str	r0, [sp, #8]
 800eaa6:	9006      	str	r0, [sp, #24]
 800eaa8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800eaac:	4809      	ldr	r0, [pc, #36]	@ (800ead4 <siprintf+0x38>)
 800eaae:	9107      	str	r1, [sp, #28]
 800eab0:	9104      	str	r1, [sp, #16]
 800eab2:	4909      	ldr	r1, [pc, #36]	@ (800ead8 <siprintf+0x3c>)
 800eab4:	f853 2b04 	ldr.w	r2, [r3], #4
 800eab8:	9105      	str	r1, [sp, #20]
 800eaba:	6800      	ldr	r0, [r0, #0]
 800eabc:	9301      	str	r3, [sp, #4]
 800eabe:	a902      	add	r1, sp, #8
 800eac0:	f000 f994 	bl	800edec <_svfiprintf_r>
 800eac4:	9b02      	ldr	r3, [sp, #8]
 800eac6:	2200      	movs	r2, #0
 800eac8:	701a      	strb	r2, [r3, #0]
 800eaca:	b01c      	add	sp, #112	@ 0x70
 800eacc:	f85d eb04 	ldr.w	lr, [sp], #4
 800ead0:	b003      	add	sp, #12
 800ead2:	4770      	bx	lr
 800ead4:	20000184 	.word	0x20000184
 800ead8:	ffff0208 	.word	0xffff0208

0800eadc <memset>:
 800eadc:	4402      	add	r2, r0
 800eade:	4603      	mov	r3, r0
 800eae0:	4293      	cmp	r3, r2
 800eae2:	d100      	bne.n	800eae6 <memset+0xa>
 800eae4:	4770      	bx	lr
 800eae6:	f803 1b01 	strb.w	r1, [r3], #1
 800eaea:	e7f9      	b.n	800eae0 <memset+0x4>

0800eaec <__errno>:
 800eaec:	4b01      	ldr	r3, [pc, #4]	@ (800eaf4 <__errno+0x8>)
 800eaee:	6818      	ldr	r0, [r3, #0]
 800eaf0:	4770      	bx	lr
 800eaf2:	bf00      	nop
 800eaf4:	20000184 	.word	0x20000184

0800eaf8 <__libc_init_array>:
 800eaf8:	b570      	push	{r4, r5, r6, lr}
 800eafa:	4d0d      	ldr	r5, [pc, #52]	@ (800eb30 <__libc_init_array+0x38>)
 800eafc:	4c0d      	ldr	r4, [pc, #52]	@ (800eb34 <__libc_init_array+0x3c>)
 800eafe:	1b64      	subs	r4, r4, r5
 800eb00:	10a4      	asrs	r4, r4, #2
 800eb02:	2600      	movs	r6, #0
 800eb04:	42a6      	cmp	r6, r4
 800eb06:	d109      	bne.n	800eb1c <__libc_init_array+0x24>
 800eb08:	4d0b      	ldr	r5, [pc, #44]	@ (800eb38 <__libc_init_array+0x40>)
 800eb0a:	4c0c      	ldr	r4, [pc, #48]	@ (800eb3c <__libc_init_array+0x44>)
 800eb0c:	f001 f9a0 	bl	800fe50 <_init>
 800eb10:	1b64      	subs	r4, r4, r5
 800eb12:	10a4      	asrs	r4, r4, #2
 800eb14:	2600      	movs	r6, #0
 800eb16:	42a6      	cmp	r6, r4
 800eb18:	d105      	bne.n	800eb26 <__libc_init_array+0x2e>
 800eb1a:	bd70      	pop	{r4, r5, r6, pc}
 800eb1c:	f855 3b04 	ldr.w	r3, [r5], #4
 800eb20:	4798      	blx	r3
 800eb22:	3601      	adds	r6, #1
 800eb24:	e7ee      	b.n	800eb04 <__libc_init_array+0xc>
 800eb26:	f855 3b04 	ldr.w	r3, [r5], #4
 800eb2a:	4798      	blx	r3
 800eb2c:	3601      	adds	r6, #1
 800eb2e:	e7f2      	b.n	800eb16 <__libc_init_array+0x1e>
 800eb30:	080102e8 	.word	0x080102e8
 800eb34:	080102e8 	.word	0x080102e8
 800eb38:	080102e8 	.word	0x080102e8
 800eb3c:	080102ec 	.word	0x080102ec

0800eb40 <__retarget_lock_acquire_recursive>:
 800eb40:	4770      	bx	lr

0800eb42 <__retarget_lock_release_recursive>:
 800eb42:	4770      	bx	lr

0800eb44 <_free_r>:
 800eb44:	b538      	push	{r3, r4, r5, lr}
 800eb46:	4605      	mov	r5, r0
 800eb48:	2900      	cmp	r1, #0
 800eb4a:	d041      	beq.n	800ebd0 <_free_r+0x8c>
 800eb4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eb50:	1f0c      	subs	r4, r1, #4
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	bfb8      	it	lt
 800eb56:	18e4      	addlt	r4, r4, r3
 800eb58:	f000 f8e0 	bl	800ed1c <__malloc_lock>
 800eb5c:	4a1d      	ldr	r2, [pc, #116]	@ (800ebd4 <_free_r+0x90>)
 800eb5e:	6813      	ldr	r3, [r2, #0]
 800eb60:	b933      	cbnz	r3, 800eb70 <_free_r+0x2c>
 800eb62:	6063      	str	r3, [r4, #4]
 800eb64:	6014      	str	r4, [r2, #0]
 800eb66:	4628      	mov	r0, r5
 800eb68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eb6c:	f000 b8dc 	b.w	800ed28 <__malloc_unlock>
 800eb70:	42a3      	cmp	r3, r4
 800eb72:	d908      	bls.n	800eb86 <_free_r+0x42>
 800eb74:	6820      	ldr	r0, [r4, #0]
 800eb76:	1821      	adds	r1, r4, r0
 800eb78:	428b      	cmp	r3, r1
 800eb7a:	bf01      	itttt	eq
 800eb7c:	6819      	ldreq	r1, [r3, #0]
 800eb7e:	685b      	ldreq	r3, [r3, #4]
 800eb80:	1809      	addeq	r1, r1, r0
 800eb82:	6021      	streq	r1, [r4, #0]
 800eb84:	e7ed      	b.n	800eb62 <_free_r+0x1e>
 800eb86:	461a      	mov	r2, r3
 800eb88:	685b      	ldr	r3, [r3, #4]
 800eb8a:	b10b      	cbz	r3, 800eb90 <_free_r+0x4c>
 800eb8c:	42a3      	cmp	r3, r4
 800eb8e:	d9fa      	bls.n	800eb86 <_free_r+0x42>
 800eb90:	6811      	ldr	r1, [r2, #0]
 800eb92:	1850      	adds	r0, r2, r1
 800eb94:	42a0      	cmp	r0, r4
 800eb96:	d10b      	bne.n	800ebb0 <_free_r+0x6c>
 800eb98:	6820      	ldr	r0, [r4, #0]
 800eb9a:	4401      	add	r1, r0
 800eb9c:	1850      	adds	r0, r2, r1
 800eb9e:	4283      	cmp	r3, r0
 800eba0:	6011      	str	r1, [r2, #0]
 800eba2:	d1e0      	bne.n	800eb66 <_free_r+0x22>
 800eba4:	6818      	ldr	r0, [r3, #0]
 800eba6:	685b      	ldr	r3, [r3, #4]
 800eba8:	6053      	str	r3, [r2, #4]
 800ebaa:	4408      	add	r0, r1
 800ebac:	6010      	str	r0, [r2, #0]
 800ebae:	e7da      	b.n	800eb66 <_free_r+0x22>
 800ebb0:	d902      	bls.n	800ebb8 <_free_r+0x74>
 800ebb2:	230c      	movs	r3, #12
 800ebb4:	602b      	str	r3, [r5, #0]
 800ebb6:	e7d6      	b.n	800eb66 <_free_r+0x22>
 800ebb8:	6820      	ldr	r0, [r4, #0]
 800ebba:	1821      	adds	r1, r4, r0
 800ebbc:	428b      	cmp	r3, r1
 800ebbe:	bf04      	itt	eq
 800ebc0:	6819      	ldreq	r1, [r3, #0]
 800ebc2:	685b      	ldreq	r3, [r3, #4]
 800ebc4:	6063      	str	r3, [r4, #4]
 800ebc6:	bf04      	itt	eq
 800ebc8:	1809      	addeq	r1, r1, r0
 800ebca:	6021      	streq	r1, [r4, #0]
 800ebcc:	6054      	str	r4, [r2, #4]
 800ebce:	e7ca      	b.n	800eb66 <_free_r+0x22>
 800ebd0:	bd38      	pop	{r3, r4, r5, pc}
 800ebd2:	bf00      	nop
 800ebd4:	20005004 	.word	0x20005004

0800ebd8 <sbrk_aligned>:
 800ebd8:	b570      	push	{r4, r5, r6, lr}
 800ebda:	4e0f      	ldr	r6, [pc, #60]	@ (800ec18 <sbrk_aligned+0x40>)
 800ebdc:	460c      	mov	r4, r1
 800ebde:	6831      	ldr	r1, [r6, #0]
 800ebe0:	4605      	mov	r5, r0
 800ebe2:	b911      	cbnz	r1, 800ebea <sbrk_aligned+0x12>
 800ebe4:	f000 fba6 	bl	800f334 <_sbrk_r>
 800ebe8:	6030      	str	r0, [r6, #0]
 800ebea:	4621      	mov	r1, r4
 800ebec:	4628      	mov	r0, r5
 800ebee:	f000 fba1 	bl	800f334 <_sbrk_r>
 800ebf2:	1c43      	adds	r3, r0, #1
 800ebf4:	d103      	bne.n	800ebfe <sbrk_aligned+0x26>
 800ebf6:	f04f 34ff 	mov.w	r4, #4294967295
 800ebfa:	4620      	mov	r0, r4
 800ebfc:	bd70      	pop	{r4, r5, r6, pc}
 800ebfe:	1cc4      	adds	r4, r0, #3
 800ec00:	f024 0403 	bic.w	r4, r4, #3
 800ec04:	42a0      	cmp	r0, r4
 800ec06:	d0f8      	beq.n	800ebfa <sbrk_aligned+0x22>
 800ec08:	1a21      	subs	r1, r4, r0
 800ec0a:	4628      	mov	r0, r5
 800ec0c:	f000 fb92 	bl	800f334 <_sbrk_r>
 800ec10:	3001      	adds	r0, #1
 800ec12:	d1f2      	bne.n	800ebfa <sbrk_aligned+0x22>
 800ec14:	e7ef      	b.n	800ebf6 <sbrk_aligned+0x1e>
 800ec16:	bf00      	nop
 800ec18:	20005000 	.word	0x20005000

0800ec1c <_malloc_r>:
 800ec1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec20:	1ccd      	adds	r5, r1, #3
 800ec22:	f025 0503 	bic.w	r5, r5, #3
 800ec26:	3508      	adds	r5, #8
 800ec28:	2d0c      	cmp	r5, #12
 800ec2a:	bf38      	it	cc
 800ec2c:	250c      	movcc	r5, #12
 800ec2e:	2d00      	cmp	r5, #0
 800ec30:	4606      	mov	r6, r0
 800ec32:	db01      	blt.n	800ec38 <_malloc_r+0x1c>
 800ec34:	42a9      	cmp	r1, r5
 800ec36:	d904      	bls.n	800ec42 <_malloc_r+0x26>
 800ec38:	230c      	movs	r3, #12
 800ec3a:	6033      	str	r3, [r6, #0]
 800ec3c:	2000      	movs	r0, #0
 800ec3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec42:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ed18 <_malloc_r+0xfc>
 800ec46:	f000 f869 	bl	800ed1c <__malloc_lock>
 800ec4a:	f8d8 3000 	ldr.w	r3, [r8]
 800ec4e:	461c      	mov	r4, r3
 800ec50:	bb44      	cbnz	r4, 800eca4 <_malloc_r+0x88>
 800ec52:	4629      	mov	r1, r5
 800ec54:	4630      	mov	r0, r6
 800ec56:	f7ff ffbf 	bl	800ebd8 <sbrk_aligned>
 800ec5a:	1c43      	adds	r3, r0, #1
 800ec5c:	4604      	mov	r4, r0
 800ec5e:	d158      	bne.n	800ed12 <_malloc_r+0xf6>
 800ec60:	f8d8 4000 	ldr.w	r4, [r8]
 800ec64:	4627      	mov	r7, r4
 800ec66:	2f00      	cmp	r7, #0
 800ec68:	d143      	bne.n	800ecf2 <_malloc_r+0xd6>
 800ec6a:	2c00      	cmp	r4, #0
 800ec6c:	d04b      	beq.n	800ed06 <_malloc_r+0xea>
 800ec6e:	6823      	ldr	r3, [r4, #0]
 800ec70:	4639      	mov	r1, r7
 800ec72:	4630      	mov	r0, r6
 800ec74:	eb04 0903 	add.w	r9, r4, r3
 800ec78:	f000 fb5c 	bl	800f334 <_sbrk_r>
 800ec7c:	4581      	cmp	r9, r0
 800ec7e:	d142      	bne.n	800ed06 <_malloc_r+0xea>
 800ec80:	6821      	ldr	r1, [r4, #0]
 800ec82:	1a6d      	subs	r5, r5, r1
 800ec84:	4629      	mov	r1, r5
 800ec86:	4630      	mov	r0, r6
 800ec88:	f7ff ffa6 	bl	800ebd8 <sbrk_aligned>
 800ec8c:	3001      	adds	r0, #1
 800ec8e:	d03a      	beq.n	800ed06 <_malloc_r+0xea>
 800ec90:	6823      	ldr	r3, [r4, #0]
 800ec92:	442b      	add	r3, r5
 800ec94:	6023      	str	r3, [r4, #0]
 800ec96:	f8d8 3000 	ldr.w	r3, [r8]
 800ec9a:	685a      	ldr	r2, [r3, #4]
 800ec9c:	bb62      	cbnz	r2, 800ecf8 <_malloc_r+0xdc>
 800ec9e:	f8c8 7000 	str.w	r7, [r8]
 800eca2:	e00f      	b.n	800ecc4 <_malloc_r+0xa8>
 800eca4:	6822      	ldr	r2, [r4, #0]
 800eca6:	1b52      	subs	r2, r2, r5
 800eca8:	d420      	bmi.n	800ecec <_malloc_r+0xd0>
 800ecaa:	2a0b      	cmp	r2, #11
 800ecac:	d917      	bls.n	800ecde <_malloc_r+0xc2>
 800ecae:	1961      	adds	r1, r4, r5
 800ecb0:	42a3      	cmp	r3, r4
 800ecb2:	6025      	str	r5, [r4, #0]
 800ecb4:	bf18      	it	ne
 800ecb6:	6059      	strne	r1, [r3, #4]
 800ecb8:	6863      	ldr	r3, [r4, #4]
 800ecba:	bf08      	it	eq
 800ecbc:	f8c8 1000 	streq.w	r1, [r8]
 800ecc0:	5162      	str	r2, [r4, r5]
 800ecc2:	604b      	str	r3, [r1, #4]
 800ecc4:	4630      	mov	r0, r6
 800ecc6:	f000 f82f 	bl	800ed28 <__malloc_unlock>
 800ecca:	f104 000b 	add.w	r0, r4, #11
 800ecce:	1d23      	adds	r3, r4, #4
 800ecd0:	f020 0007 	bic.w	r0, r0, #7
 800ecd4:	1ac2      	subs	r2, r0, r3
 800ecd6:	bf1c      	itt	ne
 800ecd8:	1a1b      	subne	r3, r3, r0
 800ecda:	50a3      	strne	r3, [r4, r2]
 800ecdc:	e7af      	b.n	800ec3e <_malloc_r+0x22>
 800ecde:	6862      	ldr	r2, [r4, #4]
 800ece0:	42a3      	cmp	r3, r4
 800ece2:	bf0c      	ite	eq
 800ece4:	f8c8 2000 	streq.w	r2, [r8]
 800ece8:	605a      	strne	r2, [r3, #4]
 800ecea:	e7eb      	b.n	800ecc4 <_malloc_r+0xa8>
 800ecec:	4623      	mov	r3, r4
 800ecee:	6864      	ldr	r4, [r4, #4]
 800ecf0:	e7ae      	b.n	800ec50 <_malloc_r+0x34>
 800ecf2:	463c      	mov	r4, r7
 800ecf4:	687f      	ldr	r7, [r7, #4]
 800ecf6:	e7b6      	b.n	800ec66 <_malloc_r+0x4a>
 800ecf8:	461a      	mov	r2, r3
 800ecfa:	685b      	ldr	r3, [r3, #4]
 800ecfc:	42a3      	cmp	r3, r4
 800ecfe:	d1fb      	bne.n	800ecf8 <_malloc_r+0xdc>
 800ed00:	2300      	movs	r3, #0
 800ed02:	6053      	str	r3, [r2, #4]
 800ed04:	e7de      	b.n	800ecc4 <_malloc_r+0xa8>
 800ed06:	230c      	movs	r3, #12
 800ed08:	6033      	str	r3, [r6, #0]
 800ed0a:	4630      	mov	r0, r6
 800ed0c:	f000 f80c 	bl	800ed28 <__malloc_unlock>
 800ed10:	e794      	b.n	800ec3c <_malloc_r+0x20>
 800ed12:	6005      	str	r5, [r0, #0]
 800ed14:	e7d6      	b.n	800ecc4 <_malloc_r+0xa8>
 800ed16:	bf00      	nop
 800ed18:	20005004 	.word	0x20005004

0800ed1c <__malloc_lock>:
 800ed1c:	4801      	ldr	r0, [pc, #4]	@ (800ed24 <__malloc_lock+0x8>)
 800ed1e:	f7ff bf0f 	b.w	800eb40 <__retarget_lock_acquire_recursive>
 800ed22:	bf00      	nop
 800ed24:	20004ffc 	.word	0x20004ffc

0800ed28 <__malloc_unlock>:
 800ed28:	4801      	ldr	r0, [pc, #4]	@ (800ed30 <__malloc_unlock+0x8>)
 800ed2a:	f7ff bf0a 	b.w	800eb42 <__retarget_lock_release_recursive>
 800ed2e:	bf00      	nop
 800ed30:	20004ffc 	.word	0x20004ffc

0800ed34 <__ssputs_r>:
 800ed34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed38:	688e      	ldr	r6, [r1, #8]
 800ed3a:	461f      	mov	r7, r3
 800ed3c:	42be      	cmp	r6, r7
 800ed3e:	680b      	ldr	r3, [r1, #0]
 800ed40:	4682      	mov	sl, r0
 800ed42:	460c      	mov	r4, r1
 800ed44:	4690      	mov	r8, r2
 800ed46:	d82d      	bhi.n	800eda4 <__ssputs_r+0x70>
 800ed48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ed4c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ed50:	d026      	beq.n	800eda0 <__ssputs_r+0x6c>
 800ed52:	6965      	ldr	r5, [r4, #20]
 800ed54:	6909      	ldr	r1, [r1, #16]
 800ed56:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ed5a:	eba3 0901 	sub.w	r9, r3, r1
 800ed5e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ed62:	1c7b      	adds	r3, r7, #1
 800ed64:	444b      	add	r3, r9
 800ed66:	106d      	asrs	r5, r5, #1
 800ed68:	429d      	cmp	r5, r3
 800ed6a:	bf38      	it	cc
 800ed6c:	461d      	movcc	r5, r3
 800ed6e:	0553      	lsls	r3, r2, #21
 800ed70:	d527      	bpl.n	800edc2 <__ssputs_r+0x8e>
 800ed72:	4629      	mov	r1, r5
 800ed74:	f7ff ff52 	bl	800ec1c <_malloc_r>
 800ed78:	4606      	mov	r6, r0
 800ed7a:	b360      	cbz	r0, 800edd6 <__ssputs_r+0xa2>
 800ed7c:	6921      	ldr	r1, [r4, #16]
 800ed7e:	464a      	mov	r2, r9
 800ed80:	f000 fae8 	bl	800f354 <memcpy>
 800ed84:	89a3      	ldrh	r3, [r4, #12]
 800ed86:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ed8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ed8e:	81a3      	strh	r3, [r4, #12]
 800ed90:	6126      	str	r6, [r4, #16]
 800ed92:	6165      	str	r5, [r4, #20]
 800ed94:	444e      	add	r6, r9
 800ed96:	eba5 0509 	sub.w	r5, r5, r9
 800ed9a:	6026      	str	r6, [r4, #0]
 800ed9c:	60a5      	str	r5, [r4, #8]
 800ed9e:	463e      	mov	r6, r7
 800eda0:	42be      	cmp	r6, r7
 800eda2:	d900      	bls.n	800eda6 <__ssputs_r+0x72>
 800eda4:	463e      	mov	r6, r7
 800eda6:	6820      	ldr	r0, [r4, #0]
 800eda8:	4632      	mov	r2, r6
 800edaa:	4641      	mov	r1, r8
 800edac:	f000 faa8 	bl	800f300 <memmove>
 800edb0:	68a3      	ldr	r3, [r4, #8]
 800edb2:	1b9b      	subs	r3, r3, r6
 800edb4:	60a3      	str	r3, [r4, #8]
 800edb6:	6823      	ldr	r3, [r4, #0]
 800edb8:	4433      	add	r3, r6
 800edba:	6023      	str	r3, [r4, #0]
 800edbc:	2000      	movs	r0, #0
 800edbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edc2:	462a      	mov	r2, r5
 800edc4:	f000 fad4 	bl	800f370 <_realloc_r>
 800edc8:	4606      	mov	r6, r0
 800edca:	2800      	cmp	r0, #0
 800edcc:	d1e0      	bne.n	800ed90 <__ssputs_r+0x5c>
 800edce:	6921      	ldr	r1, [r4, #16]
 800edd0:	4650      	mov	r0, sl
 800edd2:	f7ff feb7 	bl	800eb44 <_free_r>
 800edd6:	230c      	movs	r3, #12
 800edd8:	f8ca 3000 	str.w	r3, [sl]
 800eddc:	89a3      	ldrh	r3, [r4, #12]
 800edde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ede2:	81a3      	strh	r3, [r4, #12]
 800ede4:	f04f 30ff 	mov.w	r0, #4294967295
 800ede8:	e7e9      	b.n	800edbe <__ssputs_r+0x8a>
	...

0800edec <_svfiprintf_r>:
 800edec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edf0:	4698      	mov	r8, r3
 800edf2:	898b      	ldrh	r3, [r1, #12]
 800edf4:	061b      	lsls	r3, r3, #24
 800edf6:	b09d      	sub	sp, #116	@ 0x74
 800edf8:	4607      	mov	r7, r0
 800edfa:	460d      	mov	r5, r1
 800edfc:	4614      	mov	r4, r2
 800edfe:	d510      	bpl.n	800ee22 <_svfiprintf_r+0x36>
 800ee00:	690b      	ldr	r3, [r1, #16]
 800ee02:	b973      	cbnz	r3, 800ee22 <_svfiprintf_r+0x36>
 800ee04:	2140      	movs	r1, #64	@ 0x40
 800ee06:	f7ff ff09 	bl	800ec1c <_malloc_r>
 800ee0a:	6028      	str	r0, [r5, #0]
 800ee0c:	6128      	str	r0, [r5, #16]
 800ee0e:	b930      	cbnz	r0, 800ee1e <_svfiprintf_r+0x32>
 800ee10:	230c      	movs	r3, #12
 800ee12:	603b      	str	r3, [r7, #0]
 800ee14:	f04f 30ff 	mov.w	r0, #4294967295
 800ee18:	b01d      	add	sp, #116	@ 0x74
 800ee1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee1e:	2340      	movs	r3, #64	@ 0x40
 800ee20:	616b      	str	r3, [r5, #20]
 800ee22:	2300      	movs	r3, #0
 800ee24:	9309      	str	r3, [sp, #36]	@ 0x24
 800ee26:	2320      	movs	r3, #32
 800ee28:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ee2c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ee30:	2330      	movs	r3, #48	@ 0x30
 800ee32:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800efd0 <_svfiprintf_r+0x1e4>
 800ee36:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ee3a:	f04f 0901 	mov.w	r9, #1
 800ee3e:	4623      	mov	r3, r4
 800ee40:	469a      	mov	sl, r3
 800ee42:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ee46:	b10a      	cbz	r2, 800ee4c <_svfiprintf_r+0x60>
 800ee48:	2a25      	cmp	r2, #37	@ 0x25
 800ee4a:	d1f9      	bne.n	800ee40 <_svfiprintf_r+0x54>
 800ee4c:	ebba 0b04 	subs.w	fp, sl, r4
 800ee50:	d00b      	beq.n	800ee6a <_svfiprintf_r+0x7e>
 800ee52:	465b      	mov	r3, fp
 800ee54:	4622      	mov	r2, r4
 800ee56:	4629      	mov	r1, r5
 800ee58:	4638      	mov	r0, r7
 800ee5a:	f7ff ff6b 	bl	800ed34 <__ssputs_r>
 800ee5e:	3001      	adds	r0, #1
 800ee60:	f000 80a7 	beq.w	800efb2 <_svfiprintf_r+0x1c6>
 800ee64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ee66:	445a      	add	r2, fp
 800ee68:	9209      	str	r2, [sp, #36]	@ 0x24
 800ee6a:	f89a 3000 	ldrb.w	r3, [sl]
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	f000 809f 	beq.w	800efb2 <_svfiprintf_r+0x1c6>
 800ee74:	2300      	movs	r3, #0
 800ee76:	f04f 32ff 	mov.w	r2, #4294967295
 800ee7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ee7e:	f10a 0a01 	add.w	sl, sl, #1
 800ee82:	9304      	str	r3, [sp, #16]
 800ee84:	9307      	str	r3, [sp, #28]
 800ee86:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ee8a:	931a      	str	r3, [sp, #104]	@ 0x68
 800ee8c:	4654      	mov	r4, sl
 800ee8e:	2205      	movs	r2, #5
 800ee90:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee94:	484e      	ldr	r0, [pc, #312]	@ (800efd0 <_svfiprintf_r+0x1e4>)
 800ee96:	f7f1 f9c3 	bl	8000220 <memchr>
 800ee9a:	9a04      	ldr	r2, [sp, #16]
 800ee9c:	b9d8      	cbnz	r0, 800eed6 <_svfiprintf_r+0xea>
 800ee9e:	06d0      	lsls	r0, r2, #27
 800eea0:	bf44      	itt	mi
 800eea2:	2320      	movmi	r3, #32
 800eea4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eea8:	0711      	lsls	r1, r2, #28
 800eeaa:	bf44      	itt	mi
 800eeac:	232b      	movmi	r3, #43	@ 0x2b
 800eeae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eeb2:	f89a 3000 	ldrb.w	r3, [sl]
 800eeb6:	2b2a      	cmp	r3, #42	@ 0x2a
 800eeb8:	d015      	beq.n	800eee6 <_svfiprintf_r+0xfa>
 800eeba:	9a07      	ldr	r2, [sp, #28]
 800eebc:	4654      	mov	r4, sl
 800eebe:	2000      	movs	r0, #0
 800eec0:	f04f 0c0a 	mov.w	ip, #10
 800eec4:	4621      	mov	r1, r4
 800eec6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eeca:	3b30      	subs	r3, #48	@ 0x30
 800eecc:	2b09      	cmp	r3, #9
 800eece:	d94b      	bls.n	800ef68 <_svfiprintf_r+0x17c>
 800eed0:	b1b0      	cbz	r0, 800ef00 <_svfiprintf_r+0x114>
 800eed2:	9207      	str	r2, [sp, #28]
 800eed4:	e014      	b.n	800ef00 <_svfiprintf_r+0x114>
 800eed6:	eba0 0308 	sub.w	r3, r0, r8
 800eeda:	fa09 f303 	lsl.w	r3, r9, r3
 800eede:	4313      	orrs	r3, r2
 800eee0:	9304      	str	r3, [sp, #16]
 800eee2:	46a2      	mov	sl, r4
 800eee4:	e7d2      	b.n	800ee8c <_svfiprintf_r+0xa0>
 800eee6:	9b03      	ldr	r3, [sp, #12]
 800eee8:	1d19      	adds	r1, r3, #4
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	9103      	str	r1, [sp, #12]
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	bfbb      	ittet	lt
 800eef2:	425b      	neglt	r3, r3
 800eef4:	f042 0202 	orrlt.w	r2, r2, #2
 800eef8:	9307      	strge	r3, [sp, #28]
 800eefa:	9307      	strlt	r3, [sp, #28]
 800eefc:	bfb8      	it	lt
 800eefe:	9204      	strlt	r2, [sp, #16]
 800ef00:	7823      	ldrb	r3, [r4, #0]
 800ef02:	2b2e      	cmp	r3, #46	@ 0x2e
 800ef04:	d10a      	bne.n	800ef1c <_svfiprintf_r+0x130>
 800ef06:	7863      	ldrb	r3, [r4, #1]
 800ef08:	2b2a      	cmp	r3, #42	@ 0x2a
 800ef0a:	d132      	bne.n	800ef72 <_svfiprintf_r+0x186>
 800ef0c:	9b03      	ldr	r3, [sp, #12]
 800ef0e:	1d1a      	adds	r2, r3, #4
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	9203      	str	r2, [sp, #12]
 800ef14:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ef18:	3402      	adds	r4, #2
 800ef1a:	9305      	str	r3, [sp, #20]
 800ef1c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800efe0 <_svfiprintf_r+0x1f4>
 800ef20:	7821      	ldrb	r1, [r4, #0]
 800ef22:	2203      	movs	r2, #3
 800ef24:	4650      	mov	r0, sl
 800ef26:	f7f1 f97b 	bl	8000220 <memchr>
 800ef2a:	b138      	cbz	r0, 800ef3c <_svfiprintf_r+0x150>
 800ef2c:	9b04      	ldr	r3, [sp, #16]
 800ef2e:	eba0 000a 	sub.w	r0, r0, sl
 800ef32:	2240      	movs	r2, #64	@ 0x40
 800ef34:	4082      	lsls	r2, r0
 800ef36:	4313      	orrs	r3, r2
 800ef38:	3401      	adds	r4, #1
 800ef3a:	9304      	str	r3, [sp, #16]
 800ef3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef40:	4824      	ldr	r0, [pc, #144]	@ (800efd4 <_svfiprintf_r+0x1e8>)
 800ef42:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ef46:	2206      	movs	r2, #6
 800ef48:	f7f1 f96a 	bl	8000220 <memchr>
 800ef4c:	2800      	cmp	r0, #0
 800ef4e:	d036      	beq.n	800efbe <_svfiprintf_r+0x1d2>
 800ef50:	4b21      	ldr	r3, [pc, #132]	@ (800efd8 <_svfiprintf_r+0x1ec>)
 800ef52:	bb1b      	cbnz	r3, 800ef9c <_svfiprintf_r+0x1b0>
 800ef54:	9b03      	ldr	r3, [sp, #12]
 800ef56:	3307      	adds	r3, #7
 800ef58:	f023 0307 	bic.w	r3, r3, #7
 800ef5c:	3308      	adds	r3, #8
 800ef5e:	9303      	str	r3, [sp, #12]
 800ef60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef62:	4433      	add	r3, r6
 800ef64:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef66:	e76a      	b.n	800ee3e <_svfiprintf_r+0x52>
 800ef68:	fb0c 3202 	mla	r2, ip, r2, r3
 800ef6c:	460c      	mov	r4, r1
 800ef6e:	2001      	movs	r0, #1
 800ef70:	e7a8      	b.n	800eec4 <_svfiprintf_r+0xd8>
 800ef72:	2300      	movs	r3, #0
 800ef74:	3401      	adds	r4, #1
 800ef76:	9305      	str	r3, [sp, #20]
 800ef78:	4619      	mov	r1, r3
 800ef7a:	f04f 0c0a 	mov.w	ip, #10
 800ef7e:	4620      	mov	r0, r4
 800ef80:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ef84:	3a30      	subs	r2, #48	@ 0x30
 800ef86:	2a09      	cmp	r2, #9
 800ef88:	d903      	bls.n	800ef92 <_svfiprintf_r+0x1a6>
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d0c6      	beq.n	800ef1c <_svfiprintf_r+0x130>
 800ef8e:	9105      	str	r1, [sp, #20]
 800ef90:	e7c4      	b.n	800ef1c <_svfiprintf_r+0x130>
 800ef92:	fb0c 2101 	mla	r1, ip, r1, r2
 800ef96:	4604      	mov	r4, r0
 800ef98:	2301      	movs	r3, #1
 800ef9a:	e7f0      	b.n	800ef7e <_svfiprintf_r+0x192>
 800ef9c:	ab03      	add	r3, sp, #12
 800ef9e:	9300      	str	r3, [sp, #0]
 800efa0:	462a      	mov	r2, r5
 800efa2:	4b0e      	ldr	r3, [pc, #56]	@ (800efdc <_svfiprintf_r+0x1f0>)
 800efa4:	a904      	add	r1, sp, #16
 800efa6:	4638      	mov	r0, r7
 800efa8:	f3af 8000 	nop.w
 800efac:	1c42      	adds	r2, r0, #1
 800efae:	4606      	mov	r6, r0
 800efb0:	d1d6      	bne.n	800ef60 <_svfiprintf_r+0x174>
 800efb2:	89ab      	ldrh	r3, [r5, #12]
 800efb4:	065b      	lsls	r3, r3, #25
 800efb6:	f53f af2d 	bmi.w	800ee14 <_svfiprintf_r+0x28>
 800efba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800efbc:	e72c      	b.n	800ee18 <_svfiprintf_r+0x2c>
 800efbe:	ab03      	add	r3, sp, #12
 800efc0:	9300      	str	r3, [sp, #0]
 800efc2:	462a      	mov	r2, r5
 800efc4:	4b05      	ldr	r3, [pc, #20]	@ (800efdc <_svfiprintf_r+0x1f0>)
 800efc6:	a904      	add	r1, sp, #16
 800efc8:	4638      	mov	r0, r7
 800efca:	f000 f879 	bl	800f0c0 <_printf_i>
 800efce:	e7ed      	b.n	800efac <_svfiprintf_r+0x1c0>
 800efd0:	0800fedc 	.word	0x0800fedc
 800efd4:	0800fee6 	.word	0x0800fee6
 800efd8:	00000000 	.word	0x00000000
 800efdc:	0800ed35 	.word	0x0800ed35
 800efe0:	0800fee2 	.word	0x0800fee2

0800efe4 <_printf_common>:
 800efe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800efe8:	4616      	mov	r6, r2
 800efea:	4698      	mov	r8, r3
 800efec:	688a      	ldr	r2, [r1, #8]
 800efee:	690b      	ldr	r3, [r1, #16]
 800eff0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800eff4:	4293      	cmp	r3, r2
 800eff6:	bfb8      	it	lt
 800eff8:	4613      	movlt	r3, r2
 800effa:	6033      	str	r3, [r6, #0]
 800effc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f000:	4607      	mov	r7, r0
 800f002:	460c      	mov	r4, r1
 800f004:	b10a      	cbz	r2, 800f00a <_printf_common+0x26>
 800f006:	3301      	adds	r3, #1
 800f008:	6033      	str	r3, [r6, #0]
 800f00a:	6823      	ldr	r3, [r4, #0]
 800f00c:	0699      	lsls	r1, r3, #26
 800f00e:	bf42      	ittt	mi
 800f010:	6833      	ldrmi	r3, [r6, #0]
 800f012:	3302      	addmi	r3, #2
 800f014:	6033      	strmi	r3, [r6, #0]
 800f016:	6825      	ldr	r5, [r4, #0]
 800f018:	f015 0506 	ands.w	r5, r5, #6
 800f01c:	d106      	bne.n	800f02c <_printf_common+0x48>
 800f01e:	f104 0a19 	add.w	sl, r4, #25
 800f022:	68e3      	ldr	r3, [r4, #12]
 800f024:	6832      	ldr	r2, [r6, #0]
 800f026:	1a9b      	subs	r3, r3, r2
 800f028:	42ab      	cmp	r3, r5
 800f02a:	dc26      	bgt.n	800f07a <_printf_common+0x96>
 800f02c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f030:	6822      	ldr	r2, [r4, #0]
 800f032:	3b00      	subs	r3, #0
 800f034:	bf18      	it	ne
 800f036:	2301      	movne	r3, #1
 800f038:	0692      	lsls	r2, r2, #26
 800f03a:	d42b      	bmi.n	800f094 <_printf_common+0xb0>
 800f03c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f040:	4641      	mov	r1, r8
 800f042:	4638      	mov	r0, r7
 800f044:	47c8      	blx	r9
 800f046:	3001      	adds	r0, #1
 800f048:	d01e      	beq.n	800f088 <_printf_common+0xa4>
 800f04a:	6823      	ldr	r3, [r4, #0]
 800f04c:	6922      	ldr	r2, [r4, #16]
 800f04e:	f003 0306 	and.w	r3, r3, #6
 800f052:	2b04      	cmp	r3, #4
 800f054:	bf02      	ittt	eq
 800f056:	68e5      	ldreq	r5, [r4, #12]
 800f058:	6833      	ldreq	r3, [r6, #0]
 800f05a:	1aed      	subeq	r5, r5, r3
 800f05c:	68a3      	ldr	r3, [r4, #8]
 800f05e:	bf0c      	ite	eq
 800f060:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f064:	2500      	movne	r5, #0
 800f066:	4293      	cmp	r3, r2
 800f068:	bfc4      	itt	gt
 800f06a:	1a9b      	subgt	r3, r3, r2
 800f06c:	18ed      	addgt	r5, r5, r3
 800f06e:	2600      	movs	r6, #0
 800f070:	341a      	adds	r4, #26
 800f072:	42b5      	cmp	r5, r6
 800f074:	d11a      	bne.n	800f0ac <_printf_common+0xc8>
 800f076:	2000      	movs	r0, #0
 800f078:	e008      	b.n	800f08c <_printf_common+0xa8>
 800f07a:	2301      	movs	r3, #1
 800f07c:	4652      	mov	r2, sl
 800f07e:	4641      	mov	r1, r8
 800f080:	4638      	mov	r0, r7
 800f082:	47c8      	blx	r9
 800f084:	3001      	adds	r0, #1
 800f086:	d103      	bne.n	800f090 <_printf_common+0xac>
 800f088:	f04f 30ff 	mov.w	r0, #4294967295
 800f08c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f090:	3501      	adds	r5, #1
 800f092:	e7c6      	b.n	800f022 <_printf_common+0x3e>
 800f094:	18e1      	adds	r1, r4, r3
 800f096:	1c5a      	adds	r2, r3, #1
 800f098:	2030      	movs	r0, #48	@ 0x30
 800f09a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f09e:	4422      	add	r2, r4
 800f0a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f0a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f0a8:	3302      	adds	r3, #2
 800f0aa:	e7c7      	b.n	800f03c <_printf_common+0x58>
 800f0ac:	2301      	movs	r3, #1
 800f0ae:	4622      	mov	r2, r4
 800f0b0:	4641      	mov	r1, r8
 800f0b2:	4638      	mov	r0, r7
 800f0b4:	47c8      	blx	r9
 800f0b6:	3001      	adds	r0, #1
 800f0b8:	d0e6      	beq.n	800f088 <_printf_common+0xa4>
 800f0ba:	3601      	adds	r6, #1
 800f0bc:	e7d9      	b.n	800f072 <_printf_common+0x8e>
	...

0800f0c0 <_printf_i>:
 800f0c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f0c4:	7e0f      	ldrb	r7, [r1, #24]
 800f0c6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f0c8:	2f78      	cmp	r7, #120	@ 0x78
 800f0ca:	4691      	mov	r9, r2
 800f0cc:	4680      	mov	r8, r0
 800f0ce:	460c      	mov	r4, r1
 800f0d0:	469a      	mov	sl, r3
 800f0d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f0d6:	d807      	bhi.n	800f0e8 <_printf_i+0x28>
 800f0d8:	2f62      	cmp	r7, #98	@ 0x62
 800f0da:	d80a      	bhi.n	800f0f2 <_printf_i+0x32>
 800f0dc:	2f00      	cmp	r7, #0
 800f0de:	f000 80d2 	beq.w	800f286 <_printf_i+0x1c6>
 800f0e2:	2f58      	cmp	r7, #88	@ 0x58
 800f0e4:	f000 80b9 	beq.w	800f25a <_printf_i+0x19a>
 800f0e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f0ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f0f0:	e03a      	b.n	800f168 <_printf_i+0xa8>
 800f0f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f0f6:	2b15      	cmp	r3, #21
 800f0f8:	d8f6      	bhi.n	800f0e8 <_printf_i+0x28>
 800f0fa:	a101      	add	r1, pc, #4	@ (adr r1, 800f100 <_printf_i+0x40>)
 800f0fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f100:	0800f159 	.word	0x0800f159
 800f104:	0800f16d 	.word	0x0800f16d
 800f108:	0800f0e9 	.word	0x0800f0e9
 800f10c:	0800f0e9 	.word	0x0800f0e9
 800f110:	0800f0e9 	.word	0x0800f0e9
 800f114:	0800f0e9 	.word	0x0800f0e9
 800f118:	0800f16d 	.word	0x0800f16d
 800f11c:	0800f0e9 	.word	0x0800f0e9
 800f120:	0800f0e9 	.word	0x0800f0e9
 800f124:	0800f0e9 	.word	0x0800f0e9
 800f128:	0800f0e9 	.word	0x0800f0e9
 800f12c:	0800f26d 	.word	0x0800f26d
 800f130:	0800f197 	.word	0x0800f197
 800f134:	0800f227 	.word	0x0800f227
 800f138:	0800f0e9 	.word	0x0800f0e9
 800f13c:	0800f0e9 	.word	0x0800f0e9
 800f140:	0800f28f 	.word	0x0800f28f
 800f144:	0800f0e9 	.word	0x0800f0e9
 800f148:	0800f197 	.word	0x0800f197
 800f14c:	0800f0e9 	.word	0x0800f0e9
 800f150:	0800f0e9 	.word	0x0800f0e9
 800f154:	0800f22f 	.word	0x0800f22f
 800f158:	6833      	ldr	r3, [r6, #0]
 800f15a:	1d1a      	adds	r2, r3, #4
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	6032      	str	r2, [r6, #0]
 800f160:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f164:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f168:	2301      	movs	r3, #1
 800f16a:	e09d      	b.n	800f2a8 <_printf_i+0x1e8>
 800f16c:	6833      	ldr	r3, [r6, #0]
 800f16e:	6820      	ldr	r0, [r4, #0]
 800f170:	1d19      	adds	r1, r3, #4
 800f172:	6031      	str	r1, [r6, #0]
 800f174:	0606      	lsls	r6, r0, #24
 800f176:	d501      	bpl.n	800f17c <_printf_i+0xbc>
 800f178:	681d      	ldr	r5, [r3, #0]
 800f17a:	e003      	b.n	800f184 <_printf_i+0xc4>
 800f17c:	0645      	lsls	r5, r0, #25
 800f17e:	d5fb      	bpl.n	800f178 <_printf_i+0xb8>
 800f180:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f184:	2d00      	cmp	r5, #0
 800f186:	da03      	bge.n	800f190 <_printf_i+0xd0>
 800f188:	232d      	movs	r3, #45	@ 0x2d
 800f18a:	426d      	negs	r5, r5
 800f18c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f190:	4859      	ldr	r0, [pc, #356]	@ (800f2f8 <_printf_i+0x238>)
 800f192:	230a      	movs	r3, #10
 800f194:	e011      	b.n	800f1ba <_printf_i+0xfa>
 800f196:	6821      	ldr	r1, [r4, #0]
 800f198:	6833      	ldr	r3, [r6, #0]
 800f19a:	0608      	lsls	r0, r1, #24
 800f19c:	f853 5b04 	ldr.w	r5, [r3], #4
 800f1a0:	d402      	bmi.n	800f1a8 <_printf_i+0xe8>
 800f1a2:	0649      	lsls	r1, r1, #25
 800f1a4:	bf48      	it	mi
 800f1a6:	b2ad      	uxthmi	r5, r5
 800f1a8:	2f6f      	cmp	r7, #111	@ 0x6f
 800f1aa:	4853      	ldr	r0, [pc, #332]	@ (800f2f8 <_printf_i+0x238>)
 800f1ac:	6033      	str	r3, [r6, #0]
 800f1ae:	bf14      	ite	ne
 800f1b0:	230a      	movne	r3, #10
 800f1b2:	2308      	moveq	r3, #8
 800f1b4:	2100      	movs	r1, #0
 800f1b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f1ba:	6866      	ldr	r6, [r4, #4]
 800f1bc:	60a6      	str	r6, [r4, #8]
 800f1be:	2e00      	cmp	r6, #0
 800f1c0:	bfa2      	ittt	ge
 800f1c2:	6821      	ldrge	r1, [r4, #0]
 800f1c4:	f021 0104 	bicge.w	r1, r1, #4
 800f1c8:	6021      	strge	r1, [r4, #0]
 800f1ca:	b90d      	cbnz	r5, 800f1d0 <_printf_i+0x110>
 800f1cc:	2e00      	cmp	r6, #0
 800f1ce:	d04b      	beq.n	800f268 <_printf_i+0x1a8>
 800f1d0:	4616      	mov	r6, r2
 800f1d2:	fbb5 f1f3 	udiv	r1, r5, r3
 800f1d6:	fb03 5711 	mls	r7, r3, r1, r5
 800f1da:	5dc7      	ldrb	r7, [r0, r7]
 800f1dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f1e0:	462f      	mov	r7, r5
 800f1e2:	42bb      	cmp	r3, r7
 800f1e4:	460d      	mov	r5, r1
 800f1e6:	d9f4      	bls.n	800f1d2 <_printf_i+0x112>
 800f1e8:	2b08      	cmp	r3, #8
 800f1ea:	d10b      	bne.n	800f204 <_printf_i+0x144>
 800f1ec:	6823      	ldr	r3, [r4, #0]
 800f1ee:	07df      	lsls	r7, r3, #31
 800f1f0:	d508      	bpl.n	800f204 <_printf_i+0x144>
 800f1f2:	6923      	ldr	r3, [r4, #16]
 800f1f4:	6861      	ldr	r1, [r4, #4]
 800f1f6:	4299      	cmp	r1, r3
 800f1f8:	bfde      	ittt	le
 800f1fa:	2330      	movle	r3, #48	@ 0x30
 800f1fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f200:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f204:	1b92      	subs	r2, r2, r6
 800f206:	6122      	str	r2, [r4, #16]
 800f208:	f8cd a000 	str.w	sl, [sp]
 800f20c:	464b      	mov	r3, r9
 800f20e:	aa03      	add	r2, sp, #12
 800f210:	4621      	mov	r1, r4
 800f212:	4640      	mov	r0, r8
 800f214:	f7ff fee6 	bl	800efe4 <_printf_common>
 800f218:	3001      	adds	r0, #1
 800f21a:	d14a      	bne.n	800f2b2 <_printf_i+0x1f2>
 800f21c:	f04f 30ff 	mov.w	r0, #4294967295
 800f220:	b004      	add	sp, #16
 800f222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f226:	6823      	ldr	r3, [r4, #0]
 800f228:	f043 0320 	orr.w	r3, r3, #32
 800f22c:	6023      	str	r3, [r4, #0]
 800f22e:	4833      	ldr	r0, [pc, #204]	@ (800f2fc <_printf_i+0x23c>)
 800f230:	2778      	movs	r7, #120	@ 0x78
 800f232:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f236:	6823      	ldr	r3, [r4, #0]
 800f238:	6831      	ldr	r1, [r6, #0]
 800f23a:	061f      	lsls	r7, r3, #24
 800f23c:	f851 5b04 	ldr.w	r5, [r1], #4
 800f240:	d402      	bmi.n	800f248 <_printf_i+0x188>
 800f242:	065f      	lsls	r7, r3, #25
 800f244:	bf48      	it	mi
 800f246:	b2ad      	uxthmi	r5, r5
 800f248:	6031      	str	r1, [r6, #0]
 800f24a:	07d9      	lsls	r1, r3, #31
 800f24c:	bf44      	itt	mi
 800f24e:	f043 0320 	orrmi.w	r3, r3, #32
 800f252:	6023      	strmi	r3, [r4, #0]
 800f254:	b11d      	cbz	r5, 800f25e <_printf_i+0x19e>
 800f256:	2310      	movs	r3, #16
 800f258:	e7ac      	b.n	800f1b4 <_printf_i+0xf4>
 800f25a:	4827      	ldr	r0, [pc, #156]	@ (800f2f8 <_printf_i+0x238>)
 800f25c:	e7e9      	b.n	800f232 <_printf_i+0x172>
 800f25e:	6823      	ldr	r3, [r4, #0]
 800f260:	f023 0320 	bic.w	r3, r3, #32
 800f264:	6023      	str	r3, [r4, #0]
 800f266:	e7f6      	b.n	800f256 <_printf_i+0x196>
 800f268:	4616      	mov	r6, r2
 800f26a:	e7bd      	b.n	800f1e8 <_printf_i+0x128>
 800f26c:	6833      	ldr	r3, [r6, #0]
 800f26e:	6825      	ldr	r5, [r4, #0]
 800f270:	6961      	ldr	r1, [r4, #20]
 800f272:	1d18      	adds	r0, r3, #4
 800f274:	6030      	str	r0, [r6, #0]
 800f276:	062e      	lsls	r6, r5, #24
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	d501      	bpl.n	800f280 <_printf_i+0x1c0>
 800f27c:	6019      	str	r1, [r3, #0]
 800f27e:	e002      	b.n	800f286 <_printf_i+0x1c6>
 800f280:	0668      	lsls	r0, r5, #25
 800f282:	d5fb      	bpl.n	800f27c <_printf_i+0x1bc>
 800f284:	8019      	strh	r1, [r3, #0]
 800f286:	2300      	movs	r3, #0
 800f288:	6123      	str	r3, [r4, #16]
 800f28a:	4616      	mov	r6, r2
 800f28c:	e7bc      	b.n	800f208 <_printf_i+0x148>
 800f28e:	6833      	ldr	r3, [r6, #0]
 800f290:	1d1a      	adds	r2, r3, #4
 800f292:	6032      	str	r2, [r6, #0]
 800f294:	681e      	ldr	r6, [r3, #0]
 800f296:	6862      	ldr	r2, [r4, #4]
 800f298:	2100      	movs	r1, #0
 800f29a:	4630      	mov	r0, r6
 800f29c:	f7f0 ffc0 	bl	8000220 <memchr>
 800f2a0:	b108      	cbz	r0, 800f2a6 <_printf_i+0x1e6>
 800f2a2:	1b80      	subs	r0, r0, r6
 800f2a4:	6060      	str	r0, [r4, #4]
 800f2a6:	6863      	ldr	r3, [r4, #4]
 800f2a8:	6123      	str	r3, [r4, #16]
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f2b0:	e7aa      	b.n	800f208 <_printf_i+0x148>
 800f2b2:	6923      	ldr	r3, [r4, #16]
 800f2b4:	4632      	mov	r2, r6
 800f2b6:	4649      	mov	r1, r9
 800f2b8:	4640      	mov	r0, r8
 800f2ba:	47d0      	blx	sl
 800f2bc:	3001      	adds	r0, #1
 800f2be:	d0ad      	beq.n	800f21c <_printf_i+0x15c>
 800f2c0:	6823      	ldr	r3, [r4, #0]
 800f2c2:	079b      	lsls	r3, r3, #30
 800f2c4:	d413      	bmi.n	800f2ee <_printf_i+0x22e>
 800f2c6:	68e0      	ldr	r0, [r4, #12]
 800f2c8:	9b03      	ldr	r3, [sp, #12]
 800f2ca:	4298      	cmp	r0, r3
 800f2cc:	bfb8      	it	lt
 800f2ce:	4618      	movlt	r0, r3
 800f2d0:	e7a6      	b.n	800f220 <_printf_i+0x160>
 800f2d2:	2301      	movs	r3, #1
 800f2d4:	4632      	mov	r2, r6
 800f2d6:	4649      	mov	r1, r9
 800f2d8:	4640      	mov	r0, r8
 800f2da:	47d0      	blx	sl
 800f2dc:	3001      	adds	r0, #1
 800f2de:	d09d      	beq.n	800f21c <_printf_i+0x15c>
 800f2e0:	3501      	adds	r5, #1
 800f2e2:	68e3      	ldr	r3, [r4, #12]
 800f2e4:	9903      	ldr	r1, [sp, #12]
 800f2e6:	1a5b      	subs	r3, r3, r1
 800f2e8:	42ab      	cmp	r3, r5
 800f2ea:	dcf2      	bgt.n	800f2d2 <_printf_i+0x212>
 800f2ec:	e7eb      	b.n	800f2c6 <_printf_i+0x206>
 800f2ee:	2500      	movs	r5, #0
 800f2f0:	f104 0619 	add.w	r6, r4, #25
 800f2f4:	e7f5      	b.n	800f2e2 <_printf_i+0x222>
 800f2f6:	bf00      	nop
 800f2f8:	0800feed 	.word	0x0800feed
 800f2fc:	0800fefe 	.word	0x0800fefe

0800f300 <memmove>:
 800f300:	4288      	cmp	r0, r1
 800f302:	b510      	push	{r4, lr}
 800f304:	eb01 0402 	add.w	r4, r1, r2
 800f308:	d902      	bls.n	800f310 <memmove+0x10>
 800f30a:	4284      	cmp	r4, r0
 800f30c:	4623      	mov	r3, r4
 800f30e:	d807      	bhi.n	800f320 <memmove+0x20>
 800f310:	1e43      	subs	r3, r0, #1
 800f312:	42a1      	cmp	r1, r4
 800f314:	d008      	beq.n	800f328 <memmove+0x28>
 800f316:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f31a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f31e:	e7f8      	b.n	800f312 <memmove+0x12>
 800f320:	4402      	add	r2, r0
 800f322:	4601      	mov	r1, r0
 800f324:	428a      	cmp	r2, r1
 800f326:	d100      	bne.n	800f32a <memmove+0x2a>
 800f328:	bd10      	pop	{r4, pc}
 800f32a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f32e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f332:	e7f7      	b.n	800f324 <memmove+0x24>

0800f334 <_sbrk_r>:
 800f334:	b538      	push	{r3, r4, r5, lr}
 800f336:	4d06      	ldr	r5, [pc, #24]	@ (800f350 <_sbrk_r+0x1c>)
 800f338:	2300      	movs	r3, #0
 800f33a:	4604      	mov	r4, r0
 800f33c:	4608      	mov	r0, r1
 800f33e:	602b      	str	r3, [r5, #0]
 800f340:	f7f2 faaa 	bl	8001898 <_sbrk>
 800f344:	1c43      	adds	r3, r0, #1
 800f346:	d102      	bne.n	800f34e <_sbrk_r+0x1a>
 800f348:	682b      	ldr	r3, [r5, #0]
 800f34a:	b103      	cbz	r3, 800f34e <_sbrk_r+0x1a>
 800f34c:	6023      	str	r3, [r4, #0]
 800f34e:	bd38      	pop	{r3, r4, r5, pc}
 800f350:	20004ff8 	.word	0x20004ff8

0800f354 <memcpy>:
 800f354:	440a      	add	r2, r1
 800f356:	4291      	cmp	r1, r2
 800f358:	f100 33ff 	add.w	r3, r0, #4294967295
 800f35c:	d100      	bne.n	800f360 <memcpy+0xc>
 800f35e:	4770      	bx	lr
 800f360:	b510      	push	{r4, lr}
 800f362:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f366:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f36a:	4291      	cmp	r1, r2
 800f36c:	d1f9      	bne.n	800f362 <memcpy+0xe>
 800f36e:	bd10      	pop	{r4, pc}

0800f370 <_realloc_r>:
 800f370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f374:	4680      	mov	r8, r0
 800f376:	4615      	mov	r5, r2
 800f378:	460c      	mov	r4, r1
 800f37a:	b921      	cbnz	r1, 800f386 <_realloc_r+0x16>
 800f37c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f380:	4611      	mov	r1, r2
 800f382:	f7ff bc4b 	b.w	800ec1c <_malloc_r>
 800f386:	b92a      	cbnz	r2, 800f394 <_realloc_r+0x24>
 800f388:	f7ff fbdc 	bl	800eb44 <_free_r>
 800f38c:	2400      	movs	r4, #0
 800f38e:	4620      	mov	r0, r4
 800f390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f394:	f000 f81a 	bl	800f3cc <_malloc_usable_size_r>
 800f398:	4285      	cmp	r5, r0
 800f39a:	4606      	mov	r6, r0
 800f39c:	d802      	bhi.n	800f3a4 <_realloc_r+0x34>
 800f39e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f3a2:	d8f4      	bhi.n	800f38e <_realloc_r+0x1e>
 800f3a4:	4629      	mov	r1, r5
 800f3a6:	4640      	mov	r0, r8
 800f3a8:	f7ff fc38 	bl	800ec1c <_malloc_r>
 800f3ac:	4607      	mov	r7, r0
 800f3ae:	2800      	cmp	r0, #0
 800f3b0:	d0ec      	beq.n	800f38c <_realloc_r+0x1c>
 800f3b2:	42b5      	cmp	r5, r6
 800f3b4:	462a      	mov	r2, r5
 800f3b6:	4621      	mov	r1, r4
 800f3b8:	bf28      	it	cs
 800f3ba:	4632      	movcs	r2, r6
 800f3bc:	f7ff ffca 	bl	800f354 <memcpy>
 800f3c0:	4621      	mov	r1, r4
 800f3c2:	4640      	mov	r0, r8
 800f3c4:	f7ff fbbe 	bl	800eb44 <_free_r>
 800f3c8:	463c      	mov	r4, r7
 800f3ca:	e7e0      	b.n	800f38e <_realloc_r+0x1e>

0800f3cc <_malloc_usable_size_r>:
 800f3cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f3d0:	1f18      	subs	r0, r3, #4
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	bfbc      	itt	lt
 800f3d6:	580b      	ldrlt	r3, [r1, r0]
 800f3d8:	18c0      	addlt	r0, r0, r3
 800f3da:	4770      	bx	lr

0800f3dc <sinf>:
 800f3dc:	ee10 3a10 	vmov	r3, s0
 800f3e0:	b507      	push	{r0, r1, r2, lr}
 800f3e2:	4a1f      	ldr	r2, [pc, #124]	@ (800f460 <sinf+0x84>)
 800f3e4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f3e8:	4293      	cmp	r3, r2
 800f3ea:	d807      	bhi.n	800f3fc <sinf+0x20>
 800f3ec:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800f464 <sinf+0x88>
 800f3f0:	2000      	movs	r0, #0
 800f3f2:	b003      	add	sp, #12
 800f3f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800f3f8:	f000 b88e 	b.w	800f518 <__kernel_sinf>
 800f3fc:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800f400:	d304      	bcc.n	800f40c <sinf+0x30>
 800f402:	ee30 0a40 	vsub.f32	s0, s0, s0
 800f406:	b003      	add	sp, #12
 800f408:	f85d fb04 	ldr.w	pc, [sp], #4
 800f40c:	4668      	mov	r0, sp
 800f40e:	f000 f8cb 	bl	800f5a8 <__ieee754_rem_pio2f>
 800f412:	f000 0003 	and.w	r0, r0, #3
 800f416:	2801      	cmp	r0, #1
 800f418:	d00a      	beq.n	800f430 <sinf+0x54>
 800f41a:	2802      	cmp	r0, #2
 800f41c:	d00f      	beq.n	800f43e <sinf+0x62>
 800f41e:	b9c0      	cbnz	r0, 800f452 <sinf+0x76>
 800f420:	eddd 0a01 	vldr	s1, [sp, #4]
 800f424:	ed9d 0a00 	vldr	s0, [sp]
 800f428:	2001      	movs	r0, #1
 800f42a:	f000 f875 	bl	800f518 <__kernel_sinf>
 800f42e:	e7ea      	b.n	800f406 <sinf+0x2a>
 800f430:	eddd 0a01 	vldr	s1, [sp, #4]
 800f434:	ed9d 0a00 	vldr	s0, [sp]
 800f438:	f000 f816 	bl	800f468 <__kernel_cosf>
 800f43c:	e7e3      	b.n	800f406 <sinf+0x2a>
 800f43e:	eddd 0a01 	vldr	s1, [sp, #4]
 800f442:	ed9d 0a00 	vldr	s0, [sp]
 800f446:	2001      	movs	r0, #1
 800f448:	f000 f866 	bl	800f518 <__kernel_sinf>
 800f44c:	eeb1 0a40 	vneg.f32	s0, s0
 800f450:	e7d9      	b.n	800f406 <sinf+0x2a>
 800f452:	eddd 0a01 	vldr	s1, [sp, #4]
 800f456:	ed9d 0a00 	vldr	s0, [sp]
 800f45a:	f000 f805 	bl	800f468 <__kernel_cosf>
 800f45e:	e7f5      	b.n	800f44c <sinf+0x70>
 800f460:	3f490fd8 	.word	0x3f490fd8
 800f464:	00000000 	.word	0x00000000

0800f468 <__kernel_cosf>:
 800f468:	ee10 3a10 	vmov	r3, s0
 800f46c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f470:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800f474:	eef0 6a40 	vmov.f32	s13, s0
 800f478:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800f47c:	d204      	bcs.n	800f488 <__kernel_cosf+0x20>
 800f47e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800f482:	ee17 2a90 	vmov	r2, s15
 800f486:	b342      	cbz	r2, 800f4da <__kernel_cosf+0x72>
 800f488:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800f48c:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800f4f8 <__kernel_cosf+0x90>
 800f490:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800f4fc <__kernel_cosf+0x94>
 800f494:	4a1a      	ldr	r2, [pc, #104]	@ (800f500 <__kernel_cosf+0x98>)
 800f496:	eea7 6a27 	vfma.f32	s12, s14, s15
 800f49a:	4293      	cmp	r3, r2
 800f49c:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800f504 <__kernel_cosf+0x9c>
 800f4a0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800f4a4:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800f508 <__kernel_cosf+0xa0>
 800f4a8:	eea7 6a87 	vfma.f32	s12, s15, s14
 800f4ac:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800f50c <__kernel_cosf+0xa4>
 800f4b0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800f4b4:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800f510 <__kernel_cosf+0xa8>
 800f4b8:	eea7 6a87 	vfma.f32	s12, s15, s14
 800f4bc:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800f4c0:	ee26 6a07 	vmul.f32	s12, s12, s14
 800f4c4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800f4c8:	eee7 0a06 	vfma.f32	s1, s14, s12
 800f4cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f4d0:	d804      	bhi.n	800f4dc <__kernel_cosf+0x74>
 800f4d2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800f4d6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f4da:	4770      	bx	lr
 800f4dc:	4a0d      	ldr	r2, [pc, #52]	@ (800f514 <__kernel_cosf+0xac>)
 800f4de:	4293      	cmp	r3, r2
 800f4e0:	bf9a      	itte	ls
 800f4e2:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800f4e6:	ee07 3a10 	vmovls	s14, r3
 800f4ea:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800f4ee:	ee30 0a47 	vsub.f32	s0, s0, s14
 800f4f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f4f6:	e7ec      	b.n	800f4d2 <__kernel_cosf+0x6a>
 800f4f8:	ad47d74e 	.word	0xad47d74e
 800f4fc:	310f74f6 	.word	0x310f74f6
 800f500:	3e999999 	.word	0x3e999999
 800f504:	b493f27c 	.word	0xb493f27c
 800f508:	37d00d01 	.word	0x37d00d01
 800f50c:	bab60b61 	.word	0xbab60b61
 800f510:	3d2aaaab 	.word	0x3d2aaaab
 800f514:	3f480000 	.word	0x3f480000

0800f518 <__kernel_sinf>:
 800f518:	ee10 3a10 	vmov	r3, s0
 800f51c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f520:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800f524:	d204      	bcs.n	800f530 <__kernel_sinf+0x18>
 800f526:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800f52a:	ee17 3a90 	vmov	r3, s15
 800f52e:	b35b      	cbz	r3, 800f588 <__kernel_sinf+0x70>
 800f530:	ee20 7a00 	vmul.f32	s14, s0, s0
 800f534:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800f58c <__kernel_sinf+0x74>
 800f538:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800f590 <__kernel_sinf+0x78>
 800f53c:	eea7 6a27 	vfma.f32	s12, s14, s15
 800f540:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800f594 <__kernel_sinf+0x7c>
 800f544:	eee6 7a07 	vfma.f32	s15, s12, s14
 800f548:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800f598 <__kernel_sinf+0x80>
 800f54c:	eea7 6a87 	vfma.f32	s12, s15, s14
 800f550:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800f59c <__kernel_sinf+0x84>
 800f554:	ee60 6a07 	vmul.f32	s13, s0, s14
 800f558:	eee6 7a07 	vfma.f32	s15, s12, s14
 800f55c:	b930      	cbnz	r0, 800f56c <__kernel_sinf+0x54>
 800f55e:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800f5a0 <__kernel_sinf+0x88>
 800f562:	eea7 6a27 	vfma.f32	s12, s14, s15
 800f566:	eea6 0a26 	vfma.f32	s0, s12, s13
 800f56a:	4770      	bx	lr
 800f56c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800f570:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800f574:	eee0 7a86 	vfma.f32	s15, s1, s12
 800f578:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800f57c:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800f5a4 <__kernel_sinf+0x8c>
 800f580:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800f584:	ee30 0a60 	vsub.f32	s0, s0, s1
 800f588:	4770      	bx	lr
 800f58a:	bf00      	nop
 800f58c:	2f2ec9d3 	.word	0x2f2ec9d3
 800f590:	b2d72f34 	.word	0xb2d72f34
 800f594:	3638ef1b 	.word	0x3638ef1b
 800f598:	b9500d01 	.word	0xb9500d01
 800f59c:	3c088889 	.word	0x3c088889
 800f5a0:	be2aaaab 	.word	0xbe2aaaab
 800f5a4:	3e2aaaab 	.word	0x3e2aaaab

0800f5a8 <__ieee754_rem_pio2f>:
 800f5a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f5aa:	ee10 6a10 	vmov	r6, s0
 800f5ae:	4b88      	ldr	r3, [pc, #544]	@ (800f7d0 <__ieee754_rem_pio2f+0x228>)
 800f5b0:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800f5b4:	429d      	cmp	r5, r3
 800f5b6:	b087      	sub	sp, #28
 800f5b8:	4604      	mov	r4, r0
 800f5ba:	d805      	bhi.n	800f5c8 <__ieee754_rem_pio2f+0x20>
 800f5bc:	2300      	movs	r3, #0
 800f5be:	ed80 0a00 	vstr	s0, [r0]
 800f5c2:	6043      	str	r3, [r0, #4]
 800f5c4:	2000      	movs	r0, #0
 800f5c6:	e022      	b.n	800f60e <__ieee754_rem_pio2f+0x66>
 800f5c8:	4b82      	ldr	r3, [pc, #520]	@ (800f7d4 <__ieee754_rem_pio2f+0x22c>)
 800f5ca:	429d      	cmp	r5, r3
 800f5cc:	d83a      	bhi.n	800f644 <__ieee754_rem_pio2f+0x9c>
 800f5ce:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800f5d2:	2e00      	cmp	r6, #0
 800f5d4:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800f7d8 <__ieee754_rem_pio2f+0x230>
 800f5d8:	4a80      	ldr	r2, [pc, #512]	@ (800f7dc <__ieee754_rem_pio2f+0x234>)
 800f5da:	f023 030f 	bic.w	r3, r3, #15
 800f5de:	dd18      	ble.n	800f612 <__ieee754_rem_pio2f+0x6a>
 800f5e0:	4293      	cmp	r3, r2
 800f5e2:	ee70 7a47 	vsub.f32	s15, s0, s14
 800f5e6:	bf09      	itett	eq
 800f5e8:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800f7e0 <__ieee754_rem_pio2f+0x238>
 800f5ec:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800f7e4 <__ieee754_rem_pio2f+0x23c>
 800f5f0:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800f7e8 <__ieee754_rem_pio2f+0x240>
 800f5f4:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800f5f8:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800f5fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f600:	ed80 7a00 	vstr	s14, [r0]
 800f604:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f608:	edc0 7a01 	vstr	s15, [r0, #4]
 800f60c:	2001      	movs	r0, #1
 800f60e:	b007      	add	sp, #28
 800f610:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f612:	4293      	cmp	r3, r2
 800f614:	ee70 7a07 	vadd.f32	s15, s0, s14
 800f618:	bf09      	itett	eq
 800f61a:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800f7e0 <__ieee754_rem_pio2f+0x238>
 800f61e:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800f7e4 <__ieee754_rem_pio2f+0x23c>
 800f622:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800f7e8 <__ieee754_rem_pio2f+0x240>
 800f626:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800f62a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800f62e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f632:	ed80 7a00 	vstr	s14, [r0]
 800f636:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f63a:	edc0 7a01 	vstr	s15, [r0, #4]
 800f63e:	f04f 30ff 	mov.w	r0, #4294967295
 800f642:	e7e4      	b.n	800f60e <__ieee754_rem_pio2f+0x66>
 800f644:	4b69      	ldr	r3, [pc, #420]	@ (800f7ec <__ieee754_rem_pio2f+0x244>)
 800f646:	429d      	cmp	r5, r3
 800f648:	d873      	bhi.n	800f732 <__ieee754_rem_pio2f+0x18a>
 800f64a:	f000 f8dd 	bl	800f808 <fabsf>
 800f64e:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800f7f0 <__ieee754_rem_pio2f+0x248>
 800f652:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800f656:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f65a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f65e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f662:	ee17 0a90 	vmov	r0, s15
 800f666:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800f7d8 <__ieee754_rem_pio2f+0x230>
 800f66a:	eea7 0a67 	vfms.f32	s0, s14, s15
 800f66e:	281f      	cmp	r0, #31
 800f670:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800f7e4 <__ieee754_rem_pio2f+0x23c>
 800f674:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f678:	eeb1 6a47 	vneg.f32	s12, s14
 800f67c:	ee70 6a67 	vsub.f32	s13, s0, s15
 800f680:	ee16 1a90 	vmov	r1, s13
 800f684:	dc09      	bgt.n	800f69a <__ieee754_rem_pio2f+0xf2>
 800f686:	4a5b      	ldr	r2, [pc, #364]	@ (800f7f4 <__ieee754_rem_pio2f+0x24c>)
 800f688:	1e47      	subs	r7, r0, #1
 800f68a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800f68e:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800f692:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800f696:	4293      	cmp	r3, r2
 800f698:	d107      	bne.n	800f6aa <__ieee754_rem_pio2f+0x102>
 800f69a:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800f69e:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800f6a2:	2a08      	cmp	r2, #8
 800f6a4:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800f6a8:	dc14      	bgt.n	800f6d4 <__ieee754_rem_pio2f+0x12c>
 800f6aa:	6021      	str	r1, [r4, #0]
 800f6ac:	ed94 7a00 	vldr	s14, [r4]
 800f6b0:	ee30 0a47 	vsub.f32	s0, s0, s14
 800f6b4:	2e00      	cmp	r6, #0
 800f6b6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f6ba:	ed84 0a01 	vstr	s0, [r4, #4]
 800f6be:	daa6      	bge.n	800f60e <__ieee754_rem_pio2f+0x66>
 800f6c0:	eeb1 7a47 	vneg.f32	s14, s14
 800f6c4:	eeb1 0a40 	vneg.f32	s0, s0
 800f6c8:	ed84 7a00 	vstr	s14, [r4]
 800f6cc:	ed84 0a01 	vstr	s0, [r4, #4]
 800f6d0:	4240      	negs	r0, r0
 800f6d2:	e79c      	b.n	800f60e <__ieee754_rem_pio2f+0x66>
 800f6d4:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800f7e0 <__ieee754_rem_pio2f+0x238>
 800f6d8:	eef0 6a40 	vmov.f32	s13, s0
 800f6dc:	eee6 6a25 	vfma.f32	s13, s12, s11
 800f6e0:	ee70 7a66 	vsub.f32	s15, s0, s13
 800f6e4:	eee6 7a25 	vfma.f32	s15, s12, s11
 800f6e8:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800f7e8 <__ieee754_rem_pio2f+0x240>
 800f6ec:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800f6f0:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800f6f4:	ee15 2a90 	vmov	r2, s11
 800f6f8:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800f6fc:	1a5b      	subs	r3, r3, r1
 800f6fe:	2b19      	cmp	r3, #25
 800f700:	dc04      	bgt.n	800f70c <__ieee754_rem_pio2f+0x164>
 800f702:	edc4 5a00 	vstr	s11, [r4]
 800f706:	eeb0 0a66 	vmov.f32	s0, s13
 800f70a:	e7cf      	b.n	800f6ac <__ieee754_rem_pio2f+0x104>
 800f70c:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800f7f8 <__ieee754_rem_pio2f+0x250>
 800f710:	eeb0 0a66 	vmov.f32	s0, s13
 800f714:	eea6 0a25 	vfma.f32	s0, s12, s11
 800f718:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800f71c:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800f7fc <__ieee754_rem_pio2f+0x254>
 800f720:	eee6 7a25 	vfma.f32	s15, s12, s11
 800f724:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800f728:	ee30 7a67 	vsub.f32	s14, s0, s15
 800f72c:	ed84 7a00 	vstr	s14, [r4]
 800f730:	e7bc      	b.n	800f6ac <__ieee754_rem_pio2f+0x104>
 800f732:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800f736:	d306      	bcc.n	800f746 <__ieee754_rem_pio2f+0x19e>
 800f738:	ee70 7a40 	vsub.f32	s15, s0, s0
 800f73c:	edc0 7a01 	vstr	s15, [r0, #4]
 800f740:	edc0 7a00 	vstr	s15, [r0]
 800f744:	e73e      	b.n	800f5c4 <__ieee754_rem_pio2f+0x1c>
 800f746:	15ea      	asrs	r2, r5, #23
 800f748:	3a86      	subs	r2, #134	@ 0x86
 800f74a:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800f74e:	ee07 3a90 	vmov	s15, r3
 800f752:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800f756:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800f800 <__ieee754_rem_pio2f+0x258>
 800f75a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f75e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f762:	ed8d 7a03 	vstr	s14, [sp, #12]
 800f766:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f76a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800f76e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f772:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f776:	ed8d 7a04 	vstr	s14, [sp, #16]
 800f77a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f77e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f786:	edcd 7a05 	vstr	s15, [sp, #20]
 800f78a:	d11e      	bne.n	800f7ca <__ieee754_rem_pio2f+0x222>
 800f78c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f794:	bf0c      	ite	eq
 800f796:	2301      	moveq	r3, #1
 800f798:	2302      	movne	r3, #2
 800f79a:	491a      	ldr	r1, [pc, #104]	@ (800f804 <__ieee754_rem_pio2f+0x25c>)
 800f79c:	9101      	str	r1, [sp, #4]
 800f79e:	2102      	movs	r1, #2
 800f7a0:	9100      	str	r1, [sp, #0]
 800f7a2:	a803      	add	r0, sp, #12
 800f7a4:	4621      	mov	r1, r4
 800f7a6:	f000 f837 	bl	800f818 <__kernel_rem_pio2f>
 800f7aa:	2e00      	cmp	r6, #0
 800f7ac:	f6bf af2f 	bge.w	800f60e <__ieee754_rem_pio2f+0x66>
 800f7b0:	edd4 7a00 	vldr	s15, [r4]
 800f7b4:	eef1 7a67 	vneg.f32	s15, s15
 800f7b8:	edc4 7a00 	vstr	s15, [r4]
 800f7bc:	edd4 7a01 	vldr	s15, [r4, #4]
 800f7c0:	eef1 7a67 	vneg.f32	s15, s15
 800f7c4:	edc4 7a01 	vstr	s15, [r4, #4]
 800f7c8:	e782      	b.n	800f6d0 <__ieee754_rem_pio2f+0x128>
 800f7ca:	2303      	movs	r3, #3
 800f7cc:	e7e5      	b.n	800f79a <__ieee754_rem_pio2f+0x1f2>
 800f7ce:	bf00      	nop
 800f7d0:	3f490fd8 	.word	0x3f490fd8
 800f7d4:	4016cbe3 	.word	0x4016cbe3
 800f7d8:	3fc90f80 	.word	0x3fc90f80
 800f7dc:	3fc90fd0 	.word	0x3fc90fd0
 800f7e0:	37354400 	.word	0x37354400
 800f7e4:	37354443 	.word	0x37354443
 800f7e8:	2e85a308 	.word	0x2e85a308
 800f7ec:	43490f80 	.word	0x43490f80
 800f7f0:	3f22f984 	.word	0x3f22f984
 800f7f4:	0800ff10 	.word	0x0800ff10
 800f7f8:	2e85a300 	.word	0x2e85a300
 800f7fc:	248d3132 	.word	0x248d3132
 800f800:	43800000 	.word	0x43800000
 800f804:	0800ff90 	.word	0x0800ff90

0800f808 <fabsf>:
 800f808:	ee10 3a10 	vmov	r3, s0
 800f80c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f810:	ee00 3a10 	vmov	s0, r3
 800f814:	4770      	bx	lr
	...

0800f818 <__kernel_rem_pio2f>:
 800f818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f81c:	ed2d 8b04 	vpush	{d8-d9}
 800f820:	b0d9      	sub	sp, #356	@ 0x164
 800f822:	4690      	mov	r8, r2
 800f824:	9001      	str	r0, [sp, #4]
 800f826:	4ab9      	ldr	r2, [pc, #740]	@ (800fb0c <__kernel_rem_pio2f+0x2f4>)
 800f828:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800f82a:	f118 0f04 	cmn.w	r8, #4
 800f82e:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800f832:	460f      	mov	r7, r1
 800f834:	f103 3bff 	add.w	fp, r3, #4294967295
 800f838:	db27      	blt.n	800f88a <__kernel_rem_pio2f+0x72>
 800f83a:	f1b8 0203 	subs.w	r2, r8, #3
 800f83e:	bf48      	it	mi
 800f840:	f108 0204 	addmi.w	r2, r8, #4
 800f844:	10d2      	asrs	r2, r2, #3
 800f846:	1c55      	adds	r5, r2, #1
 800f848:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800f84a:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 800fb1c <__kernel_rem_pio2f+0x304>
 800f84e:	00e8      	lsls	r0, r5, #3
 800f850:	eba2 060b 	sub.w	r6, r2, fp
 800f854:	9002      	str	r0, [sp, #8]
 800f856:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800f85a:	eb0a 0c0b 	add.w	ip, sl, fp
 800f85e:	ac1c      	add	r4, sp, #112	@ 0x70
 800f860:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800f864:	2000      	movs	r0, #0
 800f866:	4560      	cmp	r0, ip
 800f868:	dd11      	ble.n	800f88e <__kernel_rem_pio2f+0x76>
 800f86a:	a91c      	add	r1, sp, #112	@ 0x70
 800f86c:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800f870:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800f874:	f04f 0c00 	mov.w	ip, #0
 800f878:	45d4      	cmp	ip, sl
 800f87a:	dc27      	bgt.n	800f8cc <__kernel_rem_pio2f+0xb4>
 800f87c:	f8dd e004 	ldr.w	lr, [sp, #4]
 800f880:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 800fb1c <__kernel_rem_pio2f+0x304>
 800f884:	4606      	mov	r6, r0
 800f886:	2400      	movs	r4, #0
 800f888:	e016      	b.n	800f8b8 <__kernel_rem_pio2f+0xa0>
 800f88a:	2200      	movs	r2, #0
 800f88c:	e7db      	b.n	800f846 <__kernel_rem_pio2f+0x2e>
 800f88e:	42c6      	cmn	r6, r0
 800f890:	bf5d      	ittte	pl
 800f892:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800f896:	ee07 1a90 	vmovpl	s15, r1
 800f89a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800f89e:	eef0 7a47 	vmovmi.f32	s15, s14
 800f8a2:	ece4 7a01 	vstmia	r4!, {s15}
 800f8a6:	3001      	adds	r0, #1
 800f8a8:	e7dd      	b.n	800f866 <__kernel_rem_pio2f+0x4e>
 800f8aa:	ecfe 6a01 	vldmia	lr!, {s13}
 800f8ae:	ed96 7a00 	vldr	s14, [r6]
 800f8b2:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f8b6:	3401      	adds	r4, #1
 800f8b8:	455c      	cmp	r4, fp
 800f8ba:	f1a6 0604 	sub.w	r6, r6, #4
 800f8be:	ddf4      	ble.n	800f8aa <__kernel_rem_pio2f+0x92>
 800f8c0:	ece9 7a01 	vstmia	r9!, {s15}
 800f8c4:	f10c 0c01 	add.w	ip, ip, #1
 800f8c8:	3004      	adds	r0, #4
 800f8ca:	e7d5      	b.n	800f878 <__kernel_rem_pio2f+0x60>
 800f8cc:	a908      	add	r1, sp, #32
 800f8ce:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f8d2:	9104      	str	r1, [sp, #16]
 800f8d4:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800f8d6:	eddf 8a90 	vldr	s17, [pc, #576]	@ 800fb18 <__kernel_rem_pio2f+0x300>
 800f8da:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 800fb14 <__kernel_rem_pio2f+0x2fc>
 800f8de:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800f8e2:	9203      	str	r2, [sp, #12]
 800f8e4:	4654      	mov	r4, sl
 800f8e6:	00a2      	lsls	r2, r4, #2
 800f8e8:	9205      	str	r2, [sp, #20]
 800f8ea:	aa58      	add	r2, sp, #352	@ 0x160
 800f8ec:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800f8f0:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800f8f4:	a944      	add	r1, sp, #272	@ 0x110
 800f8f6:	aa08      	add	r2, sp, #32
 800f8f8:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800f8fc:	4694      	mov	ip, r2
 800f8fe:	4626      	mov	r6, r4
 800f900:	2e00      	cmp	r6, #0
 800f902:	f1a0 0004 	sub.w	r0, r0, #4
 800f906:	dc4c      	bgt.n	800f9a2 <__kernel_rem_pio2f+0x18a>
 800f908:	4628      	mov	r0, r5
 800f90a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f90e:	f000 f9f5 	bl	800fcfc <scalbnf>
 800f912:	eeb0 8a40 	vmov.f32	s16, s0
 800f916:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800f91a:	ee28 0a00 	vmul.f32	s0, s16, s0
 800f91e:	f000 fa53 	bl	800fdc8 <floorf>
 800f922:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800f926:	eea0 8a67 	vfms.f32	s16, s0, s15
 800f92a:	2d00      	cmp	r5, #0
 800f92c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f930:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800f934:	ee17 9a90 	vmov	r9, s15
 800f938:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f93c:	ee38 8a67 	vsub.f32	s16, s16, s15
 800f940:	dd41      	ble.n	800f9c6 <__kernel_rem_pio2f+0x1ae>
 800f942:	f104 3cff 	add.w	ip, r4, #4294967295
 800f946:	a908      	add	r1, sp, #32
 800f948:	f1c5 0e08 	rsb	lr, r5, #8
 800f94c:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800f950:	fa46 f00e 	asr.w	r0, r6, lr
 800f954:	4481      	add	r9, r0
 800f956:	fa00 f00e 	lsl.w	r0, r0, lr
 800f95a:	1a36      	subs	r6, r6, r0
 800f95c:	f1c5 0007 	rsb	r0, r5, #7
 800f960:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800f964:	4106      	asrs	r6, r0
 800f966:	2e00      	cmp	r6, #0
 800f968:	dd3c      	ble.n	800f9e4 <__kernel_rem_pio2f+0x1cc>
 800f96a:	f04f 0e00 	mov.w	lr, #0
 800f96e:	f109 0901 	add.w	r9, r9, #1
 800f972:	4670      	mov	r0, lr
 800f974:	4574      	cmp	r4, lr
 800f976:	dc68      	bgt.n	800fa4a <__kernel_rem_pio2f+0x232>
 800f978:	2d00      	cmp	r5, #0
 800f97a:	dd03      	ble.n	800f984 <__kernel_rem_pio2f+0x16c>
 800f97c:	2d01      	cmp	r5, #1
 800f97e:	d074      	beq.n	800fa6a <__kernel_rem_pio2f+0x252>
 800f980:	2d02      	cmp	r5, #2
 800f982:	d07d      	beq.n	800fa80 <__kernel_rem_pio2f+0x268>
 800f984:	2e02      	cmp	r6, #2
 800f986:	d12d      	bne.n	800f9e4 <__kernel_rem_pio2f+0x1cc>
 800f988:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800f98c:	ee30 8a48 	vsub.f32	s16, s0, s16
 800f990:	b340      	cbz	r0, 800f9e4 <__kernel_rem_pio2f+0x1cc>
 800f992:	4628      	mov	r0, r5
 800f994:	9306      	str	r3, [sp, #24]
 800f996:	f000 f9b1 	bl	800fcfc <scalbnf>
 800f99a:	9b06      	ldr	r3, [sp, #24]
 800f99c:	ee38 8a40 	vsub.f32	s16, s16, s0
 800f9a0:	e020      	b.n	800f9e4 <__kernel_rem_pio2f+0x1cc>
 800f9a2:	ee60 7a28 	vmul.f32	s15, s0, s17
 800f9a6:	3e01      	subs	r6, #1
 800f9a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f9ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f9b0:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800f9b4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800f9b8:	ecac 0a01 	vstmia	ip!, {s0}
 800f9bc:	ed90 0a00 	vldr	s0, [r0]
 800f9c0:	ee37 0a80 	vadd.f32	s0, s15, s0
 800f9c4:	e79c      	b.n	800f900 <__kernel_rem_pio2f+0xe8>
 800f9c6:	d105      	bne.n	800f9d4 <__kernel_rem_pio2f+0x1bc>
 800f9c8:	1e60      	subs	r0, r4, #1
 800f9ca:	a908      	add	r1, sp, #32
 800f9cc:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800f9d0:	11f6      	asrs	r6, r6, #7
 800f9d2:	e7c8      	b.n	800f966 <__kernel_rem_pio2f+0x14e>
 800f9d4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800f9d8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800f9dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9e0:	da31      	bge.n	800fa46 <__kernel_rem_pio2f+0x22e>
 800f9e2:	2600      	movs	r6, #0
 800f9e4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800f9e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9ec:	f040 8098 	bne.w	800fb20 <__kernel_rem_pio2f+0x308>
 800f9f0:	1e60      	subs	r0, r4, #1
 800f9f2:	2200      	movs	r2, #0
 800f9f4:	4550      	cmp	r0, sl
 800f9f6:	da4b      	bge.n	800fa90 <__kernel_rem_pio2f+0x278>
 800f9f8:	2a00      	cmp	r2, #0
 800f9fa:	d065      	beq.n	800fac8 <__kernel_rem_pio2f+0x2b0>
 800f9fc:	3c01      	subs	r4, #1
 800f9fe:	ab08      	add	r3, sp, #32
 800fa00:	3d08      	subs	r5, #8
 800fa02:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d0f8      	beq.n	800f9fc <__kernel_rem_pio2f+0x1e4>
 800fa0a:	4628      	mov	r0, r5
 800fa0c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800fa10:	f000 f974 	bl	800fcfc <scalbnf>
 800fa14:	1c63      	adds	r3, r4, #1
 800fa16:	aa44      	add	r2, sp, #272	@ 0x110
 800fa18:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800fb18 <__kernel_rem_pio2f+0x300>
 800fa1c:	0099      	lsls	r1, r3, #2
 800fa1e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800fa22:	4623      	mov	r3, r4
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	f280 80a9 	bge.w	800fb7c <__kernel_rem_pio2f+0x364>
 800fa2a:	4623      	mov	r3, r4
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	f2c0 80c7 	blt.w	800fbc0 <__kernel_rem_pio2f+0x3a8>
 800fa32:	aa44      	add	r2, sp, #272	@ 0x110
 800fa34:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800fa38:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800fb10 <__kernel_rem_pio2f+0x2f8>
 800fa3c:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800fb1c <__kernel_rem_pio2f+0x304>
 800fa40:	2000      	movs	r0, #0
 800fa42:	1ae2      	subs	r2, r4, r3
 800fa44:	e0b1      	b.n	800fbaa <__kernel_rem_pio2f+0x392>
 800fa46:	2602      	movs	r6, #2
 800fa48:	e78f      	b.n	800f96a <__kernel_rem_pio2f+0x152>
 800fa4a:	f852 1b04 	ldr.w	r1, [r2], #4
 800fa4e:	b948      	cbnz	r0, 800fa64 <__kernel_rem_pio2f+0x24c>
 800fa50:	b121      	cbz	r1, 800fa5c <__kernel_rem_pio2f+0x244>
 800fa52:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800fa56:	f842 1c04 	str.w	r1, [r2, #-4]
 800fa5a:	2101      	movs	r1, #1
 800fa5c:	f10e 0e01 	add.w	lr, lr, #1
 800fa60:	4608      	mov	r0, r1
 800fa62:	e787      	b.n	800f974 <__kernel_rem_pio2f+0x15c>
 800fa64:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800fa68:	e7f5      	b.n	800fa56 <__kernel_rem_pio2f+0x23e>
 800fa6a:	f104 3cff 	add.w	ip, r4, #4294967295
 800fa6e:	aa08      	add	r2, sp, #32
 800fa70:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800fa74:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800fa78:	a908      	add	r1, sp, #32
 800fa7a:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800fa7e:	e781      	b.n	800f984 <__kernel_rem_pio2f+0x16c>
 800fa80:	f104 3cff 	add.w	ip, r4, #4294967295
 800fa84:	aa08      	add	r2, sp, #32
 800fa86:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800fa8a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800fa8e:	e7f3      	b.n	800fa78 <__kernel_rem_pio2f+0x260>
 800fa90:	a908      	add	r1, sp, #32
 800fa92:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800fa96:	3801      	subs	r0, #1
 800fa98:	430a      	orrs	r2, r1
 800fa9a:	e7ab      	b.n	800f9f4 <__kernel_rem_pio2f+0x1dc>
 800fa9c:	3201      	adds	r2, #1
 800fa9e:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800faa2:	2e00      	cmp	r6, #0
 800faa4:	d0fa      	beq.n	800fa9c <__kernel_rem_pio2f+0x284>
 800faa6:	9905      	ldr	r1, [sp, #20]
 800faa8:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800faac:	eb0d 0001 	add.w	r0, sp, r1
 800fab0:	18e6      	adds	r6, r4, r3
 800fab2:	a91c      	add	r1, sp, #112	@ 0x70
 800fab4:	f104 0c01 	add.w	ip, r4, #1
 800fab8:	384c      	subs	r0, #76	@ 0x4c
 800faba:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800fabe:	4422      	add	r2, r4
 800fac0:	4562      	cmp	r2, ip
 800fac2:	da04      	bge.n	800face <__kernel_rem_pio2f+0x2b6>
 800fac4:	4614      	mov	r4, r2
 800fac6:	e70e      	b.n	800f8e6 <__kernel_rem_pio2f+0xce>
 800fac8:	9804      	ldr	r0, [sp, #16]
 800faca:	2201      	movs	r2, #1
 800facc:	e7e7      	b.n	800fa9e <__kernel_rem_pio2f+0x286>
 800face:	9903      	ldr	r1, [sp, #12]
 800fad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 800fad4:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800fad8:	9105      	str	r1, [sp, #20]
 800fada:	ee07 1a90 	vmov	s15, r1
 800fade:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fae2:	2400      	movs	r4, #0
 800fae4:	ece6 7a01 	vstmia	r6!, {s15}
 800fae8:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800fb1c <__kernel_rem_pio2f+0x304>
 800faec:	46b1      	mov	r9, r6
 800faee:	455c      	cmp	r4, fp
 800faf0:	dd04      	ble.n	800fafc <__kernel_rem_pio2f+0x2e4>
 800faf2:	ece0 7a01 	vstmia	r0!, {s15}
 800faf6:	f10c 0c01 	add.w	ip, ip, #1
 800fafa:	e7e1      	b.n	800fac0 <__kernel_rem_pio2f+0x2a8>
 800fafc:	ecfe 6a01 	vldmia	lr!, {s13}
 800fb00:	ed39 7a01 	vldmdb	r9!, {s14}
 800fb04:	3401      	adds	r4, #1
 800fb06:	eee6 7a87 	vfma.f32	s15, s13, s14
 800fb0a:	e7f0      	b.n	800faee <__kernel_rem_pio2f+0x2d6>
 800fb0c:	080102d4 	.word	0x080102d4
 800fb10:	080102a8 	.word	0x080102a8
 800fb14:	43800000 	.word	0x43800000
 800fb18:	3b800000 	.word	0x3b800000
 800fb1c:	00000000 	.word	0x00000000
 800fb20:	9b02      	ldr	r3, [sp, #8]
 800fb22:	eeb0 0a48 	vmov.f32	s0, s16
 800fb26:	eba3 0008 	sub.w	r0, r3, r8
 800fb2a:	f000 f8e7 	bl	800fcfc <scalbnf>
 800fb2e:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800fb14 <__kernel_rem_pio2f+0x2fc>
 800fb32:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800fb36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb3a:	db19      	blt.n	800fb70 <__kernel_rem_pio2f+0x358>
 800fb3c:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800fb18 <__kernel_rem_pio2f+0x300>
 800fb40:	ee60 7a27 	vmul.f32	s15, s0, s15
 800fb44:	aa08      	add	r2, sp, #32
 800fb46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fb4a:	3508      	adds	r5, #8
 800fb4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fb50:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800fb54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fb58:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800fb5c:	ee10 3a10 	vmov	r3, s0
 800fb60:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800fb64:	ee17 3a90 	vmov	r3, s15
 800fb68:	3401      	adds	r4, #1
 800fb6a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800fb6e:	e74c      	b.n	800fa0a <__kernel_rem_pio2f+0x1f2>
 800fb70:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800fb74:	aa08      	add	r2, sp, #32
 800fb76:	ee10 3a10 	vmov	r3, s0
 800fb7a:	e7f6      	b.n	800fb6a <__kernel_rem_pio2f+0x352>
 800fb7c:	a808      	add	r0, sp, #32
 800fb7e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800fb82:	9001      	str	r0, [sp, #4]
 800fb84:	ee07 0a90 	vmov	s15, r0
 800fb88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fb8c:	3b01      	subs	r3, #1
 800fb8e:	ee67 7a80 	vmul.f32	s15, s15, s0
 800fb92:	ee20 0a07 	vmul.f32	s0, s0, s14
 800fb96:	ed62 7a01 	vstmdb	r2!, {s15}
 800fb9a:	e743      	b.n	800fa24 <__kernel_rem_pio2f+0x20c>
 800fb9c:	ecfc 6a01 	vldmia	ip!, {s13}
 800fba0:	ecb5 7a01 	vldmia	r5!, {s14}
 800fba4:	eee6 7a87 	vfma.f32	s15, s13, s14
 800fba8:	3001      	adds	r0, #1
 800fbaa:	4550      	cmp	r0, sl
 800fbac:	dc01      	bgt.n	800fbb2 <__kernel_rem_pio2f+0x39a>
 800fbae:	4282      	cmp	r2, r0
 800fbb0:	daf4      	bge.n	800fb9c <__kernel_rem_pio2f+0x384>
 800fbb2:	a858      	add	r0, sp, #352	@ 0x160
 800fbb4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800fbb8:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800fbbc:	3b01      	subs	r3, #1
 800fbbe:	e735      	b.n	800fa2c <__kernel_rem_pio2f+0x214>
 800fbc0:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800fbc2:	2b02      	cmp	r3, #2
 800fbc4:	dc09      	bgt.n	800fbda <__kernel_rem_pio2f+0x3c2>
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	dc2b      	bgt.n	800fc22 <__kernel_rem_pio2f+0x40a>
 800fbca:	d044      	beq.n	800fc56 <__kernel_rem_pio2f+0x43e>
 800fbcc:	f009 0007 	and.w	r0, r9, #7
 800fbd0:	b059      	add	sp, #356	@ 0x164
 800fbd2:	ecbd 8b04 	vpop	{d8-d9}
 800fbd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbda:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800fbdc:	2b03      	cmp	r3, #3
 800fbde:	d1f5      	bne.n	800fbcc <__kernel_rem_pio2f+0x3b4>
 800fbe0:	aa30      	add	r2, sp, #192	@ 0xc0
 800fbe2:	1f0b      	subs	r3, r1, #4
 800fbe4:	4413      	add	r3, r2
 800fbe6:	461a      	mov	r2, r3
 800fbe8:	4620      	mov	r0, r4
 800fbea:	2800      	cmp	r0, #0
 800fbec:	f1a2 0204 	sub.w	r2, r2, #4
 800fbf0:	dc52      	bgt.n	800fc98 <__kernel_rem_pio2f+0x480>
 800fbf2:	4622      	mov	r2, r4
 800fbf4:	2a01      	cmp	r2, #1
 800fbf6:	f1a3 0304 	sub.w	r3, r3, #4
 800fbfa:	dc5d      	bgt.n	800fcb8 <__kernel_rem_pio2f+0x4a0>
 800fbfc:	ab30      	add	r3, sp, #192	@ 0xc0
 800fbfe:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 800fb1c <__kernel_rem_pio2f+0x304>
 800fc02:	440b      	add	r3, r1
 800fc04:	2c01      	cmp	r4, #1
 800fc06:	dc67      	bgt.n	800fcd8 <__kernel_rem_pio2f+0x4c0>
 800fc08:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800fc0c:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800fc10:	2e00      	cmp	r6, #0
 800fc12:	d167      	bne.n	800fce4 <__kernel_rem_pio2f+0x4cc>
 800fc14:	edc7 6a00 	vstr	s13, [r7]
 800fc18:	ed87 7a01 	vstr	s14, [r7, #4]
 800fc1c:	edc7 7a02 	vstr	s15, [r7, #8]
 800fc20:	e7d4      	b.n	800fbcc <__kernel_rem_pio2f+0x3b4>
 800fc22:	ab30      	add	r3, sp, #192	@ 0xc0
 800fc24:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 800fb1c <__kernel_rem_pio2f+0x304>
 800fc28:	440b      	add	r3, r1
 800fc2a:	4622      	mov	r2, r4
 800fc2c:	2a00      	cmp	r2, #0
 800fc2e:	da24      	bge.n	800fc7a <__kernel_rem_pio2f+0x462>
 800fc30:	b34e      	cbz	r6, 800fc86 <__kernel_rem_pio2f+0x46e>
 800fc32:	eef1 7a47 	vneg.f32	s15, s14
 800fc36:	edc7 7a00 	vstr	s15, [r7]
 800fc3a:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800fc3e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fc42:	aa31      	add	r2, sp, #196	@ 0xc4
 800fc44:	2301      	movs	r3, #1
 800fc46:	429c      	cmp	r4, r3
 800fc48:	da20      	bge.n	800fc8c <__kernel_rem_pio2f+0x474>
 800fc4a:	b10e      	cbz	r6, 800fc50 <__kernel_rem_pio2f+0x438>
 800fc4c:	eef1 7a67 	vneg.f32	s15, s15
 800fc50:	edc7 7a01 	vstr	s15, [r7, #4]
 800fc54:	e7ba      	b.n	800fbcc <__kernel_rem_pio2f+0x3b4>
 800fc56:	ab30      	add	r3, sp, #192	@ 0xc0
 800fc58:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 800fb1c <__kernel_rem_pio2f+0x304>
 800fc5c:	440b      	add	r3, r1
 800fc5e:	2c00      	cmp	r4, #0
 800fc60:	da05      	bge.n	800fc6e <__kernel_rem_pio2f+0x456>
 800fc62:	b10e      	cbz	r6, 800fc68 <__kernel_rem_pio2f+0x450>
 800fc64:	eef1 7a67 	vneg.f32	s15, s15
 800fc68:	edc7 7a00 	vstr	s15, [r7]
 800fc6c:	e7ae      	b.n	800fbcc <__kernel_rem_pio2f+0x3b4>
 800fc6e:	ed33 7a01 	vldmdb	r3!, {s14}
 800fc72:	3c01      	subs	r4, #1
 800fc74:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fc78:	e7f1      	b.n	800fc5e <__kernel_rem_pio2f+0x446>
 800fc7a:	ed73 7a01 	vldmdb	r3!, {s15}
 800fc7e:	3a01      	subs	r2, #1
 800fc80:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fc84:	e7d2      	b.n	800fc2c <__kernel_rem_pio2f+0x414>
 800fc86:	eef0 7a47 	vmov.f32	s15, s14
 800fc8a:	e7d4      	b.n	800fc36 <__kernel_rem_pio2f+0x41e>
 800fc8c:	ecb2 7a01 	vldmia	r2!, {s14}
 800fc90:	3301      	adds	r3, #1
 800fc92:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fc96:	e7d6      	b.n	800fc46 <__kernel_rem_pio2f+0x42e>
 800fc98:	edd2 7a00 	vldr	s15, [r2]
 800fc9c:	edd2 6a01 	vldr	s13, [r2, #4]
 800fca0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800fca4:	3801      	subs	r0, #1
 800fca6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fcaa:	ed82 7a00 	vstr	s14, [r2]
 800fcae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fcb2:	edc2 7a01 	vstr	s15, [r2, #4]
 800fcb6:	e798      	b.n	800fbea <__kernel_rem_pio2f+0x3d2>
 800fcb8:	edd3 7a00 	vldr	s15, [r3]
 800fcbc:	edd3 6a01 	vldr	s13, [r3, #4]
 800fcc0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800fcc4:	3a01      	subs	r2, #1
 800fcc6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fcca:	ed83 7a00 	vstr	s14, [r3]
 800fcce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fcd2:	edc3 7a01 	vstr	s15, [r3, #4]
 800fcd6:	e78d      	b.n	800fbf4 <__kernel_rem_pio2f+0x3dc>
 800fcd8:	ed33 7a01 	vldmdb	r3!, {s14}
 800fcdc:	3c01      	subs	r4, #1
 800fcde:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fce2:	e78f      	b.n	800fc04 <__kernel_rem_pio2f+0x3ec>
 800fce4:	eef1 6a66 	vneg.f32	s13, s13
 800fce8:	eeb1 7a47 	vneg.f32	s14, s14
 800fcec:	edc7 6a00 	vstr	s13, [r7]
 800fcf0:	ed87 7a01 	vstr	s14, [r7, #4]
 800fcf4:	eef1 7a67 	vneg.f32	s15, s15
 800fcf8:	e790      	b.n	800fc1c <__kernel_rem_pio2f+0x404>
 800fcfa:	bf00      	nop

0800fcfc <scalbnf>:
 800fcfc:	ee10 3a10 	vmov	r3, s0
 800fd00:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800fd04:	d02b      	beq.n	800fd5e <scalbnf+0x62>
 800fd06:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800fd0a:	d302      	bcc.n	800fd12 <scalbnf+0x16>
 800fd0c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800fd10:	4770      	bx	lr
 800fd12:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800fd16:	d123      	bne.n	800fd60 <scalbnf+0x64>
 800fd18:	4b24      	ldr	r3, [pc, #144]	@ (800fdac <scalbnf+0xb0>)
 800fd1a:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800fdb0 <scalbnf+0xb4>
 800fd1e:	4298      	cmp	r0, r3
 800fd20:	ee20 0a27 	vmul.f32	s0, s0, s15
 800fd24:	db17      	blt.n	800fd56 <scalbnf+0x5a>
 800fd26:	ee10 3a10 	vmov	r3, s0
 800fd2a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800fd2e:	3a19      	subs	r2, #25
 800fd30:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800fd34:	4288      	cmp	r0, r1
 800fd36:	dd15      	ble.n	800fd64 <scalbnf+0x68>
 800fd38:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800fdb4 <scalbnf+0xb8>
 800fd3c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800fdb8 <scalbnf+0xbc>
 800fd40:	ee10 3a10 	vmov	r3, s0
 800fd44:	eeb0 7a67 	vmov.f32	s14, s15
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	bfb8      	it	lt
 800fd4c:	eef0 7a66 	vmovlt.f32	s15, s13
 800fd50:	ee27 0a87 	vmul.f32	s0, s15, s14
 800fd54:	4770      	bx	lr
 800fd56:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800fdbc <scalbnf+0xc0>
 800fd5a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800fd5e:	4770      	bx	lr
 800fd60:	0dd2      	lsrs	r2, r2, #23
 800fd62:	e7e5      	b.n	800fd30 <scalbnf+0x34>
 800fd64:	4410      	add	r0, r2
 800fd66:	28fe      	cmp	r0, #254	@ 0xfe
 800fd68:	dce6      	bgt.n	800fd38 <scalbnf+0x3c>
 800fd6a:	2800      	cmp	r0, #0
 800fd6c:	dd06      	ble.n	800fd7c <scalbnf+0x80>
 800fd6e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800fd72:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800fd76:	ee00 3a10 	vmov	s0, r3
 800fd7a:	4770      	bx	lr
 800fd7c:	f110 0f16 	cmn.w	r0, #22
 800fd80:	da09      	bge.n	800fd96 <scalbnf+0x9a>
 800fd82:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800fdbc <scalbnf+0xc0>
 800fd86:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800fdc0 <scalbnf+0xc4>
 800fd8a:	ee10 3a10 	vmov	r3, s0
 800fd8e:	eeb0 7a67 	vmov.f32	s14, s15
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	e7d9      	b.n	800fd4a <scalbnf+0x4e>
 800fd96:	3019      	adds	r0, #25
 800fd98:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800fd9c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800fda0:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800fdc4 <scalbnf+0xc8>
 800fda4:	ee07 3a90 	vmov	s15, r3
 800fda8:	e7d7      	b.n	800fd5a <scalbnf+0x5e>
 800fdaa:	bf00      	nop
 800fdac:	ffff3cb0 	.word	0xffff3cb0
 800fdb0:	4c000000 	.word	0x4c000000
 800fdb4:	7149f2ca 	.word	0x7149f2ca
 800fdb8:	f149f2ca 	.word	0xf149f2ca
 800fdbc:	0da24260 	.word	0x0da24260
 800fdc0:	8da24260 	.word	0x8da24260
 800fdc4:	33000000 	.word	0x33000000

0800fdc8 <floorf>:
 800fdc8:	ee10 3a10 	vmov	r3, s0
 800fdcc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800fdd0:	3a7f      	subs	r2, #127	@ 0x7f
 800fdd2:	2a16      	cmp	r2, #22
 800fdd4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800fdd8:	dc2b      	bgt.n	800fe32 <floorf+0x6a>
 800fdda:	2a00      	cmp	r2, #0
 800fddc:	da12      	bge.n	800fe04 <floorf+0x3c>
 800fdde:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800fe44 <floorf+0x7c>
 800fde2:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fde6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800fdea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdee:	dd06      	ble.n	800fdfe <floorf+0x36>
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	da24      	bge.n	800fe3e <floorf+0x76>
 800fdf4:	2900      	cmp	r1, #0
 800fdf6:	4b14      	ldr	r3, [pc, #80]	@ (800fe48 <floorf+0x80>)
 800fdf8:	bf08      	it	eq
 800fdfa:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800fdfe:	ee00 3a10 	vmov	s0, r3
 800fe02:	4770      	bx	lr
 800fe04:	4911      	ldr	r1, [pc, #68]	@ (800fe4c <floorf+0x84>)
 800fe06:	4111      	asrs	r1, r2
 800fe08:	420b      	tst	r3, r1
 800fe0a:	d0fa      	beq.n	800fe02 <floorf+0x3a>
 800fe0c:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800fe44 <floorf+0x7c>
 800fe10:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fe14:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800fe18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe1c:	ddef      	ble.n	800fdfe <floorf+0x36>
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	bfbe      	ittt	lt
 800fe22:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800fe26:	fa40 f202 	asrlt.w	r2, r0, r2
 800fe2a:	189b      	addlt	r3, r3, r2
 800fe2c:	ea23 0301 	bic.w	r3, r3, r1
 800fe30:	e7e5      	b.n	800fdfe <floorf+0x36>
 800fe32:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800fe36:	d3e4      	bcc.n	800fe02 <floorf+0x3a>
 800fe38:	ee30 0a00 	vadd.f32	s0, s0, s0
 800fe3c:	4770      	bx	lr
 800fe3e:	2300      	movs	r3, #0
 800fe40:	e7dd      	b.n	800fdfe <floorf+0x36>
 800fe42:	bf00      	nop
 800fe44:	7149f2ca 	.word	0x7149f2ca
 800fe48:	bf800000 	.word	0xbf800000
 800fe4c:	007fffff 	.word	0x007fffff

0800fe50 <_init>:
 800fe50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe52:	bf00      	nop
 800fe54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe56:	bc08      	pop	{r3}
 800fe58:	469e      	mov	lr, r3
 800fe5a:	4770      	bx	lr

0800fe5c <_fini>:
 800fe5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe5e:	bf00      	nop
 800fe60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe62:	bc08      	pop	{r3}
 800fe64:	469e      	mov	lr, r3
 800fe66:	4770      	bx	lr
