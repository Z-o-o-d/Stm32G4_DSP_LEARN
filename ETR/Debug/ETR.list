
ETR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013624  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a8  08013808  08013808  00014808  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013cb0  08013cb0  0001534c  2**0
                  CONTENTS
  4 .ARM          00000008  08013cb0  08013cb0  00014cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013cb8  08013cb8  0001534c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013cb8  08013cb8  00014cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08013cbc  08013cbc  00014cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000034c  20000000  08013cc0  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003594  2000034c  0801400c  0001534c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200038e0  0801400c  000158e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001534c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d9ff  00000000  00000000  0001537c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000045b3  00000000  00000000  00032d7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a10  00000000  00000000  00037330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013d6  00000000  00000000  00038d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a818  00000000  00000000  0003a116  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f89a  00000000  00000000  0006492e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00115fac  00000000  00000000  000841c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019a174  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008294  00000000  00000000  0019a1b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  001a244c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000034c 	.word	0x2000034c
 80001fc:	00000000 	.word	0x00000000
 8000200:	080137ec 	.word	0x080137ec

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000350 	.word	0x20000350
 800021c:	080137ec 	.word	0x080137ec

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff23 	bl	8000b2c <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc99 	bl	8000648 <__aeabi_dmul>
 8000d16:	f7ff ff6f 	bl	8000bf8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc1a 	bl	8000554 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc90 	bl	8000648 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff fad2 	bl	80002d8 <__aeabi_dsub>
 8000d34:	f7ff ff60 	bl	8000bf8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <SysTick_GetValue>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t SysTick_GetValue(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
    return SysTick->VAL;
 8000d48:	4b03      	ldr	r3, [pc, #12]	@ (8000d58 <SysTick_GetValue+0x14>)
 8000d4a:	689b      	ldr	r3, [r3, #8]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	e000e010 	.word	0xe000e010

08000d5c <ConvertToVoltage>:




float ConvertToVoltage(uint32_t adcValue)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
    return (adcValue / ADC_RESOLUTION) * VREF_VOLTAGE -VREF_VOLTAGE/2;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	ee07 3a90 	vmov	s15, r3
 8000d6a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000d6e:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8000d90 <ConvertToVoltage+0x34>
 8000d72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d76:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000d7a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000d7e:	ee77 7ac7 	vsub.f32	s15, s15, s14
}
 8000d82:	eeb0 0a67 	vmov.f32	s0, s15
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	457ff000 	.word	0x457ff000

08000d94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d96:	b08f      	sub	sp, #60	@ 0x3c
 8000d98:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d9a:	f001 fc68 	bl	800266e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d9e:	f000 f8c7 	bl	8000f30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000da2:	f000 fdc5 	bl	8001930 <MX_GPIO_Init>
  MX_DMA_Init();
 8000da6:	f000 fd81 	bl	80018ac <MX_DMA_Init>
  MX_TIM2_Init();
 8000daa:	f000 fb8f 	bl	80014cc <MX_TIM2_Init>
  MX_TIM4_Init();
 8000dae:	f000 fc8f 	bl	80016d0 <MX_TIM4_Init>
  MX_USB_Device_Init();
 8000db2:	f00d fca9 	bl	800e708 <MX_USB_Device_Init>
  MX_TIM3_Init();
 8000db6:	f000 fc15 	bl	80015e4 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000dba:	f000 f905 	bl	8000fc8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000dbe:	f000 f97d 	bl	80010bc <MX_ADC2_Init>
  MX_ADC3_Init();
 8000dc2:	f000 f9e3 	bl	800118c <MX_ADC3_Init>
  MX_OPAMP1_Init();
 8000dc6:	f000 fa5b 	bl	8001280 <MX_OPAMP1_Init>
  MX_OPAMP3_Init();
 8000dca:	f000 fa7f 	bl	80012cc <MX_OPAMP3_Init>
  MX_TIM1_Init();
 8000dce:	f000 faa3 	bl	8001318 <MX_TIM1_Init>
  MX_TIM15_Init();
 8000dd2:	f000 fccd 	bl	8001770 <MX_TIM15_Init>





  HAL_OPAMP_Start(&hopamp1);
 8000dd6:	4844      	ldr	r0, [pc, #272]	@ (8000ee8 <main+0x154>)
 8000dd8:	f004 f938 	bl	800504c <HAL_OPAMP_Start>
  HAL_OPAMP_Start(&hopamp3);
 8000ddc:	4843      	ldr	r0, [pc, #268]	@ (8000eec <main+0x158>)
 8000dde:	f004 f935 	bl	800504c <HAL_OPAMP_Start>

  HAL_ADC_Start_DMA(&hadc2, ADC_BUFFER, BUFFER_SIZE);
 8000de2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000de6:	4942      	ldr	r1, [pc, #264]	@ (8000ef0 <main+0x15c>)
 8000de8:	4842      	ldr	r0, [pc, #264]	@ (8000ef4 <main+0x160>)
 8000dea:	f002 f90d 	bl	8003008 <HAL_ADC_Start_DMA>

  HAL_TIM_Base_Start(&htim1);
 8000dee:	4842      	ldr	r0, [pc, #264]	@ (8000ef8 <main+0x164>)
 8000df0:	f006 fee0 	bl	8007bb4 <HAL_TIM_Base_Start>

  HAL_TIM_Base_Start(&htim2);
 8000df4:	4841      	ldr	r0, [pc, #260]	@ (8000efc <main+0x168>)
 8000df6:	f006 fedd 	bl	8007bb4 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);
 8000dfa:	4841      	ldr	r0, [pc, #260]	@ (8000f00 <main+0x16c>)
 8000dfc:	f006 feda 	bl	8007bb4 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim4);
 8000e00:	4840      	ldr	r0, [pc, #256]	@ (8000f04 <main+0x170>)
 8000e02:	f006 ff47 	bl	8007c94 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000e06:	210c      	movs	r1, #12
 8000e08:	483c      	ldr	r0, [pc, #240]	@ (8000efc <main+0x168>)
 8000e0a:	f007 f991 	bl	8008130 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000e0e:	2108      	movs	r1, #8
 8000e10:	483a      	ldr	r0, [pc, #232]	@ (8000efc <main+0x168>)
 8000e12:	f007 f98d 	bl	8008130 <HAL_TIM_PWM_Start>



  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_1);
 8000e16:	2100      	movs	r1, #0
 8000e18:	4837      	ldr	r0, [pc, #220]	@ (8000ef8 <main+0x164>)
 8000e1a:	f007 f815 	bl	8007e48 <HAL_TIM_OC_Start>
  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_2);
 8000e1e:	2104      	movs	r1, #4
 8000e20:	4835      	ldr	r0, [pc, #212]	@ (8000ef8 <main+0x164>)
 8000e22:	f007 f811 	bl	8007e48 <HAL_TIM_OC_Start>
  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_3);
 8000e26:	2108      	movs	r1, #8
 8000e28:	4833      	ldr	r0, [pc, #204]	@ (8000ef8 <main+0x164>)
 8000e2a:	f007 f80d 	bl	8007e48 <HAL_TIM_OC_Start>
  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_4);
 8000e2e:	210c      	movs	r1, #12
 8000e30:	4831      	ldr	r0, [pc, #196]	@ (8000ef8 <main+0x164>)
 8000e32:	f007 f809 	bl	8007e48 <HAL_TIM_OC_Start>

  HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_1);
 8000e36:	2100      	movs	r1, #0
 8000e38:	4833      	ldr	r0, [pc, #204]	@ (8000f08 <main+0x174>)
 8000e3a:	f007 fd19 	bl	8008870 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_2);
 8000e3e:	2104      	movs	r1, #4
 8000e40:	4831      	ldr	r0, [pc, #196]	@ (8000f08 <main+0x174>)
 8000e42:	f007 fd15 	bl	8008870 <HAL_TIM_IC_Start_IT>

  HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, 1);
 8000e46:	2201      	movs	r2, #1
 8000e48:	2110      	movs	r1, #16
 8000e4a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e4e:	f003 fff1 	bl	8004e34 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  __HAL_TIM_PRESCALER(&htim1,BOOT0_BTN_COUNT);//when 170Mhz 9 is best when 120Mhz 4 is best
 8000e52:	4b29      	ldr	r3, [pc, #164]	@ (8000ef8 <main+0x164>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a2d      	ldr	r2, [pc, #180]	@ (8000f0c <main+0x178>)
 8000e58:	6812      	ldr	r2, [r2, #0]
 8000e5a:	629a      	str	r2, [r3, #40]	@ 0x28

//	  WS2812_BRIGHTNESS=BOOT0_BTN_COUNT;
		if (WHILE_FLAG==2) {
 8000e5c:	4b2c      	ldr	r3, [pc, #176]	@ (8000f10 <main+0x17c>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d1f6      	bne.n	8000e52 <main+0xbe>
//	  CDC_Transmit_FS(CDC_BUFFER, 50);

//			rainbow_effect(100, 10);

//			fft_hamming_f32(WHILE_BUFFER, BUFFER_SIZE);
		for (int i = 0; i < BUFFER_SIZE; ++i) {
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]
 8000e68:	e035      	b.n	8000ed6 <main+0x142>
//		ws2812_set_all(rgb_to_color(255-uwDutyCycle, uwDutyCycle, 0x00));
		ws2812_update_force();
 8000e6a:	f001 fb37 	bl	80024dc <ws2812_update_force>
		  sprintf(CDC_BUFFER,"Val:%.16f,%d,%d,%d,%d,%d,%d,%d\r\n",WHILE_BUFFER[i],i,USER_CounterTicks,uwDutyCycle,uwFrequency,uwIC2Value,BOOT0_BTN_COUNT,SysTick_GetValue());
 8000e6e:	4a29      	ldr	r2, [pc, #164]	@ (8000f14 <main+0x180>)
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	4413      	add	r3, r2
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff fb8d 	bl	8000598 <__aeabi_f2d>
 8000e7e:	4604      	mov	r4, r0
 8000e80:	460d      	mov	r5, r1
 8000e82:	4b25      	ldr	r3, [pc, #148]	@ (8000f18 <main+0x184>)
 8000e84:	681e      	ldr	r6, [r3, #0]
 8000e86:	4b25      	ldr	r3, [pc, #148]	@ (8000f1c <main+0x188>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	4b24      	ldr	r3, [pc, #144]	@ (8000f20 <main+0x18c>)
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	60ba      	str	r2, [r7, #8]
 8000e92:	4b24      	ldr	r3, [pc, #144]	@ (8000f24 <main+0x190>)
 8000e94:	6819      	ldr	r1, [r3, #0]
 8000e96:	6079      	str	r1, [r7, #4]
 8000e98:	4b1c      	ldr	r3, [pc, #112]	@ (8000f0c <main+0x178>)
 8000e9a:	6818      	ldr	r0, [r3, #0]
 8000e9c:	6038      	str	r0, [r7, #0]
 8000e9e:	f7ff ff51 	bl	8000d44 <SysTick_GetValue>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	9306      	str	r3, [sp, #24]
 8000ea6:	6838      	ldr	r0, [r7, #0]
 8000ea8:	9005      	str	r0, [sp, #20]
 8000eaa:	6879      	ldr	r1, [r7, #4]
 8000eac:	9104      	str	r1, [sp, #16]
 8000eae:	68ba      	ldr	r2, [r7, #8]
 8000eb0:	9203      	str	r2, [sp, #12]
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	9302      	str	r3, [sp, #8]
 8000eb6:	9601      	str	r6, [sp, #4]
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	9300      	str	r3, [sp, #0]
 8000ebc:	4622      	mov	r2, r4
 8000ebe:	462b      	mov	r3, r5
 8000ec0:	4919      	ldr	r1, [pc, #100]	@ (8000f28 <main+0x194>)
 8000ec2:	481a      	ldr	r0, [pc, #104]	@ (8000f2c <main+0x198>)
 8000ec4:	f00f f858 	bl	800ff78 <siprintf>
		  CDC_Transmit_FS(CDC_BUFFER, CDC_BUFFER_SIZE);
 8000ec8:	2164      	movs	r1, #100	@ 0x64
 8000eca:	4818      	ldr	r0, [pc, #96]	@ (8000f2c <main+0x198>)
 8000ecc:	f00d fcda 	bl	800e884 <CDC_Transmit_FS>
		for (int i = 0; i < BUFFER_SIZE; ++i) {
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	617b      	str	r3, [r7, #20]
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000edc:	dbc5      	blt.n	8000e6a <main+0xd6>


		}

//		HAL_Delay(10);
		  WHILE_FLAG=0;
 8000ede:	4b0c      	ldr	r3, [pc, #48]	@ (8000f10 <main+0x17c>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
	  __HAL_TIM_PRESCALER(&htim1,BOOT0_BTN_COUNT);//when 170Mhz 9 is best when 120Mhz 4 is best
 8000ee4:	e7b5      	b.n	8000e52 <main+0xbe>
 8000ee6:	bf00      	nop
 8000ee8:	200005cc 	.word	0x200005cc
 8000eec:	20000608 	.word	0x20000608
 8000ef0:	20000830 	.word	0x20000830
 8000ef4:	200003d4 	.word	0x200003d4
 8000ef8:	20000644 	.word	0x20000644
 8000efc:	20000690 	.word	0x20000690
 8000f00:	200006dc 	.word	0x200006dc
 8000f04:	20000728 	.word	0x20000728
 8000f08:	20000774 	.word	0x20000774
 8000f0c:	200011f8 	.word	0x200011f8
 8000f10:	200011f4 	.word	0x200011f4
 8000f14:	20000ce0 	.word	0x20000ce0
 8000f18:	2000082c 	.word	0x2000082c
 8000f1c:	20000824 	.word	0x20000824
 8000f20:	20000828 	.word	0x20000828
 8000f24:	20000820 	.word	0x20000820
 8000f28:	08013808 	.word	0x08013808
 8000f2c:	20001190 	.word	0x20001190

08000f30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b094      	sub	sp, #80	@ 0x50
 8000f34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f36:	f107 0318 	add.w	r3, r7, #24
 8000f3a:	2238      	movs	r2, #56	@ 0x38
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f00f f87d 	bl	801003e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f44:	1d3b      	adds	r3, r7, #4
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]
 8000f4c:	609a      	str	r2, [r3, #8]
 8000f4e:	60da      	str	r2, [r3, #12]
 8000f50:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f52:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000f56:	f005 fddd 	bl	8006b14 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000f5a:	2321      	movs	r3, #33	@ 0x21
 8000f5c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f5e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f62:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000f64:	2301      	movs	r3, #1
 8000f66:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000f70:	2302      	movs	r3, #2
 8000f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000f74:	233c      	movs	r3, #60	@ 0x3c
 8000f76:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f80:	2302      	movs	r3, #2
 8000f82:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f84:	f107 0318 	add.w	r3, r7, #24
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f005 fe77 	bl	8006c7c <HAL_RCC_OscConfig>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000f94:	f000 fddc 	bl	8001b50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f98:	230f      	movs	r3, #15
 8000f9a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000fac:	1d3b      	adds	r3, r7, #4
 8000fae:	2103      	movs	r1, #3
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f006 f975 	bl	80072a0 <HAL_RCC_ClockConfig>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000fbc:	f000 fdc8 	bl	8001b50 <Error_Handler>
  }
}
 8000fc0:	bf00      	nop
 8000fc2:	3750      	adds	r7, #80	@ 0x50
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08c      	sub	sp, #48	@ 0x30
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000fce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fda:	1d3b      	adds	r3, r7, #4
 8000fdc:	2220      	movs	r2, #32
 8000fde:	2100      	movs	r1, #0
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f00f f82c 	bl	801003e <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fe6:	4b33      	ldr	r3, [pc, #204]	@ (80010b4 <MX_ADC1_Init+0xec>)
 8000fe8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000fec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000fee:	4b31      	ldr	r3, [pc, #196]	@ (80010b4 <MX_ADC1_Init+0xec>)
 8000ff0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000ff4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ff6:	4b2f      	ldr	r3, [pc, #188]	@ (80010b4 <MX_ADC1_Init+0xec>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ffc:	4b2d      	ldr	r3, [pc, #180]	@ (80010b4 <MX_ADC1_Init+0xec>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001002:	4b2c      	ldr	r3, [pc, #176]	@ (80010b4 <MX_ADC1_Init+0xec>)
 8001004:	2200      	movs	r2, #0
 8001006:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001008:	4b2a      	ldr	r3, [pc, #168]	@ (80010b4 <MX_ADC1_Init+0xec>)
 800100a:	2200      	movs	r2, #0
 800100c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800100e:	4b29      	ldr	r3, [pc, #164]	@ (80010b4 <MX_ADC1_Init+0xec>)
 8001010:	2204      	movs	r2, #4
 8001012:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001014:	4b27      	ldr	r3, [pc, #156]	@ (80010b4 <MX_ADC1_Init+0xec>)
 8001016:	2200      	movs	r2, #0
 8001018:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800101a:	4b26      	ldr	r3, [pc, #152]	@ (80010b4 <MX_ADC1_Init+0xec>)
 800101c:	2200      	movs	r2, #0
 800101e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001020:	4b24      	ldr	r3, [pc, #144]	@ (80010b4 <MX_ADC1_Init+0xec>)
 8001022:	2201      	movs	r2, #1
 8001024:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001026:	4b23      	ldr	r3, [pc, #140]	@ (80010b4 <MX_ADC1_Init+0xec>)
 8001028:	2200      	movs	r2, #0
 800102a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_CC1;
 800102e:	4b21      	ldr	r3, [pc, #132]	@ (80010b4 <MX_ADC1_Init+0xec>)
 8001030:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001034:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001036:	4b1f      	ldr	r3, [pc, #124]	@ (80010b4 <MX_ADC1_Init+0xec>)
 8001038:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800103c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800103e:	4b1d      	ldr	r3, [pc, #116]	@ (80010b4 <MX_ADC1_Init+0xec>)
 8001040:	2201      	movs	r2, #1
 8001042:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001046:	4b1b      	ldr	r3, [pc, #108]	@ (80010b4 <MX_ADC1_Init+0xec>)
 8001048:	2200      	movs	r2, #0
 800104a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800104c:	4b19      	ldr	r3, [pc, #100]	@ (80010b4 <MX_ADC1_Init+0xec>)
 800104e:	2200      	movs	r2, #0
 8001050:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001054:	4817      	ldr	r0, [pc, #92]	@ (80010b4 <MX_ADC1_Init+0xec>)
 8001056:	f001 fe1b 	bl	8002c90 <HAL_ADC_Init>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8001060:	f000 fd76 	bl	8001b50 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001064:	2300      	movs	r3, #0
 8001066:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001068:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800106c:	4619      	mov	r1, r3
 800106e:	4811      	ldr	r0, [pc, #68]	@ (80010b4 <MX_ADC1_Init+0xec>)
 8001070:	f003 f8d4 	bl	800421c <HAL_ADCEx_MultiModeConfigChannel>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800107a:	f000 fd69 	bl	8001b50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP1;
 800107e:	4b0e      	ldr	r3, [pc, #56]	@ (80010b8 <MX_ADC1_Init+0xf0>)
 8001080:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001082:	2306      	movs	r3, #6
 8001084:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001086:	2300      	movs	r3, #0
 8001088:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800108a:	237f      	movs	r3, #127	@ 0x7f
 800108c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800108e:	2304      	movs	r3, #4
 8001090:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001092:	2300      	movs	r3, #0
 8001094:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001096:	1d3b      	adds	r3, r7, #4
 8001098:	4619      	mov	r1, r3
 800109a:	4806      	ldr	r0, [pc, #24]	@ (80010b4 <MX_ADC1_Init+0xec>)
 800109c:	f002 fafc 	bl	8003698 <HAL_ADC_ConfigChannel>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80010a6:	f000 fd53 	bl	8001b50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010aa:	bf00      	nop
 80010ac:	3730      	adds	r7, #48	@ 0x30
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20000368 	.word	0x20000368
 80010b8:	b6902000 	.word	0xb6902000

080010bc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b088      	sub	sp, #32
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010c2:	463b      	mov	r3, r7
 80010c4:	2220      	movs	r2, #32
 80010c6:	2100      	movs	r1, #0
 80010c8:	4618      	mov	r0, r3
 80010ca:	f00e ffb8 	bl	801003e <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80010ce:	4b2c      	ldr	r3, [pc, #176]	@ (8001180 <MX_ADC2_Init+0xc4>)
 80010d0:	4a2c      	ldr	r2, [pc, #176]	@ (8001184 <MX_ADC2_Init+0xc8>)
 80010d2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80010d4:	4b2a      	ldr	r3, [pc, #168]	@ (8001180 <MX_ADC2_Init+0xc4>)
 80010d6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80010da:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80010dc:	4b28      	ldr	r3, [pc, #160]	@ (8001180 <MX_ADC2_Init+0xc4>)
 80010de:	2200      	movs	r2, #0
 80010e0:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010e2:	4b27      	ldr	r3, [pc, #156]	@ (8001180 <MX_ADC2_Init+0xc4>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80010e8:	4b25      	ldr	r3, [pc, #148]	@ (8001180 <MX_ADC2_Init+0xc4>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010ee:	4b24      	ldr	r3, [pc, #144]	@ (8001180 <MX_ADC2_Init+0xc4>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010f4:	4b22      	ldr	r3, [pc, #136]	@ (8001180 <MX_ADC2_Init+0xc4>)
 80010f6:	2204      	movs	r2, #4
 80010f8:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80010fa:	4b21      	ldr	r3, [pc, #132]	@ (8001180 <MX_ADC2_Init+0xc4>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001100:	4b1f      	ldr	r3, [pc, #124]	@ (8001180 <MX_ADC2_Init+0xc4>)
 8001102:	2200      	movs	r2, #0
 8001104:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001106:	4b1e      	ldr	r3, [pc, #120]	@ (8001180 <MX_ADC2_Init+0xc4>)
 8001108:	2201      	movs	r2, #1
 800110a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800110c:	4b1c      	ldr	r3, [pc, #112]	@ (8001180 <MX_ADC2_Init+0xc4>)
 800110e:	2200      	movs	r2, #0
 8001110:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_CC2;
 8001114:	4b1a      	ldr	r3, [pc, #104]	@ (8001180 <MX_ADC2_Init+0xc4>)
 8001116:	f44f 6284 	mov.w	r2, #1056	@ 0x420
 800111a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800111c:	4b18      	ldr	r3, [pc, #96]	@ (8001180 <MX_ADC2_Init+0xc4>)
 800111e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001122:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001124:	4b16      	ldr	r3, [pc, #88]	@ (8001180 <MX_ADC2_Init+0xc4>)
 8001126:	2201      	movs	r2, #1
 8001128:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800112c:	4b14      	ldr	r3, [pc, #80]	@ (8001180 <MX_ADC2_Init+0xc4>)
 800112e:	2200      	movs	r2, #0
 8001130:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001132:	4b13      	ldr	r3, [pc, #76]	@ (8001180 <MX_ADC2_Init+0xc4>)
 8001134:	2200      	movs	r2, #0
 8001136:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800113a:	4811      	ldr	r0, [pc, #68]	@ (8001180 <MX_ADC2_Init+0xc4>)
 800113c:	f001 fda8 	bl	8002c90 <HAL_ADC_Init>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8001146:	f000 fd03 	bl	8001b50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP3_ADC2;
 800114a:	4b0f      	ldr	r3, [pc, #60]	@ (8001188 <MX_ADC2_Init+0xcc>)
 800114c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800114e:	2306      	movs	r3, #6
 8001150:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001152:	2300      	movs	r3, #0
 8001154:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001156:	237f      	movs	r3, #127	@ 0x7f
 8001158:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800115a:	2304      	movs	r3, #4
 800115c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001162:	463b      	mov	r3, r7
 8001164:	4619      	mov	r1, r3
 8001166:	4806      	ldr	r0, [pc, #24]	@ (8001180 <MX_ADC2_Init+0xc4>)
 8001168:	f002 fa96 	bl	8003698 <HAL_ADC_ConfigChannel>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 8001172:	f000 fced 	bl	8001b50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001176:	bf00      	nop
 8001178:	3720      	adds	r7, #32
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	200003d4 	.word	0x200003d4
 8001184:	50000100 	.word	0x50000100
 8001188:	cb8c0000 	.word	0xcb8c0000

0800118c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b08c      	sub	sp, #48	@ 0x30
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001192:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	605a      	str	r2, [r3, #4]
 800119c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800119e:	1d3b      	adds	r3, r7, #4
 80011a0:	2220      	movs	r2, #32
 80011a2:	2100      	movs	r1, #0
 80011a4:	4618      	mov	r0, r3
 80011a6:	f00e ff4a 	bl	801003e <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80011aa:	4b32      	ldr	r3, [pc, #200]	@ (8001274 <MX_ADC3_Init+0xe8>)
 80011ac:	4a32      	ldr	r2, [pc, #200]	@ (8001278 <MX_ADC3_Init+0xec>)
 80011ae:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80011b0:	4b30      	ldr	r3, [pc, #192]	@ (8001274 <MX_ADC3_Init+0xe8>)
 80011b2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80011b6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80011b8:	4b2e      	ldr	r3, [pc, #184]	@ (8001274 <MX_ADC3_Init+0xe8>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011be:	4b2d      	ldr	r3, [pc, #180]	@ (8001274 <MX_ADC3_Init+0xe8>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 80011c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001274 <MX_ADC3_Init+0xe8>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011ca:	4b2a      	ldr	r3, [pc, #168]	@ (8001274 <MX_ADC3_Init+0xe8>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011d0:	4b28      	ldr	r3, [pc, #160]	@ (8001274 <MX_ADC3_Init+0xe8>)
 80011d2:	2204      	movs	r2, #4
 80011d4:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80011d6:	4b27      	ldr	r3, [pc, #156]	@ (8001274 <MX_ADC3_Init+0xe8>)
 80011d8:	2200      	movs	r2, #0
 80011da:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80011dc:	4b25      	ldr	r3, [pc, #148]	@ (8001274 <MX_ADC3_Init+0xe8>)
 80011de:	2200      	movs	r2, #0
 80011e0:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 80011e2:	4b24      	ldr	r3, [pc, #144]	@ (8001274 <MX_ADC3_Init+0xe8>)
 80011e4:	2201      	movs	r2, #1
 80011e6:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80011e8:	4b22      	ldr	r3, [pc, #136]	@ (8001274 <MX_ADC3_Init+0xe8>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_CC3;
 80011f0:	4b20      	ldr	r3, [pc, #128]	@ (8001274 <MX_ADC3_Init+0xe8>)
 80011f2:	f44f 6288 	mov.w	r2, #1088	@ 0x440
 80011f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80011f8:	4b1e      	ldr	r3, [pc, #120]	@ (8001274 <MX_ADC3_Init+0xe8>)
 80011fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001200:	4b1c      	ldr	r3, [pc, #112]	@ (8001274 <MX_ADC3_Init+0xe8>)
 8001202:	2201      	movs	r2, #1
 8001204:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001208:	4b1a      	ldr	r3, [pc, #104]	@ (8001274 <MX_ADC3_Init+0xe8>)
 800120a:	2200      	movs	r2, #0
 800120c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 800120e:	4b19      	ldr	r3, [pc, #100]	@ (8001274 <MX_ADC3_Init+0xe8>)
 8001210:	2200      	movs	r2, #0
 8001212:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001216:	4817      	ldr	r0, [pc, #92]	@ (8001274 <MX_ADC3_Init+0xe8>)
 8001218:	f001 fd3a 	bl	8002c90 <HAL_ADC_Init>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_ADC3_Init+0x9a>
  {
    Error_Handler();
 8001222:	f000 fc95 	bl	8001b50 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001226:	2300      	movs	r3, #0
 8001228:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 800122a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800122e:	4619      	mov	r1, r3
 8001230:	4810      	ldr	r0, [pc, #64]	@ (8001274 <MX_ADC3_Init+0xe8>)
 8001232:	f002 fff3 	bl	800421c <HAL_ADCEx_MultiModeConfigChannel>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 800123c:	f000 fc88 	bl	8001b50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP3_ADC3;
 8001240:	4b0e      	ldr	r3, [pc, #56]	@ (800127c <MX_ADC3_Init+0xf0>)
 8001242:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001244:	2306      	movs	r3, #6
 8001246:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001248:	2300      	movs	r3, #0
 800124a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800124c:	237f      	movs	r3, #127	@ 0x7f
 800124e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001250:	2304      	movs	r3, #4
 8001252:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001254:	2300      	movs	r3, #0
 8001256:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001258:	1d3b      	adds	r3, r7, #4
 800125a:	4619      	mov	r1, r3
 800125c:	4805      	ldr	r0, [pc, #20]	@ (8001274 <MX_ADC3_Init+0xe8>)
 800125e:	f002 fa1b 	bl	8003698 <HAL_ADC_ConfigChannel>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_ADC3_Init+0xe0>
  {
    Error_Handler();
 8001268:	f000 fc72 	bl	8001b50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800126c:	bf00      	nop
 800126e:	3730      	adds	r7, #48	@ 0x30
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	20000440 	.word	0x20000440
 8001278:	50000400 	.word	0x50000400
 800127c:	b6982000 	.word	0xb6982000

08001280 <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8001284:	4b0f      	ldr	r3, [pc, #60]	@ (80012c4 <MX_OPAMP1_Init+0x44>)
 8001286:	4a10      	ldr	r2, [pc, #64]	@ (80012c8 <MX_OPAMP1_Init+0x48>)
 8001288:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 800128a:	4b0e      	ldr	r3, [pc, #56]	@ (80012c4 <MX_OPAMP1_Init+0x44>)
 800128c:	2280      	movs	r2, #128	@ 0x80
 800128e:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_FOLLOWER_MODE;
 8001290:	4b0c      	ldr	r3, [pc, #48]	@ (80012c4 <MX_OPAMP1_Init+0x44>)
 8001292:	2260      	movs	r2, #96	@ 0x60
 8001294:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001296:	4b0b      	ldr	r3, [pc, #44]	@ (80012c4 <MX_OPAMP1_Init+0x44>)
 8001298:	2200      	movs	r2, #0
 800129a:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = ENABLE;
 800129c:	4b09      	ldr	r3, [pc, #36]	@ (80012c4 <MX_OPAMP1_Init+0x44>)
 800129e:	2201      	movs	r2, #1
 80012a0:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80012a2:	4b08      	ldr	r3, [pc, #32]	@ (80012c4 <MX_OPAMP1_Init+0x44>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	619a      	str	r2, [r3, #24]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80012a8:	4b06      	ldr	r3, [pc, #24]	@ (80012c4 <MX_OPAMP1_Init+0x44>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 80012ae:	4805      	ldr	r0, [pc, #20]	@ (80012c4 <MX_OPAMP1_Init+0x44>)
 80012b0:	f003 fdfc 	bl	8004eac <HAL_OPAMP_Init>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_OPAMP1_Init+0x3e>
  {
    Error_Handler();
 80012ba:	f000 fc49 	bl	8001b50 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	200005cc 	.word	0x200005cc
 80012c8:	40010300 	.word	0x40010300

080012cc <MX_OPAMP3_Init>:
  * @brief OPAMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP3_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 80012d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001310 <MX_OPAMP3_Init+0x44>)
 80012d2:	4a10      	ldr	r2, [pc, #64]	@ (8001314 <MX_OPAMP3_Init+0x48>)
 80012d4:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 80012d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001310 <MX_OPAMP3_Init+0x44>)
 80012d8:	2280      	movs	r2, #128	@ 0x80
 80012da:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_FOLLOWER_MODE;
 80012dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001310 <MX_OPAMP3_Init+0x44>)
 80012de:	2260      	movs	r2, #96	@ 0x60
 80012e0:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 80012e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001310 <MX_OPAMP3_Init+0x44>)
 80012e4:	2208      	movs	r2, #8
 80012e6:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = ENABLE;
 80012e8:	4b09      	ldr	r3, [pc, #36]	@ (8001310 <MX_OPAMP3_Init+0x44>)
 80012ea:	2201      	movs	r2, #1
 80012ec:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80012ee:	4b08      	ldr	r3, [pc, #32]	@ (8001310 <MX_OPAMP3_Init+0x44>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	619a      	str	r2, [r3, #24]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80012f4:	4b06      	ldr	r3, [pc, #24]	@ (8001310 <MX_OPAMP3_Init+0x44>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 80012fa:	4805      	ldr	r0, [pc, #20]	@ (8001310 <MX_OPAMP3_Init+0x44>)
 80012fc:	f003 fdd6 	bl	8004eac <HAL_OPAMP_Init>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_OPAMP3_Init+0x3e>
  {
    Error_Handler();
 8001306:	f000 fc23 	bl	8001b50 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20000608 	.word	0x20000608
 8001314:	40010308 	.word	0x40010308

08001318 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b09c      	sub	sp, #112	@ 0x70
 800131c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800131e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	605a      	str	r2, [r3, #4]
 8001328:	609a      	str	r2, [r3, #8]
 800132a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800132c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001338:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]
 8001348:	615a      	str	r2, [r3, #20]
 800134a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800134c:	1d3b      	adds	r3, r7, #4
 800134e:	2234      	movs	r2, #52	@ 0x34
 8001350:	2100      	movs	r1, #0
 8001352:	4618      	mov	r0, r3
 8001354:	f00e fe73 	bl	801003e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001358:	4b5a      	ldr	r3, [pc, #360]	@ (80014c4 <MX_TIM1_Init+0x1ac>)
 800135a:	4a5b      	ldr	r2, [pc, #364]	@ (80014c8 <MX_TIM1_Init+0x1b0>)
 800135c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 5-1;
 800135e:	4b59      	ldr	r3, [pc, #356]	@ (80014c4 <MX_TIM1_Init+0x1ac>)
 8001360:	2204      	movs	r2, #4
 8001362:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001364:	4b57      	ldr	r3, [pc, #348]	@ (80014c4 <MX_TIM1_Init+0x1ac>)
 8001366:	2200      	movs	r2, #0
 8001368:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2;
 800136a:	4b56      	ldr	r3, [pc, #344]	@ (80014c4 <MX_TIM1_Init+0x1ac>)
 800136c:	2202      	movs	r2, #2
 800136e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001370:	4b54      	ldr	r3, [pc, #336]	@ (80014c4 <MX_TIM1_Init+0x1ac>)
 8001372:	2200      	movs	r2, #0
 8001374:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001376:	4b53      	ldr	r3, [pc, #332]	@ (80014c4 <MX_TIM1_Init+0x1ac>)
 8001378:	2200      	movs	r2, #0
 800137a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800137c:	4b51      	ldr	r3, [pc, #324]	@ (80014c4 <MX_TIM1_Init+0x1ac>)
 800137e:	2200      	movs	r2, #0
 8001380:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001382:	4850      	ldr	r0, [pc, #320]	@ (80014c4 <MX_TIM1_Init+0x1ac>)
 8001384:	f006 fbbe 	bl	8007b04 <HAL_TIM_Base_Init>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800138e:	f000 fbdf 	bl	8001b50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001392:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001396:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001398:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800139c:	4619      	mov	r1, r3
 800139e:	4849      	ldr	r0, [pc, #292]	@ (80014c4 <MX_TIM1_Init+0x1ac>)
 80013a0:	f007 ff30 	bl	8009204 <HAL_TIM_ConfigClockSource>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80013aa:	f000 fbd1 	bl	8001b50 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80013ae:	4845      	ldr	r0, [pc, #276]	@ (80014c4 <MX_TIM1_Init+0x1ac>)
 80013b0:	f006 fce8 	bl	8007d84 <HAL_TIM_OC_Init>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80013ba:	f000 fbc9 	bl	8001b50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80013be:	2320      	movs	r3, #32
 80013c0:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013c2:	2300      	movs	r3, #0
 80013c4:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c6:	2300      	movs	r3, #0
 80013c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013ca:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80013ce:	4619      	mov	r1, r3
 80013d0:	483c      	ldr	r0, [pc, #240]	@ (80014c4 <MX_TIM1_Init+0x1ac>)
 80013d2:	f009 f86b 	bl	800a4ac <HAL_TIMEx_MasterConfigSynchronization>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80013dc:	f000 fbb8 	bl	8001b50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80013e0:	2330      	movs	r3, #48	@ 0x30
 80013e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013e8:	2300      	movs	r3, #0
 80013ea:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013ec:	2300      	movs	r3, #0
 80013ee:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013f0:	2300      	movs	r3, #0
 80013f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013f4:	2300      	movs	r3, #0
 80013f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013f8:	2300      	movs	r3, #0
 80013fa:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013fc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001400:	2200      	movs	r2, #0
 8001402:	4619      	mov	r1, r3
 8001404:	482f      	ldr	r0, [pc, #188]	@ (80014c4 <MX_TIM1_Init+0x1ac>)
 8001406:	f007 fcd3 	bl	8008db0 <HAL_TIM_OC_ConfigChannel>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001410:	f000 fb9e 	bl	8001b50 <Error_Handler>
  }
  sConfigOC.Pulse = 1;
 8001414:	2301      	movs	r3, #1
 8001416:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001418:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800141c:	2204      	movs	r2, #4
 800141e:	4619      	mov	r1, r3
 8001420:	4828      	ldr	r0, [pc, #160]	@ (80014c4 <MX_TIM1_Init+0x1ac>)
 8001422:	f007 fcc5 	bl	8008db0 <HAL_TIM_OC_ConfigChannel>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 800142c:	f000 fb90 	bl	8001b50 <Error_Handler>
  }
  sConfigOC.Pulse = 2;
 8001430:	2302      	movs	r3, #2
 8001432:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001434:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001438:	2208      	movs	r2, #8
 800143a:	4619      	mov	r1, r3
 800143c:	4821      	ldr	r0, [pc, #132]	@ (80014c4 <MX_TIM1_Init+0x1ac>)
 800143e:	f007 fcb7 	bl	8008db0 <HAL_TIM_OC_ConfigChannel>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_TIM1_Init+0x134>
  {
    Error_Handler();
 8001448:	f000 fb82 	bl	8001b50 <Error_Handler>
  }
  sConfigOC.Pulse = 3;
 800144c:	2303      	movs	r3, #3
 800144e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001450:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001454:	220c      	movs	r2, #12
 8001456:	4619      	mov	r1, r3
 8001458:	481a      	ldr	r0, [pc, #104]	@ (80014c4 <MX_TIM1_Init+0x1ac>)
 800145a:	f007 fca9 	bl	8008db0 <HAL_TIM_OC_ConfigChannel>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 8001464:	f000 fb74 	bl	8001b50 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001468:	2300      	movs	r3, #0
 800146a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800146c:	2300      	movs	r3, #0
 800146e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001470:	2300      	movs	r3, #0
 8001472:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001474:	2300      	movs	r3, #0
 8001476:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001478:	2300      	movs	r3, #0
 800147a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800147c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001480:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001482:	2300      	movs	r3, #0
 8001484:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001486:	2300      	movs	r3, #0
 8001488:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800148a:	2300      	movs	r3, #0
 800148c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800148e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001492:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001494:	2300      	movs	r3, #0
 8001496:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001498:	2300      	movs	r3, #0
 800149a:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800149c:	2300      	movs	r3, #0
 800149e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014a0:	1d3b      	adds	r3, r7, #4
 80014a2:	4619      	mov	r1, r3
 80014a4:	4807      	ldr	r0, [pc, #28]	@ (80014c4 <MX_TIM1_Init+0x1ac>)
 80014a6:	f009 f897 	bl	800a5d8 <HAL_TIMEx_ConfigBreakDeadTime>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_TIM1_Init+0x19c>
  {
    Error_Handler();
 80014b0:	f000 fb4e 	bl	8001b50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014b4:	4803      	ldr	r0, [pc, #12]	@ (80014c4 <MX_TIM1_Init+0x1ac>)
 80014b6:	f000 fe17 	bl	80020e8 <HAL_TIM_MspPostInit>

}
 80014ba:	bf00      	nop
 80014bc:	3770      	adds	r7, #112	@ 0x70
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000644 	.word	0x20000644
 80014c8:	40012c00 	.word	0x40012c00

080014cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b08e      	sub	sp, #56	@ 0x38
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	605a      	str	r2, [r3, #4]
 80014dc:	609a      	str	r2, [r3, #8]
 80014de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014e0:	f107 031c 	add.w	r3, r7, #28
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014ec:	463b      	mov	r3, r7
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	605a      	str	r2, [r3, #4]
 80014f4:	609a      	str	r2, [r3, #8]
 80014f6:	60da      	str	r2, [r3, #12]
 80014f8:	611a      	str	r2, [r3, #16]
 80014fa:	615a      	str	r2, [r3, #20]
 80014fc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014fe:	4b37      	ldr	r3, [pc, #220]	@ (80015dc <MX_TIM2_Init+0x110>)
 8001500:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001504:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001506:	4b35      	ldr	r3, [pc, #212]	@ (80015dc <MX_TIM2_Init+0x110>)
 8001508:	2200      	movs	r2, #0
 800150a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800150c:	4b33      	ldr	r3, [pc, #204]	@ (80015dc <MX_TIM2_Init+0x110>)
 800150e:	2200      	movs	r2, #0
 8001510:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001512:	4b32      	ldr	r3, [pc, #200]	@ (80015dc <MX_TIM2_Init+0x110>)
 8001514:	f04f 32ff 	mov.w	r2, #4294967295
 8001518:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800151a:	4b30      	ldr	r3, [pc, #192]	@ (80015dc <MX_TIM2_Init+0x110>)
 800151c:	2200      	movs	r2, #0
 800151e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001520:	4b2e      	ldr	r3, [pc, #184]	@ (80015dc <MX_TIM2_Init+0x110>)
 8001522:	2200      	movs	r2, #0
 8001524:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001526:	482d      	ldr	r0, [pc, #180]	@ (80015dc <MX_TIM2_Init+0x110>)
 8001528:	f006 faec 	bl	8007b04 <HAL_TIM_Base_Init>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001532:	f000 fb0d 	bl	8001b50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8001536:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800153a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 800153c:	2300      	movs	r3, #0
 800153e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8001540:	2300      	movs	r3, #0
 8001542:	633b      	str	r3, [r7, #48]	@ 0x30
  sClockSourceConfig.ClockFilter = 0;
 8001544:	2300      	movs	r3, #0
 8001546:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001548:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800154c:	4619      	mov	r1, r3
 800154e:	4823      	ldr	r0, [pc, #140]	@ (80015dc <MX_TIM2_Init+0x110>)
 8001550:	f007 fe58 	bl	8009204 <HAL_TIM_ConfigClockSource>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800155a:	f000 faf9 	bl	8001b50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800155e:	481f      	ldr	r0, [pc, #124]	@ (80015dc <MX_TIM2_Init+0x110>)
 8001560:	f006 fd84 	bl	800806c <HAL_TIM_PWM_Init>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 800156a:	f000 faf1 	bl	8001b50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800156e:	2300      	movs	r3, #0
 8001570:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001572:	2300      	movs	r3, #0
 8001574:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001576:	f107 031c 	add.w	r3, r7, #28
 800157a:	4619      	mov	r1, r3
 800157c:	4817      	ldr	r0, [pc, #92]	@ (80015dc <MX_TIM2_Init+0x110>)
 800157e:	f008 ff95 	bl	800a4ac <HAL_TIMEx_MasterConfigSynchronization>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_TIM2_Init+0xc0>
  {
    Error_Handler();
 8001588:	f000 fae2 	bl	8001b50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800158c:	2360      	movs	r3, #96	@ 0x60
 800158e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 8001590:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001594:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001596:	2300      	movs	r3, #0
 8001598:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800159a:	2300      	movs	r3, #0
 800159c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800159e:	463b      	mov	r3, r7
 80015a0:	2208      	movs	r2, #8
 80015a2:	4619      	mov	r1, r3
 80015a4:	480d      	ldr	r0, [pc, #52]	@ (80015dc <MX_TIM2_Init+0x110>)
 80015a6:	f007 fd19 	bl	8008fdc <HAL_TIM_PWM_ConfigChannel>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 80015b0:	f000 face 	bl	8001b50 <Error_Handler>
  }
  sConfigOC.Pulse = 1000000;
 80015b4:	4b0a      	ldr	r3, [pc, #40]	@ (80015e0 <MX_TIM2_Init+0x114>)
 80015b6:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015b8:	463b      	mov	r3, r7
 80015ba:	220c      	movs	r2, #12
 80015bc:	4619      	mov	r1, r3
 80015be:	4807      	ldr	r0, [pc, #28]	@ (80015dc <MX_TIM2_Init+0x110>)
 80015c0:	f007 fd0c 	bl	8008fdc <HAL_TIM_PWM_ConfigChannel>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_TIM2_Init+0x102>
  {
    Error_Handler();
 80015ca:	f000 fac1 	bl	8001b50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80015ce:	4803      	ldr	r0, [pc, #12]	@ (80015dc <MX_TIM2_Init+0x110>)
 80015d0:	f000 fd8a 	bl	80020e8 <HAL_TIM_MspPostInit>

}
 80015d4:	bf00      	nop
 80015d6:	3738      	adds	r7, #56	@ 0x38
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000690 	.word	0x20000690
 80015e0:	000f4240 	.word	0x000f4240

080015e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b08e      	sub	sp, #56	@ 0x38
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	605a      	str	r2, [r3, #4]
 80015f4:	609a      	str	r2, [r3, #8]
 80015f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015f8:	f107 031c 	add.w	r3, r7, #28
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001604:	463b      	mov	r3, r7
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	605a      	str	r2, [r3, #4]
 800160c:	609a      	str	r2, [r3, #8]
 800160e:	60da      	str	r2, [r3, #12]
 8001610:	611a      	str	r2, [r3, #16]
 8001612:	615a      	str	r2, [r3, #20]
 8001614:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001616:	4b2c      	ldr	r3, [pc, #176]	@ (80016c8 <MX_TIM3_Init+0xe4>)
 8001618:	4a2c      	ldr	r2, [pc, #176]	@ (80016cc <MX_TIM3_Init+0xe8>)
 800161a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800161c:	4b2a      	ldr	r3, [pc, #168]	@ (80016c8 <MX_TIM3_Init+0xe4>)
 800161e:	2200      	movs	r2, #0
 8001620:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001622:	4b29      	ldr	r3, [pc, #164]	@ (80016c8 <MX_TIM3_Init+0xe4>)
 8001624:	2200      	movs	r2, #0
 8001626:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 150;
 8001628:	4b27      	ldr	r3, [pc, #156]	@ (80016c8 <MX_TIM3_Init+0xe4>)
 800162a:	2296      	movs	r2, #150	@ 0x96
 800162c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800162e:	4b26      	ldr	r3, [pc, #152]	@ (80016c8 <MX_TIM3_Init+0xe4>)
 8001630:	2200      	movs	r2, #0
 8001632:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001634:	4b24      	ldr	r3, [pc, #144]	@ (80016c8 <MX_TIM3_Init+0xe4>)
 8001636:	2200      	movs	r2, #0
 8001638:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800163a:	4823      	ldr	r0, [pc, #140]	@ (80016c8 <MX_TIM3_Init+0xe4>)
 800163c:	f006 fa62 	bl	8007b04 <HAL_TIM_Base_Init>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001646:	f000 fa83 	bl	8001b50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800164a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800164e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001650:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001654:	4619      	mov	r1, r3
 8001656:	481c      	ldr	r0, [pc, #112]	@ (80016c8 <MX_TIM3_Init+0xe4>)
 8001658:	f007 fdd4 	bl	8009204 <HAL_TIM_ConfigClockSource>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001662:	f000 fa75 	bl	8001b50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001666:	4818      	ldr	r0, [pc, #96]	@ (80016c8 <MX_TIM3_Init+0xe4>)
 8001668:	f006 fd00 	bl	800806c <HAL_TIM_PWM_Init>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001672:	f000 fa6d 	bl	8001b50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001676:	2300      	movs	r3, #0
 8001678:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800167a:	2300      	movs	r3, #0
 800167c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800167e:	f107 031c 	add.w	r3, r7, #28
 8001682:	4619      	mov	r1, r3
 8001684:	4810      	ldr	r0, [pc, #64]	@ (80016c8 <MX_TIM3_Init+0xe4>)
 8001686:	f008 ff11 	bl	800a4ac <HAL_TIMEx_MasterConfigSynchronization>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001690:	f000 fa5e 	bl	8001b50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001694:	2360      	movs	r3, #96	@ 0x60
 8001696:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001698:	2300      	movs	r3, #0
 800169a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800169c:	2300      	movs	r3, #0
 800169e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016a0:	2300      	movs	r3, #0
 80016a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80016a4:	463b      	mov	r3, r7
 80016a6:	220c      	movs	r2, #12
 80016a8:	4619      	mov	r1, r3
 80016aa:	4807      	ldr	r0, [pc, #28]	@ (80016c8 <MX_TIM3_Init+0xe4>)
 80016ac:	f007 fc96 	bl	8008fdc <HAL_TIM_PWM_ConfigChannel>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80016b6:	f000 fa4b 	bl	8001b50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80016ba:	4803      	ldr	r0, [pc, #12]	@ (80016c8 <MX_TIM3_Init+0xe4>)
 80016bc:	f000 fd14 	bl	80020e8 <HAL_TIM_MspPostInit>

}
 80016c0:	bf00      	nop
 80016c2:	3738      	adds	r7, #56	@ 0x38
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	200006dc 	.word	0x200006dc
 80016cc:	40000400 	.word	0x40000400

080016d0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b088      	sub	sp, #32
 80016d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016d6:	f107 0310 	add.w	r3, r7, #16
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	605a      	str	r2, [r3, #4]
 80016e0:	609a      	str	r2, [r3, #8]
 80016e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016e4:	1d3b      	adds	r3, r7, #4
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	605a      	str	r2, [r3, #4]
 80016ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80016ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001768 <MX_TIM4_Init+0x98>)
 80016f0:	4a1e      	ldr	r2, [pc, #120]	@ (800176c <MX_TIM4_Init+0x9c>)
 80016f2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 12000-1;
 80016f4:	4b1c      	ldr	r3, [pc, #112]	@ (8001768 <MX_TIM4_Init+0x98>)
 80016f6:	f642 62df 	movw	r2, #11999	@ 0x2edf
 80016fa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001768 <MX_TIM4_Init+0x98>)
 80016fe:	2200      	movs	r2, #0
 8001700:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8001702:	4b19      	ldr	r3, [pc, #100]	@ (8001768 <MX_TIM4_Init+0x98>)
 8001704:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001708:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800170a:	4b17      	ldr	r3, [pc, #92]	@ (8001768 <MX_TIM4_Init+0x98>)
 800170c:	2200      	movs	r2, #0
 800170e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001710:	4b15      	ldr	r3, [pc, #84]	@ (8001768 <MX_TIM4_Init+0x98>)
 8001712:	2280      	movs	r2, #128	@ 0x80
 8001714:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001716:	4814      	ldr	r0, [pc, #80]	@ (8001768 <MX_TIM4_Init+0x98>)
 8001718:	f006 f9f4 	bl	8007b04 <HAL_TIM_Base_Init>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8001722:	f000 fa15 	bl	8001b50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001726:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800172a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800172c:	f107 0310 	add.w	r3, r7, #16
 8001730:	4619      	mov	r1, r3
 8001732:	480d      	ldr	r0, [pc, #52]	@ (8001768 <MX_TIM4_Init+0x98>)
 8001734:	f007 fd66 	bl	8009204 <HAL_TIM_ConfigClockSource>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 800173e:	f000 fa07 	bl	8001b50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001742:	2300      	movs	r3, #0
 8001744:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001746:	2300      	movs	r3, #0
 8001748:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800174a:	1d3b      	adds	r3, r7, #4
 800174c:	4619      	mov	r1, r3
 800174e:	4806      	ldr	r0, [pc, #24]	@ (8001768 <MX_TIM4_Init+0x98>)
 8001750:	f008 feac 	bl	800a4ac <HAL_TIMEx_MasterConfigSynchronization>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 800175a:	f000 f9f9 	bl	8001b50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800175e:	bf00      	nop
 8001760:	3720      	adds	r7, #32
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	20000728 	.word	0x20000728
 800176c:	40000800 	.word	0x40000800

08001770 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b090      	sub	sp, #64	@ 0x40
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001776:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	605a      	str	r2, [r3, #4]
 8001780:	609a      	str	r2, [r3, #8]
 8001782:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001784:	f107 031c 	add.w	r3, r7, #28
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	609a      	str	r2, [r3, #8]
 8001790:	60da      	str	r2, [r3, #12]
 8001792:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001794:	f107 0310 	add.w	r3, r7, #16
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80017a0:	463b      	mov	r3, r7
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	605a      	str	r2, [r3, #4]
 80017a8:	609a      	str	r2, [r3, #8]
 80017aa:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80017ac:	4b3d      	ldr	r3, [pc, #244]	@ (80018a4 <MX_TIM15_Init+0x134>)
 80017ae:	4a3e      	ldr	r2, [pc, #248]	@ (80018a8 <MX_TIM15_Init+0x138>)
 80017b0:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80017b2:	4b3c      	ldr	r3, [pc, #240]	@ (80018a4 <MX_TIM15_Init+0x134>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b8:	4b3a      	ldr	r3, [pc, #232]	@ (80018a4 <MX_TIM15_Init+0x134>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80017be:	4b39      	ldr	r3, [pc, #228]	@ (80018a4 <MX_TIM15_Init+0x134>)
 80017c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017c4:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017c6:	4b37      	ldr	r3, [pc, #220]	@ (80018a4 <MX_TIM15_Init+0x134>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80017cc:	4b35      	ldr	r3, [pc, #212]	@ (80018a4 <MX_TIM15_Init+0x134>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017d2:	4b34      	ldr	r3, [pc, #208]	@ (80018a4 <MX_TIM15_Init+0x134>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80017d8:	4832      	ldr	r0, [pc, #200]	@ (80018a4 <MX_TIM15_Init+0x134>)
 80017da:	f006 f993 	bl	8007b04 <HAL_TIM_Base_Init>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 80017e4:	f000 f9b4 	bl	8001b50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017ec:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80017ee:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80017f2:	4619      	mov	r1, r3
 80017f4:	482b      	ldr	r0, [pc, #172]	@ (80018a4 <MX_TIM15_Init+0x134>)
 80017f6:	f007 fd05 	bl	8009204 <HAL_TIM_ConfigClockSource>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8001800:	f000 f9a6 	bl	8001b50 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8001804:	4827      	ldr	r0, [pc, #156]	@ (80018a4 <MX_TIM15_Init+0x134>)
 8001806:	f006 ffd1 	bl	80087ac <HAL_TIM_IC_Init>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_TIM15_Init+0xa4>
  {
    Error_Handler();
 8001810:	f000 f99e 	bl	8001b50 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001814:	2304      	movs	r3, #4
 8001816:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001818:	2350      	movs	r3, #80	@ 0x50
 800181a:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800181c:	2302      	movs	r3, #2
 800181e:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerFilter = 0;
 8001820:	2300      	movs	r3, #0
 8001822:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim15, &sSlaveConfig) != HAL_OK)
 8001824:	f107 031c 	add.w	r3, r7, #28
 8001828:	4619      	mov	r1, r3
 800182a:	481e      	ldr	r0, [pc, #120]	@ (80018a4 <MX_TIM15_Init+0x134>)
 800182c:	f007 fe00 	bl	8009430 <HAL_TIM_SlaveConfigSynchro>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_TIM15_Init+0xca>
  {
    Error_Handler();
 8001836:	f000 f98b 	bl	8001b50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800183a:	2300      	movs	r3, #0
 800183c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800183e:	2300      	movs	r3, #0
 8001840:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001842:	f107 0310 	add.w	r3, r7, #16
 8001846:	4619      	mov	r1, r3
 8001848:	4816      	ldr	r0, [pc, #88]	@ (80018a4 <MX_TIM15_Init+0x134>)
 800184a:	f008 fe2f 	bl	800a4ac <HAL_TIMEx_MasterConfigSynchronization>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_TIM15_Init+0xe8>
  {
    Error_Handler();
 8001854:	f000 f97c 	bl	8001b50 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001858:	2302      	movs	r3, #2
 800185a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800185c:	2301      	movs	r3, #1
 800185e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001860:	2300      	movs	r3, #0
 8001862:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001864:	2300      	movs	r3, #0
 8001866:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001868:	463b      	mov	r3, r7
 800186a:	2200      	movs	r2, #0
 800186c:	4619      	mov	r1, r3
 800186e:	480d      	ldr	r0, [pc, #52]	@ (80018a4 <MX_TIM15_Init+0x134>)
 8001870:	f007 fb18 	bl	8008ea4 <HAL_TIM_IC_ConfigChannel>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 800187a:	f000 f969 	bl	8001b50 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800187e:	2300      	movs	r3, #0
 8001880:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001882:	2302      	movs	r3, #2
 8001884:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001886:	463b      	mov	r3, r7
 8001888:	2204      	movs	r2, #4
 800188a:	4619      	mov	r1, r3
 800188c:	4805      	ldr	r0, [pc, #20]	@ (80018a4 <MX_TIM15_Init+0x134>)
 800188e:	f007 fb09 	bl	8008ea4 <HAL_TIM_IC_ConfigChannel>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <MX_TIM15_Init+0x12c>
  {
    Error_Handler();
 8001898:	f000 f95a 	bl	8001b50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800189c:	bf00      	nop
 800189e:	3740      	adds	r7, #64	@ 0x40
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	20000774 	.word	0x20000774
 80018a8:	40014000 	.word	0x40014000

080018ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80018b2:	4b1e      	ldr	r3, [pc, #120]	@ (800192c <MX_DMA_Init+0x80>)
 80018b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018b6:	4a1d      	ldr	r2, [pc, #116]	@ (800192c <MX_DMA_Init+0x80>)
 80018b8:	f043 0304 	orr.w	r3, r3, #4
 80018bc:	6493      	str	r3, [r2, #72]	@ 0x48
 80018be:	4b1b      	ldr	r3, [pc, #108]	@ (800192c <MX_DMA_Init+0x80>)
 80018c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018c2:	f003 0304 	and.w	r3, r3, #4
 80018c6:	607b      	str	r3, [r7, #4]
 80018c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018ca:	4b18      	ldr	r3, [pc, #96]	@ (800192c <MX_DMA_Init+0x80>)
 80018cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018ce:	4a17      	ldr	r2, [pc, #92]	@ (800192c <MX_DMA_Init+0x80>)
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	6493      	str	r3, [r2, #72]	@ 0x48
 80018d6:	4b15      	ldr	r3, [pc, #84]	@ (800192c <MX_DMA_Init+0x80>)
 80018d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	603b      	str	r3, [r7, #0]
 80018e0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80018e2:	2200      	movs	r2, #0
 80018e4:	2100      	movs	r1, #0
 80018e6:	200b      	movs	r0, #11
 80018e8:	f002 fe7b 	bl	80045e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80018ec:	200b      	movs	r0, #11
 80018ee:	f002 fe92 	bl	8004616 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80018f2:	2200      	movs	r2, #0
 80018f4:	2100      	movs	r1, #0
 80018f6:	200c      	movs	r0, #12
 80018f8:	f002 fe73 	bl	80045e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80018fc:	200c      	movs	r0, #12
 80018fe:	f002 fe8a 	bl	8004616 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001902:	2200      	movs	r2, #0
 8001904:	2100      	movs	r1, #0
 8001906:	200d      	movs	r0, #13
 8001908:	f002 fe6b 	bl	80045e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800190c:	200d      	movs	r0, #13
 800190e:	f002 fe82 	bl	8004616 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001912:	2200      	movs	r2, #0
 8001914:	2100      	movs	r1, #0
 8001916:	200e      	movs	r0, #14
 8001918:	f002 fe63 	bl	80045e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800191c:	200e      	movs	r0, #14
 800191e:	f002 fe7a 	bl	8004616 <HAL_NVIC_EnableIRQ>

}
 8001922:	bf00      	nop
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40021000 	.word	0x40021000

08001930 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b08a      	sub	sp, #40	@ 0x28
 8001934:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001936:	f107 0314 	add.w	r3, r7, #20
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	605a      	str	r2, [r3, #4]
 8001940:	609a      	str	r2, [r3, #8]
 8001942:	60da      	str	r2, [r3, #12]
 8001944:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001946:	4b30      	ldr	r3, [pc, #192]	@ (8001a08 <MX_GPIO_Init+0xd8>)
 8001948:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800194a:	4a2f      	ldr	r2, [pc, #188]	@ (8001a08 <MX_GPIO_Init+0xd8>)
 800194c:	f043 0320 	orr.w	r3, r3, #32
 8001950:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001952:	4b2d      	ldr	r3, [pc, #180]	@ (8001a08 <MX_GPIO_Init+0xd8>)
 8001954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001956:	f003 0320 	and.w	r3, r3, #32
 800195a:	613b      	str	r3, [r7, #16]
 800195c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800195e:	4b2a      	ldr	r3, [pc, #168]	@ (8001a08 <MX_GPIO_Init+0xd8>)
 8001960:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001962:	4a29      	ldr	r2, [pc, #164]	@ (8001a08 <MX_GPIO_Init+0xd8>)
 8001964:	f043 0304 	orr.w	r3, r3, #4
 8001968:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800196a:	4b27      	ldr	r3, [pc, #156]	@ (8001a08 <MX_GPIO_Init+0xd8>)
 800196c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800196e:	f003 0304 	and.w	r3, r3, #4
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001976:	4b24      	ldr	r3, [pc, #144]	@ (8001a08 <MX_GPIO_Init+0xd8>)
 8001978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800197a:	4a23      	ldr	r2, [pc, #140]	@ (8001a08 <MX_GPIO_Init+0xd8>)
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001982:	4b21      	ldr	r3, [pc, #132]	@ (8001a08 <MX_GPIO_Init+0xd8>)
 8001984:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	60bb      	str	r3, [r7, #8]
 800198c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800198e:	4b1e      	ldr	r3, [pc, #120]	@ (8001a08 <MX_GPIO_Init+0xd8>)
 8001990:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001992:	4a1d      	ldr	r2, [pc, #116]	@ (8001a08 <MX_GPIO_Init+0xd8>)
 8001994:	f043 0302 	orr.w	r3, r3, #2
 8001998:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800199a:	4b1b      	ldr	r3, [pc, #108]	@ (8001a08 <MX_GPIO_Init+0xd8>)
 800199c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	607b      	str	r3, [r7, #4]
 80019a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ERROR_LED_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 80019a6:	2200      	movs	r2, #0
 80019a8:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 80019ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019b0:	f003 fa40 	bl	8004e34 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ERROR_LED_Pin PA10 */
  GPIO_InitStruct.Pin = ERROR_LED_Pin|GPIO_PIN_10;
 80019b4:	f44f 6382 	mov.w	r3, #1040	@ 0x410
 80019b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ba:	2301      	movs	r3, #1
 80019bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019be:	2300      	movs	r3, #0
 80019c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c2:	2300      	movs	r3, #0
 80019c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c6:	f107 0314 	add.w	r3, r7, #20
 80019ca:	4619      	mov	r1, r3
 80019cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019d0:	f003 f8ae 	bl	8004b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80019d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80019d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019da:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80019de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019e4:	f107 0314 	add.w	r3, r7, #20
 80019e8:	4619      	mov	r1, r3
 80019ea:	4808      	ldr	r0, [pc, #32]	@ (8001a0c <MX_GPIO_Init+0xdc>)
 80019ec:	f003 f8a0 	bl	8004b30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80019f0:	2200      	movs	r2, #0
 80019f2:	2100      	movs	r1, #0
 80019f4:	2017      	movs	r0, #23
 80019f6:	f002 fdf4 	bl	80045e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80019fa:	2017      	movs	r0, #23
 80019fc:	f002 fe0b 	bl	8004616 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a00:	bf00      	nop
 8001a02:	3728      	adds	r7, #40	@ 0x28
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	48000400 	.word	0x48000400

08001a10 <HAL_ADC_ConvHalfCpltCallback>:



//delay
 void HAL_ADC_ConvHalfCpltCallback	(ADC_HandleTypeDef *hadc)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]


#if TOWHILE

	//抓数据进while
	if (WHILE_FLAG==0) {
 8001a18:	4b11      	ldr	r3, [pc, #68]	@ (8001a60 <HAL_ADC_ConvHalfCpltCallback+0x50>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d11a      	bne.n	8001a56 <HAL_ADC_ConvHalfCpltCallback+0x46>
		for (size_t i = 0; i < BUFFER_SIZE_HALF; i++)
 8001a20:	2300      	movs	r3, #0
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	e011      	b.n	8001a4a <HAL_ADC_ConvHalfCpltCallback+0x3a>
		{		WHILE_BUFFER[i] =ConvertToVoltage(ADC_BUFFER[i]);	}
 8001a26:	4a0f      	ldr	r2, [pc, #60]	@ (8001a64 <HAL_ADC_ConvHalfCpltCallback+0x54>)
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff f994 	bl	8000d5c <ConvertToVoltage>
 8001a34:	eef0 7a40 	vmov.f32	s15, s0
 8001a38:	4a0b      	ldr	r2, [pc, #44]	@ (8001a68 <HAL_ADC_ConvHalfCpltCallback+0x58>)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	4413      	add	r3, r2
 8001a40:	edc3 7a00 	vstr	s15, [r3]
		for (size_t i = 0; i < BUFFER_SIZE_HALF; i++)
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	3301      	adds	r3, #1
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2b95      	cmp	r3, #149	@ 0x95
 8001a4e:	d9ea      	bls.n	8001a26 <HAL_ADC_ConvHalfCpltCallback+0x16>
		WHILE_FLAG=1;
 8001a50:	4b03      	ldr	r3, [pc, #12]	@ (8001a60 <HAL_ADC_ConvHalfCpltCallback+0x50>)
 8001a52:	2201      	movs	r2, #1
 8001a54:	601a      	str	r2, [r3, #0]


#endif


}
 8001a56:	bf00      	nop
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	200011f4 	.word	0x200011f4
 8001a64:	20000830 	.word	0x20000830
 8001a68:	20000ce0 	.word	0x20000ce0

08001a6c <HAL_ADC_ConvCpltCallback>:
 void HAL_ADC_ConvCpltCallback		(ADC_HandleTypeDef *hadc)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
#endif

#if TOWHILE

//	抓数据进while
	if (WHILE_FLAG==1) {
 8001a74:	4b11      	ldr	r3, [pc, #68]	@ (8001abc <HAL_ADC_ConvCpltCallback+0x50>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d11b      	bne.n	8001ab4 <HAL_ADC_ConvCpltCallback+0x48>
		for (size_t i = BUFFER_SIZE_HALF; i < BUFFER_SIZE; i++)
 8001a7c:	2396      	movs	r3, #150	@ 0x96
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	e011      	b.n	8001aa6 <HAL_ADC_ConvCpltCallback+0x3a>
		{		WHILE_BUFFER[i] =ConvertToVoltage(ADC_BUFFER[i]);		}
 8001a82:	4a0f      	ldr	r2, [pc, #60]	@ (8001ac0 <HAL_ADC_ConvCpltCallback+0x54>)
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff f966 	bl	8000d5c <ConvertToVoltage>
 8001a90:	eef0 7a40 	vmov.f32	s15, s0
 8001a94:	4a0b      	ldr	r2, [pc, #44]	@ (8001ac4 <HAL_ADC_ConvCpltCallback+0x58>)
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	4413      	add	r3, r2
 8001a9c:	edc3 7a00 	vstr	s15, [r3]
		for (size_t i = BUFFER_SIZE_HALF; i < BUFFER_SIZE; i++)
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001aac:	d3e9      	bcc.n	8001a82 <HAL_ADC_ConvCpltCallback+0x16>
		WHILE_FLAG=2;
 8001aae:	4b03      	ldr	r3, [pc, #12]	@ (8001abc <HAL_ADC_ConvCpltCallback+0x50>)
 8001ab0:	2202      	movs	r2, #2
 8001ab2:	601a      	str	r2, [r3, #0]
	}

#endif
}
 8001ab4:	bf00      	nop
 8001ab6:	3710      	adds	r7, #16
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	200011f4 	.word	0x200011f4
 8001ac0:	20000830 	.word	0x20000830
 8001ac4:	20000ce0 	.word	0x20000ce0

08001ac8 <HAL_TIM_IC_CaptureCallback>:




 void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 {
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]

   if (htim->Instance == TIM15) // 判断是否为TIM15
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a1a      	ldr	r2, [pc, #104]	@ (8001b40 <HAL_TIM_IC_CaptureCallback+0x78>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d12e      	bne.n	8001b38 <HAL_TIM_IC_CaptureCallback+0x70>
   {


     if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	7f1b      	ldrb	r3, [r3, #28]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d12a      	bne.n	8001b38 <HAL_TIM_IC_CaptureCallback+0x70>
     {

//  	   HAL_GPIO_TogglePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin);

       /* Get the Input Capture value */
       uwIC2Value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f007 fce5 	bl	80094b4 <HAL_TIM_ReadCapturedValue>
 8001aea:	4603      	mov	r3, r0
 8001aec:	4a15      	ldr	r2, [pc, #84]	@ (8001b44 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8001aee:	6013      	str	r3, [r2, #0]

       if (uwIC2Value != 0)
 8001af0:	4b14      	ldr	r3, [pc, #80]	@ (8001b44 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d019      	beq.n	8001b2c <HAL_TIM_IC_CaptureCallback+0x64>
       {
         /* Duty cycle computation */
         uwDutyCycle = 255-((HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2)) * 255) / uwIC2Value;
 8001af8:	2104      	movs	r1, #4
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f007 fcda 	bl	80094b4 <HAL_TIM_ReadCapturedValue>
 8001b00:	4602      	mov	r2, r0
 8001b02:	4613      	mov	r3, r2
 8001b04:	021b      	lsls	r3, r3, #8
 8001b06:	1a9a      	subs	r2, r3, r2
 8001b08:	4b0e      	ldr	r3, [pc, #56]	@ (8001b44 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b10:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8001b14:	4a0c      	ldr	r2, [pc, #48]	@ (8001b48 <HAL_TIM_IC_CaptureCallback+0x80>)
 8001b16:	6013      	str	r3, [r2, #0]

         /* uwFrequency computation
         TIM1 counter clock = (System Clock) */
         uwFrequency = ( HAL_RCC_GetSysClockFreq()  ) / uwIC2Value;
 8001b18:	f005 fcfe 	bl	8007518 <HAL_RCC_GetSysClockFreq>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	4b09      	ldr	r3, [pc, #36]	@ (8001b44 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b26:	4a09      	ldr	r2, [pc, #36]	@ (8001b4c <HAL_TIM_IC_CaptureCallback+0x84>)
 8001b28:	6013      	str	r3, [r2, #0]
         uwDutyCycle = 0;
         uwFrequency = 0;
       }
     }
   }
 }
 8001b2a:	e005      	b.n	8001b38 <HAL_TIM_IC_CaptureCallback+0x70>
         uwDutyCycle = 0;
 8001b2c:	4b06      	ldr	r3, [pc, #24]	@ (8001b48 <HAL_TIM_IC_CaptureCallback+0x80>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	601a      	str	r2, [r3, #0]
         uwFrequency = 0;
 8001b32:	4b06      	ldr	r3, [pc, #24]	@ (8001b4c <HAL_TIM_IC_CaptureCallback+0x84>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
 }
 8001b38:	bf00      	nop
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40014000 	.word	0x40014000
 8001b44:	20000820 	.word	0x20000820
 8001b48:	20000824 	.word	0x20000824
 8001b4c:	20000828 	.word	0x20000828

08001b50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* User can add his own implementation to report the HAL error return state */



//  __disable_irq();
  HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, 0);
 8001b54:	2200      	movs	r2, #0
 8001b56:	2110      	movs	r1, #16
 8001b58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b5c:	f003 f96a 	bl	8004e34 <HAL_GPIO_WritePin>
//  while (1)
//  {
//
//  }
  /* USER CODE END Error_Handler_Debug */
}
 8001b60:	bf00      	nop
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b6a:	4b14      	ldr	r3, [pc, #80]	@ (8001bbc <HAL_MspInit+0x58>)
 8001b6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b6e:	4a13      	ldr	r2, [pc, #76]	@ (8001bbc <HAL_MspInit+0x58>)
 8001b70:	f043 0301 	orr.w	r3, r3, #1
 8001b74:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b76:	4b11      	ldr	r3, [pc, #68]	@ (8001bbc <HAL_MspInit+0x58>)
 8001b78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	607b      	str	r3, [r7, #4]
 8001b80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b82:	4b0e      	ldr	r3, [pc, #56]	@ (8001bbc <HAL_MspInit+0x58>)
 8001b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b86:	4a0d      	ldr	r2, [pc, #52]	@ (8001bbc <HAL_MspInit+0x58>)
 8001b88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b8e:	4b0b      	ldr	r3, [pc, #44]	@ (8001bbc <HAL_MspInit+0x58>)
 8001b90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b96:	603b      	str	r3, [r7, #0]
 8001b98:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Tune the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_VREFBUF_TrimmingConfig(0);
 8001b9a:	2000      	movs	r0, #0
 8001b9c:	f000 fe00 	bl	80027a0 <HAL_SYSCFG_VREFBUF_TrimmingConfig>

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 8001ba0:	2000      	movs	r0, #0
 8001ba2:	f000 fdd5 	bl	8002750 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 8001ba6:	f000 fe0f 	bl	80027c8 <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8001baa:	2000      	movs	r0, #0
 8001bac:	f000 fde4 	bl	8002778 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001bb0:	f005 f854 	bl	8006c5c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bb4:	bf00      	nop
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40021000 	.word	0x40021000

08001bc0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b0a0      	sub	sp, #128	@ 0x80
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	605a      	str	r2, [r3, #4]
 8001bd2:	609a      	str	r2, [r3, #8]
 8001bd4:	60da      	str	r2, [r3, #12]
 8001bd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bd8:	f107 0318 	add.w	r3, r7, #24
 8001bdc:	2254      	movs	r2, #84	@ 0x54
 8001bde:	2100      	movs	r1, #0
 8001be0:	4618      	mov	r0, r3
 8001be2:	f00e fa2c 	bl	801003e <memset>
  if(hadc->Instance==ADC1)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001bee:	d158      	bne.n	8001ca2 <HAL_ADC_MspInit+0xe2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001bf0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001bf4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001bf6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001bfa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bfc:	f107 0318 	add.w	r3, r7, #24
 8001c00:	4618      	mov	r0, r3
 8001c02:	f005 fd31 	bl	8007668 <HAL_RCCEx_PeriphCLKConfig>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001c0c:	f7ff ffa0 	bl	8001b50 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001c10:	4b87      	ldr	r3, [pc, #540]	@ (8001e30 <HAL_ADC_MspInit+0x270>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	3301      	adds	r3, #1
 8001c16:	4a86      	ldr	r2, [pc, #536]	@ (8001e30 <HAL_ADC_MspInit+0x270>)
 8001c18:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001c1a:	4b85      	ldr	r3, [pc, #532]	@ (8001e30 <HAL_ADC_MspInit+0x270>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d10b      	bne.n	8001c3a <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001c22:	4b84      	ldr	r3, [pc, #528]	@ (8001e34 <HAL_ADC_MspInit+0x274>)
 8001c24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c26:	4a83      	ldr	r2, [pc, #524]	@ (8001e34 <HAL_ADC_MspInit+0x274>)
 8001c28:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001c2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c2e:	4b81      	ldr	r3, [pc, #516]	@ (8001e34 <HAL_ADC_MspInit+0x274>)
 8001c30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c36:	617b      	str	r3, [r7, #20]
 8001c38:	697b      	ldr	r3, [r7, #20]
    }

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 8001c3a:	4b7f      	ldr	r3, [pc, #508]	@ (8001e38 <HAL_ADC_MspInit+0x278>)
 8001c3c:	4a7f      	ldr	r2, [pc, #508]	@ (8001e3c <HAL_ADC_MspInit+0x27c>)
 8001c3e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001c40:	4b7d      	ldr	r3, [pc, #500]	@ (8001e38 <HAL_ADC_MspInit+0x278>)
 8001c42:	2205      	movs	r2, #5
 8001c44:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c46:	4b7c      	ldr	r3, [pc, #496]	@ (8001e38 <HAL_ADC_MspInit+0x278>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c4c:	4b7a      	ldr	r3, [pc, #488]	@ (8001e38 <HAL_ADC_MspInit+0x278>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001c52:	4b79      	ldr	r3, [pc, #484]	@ (8001e38 <HAL_ADC_MspInit+0x278>)
 8001c54:	2280      	movs	r2, #128	@ 0x80
 8001c56:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001c58:	4b77      	ldr	r3, [pc, #476]	@ (8001e38 <HAL_ADC_MspInit+0x278>)
 8001c5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c5e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001c60:	4b75      	ldr	r3, [pc, #468]	@ (8001e38 <HAL_ADC_MspInit+0x278>)
 8001c62:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001c66:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001c68:	4b73      	ldr	r3, [pc, #460]	@ (8001e38 <HAL_ADC_MspInit+0x278>)
 8001c6a:	2220      	movs	r2, #32
 8001c6c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001c6e:	4b72      	ldr	r3, [pc, #456]	@ (8001e38 <HAL_ADC_MspInit+0x278>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001c74:	4870      	ldr	r0, [pc, #448]	@ (8001e38 <HAL_ADC_MspInit+0x278>)
 8001c76:	f002 fce9 	bl	800464c <HAL_DMA_Init>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001c80:	f7ff ff66 	bl	8001b50 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4a6c      	ldr	r2, [pc, #432]	@ (8001e38 <HAL_ADC_MspInit+0x278>)
 8001c88:	655a      	str	r2, [r3, #84]	@ 0x54
 8001c8a:	4a6b      	ldr	r2, [pc, #428]	@ (8001e38 <HAL_ADC_MspInit+0x278>)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001c90:	2200      	movs	r2, #0
 8001c92:	2100      	movs	r1, #0
 8001c94:	2012      	movs	r0, #18
 8001c96:	f002 fca4 	bl	80045e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001c9a:	2012      	movs	r0, #18
 8001c9c:	f002 fcbb 	bl	8004616 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001ca0:	e0c2      	b.n	8001e28 <HAL_ADC_MspInit+0x268>
  else if(hadc->Instance==ADC2)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a66      	ldr	r2, [pc, #408]	@ (8001e40 <HAL_ADC_MspInit+0x280>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d171      	bne.n	8001d90 <HAL_ADC_MspInit+0x1d0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001cac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001cb0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001cb2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001cb6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cb8:	f107 0318 	add.w	r3, r7, #24
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f005 fcd3 	bl	8007668 <HAL_RCCEx_PeriphCLKConfig>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <HAL_ADC_MspInit+0x10c>
      Error_Handler();
 8001cc8:	f7ff ff42 	bl	8001b50 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001ccc:	4b58      	ldr	r3, [pc, #352]	@ (8001e30 <HAL_ADC_MspInit+0x270>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	4a57      	ldr	r2, [pc, #348]	@ (8001e30 <HAL_ADC_MspInit+0x270>)
 8001cd4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001cd6:	4b56      	ldr	r3, [pc, #344]	@ (8001e30 <HAL_ADC_MspInit+0x270>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d10b      	bne.n	8001cf6 <HAL_ADC_MspInit+0x136>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001cde:	4b55      	ldr	r3, [pc, #340]	@ (8001e34 <HAL_ADC_MspInit+0x274>)
 8001ce0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ce2:	4a54      	ldr	r2, [pc, #336]	@ (8001e34 <HAL_ADC_MspInit+0x274>)
 8001ce4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001ce8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cea:	4b52      	ldr	r3, [pc, #328]	@ (8001e34 <HAL_ADC_MspInit+0x274>)
 8001cec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001cf2:	613b      	str	r3, [r7, #16]
 8001cf4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf6:	4b4f      	ldr	r3, [pc, #316]	@ (8001e34 <HAL_ADC_MspInit+0x274>)
 8001cf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cfa:	4a4e      	ldr	r2, [pc, #312]	@ (8001e34 <HAL_ADC_MspInit+0x274>)
 8001cfc:	f043 0301 	orr.w	r3, r3, #1
 8001d00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d02:	4b4c      	ldr	r3, [pc, #304]	@ (8001e34 <HAL_ADC_MspInit+0x274>)
 8001d04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	60fb      	str	r3, [r7, #12]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d12:	2303      	movs	r3, #3
 8001d14:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d16:	2300      	movs	r3, #0
 8001d18:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d1a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001d1e:	4619      	mov	r1, r3
 8001d20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d24:	f002 ff04 	bl	8004b30 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel3;
 8001d28:	4b46      	ldr	r3, [pc, #280]	@ (8001e44 <HAL_ADC_MspInit+0x284>)
 8001d2a:	4a47      	ldr	r2, [pc, #284]	@ (8001e48 <HAL_ADC_MspInit+0x288>)
 8001d2c:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8001d2e:	4b45      	ldr	r3, [pc, #276]	@ (8001e44 <HAL_ADC_MspInit+0x284>)
 8001d30:	2224      	movs	r2, #36	@ 0x24
 8001d32:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d34:	4b43      	ldr	r3, [pc, #268]	@ (8001e44 <HAL_ADC_MspInit+0x284>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d3a:	4b42      	ldr	r3, [pc, #264]	@ (8001e44 <HAL_ADC_MspInit+0x284>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001d40:	4b40      	ldr	r3, [pc, #256]	@ (8001e44 <HAL_ADC_MspInit+0x284>)
 8001d42:	2280      	movs	r2, #128	@ 0x80
 8001d44:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001d46:	4b3f      	ldr	r3, [pc, #252]	@ (8001e44 <HAL_ADC_MspInit+0x284>)
 8001d48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d4c:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001d4e:	4b3d      	ldr	r3, [pc, #244]	@ (8001e44 <HAL_ADC_MspInit+0x284>)
 8001d50:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001d54:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001d56:	4b3b      	ldr	r3, [pc, #236]	@ (8001e44 <HAL_ADC_MspInit+0x284>)
 8001d58:	2220      	movs	r2, #32
 8001d5a:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001d5c:	4b39      	ldr	r3, [pc, #228]	@ (8001e44 <HAL_ADC_MspInit+0x284>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001d62:	4838      	ldr	r0, [pc, #224]	@ (8001e44 <HAL_ADC_MspInit+0x284>)
 8001d64:	f002 fc72 	bl	800464c <HAL_DMA_Init>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <HAL_ADC_MspInit+0x1b2>
      Error_Handler();
 8001d6e:	f7ff feef 	bl	8001b50 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a33      	ldr	r2, [pc, #204]	@ (8001e44 <HAL_ADC_MspInit+0x284>)
 8001d76:	655a      	str	r2, [r3, #84]	@ 0x54
 8001d78:	4a32      	ldr	r2, [pc, #200]	@ (8001e44 <HAL_ADC_MspInit+0x284>)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001d7e:	2200      	movs	r2, #0
 8001d80:	2100      	movs	r1, #0
 8001d82:	2012      	movs	r0, #18
 8001d84:	f002 fc2d 	bl	80045e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001d88:	2012      	movs	r0, #18
 8001d8a:	f002 fc44 	bl	8004616 <HAL_NVIC_EnableIRQ>
}
 8001d8e:	e04b      	b.n	8001e28 <HAL_ADC_MspInit+0x268>
  else if(hadc->Instance==ADC3)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a2d      	ldr	r2, [pc, #180]	@ (8001e4c <HAL_ADC_MspInit+0x28c>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d146      	bne.n	8001e28 <HAL_ADC_MspInit+0x268>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001d9a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d9e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001da0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001da4:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001da6:	f107 0318 	add.w	r3, r7, #24
 8001daa:	4618      	mov	r0, r3
 8001dac:	f005 fc5c 	bl	8007668 <HAL_RCCEx_PeriphCLKConfig>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <HAL_ADC_MspInit+0x1fa>
      Error_Handler();
 8001db6:	f7ff fecb 	bl	8001b50 <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 8001dba:	4b1e      	ldr	r3, [pc, #120]	@ (8001e34 <HAL_ADC_MspInit+0x274>)
 8001dbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dbe:	4a1d      	ldr	r2, [pc, #116]	@ (8001e34 <HAL_ADC_MspInit+0x274>)
 8001dc0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dc6:	4b1b      	ldr	r3, [pc, #108]	@ (8001e34 <HAL_ADC_MspInit+0x274>)
 8001dc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dce:	60bb      	str	r3, [r7, #8]
 8001dd0:	68bb      	ldr	r3, [r7, #8]
    hdma_adc3.Instance = DMA1_Channel4;
 8001dd2:	4b1f      	ldr	r3, [pc, #124]	@ (8001e50 <HAL_ADC_MspInit+0x290>)
 8001dd4:	4a1f      	ldr	r2, [pc, #124]	@ (8001e54 <HAL_ADC_MspInit+0x294>)
 8001dd6:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001dd8:	4b1d      	ldr	r3, [pc, #116]	@ (8001e50 <HAL_ADC_MspInit+0x290>)
 8001dda:	2225      	movs	r2, #37	@ 0x25
 8001ddc:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001dde:	4b1c      	ldr	r3, [pc, #112]	@ (8001e50 <HAL_ADC_MspInit+0x290>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001de4:	4b1a      	ldr	r3, [pc, #104]	@ (8001e50 <HAL_ADC_MspInit+0x290>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001dea:	4b19      	ldr	r3, [pc, #100]	@ (8001e50 <HAL_ADC_MspInit+0x290>)
 8001dec:	2280      	movs	r2, #128	@ 0x80
 8001dee:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001df0:	4b17      	ldr	r3, [pc, #92]	@ (8001e50 <HAL_ADC_MspInit+0x290>)
 8001df2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001df6:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001df8:	4b15      	ldr	r3, [pc, #84]	@ (8001e50 <HAL_ADC_MspInit+0x290>)
 8001dfa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001dfe:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8001e00:	4b13      	ldr	r3, [pc, #76]	@ (8001e50 <HAL_ADC_MspInit+0x290>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001e06:	4b12      	ldr	r3, [pc, #72]	@ (8001e50 <HAL_ADC_MspInit+0x290>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001e0c:	4810      	ldr	r0, [pc, #64]	@ (8001e50 <HAL_ADC_MspInit+0x290>)
 8001e0e:	f002 fc1d 	bl	800464c <HAL_DMA_Init>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <HAL_ADC_MspInit+0x25c>
      Error_Handler();
 8001e18:	f7ff fe9a 	bl	8001b50 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4a0c      	ldr	r2, [pc, #48]	@ (8001e50 <HAL_ADC_MspInit+0x290>)
 8001e20:	655a      	str	r2, [r3, #84]	@ 0x54
 8001e22:	4a0b      	ldr	r2, [pc, #44]	@ (8001e50 <HAL_ADC_MspInit+0x290>)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8001e28:	bf00      	nop
 8001e2a:	3780      	adds	r7, #128	@ 0x80
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	200011fc 	.word	0x200011fc
 8001e34:	40021000 	.word	0x40021000
 8001e38:	200004ac 	.word	0x200004ac
 8001e3c:	4002001c 	.word	0x4002001c
 8001e40:	50000100 	.word	0x50000100
 8001e44:	2000050c 	.word	0x2000050c
 8001e48:	40020030 	.word	0x40020030
 8001e4c:	50000400 	.word	0x50000400
 8001e50:	2000056c 	.word	0x2000056c
 8001e54:	40020044 	.word	0x40020044

08001e58 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b08a      	sub	sp, #40	@ 0x28
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e60:	f107 0314 	add.w	r3, r7, #20
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	605a      	str	r2, [r3, #4]
 8001e6a:	609a      	str	r2, [r3, #8]
 8001e6c:	60da      	str	r2, [r3, #12]
 8001e6e:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a1f      	ldr	r2, [pc, #124]	@ (8001ef4 <HAL_OPAMP_MspInit+0x9c>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d119      	bne.n	8001eae <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e7a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ef8 <HAL_OPAMP_MspInit+0xa0>)
 8001e7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e7e:	4a1e      	ldr	r2, [pc, #120]	@ (8001ef8 <HAL_OPAMP_MspInit+0xa0>)
 8001e80:	f043 0301 	orr.w	r3, r3, #1
 8001e84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e86:	4b1c      	ldr	r3, [pc, #112]	@ (8001ef8 <HAL_OPAMP_MspInit+0xa0>)
 8001e88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	613b      	str	r3, [r7, #16]
 8001e90:	693b      	ldr	r3, [r7, #16]
    /**OPAMP1 GPIO Configuration
    PA1     ------> OPAMP1_VINP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001e92:	2302      	movs	r3, #2
 8001e94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e96:	2303      	movs	r3, #3
 8001e98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e9e:	f107 0314 	add.w	r3, r7, #20
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ea8:	f002 fe42 	bl	8004b30 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }

}
 8001eac:	e01d      	b.n	8001eea <HAL_OPAMP_MspInit+0x92>
  else if(hopamp->Instance==OPAMP3)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a12      	ldr	r2, [pc, #72]	@ (8001efc <HAL_OPAMP_MspInit+0xa4>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d118      	bne.n	8001eea <HAL_OPAMP_MspInit+0x92>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb8:	4b0f      	ldr	r3, [pc, #60]	@ (8001ef8 <HAL_OPAMP_MspInit+0xa0>)
 8001eba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ebc:	4a0e      	ldr	r2, [pc, #56]	@ (8001ef8 <HAL_OPAMP_MspInit+0xa0>)
 8001ebe:	f043 0301 	orr.w	r3, r3, #1
 8001ec2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef8 <HAL_OPAMP_MspInit+0xa0>)
 8001ec6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ec8:	f003 0301 	and.w	r3, r3, #1
 8001ecc:	60fb      	str	r3, [r7, #12]
 8001ece:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001edc:	f107 0314 	add.w	r3, r7, #20
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ee6:	f002 fe23 	bl	8004b30 <HAL_GPIO_Init>
}
 8001eea:	bf00      	nop
 8001eec:	3728      	adds	r7, #40	@ 0x28
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40010300 	.word	0x40010300
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	40010308 	.word	0x40010308

08001f00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b08e      	sub	sp, #56	@ 0x38
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	605a      	str	r2, [r3, #4]
 8001f12:	609a      	str	r2, [r3, #8]
 8001f14:	60da      	str	r2, [r3, #12]
 8001f16:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a6b      	ldr	r2, [pc, #428]	@ (80020cc <HAL_TIM_Base_MspInit+0x1cc>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d114      	bne.n	8001f4c <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f22:	4b6b      	ldr	r3, [pc, #428]	@ (80020d0 <HAL_TIM_Base_MspInit+0x1d0>)
 8001f24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f26:	4a6a      	ldr	r2, [pc, #424]	@ (80020d0 <HAL_TIM_Base_MspInit+0x1d0>)
 8001f28:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001f2c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f2e:	4b68      	ldr	r3, [pc, #416]	@ (80020d0 <HAL_TIM_Base_MspInit+0x1d0>)
 8001f30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f32:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f36:	623b      	str	r3, [r7, #32]
 8001f38:	6a3b      	ldr	r3, [r7, #32]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	2018      	movs	r0, #24
 8001f40:	f002 fb4f 	bl	80045e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001f44:	2018      	movs	r0, #24
 8001f46:	f002 fb66 	bl	8004616 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001f4a:	e0bb      	b.n	80020c4 <HAL_TIM_Base_MspInit+0x1c4>
  else if(htim_base->Instance==TIM2)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f54:	d129      	bne.n	8001faa <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f56:	4b5e      	ldr	r3, [pc, #376]	@ (80020d0 <HAL_TIM_Base_MspInit+0x1d0>)
 8001f58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f5a:	4a5d      	ldr	r2, [pc, #372]	@ (80020d0 <HAL_TIM_Base_MspInit+0x1d0>)
 8001f5c:	f043 0301 	orr.w	r3, r3, #1
 8001f60:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f62:	4b5b      	ldr	r3, [pc, #364]	@ (80020d0 <HAL_TIM_Base_MspInit+0x1d0>)
 8001f64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	61fb      	str	r3, [r7, #28]
 8001f6c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f6e:	4b58      	ldr	r3, [pc, #352]	@ (80020d0 <HAL_TIM_Base_MspInit+0x1d0>)
 8001f70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f72:	4a57      	ldr	r2, [pc, #348]	@ (80020d0 <HAL_TIM_Base_MspInit+0x1d0>)
 8001f74:	f043 0301 	orr.w	r3, r3, #1
 8001f78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f7a:	4b55      	ldr	r3, [pc, #340]	@ (80020d0 <HAL_TIM_Base_MspInit+0x1d0>)
 8001f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	61bb      	str	r3, [r7, #24]
 8001f84:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f86:	2301      	movs	r3, #1
 8001f88:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f92:	2300      	movs	r3, #0
 8001f94:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM2;
 8001f96:	230e      	movs	r3, #14
 8001f98:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fa4:	f002 fdc4 	bl	8004b30 <HAL_GPIO_Init>
}
 8001fa8:	e08c      	b.n	80020c4 <HAL_TIM_Base_MspInit+0x1c4>
  else if(htim_base->Instance==TIM3)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a49      	ldr	r2, [pc, #292]	@ (80020d4 <HAL_TIM_Base_MspInit+0x1d4>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d137      	bne.n	8002024 <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fb4:	4b46      	ldr	r3, [pc, #280]	@ (80020d0 <HAL_TIM_Base_MspInit+0x1d0>)
 8001fb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fb8:	4a45      	ldr	r2, [pc, #276]	@ (80020d0 <HAL_TIM_Base_MspInit+0x1d0>)
 8001fba:	f043 0302 	orr.w	r3, r3, #2
 8001fbe:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fc0:	4b43      	ldr	r3, [pc, #268]	@ (80020d0 <HAL_TIM_Base_MspInit+0x1d0>)
 8001fc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	617b      	str	r3, [r7, #20]
 8001fca:	697b      	ldr	r3, [r7, #20]
    hdma_tim3_ch4.Instance = DMA1_Channel1;
 8001fcc:	4b42      	ldr	r3, [pc, #264]	@ (80020d8 <HAL_TIM_Base_MspInit+0x1d8>)
 8001fce:	4a43      	ldr	r2, [pc, #268]	@ (80020dc <HAL_TIM_Base_MspInit+0x1dc>)
 8001fd0:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4.Init.Request = DMA_REQUEST_TIM3_CH4;
 8001fd2:	4b41      	ldr	r3, [pc, #260]	@ (80020d8 <HAL_TIM_Base_MspInit+0x1d8>)
 8001fd4:	2240      	movs	r2, #64	@ 0x40
 8001fd6:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fd8:	4b3f      	ldr	r3, [pc, #252]	@ (80020d8 <HAL_TIM_Base_MspInit+0x1d8>)
 8001fda:	2210      	movs	r2, #16
 8001fdc:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fde:	4b3e      	ldr	r3, [pc, #248]	@ (80020d8 <HAL_TIM_Base_MspInit+0x1d8>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8001fe4:	4b3c      	ldr	r3, [pc, #240]	@ (80020d8 <HAL_TIM_Base_MspInit+0x1d8>)
 8001fe6:	2280      	movs	r2, #128	@ 0x80
 8001fe8:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001fea:	4b3b      	ldr	r3, [pc, #236]	@ (80020d8 <HAL_TIM_Base_MspInit+0x1d8>)
 8001fec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ff0:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ff2:	4b39      	ldr	r3, [pc, #228]	@ (80020d8 <HAL_TIM_Base_MspInit+0x1d8>)
 8001ff4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ff8:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4.Init.Mode = DMA_NORMAL;
 8001ffa:	4b37      	ldr	r3, [pc, #220]	@ (80020d8 <HAL_TIM_Base_MspInit+0x1d8>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8002000:	4b35      	ldr	r3, [pc, #212]	@ (80020d8 <HAL_TIM_Base_MspInit+0x1d8>)
 8002002:	2200      	movs	r2, #0
 8002004:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch4) != HAL_OK)
 8002006:	4834      	ldr	r0, [pc, #208]	@ (80020d8 <HAL_TIM_Base_MspInit+0x1d8>)
 8002008:	f002 fb20 	bl	800464c <HAL_DMA_Init>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <HAL_TIM_Base_MspInit+0x116>
      Error_Handler();
 8002012:	f7ff fd9d 	bl	8001b50 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a2f      	ldr	r2, [pc, #188]	@ (80020d8 <HAL_TIM_Base_MspInit+0x1d8>)
 800201a:	631a      	str	r2, [r3, #48]	@ 0x30
 800201c:	4a2e      	ldr	r2, [pc, #184]	@ (80020d8 <HAL_TIM_Base_MspInit+0x1d8>)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8002022:	e04f      	b.n	80020c4 <HAL_TIM_Base_MspInit+0x1c4>
  else if(htim_base->Instance==TIM4)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a2d      	ldr	r2, [pc, #180]	@ (80020e0 <HAL_TIM_Base_MspInit+0x1e0>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d114      	bne.n	8002058 <HAL_TIM_Base_MspInit+0x158>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800202e:	4b28      	ldr	r3, [pc, #160]	@ (80020d0 <HAL_TIM_Base_MspInit+0x1d0>)
 8002030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002032:	4a27      	ldr	r2, [pc, #156]	@ (80020d0 <HAL_TIM_Base_MspInit+0x1d0>)
 8002034:	f043 0304 	orr.w	r3, r3, #4
 8002038:	6593      	str	r3, [r2, #88]	@ 0x58
 800203a:	4b25      	ldr	r3, [pc, #148]	@ (80020d0 <HAL_TIM_Base_MspInit+0x1d0>)
 800203c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800203e:	f003 0304 	and.w	r3, r3, #4
 8002042:	613b      	str	r3, [r7, #16]
 8002044:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002046:	2200      	movs	r2, #0
 8002048:	2100      	movs	r1, #0
 800204a:	201e      	movs	r0, #30
 800204c:	f002 fac9 	bl	80045e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002050:	201e      	movs	r0, #30
 8002052:	f002 fae0 	bl	8004616 <HAL_NVIC_EnableIRQ>
}
 8002056:	e035      	b.n	80020c4 <HAL_TIM_Base_MspInit+0x1c4>
  else if(htim_base->Instance==TIM15)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a21      	ldr	r2, [pc, #132]	@ (80020e4 <HAL_TIM_Base_MspInit+0x1e4>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d130      	bne.n	80020c4 <HAL_TIM_Base_MspInit+0x1c4>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002062:	4b1b      	ldr	r3, [pc, #108]	@ (80020d0 <HAL_TIM_Base_MspInit+0x1d0>)
 8002064:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002066:	4a1a      	ldr	r2, [pc, #104]	@ (80020d0 <HAL_TIM_Base_MspInit+0x1d0>)
 8002068:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800206c:	6613      	str	r3, [r2, #96]	@ 0x60
 800206e:	4b18      	ldr	r3, [pc, #96]	@ (80020d0 <HAL_TIM_Base_MspInit+0x1d0>)
 8002070:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002072:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002076:	60fb      	str	r3, [r7, #12]
 8002078:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800207a:	4b15      	ldr	r3, [pc, #84]	@ (80020d0 <HAL_TIM_Base_MspInit+0x1d0>)
 800207c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800207e:	4a14      	ldr	r2, [pc, #80]	@ (80020d0 <HAL_TIM_Base_MspInit+0x1d0>)
 8002080:	f043 0301 	orr.w	r3, r3, #1
 8002084:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002086:	4b12      	ldr	r3, [pc, #72]	@ (80020d0 <HAL_TIM_Base_MspInit+0x1d0>)
 8002088:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	60bb      	str	r3, [r7, #8]
 8002090:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002092:	2304      	movs	r3, #4
 8002094:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002096:	2302      	movs	r3, #2
 8002098:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209a:	2300      	movs	r3, #0
 800209c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209e:	2300      	movs	r3, #0
 80020a0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 80020a2:	2309      	movs	r3, #9
 80020a4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020aa:	4619      	mov	r1, r3
 80020ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020b0:	f002 fd3e 	bl	8004b30 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80020b4:	2200      	movs	r2, #0
 80020b6:	2100      	movs	r1, #0
 80020b8:	2018      	movs	r0, #24
 80020ba:	f002 fa92 	bl	80045e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80020be:	2018      	movs	r0, #24
 80020c0:	f002 faa9 	bl	8004616 <HAL_NVIC_EnableIRQ>
}
 80020c4:	bf00      	nop
 80020c6:	3738      	adds	r7, #56	@ 0x38
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	40012c00 	.word	0x40012c00
 80020d0:	40021000 	.word	0x40021000
 80020d4:	40000400 	.word	0x40000400
 80020d8:	200007c0 	.word	0x200007c0
 80020dc:	40020008 	.word	0x40020008
 80020e0:	40000800 	.word	0x40000800
 80020e4:	40014000 	.word	0x40014000

080020e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b08a      	sub	sp, #40	@ 0x28
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f0:	f107 0314 	add.w	r3, r7, #20
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	605a      	str	r2, [r3, #4]
 80020fa:	609a      	str	r2, [r3, #8]
 80020fc:	60da      	str	r2, [r3, #12]
 80020fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a33      	ldr	r2, [pc, #204]	@ (80021d4 <HAL_TIM_MspPostInit+0xec>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d11c      	bne.n	8002144 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800210a:	4b33      	ldr	r3, [pc, #204]	@ (80021d8 <HAL_TIM_MspPostInit+0xf0>)
 800210c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800210e:	4a32      	ldr	r2, [pc, #200]	@ (80021d8 <HAL_TIM_MspPostInit+0xf0>)
 8002110:	f043 0304 	orr.w	r3, r3, #4
 8002114:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002116:	4b30      	ldr	r3, [pc, #192]	@ (80021d8 <HAL_TIM_MspPostInit+0xf0>)
 8002118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800211a:	f003 0304 	and.w	r3, r3, #4
 800211e:	613b      	str	r3, [r7, #16]
 8002120:	693b      	ldr	r3, [r7, #16]
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002122:	230f      	movs	r3, #15
 8002124:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002126:	2302      	movs	r3, #2
 8002128:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212a:	2300      	movs	r3, #0
 800212c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800212e:	2303      	movs	r3, #3
 8002130:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002132:	2302      	movs	r3, #2
 8002134:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002136:	f107 0314 	add.w	r3, r7, #20
 800213a:	4619      	mov	r1, r3
 800213c:	4827      	ldr	r0, [pc, #156]	@ (80021dc <HAL_TIM_MspPostInit+0xf4>)
 800213e:	f002 fcf7 	bl	8004b30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002142:	e043      	b.n	80021cc <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM2)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800214c:	d11d      	bne.n	800218a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800214e:	4b22      	ldr	r3, [pc, #136]	@ (80021d8 <HAL_TIM_MspPostInit+0xf0>)
 8002150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002152:	4a21      	ldr	r2, [pc, #132]	@ (80021d8 <HAL_TIM_MspPostInit+0xf0>)
 8002154:	f043 0302 	orr.w	r3, r3, #2
 8002158:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800215a:	4b1f      	ldr	r3, [pc, #124]	@ (80021d8 <HAL_TIM_MspPostInit+0xf0>)
 800215c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002166:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800216a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216c:	2302      	movs	r3, #2
 800216e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002170:	2300      	movs	r3, #0
 8002172:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002174:	2300      	movs	r3, #0
 8002176:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002178:	2301      	movs	r3, #1
 800217a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800217c:	f107 0314 	add.w	r3, r7, #20
 8002180:	4619      	mov	r1, r3
 8002182:	4817      	ldr	r0, [pc, #92]	@ (80021e0 <HAL_TIM_MspPostInit+0xf8>)
 8002184:	f002 fcd4 	bl	8004b30 <HAL_GPIO_Init>
}
 8002188:	e020      	b.n	80021cc <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a15      	ldr	r2, [pc, #84]	@ (80021e4 <HAL_TIM_MspPostInit+0xfc>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d11b      	bne.n	80021cc <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002194:	4b10      	ldr	r3, [pc, #64]	@ (80021d8 <HAL_TIM_MspPostInit+0xf0>)
 8002196:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002198:	4a0f      	ldr	r2, [pc, #60]	@ (80021d8 <HAL_TIM_MspPostInit+0xf0>)
 800219a:	f043 0302 	orr.w	r3, r3, #2
 800219e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021a0:	4b0d      	ldr	r3, [pc, #52]	@ (80021d8 <HAL_TIM_MspPostInit+0xf0>)
 80021a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021a4:	f003 0302 	and.w	r3, r3, #2
 80021a8:	60bb      	str	r3, [r7, #8]
 80021aa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80021ac:	2380      	movs	r3, #128	@ 0x80
 80021ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b0:	2302      	movs	r3, #2
 80021b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b4:	2300      	movs	r3, #0
 80021b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b8:	2300      	movs	r3, #0
 80021ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM3;
 80021bc:	230a      	movs	r3, #10
 80021be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021c0:	f107 0314 	add.w	r3, r7, #20
 80021c4:	4619      	mov	r1, r3
 80021c6:	4806      	ldr	r0, [pc, #24]	@ (80021e0 <HAL_TIM_MspPostInit+0xf8>)
 80021c8:	f002 fcb2 	bl	8004b30 <HAL_GPIO_Init>
}
 80021cc:	bf00      	nop
 80021ce:	3728      	adds	r7, #40	@ 0x28
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40012c00 	.word	0x40012c00
 80021d8:	40021000 	.word	0x40021000
 80021dc:	48000800 	.word	0x48000800
 80021e0:	48000400 	.word	0x48000400
 80021e4:	40000400 	.word	0x40000400

080021e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80021ec:	bf00      	nop
 80021ee:	e7fd      	b.n	80021ec <NMI_Handler+0x4>

080021f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021f4:	bf00      	nop
 80021f6:	e7fd      	b.n	80021f4 <HardFault_Handler+0x4>

080021f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021fc:	bf00      	nop
 80021fe:	e7fd      	b.n	80021fc <MemManage_Handler+0x4>

08002200 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002204:	bf00      	nop
 8002206:	e7fd      	b.n	8002204 <BusFault_Handler+0x4>

08002208 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800220c:	bf00      	nop
 800220e:	e7fd      	b.n	800220c <UsageFault_Handler+0x4>

08002210 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002214:	bf00      	nop
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr

0800221e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800221e:	b480      	push	{r7}
 8002220:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002222:	bf00      	nop
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002230:	bf00      	nop
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr

0800223a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800223a:	b580      	push	{r7, lr}
 800223c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800223e:	f000 fa69 	bl	8002714 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002242:	bf00      	nop
 8002244:	bd80      	pop	{r7, pc}
	...

08002248 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4);
 800224c:	4802      	ldr	r0, [pc, #8]	@ (8002258 <DMA1_Channel1_IRQHandler+0x10>)
 800224e:	f002 fb20 	bl	8004892 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002252:	bf00      	nop
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	200007c0 	.word	0x200007c0

0800225c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002260:	4802      	ldr	r0, [pc, #8]	@ (800226c <DMA1_Channel2_IRQHandler+0x10>)
 8002262:	f002 fb16 	bl	8004892 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002266:	bf00      	nop
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	200004ac 	.word	0x200004ac

08002270 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002274:	4802      	ldr	r0, [pc, #8]	@ (8002280 <DMA1_Channel3_IRQHandler+0x10>)
 8002276:	f002 fb0c 	bl	8004892 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800227a:	bf00      	nop
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	2000050c 	.word	0x2000050c

08002284 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002288:	4802      	ldr	r0, [pc, #8]	@ (8002294 <DMA1_Channel4_IRQHandler+0x10>)
 800228a:	f002 fb02 	bl	8004892 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800228e:	bf00      	nop
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	2000056c 	.word	0x2000056c

08002298 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800229c:	4803      	ldr	r0, [pc, #12]	@ (80022ac <ADC1_2_IRQHandler+0x14>)
 800229e:	f000 ff87 	bl	80031b0 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80022a2:	4803      	ldr	r0, [pc, #12]	@ (80022b0 <ADC1_2_IRQHandler+0x18>)
 80022a4:	f000 ff84 	bl	80031b0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80022a8:	bf00      	nop
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	20000368 	.word	0x20000368
 80022b0:	200003d4 	.word	0x200003d4

080022b4 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80022b8:	4802      	ldr	r0, [pc, #8]	@ (80022c4 <USB_LP_IRQHandler+0x10>)
 80022ba:	f002 ffe8 	bl	800528e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80022be:	bf00      	nop
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	20003298 	.word	0x20003298

080022c8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	BOOT0_BTN_COUNT=BOOT0_BTN_COUNT+1;
 80022cc:	4b05      	ldr	r3, [pc, #20]	@ (80022e4 <EXTI9_5_IRQHandler+0x1c>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	3301      	adds	r3, #1
 80022d2:	4a04      	ldr	r2, [pc, #16]	@ (80022e4 <EXTI9_5_IRQHandler+0x1c>)
 80022d4:	6013      	str	r3, [r2, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80022d6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80022da:	f002 fdc3 	bl	8004e64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80022de:	bf00      	nop
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	200011f8 	.word	0x200011f8

080022e8 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80022ec:	4803      	ldr	r0, [pc, #12]	@ (80022fc <TIM1_BRK_TIM15_IRQHandler+0x14>)
 80022ee:	f006 fc0f 	bl	8008b10 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 80022f2:	4803      	ldr	r0, [pc, #12]	@ (8002300 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 80022f4:	f006 fc0c 	bl	8008b10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80022f8:	bf00      	nop
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	20000644 	.word	0x20000644
 8002300:	20000774 	.word	0x20000774

08002304 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	USER_CounterTicks= TIM2->CNT;
 8002308:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800230c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800230e:	4a05      	ldr	r2, [pc, #20]	@ (8002324 <TIM4_IRQHandler+0x20>)
 8002310:	6013      	str	r3, [r2, #0]
  	TIM2->CNT=0;
 8002312:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002316:	2200      	movs	r2, #0
 8002318:	625a      	str	r2, [r3, #36]	@ 0x24
//	  sprintf(&CDC_BUFFER,"FRRQ: %d \r\n",USER_CounterTicks);
//	  CDC_Transmit_FS(&CDC_BUFFER, 50);

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800231a:	4803      	ldr	r0, [pc, #12]	@ (8002328 <TIM4_IRQHandler+0x24>)
 800231c:	f006 fbf8 	bl	8008b10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */


  /* USER CODE END TIM4_IRQn 1 */
}
 8002320:	bf00      	nop
 8002322:	bd80      	pop	{r7, pc}
 8002324:	2000082c 	.word	0x2000082c
 8002328:	20000728 	.word	0x20000728

0800232c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  return 1;
 8002330:	2301      	movs	r3, #1
}
 8002332:	4618      	mov	r0, r3
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <_kill>:

int _kill(int pid, int sig)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002346:	f00d fecd 	bl	80100e4 <__errno>
 800234a:	4603      	mov	r3, r0
 800234c:	2216      	movs	r2, #22
 800234e:	601a      	str	r2, [r3, #0]
  return -1;
 8002350:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002354:	4618      	mov	r0, r3
 8002356:	3708      	adds	r7, #8
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <_exit>:

void _exit (int status)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002364:	f04f 31ff 	mov.w	r1, #4294967295
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f7ff ffe7 	bl	800233c <_kill>
  while (1) {}    /* Make sure we hang here */
 800236e:	bf00      	nop
 8002370:	e7fd      	b.n	800236e <_exit+0x12>

08002372 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002372:	b580      	push	{r7, lr}
 8002374:	b086      	sub	sp, #24
 8002376:	af00      	add	r7, sp, #0
 8002378:	60f8      	str	r0, [r7, #12]
 800237a:	60b9      	str	r1, [r7, #8]
 800237c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800237e:	2300      	movs	r3, #0
 8002380:	617b      	str	r3, [r7, #20]
 8002382:	e00a      	b.n	800239a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002384:	f3af 8000 	nop.w
 8002388:	4601      	mov	r1, r0
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	1c5a      	adds	r2, r3, #1
 800238e:	60ba      	str	r2, [r7, #8]
 8002390:	b2ca      	uxtb	r2, r1
 8002392:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	3301      	adds	r3, #1
 8002398:	617b      	str	r3, [r7, #20]
 800239a:	697a      	ldr	r2, [r7, #20]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	429a      	cmp	r2, r3
 80023a0:	dbf0      	blt.n	8002384 <_read+0x12>
  }

  return len;
 80023a2:	687b      	ldr	r3, [r7, #4]
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3718      	adds	r7, #24
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023b8:	2300      	movs	r3, #0
 80023ba:	617b      	str	r3, [r7, #20]
 80023bc:	e009      	b.n	80023d2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	1c5a      	adds	r2, r3, #1
 80023c2:	60ba      	str	r2, [r7, #8]
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	3301      	adds	r3, #1
 80023d0:	617b      	str	r3, [r7, #20]
 80023d2:	697a      	ldr	r2, [r7, #20]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	dbf1      	blt.n	80023be <_write+0x12>
  }
  return len;
 80023da:	687b      	ldr	r3, [r7, #4]
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3718      	adds	r7, #24
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <_close>:

int _close(int file)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800240c:	605a      	str	r2, [r3, #4]
  return 0;
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <_isatty>:

int _isatty(int file)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002424:	2301      	movs	r3, #1
}
 8002426:	4618      	mov	r0, r3
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr

08002432 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002432:	b480      	push	{r7}
 8002434:	b085      	sub	sp, #20
 8002436:	af00      	add	r7, sp, #0
 8002438:	60f8      	str	r0, [r7, #12]
 800243a:	60b9      	str	r1, [r7, #8]
 800243c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800243e:	2300      	movs	r3, #0
}
 8002440:	4618      	mov	r0, r3
 8002442:	3714      	adds	r7, #20
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002454:	4a14      	ldr	r2, [pc, #80]	@ (80024a8 <_sbrk+0x5c>)
 8002456:	4b15      	ldr	r3, [pc, #84]	@ (80024ac <_sbrk+0x60>)
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002460:	4b13      	ldr	r3, [pc, #76]	@ (80024b0 <_sbrk+0x64>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d102      	bne.n	800246e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002468:	4b11      	ldr	r3, [pc, #68]	@ (80024b0 <_sbrk+0x64>)
 800246a:	4a12      	ldr	r2, [pc, #72]	@ (80024b4 <_sbrk+0x68>)
 800246c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800246e:	4b10      	ldr	r3, [pc, #64]	@ (80024b0 <_sbrk+0x64>)
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4413      	add	r3, r2
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	429a      	cmp	r2, r3
 800247a:	d207      	bcs.n	800248c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800247c:	f00d fe32 	bl	80100e4 <__errno>
 8002480:	4603      	mov	r3, r0
 8002482:	220c      	movs	r2, #12
 8002484:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002486:	f04f 33ff 	mov.w	r3, #4294967295
 800248a:	e009      	b.n	80024a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800248c:	4b08      	ldr	r3, [pc, #32]	@ (80024b0 <_sbrk+0x64>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002492:	4b07      	ldr	r3, [pc, #28]	@ (80024b0 <_sbrk+0x64>)
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4413      	add	r3, r2
 800249a:	4a05      	ldr	r2, [pc, #20]	@ (80024b0 <_sbrk+0x64>)
 800249c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800249e:	68fb      	ldr	r3, [r7, #12]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3718      	adds	r7, #24
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	20020000 	.word	0x20020000
 80024ac:	00000400 	.word	0x00000400
 80024b0:	20001200 	.word	0x20001200
 80024b4:	200038e0 	.word	0x200038e0

080024b8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80024bc:	4b06      	ldr	r3, [pc, #24]	@ (80024d8 <SystemInit+0x20>)
 80024be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024c2:	4a05      	ldr	r2, [pc, #20]	@ (80024d8 <SystemInit+0x20>)
 80024c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80024c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024cc:	bf00      	nop
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	e000ed00 	.word	0xe000ed00

080024dc <ws2812_update_force>:

/**
 * @brief  直接更新LED颜色
 */
void ws2812_update_force(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
	// 数据缓冲，每个LED占用24个字节，共10个LED，前100个字节用于复位信号
	static uint16_t ws2812_data[RST_PERIOD_NUM + WS2812_NUM * 24];

	for (uint8_t led_id = 0; led_id < WS2812_NUM; led_id++)
 80024e2:	2300      	movs	r3, #0
 80024e4:	71fb      	strb	r3, [r7, #7]
 80024e6:	e060      	b.n	80025aa <ws2812_update_force+0xce>
	{
		_ws2812_color_current[led_id] = ws2812_color[led_id];
 80024e8:	79fa      	ldrb	r2, [r7, #7]
 80024ea:	79fb      	ldrb	r3, [r7, #7]
 80024ec:	4936      	ldr	r1, [pc, #216]	@ (80025c8 <ws2812_update_force+0xec>)
 80024ee:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80024f2:	4936      	ldr	r1, [pc, #216]	@ (80025cc <ws2812_update_force+0xf0>)
 80024f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		static uint8_t r, g, b;
		color_to_rgb(_ws2812_color_current[led_id], &r, &g, &b);
 80024f8:	79fb      	ldrb	r3, [r7, #7]
 80024fa:	4a34      	ldr	r2, [pc, #208]	@ (80025cc <ws2812_update_force+0xf0>)
 80024fc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002500:	4b33      	ldr	r3, [pc, #204]	@ (80025d0 <ws2812_update_force+0xf4>)
 8002502:	4a34      	ldr	r2, [pc, #208]	@ (80025d4 <ws2812_update_force+0xf8>)
 8002504:	4934      	ldr	r1, [pc, #208]	@ (80025d8 <ws2812_update_force+0xfc>)
 8002506:	f000 f86d 	bl	80025e4 <color_to_rgb>
		uint16_t *p = ws2812_data + RST_PERIOD_NUM + led_id * 24;
 800250a:	79fa      	ldrb	r2, [r7, #7]
 800250c:	4613      	mov	r3, r2
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	4413      	add	r3, r2
 8002512:	011b      	lsls	r3, r3, #4
 8002514:	33c8      	adds	r3, #200	@ 0xc8
 8002516:	4a31      	ldr	r2, [pc, #196]	@ (80025dc <ws2812_update_force+0x100>)
 8002518:	4413      	add	r3, r2
 800251a:	603b      	str	r3, [r7, #0]
		for (uint8_t i = 0; i < 8; i++)
 800251c:	2300      	movs	r3, #0
 800251e:	71bb      	strb	r3, [r7, #6]
 8002520:	e03d      	b.n	800259e <ws2812_update_force+0xc2>
		{
			p[i] = (r << i) & (0x80) ? CODE_ONE_DUTY : CODE_ZERO_DUTY;
 8002522:	4b2d      	ldr	r3, [pc, #180]	@ (80025d8 <ws2812_update_force+0xfc>)
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	461a      	mov	r2, r3
 8002528:	79bb      	ldrb	r3, [r7, #6]
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <ws2812_update_force+0x5e>
 8002536:	2164      	movs	r1, #100	@ 0x64
 8002538:	e000      	b.n	800253c <ws2812_update_force+0x60>
 800253a:	2132      	movs	r1, #50	@ 0x32
 800253c:	79bb      	ldrb	r3, [r7, #6]
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	683a      	ldr	r2, [r7, #0]
 8002542:	4413      	add	r3, r2
 8002544:	460a      	mov	r2, r1
 8002546:	801a      	strh	r2, [r3, #0]
			p[i + 8] = (g << i) & (0x80) ? CODE_ONE_DUTY : CODE_ZERO_DUTY;
 8002548:	4b22      	ldr	r3, [pc, #136]	@ (80025d4 <ws2812_update_force+0xf8>)
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	461a      	mov	r2, r3
 800254e:	79bb      	ldrb	r3, [r7, #6]
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <ws2812_update_force+0x84>
 800255c:	2164      	movs	r1, #100	@ 0x64
 800255e:	e000      	b.n	8002562 <ws2812_update_force+0x86>
 8002560:	2132      	movs	r1, #50	@ 0x32
 8002562:	79bb      	ldrb	r3, [r7, #6]
 8002564:	3308      	adds	r3, #8
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	4413      	add	r3, r2
 800256c:	460a      	mov	r2, r1
 800256e:	801a      	strh	r2, [r3, #0]
			p[i + 16] = (b << i) & (0x80) ? CODE_ONE_DUTY : CODE_ZERO_DUTY;
 8002570:	4b17      	ldr	r3, [pc, #92]	@ (80025d0 <ws2812_update_force+0xf4>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	461a      	mov	r2, r3
 8002576:	79bb      	ldrb	r3, [r7, #6]
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <ws2812_update_force+0xac>
 8002584:	2164      	movs	r1, #100	@ 0x64
 8002586:	e000      	b.n	800258a <ws2812_update_force+0xae>
 8002588:	2132      	movs	r1, #50	@ 0x32
 800258a:	79bb      	ldrb	r3, [r7, #6]
 800258c:	3310      	adds	r3, #16
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	4413      	add	r3, r2
 8002594:	460a      	mov	r2, r1
 8002596:	801a      	strh	r2, [r3, #0]
		for (uint8_t i = 0; i < 8; i++)
 8002598:	79bb      	ldrb	r3, [r7, #6]
 800259a:	3301      	adds	r3, #1
 800259c:	71bb      	strb	r3, [r7, #6]
 800259e:	79bb      	ldrb	r3, [r7, #6]
 80025a0:	2b07      	cmp	r3, #7
 80025a2:	d9be      	bls.n	8002522 <ws2812_update_force+0x46>
	for (uint8_t led_id = 0; led_id < WS2812_NUM; led_id++)
 80025a4:	79fb      	ldrb	r3, [r7, #7]
 80025a6:	3301      	adds	r3, #1
 80025a8:	71fb      	strb	r3, [r7, #7]
 80025aa:	79fb      	ldrb	r3, [r7, #7]
 80025ac:	2b31      	cmp	r3, #49	@ 0x31
 80025ae:	d99b      	bls.n	80024e8 <ws2812_update_force+0xc>
		}
	}
	HAL_TIM_PWM_Start_DMA(&WS2812TIM, TIM_CHANNEL_4, (uint32_t *)ws2812_data,
 80025b0:	f240 5314 	movw	r3, #1300	@ 0x514
 80025b4:	4a09      	ldr	r2, [pc, #36]	@ (80025dc <ws2812_update_force+0x100>)
 80025b6:	210c      	movs	r1, #12
 80025b8:	4809      	ldr	r0, [pc, #36]	@ (80025e0 <ws2812_update_force+0x104>)
 80025ba:	f005 fecb 	bl	8008354 <HAL_TIM_PWM_Start_DMA>
						  RST_PERIOD_NUM + WS2812_NUM * 24);
}
 80025be:	bf00      	nop
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	20001204 	.word	0x20001204
 80025cc:	200012cc 	.word	0x200012cc
 80025d0:	20001396 	.word	0x20001396
 80025d4:	20001395 	.word	0x20001395
 80025d8:	20001394 	.word	0x20001394
 80025dc:	20001398 	.word	0x20001398
 80025e0:	200006dc 	.word	0x200006dc

080025e4 <color_to_rgb>:
 * @param  r: 红色亮度（0-255）
 * @param  g: 绿色亮度（0-255）
 * @param  b: 蓝色亮度（0-255）
 */
void color_to_rgb(uint32_t color, uint8_t *r, uint8_t *g, uint8_t *b)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
 80025f0:	603b      	str	r3, [r7, #0]
	*r = (color >> 16) & 0xFF;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	0c1b      	lsrs	r3, r3, #16
 80025f6:	b2da      	uxtb	r2, r3
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	701a      	strb	r2, [r3, #0]
	*g = (color >> 8) & 0xFF;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	0a1b      	lsrs	r3, r3, #8
 8002600:	b2da      	uxtb	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	701a      	strb	r2, [r3, #0]
	*b = color & 0xFF;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	b2da      	uxtb	r2, r3
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	701a      	strb	r2, [r3, #0]
}
 800260e:	bf00      	nop
 8002610:	3714      	adds	r7, #20
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
	...

0800261c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800261c:	480d      	ldr	r0, [pc, #52]	@ (8002654 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800261e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002620:	f7ff ff4a 	bl	80024b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002624:	480c      	ldr	r0, [pc, #48]	@ (8002658 <LoopForever+0x6>)
  ldr r1, =_edata
 8002626:	490d      	ldr	r1, [pc, #52]	@ (800265c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002628:	4a0d      	ldr	r2, [pc, #52]	@ (8002660 <LoopForever+0xe>)
  movs r3, #0
 800262a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800262c:	e002      	b.n	8002634 <LoopCopyDataInit>

0800262e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800262e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002630:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002632:	3304      	adds	r3, #4

08002634 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002634:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002636:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002638:	d3f9      	bcc.n	800262e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800263a:	4a0a      	ldr	r2, [pc, #40]	@ (8002664 <LoopForever+0x12>)
  ldr r4, =_ebss
 800263c:	4c0a      	ldr	r4, [pc, #40]	@ (8002668 <LoopForever+0x16>)
  movs r3, #0
 800263e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002640:	e001      	b.n	8002646 <LoopFillZerobss>

08002642 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002642:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002644:	3204      	adds	r2, #4

08002646 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002646:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002648:	d3fb      	bcc.n	8002642 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800264a:	f00d fd51 	bl	80100f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800264e:	f7fe fba1 	bl	8000d94 <main>

08002652 <LoopForever>:

LoopForever:
    b LoopForever
 8002652:	e7fe      	b.n	8002652 <LoopForever>
  ldr   r0, =_estack
 8002654:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002658:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800265c:	2000034c 	.word	0x2000034c
  ldr r2, =_sidata
 8002660:	08013cc0 	.word	0x08013cc0
  ldr r2, =_sbss
 8002664:	2000034c 	.word	0x2000034c
  ldr r4, =_ebss
 8002668:	200038e0 	.word	0x200038e0

0800266c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800266c:	e7fe      	b.n	800266c <ADC3_IRQHandler>

0800266e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800266e:	b580      	push	{r7, lr}
 8002670:	b082      	sub	sp, #8
 8002672:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002674:	2300      	movs	r3, #0
 8002676:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002678:	2003      	movs	r0, #3
 800267a:	f001 ffa7 	bl	80045cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800267e:	200f      	movs	r0, #15
 8002680:	f000 f80e 	bl	80026a0 <HAL_InitTick>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d002      	beq.n	8002690 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	71fb      	strb	r3, [r7, #7]
 800268e:	e001      	b.n	8002694 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002690:	f7ff fa68 	bl	8001b64 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002694:	79fb      	ldrb	r3, [r7, #7]

}
 8002696:	4618      	mov	r0, r3
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
	...

080026a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80026a8:	2300      	movs	r3, #0
 80026aa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80026ac:	4b16      	ldr	r3, [pc, #88]	@ (8002708 <HAL_InitTick+0x68>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d022      	beq.n	80026fa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80026b4:	4b15      	ldr	r3, [pc, #84]	@ (800270c <HAL_InitTick+0x6c>)
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	4b13      	ldr	r3, [pc, #76]	@ (8002708 <HAL_InitTick+0x68>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80026c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80026c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c8:	4618      	mov	r0, r3
 80026ca:	f001 ffb2 	bl	8004632 <HAL_SYSTICK_Config>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d10f      	bne.n	80026f4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2b0f      	cmp	r3, #15
 80026d8:	d809      	bhi.n	80026ee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026da:	2200      	movs	r2, #0
 80026dc:	6879      	ldr	r1, [r7, #4]
 80026de:	f04f 30ff 	mov.w	r0, #4294967295
 80026e2:	f001 ff7e 	bl	80045e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002710 <HAL_InitTick+0x70>)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6013      	str	r3, [r2, #0]
 80026ec:	e007      	b.n	80026fe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	73fb      	strb	r3, [r7, #15]
 80026f2:	e004      	b.n	80026fe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	73fb      	strb	r3, [r7, #15]
 80026f8:	e001      	b.n	80026fe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80026fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002700:	4618      	mov	r0, r3
 8002702:	3710      	adds	r7, #16
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	20000008 	.word	0x20000008
 800270c:	20000000 	.word	0x20000000
 8002710:	20000004 	.word	0x20000004

08002714 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002718:	4b05      	ldr	r3, [pc, #20]	@ (8002730 <HAL_IncTick+0x1c>)
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	4b05      	ldr	r3, [pc, #20]	@ (8002734 <HAL_IncTick+0x20>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4413      	add	r3, r2
 8002722:	4a03      	ldr	r2, [pc, #12]	@ (8002730 <HAL_IncTick+0x1c>)
 8002724:	6013      	str	r3, [r2, #0]
}
 8002726:	bf00      	nop
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr
 8002730:	20001dc0 	.word	0x20001dc0
 8002734:	20000008 	.word	0x20000008

08002738 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  return uwTick;
 800273c:	4b03      	ldr	r3, [pc, #12]	@ (800274c <HAL_GetTick+0x14>)
 800273e:	681b      	ldr	r3, [r3, #0]
}
 8002740:	4618      	mov	r0, r3
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	20001dc0 	.word	0x20001dc0

08002750 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE2: VREFBUF_OUT around 2.9 V.
  *                                                This requires VDDA equal to or higher than 3.15 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8002758:	4b06      	ldr	r3, [pc, #24]	@ (8002774 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002760:	4904      	ldr	r1, [pc, #16]	@ (8002774 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4313      	orrs	r3, r2
 8002766:	600b      	str	r3, [r1, #0]
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr
 8002774:	40010030 	.word	0x40010030

08002778 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8002780:	4b06      	ldr	r3, [pc, #24]	@ (800279c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f023 0202 	bic.w	r2, r3, #2
 8002788:	4904      	ldr	r1, [pc, #16]	@ (800279c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4313      	orrs	r3, r2
 800278e:	600b      	str	r3, [r1, #0]
}
 8002790:	bf00      	nop
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr
 800279c:	40010030 	.word	0x40010030

080027a0 <HAL_SYSCFG_VREFBUF_TrimmingConfig>:
  * @param TrimmingValue specifies trimming code for VREFBUF calibration
  *        This parameter can be a number between Min_Data = 0x00 and Max_Data = 0x3F
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_TrimmingConfig(uint32_t TrimmingValue)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_TRIMMING(TrimmingValue));

  MODIFY_REG(VREFBUF->CCR, VREFBUF_CCR_TRIM, TrimmingValue);
 80027a8:	4b06      	ldr	r3, [pc, #24]	@ (80027c4 <HAL_SYSCFG_VREFBUF_TrimmingConfig+0x24>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80027b0:	4904      	ldr	r1, [pc, #16]	@ (80027c4 <HAL_SYSCFG_VREFBUF_TrimmingConfig+0x24>)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	604b      	str	r3, [r1, #4]
}
 80027b8:	bf00      	nop
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr
 80027c4:	40010030 	.word	0x40010030

080027c8 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 80027ce:	4b0f      	ldr	r3, [pc, #60]	@ (800280c <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a0e      	ldr	r2, [pc, #56]	@ (800280c <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80027d4:	f043 0301 	orr.w	r3, r3, #1
 80027d8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80027da:	f7ff ffad 	bl	8002738 <HAL_GetTick>
 80027de:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 80027e0:	e008      	b.n	80027f4 <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 80027e2:	f7ff ffa9 	bl	8002738 <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	2b0a      	cmp	r3, #10
 80027ee:	d901      	bls.n	80027f4 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e006      	b.n	8002802 <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 80027f4:	4b05      	ldr	r3, [pc, #20]	@ (800280c <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0308 	and.w	r3, r3, #8
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d0f0      	beq.n	80027e2 <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	40010030 	.word	0x40010030

08002810 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	431a      	orrs	r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	609a      	str	r2, [r3, #8]
}
 800282a:	bf00      	nop
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr

08002836 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002836:	b480      	push	{r7}
 8002838:	b083      	sub	sp, #12
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
 800283e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	431a      	orrs	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	609a      	str	r2, [r3, #8]
}
 8002850:	bf00      	nop
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800286c:	4618      	mov	r0, r3
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002878:	b480      	push	{r7}
 800287a:	b087      	sub	sp, #28
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
 8002884:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	3360      	adds	r3, #96	@ 0x60
 800288a:	461a      	mov	r2, r3
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	4413      	add	r3, r2
 8002892:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	4b08      	ldr	r3, [pc, #32]	@ (80028bc <LL_ADC_SetOffset+0x44>)
 800289a:	4013      	ands	r3, r2
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80028a2:	683a      	ldr	r2, [r7, #0]
 80028a4:	430a      	orrs	r2, r1
 80028a6:	4313      	orrs	r3, r2
 80028a8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80028b0:	bf00      	nop
 80028b2:	371c      	adds	r7, #28
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr
 80028bc:	03fff000 	.word	0x03fff000

080028c0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	3360      	adds	r3, #96	@ 0x60
 80028ce:	461a      	mov	r2, r3
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	4413      	add	r3, r2
 80028d6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3714      	adds	r7, #20
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b087      	sub	sp, #28
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	3360      	adds	r3, #96	@ 0x60
 80028fc:	461a      	mov	r2, r3
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	4413      	add	r3, r2
 8002904:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	431a      	orrs	r2, r3
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002916:	bf00      	nop
 8002918:	371c      	adds	r7, #28
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr

08002922 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002922:	b480      	push	{r7}
 8002924:	b087      	sub	sp, #28
 8002926:	af00      	add	r7, sp, #0
 8002928:	60f8      	str	r0, [r7, #12]
 800292a:	60b9      	str	r1, [r7, #8]
 800292c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	3360      	adds	r3, #96	@ 0x60
 8002932:	461a      	mov	r2, r3
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	4413      	add	r3, r2
 800293a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	431a      	orrs	r2, r3
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800294c:	bf00      	nop
 800294e:	371c      	adds	r7, #28
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002958:	b480      	push	{r7}
 800295a:	b087      	sub	sp, #28
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	3360      	adds	r3, #96	@ 0x60
 8002968:	461a      	mov	r2, r3
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	4413      	add	r3, r2
 8002970:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	431a      	orrs	r2, r3
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002982:	bf00      	nop
 8002984:	371c      	adds	r7, #28
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr

0800298e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800298e:	b480      	push	{r7}
 8002990:	b083      	sub	sp, #12
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
 8002996:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	695b      	ldr	r3, [r3, #20]
 800299c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	431a      	orrs	r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	615a      	str	r2, [r3, #20]
}
 80029a8:	bf00      	nop
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d101      	bne.n	80029cc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80029c8:	2301      	movs	r3, #1
 80029ca:	e000      	b.n	80029ce <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr

080029da <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80029da:	b480      	push	{r7}
 80029dc:	b087      	sub	sp, #28
 80029de:	af00      	add	r7, sp, #0
 80029e0:	60f8      	str	r0, [r7, #12]
 80029e2:	60b9      	str	r1, [r7, #8]
 80029e4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	3330      	adds	r3, #48	@ 0x30
 80029ea:	461a      	mov	r2, r3
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	0a1b      	lsrs	r3, r3, #8
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	f003 030c 	and.w	r3, r3, #12
 80029f6:	4413      	add	r3, r2
 80029f8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	f003 031f 	and.w	r3, r3, #31
 8002a04:	211f      	movs	r1, #31
 8002a06:	fa01 f303 	lsl.w	r3, r1, r3
 8002a0a:	43db      	mvns	r3, r3
 8002a0c:	401a      	ands	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	0e9b      	lsrs	r3, r3, #26
 8002a12:	f003 011f 	and.w	r1, r3, #31
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	f003 031f 	and.w	r3, r3, #31
 8002a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a20:	431a      	orrs	r2, r3
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002a26:	bf00      	nop
 8002a28:	371c      	adds	r7, #28
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr

08002a32 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002a32:	b480      	push	{r7}
 8002a34:	b083      	sub	sp, #12
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a3e:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d101      	bne.n	8002a4a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002a46:	2301      	movs	r3, #1
 8002a48:	e000      	b.n	8002a4c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002a4a:	2300      	movs	r3, #0
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b087      	sub	sp, #28
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	3314      	adds	r3, #20
 8002a68:	461a      	mov	r2, r3
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	0e5b      	lsrs	r3, r3, #25
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	f003 0304 	and.w	r3, r3, #4
 8002a74:	4413      	add	r3, r2
 8002a76:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	0d1b      	lsrs	r3, r3, #20
 8002a80:	f003 031f 	and.w	r3, r3, #31
 8002a84:	2107      	movs	r1, #7
 8002a86:	fa01 f303 	lsl.w	r3, r1, r3
 8002a8a:	43db      	mvns	r3, r3
 8002a8c:	401a      	ands	r2, r3
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	0d1b      	lsrs	r3, r3, #20
 8002a92:	f003 031f 	and.w	r3, r3, #31
 8002a96:	6879      	ldr	r1, [r7, #4]
 8002a98:	fa01 f303 	lsl.w	r3, r1, r3
 8002a9c:	431a      	orrs	r2, r3
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002aa2:	bf00      	nop
 8002aa4:	371c      	adds	r7, #28
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
	...

08002ab0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	401a      	ands	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f003 0318 	and.w	r3, r3, #24
 8002ad2:	4908      	ldr	r1, [pc, #32]	@ (8002af4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002ad4:	40d9      	lsrs	r1, r3
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	400b      	ands	r3, r1
 8002ada:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ade:	431a      	orrs	r2, r3
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002ae6:	bf00      	nop
 8002ae8:	3714      	adds	r7, #20
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	0007ffff 	.word	0x0007ffff

08002af8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f003 031f 	and.w	r3, r3, #31
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	370c      	adds	r7, #12
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002b40:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	6093      	str	r3, [r2, #8]
}
 8002b48:	bf00      	nop
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b68:	d101      	bne.n	8002b6e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e000      	b.n	8002b70 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002b8c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b90:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bb4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002bb8:	d101      	bne.n	8002bbe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e000      	b.n	8002bc0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002bbe:	2300      	movs	r3, #0
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002bdc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002be0:	f043 0201 	orr.w	r2, r3, #1
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002be8:	bf00      	nop
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d101      	bne.n	8002c0c <LL_ADC_IsEnabled+0x18>
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e000      	b.n	8002c0e <LL_ADC_IsEnabled+0x1a>
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr

08002c1a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b083      	sub	sp, #12
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002c2a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c2e:	f043 0204 	orr.w	r2, r3, #4
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002c36:	bf00      	nop
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr

08002c42 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002c42:	b480      	push	{r7}
 8002c44:	b083      	sub	sp, #12
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f003 0304 	and.w	r3, r3, #4
 8002c52:	2b04      	cmp	r3, #4
 8002c54:	d101      	bne.n	8002c5a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c56:	2301      	movs	r3, #1
 8002c58:	e000      	b.n	8002c5c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f003 0308 	and.w	r3, r3, #8
 8002c78:	2b08      	cmp	r3, #8
 8002c7a:	d101      	bne.n	8002c80 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e000      	b.n	8002c82 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	370c      	adds	r7, #12
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
	...

08002c90 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c90:	b590      	push	{r4, r7, lr}
 8002c92:	b089      	sub	sp, #36	@ 0x24
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e1a9      	b.n	8002ffe <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d109      	bne.n	8002ccc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f7fe ff81 	bl	8001bc0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7ff ff3f 	bl	8002b54 <LL_ADC_IsDeepPowerDownEnabled>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d004      	beq.n	8002ce6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7ff ff25 	bl	8002b30 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7ff ff5a 	bl	8002ba4 <LL_ADC_IsInternalRegulatorEnabled>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d115      	bne.n	8002d22 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7ff ff3e 	bl	8002b7c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d00:	4b9c      	ldr	r3, [pc, #624]	@ (8002f74 <HAL_ADC_Init+0x2e4>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	099b      	lsrs	r3, r3, #6
 8002d06:	4a9c      	ldr	r2, [pc, #624]	@ (8002f78 <HAL_ADC_Init+0x2e8>)
 8002d08:	fba2 2303 	umull	r2, r3, r2, r3
 8002d0c:	099b      	lsrs	r3, r3, #6
 8002d0e:	3301      	adds	r3, #1
 8002d10:	005b      	lsls	r3, r3, #1
 8002d12:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002d14:	e002      	b.n	8002d1c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1f9      	bne.n	8002d16 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7ff ff3c 	bl	8002ba4 <LL_ADC_IsInternalRegulatorEnabled>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d10d      	bne.n	8002d4e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d36:	f043 0210 	orr.w	r2, r3, #16
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d42:	f043 0201 	orr.w	r2, r3, #1
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7ff ff75 	bl	8002c42 <LL_ADC_REG_IsConversionOngoing>
 8002d58:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d5e:	f003 0310 	and.w	r3, r3, #16
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	f040 8142 	bne.w	8002fec <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f040 813e 	bne.w	8002fec <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d74:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002d78:	f043 0202 	orr.w	r2, r3, #2
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7ff ff35 	bl	8002bf4 <LL_ADC_IsEnabled>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d141      	bne.n	8002e14 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d98:	d004      	beq.n	8002da4 <HAL_ADC_Init+0x114>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a77      	ldr	r2, [pc, #476]	@ (8002f7c <HAL_ADC_Init+0x2ec>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d10f      	bne.n	8002dc4 <HAL_ADC_Init+0x134>
 8002da4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002da8:	f7ff ff24 	bl	8002bf4 <LL_ADC_IsEnabled>
 8002dac:	4604      	mov	r4, r0
 8002dae:	4873      	ldr	r0, [pc, #460]	@ (8002f7c <HAL_ADC_Init+0x2ec>)
 8002db0:	f7ff ff20 	bl	8002bf4 <LL_ADC_IsEnabled>
 8002db4:	4603      	mov	r3, r0
 8002db6:	4323      	orrs	r3, r4
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	bf0c      	ite	eq
 8002dbc:	2301      	moveq	r3, #1
 8002dbe:	2300      	movne	r3, #0
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	e012      	b.n	8002dea <HAL_ADC_Init+0x15a>
 8002dc4:	486e      	ldr	r0, [pc, #440]	@ (8002f80 <HAL_ADC_Init+0x2f0>)
 8002dc6:	f7ff ff15 	bl	8002bf4 <LL_ADC_IsEnabled>
 8002dca:	4604      	mov	r4, r0
 8002dcc:	486d      	ldr	r0, [pc, #436]	@ (8002f84 <HAL_ADC_Init+0x2f4>)
 8002dce:	f7ff ff11 	bl	8002bf4 <LL_ADC_IsEnabled>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	431c      	orrs	r4, r3
 8002dd6:	486c      	ldr	r0, [pc, #432]	@ (8002f88 <HAL_ADC_Init+0x2f8>)
 8002dd8:	f7ff ff0c 	bl	8002bf4 <LL_ADC_IsEnabled>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	4323      	orrs	r3, r4
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	bf0c      	ite	eq
 8002de4:	2301      	moveq	r3, #1
 8002de6:	2300      	movne	r3, #0
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d012      	beq.n	8002e14 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002df6:	d004      	beq.n	8002e02 <HAL_ADC_Init+0x172>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a5f      	ldr	r2, [pc, #380]	@ (8002f7c <HAL_ADC_Init+0x2ec>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d101      	bne.n	8002e06 <HAL_ADC_Init+0x176>
 8002e02:	4a62      	ldr	r2, [pc, #392]	@ (8002f8c <HAL_ADC_Init+0x2fc>)
 8002e04:	e000      	b.n	8002e08 <HAL_ADC_Init+0x178>
 8002e06:	4a62      	ldr	r2, [pc, #392]	@ (8002f90 <HAL_ADC_Init+0x300>)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	4610      	mov	r0, r2
 8002e10:	f7ff fcfe 	bl	8002810 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	7f5b      	ldrb	r3, [r3, #29]
 8002e18:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e1e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002e24:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002e2a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002e32:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e34:	4313      	orrs	r3, r2
 8002e36:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d106      	bne.n	8002e50 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e46:	3b01      	subs	r3, #1
 8002e48:	045b      	lsls	r3, r3, #17
 8002e4a:	69ba      	ldr	r2, [r7, #24]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d009      	beq.n	8002e6c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e5c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e64:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e66:	69ba      	ldr	r2, [r7, #24]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68da      	ldr	r2, [r3, #12]
 8002e72:	4b48      	ldr	r3, [pc, #288]	@ (8002f94 <HAL_ADC_Init+0x304>)
 8002e74:	4013      	ands	r3, r2
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	6812      	ldr	r2, [r2, #0]
 8002e7a:	69b9      	ldr	r1, [r7, #24]
 8002e7c:	430b      	orrs	r3, r1
 8002e7e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	430a      	orrs	r2, r1
 8002e94:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7ff fee4 	bl	8002c68 <LL_ADC_INJ_IsConversionOngoing>
 8002ea0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d17f      	bne.n	8002fa8 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d17c      	bne.n	8002fa8 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002eb2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002eba:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002eca:	f023 0302 	bic.w	r3, r3, #2
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	6812      	ldr	r2, [r2, #0]
 8002ed2:	69b9      	ldr	r1, [r7, #24]
 8002ed4:	430b      	orrs	r3, r1
 8002ed6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d017      	beq.n	8002f10 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	691a      	ldr	r2, [r3, #16]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002eee:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002ef8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002efc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	6911      	ldr	r1, [r2, #16]
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	6812      	ldr	r2, [r2, #0]
 8002f08:	430b      	orrs	r3, r1
 8002f0a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002f0e:	e013      	b.n	8002f38 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	691a      	ldr	r2, [r3, #16]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002f1e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	6812      	ldr	r2, [r2, #0]
 8002f2c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002f30:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002f34:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d12a      	bne.n	8002f98 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002f4c:	f023 0304 	bic.w	r3, r3, #4
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002f58:	4311      	orrs	r1, r2
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002f5e:	4311      	orrs	r1, r2
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002f64:	430a      	orrs	r2, r1
 8002f66:	431a      	orrs	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f042 0201 	orr.w	r2, r2, #1
 8002f70:	611a      	str	r2, [r3, #16]
 8002f72:	e019      	b.n	8002fa8 <HAL_ADC_Init+0x318>
 8002f74:	20000000 	.word	0x20000000
 8002f78:	053e2d63 	.word	0x053e2d63
 8002f7c:	50000100 	.word	0x50000100
 8002f80:	50000400 	.word	0x50000400
 8002f84:	50000500 	.word	0x50000500
 8002f88:	50000600 	.word	0x50000600
 8002f8c:	50000300 	.word	0x50000300
 8002f90:	50000700 	.word	0x50000700
 8002f94:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	691a      	ldr	r2, [r3, #16]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f022 0201 	bic.w	r2, r2, #1
 8002fa6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	695b      	ldr	r3, [r3, #20]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d10c      	bne.n	8002fca <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb6:	f023 010f 	bic.w	r1, r3, #15
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a1b      	ldr	r3, [r3, #32]
 8002fbe:	1e5a      	subs	r2, r3, #1
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	631a      	str	r2, [r3, #48]	@ 0x30
 8002fc8:	e007      	b.n	8002fda <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f022 020f 	bic.w	r2, r2, #15
 8002fd8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fde:	f023 0303 	bic.w	r3, r3, #3
 8002fe2:	f043 0201 	orr.w	r2, r3, #1
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002fea:	e007      	b.n	8002ffc <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ff0:	f043 0210 	orr.w	r2, r3, #16
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002ffc:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3724      	adds	r7, #36	@ 0x24
 8003002:	46bd      	mov	sp, r7
 8003004:	bd90      	pop	{r4, r7, pc}
 8003006:	bf00      	nop

08003008 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b086      	sub	sp, #24
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800301c:	d004      	beq.n	8003028 <HAL_ADC_Start_DMA+0x20>
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a5a      	ldr	r2, [pc, #360]	@ (800318c <HAL_ADC_Start_DMA+0x184>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d101      	bne.n	800302c <HAL_ADC_Start_DMA+0x24>
 8003028:	4b59      	ldr	r3, [pc, #356]	@ (8003190 <HAL_ADC_Start_DMA+0x188>)
 800302a:	e000      	b.n	800302e <HAL_ADC_Start_DMA+0x26>
 800302c:	4b59      	ldr	r3, [pc, #356]	@ (8003194 <HAL_ADC_Start_DMA+0x18c>)
 800302e:	4618      	mov	r0, r3
 8003030:	f7ff fd62 	bl	8002af8 <LL_ADC_GetMultimode>
 8003034:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4618      	mov	r0, r3
 800303c:	f7ff fe01 	bl	8002c42 <LL_ADC_REG_IsConversionOngoing>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	f040 809b 	bne.w	800317e <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800304e:	2b01      	cmp	r3, #1
 8003050:	d101      	bne.n	8003056 <HAL_ADC_Start_DMA+0x4e>
 8003052:	2302      	movs	r3, #2
 8003054:	e096      	b.n	8003184 <HAL_ADC_Start_DMA+0x17c>
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2201      	movs	r2, #1
 800305a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a4d      	ldr	r2, [pc, #308]	@ (8003198 <HAL_ADC_Start_DMA+0x190>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d008      	beq.n	800307a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d005      	beq.n	800307a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	2b05      	cmp	r3, #5
 8003072:	d002      	beq.n	800307a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	2b09      	cmp	r3, #9
 8003078:	d17a      	bne.n	8003170 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800307a:	68f8      	ldr	r0, [r7, #12]
 800307c:	f000 ff4c 	bl	8003f18 <ADC_Enable>
 8003080:	4603      	mov	r3, r0
 8003082:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003084:	7dfb      	ldrb	r3, [r7, #23]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d16d      	bne.n	8003166 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800308e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003092:	f023 0301 	bic.w	r3, r3, #1
 8003096:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a3a      	ldr	r2, [pc, #232]	@ (800318c <HAL_ADC_Start_DMA+0x184>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d009      	beq.n	80030bc <HAL_ADC_Start_DMA+0xb4>
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a3b      	ldr	r2, [pc, #236]	@ (800319c <HAL_ADC_Start_DMA+0x194>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d002      	beq.n	80030b8 <HAL_ADC_Start_DMA+0xb0>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	e003      	b.n	80030c0 <HAL_ADC_Start_DMA+0xb8>
 80030b8:	4b39      	ldr	r3, [pc, #228]	@ (80031a0 <HAL_ADC_Start_DMA+0x198>)
 80030ba:	e001      	b.n	80030c0 <HAL_ADC_Start_DMA+0xb8>
 80030bc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80030c0:	68fa      	ldr	r2, [r7, #12]
 80030c2:	6812      	ldr	r2, [r2, #0]
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d002      	beq.n	80030ce <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d105      	bne.n	80030da <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030d2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d006      	beq.n	80030f4 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030ea:	f023 0206 	bic.w	r2, r3, #6
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	661a      	str	r2, [r3, #96]	@ 0x60
 80030f2:	e002      	b.n	80030fa <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2200      	movs	r2, #0
 80030f8:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030fe:	4a29      	ldr	r2, [pc, #164]	@ (80031a4 <HAL_ADC_Start_DMA+0x19c>)
 8003100:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003106:	4a28      	ldr	r2, [pc, #160]	@ (80031a8 <HAL_ADC_Start_DMA+0x1a0>)
 8003108:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800310e:	4a27      	ldr	r2, [pc, #156]	@ (80031ac <HAL_ADC_Start_DMA+0x1a4>)
 8003110:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	221c      	movs	r2, #28
 8003118:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	685a      	ldr	r2, [r3, #4]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f042 0210 	orr.w	r2, r2, #16
 8003130:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68da      	ldr	r2, [r3, #12]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f042 0201 	orr.w	r2, r2, #1
 8003140:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	3340      	adds	r3, #64	@ 0x40
 800314c:	4619      	mov	r1, r3
 800314e:	68ba      	ldr	r2, [r7, #8]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f001 fb23 	bl	800479c <HAL_DMA_Start_IT>
 8003156:	4603      	mov	r3, r0
 8003158:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4618      	mov	r0, r3
 8003160:	f7ff fd5b 	bl	8002c1a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003164:	e00d      	b.n	8003182 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800316e:	e008      	b.n	8003182 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800317c:	e001      	b.n	8003182 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800317e:	2302      	movs	r3, #2
 8003180:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003182:	7dfb      	ldrb	r3, [r7, #23]
}
 8003184:	4618      	mov	r0, r3
 8003186:	3718      	adds	r7, #24
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	50000100 	.word	0x50000100
 8003190:	50000300 	.word	0x50000300
 8003194:	50000700 	.word	0x50000700
 8003198:	50000600 	.word	0x50000600
 800319c:	50000500 	.word	0x50000500
 80031a0:	50000400 	.word	0x50000400
 80031a4:	08004045 	.word	0x08004045
 80031a8:	0800411d 	.word	0x0800411d
 80031ac:	08004139 	.word	0x08004139

080031b0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b08a      	sub	sp, #40	@ 0x28
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80031b8:	2300      	movs	r3, #0
 80031ba:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031d4:	d004      	beq.n	80031e0 <HAL_ADC_IRQHandler+0x30>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a8e      	ldr	r2, [pc, #568]	@ (8003414 <HAL_ADC_IRQHandler+0x264>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d101      	bne.n	80031e4 <HAL_ADC_IRQHandler+0x34>
 80031e0:	4b8d      	ldr	r3, [pc, #564]	@ (8003418 <HAL_ADC_IRQHandler+0x268>)
 80031e2:	e000      	b.n	80031e6 <HAL_ADC_IRQHandler+0x36>
 80031e4:	4b8d      	ldr	r3, [pc, #564]	@ (800341c <HAL_ADC_IRQHandler+0x26c>)
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7ff fc86 	bl	8002af8 <LL_ADC_GetMultimode>
 80031ec:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	f003 0302 	and.w	r3, r3, #2
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d017      	beq.n	8003228 <HAL_ADC_IRQHandler+0x78>
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	f003 0302 	and.w	r3, r3, #2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d012      	beq.n	8003228 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003206:	f003 0310 	and.w	r3, r3, #16
 800320a:	2b00      	cmp	r3, #0
 800320c:	d105      	bne.n	800321a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003212:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 fff4 	bl	8004208 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2202      	movs	r2, #2
 8003226:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	f003 0304 	and.w	r3, r3, #4
 800322e:	2b00      	cmp	r3, #0
 8003230:	d004      	beq.n	800323c <HAL_ADC_IRQHandler+0x8c>
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	f003 0304 	and.w	r3, r3, #4
 8003238:	2b00      	cmp	r3, #0
 800323a:	d10b      	bne.n	8003254 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003242:	2b00      	cmp	r3, #0
 8003244:	f000 8094 	beq.w	8003370 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	f003 0308 	and.w	r3, r3, #8
 800324e:	2b00      	cmp	r3, #0
 8003250:	f000 808e 	beq.w	8003370 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003258:	f003 0310 	and.w	r3, r3, #16
 800325c:	2b00      	cmp	r3, #0
 800325e:	d105      	bne.n	800326c <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003264:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4618      	mov	r0, r3
 8003272:	f7ff fb9f 	bl	80029b4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d072      	beq.n	8003362 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a64      	ldr	r2, [pc, #400]	@ (8003414 <HAL_ADC_IRQHandler+0x264>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d009      	beq.n	800329a <HAL_ADC_IRQHandler+0xea>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a65      	ldr	r2, [pc, #404]	@ (8003420 <HAL_ADC_IRQHandler+0x270>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d002      	beq.n	8003296 <HAL_ADC_IRQHandler+0xe6>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	e003      	b.n	800329e <HAL_ADC_IRQHandler+0xee>
 8003296:	4b63      	ldr	r3, [pc, #396]	@ (8003424 <HAL_ADC_IRQHandler+0x274>)
 8003298:	e001      	b.n	800329e <HAL_ADC_IRQHandler+0xee>
 800329a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	6812      	ldr	r2, [r2, #0]
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d008      	beq.n	80032b8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d005      	beq.n	80032b8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	2b05      	cmp	r3, #5
 80032b0:	d002      	beq.n	80032b8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	2b09      	cmp	r3, #9
 80032b6:	d104      	bne.n	80032c2 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	623b      	str	r3, [r7, #32]
 80032c0:	e014      	b.n	80032ec <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a53      	ldr	r2, [pc, #332]	@ (8003414 <HAL_ADC_IRQHandler+0x264>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d009      	beq.n	80032e0 <HAL_ADC_IRQHandler+0x130>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a53      	ldr	r2, [pc, #332]	@ (8003420 <HAL_ADC_IRQHandler+0x270>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d002      	beq.n	80032dc <HAL_ADC_IRQHandler+0x12c>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	e003      	b.n	80032e4 <HAL_ADC_IRQHandler+0x134>
 80032dc:	4b51      	ldr	r3, [pc, #324]	@ (8003424 <HAL_ADC_IRQHandler+0x274>)
 80032de:	e001      	b.n	80032e4 <HAL_ADC_IRQHandler+0x134>
 80032e0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80032e4:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80032ec:	6a3b      	ldr	r3, [r7, #32]
 80032ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d135      	bne.n	8003362 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0308 	and.w	r3, r3, #8
 8003300:	2b08      	cmp	r3, #8
 8003302:	d12e      	bne.n	8003362 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4618      	mov	r0, r3
 800330a:	f7ff fc9a 	bl	8002c42 <LL_ADC_REG_IsConversionOngoing>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d11a      	bne.n	800334a <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	685a      	ldr	r2, [r3, #4]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f022 020c 	bic.w	r2, r2, #12
 8003322:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003328:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003334:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d112      	bne.n	8003362 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003340:	f043 0201 	orr.w	r2, r3, #1
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003348:	e00b      	b.n	8003362 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800334e:	f043 0210 	orr.w	r2, r3, #16
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800335a:	f043 0201 	orr.w	r2, r3, #1
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f7fe fb82 	bl	8001a6c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	220c      	movs	r2, #12
 800336e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	f003 0320 	and.w	r3, r3, #32
 8003376:	2b00      	cmp	r3, #0
 8003378:	d004      	beq.n	8003384 <HAL_ADC_IRQHandler+0x1d4>
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	f003 0320 	and.w	r3, r3, #32
 8003380:	2b00      	cmp	r3, #0
 8003382:	d10b      	bne.n	800339c <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800338a:	2b00      	cmp	r3, #0
 800338c:	f000 80b3 	beq.w	80034f6 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003396:	2b00      	cmp	r3, #0
 8003398:	f000 80ad 	beq.w	80034f6 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033a0:	f003 0310 	and.w	r3, r3, #16
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d105      	bne.n	80033b4 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ac:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7ff fb3a 	bl	8002a32 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80033be:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7ff faf5 	bl	80029b4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80033ca:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a10      	ldr	r2, [pc, #64]	@ (8003414 <HAL_ADC_IRQHandler+0x264>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d009      	beq.n	80033ea <HAL_ADC_IRQHandler+0x23a>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a11      	ldr	r2, [pc, #68]	@ (8003420 <HAL_ADC_IRQHandler+0x270>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d002      	beq.n	80033e6 <HAL_ADC_IRQHandler+0x236>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	e003      	b.n	80033ee <HAL_ADC_IRQHandler+0x23e>
 80033e6:	4b0f      	ldr	r3, [pc, #60]	@ (8003424 <HAL_ADC_IRQHandler+0x274>)
 80033e8:	e001      	b.n	80033ee <HAL_ADC_IRQHandler+0x23e>
 80033ea:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	6812      	ldr	r2, [r2, #0]
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d008      	beq.n	8003408 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d005      	beq.n	8003408 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	2b06      	cmp	r3, #6
 8003400:	d002      	beq.n	8003408 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	2b07      	cmp	r3, #7
 8003406:	d10f      	bne.n	8003428 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	623b      	str	r3, [r7, #32]
 8003410:	e01f      	b.n	8003452 <HAL_ADC_IRQHandler+0x2a2>
 8003412:	bf00      	nop
 8003414:	50000100 	.word	0x50000100
 8003418:	50000300 	.word	0x50000300
 800341c:	50000700 	.word	0x50000700
 8003420:	50000500 	.word	0x50000500
 8003424:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a8b      	ldr	r2, [pc, #556]	@ (800365c <HAL_ADC_IRQHandler+0x4ac>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d009      	beq.n	8003446 <HAL_ADC_IRQHandler+0x296>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a8a      	ldr	r2, [pc, #552]	@ (8003660 <HAL_ADC_IRQHandler+0x4b0>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d002      	beq.n	8003442 <HAL_ADC_IRQHandler+0x292>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	e003      	b.n	800344a <HAL_ADC_IRQHandler+0x29a>
 8003442:	4b88      	ldr	r3, [pc, #544]	@ (8003664 <HAL_ADC_IRQHandler+0x4b4>)
 8003444:	e001      	b.n	800344a <HAL_ADC_IRQHandler+0x29a>
 8003446:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800344a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d047      	beq.n	80034e8 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003458:	6a3b      	ldr	r3, [r7, #32]
 800345a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d007      	beq.n	8003472 <HAL_ADC_IRQHandler+0x2c2>
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d03f      	beq.n	80034e8 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003468:	6a3b      	ldr	r3, [r7, #32]
 800346a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800346e:	2b00      	cmp	r3, #0
 8003470:	d13a      	bne.n	80034e8 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800347c:	2b40      	cmp	r3, #64	@ 0x40
 800347e:	d133      	bne.n	80034e8 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003480:	6a3b      	ldr	r3, [r7, #32]
 8003482:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d12e      	bne.n	80034e8 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4618      	mov	r0, r3
 8003490:	f7ff fbea 	bl	8002c68 <LL_ADC_INJ_IsConversionOngoing>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d11a      	bne.n	80034d0 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	685a      	ldr	r2, [r3, #4]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80034a8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ae:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d112      	bne.n	80034e8 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034c6:	f043 0201 	orr.w	r2, r3, #1
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80034ce:	e00b      	b.n	80034e8 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034d4:	f043 0210 	orr.w	r2, r3, #16
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034e0:	f043 0201 	orr.w	r2, r3, #1
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f000 fe65 	bl	80041b8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2260      	movs	r2, #96	@ 0x60
 80034f4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d011      	beq.n	8003524 <HAL_ADC_IRQHandler+0x374>
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00c      	beq.n	8003524 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800350e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 f8aa 	bl	8003670 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2280      	movs	r2, #128	@ 0x80
 8003522:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800352a:	2b00      	cmp	r3, #0
 800352c:	d012      	beq.n	8003554 <HAL_ADC_IRQHandler+0x3a4>
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00d      	beq.n	8003554 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800353c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f000 fe4b 	bl	80041e0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003552:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800355a:	2b00      	cmp	r3, #0
 800355c:	d012      	beq.n	8003584 <HAL_ADC_IRQHandler+0x3d4>
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003564:	2b00      	cmp	r3, #0
 8003566:	d00d      	beq.n	8003584 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800356c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f000 fe3d 	bl	80041f4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003582:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	f003 0310 	and.w	r3, r3, #16
 800358a:	2b00      	cmp	r3, #0
 800358c:	d043      	beq.n	8003616 <HAL_ADC_IRQHandler+0x466>
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	f003 0310 	and.w	r3, r3, #16
 8003594:	2b00      	cmp	r3, #0
 8003596:	d03e      	beq.n	8003616 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800359c:	2b00      	cmp	r3, #0
 800359e:	d102      	bne.n	80035a6 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 80035a0:	2301      	movs	r3, #1
 80035a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80035a4:	e021      	b.n	80035ea <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d015      	beq.n	80035d8 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035b4:	d004      	beq.n	80035c0 <HAL_ADC_IRQHandler+0x410>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a28      	ldr	r2, [pc, #160]	@ (800365c <HAL_ADC_IRQHandler+0x4ac>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d101      	bne.n	80035c4 <HAL_ADC_IRQHandler+0x414>
 80035c0:	4b29      	ldr	r3, [pc, #164]	@ (8003668 <HAL_ADC_IRQHandler+0x4b8>)
 80035c2:	e000      	b.n	80035c6 <HAL_ADC_IRQHandler+0x416>
 80035c4:	4b29      	ldr	r3, [pc, #164]	@ (800366c <HAL_ADC_IRQHandler+0x4bc>)
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7ff faa4 	bl	8002b14 <LL_ADC_GetMultiDMATransfer>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00b      	beq.n	80035ea <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80035d2:	2301      	movs	r3, #1
 80035d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80035d6:	e008      	b.n	80035ea <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80035e6:	2301      	movs	r3, #1
 80035e8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80035ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d10e      	bne.n	800360e <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035f4:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003600:	f043 0202 	orr.w	r2, r3, #2
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f000 f83b 	bl	8003684 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2210      	movs	r2, #16
 8003614:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800361c:	2b00      	cmp	r3, #0
 800361e:	d018      	beq.n	8003652 <HAL_ADC_IRQHandler+0x4a2>
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003626:	2b00      	cmp	r3, #0
 8003628:	d013      	beq.n	8003652 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800362e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800363a:	f043 0208 	orr.w	r2, r3, #8
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800364a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f000 fdbd 	bl	80041cc <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003652:	bf00      	nop
 8003654:	3728      	adds	r7, #40	@ 0x28
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	50000100 	.word	0x50000100
 8003660:	50000500 	.word	0x50000500
 8003664:	50000400 	.word	0x50000400
 8003668:	50000300 	.word	0x50000300
 800366c:	50000700 	.word	0x50000700

08003670 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800368c:	bf00      	nop
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b0b6      	sub	sp, #216	@ 0xd8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036a2:	2300      	movs	r3, #0
 80036a4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80036a8:	2300      	movs	r3, #0
 80036aa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d102      	bne.n	80036bc <HAL_ADC_ConfigChannel+0x24>
 80036b6:	2302      	movs	r3, #2
 80036b8:	f000 bc13 	b.w	8003ee2 <HAL_ADC_ConfigChannel+0x84a>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7ff faba 	bl	8002c42 <LL_ADC_REG_IsConversionOngoing>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f040 83f3 	bne.w	8003ebc <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6818      	ldr	r0, [r3, #0]
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	6859      	ldr	r1, [r3, #4]
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	461a      	mov	r2, r3
 80036e4:	f7ff f979 	bl	80029da <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7ff faa8 	bl	8002c42 <LL_ADC_REG_IsConversionOngoing>
 80036f2:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7ff fab4 	bl	8002c68 <LL_ADC_INJ_IsConversionOngoing>
 8003700:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003704:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003708:	2b00      	cmp	r3, #0
 800370a:	f040 81d9 	bne.w	8003ac0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800370e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003712:	2b00      	cmp	r3, #0
 8003714:	f040 81d4 	bne.w	8003ac0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003720:	d10f      	bne.n	8003742 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6818      	ldr	r0, [r3, #0]
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2200      	movs	r2, #0
 800372c:	4619      	mov	r1, r3
 800372e:	f7ff f993 	bl	8002a58 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800373a:	4618      	mov	r0, r3
 800373c:	f7ff f927 	bl	800298e <LL_ADC_SetSamplingTimeCommonConfig>
 8003740:	e00e      	b.n	8003760 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6818      	ldr	r0, [r3, #0]
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	6819      	ldr	r1, [r3, #0]
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	461a      	mov	r2, r3
 8003750:	f7ff f982 	bl	8002a58 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2100      	movs	r1, #0
 800375a:	4618      	mov	r0, r3
 800375c:	f7ff f917 	bl	800298e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	695a      	ldr	r2, [r3, #20]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	08db      	lsrs	r3, r3, #3
 800376c:	f003 0303 	and.w	r3, r3, #3
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	fa02 f303 	lsl.w	r3, r2, r3
 8003776:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	2b04      	cmp	r3, #4
 8003780:	d022      	beq.n	80037c8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6818      	ldr	r0, [r3, #0]
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	6919      	ldr	r1, [r3, #16]
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003792:	f7ff f871 	bl	8002878 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6818      	ldr	r0, [r3, #0]
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	6919      	ldr	r1, [r3, #16]
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	461a      	mov	r2, r3
 80037a4:	f7ff f8bd 	bl	8002922 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6818      	ldr	r0, [r3, #0]
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d102      	bne.n	80037be <HAL_ADC_ConfigChannel+0x126>
 80037b8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80037bc:	e000      	b.n	80037c0 <HAL_ADC_ConfigChannel+0x128>
 80037be:	2300      	movs	r3, #0
 80037c0:	461a      	mov	r2, r3
 80037c2:	f7ff f8c9 	bl	8002958 <LL_ADC_SetOffsetSaturation>
 80037c6:	e17b      	b.n	8003ac0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2100      	movs	r1, #0
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7ff f876 	bl	80028c0 <LL_ADC_GetOffsetChannel>
 80037d4:	4603      	mov	r3, r0
 80037d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d10a      	bne.n	80037f4 <HAL_ADC_ConfigChannel+0x15c>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2100      	movs	r1, #0
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7ff f86b 	bl	80028c0 <LL_ADC_GetOffsetChannel>
 80037ea:	4603      	mov	r3, r0
 80037ec:	0e9b      	lsrs	r3, r3, #26
 80037ee:	f003 021f 	and.w	r2, r3, #31
 80037f2:	e01e      	b.n	8003832 <HAL_ADC_ConfigChannel+0x19a>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2100      	movs	r1, #0
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7ff f860 	bl	80028c0 <LL_ADC_GetOffsetChannel>
 8003800:	4603      	mov	r3, r0
 8003802:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003806:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800380a:	fa93 f3a3 	rbit	r3, r3
 800380e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003812:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003816:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800381a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d101      	bne.n	8003826 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003822:	2320      	movs	r3, #32
 8003824:	e004      	b.n	8003830 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003826:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800382a:	fab3 f383 	clz	r3, r3
 800382e:	b2db      	uxtb	r3, r3
 8003830:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800383a:	2b00      	cmp	r3, #0
 800383c:	d105      	bne.n	800384a <HAL_ADC_ConfigChannel+0x1b2>
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	0e9b      	lsrs	r3, r3, #26
 8003844:	f003 031f 	and.w	r3, r3, #31
 8003848:	e018      	b.n	800387c <HAL_ADC_ConfigChannel+0x1e4>
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003852:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003856:	fa93 f3a3 	rbit	r3, r3
 800385a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800385e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003862:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003866:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800386e:	2320      	movs	r3, #32
 8003870:	e004      	b.n	800387c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003872:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003876:	fab3 f383 	clz	r3, r3
 800387a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800387c:	429a      	cmp	r2, r3
 800387e:	d106      	bne.n	800388e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2200      	movs	r2, #0
 8003886:	2100      	movs	r1, #0
 8003888:	4618      	mov	r0, r3
 800388a:	f7ff f82f 	bl	80028ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2101      	movs	r1, #1
 8003894:	4618      	mov	r0, r3
 8003896:	f7ff f813 	bl	80028c0 <LL_ADC_GetOffsetChannel>
 800389a:	4603      	mov	r3, r0
 800389c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d10a      	bne.n	80038ba <HAL_ADC_ConfigChannel+0x222>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2101      	movs	r1, #1
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7ff f808 	bl	80028c0 <LL_ADC_GetOffsetChannel>
 80038b0:	4603      	mov	r3, r0
 80038b2:	0e9b      	lsrs	r3, r3, #26
 80038b4:	f003 021f 	and.w	r2, r3, #31
 80038b8:	e01e      	b.n	80038f8 <HAL_ADC_ConfigChannel+0x260>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2101      	movs	r1, #1
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7fe fffd 	bl	80028c0 <LL_ADC_GetOffsetChannel>
 80038c6:	4603      	mov	r3, r0
 80038c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80038d0:	fa93 f3a3 	rbit	r3, r3
 80038d4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80038d8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80038dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80038e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d101      	bne.n	80038ec <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80038e8:	2320      	movs	r3, #32
 80038ea:	e004      	b.n	80038f6 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80038ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80038f0:	fab3 f383 	clz	r3, r3
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003900:	2b00      	cmp	r3, #0
 8003902:	d105      	bne.n	8003910 <HAL_ADC_ConfigChannel+0x278>
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	0e9b      	lsrs	r3, r3, #26
 800390a:	f003 031f 	and.w	r3, r3, #31
 800390e:	e018      	b.n	8003942 <HAL_ADC_ConfigChannel+0x2aa>
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003918:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800391c:	fa93 f3a3 	rbit	r3, r3
 8003920:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003924:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003928:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800392c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003930:	2b00      	cmp	r3, #0
 8003932:	d101      	bne.n	8003938 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003934:	2320      	movs	r3, #32
 8003936:	e004      	b.n	8003942 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003938:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800393c:	fab3 f383 	clz	r3, r3
 8003940:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003942:	429a      	cmp	r2, r3
 8003944:	d106      	bne.n	8003954 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2200      	movs	r2, #0
 800394c:	2101      	movs	r1, #1
 800394e:	4618      	mov	r0, r3
 8003950:	f7fe ffcc 	bl	80028ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2102      	movs	r1, #2
 800395a:	4618      	mov	r0, r3
 800395c:	f7fe ffb0 	bl	80028c0 <LL_ADC_GetOffsetChannel>
 8003960:	4603      	mov	r3, r0
 8003962:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003966:	2b00      	cmp	r3, #0
 8003968:	d10a      	bne.n	8003980 <HAL_ADC_ConfigChannel+0x2e8>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2102      	movs	r1, #2
 8003970:	4618      	mov	r0, r3
 8003972:	f7fe ffa5 	bl	80028c0 <LL_ADC_GetOffsetChannel>
 8003976:	4603      	mov	r3, r0
 8003978:	0e9b      	lsrs	r3, r3, #26
 800397a:	f003 021f 	and.w	r2, r3, #31
 800397e:	e01e      	b.n	80039be <HAL_ADC_ConfigChannel+0x326>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2102      	movs	r1, #2
 8003986:	4618      	mov	r0, r3
 8003988:	f7fe ff9a 	bl	80028c0 <LL_ADC_GetOffsetChannel>
 800398c:	4603      	mov	r3, r0
 800398e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003992:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003996:	fa93 f3a3 	rbit	r3, r3
 800399a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800399e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80039a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80039a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80039ae:	2320      	movs	r3, #32
 80039b0:	e004      	b.n	80039bc <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80039b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80039b6:	fab3 f383 	clz	r3, r3
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d105      	bne.n	80039d6 <HAL_ADC_ConfigChannel+0x33e>
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	0e9b      	lsrs	r3, r3, #26
 80039d0:	f003 031f 	and.w	r3, r3, #31
 80039d4:	e016      	b.n	8003a04 <HAL_ADC_ConfigChannel+0x36c>
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039de:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80039e2:	fa93 f3a3 	rbit	r3, r3
 80039e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80039e8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80039ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80039ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80039f6:	2320      	movs	r3, #32
 80039f8:	e004      	b.n	8003a04 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80039fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80039fe:	fab3 f383 	clz	r3, r3
 8003a02:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d106      	bne.n	8003a16 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	2102      	movs	r1, #2
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7fe ff6b 	bl	80028ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2103      	movs	r1, #3
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7fe ff4f 	bl	80028c0 <LL_ADC_GetOffsetChannel>
 8003a22:	4603      	mov	r3, r0
 8003a24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d10a      	bne.n	8003a42 <HAL_ADC_ConfigChannel+0x3aa>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2103      	movs	r1, #3
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7fe ff44 	bl	80028c0 <LL_ADC_GetOffsetChannel>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	0e9b      	lsrs	r3, r3, #26
 8003a3c:	f003 021f 	and.w	r2, r3, #31
 8003a40:	e017      	b.n	8003a72 <HAL_ADC_ConfigChannel+0x3da>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2103      	movs	r1, #3
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7fe ff39 	bl	80028c0 <LL_ADC_GetOffsetChannel>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a54:	fa93 f3a3 	rbit	r3, r3
 8003a58:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003a5a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a5c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003a5e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d101      	bne.n	8003a68 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003a64:	2320      	movs	r3, #32
 8003a66:	e003      	b.n	8003a70 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003a68:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a6a:	fab3 f383 	clz	r3, r3
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d105      	bne.n	8003a8a <HAL_ADC_ConfigChannel+0x3f2>
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	0e9b      	lsrs	r3, r3, #26
 8003a84:	f003 031f 	and.w	r3, r3, #31
 8003a88:	e011      	b.n	8003aae <HAL_ADC_ConfigChannel+0x416>
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a90:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003a92:	fa93 f3a3 	rbit	r3, r3
 8003a96:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003a98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003a9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003aa2:	2320      	movs	r3, #32
 8003aa4:	e003      	b.n	8003aae <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003aa6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003aa8:	fab3 f383 	clz	r3, r3
 8003aac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d106      	bne.n	8003ac0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	2103      	movs	r1, #3
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7fe ff16 	bl	80028ec <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7ff f895 	bl	8002bf4 <LL_ADC_IsEnabled>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	f040 813d 	bne.w	8003d4c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6818      	ldr	r0, [r3, #0]
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	6819      	ldr	r1, [r3, #0]
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	461a      	mov	r2, r3
 8003ae0:	f7fe ffe6 	bl	8002ab0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	4aa2      	ldr	r2, [pc, #648]	@ (8003d74 <HAL_ADC_ConfigChannel+0x6dc>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	f040 812e 	bne.w	8003d4c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d10b      	bne.n	8003b18 <HAL_ADC_ConfigChannel+0x480>
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	0e9b      	lsrs	r3, r3, #26
 8003b06:	3301      	adds	r3, #1
 8003b08:	f003 031f 	and.w	r3, r3, #31
 8003b0c:	2b09      	cmp	r3, #9
 8003b0e:	bf94      	ite	ls
 8003b10:	2301      	movls	r3, #1
 8003b12:	2300      	movhi	r3, #0
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	e019      	b.n	8003b4c <HAL_ADC_ConfigChannel+0x4b4>
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b20:	fa93 f3a3 	rbit	r3, r3
 8003b24:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003b26:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b28:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003b2a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d101      	bne.n	8003b34 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003b30:	2320      	movs	r3, #32
 8003b32:	e003      	b.n	8003b3c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003b34:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b36:	fab3 f383 	clz	r3, r3
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	f003 031f 	and.w	r3, r3, #31
 8003b42:	2b09      	cmp	r3, #9
 8003b44:	bf94      	ite	ls
 8003b46:	2301      	movls	r3, #1
 8003b48:	2300      	movhi	r3, #0
 8003b4a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d079      	beq.n	8003c44 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d107      	bne.n	8003b6c <HAL_ADC_ConfigChannel+0x4d4>
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	0e9b      	lsrs	r3, r3, #26
 8003b62:	3301      	adds	r3, #1
 8003b64:	069b      	lsls	r3, r3, #26
 8003b66:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003b6a:	e015      	b.n	8003b98 <HAL_ADC_ConfigChannel+0x500>
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b74:	fa93 f3a3 	rbit	r3, r3
 8003b78:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003b7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b7c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003b7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d101      	bne.n	8003b88 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003b84:	2320      	movs	r3, #32
 8003b86:	e003      	b.n	8003b90 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003b88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b8a:	fab3 f383 	clz	r3, r3
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	3301      	adds	r3, #1
 8003b92:	069b      	lsls	r3, r3, #26
 8003b94:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d109      	bne.n	8003bb8 <HAL_ADC_ConfigChannel+0x520>
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	0e9b      	lsrs	r3, r3, #26
 8003baa:	3301      	adds	r3, #1
 8003bac:	f003 031f 	and.w	r3, r3, #31
 8003bb0:	2101      	movs	r1, #1
 8003bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8003bb6:	e017      	b.n	8003be8 <HAL_ADC_ConfigChannel+0x550>
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bc0:	fa93 f3a3 	rbit	r3, r3
 8003bc4:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003bc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bc8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003bca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d101      	bne.n	8003bd4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003bd0:	2320      	movs	r3, #32
 8003bd2:	e003      	b.n	8003bdc <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003bd4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003bd6:	fab3 f383 	clz	r3, r3
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	3301      	adds	r3, #1
 8003bde:	f003 031f 	and.w	r3, r3, #31
 8003be2:	2101      	movs	r1, #1
 8003be4:	fa01 f303 	lsl.w	r3, r1, r3
 8003be8:	ea42 0103 	orr.w	r1, r2, r3
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d10a      	bne.n	8003c0e <HAL_ADC_ConfigChannel+0x576>
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	0e9b      	lsrs	r3, r3, #26
 8003bfe:	3301      	adds	r3, #1
 8003c00:	f003 021f 	and.w	r2, r3, #31
 8003c04:	4613      	mov	r3, r2
 8003c06:	005b      	lsls	r3, r3, #1
 8003c08:	4413      	add	r3, r2
 8003c0a:	051b      	lsls	r3, r3, #20
 8003c0c:	e018      	b.n	8003c40 <HAL_ADC_ConfigChannel+0x5a8>
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c16:	fa93 f3a3 	rbit	r3, r3
 8003c1a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003c1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003c20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d101      	bne.n	8003c2a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003c26:	2320      	movs	r3, #32
 8003c28:	e003      	b.n	8003c32 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003c2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c2c:	fab3 f383 	clz	r3, r3
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	3301      	adds	r3, #1
 8003c34:	f003 021f 	and.w	r2, r3, #31
 8003c38:	4613      	mov	r3, r2
 8003c3a:	005b      	lsls	r3, r3, #1
 8003c3c:	4413      	add	r3, r2
 8003c3e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c40:	430b      	orrs	r3, r1
 8003c42:	e07e      	b.n	8003d42 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d107      	bne.n	8003c60 <HAL_ADC_ConfigChannel+0x5c8>
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	0e9b      	lsrs	r3, r3, #26
 8003c56:	3301      	adds	r3, #1
 8003c58:	069b      	lsls	r3, r3, #26
 8003c5a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003c5e:	e015      	b.n	8003c8c <HAL_ADC_ConfigChannel+0x5f4>
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c68:	fa93 f3a3 	rbit	r3, r3
 8003c6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c70:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d101      	bne.n	8003c7c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003c78:	2320      	movs	r3, #32
 8003c7a:	e003      	b.n	8003c84 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c7e:	fab3 f383 	clz	r3, r3
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	3301      	adds	r3, #1
 8003c86:	069b      	lsls	r3, r3, #26
 8003c88:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d109      	bne.n	8003cac <HAL_ADC_ConfigChannel+0x614>
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	0e9b      	lsrs	r3, r3, #26
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	f003 031f 	and.w	r3, r3, #31
 8003ca4:	2101      	movs	r1, #1
 8003ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8003caa:	e017      	b.n	8003cdc <HAL_ADC_ConfigChannel+0x644>
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cb2:	6a3b      	ldr	r3, [r7, #32]
 8003cb4:	fa93 f3a3 	rbit	r3, r3
 8003cb8:	61fb      	str	r3, [r7, #28]
  return result;
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d101      	bne.n	8003cc8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003cc4:	2320      	movs	r3, #32
 8003cc6:	e003      	b.n	8003cd0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cca:	fab3 f383 	clz	r3, r3
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	f003 031f 	and.w	r3, r3, #31
 8003cd6:	2101      	movs	r1, #1
 8003cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cdc:	ea42 0103 	orr.w	r1, r2, r3
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d10d      	bne.n	8003d08 <HAL_ADC_ConfigChannel+0x670>
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	0e9b      	lsrs	r3, r3, #26
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	f003 021f 	and.w	r2, r3, #31
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	005b      	lsls	r3, r3, #1
 8003cfc:	4413      	add	r3, r2
 8003cfe:	3b1e      	subs	r3, #30
 8003d00:	051b      	lsls	r3, r3, #20
 8003d02:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003d06:	e01b      	b.n	8003d40 <HAL_ADC_ConfigChannel+0x6a8>
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	fa93 f3a3 	rbit	r3, r3
 8003d14:	613b      	str	r3, [r7, #16]
  return result;
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d101      	bne.n	8003d24 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003d20:	2320      	movs	r3, #32
 8003d22:	e003      	b.n	8003d2c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	fab3 f383 	clz	r3, r3
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	f003 021f 	and.w	r2, r3, #31
 8003d32:	4613      	mov	r3, r2
 8003d34:	005b      	lsls	r3, r3, #1
 8003d36:	4413      	add	r3, r2
 8003d38:	3b1e      	subs	r3, #30
 8003d3a:	051b      	lsls	r3, r3, #20
 8003d3c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d40:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003d42:	683a      	ldr	r2, [r7, #0]
 8003d44:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d46:	4619      	mov	r1, r3
 8003d48:	f7fe fe86 	bl	8002a58 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	4b09      	ldr	r3, [pc, #36]	@ (8003d78 <HAL_ADC_ConfigChannel+0x6e0>)
 8003d52:	4013      	ands	r3, r2
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	f000 80be 	beq.w	8003ed6 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d62:	d004      	beq.n	8003d6e <HAL_ADC_ConfigChannel+0x6d6>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a04      	ldr	r2, [pc, #16]	@ (8003d7c <HAL_ADC_ConfigChannel+0x6e4>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d10a      	bne.n	8003d84 <HAL_ADC_ConfigChannel+0x6ec>
 8003d6e:	4b04      	ldr	r3, [pc, #16]	@ (8003d80 <HAL_ADC_ConfigChannel+0x6e8>)
 8003d70:	e009      	b.n	8003d86 <HAL_ADC_ConfigChannel+0x6ee>
 8003d72:	bf00      	nop
 8003d74:	407f0000 	.word	0x407f0000
 8003d78:	80080000 	.word	0x80080000
 8003d7c:	50000100 	.word	0x50000100
 8003d80:	50000300 	.word	0x50000300
 8003d84:	4b59      	ldr	r3, [pc, #356]	@ (8003eec <HAL_ADC_ConfigChannel+0x854>)
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7fe fd68 	bl	800285c <LL_ADC_GetCommonPathInternalCh>
 8003d8c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a56      	ldr	r2, [pc, #344]	@ (8003ef0 <HAL_ADC_ConfigChannel+0x858>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d004      	beq.n	8003da4 <HAL_ADC_ConfigChannel+0x70c>
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a55      	ldr	r2, [pc, #340]	@ (8003ef4 <HAL_ADC_ConfigChannel+0x85c>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d13a      	bne.n	8003e1a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003da4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003da8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d134      	bne.n	8003e1a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003db8:	d005      	beq.n	8003dc6 <HAL_ADC_ConfigChannel+0x72e>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a4e      	ldr	r2, [pc, #312]	@ (8003ef8 <HAL_ADC_ConfigChannel+0x860>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	f040 8085 	bne.w	8003ed0 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003dce:	d004      	beq.n	8003dda <HAL_ADC_ConfigChannel+0x742>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a49      	ldr	r2, [pc, #292]	@ (8003efc <HAL_ADC_ConfigChannel+0x864>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d101      	bne.n	8003dde <HAL_ADC_ConfigChannel+0x746>
 8003dda:	4a49      	ldr	r2, [pc, #292]	@ (8003f00 <HAL_ADC_ConfigChannel+0x868>)
 8003ddc:	e000      	b.n	8003de0 <HAL_ADC_ConfigChannel+0x748>
 8003dde:	4a43      	ldr	r2, [pc, #268]	@ (8003eec <HAL_ADC_ConfigChannel+0x854>)
 8003de0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003de4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003de8:	4619      	mov	r1, r3
 8003dea:	4610      	mov	r0, r2
 8003dec:	f7fe fd23 	bl	8002836 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003df0:	4b44      	ldr	r3, [pc, #272]	@ (8003f04 <HAL_ADC_ConfigChannel+0x86c>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	099b      	lsrs	r3, r3, #6
 8003df6:	4a44      	ldr	r2, [pc, #272]	@ (8003f08 <HAL_ADC_ConfigChannel+0x870>)
 8003df8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dfc:	099b      	lsrs	r3, r3, #6
 8003dfe:	1c5a      	adds	r2, r3, #1
 8003e00:	4613      	mov	r3, r2
 8003e02:	005b      	lsls	r3, r3, #1
 8003e04:	4413      	add	r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003e0a:	e002      	b.n	8003e12 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d1f9      	bne.n	8003e0c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e18:	e05a      	b.n	8003ed0 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a3b      	ldr	r2, [pc, #236]	@ (8003f0c <HAL_ADC_ConfigChannel+0x874>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d125      	bne.n	8003e70 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003e24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003e28:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d11f      	bne.n	8003e70 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a31      	ldr	r2, [pc, #196]	@ (8003efc <HAL_ADC_ConfigChannel+0x864>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d104      	bne.n	8003e44 <HAL_ADC_ConfigChannel+0x7ac>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a34      	ldr	r2, [pc, #208]	@ (8003f10 <HAL_ADC_ConfigChannel+0x878>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d047      	beq.n	8003ed4 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e4c:	d004      	beq.n	8003e58 <HAL_ADC_ConfigChannel+0x7c0>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a2a      	ldr	r2, [pc, #168]	@ (8003efc <HAL_ADC_ConfigChannel+0x864>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d101      	bne.n	8003e5c <HAL_ADC_ConfigChannel+0x7c4>
 8003e58:	4a29      	ldr	r2, [pc, #164]	@ (8003f00 <HAL_ADC_ConfigChannel+0x868>)
 8003e5a:	e000      	b.n	8003e5e <HAL_ADC_ConfigChannel+0x7c6>
 8003e5c:	4a23      	ldr	r2, [pc, #140]	@ (8003eec <HAL_ADC_ConfigChannel+0x854>)
 8003e5e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003e62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e66:	4619      	mov	r1, r3
 8003e68:	4610      	mov	r0, r2
 8003e6a:	f7fe fce4 	bl	8002836 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e6e:	e031      	b.n	8003ed4 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a27      	ldr	r2, [pc, #156]	@ (8003f14 <HAL_ADC_ConfigChannel+0x87c>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d12d      	bne.n	8003ed6 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003e7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003e7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d127      	bne.n	8003ed6 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a1c      	ldr	r2, [pc, #112]	@ (8003efc <HAL_ADC_ConfigChannel+0x864>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d022      	beq.n	8003ed6 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e98:	d004      	beq.n	8003ea4 <HAL_ADC_ConfigChannel+0x80c>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a17      	ldr	r2, [pc, #92]	@ (8003efc <HAL_ADC_ConfigChannel+0x864>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d101      	bne.n	8003ea8 <HAL_ADC_ConfigChannel+0x810>
 8003ea4:	4a16      	ldr	r2, [pc, #88]	@ (8003f00 <HAL_ADC_ConfigChannel+0x868>)
 8003ea6:	e000      	b.n	8003eaa <HAL_ADC_ConfigChannel+0x812>
 8003ea8:	4a10      	ldr	r2, [pc, #64]	@ (8003eec <HAL_ADC_ConfigChannel+0x854>)
 8003eaa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003eae:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	4610      	mov	r0, r2
 8003eb6:	f7fe fcbe 	bl	8002836 <LL_ADC_SetCommonPathInternalCh>
 8003eba:	e00c      	b.n	8003ed6 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ec0:	f043 0220 	orr.w	r2, r3, #32
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003ece:	e002      	b.n	8003ed6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ed0:	bf00      	nop
 8003ed2:	e000      	b.n	8003ed6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ed4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003ede:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	37d8      	adds	r7, #216	@ 0xd8
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	50000700 	.word	0x50000700
 8003ef0:	c3210000 	.word	0xc3210000
 8003ef4:	90c00010 	.word	0x90c00010
 8003ef8:	50000600 	.word	0x50000600
 8003efc:	50000100 	.word	0x50000100
 8003f00:	50000300 	.word	0x50000300
 8003f04:	20000000 	.word	0x20000000
 8003f08:	053e2d63 	.word	0x053e2d63
 8003f0c:	c7520000 	.word	0xc7520000
 8003f10:	50000500 	.word	0x50000500
 8003f14:	cb840000 	.word	0xcb840000

08003f18 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003f20:	2300      	movs	r3, #0
 8003f22:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f7fe fe63 	bl	8002bf4 <LL_ADC_IsEnabled>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d176      	bne.n	8004022 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	689a      	ldr	r2, [r3, #8]
 8003f3a:	4b3c      	ldr	r3, [pc, #240]	@ (800402c <ADC_Enable+0x114>)
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00d      	beq.n	8003f5e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f46:	f043 0210 	orr.w	r2, r3, #16
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f52:	f043 0201 	orr.w	r2, r3, #1
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e062      	b.n	8004024 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7fe fe32 	bl	8002bcc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f70:	d004      	beq.n	8003f7c <ADC_Enable+0x64>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a2e      	ldr	r2, [pc, #184]	@ (8004030 <ADC_Enable+0x118>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d101      	bne.n	8003f80 <ADC_Enable+0x68>
 8003f7c:	4b2d      	ldr	r3, [pc, #180]	@ (8004034 <ADC_Enable+0x11c>)
 8003f7e:	e000      	b.n	8003f82 <ADC_Enable+0x6a>
 8003f80:	4b2d      	ldr	r3, [pc, #180]	@ (8004038 <ADC_Enable+0x120>)
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7fe fc6a 	bl	800285c <LL_ADC_GetCommonPathInternalCh>
 8003f88:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003f8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d013      	beq.n	8003fba <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f92:	4b2a      	ldr	r3, [pc, #168]	@ (800403c <ADC_Enable+0x124>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	099b      	lsrs	r3, r3, #6
 8003f98:	4a29      	ldr	r2, [pc, #164]	@ (8004040 <ADC_Enable+0x128>)
 8003f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f9e:	099b      	lsrs	r3, r3, #6
 8003fa0:	1c5a      	adds	r2, r3, #1
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	005b      	lsls	r3, r3, #1
 8003fa6:	4413      	add	r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003fac:	e002      	b.n	8003fb4 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1f9      	bne.n	8003fae <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003fba:	f7fe fbbd 	bl	8002738 <HAL_GetTick>
 8003fbe:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003fc0:	e028      	b.n	8004014 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f7fe fe14 	bl	8002bf4 <LL_ADC_IsEnabled>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d104      	bne.n	8003fdc <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7fe fdf8 	bl	8002bcc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003fdc:	f7fe fbac 	bl	8002738 <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d914      	bls.n	8004014 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d00d      	beq.n	8004014 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ffc:	f043 0210 	orr.w	r2, r3, #16
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004008:	f043 0201 	orr.w	r2, r3, #1
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e007      	b.n	8004024 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	2b01      	cmp	r3, #1
 8004020:	d1cf      	bne.n	8003fc2 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004022:	2300      	movs	r3, #0
}
 8004024:	4618      	mov	r0, r3
 8004026:	3710      	adds	r7, #16
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}
 800402c:	8000003f 	.word	0x8000003f
 8004030:	50000100 	.word	0x50000100
 8004034:	50000300 	.word	0x50000300
 8004038:	50000700 	.word	0x50000700
 800403c:	20000000 	.word	0x20000000
 8004040:	053e2d63 	.word	0x053e2d63

08004044 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004050:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004056:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800405a:	2b00      	cmp	r3, #0
 800405c:	d14b      	bne.n	80040f6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004062:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0308 	and.w	r3, r3, #8
 8004074:	2b00      	cmp	r3, #0
 8004076:	d021      	beq.n	80040bc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4618      	mov	r0, r3
 800407e:	f7fe fc99 	bl	80029b4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d032      	beq.n	80040ee <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d12b      	bne.n	80040ee <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800409a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d11f      	bne.n	80040ee <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040b2:	f043 0201 	orr.w	r2, r3, #1
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80040ba:	e018      	b.n	80040ee <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	f003 0302 	and.w	r3, r3, #2
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d111      	bne.n	80040ee <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040ce:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d105      	bne.n	80040ee <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040e6:	f043 0201 	orr.w	r2, r3, #1
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80040ee:	68f8      	ldr	r0, [r7, #12]
 80040f0:	f7fd fcbc 	bl	8001a6c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80040f4:	e00e      	b.n	8004114 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040fa:	f003 0310 	and.w	r3, r3, #16
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d003      	beq.n	800410a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004102:	68f8      	ldr	r0, [r7, #12]
 8004104:	f7ff fabe 	bl	8003684 <HAL_ADC_ErrorCallback>
}
 8004108:	e004      	b.n	8004114 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800410e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	4798      	blx	r3
}
 8004114:	bf00      	nop
 8004116:	3710      	adds	r7, #16
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004128:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800412a:	68f8      	ldr	r0, [r7, #12]
 800412c:	f7fd fc70 	bl	8001a10 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004130:	bf00      	nop
 8004132:	3710      	adds	r7, #16
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004144:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800414a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004156:	f043 0204 	orr.w	r2, r3, #4
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800415e:	68f8      	ldr	r0, [r7, #12]
 8004160:	f7ff fa90 	bl	8003684 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004164:	bf00      	nop
 8004166:	3710      	adds	r7, #16
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <LL_ADC_IsEnabled>:
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f003 0301 	and.w	r3, r3, #1
 800417c:	2b01      	cmp	r3, #1
 800417e:	d101      	bne.n	8004184 <LL_ADC_IsEnabled+0x18>
 8004180:	2301      	movs	r3, #1
 8004182:	e000      	b.n	8004186 <LL_ADC_IsEnabled+0x1a>
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	370c      	adds	r7, #12
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr

08004192 <LL_ADC_REG_IsConversionOngoing>:
{
 8004192:	b480      	push	{r7}
 8004194:	b083      	sub	sp, #12
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f003 0304 	and.w	r3, r3, #4
 80041a2:	2b04      	cmp	r3, #4
 80041a4:	d101      	bne.n	80041aa <LL_ADC_REG_IsConversionOngoing+0x18>
 80041a6:	2301      	movs	r3, #1
 80041a8:	e000      	b.n	80041ac <LL_ADC_REG_IsConversionOngoing+0x1a>
 80041aa:	2300      	movs	r3, #0
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80041c0:	bf00      	nop
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80041d4:	bf00      	nop
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80041e8:	bf00      	nop
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80041fc:	bf00      	nop
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004210:	bf00      	nop
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800421c:	b590      	push	{r4, r7, lr}
 800421e:	b0a1      	sub	sp, #132	@ 0x84
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004226:	2300      	movs	r3, #0
 8004228:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004232:	2b01      	cmp	r3, #1
 8004234:	d101      	bne.n	800423a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004236:	2302      	movs	r3, #2
 8004238:	e0e7      	b.n	800440a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2201      	movs	r2, #1
 800423e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004242:	2300      	movs	r3, #0
 8004244:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004246:	2300      	movs	r3, #0
 8004248:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004252:	d102      	bne.n	800425a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004254:	4b6f      	ldr	r3, [pc, #444]	@ (8004414 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004256:	60bb      	str	r3, [r7, #8]
 8004258:	e009      	b.n	800426e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a6e      	ldr	r2, [pc, #440]	@ (8004418 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d102      	bne.n	800426a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004264:	4b6d      	ldr	r3, [pc, #436]	@ (800441c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004266:	60bb      	str	r3, [r7, #8]
 8004268:	e001      	b.n	800426e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800426a:	2300      	movs	r3, #0
 800426c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d10b      	bne.n	800428c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004278:	f043 0220 	orr.w	r2, r3, #32
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e0be      	b.n	800440a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	4618      	mov	r0, r3
 8004290:	f7ff ff7f 	bl	8004192 <LL_ADC_REG_IsConversionOngoing>
 8004294:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4618      	mov	r0, r3
 800429c:	f7ff ff79 	bl	8004192 <LL_ADC_REG_IsConversionOngoing>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	f040 80a0 	bne.w	80043e8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80042a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	f040 809c 	bne.w	80043e8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80042b8:	d004      	beq.n	80042c4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a55      	ldr	r2, [pc, #340]	@ (8004414 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d101      	bne.n	80042c8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80042c4:	4b56      	ldr	r3, [pc, #344]	@ (8004420 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80042c6:	e000      	b.n	80042ca <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80042c8:	4b56      	ldr	r3, [pc, #344]	@ (8004424 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80042ca:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d04b      	beq.n	800436c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80042d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	6859      	ldr	r1, [r3, #4]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80042e6:	035b      	lsls	r3, r3, #13
 80042e8:	430b      	orrs	r3, r1
 80042ea:	431a      	orrs	r2, r3
 80042ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042ee:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80042f8:	d004      	beq.n	8004304 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a45      	ldr	r2, [pc, #276]	@ (8004414 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d10f      	bne.n	8004324 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004304:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004308:	f7ff ff30 	bl	800416c <LL_ADC_IsEnabled>
 800430c:	4604      	mov	r4, r0
 800430e:	4841      	ldr	r0, [pc, #260]	@ (8004414 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004310:	f7ff ff2c 	bl	800416c <LL_ADC_IsEnabled>
 8004314:	4603      	mov	r3, r0
 8004316:	4323      	orrs	r3, r4
 8004318:	2b00      	cmp	r3, #0
 800431a:	bf0c      	ite	eq
 800431c:	2301      	moveq	r3, #1
 800431e:	2300      	movne	r3, #0
 8004320:	b2db      	uxtb	r3, r3
 8004322:	e012      	b.n	800434a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004324:	483c      	ldr	r0, [pc, #240]	@ (8004418 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004326:	f7ff ff21 	bl	800416c <LL_ADC_IsEnabled>
 800432a:	4604      	mov	r4, r0
 800432c:	483b      	ldr	r0, [pc, #236]	@ (800441c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800432e:	f7ff ff1d 	bl	800416c <LL_ADC_IsEnabled>
 8004332:	4603      	mov	r3, r0
 8004334:	431c      	orrs	r4, r3
 8004336:	483c      	ldr	r0, [pc, #240]	@ (8004428 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004338:	f7ff ff18 	bl	800416c <LL_ADC_IsEnabled>
 800433c:	4603      	mov	r3, r0
 800433e:	4323      	orrs	r3, r4
 8004340:	2b00      	cmp	r3, #0
 8004342:	bf0c      	ite	eq
 8004344:	2301      	moveq	r3, #1
 8004346:	2300      	movne	r3, #0
 8004348:	b2db      	uxtb	r3, r3
 800434a:	2b00      	cmp	r3, #0
 800434c:	d056      	beq.n	80043fc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800434e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004356:	f023 030f 	bic.w	r3, r3, #15
 800435a:	683a      	ldr	r2, [r7, #0]
 800435c:	6811      	ldr	r1, [r2, #0]
 800435e:	683a      	ldr	r2, [r7, #0]
 8004360:	6892      	ldr	r2, [r2, #8]
 8004362:	430a      	orrs	r2, r1
 8004364:	431a      	orrs	r2, r3
 8004366:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004368:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800436a:	e047      	b.n	80043fc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800436c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004374:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004376:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004380:	d004      	beq.n	800438c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a23      	ldr	r2, [pc, #140]	@ (8004414 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d10f      	bne.n	80043ac <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800438c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004390:	f7ff feec 	bl	800416c <LL_ADC_IsEnabled>
 8004394:	4604      	mov	r4, r0
 8004396:	481f      	ldr	r0, [pc, #124]	@ (8004414 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004398:	f7ff fee8 	bl	800416c <LL_ADC_IsEnabled>
 800439c:	4603      	mov	r3, r0
 800439e:	4323      	orrs	r3, r4
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	bf0c      	ite	eq
 80043a4:	2301      	moveq	r3, #1
 80043a6:	2300      	movne	r3, #0
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	e012      	b.n	80043d2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80043ac:	481a      	ldr	r0, [pc, #104]	@ (8004418 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80043ae:	f7ff fedd 	bl	800416c <LL_ADC_IsEnabled>
 80043b2:	4604      	mov	r4, r0
 80043b4:	4819      	ldr	r0, [pc, #100]	@ (800441c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80043b6:	f7ff fed9 	bl	800416c <LL_ADC_IsEnabled>
 80043ba:	4603      	mov	r3, r0
 80043bc:	431c      	orrs	r4, r3
 80043be:	481a      	ldr	r0, [pc, #104]	@ (8004428 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80043c0:	f7ff fed4 	bl	800416c <LL_ADC_IsEnabled>
 80043c4:	4603      	mov	r3, r0
 80043c6:	4323      	orrs	r3, r4
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	bf0c      	ite	eq
 80043cc:	2301      	moveq	r3, #1
 80043ce:	2300      	movne	r3, #0
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d012      	beq.n	80043fc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80043d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80043de:	f023 030f 	bic.w	r3, r3, #15
 80043e2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80043e4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80043e6:	e009      	b.n	80043fc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043ec:	f043 0220 	orr.w	r2, r3, #32
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80043fa:	e000      	b.n	80043fe <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80043fc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004406:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800440a:	4618      	mov	r0, r3
 800440c:	3784      	adds	r7, #132	@ 0x84
 800440e:	46bd      	mov	sp, r7
 8004410:	bd90      	pop	{r4, r7, pc}
 8004412:	bf00      	nop
 8004414:	50000100 	.word	0x50000100
 8004418:	50000400 	.word	0x50000400
 800441c:	50000500 	.word	0x50000500
 8004420:	50000300 	.word	0x50000300
 8004424:	50000700 	.word	0x50000700
 8004428:	50000600 	.word	0x50000600

0800442c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800442c:	b480      	push	{r7}
 800442e:	b085      	sub	sp, #20
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f003 0307 	and.w	r3, r3, #7
 800443a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800443c:	4b0c      	ldr	r3, [pc, #48]	@ (8004470 <__NVIC_SetPriorityGrouping+0x44>)
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004442:	68ba      	ldr	r2, [r7, #8]
 8004444:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004448:	4013      	ands	r3, r2
 800444a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004454:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004458:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800445c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800445e:	4a04      	ldr	r2, [pc, #16]	@ (8004470 <__NVIC_SetPriorityGrouping+0x44>)
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	60d3      	str	r3, [r2, #12]
}
 8004464:	bf00      	nop
 8004466:	3714      	adds	r7, #20
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr
 8004470:	e000ed00 	.word	0xe000ed00

08004474 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004474:	b480      	push	{r7}
 8004476:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004478:	4b04      	ldr	r3, [pc, #16]	@ (800448c <__NVIC_GetPriorityGrouping+0x18>)
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	0a1b      	lsrs	r3, r3, #8
 800447e:	f003 0307 	and.w	r3, r3, #7
}
 8004482:	4618      	mov	r0, r3
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr
 800448c:	e000ed00 	.word	0xe000ed00

08004490 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	4603      	mov	r3, r0
 8004498:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800449a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	db0b      	blt.n	80044ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044a2:	79fb      	ldrb	r3, [r7, #7]
 80044a4:	f003 021f 	and.w	r2, r3, #31
 80044a8:	4907      	ldr	r1, [pc, #28]	@ (80044c8 <__NVIC_EnableIRQ+0x38>)
 80044aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ae:	095b      	lsrs	r3, r3, #5
 80044b0:	2001      	movs	r0, #1
 80044b2:	fa00 f202 	lsl.w	r2, r0, r2
 80044b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80044ba:	bf00      	nop
 80044bc:	370c      	adds	r7, #12
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop
 80044c8:	e000e100 	.word	0xe000e100

080044cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	4603      	mov	r3, r0
 80044d4:	6039      	str	r1, [r7, #0]
 80044d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	db0a      	blt.n	80044f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	b2da      	uxtb	r2, r3
 80044e4:	490c      	ldr	r1, [pc, #48]	@ (8004518 <__NVIC_SetPriority+0x4c>)
 80044e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ea:	0112      	lsls	r2, r2, #4
 80044ec:	b2d2      	uxtb	r2, r2
 80044ee:	440b      	add	r3, r1
 80044f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80044f4:	e00a      	b.n	800450c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	b2da      	uxtb	r2, r3
 80044fa:	4908      	ldr	r1, [pc, #32]	@ (800451c <__NVIC_SetPriority+0x50>)
 80044fc:	79fb      	ldrb	r3, [r7, #7]
 80044fe:	f003 030f 	and.w	r3, r3, #15
 8004502:	3b04      	subs	r3, #4
 8004504:	0112      	lsls	r2, r2, #4
 8004506:	b2d2      	uxtb	r2, r2
 8004508:	440b      	add	r3, r1
 800450a:	761a      	strb	r2, [r3, #24]
}
 800450c:	bf00      	nop
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr
 8004518:	e000e100 	.word	0xe000e100
 800451c:	e000ed00 	.word	0xe000ed00

08004520 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004520:	b480      	push	{r7}
 8004522:	b089      	sub	sp, #36	@ 0x24
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f003 0307 	and.w	r3, r3, #7
 8004532:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	f1c3 0307 	rsb	r3, r3, #7
 800453a:	2b04      	cmp	r3, #4
 800453c:	bf28      	it	cs
 800453e:	2304      	movcs	r3, #4
 8004540:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	3304      	adds	r3, #4
 8004546:	2b06      	cmp	r3, #6
 8004548:	d902      	bls.n	8004550 <NVIC_EncodePriority+0x30>
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	3b03      	subs	r3, #3
 800454e:	e000      	b.n	8004552 <NVIC_EncodePriority+0x32>
 8004550:	2300      	movs	r3, #0
 8004552:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004554:	f04f 32ff 	mov.w	r2, #4294967295
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	fa02 f303 	lsl.w	r3, r2, r3
 800455e:	43da      	mvns	r2, r3
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	401a      	ands	r2, r3
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004568:	f04f 31ff 	mov.w	r1, #4294967295
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	fa01 f303 	lsl.w	r3, r1, r3
 8004572:	43d9      	mvns	r1, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004578:	4313      	orrs	r3, r2
         );
}
 800457a:	4618      	mov	r0, r3
 800457c:	3724      	adds	r7, #36	@ 0x24
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr
	...

08004588 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	3b01      	subs	r3, #1
 8004594:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004598:	d301      	bcc.n	800459e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800459a:	2301      	movs	r3, #1
 800459c:	e00f      	b.n	80045be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800459e:	4a0a      	ldr	r2, [pc, #40]	@ (80045c8 <SysTick_Config+0x40>)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	3b01      	subs	r3, #1
 80045a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80045a6:	210f      	movs	r1, #15
 80045a8:	f04f 30ff 	mov.w	r0, #4294967295
 80045ac:	f7ff ff8e 	bl	80044cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80045b0:	4b05      	ldr	r3, [pc, #20]	@ (80045c8 <SysTick_Config+0x40>)
 80045b2:	2200      	movs	r2, #0
 80045b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80045b6:	4b04      	ldr	r3, [pc, #16]	@ (80045c8 <SysTick_Config+0x40>)
 80045b8:	2207      	movs	r2, #7
 80045ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3708      	adds	r7, #8
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	e000e010 	.word	0xe000e010

080045cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f7ff ff29 	bl	800442c <__NVIC_SetPriorityGrouping>
}
 80045da:	bf00      	nop
 80045dc:	3708      	adds	r7, #8
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045e2:	b580      	push	{r7, lr}
 80045e4:	b086      	sub	sp, #24
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	4603      	mov	r3, r0
 80045ea:	60b9      	str	r1, [r7, #8]
 80045ec:	607a      	str	r2, [r7, #4]
 80045ee:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80045f0:	f7ff ff40 	bl	8004474 <__NVIC_GetPriorityGrouping>
 80045f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	68b9      	ldr	r1, [r7, #8]
 80045fa:	6978      	ldr	r0, [r7, #20]
 80045fc:	f7ff ff90 	bl	8004520 <NVIC_EncodePriority>
 8004600:	4602      	mov	r2, r0
 8004602:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004606:	4611      	mov	r1, r2
 8004608:	4618      	mov	r0, r3
 800460a:	f7ff ff5f 	bl	80044cc <__NVIC_SetPriority>
}
 800460e:	bf00      	nop
 8004610:	3718      	adds	r7, #24
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}

08004616 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004616:	b580      	push	{r7, lr}
 8004618:	b082      	sub	sp, #8
 800461a:	af00      	add	r7, sp, #0
 800461c:	4603      	mov	r3, r0
 800461e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004624:	4618      	mov	r0, r3
 8004626:	f7ff ff33 	bl	8004490 <__NVIC_EnableIRQ>
}
 800462a:	bf00      	nop
 800462c:	3708      	adds	r7, #8
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}

08004632 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004632:	b580      	push	{r7, lr}
 8004634:	b082      	sub	sp, #8
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f7ff ffa4 	bl	8004588 <SysTick_Config>
 8004640:	4603      	mov	r3, r0
}
 8004642:	4618      	mov	r0, r3
 8004644:	3708      	adds	r7, #8
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
	...

0800464c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d101      	bne.n	800465e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e08d      	b.n	800477a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	461a      	mov	r2, r3
 8004664:	4b47      	ldr	r3, [pc, #284]	@ (8004784 <HAL_DMA_Init+0x138>)
 8004666:	429a      	cmp	r2, r3
 8004668:	d80f      	bhi.n	800468a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	461a      	mov	r2, r3
 8004670:	4b45      	ldr	r3, [pc, #276]	@ (8004788 <HAL_DMA_Init+0x13c>)
 8004672:	4413      	add	r3, r2
 8004674:	4a45      	ldr	r2, [pc, #276]	@ (800478c <HAL_DMA_Init+0x140>)
 8004676:	fba2 2303 	umull	r2, r3, r2, r3
 800467a:	091b      	lsrs	r3, r3, #4
 800467c:	009a      	lsls	r2, r3, #2
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a42      	ldr	r2, [pc, #264]	@ (8004790 <HAL_DMA_Init+0x144>)
 8004686:	641a      	str	r2, [r3, #64]	@ 0x40
 8004688:	e00e      	b.n	80046a8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	461a      	mov	r2, r3
 8004690:	4b40      	ldr	r3, [pc, #256]	@ (8004794 <HAL_DMA_Init+0x148>)
 8004692:	4413      	add	r3, r2
 8004694:	4a3d      	ldr	r2, [pc, #244]	@ (800478c <HAL_DMA_Init+0x140>)
 8004696:	fba2 2303 	umull	r2, r3, r2, r3
 800469a:	091b      	lsrs	r3, r3, #4
 800469c:	009a      	lsls	r2, r3, #2
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a3c      	ldr	r2, [pc, #240]	@ (8004798 <HAL_DMA_Init+0x14c>)
 80046a6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2202      	movs	r2, #2
 80046ac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80046be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046c2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80046cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a1b      	ldr	r3, [r3, #32]
 80046ea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 f9b6 	bl	8004a6c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004708:	d102      	bne.n	8004710 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685a      	ldr	r2, [r3, #4]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004718:	b2d2      	uxtb	r2, r2
 800471a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004724:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d010      	beq.n	8004750 <HAL_DMA_Init+0x104>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	2b04      	cmp	r3, #4
 8004734:	d80c      	bhi.n	8004750 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 f9d6 	bl	8004ae8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004740:	2200      	movs	r2, #0
 8004742:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800474c:	605a      	str	r2, [r3, #4]
 800474e:	e008      	b.n	8004762 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3710      	adds	r7, #16
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	40020407 	.word	0x40020407
 8004788:	bffdfff8 	.word	0xbffdfff8
 800478c:	cccccccd 	.word	0xcccccccd
 8004790:	40020000 	.word	0x40020000
 8004794:	bffdfbf8 	.word	0xbffdfbf8
 8004798:	40020400 	.word	0x40020400

0800479c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b086      	sub	sp, #24
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	607a      	str	r2, [r7, #4]
 80047a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047aa:	2300      	movs	r3, #0
 80047ac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d101      	bne.n	80047bc <HAL_DMA_Start_IT+0x20>
 80047b8:	2302      	movs	r3, #2
 80047ba:	e066      	b.n	800488a <HAL_DMA_Start_IT+0xee>
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d155      	bne.n	800487c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2202      	movs	r2, #2
 80047d4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2200      	movs	r2, #0
 80047dc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f022 0201 	bic.w	r2, r2, #1
 80047ec:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	68b9      	ldr	r1, [r7, #8]
 80047f4:	68f8      	ldr	r0, [r7, #12]
 80047f6:	f000 f8fb 	bl	80049f0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d008      	beq.n	8004814 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f042 020e 	orr.w	r2, r2, #14
 8004810:	601a      	str	r2, [r3, #0]
 8004812:	e00f      	b.n	8004834 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f022 0204 	bic.w	r2, r2, #4
 8004822:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f042 020a 	orr.w	r2, r2, #10
 8004832:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d007      	beq.n	8004852 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800484c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004850:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004856:	2b00      	cmp	r3, #0
 8004858:	d007      	beq.n	800486a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004864:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004868:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f042 0201 	orr.w	r2, r2, #1
 8004878:	601a      	str	r2, [r3, #0]
 800487a:	e005      	b.n	8004888 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2200      	movs	r2, #0
 8004880:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004884:	2302      	movs	r3, #2
 8004886:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004888:	7dfb      	ldrb	r3, [r7, #23]
}
 800488a:	4618      	mov	r0, r3
 800488c:	3718      	adds	r7, #24
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}

08004892 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004892:	b580      	push	{r7, lr}
 8004894:	b084      	sub	sp, #16
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ae:	f003 031f 	and.w	r3, r3, #31
 80048b2:	2204      	movs	r2, #4
 80048b4:	409a      	lsls	r2, r3
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	4013      	ands	r3, r2
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d026      	beq.n	800490c <HAL_DMA_IRQHandler+0x7a>
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	f003 0304 	and.w	r3, r3, #4
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d021      	beq.n	800490c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0320 	and.w	r3, r3, #32
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d107      	bne.n	80048e6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f022 0204 	bic.w	r2, r2, #4
 80048e4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ea:	f003 021f 	and.w	r2, r3, #31
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048f2:	2104      	movs	r1, #4
 80048f4:	fa01 f202 	lsl.w	r2, r1, r2
 80048f8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d071      	beq.n	80049e6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800490a:	e06c      	b.n	80049e6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004910:	f003 031f 	and.w	r3, r3, #31
 8004914:	2202      	movs	r2, #2
 8004916:	409a      	lsls	r2, r3
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	4013      	ands	r3, r2
 800491c:	2b00      	cmp	r3, #0
 800491e:	d02e      	beq.n	800497e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	f003 0302 	and.w	r3, r3, #2
 8004926:	2b00      	cmp	r3, #0
 8004928:	d029      	beq.n	800497e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0320 	and.w	r3, r3, #32
 8004934:	2b00      	cmp	r3, #0
 8004936:	d10b      	bne.n	8004950 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f022 020a 	bic.w	r2, r2, #10
 8004946:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004954:	f003 021f 	and.w	r2, r3, #31
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800495c:	2102      	movs	r1, #2
 800495e:	fa01 f202 	lsl.w	r2, r1, r2
 8004962:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004970:	2b00      	cmp	r3, #0
 8004972:	d038      	beq.n	80049e6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800497c:	e033      	b.n	80049e6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004982:	f003 031f 	and.w	r3, r3, #31
 8004986:	2208      	movs	r2, #8
 8004988:	409a      	lsls	r2, r3
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	4013      	ands	r3, r2
 800498e:	2b00      	cmp	r3, #0
 8004990:	d02a      	beq.n	80049e8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	f003 0308 	and.w	r3, r3, #8
 8004998:	2b00      	cmp	r3, #0
 800499a:	d025      	beq.n	80049e8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f022 020e 	bic.w	r2, r2, #14
 80049aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049b0:	f003 021f 	and.w	r2, r3, #31
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b8:	2101      	movs	r1, #1
 80049ba:	fa01 f202 	lsl.w	r2, r1, r2
 80049be:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2201      	movs	r2, #1
 80049ca:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d004      	beq.n	80049e8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80049e6:	bf00      	nop
 80049e8:	bf00      	nop
}
 80049ea:	3710      	adds	r7, #16
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	607a      	str	r2, [r7, #4]
 80049fc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004a06:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d004      	beq.n	8004a1a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a14:	68fa      	ldr	r2, [r7, #12]
 8004a16:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004a18:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a1e:	f003 021f 	and.w	r2, r3, #31
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a26:	2101      	movs	r1, #1
 8004a28:	fa01 f202 	lsl.w	r2, r1, r2
 8004a2c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	683a      	ldr	r2, [r7, #0]
 8004a34:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	2b10      	cmp	r3, #16
 8004a3c:	d108      	bne.n	8004a50 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68ba      	ldr	r2, [r7, #8]
 8004a4c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004a4e:	e007      	b.n	8004a60 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68ba      	ldr	r2, [r7, #8]
 8004a56:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	60da      	str	r2, [r3, #12]
}
 8004a60:	bf00      	nop
 8004a62:	3714      	adds	r7, #20
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b087      	sub	sp, #28
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	461a      	mov	r2, r3
 8004a7a:	4b16      	ldr	r3, [pc, #88]	@ (8004ad4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d802      	bhi.n	8004a86 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004a80:	4b15      	ldr	r3, [pc, #84]	@ (8004ad8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004a82:	617b      	str	r3, [r7, #20]
 8004a84:	e001      	b.n	8004a8a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004a86:	4b15      	ldr	r3, [pc, #84]	@ (8004adc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004a88:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	3b08      	subs	r3, #8
 8004a96:	4a12      	ldr	r2, [pc, #72]	@ (8004ae0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004a98:	fba2 2303 	umull	r2, r3, r2, r3
 8004a9c:	091b      	lsrs	r3, r3, #4
 8004a9e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aa4:	089b      	lsrs	r3, r3, #2
 8004aa6:	009a      	lsls	r2, r3, #2
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	4413      	add	r3, r2
 8004aac:	461a      	mov	r2, r3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a0b      	ldr	r2, [pc, #44]	@ (8004ae4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004ab6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f003 031f 	and.w	r3, r3, #31
 8004abe:	2201      	movs	r2, #1
 8004ac0:	409a      	lsls	r2, r3
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004ac6:	bf00      	nop
 8004ac8:	371c      	adds	r7, #28
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	40020407 	.word	0x40020407
 8004ad8:	40020800 	.word	0x40020800
 8004adc:	40020820 	.word	0x40020820
 8004ae0:	cccccccd 	.word	0xcccccccd
 8004ae4:	40020880 	.word	0x40020880

08004ae8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b085      	sub	sp, #20
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004af8:	68fa      	ldr	r2, [r7, #12]
 8004afa:	4b0b      	ldr	r3, [pc, #44]	@ (8004b28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004afc:	4413      	add	r3, r2
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	461a      	mov	r2, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a08      	ldr	r2, [pc, #32]	@ (8004b2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004b0a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	3b01      	subs	r3, #1
 8004b10:	f003 031f 	and.w	r3, r3, #31
 8004b14:	2201      	movs	r2, #1
 8004b16:	409a      	lsls	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004b1c:	bf00      	nop
 8004b1e:	3714      	adds	r7, #20
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr
 8004b28:	1000823f 	.word	0x1000823f
 8004b2c:	40020940 	.word	0x40020940

08004b30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b087      	sub	sp, #28
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004b3e:	e15a      	b.n	8004df6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	2101      	movs	r1, #1
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	fa01 f303 	lsl.w	r3, r1, r3
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	f000 814c 	beq.w	8004df0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	f003 0303 	and.w	r3, r3, #3
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d005      	beq.n	8004b70 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004b6c:	2b02      	cmp	r3, #2
 8004b6e:	d130      	bne.n	8004bd2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	005b      	lsls	r3, r3, #1
 8004b7a:	2203      	movs	r2, #3
 8004b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b80:	43db      	mvns	r3, r3
 8004b82:	693a      	ldr	r2, [r7, #16]
 8004b84:	4013      	ands	r3, r2
 8004b86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	68da      	ldr	r2, [r3, #12]
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	005b      	lsls	r3, r3, #1
 8004b90:	fa02 f303 	lsl.w	r3, r2, r3
 8004b94:	693a      	ldr	r2, [r7, #16]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	693a      	ldr	r2, [r7, #16]
 8004b9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	fa02 f303 	lsl.w	r3, r2, r3
 8004bae:	43db      	mvns	r3, r3
 8004bb0:	693a      	ldr	r2, [r7, #16]
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	091b      	lsrs	r3, r3, #4
 8004bbc:	f003 0201 	and.w	r2, r3, #1
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc6:	693a      	ldr	r2, [r7, #16]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	693a      	ldr	r2, [r7, #16]
 8004bd0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	f003 0303 	and.w	r3, r3, #3
 8004bda:	2b03      	cmp	r3, #3
 8004bdc:	d017      	beq.n	8004c0e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	005b      	lsls	r3, r3, #1
 8004be8:	2203      	movs	r2, #3
 8004bea:	fa02 f303 	lsl.w	r3, r2, r3
 8004bee:	43db      	mvns	r3, r3
 8004bf0:	693a      	ldr	r2, [r7, #16]
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	689a      	ldr	r2, [r3, #8]
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	005b      	lsls	r3, r3, #1
 8004bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004c02:	693a      	ldr	r2, [r7, #16]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	693a      	ldr	r2, [r7, #16]
 8004c0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	f003 0303 	and.w	r3, r3, #3
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d123      	bne.n	8004c62 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	08da      	lsrs	r2, r3, #3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	3208      	adds	r2, #8
 8004c22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	f003 0307 	and.w	r3, r3, #7
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	220f      	movs	r2, #15
 8004c32:	fa02 f303 	lsl.w	r3, r2, r3
 8004c36:	43db      	mvns	r3, r3
 8004c38:	693a      	ldr	r2, [r7, #16]
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	691a      	ldr	r2, [r3, #16]
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	f003 0307 	and.w	r3, r3, #7
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4e:	693a      	ldr	r2, [r7, #16]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	08da      	lsrs	r2, r3, #3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	3208      	adds	r2, #8
 8004c5c:	6939      	ldr	r1, [r7, #16]
 8004c5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	005b      	lsls	r3, r3, #1
 8004c6c:	2203      	movs	r2, #3
 8004c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c72:	43db      	mvns	r3, r3
 8004c74:	693a      	ldr	r2, [r7, #16]
 8004c76:	4013      	ands	r3, r2
 8004c78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	f003 0203 	and.w	r2, r3, #3
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	005b      	lsls	r3, r3, #1
 8004c86:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8a:	693a      	ldr	r2, [r7, #16]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	693a      	ldr	r2, [r7, #16]
 8004c94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	f000 80a6 	beq.w	8004df0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ca4:	4b5b      	ldr	r3, [pc, #364]	@ (8004e14 <HAL_GPIO_Init+0x2e4>)
 8004ca6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ca8:	4a5a      	ldr	r2, [pc, #360]	@ (8004e14 <HAL_GPIO_Init+0x2e4>)
 8004caa:	f043 0301 	orr.w	r3, r3, #1
 8004cae:	6613      	str	r3, [r2, #96]	@ 0x60
 8004cb0:	4b58      	ldr	r3, [pc, #352]	@ (8004e14 <HAL_GPIO_Init+0x2e4>)
 8004cb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cb4:	f003 0301 	and.w	r3, r3, #1
 8004cb8:	60bb      	str	r3, [r7, #8]
 8004cba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004cbc:	4a56      	ldr	r2, [pc, #344]	@ (8004e18 <HAL_GPIO_Init+0x2e8>)
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	089b      	lsrs	r3, r3, #2
 8004cc2:	3302      	adds	r3, #2
 8004cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	f003 0303 	and.w	r3, r3, #3
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	220f      	movs	r2, #15
 8004cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd8:	43db      	mvns	r3, r3
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	4013      	ands	r3, r2
 8004cde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004ce6:	d01f      	beq.n	8004d28 <HAL_GPIO_Init+0x1f8>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a4c      	ldr	r2, [pc, #304]	@ (8004e1c <HAL_GPIO_Init+0x2ec>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d019      	beq.n	8004d24 <HAL_GPIO_Init+0x1f4>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a4b      	ldr	r2, [pc, #300]	@ (8004e20 <HAL_GPIO_Init+0x2f0>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d013      	beq.n	8004d20 <HAL_GPIO_Init+0x1f0>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a4a      	ldr	r2, [pc, #296]	@ (8004e24 <HAL_GPIO_Init+0x2f4>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d00d      	beq.n	8004d1c <HAL_GPIO_Init+0x1ec>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a49      	ldr	r2, [pc, #292]	@ (8004e28 <HAL_GPIO_Init+0x2f8>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d007      	beq.n	8004d18 <HAL_GPIO_Init+0x1e8>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a48      	ldr	r2, [pc, #288]	@ (8004e2c <HAL_GPIO_Init+0x2fc>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d101      	bne.n	8004d14 <HAL_GPIO_Init+0x1e4>
 8004d10:	2305      	movs	r3, #5
 8004d12:	e00a      	b.n	8004d2a <HAL_GPIO_Init+0x1fa>
 8004d14:	2306      	movs	r3, #6
 8004d16:	e008      	b.n	8004d2a <HAL_GPIO_Init+0x1fa>
 8004d18:	2304      	movs	r3, #4
 8004d1a:	e006      	b.n	8004d2a <HAL_GPIO_Init+0x1fa>
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e004      	b.n	8004d2a <HAL_GPIO_Init+0x1fa>
 8004d20:	2302      	movs	r3, #2
 8004d22:	e002      	b.n	8004d2a <HAL_GPIO_Init+0x1fa>
 8004d24:	2301      	movs	r3, #1
 8004d26:	e000      	b.n	8004d2a <HAL_GPIO_Init+0x1fa>
 8004d28:	2300      	movs	r3, #0
 8004d2a:	697a      	ldr	r2, [r7, #20]
 8004d2c:	f002 0203 	and.w	r2, r2, #3
 8004d30:	0092      	lsls	r2, r2, #2
 8004d32:	4093      	lsls	r3, r2
 8004d34:	693a      	ldr	r2, [r7, #16]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d3a:	4937      	ldr	r1, [pc, #220]	@ (8004e18 <HAL_GPIO_Init+0x2e8>)
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	089b      	lsrs	r3, r3, #2
 8004d40:	3302      	adds	r3, #2
 8004d42:	693a      	ldr	r2, [r7, #16]
 8004d44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004d48:	4b39      	ldr	r3, [pc, #228]	@ (8004e30 <HAL_GPIO_Init+0x300>)
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	43db      	mvns	r3, r3
 8004d52:	693a      	ldr	r2, [r7, #16]
 8004d54:	4013      	ands	r3, r2
 8004d56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d003      	beq.n	8004d6c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004d64:	693a      	ldr	r2, [r7, #16]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004d6c:	4a30      	ldr	r2, [pc, #192]	@ (8004e30 <HAL_GPIO_Init+0x300>)
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004d72:	4b2f      	ldr	r3, [pc, #188]	@ (8004e30 <HAL_GPIO_Init+0x300>)
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	43db      	mvns	r3, r3
 8004d7c:	693a      	ldr	r2, [r7, #16]
 8004d7e:	4013      	ands	r3, r2
 8004d80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d003      	beq.n	8004d96 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004d8e:	693a      	ldr	r2, [r7, #16]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004d96:	4a26      	ldr	r2, [pc, #152]	@ (8004e30 <HAL_GPIO_Init+0x300>)
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004d9c:	4b24      	ldr	r3, [pc, #144]	@ (8004e30 <HAL_GPIO_Init+0x300>)
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	43db      	mvns	r3, r3
 8004da6:	693a      	ldr	r2, [r7, #16]
 8004da8:	4013      	ands	r3, r2
 8004daa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d003      	beq.n	8004dc0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004db8:	693a      	ldr	r2, [r7, #16]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004dc0:	4a1b      	ldr	r2, [pc, #108]	@ (8004e30 <HAL_GPIO_Init+0x300>)
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004dc6:	4b1a      	ldr	r3, [pc, #104]	@ (8004e30 <HAL_GPIO_Init+0x300>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	43db      	mvns	r3, r3
 8004dd0:	693a      	ldr	r2, [r7, #16]
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d003      	beq.n	8004dea <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004dea:	4a11      	ldr	r2, [pc, #68]	@ (8004e30 <HAL_GPIO_Init+0x300>)
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	3301      	adds	r3, #1
 8004df4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	f47f ae9d 	bne.w	8004b40 <HAL_GPIO_Init+0x10>
  }
}
 8004e06:	bf00      	nop
 8004e08:	bf00      	nop
 8004e0a:	371c      	adds	r7, #28
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr
 8004e14:	40021000 	.word	0x40021000
 8004e18:	40010000 	.word	0x40010000
 8004e1c:	48000400 	.word	0x48000400
 8004e20:	48000800 	.word	0x48000800
 8004e24:	48000c00 	.word	0x48000c00
 8004e28:	48001000 	.word	0x48001000
 8004e2c:	48001400 	.word	0x48001400
 8004e30:	40010400 	.word	0x40010400

08004e34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	460b      	mov	r3, r1
 8004e3e:	807b      	strh	r3, [r7, #2]
 8004e40:	4613      	mov	r3, r2
 8004e42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004e44:	787b      	ldrb	r3, [r7, #1]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d003      	beq.n	8004e52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004e4a:	887a      	ldrh	r2, [r7, #2]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004e50:	e002      	b.n	8004e58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004e52:	887a      	ldrh	r2, [r7, #2]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004e58:	bf00      	nop
 8004e5a:	370c      	adds	r7, #12
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b082      	sub	sp, #8
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004e6e:	4b08      	ldr	r3, [pc, #32]	@ (8004e90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e70:	695a      	ldr	r2, [r3, #20]
 8004e72:	88fb      	ldrh	r3, [r7, #6]
 8004e74:	4013      	ands	r3, r2
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d006      	beq.n	8004e88 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004e7a:	4a05      	ldr	r2, [pc, #20]	@ (8004e90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e7c:	88fb      	ldrh	r3, [r7, #6]
 8004e7e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004e80:	88fb      	ldrh	r3, [r7, #6]
 8004e82:	4618      	mov	r0, r3
 8004e84:	f000 f806 	bl	8004e94 <HAL_GPIO_EXTI_Callback>
  }
}
 8004e88:	bf00      	nop
 8004e8a:	3708      	adds	r7, #8
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	40010400 	.word	0x40010400

08004e94 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004e9e:	bf00      	nop
 8004ea0:	370c      	adds	r7, #12
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr
	...

08004eac <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d101      	bne.n	8004ec2 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e0bb      	b.n	800503a <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	2b05      	cmp	r3, #5
 8004ecc:	d101      	bne.n	8004ed2 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e0b3      	b.n	800503a <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d101      	bne.n	8004ee2 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e0ab      	b.n	800503a <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ee2:	4b58      	ldr	r3, [pc, #352]	@ (8005044 <HAL_OPAMP_Init+0x198>)
 8004ee4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ee6:	4a57      	ldr	r2, [pc, #348]	@ (8005044 <HAL_OPAMP_Init+0x198>)
 8004ee8:	f043 0301 	orr.w	r3, r3, #1
 8004eec:	6613      	str	r3, [r2, #96]	@ 0x60
 8004eee:	4b55      	ldr	r3, [pc, #340]	@ (8005044 <HAL_OPAMP_Init+0x198>)
 8004ef0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ef2:	f003 0301 	and.w	r3, r3, #1
 8004ef6:	60bb      	str	r3, [r7, #8]
 8004ef8:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d103      	bne.n	8004f0e <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f7fc ffa2 	bl	8001e58 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	2b40      	cmp	r3, #64	@ 0x40
 8004f1a:	d003      	beq.n	8004f24 <HAL_OPAMP_Init+0x78>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	2b60      	cmp	r3, #96	@ 0x60
 8004f22:	d133      	bne.n	8004f8c <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f023 0110 	bic.w	r1, r3, #16
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	430a      	orrs	r2, r1
 8004f38:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	4b41      	ldr	r3, [pc, #260]	@ (8005048 <HAL_OPAMP_Init+0x19c>)
 8004f42:	4013      	ands	r3, r2
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	6851      	ldr	r1, [r2, #4]
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	6892      	ldr	r2, [r2, #8]
 8004f4c:	4311      	orrs	r1, r2
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	6912      	ldr	r2, [r2, #16]
 8004f52:	430a      	orrs	r2, r1
 8004f54:	6879      	ldr	r1, [r7, #4]
 8004f56:	7d09      	ldrb	r1, [r1, #20]
 8004f58:	2901      	cmp	r1, #1
 8004f5a:	d102      	bne.n	8004f62 <HAL_OPAMP_Init+0xb6>
 8004f5c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004f60:	e000      	b.n	8004f64 <HAL_OPAMP_Init+0xb8>
 8004f62:	2100      	movs	r1, #0
 8004f64:	4311      	orrs	r1, r2
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004f6a:	4311      	orrs	r1, r2
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004f70:	4311      	orrs	r1, r2
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004f76:	04d2      	lsls	r2, r2, #19
 8004f78:	4311      	orrs	r1, r2
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004f7e:	0612      	lsls	r2, r2, #24
 8004f80:	4311      	orrs	r1, r2
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	6812      	ldr	r2, [r2, #0]
 8004f86:	430b      	orrs	r3, r1
 8004f88:	6013      	str	r3, [r2, #0]
 8004f8a:	e035      	b.n	8004ff8 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f023 0110 	bic.w	r1, r3, #16
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	4b27      	ldr	r3, [pc, #156]	@ (8005048 <HAL_OPAMP_Init+0x19c>)
 8004faa:	4013      	ands	r3, r2
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	6851      	ldr	r1, [r2, #4]
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	6892      	ldr	r2, [r2, #8]
 8004fb4:	4311      	orrs	r1, r2
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	68d2      	ldr	r2, [r2, #12]
 8004fba:	4311      	orrs	r1, r2
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	6912      	ldr	r2, [r2, #16]
 8004fc0:	430a      	orrs	r2, r1
 8004fc2:	6879      	ldr	r1, [r7, #4]
 8004fc4:	7d09      	ldrb	r1, [r1, #20]
 8004fc6:	2901      	cmp	r1, #1
 8004fc8:	d102      	bne.n	8004fd0 <HAL_OPAMP_Init+0x124>
 8004fca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004fce:	e000      	b.n	8004fd2 <HAL_OPAMP_Init+0x126>
 8004fd0:	2100      	movs	r1, #0
 8004fd2:	4311      	orrs	r1, r2
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004fd8:	4311      	orrs	r1, r2
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004fde:	4311      	orrs	r1, r2
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004fe4:	04d2      	lsls	r2, r2, #19
 8004fe6:	4311      	orrs	r1, r2
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004fec:	0612      	lsls	r2, r2, #24
 8004fee:	4311      	orrs	r1, r2
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	6812      	ldr	r2, [r2, #0]
 8004ff4:	430b      	orrs	r3, r1
 8004ff6:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	699b      	ldr	r3, [r3, #24]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	db10      	blt.n	8005024 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	699a      	ldr	r2, [r3, #24]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	69db      	ldr	r3, [r3, #28]
 8005014:	431a      	orrs	r2, r3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a1b      	ldr	r3, [r3, #32]
 800501a:	431a      	orrs	r2, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	430a      	orrs	r2, r1
 8005022:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800502a:	b2db      	uxtb	r3, r3
 800502c:	2b00      	cmp	r3, #0
 800502e:	d103      	bne.n	8005038 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8005038:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800503a:	4618      	mov	r0, r3
 800503c:	3710      	adds	r7, #16
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	40021000 	.word	0x40021000
 8005048:	e0003e11 	.word	0xe0003e11

0800504c <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 800504c:	b480      	push	{r7}
 800504e:	b085      	sub	sp, #20
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005054:	2300      	movs	r3, #0
 8005056:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d102      	bne.n	8005064 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	73fb      	strb	r3, [r7, #15]
 8005062:	e01d      	b.n	80050a0 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800506a:	b2db      	uxtb	r3, r3
 800506c:	2b05      	cmp	r3, #5
 800506e:	d102      	bne.n	8005076 <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	73fb      	strb	r3, [r7, #15]
 8005074:	e014      	b.n	80050a0 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800507c:	b2db      	uxtb	r3, r3
 800507e:	2b01      	cmp	r3, #1
 8005080:	d10c      	bne.n	800509c <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f042 0201 	orr.w	r2, r2, #1
 8005090:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2204      	movs	r2, #4
 8005096:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 800509a:	e001      	b.n	80050a0 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 80050a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3714      	adds	r7, #20
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr

080050ae <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80050ae:	b580      	push	{r7, lr}
 80050b0:	b084      	sub	sp, #16
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d101      	bne.n	80050c0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e0c0      	b.n	8005242 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d106      	bne.n	80050da <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f009 fd1d 	bl	800eb14 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2203      	movs	r2, #3
 80050de:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4618      	mov	r0, r3
 80050e8:	f005 fb67 	bl	800a7ba <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050ec:	2300      	movs	r3, #0
 80050ee:	73fb      	strb	r3, [r7, #15]
 80050f0:	e03e      	b.n	8005170 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80050f2:	7bfa      	ldrb	r2, [r7, #15]
 80050f4:	6879      	ldr	r1, [r7, #4]
 80050f6:	4613      	mov	r3, r2
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	4413      	add	r3, r2
 80050fc:	00db      	lsls	r3, r3, #3
 80050fe:	440b      	add	r3, r1
 8005100:	3311      	adds	r3, #17
 8005102:	2201      	movs	r2, #1
 8005104:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005106:	7bfa      	ldrb	r2, [r7, #15]
 8005108:	6879      	ldr	r1, [r7, #4]
 800510a:	4613      	mov	r3, r2
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	4413      	add	r3, r2
 8005110:	00db      	lsls	r3, r3, #3
 8005112:	440b      	add	r3, r1
 8005114:	3310      	adds	r3, #16
 8005116:	7bfa      	ldrb	r2, [r7, #15]
 8005118:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800511a:	7bfa      	ldrb	r2, [r7, #15]
 800511c:	6879      	ldr	r1, [r7, #4]
 800511e:	4613      	mov	r3, r2
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	4413      	add	r3, r2
 8005124:	00db      	lsls	r3, r3, #3
 8005126:	440b      	add	r3, r1
 8005128:	3313      	adds	r3, #19
 800512a:	2200      	movs	r2, #0
 800512c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800512e:	7bfa      	ldrb	r2, [r7, #15]
 8005130:	6879      	ldr	r1, [r7, #4]
 8005132:	4613      	mov	r3, r2
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	4413      	add	r3, r2
 8005138:	00db      	lsls	r3, r3, #3
 800513a:	440b      	add	r3, r1
 800513c:	3320      	adds	r3, #32
 800513e:	2200      	movs	r2, #0
 8005140:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005142:	7bfa      	ldrb	r2, [r7, #15]
 8005144:	6879      	ldr	r1, [r7, #4]
 8005146:	4613      	mov	r3, r2
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	4413      	add	r3, r2
 800514c:	00db      	lsls	r3, r3, #3
 800514e:	440b      	add	r3, r1
 8005150:	3324      	adds	r3, #36	@ 0x24
 8005152:	2200      	movs	r2, #0
 8005154:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005156:	7bfb      	ldrb	r3, [r7, #15]
 8005158:	6879      	ldr	r1, [r7, #4]
 800515a:	1c5a      	adds	r2, r3, #1
 800515c:	4613      	mov	r3, r2
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	4413      	add	r3, r2
 8005162:	00db      	lsls	r3, r3, #3
 8005164:	440b      	add	r3, r1
 8005166:	2200      	movs	r2, #0
 8005168:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800516a:	7bfb      	ldrb	r3, [r7, #15]
 800516c:	3301      	adds	r3, #1
 800516e:	73fb      	strb	r3, [r7, #15]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	791b      	ldrb	r3, [r3, #4]
 8005174:	7bfa      	ldrb	r2, [r7, #15]
 8005176:	429a      	cmp	r2, r3
 8005178:	d3bb      	bcc.n	80050f2 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800517a:	2300      	movs	r3, #0
 800517c:	73fb      	strb	r3, [r7, #15]
 800517e:	e044      	b.n	800520a <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005180:	7bfa      	ldrb	r2, [r7, #15]
 8005182:	6879      	ldr	r1, [r7, #4]
 8005184:	4613      	mov	r3, r2
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	4413      	add	r3, r2
 800518a:	00db      	lsls	r3, r3, #3
 800518c:	440b      	add	r3, r1
 800518e:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8005192:	2200      	movs	r2, #0
 8005194:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005196:	7bfa      	ldrb	r2, [r7, #15]
 8005198:	6879      	ldr	r1, [r7, #4]
 800519a:	4613      	mov	r3, r2
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	4413      	add	r3, r2
 80051a0:	00db      	lsls	r3, r3, #3
 80051a2:	440b      	add	r3, r1
 80051a4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80051a8:	7bfa      	ldrb	r2, [r7, #15]
 80051aa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80051ac:	7bfa      	ldrb	r2, [r7, #15]
 80051ae:	6879      	ldr	r1, [r7, #4]
 80051b0:	4613      	mov	r3, r2
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	4413      	add	r3, r2
 80051b6:	00db      	lsls	r3, r3, #3
 80051b8:	440b      	add	r3, r1
 80051ba:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80051be:	2200      	movs	r2, #0
 80051c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80051c2:	7bfa      	ldrb	r2, [r7, #15]
 80051c4:	6879      	ldr	r1, [r7, #4]
 80051c6:	4613      	mov	r3, r2
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	4413      	add	r3, r2
 80051cc:	00db      	lsls	r3, r3, #3
 80051ce:	440b      	add	r3, r1
 80051d0:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80051d4:	2200      	movs	r2, #0
 80051d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80051d8:	7bfa      	ldrb	r2, [r7, #15]
 80051da:	6879      	ldr	r1, [r7, #4]
 80051dc:	4613      	mov	r3, r2
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	4413      	add	r3, r2
 80051e2:	00db      	lsls	r3, r3, #3
 80051e4:	440b      	add	r3, r1
 80051e6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80051ea:	2200      	movs	r2, #0
 80051ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80051ee:	7bfa      	ldrb	r2, [r7, #15]
 80051f0:	6879      	ldr	r1, [r7, #4]
 80051f2:	4613      	mov	r3, r2
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	4413      	add	r3, r2
 80051f8:	00db      	lsls	r3, r3, #3
 80051fa:	440b      	add	r3, r1
 80051fc:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005200:	2200      	movs	r2, #0
 8005202:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005204:	7bfb      	ldrb	r3, [r7, #15]
 8005206:	3301      	adds	r3, #1
 8005208:	73fb      	strb	r3, [r7, #15]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	791b      	ldrb	r3, [r3, #4]
 800520e:	7bfa      	ldrb	r2, [r7, #15]
 8005210:	429a      	cmp	r2, r3
 8005212:	d3b5      	bcc.n	8005180 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6818      	ldr	r0, [r3, #0]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	3304      	adds	r3, #4
 800521c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8005220:	f005 fae6 	bl	800a7f0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2201      	movs	r2, #1
 800522e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	7a9b      	ldrb	r3, [r3, #10]
 8005236:	2b01      	cmp	r3, #1
 8005238:	d102      	bne.n	8005240 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f001 fc40 	bl	8006ac0 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8005240:	2300      	movs	r3, #0
}
 8005242:	4618      	mov	r0, r3
 8005244:	3710      	adds	r7, #16
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}

0800524a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800524a:	b580      	push	{r7, lr}
 800524c:	b082      	sub	sp, #8
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005258:	2b01      	cmp	r3, #1
 800525a:	d101      	bne.n	8005260 <HAL_PCD_Start+0x16>
 800525c:	2302      	movs	r3, #2
 800525e:	e012      	b.n	8005286 <HAL_PCD_Start+0x3c>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4618      	mov	r0, r3
 800526e:	f005 fa8d 	bl	800a78c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4618      	mov	r0, r3
 8005278:	f007 fd4d 	bl	800cd16 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	3708      	adds	r7, #8
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}

0800528e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800528e:	b580      	push	{r7, lr}
 8005290:	b084      	sub	sp, #16
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4618      	mov	r0, r3
 800529c:	f007 fd52 	bl	800cd44 <USB_ReadInterrupts>
 80052a0:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d003      	beq.n	80052b4 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f000 fb04 	bl	80058ba <PCD_EP_ISR_Handler>

    return;
 80052b2:	e110      	b.n	80054d6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d013      	beq.n	80052e6 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80052c6:	b29a      	uxth	r2, r3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052d0:	b292      	uxth	r2, r2
 80052d2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f009 fcad 	bl	800ec36 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80052dc:	2100      	movs	r1, #0
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 f8fc 	bl	80054dc <HAL_PCD_SetAddress>

    return;
 80052e4:	e0f7      	b.n	80054d6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d00c      	beq.n	800530a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80052f8:	b29a      	uxth	r2, r3
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005302:	b292      	uxth	r2, r2
 8005304:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005308:	e0e5      	b.n	80054d6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005310:	2b00      	cmp	r3, #0
 8005312:	d00c      	beq.n	800532e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800531c:	b29a      	uxth	r2, r3
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005326:	b292      	uxth	r2, r2
 8005328:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800532c:	e0d3      	b.n	80054d6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005334:	2b00      	cmp	r3, #0
 8005336:	d034      	beq.n	80053a2 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005340:	b29a      	uxth	r2, r3
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f022 0204 	bic.w	r2, r2, #4
 800534a:	b292      	uxth	r2, r2
 800534c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005358:	b29a      	uxth	r2, r3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f022 0208 	bic.w	r2, r2, #8
 8005362:	b292      	uxth	r2, r2
 8005364:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800536e:	2b01      	cmp	r3, #1
 8005370:	d107      	bne.n	8005382 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800537a:	2100      	movs	r1, #0
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f009 fe4d 	bl	800f01c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f009 fc90 	bl	800eca8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005390:	b29a      	uxth	r2, r3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800539a:	b292      	uxth	r2, r2
 800539c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80053a0:	e099      	b.n	80054d6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d027      	beq.n	80053fc <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80053b4:	b29a      	uxth	r2, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f042 0208 	orr.w	r2, r2, #8
 80053be:	b292      	uxth	r2, r2
 80053c0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80053cc:	b29a      	uxth	r2, r3
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80053d6:	b292      	uxth	r2, r2
 80053d8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80053e4:	b29a      	uxth	r2, r3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f042 0204 	orr.w	r2, r2, #4
 80053ee:	b292      	uxth	r2, r2
 80053f0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f009 fc3d 	bl	800ec74 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80053fa:	e06c      	b.n	80054d6 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005402:	2b00      	cmp	r3, #0
 8005404:	d040      	beq.n	8005488 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800540e:	b29a      	uxth	r2, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005418:	b292      	uxth	r2, r2
 800541a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8005424:	2b00      	cmp	r3, #0
 8005426:	d12b      	bne.n	8005480 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005430:	b29a      	uxth	r2, r3
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f042 0204 	orr.w	r2, r2, #4
 800543a:	b292      	uxth	r2, r2
 800543c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005448:	b29a      	uxth	r2, r3
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f042 0208 	orr.w	r2, r2, #8
 8005452:	b292      	uxth	r2, r2
 8005454:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8005468:	b29b      	uxth	r3, r3
 800546a:	089b      	lsrs	r3, r3, #2
 800546c:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005476:	2101      	movs	r1, #1
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f009 fdcf 	bl	800f01c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800547e:	e02a      	b.n	80054d6 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f009 fbf7 	bl	800ec74 <HAL_PCD_SuspendCallback>
    return;
 8005486:	e026      	b.n	80054d6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00f      	beq.n	80054b2 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800549a:	b29a      	uxth	r2, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80054a4:	b292      	uxth	r2, r2
 80054a6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f009 fbb5 	bl	800ec1a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80054b0:	e011      	b.n	80054d6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d00c      	beq.n	80054d6 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80054c4:	b29a      	uxth	r2, r3
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80054ce:	b292      	uxth	r2, r2
 80054d0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80054d4:	bf00      	nop
  }
}
 80054d6:	3710      	adds	r7, #16
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}

080054dc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b082      	sub	sp, #8
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	460b      	mov	r3, r1
 80054e6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d101      	bne.n	80054f6 <HAL_PCD_SetAddress+0x1a>
 80054f2:	2302      	movs	r3, #2
 80054f4:	e012      	b.n	800551c <HAL_PCD_SetAddress+0x40>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2201      	movs	r2, #1
 80054fa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	78fa      	ldrb	r2, [r7, #3]
 8005502:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	78fa      	ldrb	r2, [r7, #3]
 800550a:	4611      	mov	r1, r2
 800550c:	4618      	mov	r0, r3
 800550e:	f007 fbee 	bl	800ccee <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800551a:	2300      	movs	r3, #0
}
 800551c:	4618      	mov	r0, r3
 800551e:	3708      	adds	r7, #8
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	4608      	mov	r0, r1
 800552e:	4611      	mov	r1, r2
 8005530:	461a      	mov	r2, r3
 8005532:	4603      	mov	r3, r0
 8005534:	70fb      	strb	r3, [r7, #3]
 8005536:	460b      	mov	r3, r1
 8005538:	803b      	strh	r3, [r7, #0]
 800553a:	4613      	mov	r3, r2
 800553c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800553e:	2300      	movs	r3, #0
 8005540:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005542:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005546:	2b00      	cmp	r3, #0
 8005548:	da0e      	bge.n	8005568 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800554a:	78fb      	ldrb	r3, [r7, #3]
 800554c:	f003 0207 	and.w	r2, r3, #7
 8005550:	4613      	mov	r3, r2
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	4413      	add	r3, r2
 8005556:	00db      	lsls	r3, r3, #3
 8005558:	3310      	adds	r3, #16
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	4413      	add	r3, r2
 800555e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2201      	movs	r2, #1
 8005564:	705a      	strb	r2, [r3, #1]
 8005566:	e00e      	b.n	8005586 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005568:	78fb      	ldrb	r3, [r7, #3]
 800556a:	f003 0207 	and.w	r2, r3, #7
 800556e:	4613      	mov	r3, r2
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	4413      	add	r3, r2
 8005574:	00db      	lsls	r3, r3, #3
 8005576:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	4413      	add	r3, r2
 800557e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2200      	movs	r2, #0
 8005584:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005586:	78fb      	ldrb	r3, [r7, #3]
 8005588:	f003 0307 	and.w	r3, r3, #7
 800558c:	b2da      	uxtb	r2, r3
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005592:	883a      	ldrh	r2, [r7, #0]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	78ba      	ldrb	r2, [r7, #2]
 800559c:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800559e:	78bb      	ldrb	r3, [r7, #2]
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	d102      	bne.n	80055aa <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2200      	movs	r2, #0
 80055a8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d101      	bne.n	80055b8 <HAL_PCD_EP_Open+0x94>
 80055b4:	2302      	movs	r3, #2
 80055b6:	e00e      	b.n	80055d6 <HAL_PCD_EP_Open+0xb2>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68f9      	ldr	r1, [r7, #12]
 80055c6:	4618      	mov	r0, r3
 80055c8:	f005 f930 	bl	800a82c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80055d4:	7afb      	ldrb	r3, [r7, #11]
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3710      	adds	r7, #16
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}

080055de <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80055de:	b580      	push	{r7, lr}
 80055e0:	b084      	sub	sp, #16
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]
 80055e6:	460b      	mov	r3, r1
 80055e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80055ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	da0e      	bge.n	8005610 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055f2:	78fb      	ldrb	r3, [r7, #3]
 80055f4:	f003 0207 	and.w	r2, r3, #7
 80055f8:	4613      	mov	r3, r2
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	4413      	add	r3, r2
 80055fe:	00db      	lsls	r3, r3, #3
 8005600:	3310      	adds	r3, #16
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	4413      	add	r3, r2
 8005606:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2201      	movs	r2, #1
 800560c:	705a      	strb	r2, [r3, #1]
 800560e:	e00e      	b.n	800562e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005610:	78fb      	ldrb	r3, [r7, #3]
 8005612:	f003 0207 	and.w	r2, r3, #7
 8005616:	4613      	mov	r3, r2
 8005618:	009b      	lsls	r3, r3, #2
 800561a:	4413      	add	r3, r2
 800561c:	00db      	lsls	r3, r3, #3
 800561e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	4413      	add	r3, r2
 8005626:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2200      	movs	r2, #0
 800562c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800562e:	78fb      	ldrb	r3, [r7, #3]
 8005630:	f003 0307 	and.w	r3, r3, #7
 8005634:	b2da      	uxtb	r2, r3
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005640:	2b01      	cmp	r3, #1
 8005642:	d101      	bne.n	8005648 <HAL_PCD_EP_Close+0x6a>
 8005644:	2302      	movs	r3, #2
 8005646:	e00e      	b.n	8005666 <HAL_PCD_EP_Close+0x88>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68f9      	ldr	r1, [r7, #12]
 8005656:	4618      	mov	r0, r3
 8005658:	f005 fcac 	bl	800afb4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	3710      	adds	r7, #16
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}

0800566e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800566e:	b580      	push	{r7, lr}
 8005670:	b086      	sub	sp, #24
 8005672:	af00      	add	r7, sp, #0
 8005674:	60f8      	str	r0, [r7, #12]
 8005676:	607a      	str	r2, [r7, #4]
 8005678:	603b      	str	r3, [r7, #0]
 800567a:	460b      	mov	r3, r1
 800567c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800567e:	7afb      	ldrb	r3, [r7, #11]
 8005680:	f003 0207 	and.w	r2, r3, #7
 8005684:	4613      	mov	r3, r2
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	4413      	add	r3, r2
 800568a:	00db      	lsls	r3, r3, #3
 800568c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005690:	68fa      	ldr	r2, [r7, #12]
 8005692:	4413      	add	r3, r2
 8005694:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	683a      	ldr	r2, [r7, #0]
 80056a0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	2200      	movs	r2, #0
 80056a6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	2200      	movs	r2, #0
 80056ac:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80056ae:	7afb      	ldrb	r3, [r7, #11]
 80056b0:	f003 0307 	and.w	r3, r3, #7
 80056b4:	b2da      	uxtb	r2, r3
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	6979      	ldr	r1, [r7, #20]
 80056c0:	4618      	mov	r0, r3
 80056c2:	f005 fe64 	bl	800b38e <USB_EPStartXfer>

  return HAL_OK;
 80056c6:	2300      	movs	r3, #0
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3718      	adds	r7, #24
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	460b      	mov	r3, r1
 80056da:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80056dc:	78fb      	ldrb	r3, [r7, #3]
 80056de:	f003 0207 	and.w	r2, r3, #7
 80056e2:	6879      	ldr	r1, [r7, #4]
 80056e4:	4613      	mov	r3, r2
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	4413      	add	r3, r2
 80056ea:	00db      	lsls	r3, r3, #3
 80056ec:	440b      	add	r3, r1
 80056ee:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80056f2:	681b      	ldr	r3, [r3, #0]
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b086      	sub	sp, #24
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	607a      	str	r2, [r7, #4]
 800570a:	603b      	str	r3, [r7, #0]
 800570c:	460b      	mov	r3, r1
 800570e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005710:	7afb      	ldrb	r3, [r7, #11]
 8005712:	f003 0207 	and.w	r2, r3, #7
 8005716:	4613      	mov	r3, r2
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	4413      	add	r3, r2
 800571c:	00db      	lsls	r3, r3, #3
 800571e:	3310      	adds	r3, #16
 8005720:	68fa      	ldr	r2, [r7, #12]
 8005722:	4413      	add	r3, r2
 8005724:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	683a      	ldr	r2, [r7, #0]
 8005730:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	2201      	movs	r2, #1
 8005736:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	683a      	ldr	r2, [r7, #0]
 800573e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	2200      	movs	r2, #0
 8005744:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	2201      	movs	r2, #1
 800574a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800574c:	7afb      	ldrb	r3, [r7, #11]
 800574e:	f003 0307 	and.w	r3, r3, #7
 8005752:	b2da      	uxtb	r2, r3
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	6979      	ldr	r1, [r7, #20]
 800575e:	4618      	mov	r0, r3
 8005760:	f005 fe15 	bl	800b38e <USB_EPStartXfer>

  return HAL_OK;
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	3718      	adds	r7, #24
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}

0800576e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800576e:	b580      	push	{r7, lr}
 8005770:	b084      	sub	sp, #16
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
 8005776:	460b      	mov	r3, r1
 8005778:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800577a:	78fb      	ldrb	r3, [r7, #3]
 800577c:	f003 0307 	and.w	r3, r3, #7
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	7912      	ldrb	r2, [r2, #4]
 8005784:	4293      	cmp	r3, r2
 8005786:	d901      	bls.n	800578c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	e03e      	b.n	800580a <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800578c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005790:	2b00      	cmp	r3, #0
 8005792:	da0e      	bge.n	80057b2 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005794:	78fb      	ldrb	r3, [r7, #3]
 8005796:	f003 0207 	and.w	r2, r3, #7
 800579a:	4613      	mov	r3, r2
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	4413      	add	r3, r2
 80057a0:	00db      	lsls	r3, r3, #3
 80057a2:	3310      	adds	r3, #16
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	4413      	add	r3, r2
 80057a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2201      	movs	r2, #1
 80057ae:	705a      	strb	r2, [r3, #1]
 80057b0:	e00c      	b.n	80057cc <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80057b2:	78fa      	ldrb	r2, [r7, #3]
 80057b4:	4613      	mov	r3, r2
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	4413      	add	r3, r2
 80057ba:	00db      	lsls	r3, r3, #3
 80057bc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	4413      	add	r3, r2
 80057c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2200      	movs	r2, #0
 80057ca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2201      	movs	r2, #1
 80057d0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80057d2:	78fb      	ldrb	r3, [r7, #3]
 80057d4:	f003 0307 	and.w	r3, r3, #7
 80057d8:	b2da      	uxtb	r2, r3
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d101      	bne.n	80057ec <HAL_PCD_EP_SetStall+0x7e>
 80057e8:	2302      	movs	r3, #2
 80057ea:	e00e      	b.n	800580a <HAL_PCD_EP_SetStall+0x9c>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68f9      	ldr	r1, [r7, #12]
 80057fa:	4618      	mov	r0, r3
 80057fc:	f007 f978 	bl	800caf0 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005808:	2300      	movs	r3, #0
}
 800580a:	4618      	mov	r0, r3
 800580c:	3710      	adds	r7, #16
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}

08005812 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005812:	b580      	push	{r7, lr}
 8005814:	b084      	sub	sp, #16
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
 800581a:	460b      	mov	r3, r1
 800581c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800581e:	78fb      	ldrb	r3, [r7, #3]
 8005820:	f003 030f 	and.w	r3, r3, #15
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	7912      	ldrb	r2, [r2, #4]
 8005828:	4293      	cmp	r3, r2
 800582a:	d901      	bls.n	8005830 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	e040      	b.n	80058b2 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005830:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005834:	2b00      	cmp	r3, #0
 8005836:	da0e      	bge.n	8005856 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005838:	78fb      	ldrb	r3, [r7, #3]
 800583a:	f003 0207 	and.w	r2, r3, #7
 800583e:	4613      	mov	r3, r2
 8005840:	009b      	lsls	r3, r3, #2
 8005842:	4413      	add	r3, r2
 8005844:	00db      	lsls	r3, r3, #3
 8005846:	3310      	adds	r3, #16
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	4413      	add	r3, r2
 800584c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2201      	movs	r2, #1
 8005852:	705a      	strb	r2, [r3, #1]
 8005854:	e00e      	b.n	8005874 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005856:	78fb      	ldrb	r3, [r7, #3]
 8005858:	f003 0207 	and.w	r2, r3, #7
 800585c:	4613      	mov	r3, r2
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	4413      	add	r3, r2
 8005862:	00db      	lsls	r3, r3, #3
 8005864:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	4413      	add	r3, r2
 800586c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2200      	movs	r2, #0
 8005872:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2200      	movs	r2, #0
 8005878:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800587a:	78fb      	ldrb	r3, [r7, #3]
 800587c:	f003 0307 	and.w	r3, r3, #7
 8005880:	b2da      	uxtb	r2, r3
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800588c:	2b01      	cmp	r3, #1
 800588e:	d101      	bne.n	8005894 <HAL_PCD_EP_ClrStall+0x82>
 8005890:	2302      	movs	r3, #2
 8005892:	e00e      	b.n	80058b2 <HAL_PCD_EP_ClrStall+0xa0>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68f9      	ldr	r1, [r7, #12]
 80058a2:	4618      	mov	r0, r3
 80058a4:	f007 f975 	bl	800cb92 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80058b0:	2300      	movs	r3, #0
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3710      	adds	r7, #16
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}

080058ba <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80058ba:	b580      	push	{r7, lr}
 80058bc:	b096      	sub	sp, #88	@ 0x58
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80058c2:	e3ad      	b.n	8006020 <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80058cc:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80058d0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	f003 030f 	and.w	r3, r3, #15
 80058da:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 80058de:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	f040 816f 	bne.w	8005bc6 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80058e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80058ec:	f003 0310 	and.w	r3, r3, #16
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d14c      	bne.n	800598e <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	881b      	ldrh	r3, [r3, #0]
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8005900:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005904:	81fb      	strh	r3, [r7, #14]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	89fb      	ldrh	r3, [r7, #14]
 800590c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005910:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005914:	b29b      	uxth	r3, r3
 8005916:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	3310      	adds	r3, #16
 800591c:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005926:	b29b      	uxth	r3, r3
 8005928:	461a      	mov	r2, r3
 800592a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	00db      	lsls	r3, r3, #3
 8005930:	4413      	add	r3, r2
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	6812      	ldr	r2, [r2, #0]
 8005936:	4413      	add	r3, r2
 8005938:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800593c:	881b      	ldrh	r3, [r3, #0]
 800593e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005942:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005944:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005946:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005948:	695a      	ldr	r2, [r3, #20]
 800594a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800594c:	69db      	ldr	r3, [r3, #28]
 800594e:	441a      	add	r2, r3
 8005950:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005952:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005954:	2100      	movs	r1, #0
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f009 f945 	bl	800ebe6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	7b1b      	ldrb	r3, [r3, #12]
 8005960:	b2db      	uxtb	r3, r3
 8005962:	2b00      	cmp	r3, #0
 8005964:	f000 835c 	beq.w	8006020 <PCD_EP_ISR_Handler+0x766>
 8005968:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800596a:	699b      	ldr	r3, [r3, #24]
 800596c:	2b00      	cmp	r3, #0
 800596e:	f040 8357 	bne.w	8006020 <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	7b1b      	ldrb	r3, [r3, #12]
 8005976:	b2db      	uxtb	r3, r3
 8005978:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800597c:	b2da      	uxtb	r2, r3
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	731a      	strb	r2, [r3, #12]
 800598c:	e348      	b.n	8006020 <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005994:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	881b      	ldrh	r3, [r3, #0]
 800599c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80059a0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80059a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d032      	beq.n	8005a12 <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	461a      	mov	r2, r3
 80059b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	00db      	lsls	r3, r3, #3
 80059be:	4413      	add	r3, r2
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	6812      	ldr	r2, [r2, #0]
 80059c4:	4413      	add	r3, r2
 80059c6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80059ca:	881b      	ldrh	r3, [r3, #0]
 80059cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80059d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059d2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6818      	ldr	r0, [r3, #0]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80059de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059e0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80059e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059e4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	f007 f9fe 	bl	800cde8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	881b      	ldrh	r3, [r3, #0]
 80059f2:	b29a      	uxth	r2, r3
 80059f4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80059f8:	4013      	ands	r3, r2
 80059fa:	823b      	strh	r3, [r7, #16]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	8a3a      	ldrh	r2, [r7, #16]
 8005a02:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005a06:	b292      	uxth	r2, r2
 8005a08:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f009 f8be 	bl	800eb8c <HAL_PCD_SetupStageCallback>
 8005a10:	e306      	b.n	8006020 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005a12:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	f280 8302 	bge.w	8006020 <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	881b      	ldrh	r3, [r3, #0]
 8005a22:	b29a      	uxth	r2, r3
 8005a24:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005a28:	4013      	ands	r3, r2
 8005a2a:	83fb      	strh	r3, [r7, #30]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	8bfa      	ldrh	r2, [r7, #30]
 8005a32:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005a36:	b292      	uxth	r2, r2
 8005a38:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	461a      	mov	r2, r3
 8005a46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	00db      	lsls	r3, r3, #3
 8005a4c:	4413      	add	r3, r2
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	6812      	ldr	r2, [r2, #0]
 8005a52:	4413      	add	r3, r2
 8005a54:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005a58:	881b      	ldrh	r3, [r3, #0]
 8005a5a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005a5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a60:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005a62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a64:	69db      	ldr	r3, [r3, #28]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d019      	beq.n	8005a9e <PCD_EP_ISR_Handler+0x1e4>
 8005a6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a6c:	695b      	ldr	r3, [r3, #20]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d015      	beq.n	8005a9e <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6818      	ldr	r0, [r3, #0]
 8005a76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a78:	6959      	ldr	r1, [r3, #20]
 8005a7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a7c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005a7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a80:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	f007 f9b0 	bl	800cde8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005a88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a8a:	695a      	ldr	r2, [r3, #20]
 8005a8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a8e:	69db      	ldr	r3, [r3, #28]
 8005a90:	441a      	add	r2, r3
 8005a92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a94:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005a96:	2100      	movs	r1, #0
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f009 f889 	bl	800ebb0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	881b      	ldrh	r3, [r3, #0]
 8005aa4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8005aa8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005aac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	f040 82b5 	bne.w	8006020 <PCD_EP_ISR_Handler+0x766>
 8005ab6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005aba:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005abe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005ac2:	f000 82ad 	beq.w	8006020 <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	61bb      	str	r3, [r7, #24]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	4413      	add	r3, r2
 8005adc:	61bb      	str	r3, [r7, #24]
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005ae4:	617b      	str	r3, [r7, #20]
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	881b      	ldrh	r3, [r3, #0]
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005af0:	b29a      	uxth	r2, r3
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	801a      	strh	r2, [r3, #0]
 8005af6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	2b3e      	cmp	r3, #62	@ 0x3e
 8005afc:	d91d      	bls.n	8005b3a <PCD_EP_ISR_Handler+0x280>
 8005afe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b00:	691b      	ldr	r3, [r3, #16]
 8005b02:	095b      	lsrs	r3, r3, #5
 8005b04:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	f003 031f 	and.w	r3, r3, #31
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d102      	bne.n	8005b18 <PCD_EP_ISR_Handler+0x25e>
 8005b12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b14:	3b01      	subs	r3, #1
 8005b16:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	881b      	ldrh	r3, [r3, #0]
 8005b1c:	b29a      	uxth	r2, r3
 8005b1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	029b      	lsls	r3, r3, #10
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	4313      	orrs	r3, r2
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b32:	b29a      	uxth	r2, r3
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	801a      	strh	r2, [r3, #0]
 8005b38:	e026      	b.n	8005b88 <PCD_EP_ISR_Handler+0x2ce>
 8005b3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d10a      	bne.n	8005b58 <PCD_EP_ISR_Handler+0x29e>
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	881b      	ldrh	r3, [r3, #0]
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b50:	b29a      	uxth	r2, r3
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	801a      	strh	r2, [r3, #0]
 8005b56:	e017      	b.n	8005b88 <PCD_EP_ISR_Handler+0x2ce>
 8005b58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b5a:	691b      	ldr	r3, [r3, #16]
 8005b5c:	085b      	lsrs	r3, r3, #1
 8005b5e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	f003 0301 	and.w	r3, r3, #1
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d002      	beq.n	8005b72 <PCD_EP_ISR_Handler+0x2b8>
 8005b6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b6e:	3301      	adds	r3, #1
 8005b70:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	881b      	ldrh	r3, [r3, #0]
 8005b76:	b29a      	uxth	r2, r3
 8005b78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	029b      	lsls	r3, r3, #10
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	4313      	orrs	r3, r2
 8005b82:	b29a      	uxth	r2, r3
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	881b      	ldrh	r3, [r3, #0]
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b98:	827b      	strh	r3, [r7, #18]
 8005b9a:	8a7b      	ldrh	r3, [r7, #18]
 8005b9c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005ba0:	827b      	strh	r3, [r7, #18]
 8005ba2:	8a7b      	ldrh	r3, [r7, #18]
 8005ba4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005ba8:	827b      	strh	r3, [r7, #18]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	8a7b      	ldrh	r3, [r7, #18]
 8005bb0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005bb4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bb8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	8013      	strh	r3, [r2, #0]
 8005bc4:	e22c      	b.n	8006020 <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	461a      	mov	r2, r3
 8005bcc:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	4413      	add	r3, r2
 8005bd4:	881b      	ldrh	r3, [r3, #0]
 8005bd6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005bda:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	f280 80f6 	bge.w	8005dd0 <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	461a      	mov	r2, r3
 8005bea:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	4413      	add	r3, r2
 8005bf2:	881b      	ldrh	r3, [r3, #0]
 8005bf4:	b29a      	uxth	r2, r3
 8005bf6:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	461a      	mov	r2, r3
 8005c06:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	4413      	add	r3, r2
 8005c0e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8005c12:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005c16:	b292      	uxth	r2, r2
 8005c18:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005c1a:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8005c1e:	4613      	mov	r3, r2
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	4413      	add	r3, r2
 8005c24:	00db      	lsls	r3, r3, #3
 8005c26:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005c30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c32:	7b1b      	ldrb	r3, [r3, #12]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d123      	bne.n	8005c80 <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	461a      	mov	r2, r3
 8005c44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	00db      	lsls	r3, r3, #3
 8005c4a:	4413      	add	r3, r2
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	6812      	ldr	r2, [r2, #0]
 8005c50:	4413      	add	r3, r2
 8005c52:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005c56:	881b      	ldrh	r3, [r3, #0]
 8005c58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c5c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8005c60:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	f000 808e 	beq.w	8005d86 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6818      	ldr	r0, [r3, #0]
 8005c6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c70:	6959      	ldr	r1, [r3, #20]
 8005c72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c74:	88da      	ldrh	r2, [r3, #6]
 8005c76:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005c7a:	f007 f8b5 	bl	800cde8 <USB_ReadPMA>
 8005c7e:	e082      	b.n	8005d86 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005c80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c82:	78db      	ldrb	r3, [r3, #3]
 8005c84:	2b02      	cmp	r3, #2
 8005c86:	d10a      	bne.n	8005c9e <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005c88:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f000 f9d3 	bl	800603c <HAL_PCD_EP_DB_Receive>
 8005c96:	4603      	mov	r3, r0
 8005c98:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8005c9c:	e073      	b.n	8005d86 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	4413      	add	r3, r2
 8005cac:	881b      	ldrh	r3, [r3, #0]
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cb8:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	441a      	add	r2, r3
 8005cca:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8005cce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005cd2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cda:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	4413      	add	r3, r2
 8005cf0:	881b      	ldrh	r3, [r3, #0]
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d022      	beq.n	8005d42 <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	461a      	mov	r2, r3
 8005d08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	00db      	lsls	r3, r3, #3
 8005d0e:	4413      	add	r3, r2
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	6812      	ldr	r2, [r2, #0]
 8005d14:	4413      	add	r3, r2
 8005d16:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005d1a:	881b      	ldrh	r3, [r3, #0]
 8005d1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d20:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8005d24:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d02c      	beq.n	8005d86 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6818      	ldr	r0, [r3, #0]
 8005d30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d32:	6959      	ldr	r1, [r3, #20]
 8005d34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d36:	891a      	ldrh	r2, [r3, #8]
 8005d38:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005d3c:	f007 f854 	bl	800cde8 <USB_ReadPMA>
 8005d40:	e021      	b.n	8005d86 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	00db      	lsls	r3, r3, #3
 8005d54:	4413      	add	r3, r2
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	6812      	ldr	r2, [r2, #0]
 8005d5a:	4413      	add	r3, r2
 8005d5c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005d60:	881b      	ldrh	r3, [r3, #0]
 8005d62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d66:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8005d6a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d009      	beq.n	8005d86 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6818      	ldr	r0, [r3, #0]
 8005d76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d78:	6959      	ldr	r1, [r3, #20]
 8005d7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d7c:	895a      	ldrh	r2, [r3, #10]
 8005d7e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005d82:	f007 f831 	bl	800cde8 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005d86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d88:	69da      	ldr	r2, [r3, #28]
 8005d8a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005d8e:	441a      	add	r2, r3
 8005d90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d92:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005d94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d96:	695a      	ldr	r2, [r3, #20]
 8005d98:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005d9c:	441a      	add	r2, r3
 8005d9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005da0:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005da2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005da4:	699b      	ldr	r3, [r3, #24]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d005      	beq.n	8005db6 <PCD_EP_ISR_Handler+0x4fc>
 8005daa:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8005dae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d206      	bcs.n	8005dc4 <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005db6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	4619      	mov	r1, r3
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f008 fef7 	bl	800ebb0 <HAL_PCD_DataOutStageCallback>
 8005dc2:	e005      	b.n	8005dd0 <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f005 fadf 	bl	800b38e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005dd0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005dd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	f000 8121 	beq.w	8006020 <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 8005dde:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8005de2:	4613      	mov	r3, r2
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	4413      	add	r3, r2
 8005de8:	00db      	lsls	r3, r3, #3
 8005dea:	3310      	adds	r3, #16
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	4413      	add	r3, r2
 8005df0:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	461a      	mov	r2, r3
 8005df8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005dfc:	009b      	lsls	r3, r3, #2
 8005dfe:	4413      	add	r3, r2
 8005e00:	881b      	ldrh	r3, [r3, #0]
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8005e08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e0c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	461a      	mov	r2, r3
 8005e16:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	441a      	add	r2, r3
 8005e1e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005e22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8005e2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e30:	78db      	ldrb	r3, [r3, #3]
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	f040 80a2 	bne.w	8005f7c <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 8005e38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8005e3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e40:	7b1b      	ldrb	r3, [r3, #12]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	f000 8093 	beq.w	8005f6e <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005e48:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005e4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d046      	beq.n	8005ee2 <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005e54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e56:	785b      	ldrb	r3, [r3, #1]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d126      	bne.n	8005eaa <PCD_EP_ISR_Handler+0x5f0>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e70:	4413      	add	r3, r2
 8005e72:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	00da      	lsls	r2, r3, #3
 8005e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e7c:	4413      	add	r3, r2
 8005e7e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005e82:	623b      	str	r3, [r7, #32]
 8005e84:	6a3b      	ldr	r3, [r7, #32]
 8005e86:	881b      	ldrh	r3, [r3, #0]
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e8e:	b29a      	uxth	r2, r3
 8005e90:	6a3b      	ldr	r3, [r7, #32]
 8005e92:	801a      	strh	r2, [r3, #0]
 8005e94:	6a3b      	ldr	r3, [r7, #32]
 8005e96:	881b      	ldrh	r3, [r3, #0]
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ea2:	b29a      	uxth	r2, r3
 8005ea4:	6a3b      	ldr	r3, [r7, #32]
 8005ea6:	801a      	strh	r2, [r3, #0]
 8005ea8:	e061      	b.n	8005f6e <PCD_EP_ISR_Handler+0x6b4>
 8005eaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005eac:	785b      	ldrb	r3, [r3, #1]
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d15d      	bne.n	8005f6e <PCD_EP_ISR_Handler+0x6b4>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ec6:	4413      	add	r3, r2
 8005ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005eca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	00da      	lsls	r2, r3, #3
 8005ed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ed2:	4413      	add	r3, r2
 8005ed4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005ed8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005edc:	2200      	movs	r2, #0
 8005ede:	801a      	strh	r2, [r3, #0]
 8005ee0:	e045      	b.n	8005f6e <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ee8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005eea:	785b      	ldrb	r3, [r3, #1]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d126      	bne.n	8005f3e <PCD_EP_ISR_Handler+0x684>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	461a      	mov	r2, r3
 8005f02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f04:	4413      	add	r3, r2
 8005f06:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	00da      	lsls	r2, r3, #3
 8005f0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f10:	4413      	add	r3, r2
 8005f12:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005f16:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f1a:	881b      	ldrh	r3, [r3, #0]
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f22:	b29a      	uxth	r2, r3
 8005f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f26:	801a      	strh	r2, [r3, #0]
 8005f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f2a:	881b      	ldrh	r3, [r3, #0]
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f36:	b29a      	uxth	r2, r3
 8005f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f3a:	801a      	strh	r2, [r3, #0]
 8005f3c:	e017      	b.n	8005f6e <PCD_EP_ISR_Handler+0x6b4>
 8005f3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f40:	785b      	ldrb	r3, [r3, #1]
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d113      	bne.n	8005f6e <PCD_EP_ISR_Handler+0x6b4>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	461a      	mov	r2, r3
 8005f52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f54:	4413      	add	r3, r2
 8005f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	00da      	lsls	r2, r3, #3
 8005f5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f60:	4413      	add	r3, r2
 8005f62:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005f66:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005f6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f70:	781b      	ldrb	r3, [r3, #0]
 8005f72:	4619      	mov	r1, r3
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f008 fe36 	bl	800ebe6 <HAL_PCD_DataInStageCallback>
 8005f7a:	e051      	b.n	8006020 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8005f7c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005f80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d144      	bne.n	8006012 <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	461a      	mov	r2, r3
 8005f94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	00db      	lsls	r3, r3, #3
 8005f9a:	4413      	add	r3, r2
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	6812      	ldr	r2, [r2, #0]
 8005fa0:	4413      	add	r3, r2
 8005fa2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005fa6:	881b      	ldrh	r3, [r3, #0]
 8005fa8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fac:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8005fb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fb2:	699a      	ldr	r2, [r3, #24]
 8005fb4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d907      	bls.n	8005fcc <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 8005fbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fbe:	699a      	ldr	r2, [r3, #24]
 8005fc0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005fc4:	1ad2      	subs	r2, r2, r3
 8005fc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fc8:	619a      	str	r2, [r3, #24]
 8005fca:	e002      	b.n	8005fd2 <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 8005fcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fce:	2200      	movs	r2, #0
 8005fd0:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8005fd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fd4:	699b      	ldr	r3, [r3, #24]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d106      	bne.n	8005fe8 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005fda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	4619      	mov	r1, r3
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f008 fe00 	bl	800ebe6 <HAL_PCD_DataInStageCallback>
 8005fe6:	e01b      	b.n	8006020 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8005fe8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fea:	695a      	ldr	r2, [r3, #20]
 8005fec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005ff0:	441a      	add	r2, r3
 8005ff2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ff4:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8005ff6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ff8:	69da      	ldr	r2, [r3, #28]
 8005ffa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005ffe:	441a      	add	r2, r3
 8006000:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006002:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800600a:	4618      	mov	r0, r3
 800600c:	f005 f9bf 	bl	800b38e <USB_EPStartXfer>
 8006010:	e006      	b.n	8006020 <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8006012:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006016:	461a      	mov	r2, r3
 8006018:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 f917 	bl	800624e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006028:	b29b      	uxth	r3, r3
 800602a:	b21b      	sxth	r3, r3
 800602c:	2b00      	cmp	r3, #0
 800602e:	f6ff ac49 	blt.w	80058c4 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	3758      	adds	r7, #88	@ 0x58
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b088      	sub	sp, #32
 8006040:	af00      	add	r7, sp, #0
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	4613      	mov	r3, r2
 8006048:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800604a:	88fb      	ldrh	r3, [r7, #6]
 800604c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006050:	2b00      	cmp	r3, #0
 8006052:	d07c      	beq.n	800614e <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800605c:	b29b      	uxth	r3, r3
 800605e:	461a      	mov	r2, r3
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	00db      	lsls	r3, r3, #3
 8006066:	4413      	add	r3, r2
 8006068:	68fa      	ldr	r2, [r7, #12]
 800606a:	6812      	ldr	r2, [r2, #0]
 800606c:	4413      	add	r3, r2
 800606e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006072:	881b      	ldrh	r3, [r3, #0]
 8006074:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006078:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	699a      	ldr	r2, [r3, #24]
 800607e:	8b7b      	ldrh	r3, [r7, #26]
 8006080:	429a      	cmp	r2, r3
 8006082:	d306      	bcc.n	8006092 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	699a      	ldr	r2, [r3, #24]
 8006088:	8b7b      	ldrh	r3, [r7, #26]
 800608a:	1ad2      	subs	r2, r2, r3
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	619a      	str	r2, [r3, #24]
 8006090:	e002      	b.n	8006098 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	2200      	movs	r2, #0
 8006096:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	699b      	ldr	r3, [r3, #24]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d123      	bne.n	80060e8 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	461a      	mov	r2, r3
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	781b      	ldrb	r3, [r3, #0]
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	4413      	add	r3, r2
 80060ae:	881b      	ldrh	r3, [r3, #0]
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80060b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060ba:	833b      	strh	r3, [r7, #24]
 80060bc:	8b3b      	ldrh	r3, [r7, #24]
 80060be:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80060c2:	833b      	strh	r3, [r7, #24]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	461a      	mov	r2, r3
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	441a      	add	r2, r3
 80060d2:	8b3b      	ldrh	r3, [r7, #24]
 80060d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80060e8:	88fb      	ldrh	r3, [r7, #6]
 80060ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d01f      	beq.n	8006132 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	461a      	mov	r2, r3
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	4413      	add	r3, r2
 8006100:	881b      	ldrh	r3, [r3, #0]
 8006102:	b29b      	uxth	r3, r3
 8006104:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006108:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800610c:	82fb      	strh	r3, [r7, #22]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	461a      	mov	r2, r3
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	441a      	add	r2, r3
 800611c:	8afb      	ldrh	r3, [r7, #22]
 800611e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006122:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006126:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800612a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800612e:	b29b      	uxth	r3, r3
 8006130:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006132:	8b7b      	ldrh	r3, [r7, #26]
 8006134:	2b00      	cmp	r3, #0
 8006136:	f000 8085 	beq.w	8006244 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	6818      	ldr	r0, [r3, #0]
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	6959      	ldr	r1, [r3, #20]
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	891a      	ldrh	r2, [r3, #8]
 8006146:	8b7b      	ldrh	r3, [r7, #26]
 8006148:	f006 fe4e 	bl	800cde8 <USB_ReadPMA>
 800614c:	e07a      	b.n	8006244 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006156:	b29b      	uxth	r3, r3
 8006158:	461a      	mov	r2, r3
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	00db      	lsls	r3, r3, #3
 8006160:	4413      	add	r3, r2
 8006162:	68fa      	ldr	r2, [r7, #12]
 8006164:	6812      	ldr	r2, [r2, #0]
 8006166:	4413      	add	r3, r2
 8006168:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800616c:	881b      	ldrh	r3, [r3, #0]
 800616e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006172:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	699a      	ldr	r2, [r3, #24]
 8006178:	8b7b      	ldrh	r3, [r7, #26]
 800617a:	429a      	cmp	r2, r3
 800617c:	d306      	bcc.n	800618c <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	699a      	ldr	r2, [r3, #24]
 8006182:	8b7b      	ldrh	r3, [r7, #26]
 8006184:	1ad2      	subs	r2, r2, r3
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	619a      	str	r2, [r3, #24]
 800618a:	e002      	b.n	8006192 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	2200      	movs	r2, #0
 8006190:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	699b      	ldr	r3, [r3, #24]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d123      	bne.n	80061e2 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	461a      	mov	r2, r3
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	4413      	add	r3, r2
 80061a8:	881b      	ldrh	r3, [r3, #0]
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80061b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061b4:	83fb      	strh	r3, [r7, #30]
 80061b6:	8bfb      	ldrh	r3, [r7, #30]
 80061b8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80061bc:	83fb      	strh	r3, [r7, #30]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	461a      	mov	r2, r3
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	441a      	add	r2, r3
 80061cc:	8bfb      	ldrh	r3, [r7, #30]
 80061ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061de:	b29b      	uxth	r3, r3
 80061e0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80061e2:	88fb      	ldrh	r3, [r7, #6]
 80061e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d11f      	bne.n	800622c <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	461a      	mov	r2, r3
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	4413      	add	r3, r2
 80061fa:	881b      	ldrh	r3, [r3, #0]
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006202:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006206:	83bb      	strh	r3, [r7, #28]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	461a      	mov	r2, r3
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	441a      	add	r2, r3
 8006216:	8bbb      	ldrh	r3, [r7, #28]
 8006218:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800621c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006220:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006224:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006228:	b29b      	uxth	r3, r3
 800622a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800622c:	8b7b      	ldrh	r3, [r7, #26]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d008      	beq.n	8006244 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	6818      	ldr	r0, [r3, #0]
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	6959      	ldr	r1, [r3, #20]
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	895a      	ldrh	r2, [r3, #10]
 800623e:	8b7b      	ldrh	r3, [r7, #26]
 8006240:	f006 fdd2 	bl	800cde8 <USB_ReadPMA>
    }
  }

  return count;
 8006244:	8b7b      	ldrh	r3, [r7, #26]
}
 8006246:	4618      	mov	r0, r3
 8006248:	3720      	adds	r7, #32
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}

0800624e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800624e:	b580      	push	{r7, lr}
 8006250:	b0a4      	sub	sp, #144	@ 0x90
 8006252:	af00      	add	r7, sp, #0
 8006254:	60f8      	str	r0, [r7, #12]
 8006256:	60b9      	str	r1, [r7, #8]
 8006258:	4613      	mov	r3, r2
 800625a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800625c:	88fb      	ldrh	r3, [r7, #6]
 800625e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006262:	2b00      	cmp	r3, #0
 8006264:	f000 81db 	beq.w	800661e <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006270:	b29b      	uxth	r3, r3
 8006272:	461a      	mov	r2, r3
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	00db      	lsls	r3, r3, #3
 800627a:	4413      	add	r3, r2
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	6812      	ldr	r2, [r2, #0]
 8006280:	4413      	add	r3, r2
 8006282:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006286:	881b      	ldrh	r3, [r3, #0]
 8006288:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800628c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	699a      	ldr	r2, [r3, #24]
 8006294:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006298:	429a      	cmp	r2, r3
 800629a:	d907      	bls.n	80062ac <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	699a      	ldr	r2, [r3, #24]
 80062a0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80062a4:	1ad2      	subs	r2, r2, r3
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	619a      	str	r2, [r3, #24]
 80062aa:	e002      	b.n	80062b2 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	2200      	movs	r2, #0
 80062b0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	699b      	ldr	r3, [r3, #24]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	f040 80b9 	bne.w	800642e <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	785b      	ldrb	r3, [r3, #1]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d126      	bne.n	8006312 <HAL_PCD_EP_DB_Transmit+0xc4>
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	461a      	mov	r2, r3
 80062d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062d8:	4413      	add	r3, r2
 80062da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	00da      	lsls	r2, r3, #3
 80062e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062e4:	4413      	add	r3, r2
 80062e6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80062ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ee:	881b      	ldrh	r3, [r3, #0]
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062f6:	b29a      	uxth	r2, r3
 80062f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062fa:	801a      	strh	r2, [r3, #0]
 80062fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062fe:	881b      	ldrh	r3, [r3, #0]
 8006300:	b29b      	uxth	r3, r3
 8006302:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006306:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800630a:	b29a      	uxth	r2, r3
 800630c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800630e:	801a      	strh	r2, [r3, #0]
 8006310:	e01a      	b.n	8006348 <HAL_PCD_EP_DB_Transmit+0xfa>
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	785b      	ldrb	r3, [r3, #1]
 8006316:	2b01      	cmp	r3, #1
 8006318:	d116      	bne.n	8006348 <HAL_PCD_EP_DB_Transmit+0xfa>
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006328:	b29b      	uxth	r3, r3
 800632a:	461a      	mov	r2, r3
 800632c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800632e:	4413      	add	r3, r2
 8006330:	637b      	str	r3, [r7, #52]	@ 0x34
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	00da      	lsls	r2, r3, #3
 8006338:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800633a:	4413      	add	r3, r2
 800633c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006340:	633b      	str	r3, [r7, #48]	@ 0x30
 8006342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006344:	2200      	movs	r2, #0
 8006346:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	627b      	str	r3, [r7, #36]	@ 0x24
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	785b      	ldrb	r3, [r3, #1]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d126      	bne.n	80063a4 <HAL_PCD_EP_DB_Transmit+0x156>
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	61fb      	str	r3, [r7, #28]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006364:	b29b      	uxth	r3, r3
 8006366:	461a      	mov	r2, r3
 8006368:	69fb      	ldr	r3, [r7, #28]
 800636a:	4413      	add	r3, r2
 800636c:	61fb      	str	r3, [r7, #28]
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	00da      	lsls	r2, r3, #3
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	4413      	add	r3, r2
 8006378:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800637c:	61bb      	str	r3, [r7, #24]
 800637e:	69bb      	ldr	r3, [r7, #24]
 8006380:	881b      	ldrh	r3, [r3, #0]
 8006382:	b29b      	uxth	r3, r3
 8006384:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006388:	b29a      	uxth	r2, r3
 800638a:	69bb      	ldr	r3, [r7, #24]
 800638c:	801a      	strh	r2, [r3, #0]
 800638e:	69bb      	ldr	r3, [r7, #24]
 8006390:	881b      	ldrh	r3, [r3, #0]
 8006392:	b29b      	uxth	r3, r3
 8006394:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006398:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800639c:	b29a      	uxth	r2, r3
 800639e:	69bb      	ldr	r3, [r7, #24]
 80063a0:	801a      	strh	r2, [r3, #0]
 80063a2:	e017      	b.n	80063d4 <HAL_PCD_EP_DB_Transmit+0x186>
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	785b      	ldrb	r3, [r3, #1]
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d113      	bne.n	80063d4 <HAL_PCD_EP_DB_Transmit+0x186>
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	461a      	mov	r2, r3
 80063b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ba:	4413      	add	r3, r2
 80063bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	00da      	lsls	r2, r3, #3
 80063c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c6:	4413      	add	r3, r2
 80063c8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80063cc:	623b      	str	r3, [r7, #32]
 80063ce:	6a3b      	ldr	r3, [r7, #32]
 80063d0:	2200      	movs	r2, #0
 80063d2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	4619      	mov	r1, r3
 80063da:	68f8      	ldr	r0, [r7, #12]
 80063dc:	f008 fc03 	bl	800ebe6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80063e0:	88fb      	ldrh	r3, [r7, #6]
 80063e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	f000 82fa 	beq.w	80069e0 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	461a      	mov	r2, r3
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	4413      	add	r3, r2
 80063fa:	881b      	ldrh	r3, [r3, #0]
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006402:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006406:	82fb      	strh	r3, [r7, #22]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	461a      	mov	r2, r3
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	441a      	add	r2, r3
 8006416:	8afb      	ldrh	r3, [r7, #22]
 8006418:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800641c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006420:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006424:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006428:	b29b      	uxth	r3, r3
 800642a:	8013      	strh	r3, [r2, #0]
 800642c:	e2d8      	b.n	80069e0 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800642e:	88fb      	ldrh	r3, [r7, #6]
 8006430:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006434:	2b00      	cmp	r3, #0
 8006436:	d021      	beq.n	800647c <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	461a      	mov	r2, r3
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	4413      	add	r3, r2
 8006446:	881b      	ldrh	r3, [r3, #0]
 8006448:	b29b      	uxth	r3, r3
 800644a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800644e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006452:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	461a      	mov	r2, r3
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	009b      	lsls	r3, r3, #2
 8006462:	441a      	add	r2, r3
 8006464:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006468:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800646c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006470:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006474:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006478:	b29b      	uxth	r3, r3
 800647a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006482:	2b01      	cmp	r3, #1
 8006484:	f040 82ac 	bne.w	80069e0 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	695a      	ldr	r2, [r3, #20]
 800648c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006490:	441a      	add	r2, r3
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	69da      	ldr	r2, [r3, #28]
 800649a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800649e:	441a      	add	r2, r3
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	6a1a      	ldr	r2, [r3, #32]
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	691b      	ldr	r3, [r3, #16]
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d30b      	bcc.n	80064c8 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	691b      	ldr	r3, [r3, #16]
 80064b4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	6a1a      	ldr	r2, [r3, #32]
 80064bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80064c0:	1ad2      	subs	r2, r2, r3
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	621a      	str	r2, [r3, #32]
 80064c6:	e017      	b.n	80064f8 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	6a1b      	ldr	r3, [r3, #32]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d108      	bne.n	80064e2 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 80064d0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80064d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	2200      	movs	r2, #0
 80064dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80064e0:	e00a      	b.n	80064f8 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	6a1b      	ldr	r3, [r3, #32]
 80064ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	2200      	movs	r2, #0
 80064f6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	785b      	ldrb	r3, [r3, #1]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d165      	bne.n	80065cc <HAL_PCD_EP_DB_Transmit+0x37e>
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800650e:	b29b      	uxth	r3, r3
 8006510:	461a      	mov	r2, r3
 8006512:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006514:	4413      	add	r3, r2
 8006516:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	00da      	lsls	r2, r3, #3
 800651e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006520:	4413      	add	r3, r2
 8006522:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006526:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800652a:	881b      	ldrh	r3, [r3, #0]
 800652c:	b29b      	uxth	r3, r3
 800652e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006532:	b29a      	uxth	r2, r3
 8006534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006536:	801a      	strh	r2, [r3, #0]
 8006538:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800653c:	2b3e      	cmp	r3, #62	@ 0x3e
 800653e:	d91d      	bls.n	800657c <HAL_PCD_EP_DB_Transmit+0x32e>
 8006540:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006544:	095b      	lsrs	r3, r3, #5
 8006546:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006548:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800654c:	f003 031f 	and.w	r3, r3, #31
 8006550:	2b00      	cmp	r3, #0
 8006552:	d102      	bne.n	800655a <HAL_PCD_EP_DB_Transmit+0x30c>
 8006554:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006556:	3b01      	subs	r3, #1
 8006558:	64bb      	str	r3, [r7, #72]	@ 0x48
 800655a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800655c:	881b      	ldrh	r3, [r3, #0]
 800655e:	b29a      	uxth	r2, r3
 8006560:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006562:	b29b      	uxth	r3, r3
 8006564:	029b      	lsls	r3, r3, #10
 8006566:	b29b      	uxth	r3, r3
 8006568:	4313      	orrs	r3, r2
 800656a:	b29b      	uxth	r3, r3
 800656c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006570:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006574:	b29a      	uxth	r2, r3
 8006576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006578:	801a      	strh	r2, [r3, #0]
 800657a:	e044      	b.n	8006606 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800657c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006580:	2b00      	cmp	r3, #0
 8006582:	d10a      	bne.n	800659a <HAL_PCD_EP_DB_Transmit+0x34c>
 8006584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006586:	881b      	ldrh	r3, [r3, #0]
 8006588:	b29b      	uxth	r3, r3
 800658a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800658e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006592:	b29a      	uxth	r2, r3
 8006594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006596:	801a      	strh	r2, [r3, #0]
 8006598:	e035      	b.n	8006606 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800659a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800659e:	085b      	lsrs	r3, r3, #1
 80065a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80065a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80065a6:	f003 0301 	and.w	r3, r3, #1
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d002      	beq.n	80065b4 <HAL_PCD_EP_DB_Transmit+0x366>
 80065ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065b0:	3301      	adds	r3, #1
 80065b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80065b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065b6:	881b      	ldrh	r3, [r3, #0]
 80065b8:	b29a      	uxth	r2, r3
 80065ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065bc:	b29b      	uxth	r3, r3
 80065be:	029b      	lsls	r3, r3, #10
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	4313      	orrs	r3, r2
 80065c4:	b29a      	uxth	r2, r3
 80065c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065c8:	801a      	strh	r2, [r3, #0]
 80065ca:	e01c      	b.n	8006606 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	785b      	ldrb	r3, [r3, #1]
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d118      	bne.n	8006606 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	461a      	mov	r2, r3
 80065e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065e8:	4413      	add	r3, r2
 80065ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	00da      	lsls	r2, r3, #3
 80065f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065f4:	4413      	add	r3, r2
 80065f6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80065fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80065fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006600:	b29a      	uxth	r2, r3
 8006602:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006604:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6818      	ldr	r0, [r3, #0]
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	6959      	ldr	r1, [r3, #20]
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	891a      	ldrh	r2, [r3, #8]
 8006612:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006616:	b29b      	uxth	r3, r3
 8006618:	f006 fba4 	bl	800cd64 <USB_WritePMA>
 800661c:	e1e0      	b.n	80069e0 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006626:	b29b      	uxth	r3, r3
 8006628:	461a      	mov	r2, r3
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	00db      	lsls	r3, r3, #3
 8006630:	4413      	add	r3, r2
 8006632:	68fa      	ldr	r2, [r7, #12]
 8006634:	6812      	ldr	r2, [r2, #0]
 8006636:	4413      	add	r3, r2
 8006638:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800663c:	881b      	ldrh	r3, [r3, #0]
 800663e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006642:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	699a      	ldr	r2, [r3, #24]
 800664a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800664e:	429a      	cmp	r2, r3
 8006650:	d307      	bcc.n	8006662 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	699a      	ldr	r2, [r3, #24]
 8006656:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800665a:	1ad2      	subs	r2, r2, r3
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	619a      	str	r2, [r3, #24]
 8006660:	e002      	b.n	8006668 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	2200      	movs	r2, #0
 8006666:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	699b      	ldr	r3, [r3, #24]
 800666c:	2b00      	cmp	r3, #0
 800666e:	f040 80c0 	bne.w	80067f2 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	785b      	ldrb	r3, [r3, #1]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d126      	bne.n	80066c8 <HAL_PCD_EP_DB_Transmit+0x47a>
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006688:	b29b      	uxth	r3, r3
 800668a:	461a      	mov	r2, r3
 800668c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800668e:	4413      	add	r3, r2
 8006690:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	00da      	lsls	r2, r3, #3
 8006698:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800669a:	4413      	add	r3, r2
 800669c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80066a0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80066a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80066a4:	881b      	ldrh	r3, [r3, #0]
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066ac:	b29a      	uxth	r2, r3
 80066ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80066b0:	801a      	strh	r2, [r3, #0]
 80066b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80066b4:	881b      	ldrh	r3, [r3, #0]
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066c0:	b29a      	uxth	r2, r3
 80066c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80066c4:	801a      	strh	r2, [r3, #0]
 80066c6:	e01a      	b.n	80066fe <HAL_PCD_EP_DB_Transmit+0x4b0>
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	785b      	ldrb	r3, [r3, #1]
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d116      	bne.n	80066fe <HAL_PCD_EP_DB_Transmit+0x4b0>
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	667b      	str	r3, [r7, #100]	@ 0x64
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066de:	b29b      	uxth	r3, r3
 80066e0:	461a      	mov	r2, r3
 80066e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80066e4:	4413      	add	r3, r2
 80066e6:	667b      	str	r3, [r7, #100]	@ 0x64
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	00da      	lsls	r2, r3, #3
 80066ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80066f0:	4413      	add	r3, r2
 80066f2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80066f6:	663b      	str	r3, [r7, #96]	@ 0x60
 80066f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80066fa:	2200      	movs	r2, #0
 80066fc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	677b      	str	r3, [r7, #116]	@ 0x74
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	785b      	ldrb	r3, [r3, #1]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d12b      	bne.n	8006764 <HAL_PCD_EP_DB_Transmit+0x516>
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800671a:	b29b      	uxth	r3, r3
 800671c:	461a      	mov	r2, r3
 800671e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006720:	4413      	add	r3, r2
 8006722:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	00da      	lsls	r2, r3, #3
 800672a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800672c:	4413      	add	r3, r2
 800672e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006732:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006736:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800673a:	881b      	ldrh	r3, [r3, #0]
 800673c:	b29b      	uxth	r3, r3
 800673e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006742:	b29a      	uxth	r2, r3
 8006744:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006748:	801a      	strh	r2, [r3, #0]
 800674a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800674e:	881b      	ldrh	r3, [r3, #0]
 8006750:	b29b      	uxth	r3, r3
 8006752:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006756:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800675a:	b29a      	uxth	r2, r3
 800675c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006760:	801a      	strh	r2, [r3, #0]
 8006762:	e017      	b.n	8006794 <HAL_PCD_EP_DB_Transmit+0x546>
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	785b      	ldrb	r3, [r3, #1]
 8006768:	2b01      	cmp	r3, #1
 800676a:	d113      	bne.n	8006794 <HAL_PCD_EP_DB_Transmit+0x546>
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006774:	b29b      	uxth	r3, r3
 8006776:	461a      	mov	r2, r3
 8006778:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800677a:	4413      	add	r3, r2
 800677c:	677b      	str	r3, [r7, #116]	@ 0x74
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	00da      	lsls	r2, r3, #3
 8006784:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006786:	4413      	add	r3, r2
 8006788:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800678c:	673b      	str	r3, [r7, #112]	@ 0x70
 800678e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006790:	2200      	movs	r2, #0
 8006792:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	4619      	mov	r1, r3
 800679a:	68f8      	ldr	r0, [r7, #12]
 800679c:	f008 fa23 	bl	800ebe6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80067a0:	88fb      	ldrh	r3, [r7, #6]
 80067a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	f040 811a 	bne.w	80069e0 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	461a      	mov	r2, r3
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	4413      	add	r3, r2
 80067ba:	881b      	ldrh	r3, [r3, #0]
 80067bc:	b29b      	uxth	r3, r3
 80067be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067c6:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	461a      	mov	r2, r3
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	009b      	lsls	r3, r3, #2
 80067d6:	441a      	add	r2, r3
 80067d8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80067dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80067e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	8013      	strh	r3, [r2, #0]
 80067f0:	e0f6      	b.n	80069e0 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80067f2:	88fb      	ldrh	r3, [r7, #6]
 80067f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d121      	bne.n	8006840 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	461a      	mov	r2, r3
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	4413      	add	r3, r2
 800680a:	881b      	ldrh	r3, [r3, #0]
 800680c:	b29b      	uxth	r3, r3
 800680e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006812:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006816:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	461a      	mov	r2, r3
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	441a      	add	r2, r3
 8006828:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800682c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006830:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006834:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006838:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800683c:	b29b      	uxth	r3, r3
 800683e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006846:	2b01      	cmp	r3, #1
 8006848:	f040 80ca 	bne.w	80069e0 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	695a      	ldr	r2, [r3, #20]
 8006850:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006854:	441a      	add	r2, r3
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	69da      	ldr	r2, [r3, #28]
 800685e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006862:	441a      	add	r2, r3
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	6a1a      	ldr	r2, [r3, #32]
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	691b      	ldr	r3, [r3, #16]
 8006870:	429a      	cmp	r2, r3
 8006872:	d30b      	bcc.n	800688c <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	691b      	ldr	r3, [r3, #16]
 8006878:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	6a1a      	ldr	r2, [r3, #32]
 8006880:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006884:	1ad2      	subs	r2, r2, r3
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	621a      	str	r2, [r3, #32]
 800688a:	e017      	b.n	80068bc <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	6a1b      	ldr	r3, [r3, #32]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d108      	bne.n	80068a6 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8006894:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006898:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	2200      	movs	r2, #0
 80068a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80068a4:	e00a      	b.n	80068bc <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	6a1b      	ldr	r3, [r3, #32]
 80068aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	2200      	movs	r2, #0
 80068b2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	657b      	str	r3, [r7, #84]	@ 0x54
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	785b      	ldrb	r3, [r3, #1]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d165      	bne.n	8006996 <HAL_PCD_EP_DB_Transmit+0x748>
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80068d8:	b29b      	uxth	r3, r3
 80068da:	461a      	mov	r2, r3
 80068dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80068de:	4413      	add	r3, r2
 80068e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	00da      	lsls	r2, r3, #3
 80068e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80068ea:	4413      	add	r3, r2
 80068ec:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80068f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80068f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80068f4:	881b      	ldrh	r3, [r3, #0]
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068fc:	b29a      	uxth	r2, r3
 80068fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006900:	801a      	strh	r2, [r3, #0]
 8006902:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006906:	2b3e      	cmp	r3, #62	@ 0x3e
 8006908:	d91d      	bls.n	8006946 <HAL_PCD_EP_DB_Transmit+0x6f8>
 800690a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800690e:	095b      	lsrs	r3, r3, #5
 8006910:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006912:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006916:	f003 031f 	and.w	r3, r3, #31
 800691a:	2b00      	cmp	r3, #0
 800691c:	d102      	bne.n	8006924 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800691e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006920:	3b01      	subs	r3, #1
 8006922:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006924:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006926:	881b      	ldrh	r3, [r3, #0]
 8006928:	b29a      	uxth	r2, r3
 800692a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800692c:	b29b      	uxth	r3, r3
 800692e:	029b      	lsls	r3, r3, #10
 8006930:	b29b      	uxth	r3, r3
 8006932:	4313      	orrs	r3, r2
 8006934:	b29b      	uxth	r3, r3
 8006936:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800693a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800693e:	b29a      	uxth	r2, r3
 8006940:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006942:	801a      	strh	r2, [r3, #0]
 8006944:	e041      	b.n	80069ca <HAL_PCD_EP_DB_Transmit+0x77c>
 8006946:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800694a:	2b00      	cmp	r3, #0
 800694c:	d10a      	bne.n	8006964 <HAL_PCD_EP_DB_Transmit+0x716>
 800694e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006950:	881b      	ldrh	r3, [r3, #0]
 8006952:	b29b      	uxth	r3, r3
 8006954:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006958:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800695c:	b29a      	uxth	r2, r3
 800695e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006960:	801a      	strh	r2, [r3, #0]
 8006962:	e032      	b.n	80069ca <HAL_PCD_EP_DB_Transmit+0x77c>
 8006964:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006968:	085b      	lsrs	r3, r3, #1
 800696a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800696c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006970:	f003 0301 	and.w	r3, r3, #1
 8006974:	2b00      	cmp	r3, #0
 8006976:	d002      	beq.n	800697e <HAL_PCD_EP_DB_Transmit+0x730>
 8006978:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800697a:	3301      	adds	r3, #1
 800697c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800697e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006980:	881b      	ldrh	r3, [r3, #0]
 8006982:	b29a      	uxth	r2, r3
 8006984:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006986:	b29b      	uxth	r3, r3
 8006988:	029b      	lsls	r3, r3, #10
 800698a:	b29b      	uxth	r3, r3
 800698c:	4313      	orrs	r3, r2
 800698e:	b29a      	uxth	r2, r3
 8006990:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006992:	801a      	strh	r2, [r3, #0]
 8006994:	e019      	b.n	80069ca <HAL_PCD_EP_DB_Transmit+0x77c>
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	785b      	ldrb	r3, [r3, #1]
 800699a:	2b01      	cmp	r3, #1
 800699c:	d115      	bne.n	80069ca <HAL_PCD_EP_DB_Transmit+0x77c>
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	461a      	mov	r2, r3
 80069aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80069ac:	4413      	add	r3, r2
 80069ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	00da      	lsls	r2, r3, #3
 80069b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80069b8:	4413      	add	r3, r2
 80069ba:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80069be:	653b      	str	r3, [r7, #80]	@ 0x50
 80069c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80069c4:	b29a      	uxth	r2, r3
 80069c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069c8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	6818      	ldr	r0, [r3, #0]
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	6959      	ldr	r1, [r3, #20]
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	895a      	ldrh	r2, [r3, #10]
 80069d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80069da:	b29b      	uxth	r3, r3
 80069dc:	f006 f9c2 	bl	800cd64 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	461a      	mov	r2, r3
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	4413      	add	r3, r2
 80069ee:	881b      	ldrh	r3, [r3, #0]
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069fa:	82bb      	strh	r3, [r7, #20]
 80069fc:	8abb      	ldrh	r3, [r7, #20]
 80069fe:	f083 0310 	eor.w	r3, r3, #16
 8006a02:	82bb      	strh	r3, [r7, #20]
 8006a04:	8abb      	ldrh	r3, [r7, #20]
 8006a06:	f083 0320 	eor.w	r3, r3, #32
 8006a0a:	82bb      	strh	r3, [r7, #20]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	461a      	mov	r2, r3
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	781b      	ldrb	r3, [r3, #0]
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	441a      	add	r2, r3
 8006a1a:	8abb      	ldrh	r3, [r7, #20]
 8006a1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006a30:	2300      	movs	r3, #0
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3790      	adds	r7, #144	@ 0x90
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}

08006a3a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006a3a:	b480      	push	{r7}
 8006a3c:	b087      	sub	sp, #28
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	60f8      	str	r0, [r7, #12]
 8006a42:	607b      	str	r3, [r7, #4]
 8006a44:	460b      	mov	r3, r1
 8006a46:	817b      	strh	r3, [r7, #10]
 8006a48:	4613      	mov	r3, r2
 8006a4a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006a4c:	897b      	ldrh	r3, [r7, #10]
 8006a4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d00b      	beq.n	8006a70 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a58:	897b      	ldrh	r3, [r7, #10]
 8006a5a:	f003 0207 	and.w	r2, r3, #7
 8006a5e:	4613      	mov	r3, r2
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	4413      	add	r3, r2
 8006a64:	00db      	lsls	r3, r3, #3
 8006a66:	3310      	adds	r3, #16
 8006a68:	68fa      	ldr	r2, [r7, #12]
 8006a6a:	4413      	add	r3, r2
 8006a6c:	617b      	str	r3, [r7, #20]
 8006a6e:	e009      	b.n	8006a84 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006a70:	897a      	ldrh	r2, [r7, #10]
 8006a72:	4613      	mov	r3, r2
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	4413      	add	r3, r2
 8006a78:	00db      	lsls	r3, r3, #3
 8006a7a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006a7e:	68fa      	ldr	r2, [r7, #12]
 8006a80:	4413      	add	r3, r2
 8006a82:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006a84:	893b      	ldrh	r3, [r7, #8]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d107      	bne.n	8006a9a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	b29a      	uxth	r2, r3
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	80da      	strh	r2, [r3, #6]
 8006a98:	e00b      	b.n	8006ab2 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	b29a      	uxth	r2, r3
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	0c1b      	lsrs	r3, r3, #16
 8006aac:	b29a      	uxth	r2, r3
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006ab2:	2300      	movs	r3, #0
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	371c      	adds	r7, #28
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr

08006ac0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b085      	sub	sp, #20
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	f043 0301 	orr.w	r3, r3, #1
 8006aea:	b29a      	uxth	r2, r3
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	f043 0302 	orr.w	r3, r3, #2
 8006afe:	b29a      	uxth	r2, r3
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8006b06:	2300      	movs	r3, #0
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3714      	adds	r7, #20
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b085      	sub	sp, #20
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d141      	bne.n	8006ba6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006b22:	4b4b      	ldr	r3, [pc, #300]	@ (8006c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006b2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b2e:	d131      	bne.n	8006b94 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006b30:	4b47      	ldr	r3, [pc, #284]	@ (8006c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b36:	4a46      	ldr	r2, [pc, #280]	@ (8006c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b3c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006b40:	4b43      	ldr	r3, [pc, #268]	@ (8006c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006b48:	4a41      	ldr	r2, [pc, #260]	@ (8006c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006b4e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006b50:	4b40      	ldr	r3, [pc, #256]	@ (8006c54 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2232      	movs	r2, #50	@ 0x32
 8006b56:	fb02 f303 	mul.w	r3, r2, r3
 8006b5a:	4a3f      	ldr	r2, [pc, #252]	@ (8006c58 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8006b60:	0c9b      	lsrs	r3, r3, #18
 8006b62:	3301      	adds	r3, #1
 8006b64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006b66:	e002      	b.n	8006b6e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	3b01      	subs	r3, #1
 8006b6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006b6e:	4b38      	ldr	r3, [pc, #224]	@ (8006c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b70:	695b      	ldr	r3, [r3, #20]
 8006b72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b7a:	d102      	bne.n	8006b82 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d1f2      	bne.n	8006b68 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006b82:	4b33      	ldr	r3, [pc, #204]	@ (8006c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b84:	695b      	ldr	r3, [r3, #20]
 8006b86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b8e:	d158      	bne.n	8006c42 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006b90:	2303      	movs	r3, #3
 8006b92:	e057      	b.n	8006c44 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006b94:	4b2e      	ldr	r3, [pc, #184]	@ (8006c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b9a:	4a2d      	ldr	r2, [pc, #180]	@ (8006c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ba0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006ba4:	e04d      	b.n	8006c42 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006bac:	d141      	bne.n	8006c32 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006bae:	4b28      	ldr	r3, [pc, #160]	@ (8006c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006bb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bba:	d131      	bne.n	8006c20 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006bbc:	4b24      	ldr	r3, [pc, #144]	@ (8006c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006bbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bc2:	4a23      	ldr	r2, [pc, #140]	@ (8006c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006bc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006bc8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006bcc:	4b20      	ldr	r3, [pc, #128]	@ (8006c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006bd4:	4a1e      	ldr	r2, [pc, #120]	@ (8006c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006bd6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006bda:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006bdc:	4b1d      	ldr	r3, [pc, #116]	@ (8006c54 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	2232      	movs	r2, #50	@ 0x32
 8006be2:	fb02 f303 	mul.w	r3, r2, r3
 8006be6:	4a1c      	ldr	r2, [pc, #112]	@ (8006c58 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006be8:	fba2 2303 	umull	r2, r3, r2, r3
 8006bec:	0c9b      	lsrs	r3, r3, #18
 8006bee:	3301      	adds	r3, #1
 8006bf0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006bf2:	e002      	b.n	8006bfa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	3b01      	subs	r3, #1
 8006bf8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006bfa:	4b15      	ldr	r3, [pc, #84]	@ (8006c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006bfc:	695b      	ldr	r3, [r3, #20]
 8006bfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c06:	d102      	bne.n	8006c0e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d1f2      	bne.n	8006bf4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006c0e:	4b10      	ldr	r3, [pc, #64]	@ (8006c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c10:	695b      	ldr	r3, [r3, #20]
 8006c12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c1a:	d112      	bne.n	8006c42 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006c1c:	2303      	movs	r3, #3
 8006c1e:	e011      	b.n	8006c44 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006c20:	4b0b      	ldr	r3, [pc, #44]	@ (8006c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c26:	4a0a      	ldr	r2, [pc, #40]	@ (8006c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c2c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006c30:	e007      	b.n	8006c42 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006c32:	4b07      	ldr	r3, [pc, #28]	@ (8006c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006c3a:	4a05      	ldr	r2, [pc, #20]	@ (8006c50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c3c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006c40:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006c42:	2300      	movs	r3, #0
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3714      	adds	r7, #20
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr
 8006c50:	40007000 	.word	0x40007000
 8006c54:	20000000 	.word	0x20000000
 8006c58:	431bde83 	.word	0x431bde83

08006c5c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006c60:	4b05      	ldr	r3, [pc, #20]	@ (8006c78 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	4a04      	ldr	r2, [pc, #16]	@ (8006c78 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006c66:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006c6a:	6093      	str	r3, [r2, #8]
}
 8006c6c:	bf00      	nop
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr
 8006c76:	bf00      	nop
 8006c78:	40007000 	.word	0x40007000

08006c7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b088      	sub	sp, #32
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d101      	bne.n	8006c8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e2fe      	b.n	800728c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f003 0301 	and.w	r3, r3, #1
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d075      	beq.n	8006d86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c9a:	4b97      	ldr	r3, [pc, #604]	@ (8006ef8 <HAL_RCC_OscConfig+0x27c>)
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	f003 030c 	and.w	r3, r3, #12
 8006ca2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006ca4:	4b94      	ldr	r3, [pc, #592]	@ (8006ef8 <HAL_RCC_OscConfig+0x27c>)
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	f003 0303 	and.w	r3, r3, #3
 8006cac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006cae:	69bb      	ldr	r3, [r7, #24]
 8006cb0:	2b0c      	cmp	r3, #12
 8006cb2:	d102      	bne.n	8006cba <HAL_RCC_OscConfig+0x3e>
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	2b03      	cmp	r3, #3
 8006cb8:	d002      	beq.n	8006cc0 <HAL_RCC_OscConfig+0x44>
 8006cba:	69bb      	ldr	r3, [r7, #24]
 8006cbc:	2b08      	cmp	r3, #8
 8006cbe:	d10b      	bne.n	8006cd8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006cc0:	4b8d      	ldr	r3, [pc, #564]	@ (8006ef8 <HAL_RCC_OscConfig+0x27c>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d05b      	beq.n	8006d84 <HAL_RCC_OscConfig+0x108>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d157      	bne.n	8006d84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e2d9      	b.n	800728c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ce0:	d106      	bne.n	8006cf0 <HAL_RCC_OscConfig+0x74>
 8006ce2:	4b85      	ldr	r3, [pc, #532]	@ (8006ef8 <HAL_RCC_OscConfig+0x27c>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a84      	ldr	r2, [pc, #528]	@ (8006ef8 <HAL_RCC_OscConfig+0x27c>)
 8006ce8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006cec:	6013      	str	r3, [r2, #0]
 8006cee:	e01d      	b.n	8006d2c <HAL_RCC_OscConfig+0xb0>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006cf8:	d10c      	bne.n	8006d14 <HAL_RCC_OscConfig+0x98>
 8006cfa:	4b7f      	ldr	r3, [pc, #508]	@ (8006ef8 <HAL_RCC_OscConfig+0x27c>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a7e      	ldr	r2, [pc, #504]	@ (8006ef8 <HAL_RCC_OscConfig+0x27c>)
 8006d00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006d04:	6013      	str	r3, [r2, #0]
 8006d06:	4b7c      	ldr	r3, [pc, #496]	@ (8006ef8 <HAL_RCC_OscConfig+0x27c>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a7b      	ldr	r2, [pc, #492]	@ (8006ef8 <HAL_RCC_OscConfig+0x27c>)
 8006d0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d10:	6013      	str	r3, [r2, #0]
 8006d12:	e00b      	b.n	8006d2c <HAL_RCC_OscConfig+0xb0>
 8006d14:	4b78      	ldr	r3, [pc, #480]	@ (8006ef8 <HAL_RCC_OscConfig+0x27c>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a77      	ldr	r2, [pc, #476]	@ (8006ef8 <HAL_RCC_OscConfig+0x27c>)
 8006d1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d1e:	6013      	str	r3, [r2, #0]
 8006d20:	4b75      	ldr	r3, [pc, #468]	@ (8006ef8 <HAL_RCC_OscConfig+0x27c>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a74      	ldr	r2, [pc, #464]	@ (8006ef8 <HAL_RCC_OscConfig+0x27c>)
 8006d26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006d2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d013      	beq.n	8006d5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d34:	f7fb fd00 	bl	8002738 <HAL_GetTick>
 8006d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006d3a:	e008      	b.n	8006d4e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d3c:	f7fb fcfc 	bl	8002738 <HAL_GetTick>
 8006d40:	4602      	mov	r2, r0
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	1ad3      	subs	r3, r2, r3
 8006d46:	2b64      	cmp	r3, #100	@ 0x64
 8006d48:	d901      	bls.n	8006d4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006d4a:	2303      	movs	r3, #3
 8006d4c:	e29e      	b.n	800728c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006d4e:	4b6a      	ldr	r3, [pc, #424]	@ (8006ef8 <HAL_RCC_OscConfig+0x27c>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d0f0      	beq.n	8006d3c <HAL_RCC_OscConfig+0xc0>
 8006d5a:	e014      	b.n	8006d86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d5c:	f7fb fcec 	bl	8002738 <HAL_GetTick>
 8006d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006d62:	e008      	b.n	8006d76 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d64:	f7fb fce8 	bl	8002738 <HAL_GetTick>
 8006d68:	4602      	mov	r2, r0
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	1ad3      	subs	r3, r2, r3
 8006d6e:	2b64      	cmp	r3, #100	@ 0x64
 8006d70:	d901      	bls.n	8006d76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006d72:	2303      	movs	r3, #3
 8006d74:	e28a      	b.n	800728c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006d76:	4b60      	ldr	r3, [pc, #384]	@ (8006ef8 <HAL_RCC_OscConfig+0x27c>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d1f0      	bne.n	8006d64 <HAL_RCC_OscConfig+0xe8>
 8006d82:	e000      	b.n	8006d86 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f003 0302 	and.w	r3, r3, #2
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d075      	beq.n	8006e7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d92:	4b59      	ldr	r3, [pc, #356]	@ (8006ef8 <HAL_RCC_OscConfig+0x27c>)
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	f003 030c 	and.w	r3, r3, #12
 8006d9a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006d9c:	4b56      	ldr	r3, [pc, #344]	@ (8006ef8 <HAL_RCC_OscConfig+0x27c>)
 8006d9e:	68db      	ldr	r3, [r3, #12]
 8006da0:	f003 0303 	and.w	r3, r3, #3
 8006da4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	2b0c      	cmp	r3, #12
 8006daa:	d102      	bne.n	8006db2 <HAL_RCC_OscConfig+0x136>
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	2b02      	cmp	r3, #2
 8006db0:	d002      	beq.n	8006db8 <HAL_RCC_OscConfig+0x13c>
 8006db2:	69bb      	ldr	r3, [r7, #24]
 8006db4:	2b04      	cmp	r3, #4
 8006db6:	d11f      	bne.n	8006df8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006db8:	4b4f      	ldr	r3, [pc, #316]	@ (8006ef8 <HAL_RCC_OscConfig+0x27c>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d005      	beq.n	8006dd0 <HAL_RCC_OscConfig+0x154>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	68db      	ldr	r3, [r3, #12]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d101      	bne.n	8006dd0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e25d      	b.n	800728c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006dd0:	4b49      	ldr	r3, [pc, #292]	@ (8006ef8 <HAL_RCC_OscConfig+0x27c>)
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	691b      	ldr	r3, [r3, #16]
 8006ddc:	061b      	lsls	r3, r3, #24
 8006dde:	4946      	ldr	r1, [pc, #280]	@ (8006ef8 <HAL_RCC_OscConfig+0x27c>)
 8006de0:	4313      	orrs	r3, r2
 8006de2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006de4:	4b45      	ldr	r3, [pc, #276]	@ (8006efc <HAL_RCC_OscConfig+0x280>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4618      	mov	r0, r3
 8006dea:	f7fb fc59 	bl	80026a0 <HAL_InitTick>
 8006dee:	4603      	mov	r3, r0
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d043      	beq.n	8006e7c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006df4:	2301      	movs	r3, #1
 8006df6:	e249      	b.n	800728c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	68db      	ldr	r3, [r3, #12]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d023      	beq.n	8006e48 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e00:	4b3d      	ldr	r3, [pc, #244]	@ (8006ef8 <HAL_RCC_OscConfig+0x27c>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a3c      	ldr	r2, [pc, #240]	@ (8006ef8 <HAL_RCC_OscConfig+0x27c>)
 8006e06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e0c:	f7fb fc94 	bl	8002738 <HAL_GetTick>
 8006e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006e12:	e008      	b.n	8006e26 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e14:	f7fb fc90 	bl	8002738 <HAL_GetTick>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	1ad3      	subs	r3, r2, r3
 8006e1e:	2b02      	cmp	r3, #2
 8006e20:	d901      	bls.n	8006e26 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006e22:	2303      	movs	r3, #3
 8006e24:	e232      	b.n	800728c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006e26:	4b34      	ldr	r3, [pc, #208]	@ (8006ef8 <HAL_RCC_OscConfig+0x27c>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d0f0      	beq.n	8006e14 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e32:	4b31      	ldr	r3, [pc, #196]	@ (8006ef8 <HAL_RCC_OscConfig+0x27c>)
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	691b      	ldr	r3, [r3, #16]
 8006e3e:	061b      	lsls	r3, r3, #24
 8006e40:	492d      	ldr	r1, [pc, #180]	@ (8006ef8 <HAL_RCC_OscConfig+0x27c>)
 8006e42:	4313      	orrs	r3, r2
 8006e44:	604b      	str	r3, [r1, #4]
 8006e46:	e01a      	b.n	8006e7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e48:	4b2b      	ldr	r3, [pc, #172]	@ (8006ef8 <HAL_RCC_OscConfig+0x27c>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a2a      	ldr	r2, [pc, #168]	@ (8006ef8 <HAL_RCC_OscConfig+0x27c>)
 8006e4e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e54:	f7fb fc70 	bl	8002738 <HAL_GetTick>
 8006e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006e5a:	e008      	b.n	8006e6e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e5c:	f7fb fc6c 	bl	8002738 <HAL_GetTick>
 8006e60:	4602      	mov	r2, r0
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	1ad3      	subs	r3, r2, r3
 8006e66:	2b02      	cmp	r3, #2
 8006e68:	d901      	bls.n	8006e6e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006e6a:	2303      	movs	r3, #3
 8006e6c:	e20e      	b.n	800728c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006e6e:	4b22      	ldr	r3, [pc, #136]	@ (8006ef8 <HAL_RCC_OscConfig+0x27c>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d1f0      	bne.n	8006e5c <HAL_RCC_OscConfig+0x1e0>
 8006e7a:	e000      	b.n	8006e7e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006e7c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f003 0308 	and.w	r3, r3, #8
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d041      	beq.n	8006f0e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	695b      	ldr	r3, [r3, #20]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d01c      	beq.n	8006ecc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e92:	4b19      	ldr	r3, [pc, #100]	@ (8006ef8 <HAL_RCC_OscConfig+0x27c>)
 8006e94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006e98:	4a17      	ldr	r2, [pc, #92]	@ (8006ef8 <HAL_RCC_OscConfig+0x27c>)
 8006e9a:	f043 0301 	orr.w	r3, r3, #1
 8006e9e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ea2:	f7fb fc49 	bl	8002738 <HAL_GetTick>
 8006ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006ea8:	e008      	b.n	8006ebc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006eaa:	f7fb fc45 	bl	8002738 <HAL_GetTick>
 8006eae:	4602      	mov	r2, r0
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	1ad3      	subs	r3, r2, r3
 8006eb4:	2b02      	cmp	r3, #2
 8006eb6:	d901      	bls.n	8006ebc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006eb8:	2303      	movs	r3, #3
 8006eba:	e1e7      	b.n	800728c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006ebc:	4b0e      	ldr	r3, [pc, #56]	@ (8006ef8 <HAL_RCC_OscConfig+0x27c>)
 8006ebe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ec2:	f003 0302 	and.w	r3, r3, #2
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d0ef      	beq.n	8006eaa <HAL_RCC_OscConfig+0x22e>
 8006eca:	e020      	b.n	8006f0e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ecc:	4b0a      	ldr	r3, [pc, #40]	@ (8006ef8 <HAL_RCC_OscConfig+0x27c>)
 8006ece:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ed2:	4a09      	ldr	r2, [pc, #36]	@ (8006ef8 <HAL_RCC_OscConfig+0x27c>)
 8006ed4:	f023 0301 	bic.w	r3, r3, #1
 8006ed8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006edc:	f7fb fc2c 	bl	8002738 <HAL_GetTick>
 8006ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006ee2:	e00d      	b.n	8006f00 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ee4:	f7fb fc28 	bl	8002738 <HAL_GetTick>
 8006ee8:	4602      	mov	r2, r0
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	1ad3      	subs	r3, r2, r3
 8006eee:	2b02      	cmp	r3, #2
 8006ef0:	d906      	bls.n	8006f00 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006ef2:	2303      	movs	r3, #3
 8006ef4:	e1ca      	b.n	800728c <HAL_RCC_OscConfig+0x610>
 8006ef6:	bf00      	nop
 8006ef8:	40021000 	.word	0x40021000
 8006efc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006f00:	4b8c      	ldr	r3, [pc, #560]	@ (8007134 <HAL_RCC_OscConfig+0x4b8>)
 8006f02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f06:	f003 0302 	and.w	r3, r3, #2
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d1ea      	bne.n	8006ee4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f003 0304 	and.w	r3, r3, #4
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	f000 80a6 	beq.w	8007068 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006f20:	4b84      	ldr	r3, [pc, #528]	@ (8007134 <HAL_RCC_OscConfig+0x4b8>)
 8006f22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d101      	bne.n	8006f30 <HAL_RCC_OscConfig+0x2b4>
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e000      	b.n	8006f32 <HAL_RCC_OscConfig+0x2b6>
 8006f30:	2300      	movs	r3, #0
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d00d      	beq.n	8006f52 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f36:	4b7f      	ldr	r3, [pc, #508]	@ (8007134 <HAL_RCC_OscConfig+0x4b8>)
 8006f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f3a:	4a7e      	ldr	r2, [pc, #504]	@ (8007134 <HAL_RCC_OscConfig+0x4b8>)
 8006f3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f40:	6593      	str	r3, [r2, #88]	@ 0x58
 8006f42:	4b7c      	ldr	r3, [pc, #496]	@ (8007134 <HAL_RCC_OscConfig+0x4b8>)
 8006f44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f4a:	60fb      	str	r3, [r7, #12]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006f52:	4b79      	ldr	r3, [pc, #484]	@ (8007138 <HAL_RCC_OscConfig+0x4bc>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d118      	bne.n	8006f90 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f5e:	4b76      	ldr	r3, [pc, #472]	@ (8007138 <HAL_RCC_OscConfig+0x4bc>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a75      	ldr	r2, [pc, #468]	@ (8007138 <HAL_RCC_OscConfig+0x4bc>)
 8006f64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f6a:	f7fb fbe5 	bl	8002738 <HAL_GetTick>
 8006f6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006f70:	e008      	b.n	8006f84 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f72:	f7fb fbe1 	bl	8002738 <HAL_GetTick>
 8006f76:	4602      	mov	r2, r0
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	1ad3      	subs	r3, r2, r3
 8006f7c:	2b02      	cmp	r3, #2
 8006f7e:	d901      	bls.n	8006f84 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006f80:	2303      	movs	r3, #3
 8006f82:	e183      	b.n	800728c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006f84:	4b6c      	ldr	r3, [pc, #432]	@ (8007138 <HAL_RCC_OscConfig+0x4bc>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d0f0      	beq.n	8006f72 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d108      	bne.n	8006faa <HAL_RCC_OscConfig+0x32e>
 8006f98:	4b66      	ldr	r3, [pc, #408]	@ (8007134 <HAL_RCC_OscConfig+0x4b8>)
 8006f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f9e:	4a65      	ldr	r2, [pc, #404]	@ (8007134 <HAL_RCC_OscConfig+0x4b8>)
 8006fa0:	f043 0301 	orr.w	r3, r3, #1
 8006fa4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006fa8:	e024      	b.n	8006ff4 <HAL_RCC_OscConfig+0x378>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	2b05      	cmp	r3, #5
 8006fb0:	d110      	bne.n	8006fd4 <HAL_RCC_OscConfig+0x358>
 8006fb2:	4b60      	ldr	r3, [pc, #384]	@ (8007134 <HAL_RCC_OscConfig+0x4b8>)
 8006fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fb8:	4a5e      	ldr	r2, [pc, #376]	@ (8007134 <HAL_RCC_OscConfig+0x4b8>)
 8006fba:	f043 0304 	orr.w	r3, r3, #4
 8006fbe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006fc2:	4b5c      	ldr	r3, [pc, #368]	@ (8007134 <HAL_RCC_OscConfig+0x4b8>)
 8006fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fc8:	4a5a      	ldr	r2, [pc, #360]	@ (8007134 <HAL_RCC_OscConfig+0x4b8>)
 8006fca:	f043 0301 	orr.w	r3, r3, #1
 8006fce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006fd2:	e00f      	b.n	8006ff4 <HAL_RCC_OscConfig+0x378>
 8006fd4:	4b57      	ldr	r3, [pc, #348]	@ (8007134 <HAL_RCC_OscConfig+0x4b8>)
 8006fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fda:	4a56      	ldr	r2, [pc, #344]	@ (8007134 <HAL_RCC_OscConfig+0x4b8>)
 8006fdc:	f023 0301 	bic.w	r3, r3, #1
 8006fe0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006fe4:	4b53      	ldr	r3, [pc, #332]	@ (8007134 <HAL_RCC_OscConfig+0x4b8>)
 8006fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fea:	4a52      	ldr	r2, [pc, #328]	@ (8007134 <HAL_RCC_OscConfig+0x4b8>)
 8006fec:	f023 0304 	bic.w	r3, r3, #4
 8006ff0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d016      	beq.n	800702a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ffc:	f7fb fb9c 	bl	8002738 <HAL_GetTick>
 8007000:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007002:	e00a      	b.n	800701a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007004:	f7fb fb98 	bl	8002738 <HAL_GetTick>
 8007008:	4602      	mov	r2, r0
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	1ad3      	subs	r3, r2, r3
 800700e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007012:	4293      	cmp	r3, r2
 8007014:	d901      	bls.n	800701a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007016:	2303      	movs	r3, #3
 8007018:	e138      	b.n	800728c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800701a:	4b46      	ldr	r3, [pc, #280]	@ (8007134 <HAL_RCC_OscConfig+0x4b8>)
 800701c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007020:	f003 0302 	and.w	r3, r3, #2
 8007024:	2b00      	cmp	r3, #0
 8007026:	d0ed      	beq.n	8007004 <HAL_RCC_OscConfig+0x388>
 8007028:	e015      	b.n	8007056 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800702a:	f7fb fb85 	bl	8002738 <HAL_GetTick>
 800702e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007030:	e00a      	b.n	8007048 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007032:	f7fb fb81 	bl	8002738 <HAL_GetTick>
 8007036:	4602      	mov	r2, r0
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	1ad3      	subs	r3, r2, r3
 800703c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007040:	4293      	cmp	r3, r2
 8007042:	d901      	bls.n	8007048 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007044:	2303      	movs	r3, #3
 8007046:	e121      	b.n	800728c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007048:	4b3a      	ldr	r3, [pc, #232]	@ (8007134 <HAL_RCC_OscConfig+0x4b8>)
 800704a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800704e:	f003 0302 	and.w	r3, r3, #2
 8007052:	2b00      	cmp	r3, #0
 8007054:	d1ed      	bne.n	8007032 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007056:	7ffb      	ldrb	r3, [r7, #31]
 8007058:	2b01      	cmp	r3, #1
 800705a:	d105      	bne.n	8007068 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800705c:	4b35      	ldr	r3, [pc, #212]	@ (8007134 <HAL_RCC_OscConfig+0x4b8>)
 800705e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007060:	4a34      	ldr	r2, [pc, #208]	@ (8007134 <HAL_RCC_OscConfig+0x4b8>)
 8007062:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007066:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f003 0320 	and.w	r3, r3, #32
 8007070:	2b00      	cmp	r3, #0
 8007072:	d03c      	beq.n	80070ee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	699b      	ldr	r3, [r3, #24]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d01c      	beq.n	80070b6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800707c:	4b2d      	ldr	r3, [pc, #180]	@ (8007134 <HAL_RCC_OscConfig+0x4b8>)
 800707e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007082:	4a2c      	ldr	r2, [pc, #176]	@ (8007134 <HAL_RCC_OscConfig+0x4b8>)
 8007084:	f043 0301 	orr.w	r3, r3, #1
 8007088:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800708c:	f7fb fb54 	bl	8002738 <HAL_GetTick>
 8007090:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007092:	e008      	b.n	80070a6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007094:	f7fb fb50 	bl	8002738 <HAL_GetTick>
 8007098:	4602      	mov	r2, r0
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	1ad3      	subs	r3, r2, r3
 800709e:	2b02      	cmp	r3, #2
 80070a0:	d901      	bls.n	80070a6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80070a2:	2303      	movs	r3, #3
 80070a4:	e0f2      	b.n	800728c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80070a6:	4b23      	ldr	r3, [pc, #140]	@ (8007134 <HAL_RCC_OscConfig+0x4b8>)
 80070a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80070ac:	f003 0302 	and.w	r3, r3, #2
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d0ef      	beq.n	8007094 <HAL_RCC_OscConfig+0x418>
 80070b4:	e01b      	b.n	80070ee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80070b6:	4b1f      	ldr	r3, [pc, #124]	@ (8007134 <HAL_RCC_OscConfig+0x4b8>)
 80070b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80070bc:	4a1d      	ldr	r2, [pc, #116]	@ (8007134 <HAL_RCC_OscConfig+0x4b8>)
 80070be:	f023 0301 	bic.w	r3, r3, #1
 80070c2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070c6:	f7fb fb37 	bl	8002738 <HAL_GetTick>
 80070ca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80070cc:	e008      	b.n	80070e0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80070ce:	f7fb fb33 	bl	8002738 <HAL_GetTick>
 80070d2:	4602      	mov	r2, r0
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	1ad3      	subs	r3, r2, r3
 80070d8:	2b02      	cmp	r3, #2
 80070da:	d901      	bls.n	80070e0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80070dc:	2303      	movs	r3, #3
 80070de:	e0d5      	b.n	800728c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80070e0:	4b14      	ldr	r3, [pc, #80]	@ (8007134 <HAL_RCC_OscConfig+0x4b8>)
 80070e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80070e6:	f003 0302 	and.w	r3, r3, #2
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d1ef      	bne.n	80070ce <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	69db      	ldr	r3, [r3, #28]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	f000 80c9 	beq.w	800728a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80070f8:	4b0e      	ldr	r3, [pc, #56]	@ (8007134 <HAL_RCC_OscConfig+0x4b8>)
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	f003 030c 	and.w	r3, r3, #12
 8007100:	2b0c      	cmp	r3, #12
 8007102:	f000 8083 	beq.w	800720c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	69db      	ldr	r3, [r3, #28]
 800710a:	2b02      	cmp	r3, #2
 800710c:	d15e      	bne.n	80071cc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800710e:	4b09      	ldr	r3, [pc, #36]	@ (8007134 <HAL_RCC_OscConfig+0x4b8>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a08      	ldr	r2, [pc, #32]	@ (8007134 <HAL_RCC_OscConfig+0x4b8>)
 8007114:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007118:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800711a:	f7fb fb0d 	bl	8002738 <HAL_GetTick>
 800711e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007120:	e00c      	b.n	800713c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007122:	f7fb fb09 	bl	8002738 <HAL_GetTick>
 8007126:	4602      	mov	r2, r0
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	1ad3      	subs	r3, r2, r3
 800712c:	2b02      	cmp	r3, #2
 800712e:	d905      	bls.n	800713c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007130:	2303      	movs	r3, #3
 8007132:	e0ab      	b.n	800728c <HAL_RCC_OscConfig+0x610>
 8007134:	40021000 	.word	0x40021000
 8007138:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800713c:	4b55      	ldr	r3, [pc, #340]	@ (8007294 <HAL_RCC_OscConfig+0x618>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007144:	2b00      	cmp	r3, #0
 8007146:	d1ec      	bne.n	8007122 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007148:	4b52      	ldr	r3, [pc, #328]	@ (8007294 <HAL_RCC_OscConfig+0x618>)
 800714a:	68da      	ldr	r2, [r3, #12]
 800714c:	4b52      	ldr	r3, [pc, #328]	@ (8007298 <HAL_RCC_OscConfig+0x61c>)
 800714e:	4013      	ands	r3, r2
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	6a11      	ldr	r1, [r2, #32]
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007158:	3a01      	subs	r2, #1
 800715a:	0112      	lsls	r2, r2, #4
 800715c:	4311      	orrs	r1, r2
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8007162:	0212      	lsls	r2, r2, #8
 8007164:	4311      	orrs	r1, r2
 8007166:	687a      	ldr	r2, [r7, #4]
 8007168:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800716a:	0852      	lsrs	r2, r2, #1
 800716c:	3a01      	subs	r2, #1
 800716e:	0552      	lsls	r2, r2, #21
 8007170:	4311      	orrs	r1, r2
 8007172:	687a      	ldr	r2, [r7, #4]
 8007174:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007176:	0852      	lsrs	r2, r2, #1
 8007178:	3a01      	subs	r2, #1
 800717a:	0652      	lsls	r2, r2, #25
 800717c:	4311      	orrs	r1, r2
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007182:	06d2      	lsls	r2, r2, #27
 8007184:	430a      	orrs	r2, r1
 8007186:	4943      	ldr	r1, [pc, #268]	@ (8007294 <HAL_RCC_OscConfig+0x618>)
 8007188:	4313      	orrs	r3, r2
 800718a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800718c:	4b41      	ldr	r3, [pc, #260]	@ (8007294 <HAL_RCC_OscConfig+0x618>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a40      	ldr	r2, [pc, #256]	@ (8007294 <HAL_RCC_OscConfig+0x618>)
 8007192:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007196:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007198:	4b3e      	ldr	r3, [pc, #248]	@ (8007294 <HAL_RCC_OscConfig+0x618>)
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	4a3d      	ldr	r2, [pc, #244]	@ (8007294 <HAL_RCC_OscConfig+0x618>)
 800719e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80071a2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071a4:	f7fb fac8 	bl	8002738 <HAL_GetTick>
 80071a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80071aa:	e008      	b.n	80071be <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071ac:	f7fb fac4 	bl	8002738 <HAL_GetTick>
 80071b0:	4602      	mov	r2, r0
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	1ad3      	subs	r3, r2, r3
 80071b6:	2b02      	cmp	r3, #2
 80071b8:	d901      	bls.n	80071be <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80071ba:	2303      	movs	r3, #3
 80071bc:	e066      	b.n	800728c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80071be:	4b35      	ldr	r3, [pc, #212]	@ (8007294 <HAL_RCC_OscConfig+0x618>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d0f0      	beq.n	80071ac <HAL_RCC_OscConfig+0x530>
 80071ca:	e05e      	b.n	800728a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071cc:	4b31      	ldr	r3, [pc, #196]	@ (8007294 <HAL_RCC_OscConfig+0x618>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a30      	ldr	r2, [pc, #192]	@ (8007294 <HAL_RCC_OscConfig+0x618>)
 80071d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80071d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071d8:	f7fb faae 	bl	8002738 <HAL_GetTick>
 80071dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80071de:	e008      	b.n	80071f2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071e0:	f7fb faaa 	bl	8002738 <HAL_GetTick>
 80071e4:	4602      	mov	r2, r0
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	1ad3      	subs	r3, r2, r3
 80071ea:	2b02      	cmp	r3, #2
 80071ec:	d901      	bls.n	80071f2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80071ee:	2303      	movs	r3, #3
 80071f0:	e04c      	b.n	800728c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80071f2:	4b28      	ldr	r3, [pc, #160]	@ (8007294 <HAL_RCC_OscConfig+0x618>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d1f0      	bne.n	80071e0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80071fe:	4b25      	ldr	r3, [pc, #148]	@ (8007294 <HAL_RCC_OscConfig+0x618>)
 8007200:	68da      	ldr	r2, [r3, #12]
 8007202:	4924      	ldr	r1, [pc, #144]	@ (8007294 <HAL_RCC_OscConfig+0x618>)
 8007204:	4b25      	ldr	r3, [pc, #148]	@ (800729c <HAL_RCC_OscConfig+0x620>)
 8007206:	4013      	ands	r3, r2
 8007208:	60cb      	str	r3, [r1, #12]
 800720a:	e03e      	b.n	800728a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	69db      	ldr	r3, [r3, #28]
 8007210:	2b01      	cmp	r3, #1
 8007212:	d101      	bne.n	8007218 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8007214:	2301      	movs	r3, #1
 8007216:	e039      	b.n	800728c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007218:	4b1e      	ldr	r3, [pc, #120]	@ (8007294 <HAL_RCC_OscConfig+0x618>)
 800721a:	68db      	ldr	r3, [r3, #12]
 800721c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	f003 0203 	and.w	r2, r3, #3
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6a1b      	ldr	r3, [r3, #32]
 8007228:	429a      	cmp	r2, r3
 800722a:	d12c      	bne.n	8007286 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007236:	3b01      	subs	r3, #1
 8007238:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800723a:	429a      	cmp	r2, r3
 800723c:	d123      	bne.n	8007286 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007248:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800724a:	429a      	cmp	r2, r3
 800724c:	d11b      	bne.n	8007286 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007258:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800725a:	429a      	cmp	r2, r3
 800725c:	d113      	bne.n	8007286 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007268:	085b      	lsrs	r3, r3, #1
 800726a:	3b01      	subs	r3, #1
 800726c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800726e:	429a      	cmp	r2, r3
 8007270:	d109      	bne.n	8007286 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800727c:	085b      	lsrs	r3, r3, #1
 800727e:	3b01      	subs	r3, #1
 8007280:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007282:	429a      	cmp	r2, r3
 8007284:	d001      	beq.n	800728a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8007286:	2301      	movs	r3, #1
 8007288:	e000      	b.n	800728c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800728a:	2300      	movs	r3, #0
}
 800728c:	4618      	mov	r0, r3
 800728e:	3720      	adds	r7, #32
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}
 8007294:	40021000 	.word	0x40021000
 8007298:	019f800c 	.word	0x019f800c
 800729c:	feeefffc 	.word	0xfeeefffc

080072a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b086      	sub	sp, #24
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80072aa:	2300      	movs	r3, #0
 80072ac:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d101      	bne.n	80072b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80072b4:	2301      	movs	r3, #1
 80072b6:	e11e      	b.n	80074f6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80072b8:	4b91      	ldr	r3, [pc, #580]	@ (8007500 <HAL_RCC_ClockConfig+0x260>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f003 030f 	and.w	r3, r3, #15
 80072c0:	683a      	ldr	r2, [r7, #0]
 80072c2:	429a      	cmp	r2, r3
 80072c4:	d910      	bls.n	80072e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072c6:	4b8e      	ldr	r3, [pc, #568]	@ (8007500 <HAL_RCC_ClockConfig+0x260>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f023 020f 	bic.w	r2, r3, #15
 80072ce:	498c      	ldr	r1, [pc, #560]	@ (8007500 <HAL_RCC_ClockConfig+0x260>)
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	4313      	orrs	r3, r2
 80072d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80072d6:	4b8a      	ldr	r3, [pc, #552]	@ (8007500 <HAL_RCC_ClockConfig+0x260>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f003 030f 	and.w	r3, r3, #15
 80072de:	683a      	ldr	r2, [r7, #0]
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d001      	beq.n	80072e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80072e4:	2301      	movs	r3, #1
 80072e6:	e106      	b.n	80074f6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f003 0301 	and.w	r3, r3, #1
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d073      	beq.n	80073dc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	2b03      	cmp	r3, #3
 80072fa:	d129      	bne.n	8007350 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80072fc:	4b81      	ldr	r3, [pc, #516]	@ (8007504 <HAL_RCC_ClockConfig+0x264>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007304:	2b00      	cmp	r3, #0
 8007306:	d101      	bne.n	800730c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007308:	2301      	movs	r3, #1
 800730a:	e0f4      	b.n	80074f6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800730c:	f000 f966 	bl	80075dc <RCC_GetSysClockFreqFromPLLSource>
 8007310:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	4a7c      	ldr	r2, [pc, #496]	@ (8007508 <HAL_RCC_ClockConfig+0x268>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d93f      	bls.n	800739a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800731a:	4b7a      	ldr	r3, [pc, #488]	@ (8007504 <HAL_RCC_ClockConfig+0x264>)
 800731c:	689b      	ldr	r3, [r3, #8]
 800731e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007322:	2b00      	cmp	r3, #0
 8007324:	d009      	beq.n	800733a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800732e:	2b00      	cmp	r3, #0
 8007330:	d033      	beq.n	800739a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007336:	2b00      	cmp	r3, #0
 8007338:	d12f      	bne.n	800739a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800733a:	4b72      	ldr	r3, [pc, #456]	@ (8007504 <HAL_RCC_ClockConfig+0x264>)
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007342:	4a70      	ldr	r2, [pc, #448]	@ (8007504 <HAL_RCC_ClockConfig+0x264>)
 8007344:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007348:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800734a:	2380      	movs	r3, #128	@ 0x80
 800734c:	617b      	str	r3, [r7, #20]
 800734e:	e024      	b.n	800739a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	2b02      	cmp	r3, #2
 8007356:	d107      	bne.n	8007368 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007358:	4b6a      	ldr	r3, [pc, #424]	@ (8007504 <HAL_RCC_ClockConfig+0x264>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007360:	2b00      	cmp	r3, #0
 8007362:	d109      	bne.n	8007378 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	e0c6      	b.n	80074f6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007368:	4b66      	ldr	r3, [pc, #408]	@ (8007504 <HAL_RCC_ClockConfig+0x264>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007370:	2b00      	cmp	r3, #0
 8007372:	d101      	bne.n	8007378 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007374:	2301      	movs	r3, #1
 8007376:	e0be      	b.n	80074f6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007378:	f000 f8ce 	bl	8007518 <HAL_RCC_GetSysClockFreq>
 800737c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	4a61      	ldr	r2, [pc, #388]	@ (8007508 <HAL_RCC_ClockConfig+0x268>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d909      	bls.n	800739a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007386:	4b5f      	ldr	r3, [pc, #380]	@ (8007504 <HAL_RCC_ClockConfig+0x264>)
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800738e:	4a5d      	ldr	r2, [pc, #372]	@ (8007504 <HAL_RCC_ClockConfig+0x264>)
 8007390:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007394:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007396:	2380      	movs	r3, #128	@ 0x80
 8007398:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800739a:	4b5a      	ldr	r3, [pc, #360]	@ (8007504 <HAL_RCC_ClockConfig+0x264>)
 800739c:	689b      	ldr	r3, [r3, #8]
 800739e:	f023 0203 	bic.w	r2, r3, #3
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	4957      	ldr	r1, [pc, #348]	@ (8007504 <HAL_RCC_ClockConfig+0x264>)
 80073a8:	4313      	orrs	r3, r2
 80073aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073ac:	f7fb f9c4 	bl	8002738 <HAL_GetTick>
 80073b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073b2:	e00a      	b.n	80073ca <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80073b4:	f7fb f9c0 	bl	8002738 <HAL_GetTick>
 80073b8:	4602      	mov	r2, r0
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	1ad3      	subs	r3, r2, r3
 80073be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d901      	bls.n	80073ca <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80073c6:	2303      	movs	r3, #3
 80073c8:	e095      	b.n	80074f6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073ca:	4b4e      	ldr	r3, [pc, #312]	@ (8007504 <HAL_RCC_ClockConfig+0x264>)
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	f003 020c 	and.w	r2, r3, #12
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	429a      	cmp	r2, r3
 80073da:	d1eb      	bne.n	80073b4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f003 0302 	and.w	r3, r3, #2
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d023      	beq.n	8007430 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f003 0304 	and.w	r3, r3, #4
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d005      	beq.n	8007400 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80073f4:	4b43      	ldr	r3, [pc, #268]	@ (8007504 <HAL_RCC_ClockConfig+0x264>)
 80073f6:	689b      	ldr	r3, [r3, #8]
 80073f8:	4a42      	ldr	r2, [pc, #264]	@ (8007504 <HAL_RCC_ClockConfig+0x264>)
 80073fa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80073fe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f003 0308 	and.w	r3, r3, #8
 8007408:	2b00      	cmp	r3, #0
 800740a:	d007      	beq.n	800741c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800740c:	4b3d      	ldr	r3, [pc, #244]	@ (8007504 <HAL_RCC_ClockConfig+0x264>)
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007414:	4a3b      	ldr	r2, [pc, #236]	@ (8007504 <HAL_RCC_ClockConfig+0x264>)
 8007416:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800741a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800741c:	4b39      	ldr	r3, [pc, #228]	@ (8007504 <HAL_RCC_ClockConfig+0x264>)
 800741e:	689b      	ldr	r3, [r3, #8]
 8007420:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	689b      	ldr	r3, [r3, #8]
 8007428:	4936      	ldr	r1, [pc, #216]	@ (8007504 <HAL_RCC_ClockConfig+0x264>)
 800742a:	4313      	orrs	r3, r2
 800742c:	608b      	str	r3, [r1, #8]
 800742e:	e008      	b.n	8007442 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	2b80      	cmp	r3, #128	@ 0x80
 8007434:	d105      	bne.n	8007442 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007436:	4b33      	ldr	r3, [pc, #204]	@ (8007504 <HAL_RCC_ClockConfig+0x264>)
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	4a32      	ldr	r2, [pc, #200]	@ (8007504 <HAL_RCC_ClockConfig+0x264>)
 800743c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007440:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007442:	4b2f      	ldr	r3, [pc, #188]	@ (8007500 <HAL_RCC_ClockConfig+0x260>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f003 030f 	and.w	r3, r3, #15
 800744a:	683a      	ldr	r2, [r7, #0]
 800744c:	429a      	cmp	r2, r3
 800744e:	d21d      	bcs.n	800748c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007450:	4b2b      	ldr	r3, [pc, #172]	@ (8007500 <HAL_RCC_ClockConfig+0x260>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f023 020f 	bic.w	r2, r3, #15
 8007458:	4929      	ldr	r1, [pc, #164]	@ (8007500 <HAL_RCC_ClockConfig+0x260>)
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	4313      	orrs	r3, r2
 800745e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007460:	f7fb f96a 	bl	8002738 <HAL_GetTick>
 8007464:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007466:	e00a      	b.n	800747e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007468:	f7fb f966 	bl	8002738 <HAL_GetTick>
 800746c:	4602      	mov	r2, r0
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	1ad3      	subs	r3, r2, r3
 8007472:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007476:	4293      	cmp	r3, r2
 8007478:	d901      	bls.n	800747e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800747a:	2303      	movs	r3, #3
 800747c:	e03b      	b.n	80074f6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800747e:	4b20      	ldr	r3, [pc, #128]	@ (8007500 <HAL_RCC_ClockConfig+0x260>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f003 030f 	and.w	r3, r3, #15
 8007486:	683a      	ldr	r2, [r7, #0]
 8007488:	429a      	cmp	r2, r3
 800748a:	d1ed      	bne.n	8007468 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f003 0304 	and.w	r3, r3, #4
 8007494:	2b00      	cmp	r3, #0
 8007496:	d008      	beq.n	80074aa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007498:	4b1a      	ldr	r3, [pc, #104]	@ (8007504 <HAL_RCC_ClockConfig+0x264>)
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	68db      	ldr	r3, [r3, #12]
 80074a4:	4917      	ldr	r1, [pc, #92]	@ (8007504 <HAL_RCC_ClockConfig+0x264>)
 80074a6:	4313      	orrs	r3, r2
 80074a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f003 0308 	and.w	r3, r3, #8
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d009      	beq.n	80074ca <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80074b6:	4b13      	ldr	r3, [pc, #76]	@ (8007504 <HAL_RCC_ClockConfig+0x264>)
 80074b8:	689b      	ldr	r3, [r3, #8]
 80074ba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	691b      	ldr	r3, [r3, #16]
 80074c2:	00db      	lsls	r3, r3, #3
 80074c4:	490f      	ldr	r1, [pc, #60]	@ (8007504 <HAL_RCC_ClockConfig+0x264>)
 80074c6:	4313      	orrs	r3, r2
 80074c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80074ca:	f000 f825 	bl	8007518 <HAL_RCC_GetSysClockFreq>
 80074ce:	4602      	mov	r2, r0
 80074d0:	4b0c      	ldr	r3, [pc, #48]	@ (8007504 <HAL_RCC_ClockConfig+0x264>)
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	091b      	lsrs	r3, r3, #4
 80074d6:	f003 030f 	and.w	r3, r3, #15
 80074da:	490c      	ldr	r1, [pc, #48]	@ (800750c <HAL_RCC_ClockConfig+0x26c>)
 80074dc:	5ccb      	ldrb	r3, [r1, r3]
 80074de:	f003 031f 	and.w	r3, r3, #31
 80074e2:	fa22 f303 	lsr.w	r3, r2, r3
 80074e6:	4a0a      	ldr	r2, [pc, #40]	@ (8007510 <HAL_RCC_ClockConfig+0x270>)
 80074e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80074ea:	4b0a      	ldr	r3, [pc, #40]	@ (8007514 <HAL_RCC_ClockConfig+0x274>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4618      	mov	r0, r3
 80074f0:	f7fb f8d6 	bl	80026a0 <HAL_InitTick>
 80074f4:	4603      	mov	r3, r0
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3718      	adds	r7, #24
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
 80074fe:	bf00      	nop
 8007500:	40022000 	.word	0x40022000
 8007504:	40021000 	.word	0x40021000
 8007508:	04c4b400 	.word	0x04c4b400
 800750c:	08013874 	.word	0x08013874
 8007510:	20000000 	.word	0x20000000
 8007514:	20000004 	.word	0x20000004

08007518 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007518:	b480      	push	{r7}
 800751a:	b087      	sub	sp, #28
 800751c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800751e:	4b2c      	ldr	r3, [pc, #176]	@ (80075d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007520:	689b      	ldr	r3, [r3, #8]
 8007522:	f003 030c 	and.w	r3, r3, #12
 8007526:	2b04      	cmp	r3, #4
 8007528:	d102      	bne.n	8007530 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800752a:	4b2a      	ldr	r3, [pc, #168]	@ (80075d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800752c:	613b      	str	r3, [r7, #16]
 800752e:	e047      	b.n	80075c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007530:	4b27      	ldr	r3, [pc, #156]	@ (80075d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	f003 030c 	and.w	r3, r3, #12
 8007538:	2b08      	cmp	r3, #8
 800753a:	d102      	bne.n	8007542 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800753c:	4b26      	ldr	r3, [pc, #152]	@ (80075d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800753e:	613b      	str	r3, [r7, #16]
 8007540:	e03e      	b.n	80075c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007542:	4b23      	ldr	r3, [pc, #140]	@ (80075d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007544:	689b      	ldr	r3, [r3, #8]
 8007546:	f003 030c 	and.w	r3, r3, #12
 800754a:	2b0c      	cmp	r3, #12
 800754c:	d136      	bne.n	80075bc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800754e:	4b20      	ldr	r3, [pc, #128]	@ (80075d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007550:	68db      	ldr	r3, [r3, #12]
 8007552:	f003 0303 	and.w	r3, r3, #3
 8007556:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007558:	4b1d      	ldr	r3, [pc, #116]	@ (80075d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800755a:	68db      	ldr	r3, [r3, #12]
 800755c:	091b      	lsrs	r3, r3, #4
 800755e:	f003 030f 	and.w	r3, r3, #15
 8007562:	3301      	adds	r3, #1
 8007564:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2b03      	cmp	r3, #3
 800756a:	d10c      	bne.n	8007586 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800756c:	4a1a      	ldr	r2, [pc, #104]	@ (80075d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	fbb2 f3f3 	udiv	r3, r2, r3
 8007574:	4a16      	ldr	r2, [pc, #88]	@ (80075d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007576:	68d2      	ldr	r2, [r2, #12]
 8007578:	0a12      	lsrs	r2, r2, #8
 800757a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800757e:	fb02 f303 	mul.w	r3, r2, r3
 8007582:	617b      	str	r3, [r7, #20]
      break;
 8007584:	e00c      	b.n	80075a0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007586:	4a13      	ldr	r2, [pc, #76]	@ (80075d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	fbb2 f3f3 	udiv	r3, r2, r3
 800758e:	4a10      	ldr	r2, [pc, #64]	@ (80075d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007590:	68d2      	ldr	r2, [r2, #12]
 8007592:	0a12      	lsrs	r2, r2, #8
 8007594:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007598:	fb02 f303 	mul.w	r3, r2, r3
 800759c:	617b      	str	r3, [r7, #20]
      break;
 800759e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80075a0:	4b0b      	ldr	r3, [pc, #44]	@ (80075d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	0e5b      	lsrs	r3, r3, #25
 80075a6:	f003 0303 	and.w	r3, r3, #3
 80075aa:	3301      	adds	r3, #1
 80075ac:	005b      	lsls	r3, r3, #1
 80075ae:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80075b0:	697a      	ldr	r2, [r7, #20]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80075b8:	613b      	str	r3, [r7, #16]
 80075ba:	e001      	b.n	80075c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80075bc:	2300      	movs	r3, #0
 80075be:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80075c0:	693b      	ldr	r3, [r7, #16]
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	371c      	adds	r7, #28
 80075c6:	46bd      	mov	sp, r7
 80075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075cc:	4770      	bx	lr
 80075ce:	bf00      	nop
 80075d0:	40021000 	.word	0x40021000
 80075d4:	00f42400 	.word	0x00f42400
 80075d8:	007a1200 	.word	0x007a1200

080075dc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80075dc:	b480      	push	{r7}
 80075de:	b087      	sub	sp, #28
 80075e0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80075e2:	4b1e      	ldr	r3, [pc, #120]	@ (800765c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80075e4:	68db      	ldr	r3, [r3, #12]
 80075e6:	f003 0303 	and.w	r3, r3, #3
 80075ea:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80075ec:	4b1b      	ldr	r3, [pc, #108]	@ (800765c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80075ee:	68db      	ldr	r3, [r3, #12]
 80075f0:	091b      	lsrs	r3, r3, #4
 80075f2:	f003 030f 	and.w	r3, r3, #15
 80075f6:	3301      	adds	r3, #1
 80075f8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	2b03      	cmp	r3, #3
 80075fe:	d10c      	bne.n	800761a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007600:	4a17      	ldr	r2, [pc, #92]	@ (8007660 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	fbb2 f3f3 	udiv	r3, r2, r3
 8007608:	4a14      	ldr	r2, [pc, #80]	@ (800765c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800760a:	68d2      	ldr	r2, [r2, #12]
 800760c:	0a12      	lsrs	r2, r2, #8
 800760e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007612:	fb02 f303 	mul.w	r3, r2, r3
 8007616:	617b      	str	r3, [r7, #20]
    break;
 8007618:	e00c      	b.n	8007634 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800761a:	4a12      	ldr	r2, [pc, #72]	@ (8007664 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007622:	4a0e      	ldr	r2, [pc, #56]	@ (800765c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007624:	68d2      	ldr	r2, [r2, #12]
 8007626:	0a12      	lsrs	r2, r2, #8
 8007628:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800762c:	fb02 f303 	mul.w	r3, r2, r3
 8007630:	617b      	str	r3, [r7, #20]
    break;
 8007632:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007634:	4b09      	ldr	r3, [pc, #36]	@ (800765c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007636:	68db      	ldr	r3, [r3, #12]
 8007638:	0e5b      	lsrs	r3, r3, #25
 800763a:	f003 0303 	and.w	r3, r3, #3
 800763e:	3301      	adds	r3, #1
 8007640:	005b      	lsls	r3, r3, #1
 8007642:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007644:	697a      	ldr	r2, [r7, #20]
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	fbb2 f3f3 	udiv	r3, r2, r3
 800764c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800764e:	687b      	ldr	r3, [r7, #4]
}
 8007650:	4618      	mov	r0, r3
 8007652:	371c      	adds	r7, #28
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr
 800765c:	40021000 	.word	0x40021000
 8007660:	007a1200 	.word	0x007a1200
 8007664:	00f42400 	.word	0x00f42400

08007668 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b086      	sub	sp, #24
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007670:	2300      	movs	r3, #0
 8007672:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007674:	2300      	movs	r3, #0
 8007676:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007680:	2b00      	cmp	r3, #0
 8007682:	f000 8098 	beq.w	80077b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007686:	2300      	movs	r3, #0
 8007688:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800768a:	4b43      	ldr	r3, [pc, #268]	@ (8007798 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800768c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800768e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007692:	2b00      	cmp	r3, #0
 8007694:	d10d      	bne.n	80076b2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007696:	4b40      	ldr	r3, [pc, #256]	@ (8007798 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007698:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800769a:	4a3f      	ldr	r2, [pc, #252]	@ (8007798 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800769c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80076a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80076a2:	4b3d      	ldr	r3, [pc, #244]	@ (8007798 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80076a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80076aa:	60bb      	str	r3, [r7, #8]
 80076ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80076ae:	2301      	movs	r3, #1
 80076b0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80076b2:	4b3a      	ldr	r3, [pc, #232]	@ (800779c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a39      	ldr	r2, [pc, #228]	@ (800779c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80076b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80076bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80076be:	f7fb f83b 	bl	8002738 <HAL_GetTick>
 80076c2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80076c4:	e009      	b.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80076c6:	f7fb f837 	bl	8002738 <HAL_GetTick>
 80076ca:	4602      	mov	r2, r0
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	1ad3      	subs	r3, r2, r3
 80076d0:	2b02      	cmp	r3, #2
 80076d2:	d902      	bls.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80076d4:	2303      	movs	r3, #3
 80076d6:	74fb      	strb	r3, [r7, #19]
        break;
 80076d8:	e005      	b.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80076da:	4b30      	ldr	r3, [pc, #192]	@ (800779c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d0ef      	beq.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80076e6:	7cfb      	ldrb	r3, [r7, #19]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d159      	bne.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80076ec:	4b2a      	ldr	r3, [pc, #168]	@ (8007798 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80076ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80076f6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d01e      	beq.n	800773c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007702:	697a      	ldr	r2, [r7, #20]
 8007704:	429a      	cmp	r2, r3
 8007706:	d019      	beq.n	800773c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007708:	4b23      	ldr	r3, [pc, #140]	@ (8007798 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800770a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800770e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007712:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007714:	4b20      	ldr	r3, [pc, #128]	@ (8007798 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007716:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800771a:	4a1f      	ldr	r2, [pc, #124]	@ (8007798 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800771c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007720:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007724:	4b1c      	ldr	r3, [pc, #112]	@ (8007798 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007726:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800772a:	4a1b      	ldr	r2, [pc, #108]	@ (8007798 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800772c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007730:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007734:	4a18      	ldr	r2, [pc, #96]	@ (8007798 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	f003 0301 	and.w	r3, r3, #1
 8007742:	2b00      	cmp	r3, #0
 8007744:	d016      	beq.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007746:	f7fa fff7 	bl	8002738 <HAL_GetTick>
 800774a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800774c:	e00b      	b.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800774e:	f7fa fff3 	bl	8002738 <HAL_GetTick>
 8007752:	4602      	mov	r2, r0
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	1ad3      	subs	r3, r2, r3
 8007758:	f241 3288 	movw	r2, #5000	@ 0x1388
 800775c:	4293      	cmp	r3, r2
 800775e:	d902      	bls.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007760:	2303      	movs	r3, #3
 8007762:	74fb      	strb	r3, [r7, #19]
            break;
 8007764:	e006      	b.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007766:	4b0c      	ldr	r3, [pc, #48]	@ (8007798 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007768:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800776c:	f003 0302 	and.w	r3, r3, #2
 8007770:	2b00      	cmp	r3, #0
 8007772:	d0ec      	beq.n	800774e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007774:	7cfb      	ldrb	r3, [r7, #19]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d10b      	bne.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800777a:	4b07      	ldr	r3, [pc, #28]	@ (8007798 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800777c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007780:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007788:	4903      	ldr	r1, [pc, #12]	@ (8007798 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800778a:	4313      	orrs	r3, r2
 800778c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007790:	e008      	b.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007792:	7cfb      	ldrb	r3, [r7, #19]
 8007794:	74bb      	strb	r3, [r7, #18]
 8007796:	e005      	b.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007798:	40021000 	.word	0x40021000
 800779c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077a0:	7cfb      	ldrb	r3, [r7, #19]
 80077a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80077a4:	7c7b      	ldrb	r3, [r7, #17]
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d105      	bne.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80077aa:	4ba7      	ldr	r3, [pc, #668]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077ae:	4aa6      	ldr	r2, [pc, #664]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80077b4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f003 0301 	and.w	r3, r3, #1
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d00a      	beq.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80077c2:	4ba1      	ldr	r3, [pc, #644]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077c8:	f023 0203 	bic.w	r2, r3, #3
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	499d      	ldr	r1, [pc, #628]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077d2:	4313      	orrs	r3, r2
 80077d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f003 0302 	and.w	r3, r3, #2
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d00a      	beq.n	80077fa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80077e4:	4b98      	ldr	r3, [pc, #608]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077ea:	f023 020c 	bic.w	r2, r3, #12
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	4995      	ldr	r1, [pc, #596]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077f4:	4313      	orrs	r3, r2
 80077f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f003 0304 	and.w	r3, r3, #4
 8007802:	2b00      	cmp	r3, #0
 8007804:	d00a      	beq.n	800781c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007806:	4b90      	ldr	r3, [pc, #576]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007808:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800780c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	68db      	ldr	r3, [r3, #12]
 8007814:	498c      	ldr	r1, [pc, #560]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007816:	4313      	orrs	r3, r2
 8007818:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f003 0308 	and.w	r3, r3, #8
 8007824:	2b00      	cmp	r3, #0
 8007826:	d00a      	beq.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007828:	4b87      	ldr	r3, [pc, #540]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800782a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800782e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	691b      	ldr	r3, [r3, #16]
 8007836:	4984      	ldr	r1, [pc, #528]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007838:	4313      	orrs	r3, r2
 800783a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f003 0310 	and.w	r3, r3, #16
 8007846:	2b00      	cmp	r3, #0
 8007848:	d00a      	beq.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800784a:	4b7f      	ldr	r3, [pc, #508]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800784c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007850:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	695b      	ldr	r3, [r3, #20]
 8007858:	497b      	ldr	r1, [pc, #492]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800785a:	4313      	orrs	r3, r2
 800785c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f003 0320 	and.w	r3, r3, #32
 8007868:	2b00      	cmp	r3, #0
 800786a:	d00a      	beq.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800786c:	4b76      	ldr	r3, [pc, #472]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800786e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007872:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	699b      	ldr	r3, [r3, #24]
 800787a:	4973      	ldr	r1, [pc, #460]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800787c:	4313      	orrs	r3, r2
 800787e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800788a:	2b00      	cmp	r3, #0
 800788c:	d00a      	beq.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800788e:	4b6e      	ldr	r3, [pc, #440]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007890:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007894:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	69db      	ldr	r3, [r3, #28]
 800789c:	496a      	ldr	r1, [pc, #424]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800789e:	4313      	orrs	r3, r2
 80078a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d00a      	beq.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80078b0:	4b65      	ldr	r3, [pc, #404]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078b6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6a1b      	ldr	r3, [r3, #32]
 80078be:	4962      	ldr	r1, [pc, #392]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078c0:	4313      	orrs	r3, r2
 80078c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d00a      	beq.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80078d2:	4b5d      	ldr	r3, [pc, #372]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078d8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078e0:	4959      	ldr	r1, [pc, #356]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078e2:	4313      	orrs	r3, r2
 80078e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d00a      	beq.n	800790a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80078f4:	4b54      	ldr	r3, [pc, #336]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80078fa:	f023 0203 	bic.w	r2, r3, #3
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007902:	4951      	ldr	r1, [pc, #324]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007904:	4313      	orrs	r3, r2
 8007906:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007912:	2b00      	cmp	r3, #0
 8007914:	d00a      	beq.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007916:	4b4c      	ldr	r3, [pc, #304]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007918:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800791c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007924:	4948      	ldr	r1, [pc, #288]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007926:	4313      	orrs	r3, r2
 8007928:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007934:	2b00      	cmp	r3, #0
 8007936:	d015      	beq.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007938:	4b43      	ldr	r3, [pc, #268]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800793a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800793e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007946:	4940      	ldr	r1, [pc, #256]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007948:	4313      	orrs	r3, r2
 800794a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007952:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007956:	d105      	bne.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007958:	4b3b      	ldr	r3, [pc, #236]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800795a:	68db      	ldr	r3, [r3, #12]
 800795c:	4a3a      	ldr	r2, [pc, #232]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800795e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007962:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800796c:	2b00      	cmp	r3, #0
 800796e:	d015      	beq.n	800799c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007970:	4b35      	ldr	r3, [pc, #212]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007972:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007976:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800797e:	4932      	ldr	r1, [pc, #200]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007980:	4313      	orrs	r3, r2
 8007982:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800798a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800798e:	d105      	bne.n	800799c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007990:	4b2d      	ldr	r3, [pc, #180]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007992:	68db      	ldr	r3, [r3, #12]
 8007994:	4a2c      	ldr	r2, [pc, #176]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007996:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800799a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d015      	beq.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80079a8:	4b27      	ldr	r3, [pc, #156]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079ae:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079b6:	4924      	ldr	r1, [pc, #144]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079b8:	4313      	orrs	r3, r2
 80079ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80079c6:	d105      	bne.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80079c8:	4b1f      	ldr	r3, [pc, #124]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079ca:	68db      	ldr	r3, [r3, #12]
 80079cc:	4a1e      	ldr	r2, [pc, #120]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80079d2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d015      	beq.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80079e0:	4b19      	ldr	r3, [pc, #100]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079e6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079ee:	4916      	ldr	r1, [pc, #88]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079f0:	4313      	orrs	r3, r2
 80079f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80079fe:	d105      	bne.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007a00:	4b11      	ldr	r3, [pc, #68]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a02:	68db      	ldr	r3, [r3, #12]
 8007a04:	4a10      	ldr	r2, [pc, #64]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007a0a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d019      	beq.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007a18:	4b0b      	ldr	r3, [pc, #44]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a1e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a26:	4908      	ldr	r1, [pc, #32]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a32:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007a36:	d109      	bne.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007a38:	4b03      	ldr	r3, [pc, #12]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a3a:	68db      	ldr	r3, [r3, #12]
 8007a3c:	4a02      	ldr	r2, [pc, #8]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007a42:	60d3      	str	r3, [r2, #12]
 8007a44:	e002      	b.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007a46:	bf00      	nop
 8007a48:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d015      	beq.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007a58:	4b29      	ldr	r3, [pc, #164]	@ (8007b00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a5e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a66:	4926      	ldr	r1, [pc, #152]	@ (8007b00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a72:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a76:	d105      	bne.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007a78:	4b21      	ldr	r3, [pc, #132]	@ (8007b00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007a7a:	68db      	ldr	r3, [r3, #12]
 8007a7c:	4a20      	ldr	r2, [pc, #128]	@ (8007b00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007a7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a82:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d015      	beq.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007a90:	4b1b      	ldr	r3, [pc, #108]	@ (8007b00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a96:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a9e:	4918      	ldr	r1, [pc, #96]	@ (8007b00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007aaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007aae:	d105      	bne.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007ab0:	4b13      	ldr	r3, [pc, #76]	@ (8007b00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007ab2:	68db      	ldr	r3, [r3, #12]
 8007ab4:	4a12      	ldr	r2, [pc, #72]	@ (8007b00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007ab6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007aba:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d015      	beq.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007ac8:	4b0d      	ldr	r3, [pc, #52]	@ (8007b00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007aca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007ace:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ad6:	490a      	ldr	r1, [pc, #40]	@ (8007b00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ae2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007ae6:	d105      	bne.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007ae8:	4b05      	ldr	r3, [pc, #20]	@ (8007b00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007aea:	68db      	ldr	r3, [r3, #12]
 8007aec:	4a04      	ldr	r2, [pc, #16]	@ (8007b00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007aee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007af2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007af4:	7cbb      	ldrb	r3, [r7, #18]
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3718      	adds	r7, #24
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}
 8007afe:	bf00      	nop
 8007b00:	40021000 	.word	0x40021000

08007b04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b082      	sub	sp, #8
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d101      	bne.n	8007b16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b12:	2301      	movs	r3, #1
 8007b14:	e049      	b.n	8007baa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b1c:	b2db      	uxtb	r3, r3
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d106      	bne.n	8007b30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2200      	movs	r2, #0
 8007b26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f7fa f9e8 	bl	8001f00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2202      	movs	r2, #2
 8007b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	3304      	adds	r3, #4
 8007b40:	4619      	mov	r1, r3
 8007b42:	4610      	mov	r0, r2
 8007b44:	f001 fe08 	bl	8009758 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2201      	movs	r2, #1
 8007b54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2201      	movs	r2, #1
 8007b64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2201      	movs	r2, #1
 8007b74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2201      	movs	r2, #1
 8007b84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2201      	movs	r2, #1
 8007b94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007ba8:	2300      	movs	r3, #0
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3708      	adds	r7, #8
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
	...

08007bb4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b085      	sub	sp, #20
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007bc2:	b2db      	uxtb	r3, r3
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d001      	beq.n	8007bcc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007bc8:	2301      	movs	r3, #1
 8007bca:	e04c      	b.n	8007c66 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2202      	movs	r2, #2
 8007bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a26      	ldr	r2, [pc, #152]	@ (8007c74 <HAL_TIM_Base_Start+0xc0>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d022      	beq.n	8007c24 <HAL_TIM_Base_Start+0x70>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007be6:	d01d      	beq.n	8007c24 <HAL_TIM_Base_Start+0x70>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a22      	ldr	r2, [pc, #136]	@ (8007c78 <HAL_TIM_Base_Start+0xc4>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d018      	beq.n	8007c24 <HAL_TIM_Base_Start+0x70>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a21      	ldr	r2, [pc, #132]	@ (8007c7c <HAL_TIM_Base_Start+0xc8>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d013      	beq.n	8007c24 <HAL_TIM_Base_Start+0x70>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a1f      	ldr	r2, [pc, #124]	@ (8007c80 <HAL_TIM_Base_Start+0xcc>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d00e      	beq.n	8007c24 <HAL_TIM_Base_Start+0x70>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a1e      	ldr	r2, [pc, #120]	@ (8007c84 <HAL_TIM_Base_Start+0xd0>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d009      	beq.n	8007c24 <HAL_TIM_Base_Start+0x70>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a1c      	ldr	r2, [pc, #112]	@ (8007c88 <HAL_TIM_Base_Start+0xd4>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d004      	beq.n	8007c24 <HAL_TIM_Base_Start+0x70>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a1b      	ldr	r2, [pc, #108]	@ (8007c8c <HAL_TIM_Base_Start+0xd8>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d115      	bne.n	8007c50 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	689a      	ldr	r2, [r3, #8]
 8007c2a:	4b19      	ldr	r3, [pc, #100]	@ (8007c90 <HAL_TIM_Base_Start+0xdc>)
 8007c2c:	4013      	ands	r3, r2
 8007c2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2b06      	cmp	r3, #6
 8007c34:	d015      	beq.n	8007c62 <HAL_TIM_Base_Start+0xae>
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c3c:	d011      	beq.n	8007c62 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f042 0201 	orr.w	r2, r2, #1
 8007c4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c4e:	e008      	b.n	8007c62 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	681a      	ldr	r2, [r3, #0]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f042 0201 	orr.w	r2, r2, #1
 8007c5e:	601a      	str	r2, [r3, #0]
 8007c60:	e000      	b.n	8007c64 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c62:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007c64:	2300      	movs	r3, #0
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3714      	adds	r7, #20
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c70:	4770      	bx	lr
 8007c72:	bf00      	nop
 8007c74:	40012c00 	.word	0x40012c00
 8007c78:	40000400 	.word	0x40000400
 8007c7c:	40000800 	.word	0x40000800
 8007c80:	40000c00 	.word	0x40000c00
 8007c84:	40013400 	.word	0x40013400
 8007c88:	40014000 	.word	0x40014000
 8007c8c:	40015000 	.word	0x40015000
 8007c90:	00010007 	.word	0x00010007

08007c94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b085      	sub	sp, #20
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ca2:	b2db      	uxtb	r3, r3
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d001      	beq.n	8007cac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007ca8:	2301      	movs	r3, #1
 8007caa:	e054      	b.n	8007d56 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2202      	movs	r2, #2
 8007cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	68da      	ldr	r2, [r3, #12]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f042 0201 	orr.w	r2, r2, #1
 8007cc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4a26      	ldr	r2, [pc, #152]	@ (8007d64 <HAL_TIM_Base_Start_IT+0xd0>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d022      	beq.n	8007d14 <HAL_TIM_Base_Start_IT+0x80>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cd6:	d01d      	beq.n	8007d14 <HAL_TIM_Base_Start_IT+0x80>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a22      	ldr	r2, [pc, #136]	@ (8007d68 <HAL_TIM_Base_Start_IT+0xd4>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d018      	beq.n	8007d14 <HAL_TIM_Base_Start_IT+0x80>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a21      	ldr	r2, [pc, #132]	@ (8007d6c <HAL_TIM_Base_Start_IT+0xd8>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d013      	beq.n	8007d14 <HAL_TIM_Base_Start_IT+0x80>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a1f      	ldr	r2, [pc, #124]	@ (8007d70 <HAL_TIM_Base_Start_IT+0xdc>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d00e      	beq.n	8007d14 <HAL_TIM_Base_Start_IT+0x80>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a1e      	ldr	r2, [pc, #120]	@ (8007d74 <HAL_TIM_Base_Start_IT+0xe0>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d009      	beq.n	8007d14 <HAL_TIM_Base_Start_IT+0x80>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a1c      	ldr	r2, [pc, #112]	@ (8007d78 <HAL_TIM_Base_Start_IT+0xe4>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d004      	beq.n	8007d14 <HAL_TIM_Base_Start_IT+0x80>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4a1b      	ldr	r2, [pc, #108]	@ (8007d7c <HAL_TIM_Base_Start_IT+0xe8>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d115      	bne.n	8007d40 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	689a      	ldr	r2, [r3, #8]
 8007d1a:	4b19      	ldr	r3, [pc, #100]	@ (8007d80 <HAL_TIM_Base_Start_IT+0xec>)
 8007d1c:	4013      	ands	r3, r2
 8007d1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2b06      	cmp	r3, #6
 8007d24:	d015      	beq.n	8007d52 <HAL_TIM_Base_Start_IT+0xbe>
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d2c:	d011      	beq.n	8007d52 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	681a      	ldr	r2, [r3, #0]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f042 0201 	orr.w	r2, r2, #1
 8007d3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d3e:	e008      	b.n	8007d52 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	681a      	ldr	r2, [r3, #0]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f042 0201 	orr.w	r2, r2, #1
 8007d4e:	601a      	str	r2, [r3, #0]
 8007d50:	e000      	b.n	8007d54 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d52:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007d54:	2300      	movs	r3, #0
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3714      	adds	r7, #20
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d60:	4770      	bx	lr
 8007d62:	bf00      	nop
 8007d64:	40012c00 	.word	0x40012c00
 8007d68:	40000400 	.word	0x40000400
 8007d6c:	40000800 	.word	0x40000800
 8007d70:	40000c00 	.word	0x40000c00
 8007d74:	40013400 	.word	0x40013400
 8007d78:	40014000 	.word	0x40014000
 8007d7c:	40015000 	.word	0x40015000
 8007d80:	00010007 	.word	0x00010007

08007d84 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b082      	sub	sp, #8
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d101      	bne.n	8007d96 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007d92:	2301      	movs	r3, #1
 8007d94:	e049      	b.n	8007e2a <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d9c:	b2db      	uxtb	r3, r3
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d106      	bne.n	8007db0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2200      	movs	r2, #0
 8007da6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 f841 	bl	8007e32 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2202      	movs	r2, #2
 8007db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681a      	ldr	r2, [r3, #0]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	3304      	adds	r3, #4
 8007dc0:	4619      	mov	r1, r3
 8007dc2:	4610      	mov	r0, r2
 8007dc4:	f001 fcc8 	bl	8009758 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2201      	movs	r2, #1
 8007dcc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2201      	movs	r2, #1
 8007ddc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2201      	movs	r2, #1
 8007de4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2201      	movs	r2, #1
 8007dec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2201      	movs	r2, #1
 8007df4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2201      	movs	r2, #1
 8007e04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2201      	movs	r2, #1
 8007e14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2201      	movs	r2, #1
 8007e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007e28:	2300      	movs	r3, #0
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3708      	adds	r7, #8
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}

08007e32 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8007e32:	b480      	push	{r7}
 8007e34:	b083      	sub	sp, #12
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8007e3a:	bf00      	nop
 8007e3c:	370c      	adds	r7, #12
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e44:	4770      	bx	lr
	...

08007e48 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b084      	sub	sp, #16
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d109      	bne.n	8007e6c <HAL_TIM_OC_Start+0x24>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007e5e:	b2db      	uxtb	r3, r3
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	bf14      	ite	ne
 8007e64:	2301      	movne	r3, #1
 8007e66:	2300      	moveq	r3, #0
 8007e68:	b2db      	uxtb	r3, r3
 8007e6a:	e03c      	b.n	8007ee6 <HAL_TIM_OC_Start+0x9e>
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	2b04      	cmp	r3, #4
 8007e70:	d109      	bne.n	8007e86 <HAL_TIM_OC_Start+0x3e>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007e78:	b2db      	uxtb	r3, r3
 8007e7a:	2b01      	cmp	r3, #1
 8007e7c:	bf14      	ite	ne
 8007e7e:	2301      	movne	r3, #1
 8007e80:	2300      	moveq	r3, #0
 8007e82:	b2db      	uxtb	r3, r3
 8007e84:	e02f      	b.n	8007ee6 <HAL_TIM_OC_Start+0x9e>
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	2b08      	cmp	r3, #8
 8007e8a:	d109      	bne.n	8007ea0 <HAL_TIM_OC_Start+0x58>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	bf14      	ite	ne
 8007e98:	2301      	movne	r3, #1
 8007e9a:	2300      	moveq	r3, #0
 8007e9c:	b2db      	uxtb	r3, r3
 8007e9e:	e022      	b.n	8007ee6 <HAL_TIM_OC_Start+0x9e>
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	2b0c      	cmp	r3, #12
 8007ea4:	d109      	bne.n	8007eba <HAL_TIM_OC_Start+0x72>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007eac:	b2db      	uxtb	r3, r3
 8007eae:	2b01      	cmp	r3, #1
 8007eb0:	bf14      	ite	ne
 8007eb2:	2301      	movne	r3, #1
 8007eb4:	2300      	moveq	r3, #0
 8007eb6:	b2db      	uxtb	r3, r3
 8007eb8:	e015      	b.n	8007ee6 <HAL_TIM_OC_Start+0x9e>
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	2b10      	cmp	r3, #16
 8007ebe:	d109      	bne.n	8007ed4 <HAL_TIM_OC_Start+0x8c>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007ec6:	b2db      	uxtb	r3, r3
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	bf14      	ite	ne
 8007ecc:	2301      	movne	r3, #1
 8007ece:	2300      	moveq	r3, #0
 8007ed0:	b2db      	uxtb	r3, r3
 8007ed2:	e008      	b.n	8007ee6 <HAL_TIM_OC_Start+0x9e>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007eda:	b2db      	uxtb	r3, r3
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	bf14      	ite	ne
 8007ee0:	2301      	movne	r3, #1
 8007ee2:	2300      	moveq	r3, #0
 8007ee4:	b2db      	uxtb	r3, r3
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d001      	beq.n	8007eee <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 8007eea:	2301      	movs	r3, #1
 8007eec:	e0a6      	b.n	800803c <HAL_TIM_OC_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d104      	bne.n	8007efe <HAL_TIM_OC_Start+0xb6>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2202      	movs	r2, #2
 8007ef8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007efc:	e023      	b.n	8007f46 <HAL_TIM_OC_Start+0xfe>
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	2b04      	cmp	r3, #4
 8007f02:	d104      	bne.n	8007f0e <HAL_TIM_OC_Start+0xc6>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2202      	movs	r2, #2
 8007f08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007f0c:	e01b      	b.n	8007f46 <HAL_TIM_OC_Start+0xfe>
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	2b08      	cmp	r3, #8
 8007f12:	d104      	bne.n	8007f1e <HAL_TIM_OC_Start+0xd6>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2202      	movs	r2, #2
 8007f18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007f1c:	e013      	b.n	8007f46 <HAL_TIM_OC_Start+0xfe>
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	2b0c      	cmp	r3, #12
 8007f22:	d104      	bne.n	8007f2e <HAL_TIM_OC_Start+0xe6>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2202      	movs	r2, #2
 8007f28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007f2c:	e00b      	b.n	8007f46 <HAL_TIM_OC_Start+0xfe>
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	2b10      	cmp	r3, #16
 8007f32:	d104      	bne.n	8007f3e <HAL_TIM_OC_Start+0xf6>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2202      	movs	r2, #2
 8007f38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007f3c:	e003      	b.n	8007f46 <HAL_TIM_OC_Start+0xfe>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2202      	movs	r2, #2
 8007f42:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	6839      	ldr	r1, [r7, #0]
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f002 fa86 	bl	800a460 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a3a      	ldr	r2, [pc, #232]	@ (8008044 <HAL_TIM_OC_Start+0x1fc>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d018      	beq.n	8007f90 <HAL_TIM_OC_Start+0x148>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a39      	ldr	r2, [pc, #228]	@ (8008048 <HAL_TIM_OC_Start+0x200>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d013      	beq.n	8007f90 <HAL_TIM_OC_Start+0x148>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a37      	ldr	r2, [pc, #220]	@ (800804c <HAL_TIM_OC_Start+0x204>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d00e      	beq.n	8007f90 <HAL_TIM_OC_Start+0x148>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4a36      	ldr	r2, [pc, #216]	@ (8008050 <HAL_TIM_OC_Start+0x208>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d009      	beq.n	8007f90 <HAL_TIM_OC_Start+0x148>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a34      	ldr	r2, [pc, #208]	@ (8008054 <HAL_TIM_OC_Start+0x20c>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d004      	beq.n	8007f90 <HAL_TIM_OC_Start+0x148>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a33      	ldr	r2, [pc, #204]	@ (8008058 <HAL_TIM_OC_Start+0x210>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d101      	bne.n	8007f94 <HAL_TIM_OC_Start+0x14c>
 8007f90:	2301      	movs	r3, #1
 8007f92:	e000      	b.n	8007f96 <HAL_TIM_OC_Start+0x14e>
 8007f94:	2300      	movs	r3, #0
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d007      	beq.n	8007faa <HAL_TIM_OC_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007fa8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4a25      	ldr	r2, [pc, #148]	@ (8008044 <HAL_TIM_OC_Start+0x1fc>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d022      	beq.n	8007ffa <HAL_TIM_OC_Start+0x1b2>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fbc:	d01d      	beq.n	8007ffa <HAL_TIM_OC_Start+0x1b2>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a26      	ldr	r2, [pc, #152]	@ (800805c <HAL_TIM_OC_Start+0x214>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d018      	beq.n	8007ffa <HAL_TIM_OC_Start+0x1b2>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a24      	ldr	r2, [pc, #144]	@ (8008060 <HAL_TIM_OC_Start+0x218>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d013      	beq.n	8007ffa <HAL_TIM_OC_Start+0x1b2>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a23      	ldr	r2, [pc, #140]	@ (8008064 <HAL_TIM_OC_Start+0x21c>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d00e      	beq.n	8007ffa <HAL_TIM_OC_Start+0x1b2>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4a19      	ldr	r2, [pc, #100]	@ (8008048 <HAL_TIM_OC_Start+0x200>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d009      	beq.n	8007ffa <HAL_TIM_OC_Start+0x1b2>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4a18      	ldr	r2, [pc, #96]	@ (800804c <HAL_TIM_OC_Start+0x204>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d004      	beq.n	8007ffa <HAL_TIM_OC_Start+0x1b2>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4a18      	ldr	r2, [pc, #96]	@ (8008058 <HAL_TIM_OC_Start+0x210>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d115      	bne.n	8008026 <HAL_TIM_OC_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	689a      	ldr	r2, [r3, #8]
 8008000:	4b19      	ldr	r3, [pc, #100]	@ (8008068 <HAL_TIM_OC_Start+0x220>)
 8008002:	4013      	ands	r3, r2
 8008004:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2b06      	cmp	r3, #6
 800800a:	d015      	beq.n	8008038 <HAL_TIM_OC_Start+0x1f0>
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008012:	d011      	beq.n	8008038 <HAL_TIM_OC_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f042 0201 	orr.w	r2, r2, #1
 8008022:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008024:	e008      	b.n	8008038 <HAL_TIM_OC_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	681a      	ldr	r2, [r3, #0]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f042 0201 	orr.w	r2, r2, #1
 8008034:	601a      	str	r2, [r3, #0]
 8008036:	e000      	b.n	800803a <HAL_TIM_OC_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008038:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800803a:	2300      	movs	r3, #0
}
 800803c:	4618      	mov	r0, r3
 800803e:	3710      	adds	r7, #16
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}
 8008044:	40012c00 	.word	0x40012c00
 8008048:	40013400 	.word	0x40013400
 800804c:	40014000 	.word	0x40014000
 8008050:	40014400 	.word	0x40014400
 8008054:	40014800 	.word	0x40014800
 8008058:	40015000 	.word	0x40015000
 800805c:	40000400 	.word	0x40000400
 8008060:	40000800 	.word	0x40000800
 8008064:	40000c00 	.word	0x40000c00
 8008068:	00010007 	.word	0x00010007

0800806c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b082      	sub	sp, #8
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d101      	bne.n	800807e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800807a:	2301      	movs	r3, #1
 800807c:	e049      	b.n	8008112 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008084:	b2db      	uxtb	r3, r3
 8008086:	2b00      	cmp	r3, #0
 8008088:	d106      	bne.n	8008098 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2200      	movs	r2, #0
 800808e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f000 f841 	bl	800811a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2202      	movs	r2, #2
 800809c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681a      	ldr	r2, [r3, #0]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	3304      	adds	r3, #4
 80080a8:	4619      	mov	r1, r3
 80080aa:	4610      	mov	r0, r2
 80080ac:	f001 fb54 	bl	8009758 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2201      	movs	r2, #1
 80080b4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2201      	movs	r2, #1
 80080bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2201      	movs	r2, #1
 80080c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2201      	movs	r2, #1
 80080cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2201      	movs	r2, #1
 80080d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2201      	movs	r2, #1
 80080dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2201      	movs	r2, #1
 80080e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2201      	movs	r2, #1
 80080ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2201      	movs	r2, #1
 80080f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2201      	movs	r2, #1
 80080fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2201      	movs	r2, #1
 8008104:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2201      	movs	r2, #1
 800810c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008110:	2300      	movs	r3, #0
}
 8008112:	4618      	mov	r0, r3
 8008114:	3708      	adds	r7, #8
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}

0800811a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800811a:	b480      	push	{r7}
 800811c:	b083      	sub	sp, #12
 800811e:	af00      	add	r7, sp, #0
 8008120:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008122:	bf00      	nop
 8008124:	370c      	adds	r7, #12
 8008126:	46bd      	mov	sp, r7
 8008128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812c:	4770      	bx	lr
	...

08008130 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b084      	sub	sp, #16
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
 8008138:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d109      	bne.n	8008154 <HAL_TIM_PWM_Start+0x24>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008146:	b2db      	uxtb	r3, r3
 8008148:	2b01      	cmp	r3, #1
 800814a:	bf14      	ite	ne
 800814c:	2301      	movne	r3, #1
 800814e:	2300      	moveq	r3, #0
 8008150:	b2db      	uxtb	r3, r3
 8008152:	e03c      	b.n	80081ce <HAL_TIM_PWM_Start+0x9e>
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	2b04      	cmp	r3, #4
 8008158:	d109      	bne.n	800816e <HAL_TIM_PWM_Start+0x3e>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008160:	b2db      	uxtb	r3, r3
 8008162:	2b01      	cmp	r3, #1
 8008164:	bf14      	ite	ne
 8008166:	2301      	movne	r3, #1
 8008168:	2300      	moveq	r3, #0
 800816a:	b2db      	uxtb	r3, r3
 800816c:	e02f      	b.n	80081ce <HAL_TIM_PWM_Start+0x9e>
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	2b08      	cmp	r3, #8
 8008172:	d109      	bne.n	8008188 <HAL_TIM_PWM_Start+0x58>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800817a:	b2db      	uxtb	r3, r3
 800817c:	2b01      	cmp	r3, #1
 800817e:	bf14      	ite	ne
 8008180:	2301      	movne	r3, #1
 8008182:	2300      	moveq	r3, #0
 8008184:	b2db      	uxtb	r3, r3
 8008186:	e022      	b.n	80081ce <HAL_TIM_PWM_Start+0x9e>
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	2b0c      	cmp	r3, #12
 800818c:	d109      	bne.n	80081a2 <HAL_TIM_PWM_Start+0x72>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008194:	b2db      	uxtb	r3, r3
 8008196:	2b01      	cmp	r3, #1
 8008198:	bf14      	ite	ne
 800819a:	2301      	movne	r3, #1
 800819c:	2300      	moveq	r3, #0
 800819e:	b2db      	uxtb	r3, r3
 80081a0:	e015      	b.n	80081ce <HAL_TIM_PWM_Start+0x9e>
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	2b10      	cmp	r3, #16
 80081a6:	d109      	bne.n	80081bc <HAL_TIM_PWM_Start+0x8c>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80081ae:	b2db      	uxtb	r3, r3
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	bf14      	ite	ne
 80081b4:	2301      	movne	r3, #1
 80081b6:	2300      	moveq	r3, #0
 80081b8:	b2db      	uxtb	r3, r3
 80081ba:	e008      	b.n	80081ce <HAL_TIM_PWM_Start+0x9e>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80081c2:	b2db      	uxtb	r3, r3
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	bf14      	ite	ne
 80081c8:	2301      	movne	r3, #1
 80081ca:	2300      	moveq	r3, #0
 80081cc:	b2db      	uxtb	r3, r3
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d001      	beq.n	80081d6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80081d2:	2301      	movs	r3, #1
 80081d4:	e0a6      	b.n	8008324 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d104      	bne.n	80081e6 <HAL_TIM_PWM_Start+0xb6>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2202      	movs	r2, #2
 80081e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80081e4:	e023      	b.n	800822e <HAL_TIM_PWM_Start+0xfe>
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	2b04      	cmp	r3, #4
 80081ea:	d104      	bne.n	80081f6 <HAL_TIM_PWM_Start+0xc6>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2202      	movs	r2, #2
 80081f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80081f4:	e01b      	b.n	800822e <HAL_TIM_PWM_Start+0xfe>
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	2b08      	cmp	r3, #8
 80081fa:	d104      	bne.n	8008206 <HAL_TIM_PWM_Start+0xd6>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2202      	movs	r2, #2
 8008200:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008204:	e013      	b.n	800822e <HAL_TIM_PWM_Start+0xfe>
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	2b0c      	cmp	r3, #12
 800820a:	d104      	bne.n	8008216 <HAL_TIM_PWM_Start+0xe6>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2202      	movs	r2, #2
 8008210:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008214:	e00b      	b.n	800822e <HAL_TIM_PWM_Start+0xfe>
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	2b10      	cmp	r3, #16
 800821a:	d104      	bne.n	8008226 <HAL_TIM_PWM_Start+0xf6>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2202      	movs	r2, #2
 8008220:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008224:	e003      	b.n	800822e <HAL_TIM_PWM_Start+0xfe>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2202      	movs	r2, #2
 800822a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	2201      	movs	r2, #1
 8008234:	6839      	ldr	r1, [r7, #0]
 8008236:	4618      	mov	r0, r3
 8008238:	f002 f912 	bl	800a460 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a3a      	ldr	r2, [pc, #232]	@ (800832c <HAL_TIM_PWM_Start+0x1fc>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d018      	beq.n	8008278 <HAL_TIM_PWM_Start+0x148>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a39      	ldr	r2, [pc, #228]	@ (8008330 <HAL_TIM_PWM_Start+0x200>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d013      	beq.n	8008278 <HAL_TIM_PWM_Start+0x148>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a37      	ldr	r2, [pc, #220]	@ (8008334 <HAL_TIM_PWM_Start+0x204>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d00e      	beq.n	8008278 <HAL_TIM_PWM_Start+0x148>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4a36      	ldr	r2, [pc, #216]	@ (8008338 <HAL_TIM_PWM_Start+0x208>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d009      	beq.n	8008278 <HAL_TIM_PWM_Start+0x148>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4a34      	ldr	r2, [pc, #208]	@ (800833c <HAL_TIM_PWM_Start+0x20c>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d004      	beq.n	8008278 <HAL_TIM_PWM_Start+0x148>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4a33      	ldr	r2, [pc, #204]	@ (8008340 <HAL_TIM_PWM_Start+0x210>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d101      	bne.n	800827c <HAL_TIM_PWM_Start+0x14c>
 8008278:	2301      	movs	r3, #1
 800827a:	e000      	b.n	800827e <HAL_TIM_PWM_Start+0x14e>
 800827c:	2300      	movs	r3, #0
 800827e:	2b00      	cmp	r3, #0
 8008280:	d007      	beq.n	8008292 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008290:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a25      	ldr	r2, [pc, #148]	@ (800832c <HAL_TIM_PWM_Start+0x1fc>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d022      	beq.n	80082e2 <HAL_TIM_PWM_Start+0x1b2>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082a4:	d01d      	beq.n	80082e2 <HAL_TIM_PWM_Start+0x1b2>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a26      	ldr	r2, [pc, #152]	@ (8008344 <HAL_TIM_PWM_Start+0x214>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d018      	beq.n	80082e2 <HAL_TIM_PWM_Start+0x1b2>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4a24      	ldr	r2, [pc, #144]	@ (8008348 <HAL_TIM_PWM_Start+0x218>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d013      	beq.n	80082e2 <HAL_TIM_PWM_Start+0x1b2>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4a23      	ldr	r2, [pc, #140]	@ (800834c <HAL_TIM_PWM_Start+0x21c>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d00e      	beq.n	80082e2 <HAL_TIM_PWM_Start+0x1b2>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4a19      	ldr	r2, [pc, #100]	@ (8008330 <HAL_TIM_PWM_Start+0x200>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d009      	beq.n	80082e2 <HAL_TIM_PWM_Start+0x1b2>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4a18      	ldr	r2, [pc, #96]	@ (8008334 <HAL_TIM_PWM_Start+0x204>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d004      	beq.n	80082e2 <HAL_TIM_PWM_Start+0x1b2>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a18      	ldr	r2, [pc, #96]	@ (8008340 <HAL_TIM_PWM_Start+0x210>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d115      	bne.n	800830e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	689a      	ldr	r2, [r3, #8]
 80082e8:	4b19      	ldr	r3, [pc, #100]	@ (8008350 <HAL_TIM_PWM_Start+0x220>)
 80082ea:	4013      	ands	r3, r2
 80082ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	2b06      	cmp	r3, #6
 80082f2:	d015      	beq.n	8008320 <HAL_TIM_PWM_Start+0x1f0>
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082fa:	d011      	beq.n	8008320 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f042 0201 	orr.w	r2, r2, #1
 800830a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800830c:	e008      	b.n	8008320 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	681a      	ldr	r2, [r3, #0]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f042 0201 	orr.w	r2, r2, #1
 800831c:	601a      	str	r2, [r3, #0]
 800831e:	e000      	b.n	8008322 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008320:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008322:	2300      	movs	r3, #0
}
 8008324:	4618      	mov	r0, r3
 8008326:	3710      	adds	r7, #16
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}
 800832c:	40012c00 	.word	0x40012c00
 8008330:	40013400 	.word	0x40013400
 8008334:	40014000 	.word	0x40014000
 8008338:	40014400 	.word	0x40014400
 800833c:	40014800 	.word	0x40014800
 8008340:	40015000 	.word	0x40015000
 8008344:	40000400 	.word	0x40000400
 8008348:	40000800 	.word	0x40000800
 800834c:	40000c00 	.word	0x40000c00
 8008350:	00010007 	.word	0x00010007

08008354 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b086      	sub	sp, #24
 8008358:	af00      	add	r7, sp, #0
 800835a:	60f8      	str	r0, [r7, #12]
 800835c:	60b9      	str	r1, [r7, #8]
 800835e:	607a      	str	r2, [r7, #4]
 8008360:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8008362:	2300      	movs	r3, #0
 8008364:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d109      	bne.n	8008380 <HAL_TIM_PWM_Start_DMA+0x2c>
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008372:	b2db      	uxtb	r3, r3
 8008374:	2b02      	cmp	r3, #2
 8008376:	bf0c      	ite	eq
 8008378:	2301      	moveq	r3, #1
 800837a:	2300      	movne	r3, #0
 800837c:	b2db      	uxtb	r3, r3
 800837e:	e03c      	b.n	80083fa <HAL_TIM_PWM_Start_DMA+0xa6>
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	2b04      	cmp	r3, #4
 8008384:	d109      	bne.n	800839a <HAL_TIM_PWM_Start_DMA+0x46>
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800838c:	b2db      	uxtb	r3, r3
 800838e:	2b02      	cmp	r3, #2
 8008390:	bf0c      	ite	eq
 8008392:	2301      	moveq	r3, #1
 8008394:	2300      	movne	r3, #0
 8008396:	b2db      	uxtb	r3, r3
 8008398:	e02f      	b.n	80083fa <HAL_TIM_PWM_Start_DMA+0xa6>
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	2b08      	cmp	r3, #8
 800839e:	d109      	bne.n	80083b4 <HAL_TIM_PWM_Start_DMA+0x60>
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80083a6:	b2db      	uxtb	r3, r3
 80083a8:	2b02      	cmp	r3, #2
 80083aa:	bf0c      	ite	eq
 80083ac:	2301      	moveq	r3, #1
 80083ae:	2300      	movne	r3, #0
 80083b0:	b2db      	uxtb	r3, r3
 80083b2:	e022      	b.n	80083fa <HAL_TIM_PWM_Start_DMA+0xa6>
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	2b0c      	cmp	r3, #12
 80083b8:	d109      	bne.n	80083ce <HAL_TIM_PWM_Start_DMA+0x7a>
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80083c0:	b2db      	uxtb	r3, r3
 80083c2:	2b02      	cmp	r3, #2
 80083c4:	bf0c      	ite	eq
 80083c6:	2301      	moveq	r3, #1
 80083c8:	2300      	movne	r3, #0
 80083ca:	b2db      	uxtb	r3, r3
 80083cc:	e015      	b.n	80083fa <HAL_TIM_PWM_Start_DMA+0xa6>
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	2b10      	cmp	r3, #16
 80083d2:	d109      	bne.n	80083e8 <HAL_TIM_PWM_Start_DMA+0x94>
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80083da:	b2db      	uxtb	r3, r3
 80083dc:	2b02      	cmp	r3, #2
 80083de:	bf0c      	ite	eq
 80083e0:	2301      	moveq	r3, #1
 80083e2:	2300      	movne	r3, #0
 80083e4:	b2db      	uxtb	r3, r3
 80083e6:	e008      	b.n	80083fa <HAL_TIM_PWM_Start_DMA+0xa6>
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80083ee:	b2db      	uxtb	r3, r3
 80083f0:	2b02      	cmp	r3, #2
 80083f2:	bf0c      	ite	eq
 80083f4:	2301      	moveq	r3, #1
 80083f6:	2300      	movne	r3, #0
 80083f8:	b2db      	uxtb	r3, r3
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d001      	beq.n	8008402 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 80083fe:	2302      	movs	r3, #2
 8008400:	e1b5      	b.n	800876e <HAL_TIM_PWM_Start_DMA+0x41a>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d109      	bne.n	800841c <HAL_TIM_PWM_Start_DMA+0xc8>
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800840e:	b2db      	uxtb	r3, r3
 8008410:	2b01      	cmp	r3, #1
 8008412:	bf0c      	ite	eq
 8008414:	2301      	moveq	r3, #1
 8008416:	2300      	movne	r3, #0
 8008418:	b2db      	uxtb	r3, r3
 800841a:	e03c      	b.n	8008496 <HAL_TIM_PWM_Start_DMA+0x142>
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	2b04      	cmp	r3, #4
 8008420:	d109      	bne.n	8008436 <HAL_TIM_PWM_Start_DMA+0xe2>
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008428:	b2db      	uxtb	r3, r3
 800842a:	2b01      	cmp	r3, #1
 800842c:	bf0c      	ite	eq
 800842e:	2301      	moveq	r3, #1
 8008430:	2300      	movne	r3, #0
 8008432:	b2db      	uxtb	r3, r3
 8008434:	e02f      	b.n	8008496 <HAL_TIM_PWM_Start_DMA+0x142>
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	2b08      	cmp	r3, #8
 800843a:	d109      	bne.n	8008450 <HAL_TIM_PWM_Start_DMA+0xfc>
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008442:	b2db      	uxtb	r3, r3
 8008444:	2b01      	cmp	r3, #1
 8008446:	bf0c      	ite	eq
 8008448:	2301      	moveq	r3, #1
 800844a:	2300      	movne	r3, #0
 800844c:	b2db      	uxtb	r3, r3
 800844e:	e022      	b.n	8008496 <HAL_TIM_PWM_Start_DMA+0x142>
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	2b0c      	cmp	r3, #12
 8008454:	d109      	bne.n	800846a <HAL_TIM_PWM_Start_DMA+0x116>
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800845c:	b2db      	uxtb	r3, r3
 800845e:	2b01      	cmp	r3, #1
 8008460:	bf0c      	ite	eq
 8008462:	2301      	moveq	r3, #1
 8008464:	2300      	movne	r3, #0
 8008466:	b2db      	uxtb	r3, r3
 8008468:	e015      	b.n	8008496 <HAL_TIM_PWM_Start_DMA+0x142>
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	2b10      	cmp	r3, #16
 800846e:	d109      	bne.n	8008484 <HAL_TIM_PWM_Start_DMA+0x130>
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008476:	b2db      	uxtb	r3, r3
 8008478:	2b01      	cmp	r3, #1
 800847a:	bf0c      	ite	eq
 800847c:	2301      	moveq	r3, #1
 800847e:	2300      	movne	r3, #0
 8008480:	b2db      	uxtb	r3, r3
 8008482:	e008      	b.n	8008496 <HAL_TIM_PWM_Start_DMA+0x142>
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800848a:	b2db      	uxtb	r3, r3
 800848c:	2b01      	cmp	r3, #1
 800848e:	bf0c      	ite	eq
 8008490:	2301      	moveq	r3, #1
 8008492:	2300      	movne	r3, #0
 8008494:	b2db      	uxtb	r3, r3
 8008496:	2b00      	cmp	r3, #0
 8008498:	d034      	beq.n	8008504 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d002      	beq.n	80084a6 <HAL_TIM_PWM_Start_DMA+0x152>
 80084a0:	887b      	ldrh	r3, [r7, #2]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d101      	bne.n	80084aa <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 80084a6:	2301      	movs	r3, #1
 80084a8:	e161      	b.n	800876e <HAL_TIM_PWM_Start_DMA+0x41a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d104      	bne.n	80084ba <HAL_TIM_PWM_Start_DMA+0x166>
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	2202      	movs	r2, #2
 80084b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80084b8:	e026      	b.n	8008508 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	2b04      	cmp	r3, #4
 80084be:	d104      	bne.n	80084ca <HAL_TIM_PWM_Start_DMA+0x176>
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2202      	movs	r2, #2
 80084c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80084c8:	e01e      	b.n	8008508 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	2b08      	cmp	r3, #8
 80084ce:	d104      	bne.n	80084da <HAL_TIM_PWM_Start_DMA+0x186>
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2202      	movs	r2, #2
 80084d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80084d8:	e016      	b.n	8008508 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	2b0c      	cmp	r3, #12
 80084de:	d104      	bne.n	80084ea <HAL_TIM_PWM_Start_DMA+0x196>
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	2202      	movs	r2, #2
 80084e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80084e8:	e00e      	b.n	8008508 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	2b10      	cmp	r3, #16
 80084ee:	d104      	bne.n	80084fa <HAL_TIM_PWM_Start_DMA+0x1a6>
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	2202      	movs	r2, #2
 80084f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80084f8:	e006      	b.n	8008508 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	2202      	movs	r2, #2
 80084fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008502:	e001      	b.n	8008508 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8008504:	2301      	movs	r3, #1
 8008506:	e132      	b.n	800876e <HAL_TIM_PWM_Start_DMA+0x41a>
  }

  switch (Channel)
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	2b0c      	cmp	r3, #12
 800850c:	f200 80ae 	bhi.w	800866c <HAL_TIM_PWM_Start_DMA+0x318>
 8008510:	a201      	add	r2, pc, #4	@ (adr r2, 8008518 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8008512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008516:	bf00      	nop
 8008518:	0800854d 	.word	0x0800854d
 800851c:	0800866d 	.word	0x0800866d
 8008520:	0800866d 	.word	0x0800866d
 8008524:	0800866d 	.word	0x0800866d
 8008528:	08008595 	.word	0x08008595
 800852c:	0800866d 	.word	0x0800866d
 8008530:	0800866d 	.word	0x0800866d
 8008534:	0800866d 	.word	0x0800866d
 8008538:	080085dd 	.word	0x080085dd
 800853c:	0800866d 	.word	0x0800866d
 8008540:	0800866d 	.word	0x0800866d
 8008544:	0800866d 	.word	0x0800866d
 8008548:	08008625 	.word	0x08008625
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008550:	4a89      	ldr	r2, [pc, #548]	@ (8008778 <HAL_TIM_PWM_Start_DMA+0x424>)
 8008552:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008558:	4a88      	ldr	r2, [pc, #544]	@ (800877c <HAL_TIM_PWM_Start_DMA+0x428>)
 800855a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008560:	4a87      	ldr	r2, [pc, #540]	@ (8008780 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8008562:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8008568:	6879      	ldr	r1, [r7, #4]
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	3334      	adds	r3, #52	@ 0x34
 8008570:	461a      	mov	r2, r3
 8008572:	887b      	ldrh	r3, [r7, #2]
 8008574:	f7fc f912 	bl	800479c <HAL_DMA_Start_IT>
 8008578:	4603      	mov	r3, r0
 800857a:	2b00      	cmp	r3, #0
 800857c:	d001      	beq.n	8008582 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800857e:	2301      	movs	r3, #1
 8008580:	e0f5      	b.n	800876e <HAL_TIM_PWM_Start_DMA+0x41a>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	68da      	ldr	r2, [r3, #12]
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008590:	60da      	str	r2, [r3, #12]
      break;
 8008592:	e06e      	b.n	8008672 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008598:	4a77      	ldr	r2, [pc, #476]	@ (8008778 <HAL_TIM_PWM_Start_DMA+0x424>)
 800859a:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085a0:	4a76      	ldr	r2, [pc, #472]	@ (800877c <HAL_TIM_PWM_Start_DMA+0x428>)
 80085a2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085a8:	4a75      	ldr	r2, [pc, #468]	@ (8008780 <HAL_TIM_PWM_Start_DMA+0x42c>)
 80085aa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80085b0:	6879      	ldr	r1, [r7, #4]
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	3338      	adds	r3, #56	@ 0x38
 80085b8:	461a      	mov	r2, r3
 80085ba:	887b      	ldrh	r3, [r7, #2]
 80085bc:	f7fc f8ee 	bl	800479c <HAL_DMA_Start_IT>
 80085c0:	4603      	mov	r3, r0
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d001      	beq.n	80085ca <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80085c6:	2301      	movs	r3, #1
 80085c8:	e0d1      	b.n	800876e <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	68da      	ldr	r2, [r3, #12]
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80085d8:	60da      	str	r2, [r3, #12]
      break;
 80085da:	e04a      	b.n	8008672 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085e0:	4a65      	ldr	r2, [pc, #404]	@ (8008778 <HAL_TIM_PWM_Start_DMA+0x424>)
 80085e2:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085e8:	4a64      	ldr	r2, [pc, #400]	@ (800877c <HAL_TIM_PWM_Start_DMA+0x428>)
 80085ea:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085f0:	4a63      	ldr	r2, [pc, #396]	@ (8008780 <HAL_TIM_PWM_Start_DMA+0x42c>)
 80085f2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80085f8:	6879      	ldr	r1, [r7, #4]
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	333c      	adds	r3, #60	@ 0x3c
 8008600:	461a      	mov	r2, r3
 8008602:	887b      	ldrh	r3, [r7, #2]
 8008604:	f7fc f8ca 	bl	800479c <HAL_DMA_Start_IT>
 8008608:	4603      	mov	r3, r0
 800860a:	2b00      	cmp	r3, #0
 800860c:	d001      	beq.n	8008612 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800860e:	2301      	movs	r3, #1
 8008610:	e0ad      	b.n	800876e <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	68da      	ldr	r2, [r3, #12]
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008620:	60da      	str	r2, [r3, #12]
      break;
 8008622:	e026      	b.n	8008672 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008628:	4a53      	ldr	r2, [pc, #332]	@ (8008778 <HAL_TIM_PWM_Start_DMA+0x424>)
 800862a:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008630:	4a52      	ldr	r2, [pc, #328]	@ (800877c <HAL_TIM_PWM_Start_DMA+0x428>)
 8008632:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008638:	4a51      	ldr	r2, [pc, #324]	@ (8008780 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800863a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008640:	6879      	ldr	r1, [r7, #4]
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	3340      	adds	r3, #64	@ 0x40
 8008648:	461a      	mov	r2, r3
 800864a:	887b      	ldrh	r3, [r7, #2]
 800864c:	f7fc f8a6 	bl	800479c <HAL_DMA_Start_IT>
 8008650:	4603      	mov	r3, r0
 8008652:	2b00      	cmp	r3, #0
 8008654:	d001      	beq.n	800865a <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008656:	2301      	movs	r3, #1
 8008658:	e089      	b.n	800876e <HAL_TIM_PWM_Start_DMA+0x41a>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	68da      	ldr	r2, [r3, #12]
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008668:	60da      	str	r2, [r3, #12]
      break;
 800866a:	e002      	b.n	8008672 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800866c:	2301      	movs	r3, #1
 800866e:	75fb      	strb	r3, [r7, #23]
      break;
 8008670:	bf00      	nop
  }

  if (status == HAL_OK)
 8008672:	7dfb      	ldrb	r3, [r7, #23]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d179      	bne.n	800876c <HAL_TIM_PWM_Start_DMA+0x418>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	2201      	movs	r2, #1
 800867e:	68b9      	ldr	r1, [r7, #8]
 8008680:	4618      	mov	r0, r3
 8008682:	f001 feed 	bl	800a460 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a3e      	ldr	r2, [pc, #248]	@ (8008784 <HAL_TIM_PWM_Start_DMA+0x430>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d018      	beq.n	80086c2 <HAL_TIM_PWM_Start_DMA+0x36e>
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a3c      	ldr	r2, [pc, #240]	@ (8008788 <HAL_TIM_PWM_Start_DMA+0x434>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d013      	beq.n	80086c2 <HAL_TIM_PWM_Start_DMA+0x36e>
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4a3b      	ldr	r2, [pc, #236]	@ (800878c <HAL_TIM_PWM_Start_DMA+0x438>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d00e      	beq.n	80086c2 <HAL_TIM_PWM_Start_DMA+0x36e>
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a39      	ldr	r2, [pc, #228]	@ (8008790 <HAL_TIM_PWM_Start_DMA+0x43c>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d009      	beq.n	80086c2 <HAL_TIM_PWM_Start_DMA+0x36e>
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a38      	ldr	r2, [pc, #224]	@ (8008794 <HAL_TIM_PWM_Start_DMA+0x440>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d004      	beq.n	80086c2 <HAL_TIM_PWM_Start_DMA+0x36e>
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4a36      	ldr	r2, [pc, #216]	@ (8008798 <HAL_TIM_PWM_Start_DMA+0x444>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d101      	bne.n	80086c6 <HAL_TIM_PWM_Start_DMA+0x372>
 80086c2:	2301      	movs	r3, #1
 80086c4:	e000      	b.n	80086c8 <HAL_TIM_PWM_Start_DMA+0x374>
 80086c6:	2300      	movs	r3, #0
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d007      	beq.n	80086dc <HAL_TIM_PWM_Start_DMA+0x388>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80086da:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a28      	ldr	r2, [pc, #160]	@ (8008784 <HAL_TIM_PWM_Start_DMA+0x430>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d022      	beq.n	800872c <HAL_TIM_PWM_Start_DMA+0x3d8>
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086ee:	d01d      	beq.n	800872c <HAL_TIM_PWM_Start_DMA+0x3d8>
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4a29      	ldr	r2, [pc, #164]	@ (800879c <HAL_TIM_PWM_Start_DMA+0x448>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d018      	beq.n	800872c <HAL_TIM_PWM_Start_DMA+0x3d8>
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4a28      	ldr	r2, [pc, #160]	@ (80087a0 <HAL_TIM_PWM_Start_DMA+0x44c>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d013      	beq.n	800872c <HAL_TIM_PWM_Start_DMA+0x3d8>
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4a26      	ldr	r2, [pc, #152]	@ (80087a4 <HAL_TIM_PWM_Start_DMA+0x450>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d00e      	beq.n	800872c <HAL_TIM_PWM_Start_DMA+0x3d8>
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	4a1d      	ldr	r2, [pc, #116]	@ (8008788 <HAL_TIM_PWM_Start_DMA+0x434>)
 8008714:	4293      	cmp	r3, r2
 8008716:	d009      	beq.n	800872c <HAL_TIM_PWM_Start_DMA+0x3d8>
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4a1b      	ldr	r2, [pc, #108]	@ (800878c <HAL_TIM_PWM_Start_DMA+0x438>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d004      	beq.n	800872c <HAL_TIM_PWM_Start_DMA+0x3d8>
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	4a1c      	ldr	r2, [pc, #112]	@ (8008798 <HAL_TIM_PWM_Start_DMA+0x444>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d115      	bne.n	8008758 <HAL_TIM_PWM_Start_DMA+0x404>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	689a      	ldr	r2, [r3, #8]
 8008732:	4b1d      	ldr	r3, [pc, #116]	@ (80087a8 <HAL_TIM_PWM_Start_DMA+0x454>)
 8008734:	4013      	ands	r3, r2
 8008736:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008738:	693b      	ldr	r3, [r7, #16]
 800873a:	2b06      	cmp	r3, #6
 800873c:	d015      	beq.n	800876a <HAL_TIM_PWM_Start_DMA+0x416>
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008744:	d011      	beq.n	800876a <HAL_TIM_PWM_Start_DMA+0x416>
      {
        __HAL_TIM_ENABLE(htim);
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	681a      	ldr	r2, [r3, #0]
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f042 0201 	orr.w	r2, r2, #1
 8008754:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008756:	e008      	b.n	800876a <HAL_TIM_PWM_Start_DMA+0x416>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	681a      	ldr	r2, [r3, #0]
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f042 0201 	orr.w	r2, r2, #1
 8008766:	601a      	str	r2, [r3, #0]
 8008768:	e000      	b.n	800876c <HAL_TIM_PWM_Start_DMA+0x418>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800876a:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800876c:	7dfb      	ldrb	r3, [r7, #23]
}
 800876e:	4618      	mov	r0, r3
 8008770:	3718      	adds	r7, #24
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
 8008776:	bf00      	nop
 8008778:	08009647 	.word	0x08009647
 800877c:	080096ef 	.word	0x080096ef
 8008780:	080095b5 	.word	0x080095b5
 8008784:	40012c00 	.word	0x40012c00
 8008788:	40013400 	.word	0x40013400
 800878c:	40014000 	.word	0x40014000
 8008790:	40014400 	.word	0x40014400
 8008794:	40014800 	.word	0x40014800
 8008798:	40015000 	.word	0x40015000
 800879c:	40000400 	.word	0x40000400
 80087a0:	40000800 	.word	0x40000800
 80087a4:	40000c00 	.word	0x40000c00
 80087a8:	00010007 	.word	0x00010007

080087ac <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b082      	sub	sp, #8
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d101      	bne.n	80087be <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80087ba:	2301      	movs	r3, #1
 80087bc:	e049      	b.n	8008852 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80087c4:	b2db      	uxtb	r3, r3
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d106      	bne.n	80087d8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2200      	movs	r2, #0
 80087ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f000 f841 	bl	800885a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2202      	movs	r2, #2
 80087dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681a      	ldr	r2, [r3, #0]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	3304      	adds	r3, #4
 80087e8:	4619      	mov	r1, r3
 80087ea:	4610      	mov	r0, r2
 80087ec:	f000 ffb4 	bl	8009758 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2201      	movs	r2, #1
 80087f4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2201      	movs	r2, #1
 80087fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2201      	movs	r2, #1
 8008804:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2201      	movs	r2, #1
 800880c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2201      	movs	r2, #1
 8008814:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2201      	movs	r2, #1
 800881c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2201      	movs	r2, #1
 8008824:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2201      	movs	r2, #1
 800882c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2201      	movs	r2, #1
 8008834:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2201      	movs	r2, #1
 800883c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2201      	movs	r2, #1
 8008844:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2201      	movs	r2, #1
 800884c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008850:	2300      	movs	r3, #0
}
 8008852:	4618      	mov	r0, r3
 8008854:	3708      	adds	r7, #8
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}

0800885a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800885a:	b480      	push	{r7}
 800885c:	b083      	sub	sp, #12
 800885e:	af00      	add	r7, sp, #0
 8008860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8008862:	bf00      	nop
 8008864:	370c      	adds	r7, #12
 8008866:	46bd      	mov	sp, r7
 8008868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886c:	4770      	bx	lr
	...

08008870 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b084      	sub	sp, #16
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
 8008878:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800887a:	2300      	movs	r3, #0
 800887c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d104      	bne.n	800888e <HAL_TIM_IC_Start_IT+0x1e>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800888a:	b2db      	uxtb	r3, r3
 800888c:	e023      	b.n	80088d6 <HAL_TIM_IC_Start_IT+0x66>
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	2b04      	cmp	r3, #4
 8008892:	d104      	bne.n	800889e <HAL_TIM_IC_Start_IT+0x2e>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800889a:	b2db      	uxtb	r3, r3
 800889c:	e01b      	b.n	80088d6 <HAL_TIM_IC_Start_IT+0x66>
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	2b08      	cmp	r3, #8
 80088a2:	d104      	bne.n	80088ae <HAL_TIM_IC_Start_IT+0x3e>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80088aa:	b2db      	uxtb	r3, r3
 80088ac:	e013      	b.n	80088d6 <HAL_TIM_IC_Start_IT+0x66>
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	2b0c      	cmp	r3, #12
 80088b2:	d104      	bne.n	80088be <HAL_TIM_IC_Start_IT+0x4e>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80088ba:	b2db      	uxtb	r3, r3
 80088bc:	e00b      	b.n	80088d6 <HAL_TIM_IC_Start_IT+0x66>
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	2b10      	cmp	r3, #16
 80088c2:	d104      	bne.n	80088ce <HAL_TIM_IC_Start_IT+0x5e>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80088ca:	b2db      	uxtb	r3, r3
 80088cc:	e003      	b.n	80088d6 <HAL_TIM_IC_Start_IT+0x66>
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80088d4:	b2db      	uxtb	r3, r3
 80088d6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d104      	bne.n	80088e8 <HAL_TIM_IC_Start_IT+0x78>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80088e4:	b2db      	uxtb	r3, r3
 80088e6:	e013      	b.n	8008910 <HAL_TIM_IC_Start_IT+0xa0>
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	2b04      	cmp	r3, #4
 80088ec:	d104      	bne.n	80088f8 <HAL_TIM_IC_Start_IT+0x88>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80088f4:	b2db      	uxtb	r3, r3
 80088f6:	e00b      	b.n	8008910 <HAL_TIM_IC_Start_IT+0xa0>
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	2b08      	cmp	r3, #8
 80088fc:	d104      	bne.n	8008908 <HAL_TIM_IC_Start_IT+0x98>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8008904:	b2db      	uxtb	r3, r3
 8008906:	e003      	b.n	8008910 <HAL_TIM_IC_Start_IT+0xa0>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800890e:	b2db      	uxtb	r3, r3
 8008910:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8008912:	7bbb      	ldrb	r3, [r7, #14]
 8008914:	2b01      	cmp	r3, #1
 8008916:	d102      	bne.n	800891e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8008918:	7b7b      	ldrb	r3, [r7, #13]
 800891a:	2b01      	cmp	r3, #1
 800891c:	d001      	beq.n	8008922 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800891e:	2301      	movs	r3, #1
 8008920:	e0e2      	b.n	8008ae8 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d104      	bne.n	8008932 <HAL_TIM_IC_Start_IT+0xc2>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2202      	movs	r2, #2
 800892c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008930:	e023      	b.n	800897a <HAL_TIM_IC_Start_IT+0x10a>
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	2b04      	cmp	r3, #4
 8008936:	d104      	bne.n	8008942 <HAL_TIM_IC_Start_IT+0xd2>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2202      	movs	r2, #2
 800893c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008940:	e01b      	b.n	800897a <HAL_TIM_IC_Start_IT+0x10a>
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	2b08      	cmp	r3, #8
 8008946:	d104      	bne.n	8008952 <HAL_TIM_IC_Start_IT+0xe2>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2202      	movs	r2, #2
 800894c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008950:	e013      	b.n	800897a <HAL_TIM_IC_Start_IT+0x10a>
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	2b0c      	cmp	r3, #12
 8008956:	d104      	bne.n	8008962 <HAL_TIM_IC_Start_IT+0xf2>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2202      	movs	r2, #2
 800895c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008960:	e00b      	b.n	800897a <HAL_TIM_IC_Start_IT+0x10a>
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	2b10      	cmp	r3, #16
 8008966:	d104      	bne.n	8008972 <HAL_TIM_IC_Start_IT+0x102>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2202      	movs	r2, #2
 800896c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008970:	e003      	b.n	800897a <HAL_TIM_IC_Start_IT+0x10a>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2202      	movs	r2, #2
 8008976:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d104      	bne.n	800898a <HAL_TIM_IC_Start_IT+0x11a>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2202      	movs	r2, #2
 8008984:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008988:	e013      	b.n	80089b2 <HAL_TIM_IC_Start_IT+0x142>
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	2b04      	cmp	r3, #4
 800898e:	d104      	bne.n	800899a <HAL_TIM_IC_Start_IT+0x12a>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2202      	movs	r2, #2
 8008994:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008998:	e00b      	b.n	80089b2 <HAL_TIM_IC_Start_IT+0x142>
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	2b08      	cmp	r3, #8
 800899e:	d104      	bne.n	80089aa <HAL_TIM_IC_Start_IT+0x13a>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2202      	movs	r2, #2
 80089a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80089a8:	e003      	b.n	80089b2 <HAL_TIM_IC_Start_IT+0x142>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2202      	movs	r2, #2
 80089ae:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	2b0c      	cmp	r3, #12
 80089b6:	d841      	bhi.n	8008a3c <HAL_TIM_IC_Start_IT+0x1cc>
 80089b8:	a201      	add	r2, pc, #4	@ (adr r2, 80089c0 <HAL_TIM_IC_Start_IT+0x150>)
 80089ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089be:	bf00      	nop
 80089c0:	080089f5 	.word	0x080089f5
 80089c4:	08008a3d 	.word	0x08008a3d
 80089c8:	08008a3d 	.word	0x08008a3d
 80089cc:	08008a3d 	.word	0x08008a3d
 80089d0:	08008a07 	.word	0x08008a07
 80089d4:	08008a3d 	.word	0x08008a3d
 80089d8:	08008a3d 	.word	0x08008a3d
 80089dc:	08008a3d 	.word	0x08008a3d
 80089e0:	08008a19 	.word	0x08008a19
 80089e4:	08008a3d 	.word	0x08008a3d
 80089e8:	08008a3d 	.word	0x08008a3d
 80089ec:	08008a3d 	.word	0x08008a3d
 80089f0:	08008a2b 	.word	0x08008a2b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	68da      	ldr	r2, [r3, #12]
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f042 0202 	orr.w	r2, r2, #2
 8008a02:	60da      	str	r2, [r3, #12]
      break;
 8008a04:	e01d      	b.n	8008a42 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	68da      	ldr	r2, [r3, #12]
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f042 0204 	orr.w	r2, r2, #4
 8008a14:	60da      	str	r2, [r3, #12]
      break;
 8008a16:	e014      	b.n	8008a42 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	68da      	ldr	r2, [r3, #12]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f042 0208 	orr.w	r2, r2, #8
 8008a26:	60da      	str	r2, [r3, #12]
      break;
 8008a28:	e00b      	b.n	8008a42 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	68da      	ldr	r2, [r3, #12]
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f042 0210 	orr.w	r2, r2, #16
 8008a38:	60da      	str	r2, [r3, #12]
      break;
 8008a3a:	e002      	b.n	8008a42 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	73fb      	strb	r3, [r7, #15]
      break;
 8008a40:	bf00      	nop
  }

  if (status == HAL_OK)
 8008a42:	7bfb      	ldrb	r3, [r7, #15]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d14e      	bne.n	8008ae6 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	2201      	movs	r2, #1
 8008a4e:	6839      	ldr	r1, [r7, #0]
 8008a50:	4618      	mov	r0, r3
 8008a52:	f001 fd05 	bl	800a460 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4a25      	ldr	r2, [pc, #148]	@ (8008af0 <HAL_TIM_IC_Start_IT+0x280>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d022      	beq.n	8008aa6 <HAL_TIM_IC_Start_IT+0x236>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a68:	d01d      	beq.n	8008aa6 <HAL_TIM_IC_Start_IT+0x236>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	4a21      	ldr	r2, [pc, #132]	@ (8008af4 <HAL_TIM_IC_Start_IT+0x284>)
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d018      	beq.n	8008aa6 <HAL_TIM_IC_Start_IT+0x236>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	4a1f      	ldr	r2, [pc, #124]	@ (8008af8 <HAL_TIM_IC_Start_IT+0x288>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d013      	beq.n	8008aa6 <HAL_TIM_IC_Start_IT+0x236>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	4a1e      	ldr	r2, [pc, #120]	@ (8008afc <HAL_TIM_IC_Start_IT+0x28c>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d00e      	beq.n	8008aa6 <HAL_TIM_IC_Start_IT+0x236>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4a1c      	ldr	r2, [pc, #112]	@ (8008b00 <HAL_TIM_IC_Start_IT+0x290>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d009      	beq.n	8008aa6 <HAL_TIM_IC_Start_IT+0x236>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4a1b      	ldr	r2, [pc, #108]	@ (8008b04 <HAL_TIM_IC_Start_IT+0x294>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d004      	beq.n	8008aa6 <HAL_TIM_IC_Start_IT+0x236>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4a19      	ldr	r2, [pc, #100]	@ (8008b08 <HAL_TIM_IC_Start_IT+0x298>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d115      	bne.n	8008ad2 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	689a      	ldr	r2, [r3, #8]
 8008aac:	4b17      	ldr	r3, [pc, #92]	@ (8008b0c <HAL_TIM_IC_Start_IT+0x29c>)
 8008aae:	4013      	ands	r3, r2
 8008ab0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	2b06      	cmp	r3, #6
 8008ab6:	d015      	beq.n	8008ae4 <HAL_TIM_IC_Start_IT+0x274>
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008abe:	d011      	beq.n	8008ae4 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	681a      	ldr	r2, [r3, #0]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f042 0201 	orr.w	r2, r2, #1
 8008ace:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ad0:	e008      	b.n	8008ae4 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	681a      	ldr	r2, [r3, #0]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f042 0201 	orr.w	r2, r2, #1
 8008ae0:	601a      	str	r2, [r3, #0]
 8008ae2:	e000      	b.n	8008ae6 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ae4:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8008ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	3710      	adds	r7, #16
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}
 8008af0:	40012c00 	.word	0x40012c00
 8008af4:	40000400 	.word	0x40000400
 8008af8:	40000800 	.word	0x40000800
 8008afc:	40000c00 	.word	0x40000c00
 8008b00:	40013400 	.word	0x40013400
 8008b04:	40014000 	.word	0x40014000
 8008b08:	40015000 	.word	0x40015000
 8008b0c:	00010007 	.word	0x00010007

08008b10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b084      	sub	sp, #16
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	68db      	ldr	r3, [r3, #12]
 8008b1e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	691b      	ldr	r3, [r3, #16]
 8008b26:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	f003 0302 	and.w	r3, r3, #2
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d020      	beq.n	8008b74 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	f003 0302 	and.w	r3, r3, #2
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d01b      	beq.n	8008b74 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f06f 0202 	mvn.w	r2, #2
 8008b44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2201      	movs	r2, #1
 8008b4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	699b      	ldr	r3, [r3, #24]
 8008b52:	f003 0303 	and.w	r3, r3, #3
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d003      	beq.n	8008b62 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f7f8 ffb4 	bl	8001ac8 <HAL_TIM_IC_CaptureCallback>
 8008b60:	e005      	b.n	8008b6e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 fcf4 	bl	8009550 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f000 fcfb 	bl	8009564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2200      	movs	r2, #0
 8008b72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	f003 0304 	and.w	r3, r3, #4
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d020      	beq.n	8008bc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	f003 0304 	and.w	r3, r3, #4
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d01b      	beq.n	8008bc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f06f 0204 	mvn.w	r2, #4
 8008b90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2202      	movs	r2, #2
 8008b96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	699b      	ldr	r3, [r3, #24]
 8008b9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d003      	beq.n	8008bae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f7f8 ff8e 	bl	8001ac8 <HAL_TIM_IC_CaptureCallback>
 8008bac:	e005      	b.n	8008bba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f000 fcce 	bl	8009550 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 fcd5 	bl	8009564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	f003 0308 	and.w	r3, r3, #8
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d020      	beq.n	8008c0c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	f003 0308 	and.w	r3, r3, #8
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d01b      	beq.n	8008c0c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f06f 0208 	mvn.w	r2, #8
 8008bdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2204      	movs	r2, #4
 8008be2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	69db      	ldr	r3, [r3, #28]
 8008bea:	f003 0303 	and.w	r3, r3, #3
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d003      	beq.n	8008bfa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f7f8 ff68 	bl	8001ac8 <HAL_TIM_IC_CaptureCallback>
 8008bf8:	e005      	b.n	8008c06 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f000 fca8 	bl	8009550 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f000 fcaf 	bl	8009564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	f003 0310 	and.w	r3, r3, #16
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d020      	beq.n	8008c58 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	f003 0310 	and.w	r3, r3, #16
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d01b      	beq.n	8008c58 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f06f 0210 	mvn.w	r2, #16
 8008c28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2208      	movs	r2, #8
 8008c2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	69db      	ldr	r3, [r3, #28]
 8008c36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d003      	beq.n	8008c46 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f7f8 ff42 	bl	8001ac8 <HAL_TIM_IC_CaptureCallback>
 8008c44:	e005      	b.n	8008c52 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f000 fc82 	bl	8009550 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f000 fc89 	bl	8009564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2200      	movs	r2, #0
 8008c56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	f003 0301 	and.w	r3, r3, #1
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d00c      	beq.n	8008c7c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	f003 0301 	and.w	r3, r3, #1
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d007      	beq.n	8008c7c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f06f 0201 	mvn.w	r2, #1
 8008c74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f000 fc60 	bl	800953c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d104      	bne.n	8008c90 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d00c      	beq.n	8008caa <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d007      	beq.n	8008caa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008ca2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f001 fd35 	bl	800a714 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d00c      	beq.n	8008cce <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d007      	beq.n	8008cce <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008cc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f001 fd2d 	bl	800a728 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d00c      	beq.n	8008cf2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d007      	beq.n	8008cf2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008cea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f000 fc4d 	bl	800958c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	f003 0320 	and.w	r3, r3, #32
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d00c      	beq.n	8008d16 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	f003 0320 	and.w	r3, r3, #32
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d007      	beq.n	8008d16 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f06f 0220 	mvn.w	r2, #32
 8008d0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f001 fcf5 	bl	800a700 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d00c      	beq.n	8008d3a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d007      	beq.n	8008d3a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8008d32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f001 fd01 	bl	800a73c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d00c      	beq.n	8008d5e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d007      	beq.n	8008d5e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8008d56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f001 fcf9 	bl	800a750 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d00c      	beq.n	8008d82 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d007      	beq.n	8008d82 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8008d7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f001 fcf1 	bl	800a764 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d00c      	beq.n	8008da6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d007      	beq.n	8008da6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8008d9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f001 fce9 	bl	800a778 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008da6:	bf00      	nop
 8008da8:	3710      	adds	r7, #16
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}
	...

08008db0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b086      	sub	sp, #24
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	60f8      	str	r0, [r7, #12]
 8008db8:	60b9      	str	r1, [r7, #8]
 8008dba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008dc6:	2b01      	cmp	r3, #1
 8008dc8:	d101      	bne.n	8008dce <HAL_TIM_OC_ConfigChannel+0x1e>
 8008dca:	2302      	movs	r3, #2
 8008dcc:	e066      	b.n	8008e9c <HAL_TIM_OC_ConfigChannel+0xec>
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	2201      	movs	r2, #1
 8008dd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2b14      	cmp	r3, #20
 8008dda:	d857      	bhi.n	8008e8c <HAL_TIM_OC_ConfigChannel+0xdc>
 8008ddc:	a201      	add	r2, pc, #4	@ (adr r2, 8008de4 <HAL_TIM_OC_ConfigChannel+0x34>)
 8008dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008de2:	bf00      	nop
 8008de4:	08008e39 	.word	0x08008e39
 8008de8:	08008e8d 	.word	0x08008e8d
 8008dec:	08008e8d 	.word	0x08008e8d
 8008df0:	08008e8d 	.word	0x08008e8d
 8008df4:	08008e47 	.word	0x08008e47
 8008df8:	08008e8d 	.word	0x08008e8d
 8008dfc:	08008e8d 	.word	0x08008e8d
 8008e00:	08008e8d 	.word	0x08008e8d
 8008e04:	08008e55 	.word	0x08008e55
 8008e08:	08008e8d 	.word	0x08008e8d
 8008e0c:	08008e8d 	.word	0x08008e8d
 8008e10:	08008e8d 	.word	0x08008e8d
 8008e14:	08008e63 	.word	0x08008e63
 8008e18:	08008e8d 	.word	0x08008e8d
 8008e1c:	08008e8d 	.word	0x08008e8d
 8008e20:	08008e8d 	.word	0x08008e8d
 8008e24:	08008e71 	.word	0x08008e71
 8008e28:	08008e8d 	.word	0x08008e8d
 8008e2c:	08008e8d 	.word	0x08008e8d
 8008e30:	08008e8d 	.word	0x08008e8d
 8008e34:	08008e7f 	.word	0x08008e7f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	68b9      	ldr	r1, [r7, #8]
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f000 fd3e 	bl	80098c0 <TIM_OC1_SetConfig>
      break;
 8008e44:	e025      	b.n	8008e92 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	68b9      	ldr	r1, [r7, #8]
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f000 fdd1 	bl	80099f4 <TIM_OC2_SetConfig>
      break;
 8008e52:	e01e      	b.n	8008e92 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	68b9      	ldr	r1, [r7, #8]
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f000 fe5e 	bl	8009b1c <TIM_OC3_SetConfig>
      break;
 8008e60:	e017      	b.n	8008e92 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	68b9      	ldr	r1, [r7, #8]
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f000 fee9 	bl	8009c40 <TIM_OC4_SetConfig>
      break;
 8008e6e:	e010      	b.n	8008e92 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	68b9      	ldr	r1, [r7, #8]
 8008e76:	4618      	mov	r0, r3
 8008e78:	f000 ff76 	bl	8009d68 <TIM_OC5_SetConfig>
      break;
 8008e7c:	e009      	b.n	8008e92 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	68b9      	ldr	r1, [r7, #8]
 8008e84:	4618      	mov	r0, r3
 8008e86:	f000 ffd9 	bl	8009e3c <TIM_OC6_SetConfig>
      break;
 8008e8a:	e002      	b.n	8008e92 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	75fb      	strb	r3, [r7, #23]
      break;
 8008e90:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	2200      	movs	r2, #0
 8008e96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008e9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3718      	adds	r7, #24
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}

08008ea4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b086      	sub	sp, #24
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	60f8      	str	r0, [r7, #12]
 8008eac:	60b9      	str	r1, [r7, #8]
 8008eae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008eba:	2b01      	cmp	r3, #1
 8008ebc:	d101      	bne.n	8008ec2 <HAL_TIM_IC_ConfigChannel+0x1e>
 8008ebe:	2302      	movs	r3, #2
 8008ec0:	e088      	b.n	8008fd4 <HAL_TIM_IC_ConfigChannel+0x130>
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	2201      	movs	r2, #1
 8008ec6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d11b      	bne.n	8008f08 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8008ee0:	f001 f8f8 	bl	800a0d4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	699a      	ldr	r2, [r3, #24]
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f022 020c 	bic.w	r2, r2, #12
 8008ef2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	6999      	ldr	r1, [r3, #24]
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	689a      	ldr	r2, [r3, #8]
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	430a      	orrs	r2, r1
 8008f04:	619a      	str	r2, [r3, #24]
 8008f06:	e060      	b.n	8008fca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2b04      	cmp	r3, #4
 8008f0c:	d11c      	bne.n	8008f48 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8008f1e:	f001 f97c 	bl	800a21a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	699a      	ldr	r2, [r3, #24]
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008f30:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	6999      	ldr	r1, [r3, #24]
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	689b      	ldr	r3, [r3, #8]
 8008f3c:	021a      	lsls	r2, r3, #8
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	430a      	orrs	r2, r1
 8008f44:	619a      	str	r2, [r3, #24]
 8008f46:	e040      	b.n	8008fca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2b08      	cmp	r3, #8
 8008f4c:	d11b      	bne.n	8008f86 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8008f5e:	f001 f9c9 	bl	800a2f4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	69da      	ldr	r2, [r3, #28]
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f022 020c 	bic.w	r2, r2, #12
 8008f70:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	69d9      	ldr	r1, [r3, #28]
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	689a      	ldr	r2, [r3, #8]
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	430a      	orrs	r2, r1
 8008f82:	61da      	str	r2, [r3, #28]
 8008f84:	e021      	b.n	8008fca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2b0c      	cmp	r3, #12
 8008f8a:	d11c      	bne.n	8008fc6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8008f9c:	f001 f9e6 	bl	800a36c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	69da      	ldr	r2, [r3, #28]
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008fae:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	69d9      	ldr	r1, [r3, #28]
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	689b      	ldr	r3, [r3, #8]
 8008fba:	021a      	lsls	r2, r3, #8
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	430a      	orrs	r2, r1
 8008fc2:	61da      	str	r2, [r3, #28]
 8008fc4:	e001      	b.n	8008fca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008fd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	3718      	adds	r7, #24
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}

08008fdc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b086      	sub	sp, #24
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	60f8      	str	r0, [r7, #12]
 8008fe4:	60b9      	str	r1, [r7, #8]
 8008fe6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ff2:	2b01      	cmp	r3, #1
 8008ff4:	d101      	bne.n	8008ffa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008ff6:	2302      	movs	r3, #2
 8008ff8:	e0ff      	b.n	80091fa <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	2201      	movs	r2, #1
 8008ffe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2b14      	cmp	r3, #20
 8009006:	f200 80f0 	bhi.w	80091ea <HAL_TIM_PWM_ConfigChannel+0x20e>
 800900a:	a201      	add	r2, pc, #4	@ (adr r2, 8009010 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800900c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009010:	08009065 	.word	0x08009065
 8009014:	080091eb 	.word	0x080091eb
 8009018:	080091eb 	.word	0x080091eb
 800901c:	080091eb 	.word	0x080091eb
 8009020:	080090a5 	.word	0x080090a5
 8009024:	080091eb 	.word	0x080091eb
 8009028:	080091eb 	.word	0x080091eb
 800902c:	080091eb 	.word	0x080091eb
 8009030:	080090e7 	.word	0x080090e7
 8009034:	080091eb 	.word	0x080091eb
 8009038:	080091eb 	.word	0x080091eb
 800903c:	080091eb 	.word	0x080091eb
 8009040:	08009127 	.word	0x08009127
 8009044:	080091eb 	.word	0x080091eb
 8009048:	080091eb 	.word	0x080091eb
 800904c:	080091eb 	.word	0x080091eb
 8009050:	08009169 	.word	0x08009169
 8009054:	080091eb 	.word	0x080091eb
 8009058:	080091eb 	.word	0x080091eb
 800905c:	080091eb 	.word	0x080091eb
 8009060:	080091a9 	.word	0x080091a9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	68b9      	ldr	r1, [r7, #8]
 800906a:	4618      	mov	r0, r3
 800906c:	f000 fc28 	bl	80098c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	699a      	ldr	r2, [r3, #24]
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f042 0208 	orr.w	r2, r2, #8
 800907e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	699a      	ldr	r2, [r3, #24]
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f022 0204 	bic.w	r2, r2, #4
 800908e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	6999      	ldr	r1, [r3, #24]
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	691a      	ldr	r2, [r3, #16]
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	430a      	orrs	r2, r1
 80090a0:	619a      	str	r2, [r3, #24]
      break;
 80090a2:	e0a5      	b.n	80091f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	68b9      	ldr	r1, [r7, #8]
 80090aa:	4618      	mov	r0, r3
 80090ac:	f000 fca2 	bl	80099f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	699a      	ldr	r2, [r3, #24]
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80090be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	699a      	ldr	r2, [r3, #24]
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80090ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	6999      	ldr	r1, [r3, #24]
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	691b      	ldr	r3, [r3, #16]
 80090da:	021a      	lsls	r2, r3, #8
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	430a      	orrs	r2, r1
 80090e2:	619a      	str	r2, [r3, #24]
      break;
 80090e4:	e084      	b.n	80091f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	68b9      	ldr	r1, [r7, #8]
 80090ec:	4618      	mov	r0, r3
 80090ee:	f000 fd15 	bl	8009b1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	69da      	ldr	r2, [r3, #28]
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f042 0208 	orr.w	r2, r2, #8
 8009100:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	69da      	ldr	r2, [r3, #28]
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f022 0204 	bic.w	r2, r2, #4
 8009110:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	69d9      	ldr	r1, [r3, #28]
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	691a      	ldr	r2, [r3, #16]
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	430a      	orrs	r2, r1
 8009122:	61da      	str	r2, [r3, #28]
      break;
 8009124:	e064      	b.n	80091f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	68b9      	ldr	r1, [r7, #8]
 800912c:	4618      	mov	r0, r3
 800912e:	f000 fd87 	bl	8009c40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	69da      	ldr	r2, [r3, #28]
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009140:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	69da      	ldr	r2, [r3, #28]
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009150:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	69d9      	ldr	r1, [r3, #28]
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	691b      	ldr	r3, [r3, #16]
 800915c:	021a      	lsls	r2, r3, #8
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	430a      	orrs	r2, r1
 8009164:	61da      	str	r2, [r3, #28]
      break;
 8009166:	e043      	b.n	80091f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	68b9      	ldr	r1, [r7, #8]
 800916e:	4618      	mov	r0, r3
 8009170:	f000 fdfa 	bl	8009d68 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f042 0208 	orr.w	r2, r2, #8
 8009182:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f022 0204 	bic.w	r2, r2, #4
 8009192:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	691a      	ldr	r2, [r3, #16]
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	430a      	orrs	r2, r1
 80091a4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80091a6:	e023      	b.n	80091f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	68b9      	ldr	r1, [r7, #8]
 80091ae:	4618      	mov	r0, r3
 80091b0:	f000 fe44 	bl	8009e3c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80091c2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80091d2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	691b      	ldr	r3, [r3, #16]
 80091de:	021a      	lsls	r2, r3, #8
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	430a      	orrs	r2, r1
 80091e6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80091e8:	e002      	b.n	80091f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80091ea:	2301      	movs	r3, #1
 80091ec:	75fb      	strb	r3, [r7, #23]
      break;
 80091ee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	2200      	movs	r2, #0
 80091f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80091f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3718      	adds	r7, #24
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}
 8009202:	bf00      	nop

08009204 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b084      	sub	sp, #16
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
 800920c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800920e:	2300      	movs	r3, #0
 8009210:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009218:	2b01      	cmp	r3, #1
 800921a:	d101      	bne.n	8009220 <HAL_TIM_ConfigClockSource+0x1c>
 800921c:	2302      	movs	r3, #2
 800921e:	e0f6      	b.n	800940e <HAL_TIM_ConfigClockSource+0x20a>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2201      	movs	r2, #1
 8009224:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2202      	movs	r2, #2
 800922c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	689b      	ldr	r3, [r3, #8]
 8009236:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800923e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009242:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800924a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	68ba      	ldr	r2, [r7, #8]
 8009252:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	4a6f      	ldr	r2, [pc, #444]	@ (8009418 <HAL_TIM_ConfigClockSource+0x214>)
 800925a:	4293      	cmp	r3, r2
 800925c:	f000 80c1 	beq.w	80093e2 <HAL_TIM_ConfigClockSource+0x1de>
 8009260:	4a6d      	ldr	r2, [pc, #436]	@ (8009418 <HAL_TIM_ConfigClockSource+0x214>)
 8009262:	4293      	cmp	r3, r2
 8009264:	f200 80c6 	bhi.w	80093f4 <HAL_TIM_ConfigClockSource+0x1f0>
 8009268:	4a6c      	ldr	r2, [pc, #432]	@ (800941c <HAL_TIM_ConfigClockSource+0x218>)
 800926a:	4293      	cmp	r3, r2
 800926c:	f000 80b9 	beq.w	80093e2 <HAL_TIM_ConfigClockSource+0x1de>
 8009270:	4a6a      	ldr	r2, [pc, #424]	@ (800941c <HAL_TIM_ConfigClockSource+0x218>)
 8009272:	4293      	cmp	r3, r2
 8009274:	f200 80be 	bhi.w	80093f4 <HAL_TIM_ConfigClockSource+0x1f0>
 8009278:	4a69      	ldr	r2, [pc, #420]	@ (8009420 <HAL_TIM_ConfigClockSource+0x21c>)
 800927a:	4293      	cmp	r3, r2
 800927c:	f000 80b1 	beq.w	80093e2 <HAL_TIM_ConfigClockSource+0x1de>
 8009280:	4a67      	ldr	r2, [pc, #412]	@ (8009420 <HAL_TIM_ConfigClockSource+0x21c>)
 8009282:	4293      	cmp	r3, r2
 8009284:	f200 80b6 	bhi.w	80093f4 <HAL_TIM_ConfigClockSource+0x1f0>
 8009288:	4a66      	ldr	r2, [pc, #408]	@ (8009424 <HAL_TIM_ConfigClockSource+0x220>)
 800928a:	4293      	cmp	r3, r2
 800928c:	f000 80a9 	beq.w	80093e2 <HAL_TIM_ConfigClockSource+0x1de>
 8009290:	4a64      	ldr	r2, [pc, #400]	@ (8009424 <HAL_TIM_ConfigClockSource+0x220>)
 8009292:	4293      	cmp	r3, r2
 8009294:	f200 80ae 	bhi.w	80093f4 <HAL_TIM_ConfigClockSource+0x1f0>
 8009298:	4a63      	ldr	r2, [pc, #396]	@ (8009428 <HAL_TIM_ConfigClockSource+0x224>)
 800929a:	4293      	cmp	r3, r2
 800929c:	f000 80a1 	beq.w	80093e2 <HAL_TIM_ConfigClockSource+0x1de>
 80092a0:	4a61      	ldr	r2, [pc, #388]	@ (8009428 <HAL_TIM_ConfigClockSource+0x224>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	f200 80a6 	bhi.w	80093f4 <HAL_TIM_ConfigClockSource+0x1f0>
 80092a8:	4a60      	ldr	r2, [pc, #384]	@ (800942c <HAL_TIM_ConfigClockSource+0x228>)
 80092aa:	4293      	cmp	r3, r2
 80092ac:	f000 8099 	beq.w	80093e2 <HAL_TIM_ConfigClockSource+0x1de>
 80092b0:	4a5e      	ldr	r2, [pc, #376]	@ (800942c <HAL_TIM_ConfigClockSource+0x228>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	f200 809e 	bhi.w	80093f4 <HAL_TIM_ConfigClockSource+0x1f0>
 80092b8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80092bc:	f000 8091 	beq.w	80093e2 <HAL_TIM_ConfigClockSource+0x1de>
 80092c0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80092c4:	f200 8096 	bhi.w	80093f4 <HAL_TIM_ConfigClockSource+0x1f0>
 80092c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80092cc:	f000 8089 	beq.w	80093e2 <HAL_TIM_ConfigClockSource+0x1de>
 80092d0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80092d4:	f200 808e 	bhi.w	80093f4 <HAL_TIM_ConfigClockSource+0x1f0>
 80092d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092dc:	d03e      	beq.n	800935c <HAL_TIM_ConfigClockSource+0x158>
 80092de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092e2:	f200 8087 	bhi.w	80093f4 <HAL_TIM_ConfigClockSource+0x1f0>
 80092e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092ea:	f000 8086 	beq.w	80093fa <HAL_TIM_ConfigClockSource+0x1f6>
 80092ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092f2:	d87f      	bhi.n	80093f4 <HAL_TIM_ConfigClockSource+0x1f0>
 80092f4:	2b70      	cmp	r3, #112	@ 0x70
 80092f6:	d01a      	beq.n	800932e <HAL_TIM_ConfigClockSource+0x12a>
 80092f8:	2b70      	cmp	r3, #112	@ 0x70
 80092fa:	d87b      	bhi.n	80093f4 <HAL_TIM_ConfigClockSource+0x1f0>
 80092fc:	2b60      	cmp	r3, #96	@ 0x60
 80092fe:	d050      	beq.n	80093a2 <HAL_TIM_ConfigClockSource+0x19e>
 8009300:	2b60      	cmp	r3, #96	@ 0x60
 8009302:	d877      	bhi.n	80093f4 <HAL_TIM_ConfigClockSource+0x1f0>
 8009304:	2b50      	cmp	r3, #80	@ 0x50
 8009306:	d03c      	beq.n	8009382 <HAL_TIM_ConfigClockSource+0x17e>
 8009308:	2b50      	cmp	r3, #80	@ 0x50
 800930a:	d873      	bhi.n	80093f4 <HAL_TIM_ConfigClockSource+0x1f0>
 800930c:	2b40      	cmp	r3, #64	@ 0x40
 800930e:	d058      	beq.n	80093c2 <HAL_TIM_ConfigClockSource+0x1be>
 8009310:	2b40      	cmp	r3, #64	@ 0x40
 8009312:	d86f      	bhi.n	80093f4 <HAL_TIM_ConfigClockSource+0x1f0>
 8009314:	2b30      	cmp	r3, #48	@ 0x30
 8009316:	d064      	beq.n	80093e2 <HAL_TIM_ConfigClockSource+0x1de>
 8009318:	2b30      	cmp	r3, #48	@ 0x30
 800931a:	d86b      	bhi.n	80093f4 <HAL_TIM_ConfigClockSource+0x1f0>
 800931c:	2b20      	cmp	r3, #32
 800931e:	d060      	beq.n	80093e2 <HAL_TIM_ConfigClockSource+0x1de>
 8009320:	2b20      	cmp	r3, #32
 8009322:	d867      	bhi.n	80093f4 <HAL_TIM_ConfigClockSource+0x1f0>
 8009324:	2b00      	cmp	r3, #0
 8009326:	d05c      	beq.n	80093e2 <HAL_TIM_ConfigClockSource+0x1de>
 8009328:	2b10      	cmp	r3, #16
 800932a:	d05a      	beq.n	80093e2 <HAL_TIM_ConfigClockSource+0x1de>
 800932c:	e062      	b.n	80093f4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800933e:	f001 f86f 	bl	800a420 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	689b      	ldr	r3, [r3, #8]
 8009348:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800934a:	68bb      	ldr	r3, [r7, #8]
 800934c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009350:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	68ba      	ldr	r2, [r7, #8]
 8009358:	609a      	str	r2, [r3, #8]
      break;
 800935a:	e04f      	b.n	80093fc <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800936c:	f001 f858 	bl	800a420 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	689a      	ldr	r2, [r3, #8]
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800937e:	609a      	str	r2, [r3, #8]
      break;
 8009380:	e03c      	b.n	80093fc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800938e:	461a      	mov	r2, r3
 8009390:	f000 ff14 	bl	800a1bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	2150      	movs	r1, #80	@ 0x50
 800939a:	4618      	mov	r0, r3
 800939c:	f001 f823 	bl	800a3e6 <TIM_ITRx_SetConfig>
      break;
 80093a0:	e02c      	b.n	80093fc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80093ae:	461a      	mov	r2, r3
 80093b0:	f000 ff70 	bl	800a294 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	2160      	movs	r1, #96	@ 0x60
 80093ba:	4618      	mov	r0, r3
 80093bc:	f001 f813 	bl	800a3e6 <TIM_ITRx_SetConfig>
      break;
 80093c0:	e01c      	b.n	80093fc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80093ce:	461a      	mov	r2, r3
 80093d0:	f000 fef4 	bl	800a1bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	2140      	movs	r1, #64	@ 0x40
 80093da:	4618      	mov	r0, r3
 80093dc:	f001 f803 	bl	800a3e6 <TIM_ITRx_SetConfig>
      break;
 80093e0:	e00c      	b.n	80093fc <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681a      	ldr	r2, [r3, #0]
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	4619      	mov	r1, r3
 80093ec:	4610      	mov	r0, r2
 80093ee:	f000 fffa 	bl	800a3e6 <TIM_ITRx_SetConfig>
      break;
 80093f2:	e003      	b.n	80093fc <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80093f4:	2301      	movs	r3, #1
 80093f6:	73fb      	strb	r3, [r7, #15]
      break;
 80093f8:	e000      	b.n	80093fc <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80093fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2201      	movs	r2, #1
 8009400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2200      	movs	r2, #0
 8009408:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800940c:	7bfb      	ldrb	r3, [r7, #15]
}
 800940e:	4618      	mov	r0, r3
 8009410:	3710      	adds	r7, #16
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}
 8009416:	bf00      	nop
 8009418:	00100070 	.word	0x00100070
 800941c:	00100060 	.word	0x00100060
 8009420:	00100050 	.word	0x00100050
 8009424:	00100040 	.word	0x00100040
 8009428:	00100030 	.word	0x00100030
 800942c:	00100020 	.word	0x00100020

08009430 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b082      	sub	sp, #8
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009440:	2b01      	cmp	r3, #1
 8009442:	d101      	bne.n	8009448 <HAL_TIM_SlaveConfigSynchro+0x18>
 8009444:	2302      	movs	r3, #2
 8009446:	e031      	b.n	80094ac <HAL_TIM_SlaveConfigSynchro+0x7c>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2201      	movs	r2, #1
 800944c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2202      	movs	r2, #2
 8009454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8009458:	6839      	ldr	r1, [r7, #0]
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f000 fd5a 	bl	8009f14 <TIM_SlaveTimer_SetConfig>
 8009460:	4603      	mov	r3, r0
 8009462:	2b00      	cmp	r3, #0
 8009464:	d009      	beq.n	800947a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2201      	movs	r2, #1
 800946a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2200      	movs	r2, #0
 8009472:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8009476:	2301      	movs	r3, #1
 8009478:	e018      	b.n	80094ac <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	68da      	ldr	r2, [r3, #12]
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009488:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	68da      	ldr	r2, [r3, #12]
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009498:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2201      	movs	r2, #1
 800949e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2200      	movs	r2, #0
 80094a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80094aa:	2300      	movs	r3, #0
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	3708      	adds	r7, #8
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}

080094b4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80094b4:	b480      	push	{r7}
 80094b6:	b085      	sub	sp, #20
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
 80094bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80094be:	2300      	movs	r3, #0
 80094c0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	2b0c      	cmp	r3, #12
 80094c6:	d831      	bhi.n	800952c <HAL_TIM_ReadCapturedValue+0x78>
 80094c8:	a201      	add	r2, pc, #4	@ (adr r2, 80094d0 <HAL_TIM_ReadCapturedValue+0x1c>)
 80094ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094ce:	bf00      	nop
 80094d0:	08009505 	.word	0x08009505
 80094d4:	0800952d 	.word	0x0800952d
 80094d8:	0800952d 	.word	0x0800952d
 80094dc:	0800952d 	.word	0x0800952d
 80094e0:	0800950f 	.word	0x0800950f
 80094e4:	0800952d 	.word	0x0800952d
 80094e8:	0800952d 	.word	0x0800952d
 80094ec:	0800952d 	.word	0x0800952d
 80094f0:	08009519 	.word	0x08009519
 80094f4:	0800952d 	.word	0x0800952d
 80094f8:	0800952d 	.word	0x0800952d
 80094fc:	0800952d 	.word	0x0800952d
 8009500:	08009523 	.word	0x08009523
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800950a:	60fb      	str	r3, [r7, #12]

      break;
 800950c:	e00f      	b.n	800952e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009514:	60fb      	str	r3, [r7, #12]

      break;
 8009516:	e00a      	b.n	800952e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800951e:	60fb      	str	r3, [r7, #12]

      break;
 8009520:	e005      	b.n	800952e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009528:	60fb      	str	r3, [r7, #12]

      break;
 800952a:	e000      	b.n	800952e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800952c:	bf00      	nop
  }

  return tmpreg;
 800952e:	68fb      	ldr	r3, [r7, #12]
}
 8009530:	4618      	mov	r0, r3
 8009532:	3714      	adds	r7, #20
 8009534:	46bd      	mov	sp, r7
 8009536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953a:	4770      	bx	lr

0800953c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800953c:	b480      	push	{r7}
 800953e:	b083      	sub	sp, #12
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009544:	bf00      	nop
 8009546:	370c      	adds	r7, #12
 8009548:	46bd      	mov	sp, r7
 800954a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954e:	4770      	bx	lr

08009550 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009550:	b480      	push	{r7}
 8009552:	b083      	sub	sp, #12
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009558:	bf00      	nop
 800955a:	370c      	adds	r7, #12
 800955c:	46bd      	mov	sp, r7
 800955e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009562:	4770      	bx	lr

08009564 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009564:	b480      	push	{r7}
 8009566:	b083      	sub	sp, #12
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800956c:	bf00      	nop
 800956e:	370c      	adds	r7, #12
 8009570:	46bd      	mov	sp, r7
 8009572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009576:	4770      	bx	lr

08009578 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009578:	b480      	push	{r7}
 800957a:	b083      	sub	sp, #12
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8009580:	bf00      	nop
 8009582:	370c      	adds	r7, #12
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr

0800958c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800958c:	b480      	push	{r7}
 800958e:	b083      	sub	sp, #12
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009594:	bf00      	nop
 8009596:	370c      	adds	r7, #12
 8009598:	46bd      	mov	sp, r7
 800959a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959e:	4770      	bx	lr

080095a0 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80095a0:	b480      	push	{r7}
 80095a2:	b083      	sub	sp, #12
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80095a8:	bf00      	nop
 80095aa:	370c      	adds	r7, #12
 80095ac:	46bd      	mov	sp, r7
 80095ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b2:	4770      	bx	lr

080095b4 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b084      	sub	sp, #16
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095c0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095c6:	687a      	ldr	r2, [r7, #4]
 80095c8:	429a      	cmp	r2, r3
 80095ca:	d107      	bne.n	80095dc <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	2201      	movs	r2, #1
 80095d0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	2201      	movs	r2, #1
 80095d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80095da:	e02a      	b.n	8009632 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095e0:	687a      	ldr	r2, [r7, #4]
 80095e2:	429a      	cmp	r2, r3
 80095e4:	d107      	bne.n	80095f6 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	2202      	movs	r2, #2
 80095ea:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	2201      	movs	r2, #1
 80095f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80095f4:	e01d      	b.n	8009632 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095fa:	687a      	ldr	r2, [r7, #4]
 80095fc:	429a      	cmp	r2, r3
 80095fe:	d107      	bne.n	8009610 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	2204      	movs	r2, #4
 8009604:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	2201      	movs	r2, #1
 800960a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800960e:	e010      	b.n	8009632 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009614:	687a      	ldr	r2, [r7, #4]
 8009616:	429a      	cmp	r2, r3
 8009618:	d107      	bne.n	800962a <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	2208      	movs	r2, #8
 800961e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	2201      	movs	r2, #1
 8009624:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009628:	e003      	b.n	8009632 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	2201      	movs	r2, #1
 800962e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8009632:	68f8      	ldr	r0, [r7, #12]
 8009634:	f7ff ffb4 	bl	80095a0 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	2200      	movs	r2, #0
 800963c:	771a      	strb	r2, [r3, #28]
}
 800963e:	bf00      	nop
 8009640:	3710      	adds	r7, #16
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}

08009646 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8009646:	b580      	push	{r7, lr}
 8009648:	b084      	sub	sp, #16
 800964a:	af00      	add	r7, sp, #0
 800964c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009652:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009658:	687a      	ldr	r2, [r7, #4]
 800965a:	429a      	cmp	r2, r3
 800965c:	d10b      	bne.n	8009676 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	2201      	movs	r2, #1
 8009662:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	69db      	ldr	r3, [r3, #28]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d136      	bne.n	80096da <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	2201      	movs	r2, #1
 8009670:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009674:	e031      	b.n	80096da <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800967a:	687a      	ldr	r2, [r7, #4]
 800967c:	429a      	cmp	r2, r3
 800967e:	d10b      	bne.n	8009698 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	2202      	movs	r2, #2
 8009684:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	69db      	ldr	r3, [r3, #28]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d125      	bne.n	80096da <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	2201      	movs	r2, #1
 8009692:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009696:	e020      	b.n	80096da <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800969c:	687a      	ldr	r2, [r7, #4]
 800969e:	429a      	cmp	r2, r3
 80096a0:	d10b      	bne.n	80096ba <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	2204      	movs	r2, #4
 80096a6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	69db      	ldr	r3, [r3, #28]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d114      	bne.n	80096da <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	2201      	movs	r2, #1
 80096b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80096b8:	e00f      	b.n	80096da <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096be:	687a      	ldr	r2, [r7, #4]
 80096c0:	429a      	cmp	r2, r3
 80096c2:	d10a      	bne.n	80096da <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	2208      	movs	r2, #8
 80096c8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	69db      	ldr	r3, [r3, #28]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d103      	bne.n	80096da <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	2201      	movs	r2, #1
 80096d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096da:	68f8      	ldr	r0, [r7, #12]
 80096dc:	f7ff ff42 	bl	8009564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	2200      	movs	r2, #0
 80096e4:	771a      	strb	r2, [r3, #28]
}
 80096e6:	bf00      	nop
 80096e8:	3710      	adds	r7, #16
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}

080096ee <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80096ee:	b580      	push	{r7, lr}
 80096f0:	b084      	sub	sp, #16
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096fa:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009700:	687a      	ldr	r2, [r7, #4]
 8009702:	429a      	cmp	r2, r3
 8009704:	d103      	bne.n	800970e <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	2201      	movs	r2, #1
 800970a:	771a      	strb	r2, [r3, #28]
 800970c:	e019      	b.n	8009742 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009712:	687a      	ldr	r2, [r7, #4]
 8009714:	429a      	cmp	r2, r3
 8009716:	d103      	bne.n	8009720 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	2202      	movs	r2, #2
 800971c:	771a      	strb	r2, [r3, #28]
 800971e:	e010      	b.n	8009742 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009724:	687a      	ldr	r2, [r7, #4]
 8009726:	429a      	cmp	r2, r3
 8009728:	d103      	bne.n	8009732 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	2204      	movs	r2, #4
 800972e:	771a      	strb	r2, [r3, #28]
 8009730:	e007      	b.n	8009742 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009736:	687a      	ldr	r2, [r7, #4]
 8009738:	429a      	cmp	r2, r3
 800973a:	d102      	bne.n	8009742 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	2208      	movs	r2, #8
 8009740:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8009742:	68f8      	ldr	r0, [r7, #12]
 8009744:	f7ff ff18 	bl	8009578 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	2200      	movs	r2, #0
 800974c:	771a      	strb	r2, [r3, #28]
}
 800974e:	bf00      	nop
 8009750:	3710      	adds	r7, #16
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}
	...

08009758 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009758:	b480      	push	{r7}
 800975a:	b085      	sub	sp, #20
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
 8009760:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	4a4c      	ldr	r2, [pc, #304]	@ (800989c <TIM_Base_SetConfig+0x144>)
 800976c:	4293      	cmp	r3, r2
 800976e:	d017      	beq.n	80097a0 <TIM_Base_SetConfig+0x48>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009776:	d013      	beq.n	80097a0 <TIM_Base_SetConfig+0x48>
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	4a49      	ldr	r2, [pc, #292]	@ (80098a0 <TIM_Base_SetConfig+0x148>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d00f      	beq.n	80097a0 <TIM_Base_SetConfig+0x48>
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	4a48      	ldr	r2, [pc, #288]	@ (80098a4 <TIM_Base_SetConfig+0x14c>)
 8009784:	4293      	cmp	r3, r2
 8009786:	d00b      	beq.n	80097a0 <TIM_Base_SetConfig+0x48>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	4a47      	ldr	r2, [pc, #284]	@ (80098a8 <TIM_Base_SetConfig+0x150>)
 800978c:	4293      	cmp	r3, r2
 800978e:	d007      	beq.n	80097a0 <TIM_Base_SetConfig+0x48>
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	4a46      	ldr	r2, [pc, #280]	@ (80098ac <TIM_Base_SetConfig+0x154>)
 8009794:	4293      	cmp	r3, r2
 8009796:	d003      	beq.n	80097a0 <TIM_Base_SetConfig+0x48>
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	4a45      	ldr	r2, [pc, #276]	@ (80098b0 <TIM_Base_SetConfig+0x158>)
 800979c:	4293      	cmp	r3, r2
 800979e:	d108      	bne.n	80097b2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80097a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	685b      	ldr	r3, [r3, #4]
 80097ac:	68fa      	ldr	r2, [r7, #12]
 80097ae:	4313      	orrs	r3, r2
 80097b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	4a39      	ldr	r2, [pc, #228]	@ (800989c <TIM_Base_SetConfig+0x144>)
 80097b6:	4293      	cmp	r3, r2
 80097b8:	d023      	beq.n	8009802 <TIM_Base_SetConfig+0xaa>
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097c0:	d01f      	beq.n	8009802 <TIM_Base_SetConfig+0xaa>
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	4a36      	ldr	r2, [pc, #216]	@ (80098a0 <TIM_Base_SetConfig+0x148>)
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d01b      	beq.n	8009802 <TIM_Base_SetConfig+0xaa>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	4a35      	ldr	r2, [pc, #212]	@ (80098a4 <TIM_Base_SetConfig+0x14c>)
 80097ce:	4293      	cmp	r3, r2
 80097d0:	d017      	beq.n	8009802 <TIM_Base_SetConfig+0xaa>
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	4a34      	ldr	r2, [pc, #208]	@ (80098a8 <TIM_Base_SetConfig+0x150>)
 80097d6:	4293      	cmp	r3, r2
 80097d8:	d013      	beq.n	8009802 <TIM_Base_SetConfig+0xaa>
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	4a33      	ldr	r2, [pc, #204]	@ (80098ac <TIM_Base_SetConfig+0x154>)
 80097de:	4293      	cmp	r3, r2
 80097e0:	d00f      	beq.n	8009802 <TIM_Base_SetConfig+0xaa>
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	4a33      	ldr	r2, [pc, #204]	@ (80098b4 <TIM_Base_SetConfig+0x15c>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d00b      	beq.n	8009802 <TIM_Base_SetConfig+0xaa>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	4a32      	ldr	r2, [pc, #200]	@ (80098b8 <TIM_Base_SetConfig+0x160>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d007      	beq.n	8009802 <TIM_Base_SetConfig+0xaa>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	4a31      	ldr	r2, [pc, #196]	@ (80098bc <TIM_Base_SetConfig+0x164>)
 80097f6:	4293      	cmp	r3, r2
 80097f8:	d003      	beq.n	8009802 <TIM_Base_SetConfig+0xaa>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	4a2c      	ldr	r2, [pc, #176]	@ (80098b0 <TIM_Base_SetConfig+0x158>)
 80097fe:	4293      	cmp	r3, r2
 8009800:	d108      	bne.n	8009814 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009808:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	68db      	ldr	r3, [r3, #12]
 800980e:	68fa      	ldr	r2, [r7, #12]
 8009810:	4313      	orrs	r3, r2
 8009812:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	695b      	ldr	r3, [r3, #20]
 800981e:	4313      	orrs	r3, r2
 8009820:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	68fa      	ldr	r2, [r7, #12]
 8009826:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	689a      	ldr	r2, [r3, #8]
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	681a      	ldr	r2, [r3, #0]
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	4a18      	ldr	r2, [pc, #96]	@ (800989c <TIM_Base_SetConfig+0x144>)
 800983c:	4293      	cmp	r3, r2
 800983e:	d013      	beq.n	8009868 <TIM_Base_SetConfig+0x110>
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	4a1a      	ldr	r2, [pc, #104]	@ (80098ac <TIM_Base_SetConfig+0x154>)
 8009844:	4293      	cmp	r3, r2
 8009846:	d00f      	beq.n	8009868 <TIM_Base_SetConfig+0x110>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	4a1a      	ldr	r2, [pc, #104]	@ (80098b4 <TIM_Base_SetConfig+0x15c>)
 800984c:	4293      	cmp	r3, r2
 800984e:	d00b      	beq.n	8009868 <TIM_Base_SetConfig+0x110>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	4a19      	ldr	r2, [pc, #100]	@ (80098b8 <TIM_Base_SetConfig+0x160>)
 8009854:	4293      	cmp	r3, r2
 8009856:	d007      	beq.n	8009868 <TIM_Base_SetConfig+0x110>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	4a18      	ldr	r2, [pc, #96]	@ (80098bc <TIM_Base_SetConfig+0x164>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d003      	beq.n	8009868 <TIM_Base_SetConfig+0x110>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	4a13      	ldr	r2, [pc, #76]	@ (80098b0 <TIM_Base_SetConfig+0x158>)
 8009864:	4293      	cmp	r3, r2
 8009866:	d103      	bne.n	8009870 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	691a      	ldr	r2, [r3, #16]
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2201      	movs	r2, #1
 8009874:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	691b      	ldr	r3, [r3, #16]
 800987a:	f003 0301 	and.w	r3, r3, #1
 800987e:	2b01      	cmp	r3, #1
 8009880:	d105      	bne.n	800988e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	691b      	ldr	r3, [r3, #16]
 8009886:	f023 0201 	bic.w	r2, r3, #1
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	611a      	str	r2, [r3, #16]
  }
}
 800988e:	bf00      	nop
 8009890:	3714      	adds	r7, #20
 8009892:	46bd      	mov	sp, r7
 8009894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009898:	4770      	bx	lr
 800989a:	bf00      	nop
 800989c:	40012c00 	.word	0x40012c00
 80098a0:	40000400 	.word	0x40000400
 80098a4:	40000800 	.word	0x40000800
 80098a8:	40000c00 	.word	0x40000c00
 80098ac:	40013400 	.word	0x40013400
 80098b0:	40015000 	.word	0x40015000
 80098b4:	40014000 	.word	0x40014000
 80098b8:	40014400 	.word	0x40014400
 80098bc:	40014800 	.word	0x40014800

080098c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80098c0:	b480      	push	{r7}
 80098c2:	b087      	sub	sp, #28
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
 80098c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6a1b      	ldr	r3, [r3, #32]
 80098ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6a1b      	ldr	r3, [r3, #32]
 80098d4:	f023 0201 	bic.w	r2, r3, #1
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	685b      	ldr	r3, [r3, #4]
 80098e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	699b      	ldr	r3, [r3, #24]
 80098e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80098ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80098f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	f023 0303 	bic.w	r3, r3, #3
 80098fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	68fa      	ldr	r2, [r7, #12]
 8009902:	4313      	orrs	r3, r2
 8009904:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	f023 0302 	bic.w	r3, r3, #2
 800990c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	689b      	ldr	r3, [r3, #8]
 8009912:	697a      	ldr	r2, [r7, #20]
 8009914:	4313      	orrs	r3, r2
 8009916:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	4a30      	ldr	r2, [pc, #192]	@ (80099dc <TIM_OC1_SetConfig+0x11c>)
 800991c:	4293      	cmp	r3, r2
 800991e:	d013      	beq.n	8009948 <TIM_OC1_SetConfig+0x88>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	4a2f      	ldr	r2, [pc, #188]	@ (80099e0 <TIM_OC1_SetConfig+0x120>)
 8009924:	4293      	cmp	r3, r2
 8009926:	d00f      	beq.n	8009948 <TIM_OC1_SetConfig+0x88>
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	4a2e      	ldr	r2, [pc, #184]	@ (80099e4 <TIM_OC1_SetConfig+0x124>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d00b      	beq.n	8009948 <TIM_OC1_SetConfig+0x88>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	4a2d      	ldr	r2, [pc, #180]	@ (80099e8 <TIM_OC1_SetConfig+0x128>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d007      	beq.n	8009948 <TIM_OC1_SetConfig+0x88>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	4a2c      	ldr	r2, [pc, #176]	@ (80099ec <TIM_OC1_SetConfig+0x12c>)
 800993c:	4293      	cmp	r3, r2
 800993e:	d003      	beq.n	8009948 <TIM_OC1_SetConfig+0x88>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	4a2b      	ldr	r2, [pc, #172]	@ (80099f0 <TIM_OC1_SetConfig+0x130>)
 8009944:	4293      	cmp	r3, r2
 8009946:	d10c      	bne.n	8009962 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009948:	697b      	ldr	r3, [r7, #20]
 800994a:	f023 0308 	bic.w	r3, r3, #8
 800994e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	68db      	ldr	r3, [r3, #12]
 8009954:	697a      	ldr	r2, [r7, #20]
 8009956:	4313      	orrs	r3, r2
 8009958:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	f023 0304 	bic.w	r3, r3, #4
 8009960:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	4a1d      	ldr	r2, [pc, #116]	@ (80099dc <TIM_OC1_SetConfig+0x11c>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d013      	beq.n	8009992 <TIM_OC1_SetConfig+0xd2>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	4a1c      	ldr	r2, [pc, #112]	@ (80099e0 <TIM_OC1_SetConfig+0x120>)
 800996e:	4293      	cmp	r3, r2
 8009970:	d00f      	beq.n	8009992 <TIM_OC1_SetConfig+0xd2>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	4a1b      	ldr	r2, [pc, #108]	@ (80099e4 <TIM_OC1_SetConfig+0x124>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d00b      	beq.n	8009992 <TIM_OC1_SetConfig+0xd2>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	4a1a      	ldr	r2, [pc, #104]	@ (80099e8 <TIM_OC1_SetConfig+0x128>)
 800997e:	4293      	cmp	r3, r2
 8009980:	d007      	beq.n	8009992 <TIM_OC1_SetConfig+0xd2>
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	4a19      	ldr	r2, [pc, #100]	@ (80099ec <TIM_OC1_SetConfig+0x12c>)
 8009986:	4293      	cmp	r3, r2
 8009988:	d003      	beq.n	8009992 <TIM_OC1_SetConfig+0xd2>
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	4a18      	ldr	r2, [pc, #96]	@ (80099f0 <TIM_OC1_SetConfig+0x130>)
 800998e:	4293      	cmp	r3, r2
 8009990:	d111      	bne.n	80099b6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009992:	693b      	ldr	r3, [r7, #16]
 8009994:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009998:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80099a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	695b      	ldr	r3, [r3, #20]
 80099a6:	693a      	ldr	r2, [r7, #16]
 80099a8:	4313      	orrs	r3, r2
 80099aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	699b      	ldr	r3, [r3, #24]
 80099b0:	693a      	ldr	r2, [r7, #16]
 80099b2:	4313      	orrs	r3, r2
 80099b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	693a      	ldr	r2, [r7, #16]
 80099ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	68fa      	ldr	r2, [r7, #12]
 80099c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	685a      	ldr	r2, [r3, #4]
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	697a      	ldr	r2, [r7, #20]
 80099ce:	621a      	str	r2, [r3, #32]
}
 80099d0:	bf00      	nop
 80099d2:	371c      	adds	r7, #28
 80099d4:	46bd      	mov	sp, r7
 80099d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099da:	4770      	bx	lr
 80099dc:	40012c00 	.word	0x40012c00
 80099e0:	40013400 	.word	0x40013400
 80099e4:	40014000 	.word	0x40014000
 80099e8:	40014400 	.word	0x40014400
 80099ec:	40014800 	.word	0x40014800
 80099f0:	40015000 	.word	0x40015000

080099f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80099f4:	b480      	push	{r7}
 80099f6:	b087      	sub	sp, #28
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
 80099fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6a1b      	ldr	r3, [r3, #32]
 8009a02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6a1b      	ldr	r3, [r3, #32]
 8009a08:	f023 0210 	bic.w	r2, r3, #16
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	685b      	ldr	r3, [r3, #4]
 8009a14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	699b      	ldr	r3, [r3, #24]
 8009a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009a22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009a26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009a2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	021b      	lsls	r3, r3, #8
 8009a36:	68fa      	ldr	r2, [r7, #12]
 8009a38:	4313      	orrs	r3, r2
 8009a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	f023 0320 	bic.w	r3, r3, #32
 8009a42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	689b      	ldr	r3, [r3, #8]
 8009a48:	011b      	lsls	r3, r3, #4
 8009a4a:	697a      	ldr	r2, [r7, #20]
 8009a4c:	4313      	orrs	r3, r2
 8009a4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	4a2c      	ldr	r2, [pc, #176]	@ (8009b04 <TIM_OC2_SetConfig+0x110>)
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d007      	beq.n	8009a68 <TIM_OC2_SetConfig+0x74>
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	4a2b      	ldr	r2, [pc, #172]	@ (8009b08 <TIM_OC2_SetConfig+0x114>)
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d003      	beq.n	8009a68 <TIM_OC2_SetConfig+0x74>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	4a2a      	ldr	r2, [pc, #168]	@ (8009b0c <TIM_OC2_SetConfig+0x118>)
 8009a64:	4293      	cmp	r3, r2
 8009a66:	d10d      	bne.n	8009a84 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009a6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	68db      	ldr	r3, [r3, #12]
 8009a74:	011b      	lsls	r3, r3, #4
 8009a76:	697a      	ldr	r2, [r7, #20]
 8009a78:	4313      	orrs	r3, r2
 8009a7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009a7c:	697b      	ldr	r3, [r7, #20]
 8009a7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009a82:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	4a1f      	ldr	r2, [pc, #124]	@ (8009b04 <TIM_OC2_SetConfig+0x110>)
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	d013      	beq.n	8009ab4 <TIM_OC2_SetConfig+0xc0>
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	4a1e      	ldr	r2, [pc, #120]	@ (8009b08 <TIM_OC2_SetConfig+0x114>)
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d00f      	beq.n	8009ab4 <TIM_OC2_SetConfig+0xc0>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	4a1e      	ldr	r2, [pc, #120]	@ (8009b10 <TIM_OC2_SetConfig+0x11c>)
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d00b      	beq.n	8009ab4 <TIM_OC2_SetConfig+0xc0>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	4a1d      	ldr	r2, [pc, #116]	@ (8009b14 <TIM_OC2_SetConfig+0x120>)
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	d007      	beq.n	8009ab4 <TIM_OC2_SetConfig+0xc0>
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	4a1c      	ldr	r2, [pc, #112]	@ (8009b18 <TIM_OC2_SetConfig+0x124>)
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	d003      	beq.n	8009ab4 <TIM_OC2_SetConfig+0xc0>
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	4a17      	ldr	r2, [pc, #92]	@ (8009b0c <TIM_OC2_SetConfig+0x118>)
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d113      	bne.n	8009adc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009aba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009abc:	693b      	ldr	r3, [r7, #16]
 8009abe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009ac2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	695b      	ldr	r3, [r3, #20]
 8009ac8:	009b      	lsls	r3, r3, #2
 8009aca:	693a      	ldr	r2, [r7, #16]
 8009acc:	4313      	orrs	r3, r2
 8009ace:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	699b      	ldr	r3, [r3, #24]
 8009ad4:	009b      	lsls	r3, r3, #2
 8009ad6:	693a      	ldr	r2, [r7, #16]
 8009ad8:	4313      	orrs	r3, r2
 8009ada:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	693a      	ldr	r2, [r7, #16]
 8009ae0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	68fa      	ldr	r2, [r7, #12]
 8009ae6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	685a      	ldr	r2, [r3, #4]
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	697a      	ldr	r2, [r7, #20]
 8009af4:	621a      	str	r2, [r3, #32]
}
 8009af6:	bf00      	nop
 8009af8:	371c      	adds	r7, #28
 8009afa:	46bd      	mov	sp, r7
 8009afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b00:	4770      	bx	lr
 8009b02:	bf00      	nop
 8009b04:	40012c00 	.word	0x40012c00
 8009b08:	40013400 	.word	0x40013400
 8009b0c:	40015000 	.word	0x40015000
 8009b10:	40014000 	.word	0x40014000
 8009b14:	40014400 	.word	0x40014400
 8009b18:	40014800 	.word	0x40014800

08009b1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	b087      	sub	sp, #28
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
 8009b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6a1b      	ldr	r3, [r3, #32]
 8009b2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6a1b      	ldr	r3, [r3, #32]
 8009b30:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	685b      	ldr	r3, [r3, #4]
 8009b3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	69db      	ldr	r3, [r3, #28]
 8009b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009b4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	f023 0303 	bic.w	r3, r3, #3
 8009b56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	68fa      	ldr	r2, [r7, #12]
 8009b5e:	4313      	orrs	r3, r2
 8009b60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009b62:	697b      	ldr	r3, [r7, #20]
 8009b64:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009b68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	689b      	ldr	r3, [r3, #8]
 8009b6e:	021b      	lsls	r3, r3, #8
 8009b70:	697a      	ldr	r2, [r7, #20]
 8009b72:	4313      	orrs	r3, r2
 8009b74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	4a2b      	ldr	r2, [pc, #172]	@ (8009c28 <TIM_OC3_SetConfig+0x10c>)
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	d007      	beq.n	8009b8e <TIM_OC3_SetConfig+0x72>
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	4a2a      	ldr	r2, [pc, #168]	@ (8009c2c <TIM_OC3_SetConfig+0x110>)
 8009b82:	4293      	cmp	r3, r2
 8009b84:	d003      	beq.n	8009b8e <TIM_OC3_SetConfig+0x72>
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	4a29      	ldr	r2, [pc, #164]	@ (8009c30 <TIM_OC3_SetConfig+0x114>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d10d      	bne.n	8009baa <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009b8e:	697b      	ldr	r3, [r7, #20]
 8009b90:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009b94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	68db      	ldr	r3, [r3, #12]
 8009b9a:	021b      	lsls	r3, r3, #8
 8009b9c:	697a      	ldr	r2, [r7, #20]
 8009b9e:	4313      	orrs	r3, r2
 8009ba0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009ba8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	4a1e      	ldr	r2, [pc, #120]	@ (8009c28 <TIM_OC3_SetConfig+0x10c>)
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d013      	beq.n	8009bda <TIM_OC3_SetConfig+0xbe>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	4a1d      	ldr	r2, [pc, #116]	@ (8009c2c <TIM_OC3_SetConfig+0x110>)
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	d00f      	beq.n	8009bda <TIM_OC3_SetConfig+0xbe>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	4a1d      	ldr	r2, [pc, #116]	@ (8009c34 <TIM_OC3_SetConfig+0x118>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d00b      	beq.n	8009bda <TIM_OC3_SetConfig+0xbe>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	4a1c      	ldr	r2, [pc, #112]	@ (8009c38 <TIM_OC3_SetConfig+0x11c>)
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d007      	beq.n	8009bda <TIM_OC3_SetConfig+0xbe>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	4a1b      	ldr	r2, [pc, #108]	@ (8009c3c <TIM_OC3_SetConfig+0x120>)
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	d003      	beq.n	8009bda <TIM_OC3_SetConfig+0xbe>
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	4a16      	ldr	r2, [pc, #88]	@ (8009c30 <TIM_OC3_SetConfig+0x114>)
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d113      	bne.n	8009c02 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009bda:	693b      	ldr	r3, [r7, #16]
 8009bdc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009be0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009be8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	695b      	ldr	r3, [r3, #20]
 8009bee:	011b      	lsls	r3, r3, #4
 8009bf0:	693a      	ldr	r2, [r7, #16]
 8009bf2:	4313      	orrs	r3, r2
 8009bf4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	699b      	ldr	r3, [r3, #24]
 8009bfa:	011b      	lsls	r3, r3, #4
 8009bfc:	693a      	ldr	r2, [r7, #16]
 8009bfe:	4313      	orrs	r3, r2
 8009c00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	693a      	ldr	r2, [r7, #16]
 8009c06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	68fa      	ldr	r2, [r7, #12]
 8009c0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	685a      	ldr	r2, [r3, #4]
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	697a      	ldr	r2, [r7, #20]
 8009c1a:	621a      	str	r2, [r3, #32]
}
 8009c1c:	bf00      	nop
 8009c1e:	371c      	adds	r7, #28
 8009c20:	46bd      	mov	sp, r7
 8009c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c26:	4770      	bx	lr
 8009c28:	40012c00 	.word	0x40012c00
 8009c2c:	40013400 	.word	0x40013400
 8009c30:	40015000 	.word	0x40015000
 8009c34:	40014000 	.word	0x40014000
 8009c38:	40014400 	.word	0x40014400
 8009c3c:	40014800 	.word	0x40014800

08009c40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009c40:	b480      	push	{r7}
 8009c42:	b087      	sub	sp, #28
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
 8009c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6a1b      	ldr	r3, [r3, #32]
 8009c4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6a1b      	ldr	r3, [r3, #32]
 8009c54:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	685b      	ldr	r3, [r3, #4]
 8009c60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	69db      	ldr	r3, [r3, #28]
 8009c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009c6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009c72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009c7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	021b      	lsls	r3, r3, #8
 8009c82:	68fa      	ldr	r2, [r7, #12]
 8009c84:	4313      	orrs	r3, r2
 8009c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009c88:	697b      	ldr	r3, [r7, #20]
 8009c8a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009c8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	689b      	ldr	r3, [r3, #8]
 8009c94:	031b      	lsls	r3, r3, #12
 8009c96:	697a      	ldr	r2, [r7, #20]
 8009c98:	4313      	orrs	r3, r2
 8009c9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	4a2c      	ldr	r2, [pc, #176]	@ (8009d50 <TIM_OC4_SetConfig+0x110>)
 8009ca0:	4293      	cmp	r3, r2
 8009ca2:	d007      	beq.n	8009cb4 <TIM_OC4_SetConfig+0x74>
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	4a2b      	ldr	r2, [pc, #172]	@ (8009d54 <TIM_OC4_SetConfig+0x114>)
 8009ca8:	4293      	cmp	r3, r2
 8009caa:	d003      	beq.n	8009cb4 <TIM_OC4_SetConfig+0x74>
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	4a2a      	ldr	r2, [pc, #168]	@ (8009d58 <TIM_OC4_SetConfig+0x118>)
 8009cb0:	4293      	cmp	r3, r2
 8009cb2:	d10d      	bne.n	8009cd0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009cba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	68db      	ldr	r3, [r3, #12]
 8009cc0:	031b      	lsls	r3, r3, #12
 8009cc2:	697a      	ldr	r2, [r7, #20]
 8009cc4:	4313      	orrs	r3, r2
 8009cc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009cc8:	697b      	ldr	r3, [r7, #20]
 8009cca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009cce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	4a1f      	ldr	r2, [pc, #124]	@ (8009d50 <TIM_OC4_SetConfig+0x110>)
 8009cd4:	4293      	cmp	r3, r2
 8009cd6:	d013      	beq.n	8009d00 <TIM_OC4_SetConfig+0xc0>
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	4a1e      	ldr	r2, [pc, #120]	@ (8009d54 <TIM_OC4_SetConfig+0x114>)
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	d00f      	beq.n	8009d00 <TIM_OC4_SetConfig+0xc0>
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	4a1e      	ldr	r2, [pc, #120]	@ (8009d5c <TIM_OC4_SetConfig+0x11c>)
 8009ce4:	4293      	cmp	r3, r2
 8009ce6:	d00b      	beq.n	8009d00 <TIM_OC4_SetConfig+0xc0>
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	4a1d      	ldr	r2, [pc, #116]	@ (8009d60 <TIM_OC4_SetConfig+0x120>)
 8009cec:	4293      	cmp	r3, r2
 8009cee:	d007      	beq.n	8009d00 <TIM_OC4_SetConfig+0xc0>
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	4a1c      	ldr	r2, [pc, #112]	@ (8009d64 <TIM_OC4_SetConfig+0x124>)
 8009cf4:	4293      	cmp	r3, r2
 8009cf6:	d003      	beq.n	8009d00 <TIM_OC4_SetConfig+0xc0>
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	4a17      	ldr	r2, [pc, #92]	@ (8009d58 <TIM_OC4_SetConfig+0x118>)
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	d113      	bne.n	8009d28 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009d06:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009d0e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	695b      	ldr	r3, [r3, #20]
 8009d14:	019b      	lsls	r3, r3, #6
 8009d16:	693a      	ldr	r2, [r7, #16]
 8009d18:	4313      	orrs	r3, r2
 8009d1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	699b      	ldr	r3, [r3, #24]
 8009d20:	019b      	lsls	r3, r3, #6
 8009d22:	693a      	ldr	r2, [r7, #16]
 8009d24:	4313      	orrs	r3, r2
 8009d26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	693a      	ldr	r2, [r7, #16]
 8009d2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	68fa      	ldr	r2, [r7, #12]
 8009d32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	685a      	ldr	r2, [r3, #4]
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	697a      	ldr	r2, [r7, #20]
 8009d40:	621a      	str	r2, [r3, #32]
}
 8009d42:	bf00      	nop
 8009d44:	371c      	adds	r7, #28
 8009d46:	46bd      	mov	sp, r7
 8009d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4c:	4770      	bx	lr
 8009d4e:	bf00      	nop
 8009d50:	40012c00 	.word	0x40012c00
 8009d54:	40013400 	.word	0x40013400
 8009d58:	40015000 	.word	0x40015000
 8009d5c:	40014000 	.word	0x40014000
 8009d60:	40014400 	.word	0x40014400
 8009d64:	40014800 	.word	0x40014800

08009d68 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b087      	sub	sp, #28
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
 8009d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6a1b      	ldr	r3, [r3, #32]
 8009d76:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6a1b      	ldr	r3, [r3, #32]
 8009d7c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009d96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	68fa      	ldr	r2, [r7, #12]
 8009da2:	4313      	orrs	r3, r2
 8009da4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009da6:	693b      	ldr	r3, [r7, #16]
 8009da8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009dac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	689b      	ldr	r3, [r3, #8]
 8009db2:	041b      	lsls	r3, r3, #16
 8009db4:	693a      	ldr	r2, [r7, #16]
 8009db6:	4313      	orrs	r3, r2
 8009db8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	4a19      	ldr	r2, [pc, #100]	@ (8009e24 <TIM_OC5_SetConfig+0xbc>)
 8009dbe:	4293      	cmp	r3, r2
 8009dc0:	d013      	beq.n	8009dea <TIM_OC5_SetConfig+0x82>
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	4a18      	ldr	r2, [pc, #96]	@ (8009e28 <TIM_OC5_SetConfig+0xc0>)
 8009dc6:	4293      	cmp	r3, r2
 8009dc8:	d00f      	beq.n	8009dea <TIM_OC5_SetConfig+0x82>
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	4a17      	ldr	r2, [pc, #92]	@ (8009e2c <TIM_OC5_SetConfig+0xc4>)
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	d00b      	beq.n	8009dea <TIM_OC5_SetConfig+0x82>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	4a16      	ldr	r2, [pc, #88]	@ (8009e30 <TIM_OC5_SetConfig+0xc8>)
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	d007      	beq.n	8009dea <TIM_OC5_SetConfig+0x82>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	4a15      	ldr	r2, [pc, #84]	@ (8009e34 <TIM_OC5_SetConfig+0xcc>)
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d003      	beq.n	8009dea <TIM_OC5_SetConfig+0x82>
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	4a14      	ldr	r2, [pc, #80]	@ (8009e38 <TIM_OC5_SetConfig+0xd0>)
 8009de6:	4293      	cmp	r3, r2
 8009de8:	d109      	bne.n	8009dfe <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009dea:	697b      	ldr	r3, [r7, #20]
 8009dec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009df0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	695b      	ldr	r3, [r3, #20]
 8009df6:	021b      	lsls	r3, r3, #8
 8009df8:	697a      	ldr	r2, [r7, #20]
 8009dfa:	4313      	orrs	r3, r2
 8009dfc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	697a      	ldr	r2, [r7, #20]
 8009e02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	68fa      	ldr	r2, [r7, #12]
 8009e08:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	685a      	ldr	r2, [r3, #4]
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	693a      	ldr	r2, [r7, #16]
 8009e16:	621a      	str	r2, [r3, #32]
}
 8009e18:	bf00      	nop
 8009e1a:	371c      	adds	r7, #28
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e22:	4770      	bx	lr
 8009e24:	40012c00 	.word	0x40012c00
 8009e28:	40013400 	.word	0x40013400
 8009e2c:	40014000 	.word	0x40014000
 8009e30:	40014400 	.word	0x40014400
 8009e34:	40014800 	.word	0x40014800
 8009e38:	40015000 	.word	0x40015000

08009e3c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b087      	sub	sp, #28
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
 8009e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6a1b      	ldr	r3, [r3, #32]
 8009e4a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6a1b      	ldr	r3, [r3, #32]
 8009e50:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	685b      	ldr	r3, [r3, #4]
 8009e5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009e6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009e6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	021b      	lsls	r3, r3, #8
 8009e76:	68fa      	ldr	r2, [r7, #12]
 8009e78:	4313      	orrs	r3, r2
 8009e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009e7c:	693b      	ldr	r3, [r7, #16]
 8009e7e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009e82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	689b      	ldr	r3, [r3, #8]
 8009e88:	051b      	lsls	r3, r3, #20
 8009e8a:	693a      	ldr	r2, [r7, #16]
 8009e8c:	4313      	orrs	r3, r2
 8009e8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	4a1a      	ldr	r2, [pc, #104]	@ (8009efc <TIM_OC6_SetConfig+0xc0>)
 8009e94:	4293      	cmp	r3, r2
 8009e96:	d013      	beq.n	8009ec0 <TIM_OC6_SetConfig+0x84>
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	4a19      	ldr	r2, [pc, #100]	@ (8009f00 <TIM_OC6_SetConfig+0xc4>)
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	d00f      	beq.n	8009ec0 <TIM_OC6_SetConfig+0x84>
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	4a18      	ldr	r2, [pc, #96]	@ (8009f04 <TIM_OC6_SetConfig+0xc8>)
 8009ea4:	4293      	cmp	r3, r2
 8009ea6:	d00b      	beq.n	8009ec0 <TIM_OC6_SetConfig+0x84>
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	4a17      	ldr	r2, [pc, #92]	@ (8009f08 <TIM_OC6_SetConfig+0xcc>)
 8009eac:	4293      	cmp	r3, r2
 8009eae:	d007      	beq.n	8009ec0 <TIM_OC6_SetConfig+0x84>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	4a16      	ldr	r2, [pc, #88]	@ (8009f0c <TIM_OC6_SetConfig+0xd0>)
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d003      	beq.n	8009ec0 <TIM_OC6_SetConfig+0x84>
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	4a15      	ldr	r2, [pc, #84]	@ (8009f10 <TIM_OC6_SetConfig+0xd4>)
 8009ebc:	4293      	cmp	r3, r2
 8009ebe:	d109      	bne.n	8009ed4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009ec0:	697b      	ldr	r3, [r7, #20]
 8009ec2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009ec6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	695b      	ldr	r3, [r3, #20]
 8009ecc:	029b      	lsls	r3, r3, #10
 8009ece:	697a      	ldr	r2, [r7, #20]
 8009ed0:	4313      	orrs	r3, r2
 8009ed2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	697a      	ldr	r2, [r7, #20]
 8009ed8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	68fa      	ldr	r2, [r7, #12]
 8009ede:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	685a      	ldr	r2, [r3, #4]
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	693a      	ldr	r2, [r7, #16]
 8009eec:	621a      	str	r2, [r3, #32]
}
 8009eee:	bf00      	nop
 8009ef0:	371c      	adds	r7, #28
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef8:	4770      	bx	lr
 8009efa:	bf00      	nop
 8009efc:	40012c00 	.word	0x40012c00
 8009f00:	40013400 	.word	0x40013400
 8009f04:	40014000 	.word	0x40014000
 8009f08:	40014400 	.word	0x40014400
 8009f0c:	40014800 	.word	0x40014800
 8009f10:	40015000 	.word	0x40015000

08009f14 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b086      	sub	sp, #24
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
 8009f1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009f1e:	2300      	movs	r3, #0
 8009f20:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	689b      	ldr	r3, [r3, #8]
 8009f28:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009f2a:	693b      	ldr	r3, [r7, #16]
 8009f2c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009f30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f34:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	685b      	ldr	r3, [r3, #4]
 8009f3a:	693a      	ldr	r2, [r7, #16]
 8009f3c:	4313      	orrs	r3, r2
 8009f3e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009f46:	f023 0307 	bic.w	r3, r3, #7
 8009f4a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	693a      	ldr	r2, [r7, #16]
 8009f52:	4313      	orrs	r3, r2
 8009f54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	693a      	ldr	r2, [r7, #16]
 8009f5c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	685b      	ldr	r3, [r3, #4]
 8009f62:	4a56      	ldr	r2, [pc, #344]	@ (800a0bc <TIM_SlaveTimer_SetConfig+0x1a8>)
 8009f64:	4293      	cmp	r3, r2
 8009f66:	f000 80a2 	beq.w	800a0ae <TIM_SlaveTimer_SetConfig+0x19a>
 8009f6a:	4a54      	ldr	r2, [pc, #336]	@ (800a0bc <TIM_SlaveTimer_SetConfig+0x1a8>)
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	f200 809b 	bhi.w	800a0a8 <TIM_SlaveTimer_SetConfig+0x194>
 8009f72:	4a53      	ldr	r2, [pc, #332]	@ (800a0c0 <TIM_SlaveTimer_SetConfig+0x1ac>)
 8009f74:	4293      	cmp	r3, r2
 8009f76:	f000 809a 	beq.w	800a0ae <TIM_SlaveTimer_SetConfig+0x19a>
 8009f7a:	4a51      	ldr	r2, [pc, #324]	@ (800a0c0 <TIM_SlaveTimer_SetConfig+0x1ac>)
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	f200 8093 	bhi.w	800a0a8 <TIM_SlaveTimer_SetConfig+0x194>
 8009f82:	4a50      	ldr	r2, [pc, #320]	@ (800a0c4 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8009f84:	4293      	cmp	r3, r2
 8009f86:	f000 8092 	beq.w	800a0ae <TIM_SlaveTimer_SetConfig+0x19a>
 8009f8a:	4a4e      	ldr	r2, [pc, #312]	@ (800a0c4 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	f200 808b 	bhi.w	800a0a8 <TIM_SlaveTimer_SetConfig+0x194>
 8009f92:	4a4d      	ldr	r2, [pc, #308]	@ (800a0c8 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8009f94:	4293      	cmp	r3, r2
 8009f96:	f000 808a 	beq.w	800a0ae <TIM_SlaveTimer_SetConfig+0x19a>
 8009f9a:	4a4b      	ldr	r2, [pc, #300]	@ (800a0c8 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	f200 8083 	bhi.w	800a0a8 <TIM_SlaveTimer_SetConfig+0x194>
 8009fa2:	4a4a      	ldr	r2, [pc, #296]	@ (800a0cc <TIM_SlaveTimer_SetConfig+0x1b8>)
 8009fa4:	4293      	cmp	r3, r2
 8009fa6:	f000 8082 	beq.w	800a0ae <TIM_SlaveTimer_SetConfig+0x19a>
 8009faa:	4a48      	ldr	r2, [pc, #288]	@ (800a0cc <TIM_SlaveTimer_SetConfig+0x1b8>)
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d87b      	bhi.n	800a0a8 <TIM_SlaveTimer_SetConfig+0x194>
 8009fb0:	4a47      	ldr	r2, [pc, #284]	@ (800a0d0 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8009fb2:	4293      	cmp	r3, r2
 8009fb4:	d07b      	beq.n	800a0ae <TIM_SlaveTimer_SetConfig+0x19a>
 8009fb6:	4a46      	ldr	r2, [pc, #280]	@ (800a0d0 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8009fb8:	4293      	cmp	r3, r2
 8009fba:	d875      	bhi.n	800a0a8 <TIM_SlaveTimer_SetConfig+0x194>
 8009fbc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009fc0:	d075      	beq.n	800a0ae <TIM_SlaveTimer_SetConfig+0x19a>
 8009fc2:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009fc6:	d86f      	bhi.n	800a0a8 <TIM_SlaveTimer_SetConfig+0x194>
 8009fc8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009fcc:	d06f      	beq.n	800a0ae <TIM_SlaveTimer_SetConfig+0x19a>
 8009fce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009fd2:	d869      	bhi.n	800a0a8 <TIM_SlaveTimer_SetConfig+0x194>
 8009fd4:	2b70      	cmp	r3, #112	@ 0x70
 8009fd6:	d01a      	beq.n	800a00e <TIM_SlaveTimer_SetConfig+0xfa>
 8009fd8:	2b70      	cmp	r3, #112	@ 0x70
 8009fda:	d865      	bhi.n	800a0a8 <TIM_SlaveTimer_SetConfig+0x194>
 8009fdc:	2b60      	cmp	r3, #96	@ 0x60
 8009fde:	d059      	beq.n	800a094 <TIM_SlaveTimer_SetConfig+0x180>
 8009fe0:	2b60      	cmp	r3, #96	@ 0x60
 8009fe2:	d861      	bhi.n	800a0a8 <TIM_SlaveTimer_SetConfig+0x194>
 8009fe4:	2b50      	cmp	r3, #80	@ 0x50
 8009fe6:	d04b      	beq.n	800a080 <TIM_SlaveTimer_SetConfig+0x16c>
 8009fe8:	2b50      	cmp	r3, #80	@ 0x50
 8009fea:	d85d      	bhi.n	800a0a8 <TIM_SlaveTimer_SetConfig+0x194>
 8009fec:	2b40      	cmp	r3, #64	@ 0x40
 8009fee:	d019      	beq.n	800a024 <TIM_SlaveTimer_SetConfig+0x110>
 8009ff0:	2b40      	cmp	r3, #64	@ 0x40
 8009ff2:	d859      	bhi.n	800a0a8 <TIM_SlaveTimer_SetConfig+0x194>
 8009ff4:	2b30      	cmp	r3, #48	@ 0x30
 8009ff6:	d05a      	beq.n	800a0ae <TIM_SlaveTimer_SetConfig+0x19a>
 8009ff8:	2b30      	cmp	r3, #48	@ 0x30
 8009ffa:	d855      	bhi.n	800a0a8 <TIM_SlaveTimer_SetConfig+0x194>
 8009ffc:	2b20      	cmp	r3, #32
 8009ffe:	d056      	beq.n	800a0ae <TIM_SlaveTimer_SetConfig+0x19a>
 800a000:	2b20      	cmp	r3, #32
 800a002:	d851      	bhi.n	800a0a8 <TIM_SlaveTimer_SetConfig+0x194>
 800a004:	2b00      	cmp	r3, #0
 800a006:	d052      	beq.n	800a0ae <TIM_SlaveTimer_SetConfig+0x19a>
 800a008:	2b10      	cmp	r3, #16
 800a00a:	d050      	beq.n	800a0ae <TIM_SlaveTimer_SetConfig+0x19a>
 800a00c:	e04c      	b.n	800a0a8 <TIM_SlaveTimer_SetConfig+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800a01e:	f000 f9ff 	bl	800a420 <TIM_ETR_SetConfig>
      break;
 800a022:	e045      	b.n	800a0b0 <TIM_SlaveTimer_SetConfig+0x19c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	2b05      	cmp	r3, #5
 800a02a:	d004      	beq.n	800a036 <TIM_SlaveTimer_SetConfig+0x122>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 800a030:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 800a034:	d101      	bne.n	800a03a <TIM_SlaveTimer_SetConfig+0x126>
      {
        return HAL_ERROR;
 800a036:	2301      	movs	r3, #1
 800a038:	e03b      	b.n	800a0b2 <TIM_SlaveTimer_SetConfig+0x19e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	6a1b      	ldr	r3, [r3, #32]
 800a040:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	6a1a      	ldr	r2, [r3, #32]
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f022 0201 	bic.w	r2, r2, #1
 800a050:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	699b      	ldr	r3, [r3, #24]
 800a058:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a05a:	68bb      	ldr	r3, [r7, #8]
 800a05c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a060:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	691b      	ldr	r3, [r3, #16]
 800a066:	011b      	lsls	r3, r3, #4
 800a068:	68ba      	ldr	r2, [r7, #8]
 800a06a:	4313      	orrs	r3, r2
 800a06c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	68ba      	ldr	r2, [r7, #8]
 800a074:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	68fa      	ldr	r2, [r7, #12]
 800a07c:	621a      	str	r2, [r3, #32]
      break;
 800a07e:	e017      	b.n	800a0b0 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a08c:	461a      	mov	r2, r3
 800a08e:	f000 f895 	bl	800a1bc <TIM_TI1_ConfigInputStage>
      break;
 800a092:	e00d      	b.n	800a0b0 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a0a0:	461a      	mov	r2, r3
 800a0a2:	f000 f8f7 	bl	800a294 <TIM_TI2_ConfigInputStage>
      break;
 800a0a6:	e003      	b.n	800a0b0 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 800a0a8:	2301      	movs	r3, #1
 800a0aa:	75fb      	strb	r3, [r7, #23]
      break;
 800a0ac:	e000      	b.n	800a0b0 <TIM_SlaveTimer_SetConfig+0x19c>
      break;
 800a0ae:	bf00      	nop
  }

  return status;
 800a0b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	3718      	adds	r7, #24
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}
 800a0ba:	bf00      	nop
 800a0bc:	00100070 	.word	0x00100070
 800a0c0:	00100060 	.word	0x00100060
 800a0c4:	00100050 	.word	0x00100050
 800a0c8:	00100040 	.word	0x00100040
 800a0cc:	00100030 	.word	0x00100030
 800a0d0:	00100020 	.word	0x00100020

0800a0d4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b087      	sub	sp, #28
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	60f8      	str	r0, [r7, #12]
 800a0dc:	60b9      	str	r1, [r7, #8]
 800a0de:	607a      	str	r2, [r7, #4]
 800a0e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	6a1b      	ldr	r3, [r3, #32]
 800a0e6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	6a1b      	ldr	r3, [r3, #32]
 800a0ec:	f023 0201 	bic.w	r2, r3, #1
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	699b      	ldr	r3, [r3, #24]
 800a0f8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	4a28      	ldr	r2, [pc, #160]	@ (800a1a0 <TIM_TI1_SetConfig+0xcc>)
 800a0fe:	4293      	cmp	r3, r2
 800a100:	d01b      	beq.n	800a13a <TIM_TI1_SetConfig+0x66>
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a108:	d017      	beq.n	800a13a <TIM_TI1_SetConfig+0x66>
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	4a25      	ldr	r2, [pc, #148]	@ (800a1a4 <TIM_TI1_SetConfig+0xd0>)
 800a10e:	4293      	cmp	r3, r2
 800a110:	d013      	beq.n	800a13a <TIM_TI1_SetConfig+0x66>
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	4a24      	ldr	r2, [pc, #144]	@ (800a1a8 <TIM_TI1_SetConfig+0xd4>)
 800a116:	4293      	cmp	r3, r2
 800a118:	d00f      	beq.n	800a13a <TIM_TI1_SetConfig+0x66>
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	4a23      	ldr	r2, [pc, #140]	@ (800a1ac <TIM_TI1_SetConfig+0xd8>)
 800a11e:	4293      	cmp	r3, r2
 800a120:	d00b      	beq.n	800a13a <TIM_TI1_SetConfig+0x66>
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	4a22      	ldr	r2, [pc, #136]	@ (800a1b0 <TIM_TI1_SetConfig+0xdc>)
 800a126:	4293      	cmp	r3, r2
 800a128:	d007      	beq.n	800a13a <TIM_TI1_SetConfig+0x66>
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	4a21      	ldr	r2, [pc, #132]	@ (800a1b4 <TIM_TI1_SetConfig+0xe0>)
 800a12e:	4293      	cmp	r3, r2
 800a130:	d003      	beq.n	800a13a <TIM_TI1_SetConfig+0x66>
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	4a20      	ldr	r2, [pc, #128]	@ (800a1b8 <TIM_TI1_SetConfig+0xe4>)
 800a136:	4293      	cmp	r3, r2
 800a138:	d101      	bne.n	800a13e <TIM_TI1_SetConfig+0x6a>
 800a13a:	2301      	movs	r3, #1
 800a13c:	e000      	b.n	800a140 <TIM_TI1_SetConfig+0x6c>
 800a13e:	2300      	movs	r3, #0
 800a140:	2b00      	cmp	r3, #0
 800a142:	d008      	beq.n	800a156 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a144:	697b      	ldr	r3, [r7, #20]
 800a146:	f023 0303 	bic.w	r3, r3, #3
 800a14a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a14c:	697a      	ldr	r2, [r7, #20]
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	4313      	orrs	r3, r2
 800a152:	617b      	str	r3, [r7, #20]
 800a154:	e003      	b.n	800a15e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a156:	697b      	ldr	r3, [r7, #20]
 800a158:	f043 0301 	orr.w	r3, r3, #1
 800a15c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a15e:	697b      	ldr	r3, [r7, #20]
 800a160:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a164:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	011b      	lsls	r3, r3, #4
 800a16a:	b2db      	uxtb	r3, r3
 800a16c:	697a      	ldr	r2, [r7, #20]
 800a16e:	4313      	orrs	r3, r2
 800a170:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a172:	693b      	ldr	r3, [r7, #16]
 800a174:	f023 030a 	bic.w	r3, r3, #10
 800a178:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	f003 030a 	and.w	r3, r3, #10
 800a180:	693a      	ldr	r2, [r7, #16]
 800a182:	4313      	orrs	r3, r2
 800a184:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	697a      	ldr	r2, [r7, #20]
 800a18a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	693a      	ldr	r2, [r7, #16]
 800a190:	621a      	str	r2, [r3, #32]
}
 800a192:	bf00      	nop
 800a194:	371c      	adds	r7, #28
 800a196:	46bd      	mov	sp, r7
 800a198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19c:	4770      	bx	lr
 800a19e:	bf00      	nop
 800a1a0:	40012c00 	.word	0x40012c00
 800a1a4:	40000400 	.word	0x40000400
 800a1a8:	40000800 	.word	0x40000800
 800a1ac:	40000c00 	.word	0x40000c00
 800a1b0:	40013400 	.word	0x40013400
 800a1b4:	40014000 	.word	0x40014000
 800a1b8:	40015000 	.word	0x40015000

0800a1bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a1bc:	b480      	push	{r7}
 800a1be:	b087      	sub	sp, #28
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	60f8      	str	r0, [r7, #12]
 800a1c4:	60b9      	str	r1, [r7, #8]
 800a1c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	6a1b      	ldr	r3, [r3, #32]
 800a1cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	6a1b      	ldr	r3, [r3, #32]
 800a1d2:	f023 0201 	bic.w	r2, r3, #1
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	699b      	ldr	r3, [r3, #24]
 800a1de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a1e0:	693b      	ldr	r3, [r7, #16]
 800a1e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a1e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	011b      	lsls	r3, r3, #4
 800a1ec:	693a      	ldr	r2, [r7, #16]
 800a1ee:	4313      	orrs	r3, r2
 800a1f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a1f2:	697b      	ldr	r3, [r7, #20]
 800a1f4:	f023 030a 	bic.w	r3, r3, #10
 800a1f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a1fa:	697a      	ldr	r2, [r7, #20]
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	4313      	orrs	r3, r2
 800a200:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	693a      	ldr	r2, [r7, #16]
 800a206:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	697a      	ldr	r2, [r7, #20]
 800a20c:	621a      	str	r2, [r3, #32]
}
 800a20e:	bf00      	nop
 800a210:	371c      	adds	r7, #28
 800a212:	46bd      	mov	sp, r7
 800a214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a218:	4770      	bx	lr

0800a21a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a21a:	b480      	push	{r7}
 800a21c:	b087      	sub	sp, #28
 800a21e:	af00      	add	r7, sp, #0
 800a220:	60f8      	str	r0, [r7, #12]
 800a222:	60b9      	str	r1, [r7, #8]
 800a224:	607a      	str	r2, [r7, #4]
 800a226:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	6a1b      	ldr	r3, [r3, #32]
 800a22c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	6a1b      	ldr	r3, [r3, #32]
 800a232:	f023 0210 	bic.w	r2, r3, #16
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	699b      	ldr	r3, [r3, #24]
 800a23e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a240:	693b      	ldr	r3, [r7, #16]
 800a242:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a246:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	021b      	lsls	r3, r3, #8
 800a24c:	693a      	ldr	r2, [r7, #16]
 800a24e:	4313      	orrs	r3, r2
 800a250:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a252:	693b      	ldr	r3, [r7, #16]
 800a254:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a258:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	031b      	lsls	r3, r3, #12
 800a25e:	b29b      	uxth	r3, r3
 800a260:	693a      	ldr	r2, [r7, #16]
 800a262:	4313      	orrs	r3, r2
 800a264:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a266:	697b      	ldr	r3, [r7, #20]
 800a268:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a26c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	011b      	lsls	r3, r3, #4
 800a272:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800a276:	697a      	ldr	r2, [r7, #20]
 800a278:	4313      	orrs	r3, r2
 800a27a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	693a      	ldr	r2, [r7, #16]
 800a280:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	697a      	ldr	r2, [r7, #20]
 800a286:	621a      	str	r2, [r3, #32]
}
 800a288:	bf00      	nop
 800a28a:	371c      	adds	r7, #28
 800a28c:	46bd      	mov	sp, r7
 800a28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a292:	4770      	bx	lr

0800a294 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a294:	b480      	push	{r7}
 800a296:	b087      	sub	sp, #28
 800a298:	af00      	add	r7, sp, #0
 800a29a:	60f8      	str	r0, [r7, #12]
 800a29c:	60b9      	str	r1, [r7, #8]
 800a29e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	6a1b      	ldr	r3, [r3, #32]
 800a2a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	6a1b      	ldr	r3, [r3, #32]
 800a2aa:	f023 0210 	bic.w	r2, r3, #16
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	699b      	ldr	r3, [r3, #24]
 800a2b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a2b8:	693b      	ldr	r3, [r7, #16]
 800a2ba:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a2be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	031b      	lsls	r3, r3, #12
 800a2c4:	693a      	ldr	r2, [r7, #16]
 800a2c6:	4313      	orrs	r3, r2
 800a2c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a2d0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	011b      	lsls	r3, r3, #4
 800a2d6:	697a      	ldr	r2, [r7, #20]
 800a2d8:	4313      	orrs	r3, r2
 800a2da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	693a      	ldr	r2, [r7, #16]
 800a2e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	697a      	ldr	r2, [r7, #20]
 800a2e6:	621a      	str	r2, [r3, #32]
}
 800a2e8:	bf00      	nop
 800a2ea:	371c      	adds	r7, #28
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f2:	4770      	bx	lr

0800a2f4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b087      	sub	sp, #28
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	60f8      	str	r0, [r7, #12]
 800a2fc:	60b9      	str	r1, [r7, #8]
 800a2fe:	607a      	str	r2, [r7, #4]
 800a300:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	6a1b      	ldr	r3, [r3, #32]
 800a306:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	6a1b      	ldr	r3, [r3, #32]
 800a30c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	69db      	ldr	r3, [r3, #28]
 800a318:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a31a:	693b      	ldr	r3, [r7, #16]
 800a31c:	f023 0303 	bic.w	r3, r3, #3
 800a320:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800a322:	693a      	ldr	r2, [r7, #16]
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	4313      	orrs	r3, r2
 800a328:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a32a:	693b      	ldr	r3, [r7, #16]
 800a32c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a330:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	011b      	lsls	r3, r3, #4
 800a336:	b2db      	uxtb	r3, r3
 800a338:	693a      	ldr	r2, [r7, #16]
 800a33a:	4313      	orrs	r3, r2
 800a33c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a33e:	697b      	ldr	r3, [r7, #20]
 800a340:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800a344:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a346:	68bb      	ldr	r3, [r7, #8]
 800a348:	021b      	lsls	r3, r3, #8
 800a34a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800a34e:	697a      	ldr	r2, [r7, #20]
 800a350:	4313      	orrs	r3, r2
 800a352:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	693a      	ldr	r2, [r7, #16]
 800a358:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	697a      	ldr	r2, [r7, #20]
 800a35e:	621a      	str	r2, [r3, #32]
}
 800a360:	bf00      	nop
 800a362:	371c      	adds	r7, #28
 800a364:	46bd      	mov	sp, r7
 800a366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36a:	4770      	bx	lr

0800a36c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a36c:	b480      	push	{r7}
 800a36e:	b087      	sub	sp, #28
 800a370:	af00      	add	r7, sp, #0
 800a372:	60f8      	str	r0, [r7, #12]
 800a374:	60b9      	str	r1, [r7, #8]
 800a376:	607a      	str	r2, [r7, #4]
 800a378:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	6a1b      	ldr	r3, [r3, #32]
 800a37e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	6a1b      	ldr	r3, [r3, #32]
 800a384:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	69db      	ldr	r3, [r3, #28]
 800a390:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a392:	693b      	ldr	r3, [r7, #16]
 800a394:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a398:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	021b      	lsls	r3, r3, #8
 800a39e:	693a      	ldr	r2, [r7, #16]
 800a3a0:	4313      	orrs	r3, r2
 800a3a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a3a4:	693b      	ldr	r3, [r7, #16]
 800a3a6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a3aa:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	031b      	lsls	r3, r3, #12
 800a3b0:	b29b      	uxth	r3, r3
 800a3b2:	693a      	ldr	r2, [r7, #16]
 800a3b4:	4313      	orrs	r3, r2
 800a3b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a3b8:	697b      	ldr	r3, [r7, #20]
 800a3ba:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800a3be:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	031b      	lsls	r3, r3, #12
 800a3c4:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800a3c8:	697a      	ldr	r2, [r7, #20]
 800a3ca:	4313      	orrs	r3, r2
 800a3cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	693a      	ldr	r2, [r7, #16]
 800a3d2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	697a      	ldr	r2, [r7, #20]
 800a3d8:	621a      	str	r2, [r3, #32]
}
 800a3da:	bf00      	nop
 800a3dc:	371c      	adds	r7, #28
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e4:	4770      	bx	lr

0800a3e6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a3e6:	b480      	push	{r7}
 800a3e8:	b085      	sub	sp, #20
 800a3ea:	af00      	add	r7, sp, #0
 800a3ec:	6078      	str	r0, [r7, #4]
 800a3ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	689b      	ldr	r3, [r3, #8]
 800a3f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a3fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a400:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a402:	683a      	ldr	r2, [r7, #0]
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	4313      	orrs	r3, r2
 800a408:	f043 0307 	orr.w	r3, r3, #7
 800a40c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	68fa      	ldr	r2, [r7, #12]
 800a412:	609a      	str	r2, [r3, #8]
}
 800a414:	bf00      	nop
 800a416:	3714      	adds	r7, #20
 800a418:	46bd      	mov	sp, r7
 800a41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41e:	4770      	bx	lr

0800a420 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a420:	b480      	push	{r7}
 800a422:	b087      	sub	sp, #28
 800a424:	af00      	add	r7, sp, #0
 800a426:	60f8      	str	r0, [r7, #12]
 800a428:	60b9      	str	r1, [r7, #8]
 800a42a:	607a      	str	r2, [r7, #4]
 800a42c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	689b      	ldr	r3, [r3, #8]
 800a432:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a434:	697b      	ldr	r3, [r7, #20]
 800a436:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a43a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	021a      	lsls	r2, r3, #8
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	431a      	orrs	r2, r3
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	4313      	orrs	r3, r2
 800a448:	697a      	ldr	r2, [r7, #20]
 800a44a:	4313      	orrs	r3, r2
 800a44c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	697a      	ldr	r2, [r7, #20]
 800a452:	609a      	str	r2, [r3, #8]
}
 800a454:	bf00      	nop
 800a456:	371c      	adds	r7, #28
 800a458:	46bd      	mov	sp, r7
 800a45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45e:	4770      	bx	lr

0800a460 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a460:	b480      	push	{r7}
 800a462:	b087      	sub	sp, #28
 800a464:	af00      	add	r7, sp, #0
 800a466:	60f8      	str	r0, [r7, #12]
 800a468:	60b9      	str	r1, [r7, #8]
 800a46a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	f003 031f 	and.w	r3, r3, #31
 800a472:	2201      	movs	r2, #1
 800a474:	fa02 f303 	lsl.w	r3, r2, r3
 800a478:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	6a1a      	ldr	r2, [r3, #32]
 800a47e:	697b      	ldr	r3, [r7, #20]
 800a480:	43db      	mvns	r3, r3
 800a482:	401a      	ands	r2, r3
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	6a1a      	ldr	r2, [r3, #32]
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	f003 031f 	and.w	r3, r3, #31
 800a492:	6879      	ldr	r1, [r7, #4]
 800a494:	fa01 f303 	lsl.w	r3, r1, r3
 800a498:	431a      	orrs	r2, r3
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	621a      	str	r2, [r3, #32]
}
 800a49e:	bf00      	nop
 800a4a0:	371c      	adds	r7, #28
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a8:	4770      	bx	lr
	...

0800a4ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a4ac:	b480      	push	{r7}
 800a4ae:	b085      	sub	sp, #20
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
 800a4b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a4bc:	2b01      	cmp	r3, #1
 800a4be:	d101      	bne.n	800a4c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a4c0:	2302      	movs	r3, #2
 800a4c2:	e074      	b.n	800a5ae <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2201      	movs	r2, #1
 800a4c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2202      	movs	r2, #2
 800a4d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	685b      	ldr	r3, [r3, #4]
 800a4da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	689b      	ldr	r3, [r3, #8]
 800a4e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	4a34      	ldr	r2, [pc, #208]	@ (800a5bc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a4ea:	4293      	cmp	r3, r2
 800a4ec:	d009      	beq.n	800a502 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	4a33      	ldr	r2, [pc, #204]	@ (800a5c0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a4f4:	4293      	cmp	r3, r2
 800a4f6:	d004      	beq.n	800a502 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	4a31      	ldr	r2, [pc, #196]	@ (800a5c4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a4fe:	4293      	cmp	r3, r2
 800a500:	d108      	bne.n	800a514 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a508:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	685b      	ldr	r3, [r3, #4]
 800a50e:	68fa      	ldr	r2, [r7, #12]
 800a510:	4313      	orrs	r3, r2
 800a512:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a51a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a51e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	68fa      	ldr	r2, [r7, #12]
 800a526:	4313      	orrs	r3, r2
 800a528:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	68fa      	ldr	r2, [r7, #12]
 800a530:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	4a21      	ldr	r2, [pc, #132]	@ (800a5bc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a538:	4293      	cmp	r3, r2
 800a53a:	d022      	beq.n	800a582 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a544:	d01d      	beq.n	800a582 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	4a1f      	ldr	r2, [pc, #124]	@ (800a5c8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800a54c:	4293      	cmp	r3, r2
 800a54e:	d018      	beq.n	800a582 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	4a1d      	ldr	r2, [pc, #116]	@ (800a5cc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800a556:	4293      	cmp	r3, r2
 800a558:	d013      	beq.n	800a582 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	4a1c      	ldr	r2, [pc, #112]	@ (800a5d0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800a560:	4293      	cmp	r3, r2
 800a562:	d00e      	beq.n	800a582 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	4a15      	ldr	r2, [pc, #84]	@ (800a5c0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a56a:	4293      	cmp	r3, r2
 800a56c:	d009      	beq.n	800a582 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	4a18      	ldr	r2, [pc, #96]	@ (800a5d4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800a574:	4293      	cmp	r3, r2
 800a576:	d004      	beq.n	800a582 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	4a11      	ldr	r2, [pc, #68]	@ (800a5c4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a57e:	4293      	cmp	r3, r2
 800a580:	d10c      	bne.n	800a59c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a582:	68bb      	ldr	r3, [r7, #8]
 800a584:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a588:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	689b      	ldr	r3, [r3, #8]
 800a58e:	68ba      	ldr	r2, [r7, #8]
 800a590:	4313      	orrs	r3, r2
 800a592:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	68ba      	ldr	r2, [r7, #8]
 800a59a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2201      	movs	r2, #1
 800a5a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a5ac:	2300      	movs	r3, #0
}
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	3714      	adds	r7, #20
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b8:	4770      	bx	lr
 800a5ba:	bf00      	nop
 800a5bc:	40012c00 	.word	0x40012c00
 800a5c0:	40013400 	.word	0x40013400
 800a5c4:	40015000 	.word	0x40015000
 800a5c8:	40000400 	.word	0x40000400
 800a5cc:	40000800 	.word	0x40000800
 800a5d0:	40000c00 	.word	0x40000c00
 800a5d4:	40014000 	.word	0x40014000

0800a5d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a5d8:	b480      	push	{r7}
 800a5da:	b085      	sub	sp, #20
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
 800a5e0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a5ec:	2b01      	cmp	r3, #1
 800a5ee:	d101      	bne.n	800a5f4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a5f0:	2302      	movs	r3, #2
 800a5f2:	e078      	b.n	800a6e6 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2201      	movs	r2, #1
 800a5f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	68db      	ldr	r3, [r3, #12]
 800a606:	4313      	orrs	r3, r2
 800a608:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	689b      	ldr	r3, [r3, #8]
 800a614:	4313      	orrs	r3, r2
 800a616:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	685b      	ldr	r3, [r3, #4]
 800a622:	4313      	orrs	r3, r2
 800a624:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	4313      	orrs	r3, r2
 800a632:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	691b      	ldr	r3, [r3, #16]
 800a63e:	4313      	orrs	r3, r2
 800a640:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	695b      	ldr	r3, [r3, #20]
 800a64c:	4313      	orrs	r3, r2
 800a64e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a65a:	4313      	orrs	r3, r2
 800a65c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	699b      	ldr	r3, [r3, #24]
 800a668:	041b      	lsls	r3, r3, #16
 800a66a:	4313      	orrs	r3, r2
 800a66c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	69db      	ldr	r3, [r3, #28]
 800a678:	4313      	orrs	r3, r2
 800a67a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	4a1c      	ldr	r2, [pc, #112]	@ (800a6f4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800a682:	4293      	cmp	r3, r2
 800a684:	d009      	beq.n	800a69a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	4a1b      	ldr	r2, [pc, #108]	@ (800a6f8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800a68c:	4293      	cmp	r3, r2
 800a68e:	d004      	beq.n	800a69a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	4a19      	ldr	r2, [pc, #100]	@ (800a6fc <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800a696:	4293      	cmp	r3, r2
 800a698:	d11c      	bne.n	800a6d4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6a4:	051b      	lsls	r3, r3, #20
 800a6a6:	4313      	orrs	r3, r2
 800a6a8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	6a1b      	ldr	r3, [r3, #32]
 800a6b4:	4313      	orrs	r3, r2
 800a6b6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6c2:	4313      	orrs	r3, r2
 800a6c4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6d0:	4313      	orrs	r3, r2
 800a6d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	68fa      	ldr	r2, [r7, #12]
 800a6da:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2200      	movs	r2, #0
 800a6e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a6e4:	2300      	movs	r3, #0
}
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	3714      	adds	r7, #20
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f0:	4770      	bx	lr
 800a6f2:	bf00      	nop
 800a6f4:	40012c00 	.word	0x40012c00
 800a6f8:	40013400 	.word	0x40013400
 800a6fc:	40015000 	.word	0x40015000

0800a700 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a700:	b480      	push	{r7}
 800a702:	b083      	sub	sp, #12
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a708:	bf00      	nop
 800a70a:	370c      	adds	r7, #12
 800a70c:	46bd      	mov	sp, r7
 800a70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a712:	4770      	bx	lr

0800a714 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a714:	b480      	push	{r7}
 800a716:	b083      	sub	sp, #12
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a71c:	bf00      	nop
 800a71e:	370c      	adds	r7, #12
 800a720:	46bd      	mov	sp, r7
 800a722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a726:	4770      	bx	lr

0800a728 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a728:	b480      	push	{r7}
 800a72a:	b083      	sub	sp, #12
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a730:	bf00      	nop
 800a732:	370c      	adds	r7, #12
 800a734:	46bd      	mov	sp, r7
 800a736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73a:	4770      	bx	lr

0800a73c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a73c:	b480      	push	{r7}
 800a73e:	b083      	sub	sp, #12
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a744:	bf00      	nop
 800a746:	370c      	adds	r7, #12
 800a748:	46bd      	mov	sp, r7
 800a74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74e:	4770      	bx	lr

0800a750 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a750:	b480      	push	{r7}
 800a752:	b083      	sub	sp, #12
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a758:	bf00      	nop
 800a75a:	370c      	adds	r7, #12
 800a75c:	46bd      	mov	sp, r7
 800a75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a762:	4770      	bx	lr

0800a764 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a764:	b480      	push	{r7}
 800a766:	b083      	sub	sp, #12
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a76c:	bf00      	nop
 800a76e:	370c      	adds	r7, #12
 800a770:	46bd      	mov	sp, r7
 800a772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a776:	4770      	bx	lr

0800a778 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a778:	b480      	push	{r7}
 800a77a:	b083      	sub	sp, #12
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a780:	bf00      	nop
 800a782:	370c      	adds	r7, #12
 800a784:	46bd      	mov	sp, r7
 800a786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78a:	4770      	bx	lr

0800a78c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800a78c:	b480      	push	{r7}
 800a78e:	b085      	sub	sp, #20
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2200      	movs	r2, #0
 800a798:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a79c:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800a7a0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	b29a      	uxth	r2, r3
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800a7ac:	2300      	movs	r3, #0
}
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	3714      	adds	r7, #20
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b8:	4770      	bx	lr

0800a7ba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800a7ba:	b480      	push	{r7}
 800a7bc:	b085      	sub	sp, #20
 800a7be:	af00      	add	r7, sp, #0
 800a7c0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a7c2:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800a7c6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a7ce:	b29a      	uxth	r2, r3
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	b29b      	uxth	r3, r3
 800a7d4:	43db      	mvns	r3, r3
 800a7d6:	b29b      	uxth	r3, r3
 800a7d8:	4013      	ands	r3, r2
 800a7da:	b29a      	uxth	r2, r3
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800a7e2:	2300      	movs	r3, #0
}
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	3714      	adds	r7, #20
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ee:	4770      	bx	lr

0800a7f0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b085      	sub	sp, #20
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	60f8      	str	r0, [r7, #12]
 800a7f8:	1d3b      	adds	r3, r7, #4
 800a7fa:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	2201      	movs	r2, #1
 800a802:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	2200      	movs	r2, #0
 800a80a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	2200      	movs	r2, #0
 800a812:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	2200      	movs	r2, #0
 800a81a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800a81e:	2300      	movs	r3, #0
}
 800a820:	4618      	mov	r0, r3
 800a822:	3714      	adds	r7, #20
 800a824:	46bd      	mov	sp, r7
 800a826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82a:	4770      	bx	lr

0800a82c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a82c:	b480      	push	{r7}
 800a82e:	b09d      	sub	sp, #116	@ 0x74
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
 800a834:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800a836:	2300      	movs	r3, #0
 800a838:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800a83c:	687a      	ldr	r2, [r7, #4]
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	781b      	ldrb	r3, [r3, #0]
 800a842:	009b      	lsls	r3, r3, #2
 800a844:	4413      	add	r3, r2
 800a846:	881b      	ldrh	r3, [r3, #0]
 800a848:	b29b      	uxth	r3, r3
 800a84a:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800a84e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a852:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	78db      	ldrb	r3, [r3, #3]
 800a85a:	2b03      	cmp	r3, #3
 800a85c:	d81f      	bhi.n	800a89e <USB_ActivateEndpoint+0x72>
 800a85e:	a201      	add	r2, pc, #4	@ (adr r2, 800a864 <USB_ActivateEndpoint+0x38>)
 800a860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a864:	0800a875 	.word	0x0800a875
 800a868:	0800a891 	.word	0x0800a891
 800a86c:	0800a8a7 	.word	0x0800a8a7
 800a870:	0800a883 	.word	0x0800a883
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800a874:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a878:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800a87c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800a880:	e012      	b.n	800a8a8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800a882:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a886:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800a88a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800a88e:	e00b      	b.n	800a8a8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800a890:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a894:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800a898:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800a89c:	e004      	b.n	800a8a8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800a89e:	2301      	movs	r3, #1
 800a8a0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800a8a4:	e000      	b.n	800a8a8 <USB_ActivateEndpoint+0x7c>
      break;
 800a8a6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800a8a8:	687a      	ldr	r2, [r7, #4]
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	781b      	ldrb	r3, [r3, #0]
 800a8ae:	009b      	lsls	r3, r3, #2
 800a8b0:	441a      	add	r2, r3
 800a8b2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a8b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a8ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a8be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a8c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a8c6:	b29b      	uxth	r3, r3
 800a8c8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800a8ca:	687a      	ldr	r2, [r7, #4]
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	781b      	ldrb	r3, [r3, #0]
 800a8d0:	009b      	lsls	r3, r3, #2
 800a8d2:	4413      	add	r3, r2
 800a8d4:	881b      	ldrh	r3, [r3, #0]
 800a8d6:	b29b      	uxth	r3, r3
 800a8d8:	b21b      	sxth	r3, r3
 800a8da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a8de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a8e2:	b21a      	sxth	r2, r3
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	781b      	ldrb	r3, [r3, #0]
 800a8e8:	b21b      	sxth	r3, r3
 800a8ea:	4313      	orrs	r3, r2
 800a8ec:	b21b      	sxth	r3, r3
 800a8ee:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800a8f2:	687a      	ldr	r2, [r7, #4]
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	781b      	ldrb	r3, [r3, #0]
 800a8f8:	009b      	lsls	r3, r3, #2
 800a8fa:	441a      	add	r2, r3
 800a8fc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800a900:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a904:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a908:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a90c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a910:	b29b      	uxth	r3, r3
 800a912:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	7b1b      	ldrb	r3, [r3, #12]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	f040 8178 	bne.w	800ac0e <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	785b      	ldrb	r3, [r3, #1]
 800a922:	2b00      	cmp	r3, #0
 800a924:	f000 8084 	beq.w	800aa30 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	61bb      	str	r3, [r7, #24]
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a932:	b29b      	uxth	r3, r3
 800a934:	461a      	mov	r2, r3
 800a936:	69bb      	ldr	r3, [r7, #24]
 800a938:	4413      	add	r3, r2
 800a93a:	61bb      	str	r3, [r7, #24]
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	781b      	ldrb	r3, [r3, #0]
 800a940:	00da      	lsls	r2, r3, #3
 800a942:	69bb      	ldr	r3, [r7, #24]
 800a944:	4413      	add	r3, r2
 800a946:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a94a:	617b      	str	r3, [r7, #20]
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	88db      	ldrh	r3, [r3, #6]
 800a950:	085b      	lsrs	r3, r3, #1
 800a952:	b29b      	uxth	r3, r3
 800a954:	005b      	lsls	r3, r3, #1
 800a956:	b29a      	uxth	r2, r3
 800a958:	697b      	ldr	r3, [r7, #20]
 800a95a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a95c:	687a      	ldr	r2, [r7, #4]
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	781b      	ldrb	r3, [r3, #0]
 800a962:	009b      	lsls	r3, r3, #2
 800a964:	4413      	add	r3, r2
 800a966:	881b      	ldrh	r3, [r3, #0]
 800a968:	827b      	strh	r3, [r7, #18]
 800a96a:	8a7b      	ldrh	r3, [r7, #18]
 800a96c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a970:	2b00      	cmp	r3, #0
 800a972:	d01b      	beq.n	800a9ac <USB_ActivateEndpoint+0x180>
 800a974:	687a      	ldr	r2, [r7, #4]
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	781b      	ldrb	r3, [r3, #0]
 800a97a:	009b      	lsls	r3, r3, #2
 800a97c:	4413      	add	r3, r2
 800a97e:	881b      	ldrh	r3, [r3, #0]
 800a980:	b29b      	uxth	r3, r3
 800a982:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a986:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a98a:	823b      	strh	r3, [r7, #16]
 800a98c:	687a      	ldr	r2, [r7, #4]
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	781b      	ldrb	r3, [r3, #0]
 800a992:	009b      	lsls	r3, r3, #2
 800a994:	441a      	add	r2, r3
 800a996:	8a3b      	ldrh	r3, [r7, #16]
 800a998:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a99c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a9a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a9a4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a9a8:	b29b      	uxth	r3, r3
 800a9aa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	78db      	ldrb	r3, [r3, #3]
 800a9b0:	2b01      	cmp	r3, #1
 800a9b2:	d020      	beq.n	800a9f6 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a9b4:	687a      	ldr	r2, [r7, #4]
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	781b      	ldrb	r3, [r3, #0]
 800a9ba:	009b      	lsls	r3, r3, #2
 800a9bc:	4413      	add	r3, r2
 800a9be:	881b      	ldrh	r3, [r3, #0]
 800a9c0:	b29b      	uxth	r3, r3
 800a9c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a9c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a9ca:	81bb      	strh	r3, [r7, #12]
 800a9cc:	89bb      	ldrh	r3, [r7, #12]
 800a9ce:	f083 0320 	eor.w	r3, r3, #32
 800a9d2:	81bb      	strh	r3, [r7, #12]
 800a9d4:	687a      	ldr	r2, [r7, #4]
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	781b      	ldrb	r3, [r3, #0]
 800a9da:	009b      	lsls	r3, r3, #2
 800a9dc:	441a      	add	r2, r3
 800a9de:	89bb      	ldrh	r3, [r7, #12]
 800a9e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a9e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a9e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a9ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a9f0:	b29b      	uxth	r3, r3
 800a9f2:	8013      	strh	r3, [r2, #0]
 800a9f4:	e2d5      	b.n	800afa2 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a9f6:	687a      	ldr	r2, [r7, #4]
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	781b      	ldrb	r3, [r3, #0]
 800a9fc:	009b      	lsls	r3, r3, #2
 800a9fe:	4413      	add	r3, r2
 800aa00:	881b      	ldrh	r3, [r3, #0]
 800aa02:	b29b      	uxth	r3, r3
 800aa04:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aa08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aa0c:	81fb      	strh	r3, [r7, #14]
 800aa0e:	687a      	ldr	r2, [r7, #4]
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	781b      	ldrb	r3, [r3, #0]
 800aa14:	009b      	lsls	r3, r3, #2
 800aa16:	441a      	add	r2, r3
 800aa18:	89fb      	ldrh	r3, [r7, #14]
 800aa1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aa1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aa22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aa26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa2a:	b29b      	uxth	r3, r3
 800aa2c:	8013      	strh	r3, [r2, #0]
 800aa2e:	e2b8      	b.n	800afa2 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	633b      	str	r3, [r7, #48]	@ 0x30
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aa3a:	b29b      	uxth	r3, r3
 800aa3c:	461a      	mov	r2, r3
 800aa3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa40:	4413      	add	r3, r2
 800aa42:	633b      	str	r3, [r7, #48]	@ 0x30
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	781b      	ldrb	r3, [r3, #0]
 800aa48:	00da      	lsls	r2, r3, #3
 800aa4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa4c:	4413      	add	r3, r2
 800aa4e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800aa52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	88db      	ldrh	r3, [r3, #6]
 800aa58:	085b      	lsrs	r3, r3, #1
 800aa5a:	b29b      	uxth	r3, r3
 800aa5c:	005b      	lsls	r3, r3, #1
 800aa5e:	b29a      	uxth	r2, r3
 800aa60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa62:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	62bb      	str	r3, [r7, #40]	@ 0x28
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aa6e:	b29b      	uxth	r3, r3
 800aa70:	461a      	mov	r2, r3
 800aa72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa74:	4413      	add	r3, r2
 800aa76:	62bb      	str	r3, [r7, #40]	@ 0x28
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	781b      	ldrb	r3, [r3, #0]
 800aa7c:	00da      	lsls	r2, r3, #3
 800aa7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa80:	4413      	add	r3, r2
 800aa82:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800aa86:	627b      	str	r3, [r7, #36]	@ 0x24
 800aa88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa8a:	881b      	ldrh	r3, [r3, #0]
 800aa8c:	b29b      	uxth	r3, r3
 800aa8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aa92:	b29a      	uxth	r2, r3
 800aa94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa96:	801a      	strh	r2, [r3, #0]
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	691b      	ldr	r3, [r3, #16]
 800aa9c:	2b3e      	cmp	r3, #62	@ 0x3e
 800aa9e:	d91d      	bls.n	800aadc <USB_ActivateEndpoint+0x2b0>
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	691b      	ldr	r3, [r3, #16]
 800aaa4:	095b      	lsrs	r3, r3, #5
 800aaa6:	66bb      	str	r3, [r7, #104]	@ 0x68
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	691b      	ldr	r3, [r3, #16]
 800aaac:	f003 031f 	and.w	r3, r3, #31
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d102      	bne.n	800aaba <USB_ActivateEndpoint+0x28e>
 800aab4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aab6:	3b01      	subs	r3, #1
 800aab8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800aaba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aabc:	881b      	ldrh	r3, [r3, #0]
 800aabe:	b29a      	uxth	r2, r3
 800aac0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aac2:	b29b      	uxth	r3, r3
 800aac4:	029b      	lsls	r3, r3, #10
 800aac6:	b29b      	uxth	r3, r3
 800aac8:	4313      	orrs	r3, r2
 800aaca:	b29b      	uxth	r3, r3
 800aacc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aad0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aad4:	b29a      	uxth	r2, r3
 800aad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aad8:	801a      	strh	r2, [r3, #0]
 800aada:	e026      	b.n	800ab2a <USB_ActivateEndpoint+0x2fe>
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	691b      	ldr	r3, [r3, #16]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d10a      	bne.n	800aafa <USB_ActivateEndpoint+0x2ce>
 800aae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aae6:	881b      	ldrh	r3, [r3, #0]
 800aae8:	b29b      	uxth	r3, r3
 800aaea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aaee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aaf2:	b29a      	uxth	r2, r3
 800aaf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaf6:	801a      	strh	r2, [r3, #0]
 800aaf8:	e017      	b.n	800ab2a <USB_ActivateEndpoint+0x2fe>
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	691b      	ldr	r3, [r3, #16]
 800aafe:	085b      	lsrs	r3, r3, #1
 800ab00:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	691b      	ldr	r3, [r3, #16]
 800ab06:	f003 0301 	and.w	r3, r3, #1
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d002      	beq.n	800ab14 <USB_ActivateEndpoint+0x2e8>
 800ab0e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ab10:	3301      	adds	r3, #1
 800ab12:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ab14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab16:	881b      	ldrh	r3, [r3, #0]
 800ab18:	b29a      	uxth	r2, r3
 800ab1a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ab1c:	b29b      	uxth	r3, r3
 800ab1e:	029b      	lsls	r3, r3, #10
 800ab20:	b29b      	uxth	r3, r3
 800ab22:	4313      	orrs	r3, r2
 800ab24:	b29a      	uxth	r2, r3
 800ab26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab28:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ab2a:	687a      	ldr	r2, [r7, #4]
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	781b      	ldrb	r3, [r3, #0]
 800ab30:	009b      	lsls	r3, r3, #2
 800ab32:	4413      	add	r3, r2
 800ab34:	881b      	ldrh	r3, [r3, #0]
 800ab36:	847b      	strh	r3, [r7, #34]	@ 0x22
 800ab38:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ab3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d01b      	beq.n	800ab7a <USB_ActivateEndpoint+0x34e>
 800ab42:	687a      	ldr	r2, [r7, #4]
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	781b      	ldrb	r3, [r3, #0]
 800ab48:	009b      	lsls	r3, r3, #2
 800ab4a:	4413      	add	r3, r2
 800ab4c:	881b      	ldrh	r3, [r3, #0]
 800ab4e:	b29b      	uxth	r3, r3
 800ab50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ab54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab58:	843b      	strh	r3, [r7, #32]
 800ab5a:	687a      	ldr	r2, [r7, #4]
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	781b      	ldrb	r3, [r3, #0]
 800ab60:	009b      	lsls	r3, r3, #2
 800ab62:	441a      	add	r2, r3
 800ab64:	8c3b      	ldrh	r3, [r7, #32]
 800ab66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ab6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ab6e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ab72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab76:	b29b      	uxth	r3, r3
 800ab78:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	781b      	ldrb	r3, [r3, #0]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d124      	bne.n	800abcc <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ab82:	687a      	ldr	r2, [r7, #4]
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	781b      	ldrb	r3, [r3, #0]
 800ab88:	009b      	lsls	r3, r3, #2
 800ab8a:	4413      	add	r3, r2
 800ab8c:	881b      	ldrh	r3, [r3, #0]
 800ab8e:	b29b      	uxth	r3, r3
 800ab90:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ab94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab98:	83bb      	strh	r3, [r7, #28]
 800ab9a:	8bbb      	ldrh	r3, [r7, #28]
 800ab9c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800aba0:	83bb      	strh	r3, [r7, #28]
 800aba2:	8bbb      	ldrh	r3, [r7, #28]
 800aba4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800aba8:	83bb      	strh	r3, [r7, #28]
 800abaa:	687a      	ldr	r2, [r7, #4]
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	781b      	ldrb	r3, [r3, #0]
 800abb0:	009b      	lsls	r3, r3, #2
 800abb2:	441a      	add	r2, r3
 800abb4:	8bbb      	ldrh	r3, [r7, #28]
 800abb6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800abba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800abbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800abc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800abc6:	b29b      	uxth	r3, r3
 800abc8:	8013      	strh	r3, [r2, #0]
 800abca:	e1ea      	b.n	800afa2 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800abcc:	687a      	ldr	r2, [r7, #4]
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	781b      	ldrb	r3, [r3, #0]
 800abd2:	009b      	lsls	r3, r3, #2
 800abd4:	4413      	add	r3, r2
 800abd6:	881b      	ldrh	r3, [r3, #0]
 800abd8:	b29b      	uxth	r3, r3
 800abda:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800abde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800abe2:	83fb      	strh	r3, [r7, #30]
 800abe4:	8bfb      	ldrh	r3, [r7, #30]
 800abe6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800abea:	83fb      	strh	r3, [r7, #30]
 800abec:	687a      	ldr	r2, [r7, #4]
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	781b      	ldrb	r3, [r3, #0]
 800abf2:	009b      	lsls	r3, r3, #2
 800abf4:	441a      	add	r2, r3
 800abf6:	8bfb      	ldrh	r3, [r7, #30]
 800abf8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800abfc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ac00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ac04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac08:	b29b      	uxth	r3, r3
 800ac0a:	8013      	strh	r3, [r2, #0]
 800ac0c:	e1c9      	b.n	800afa2 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	78db      	ldrb	r3, [r3, #3]
 800ac12:	2b02      	cmp	r3, #2
 800ac14:	d11e      	bne.n	800ac54 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800ac16:	687a      	ldr	r2, [r7, #4]
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	781b      	ldrb	r3, [r3, #0]
 800ac1c:	009b      	lsls	r3, r3, #2
 800ac1e:	4413      	add	r3, r2
 800ac20:	881b      	ldrh	r3, [r3, #0]
 800ac22:	b29b      	uxth	r3, r3
 800ac24:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ac28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac2c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800ac30:	687a      	ldr	r2, [r7, #4]
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	781b      	ldrb	r3, [r3, #0]
 800ac36:	009b      	lsls	r3, r3, #2
 800ac38:	441a      	add	r2, r3
 800ac3a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800ac3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ac42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ac46:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800ac4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac4e:	b29b      	uxth	r3, r3
 800ac50:	8013      	strh	r3, [r2, #0]
 800ac52:	e01d      	b.n	800ac90 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800ac54:	687a      	ldr	r2, [r7, #4]
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	781b      	ldrb	r3, [r3, #0]
 800ac5a:	009b      	lsls	r3, r3, #2
 800ac5c:	4413      	add	r3, r2
 800ac5e:	881b      	ldrh	r3, [r3, #0]
 800ac60:	b29b      	uxth	r3, r3
 800ac62:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800ac66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac6a:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800ac6e:	687a      	ldr	r2, [r7, #4]
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	781b      	ldrb	r3, [r3, #0]
 800ac74:	009b      	lsls	r3, r3, #2
 800ac76:	441a      	add	r2, r3
 800ac78:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800ac7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ac80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ac84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ac88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac8c:	b29b      	uxth	r3, r3
 800ac8e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ac9a:	b29b      	uxth	r3, r3
 800ac9c:	461a      	mov	r2, r3
 800ac9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aca0:	4413      	add	r3, r2
 800aca2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	781b      	ldrb	r3, [r3, #0]
 800aca8:	00da      	lsls	r2, r3, #3
 800acaa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800acac:	4413      	add	r3, r2
 800acae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800acb2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	891b      	ldrh	r3, [r3, #8]
 800acb8:	085b      	lsrs	r3, r3, #1
 800acba:	b29b      	uxth	r3, r3
 800acbc:	005b      	lsls	r3, r3, #1
 800acbe:	b29a      	uxth	r2, r3
 800acc0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800acc2:	801a      	strh	r2, [r3, #0]
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	657b      	str	r3, [r7, #84]	@ 0x54
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800acce:	b29b      	uxth	r3, r3
 800acd0:	461a      	mov	r2, r3
 800acd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800acd4:	4413      	add	r3, r2
 800acd6:	657b      	str	r3, [r7, #84]	@ 0x54
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	781b      	ldrb	r3, [r3, #0]
 800acdc:	00da      	lsls	r2, r3, #3
 800acde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ace0:	4413      	add	r3, r2
 800ace2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800ace6:	653b      	str	r3, [r7, #80]	@ 0x50
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	895b      	ldrh	r3, [r3, #10]
 800acec:	085b      	lsrs	r3, r3, #1
 800acee:	b29b      	uxth	r3, r3
 800acf0:	005b      	lsls	r3, r3, #1
 800acf2:	b29a      	uxth	r2, r3
 800acf4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800acf6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	785b      	ldrb	r3, [r3, #1]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	f040 8093 	bne.w	800ae28 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ad02:	687a      	ldr	r2, [r7, #4]
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	781b      	ldrb	r3, [r3, #0]
 800ad08:	009b      	lsls	r3, r3, #2
 800ad0a:	4413      	add	r3, r2
 800ad0c:	881b      	ldrh	r3, [r3, #0]
 800ad0e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800ad12:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800ad16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d01b      	beq.n	800ad56 <USB_ActivateEndpoint+0x52a>
 800ad1e:	687a      	ldr	r2, [r7, #4]
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	781b      	ldrb	r3, [r3, #0]
 800ad24:	009b      	lsls	r3, r3, #2
 800ad26:	4413      	add	r3, r2
 800ad28:	881b      	ldrh	r3, [r3, #0]
 800ad2a:	b29b      	uxth	r3, r3
 800ad2c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ad30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad34:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800ad36:	687a      	ldr	r2, [r7, #4]
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	781b      	ldrb	r3, [r3, #0]
 800ad3c:	009b      	lsls	r3, r3, #2
 800ad3e:	441a      	add	r2, r3
 800ad40:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800ad42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ad46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ad4a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ad4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad52:	b29b      	uxth	r3, r3
 800ad54:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ad56:	687a      	ldr	r2, [r7, #4]
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	781b      	ldrb	r3, [r3, #0]
 800ad5c:	009b      	lsls	r3, r3, #2
 800ad5e:	4413      	add	r3, r2
 800ad60:	881b      	ldrh	r3, [r3, #0]
 800ad62:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800ad64:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800ad66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d01b      	beq.n	800ada6 <USB_ActivateEndpoint+0x57a>
 800ad6e:	687a      	ldr	r2, [r7, #4]
 800ad70:	683b      	ldr	r3, [r7, #0]
 800ad72:	781b      	ldrb	r3, [r3, #0]
 800ad74:	009b      	lsls	r3, r3, #2
 800ad76:	4413      	add	r3, r2
 800ad78:	881b      	ldrh	r3, [r3, #0]
 800ad7a:	b29b      	uxth	r3, r3
 800ad7c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ad80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad84:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800ad86:	687a      	ldr	r2, [r7, #4]
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	781b      	ldrb	r3, [r3, #0]
 800ad8c:	009b      	lsls	r3, r3, #2
 800ad8e:	441a      	add	r2, r3
 800ad90:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800ad92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ad96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ad9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ad9e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ada2:	b29b      	uxth	r3, r3
 800ada4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ada6:	687a      	ldr	r2, [r7, #4]
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	781b      	ldrb	r3, [r3, #0]
 800adac:	009b      	lsls	r3, r3, #2
 800adae:	4413      	add	r3, r2
 800adb0:	881b      	ldrh	r3, [r3, #0]
 800adb2:	b29b      	uxth	r3, r3
 800adb4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800adb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800adbc:	873b      	strh	r3, [r7, #56]	@ 0x38
 800adbe:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800adc0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800adc4:	873b      	strh	r3, [r7, #56]	@ 0x38
 800adc6:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800adc8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800adcc:	873b      	strh	r3, [r7, #56]	@ 0x38
 800adce:	687a      	ldr	r2, [r7, #4]
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	781b      	ldrb	r3, [r3, #0]
 800add4:	009b      	lsls	r3, r3, #2
 800add6:	441a      	add	r2, r3
 800add8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800adda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800adde:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ade2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ade6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800adea:	b29b      	uxth	r3, r3
 800adec:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800adee:	687a      	ldr	r2, [r7, #4]
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	781b      	ldrb	r3, [r3, #0]
 800adf4:	009b      	lsls	r3, r3, #2
 800adf6:	4413      	add	r3, r2
 800adf8:	881b      	ldrh	r3, [r3, #0]
 800adfa:	b29b      	uxth	r3, r3
 800adfc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ae00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ae04:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800ae06:	687a      	ldr	r2, [r7, #4]
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	781b      	ldrb	r3, [r3, #0]
 800ae0c:	009b      	lsls	r3, r3, #2
 800ae0e:	441a      	add	r2, r3
 800ae10:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ae12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ae16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ae1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ae1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae22:	b29b      	uxth	r3, r3
 800ae24:	8013      	strh	r3, [r2, #0]
 800ae26:	e0bc      	b.n	800afa2 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ae28:	687a      	ldr	r2, [r7, #4]
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	781b      	ldrb	r3, [r3, #0]
 800ae2e:	009b      	lsls	r3, r3, #2
 800ae30:	4413      	add	r3, r2
 800ae32:	881b      	ldrh	r3, [r3, #0]
 800ae34:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800ae38:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800ae3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d01d      	beq.n	800ae80 <USB_ActivateEndpoint+0x654>
 800ae44:	687a      	ldr	r2, [r7, #4]
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	781b      	ldrb	r3, [r3, #0]
 800ae4a:	009b      	lsls	r3, r3, #2
 800ae4c:	4413      	add	r3, r2
 800ae4e:	881b      	ldrh	r3, [r3, #0]
 800ae50:	b29b      	uxth	r3, r3
 800ae52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ae56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae5a:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800ae5e:	687a      	ldr	r2, [r7, #4]
 800ae60:	683b      	ldr	r3, [r7, #0]
 800ae62:	781b      	ldrb	r3, [r3, #0]
 800ae64:	009b      	lsls	r3, r3, #2
 800ae66:	441a      	add	r2, r3
 800ae68:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800ae6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ae70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ae74:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ae78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae7c:	b29b      	uxth	r3, r3
 800ae7e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ae80:	687a      	ldr	r2, [r7, #4]
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	781b      	ldrb	r3, [r3, #0]
 800ae86:	009b      	lsls	r3, r3, #2
 800ae88:	4413      	add	r3, r2
 800ae8a:	881b      	ldrh	r3, [r3, #0]
 800ae8c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800ae90:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800ae94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d01d      	beq.n	800aed8 <USB_ActivateEndpoint+0x6ac>
 800ae9c:	687a      	ldr	r2, [r7, #4]
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	781b      	ldrb	r3, [r3, #0]
 800aea2:	009b      	lsls	r3, r3, #2
 800aea4:	4413      	add	r3, r2
 800aea6:	881b      	ldrh	r3, [r3, #0]
 800aea8:	b29b      	uxth	r3, r3
 800aeaa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aeae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aeb2:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800aeb6:	687a      	ldr	r2, [r7, #4]
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	781b      	ldrb	r3, [r3, #0]
 800aebc:	009b      	lsls	r3, r3, #2
 800aebe:	441a      	add	r2, r3
 800aec0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800aec4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aec8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aecc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aed0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800aed4:	b29b      	uxth	r3, r3
 800aed6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	78db      	ldrb	r3, [r3, #3]
 800aedc:	2b01      	cmp	r3, #1
 800aede:	d024      	beq.n	800af2a <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800aee0:	687a      	ldr	r2, [r7, #4]
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	781b      	ldrb	r3, [r3, #0]
 800aee6:	009b      	lsls	r3, r3, #2
 800aee8:	4413      	add	r3, r2
 800aeea:	881b      	ldrh	r3, [r3, #0]
 800aeec:	b29b      	uxth	r3, r3
 800aeee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aef2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aef6:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800aefa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800aefe:	f083 0320 	eor.w	r3, r3, #32
 800af02:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800af06:	687a      	ldr	r2, [r7, #4]
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	781b      	ldrb	r3, [r3, #0]
 800af0c:	009b      	lsls	r3, r3, #2
 800af0e:	441a      	add	r2, r3
 800af10:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800af14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800af18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800af1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800af20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af24:	b29b      	uxth	r3, r3
 800af26:	8013      	strh	r3, [r2, #0]
 800af28:	e01d      	b.n	800af66 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800af2a:	687a      	ldr	r2, [r7, #4]
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	781b      	ldrb	r3, [r3, #0]
 800af30:	009b      	lsls	r3, r3, #2
 800af32:	4413      	add	r3, r2
 800af34:	881b      	ldrh	r3, [r3, #0]
 800af36:	b29b      	uxth	r3, r3
 800af38:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800af3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800af40:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800af44:	687a      	ldr	r2, [r7, #4]
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	781b      	ldrb	r3, [r3, #0]
 800af4a:	009b      	lsls	r3, r3, #2
 800af4c:	441a      	add	r2, r3
 800af4e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800af52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800af56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800af5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800af5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af62:	b29b      	uxth	r3, r3
 800af64:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800af66:	687a      	ldr	r2, [r7, #4]
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	781b      	ldrb	r3, [r3, #0]
 800af6c:	009b      	lsls	r3, r3, #2
 800af6e:	4413      	add	r3, r2
 800af70:	881b      	ldrh	r3, [r3, #0]
 800af72:	b29b      	uxth	r3, r3
 800af74:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800af78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af7c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800af80:	687a      	ldr	r2, [r7, #4]
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	781b      	ldrb	r3, [r3, #0]
 800af86:	009b      	lsls	r3, r3, #2
 800af88:	441a      	add	r2, r3
 800af8a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800af8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800af92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800af96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800af9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af9e:	b29b      	uxth	r3, r3
 800afa0:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800afa2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800afa6:	4618      	mov	r0, r3
 800afa8:	3774      	adds	r7, #116	@ 0x74
 800afaa:	46bd      	mov	sp, r7
 800afac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb0:	4770      	bx	lr
 800afb2:	bf00      	nop

0800afb4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800afb4:	b480      	push	{r7}
 800afb6:	b08d      	sub	sp, #52	@ 0x34
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
 800afbc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	7b1b      	ldrb	r3, [r3, #12]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	f040 808e 	bne.w	800b0e4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	785b      	ldrb	r3, [r3, #1]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d044      	beq.n	800b05a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800afd0:	687a      	ldr	r2, [r7, #4]
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	781b      	ldrb	r3, [r3, #0]
 800afd6:	009b      	lsls	r3, r3, #2
 800afd8:	4413      	add	r3, r2
 800afda:	881b      	ldrh	r3, [r3, #0]
 800afdc:	81bb      	strh	r3, [r7, #12]
 800afde:	89bb      	ldrh	r3, [r7, #12]
 800afe0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d01b      	beq.n	800b020 <USB_DeactivateEndpoint+0x6c>
 800afe8:	687a      	ldr	r2, [r7, #4]
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	781b      	ldrb	r3, [r3, #0]
 800afee:	009b      	lsls	r3, r3, #2
 800aff0:	4413      	add	r3, r2
 800aff2:	881b      	ldrh	r3, [r3, #0]
 800aff4:	b29b      	uxth	r3, r3
 800aff6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800affa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800affe:	817b      	strh	r3, [r7, #10]
 800b000:	687a      	ldr	r2, [r7, #4]
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	781b      	ldrb	r3, [r3, #0]
 800b006:	009b      	lsls	r3, r3, #2
 800b008:	441a      	add	r2, r3
 800b00a:	897b      	ldrh	r3, [r7, #10]
 800b00c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b010:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b014:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b018:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b01c:	b29b      	uxth	r3, r3
 800b01e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b020:	687a      	ldr	r2, [r7, #4]
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	781b      	ldrb	r3, [r3, #0]
 800b026:	009b      	lsls	r3, r3, #2
 800b028:	4413      	add	r3, r2
 800b02a:	881b      	ldrh	r3, [r3, #0]
 800b02c:	b29b      	uxth	r3, r3
 800b02e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b032:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b036:	813b      	strh	r3, [r7, #8]
 800b038:	687a      	ldr	r2, [r7, #4]
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	781b      	ldrb	r3, [r3, #0]
 800b03e:	009b      	lsls	r3, r3, #2
 800b040:	441a      	add	r2, r3
 800b042:	893b      	ldrh	r3, [r7, #8]
 800b044:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b048:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b04c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b050:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b054:	b29b      	uxth	r3, r3
 800b056:	8013      	strh	r3, [r2, #0]
 800b058:	e192      	b.n	800b380 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b05a:	687a      	ldr	r2, [r7, #4]
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	781b      	ldrb	r3, [r3, #0]
 800b060:	009b      	lsls	r3, r3, #2
 800b062:	4413      	add	r3, r2
 800b064:	881b      	ldrh	r3, [r3, #0]
 800b066:	827b      	strh	r3, [r7, #18]
 800b068:	8a7b      	ldrh	r3, [r7, #18]
 800b06a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d01b      	beq.n	800b0aa <USB_DeactivateEndpoint+0xf6>
 800b072:	687a      	ldr	r2, [r7, #4]
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	781b      	ldrb	r3, [r3, #0]
 800b078:	009b      	lsls	r3, r3, #2
 800b07a:	4413      	add	r3, r2
 800b07c:	881b      	ldrh	r3, [r3, #0]
 800b07e:	b29b      	uxth	r3, r3
 800b080:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b084:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b088:	823b      	strh	r3, [r7, #16]
 800b08a:	687a      	ldr	r2, [r7, #4]
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	781b      	ldrb	r3, [r3, #0]
 800b090:	009b      	lsls	r3, r3, #2
 800b092:	441a      	add	r2, r3
 800b094:	8a3b      	ldrh	r3, [r7, #16]
 800b096:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b09a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b09e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b0a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b0a6:	b29b      	uxth	r3, r3
 800b0a8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b0aa:	687a      	ldr	r2, [r7, #4]
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	781b      	ldrb	r3, [r3, #0]
 800b0b0:	009b      	lsls	r3, r3, #2
 800b0b2:	4413      	add	r3, r2
 800b0b4:	881b      	ldrh	r3, [r3, #0]
 800b0b6:	b29b      	uxth	r3, r3
 800b0b8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b0bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b0c0:	81fb      	strh	r3, [r7, #14]
 800b0c2:	687a      	ldr	r2, [r7, #4]
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	781b      	ldrb	r3, [r3, #0]
 800b0c8:	009b      	lsls	r3, r3, #2
 800b0ca:	441a      	add	r2, r3
 800b0cc:	89fb      	ldrh	r3, [r7, #14]
 800b0ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b0d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b0d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b0da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b0de:	b29b      	uxth	r3, r3
 800b0e0:	8013      	strh	r3, [r2, #0]
 800b0e2:	e14d      	b.n	800b380 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800b0e4:	683b      	ldr	r3, [r7, #0]
 800b0e6:	785b      	ldrb	r3, [r3, #1]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	f040 80a5 	bne.w	800b238 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b0ee:	687a      	ldr	r2, [r7, #4]
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	781b      	ldrb	r3, [r3, #0]
 800b0f4:	009b      	lsls	r3, r3, #2
 800b0f6:	4413      	add	r3, r2
 800b0f8:	881b      	ldrh	r3, [r3, #0]
 800b0fa:	843b      	strh	r3, [r7, #32]
 800b0fc:	8c3b      	ldrh	r3, [r7, #32]
 800b0fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b102:	2b00      	cmp	r3, #0
 800b104:	d01b      	beq.n	800b13e <USB_DeactivateEndpoint+0x18a>
 800b106:	687a      	ldr	r2, [r7, #4]
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	781b      	ldrb	r3, [r3, #0]
 800b10c:	009b      	lsls	r3, r3, #2
 800b10e:	4413      	add	r3, r2
 800b110:	881b      	ldrh	r3, [r3, #0]
 800b112:	b29b      	uxth	r3, r3
 800b114:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b118:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b11c:	83fb      	strh	r3, [r7, #30]
 800b11e:	687a      	ldr	r2, [r7, #4]
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	781b      	ldrb	r3, [r3, #0]
 800b124:	009b      	lsls	r3, r3, #2
 800b126:	441a      	add	r2, r3
 800b128:	8bfb      	ldrh	r3, [r7, #30]
 800b12a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b12e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b132:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b136:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b13a:	b29b      	uxth	r3, r3
 800b13c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b13e:	687a      	ldr	r2, [r7, #4]
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	781b      	ldrb	r3, [r3, #0]
 800b144:	009b      	lsls	r3, r3, #2
 800b146:	4413      	add	r3, r2
 800b148:	881b      	ldrh	r3, [r3, #0]
 800b14a:	83bb      	strh	r3, [r7, #28]
 800b14c:	8bbb      	ldrh	r3, [r7, #28]
 800b14e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b152:	2b00      	cmp	r3, #0
 800b154:	d01b      	beq.n	800b18e <USB_DeactivateEndpoint+0x1da>
 800b156:	687a      	ldr	r2, [r7, #4]
 800b158:	683b      	ldr	r3, [r7, #0]
 800b15a:	781b      	ldrb	r3, [r3, #0]
 800b15c:	009b      	lsls	r3, r3, #2
 800b15e:	4413      	add	r3, r2
 800b160:	881b      	ldrh	r3, [r3, #0]
 800b162:	b29b      	uxth	r3, r3
 800b164:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b168:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b16c:	837b      	strh	r3, [r7, #26]
 800b16e:	687a      	ldr	r2, [r7, #4]
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	781b      	ldrb	r3, [r3, #0]
 800b174:	009b      	lsls	r3, r3, #2
 800b176:	441a      	add	r2, r3
 800b178:	8b7b      	ldrh	r3, [r7, #26]
 800b17a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b17e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b182:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b186:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b18a:	b29b      	uxth	r3, r3
 800b18c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800b18e:	687a      	ldr	r2, [r7, #4]
 800b190:	683b      	ldr	r3, [r7, #0]
 800b192:	781b      	ldrb	r3, [r3, #0]
 800b194:	009b      	lsls	r3, r3, #2
 800b196:	4413      	add	r3, r2
 800b198:	881b      	ldrh	r3, [r3, #0]
 800b19a:	b29b      	uxth	r3, r3
 800b19c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b1a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b1a4:	833b      	strh	r3, [r7, #24]
 800b1a6:	687a      	ldr	r2, [r7, #4]
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	781b      	ldrb	r3, [r3, #0]
 800b1ac:	009b      	lsls	r3, r3, #2
 800b1ae:	441a      	add	r2, r3
 800b1b0:	8b3b      	ldrh	r3, [r7, #24]
 800b1b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b1b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b1ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b1be:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b1c2:	b29b      	uxth	r3, r3
 800b1c4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b1c6:	687a      	ldr	r2, [r7, #4]
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	781b      	ldrb	r3, [r3, #0]
 800b1cc:	009b      	lsls	r3, r3, #2
 800b1ce:	4413      	add	r3, r2
 800b1d0:	881b      	ldrh	r3, [r3, #0]
 800b1d2:	b29b      	uxth	r3, r3
 800b1d4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b1d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b1dc:	82fb      	strh	r3, [r7, #22]
 800b1de:	687a      	ldr	r2, [r7, #4]
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	781b      	ldrb	r3, [r3, #0]
 800b1e4:	009b      	lsls	r3, r3, #2
 800b1e6:	441a      	add	r2, r3
 800b1e8:	8afb      	ldrh	r3, [r7, #22]
 800b1ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b1ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b1f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b1f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b1fa:	b29b      	uxth	r3, r3
 800b1fc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b1fe:	687a      	ldr	r2, [r7, #4]
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	781b      	ldrb	r3, [r3, #0]
 800b204:	009b      	lsls	r3, r3, #2
 800b206:	4413      	add	r3, r2
 800b208:	881b      	ldrh	r3, [r3, #0]
 800b20a:	b29b      	uxth	r3, r3
 800b20c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b210:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b214:	82bb      	strh	r3, [r7, #20]
 800b216:	687a      	ldr	r2, [r7, #4]
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	781b      	ldrb	r3, [r3, #0]
 800b21c:	009b      	lsls	r3, r3, #2
 800b21e:	441a      	add	r2, r3
 800b220:	8abb      	ldrh	r3, [r7, #20]
 800b222:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b226:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b22a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b22e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b232:	b29b      	uxth	r3, r3
 800b234:	8013      	strh	r3, [r2, #0]
 800b236:	e0a3      	b.n	800b380 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b238:	687a      	ldr	r2, [r7, #4]
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	781b      	ldrb	r3, [r3, #0]
 800b23e:	009b      	lsls	r3, r3, #2
 800b240:	4413      	add	r3, r2
 800b242:	881b      	ldrh	r3, [r3, #0]
 800b244:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800b246:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b248:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d01b      	beq.n	800b288 <USB_DeactivateEndpoint+0x2d4>
 800b250:	687a      	ldr	r2, [r7, #4]
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	781b      	ldrb	r3, [r3, #0]
 800b256:	009b      	lsls	r3, r3, #2
 800b258:	4413      	add	r3, r2
 800b25a:	881b      	ldrh	r3, [r3, #0]
 800b25c:	b29b      	uxth	r3, r3
 800b25e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b262:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b266:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800b268:	687a      	ldr	r2, [r7, #4]
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	781b      	ldrb	r3, [r3, #0]
 800b26e:	009b      	lsls	r3, r3, #2
 800b270:	441a      	add	r2, r3
 800b272:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800b274:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b278:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b27c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b280:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b284:	b29b      	uxth	r3, r3
 800b286:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b288:	687a      	ldr	r2, [r7, #4]
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	781b      	ldrb	r3, [r3, #0]
 800b28e:	009b      	lsls	r3, r3, #2
 800b290:	4413      	add	r3, r2
 800b292:	881b      	ldrh	r3, [r3, #0]
 800b294:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800b296:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b298:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d01b      	beq.n	800b2d8 <USB_DeactivateEndpoint+0x324>
 800b2a0:	687a      	ldr	r2, [r7, #4]
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	781b      	ldrb	r3, [r3, #0]
 800b2a6:	009b      	lsls	r3, r3, #2
 800b2a8:	4413      	add	r3, r2
 800b2aa:	881b      	ldrh	r3, [r3, #0]
 800b2ac:	b29b      	uxth	r3, r3
 800b2ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b2b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b2b6:	853b      	strh	r3, [r7, #40]	@ 0x28
 800b2b8:	687a      	ldr	r2, [r7, #4]
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	781b      	ldrb	r3, [r3, #0]
 800b2be:	009b      	lsls	r3, r3, #2
 800b2c0:	441a      	add	r2, r3
 800b2c2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b2c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b2c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b2cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b2d0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b2d4:	b29b      	uxth	r3, r3
 800b2d6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800b2d8:	687a      	ldr	r2, [r7, #4]
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	781b      	ldrb	r3, [r3, #0]
 800b2de:	009b      	lsls	r3, r3, #2
 800b2e0:	4413      	add	r3, r2
 800b2e2:	881b      	ldrh	r3, [r3, #0]
 800b2e4:	b29b      	uxth	r3, r3
 800b2e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b2ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b2ee:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800b2f0:	687a      	ldr	r2, [r7, #4]
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	781b      	ldrb	r3, [r3, #0]
 800b2f6:	009b      	lsls	r3, r3, #2
 800b2f8:	441a      	add	r2, r3
 800b2fa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b2fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b300:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b304:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b308:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b30c:	b29b      	uxth	r3, r3
 800b30e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b310:	687a      	ldr	r2, [r7, #4]
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	781b      	ldrb	r3, [r3, #0]
 800b316:	009b      	lsls	r3, r3, #2
 800b318:	4413      	add	r3, r2
 800b31a:	881b      	ldrh	r3, [r3, #0]
 800b31c:	b29b      	uxth	r3, r3
 800b31e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b322:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b326:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800b328:	687a      	ldr	r2, [r7, #4]
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	781b      	ldrb	r3, [r3, #0]
 800b32e:	009b      	lsls	r3, r3, #2
 800b330:	441a      	add	r2, r3
 800b332:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b334:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b338:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b33c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b340:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b344:	b29b      	uxth	r3, r3
 800b346:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b348:	687a      	ldr	r2, [r7, #4]
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	781b      	ldrb	r3, [r3, #0]
 800b34e:	009b      	lsls	r3, r3, #2
 800b350:	4413      	add	r3, r2
 800b352:	881b      	ldrh	r3, [r3, #0]
 800b354:	b29b      	uxth	r3, r3
 800b356:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b35a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b35e:	847b      	strh	r3, [r7, #34]	@ 0x22
 800b360:	687a      	ldr	r2, [r7, #4]
 800b362:	683b      	ldr	r3, [r7, #0]
 800b364:	781b      	ldrb	r3, [r3, #0]
 800b366:	009b      	lsls	r3, r3, #2
 800b368:	441a      	add	r2, r3
 800b36a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b36c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b370:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b374:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b378:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b37c:	b29b      	uxth	r3, r3
 800b37e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800b380:	2300      	movs	r3, #0
}
 800b382:	4618      	mov	r0, r3
 800b384:	3734      	adds	r7, #52	@ 0x34
 800b386:	46bd      	mov	sp, r7
 800b388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38c:	4770      	bx	lr

0800b38e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b38e:	b580      	push	{r7, lr}
 800b390:	b0c2      	sub	sp, #264	@ 0x108
 800b392:	af00      	add	r7, sp, #0
 800b394:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b398:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b39c:	6018      	str	r0, [r3, #0]
 800b39e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3a6:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b3a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	785b      	ldrb	r3, [r3, #1]
 800b3b4:	2b01      	cmp	r3, #1
 800b3b6:	f040 86b7 	bne.w	800c128 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800b3ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	699a      	ldr	r2, [r3, #24]
 800b3c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	691b      	ldr	r3, [r3, #16]
 800b3d2:	429a      	cmp	r2, r3
 800b3d4:	d908      	bls.n	800b3e8 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800b3d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	691b      	ldr	r3, [r3, #16]
 800b3e2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800b3e6:	e007      	b.n	800b3f8 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800b3e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	699b      	ldr	r3, [r3, #24]
 800b3f4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800b3f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	7b1b      	ldrb	r3, [r3, #12]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d13a      	bne.n	800b47e <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800b408:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b40c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	6959      	ldr	r1, [r3, #20]
 800b414:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b418:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	88da      	ldrh	r2, [r3, #6]
 800b420:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b424:	b29b      	uxth	r3, r3
 800b426:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b42a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b42e:	6800      	ldr	r0, [r0, #0]
 800b430:	f001 fc98 	bl	800cd64 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b434:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b438:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	613b      	str	r3, [r7, #16]
 800b440:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b444:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b44e:	b29b      	uxth	r3, r3
 800b450:	461a      	mov	r2, r3
 800b452:	693b      	ldr	r3, [r7, #16]
 800b454:	4413      	add	r3, r2
 800b456:	613b      	str	r3, [r7, #16]
 800b458:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b45c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	781b      	ldrb	r3, [r3, #0]
 800b464:	00da      	lsls	r2, r3, #3
 800b466:	693b      	ldr	r3, [r7, #16]
 800b468:	4413      	add	r3, r2
 800b46a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b46e:	60fb      	str	r3, [r7, #12]
 800b470:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b474:	b29a      	uxth	r2, r3
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	801a      	strh	r2, [r3, #0]
 800b47a:	f000 be1f 	b.w	800c0bc <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800b47e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b482:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	78db      	ldrb	r3, [r3, #3]
 800b48a:	2b02      	cmp	r3, #2
 800b48c:	f040 8462 	bne.w	800bd54 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800b490:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b494:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	6a1a      	ldr	r2, [r3, #32]
 800b49c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	691b      	ldr	r3, [r3, #16]
 800b4a8:	429a      	cmp	r2, r3
 800b4aa:	f240 83df 	bls.w	800bc6c <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800b4ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b4b6:	681a      	ldr	r2, [r3, #0]
 800b4b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	781b      	ldrb	r3, [r3, #0]
 800b4c4:	009b      	lsls	r3, r3, #2
 800b4c6:	4413      	add	r3, r2
 800b4c8:	881b      	ldrh	r3, [r3, #0]
 800b4ca:	b29b      	uxth	r3, r3
 800b4cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b4d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b4d4:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800b4d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b4e0:	681a      	ldr	r2, [r3, #0]
 800b4e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	781b      	ldrb	r3, [r3, #0]
 800b4ee:	009b      	lsls	r3, r3, #2
 800b4f0:	441a      	add	r2, r3
 800b4f2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800b4f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b4fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b4fe:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800b502:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b506:	b29b      	uxth	r3, r3
 800b508:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800b50a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b50e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	6a1a      	ldr	r2, [r3, #32]
 800b516:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b51a:	1ad2      	subs	r2, r2, r3
 800b51c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b520:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b528:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b52c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b530:	681a      	ldr	r2, [r3, #0]
 800b532:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b536:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	781b      	ldrb	r3, [r3, #0]
 800b53e:	009b      	lsls	r3, r3, #2
 800b540:	4413      	add	r3, r2
 800b542:	881b      	ldrh	r3, [r3, #0]
 800b544:	b29b      	uxth	r3, r3
 800b546:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	f000 81c7 	beq.w	800b8de <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b550:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b554:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	633b      	str	r3, [r7, #48]	@ 0x30
 800b55c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b560:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	785b      	ldrb	r3, [r3, #1]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d177      	bne.n	800b65c <USB_EPStartXfer+0x2ce>
 800b56c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b570:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b578:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b57c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b586:	b29b      	uxth	r3, r3
 800b588:	461a      	mov	r2, r3
 800b58a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b58c:	4413      	add	r3, r2
 800b58e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b590:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b594:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	781b      	ldrb	r3, [r3, #0]
 800b59c:	00da      	lsls	r2, r3, #3
 800b59e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5a0:	4413      	add	r3, r2
 800b5a2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b5a6:	627b      	str	r3, [r7, #36]	@ 0x24
 800b5a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5aa:	881b      	ldrh	r3, [r3, #0]
 800b5ac:	b29b      	uxth	r3, r3
 800b5ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b5b2:	b29a      	uxth	r2, r3
 800b5b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5b6:	801a      	strh	r2, [r3, #0]
 800b5b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b5bc:	2b3e      	cmp	r3, #62	@ 0x3e
 800b5be:	d921      	bls.n	800b604 <USB_EPStartXfer+0x276>
 800b5c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b5c4:	095b      	lsrs	r3, r3, #5
 800b5c6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800b5ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b5ce:	f003 031f 	and.w	r3, r3, #31
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d104      	bne.n	800b5e0 <USB_EPStartXfer+0x252>
 800b5d6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800b5da:	3b01      	subs	r3, #1
 800b5dc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800b5e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5e2:	881b      	ldrh	r3, [r3, #0]
 800b5e4:	b29a      	uxth	r2, r3
 800b5e6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800b5ea:	b29b      	uxth	r3, r3
 800b5ec:	029b      	lsls	r3, r3, #10
 800b5ee:	b29b      	uxth	r3, r3
 800b5f0:	4313      	orrs	r3, r2
 800b5f2:	b29b      	uxth	r3, r3
 800b5f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b5f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b5fc:	b29a      	uxth	r2, r3
 800b5fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b600:	801a      	strh	r2, [r3, #0]
 800b602:	e050      	b.n	800b6a6 <USB_EPStartXfer+0x318>
 800b604:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d10a      	bne.n	800b622 <USB_EPStartXfer+0x294>
 800b60c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b60e:	881b      	ldrh	r3, [r3, #0]
 800b610:	b29b      	uxth	r3, r3
 800b612:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b616:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b61a:	b29a      	uxth	r2, r3
 800b61c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b61e:	801a      	strh	r2, [r3, #0]
 800b620:	e041      	b.n	800b6a6 <USB_EPStartXfer+0x318>
 800b622:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b626:	085b      	lsrs	r3, r3, #1
 800b628:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800b62c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b630:	f003 0301 	and.w	r3, r3, #1
 800b634:	2b00      	cmp	r3, #0
 800b636:	d004      	beq.n	800b642 <USB_EPStartXfer+0x2b4>
 800b638:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800b63c:	3301      	adds	r3, #1
 800b63e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800b642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b644:	881b      	ldrh	r3, [r3, #0]
 800b646:	b29a      	uxth	r2, r3
 800b648:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800b64c:	b29b      	uxth	r3, r3
 800b64e:	029b      	lsls	r3, r3, #10
 800b650:	b29b      	uxth	r3, r3
 800b652:	4313      	orrs	r3, r2
 800b654:	b29a      	uxth	r2, r3
 800b656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b658:	801a      	strh	r2, [r3, #0]
 800b65a:	e024      	b.n	800b6a6 <USB_EPStartXfer+0x318>
 800b65c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b660:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	785b      	ldrb	r3, [r3, #1]
 800b668:	2b01      	cmp	r3, #1
 800b66a:	d11c      	bne.n	800b6a6 <USB_EPStartXfer+0x318>
 800b66c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b670:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b67a:	b29b      	uxth	r3, r3
 800b67c:	461a      	mov	r2, r3
 800b67e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b680:	4413      	add	r3, r2
 800b682:	633b      	str	r3, [r7, #48]	@ 0x30
 800b684:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b688:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	781b      	ldrb	r3, [r3, #0]
 800b690:	00da      	lsls	r2, r3, #3
 800b692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b694:	4413      	add	r3, r2
 800b696:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b69a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b69c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b6a0:	b29a      	uxth	r2, r3
 800b6a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6a4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b6a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	895b      	ldrh	r3, [r3, #10]
 800b6b2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b6b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	6959      	ldr	r1, [r3, #20]
 800b6c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b6c6:	b29b      	uxth	r3, r3
 800b6c8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b6cc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b6d0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b6d4:	6800      	ldr	r0, [r0, #0]
 800b6d6:	f001 fb45 	bl	800cd64 <USB_WritePMA>
            ep->xfer_buff += len;
 800b6da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	695a      	ldr	r2, [r3, #20]
 800b6e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b6ea:	441a      	add	r2, r3
 800b6ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b6f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	6a1a      	ldr	r2, [r3, #32]
 800b704:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b708:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	691b      	ldr	r3, [r3, #16]
 800b710:	429a      	cmp	r2, r3
 800b712:	d90f      	bls.n	800b734 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800b714:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b718:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	6a1a      	ldr	r2, [r3, #32]
 800b720:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b724:	1ad2      	subs	r2, r2, r3
 800b726:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b72a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	621a      	str	r2, [r3, #32]
 800b732:	e00e      	b.n	800b752 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800b734:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b738:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	6a1b      	ldr	r3, [r3, #32]
 800b740:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800b744:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b748:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	2200      	movs	r2, #0
 800b750:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b752:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b756:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	785b      	ldrb	r3, [r3, #1]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d177      	bne.n	800b852 <USB_EPStartXfer+0x4c4>
 800b762:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b766:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	61bb      	str	r3, [r7, #24]
 800b76e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b772:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b77c:	b29b      	uxth	r3, r3
 800b77e:	461a      	mov	r2, r3
 800b780:	69bb      	ldr	r3, [r7, #24]
 800b782:	4413      	add	r3, r2
 800b784:	61bb      	str	r3, [r7, #24]
 800b786:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b78a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	781b      	ldrb	r3, [r3, #0]
 800b792:	00da      	lsls	r2, r3, #3
 800b794:	69bb      	ldr	r3, [r7, #24]
 800b796:	4413      	add	r3, r2
 800b798:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b79c:	617b      	str	r3, [r7, #20]
 800b79e:	697b      	ldr	r3, [r7, #20]
 800b7a0:	881b      	ldrh	r3, [r3, #0]
 800b7a2:	b29b      	uxth	r3, r3
 800b7a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b7a8:	b29a      	uxth	r2, r3
 800b7aa:	697b      	ldr	r3, [r7, #20]
 800b7ac:	801a      	strh	r2, [r3, #0]
 800b7ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7b2:	2b3e      	cmp	r3, #62	@ 0x3e
 800b7b4:	d921      	bls.n	800b7fa <USB_EPStartXfer+0x46c>
 800b7b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7ba:	095b      	lsrs	r3, r3, #5
 800b7bc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b7c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7c4:	f003 031f 	and.w	r3, r3, #31
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d104      	bne.n	800b7d6 <USB_EPStartXfer+0x448>
 800b7cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b7d0:	3b01      	subs	r3, #1
 800b7d2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b7d6:	697b      	ldr	r3, [r7, #20]
 800b7d8:	881b      	ldrh	r3, [r3, #0]
 800b7da:	b29a      	uxth	r2, r3
 800b7dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b7e0:	b29b      	uxth	r3, r3
 800b7e2:	029b      	lsls	r3, r3, #10
 800b7e4:	b29b      	uxth	r3, r3
 800b7e6:	4313      	orrs	r3, r2
 800b7e8:	b29b      	uxth	r3, r3
 800b7ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b7ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b7f2:	b29a      	uxth	r2, r3
 800b7f4:	697b      	ldr	r3, [r7, #20]
 800b7f6:	801a      	strh	r2, [r3, #0]
 800b7f8:	e056      	b.n	800b8a8 <USB_EPStartXfer+0x51a>
 800b7fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d10a      	bne.n	800b818 <USB_EPStartXfer+0x48a>
 800b802:	697b      	ldr	r3, [r7, #20]
 800b804:	881b      	ldrh	r3, [r3, #0]
 800b806:	b29b      	uxth	r3, r3
 800b808:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b80c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b810:	b29a      	uxth	r2, r3
 800b812:	697b      	ldr	r3, [r7, #20]
 800b814:	801a      	strh	r2, [r3, #0]
 800b816:	e047      	b.n	800b8a8 <USB_EPStartXfer+0x51a>
 800b818:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b81c:	085b      	lsrs	r3, r3, #1
 800b81e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b822:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b826:	f003 0301 	and.w	r3, r3, #1
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d004      	beq.n	800b838 <USB_EPStartXfer+0x4aa>
 800b82e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b832:	3301      	adds	r3, #1
 800b834:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b838:	697b      	ldr	r3, [r7, #20]
 800b83a:	881b      	ldrh	r3, [r3, #0]
 800b83c:	b29a      	uxth	r2, r3
 800b83e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b842:	b29b      	uxth	r3, r3
 800b844:	029b      	lsls	r3, r3, #10
 800b846:	b29b      	uxth	r3, r3
 800b848:	4313      	orrs	r3, r2
 800b84a:	b29a      	uxth	r2, r3
 800b84c:	697b      	ldr	r3, [r7, #20]
 800b84e:	801a      	strh	r2, [r3, #0]
 800b850:	e02a      	b.n	800b8a8 <USB_EPStartXfer+0x51a>
 800b852:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b856:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	785b      	ldrb	r3, [r3, #1]
 800b85e:	2b01      	cmp	r3, #1
 800b860:	d122      	bne.n	800b8a8 <USB_EPStartXfer+0x51a>
 800b862:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b866:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	623b      	str	r3, [r7, #32]
 800b86e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b872:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b87c:	b29b      	uxth	r3, r3
 800b87e:	461a      	mov	r2, r3
 800b880:	6a3b      	ldr	r3, [r7, #32]
 800b882:	4413      	add	r3, r2
 800b884:	623b      	str	r3, [r7, #32]
 800b886:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b88a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	781b      	ldrb	r3, [r3, #0]
 800b892:	00da      	lsls	r2, r3, #3
 800b894:	6a3b      	ldr	r3, [r7, #32]
 800b896:	4413      	add	r3, r2
 800b898:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b89c:	61fb      	str	r3, [r7, #28]
 800b89e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8a2:	b29a      	uxth	r2, r3
 800b8a4:	69fb      	ldr	r3, [r7, #28]
 800b8a6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b8a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	891b      	ldrh	r3, [r3, #8]
 800b8b4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b8b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	6959      	ldr	r1, [r3, #20]
 800b8c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8c8:	b29b      	uxth	r3, r3
 800b8ca:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b8ce:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b8d2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b8d6:	6800      	ldr	r0, [r0, #0]
 800b8d8:	f001 fa44 	bl	800cd64 <USB_WritePMA>
 800b8dc:	e3ee      	b.n	800c0bc <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b8de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	785b      	ldrb	r3, [r3, #1]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d177      	bne.n	800b9de <USB_EPStartXfer+0x650>
 800b8ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b8fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b908:	b29b      	uxth	r3, r3
 800b90a:	461a      	mov	r2, r3
 800b90c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b90e:	4413      	add	r3, r2
 800b910:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b912:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b916:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	781b      	ldrb	r3, [r3, #0]
 800b91e:	00da      	lsls	r2, r3, #3
 800b920:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b922:	4413      	add	r3, r2
 800b924:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b928:	647b      	str	r3, [r7, #68]	@ 0x44
 800b92a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b92c:	881b      	ldrh	r3, [r3, #0]
 800b92e:	b29b      	uxth	r3, r3
 800b930:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b934:	b29a      	uxth	r2, r3
 800b936:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b938:	801a      	strh	r2, [r3, #0]
 800b93a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b93e:	2b3e      	cmp	r3, #62	@ 0x3e
 800b940:	d921      	bls.n	800b986 <USB_EPStartXfer+0x5f8>
 800b942:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b946:	095b      	lsrs	r3, r3, #5
 800b948:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800b94c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b950:	f003 031f 	and.w	r3, r3, #31
 800b954:	2b00      	cmp	r3, #0
 800b956:	d104      	bne.n	800b962 <USB_EPStartXfer+0x5d4>
 800b958:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b95c:	3b01      	subs	r3, #1
 800b95e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800b962:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b964:	881b      	ldrh	r3, [r3, #0]
 800b966:	b29a      	uxth	r2, r3
 800b968:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b96c:	b29b      	uxth	r3, r3
 800b96e:	029b      	lsls	r3, r3, #10
 800b970:	b29b      	uxth	r3, r3
 800b972:	4313      	orrs	r3, r2
 800b974:	b29b      	uxth	r3, r3
 800b976:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b97a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b97e:	b29a      	uxth	r2, r3
 800b980:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b982:	801a      	strh	r2, [r3, #0]
 800b984:	e056      	b.n	800ba34 <USB_EPStartXfer+0x6a6>
 800b986:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d10a      	bne.n	800b9a4 <USB_EPStartXfer+0x616>
 800b98e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b990:	881b      	ldrh	r3, [r3, #0]
 800b992:	b29b      	uxth	r3, r3
 800b994:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b998:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b99c:	b29a      	uxth	r2, r3
 800b99e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b9a0:	801a      	strh	r2, [r3, #0]
 800b9a2:	e047      	b.n	800ba34 <USB_EPStartXfer+0x6a6>
 800b9a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9a8:	085b      	lsrs	r3, r3, #1
 800b9aa:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800b9ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9b2:	f003 0301 	and.w	r3, r3, #1
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d004      	beq.n	800b9c4 <USB_EPStartXfer+0x636>
 800b9ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b9be:	3301      	adds	r3, #1
 800b9c0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800b9c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b9c6:	881b      	ldrh	r3, [r3, #0]
 800b9c8:	b29a      	uxth	r2, r3
 800b9ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b9ce:	b29b      	uxth	r3, r3
 800b9d0:	029b      	lsls	r3, r3, #10
 800b9d2:	b29b      	uxth	r3, r3
 800b9d4:	4313      	orrs	r3, r2
 800b9d6:	b29a      	uxth	r2, r3
 800b9d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b9da:	801a      	strh	r2, [r3, #0]
 800b9dc:	e02a      	b.n	800ba34 <USB_EPStartXfer+0x6a6>
 800b9de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	785b      	ldrb	r3, [r3, #1]
 800b9ea:	2b01      	cmp	r3, #1
 800b9ec:	d122      	bne.n	800ba34 <USB_EPStartXfer+0x6a6>
 800b9ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	653b      	str	r3, [r7, #80]	@ 0x50
 800b9fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ba08:	b29b      	uxth	r3, r3
 800ba0a:	461a      	mov	r2, r3
 800ba0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ba0e:	4413      	add	r3, r2
 800ba10:	653b      	str	r3, [r7, #80]	@ 0x50
 800ba12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	781b      	ldrb	r3, [r3, #0]
 800ba1e:	00da      	lsls	r2, r3, #3
 800ba20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ba22:	4413      	add	r3, r2
 800ba24:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ba28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ba2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba2e:	b29a      	uxth	r2, r3
 800ba30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba32:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ba34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	891b      	ldrh	r3, [r3, #8]
 800ba40:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ba44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	6959      	ldr	r1, [r3, #20]
 800ba50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba54:	b29b      	uxth	r3, r3
 800ba56:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ba5a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800ba5e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800ba62:	6800      	ldr	r0, [r0, #0]
 800ba64:	f001 f97e 	bl	800cd64 <USB_WritePMA>
            ep->xfer_buff += len;
 800ba68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	695a      	ldr	r2, [r3, #20]
 800ba74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba78:	441a      	add	r2, r3
 800ba7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800ba86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	6a1a      	ldr	r2, [r3, #32]
 800ba92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	691b      	ldr	r3, [r3, #16]
 800ba9e:	429a      	cmp	r2, r3
 800baa0:	d90f      	bls.n	800bac2 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800baa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800baa6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	6a1a      	ldr	r2, [r3, #32]
 800baae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bab2:	1ad2      	subs	r2, r2, r3
 800bab4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bab8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	621a      	str	r2, [r3, #32]
 800bac0:	e00e      	b.n	800bae0 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800bac2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bac6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	6a1b      	ldr	r3, [r3, #32]
 800bace:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800bad2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bad6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	2200      	movs	r2, #0
 800bade:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bae0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bae4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	643b      	str	r3, [r7, #64]	@ 0x40
 800baec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800baf0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	785b      	ldrb	r3, [r3, #1]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d177      	bne.n	800bbec <USB_EPStartXfer+0x85e>
 800bafc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb00:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bb08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb0c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bb16:	b29b      	uxth	r3, r3
 800bb18:	461a      	mov	r2, r3
 800bb1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb1c:	4413      	add	r3, r2
 800bb1e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bb20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	781b      	ldrb	r3, [r3, #0]
 800bb2c:	00da      	lsls	r2, r3, #3
 800bb2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb30:	4413      	add	r3, r2
 800bb32:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bb36:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb3a:	881b      	ldrh	r3, [r3, #0]
 800bb3c:	b29b      	uxth	r3, r3
 800bb3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bb42:	b29a      	uxth	r2, r3
 800bb44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb46:	801a      	strh	r2, [r3, #0]
 800bb48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb4c:	2b3e      	cmp	r3, #62	@ 0x3e
 800bb4e:	d921      	bls.n	800bb94 <USB_EPStartXfer+0x806>
 800bb50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb54:	095b      	lsrs	r3, r3, #5
 800bb56:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800bb5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb5e:	f003 031f 	and.w	r3, r3, #31
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d104      	bne.n	800bb70 <USB_EPStartXfer+0x7e2>
 800bb66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bb6a:	3b01      	subs	r3, #1
 800bb6c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800bb70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb72:	881b      	ldrh	r3, [r3, #0]
 800bb74:	b29a      	uxth	r2, r3
 800bb76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bb7a:	b29b      	uxth	r3, r3
 800bb7c:	029b      	lsls	r3, r3, #10
 800bb7e:	b29b      	uxth	r3, r3
 800bb80:	4313      	orrs	r3, r2
 800bb82:	b29b      	uxth	r3, r3
 800bb84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bb88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb8c:	b29a      	uxth	r2, r3
 800bb8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb90:	801a      	strh	r2, [r3, #0]
 800bb92:	e050      	b.n	800bc36 <USB_EPStartXfer+0x8a8>
 800bb94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d10a      	bne.n	800bbb2 <USB_EPStartXfer+0x824>
 800bb9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb9e:	881b      	ldrh	r3, [r3, #0]
 800bba0:	b29b      	uxth	r3, r3
 800bba2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bba6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bbaa:	b29a      	uxth	r2, r3
 800bbac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bbae:	801a      	strh	r2, [r3, #0]
 800bbb0:	e041      	b.n	800bc36 <USB_EPStartXfer+0x8a8>
 800bbb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbb6:	085b      	lsrs	r3, r3, #1
 800bbb8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800bbbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbc0:	f003 0301 	and.w	r3, r3, #1
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d004      	beq.n	800bbd2 <USB_EPStartXfer+0x844>
 800bbc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bbcc:	3301      	adds	r3, #1
 800bbce:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800bbd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bbd4:	881b      	ldrh	r3, [r3, #0]
 800bbd6:	b29a      	uxth	r2, r3
 800bbd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bbdc:	b29b      	uxth	r3, r3
 800bbde:	029b      	lsls	r3, r3, #10
 800bbe0:	b29b      	uxth	r3, r3
 800bbe2:	4313      	orrs	r3, r2
 800bbe4:	b29a      	uxth	r2, r3
 800bbe6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bbe8:	801a      	strh	r2, [r3, #0]
 800bbea:	e024      	b.n	800bc36 <USB_EPStartXfer+0x8a8>
 800bbec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bbf0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	785b      	ldrb	r3, [r3, #1]
 800bbf8:	2b01      	cmp	r3, #1
 800bbfa:	d11c      	bne.n	800bc36 <USB_EPStartXfer+0x8a8>
 800bbfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc00:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bc0a:	b29b      	uxth	r3, r3
 800bc0c:	461a      	mov	r2, r3
 800bc0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc10:	4413      	add	r3, r2
 800bc12:	643b      	str	r3, [r7, #64]	@ 0x40
 800bc14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	781b      	ldrb	r3, [r3, #0]
 800bc20:	00da      	lsls	r2, r3, #3
 800bc22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc24:	4413      	add	r3, r2
 800bc26:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bc2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bc2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc30:	b29a      	uxth	r2, r3
 800bc32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc34:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800bc36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	895b      	ldrh	r3, [r3, #10]
 800bc42:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bc46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	6959      	ldr	r1, [r3, #20]
 800bc52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc56:	b29b      	uxth	r3, r3
 800bc58:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800bc5c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800bc60:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800bc64:	6800      	ldr	r0, [r0, #0]
 800bc66:	f001 f87d 	bl	800cd64 <USB_WritePMA>
 800bc6a:	e227      	b.n	800c0bc <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800bc6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	6a1b      	ldr	r3, [r3, #32]
 800bc78:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800bc7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc80:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bc84:	681a      	ldr	r2, [r3, #0]
 800bc86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	781b      	ldrb	r3, [r3, #0]
 800bc92:	009b      	lsls	r3, r3, #2
 800bc94:	4413      	add	r3, r2
 800bc96:	881b      	ldrh	r3, [r3, #0]
 800bc98:	b29b      	uxth	r3, r3
 800bc9a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800bc9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bca2:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800bca6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bcaa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bcae:	681a      	ldr	r2, [r3, #0]
 800bcb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bcb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	781b      	ldrb	r3, [r3, #0]
 800bcbc:	009b      	lsls	r3, r3, #2
 800bcbe:	441a      	add	r2, r3
 800bcc0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800bcc4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bcc8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bccc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bcd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bcd4:	b29b      	uxth	r3, r3
 800bcd6:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800bcd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bcdc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bce4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bce8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bcf2:	b29b      	uxth	r3, r3
 800bcf4:	461a      	mov	r2, r3
 800bcf6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bcf8:	4413      	add	r3, r2
 800bcfa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bcfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	781b      	ldrb	r3, [r3, #0]
 800bd08:	00da      	lsls	r2, r3, #3
 800bd0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bd0c:	4413      	add	r3, r2
 800bd0e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bd12:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bd14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd18:	b29a      	uxth	r2, r3
 800bd1a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bd1c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800bd1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	891b      	ldrh	r3, [r3, #8]
 800bd2a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bd2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	6959      	ldr	r1, [r3, #20]
 800bd3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd3e:	b29b      	uxth	r3, r3
 800bd40:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800bd44:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800bd48:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800bd4c:	6800      	ldr	r0, [r0, #0]
 800bd4e:	f001 f809 	bl	800cd64 <USB_WritePMA>
 800bd52:	e1b3      	b.n	800c0bc <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800bd54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	6a1a      	ldr	r2, [r3, #32]
 800bd60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd64:	1ad2      	subs	r2, r2, r3
 800bd66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800bd72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd76:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bd7a:	681a      	ldr	r2, [r3, #0]
 800bd7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	781b      	ldrb	r3, [r3, #0]
 800bd88:	009b      	lsls	r3, r3, #2
 800bd8a:	4413      	add	r3, r2
 800bd8c:	881b      	ldrh	r3, [r3, #0]
 800bd8e:	b29b      	uxth	r3, r3
 800bd90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	f000 80c6 	beq.w	800bf26 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bd9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd9e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	673b      	str	r3, [r7, #112]	@ 0x70
 800bda6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bdaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	785b      	ldrb	r3, [r3, #1]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d177      	bne.n	800bea6 <USB_EPStartXfer+0xb18>
 800bdb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bdba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bdc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bdc6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bdd0:	b29b      	uxth	r3, r3
 800bdd2:	461a      	mov	r2, r3
 800bdd4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bdd6:	4413      	add	r3, r2
 800bdd8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bdda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bdde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	781b      	ldrb	r3, [r3, #0]
 800bde6:	00da      	lsls	r2, r3, #3
 800bde8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bdea:	4413      	add	r3, r2
 800bdec:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bdf0:	667b      	str	r3, [r7, #100]	@ 0x64
 800bdf2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bdf4:	881b      	ldrh	r3, [r3, #0]
 800bdf6:	b29b      	uxth	r3, r3
 800bdf8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bdfc:	b29a      	uxth	r2, r3
 800bdfe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800be00:	801a      	strh	r2, [r3, #0]
 800be02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be06:	2b3e      	cmp	r3, #62	@ 0x3e
 800be08:	d921      	bls.n	800be4e <USB_EPStartXfer+0xac0>
 800be0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be0e:	095b      	lsrs	r3, r3, #5
 800be10:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800be14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be18:	f003 031f 	and.w	r3, r3, #31
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d104      	bne.n	800be2a <USB_EPStartXfer+0xa9c>
 800be20:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800be24:	3b01      	subs	r3, #1
 800be26:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800be2a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800be2c:	881b      	ldrh	r3, [r3, #0]
 800be2e:	b29a      	uxth	r2, r3
 800be30:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800be34:	b29b      	uxth	r3, r3
 800be36:	029b      	lsls	r3, r3, #10
 800be38:	b29b      	uxth	r3, r3
 800be3a:	4313      	orrs	r3, r2
 800be3c:	b29b      	uxth	r3, r3
 800be3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800be42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800be46:	b29a      	uxth	r2, r3
 800be48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800be4a:	801a      	strh	r2, [r3, #0]
 800be4c:	e050      	b.n	800bef0 <USB_EPStartXfer+0xb62>
 800be4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be52:	2b00      	cmp	r3, #0
 800be54:	d10a      	bne.n	800be6c <USB_EPStartXfer+0xade>
 800be56:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800be58:	881b      	ldrh	r3, [r3, #0]
 800be5a:	b29b      	uxth	r3, r3
 800be5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800be60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800be64:	b29a      	uxth	r2, r3
 800be66:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800be68:	801a      	strh	r2, [r3, #0]
 800be6a:	e041      	b.n	800bef0 <USB_EPStartXfer+0xb62>
 800be6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be70:	085b      	lsrs	r3, r3, #1
 800be72:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800be76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be7a:	f003 0301 	and.w	r3, r3, #1
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d004      	beq.n	800be8c <USB_EPStartXfer+0xafe>
 800be82:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800be86:	3301      	adds	r3, #1
 800be88:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800be8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800be8e:	881b      	ldrh	r3, [r3, #0]
 800be90:	b29a      	uxth	r2, r3
 800be92:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800be96:	b29b      	uxth	r3, r3
 800be98:	029b      	lsls	r3, r3, #10
 800be9a:	b29b      	uxth	r3, r3
 800be9c:	4313      	orrs	r3, r2
 800be9e:	b29a      	uxth	r2, r3
 800bea0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bea2:	801a      	strh	r2, [r3, #0]
 800bea4:	e024      	b.n	800bef0 <USB_EPStartXfer+0xb62>
 800bea6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800beaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	785b      	ldrb	r3, [r3, #1]
 800beb2:	2b01      	cmp	r3, #1
 800beb4:	d11c      	bne.n	800bef0 <USB_EPStartXfer+0xb62>
 800beb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800beba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bec4:	b29b      	uxth	r3, r3
 800bec6:	461a      	mov	r2, r3
 800bec8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800beca:	4413      	add	r3, r2
 800becc:	673b      	str	r3, [r7, #112]	@ 0x70
 800bece:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bed2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	781b      	ldrb	r3, [r3, #0]
 800beda:	00da      	lsls	r2, r3, #3
 800bedc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bede:	4413      	add	r3, r2
 800bee0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bee4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800bee6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800beea:	b29a      	uxth	r2, r3
 800beec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800beee:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800bef0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bef4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	895b      	ldrh	r3, [r3, #10]
 800befc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bf00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	6959      	ldr	r1, [r3, #20]
 800bf0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf10:	b29b      	uxth	r3, r3
 800bf12:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800bf16:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800bf1a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800bf1e:	6800      	ldr	r0, [r0, #0]
 800bf20:	f000 ff20 	bl	800cd64 <USB_WritePMA>
 800bf24:	e0ca      	b.n	800c0bc <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800bf26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	785b      	ldrb	r3, [r3, #1]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d177      	bne.n	800c026 <USB_EPStartXfer+0xc98>
 800bf36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800bf42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bf50:	b29b      	uxth	r3, r3
 800bf52:	461a      	mov	r2, r3
 800bf54:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800bf56:	4413      	add	r3, r2
 800bf58:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800bf5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	781b      	ldrb	r3, [r3, #0]
 800bf66:	00da      	lsls	r2, r3, #3
 800bf68:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800bf6a:	4413      	add	r3, r2
 800bf6c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bf70:	67bb      	str	r3, [r7, #120]	@ 0x78
 800bf72:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bf74:	881b      	ldrh	r3, [r3, #0]
 800bf76:	b29b      	uxth	r3, r3
 800bf78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bf7c:	b29a      	uxth	r2, r3
 800bf7e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bf80:	801a      	strh	r2, [r3, #0]
 800bf82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf86:	2b3e      	cmp	r3, #62	@ 0x3e
 800bf88:	d921      	bls.n	800bfce <USB_EPStartXfer+0xc40>
 800bf8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf8e:	095b      	lsrs	r3, r3, #5
 800bf90:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800bf94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf98:	f003 031f 	and.w	r3, r3, #31
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d104      	bne.n	800bfaa <USB_EPStartXfer+0xc1c>
 800bfa0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800bfa4:	3b01      	subs	r3, #1
 800bfa6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800bfaa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bfac:	881b      	ldrh	r3, [r3, #0]
 800bfae:	b29a      	uxth	r2, r3
 800bfb0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800bfb4:	b29b      	uxth	r3, r3
 800bfb6:	029b      	lsls	r3, r3, #10
 800bfb8:	b29b      	uxth	r3, r3
 800bfba:	4313      	orrs	r3, r2
 800bfbc:	b29b      	uxth	r3, r3
 800bfbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bfc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bfc6:	b29a      	uxth	r2, r3
 800bfc8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bfca:	801a      	strh	r2, [r3, #0]
 800bfcc:	e05c      	b.n	800c088 <USB_EPStartXfer+0xcfa>
 800bfce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d10a      	bne.n	800bfec <USB_EPStartXfer+0xc5e>
 800bfd6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bfd8:	881b      	ldrh	r3, [r3, #0]
 800bfda:	b29b      	uxth	r3, r3
 800bfdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bfe0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bfe4:	b29a      	uxth	r2, r3
 800bfe6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bfe8:	801a      	strh	r2, [r3, #0]
 800bfea:	e04d      	b.n	800c088 <USB_EPStartXfer+0xcfa>
 800bfec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bff0:	085b      	lsrs	r3, r3, #1
 800bff2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800bff6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bffa:	f003 0301 	and.w	r3, r3, #1
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d004      	beq.n	800c00c <USB_EPStartXfer+0xc7e>
 800c002:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c006:	3301      	adds	r3, #1
 800c008:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800c00c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c00e:	881b      	ldrh	r3, [r3, #0]
 800c010:	b29a      	uxth	r2, r3
 800c012:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c016:	b29b      	uxth	r3, r3
 800c018:	029b      	lsls	r3, r3, #10
 800c01a:	b29b      	uxth	r3, r3
 800c01c:	4313      	orrs	r3, r2
 800c01e:	b29a      	uxth	r2, r3
 800c020:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c022:	801a      	strh	r2, [r3, #0]
 800c024:	e030      	b.n	800c088 <USB_EPStartXfer+0xcfa>
 800c026:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c02a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	785b      	ldrb	r3, [r3, #1]
 800c032:	2b01      	cmp	r3, #1
 800c034:	d128      	bne.n	800c088 <USB_EPStartXfer+0xcfa>
 800c036:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c03a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c044:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c048:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c052:	b29b      	uxth	r3, r3
 800c054:	461a      	mov	r2, r3
 800c056:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c05a:	4413      	add	r3, r2
 800c05c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c060:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c064:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	781b      	ldrb	r3, [r3, #0]
 800c06c:	00da      	lsls	r2, r3, #3
 800c06e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c072:	4413      	add	r3, r2
 800c074:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c078:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c07c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c080:	b29a      	uxth	r2, r3
 800c082:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c086:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800c088:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c08c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	891b      	ldrh	r3, [r3, #8]
 800c094:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c098:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c09c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	6959      	ldr	r1, [r3, #20]
 800c0a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0a8:	b29b      	uxth	r3, r3
 800c0aa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c0ae:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800c0b2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800c0b6:	6800      	ldr	r0, [r0, #0]
 800c0b8:	f000 fe54 	bl	800cd64 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800c0bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c0c4:	681a      	ldr	r2, [r3, #0]
 800c0c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	781b      	ldrb	r3, [r3, #0]
 800c0d2:	009b      	lsls	r3, r3, #2
 800c0d4:	4413      	add	r3, r2
 800c0d6:	881b      	ldrh	r3, [r3, #0]
 800c0d8:	b29b      	uxth	r3, r3
 800c0da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c0de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c0e2:	817b      	strh	r3, [r7, #10]
 800c0e4:	897b      	ldrh	r3, [r7, #10]
 800c0e6:	f083 0310 	eor.w	r3, r3, #16
 800c0ea:	817b      	strh	r3, [r7, #10]
 800c0ec:	897b      	ldrh	r3, [r7, #10]
 800c0ee:	f083 0320 	eor.w	r3, r3, #32
 800c0f2:	817b      	strh	r3, [r7, #10]
 800c0f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c0fc:	681a      	ldr	r2, [r3, #0]
 800c0fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c102:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	781b      	ldrb	r3, [r3, #0]
 800c10a:	009b      	lsls	r3, r3, #2
 800c10c:	441a      	add	r2, r3
 800c10e:	897b      	ldrh	r3, [r7, #10]
 800c110:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c114:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c118:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c11c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c120:	b29b      	uxth	r3, r3
 800c122:	8013      	strh	r3, [r2, #0]
 800c124:	f000 bcde 	b.w	800cae4 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800c128:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c12c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	7b1b      	ldrb	r3, [r3, #12]
 800c134:	2b00      	cmp	r3, #0
 800c136:	f040 80bb 	bne.w	800c2b0 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800c13a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c13e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	699a      	ldr	r2, [r3, #24]
 800c146:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c14a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	691b      	ldr	r3, [r3, #16]
 800c152:	429a      	cmp	r2, r3
 800c154:	d917      	bls.n	800c186 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800c156:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c15a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	691b      	ldr	r3, [r3, #16]
 800c162:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800c166:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c16a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	699a      	ldr	r2, [r3, #24]
 800c172:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c176:	1ad2      	subs	r2, r2, r3
 800c178:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c17c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	619a      	str	r2, [r3, #24]
 800c184:	e00e      	b.n	800c1a4 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800c186:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c18a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	699b      	ldr	r3, [r3, #24]
 800c192:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800c196:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c19a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800c1a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c1a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c1b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c1b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c1c0:	b29b      	uxth	r3, r3
 800c1c2:	461a      	mov	r2, r3
 800c1c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c1c8:	4413      	add	r3, r2
 800c1ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c1ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c1d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	781b      	ldrb	r3, [r3, #0]
 800c1da:	00da      	lsls	r2, r3, #3
 800c1dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c1e0:	4413      	add	r3, r2
 800c1e2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c1e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c1ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c1ee:	881b      	ldrh	r3, [r3, #0]
 800c1f0:	b29b      	uxth	r3, r3
 800c1f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c1f6:	b29a      	uxth	r2, r3
 800c1f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c1fc:	801a      	strh	r2, [r3, #0]
 800c1fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c202:	2b3e      	cmp	r3, #62	@ 0x3e
 800c204:	d924      	bls.n	800c250 <USB_EPStartXfer+0xec2>
 800c206:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c20a:	095b      	lsrs	r3, r3, #5
 800c20c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c210:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c214:	f003 031f 	and.w	r3, r3, #31
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d104      	bne.n	800c226 <USB_EPStartXfer+0xe98>
 800c21c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800c220:	3b01      	subs	r3, #1
 800c222:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c226:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c22a:	881b      	ldrh	r3, [r3, #0]
 800c22c:	b29a      	uxth	r2, r3
 800c22e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800c232:	b29b      	uxth	r3, r3
 800c234:	029b      	lsls	r3, r3, #10
 800c236:	b29b      	uxth	r3, r3
 800c238:	4313      	orrs	r3, r2
 800c23a:	b29b      	uxth	r3, r3
 800c23c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c240:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c244:	b29a      	uxth	r2, r3
 800c246:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c24a:	801a      	strh	r2, [r3, #0]
 800c24c:	f000 bc10 	b.w	800ca70 <USB_EPStartXfer+0x16e2>
 800c250:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c254:	2b00      	cmp	r3, #0
 800c256:	d10c      	bne.n	800c272 <USB_EPStartXfer+0xee4>
 800c258:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c25c:	881b      	ldrh	r3, [r3, #0]
 800c25e:	b29b      	uxth	r3, r3
 800c260:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c264:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c268:	b29a      	uxth	r2, r3
 800c26a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c26e:	801a      	strh	r2, [r3, #0]
 800c270:	e3fe      	b.n	800ca70 <USB_EPStartXfer+0x16e2>
 800c272:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c276:	085b      	lsrs	r3, r3, #1
 800c278:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c27c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c280:	f003 0301 	and.w	r3, r3, #1
 800c284:	2b00      	cmp	r3, #0
 800c286:	d004      	beq.n	800c292 <USB_EPStartXfer+0xf04>
 800c288:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800c28c:	3301      	adds	r3, #1
 800c28e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c292:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c296:	881b      	ldrh	r3, [r3, #0]
 800c298:	b29a      	uxth	r2, r3
 800c29a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800c29e:	b29b      	uxth	r3, r3
 800c2a0:	029b      	lsls	r3, r3, #10
 800c2a2:	b29b      	uxth	r3, r3
 800c2a4:	4313      	orrs	r3, r2
 800c2a6:	b29a      	uxth	r2, r3
 800c2a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c2ac:	801a      	strh	r2, [r3, #0]
 800c2ae:	e3df      	b.n	800ca70 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800c2b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	78db      	ldrb	r3, [r3, #3]
 800c2bc:	2b02      	cmp	r3, #2
 800c2be:	f040 8218 	bne.w	800c6f2 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800c2c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	785b      	ldrb	r3, [r3, #1]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	f040 809d 	bne.w	800c40e <USB_EPStartXfer+0x1080>
 800c2d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c2e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c2f0:	b29b      	uxth	r3, r3
 800c2f2:	461a      	mov	r2, r3
 800c2f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c2f8:	4413      	add	r3, r2
 800c2fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c2fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c302:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	781b      	ldrb	r3, [r3, #0]
 800c30a:	00da      	lsls	r2, r3, #3
 800c30c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c310:	4413      	add	r3, r2
 800c312:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c316:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c31a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c31e:	881b      	ldrh	r3, [r3, #0]
 800c320:	b29b      	uxth	r3, r3
 800c322:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c326:	b29a      	uxth	r2, r3
 800c328:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c32c:	801a      	strh	r2, [r3, #0]
 800c32e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c332:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	691b      	ldr	r3, [r3, #16]
 800c33a:	2b3e      	cmp	r3, #62	@ 0x3e
 800c33c:	d92b      	bls.n	800c396 <USB_EPStartXfer+0x1008>
 800c33e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c342:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	691b      	ldr	r3, [r3, #16]
 800c34a:	095b      	lsrs	r3, r3, #5
 800c34c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c350:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c354:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	691b      	ldr	r3, [r3, #16]
 800c35c:	f003 031f 	and.w	r3, r3, #31
 800c360:	2b00      	cmp	r3, #0
 800c362:	d104      	bne.n	800c36e <USB_EPStartXfer+0xfe0>
 800c364:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c368:	3b01      	subs	r3, #1
 800c36a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c36e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c372:	881b      	ldrh	r3, [r3, #0]
 800c374:	b29a      	uxth	r2, r3
 800c376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c37a:	b29b      	uxth	r3, r3
 800c37c:	029b      	lsls	r3, r3, #10
 800c37e:	b29b      	uxth	r3, r3
 800c380:	4313      	orrs	r3, r2
 800c382:	b29b      	uxth	r3, r3
 800c384:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c388:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c38c:	b29a      	uxth	r2, r3
 800c38e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c392:	801a      	strh	r2, [r3, #0]
 800c394:	e070      	b.n	800c478 <USB_EPStartXfer+0x10ea>
 800c396:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c39a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	691b      	ldr	r3, [r3, #16]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d10c      	bne.n	800c3c0 <USB_EPStartXfer+0x1032>
 800c3a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c3aa:	881b      	ldrh	r3, [r3, #0]
 800c3ac:	b29b      	uxth	r3, r3
 800c3ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c3b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c3b6:	b29a      	uxth	r2, r3
 800c3b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c3bc:	801a      	strh	r2, [r3, #0]
 800c3be:	e05b      	b.n	800c478 <USB_EPStartXfer+0x10ea>
 800c3c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c3c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	691b      	ldr	r3, [r3, #16]
 800c3cc:	085b      	lsrs	r3, r3, #1
 800c3ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c3d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c3d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	691b      	ldr	r3, [r3, #16]
 800c3de:	f003 0301 	and.w	r3, r3, #1
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d004      	beq.n	800c3f0 <USB_EPStartXfer+0x1062>
 800c3e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c3ea:	3301      	adds	r3, #1
 800c3ec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c3f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c3f4:	881b      	ldrh	r3, [r3, #0]
 800c3f6:	b29a      	uxth	r2, r3
 800c3f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c3fc:	b29b      	uxth	r3, r3
 800c3fe:	029b      	lsls	r3, r3, #10
 800c400:	b29b      	uxth	r3, r3
 800c402:	4313      	orrs	r3, r2
 800c404:	b29a      	uxth	r2, r3
 800c406:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c40a:	801a      	strh	r2, [r3, #0]
 800c40c:	e034      	b.n	800c478 <USB_EPStartXfer+0x10ea>
 800c40e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c412:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	785b      	ldrb	r3, [r3, #1]
 800c41a:	2b01      	cmp	r3, #1
 800c41c:	d12c      	bne.n	800c478 <USB_EPStartXfer+0x10ea>
 800c41e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c422:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c42c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c430:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c43a:	b29b      	uxth	r3, r3
 800c43c:	461a      	mov	r2, r3
 800c43e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c442:	4413      	add	r3, r2
 800c444:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c448:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c44c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	781b      	ldrb	r3, [r3, #0]
 800c454:	00da      	lsls	r2, r3, #3
 800c456:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c45a:	4413      	add	r3, r2
 800c45c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c460:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c464:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c468:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	691b      	ldr	r3, [r3, #16]
 800c470:	b29a      	uxth	r2, r3
 800c472:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800c476:	801a      	strh	r2, [r3, #0]
 800c478:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c47c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c486:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c48a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	785b      	ldrb	r3, [r3, #1]
 800c492:	2b00      	cmp	r3, #0
 800c494:	f040 809d 	bne.w	800c5d2 <USB_EPStartXfer+0x1244>
 800c498:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c49c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c4a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c4aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c4b4:	b29b      	uxth	r3, r3
 800c4b6:	461a      	mov	r2, r3
 800c4b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c4bc:	4413      	add	r3, r2
 800c4be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c4c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c4c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	781b      	ldrb	r3, [r3, #0]
 800c4ce:	00da      	lsls	r2, r3, #3
 800c4d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c4d4:	4413      	add	r3, r2
 800c4d6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c4da:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c4de:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c4e2:	881b      	ldrh	r3, [r3, #0]
 800c4e4:	b29b      	uxth	r3, r3
 800c4e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c4ea:	b29a      	uxth	r2, r3
 800c4ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c4f0:	801a      	strh	r2, [r3, #0]
 800c4f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c4f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	691b      	ldr	r3, [r3, #16]
 800c4fe:	2b3e      	cmp	r3, #62	@ 0x3e
 800c500:	d92b      	bls.n	800c55a <USB_EPStartXfer+0x11cc>
 800c502:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c506:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	691b      	ldr	r3, [r3, #16]
 800c50e:	095b      	lsrs	r3, r3, #5
 800c510:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c514:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c518:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	691b      	ldr	r3, [r3, #16]
 800c520:	f003 031f 	and.w	r3, r3, #31
 800c524:	2b00      	cmp	r3, #0
 800c526:	d104      	bne.n	800c532 <USB_EPStartXfer+0x11a4>
 800c528:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c52c:	3b01      	subs	r3, #1
 800c52e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c532:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c536:	881b      	ldrh	r3, [r3, #0]
 800c538:	b29a      	uxth	r2, r3
 800c53a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c53e:	b29b      	uxth	r3, r3
 800c540:	029b      	lsls	r3, r3, #10
 800c542:	b29b      	uxth	r3, r3
 800c544:	4313      	orrs	r3, r2
 800c546:	b29b      	uxth	r3, r3
 800c548:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c54c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c550:	b29a      	uxth	r2, r3
 800c552:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c556:	801a      	strh	r2, [r3, #0]
 800c558:	e069      	b.n	800c62e <USB_EPStartXfer+0x12a0>
 800c55a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c55e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	691b      	ldr	r3, [r3, #16]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d10c      	bne.n	800c584 <USB_EPStartXfer+0x11f6>
 800c56a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c56e:	881b      	ldrh	r3, [r3, #0]
 800c570:	b29b      	uxth	r3, r3
 800c572:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c576:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c57a:	b29a      	uxth	r2, r3
 800c57c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c580:	801a      	strh	r2, [r3, #0]
 800c582:	e054      	b.n	800c62e <USB_EPStartXfer+0x12a0>
 800c584:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c588:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	691b      	ldr	r3, [r3, #16]
 800c590:	085b      	lsrs	r3, r3, #1
 800c592:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c596:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c59a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	691b      	ldr	r3, [r3, #16]
 800c5a2:	f003 0301 	and.w	r3, r3, #1
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d004      	beq.n	800c5b4 <USB_EPStartXfer+0x1226>
 800c5aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c5ae:	3301      	adds	r3, #1
 800c5b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c5b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c5b8:	881b      	ldrh	r3, [r3, #0]
 800c5ba:	b29a      	uxth	r2, r3
 800c5bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c5c0:	b29b      	uxth	r3, r3
 800c5c2:	029b      	lsls	r3, r3, #10
 800c5c4:	b29b      	uxth	r3, r3
 800c5c6:	4313      	orrs	r3, r2
 800c5c8:	b29a      	uxth	r2, r3
 800c5ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c5ce:	801a      	strh	r2, [r3, #0]
 800c5d0:	e02d      	b.n	800c62e <USB_EPStartXfer+0x12a0>
 800c5d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c5d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	785b      	ldrb	r3, [r3, #1]
 800c5de:	2b01      	cmp	r3, #1
 800c5e0:	d125      	bne.n	800c62e <USB_EPStartXfer+0x12a0>
 800c5e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c5e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c5f0:	b29b      	uxth	r3, r3
 800c5f2:	461a      	mov	r2, r3
 800c5f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c5f8:	4413      	add	r3, r2
 800c5fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c5fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c602:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	781b      	ldrb	r3, [r3, #0]
 800c60a:	00da      	lsls	r2, r3, #3
 800c60c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c610:	4413      	add	r3, r2
 800c612:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c616:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c61a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c61e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	691b      	ldr	r3, [r3, #16]
 800c626:	b29a      	uxth	r2, r3
 800c628:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c62c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800c62e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c632:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	69db      	ldr	r3, [r3, #28]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	f000 8218 	beq.w	800ca70 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800c640:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c644:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c648:	681a      	ldr	r2, [r3, #0]
 800c64a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c64e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	781b      	ldrb	r3, [r3, #0]
 800c656:	009b      	lsls	r3, r3, #2
 800c658:	4413      	add	r3, r2
 800c65a:	881b      	ldrh	r3, [r3, #0]
 800c65c:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c660:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800c664:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d005      	beq.n	800c678 <USB_EPStartXfer+0x12ea>
 800c66c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800c670:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c674:	2b00      	cmp	r3, #0
 800c676:	d10d      	bne.n	800c694 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c678:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800c67c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c680:	2b00      	cmp	r3, #0
 800c682:	f040 81f5 	bne.w	800ca70 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c686:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800c68a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c68e:	2b00      	cmp	r3, #0
 800c690:	f040 81ee 	bne.w	800ca70 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800c694:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c698:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c69c:	681a      	ldr	r2, [r3, #0]
 800c69e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c6a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	781b      	ldrb	r3, [r3, #0]
 800c6aa:	009b      	lsls	r3, r3, #2
 800c6ac:	4413      	add	r3, r2
 800c6ae:	881b      	ldrh	r3, [r3, #0]
 800c6b0:	b29b      	uxth	r3, r3
 800c6b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c6b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c6ba:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800c6be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c6c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c6c6:	681a      	ldr	r2, [r3, #0]
 800c6c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c6cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	781b      	ldrb	r3, [r3, #0]
 800c6d4:	009b      	lsls	r3, r3, #2
 800c6d6:	441a      	add	r2, r3
 800c6d8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800c6dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c6e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c6e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c6e8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c6ec:	b29b      	uxth	r3, r3
 800c6ee:	8013      	strh	r3, [r2, #0]
 800c6f0:	e1be      	b.n	800ca70 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800c6f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c6f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	78db      	ldrb	r3, [r3, #3]
 800c6fe:	2b01      	cmp	r3, #1
 800c700:	f040 81b4 	bne.w	800ca6c <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800c704:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c708:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	699a      	ldr	r2, [r3, #24]
 800c710:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c714:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	691b      	ldr	r3, [r3, #16]
 800c71c:	429a      	cmp	r2, r3
 800c71e:	d917      	bls.n	800c750 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800c720:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c724:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	691b      	ldr	r3, [r3, #16]
 800c72c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800c730:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c734:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	699a      	ldr	r2, [r3, #24]
 800c73c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c740:	1ad2      	subs	r2, r2, r3
 800c742:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c746:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	619a      	str	r2, [r3, #24]
 800c74e:	e00e      	b.n	800c76e <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800c750:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c754:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	699b      	ldr	r3, [r3, #24]
 800c75c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800c760:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c764:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	2200      	movs	r2, #0
 800c76c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800c76e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c772:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	785b      	ldrb	r3, [r3, #1]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	f040 8085 	bne.w	800c88a <USB_EPStartXfer+0x14fc>
 800c780:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c784:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c78e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c792:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c79c:	b29b      	uxth	r3, r3
 800c79e:	461a      	mov	r2, r3
 800c7a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800c7a4:	4413      	add	r3, r2
 800c7a6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c7aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c7ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	781b      	ldrb	r3, [r3, #0]
 800c7b6:	00da      	lsls	r2, r3, #3
 800c7b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800c7bc:	4413      	add	r3, r2
 800c7be:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c7c2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c7c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c7ca:	881b      	ldrh	r3, [r3, #0]
 800c7cc:	b29b      	uxth	r3, r3
 800c7ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c7d2:	b29a      	uxth	r2, r3
 800c7d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c7d8:	801a      	strh	r2, [r3, #0]
 800c7da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7de:	2b3e      	cmp	r3, #62	@ 0x3e
 800c7e0:	d923      	bls.n	800c82a <USB_EPStartXfer+0x149c>
 800c7e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7e6:	095b      	lsrs	r3, r3, #5
 800c7e8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800c7ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7f0:	f003 031f 	and.w	r3, r3, #31
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d104      	bne.n	800c802 <USB_EPStartXfer+0x1474>
 800c7f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c7fc:	3b01      	subs	r3, #1
 800c7fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800c802:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c806:	881b      	ldrh	r3, [r3, #0]
 800c808:	b29a      	uxth	r2, r3
 800c80a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c80e:	b29b      	uxth	r3, r3
 800c810:	029b      	lsls	r3, r3, #10
 800c812:	b29b      	uxth	r3, r3
 800c814:	4313      	orrs	r3, r2
 800c816:	b29b      	uxth	r3, r3
 800c818:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c81c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c820:	b29a      	uxth	r2, r3
 800c822:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c826:	801a      	strh	r2, [r3, #0]
 800c828:	e060      	b.n	800c8ec <USB_EPStartXfer+0x155e>
 800c82a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d10c      	bne.n	800c84c <USB_EPStartXfer+0x14be>
 800c832:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c836:	881b      	ldrh	r3, [r3, #0]
 800c838:	b29b      	uxth	r3, r3
 800c83a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c83e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c842:	b29a      	uxth	r2, r3
 800c844:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c848:	801a      	strh	r2, [r3, #0]
 800c84a:	e04f      	b.n	800c8ec <USB_EPStartXfer+0x155e>
 800c84c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c850:	085b      	lsrs	r3, r3, #1
 800c852:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800c856:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c85a:	f003 0301 	and.w	r3, r3, #1
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d004      	beq.n	800c86c <USB_EPStartXfer+0x14de>
 800c862:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c866:	3301      	adds	r3, #1
 800c868:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800c86c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c870:	881b      	ldrh	r3, [r3, #0]
 800c872:	b29a      	uxth	r2, r3
 800c874:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c878:	b29b      	uxth	r3, r3
 800c87a:	029b      	lsls	r3, r3, #10
 800c87c:	b29b      	uxth	r3, r3
 800c87e:	4313      	orrs	r3, r2
 800c880:	b29a      	uxth	r2, r3
 800c882:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c886:	801a      	strh	r2, [r3, #0]
 800c888:	e030      	b.n	800c8ec <USB_EPStartXfer+0x155e>
 800c88a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c88e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	785b      	ldrb	r3, [r3, #1]
 800c896:	2b01      	cmp	r3, #1
 800c898:	d128      	bne.n	800c8ec <USB_EPStartXfer+0x155e>
 800c89a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c89e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c8a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c8b6:	b29b      	uxth	r3, r3
 800c8b8:	461a      	mov	r2, r3
 800c8ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c8be:	4413      	add	r3, r2
 800c8c0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c8c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	781b      	ldrb	r3, [r3, #0]
 800c8d0:	00da      	lsls	r2, r3, #3
 800c8d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c8d6:	4413      	add	r3, r2
 800c8d8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c8dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c8e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8e4:	b29a      	uxth	r2, r3
 800c8e6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800c8ea:	801a      	strh	r2, [r3, #0]
 800c8ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c8fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	785b      	ldrb	r3, [r3, #1]
 800c906:	2b00      	cmp	r3, #0
 800c908:	f040 8085 	bne.w	800ca16 <USB_EPStartXfer+0x1688>
 800c90c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c910:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800c91a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c91e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c928:	b29b      	uxth	r3, r3
 800c92a:	461a      	mov	r2, r3
 800c92c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800c930:	4413      	add	r3, r2
 800c932:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800c936:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c93a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	781b      	ldrb	r3, [r3, #0]
 800c942:	00da      	lsls	r2, r3, #3
 800c944:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800c948:	4413      	add	r3, r2
 800c94a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c94e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c952:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c956:	881b      	ldrh	r3, [r3, #0]
 800c958:	b29b      	uxth	r3, r3
 800c95a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c95e:	b29a      	uxth	r2, r3
 800c960:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c964:	801a      	strh	r2, [r3, #0]
 800c966:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c96a:	2b3e      	cmp	r3, #62	@ 0x3e
 800c96c:	d923      	bls.n	800c9b6 <USB_EPStartXfer+0x1628>
 800c96e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c972:	095b      	lsrs	r3, r3, #5
 800c974:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c978:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c97c:	f003 031f 	and.w	r3, r3, #31
 800c980:	2b00      	cmp	r3, #0
 800c982:	d104      	bne.n	800c98e <USB_EPStartXfer+0x1600>
 800c984:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c988:	3b01      	subs	r3, #1
 800c98a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c98e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c992:	881b      	ldrh	r3, [r3, #0]
 800c994:	b29a      	uxth	r2, r3
 800c996:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c99a:	b29b      	uxth	r3, r3
 800c99c:	029b      	lsls	r3, r3, #10
 800c99e:	b29b      	uxth	r3, r3
 800c9a0:	4313      	orrs	r3, r2
 800c9a2:	b29b      	uxth	r3, r3
 800c9a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c9a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c9ac:	b29a      	uxth	r2, r3
 800c9ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c9b2:	801a      	strh	r2, [r3, #0]
 800c9b4:	e05c      	b.n	800ca70 <USB_EPStartXfer+0x16e2>
 800c9b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d10c      	bne.n	800c9d8 <USB_EPStartXfer+0x164a>
 800c9be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c9c2:	881b      	ldrh	r3, [r3, #0]
 800c9c4:	b29b      	uxth	r3, r3
 800c9c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c9ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c9ce:	b29a      	uxth	r2, r3
 800c9d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c9d4:	801a      	strh	r2, [r3, #0]
 800c9d6:	e04b      	b.n	800ca70 <USB_EPStartXfer+0x16e2>
 800c9d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9dc:	085b      	lsrs	r3, r3, #1
 800c9de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c9e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9e6:	f003 0301 	and.w	r3, r3, #1
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d004      	beq.n	800c9f8 <USB_EPStartXfer+0x166a>
 800c9ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c9f2:	3301      	adds	r3, #1
 800c9f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c9f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c9fc:	881b      	ldrh	r3, [r3, #0]
 800c9fe:	b29a      	uxth	r2, r3
 800ca00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ca04:	b29b      	uxth	r3, r3
 800ca06:	029b      	lsls	r3, r3, #10
 800ca08:	b29b      	uxth	r3, r3
 800ca0a:	4313      	orrs	r3, r2
 800ca0c:	b29a      	uxth	r2, r3
 800ca0e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ca12:	801a      	strh	r2, [r3, #0]
 800ca14:	e02c      	b.n	800ca70 <USB_EPStartXfer+0x16e2>
 800ca16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	785b      	ldrb	r3, [r3, #1]
 800ca22:	2b01      	cmp	r3, #1
 800ca24:	d124      	bne.n	800ca70 <USB_EPStartXfer+0x16e2>
 800ca26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca2a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ca34:	b29b      	uxth	r3, r3
 800ca36:	461a      	mov	r2, r3
 800ca38:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ca3c:	4413      	add	r3, r2
 800ca3e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ca42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	781b      	ldrb	r3, [r3, #0]
 800ca4e:	00da      	lsls	r2, r3, #3
 800ca50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ca54:	4413      	add	r3, r2
 800ca56:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ca5a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ca5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca62:	b29a      	uxth	r2, r3
 800ca64:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ca68:	801a      	strh	r2, [r3, #0]
 800ca6a:	e001      	b.n	800ca70 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800ca6c:	2301      	movs	r3, #1
 800ca6e:	e03a      	b.n	800cae6 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ca70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca74:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ca78:	681a      	ldr	r2, [r3, #0]
 800ca7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	781b      	ldrb	r3, [r3, #0]
 800ca86:	009b      	lsls	r3, r3, #2
 800ca88:	4413      	add	r3, r2
 800ca8a:	881b      	ldrh	r3, [r3, #0]
 800ca8c:	b29b      	uxth	r3, r3
 800ca8e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ca92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ca96:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800ca9a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ca9e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800caa2:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800caa6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800caaa:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800caae:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800cab2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cab6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800caba:	681a      	ldr	r2, [r3, #0]
 800cabc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cac0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	781b      	ldrb	r3, [r3, #0]
 800cac8:	009b      	lsls	r3, r3, #2
 800caca:	441a      	add	r2, r3
 800cacc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800cad0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cad4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cad8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cadc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cae0:	b29b      	uxth	r3, r3
 800cae2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800cae4:	2300      	movs	r3, #0
}
 800cae6:	4618      	mov	r0, r3
 800cae8:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800caec:	46bd      	mov	sp, r7
 800caee:	bd80      	pop	{r7, pc}

0800caf0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800caf0:	b480      	push	{r7}
 800caf2:	b085      	sub	sp, #20
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	6078      	str	r0, [r7, #4]
 800caf8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800cafa:	683b      	ldr	r3, [r7, #0]
 800cafc:	785b      	ldrb	r3, [r3, #1]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d020      	beq.n	800cb44 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800cb02:	687a      	ldr	r2, [r7, #4]
 800cb04:	683b      	ldr	r3, [r7, #0]
 800cb06:	781b      	ldrb	r3, [r3, #0]
 800cb08:	009b      	lsls	r3, r3, #2
 800cb0a:	4413      	add	r3, r2
 800cb0c:	881b      	ldrh	r3, [r3, #0]
 800cb0e:	b29b      	uxth	r3, r3
 800cb10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cb14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cb18:	81bb      	strh	r3, [r7, #12]
 800cb1a:	89bb      	ldrh	r3, [r7, #12]
 800cb1c:	f083 0310 	eor.w	r3, r3, #16
 800cb20:	81bb      	strh	r3, [r7, #12]
 800cb22:	687a      	ldr	r2, [r7, #4]
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	781b      	ldrb	r3, [r3, #0]
 800cb28:	009b      	lsls	r3, r3, #2
 800cb2a:	441a      	add	r2, r3
 800cb2c:	89bb      	ldrh	r3, [r7, #12]
 800cb2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cb32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cb36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cb3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb3e:	b29b      	uxth	r3, r3
 800cb40:	8013      	strh	r3, [r2, #0]
 800cb42:	e01f      	b.n	800cb84 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800cb44:	687a      	ldr	r2, [r7, #4]
 800cb46:	683b      	ldr	r3, [r7, #0]
 800cb48:	781b      	ldrb	r3, [r3, #0]
 800cb4a:	009b      	lsls	r3, r3, #2
 800cb4c:	4413      	add	r3, r2
 800cb4e:	881b      	ldrh	r3, [r3, #0]
 800cb50:	b29b      	uxth	r3, r3
 800cb52:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cb56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cb5a:	81fb      	strh	r3, [r7, #14]
 800cb5c:	89fb      	ldrh	r3, [r7, #14]
 800cb5e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800cb62:	81fb      	strh	r3, [r7, #14]
 800cb64:	687a      	ldr	r2, [r7, #4]
 800cb66:	683b      	ldr	r3, [r7, #0]
 800cb68:	781b      	ldrb	r3, [r3, #0]
 800cb6a:	009b      	lsls	r3, r3, #2
 800cb6c:	441a      	add	r2, r3
 800cb6e:	89fb      	ldrh	r3, [r7, #14]
 800cb70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cb74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cb78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cb7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb80:	b29b      	uxth	r3, r3
 800cb82:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800cb84:	2300      	movs	r3, #0
}
 800cb86:	4618      	mov	r0, r3
 800cb88:	3714      	adds	r7, #20
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb90:	4770      	bx	lr

0800cb92 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800cb92:	b480      	push	{r7}
 800cb94:	b087      	sub	sp, #28
 800cb96:	af00      	add	r7, sp, #0
 800cb98:	6078      	str	r0, [r7, #4]
 800cb9a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800cb9c:	683b      	ldr	r3, [r7, #0]
 800cb9e:	7b1b      	ldrb	r3, [r3, #12]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	f040 809d 	bne.w	800cce0 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800cba6:	683b      	ldr	r3, [r7, #0]
 800cba8:	785b      	ldrb	r3, [r3, #1]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d04c      	beq.n	800cc48 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cbae:	687a      	ldr	r2, [r7, #4]
 800cbb0:	683b      	ldr	r3, [r7, #0]
 800cbb2:	781b      	ldrb	r3, [r3, #0]
 800cbb4:	009b      	lsls	r3, r3, #2
 800cbb6:	4413      	add	r3, r2
 800cbb8:	881b      	ldrh	r3, [r3, #0]
 800cbba:	823b      	strh	r3, [r7, #16]
 800cbbc:	8a3b      	ldrh	r3, [r7, #16]
 800cbbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d01b      	beq.n	800cbfe <USB_EPClearStall+0x6c>
 800cbc6:	687a      	ldr	r2, [r7, #4]
 800cbc8:	683b      	ldr	r3, [r7, #0]
 800cbca:	781b      	ldrb	r3, [r3, #0]
 800cbcc:	009b      	lsls	r3, r3, #2
 800cbce:	4413      	add	r3, r2
 800cbd0:	881b      	ldrh	r3, [r3, #0]
 800cbd2:	b29b      	uxth	r3, r3
 800cbd4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cbd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cbdc:	81fb      	strh	r3, [r7, #14]
 800cbde:	687a      	ldr	r2, [r7, #4]
 800cbe0:	683b      	ldr	r3, [r7, #0]
 800cbe2:	781b      	ldrb	r3, [r3, #0]
 800cbe4:	009b      	lsls	r3, r3, #2
 800cbe6:	441a      	add	r2, r3
 800cbe8:	89fb      	ldrh	r3, [r7, #14]
 800cbea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cbee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cbf2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cbf6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800cbfa:	b29b      	uxth	r3, r3
 800cbfc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800cbfe:	683b      	ldr	r3, [r7, #0]
 800cc00:	78db      	ldrb	r3, [r3, #3]
 800cc02:	2b01      	cmp	r3, #1
 800cc04:	d06c      	beq.n	800cce0 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800cc06:	687a      	ldr	r2, [r7, #4]
 800cc08:	683b      	ldr	r3, [r7, #0]
 800cc0a:	781b      	ldrb	r3, [r3, #0]
 800cc0c:	009b      	lsls	r3, r3, #2
 800cc0e:	4413      	add	r3, r2
 800cc10:	881b      	ldrh	r3, [r3, #0]
 800cc12:	b29b      	uxth	r3, r3
 800cc14:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cc18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cc1c:	81bb      	strh	r3, [r7, #12]
 800cc1e:	89bb      	ldrh	r3, [r7, #12]
 800cc20:	f083 0320 	eor.w	r3, r3, #32
 800cc24:	81bb      	strh	r3, [r7, #12]
 800cc26:	687a      	ldr	r2, [r7, #4]
 800cc28:	683b      	ldr	r3, [r7, #0]
 800cc2a:	781b      	ldrb	r3, [r3, #0]
 800cc2c:	009b      	lsls	r3, r3, #2
 800cc2e:	441a      	add	r2, r3
 800cc30:	89bb      	ldrh	r3, [r7, #12]
 800cc32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cc36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cc3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cc3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc42:	b29b      	uxth	r3, r3
 800cc44:	8013      	strh	r3, [r2, #0]
 800cc46:	e04b      	b.n	800cce0 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cc48:	687a      	ldr	r2, [r7, #4]
 800cc4a:	683b      	ldr	r3, [r7, #0]
 800cc4c:	781b      	ldrb	r3, [r3, #0]
 800cc4e:	009b      	lsls	r3, r3, #2
 800cc50:	4413      	add	r3, r2
 800cc52:	881b      	ldrh	r3, [r3, #0]
 800cc54:	82fb      	strh	r3, [r7, #22]
 800cc56:	8afb      	ldrh	r3, [r7, #22]
 800cc58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d01b      	beq.n	800cc98 <USB_EPClearStall+0x106>
 800cc60:	687a      	ldr	r2, [r7, #4]
 800cc62:	683b      	ldr	r3, [r7, #0]
 800cc64:	781b      	ldrb	r3, [r3, #0]
 800cc66:	009b      	lsls	r3, r3, #2
 800cc68:	4413      	add	r3, r2
 800cc6a:	881b      	ldrh	r3, [r3, #0]
 800cc6c:	b29b      	uxth	r3, r3
 800cc6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cc72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cc76:	82bb      	strh	r3, [r7, #20]
 800cc78:	687a      	ldr	r2, [r7, #4]
 800cc7a:	683b      	ldr	r3, [r7, #0]
 800cc7c:	781b      	ldrb	r3, [r3, #0]
 800cc7e:	009b      	lsls	r3, r3, #2
 800cc80:	441a      	add	r2, r3
 800cc82:	8abb      	ldrh	r3, [r7, #20]
 800cc84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cc88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cc8c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800cc90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc94:	b29b      	uxth	r3, r3
 800cc96:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800cc98:	687a      	ldr	r2, [r7, #4]
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	781b      	ldrb	r3, [r3, #0]
 800cc9e:	009b      	lsls	r3, r3, #2
 800cca0:	4413      	add	r3, r2
 800cca2:	881b      	ldrh	r3, [r3, #0]
 800cca4:	b29b      	uxth	r3, r3
 800cca6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ccaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ccae:	827b      	strh	r3, [r7, #18]
 800ccb0:	8a7b      	ldrh	r3, [r7, #18]
 800ccb2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800ccb6:	827b      	strh	r3, [r7, #18]
 800ccb8:	8a7b      	ldrh	r3, [r7, #18]
 800ccba:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ccbe:	827b      	strh	r3, [r7, #18]
 800ccc0:	687a      	ldr	r2, [r7, #4]
 800ccc2:	683b      	ldr	r3, [r7, #0]
 800ccc4:	781b      	ldrb	r3, [r3, #0]
 800ccc6:	009b      	lsls	r3, r3, #2
 800ccc8:	441a      	add	r2, r3
 800ccca:	8a7b      	ldrh	r3, [r7, #18]
 800cccc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ccd0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ccd4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ccd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ccdc:	b29b      	uxth	r3, r3
 800ccde:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800cce0:	2300      	movs	r3, #0
}
 800cce2:	4618      	mov	r0, r3
 800cce4:	371c      	adds	r7, #28
 800cce6:	46bd      	mov	sp, r7
 800cce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccec:	4770      	bx	lr

0800ccee <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800ccee:	b480      	push	{r7}
 800ccf0:	b083      	sub	sp, #12
 800ccf2:	af00      	add	r7, sp, #0
 800ccf4:	6078      	str	r0, [r7, #4]
 800ccf6:	460b      	mov	r3, r1
 800ccf8:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800ccfa:	78fb      	ldrb	r3, [r7, #3]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d103      	bne.n	800cd08 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	2280      	movs	r2, #128	@ 0x80
 800cd04:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800cd08:	2300      	movs	r3, #0
}
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	370c      	adds	r7, #12
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd14:	4770      	bx	lr

0800cd16 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800cd16:	b480      	push	{r7}
 800cd18:	b083      	sub	sp, #12
 800cd1a:	af00      	add	r7, sp, #0
 800cd1c:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800cd24:	b29b      	uxth	r3, r3
 800cd26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cd2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cd2e:	b29a      	uxth	r2, r3
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800cd36:	2300      	movs	r3, #0
}
 800cd38:	4618      	mov	r0, r3
 800cd3a:	370c      	adds	r7, #12
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd42:	4770      	bx	lr

0800cd44 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800cd44:	b480      	push	{r7}
 800cd46:	b085      	sub	sp, #20
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800cd52:	b29b      	uxth	r3, r3
 800cd54:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800cd56:	68fb      	ldr	r3, [r7, #12]
}
 800cd58:	4618      	mov	r0, r3
 800cd5a:	3714      	adds	r7, #20
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd62:	4770      	bx	lr

0800cd64 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800cd64:	b480      	push	{r7}
 800cd66:	b08b      	sub	sp, #44	@ 0x2c
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	60f8      	str	r0, [r7, #12]
 800cd6c:	60b9      	str	r1, [r7, #8]
 800cd6e:	4611      	mov	r1, r2
 800cd70:	461a      	mov	r2, r3
 800cd72:	460b      	mov	r3, r1
 800cd74:	80fb      	strh	r3, [r7, #6]
 800cd76:	4613      	mov	r3, r2
 800cd78:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800cd7a:	88bb      	ldrh	r3, [r7, #4]
 800cd7c:	3301      	adds	r3, #1
 800cd7e:	085b      	lsrs	r3, r3, #1
 800cd80:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800cd86:	68bb      	ldr	r3, [r7, #8]
 800cd88:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800cd8a:	88fa      	ldrh	r2, [r7, #6]
 800cd8c:	697b      	ldr	r3, [r7, #20]
 800cd8e:	4413      	add	r3, r2
 800cd90:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800cd94:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800cd96:	69bb      	ldr	r3, [r7, #24]
 800cd98:	627b      	str	r3, [r7, #36]	@ 0x24
 800cd9a:	e01b      	b.n	800cdd4 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800cd9c:	69fb      	ldr	r3, [r7, #28]
 800cd9e:	781b      	ldrb	r3, [r3, #0]
 800cda0:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800cda2:	69fb      	ldr	r3, [r7, #28]
 800cda4:	3301      	adds	r3, #1
 800cda6:	781b      	ldrb	r3, [r3, #0]
 800cda8:	021b      	lsls	r3, r3, #8
 800cdaa:	b21a      	sxth	r2, r3
 800cdac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cdb0:	4313      	orrs	r3, r2
 800cdb2:	b21b      	sxth	r3, r3
 800cdb4:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800cdb6:	6a3b      	ldr	r3, [r7, #32]
 800cdb8:	8a7a      	ldrh	r2, [r7, #18]
 800cdba:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800cdbc:	6a3b      	ldr	r3, [r7, #32]
 800cdbe:	3302      	adds	r3, #2
 800cdc0:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800cdc2:	69fb      	ldr	r3, [r7, #28]
 800cdc4:	3301      	adds	r3, #1
 800cdc6:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800cdc8:	69fb      	ldr	r3, [r7, #28]
 800cdca:	3301      	adds	r3, #1
 800cdcc:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800cdce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdd0:	3b01      	subs	r3, #1
 800cdd2:	627b      	str	r3, [r7, #36]	@ 0x24
 800cdd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d1e0      	bne.n	800cd9c <USB_WritePMA+0x38>
  }
}
 800cdda:	bf00      	nop
 800cddc:	bf00      	nop
 800cdde:	372c      	adds	r7, #44	@ 0x2c
 800cde0:	46bd      	mov	sp, r7
 800cde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde6:	4770      	bx	lr

0800cde8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800cde8:	b480      	push	{r7}
 800cdea:	b08b      	sub	sp, #44	@ 0x2c
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	60f8      	str	r0, [r7, #12]
 800cdf0:	60b9      	str	r1, [r7, #8]
 800cdf2:	4611      	mov	r1, r2
 800cdf4:	461a      	mov	r2, r3
 800cdf6:	460b      	mov	r3, r1
 800cdf8:	80fb      	strh	r3, [r7, #6]
 800cdfa:	4613      	mov	r3, r2
 800cdfc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800cdfe:	88bb      	ldrh	r3, [r7, #4]
 800ce00:	085b      	lsrs	r3, r3, #1
 800ce02:	b29b      	uxth	r3, r3
 800ce04:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ce0a:	68bb      	ldr	r3, [r7, #8]
 800ce0c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ce0e:	88fa      	ldrh	r2, [r7, #6]
 800ce10:	697b      	ldr	r3, [r7, #20]
 800ce12:	4413      	add	r3, r2
 800ce14:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ce18:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ce1a:	69bb      	ldr	r3, [r7, #24]
 800ce1c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ce1e:	e018      	b.n	800ce52 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800ce20:	6a3b      	ldr	r3, [r7, #32]
 800ce22:	881b      	ldrh	r3, [r3, #0]
 800ce24:	b29b      	uxth	r3, r3
 800ce26:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800ce28:	6a3b      	ldr	r3, [r7, #32]
 800ce2a:	3302      	adds	r3, #2
 800ce2c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ce2e:	693b      	ldr	r3, [r7, #16]
 800ce30:	b2da      	uxtb	r2, r3
 800ce32:	69fb      	ldr	r3, [r7, #28]
 800ce34:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ce36:	69fb      	ldr	r3, [r7, #28]
 800ce38:	3301      	adds	r3, #1
 800ce3a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800ce3c:	693b      	ldr	r3, [r7, #16]
 800ce3e:	0a1b      	lsrs	r3, r3, #8
 800ce40:	b2da      	uxtb	r2, r3
 800ce42:	69fb      	ldr	r3, [r7, #28]
 800ce44:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ce46:	69fb      	ldr	r3, [r7, #28]
 800ce48:	3301      	adds	r3, #1
 800ce4a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800ce4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce4e:	3b01      	subs	r3, #1
 800ce50:	627b      	str	r3, [r7, #36]	@ 0x24
 800ce52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d1e3      	bne.n	800ce20 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800ce58:	88bb      	ldrh	r3, [r7, #4]
 800ce5a:	f003 0301 	and.w	r3, r3, #1
 800ce5e:	b29b      	uxth	r3, r3
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d007      	beq.n	800ce74 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800ce64:	6a3b      	ldr	r3, [r7, #32]
 800ce66:	881b      	ldrh	r3, [r3, #0]
 800ce68:	b29b      	uxth	r3, r3
 800ce6a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ce6c:	693b      	ldr	r3, [r7, #16]
 800ce6e:	b2da      	uxtb	r2, r3
 800ce70:	69fb      	ldr	r3, [r7, #28]
 800ce72:	701a      	strb	r2, [r3, #0]
  }
}
 800ce74:	bf00      	nop
 800ce76:	372c      	adds	r7, #44	@ 0x2c
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7e:	4770      	bx	lr

0800ce80 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b084      	sub	sp, #16
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]
 800ce88:	460b      	mov	r3, r1
 800ce8a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ce8c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800ce90:	f002 f8fa 	bl	800f088 <USBD_static_malloc>
 800ce94:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d105      	bne.n	800cea8 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2200      	movs	r2, #0
 800cea0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800cea4:	2302      	movs	r3, #2
 800cea6:	e066      	b.n	800cf76 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	68fa      	ldr	r2, [r7, #12]
 800ceac:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	7c1b      	ldrb	r3, [r3, #16]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d119      	bne.n	800ceec <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ceb8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cebc:	2202      	movs	r2, #2
 800cebe:	2181      	movs	r1, #129	@ 0x81
 800cec0:	6878      	ldr	r0, [r7, #4]
 800cec2:	f001 ff88 	bl	800edd6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	2201      	movs	r2, #1
 800ceca:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800cecc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ced0:	2202      	movs	r2, #2
 800ced2:	2101      	movs	r1, #1
 800ced4:	6878      	ldr	r0, [r7, #4]
 800ced6:	f001 ff7e 	bl	800edd6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	2201      	movs	r2, #1
 800cede:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	2210      	movs	r2, #16
 800cee6:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800ceea:	e016      	b.n	800cf1a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ceec:	2340      	movs	r3, #64	@ 0x40
 800ceee:	2202      	movs	r2, #2
 800cef0:	2181      	movs	r1, #129	@ 0x81
 800cef2:	6878      	ldr	r0, [r7, #4]
 800cef4:	f001 ff6f 	bl	800edd6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	2201      	movs	r2, #1
 800cefc:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800cefe:	2340      	movs	r3, #64	@ 0x40
 800cf00:	2202      	movs	r2, #2
 800cf02:	2101      	movs	r1, #1
 800cf04:	6878      	ldr	r0, [r7, #4]
 800cf06:	f001 ff66 	bl	800edd6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	2201      	movs	r2, #1
 800cf0e:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	2210      	movs	r2, #16
 800cf16:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800cf1a:	2308      	movs	r3, #8
 800cf1c:	2203      	movs	r2, #3
 800cf1e:	2182      	movs	r1, #130	@ 0x82
 800cf20:	6878      	ldr	r0, [r7, #4]
 800cf22:	f001 ff58 	bl	800edd6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	2201      	movs	r2, #1
 800cf2a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	2200      	movs	r2, #0
 800cf44:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	7c1b      	ldrb	r3, [r3, #16]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d109      	bne.n	800cf64 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800cf56:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cf5a:	2101      	movs	r1, #1
 800cf5c:	6878      	ldr	r0, [r7, #4]
 800cf5e:	f002 f829 	bl	800efb4 <USBD_LL_PrepareReceive>
 800cf62:	e007      	b.n	800cf74 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800cf6a:	2340      	movs	r3, #64	@ 0x40
 800cf6c:	2101      	movs	r1, #1
 800cf6e:	6878      	ldr	r0, [r7, #4]
 800cf70:	f002 f820 	bl	800efb4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800cf74:	2300      	movs	r3, #0
}
 800cf76:	4618      	mov	r0, r3
 800cf78:	3710      	adds	r7, #16
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	bd80      	pop	{r7, pc}

0800cf7e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cf7e:	b580      	push	{r7, lr}
 800cf80:	b082      	sub	sp, #8
 800cf82:	af00      	add	r7, sp, #0
 800cf84:	6078      	str	r0, [r7, #4]
 800cf86:	460b      	mov	r3, r1
 800cf88:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800cf8a:	2181      	movs	r1, #129	@ 0x81
 800cf8c:	6878      	ldr	r0, [r7, #4]
 800cf8e:	f001 ff48 	bl	800ee22 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	2200      	movs	r2, #0
 800cf96:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800cf98:	2101      	movs	r1, #1
 800cf9a:	6878      	ldr	r0, [r7, #4]
 800cf9c:	f001 ff41 	bl	800ee22 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800cfa8:	2182      	movs	r1, #130	@ 0x82
 800cfaa:	6878      	ldr	r0, [r7, #4]
 800cfac:	f001 ff39 	bl	800ee22 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	2200      	movs	r2, #0
 800cfbc:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d00e      	beq.n	800cfe8 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800cfd0:	685b      	ldr	r3, [r3, #4]
 800cfd2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800cfda:	4618      	mov	r0, r3
 800cfdc:	f002 f862 	bl	800f0a4 <USBD_static_free>
    pdev->pClassData = NULL;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800cfe8:	2300      	movs	r3, #0
}
 800cfea:	4618      	mov	r0, r3
 800cfec:	3708      	adds	r7, #8
 800cfee:	46bd      	mov	sp, r7
 800cff0:	bd80      	pop	{r7, pc}
	...

0800cff4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800cff4:	b580      	push	{r7, lr}
 800cff6:	b086      	sub	sp, #24
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
 800cffc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d004:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d006:	2300      	movs	r3, #0
 800d008:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d00a:	2300      	movs	r3, #0
 800d00c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d00e:	2300      	movs	r3, #0
 800d010:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d012:	693b      	ldr	r3, [r7, #16]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d101      	bne.n	800d01c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800d018:	2303      	movs	r3, #3
 800d01a:	e0af      	b.n	800d17c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d01c:	683b      	ldr	r3, [r7, #0]
 800d01e:	781b      	ldrb	r3, [r3, #0]
 800d020:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d024:	2b00      	cmp	r3, #0
 800d026:	d03f      	beq.n	800d0a8 <USBD_CDC_Setup+0xb4>
 800d028:	2b20      	cmp	r3, #32
 800d02a:	f040 809f 	bne.w	800d16c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d02e:	683b      	ldr	r3, [r7, #0]
 800d030:	88db      	ldrh	r3, [r3, #6]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d02e      	beq.n	800d094 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d036:	683b      	ldr	r3, [r7, #0]
 800d038:	781b      	ldrb	r3, [r3, #0]
 800d03a:	b25b      	sxtb	r3, r3
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	da16      	bge.n	800d06e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d046:	689b      	ldr	r3, [r3, #8]
 800d048:	683a      	ldr	r2, [r7, #0]
 800d04a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800d04c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d04e:	683a      	ldr	r2, [r7, #0]
 800d050:	88d2      	ldrh	r2, [r2, #6]
 800d052:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d054:	683b      	ldr	r3, [r7, #0]
 800d056:	88db      	ldrh	r3, [r3, #6]
 800d058:	2b07      	cmp	r3, #7
 800d05a:	bf28      	it	cs
 800d05c:	2307      	movcs	r3, #7
 800d05e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d060:	693b      	ldr	r3, [r7, #16]
 800d062:	89fa      	ldrh	r2, [r7, #14]
 800d064:	4619      	mov	r1, r3
 800d066:	6878      	ldr	r0, [r7, #4]
 800d068:	f001 facd 	bl	800e606 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800d06c:	e085      	b.n	800d17a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800d06e:	683b      	ldr	r3, [r7, #0]
 800d070:	785a      	ldrb	r2, [r3, #1]
 800d072:	693b      	ldr	r3, [r7, #16]
 800d074:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800d078:	683b      	ldr	r3, [r7, #0]
 800d07a:	88db      	ldrh	r3, [r3, #6]
 800d07c:	b2da      	uxtb	r2, r3
 800d07e:	693b      	ldr	r3, [r7, #16]
 800d080:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800d084:	6939      	ldr	r1, [r7, #16]
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	88db      	ldrh	r3, [r3, #6]
 800d08a:	461a      	mov	r2, r3
 800d08c:	6878      	ldr	r0, [r7, #4]
 800d08e:	f001 fae6 	bl	800e65e <USBD_CtlPrepareRx>
      break;
 800d092:	e072      	b.n	800d17a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d09a:	689b      	ldr	r3, [r3, #8]
 800d09c:	683a      	ldr	r2, [r7, #0]
 800d09e:	7850      	ldrb	r0, [r2, #1]
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	6839      	ldr	r1, [r7, #0]
 800d0a4:	4798      	blx	r3
      break;
 800d0a6:	e068      	b.n	800d17a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	785b      	ldrb	r3, [r3, #1]
 800d0ac:	2b0b      	cmp	r3, #11
 800d0ae:	d852      	bhi.n	800d156 <USBD_CDC_Setup+0x162>
 800d0b0:	a201      	add	r2, pc, #4	@ (adr r2, 800d0b8 <USBD_CDC_Setup+0xc4>)
 800d0b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0b6:	bf00      	nop
 800d0b8:	0800d0e9 	.word	0x0800d0e9
 800d0bc:	0800d165 	.word	0x0800d165
 800d0c0:	0800d157 	.word	0x0800d157
 800d0c4:	0800d157 	.word	0x0800d157
 800d0c8:	0800d157 	.word	0x0800d157
 800d0cc:	0800d157 	.word	0x0800d157
 800d0d0:	0800d157 	.word	0x0800d157
 800d0d4:	0800d157 	.word	0x0800d157
 800d0d8:	0800d157 	.word	0x0800d157
 800d0dc:	0800d157 	.word	0x0800d157
 800d0e0:	0800d113 	.word	0x0800d113
 800d0e4:	0800d13d 	.word	0x0800d13d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d0ee:	b2db      	uxtb	r3, r3
 800d0f0:	2b03      	cmp	r3, #3
 800d0f2:	d107      	bne.n	800d104 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d0f4:	f107 030a 	add.w	r3, r7, #10
 800d0f8:	2202      	movs	r2, #2
 800d0fa:	4619      	mov	r1, r3
 800d0fc:	6878      	ldr	r0, [r7, #4]
 800d0fe:	f001 fa82 	bl	800e606 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d102:	e032      	b.n	800d16a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800d104:	6839      	ldr	r1, [r7, #0]
 800d106:	6878      	ldr	r0, [r7, #4]
 800d108:	f001 fa0c 	bl	800e524 <USBD_CtlError>
            ret = USBD_FAIL;
 800d10c:	2303      	movs	r3, #3
 800d10e:	75fb      	strb	r3, [r7, #23]
          break;
 800d110:	e02b      	b.n	800d16a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d118:	b2db      	uxtb	r3, r3
 800d11a:	2b03      	cmp	r3, #3
 800d11c:	d107      	bne.n	800d12e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d11e:	f107 030d 	add.w	r3, r7, #13
 800d122:	2201      	movs	r2, #1
 800d124:	4619      	mov	r1, r3
 800d126:	6878      	ldr	r0, [r7, #4]
 800d128:	f001 fa6d 	bl	800e606 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d12c:	e01d      	b.n	800d16a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800d12e:	6839      	ldr	r1, [r7, #0]
 800d130:	6878      	ldr	r0, [r7, #4]
 800d132:	f001 f9f7 	bl	800e524 <USBD_CtlError>
            ret = USBD_FAIL;
 800d136:	2303      	movs	r3, #3
 800d138:	75fb      	strb	r3, [r7, #23]
          break;
 800d13a:	e016      	b.n	800d16a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d142:	b2db      	uxtb	r3, r3
 800d144:	2b03      	cmp	r3, #3
 800d146:	d00f      	beq.n	800d168 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800d148:	6839      	ldr	r1, [r7, #0]
 800d14a:	6878      	ldr	r0, [r7, #4]
 800d14c:	f001 f9ea 	bl	800e524 <USBD_CtlError>
            ret = USBD_FAIL;
 800d150:	2303      	movs	r3, #3
 800d152:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d154:	e008      	b.n	800d168 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d156:	6839      	ldr	r1, [r7, #0]
 800d158:	6878      	ldr	r0, [r7, #4]
 800d15a:	f001 f9e3 	bl	800e524 <USBD_CtlError>
          ret = USBD_FAIL;
 800d15e:	2303      	movs	r3, #3
 800d160:	75fb      	strb	r3, [r7, #23]
          break;
 800d162:	e002      	b.n	800d16a <USBD_CDC_Setup+0x176>
          break;
 800d164:	bf00      	nop
 800d166:	e008      	b.n	800d17a <USBD_CDC_Setup+0x186>
          break;
 800d168:	bf00      	nop
      }
      break;
 800d16a:	e006      	b.n	800d17a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800d16c:	6839      	ldr	r1, [r7, #0]
 800d16e:	6878      	ldr	r0, [r7, #4]
 800d170:	f001 f9d8 	bl	800e524 <USBD_CtlError>
      ret = USBD_FAIL;
 800d174:	2303      	movs	r3, #3
 800d176:	75fb      	strb	r3, [r7, #23]
      break;
 800d178:	bf00      	nop
  }

  return (uint8_t)ret;
 800d17a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d17c:	4618      	mov	r0, r3
 800d17e:	3718      	adds	r7, #24
 800d180:	46bd      	mov	sp, r7
 800d182:	bd80      	pop	{r7, pc}

0800d184 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d184:	b580      	push	{r7, lr}
 800d186:	b084      	sub	sp, #16
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
 800d18c:	460b      	mov	r3, r1
 800d18e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d196:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d101      	bne.n	800d1a6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d1a2:	2303      	movs	r3, #3
 800d1a4:	e04f      	b.n	800d246 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d1ac:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d1ae:	78fa      	ldrb	r2, [r7, #3]
 800d1b0:	6879      	ldr	r1, [r7, #4]
 800d1b2:	4613      	mov	r3, r2
 800d1b4:	009b      	lsls	r3, r3, #2
 800d1b6:	4413      	add	r3, r2
 800d1b8:	009b      	lsls	r3, r3, #2
 800d1ba:	440b      	add	r3, r1
 800d1bc:	3318      	adds	r3, #24
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d029      	beq.n	800d218 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800d1c4:	78fa      	ldrb	r2, [r7, #3]
 800d1c6:	6879      	ldr	r1, [r7, #4]
 800d1c8:	4613      	mov	r3, r2
 800d1ca:	009b      	lsls	r3, r3, #2
 800d1cc:	4413      	add	r3, r2
 800d1ce:	009b      	lsls	r3, r3, #2
 800d1d0:	440b      	add	r3, r1
 800d1d2:	3318      	adds	r3, #24
 800d1d4:	681a      	ldr	r2, [r3, #0]
 800d1d6:	78f9      	ldrb	r1, [r7, #3]
 800d1d8:	68f8      	ldr	r0, [r7, #12]
 800d1da:	460b      	mov	r3, r1
 800d1dc:	009b      	lsls	r3, r3, #2
 800d1de:	440b      	add	r3, r1
 800d1e0:	00db      	lsls	r3, r3, #3
 800d1e2:	4403      	add	r3, r0
 800d1e4:	3320      	adds	r3, #32
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	fbb2 f1f3 	udiv	r1, r2, r3
 800d1ec:	fb01 f303 	mul.w	r3, r1, r3
 800d1f0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d110      	bne.n	800d218 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800d1f6:	78fa      	ldrb	r2, [r7, #3]
 800d1f8:	6879      	ldr	r1, [r7, #4]
 800d1fa:	4613      	mov	r3, r2
 800d1fc:	009b      	lsls	r3, r3, #2
 800d1fe:	4413      	add	r3, r2
 800d200:	009b      	lsls	r3, r3, #2
 800d202:	440b      	add	r3, r1
 800d204:	3318      	adds	r3, #24
 800d206:	2200      	movs	r2, #0
 800d208:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d20a:	78f9      	ldrb	r1, [r7, #3]
 800d20c:	2300      	movs	r3, #0
 800d20e:	2200      	movs	r2, #0
 800d210:	6878      	ldr	r0, [r7, #4]
 800d212:	f001 feae 	bl	800ef72 <USBD_LL_Transmit>
 800d216:	e015      	b.n	800d244 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800d218:	68bb      	ldr	r3, [r7, #8]
 800d21a:	2200      	movs	r2, #0
 800d21c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d226:	691b      	ldr	r3, [r3, #16]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d00b      	beq.n	800d244 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d232:	691b      	ldr	r3, [r3, #16]
 800d234:	68ba      	ldr	r2, [r7, #8]
 800d236:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800d23a:	68ba      	ldr	r2, [r7, #8]
 800d23c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800d240:	78fa      	ldrb	r2, [r7, #3]
 800d242:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d244:	2300      	movs	r3, #0
}
 800d246:	4618      	mov	r0, r3
 800d248:	3710      	adds	r7, #16
 800d24a:	46bd      	mov	sp, r7
 800d24c:	bd80      	pop	{r7, pc}

0800d24e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d24e:	b580      	push	{r7, lr}
 800d250:	b084      	sub	sp, #16
 800d252:	af00      	add	r7, sp, #0
 800d254:	6078      	str	r0, [r7, #4]
 800d256:	460b      	mov	r3, r1
 800d258:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d260:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d101      	bne.n	800d270 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d26c:	2303      	movs	r3, #3
 800d26e:	e015      	b.n	800d29c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d270:	78fb      	ldrb	r3, [r7, #3]
 800d272:	4619      	mov	r1, r3
 800d274:	6878      	ldr	r0, [r7, #4]
 800d276:	f001 febe 	bl	800eff6 <USBD_LL_GetRxDataSize>
 800d27a:	4602      	mov	r2, r0
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d288:	68db      	ldr	r3, [r3, #12]
 800d28a:	68fa      	ldr	r2, [r7, #12]
 800d28c:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800d290:	68fa      	ldr	r2, [r7, #12]
 800d292:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800d296:	4611      	mov	r1, r2
 800d298:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d29a:	2300      	movs	r3, #0
}
 800d29c:	4618      	mov	r0, r3
 800d29e:	3710      	adds	r7, #16
 800d2a0:	46bd      	mov	sp, r7
 800d2a2:	bd80      	pop	{r7, pc}

0800d2a4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b084      	sub	sp, #16
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d2b2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d101      	bne.n	800d2be <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800d2ba:	2303      	movs	r3, #3
 800d2bc:	e01a      	b.n	800d2f4 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d014      	beq.n	800d2f2 <USBD_CDC_EP0_RxReady+0x4e>
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800d2ce:	2bff      	cmp	r3, #255	@ 0xff
 800d2d0:	d00f      	beq.n	800d2f2 <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800d2d8:	689b      	ldr	r3, [r3, #8]
 800d2da:	68fa      	ldr	r2, [r7, #12]
 800d2dc:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800d2e0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800d2e2:	68fa      	ldr	r2, [r7, #12]
 800d2e4:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d2e8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	22ff      	movs	r2, #255	@ 0xff
 800d2ee:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800d2f2:	2300      	movs	r3, #0
}
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	3710      	adds	r7, #16
 800d2f8:	46bd      	mov	sp, r7
 800d2fa:	bd80      	pop	{r7, pc}

0800d2fc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d2fc:	b480      	push	{r7}
 800d2fe:	b083      	sub	sp, #12
 800d300:	af00      	add	r7, sp, #0
 800d302:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	2243      	movs	r2, #67	@ 0x43
 800d308:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800d30a:	4b03      	ldr	r3, [pc, #12]	@ (800d318 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800d30c:	4618      	mov	r0, r3
 800d30e:	370c      	adds	r7, #12
 800d310:	46bd      	mov	sp, r7
 800d312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d316:	4770      	bx	lr
 800d318:	20000094 	.word	0x20000094

0800d31c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d31c:	b480      	push	{r7}
 800d31e:	b083      	sub	sp, #12
 800d320:	af00      	add	r7, sp, #0
 800d322:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	2243      	movs	r2, #67	@ 0x43
 800d328:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800d32a:	4b03      	ldr	r3, [pc, #12]	@ (800d338 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800d32c:	4618      	mov	r0, r3
 800d32e:	370c      	adds	r7, #12
 800d330:	46bd      	mov	sp, r7
 800d332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d336:	4770      	bx	lr
 800d338:	20000050 	.word	0x20000050

0800d33c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d33c:	b480      	push	{r7}
 800d33e:	b083      	sub	sp, #12
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	2243      	movs	r2, #67	@ 0x43
 800d348:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800d34a:	4b03      	ldr	r3, [pc, #12]	@ (800d358 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800d34c:	4618      	mov	r0, r3
 800d34e:	370c      	adds	r7, #12
 800d350:	46bd      	mov	sp, r7
 800d352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d356:	4770      	bx	lr
 800d358:	200000d8 	.word	0x200000d8

0800d35c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d35c:	b480      	push	{r7}
 800d35e:	b083      	sub	sp, #12
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	220a      	movs	r2, #10
 800d368:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d36a:	4b03      	ldr	r3, [pc, #12]	@ (800d378 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d36c:	4618      	mov	r0, r3
 800d36e:	370c      	adds	r7, #12
 800d370:	46bd      	mov	sp, r7
 800d372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d376:	4770      	bx	lr
 800d378:	2000000c 	.word	0x2000000c

0800d37c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d37c:	b480      	push	{r7}
 800d37e:	b083      	sub	sp, #12
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
 800d384:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d386:	683b      	ldr	r3, [r7, #0]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d101      	bne.n	800d390 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d38c:	2303      	movs	r3, #3
 800d38e:	e004      	b.n	800d39a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	683a      	ldr	r2, [r7, #0]
 800d394:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800d398:	2300      	movs	r3, #0
}
 800d39a:	4618      	mov	r0, r3
 800d39c:	370c      	adds	r7, #12
 800d39e:	46bd      	mov	sp, r7
 800d3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a4:	4770      	bx	lr

0800d3a6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d3a6:	b480      	push	{r7}
 800d3a8:	b087      	sub	sp, #28
 800d3aa:	af00      	add	r7, sp, #0
 800d3ac:	60f8      	str	r0, [r7, #12]
 800d3ae:	60b9      	str	r1, [r7, #8]
 800d3b0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d3b8:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800d3ba:	697b      	ldr	r3, [r7, #20]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d101      	bne.n	800d3c4 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800d3c0:	2303      	movs	r3, #3
 800d3c2:	e008      	b.n	800d3d6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800d3c4:	697b      	ldr	r3, [r7, #20]
 800d3c6:	68ba      	ldr	r2, [r7, #8]
 800d3c8:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800d3cc:	697b      	ldr	r3, [r7, #20]
 800d3ce:	687a      	ldr	r2, [r7, #4]
 800d3d0:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800d3d4:	2300      	movs	r3, #0
}
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	371c      	adds	r7, #28
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e0:	4770      	bx	lr

0800d3e2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d3e2:	b480      	push	{r7}
 800d3e4:	b085      	sub	sp, #20
 800d3e6:	af00      	add	r7, sp, #0
 800d3e8:	6078      	str	r0, [r7, #4]
 800d3ea:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d3f2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d101      	bne.n	800d3fe <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800d3fa:	2303      	movs	r3, #3
 800d3fc:	e004      	b.n	800d408 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	683a      	ldr	r2, [r7, #0]
 800d402:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800d406:	2300      	movs	r3, #0
}
 800d408:	4618      	mov	r0, r3
 800d40a:	3714      	adds	r7, #20
 800d40c:	46bd      	mov	sp, r7
 800d40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d412:	4770      	bx	lr

0800d414 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d414:	b580      	push	{r7, lr}
 800d416:	b084      	sub	sp, #16
 800d418:	af00      	add	r7, sp, #0
 800d41a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d422:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800d424:	2301      	movs	r3, #1
 800d426:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d101      	bne.n	800d436 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d432:	2303      	movs	r3, #3
 800d434:	e01a      	b.n	800d46c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800d436:	68bb      	ldr	r3, [r7, #8]
 800d438:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d114      	bne.n	800d46a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800d440:	68bb      	ldr	r3, [r7, #8]
 800d442:	2201      	movs	r2, #1
 800d444:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800d448:	68bb      	ldr	r3, [r7, #8]
 800d44a:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800d452:	68bb      	ldr	r3, [r7, #8]
 800d454:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800d458:	68bb      	ldr	r3, [r7, #8]
 800d45a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800d45e:	2181      	movs	r1, #129	@ 0x81
 800d460:	6878      	ldr	r0, [r7, #4]
 800d462:	f001 fd86 	bl	800ef72 <USBD_LL_Transmit>

    ret = USBD_OK;
 800d466:	2300      	movs	r3, #0
 800d468:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800d46a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d46c:	4618      	mov	r0, r3
 800d46e:	3710      	adds	r7, #16
 800d470:	46bd      	mov	sp, r7
 800d472:	bd80      	pop	{r7, pc}

0800d474 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d474:	b580      	push	{r7, lr}
 800d476:	b084      	sub	sp, #16
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d482:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d101      	bne.n	800d492 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800d48e:	2303      	movs	r3, #3
 800d490:	e016      	b.n	800d4c0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	7c1b      	ldrb	r3, [r3, #16]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d109      	bne.n	800d4ae <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d4a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d4a4:	2101      	movs	r1, #1
 800d4a6:	6878      	ldr	r0, [r7, #4]
 800d4a8:	f001 fd84 	bl	800efb4 <USBD_LL_PrepareReceive>
 800d4ac:	e007      	b.n	800d4be <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d4b4:	2340      	movs	r3, #64	@ 0x40
 800d4b6:	2101      	movs	r1, #1
 800d4b8:	6878      	ldr	r0, [r7, #4]
 800d4ba:	f001 fd7b 	bl	800efb4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d4be:	2300      	movs	r3, #0
}
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	3710      	adds	r7, #16
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	bd80      	pop	{r7, pc}

0800d4c8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d4c8:	b580      	push	{r7, lr}
 800d4ca:	b086      	sub	sp, #24
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	60f8      	str	r0, [r7, #12]
 800d4d0:	60b9      	str	r1, [r7, #8]
 800d4d2:	4613      	mov	r3, r2
 800d4d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d101      	bne.n	800d4e0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800d4dc:	2303      	movs	r3, #3
 800d4de:	e01f      	b.n	800d520 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	2200      	movs	r2, #0
 800d4ec:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d4f8:	68bb      	ldr	r3, [r7, #8]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d003      	beq.n	800d506 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	68ba      	ldr	r2, [r7, #8]
 800d502:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	2201      	movs	r2, #1
 800d50a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	79fa      	ldrb	r2, [r7, #7]
 800d512:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d514:	68f8      	ldr	r0, [r7, #12]
 800d516:	f001 fbe3 	bl	800ece0 <USBD_LL_Init>
 800d51a:	4603      	mov	r3, r0
 800d51c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d51e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d520:	4618      	mov	r0, r3
 800d522:	3718      	adds	r7, #24
 800d524:	46bd      	mov	sp, r7
 800d526:	bd80      	pop	{r7, pc}

0800d528 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b084      	sub	sp, #16
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
 800d530:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d532:	2300      	movs	r3, #0
 800d534:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d536:	683b      	ldr	r3, [r7, #0]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d101      	bne.n	800d540 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800d53c:	2303      	movs	r3, #3
 800d53e:	e016      	b.n	800d56e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	683a      	ldr	r2, [r7, #0]
 800d544:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d54e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d550:	2b00      	cmp	r3, #0
 800d552:	d00b      	beq.n	800d56c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d55a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d55c:	f107 020e 	add.w	r2, r7, #14
 800d560:	4610      	mov	r0, r2
 800d562:	4798      	blx	r3
 800d564:	4602      	mov	r2, r0
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800d56c:	2300      	movs	r3, #0
}
 800d56e:	4618      	mov	r0, r3
 800d570:	3710      	adds	r7, #16
 800d572:	46bd      	mov	sp, r7
 800d574:	bd80      	pop	{r7, pc}

0800d576 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d576:	b580      	push	{r7, lr}
 800d578:	b082      	sub	sp, #8
 800d57a:	af00      	add	r7, sp, #0
 800d57c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d57e:	6878      	ldr	r0, [r7, #4]
 800d580:	f001 fc0e 	bl	800eda0 <USBD_LL_Start>
 800d584:	4603      	mov	r3, r0
}
 800d586:	4618      	mov	r0, r3
 800d588:	3708      	adds	r7, #8
 800d58a:	46bd      	mov	sp, r7
 800d58c:	bd80      	pop	{r7, pc}

0800d58e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800d58e:	b480      	push	{r7}
 800d590:	b083      	sub	sp, #12
 800d592:	af00      	add	r7, sp, #0
 800d594:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d596:	2300      	movs	r3, #0
}
 800d598:	4618      	mov	r0, r3
 800d59a:	370c      	adds	r7, #12
 800d59c:	46bd      	mov	sp, r7
 800d59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a2:	4770      	bx	lr

0800d5a4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d5a4:	b580      	push	{r7, lr}
 800d5a6:	b084      	sub	sp, #16
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]
 800d5ac:	460b      	mov	r3, r1
 800d5ae:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800d5b0:	2303      	movs	r3, #3
 800d5b2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d009      	beq.n	800d5d2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	78fa      	ldrb	r2, [r7, #3]
 800d5c8:	4611      	mov	r1, r2
 800d5ca:	6878      	ldr	r0, [r7, #4]
 800d5cc:	4798      	blx	r3
 800d5ce:	4603      	mov	r3, r0
 800d5d0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800d5d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	3710      	adds	r7, #16
 800d5d8:	46bd      	mov	sp, r7
 800d5da:	bd80      	pop	{r7, pc}

0800d5dc <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	b082      	sub	sp, #8
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	6078      	str	r0, [r7, #4]
 800d5e4:	460b      	mov	r3, r1
 800d5e6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d007      	beq.n	800d602 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d5f8:	685b      	ldr	r3, [r3, #4]
 800d5fa:	78fa      	ldrb	r2, [r7, #3]
 800d5fc:	4611      	mov	r1, r2
 800d5fe:	6878      	ldr	r0, [r7, #4]
 800d600:	4798      	blx	r3
  }

  return USBD_OK;
 800d602:	2300      	movs	r3, #0
}
 800d604:	4618      	mov	r0, r3
 800d606:	3708      	adds	r7, #8
 800d608:	46bd      	mov	sp, r7
 800d60a:	bd80      	pop	{r7, pc}

0800d60c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b084      	sub	sp, #16
 800d610:	af00      	add	r7, sp, #0
 800d612:	6078      	str	r0, [r7, #4]
 800d614:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d61c:	6839      	ldr	r1, [r7, #0]
 800d61e:	4618      	mov	r0, r3
 800d620:	f000 ff46 	bl	800e4b0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	2201      	movs	r2, #1
 800d628:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800d632:	461a      	mov	r2, r3
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d640:	f003 031f 	and.w	r3, r3, #31
 800d644:	2b02      	cmp	r3, #2
 800d646:	d01a      	beq.n	800d67e <USBD_LL_SetupStage+0x72>
 800d648:	2b02      	cmp	r3, #2
 800d64a:	d822      	bhi.n	800d692 <USBD_LL_SetupStage+0x86>
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d002      	beq.n	800d656 <USBD_LL_SetupStage+0x4a>
 800d650:	2b01      	cmp	r3, #1
 800d652:	d00a      	beq.n	800d66a <USBD_LL_SetupStage+0x5e>
 800d654:	e01d      	b.n	800d692 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d65c:	4619      	mov	r1, r3
 800d65e:	6878      	ldr	r0, [r7, #4]
 800d660:	f000 f9ee 	bl	800da40 <USBD_StdDevReq>
 800d664:	4603      	mov	r3, r0
 800d666:	73fb      	strb	r3, [r7, #15]
      break;
 800d668:	e020      	b.n	800d6ac <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d670:	4619      	mov	r1, r3
 800d672:	6878      	ldr	r0, [r7, #4]
 800d674:	f000 fa52 	bl	800db1c <USBD_StdItfReq>
 800d678:	4603      	mov	r3, r0
 800d67a:	73fb      	strb	r3, [r7, #15]
      break;
 800d67c:	e016      	b.n	800d6ac <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d684:	4619      	mov	r1, r3
 800d686:	6878      	ldr	r0, [r7, #4]
 800d688:	f000 fa91 	bl	800dbae <USBD_StdEPReq>
 800d68c:	4603      	mov	r3, r0
 800d68e:	73fb      	strb	r3, [r7, #15]
      break;
 800d690:	e00c      	b.n	800d6ac <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d698:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800d69c:	b2db      	uxtb	r3, r3
 800d69e:	4619      	mov	r1, r3
 800d6a0:	6878      	ldr	r0, [r7, #4]
 800d6a2:	f001 fbdd 	bl	800ee60 <USBD_LL_StallEP>
 800d6a6:	4603      	mov	r3, r0
 800d6a8:	73fb      	strb	r3, [r7, #15]
      break;
 800d6aa:	bf00      	nop
  }

  return ret;
 800d6ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	3710      	adds	r7, #16
 800d6b2:	46bd      	mov	sp, r7
 800d6b4:	bd80      	pop	{r7, pc}

0800d6b6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d6b6:	b580      	push	{r7, lr}
 800d6b8:	b086      	sub	sp, #24
 800d6ba:	af00      	add	r7, sp, #0
 800d6bc:	60f8      	str	r0, [r7, #12]
 800d6be:	460b      	mov	r3, r1
 800d6c0:	607a      	str	r2, [r7, #4]
 800d6c2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d6c4:	7afb      	ldrb	r3, [r7, #11]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d138      	bne.n	800d73c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800d6d0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d6d8:	2b03      	cmp	r3, #3
 800d6da:	d14a      	bne.n	800d772 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800d6dc:	693b      	ldr	r3, [r7, #16]
 800d6de:	689a      	ldr	r2, [r3, #8]
 800d6e0:	693b      	ldr	r3, [r7, #16]
 800d6e2:	68db      	ldr	r3, [r3, #12]
 800d6e4:	429a      	cmp	r2, r3
 800d6e6:	d913      	bls.n	800d710 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d6e8:	693b      	ldr	r3, [r7, #16]
 800d6ea:	689a      	ldr	r2, [r3, #8]
 800d6ec:	693b      	ldr	r3, [r7, #16]
 800d6ee:	68db      	ldr	r3, [r3, #12]
 800d6f0:	1ad2      	subs	r2, r2, r3
 800d6f2:	693b      	ldr	r3, [r7, #16]
 800d6f4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d6f6:	693b      	ldr	r3, [r7, #16]
 800d6f8:	68da      	ldr	r2, [r3, #12]
 800d6fa:	693b      	ldr	r3, [r7, #16]
 800d6fc:	689b      	ldr	r3, [r3, #8]
 800d6fe:	4293      	cmp	r3, r2
 800d700:	bf28      	it	cs
 800d702:	4613      	movcs	r3, r2
 800d704:	461a      	mov	r2, r3
 800d706:	6879      	ldr	r1, [r7, #4]
 800d708:	68f8      	ldr	r0, [r7, #12]
 800d70a:	f000 ffc5 	bl	800e698 <USBD_CtlContinueRx>
 800d70e:	e030      	b.n	800d772 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d716:	b2db      	uxtb	r3, r3
 800d718:	2b03      	cmp	r3, #3
 800d71a:	d10b      	bne.n	800d734 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d722:	691b      	ldr	r3, [r3, #16]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d005      	beq.n	800d734 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d72e:	691b      	ldr	r3, [r3, #16]
 800d730:	68f8      	ldr	r0, [r7, #12]
 800d732:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d734:	68f8      	ldr	r0, [r7, #12]
 800d736:	f000 ffc0 	bl	800e6ba <USBD_CtlSendStatus>
 800d73a:	e01a      	b.n	800d772 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d742:	b2db      	uxtb	r3, r3
 800d744:	2b03      	cmp	r3, #3
 800d746:	d114      	bne.n	800d772 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d74e:	699b      	ldr	r3, [r3, #24]
 800d750:	2b00      	cmp	r3, #0
 800d752:	d00e      	beq.n	800d772 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d75a:	699b      	ldr	r3, [r3, #24]
 800d75c:	7afa      	ldrb	r2, [r7, #11]
 800d75e:	4611      	mov	r1, r2
 800d760:	68f8      	ldr	r0, [r7, #12]
 800d762:	4798      	blx	r3
 800d764:	4603      	mov	r3, r0
 800d766:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800d768:	7dfb      	ldrb	r3, [r7, #23]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d001      	beq.n	800d772 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800d76e:	7dfb      	ldrb	r3, [r7, #23]
 800d770:	e000      	b.n	800d774 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800d772:	2300      	movs	r3, #0
}
 800d774:	4618      	mov	r0, r3
 800d776:	3718      	adds	r7, #24
 800d778:	46bd      	mov	sp, r7
 800d77a:	bd80      	pop	{r7, pc}

0800d77c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b086      	sub	sp, #24
 800d780:	af00      	add	r7, sp, #0
 800d782:	60f8      	str	r0, [r7, #12]
 800d784:	460b      	mov	r3, r1
 800d786:	607a      	str	r2, [r7, #4]
 800d788:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d78a:	7afb      	ldrb	r3, [r7, #11]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d16b      	bne.n	800d868 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	3314      	adds	r3, #20
 800d794:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d79c:	2b02      	cmp	r3, #2
 800d79e:	d156      	bne.n	800d84e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800d7a0:	693b      	ldr	r3, [r7, #16]
 800d7a2:	689a      	ldr	r2, [r3, #8]
 800d7a4:	693b      	ldr	r3, [r7, #16]
 800d7a6:	68db      	ldr	r3, [r3, #12]
 800d7a8:	429a      	cmp	r2, r3
 800d7aa:	d914      	bls.n	800d7d6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d7ac:	693b      	ldr	r3, [r7, #16]
 800d7ae:	689a      	ldr	r2, [r3, #8]
 800d7b0:	693b      	ldr	r3, [r7, #16]
 800d7b2:	68db      	ldr	r3, [r3, #12]
 800d7b4:	1ad2      	subs	r2, r2, r3
 800d7b6:	693b      	ldr	r3, [r7, #16]
 800d7b8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d7ba:	693b      	ldr	r3, [r7, #16]
 800d7bc:	689b      	ldr	r3, [r3, #8]
 800d7be:	461a      	mov	r2, r3
 800d7c0:	6879      	ldr	r1, [r7, #4]
 800d7c2:	68f8      	ldr	r0, [r7, #12]
 800d7c4:	f000 ff3a 	bl	800e63c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	2100      	movs	r1, #0
 800d7ce:	68f8      	ldr	r0, [r7, #12]
 800d7d0:	f001 fbf0 	bl	800efb4 <USBD_LL_PrepareReceive>
 800d7d4:	e03b      	b.n	800d84e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d7d6:	693b      	ldr	r3, [r7, #16]
 800d7d8:	68da      	ldr	r2, [r3, #12]
 800d7da:	693b      	ldr	r3, [r7, #16]
 800d7dc:	689b      	ldr	r3, [r3, #8]
 800d7de:	429a      	cmp	r2, r3
 800d7e0:	d11c      	bne.n	800d81c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d7e2:	693b      	ldr	r3, [r7, #16]
 800d7e4:	685a      	ldr	r2, [r3, #4]
 800d7e6:	693b      	ldr	r3, [r7, #16]
 800d7e8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d7ea:	429a      	cmp	r2, r3
 800d7ec:	d316      	bcc.n	800d81c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d7ee:	693b      	ldr	r3, [r7, #16]
 800d7f0:	685a      	ldr	r2, [r3, #4]
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d7f8:	429a      	cmp	r2, r3
 800d7fa:	d20f      	bcs.n	800d81c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d7fc:	2200      	movs	r2, #0
 800d7fe:	2100      	movs	r1, #0
 800d800:	68f8      	ldr	r0, [r7, #12]
 800d802:	f000 ff1b 	bl	800e63c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	2200      	movs	r2, #0
 800d80a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d80e:	2300      	movs	r3, #0
 800d810:	2200      	movs	r2, #0
 800d812:	2100      	movs	r1, #0
 800d814:	68f8      	ldr	r0, [r7, #12]
 800d816:	f001 fbcd 	bl	800efb4 <USBD_LL_PrepareReceive>
 800d81a:	e018      	b.n	800d84e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d822:	b2db      	uxtb	r3, r3
 800d824:	2b03      	cmp	r3, #3
 800d826:	d10b      	bne.n	800d840 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d82e:	68db      	ldr	r3, [r3, #12]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d005      	beq.n	800d840 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d83a:	68db      	ldr	r3, [r3, #12]
 800d83c:	68f8      	ldr	r0, [r7, #12]
 800d83e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d840:	2180      	movs	r1, #128	@ 0x80
 800d842:	68f8      	ldr	r0, [r7, #12]
 800d844:	f001 fb0c 	bl	800ee60 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d848:	68f8      	ldr	r0, [r7, #12]
 800d84a:	f000 ff49 	bl	800e6e0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800d854:	2b01      	cmp	r3, #1
 800d856:	d122      	bne.n	800d89e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800d858:	68f8      	ldr	r0, [r7, #12]
 800d85a:	f7ff fe98 	bl	800d58e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	2200      	movs	r2, #0
 800d862:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800d866:	e01a      	b.n	800d89e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d86e:	b2db      	uxtb	r3, r3
 800d870:	2b03      	cmp	r3, #3
 800d872:	d114      	bne.n	800d89e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d87a:	695b      	ldr	r3, [r3, #20]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d00e      	beq.n	800d89e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d886:	695b      	ldr	r3, [r3, #20]
 800d888:	7afa      	ldrb	r2, [r7, #11]
 800d88a:	4611      	mov	r1, r2
 800d88c:	68f8      	ldr	r0, [r7, #12]
 800d88e:	4798      	blx	r3
 800d890:	4603      	mov	r3, r0
 800d892:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800d894:	7dfb      	ldrb	r3, [r7, #23]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d001      	beq.n	800d89e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800d89a:	7dfb      	ldrb	r3, [r7, #23]
 800d89c:	e000      	b.n	800d8a0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800d89e:	2300      	movs	r3, #0
}
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	3718      	adds	r7, #24
 800d8a4:	46bd      	mov	sp, r7
 800d8a6:	bd80      	pop	{r7, pc}

0800d8a8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	b082      	sub	sp, #8
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	2201      	movs	r2, #1
 800d8b4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	2200      	movs	r2, #0
 800d8bc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	2200      	movs	r2, #0
 800d8c4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	2200      	movs	r2, #0
 800d8ca:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d101      	bne.n	800d8dc <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800d8d8:	2303      	movs	r3, #3
 800d8da:	e02f      	b.n	800d93c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d00f      	beq.n	800d906 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d8ec:	685b      	ldr	r3, [r3, #4]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d009      	beq.n	800d906 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d8f8:	685b      	ldr	r3, [r3, #4]
 800d8fa:	687a      	ldr	r2, [r7, #4]
 800d8fc:	6852      	ldr	r2, [r2, #4]
 800d8fe:	b2d2      	uxtb	r2, r2
 800d900:	4611      	mov	r1, r2
 800d902:	6878      	ldr	r0, [r7, #4]
 800d904:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d906:	2340      	movs	r3, #64	@ 0x40
 800d908:	2200      	movs	r2, #0
 800d90a:	2100      	movs	r1, #0
 800d90c:	6878      	ldr	r0, [r7, #4]
 800d90e:	f001 fa62 	bl	800edd6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	2201      	movs	r2, #1
 800d916:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	2240      	movs	r2, #64	@ 0x40
 800d91e:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d922:	2340      	movs	r3, #64	@ 0x40
 800d924:	2200      	movs	r2, #0
 800d926:	2180      	movs	r1, #128	@ 0x80
 800d928:	6878      	ldr	r0, [r7, #4]
 800d92a:	f001 fa54 	bl	800edd6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	2201      	movs	r2, #1
 800d932:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	2240      	movs	r2, #64	@ 0x40
 800d938:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800d93a:	2300      	movs	r3, #0
}
 800d93c:	4618      	mov	r0, r3
 800d93e:	3708      	adds	r7, #8
 800d940:	46bd      	mov	sp, r7
 800d942:	bd80      	pop	{r7, pc}

0800d944 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d944:	b480      	push	{r7}
 800d946:	b083      	sub	sp, #12
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
 800d94c:	460b      	mov	r3, r1
 800d94e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	78fa      	ldrb	r2, [r7, #3]
 800d954:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d956:	2300      	movs	r3, #0
}
 800d958:	4618      	mov	r0, r3
 800d95a:	370c      	adds	r7, #12
 800d95c:	46bd      	mov	sp, r7
 800d95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d962:	4770      	bx	lr

0800d964 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d964:	b480      	push	{r7}
 800d966:	b083      	sub	sp, #12
 800d968:	af00      	add	r7, sp, #0
 800d96a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d972:	b2da      	uxtb	r2, r3
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	2204      	movs	r2, #4
 800d97e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800d982:	2300      	movs	r3, #0
}
 800d984:	4618      	mov	r0, r3
 800d986:	370c      	adds	r7, #12
 800d988:	46bd      	mov	sp, r7
 800d98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98e:	4770      	bx	lr

0800d990 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d990:	b480      	push	{r7}
 800d992:	b083      	sub	sp, #12
 800d994:	af00      	add	r7, sp, #0
 800d996:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d99e:	b2db      	uxtb	r3, r3
 800d9a0:	2b04      	cmp	r3, #4
 800d9a2:	d106      	bne.n	800d9b2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800d9aa:	b2da      	uxtb	r2, r3
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800d9b2:	2300      	movs	r3, #0
}
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	370c      	adds	r7, #12
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9be:	4770      	bx	lr

0800d9c0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	b082      	sub	sp, #8
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d101      	bne.n	800d9d6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800d9d2:	2303      	movs	r3, #3
 800d9d4:	e012      	b.n	800d9fc <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d9dc:	b2db      	uxtb	r3, r3
 800d9de:	2b03      	cmp	r3, #3
 800d9e0:	d10b      	bne.n	800d9fa <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d9e8:	69db      	ldr	r3, [r3, #28]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d005      	beq.n	800d9fa <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d9f4:	69db      	ldr	r3, [r3, #28]
 800d9f6:	6878      	ldr	r0, [r7, #4]
 800d9f8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d9fa:	2300      	movs	r3, #0
}
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	3708      	adds	r7, #8
 800da00:	46bd      	mov	sp, r7
 800da02:	bd80      	pop	{r7, pc}

0800da04 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800da04:	b480      	push	{r7}
 800da06:	b087      	sub	sp, #28
 800da08:	af00      	add	r7, sp, #0
 800da0a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800da10:	697b      	ldr	r3, [r7, #20]
 800da12:	781b      	ldrb	r3, [r3, #0]
 800da14:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800da16:	697b      	ldr	r3, [r7, #20]
 800da18:	3301      	adds	r3, #1
 800da1a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800da1c:	697b      	ldr	r3, [r7, #20]
 800da1e:	781b      	ldrb	r3, [r3, #0]
 800da20:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800da22:	8a3b      	ldrh	r3, [r7, #16]
 800da24:	021b      	lsls	r3, r3, #8
 800da26:	b21a      	sxth	r2, r3
 800da28:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800da2c:	4313      	orrs	r3, r2
 800da2e:	b21b      	sxth	r3, r3
 800da30:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800da32:	89fb      	ldrh	r3, [r7, #14]
}
 800da34:	4618      	mov	r0, r3
 800da36:	371c      	adds	r7, #28
 800da38:	46bd      	mov	sp, r7
 800da3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3e:	4770      	bx	lr

0800da40 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da40:	b580      	push	{r7, lr}
 800da42:	b084      	sub	sp, #16
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
 800da48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800da4a:	2300      	movs	r3, #0
 800da4c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800da4e:	683b      	ldr	r3, [r7, #0]
 800da50:	781b      	ldrb	r3, [r3, #0]
 800da52:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800da56:	2b40      	cmp	r3, #64	@ 0x40
 800da58:	d005      	beq.n	800da66 <USBD_StdDevReq+0x26>
 800da5a:	2b40      	cmp	r3, #64	@ 0x40
 800da5c:	d853      	bhi.n	800db06 <USBD_StdDevReq+0xc6>
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d00b      	beq.n	800da7a <USBD_StdDevReq+0x3a>
 800da62:	2b20      	cmp	r3, #32
 800da64:	d14f      	bne.n	800db06 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800da6c:	689b      	ldr	r3, [r3, #8]
 800da6e:	6839      	ldr	r1, [r7, #0]
 800da70:	6878      	ldr	r0, [r7, #4]
 800da72:	4798      	blx	r3
 800da74:	4603      	mov	r3, r0
 800da76:	73fb      	strb	r3, [r7, #15]
      break;
 800da78:	e04a      	b.n	800db10 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800da7a:	683b      	ldr	r3, [r7, #0]
 800da7c:	785b      	ldrb	r3, [r3, #1]
 800da7e:	2b09      	cmp	r3, #9
 800da80:	d83b      	bhi.n	800dafa <USBD_StdDevReq+0xba>
 800da82:	a201      	add	r2, pc, #4	@ (adr r2, 800da88 <USBD_StdDevReq+0x48>)
 800da84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da88:	0800dadd 	.word	0x0800dadd
 800da8c:	0800daf1 	.word	0x0800daf1
 800da90:	0800dafb 	.word	0x0800dafb
 800da94:	0800dae7 	.word	0x0800dae7
 800da98:	0800dafb 	.word	0x0800dafb
 800da9c:	0800dabb 	.word	0x0800dabb
 800daa0:	0800dab1 	.word	0x0800dab1
 800daa4:	0800dafb 	.word	0x0800dafb
 800daa8:	0800dad3 	.word	0x0800dad3
 800daac:	0800dac5 	.word	0x0800dac5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800dab0:	6839      	ldr	r1, [r7, #0]
 800dab2:	6878      	ldr	r0, [r7, #4]
 800dab4:	f000 f9de 	bl	800de74 <USBD_GetDescriptor>
          break;
 800dab8:	e024      	b.n	800db04 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800daba:	6839      	ldr	r1, [r7, #0]
 800dabc:	6878      	ldr	r0, [r7, #4]
 800dabe:	f000 fb6d 	bl	800e19c <USBD_SetAddress>
          break;
 800dac2:	e01f      	b.n	800db04 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800dac4:	6839      	ldr	r1, [r7, #0]
 800dac6:	6878      	ldr	r0, [r7, #4]
 800dac8:	f000 fbac 	bl	800e224 <USBD_SetConfig>
 800dacc:	4603      	mov	r3, r0
 800dace:	73fb      	strb	r3, [r7, #15]
          break;
 800dad0:	e018      	b.n	800db04 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800dad2:	6839      	ldr	r1, [r7, #0]
 800dad4:	6878      	ldr	r0, [r7, #4]
 800dad6:	f000 fc4b 	bl	800e370 <USBD_GetConfig>
          break;
 800dada:	e013      	b.n	800db04 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800dadc:	6839      	ldr	r1, [r7, #0]
 800dade:	6878      	ldr	r0, [r7, #4]
 800dae0:	f000 fc7c 	bl	800e3dc <USBD_GetStatus>
          break;
 800dae4:	e00e      	b.n	800db04 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800dae6:	6839      	ldr	r1, [r7, #0]
 800dae8:	6878      	ldr	r0, [r7, #4]
 800daea:	f000 fcab 	bl	800e444 <USBD_SetFeature>
          break;
 800daee:	e009      	b.n	800db04 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800daf0:	6839      	ldr	r1, [r7, #0]
 800daf2:	6878      	ldr	r0, [r7, #4]
 800daf4:	f000 fcba 	bl	800e46c <USBD_ClrFeature>
          break;
 800daf8:	e004      	b.n	800db04 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800dafa:	6839      	ldr	r1, [r7, #0]
 800dafc:	6878      	ldr	r0, [r7, #4]
 800dafe:	f000 fd11 	bl	800e524 <USBD_CtlError>
          break;
 800db02:	bf00      	nop
      }
      break;
 800db04:	e004      	b.n	800db10 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800db06:	6839      	ldr	r1, [r7, #0]
 800db08:	6878      	ldr	r0, [r7, #4]
 800db0a:	f000 fd0b 	bl	800e524 <USBD_CtlError>
      break;
 800db0e:	bf00      	nop
  }

  return ret;
 800db10:	7bfb      	ldrb	r3, [r7, #15]
}
 800db12:	4618      	mov	r0, r3
 800db14:	3710      	adds	r7, #16
 800db16:	46bd      	mov	sp, r7
 800db18:	bd80      	pop	{r7, pc}
 800db1a:	bf00      	nop

0800db1c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db1c:	b580      	push	{r7, lr}
 800db1e:	b084      	sub	sp, #16
 800db20:	af00      	add	r7, sp, #0
 800db22:	6078      	str	r0, [r7, #4]
 800db24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800db26:	2300      	movs	r3, #0
 800db28:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800db2a:	683b      	ldr	r3, [r7, #0]
 800db2c:	781b      	ldrb	r3, [r3, #0]
 800db2e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800db32:	2b40      	cmp	r3, #64	@ 0x40
 800db34:	d005      	beq.n	800db42 <USBD_StdItfReq+0x26>
 800db36:	2b40      	cmp	r3, #64	@ 0x40
 800db38:	d82f      	bhi.n	800db9a <USBD_StdItfReq+0x7e>
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d001      	beq.n	800db42 <USBD_StdItfReq+0x26>
 800db3e:	2b20      	cmp	r3, #32
 800db40:	d12b      	bne.n	800db9a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800db48:	b2db      	uxtb	r3, r3
 800db4a:	3b01      	subs	r3, #1
 800db4c:	2b02      	cmp	r3, #2
 800db4e:	d81d      	bhi.n	800db8c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800db50:	683b      	ldr	r3, [r7, #0]
 800db52:	889b      	ldrh	r3, [r3, #4]
 800db54:	b2db      	uxtb	r3, r3
 800db56:	2b01      	cmp	r3, #1
 800db58:	d813      	bhi.n	800db82 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800db60:	689b      	ldr	r3, [r3, #8]
 800db62:	6839      	ldr	r1, [r7, #0]
 800db64:	6878      	ldr	r0, [r7, #4]
 800db66:	4798      	blx	r3
 800db68:	4603      	mov	r3, r0
 800db6a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800db6c:	683b      	ldr	r3, [r7, #0]
 800db6e:	88db      	ldrh	r3, [r3, #6]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d110      	bne.n	800db96 <USBD_StdItfReq+0x7a>
 800db74:	7bfb      	ldrb	r3, [r7, #15]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d10d      	bne.n	800db96 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800db7a:	6878      	ldr	r0, [r7, #4]
 800db7c:	f000 fd9d 	bl	800e6ba <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800db80:	e009      	b.n	800db96 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800db82:	6839      	ldr	r1, [r7, #0]
 800db84:	6878      	ldr	r0, [r7, #4]
 800db86:	f000 fccd 	bl	800e524 <USBD_CtlError>
          break;
 800db8a:	e004      	b.n	800db96 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800db8c:	6839      	ldr	r1, [r7, #0]
 800db8e:	6878      	ldr	r0, [r7, #4]
 800db90:	f000 fcc8 	bl	800e524 <USBD_CtlError>
          break;
 800db94:	e000      	b.n	800db98 <USBD_StdItfReq+0x7c>
          break;
 800db96:	bf00      	nop
      }
      break;
 800db98:	e004      	b.n	800dba4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800db9a:	6839      	ldr	r1, [r7, #0]
 800db9c:	6878      	ldr	r0, [r7, #4]
 800db9e:	f000 fcc1 	bl	800e524 <USBD_CtlError>
      break;
 800dba2:	bf00      	nop
  }

  return ret;
 800dba4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dba6:	4618      	mov	r0, r3
 800dba8:	3710      	adds	r7, #16
 800dbaa:	46bd      	mov	sp, r7
 800dbac:	bd80      	pop	{r7, pc}

0800dbae <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dbae:	b580      	push	{r7, lr}
 800dbb0:	b084      	sub	sp, #16
 800dbb2:	af00      	add	r7, sp, #0
 800dbb4:	6078      	str	r0, [r7, #4]
 800dbb6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800dbb8:	2300      	movs	r3, #0
 800dbba:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800dbbc:	683b      	ldr	r3, [r7, #0]
 800dbbe:	889b      	ldrh	r3, [r3, #4]
 800dbc0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dbc2:	683b      	ldr	r3, [r7, #0]
 800dbc4:	781b      	ldrb	r3, [r3, #0]
 800dbc6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800dbca:	2b40      	cmp	r3, #64	@ 0x40
 800dbcc:	d007      	beq.n	800dbde <USBD_StdEPReq+0x30>
 800dbce:	2b40      	cmp	r3, #64	@ 0x40
 800dbd0:	f200 8145 	bhi.w	800de5e <USBD_StdEPReq+0x2b0>
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d00c      	beq.n	800dbf2 <USBD_StdEPReq+0x44>
 800dbd8:	2b20      	cmp	r3, #32
 800dbda:	f040 8140 	bne.w	800de5e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dbe4:	689b      	ldr	r3, [r3, #8]
 800dbe6:	6839      	ldr	r1, [r7, #0]
 800dbe8:	6878      	ldr	r0, [r7, #4]
 800dbea:	4798      	blx	r3
 800dbec:	4603      	mov	r3, r0
 800dbee:	73fb      	strb	r3, [r7, #15]
      break;
 800dbf0:	e13a      	b.n	800de68 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dbf2:	683b      	ldr	r3, [r7, #0]
 800dbf4:	785b      	ldrb	r3, [r3, #1]
 800dbf6:	2b03      	cmp	r3, #3
 800dbf8:	d007      	beq.n	800dc0a <USBD_StdEPReq+0x5c>
 800dbfa:	2b03      	cmp	r3, #3
 800dbfc:	f300 8129 	bgt.w	800de52 <USBD_StdEPReq+0x2a4>
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d07f      	beq.n	800dd04 <USBD_StdEPReq+0x156>
 800dc04:	2b01      	cmp	r3, #1
 800dc06:	d03c      	beq.n	800dc82 <USBD_StdEPReq+0xd4>
 800dc08:	e123      	b.n	800de52 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dc10:	b2db      	uxtb	r3, r3
 800dc12:	2b02      	cmp	r3, #2
 800dc14:	d002      	beq.n	800dc1c <USBD_StdEPReq+0x6e>
 800dc16:	2b03      	cmp	r3, #3
 800dc18:	d016      	beq.n	800dc48 <USBD_StdEPReq+0x9a>
 800dc1a:	e02c      	b.n	800dc76 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dc1c:	7bbb      	ldrb	r3, [r7, #14]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d00d      	beq.n	800dc3e <USBD_StdEPReq+0x90>
 800dc22:	7bbb      	ldrb	r3, [r7, #14]
 800dc24:	2b80      	cmp	r3, #128	@ 0x80
 800dc26:	d00a      	beq.n	800dc3e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800dc28:	7bbb      	ldrb	r3, [r7, #14]
 800dc2a:	4619      	mov	r1, r3
 800dc2c:	6878      	ldr	r0, [r7, #4]
 800dc2e:	f001 f917 	bl	800ee60 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800dc32:	2180      	movs	r1, #128	@ 0x80
 800dc34:	6878      	ldr	r0, [r7, #4]
 800dc36:	f001 f913 	bl	800ee60 <USBD_LL_StallEP>
 800dc3a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800dc3c:	e020      	b.n	800dc80 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800dc3e:	6839      	ldr	r1, [r7, #0]
 800dc40:	6878      	ldr	r0, [r7, #4]
 800dc42:	f000 fc6f 	bl	800e524 <USBD_CtlError>
              break;
 800dc46:	e01b      	b.n	800dc80 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800dc48:	683b      	ldr	r3, [r7, #0]
 800dc4a:	885b      	ldrh	r3, [r3, #2]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d10e      	bne.n	800dc6e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800dc50:	7bbb      	ldrb	r3, [r7, #14]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d00b      	beq.n	800dc6e <USBD_StdEPReq+0xc0>
 800dc56:	7bbb      	ldrb	r3, [r7, #14]
 800dc58:	2b80      	cmp	r3, #128	@ 0x80
 800dc5a:	d008      	beq.n	800dc6e <USBD_StdEPReq+0xc0>
 800dc5c:	683b      	ldr	r3, [r7, #0]
 800dc5e:	88db      	ldrh	r3, [r3, #6]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d104      	bne.n	800dc6e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800dc64:	7bbb      	ldrb	r3, [r7, #14]
 800dc66:	4619      	mov	r1, r3
 800dc68:	6878      	ldr	r0, [r7, #4]
 800dc6a:	f001 f8f9 	bl	800ee60 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800dc6e:	6878      	ldr	r0, [r7, #4]
 800dc70:	f000 fd23 	bl	800e6ba <USBD_CtlSendStatus>

              break;
 800dc74:	e004      	b.n	800dc80 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800dc76:	6839      	ldr	r1, [r7, #0]
 800dc78:	6878      	ldr	r0, [r7, #4]
 800dc7a:	f000 fc53 	bl	800e524 <USBD_CtlError>
              break;
 800dc7e:	bf00      	nop
          }
          break;
 800dc80:	e0ec      	b.n	800de5c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dc88:	b2db      	uxtb	r3, r3
 800dc8a:	2b02      	cmp	r3, #2
 800dc8c:	d002      	beq.n	800dc94 <USBD_StdEPReq+0xe6>
 800dc8e:	2b03      	cmp	r3, #3
 800dc90:	d016      	beq.n	800dcc0 <USBD_StdEPReq+0x112>
 800dc92:	e030      	b.n	800dcf6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dc94:	7bbb      	ldrb	r3, [r7, #14]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d00d      	beq.n	800dcb6 <USBD_StdEPReq+0x108>
 800dc9a:	7bbb      	ldrb	r3, [r7, #14]
 800dc9c:	2b80      	cmp	r3, #128	@ 0x80
 800dc9e:	d00a      	beq.n	800dcb6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800dca0:	7bbb      	ldrb	r3, [r7, #14]
 800dca2:	4619      	mov	r1, r3
 800dca4:	6878      	ldr	r0, [r7, #4]
 800dca6:	f001 f8db 	bl	800ee60 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800dcaa:	2180      	movs	r1, #128	@ 0x80
 800dcac:	6878      	ldr	r0, [r7, #4]
 800dcae:	f001 f8d7 	bl	800ee60 <USBD_LL_StallEP>
 800dcb2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800dcb4:	e025      	b.n	800dd02 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800dcb6:	6839      	ldr	r1, [r7, #0]
 800dcb8:	6878      	ldr	r0, [r7, #4]
 800dcba:	f000 fc33 	bl	800e524 <USBD_CtlError>
              break;
 800dcbe:	e020      	b.n	800dd02 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800dcc0:	683b      	ldr	r3, [r7, #0]
 800dcc2:	885b      	ldrh	r3, [r3, #2]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d11b      	bne.n	800dd00 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800dcc8:	7bbb      	ldrb	r3, [r7, #14]
 800dcca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d004      	beq.n	800dcdc <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800dcd2:	7bbb      	ldrb	r3, [r7, #14]
 800dcd4:	4619      	mov	r1, r3
 800dcd6:	6878      	ldr	r0, [r7, #4]
 800dcd8:	f001 f8e1 	bl	800ee9e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800dcdc:	6878      	ldr	r0, [r7, #4]
 800dcde:	f000 fcec 	bl	800e6ba <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dce8:	689b      	ldr	r3, [r3, #8]
 800dcea:	6839      	ldr	r1, [r7, #0]
 800dcec:	6878      	ldr	r0, [r7, #4]
 800dcee:	4798      	blx	r3
 800dcf0:	4603      	mov	r3, r0
 800dcf2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800dcf4:	e004      	b.n	800dd00 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800dcf6:	6839      	ldr	r1, [r7, #0]
 800dcf8:	6878      	ldr	r0, [r7, #4]
 800dcfa:	f000 fc13 	bl	800e524 <USBD_CtlError>
              break;
 800dcfe:	e000      	b.n	800dd02 <USBD_StdEPReq+0x154>
              break;
 800dd00:	bf00      	nop
          }
          break;
 800dd02:	e0ab      	b.n	800de5c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dd0a:	b2db      	uxtb	r3, r3
 800dd0c:	2b02      	cmp	r3, #2
 800dd0e:	d002      	beq.n	800dd16 <USBD_StdEPReq+0x168>
 800dd10:	2b03      	cmp	r3, #3
 800dd12:	d032      	beq.n	800dd7a <USBD_StdEPReq+0x1cc>
 800dd14:	e097      	b.n	800de46 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dd16:	7bbb      	ldrb	r3, [r7, #14]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d007      	beq.n	800dd2c <USBD_StdEPReq+0x17e>
 800dd1c:	7bbb      	ldrb	r3, [r7, #14]
 800dd1e:	2b80      	cmp	r3, #128	@ 0x80
 800dd20:	d004      	beq.n	800dd2c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800dd22:	6839      	ldr	r1, [r7, #0]
 800dd24:	6878      	ldr	r0, [r7, #4]
 800dd26:	f000 fbfd 	bl	800e524 <USBD_CtlError>
                break;
 800dd2a:	e091      	b.n	800de50 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dd2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	da0b      	bge.n	800dd4c <USBD_StdEPReq+0x19e>
 800dd34:	7bbb      	ldrb	r3, [r7, #14]
 800dd36:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800dd3a:	4613      	mov	r3, r2
 800dd3c:	009b      	lsls	r3, r3, #2
 800dd3e:	4413      	add	r3, r2
 800dd40:	009b      	lsls	r3, r3, #2
 800dd42:	3310      	adds	r3, #16
 800dd44:	687a      	ldr	r2, [r7, #4]
 800dd46:	4413      	add	r3, r2
 800dd48:	3304      	adds	r3, #4
 800dd4a:	e00b      	b.n	800dd64 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800dd4c:	7bbb      	ldrb	r3, [r7, #14]
 800dd4e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dd52:	4613      	mov	r3, r2
 800dd54:	009b      	lsls	r3, r3, #2
 800dd56:	4413      	add	r3, r2
 800dd58:	009b      	lsls	r3, r3, #2
 800dd5a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800dd5e:	687a      	ldr	r2, [r7, #4]
 800dd60:	4413      	add	r3, r2
 800dd62:	3304      	adds	r3, #4
 800dd64:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800dd66:	68bb      	ldr	r3, [r7, #8]
 800dd68:	2200      	movs	r2, #0
 800dd6a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800dd6c:	68bb      	ldr	r3, [r7, #8]
 800dd6e:	2202      	movs	r2, #2
 800dd70:	4619      	mov	r1, r3
 800dd72:	6878      	ldr	r0, [r7, #4]
 800dd74:	f000 fc47 	bl	800e606 <USBD_CtlSendData>
              break;
 800dd78:	e06a      	b.n	800de50 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800dd7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	da11      	bge.n	800dda6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800dd82:	7bbb      	ldrb	r3, [r7, #14]
 800dd84:	f003 020f 	and.w	r2, r3, #15
 800dd88:	6879      	ldr	r1, [r7, #4]
 800dd8a:	4613      	mov	r3, r2
 800dd8c:	009b      	lsls	r3, r3, #2
 800dd8e:	4413      	add	r3, r2
 800dd90:	009b      	lsls	r3, r3, #2
 800dd92:	440b      	add	r3, r1
 800dd94:	3324      	adds	r3, #36	@ 0x24
 800dd96:	881b      	ldrh	r3, [r3, #0]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d117      	bne.n	800ddcc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800dd9c:	6839      	ldr	r1, [r7, #0]
 800dd9e:	6878      	ldr	r0, [r7, #4]
 800dda0:	f000 fbc0 	bl	800e524 <USBD_CtlError>
                  break;
 800dda4:	e054      	b.n	800de50 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800dda6:	7bbb      	ldrb	r3, [r7, #14]
 800dda8:	f003 020f 	and.w	r2, r3, #15
 800ddac:	6879      	ldr	r1, [r7, #4]
 800ddae:	4613      	mov	r3, r2
 800ddb0:	009b      	lsls	r3, r3, #2
 800ddb2:	4413      	add	r3, r2
 800ddb4:	009b      	lsls	r3, r3, #2
 800ddb6:	440b      	add	r3, r1
 800ddb8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ddbc:	881b      	ldrh	r3, [r3, #0]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d104      	bne.n	800ddcc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ddc2:	6839      	ldr	r1, [r7, #0]
 800ddc4:	6878      	ldr	r0, [r7, #4]
 800ddc6:	f000 fbad 	bl	800e524 <USBD_CtlError>
                  break;
 800ddca:	e041      	b.n	800de50 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ddcc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	da0b      	bge.n	800ddec <USBD_StdEPReq+0x23e>
 800ddd4:	7bbb      	ldrb	r3, [r7, #14]
 800ddd6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ddda:	4613      	mov	r3, r2
 800dddc:	009b      	lsls	r3, r3, #2
 800ddde:	4413      	add	r3, r2
 800dde0:	009b      	lsls	r3, r3, #2
 800dde2:	3310      	adds	r3, #16
 800dde4:	687a      	ldr	r2, [r7, #4]
 800dde6:	4413      	add	r3, r2
 800dde8:	3304      	adds	r3, #4
 800ddea:	e00b      	b.n	800de04 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ddec:	7bbb      	ldrb	r3, [r7, #14]
 800ddee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ddf2:	4613      	mov	r3, r2
 800ddf4:	009b      	lsls	r3, r3, #2
 800ddf6:	4413      	add	r3, r2
 800ddf8:	009b      	lsls	r3, r3, #2
 800ddfa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ddfe:	687a      	ldr	r2, [r7, #4]
 800de00:	4413      	add	r3, r2
 800de02:	3304      	adds	r3, #4
 800de04:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800de06:	7bbb      	ldrb	r3, [r7, #14]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d002      	beq.n	800de12 <USBD_StdEPReq+0x264>
 800de0c:	7bbb      	ldrb	r3, [r7, #14]
 800de0e:	2b80      	cmp	r3, #128	@ 0x80
 800de10:	d103      	bne.n	800de1a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800de12:	68bb      	ldr	r3, [r7, #8]
 800de14:	2200      	movs	r2, #0
 800de16:	601a      	str	r2, [r3, #0]
 800de18:	e00e      	b.n	800de38 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800de1a:	7bbb      	ldrb	r3, [r7, #14]
 800de1c:	4619      	mov	r1, r3
 800de1e:	6878      	ldr	r0, [r7, #4]
 800de20:	f001 f85c 	bl	800eedc <USBD_LL_IsStallEP>
 800de24:	4603      	mov	r3, r0
 800de26:	2b00      	cmp	r3, #0
 800de28:	d003      	beq.n	800de32 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800de2a:	68bb      	ldr	r3, [r7, #8]
 800de2c:	2201      	movs	r2, #1
 800de2e:	601a      	str	r2, [r3, #0]
 800de30:	e002      	b.n	800de38 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800de32:	68bb      	ldr	r3, [r7, #8]
 800de34:	2200      	movs	r2, #0
 800de36:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800de38:	68bb      	ldr	r3, [r7, #8]
 800de3a:	2202      	movs	r2, #2
 800de3c:	4619      	mov	r1, r3
 800de3e:	6878      	ldr	r0, [r7, #4]
 800de40:	f000 fbe1 	bl	800e606 <USBD_CtlSendData>
              break;
 800de44:	e004      	b.n	800de50 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800de46:	6839      	ldr	r1, [r7, #0]
 800de48:	6878      	ldr	r0, [r7, #4]
 800de4a:	f000 fb6b 	bl	800e524 <USBD_CtlError>
              break;
 800de4e:	bf00      	nop
          }
          break;
 800de50:	e004      	b.n	800de5c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800de52:	6839      	ldr	r1, [r7, #0]
 800de54:	6878      	ldr	r0, [r7, #4]
 800de56:	f000 fb65 	bl	800e524 <USBD_CtlError>
          break;
 800de5a:	bf00      	nop
      }
      break;
 800de5c:	e004      	b.n	800de68 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800de5e:	6839      	ldr	r1, [r7, #0]
 800de60:	6878      	ldr	r0, [r7, #4]
 800de62:	f000 fb5f 	bl	800e524 <USBD_CtlError>
      break;
 800de66:	bf00      	nop
  }

  return ret;
 800de68:	7bfb      	ldrb	r3, [r7, #15]
}
 800de6a:	4618      	mov	r0, r3
 800de6c:	3710      	adds	r7, #16
 800de6e:	46bd      	mov	sp, r7
 800de70:	bd80      	pop	{r7, pc}
	...

0800de74 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800de74:	b580      	push	{r7, lr}
 800de76:	b084      	sub	sp, #16
 800de78:	af00      	add	r7, sp, #0
 800de7a:	6078      	str	r0, [r7, #4]
 800de7c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800de7e:	2300      	movs	r3, #0
 800de80:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800de82:	2300      	movs	r3, #0
 800de84:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800de86:	2300      	movs	r3, #0
 800de88:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800de8a:	683b      	ldr	r3, [r7, #0]
 800de8c:	885b      	ldrh	r3, [r3, #2]
 800de8e:	0a1b      	lsrs	r3, r3, #8
 800de90:	b29b      	uxth	r3, r3
 800de92:	3b01      	subs	r3, #1
 800de94:	2b0e      	cmp	r3, #14
 800de96:	f200 8152 	bhi.w	800e13e <USBD_GetDescriptor+0x2ca>
 800de9a:	a201      	add	r2, pc, #4	@ (adr r2, 800dea0 <USBD_GetDescriptor+0x2c>)
 800de9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dea0:	0800df11 	.word	0x0800df11
 800dea4:	0800df29 	.word	0x0800df29
 800dea8:	0800df69 	.word	0x0800df69
 800deac:	0800e13f 	.word	0x0800e13f
 800deb0:	0800e13f 	.word	0x0800e13f
 800deb4:	0800e0df 	.word	0x0800e0df
 800deb8:	0800e10b 	.word	0x0800e10b
 800debc:	0800e13f 	.word	0x0800e13f
 800dec0:	0800e13f 	.word	0x0800e13f
 800dec4:	0800e13f 	.word	0x0800e13f
 800dec8:	0800e13f 	.word	0x0800e13f
 800decc:	0800e13f 	.word	0x0800e13f
 800ded0:	0800e13f 	.word	0x0800e13f
 800ded4:	0800e13f 	.word	0x0800e13f
 800ded8:	0800dedd 	.word	0x0800dedd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dee2:	69db      	ldr	r3, [r3, #28]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d00b      	beq.n	800df00 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800deee:	69db      	ldr	r3, [r3, #28]
 800def0:	687a      	ldr	r2, [r7, #4]
 800def2:	7c12      	ldrb	r2, [r2, #16]
 800def4:	f107 0108 	add.w	r1, r7, #8
 800def8:	4610      	mov	r0, r2
 800defa:	4798      	blx	r3
 800defc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800defe:	e126      	b.n	800e14e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800df00:	6839      	ldr	r1, [r7, #0]
 800df02:	6878      	ldr	r0, [r7, #4]
 800df04:	f000 fb0e 	bl	800e524 <USBD_CtlError>
        err++;
 800df08:	7afb      	ldrb	r3, [r7, #11]
 800df0a:	3301      	adds	r3, #1
 800df0c:	72fb      	strb	r3, [r7, #11]
      break;
 800df0e:	e11e      	b.n	800e14e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	687a      	ldr	r2, [r7, #4]
 800df1a:	7c12      	ldrb	r2, [r2, #16]
 800df1c:	f107 0108 	add.w	r1, r7, #8
 800df20:	4610      	mov	r0, r2
 800df22:	4798      	blx	r3
 800df24:	60f8      	str	r0, [r7, #12]
      break;
 800df26:	e112      	b.n	800e14e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	7c1b      	ldrb	r3, [r3, #16]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d10d      	bne.n	800df4c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800df36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df38:	f107 0208 	add.w	r2, r7, #8
 800df3c:	4610      	mov	r0, r2
 800df3e:	4798      	blx	r3
 800df40:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	3301      	adds	r3, #1
 800df46:	2202      	movs	r2, #2
 800df48:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800df4a:	e100      	b.n	800e14e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800df52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df54:	f107 0208 	add.w	r2, r7, #8
 800df58:	4610      	mov	r0, r2
 800df5a:	4798      	blx	r3
 800df5c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	3301      	adds	r3, #1
 800df62:	2202      	movs	r2, #2
 800df64:	701a      	strb	r2, [r3, #0]
      break;
 800df66:	e0f2      	b.n	800e14e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800df68:	683b      	ldr	r3, [r7, #0]
 800df6a:	885b      	ldrh	r3, [r3, #2]
 800df6c:	b2db      	uxtb	r3, r3
 800df6e:	2b05      	cmp	r3, #5
 800df70:	f200 80ac 	bhi.w	800e0cc <USBD_GetDescriptor+0x258>
 800df74:	a201      	add	r2, pc, #4	@ (adr r2, 800df7c <USBD_GetDescriptor+0x108>)
 800df76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df7a:	bf00      	nop
 800df7c:	0800df95 	.word	0x0800df95
 800df80:	0800dfc9 	.word	0x0800dfc9
 800df84:	0800dffd 	.word	0x0800dffd
 800df88:	0800e031 	.word	0x0800e031
 800df8c:	0800e065 	.word	0x0800e065
 800df90:	0800e099 	.word	0x0800e099
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800df9a:	685b      	ldr	r3, [r3, #4]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d00b      	beq.n	800dfb8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dfa6:	685b      	ldr	r3, [r3, #4]
 800dfa8:	687a      	ldr	r2, [r7, #4]
 800dfaa:	7c12      	ldrb	r2, [r2, #16]
 800dfac:	f107 0108 	add.w	r1, r7, #8
 800dfb0:	4610      	mov	r0, r2
 800dfb2:	4798      	blx	r3
 800dfb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dfb6:	e091      	b.n	800e0dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dfb8:	6839      	ldr	r1, [r7, #0]
 800dfba:	6878      	ldr	r0, [r7, #4]
 800dfbc:	f000 fab2 	bl	800e524 <USBD_CtlError>
            err++;
 800dfc0:	7afb      	ldrb	r3, [r7, #11]
 800dfc2:	3301      	adds	r3, #1
 800dfc4:	72fb      	strb	r3, [r7, #11]
          break;
 800dfc6:	e089      	b.n	800e0dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dfce:	689b      	ldr	r3, [r3, #8]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d00b      	beq.n	800dfec <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dfda:	689b      	ldr	r3, [r3, #8]
 800dfdc:	687a      	ldr	r2, [r7, #4]
 800dfde:	7c12      	ldrb	r2, [r2, #16]
 800dfe0:	f107 0108 	add.w	r1, r7, #8
 800dfe4:	4610      	mov	r0, r2
 800dfe6:	4798      	blx	r3
 800dfe8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dfea:	e077      	b.n	800e0dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dfec:	6839      	ldr	r1, [r7, #0]
 800dfee:	6878      	ldr	r0, [r7, #4]
 800dff0:	f000 fa98 	bl	800e524 <USBD_CtlError>
            err++;
 800dff4:	7afb      	ldrb	r3, [r7, #11]
 800dff6:	3301      	adds	r3, #1
 800dff8:	72fb      	strb	r3, [r7, #11]
          break;
 800dffa:	e06f      	b.n	800e0dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e002:	68db      	ldr	r3, [r3, #12]
 800e004:	2b00      	cmp	r3, #0
 800e006:	d00b      	beq.n	800e020 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e00e:	68db      	ldr	r3, [r3, #12]
 800e010:	687a      	ldr	r2, [r7, #4]
 800e012:	7c12      	ldrb	r2, [r2, #16]
 800e014:	f107 0108 	add.w	r1, r7, #8
 800e018:	4610      	mov	r0, r2
 800e01a:	4798      	blx	r3
 800e01c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e01e:	e05d      	b.n	800e0dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e020:	6839      	ldr	r1, [r7, #0]
 800e022:	6878      	ldr	r0, [r7, #4]
 800e024:	f000 fa7e 	bl	800e524 <USBD_CtlError>
            err++;
 800e028:	7afb      	ldrb	r3, [r7, #11]
 800e02a:	3301      	adds	r3, #1
 800e02c:	72fb      	strb	r3, [r7, #11]
          break;
 800e02e:	e055      	b.n	800e0dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e036:	691b      	ldr	r3, [r3, #16]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d00b      	beq.n	800e054 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e042:	691b      	ldr	r3, [r3, #16]
 800e044:	687a      	ldr	r2, [r7, #4]
 800e046:	7c12      	ldrb	r2, [r2, #16]
 800e048:	f107 0108 	add.w	r1, r7, #8
 800e04c:	4610      	mov	r0, r2
 800e04e:	4798      	blx	r3
 800e050:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e052:	e043      	b.n	800e0dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e054:	6839      	ldr	r1, [r7, #0]
 800e056:	6878      	ldr	r0, [r7, #4]
 800e058:	f000 fa64 	bl	800e524 <USBD_CtlError>
            err++;
 800e05c:	7afb      	ldrb	r3, [r7, #11]
 800e05e:	3301      	adds	r3, #1
 800e060:	72fb      	strb	r3, [r7, #11]
          break;
 800e062:	e03b      	b.n	800e0dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e06a:	695b      	ldr	r3, [r3, #20]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d00b      	beq.n	800e088 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e076:	695b      	ldr	r3, [r3, #20]
 800e078:	687a      	ldr	r2, [r7, #4]
 800e07a:	7c12      	ldrb	r2, [r2, #16]
 800e07c:	f107 0108 	add.w	r1, r7, #8
 800e080:	4610      	mov	r0, r2
 800e082:	4798      	blx	r3
 800e084:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e086:	e029      	b.n	800e0dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e088:	6839      	ldr	r1, [r7, #0]
 800e08a:	6878      	ldr	r0, [r7, #4]
 800e08c:	f000 fa4a 	bl	800e524 <USBD_CtlError>
            err++;
 800e090:	7afb      	ldrb	r3, [r7, #11]
 800e092:	3301      	adds	r3, #1
 800e094:	72fb      	strb	r3, [r7, #11]
          break;
 800e096:	e021      	b.n	800e0dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e09e:	699b      	ldr	r3, [r3, #24]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d00b      	beq.n	800e0bc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e0aa:	699b      	ldr	r3, [r3, #24]
 800e0ac:	687a      	ldr	r2, [r7, #4]
 800e0ae:	7c12      	ldrb	r2, [r2, #16]
 800e0b0:	f107 0108 	add.w	r1, r7, #8
 800e0b4:	4610      	mov	r0, r2
 800e0b6:	4798      	blx	r3
 800e0b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e0ba:	e00f      	b.n	800e0dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e0bc:	6839      	ldr	r1, [r7, #0]
 800e0be:	6878      	ldr	r0, [r7, #4]
 800e0c0:	f000 fa30 	bl	800e524 <USBD_CtlError>
            err++;
 800e0c4:	7afb      	ldrb	r3, [r7, #11]
 800e0c6:	3301      	adds	r3, #1
 800e0c8:	72fb      	strb	r3, [r7, #11]
          break;
 800e0ca:	e007      	b.n	800e0dc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e0cc:	6839      	ldr	r1, [r7, #0]
 800e0ce:	6878      	ldr	r0, [r7, #4]
 800e0d0:	f000 fa28 	bl	800e524 <USBD_CtlError>
          err++;
 800e0d4:	7afb      	ldrb	r3, [r7, #11]
 800e0d6:	3301      	adds	r3, #1
 800e0d8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800e0da:	bf00      	nop
      }
      break;
 800e0dc:	e037      	b.n	800e14e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	7c1b      	ldrb	r3, [r3, #16]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d109      	bne.n	800e0fa <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e0ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e0ee:	f107 0208 	add.w	r2, r7, #8
 800e0f2:	4610      	mov	r0, r2
 800e0f4:	4798      	blx	r3
 800e0f6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e0f8:	e029      	b.n	800e14e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e0fa:	6839      	ldr	r1, [r7, #0]
 800e0fc:	6878      	ldr	r0, [r7, #4]
 800e0fe:	f000 fa11 	bl	800e524 <USBD_CtlError>
        err++;
 800e102:	7afb      	ldrb	r3, [r7, #11]
 800e104:	3301      	adds	r3, #1
 800e106:	72fb      	strb	r3, [r7, #11]
      break;
 800e108:	e021      	b.n	800e14e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	7c1b      	ldrb	r3, [r3, #16]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d10d      	bne.n	800e12e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e11a:	f107 0208 	add.w	r2, r7, #8
 800e11e:	4610      	mov	r0, r2
 800e120:	4798      	blx	r3
 800e122:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	3301      	adds	r3, #1
 800e128:	2207      	movs	r2, #7
 800e12a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e12c:	e00f      	b.n	800e14e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e12e:	6839      	ldr	r1, [r7, #0]
 800e130:	6878      	ldr	r0, [r7, #4]
 800e132:	f000 f9f7 	bl	800e524 <USBD_CtlError>
        err++;
 800e136:	7afb      	ldrb	r3, [r7, #11]
 800e138:	3301      	adds	r3, #1
 800e13a:	72fb      	strb	r3, [r7, #11]
      break;
 800e13c:	e007      	b.n	800e14e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800e13e:	6839      	ldr	r1, [r7, #0]
 800e140:	6878      	ldr	r0, [r7, #4]
 800e142:	f000 f9ef 	bl	800e524 <USBD_CtlError>
      err++;
 800e146:	7afb      	ldrb	r3, [r7, #11]
 800e148:	3301      	adds	r3, #1
 800e14a:	72fb      	strb	r3, [r7, #11]
      break;
 800e14c:	bf00      	nop
  }

  if (err != 0U)
 800e14e:	7afb      	ldrb	r3, [r7, #11]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d11e      	bne.n	800e192 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800e154:	683b      	ldr	r3, [r7, #0]
 800e156:	88db      	ldrh	r3, [r3, #6]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d016      	beq.n	800e18a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800e15c:	893b      	ldrh	r3, [r7, #8]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d00e      	beq.n	800e180 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800e162:	683b      	ldr	r3, [r7, #0]
 800e164:	88da      	ldrh	r2, [r3, #6]
 800e166:	893b      	ldrh	r3, [r7, #8]
 800e168:	4293      	cmp	r3, r2
 800e16a:	bf28      	it	cs
 800e16c:	4613      	movcs	r3, r2
 800e16e:	b29b      	uxth	r3, r3
 800e170:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e172:	893b      	ldrh	r3, [r7, #8]
 800e174:	461a      	mov	r2, r3
 800e176:	68f9      	ldr	r1, [r7, #12]
 800e178:	6878      	ldr	r0, [r7, #4]
 800e17a:	f000 fa44 	bl	800e606 <USBD_CtlSendData>
 800e17e:	e009      	b.n	800e194 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e180:	6839      	ldr	r1, [r7, #0]
 800e182:	6878      	ldr	r0, [r7, #4]
 800e184:	f000 f9ce 	bl	800e524 <USBD_CtlError>
 800e188:	e004      	b.n	800e194 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e18a:	6878      	ldr	r0, [r7, #4]
 800e18c:	f000 fa95 	bl	800e6ba <USBD_CtlSendStatus>
 800e190:	e000      	b.n	800e194 <USBD_GetDescriptor+0x320>
    return;
 800e192:	bf00      	nop
  }
}
 800e194:	3710      	adds	r7, #16
 800e196:	46bd      	mov	sp, r7
 800e198:	bd80      	pop	{r7, pc}
 800e19a:	bf00      	nop

0800e19c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e19c:	b580      	push	{r7, lr}
 800e19e:	b084      	sub	sp, #16
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	6078      	str	r0, [r7, #4]
 800e1a4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e1a6:	683b      	ldr	r3, [r7, #0]
 800e1a8:	889b      	ldrh	r3, [r3, #4]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d131      	bne.n	800e212 <USBD_SetAddress+0x76>
 800e1ae:	683b      	ldr	r3, [r7, #0]
 800e1b0:	88db      	ldrh	r3, [r3, #6]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d12d      	bne.n	800e212 <USBD_SetAddress+0x76>
 800e1b6:	683b      	ldr	r3, [r7, #0]
 800e1b8:	885b      	ldrh	r3, [r3, #2]
 800e1ba:	2b7f      	cmp	r3, #127	@ 0x7f
 800e1bc:	d829      	bhi.n	800e212 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e1be:	683b      	ldr	r3, [r7, #0]
 800e1c0:	885b      	ldrh	r3, [r3, #2]
 800e1c2:	b2db      	uxtb	r3, r3
 800e1c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e1c8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e1d0:	b2db      	uxtb	r3, r3
 800e1d2:	2b03      	cmp	r3, #3
 800e1d4:	d104      	bne.n	800e1e0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e1d6:	6839      	ldr	r1, [r7, #0]
 800e1d8:	6878      	ldr	r0, [r7, #4]
 800e1da:	f000 f9a3 	bl	800e524 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e1de:	e01d      	b.n	800e21c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	7bfa      	ldrb	r2, [r7, #15]
 800e1e4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e1e8:	7bfb      	ldrb	r3, [r7, #15]
 800e1ea:	4619      	mov	r1, r3
 800e1ec:	6878      	ldr	r0, [r7, #4]
 800e1ee:	f000 fea1 	bl	800ef34 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e1f2:	6878      	ldr	r0, [r7, #4]
 800e1f4:	f000 fa61 	bl	800e6ba <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e1f8:	7bfb      	ldrb	r3, [r7, #15]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d004      	beq.n	800e208 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	2202      	movs	r2, #2
 800e202:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e206:	e009      	b.n	800e21c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	2201      	movs	r2, #1
 800e20c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e210:	e004      	b.n	800e21c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e212:	6839      	ldr	r1, [r7, #0]
 800e214:	6878      	ldr	r0, [r7, #4]
 800e216:	f000 f985 	bl	800e524 <USBD_CtlError>
  }
}
 800e21a:	bf00      	nop
 800e21c:	bf00      	nop
 800e21e:	3710      	adds	r7, #16
 800e220:	46bd      	mov	sp, r7
 800e222:	bd80      	pop	{r7, pc}

0800e224 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e224:	b580      	push	{r7, lr}
 800e226:	b084      	sub	sp, #16
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]
 800e22c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e22e:	2300      	movs	r3, #0
 800e230:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e232:	683b      	ldr	r3, [r7, #0]
 800e234:	885b      	ldrh	r3, [r3, #2]
 800e236:	b2da      	uxtb	r2, r3
 800e238:	4b4c      	ldr	r3, [pc, #304]	@ (800e36c <USBD_SetConfig+0x148>)
 800e23a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e23c:	4b4b      	ldr	r3, [pc, #300]	@ (800e36c <USBD_SetConfig+0x148>)
 800e23e:	781b      	ldrb	r3, [r3, #0]
 800e240:	2b01      	cmp	r3, #1
 800e242:	d905      	bls.n	800e250 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e244:	6839      	ldr	r1, [r7, #0]
 800e246:	6878      	ldr	r0, [r7, #4]
 800e248:	f000 f96c 	bl	800e524 <USBD_CtlError>
    return USBD_FAIL;
 800e24c:	2303      	movs	r3, #3
 800e24e:	e088      	b.n	800e362 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e256:	b2db      	uxtb	r3, r3
 800e258:	2b02      	cmp	r3, #2
 800e25a:	d002      	beq.n	800e262 <USBD_SetConfig+0x3e>
 800e25c:	2b03      	cmp	r3, #3
 800e25e:	d025      	beq.n	800e2ac <USBD_SetConfig+0x88>
 800e260:	e071      	b.n	800e346 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e262:	4b42      	ldr	r3, [pc, #264]	@ (800e36c <USBD_SetConfig+0x148>)
 800e264:	781b      	ldrb	r3, [r3, #0]
 800e266:	2b00      	cmp	r3, #0
 800e268:	d01c      	beq.n	800e2a4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800e26a:	4b40      	ldr	r3, [pc, #256]	@ (800e36c <USBD_SetConfig+0x148>)
 800e26c:	781b      	ldrb	r3, [r3, #0]
 800e26e:	461a      	mov	r2, r3
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e274:	4b3d      	ldr	r3, [pc, #244]	@ (800e36c <USBD_SetConfig+0x148>)
 800e276:	781b      	ldrb	r3, [r3, #0]
 800e278:	4619      	mov	r1, r3
 800e27a:	6878      	ldr	r0, [r7, #4]
 800e27c:	f7ff f992 	bl	800d5a4 <USBD_SetClassConfig>
 800e280:	4603      	mov	r3, r0
 800e282:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e284:	7bfb      	ldrb	r3, [r7, #15]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d004      	beq.n	800e294 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800e28a:	6839      	ldr	r1, [r7, #0]
 800e28c:	6878      	ldr	r0, [r7, #4]
 800e28e:	f000 f949 	bl	800e524 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e292:	e065      	b.n	800e360 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800e294:	6878      	ldr	r0, [r7, #4]
 800e296:	f000 fa10 	bl	800e6ba <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	2203      	movs	r2, #3
 800e29e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e2a2:	e05d      	b.n	800e360 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800e2a4:	6878      	ldr	r0, [r7, #4]
 800e2a6:	f000 fa08 	bl	800e6ba <USBD_CtlSendStatus>
      break;
 800e2aa:	e059      	b.n	800e360 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e2ac:	4b2f      	ldr	r3, [pc, #188]	@ (800e36c <USBD_SetConfig+0x148>)
 800e2ae:	781b      	ldrb	r3, [r3, #0]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d112      	bne.n	800e2da <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	2202      	movs	r2, #2
 800e2b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800e2bc:	4b2b      	ldr	r3, [pc, #172]	@ (800e36c <USBD_SetConfig+0x148>)
 800e2be:	781b      	ldrb	r3, [r3, #0]
 800e2c0:	461a      	mov	r2, r3
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e2c6:	4b29      	ldr	r3, [pc, #164]	@ (800e36c <USBD_SetConfig+0x148>)
 800e2c8:	781b      	ldrb	r3, [r3, #0]
 800e2ca:	4619      	mov	r1, r3
 800e2cc:	6878      	ldr	r0, [r7, #4]
 800e2ce:	f7ff f985 	bl	800d5dc <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e2d2:	6878      	ldr	r0, [r7, #4]
 800e2d4:	f000 f9f1 	bl	800e6ba <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e2d8:	e042      	b.n	800e360 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800e2da:	4b24      	ldr	r3, [pc, #144]	@ (800e36c <USBD_SetConfig+0x148>)
 800e2dc:	781b      	ldrb	r3, [r3, #0]
 800e2de:	461a      	mov	r2, r3
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	685b      	ldr	r3, [r3, #4]
 800e2e4:	429a      	cmp	r2, r3
 800e2e6:	d02a      	beq.n	800e33e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	685b      	ldr	r3, [r3, #4]
 800e2ec:	b2db      	uxtb	r3, r3
 800e2ee:	4619      	mov	r1, r3
 800e2f0:	6878      	ldr	r0, [r7, #4]
 800e2f2:	f7ff f973 	bl	800d5dc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e2f6:	4b1d      	ldr	r3, [pc, #116]	@ (800e36c <USBD_SetConfig+0x148>)
 800e2f8:	781b      	ldrb	r3, [r3, #0]
 800e2fa:	461a      	mov	r2, r3
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e300:	4b1a      	ldr	r3, [pc, #104]	@ (800e36c <USBD_SetConfig+0x148>)
 800e302:	781b      	ldrb	r3, [r3, #0]
 800e304:	4619      	mov	r1, r3
 800e306:	6878      	ldr	r0, [r7, #4]
 800e308:	f7ff f94c 	bl	800d5a4 <USBD_SetClassConfig>
 800e30c:	4603      	mov	r3, r0
 800e30e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e310:	7bfb      	ldrb	r3, [r7, #15]
 800e312:	2b00      	cmp	r3, #0
 800e314:	d00f      	beq.n	800e336 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800e316:	6839      	ldr	r1, [r7, #0]
 800e318:	6878      	ldr	r0, [r7, #4]
 800e31a:	f000 f903 	bl	800e524 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	685b      	ldr	r3, [r3, #4]
 800e322:	b2db      	uxtb	r3, r3
 800e324:	4619      	mov	r1, r3
 800e326:	6878      	ldr	r0, [r7, #4]
 800e328:	f7ff f958 	bl	800d5dc <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	2202      	movs	r2, #2
 800e330:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e334:	e014      	b.n	800e360 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800e336:	6878      	ldr	r0, [r7, #4]
 800e338:	f000 f9bf 	bl	800e6ba <USBD_CtlSendStatus>
      break;
 800e33c:	e010      	b.n	800e360 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800e33e:	6878      	ldr	r0, [r7, #4]
 800e340:	f000 f9bb 	bl	800e6ba <USBD_CtlSendStatus>
      break;
 800e344:	e00c      	b.n	800e360 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800e346:	6839      	ldr	r1, [r7, #0]
 800e348:	6878      	ldr	r0, [r7, #4]
 800e34a:	f000 f8eb 	bl	800e524 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e34e:	4b07      	ldr	r3, [pc, #28]	@ (800e36c <USBD_SetConfig+0x148>)
 800e350:	781b      	ldrb	r3, [r3, #0]
 800e352:	4619      	mov	r1, r3
 800e354:	6878      	ldr	r0, [r7, #4]
 800e356:	f7ff f941 	bl	800d5dc <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e35a:	2303      	movs	r3, #3
 800e35c:	73fb      	strb	r3, [r7, #15]
      break;
 800e35e:	bf00      	nop
  }

  return ret;
 800e360:	7bfb      	ldrb	r3, [r7, #15]
}
 800e362:	4618      	mov	r0, r3
 800e364:	3710      	adds	r7, #16
 800e366:	46bd      	mov	sp, r7
 800e368:	bd80      	pop	{r7, pc}
 800e36a:	bf00      	nop
 800e36c:	20001dc4 	.word	0x20001dc4

0800e370 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e370:	b580      	push	{r7, lr}
 800e372:	b082      	sub	sp, #8
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
 800e378:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e37a:	683b      	ldr	r3, [r7, #0]
 800e37c:	88db      	ldrh	r3, [r3, #6]
 800e37e:	2b01      	cmp	r3, #1
 800e380:	d004      	beq.n	800e38c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e382:	6839      	ldr	r1, [r7, #0]
 800e384:	6878      	ldr	r0, [r7, #4]
 800e386:	f000 f8cd 	bl	800e524 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e38a:	e023      	b.n	800e3d4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e392:	b2db      	uxtb	r3, r3
 800e394:	2b02      	cmp	r3, #2
 800e396:	dc02      	bgt.n	800e39e <USBD_GetConfig+0x2e>
 800e398:	2b00      	cmp	r3, #0
 800e39a:	dc03      	bgt.n	800e3a4 <USBD_GetConfig+0x34>
 800e39c:	e015      	b.n	800e3ca <USBD_GetConfig+0x5a>
 800e39e:	2b03      	cmp	r3, #3
 800e3a0:	d00b      	beq.n	800e3ba <USBD_GetConfig+0x4a>
 800e3a2:	e012      	b.n	800e3ca <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	2200      	movs	r2, #0
 800e3a8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	3308      	adds	r3, #8
 800e3ae:	2201      	movs	r2, #1
 800e3b0:	4619      	mov	r1, r3
 800e3b2:	6878      	ldr	r0, [r7, #4]
 800e3b4:	f000 f927 	bl	800e606 <USBD_CtlSendData>
        break;
 800e3b8:	e00c      	b.n	800e3d4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	3304      	adds	r3, #4
 800e3be:	2201      	movs	r2, #1
 800e3c0:	4619      	mov	r1, r3
 800e3c2:	6878      	ldr	r0, [r7, #4]
 800e3c4:	f000 f91f 	bl	800e606 <USBD_CtlSendData>
        break;
 800e3c8:	e004      	b.n	800e3d4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e3ca:	6839      	ldr	r1, [r7, #0]
 800e3cc:	6878      	ldr	r0, [r7, #4]
 800e3ce:	f000 f8a9 	bl	800e524 <USBD_CtlError>
        break;
 800e3d2:	bf00      	nop
}
 800e3d4:	bf00      	nop
 800e3d6:	3708      	adds	r7, #8
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	bd80      	pop	{r7, pc}

0800e3dc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e3dc:	b580      	push	{r7, lr}
 800e3de:	b082      	sub	sp, #8
 800e3e0:	af00      	add	r7, sp, #0
 800e3e2:	6078      	str	r0, [r7, #4]
 800e3e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e3ec:	b2db      	uxtb	r3, r3
 800e3ee:	3b01      	subs	r3, #1
 800e3f0:	2b02      	cmp	r3, #2
 800e3f2:	d81e      	bhi.n	800e432 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e3f4:	683b      	ldr	r3, [r7, #0]
 800e3f6:	88db      	ldrh	r3, [r3, #6]
 800e3f8:	2b02      	cmp	r3, #2
 800e3fa:	d004      	beq.n	800e406 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e3fc:	6839      	ldr	r1, [r7, #0]
 800e3fe:	6878      	ldr	r0, [r7, #4]
 800e400:	f000 f890 	bl	800e524 <USBD_CtlError>
        break;
 800e404:	e01a      	b.n	800e43c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	2201      	movs	r2, #1
 800e40a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800e412:	2b00      	cmp	r3, #0
 800e414:	d005      	beq.n	800e422 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	68db      	ldr	r3, [r3, #12]
 800e41a:	f043 0202 	orr.w	r2, r3, #2
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	330c      	adds	r3, #12
 800e426:	2202      	movs	r2, #2
 800e428:	4619      	mov	r1, r3
 800e42a:	6878      	ldr	r0, [r7, #4]
 800e42c:	f000 f8eb 	bl	800e606 <USBD_CtlSendData>
      break;
 800e430:	e004      	b.n	800e43c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e432:	6839      	ldr	r1, [r7, #0]
 800e434:	6878      	ldr	r0, [r7, #4]
 800e436:	f000 f875 	bl	800e524 <USBD_CtlError>
      break;
 800e43a:	bf00      	nop
  }
}
 800e43c:	bf00      	nop
 800e43e:	3708      	adds	r7, #8
 800e440:	46bd      	mov	sp, r7
 800e442:	bd80      	pop	{r7, pc}

0800e444 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e444:	b580      	push	{r7, lr}
 800e446:	b082      	sub	sp, #8
 800e448:	af00      	add	r7, sp, #0
 800e44a:	6078      	str	r0, [r7, #4]
 800e44c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e44e:	683b      	ldr	r3, [r7, #0]
 800e450:	885b      	ldrh	r3, [r3, #2]
 800e452:	2b01      	cmp	r3, #1
 800e454:	d106      	bne.n	800e464 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	2201      	movs	r2, #1
 800e45a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e45e:	6878      	ldr	r0, [r7, #4]
 800e460:	f000 f92b 	bl	800e6ba <USBD_CtlSendStatus>
  }
}
 800e464:	bf00      	nop
 800e466:	3708      	adds	r7, #8
 800e468:	46bd      	mov	sp, r7
 800e46a:	bd80      	pop	{r7, pc}

0800e46c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e46c:	b580      	push	{r7, lr}
 800e46e:	b082      	sub	sp, #8
 800e470:	af00      	add	r7, sp, #0
 800e472:	6078      	str	r0, [r7, #4]
 800e474:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e47c:	b2db      	uxtb	r3, r3
 800e47e:	3b01      	subs	r3, #1
 800e480:	2b02      	cmp	r3, #2
 800e482:	d80b      	bhi.n	800e49c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e484:	683b      	ldr	r3, [r7, #0]
 800e486:	885b      	ldrh	r3, [r3, #2]
 800e488:	2b01      	cmp	r3, #1
 800e48a:	d10c      	bne.n	800e4a6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	2200      	movs	r2, #0
 800e490:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e494:	6878      	ldr	r0, [r7, #4]
 800e496:	f000 f910 	bl	800e6ba <USBD_CtlSendStatus>
      }
      break;
 800e49a:	e004      	b.n	800e4a6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e49c:	6839      	ldr	r1, [r7, #0]
 800e49e:	6878      	ldr	r0, [r7, #4]
 800e4a0:	f000 f840 	bl	800e524 <USBD_CtlError>
      break;
 800e4a4:	e000      	b.n	800e4a8 <USBD_ClrFeature+0x3c>
      break;
 800e4a6:	bf00      	nop
  }
}
 800e4a8:	bf00      	nop
 800e4aa:	3708      	adds	r7, #8
 800e4ac:	46bd      	mov	sp, r7
 800e4ae:	bd80      	pop	{r7, pc}

0800e4b0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e4b0:	b580      	push	{r7, lr}
 800e4b2:	b084      	sub	sp, #16
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	6078      	str	r0, [r7, #4]
 800e4b8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e4ba:	683b      	ldr	r3, [r7, #0]
 800e4bc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	781a      	ldrb	r2, [r3, #0]
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	3301      	adds	r3, #1
 800e4ca:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	781a      	ldrb	r2, [r3, #0]
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	3301      	adds	r3, #1
 800e4d8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e4da:	68f8      	ldr	r0, [r7, #12]
 800e4dc:	f7ff fa92 	bl	800da04 <SWAPBYTE>
 800e4e0:	4603      	mov	r3, r0
 800e4e2:	461a      	mov	r2, r3
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	3301      	adds	r3, #1
 800e4ec:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	3301      	adds	r3, #1
 800e4f2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e4f4:	68f8      	ldr	r0, [r7, #12]
 800e4f6:	f7ff fa85 	bl	800da04 <SWAPBYTE>
 800e4fa:	4603      	mov	r3, r0
 800e4fc:	461a      	mov	r2, r3
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	3301      	adds	r3, #1
 800e506:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	3301      	adds	r3, #1
 800e50c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e50e:	68f8      	ldr	r0, [r7, #12]
 800e510:	f7ff fa78 	bl	800da04 <SWAPBYTE>
 800e514:	4603      	mov	r3, r0
 800e516:	461a      	mov	r2, r3
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	80da      	strh	r2, [r3, #6]
}
 800e51c:	bf00      	nop
 800e51e:	3710      	adds	r7, #16
 800e520:	46bd      	mov	sp, r7
 800e522:	bd80      	pop	{r7, pc}

0800e524 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e524:	b580      	push	{r7, lr}
 800e526:	b082      	sub	sp, #8
 800e528:	af00      	add	r7, sp, #0
 800e52a:	6078      	str	r0, [r7, #4]
 800e52c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e52e:	2180      	movs	r1, #128	@ 0x80
 800e530:	6878      	ldr	r0, [r7, #4]
 800e532:	f000 fc95 	bl	800ee60 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e536:	2100      	movs	r1, #0
 800e538:	6878      	ldr	r0, [r7, #4]
 800e53a:	f000 fc91 	bl	800ee60 <USBD_LL_StallEP>
}
 800e53e:	bf00      	nop
 800e540:	3708      	adds	r7, #8
 800e542:	46bd      	mov	sp, r7
 800e544:	bd80      	pop	{r7, pc}

0800e546 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e546:	b580      	push	{r7, lr}
 800e548:	b086      	sub	sp, #24
 800e54a:	af00      	add	r7, sp, #0
 800e54c:	60f8      	str	r0, [r7, #12]
 800e54e:	60b9      	str	r1, [r7, #8]
 800e550:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e552:	2300      	movs	r3, #0
 800e554:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d036      	beq.n	800e5ca <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e560:	6938      	ldr	r0, [r7, #16]
 800e562:	f000 f836 	bl	800e5d2 <USBD_GetLen>
 800e566:	4603      	mov	r3, r0
 800e568:	3301      	adds	r3, #1
 800e56a:	b29b      	uxth	r3, r3
 800e56c:	005b      	lsls	r3, r3, #1
 800e56e:	b29a      	uxth	r2, r3
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e574:	7dfb      	ldrb	r3, [r7, #23]
 800e576:	68ba      	ldr	r2, [r7, #8]
 800e578:	4413      	add	r3, r2
 800e57a:	687a      	ldr	r2, [r7, #4]
 800e57c:	7812      	ldrb	r2, [r2, #0]
 800e57e:	701a      	strb	r2, [r3, #0]
  idx++;
 800e580:	7dfb      	ldrb	r3, [r7, #23]
 800e582:	3301      	adds	r3, #1
 800e584:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e586:	7dfb      	ldrb	r3, [r7, #23]
 800e588:	68ba      	ldr	r2, [r7, #8]
 800e58a:	4413      	add	r3, r2
 800e58c:	2203      	movs	r2, #3
 800e58e:	701a      	strb	r2, [r3, #0]
  idx++;
 800e590:	7dfb      	ldrb	r3, [r7, #23]
 800e592:	3301      	adds	r3, #1
 800e594:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e596:	e013      	b.n	800e5c0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800e598:	7dfb      	ldrb	r3, [r7, #23]
 800e59a:	68ba      	ldr	r2, [r7, #8]
 800e59c:	4413      	add	r3, r2
 800e59e:	693a      	ldr	r2, [r7, #16]
 800e5a0:	7812      	ldrb	r2, [r2, #0]
 800e5a2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e5a4:	693b      	ldr	r3, [r7, #16]
 800e5a6:	3301      	adds	r3, #1
 800e5a8:	613b      	str	r3, [r7, #16]
    idx++;
 800e5aa:	7dfb      	ldrb	r3, [r7, #23]
 800e5ac:	3301      	adds	r3, #1
 800e5ae:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e5b0:	7dfb      	ldrb	r3, [r7, #23]
 800e5b2:	68ba      	ldr	r2, [r7, #8]
 800e5b4:	4413      	add	r3, r2
 800e5b6:	2200      	movs	r2, #0
 800e5b8:	701a      	strb	r2, [r3, #0]
    idx++;
 800e5ba:	7dfb      	ldrb	r3, [r7, #23]
 800e5bc:	3301      	adds	r3, #1
 800e5be:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e5c0:	693b      	ldr	r3, [r7, #16]
 800e5c2:	781b      	ldrb	r3, [r3, #0]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d1e7      	bne.n	800e598 <USBD_GetString+0x52>
 800e5c8:	e000      	b.n	800e5cc <USBD_GetString+0x86>
    return;
 800e5ca:	bf00      	nop
  }
}
 800e5cc:	3718      	adds	r7, #24
 800e5ce:	46bd      	mov	sp, r7
 800e5d0:	bd80      	pop	{r7, pc}

0800e5d2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e5d2:	b480      	push	{r7}
 800e5d4:	b085      	sub	sp, #20
 800e5d6:	af00      	add	r7, sp, #0
 800e5d8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e5da:	2300      	movs	r3, #0
 800e5dc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e5e2:	e005      	b.n	800e5f0 <USBD_GetLen+0x1e>
  {
    len++;
 800e5e4:	7bfb      	ldrb	r3, [r7, #15]
 800e5e6:	3301      	adds	r3, #1
 800e5e8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e5ea:	68bb      	ldr	r3, [r7, #8]
 800e5ec:	3301      	adds	r3, #1
 800e5ee:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e5f0:	68bb      	ldr	r3, [r7, #8]
 800e5f2:	781b      	ldrb	r3, [r3, #0]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d1f5      	bne.n	800e5e4 <USBD_GetLen+0x12>
  }

  return len;
 800e5f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	3714      	adds	r7, #20
 800e5fe:	46bd      	mov	sp, r7
 800e600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e604:	4770      	bx	lr

0800e606 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e606:	b580      	push	{r7, lr}
 800e608:	b084      	sub	sp, #16
 800e60a:	af00      	add	r7, sp, #0
 800e60c:	60f8      	str	r0, [r7, #12]
 800e60e:	60b9      	str	r1, [r7, #8]
 800e610:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	2202      	movs	r2, #2
 800e616:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	687a      	ldr	r2, [r7, #4]
 800e61e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	687a      	ldr	r2, [r7, #4]
 800e624:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	68ba      	ldr	r2, [r7, #8]
 800e62a:	2100      	movs	r1, #0
 800e62c:	68f8      	ldr	r0, [r7, #12]
 800e62e:	f000 fca0 	bl	800ef72 <USBD_LL_Transmit>

  return USBD_OK;
 800e632:	2300      	movs	r3, #0
}
 800e634:	4618      	mov	r0, r3
 800e636:	3710      	adds	r7, #16
 800e638:	46bd      	mov	sp, r7
 800e63a:	bd80      	pop	{r7, pc}

0800e63c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e63c:	b580      	push	{r7, lr}
 800e63e:	b084      	sub	sp, #16
 800e640:	af00      	add	r7, sp, #0
 800e642:	60f8      	str	r0, [r7, #12]
 800e644:	60b9      	str	r1, [r7, #8]
 800e646:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	68ba      	ldr	r2, [r7, #8]
 800e64c:	2100      	movs	r1, #0
 800e64e:	68f8      	ldr	r0, [r7, #12]
 800e650:	f000 fc8f 	bl	800ef72 <USBD_LL_Transmit>

  return USBD_OK;
 800e654:	2300      	movs	r3, #0
}
 800e656:	4618      	mov	r0, r3
 800e658:	3710      	adds	r7, #16
 800e65a:	46bd      	mov	sp, r7
 800e65c:	bd80      	pop	{r7, pc}

0800e65e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e65e:	b580      	push	{r7, lr}
 800e660:	b084      	sub	sp, #16
 800e662:	af00      	add	r7, sp, #0
 800e664:	60f8      	str	r0, [r7, #12]
 800e666:	60b9      	str	r1, [r7, #8]
 800e668:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	2203      	movs	r2, #3
 800e66e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	687a      	ldr	r2, [r7, #4]
 800e676:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	687a      	ldr	r2, [r7, #4]
 800e67e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	68ba      	ldr	r2, [r7, #8]
 800e686:	2100      	movs	r1, #0
 800e688:	68f8      	ldr	r0, [r7, #12]
 800e68a:	f000 fc93 	bl	800efb4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e68e:	2300      	movs	r3, #0
}
 800e690:	4618      	mov	r0, r3
 800e692:	3710      	adds	r7, #16
 800e694:	46bd      	mov	sp, r7
 800e696:	bd80      	pop	{r7, pc}

0800e698 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e698:	b580      	push	{r7, lr}
 800e69a:	b084      	sub	sp, #16
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	60f8      	str	r0, [r7, #12]
 800e6a0:	60b9      	str	r1, [r7, #8]
 800e6a2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	68ba      	ldr	r2, [r7, #8]
 800e6a8:	2100      	movs	r1, #0
 800e6aa:	68f8      	ldr	r0, [r7, #12]
 800e6ac:	f000 fc82 	bl	800efb4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e6b0:	2300      	movs	r3, #0
}
 800e6b2:	4618      	mov	r0, r3
 800e6b4:	3710      	adds	r7, #16
 800e6b6:	46bd      	mov	sp, r7
 800e6b8:	bd80      	pop	{r7, pc}

0800e6ba <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e6ba:	b580      	push	{r7, lr}
 800e6bc:	b082      	sub	sp, #8
 800e6be:	af00      	add	r7, sp, #0
 800e6c0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	2204      	movs	r2, #4
 800e6c6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e6ca:	2300      	movs	r3, #0
 800e6cc:	2200      	movs	r2, #0
 800e6ce:	2100      	movs	r1, #0
 800e6d0:	6878      	ldr	r0, [r7, #4]
 800e6d2:	f000 fc4e 	bl	800ef72 <USBD_LL_Transmit>

  return USBD_OK;
 800e6d6:	2300      	movs	r3, #0
}
 800e6d8:	4618      	mov	r0, r3
 800e6da:	3708      	adds	r7, #8
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	bd80      	pop	{r7, pc}

0800e6e0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b082      	sub	sp, #8
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	2205      	movs	r2, #5
 800e6ec:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e6f0:	2300      	movs	r3, #0
 800e6f2:	2200      	movs	r2, #0
 800e6f4:	2100      	movs	r1, #0
 800e6f6:	6878      	ldr	r0, [r7, #4]
 800e6f8:	f000 fc5c 	bl	800efb4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e6fc:	2300      	movs	r3, #0
}
 800e6fe:	4618      	mov	r0, r3
 800e700:	3708      	adds	r7, #8
 800e702:	46bd      	mov	sp, r7
 800e704:	bd80      	pop	{r7, pc}
	...

0800e708 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800e708:	b580      	push	{r7, lr}
 800e70a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800e70c:	2200      	movs	r2, #0
 800e70e:	4912      	ldr	r1, [pc, #72]	@ (800e758 <MX_USB_Device_Init+0x50>)
 800e710:	4812      	ldr	r0, [pc, #72]	@ (800e75c <MX_USB_Device_Init+0x54>)
 800e712:	f7fe fed9 	bl	800d4c8 <USBD_Init>
 800e716:	4603      	mov	r3, r0
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d001      	beq.n	800e720 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800e71c:	f7f3 fa18 	bl	8001b50 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800e720:	490f      	ldr	r1, [pc, #60]	@ (800e760 <MX_USB_Device_Init+0x58>)
 800e722:	480e      	ldr	r0, [pc, #56]	@ (800e75c <MX_USB_Device_Init+0x54>)
 800e724:	f7fe ff00 	bl	800d528 <USBD_RegisterClass>
 800e728:	4603      	mov	r3, r0
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d001      	beq.n	800e732 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800e72e:	f7f3 fa0f 	bl	8001b50 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800e732:	490c      	ldr	r1, [pc, #48]	@ (800e764 <MX_USB_Device_Init+0x5c>)
 800e734:	4809      	ldr	r0, [pc, #36]	@ (800e75c <MX_USB_Device_Init+0x54>)
 800e736:	f7fe fe21 	bl	800d37c <USBD_CDC_RegisterInterface>
 800e73a:	4603      	mov	r3, r0
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d001      	beq.n	800e744 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800e740:	f7f3 fa06 	bl	8001b50 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800e744:	4805      	ldr	r0, [pc, #20]	@ (800e75c <MX_USB_Device_Init+0x54>)
 800e746:	f7fe ff16 	bl	800d576 <USBD_Start>
 800e74a:	4603      	mov	r3, r0
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d001      	beq.n	800e754 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800e750:	f7f3 f9fe 	bl	8001b50 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800e754:	bf00      	nop
 800e756:	bd80      	pop	{r7, pc}
 800e758:	20000130 	.word	0x20000130
 800e75c:	20001dc8 	.word	0x20001dc8
 800e760:	20000018 	.word	0x20000018
 800e764:	2000011c 	.word	0x2000011c

0800e768 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e768:	b580      	push	{r7, lr}
 800e76a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e76c:	2200      	movs	r2, #0
 800e76e:	4905      	ldr	r1, [pc, #20]	@ (800e784 <CDC_Init_FS+0x1c>)
 800e770:	4805      	ldr	r0, [pc, #20]	@ (800e788 <CDC_Init_FS+0x20>)
 800e772:	f7fe fe18 	bl	800d3a6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e776:	4905      	ldr	r1, [pc, #20]	@ (800e78c <CDC_Init_FS+0x24>)
 800e778:	4803      	ldr	r0, [pc, #12]	@ (800e788 <CDC_Init_FS+0x20>)
 800e77a:	f7fe fe32 	bl	800d3e2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e77e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e780:	4618      	mov	r0, r3
 800e782:	bd80      	pop	{r7, pc}
 800e784:	20002898 	.word	0x20002898
 800e788:	20001dc8 	.word	0x20001dc8
 800e78c:	20002098 	.word	0x20002098

0800e790 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e790:	b480      	push	{r7}
 800e792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e794:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e796:	4618      	mov	r0, r3
 800e798:	46bd      	mov	sp, r7
 800e79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e79e:	4770      	bx	lr

0800e7a0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e7a0:	b480      	push	{r7}
 800e7a2:	b083      	sub	sp, #12
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	4603      	mov	r3, r0
 800e7a8:	6039      	str	r1, [r7, #0]
 800e7aa:	71fb      	strb	r3, [r7, #7]
 800e7ac:	4613      	mov	r3, r2
 800e7ae:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e7b0:	79fb      	ldrb	r3, [r7, #7]
 800e7b2:	2b23      	cmp	r3, #35	@ 0x23
 800e7b4:	d84a      	bhi.n	800e84c <CDC_Control_FS+0xac>
 800e7b6:	a201      	add	r2, pc, #4	@ (adr r2, 800e7bc <CDC_Control_FS+0x1c>)
 800e7b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7bc:	0800e84d 	.word	0x0800e84d
 800e7c0:	0800e84d 	.word	0x0800e84d
 800e7c4:	0800e84d 	.word	0x0800e84d
 800e7c8:	0800e84d 	.word	0x0800e84d
 800e7cc:	0800e84d 	.word	0x0800e84d
 800e7d0:	0800e84d 	.word	0x0800e84d
 800e7d4:	0800e84d 	.word	0x0800e84d
 800e7d8:	0800e84d 	.word	0x0800e84d
 800e7dc:	0800e84d 	.word	0x0800e84d
 800e7e0:	0800e84d 	.word	0x0800e84d
 800e7e4:	0800e84d 	.word	0x0800e84d
 800e7e8:	0800e84d 	.word	0x0800e84d
 800e7ec:	0800e84d 	.word	0x0800e84d
 800e7f0:	0800e84d 	.word	0x0800e84d
 800e7f4:	0800e84d 	.word	0x0800e84d
 800e7f8:	0800e84d 	.word	0x0800e84d
 800e7fc:	0800e84d 	.word	0x0800e84d
 800e800:	0800e84d 	.word	0x0800e84d
 800e804:	0800e84d 	.word	0x0800e84d
 800e808:	0800e84d 	.word	0x0800e84d
 800e80c:	0800e84d 	.word	0x0800e84d
 800e810:	0800e84d 	.word	0x0800e84d
 800e814:	0800e84d 	.word	0x0800e84d
 800e818:	0800e84d 	.word	0x0800e84d
 800e81c:	0800e84d 	.word	0x0800e84d
 800e820:	0800e84d 	.word	0x0800e84d
 800e824:	0800e84d 	.word	0x0800e84d
 800e828:	0800e84d 	.word	0x0800e84d
 800e82c:	0800e84d 	.word	0x0800e84d
 800e830:	0800e84d 	.word	0x0800e84d
 800e834:	0800e84d 	.word	0x0800e84d
 800e838:	0800e84d 	.word	0x0800e84d
 800e83c:	0800e84d 	.word	0x0800e84d
 800e840:	0800e84d 	.word	0x0800e84d
 800e844:	0800e84d 	.word	0x0800e84d
 800e848:	0800e84d 	.word	0x0800e84d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e84c:	bf00      	nop
  }

  return (USBD_OK);
 800e84e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e850:	4618      	mov	r0, r3
 800e852:	370c      	adds	r7, #12
 800e854:	46bd      	mov	sp, r7
 800e856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e85a:	4770      	bx	lr

0800e85c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e85c:	b580      	push	{r7, lr}
 800e85e:	b082      	sub	sp, #8
 800e860:	af00      	add	r7, sp, #0
 800e862:	6078      	str	r0, [r7, #4]
 800e864:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e866:	6879      	ldr	r1, [r7, #4]
 800e868:	4805      	ldr	r0, [pc, #20]	@ (800e880 <CDC_Receive_FS+0x24>)
 800e86a:	f7fe fdba 	bl	800d3e2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e86e:	4804      	ldr	r0, [pc, #16]	@ (800e880 <CDC_Receive_FS+0x24>)
 800e870:	f7fe fe00 	bl	800d474 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800e874:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e876:	4618      	mov	r0, r3
 800e878:	3708      	adds	r7, #8
 800e87a:	46bd      	mov	sp, r7
 800e87c:	bd80      	pop	{r7, pc}
 800e87e:	bf00      	nop
 800e880:	20001dc8 	.word	0x20001dc8

0800e884 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800e884:	b580      	push	{r7, lr}
 800e886:	b084      	sub	sp, #16
 800e888:	af00      	add	r7, sp, #0
 800e88a:	6078      	str	r0, [r7, #4]
 800e88c:	460b      	mov	r3, r1
 800e88e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e890:	2300      	movs	r3, #0
 800e892:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800e894:	4b0d      	ldr	r3, [pc, #52]	@ (800e8cc <CDC_Transmit_FS+0x48>)
 800e896:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e89a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800e89c:	68bb      	ldr	r3, [r7, #8]
 800e89e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d001      	beq.n	800e8aa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800e8a6:	2301      	movs	r3, #1
 800e8a8:	e00b      	b.n	800e8c2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e8aa:	887b      	ldrh	r3, [r7, #2]
 800e8ac:	461a      	mov	r2, r3
 800e8ae:	6879      	ldr	r1, [r7, #4]
 800e8b0:	4806      	ldr	r0, [pc, #24]	@ (800e8cc <CDC_Transmit_FS+0x48>)
 800e8b2:	f7fe fd78 	bl	800d3a6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e8b6:	4805      	ldr	r0, [pc, #20]	@ (800e8cc <CDC_Transmit_FS+0x48>)
 800e8b8:	f7fe fdac 	bl	800d414 <USBD_CDC_TransmitPacket>
 800e8bc:	4603      	mov	r3, r0
 800e8be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800e8c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8c2:	4618      	mov	r0, r3
 800e8c4:	3710      	adds	r7, #16
 800e8c6:	46bd      	mov	sp, r7
 800e8c8:	bd80      	pop	{r7, pc}
 800e8ca:	bf00      	nop
 800e8cc:	20001dc8 	.word	0x20001dc8

0800e8d0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e8d0:	b480      	push	{r7}
 800e8d2:	b087      	sub	sp, #28
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	60f8      	str	r0, [r7, #12]
 800e8d8:	60b9      	str	r1, [r7, #8]
 800e8da:	4613      	mov	r3, r2
 800e8dc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e8de:	2300      	movs	r3, #0
 800e8e0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e8e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	371c      	adds	r7, #28
 800e8ea:	46bd      	mov	sp, r7
 800e8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f0:	4770      	bx	lr
	...

0800e8f4 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e8f4:	b480      	push	{r7}
 800e8f6:	b083      	sub	sp, #12
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	4603      	mov	r3, r0
 800e8fc:	6039      	str	r1, [r7, #0]
 800e8fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800e900:	683b      	ldr	r3, [r7, #0]
 800e902:	2212      	movs	r2, #18
 800e904:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800e906:	4b03      	ldr	r3, [pc, #12]	@ (800e914 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800e908:	4618      	mov	r0, r3
 800e90a:	370c      	adds	r7, #12
 800e90c:	46bd      	mov	sp, r7
 800e90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e912:	4770      	bx	lr
 800e914:	20000150 	.word	0x20000150

0800e918 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e918:	b480      	push	{r7}
 800e91a:	b083      	sub	sp, #12
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	4603      	mov	r3, r0
 800e920:	6039      	str	r1, [r7, #0]
 800e922:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e924:	683b      	ldr	r3, [r7, #0]
 800e926:	2204      	movs	r2, #4
 800e928:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e92a:	4b03      	ldr	r3, [pc, #12]	@ (800e938 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800e92c:	4618      	mov	r0, r3
 800e92e:	370c      	adds	r7, #12
 800e930:	46bd      	mov	sp, r7
 800e932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e936:	4770      	bx	lr
 800e938:	20000164 	.word	0x20000164

0800e93c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e93c:	b580      	push	{r7, lr}
 800e93e:	b082      	sub	sp, #8
 800e940:	af00      	add	r7, sp, #0
 800e942:	4603      	mov	r3, r0
 800e944:	6039      	str	r1, [r7, #0]
 800e946:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e948:	79fb      	ldrb	r3, [r7, #7]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d105      	bne.n	800e95a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800e94e:	683a      	ldr	r2, [r7, #0]
 800e950:	4907      	ldr	r1, [pc, #28]	@ (800e970 <USBD_CDC_ProductStrDescriptor+0x34>)
 800e952:	4808      	ldr	r0, [pc, #32]	@ (800e974 <USBD_CDC_ProductStrDescriptor+0x38>)
 800e954:	f7ff fdf7 	bl	800e546 <USBD_GetString>
 800e958:	e004      	b.n	800e964 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800e95a:	683a      	ldr	r2, [r7, #0]
 800e95c:	4904      	ldr	r1, [pc, #16]	@ (800e970 <USBD_CDC_ProductStrDescriptor+0x34>)
 800e95e:	4805      	ldr	r0, [pc, #20]	@ (800e974 <USBD_CDC_ProductStrDescriptor+0x38>)
 800e960:	f7ff fdf1 	bl	800e546 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e964:	4b02      	ldr	r3, [pc, #8]	@ (800e970 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800e966:	4618      	mov	r0, r3
 800e968:	3708      	adds	r7, #8
 800e96a:	46bd      	mov	sp, r7
 800e96c:	bd80      	pop	{r7, pc}
 800e96e:	bf00      	nop
 800e970:	20003098 	.word	0x20003098
 800e974:	0801382c 	.word	0x0801382c

0800e978 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e978:	b580      	push	{r7, lr}
 800e97a:	b082      	sub	sp, #8
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	4603      	mov	r3, r0
 800e980:	6039      	str	r1, [r7, #0]
 800e982:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e984:	683a      	ldr	r2, [r7, #0]
 800e986:	4904      	ldr	r1, [pc, #16]	@ (800e998 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800e988:	4804      	ldr	r0, [pc, #16]	@ (800e99c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800e98a:	f7ff fddc 	bl	800e546 <USBD_GetString>
  return USBD_StrDesc;
 800e98e:	4b02      	ldr	r3, [pc, #8]	@ (800e998 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800e990:	4618      	mov	r0, r3
 800e992:	3708      	adds	r7, #8
 800e994:	46bd      	mov	sp, r7
 800e996:	bd80      	pop	{r7, pc}
 800e998:	20003098 	.word	0x20003098
 800e99c:	08013844 	.word	0x08013844

0800e9a0 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e9a0:	b580      	push	{r7, lr}
 800e9a2:	b082      	sub	sp, #8
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	4603      	mov	r3, r0
 800e9a8:	6039      	str	r1, [r7, #0]
 800e9aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e9ac:	683b      	ldr	r3, [r7, #0]
 800e9ae:	221a      	movs	r2, #26
 800e9b0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e9b2:	f000 f843 	bl	800ea3c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800e9b6:	4b02      	ldr	r3, [pc, #8]	@ (800e9c0 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800e9b8:	4618      	mov	r0, r3
 800e9ba:	3708      	adds	r7, #8
 800e9bc:	46bd      	mov	sp, r7
 800e9be:	bd80      	pop	{r7, pc}
 800e9c0:	20000168 	.word	0x20000168

0800e9c4 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	b082      	sub	sp, #8
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	4603      	mov	r3, r0
 800e9cc:	6039      	str	r1, [r7, #0]
 800e9ce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e9d0:	79fb      	ldrb	r3, [r7, #7]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d105      	bne.n	800e9e2 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800e9d6:	683a      	ldr	r2, [r7, #0]
 800e9d8:	4907      	ldr	r1, [pc, #28]	@ (800e9f8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800e9da:	4808      	ldr	r0, [pc, #32]	@ (800e9fc <USBD_CDC_ConfigStrDescriptor+0x38>)
 800e9dc:	f7ff fdb3 	bl	800e546 <USBD_GetString>
 800e9e0:	e004      	b.n	800e9ec <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800e9e2:	683a      	ldr	r2, [r7, #0]
 800e9e4:	4904      	ldr	r1, [pc, #16]	@ (800e9f8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800e9e6:	4805      	ldr	r0, [pc, #20]	@ (800e9fc <USBD_CDC_ConfigStrDescriptor+0x38>)
 800e9e8:	f7ff fdad 	bl	800e546 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e9ec:	4b02      	ldr	r3, [pc, #8]	@ (800e9f8 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	3708      	adds	r7, #8
 800e9f2:	46bd      	mov	sp, r7
 800e9f4:	bd80      	pop	{r7, pc}
 800e9f6:	bf00      	nop
 800e9f8:	20003098 	.word	0x20003098
 800e9fc:	08013858 	.word	0x08013858

0800ea00 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ea00:	b580      	push	{r7, lr}
 800ea02:	b082      	sub	sp, #8
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	4603      	mov	r3, r0
 800ea08:	6039      	str	r1, [r7, #0]
 800ea0a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ea0c:	79fb      	ldrb	r3, [r7, #7]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d105      	bne.n	800ea1e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ea12:	683a      	ldr	r2, [r7, #0]
 800ea14:	4907      	ldr	r1, [pc, #28]	@ (800ea34 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800ea16:	4808      	ldr	r0, [pc, #32]	@ (800ea38 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800ea18:	f7ff fd95 	bl	800e546 <USBD_GetString>
 800ea1c:	e004      	b.n	800ea28 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ea1e:	683a      	ldr	r2, [r7, #0]
 800ea20:	4904      	ldr	r1, [pc, #16]	@ (800ea34 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800ea22:	4805      	ldr	r0, [pc, #20]	@ (800ea38 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800ea24:	f7ff fd8f 	bl	800e546 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ea28:	4b02      	ldr	r3, [pc, #8]	@ (800ea34 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	3708      	adds	r7, #8
 800ea2e:	46bd      	mov	sp, r7
 800ea30:	bd80      	pop	{r7, pc}
 800ea32:	bf00      	nop
 800ea34:	20003098 	.word	0x20003098
 800ea38:	08013864 	.word	0x08013864

0800ea3c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ea3c:	b580      	push	{r7, lr}
 800ea3e:	b084      	sub	sp, #16
 800ea40:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ea42:	4b0f      	ldr	r3, [pc, #60]	@ (800ea80 <Get_SerialNum+0x44>)
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ea48:	4b0e      	ldr	r3, [pc, #56]	@ (800ea84 <Get_SerialNum+0x48>)
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ea4e:	4b0e      	ldr	r3, [pc, #56]	@ (800ea88 <Get_SerialNum+0x4c>)
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ea54:	68fa      	ldr	r2, [r7, #12]
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	4413      	add	r3, r2
 800ea5a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d009      	beq.n	800ea76 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ea62:	2208      	movs	r2, #8
 800ea64:	4909      	ldr	r1, [pc, #36]	@ (800ea8c <Get_SerialNum+0x50>)
 800ea66:	68f8      	ldr	r0, [r7, #12]
 800ea68:	f000 f814 	bl	800ea94 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ea6c:	2204      	movs	r2, #4
 800ea6e:	4908      	ldr	r1, [pc, #32]	@ (800ea90 <Get_SerialNum+0x54>)
 800ea70:	68b8      	ldr	r0, [r7, #8]
 800ea72:	f000 f80f 	bl	800ea94 <IntToUnicode>
  }
}
 800ea76:	bf00      	nop
 800ea78:	3710      	adds	r7, #16
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	bd80      	pop	{r7, pc}
 800ea7e:	bf00      	nop
 800ea80:	1fff7590 	.word	0x1fff7590
 800ea84:	1fff7594 	.word	0x1fff7594
 800ea88:	1fff7598 	.word	0x1fff7598
 800ea8c:	2000016a 	.word	0x2000016a
 800ea90:	2000017a 	.word	0x2000017a

0800ea94 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ea94:	b480      	push	{r7}
 800ea96:	b087      	sub	sp, #28
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	60f8      	str	r0, [r7, #12]
 800ea9c:	60b9      	str	r1, [r7, #8]
 800ea9e:	4613      	mov	r3, r2
 800eaa0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800eaa2:	2300      	movs	r3, #0
 800eaa4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800eaa6:	2300      	movs	r3, #0
 800eaa8:	75fb      	strb	r3, [r7, #23]
 800eaaa:	e027      	b.n	800eafc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	0f1b      	lsrs	r3, r3, #28
 800eab0:	2b09      	cmp	r3, #9
 800eab2:	d80b      	bhi.n	800eacc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	0f1b      	lsrs	r3, r3, #28
 800eab8:	b2da      	uxtb	r2, r3
 800eaba:	7dfb      	ldrb	r3, [r7, #23]
 800eabc:	005b      	lsls	r3, r3, #1
 800eabe:	4619      	mov	r1, r3
 800eac0:	68bb      	ldr	r3, [r7, #8]
 800eac2:	440b      	add	r3, r1
 800eac4:	3230      	adds	r2, #48	@ 0x30
 800eac6:	b2d2      	uxtb	r2, r2
 800eac8:	701a      	strb	r2, [r3, #0]
 800eaca:	e00a      	b.n	800eae2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	0f1b      	lsrs	r3, r3, #28
 800ead0:	b2da      	uxtb	r2, r3
 800ead2:	7dfb      	ldrb	r3, [r7, #23]
 800ead4:	005b      	lsls	r3, r3, #1
 800ead6:	4619      	mov	r1, r3
 800ead8:	68bb      	ldr	r3, [r7, #8]
 800eada:	440b      	add	r3, r1
 800eadc:	3237      	adds	r2, #55	@ 0x37
 800eade:	b2d2      	uxtb	r2, r2
 800eae0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	011b      	lsls	r3, r3, #4
 800eae6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800eae8:	7dfb      	ldrb	r3, [r7, #23]
 800eaea:	005b      	lsls	r3, r3, #1
 800eaec:	3301      	adds	r3, #1
 800eaee:	68ba      	ldr	r2, [r7, #8]
 800eaf0:	4413      	add	r3, r2
 800eaf2:	2200      	movs	r2, #0
 800eaf4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800eaf6:	7dfb      	ldrb	r3, [r7, #23]
 800eaf8:	3301      	adds	r3, #1
 800eafa:	75fb      	strb	r3, [r7, #23]
 800eafc:	7dfa      	ldrb	r2, [r7, #23]
 800eafe:	79fb      	ldrb	r3, [r7, #7]
 800eb00:	429a      	cmp	r2, r3
 800eb02:	d3d3      	bcc.n	800eaac <IntToUnicode+0x18>
  }
}
 800eb04:	bf00      	nop
 800eb06:	bf00      	nop
 800eb08:	371c      	adds	r7, #28
 800eb0a:	46bd      	mov	sp, r7
 800eb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb10:	4770      	bx	lr
	...

0800eb14 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb14:	b580      	push	{r7, lr}
 800eb16:	b098      	sub	sp, #96	@ 0x60
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800eb1c:	f107 030c 	add.w	r3, r7, #12
 800eb20:	2254      	movs	r2, #84	@ 0x54
 800eb22:	2100      	movs	r1, #0
 800eb24:	4618      	mov	r0, r3
 800eb26:	f001 fa8a 	bl	801003e <memset>
  if(pcdHandle->Instance==USB)
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	4a15      	ldr	r2, [pc, #84]	@ (800eb84 <HAL_PCD_MspInit+0x70>)
 800eb30:	4293      	cmp	r3, r2
 800eb32:	d122      	bne.n	800eb7a <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800eb34:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800eb38:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800eb3a:	2300      	movs	r3, #0
 800eb3c:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800eb3e:	f107 030c 	add.w	r3, r7, #12
 800eb42:	4618      	mov	r0, r3
 800eb44:	f7f8 fd90 	bl	8007668 <HAL_RCCEx_PeriphCLKConfig>
 800eb48:	4603      	mov	r3, r0
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d001      	beq.n	800eb52 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800eb4e:	f7f2 ffff 	bl	8001b50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800eb52:	4b0d      	ldr	r3, [pc, #52]	@ (800eb88 <HAL_PCD_MspInit+0x74>)
 800eb54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800eb56:	4a0c      	ldr	r2, [pc, #48]	@ (800eb88 <HAL_PCD_MspInit+0x74>)
 800eb58:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800eb5c:	6593      	str	r3, [r2, #88]	@ 0x58
 800eb5e:	4b0a      	ldr	r3, [pc, #40]	@ (800eb88 <HAL_PCD_MspInit+0x74>)
 800eb60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800eb62:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800eb66:	60bb      	str	r3, [r7, #8]
 800eb68:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800eb6a:	2200      	movs	r2, #0
 800eb6c:	2100      	movs	r1, #0
 800eb6e:	2014      	movs	r0, #20
 800eb70:	f7f5 fd37 	bl	80045e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800eb74:	2014      	movs	r0, #20
 800eb76:	f7f5 fd4e 	bl	8004616 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800eb7a:	bf00      	nop
 800eb7c:	3760      	adds	r7, #96	@ 0x60
 800eb7e:	46bd      	mov	sp, r7
 800eb80:	bd80      	pop	{r7, pc}
 800eb82:	bf00      	nop
 800eb84:	40005c00 	.word	0x40005c00
 800eb88:	40021000 	.word	0x40021000

0800eb8c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb8c:	b580      	push	{r7, lr}
 800eb8e:	b082      	sub	sp, #8
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800eba0:	4619      	mov	r1, r3
 800eba2:	4610      	mov	r0, r2
 800eba4:	f7fe fd32 	bl	800d60c <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800eba8:	bf00      	nop
 800ebaa:	3708      	adds	r7, #8
 800ebac:	46bd      	mov	sp, r7
 800ebae:	bd80      	pop	{r7, pc}

0800ebb0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ebb0:	b580      	push	{r7, lr}
 800ebb2:	b082      	sub	sp, #8
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]
 800ebb8:	460b      	mov	r3, r1
 800ebba:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800ebc2:	78fa      	ldrb	r2, [r7, #3]
 800ebc4:	6879      	ldr	r1, [r7, #4]
 800ebc6:	4613      	mov	r3, r2
 800ebc8:	009b      	lsls	r3, r3, #2
 800ebca:	4413      	add	r3, r2
 800ebcc:	00db      	lsls	r3, r3, #3
 800ebce:	440b      	add	r3, r1
 800ebd0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ebd4:	681a      	ldr	r2, [r3, #0]
 800ebd6:	78fb      	ldrb	r3, [r7, #3]
 800ebd8:	4619      	mov	r1, r3
 800ebda:	f7fe fd6c 	bl	800d6b6 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800ebde:	bf00      	nop
 800ebe0:	3708      	adds	r7, #8
 800ebe2:	46bd      	mov	sp, r7
 800ebe4:	bd80      	pop	{r7, pc}

0800ebe6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ebe6:	b580      	push	{r7, lr}
 800ebe8:	b082      	sub	sp, #8
 800ebea:	af00      	add	r7, sp, #0
 800ebec:	6078      	str	r0, [r7, #4]
 800ebee:	460b      	mov	r3, r1
 800ebf0:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800ebf8:	78fa      	ldrb	r2, [r7, #3]
 800ebfa:	6879      	ldr	r1, [r7, #4]
 800ebfc:	4613      	mov	r3, r2
 800ebfe:	009b      	lsls	r3, r3, #2
 800ec00:	4413      	add	r3, r2
 800ec02:	00db      	lsls	r3, r3, #3
 800ec04:	440b      	add	r3, r1
 800ec06:	3324      	adds	r3, #36	@ 0x24
 800ec08:	681a      	ldr	r2, [r3, #0]
 800ec0a:	78fb      	ldrb	r3, [r7, #3]
 800ec0c:	4619      	mov	r1, r3
 800ec0e:	f7fe fdb5 	bl	800d77c <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800ec12:	bf00      	nop
 800ec14:	3708      	adds	r7, #8
 800ec16:	46bd      	mov	sp, r7
 800ec18:	bd80      	pop	{r7, pc}

0800ec1a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec1a:	b580      	push	{r7, lr}
 800ec1c:	b082      	sub	sp, #8
 800ec1e:	af00      	add	r7, sp, #0
 800ec20:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ec28:	4618      	mov	r0, r3
 800ec2a:	f7fe fec9 	bl	800d9c0 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800ec2e:	bf00      	nop
 800ec30:	3708      	adds	r7, #8
 800ec32:	46bd      	mov	sp, r7
 800ec34:	bd80      	pop	{r7, pc}

0800ec36 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec36:	b580      	push	{r7, lr}
 800ec38:	b084      	sub	sp, #16
 800ec3a:	af00      	add	r7, sp, #0
 800ec3c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ec3e:	2301      	movs	r3, #1
 800ec40:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	795b      	ldrb	r3, [r3, #5]
 800ec46:	2b02      	cmp	r3, #2
 800ec48:	d001      	beq.n	800ec4e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ec4a:	f7f2 ff81 	bl	8001b50 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ec54:	7bfa      	ldrb	r2, [r7, #15]
 800ec56:	4611      	mov	r1, r2
 800ec58:	4618      	mov	r0, r3
 800ec5a:	f7fe fe73 	bl	800d944 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ec64:	4618      	mov	r0, r3
 800ec66:	f7fe fe1f 	bl	800d8a8 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800ec6a:	bf00      	nop
 800ec6c:	3710      	adds	r7, #16
 800ec6e:	46bd      	mov	sp, r7
 800ec70:	bd80      	pop	{r7, pc}
	...

0800ec74 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec74:	b580      	push	{r7, lr}
 800ec76:	b082      	sub	sp, #8
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ec82:	4618      	mov	r0, r3
 800ec84:	f7fe fe6e 	bl	800d964 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	7a5b      	ldrb	r3, [r3, #9]
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d005      	beq.n	800ec9c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ec90:	4b04      	ldr	r3, [pc, #16]	@ (800eca4 <HAL_PCD_SuspendCallback+0x30>)
 800ec92:	691b      	ldr	r3, [r3, #16]
 800ec94:	4a03      	ldr	r2, [pc, #12]	@ (800eca4 <HAL_PCD_SuspendCallback+0x30>)
 800ec96:	f043 0306 	orr.w	r3, r3, #6
 800ec9a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800ec9c:	bf00      	nop
 800ec9e:	3708      	adds	r7, #8
 800eca0:	46bd      	mov	sp, r7
 800eca2:	bd80      	pop	{r7, pc}
 800eca4:	e000ed00 	.word	0xe000ed00

0800eca8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b082      	sub	sp, #8
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	7a5b      	ldrb	r3, [r3, #9]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d007      	beq.n	800ecc8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ecb8:	4b08      	ldr	r3, [pc, #32]	@ (800ecdc <HAL_PCD_ResumeCallback+0x34>)
 800ecba:	691b      	ldr	r3, [r3, #16]
 800ecbc:	4a07      	ldr	r2, [pc, #28]	@ (800ecdc <HAL_PCD_ResumeCallback+0x34>)
 800ecbe:	f023 0306 	bic.w	r3, r3, #6
 800ecc2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800ecc4:	f000 f9f8 	bl	800f0b8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ecce:	4618      	mov	r0, r3
 800ecd0:	f7fe fe5e 	bl	800d990 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800ecd4:	bf00      	nop
 800ecd6:	3708      	adds	r7, #8
 800ecd8:	46bd      	mov	sp, r7
 800ecda:	bd80      	pop	{r7, pc}
 800ecdc:	e000ed00 	.word	0xe000ed00

0800ece0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ece0:	b580      	push	{r7, lr}
 800ece2:	b082      	sub	sp, #8
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800ece8:	4a2b      	ldr	r2, [pc, #172]	@ (800ed98 <USBD_LL_Init+0xb8>)
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	4a29      	ldr	r2, [pc, #164]	@ (800ed98 <USBD_LL_Init+0xb8>)
 800ecf4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800ecf8:	4b27      	ldr	r3, [pc, #156]	@ (800ed98 <USBD_LL_Init+0xb8>)
 800ecfa:	4a28      	ldr	r2, [pc, #160]	@ (800ed9c <USBD_LL_Init+0xbc>)
 800ecfc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ecfe:	4b26      	ldr	r3, [pc, #152]	@ (800ed98 <USBD_LL_Init+0xb8>)
 800ed00:	2208      	movs	r2, #8
 800ed02:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ed04:	4b24      	ldr	r3, [pc, #144]	@ (800ed98 <USBD_LL_Init+0xb8>)
 800ed06:	2202      	movs	r2, #2
 800ed08:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ed0a:	4b23      	ldr	r3, [pc, #140]	@ (800ed98 <USBD_LL_Init+0xb8>)
 800ed0c:	2202      	movs	r2, #2
 800ed0e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800ed10:	4b21      	ldr	r3, [pc, #132]	@ (800ed98 <USBD_LL_Init+0xb8>)
 800ed12:	2200      	movs	r2, #0
 800ed14:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ed16:	4b20      	ldr	r3, [pc, #128]	@ (800ed98 <USBD_LL_Init+0xb8>)
 800ed18:	2200      	movs	r2, #0
 800ed1a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800ed1c:	4b1e      	ldr	r3, [pc, #120]	@ (800ed98 <USBD_LL_Init+0xb8>)
 800ed1e:	2200      	movs	r2, #0
 800ed20:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ed22:	4b1d      	ldr	r3, [pc, #116]	@ (800ed98 <USBD_LL_Init+0xb8>)
 800ed24:	2200      	movs	r2, #0
 800ed26:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ed28:	481b      	ldr	r0, [pc, #108]	@ (800ed98 <USBD_LL_Init+0xb8>)
 800ed2a:	f7f6 f9c0 	bl	80050ae <HAL_PCD_Init>
 800ed2e:	4603      	mov	r3, r0
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d001      	beq.n	800ed38 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800ed34:	f7f2 ff0c 	bl	8001b50 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800ed3e:	2318      	movs	r3, #24
 800ed40:	2200      	movs	r2, #0
 800ed42:	2100      	movs	r1, #0
 800ed44:	f7f7 fe79 	bl	8006a3a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800ed4e:	2358      	movs	r3, #88	@ 0x58
 800ed50:	2200      	movs	r2, #0
 800ed52:	2180      	movs	r1, #128	@ 0x80
 800ed54:	f7f7 fe71 	bl	8006a3a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800ed5e:	23c0      	movs	r3, #192	@ 0xc0
 800ed60:	2200      	movs	r2, #0
 800ed62:	2181      	movs	r1, #129	@ 0x81
 800ed64:	f7f7 fe69 	bl	8006a3a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800ed6e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800ed72:	2200      	movs	r2, #0
 800ed74:	2101      	movs	r1, #1
 800ed76:	f7f7 fe60 	bl	8006a3a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800ed80:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ed84:	2200      	movs	r2, #0
 800ed86:	2182      	movs	r1, #130	@ 0x82
 800ed88:	f7f7 fe57 	bl	8006a3a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800ed8c:	2300      	movs	r3, #0
}
 800ed8e:	4618      	mov	r0, r3
 800ed90:	3708      	adds	r7, #8
 800ed92:	46bd      	mov	sp, r7
 800ed94:	bd80      	pop	{r7, pc}
 800ed96:	bf00      	nop
 800ed98:	20003298 	.word	0x20003298
 800ed9c:	40005c00 	.word	0x40005c00

0800eda0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800eda0:	b580      	push	{r7, lr}
 800eda2:	b084      	sub	sp, #16
 800eda4:	af00      	add	r7, sp, #0
 800eda6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eda8:	2300      	movs	r3, #0
 800edaa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800edac:	2300      	movs	r3, #0
 800edae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800edb6:	4618      	mov	r0, r3
 800edb8:	f7f6 fa47 	bl	800524a <HAL_PCD_Start>
 800edbc:	4603      	mov	r3, r0
 800edbe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800edc0:	7bfb      	ldrb	r3, [r7, #15]
 800edc2:	4618      	mov	r0, r3
 800edc4:	f000 f97e 	bl	800f0c4 <USBD_Get_USB_Status>
 800edc8:	4603      	mov	r3, r0
 800edca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800edcc:	7bbb      	ldrb	r3, [r7, #14]
}
 800edce:	4618      	mov	r0, r3
 800edd0:	3710      	adds	r7, #16
 800edd2:	46bd      	mov	sp, r7
 800edd4:	bd80      	pop	{r7, pc}

0800edd6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800edd6:	b580      	push	{r7, lr}
 800edd8:	b084      	sub	sp, #16
 800edda:	af00      	add	r7, sp, #0
 800eddc:	6078      	str	r0, [r7, #4]
 800edde:	4608      	mov	r0, r1
 800ede0:	4611      	mov	r1, r2
 800ede2:	461a      	mov	r2, r3
 800ede4:	4603      	mov	r3, r0
 800ede6:	70fb      	strb	r3, [r7, #3]
 800ede8:	460b      	mov	r3, r1
 800edea:	70bb      	strb	r3, [r7, #2]
 800edec:	4613      	mov	r3, r2
 800edee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800edf0:	2300      	movs	r3, #0
 800edf2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800edf4:	2300      	movs	r3, #0
 800edf6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800edfe:	78bb      	ldrb	r3, [r7, #2]
 800ee00:	883a      	ldrh	r2, [r7, #0]
 800ee02:	78f9      	ldrb	r1, [r7, #3]
 800ee04:	f7f6 fb8e 	bl	8005524 <HAL_PCD_EP_Open>
 800ee08:	4603      	mov	r3, r0
 800ee0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ee0c:	7bfb      	ldrb	r3, [r7, #15]
 800ee0e:	4618      	mov	r0, r3
 800ee10:	f000 f958 	bl	800f0c4 <USBD_Get_USB_Status>
 800ee14:	4603      	mov	r3, r0
 800ee16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ee18:	7bbb      	ldrb	r3, [r7, #14]
}
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	3710      	adds	r7, #16
 800ee1e:	46bd      	mov	sp, r7
 800ee20:	bd80      	pop	{r7, pc}

0800ee22 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ee22:	b580      	push	{r7, lr}
 800ee24:	b084      	sub	sp, #16
 800ee26:	af00      	add	r7, sp, #0
 800ee28:	6078      	str	r0, [r7, #4]
 800ee2a:	460b      	mov	r3, r1
 800ee2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee2e:	2300      	movs	r3, #0
 800ee30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee32:	2300      	movs	r3, #0
 800ee34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ee3c:	78fa      	ldrb	r2, [r7, #3]
 800ee3e:	4611      	mov	r1, r2
 800ee40:	4618      	mov	r0, r3
 800ee42:	f7f6 fbcc 	bl	80055de <HAL_PCD_EP_Close>
 800ee46:	4603      	mov	r3, r0
 800ee48:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ee4a:	7bfb      	ldrb	r3, [r7, #15]
 800ee4c:	4618      	mov	r0, r3
 800ee4e:	f000 f939 	bl	800f0c4 <USBD_Get_USB_Status>
 800ee52:	4603      	mov	r3, r0
 800ee54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ee56:	7bbb      	ldrb	r3, [r7, #14]
}
 800ee58:	4618      	mov	r0, r3
 800ee5a:	3710      	adds	r7, #16
 800ee5c:	46bd      	mov	sp, r7
 800ee5e:	bd80      	pop	{r7, pc}

0800ee60 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ee60:	b580      	push	{r7, lr}
 800ee62:	b084      	sub	sp, #16
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	6078      	str	r0, [r7, #4]
 800ee68:	460b      	mov	r3, r1
 800ee6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee70:	2300      	movs	r3, #0
 800ee72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ee7a:	78fa      	ldrb	r2, [r7, #3]
 800ee7c:	4611      	mov	r1, r2
 800ee7e:	4618      	mov	r0, r3
 800ee80:	f7f6 fc75 	bl	800576e <HAL_PCD_EP_SetStall>
 800ee84:	4603      	mov	r3, r0
 800ee86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ee88:	7bfb      	ldrb	r3, [r7, #15]
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	f000 f91a 	bl	800f0c4 <USBD_Get_USB_Status>
 800ee90:	4603      	mov	r3, r0
 800ee92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ee94:	7bbb      	ldrb	r3, [r7, #14]
}
 800ee96:	4618      	mov	r0, r3
 800ee98:	3710      	adds	r7, #16
 800ee9a:	46bd      	mov	sp, r7
 800ee9c:	bd80      	pop	{r7, pc}

0800ee9e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ee9e:	b580      	push	{r7, lr}
 800eea0:	b084      	sub	sp, #16
 800eea2:	af00      	add	r7, sp, #0
 800eea4:	6078      	str	r0, [r7, #4]
 800eea6:	460b      	mov	r3, r1
 800eea8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eeaa:	2300      	movs	r3, #0
 800eeac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eeae:	2300      	movs	r3, #0
 800eeb0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800eeb8:	78fa      	ldrb	r2, [r7, #3]
 800eeba:	4611      	mov	r1, r2
 800eebc:	4618      	mov	r0, r3
 800eebe:	f7f6 fca8 	bl	8005812 <HAL_PCD_EP_ClrStall>
 800eec2:	4603      	mov	r3, r0
 800eec4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eec6:	7bfb      	ldrb	r3, [r7, #15]
 800eec8:	4618      	mov	r0, r3
 800eeca:	f000 f8fb 	bl	800f0c4 <USBD_Get_USB_Status>
 800eece:	4603      	mov	r3, r0
 800eed0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eed2:	7bbb      	ldrb	r3, [r7, #14]
}
 800eed4:	4618      	mov	r0, r3
 800eed6:	3710      	adds	r7, #16
 800eed8:	46bd      	mov	sp, r7
 800eeda:	bd80      	pop	{r7, pc}

0800eedc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eedc:	b480      	push	{r7}
 800eede:	b085      	sub	sp, #20
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	6078      	str	r0, [r7, #4]
 800eee4:	460b      	mov	r3, r1
 800eee6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800eeee:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800eef0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	da0b      	bge.n	800ef10 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800eef8:	78fb      	ldrb	r3, [r7, #3]
 800eefa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800eefe:	68f9      	ldr	r1, [r7, #12]
 800ef00:	4613      	mov	r3, r2
 800ef02:	009b      	lsls	r3, r3, #2
 800ef04:	4413      	add	r3, r2
 800ef06:	00db      	lsls	r3, r3, #3
 800ef08:	440b      	add	r3, r1
 800ef0a:	3312      	adds	r3, #18
 800ef0c:	781b      	ldrb	r3, [r3, #0]
 800ef0e:	e00b      	b.n	800ef28 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ef10:	78fb      	ldrb	r3, [r7, #3]
 800ef12:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ef16:	68f9      	ldr	r1, [r7, #12]
 800ef18:	4613      	mov	r3, r2
 800ef1a:	009b      	lsls	r3, r3, #2
 800ef1c:	4413      	add	r3, r2
 800ef1e:	00db      	lsls	r3, r3, #3
 800ef20:	440b      	add	r3, r1
 800ef22:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800ef26:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ef28:	4618      	mov	r0, r3
 800ef2a:	3714      	adds	r7, #20
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef32:	4770      	bx	lr

0800ef34 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ef34:	b580      	push	{r7, lr}
 800ef36:	b084      	sub	sp, #16
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	6078      	str	r0, [r7, #4]
 800ef3c:	460b      	mov	r3, r1
 800ef3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef40:	2300      	movs	r3, #0
 800ef42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ef44:	2300      	movs	r3, #0
 800ef46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ef4e:	78fa      	ldrb	r2, [r7, #3]
 800ef50:	4611      	mov	r1, r2
 800ef52:	4618      	mov	r0, r3
 800ef54:	f7f6 fac2 	bl	80054dc <HAL_PCD_SetAddress>
 800ef58:	4603      	mov	r3, r0
 800ef5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ef5c:	7bfb      	ldrb	r3, [r7, #15]
 800ef5e:	4618      	mov	r0, r3
 800ef60:	f000 f8b0 	bl	800f0c4 <USBD_Get_USB_Status>
 800ef64:	4603      	mov	r3, r0
 800ef66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ef68:	7bbb      	ldrb	r3, [r7, #14]
}
 800ef6a:	4618      	mov	r0, r3
 800ef6c:	3710      	adds	r7, #16
 800ef6e:	46bd      	mov	sp, r7
 800ef70:	bd80      	pop	{r7, pc}

0800ef72 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ef72:	b580      	push	{r7, lr}
 800ef74:	b086      	sub	sp, #24
 800ef76:	af00      	add	r7, sp, #0
 800ef78:	60f8      	str	r0, [r7, #12]
 800ef7a:	607a      	str	r2, [r7, #4]
 800ef7c:	603b      	str	r3, [r7, #0]
 800ef7e:	460b      	mov	r3, r1
 800ef80:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef82:	2300      	movs	r3, #0
 800ef84:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ef86:	2300      	movs	r3, #0
 800ef88:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800ef90:	7af9      	ldrb	r1, [r7, #11]
 800ef92:	683b      	ldr	r3, [r7, #0]
 800ef94:	687a      	ldr	r2, [r7, #4]
 800ef96:	f7f6 fbb3 	bl	8005700 <HAL_PCD_EP_Transmit>
 800ef9a:	4603      	mov	r3, r0
 800ef9c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ef9e:	7dfb      	ldrb	r3, [r7, #23]
 800efa0:	4618      	mov	r0, r3
 800efa2:	f000 f88f 	bl	800f0c4 <USBD_Get_USB_Status>
 800efa6:	4603      	mov	r3, r0
 800efa8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800efaa:	7dbb      	ldrb	r3, [r7, #22]
}
 800efac:	4618      	mov	r0, r3
 800efae:	3718      	adds	r7, #24
 800efb0:	46bd      	mov	sp, r7
 800efb2:	bd80      	pop	{r7, pc}

0800efb4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800efb4:	b580      	push	{r7, lr}
 800efb6:	b086      	sub	sp, #24
 800efb8:	af00      	add	r7, sp, #0
 800efba:	60f8      	str	r0, [r7, #12]
 800efbc:	607a      	str	r2, [r7, #4]
 800efbe:	603b      	str	r3, [r7, #0]
 800efc0:	460b      	mov	r3, r1
 800efc2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800efc4:	2300      	movs	r3, #0
 800efc6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800efc8:	2300      	movs	r3, #0
 800efca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800efd2:	7af9      	ldrb	r1, [r7, #11]
 800efd4:	683b      	ldr	r3, [r7, #0]
 800efd6:	687a      	ldr	r2, [r7, #4]
 800efd8:	f7f6 fb49 	bl	800566e <HAL_PCD_EP_Receive>
 800efdc:	4603      	mov	r3, r0
 800efde:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800efe0:	7dfb      	ldrb	r3, [r7, #23]
 800efe2:	4618      	mov	r0, r3
 800efe4:	f000 f86e 	bl	800f0c4 <USBD_Get_USB_Status>
 800efe8:	4603      	mov	r3, r0
 800efea:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800efec:	7dbb      	ldrb	r3, [r7, #22]
}
 800efee:	4618      	mov	r0, r3
 800eff0:	3718      	adds	r7, #24
 800eff2:	46bd      	mov	sp, r7
 800eff4:	bd80      	pop	{r7, pc}

0800eff6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eff6:	b580      	push	{r7, lr}
 800eff8:	b082      	sub	sp, #8
 800effa:	af00      	add	r7, sp, #0
 800effc:	6078      	str	r0, [r7, #4]
 800effe:	460b      	mov	r3, r1
 800f000:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800f008:	78fa      	ldrb	r2, [r7, #3]
 800f00a:	4611      	mov	r1, r2
 800f00c:	4618      	mov	r0, r3
 800f00e:	f7f6 fb5f 	bl	80056d0 <HAL_PCD_EP_GetRxCount>
 800f012:	4603      	mov	r3, r0
}
 800f014:	4618      	mov	r0, r3
 800f016:	3708      	adds	r7, #8
 800f018:	46bd      	mov	sp, r7
 800f01a:	bd80      	pop	{r7, pc}

0800f01c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f01c:	b580      	push	{r7, lr}
 800f01e:	b082      	sub	sp, #8
 800f020:	af00      	add	r7, sp, #0
 800f022:	6078      	str	r0, [r7, #4]
 800f024:	460b      	mov	r3, r1
 800f026:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800f028:	78fb      	ldrb	r3, [r7, #3]
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d002      	beq.n	800f034 <HAL_PCDEx_LPM_Callback+0x18>
 800f02e:	2b01      	cmp	r3, #1
 800f030:	d013      	beq.n	800f05a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800f032:	e023      	b.n	800f07c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	7a5b      	ldrb	r3, [r3, #9]
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d007      	beq.n	800f04c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800f03c:	f000 f83c 	bl	800f0b8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f040:	4b10      	ldr	r3, [pc, #64]	@ (800f084 <HAL_PCDEx_LPM_Callback+0x68>)
 800f042:	691b      	ldr	r3, [r3, #16]
 800f044:	4a0f      	ldr	r2, [pc, #60]	@ (800f084 <HAL_PCDEx_LPM_Callback+0x68>)
 800f046:	f023 0306 	bic.w	r3, r3, #6
 800f04a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f052:	4618      	mov	r0, r3
 800f054:	f7fe fc9c 	bl	800d990 <USBD_LL_Resume>
    break;
 800f058:	e010      	b.n	800f07c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f060:	4618      	mov	r0, r3
 800f062:	f7fe fc7f 	bl	800d964 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	7a5b      	ldrb	r3, [r3, #9]
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d005      	beq.n	800f07a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f06e:	4b05      	ldr	r3, [pc, #20]	@ (800f084 <HAL_PCDEx_LPM_Callback+0x68>)
 800f070:	691b      	ldr	r3, [r3, #16]
 800f072:	4a04      	ldr	r2, [pc, #16]	@ (800f084 <HAL_PCDEx_LPM_Callback+0x68>)
 800f074:	f043 0306 	orr.w	r3, r3, #6
 800f078:	6113      	str	r3, [r2, #16]
    break;
 800f07a:	bf00      	nop
}
 800f07c:	bf00      	nop
 800f07e:	3708      	adds	r7, #8
 800f080:	46bd      	mov	sp, r7
 800f082:	bd80      	pop	{r7, pc}
 800f084:	e000ed00 	.word	0xe000ed00

0800f088 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f088:	b480      	push	{r7}
 800f08a:	b083      	sub	sp, #12
 800f08c:	af00      	add	r7, sp, #0
 800f08e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f090:	4b03      	ldr	r3, [pc, #12]	@ (800f0a0 <USBD_static_malloc+0x18>)
}
 800f092:	4618      	mov	r0, r3
 800f094:	370c      	adds	r7, #12
 800f096:	46bd      	mov	sp, r7
 800f098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f09c:	4770      	bx	lr
 800f09e:	bf00      	nop
 800f0a0:	20003574 	.word	0x20003574

0800f0a4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f0a4:	b480      	push	{r7}
 800f0a6:	b083      	sub	sp, #12
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	6078      	str	r0, [r7, #4]

}
 800f0ac:	bf00      	nop
 800f0ae:	370c      	adds	r7, #12
 800f0b0:	46bd      	mov	sp, r7
 800f0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b6:	4770      	bx	lr

0800f0b8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800f0b8:	b580      	push	{r7, lr}
 800f0ba:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800f0bc:	f7f1 ff38 	bl	8000f30 <SystemClock_Config>
}
 800f0c0:	bf00      	nop
 800f0c2:	bd80      	pop	{r7, pc}

0800f0c4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f0c4:	b480      	push	{r7}
 800f0c6:	b085      	sub	sp, #20
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	4603      	mov	r3, r0
 800f0cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f0d2:	79fb      	ldrb	r3, [r7, #7]
 800f0d4:	2b03      	cmp	r3, #3
 800f0d6:	d817      	bhi.n	800f108 <USBD_Get_USB_Status+0x44>
 800f0d8:	a201      	add	r2, pc, #4	@ (adr r2, 800f0e0 <USBD_Get_USB_Status+0x1c>)
 800f0da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0de:	bf00      	nop
 800f0e0:	0800f0f1 	.word	0x0800f0f1
 800f0e4:	0800f0f7 	.word	0x0800f0f7
 800f0e8:	0800f0fd 	.word	0x0800f0fd
 800f0ec:	0800f103 	.word	0x0800f103
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f0f0:	2300      	movs	r3, #0
 800f0f2:	73fb      	strb	r3, [r7, #15]
    break;
 800f0f4:	e00b      	b.n	800f10e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f0f6:	2303      	movs	r3, #3
 800f0f8:	73fb      	strb	r3, [r7, #15]
    break;
 800f0fa:	e008      	b.n	800f10e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f0fc:	2301      	movs	r3, #1
 800f0fe:	73fb      	strb	r3, [r7, #15]
    break;
 800f100:	e005      	b.n	800f10e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f102:	2303      	movs	r3, #3
 800f104:	73fb      	strb	r3, [r7, #15]
    break;
 800f106:	e002      	b.n	800f10e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f108:	2303      	movs	r3, #3
 800f10a:	73fb      	strb	r3, [r7, #15]
    break;
 800f10c:	bf00      	nop
  }
  return usb_status;
 800f10e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f110:	4618      	mov	r0, r3
 800f112:	3714      	adds	r7, #20
 800f114:	46bd      	mov	sp, r7
 800f116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f11a:	4770      	bx	lr

0800f11c <__cvt>:
 800f11c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f120:	ec57 6b10 	vmov	r6, r7, d0
 800f124:	2f00      	cmp	r7, #0
 800f126:	460c      	mov	r4, r1
 800f128:	4619      	mov	r1, r3
 800f12a:	463b      	mov	r3, r7
 800f12c:	bfbb      	ittet	lt
 800f12e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800f132:	461f      	movlt	r7, r3
 800f134:	2300      	movge	r3, #0
 800f136:	232d      	movlt	r3, #45	@ 0x2d
 800f138:	700b      	strb	r3, [r1, #0]
 800f13a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f13c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800f140:	4691      	mov	r9, r2
 800f142:	f023 0820 	bic.w	r8, r3, #32
 800f146:	bfbc      	itt	lt
 800f148:	4632      	movlt	r2, r6
 800f14a:	4616      	movlt	r6, r2
 800f14c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f150:	d005      	beq.n	800f15e <__cvt+0x42>
 800f152:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800f156:	d100      	bne.n	800f15a <__cvt+0x3e>
 800f158:	3401      	adds	r4, #1
 800f15a:	2102      	movs	r1, #2
 800f15c:	e000      	b.n	800f160 <__cvt+0x44>
 800f15e:	2103      	movs	r1, #3
 800f160:	ab03      	add	r3, sp, #12
 800f162:	9301      	str	r3, [sp, #4]
 800f164:	ab02      	add	r3, sp, #8
 800f166:	9300      	str	r3, [sp, #0]
 800f168:	ec47 6b10 	vmov	d0, r6, r7
 800f16c:	4653      	mov	r3, sl
 800f16e:	4622      	mov	r2, r4
 800f170:	f001 f876 	bl	8010260 <_dtoa_r>
 800f174:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800f178:	4605      	mov	r5, r0
 800f17a:	d119      	bne.n	800f1b0 <__cvt+0x94>
 800f17c:	f019 0f01 	tst.w	r9, #1
 800f180:	d00e      	beq.n	800f1a0 <__cvt+0x84>
 800f182:	eb00 0904 	add.w	r9, r0, r4
 800f186:	2200      	movs	r2, #0
 800f188:	2300      	movs	r3, #0
 800f18a:	4630      	mov	r0, r6
 800f18c:	4639      	mov	r1, r7
 800f18e:	f7f1 fcc3 	bl	8000b18 <__aeabi_dcmpeq>
 800f192:	b108      	cbz	r0, 800f198 <__cvt+0x7c>
 800f194:	f8cd 900c 	str.w	r9, [sp, #12]
 800f198:	2230      	movs	r2, #48	@ 0x30
 800f19a:	9b03      	ldr	r3, [sp, #12]
 800f19c:	454b      	cmp	r3, r9
 800f19e:	d31e      	bcc.n	800f1de <__cvt+0xc2>
 800f1a0:	9b03      	ldr	r3, [sp, #12]
 800f1a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f1a4:	1b5b      	subs	r3, r3, r5
 800f1a6:	4628      	mov	r0, r5
 800f1a8:	6013      	str	r3, [r2, #0]
 800f1aa:	b004      	add	sp, #16
 800f1ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f1b0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f1b4:	eb00 0904 	add.w	r9, r0, r4
 800f1b8:	d1e5      	bne.n	800f186 <__cvt+0x6a>
 800f1ba:	7803      	ldrb	r3, [r0, #0]
 800f1bc:	2b30      	cmp	r3, #48	@ 0x30
 800f1be:	d10a      	bne.n	800f1d6 <__cvt+0xba>
 800f1c0:	2200      	movs	r2, #0
 800f1c2:	2300      	movs	r3, #0
 800f1c4:	4630      	mov	r0, r6
 800f1c6:	4639      	mov	r1, r7
 800f1c8:	f7f1 fca6 	bl	8000b18 <__aeabi_dcmpeq>
 800f1cc:	b918      	cbnz	r0, 800f1d6 <__cvt+0xba>
 800f1ce:	f1c4 0401 	rsb	r4, r4, #1
 800f1d2:	f8ca 4000 	str.w	r4, [sl]
 800f1d6:	f8da 3000 	ldr.w	r3, [sl]
 800f1da:	4499      	add	r9, r3
 800f1dc:	e7d3      	b.n	800f186 <__cvt+0x6a>
 800f1de:	1c59      	adds	r1, r3, #1
 800f1e0:	9103      	str	r1, [sp, #12]
 800f1e2:	701a      	strb	r2, [r3, #0]
 800f1e4:	e7d9      	b.n	800f19a <__cvt+0x7e>

0800f1e6 <__exponent>:
 800f1e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f1e8:	2900      	cmp	r1, #0
 800f1ea:	bfba      	itte	lt
 800f1ec:	4249      	neglt	r1, r1
 800f1ee:	232d      	movlt	r3, #45	@ 0x2d
 800f1f0:	232b      	movge	r3, #43	@ 0x2b
 800f1f2:	2909      	cmp	r1, #9
 800f1f4:	7002      	strb	r2, [r0, #0]
 800f1f6:	7043      	strb	r3, [r0, #1]
 800f1f8:	dd29      	ble.n	800f24e <__exponent+0x68>
 800f1fa:	f10d 0307 	add.w	r3, sp, #7
 800f1fe:	461d      	mov	r5, r3
 800f200:	270a      	movs	r7, #10
 800f202:	461a      	mov	r2, r3
 800f204:	fbb1 f6f7 	udiv	r6, r1, r7
 800f208:	fb07 1416 	mls	r4, r7, r6, r1
 800f20c:	3430      	adds	r4, #48	@ 0x30
 800f20e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800f212:	460c      	mov	r4, r1
 800f214:	2c63      	cmp	r4, #99	@ 0x63
 800f216:	f103 33ff 	add.w	r3, r3, #4294967295
 800f21a:	4631      	mov	r1, r6
 800f21c:	dcf1      	bgt.n	800f202 <__exponent+0x1c>
 800f21e:	3130      	adds	r1, #48	@ 0x30
 800f220:	1e94      	subs	r4, r2, #2
 800f222:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f226:	1c41      	adds	r1, r0, #1
 800f228:	4623      	mov	r3, r4
 800f22a:	42ab      	cmp	r3, r5
 800f22c:	d30a      	bcc.n	800f244 <__exponent+0x5e>
 800f22e:	f10d 0309 	add.w	r3, sp, #9
 800f232:	1a9b      	subs	r3, r3, r2
 800f234:	42ac      	cmp	r4, r5
 800f236:	bf88      	it	hi
 800f238:	2300      	movhi	r3, #0
 800f23a:	3302      	adds	r3, #2
 800f23c:	4403      	add	r3, r0
 800f23e:	1a18      	subs	r0, r3, r0
 800f240:	b003      	add	sp, #12
 800f242:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f244:	f813 6b01 	ldrb.w	r6, [r3], #1
 800f248:	f801 6f01 	strb.w	r6, [r1, #1]!
 800f24c:	e7ed      	b.n	800f22a <__exponent+0x44>
 800f24e:	2330      	movs	r3, #48	@ 0x30
 800f250:	3130      	adds	r1, #48	@ 0x30
 800f252:	7083      	strb	r3, [r0, #2]
 800f254:	70c1      	strb	r1, [r0, #3]
 800f256:	1d03      	adds	r3, r0, #4
 800f258:	e7f1      	b.n	800f23e <__exponent+0x58>
	...

0800f25c <_printf_float>:
 800f25c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f260:	b08d      	sub	sp, #52	@ 0x34
 800f262:	460c      	mov	r4, r1
 800f264:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800f268:	4616      	mov	r6, r2
 800f26a:	461f      	mov	r7, r3
 800f26c:	4605      	mov	r5, r0
 800f26e:	f000 feef 	bl	8010050 <_localeconv_r>
 800f272:	6803      	ldr	r3, [r0, #0]
 800f274:	9304      	str	r3, [sp, #16]
 800f276:	4618      	mov	r0, r3
 800f278:	f7f1 f822 	bl	80002c0 <strlen>
 800f27c:	2300      	movs	r3, #0
 800f27e:	930a      	str	r3, [sp, #40]	@ 0x28
 800f280:	f8d8 3000 	ldr.w	r3, [r8]
 800f284:	9005      	str	r0, [sp, #20]
 800f286:	3307      	adds	r3, #7
 800f288:	f023 0307 	bic.w	r3, r3, #7
 800f28c:	f103 0208 	add.w	r2, r3, #8
 800f290:	f894 a018 	ldrb.w	sl, [r4, #24]
 800f294:	f8d4 b000 	ldr.w	fp, [r4]
 800f298:	f8c8 2000 	str.w	r2, [r8]
 800f29c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f2a0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800f2a4:	9307      	str	r3, [sp, #28]
 800f2a6:	f8cd 8018 	str.w	r8, [sp, #24]
 800f2aa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800f2ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f2b2:	4b9c      	ldr	r3, [pc, #624]	@ (800f524 <_printf_float+0x2c8>)
 800f2b4:	f04f 32ff 	mov.w	r2, #4294967295
 800f2b8:	f7f1 fc60 	bl	8000b7c <__aeabi_dcmpun>
 800f2bc:	bb70      	cbnz	r0, 800f31c <_printf_float+0xc0>
 800f2be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f2c2:	4b98      	ldr	r3, [pc, #608]	@ (800f524 <_printf_float+0x2c8>)
 800f2c4:	f04f 32ff 	mov.w	r2, #4294967295
 800f2c8:	f7f1 fc3a 	bl	8000b40 <__aeabi_dcmple>
 800f2cc:	bb30      	cbnz	r0, 800f31c <_printf_float+0xc0>
 800f2ce:	2200      	movs	r2, #0
 800f2d0:	2300      	movs	r3, #0
 800f2d2:	4640      	mov	r0, r8
 800f2d4:	4649      	mov	r1, r9
 800f2d6:	f7f1 fc29 	bl	8000b2c <__aeabi_dcmplt>
 800f2da:	b110      	cbz	r0, 800f2e2 <_printf_float+0x86>
 800f2dc:	232d      	movs	r3, #45	@ 0x2d
 800f2de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f2e2:	4a91      	ldr	r2, [pc, #580]	@ (800f528 <_printf_float+0x2cc>)
 800f2e4:	4b91      	ldr	r3, [pc, #580]	@ (800f52c <_printf_float+0x2d0>)
 800f2e6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f2ea:	bf94      	ite	ls
 800f2ec:	4690      	movls	r8, r2
 800f2ee:	4698      	movhi	r8, r3
 800f2f0:	2303      	movs	r3, #3
 800f2f2:	6123      	str	r3, [r4, #16]
 800f2f4:	f02b 0304 	bic.w	r3, fp, #4
 800f2f8:	6023      	str	r3, [r4, #0]
 800f2fa:	f04f 0900 	mov.w	r9, #0
 800f2fe:	9700      	str	r7, [sp, #0]
 800f300:	4633      	mov	r3, r6
 800f302:	aa0b      	add	r2, sp, #44	@ 0x2c
 800f304:	4621      	mov	r1, r4
 800f306:	4628      	mov	r0, r5
 800f308:	f000 f9d2 	bl	800f6b0 <_printf_common>
 800f30c:	3001      	adds	r0, #1
 800f30e:	f040 808d 	bne.w	800f42c <_printf_float+0x1d0>
 800f312:	f04f 30ff 	mov.w	r0, #4294967295
 800f316:	b00d      	add	sp, #52	@ 0x34
 800f318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f31c:	4642      	mov	r2, r8
 800f31e:	464b      	mov	r3, r9
 800f320:	4640      	mov	r0, r8
 800f322:	4649      	mov	r1, r9
 800f324:	f7f1 fc2a 	bl	8000b7c <__aeabi_dcmpun>
 800f328:	b140      	cbz	r0, 800f33c <_printf_float+0xe0>
 800f32a:	464b      	mov	r3, r9
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	bfbc      	itt	lt
 800f330:	232d      	movlt	r3, #45	@ 0x2d
 800f332:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800f336:	4a7e      	ldr	r2, [pc, #504]	@ (800f530 <_printf_float+0x2d4>)
 800f338:	4b7e      	ldr	r3, [pc, #504]	@ (800f534 <_printf_float+0x2d8>)
 800f33a:	e7d4      	b.n	800f2e6 <_printf_float+0x8a>
 800f33c:	6863      	ldr	r3, [r4, #4]
 800f33e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800f342:	9206      	str	r2, [sp, #24]
 800f344:	1c5a      	adds	r2, r3, #1
 800f346:	d13b      	bne.n	800f3c0 <_printf_float+0x164>
 800f348:	2306      	movs	r3, #6
 800f34a:	6063      	str	r3, [r4, #4]
 800f34c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800f350:	2300      	movs	r3, #0
 800f352:	6022      	str	r2, [r4, #0]
 800f354:	9303      	str	r3, [sp, #12]
 800f356:	ab0a      	add	r3, sp, #40	@ 0x28
 800f358:	e9cd a301 	strd	sl, r3, [sp, #4]
 800f35c:	ab09      	add	r3, sp, #36	@ 0x24
 800f35e:	9300      	str	r3, [sp, #0]
 800f360:	6861      	ldr	r1, [r4, #4]
 800f362:	ec49 8b10 	vmov	d0, r8, r9
 800f366:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800f36a:	4628      	mov	r0, r5
 800f36c:	f7ff fed6 	bl	800f11c <__cvt>
 800f370:	9b06      	ldr	r3, [sp, #24]
 800f372:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f374:	2b47      	cmp	r3, #71	@ 0x47
 800f376:	4680      	mov	r8, r0
 800f378:	d129      	bne.n	800f3ce <_printf_float+0x172>
 800f37a:	1cc8      	adds	r0, r1, #3
 800f37c:	db02      	blt.n	800f384 <_printf_float+0x128>
 800f37e:	6863      	ldr	r3, [r4, #4]
 800f380:	4299      	cmp	r1, r3
 800f382:	dd41      	ble.n	800f408 <_printf_float+0x1ac>
 800f384:	f1aa 0a02 	sub.w	sl, sl, #2
 800f388:	fa5f fa8a 	uxtb.w	sl, sl
 800f38c:	3901      	subs	r1, #1
 800f38e:	4652      	mov	r2, sl
 800f390:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800f394:	9109      	str	r1, [sp, #36]	@ 0x24
 800f396:	f7ff ff26 	bl	800f1e6 <__exponent>
 800f39a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f39c:	1813      	adds	r3, r2, r0
 800f39e:	2a01      	cmp	r2, #1
 800f3a0:	4681      	mov	r9, r0
 800f3a2:	6123      	str	r3, [r4, #16]
 800f3a4:	dc02      	bgt.n	800f3ac <_printf_float+0x150>
 800f3a6:	6822      	ldr	r2, [r4, #0]
 800f3a8:	07d2      	lsls	r2, r2, #31
 800f3aa:	d501      	bpl.n	800f3b0 <_printf_float+0x154>
 800f3ac:	3301      	adds	r3, #1
 800f3ae:	6123      	str	r3, [r4, #16]
 800f3b0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d0a2      	beq.n	800f2fe <_printf_float+0xa2>
 800f3b8:	232d      	movs	r3, #45	@ 0x2d
 800f3ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f3be:	e79e      	b.n	800f2fe <_printf_float+0xa2>
 800f3c0:	9a06      	ldr	r2, [sp, #24]
 800f3c2:	2a47      	cmp	r2, #71	@ 0x47
 800f3c4:	d1c2      	bne.n	800f34c <_printf_float+0xf0>
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d1c0      	bne.n	800f34c <_printf_float+0xf0>
 800f3ca:	2301      	movs	r3, #1
 800f3cc:	e7bd      	b.n	800f34a <_printf_float+0xee>
 800f3ce:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f3d2:	d9db      	bls.n	800f38c <_printf_float+0x130>
 800f3d4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800f3d8:	d118      	bne.n	800f40c <_printf_float+0x1b0>
 800f3da:	2900      	cmp	r1, #0
 800f3dc:	6863      	ldr	r3, [r4, #4]
 800f3de:	dd0b      	ble.n	800f3f8 <_printf_float+0x19c>
 800f3e0:	6121      	str	r1, [r4, #16]
 800f3e2:	b913      	cbnz	r3, 800f3ea <_printf_float+0x18e>
 800f3e4:	6822      	ldr	r2, [r4, #0]
 800f3e6:	07d0      	lsls	r0, r2, #31
 800f3e8:	d502      	bpl.n	800f3f0 <_printf_float+0x194>
 800f3ea:	3301      	adds	r3, #1
 800f3ec:	440b      	add	r3, r1
 800f3ee:	6123      	str	r3, [r4, #16]
 800f3f0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800f3f2:	f04f 0900 	mov.w	r9, #0
 800f3f6:	e7db      	b.n	800f3b0 <_printf_float+0x154>
 800f3f8:	b913      	cbnz	r3, 800f400 <_printf_float+0x1a4>
 800f3fa:	6822      	ldr	r2, [r4, #0]
 800f3fc:	07d2      	lsls	r2, r2, #31
 800f3fe:	d501      	bpl.n	800f404 <_printf_float+0x1a8>
 800f400:	3302      	adds	r3, #2
 800f402:	e7f4      	b.n	800f3ee <_printf_float+0x192>
 800f404:	2301      	movs	r3, #1
 800f406:	e7f2      	b.n	800f3ee <_printf_float+0x192>
 800f408:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800f40c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f40e:	4299      	cmp	r1, r3
 800f410:	db05      	blt.n	800f41e <_printf_float+0x1c2>
 800f412:	6823      	ldr	r3, [r4, #0]
 800f414:	6121      	str	r1, [r4, #16]
 800f416:	07d8      	lsls	r0, r3, #31
 800f418:	d5ea      	bpl.n	800f3f0 <_printf_float+0x194>
 800f41a:	1c4b      	adds	r3, r1, #1
 800f41c:	e7e7      	b.n	800f3ee <_printf_float+0x192>
 800f41e:	2900      	cmp	r1, #0
 800f420:	bfd4      	ite	le
 800f422:	f1c1 0202 	rsble	r2, r1, #2
 800f426:	2201      	movgt	r2, #1
 800f428:	4413      	add	r3, r2
 800f42a:	e7e0      	b.n	800f3ee <_printf_float+0x192>
 800f42c:	6823      	ldr	r3, [r4, #0]
 800f42e:	055a      	lsls	r2, r3, #21
 800f430:	d407      	bmi.n	800f442 <_printf_float+0x1e6>
 800f432:	6923      	ldr	r3, [r4, #16]
 800f434:	4642      	mov	r2, r8
 800f436:	4631      	mov	r1, r6
 800f438:	4628      	mov	r0, r5
 800f43a:	47b8      	blx	r7
 800f43c:	3001      	adds	r0, #1
 800f43e:	d12b      	bne.n	800f498 <_printf_float+0x23c>
 800f440:	e767      	b.n	800f312 <_printf_float+0xb6>
 800f442:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f446:	f240 80dd 	bls.w	800f604 <_printf_float+0x3a8>
 800f44a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f44e:	2200      	movs	r2, #0
 800f450:	2300      	movs	r3, #0
 800f452:	f7f1 fb61 	bl	8000b18 <__aeabi_dcmpeq>
 800f456:	2800      	cmp	r0, #0
 800f458:	d033      	beq.n	800f4c2 <_printf_float+0x266>
 800f45a:	4a37      	ldr	r2, [pc, #220]	@ (800f538 <_printf_float+0x2dc>)
 800f45c:	2301      	movs	r3, #1
 800f45e:	4631      	mov	r1, r6
 800f460:	4628      	mov	r0, r5
 800f462:	47b8      	blx	r7
 800f464:	3001      	adds	r0, #1
 800f466:	f43f af54 	beq.w	800f312 <_printf_float+0xb6>
 800f46a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800f46e:	4543      	cmp	r3, r8
 800f470:	db02      	blt.n	800f478 <_printf_float+0x21c>
 800f472:	6823      	ldr	r3, [r4, #0]
 800f474:	07d8      	lsls	r0, r3, #31
 800f476:	d50f      	bpl.n	800f498 <_printf_float+0x23c>
 800f478:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f47c:	4631      	mov	r1, r6
 800f47e:	4628      	mov	r0, r5
 800f480:	47b8      	blx	r7
 800f482:	3001      	adds	r0, #1
 800f484:	f43f af45 	beq.w	800f312 <_printf_float+0xb6>
 800f488:	f04f 0900 	mov.w	r9, #0
 800f48c:	f108 38ff 	add.w	r8, r8, #4294967295
 800f490:	f104 0a1a 	add.w	sl, r4, #26
 800f494:	45c8      	cmp	r8, r9
 800f496:	dc09      	bgt.n	800f4ac <_printf_float+0x250>
 800f498:	6823      	ldr	r3, [r4, #0]
 800f49a:	079b      	lsls	r3, r3, #30
 800f49c:	f100 8103 	bmi.w	800f6a6 <_printf_float+0x44a>
 800f4a0:	68e0      	ldr	r0, [r4, #12]
 800f4a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f4a4:	4298      	cmp	r0, r3
 800f4a6:	bfb8      	it	lt
 800f4a8:	4618      	movlt	r0, r3
 800f4aa:	e734      	b.n	800f316 <_printf_float+0xba>
 800f4ac:	2301      	movs	r3, #1
 800f4ae:	4652      	mov	r2, sl
 800f4b0:	4631      	mov	r1, r6
 800f4b2:	4628      	mov	r0, r5
 800f4b4:	47b8      	blx	r7
 800f4b6:	3001      	adds	r0, #1
 800f4b8:	f43f af2b 	beq.w	800f312 <_printf_float+0xb6>
 800f4bc:	f109 0901 	add.w	r9, r9, #1
 800f4c0:	e7e8      	b.n	800f494 <_printf_float+0x238>
 800f4c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	dc39      	bgt.n	800f53c <_printf_float+0x2e0>
 800f4c8:	4a1b      	ldr	r2, [pc, #108]	@ (800f538 <_printf_float+0x2dc>)
 800f4ca:	2301      	movs	r3, #1
 800f4cc:	4631      	mov	r1, r6
 800f4ce:	4628      	mov	r0, r5
 800f4d0:	47b8      	blx	r7
 800f4d2:	3001      	adds	r0, #1
 800f4d4:	f43f af1d 	beq.w	800f312 <_printf_float+0xb6>
 800f4d8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800f4dc:	ea59 0303 	orrs.w	r3, r9, r3
 800f4e0:	d102      	bne.n	800f4e8 <_printf_float+0x28c>
 800f4e2:	6823      	ldr	r3, [r4, #0]
 800f4e4:	07d9      	lsls	r1, r3, #31
 800f4e6:	d5d7      	bpl.n	800f498 <_printf_float+0x23c>
 800f4e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f4ec:	4631      	mov	r1, r6
 800f4ee:	4628      	mov	r0, r5
 800f4f0:	47b8      	blx	r7
 800f4f2:	3001      	adds	r0, #1
 800f4f4:	f43f af0d 	beq.w	800f312 <_printf_float+0xb6>
 800f4f8:	f04f 0a00 	mov.w	sl, #0
 800f4fc:	f104 0b1a 	add.w	fp, r4, #26
 800f500:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f502:	425b      	negs	r3, r3
 800f504:	4553      	cmp	r3, sl
 800f506:	dc01      	bgt.n	800f50c <_printf_float+0x2b0>
 800f508:	464b      	mov	r3, r9
 800f50a:	e793      	b.n	800f434 <_printf_float+0x1d8>
 800f50c:	2301      	movs	r3, #1
 800f50e:	465a      	mov	r2, fp
 800f510:	4631      	mov	r1, r6
 800f512:	4628      	mov	r0, r5
 800f514:	47b8      	blx	r7
 800f516:	3001      	adds	r0, #1
 800f518:	f43f aefb 	beq.w	800f312 <_printf_float+0xb6>
 800f51c:	f10a 0a01 	add.w	sl, sl, #1
 800f520:	e7ee      	b.n	800f500 <_printf_float+0x2a4>
 800f522:	bf00      	nop
 800f524:	7fefffff 	.word	0x7fefffff
 800f528:	08013884 	.word	0x08013884
 800f52c:	08013888 	.word	0x08013888
 800f530:	0801388c 	.word	0x0801388c
 800f534:	08013890 	.word	0x08013890
 800f538:	08013894 	.word	0x08013894
 800f53c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f53e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f542:	4553      	cmp	r3, sl
 800f544:	bfa8      	it	ge
 800f546:	4653      	movge	r3, sl
 800f548:	2b00      	cmp	r3, #0
 800f54a:	4699      	mov	r9, r3
 800f54c:	dc36      	bgt.n	800f5bc <_printf_float+0x360>
 800f54e:	f04f 0b00 	mov.w	fp, #0
 800f552:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f556:	f104 021a 	add.w	r2, r4, #26
 800f55a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f55c:	9306      	str	r3, [sp, #24]
 800f55e:	eba3 0309 	sub.w	r3, r3, r9
 800f562:	455b      	cmp	r3, fp
 800f564:	dc31      	bgt.n	800f5ca <_printf_float+0x36e>
 800f566:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f568:	459a      	cmp	sl, r3
 800f56a:	dc3a      	bgt.n	800f5e2 <_printf_float+0x386>
 800f56c:	6823      	ldr	r3, [r4, #0]
 800f56e:	07da      	lsls	r2, r3, #31
 800f570:	d437      	bmi.n	800f5e2 <_printf_float+0x386>
 800f572:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f574:	ebaa 0903 	sub.w	r9, sl, r3
 800f578:	9b06      	ldr	r3, [sp, #24]
 800f57a:	ebaa 0303 	sub.w	r3, sl, r3
 800f57e:	4599      	cmp	r9, r3
 800f580:	bfa8      	it	ge
 800f582:	4699      	movge	r9, r3
 800f584:	f1b9 0f00 	cmp.w	r9, #0
 800f588:	dc33      	bgt.n	800f5f2 <_printf_float+0x396>
 800f58a:	f04f 0800 	mov.w	r8, #0
 800f58e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f592:	f104 0b1a 	add.w	fp, r4, #26
 800f596:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f598:	ebaa 0303 	sub.w	r3, sl, r3
 800f59c:	eba3 0309 	sub.w	r3, r3, r9
 800f5a0:	4543      	cmp	r3, r8
 800f5a2:	f77f af79 	ble.w	800f498 <_printf_float+0x23c>
 800f5a6:	2301      	movs	r3, #1
 800f5a8:	465a      	mov	r2, fp
 800f5aa:	4631      	mov	r1, r6
 800f5ac:	4628      	mov	r0, r5
 800f5ae:	47b8      	blx	r7
 800f5b0:	3001      	adds	r0, #1
 800f5b2:	f43f aeae 	beq.w	800f312 <_printf_float+0xb6>
 800f5b6:	f108 0801 	add.w	r8, r8, #1
 800f5ba:	e7ec      	b.n	800f596 <_printf_float+0x33a>
 800f5bc:	4642      	mov	r2, r8
 800f5be:	4631      	mov	r1, r6
 800f5c0:	4628      	mov	r0, r5
 800f5c2:	47b8      	blx	r7
 800f5c4:	3001      	adds	r0, #1
 800f5c6:	d1c2      	bne.n	800f54e <_printf_float+0x2f2>
 800f5c8:	e6a3      	b.n	800f312 <_printf_float+0xb6>
 800f5ca:	2301      	movs	r3, #1
 800f5cc:	4631      	mov	r1, r6
 800f5ce:	4628      	mov	r0, r5
 800f5d0:	9206      	str	r2, [sp, #24]
 800f5d2:	47b8      	blx	r7
 800f5d4:	3001      	adds	r0, #1
 800f5d6:	f43f ae9c 	beq.w	800f312 <_printf_float+0xb6>
 800f5da:	9a06      	ldr	r2, [sp, #24]
 800f5dc:	f10b 0b01 	add.w	fp, fp, #1
 800f5e0:	e7bb      	b.n	800f55a <_printf_float+0x2fe>
 800f5e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f5e6:	4631      	mov	r1, r6
 800f5e8:	4628      	mov	r0, r5
 800f5ea:	47b8      	blx	r7
 800f5ec:	3001      	adds	r0, #1
 800f5ee:	d1c0      	bne.n	800f572 <_printf_float+0x316>
 800f5f0:	e68f      	b.n	800f312 <_printf_float+0xb6>
 800f5f2:	9a06      	ldr	r2, [sp, #24]
 800f5f4:	464b      	mov	r3, r9
 800f5f6:	4442      	add	r2, r8
 800f5f8:	4631      	mov	r1, r6
 800f5fa:	4628      	mov	r0, r5
 800f5fc:	47b8      	blx	r7
 800f5fe:	3001      	adds	r0, #1
 800f600:	d1c3      	bne.n	800f58a <_printf_float+0x32e>
 800f602:	e686      	b.n	800f312 <_printf_float+0xb6>
 800f604:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f608:	f1ba 0f01 	cmp.w	sl, #1
 800f60c:	dc01      	bgt.n	800f612 <_printf_float+0x3b6>
 800f60e:	07db      	lsls	r3, r3, #31
 800f610:	d536      	bpl.n	800f680 <_printf_float+0x424>
 800f612:	2301      	movs	r3, #1
 800f614:	4642      	mov	r2, r8
 800f616:	4631      	mov	r1, r6
 800f618:	4628      	mov	r0, r5
 800f61a:	47b8      	blx	r7
 800f61c:	3001      	adds	r0, #1
 800f61e:	f43f ae78 	beq.w	800f312 <_printf_float+0xb6>
 800f622:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f626:	4631      	mov	r1, r6
 800f628:	4628      	mov	r0, r5
 800f62a:	47b8      	blx	r7
 800f62c:	3001      	adds	r0, #1
 800f62e:	f43f ae70 	beq.w	800f312 <_printf_float+0xb6>
 800f632:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f636:	2200      	movs	r2, #0
 800f638:	2300      	movs	r3, #0
 800f63a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f63e:	f7f1 fa6b 	bl	8000b18 <__aeabi_dcmpeq>
 800f642:	b9c0      	cbnz	r0, 800f676 <_printf_float+0x41a>
 800f644:	4653      	mov	r3, sl
 800f646:	f108 0201 	add.w	r2, r8, #1
 800f64a:	4631      	mov	r1, r6
 800f64c:	4628      	mov	r0, r5
 800f64e:	47b8      	blx	r7
 800f650:	3001      	adds	r0, #1
 800f652:	d10c      	bne.n	800f66e <_printf_float+0x412>
 800f654:	e65d      	b.n	800f312 <_printf_float+0xb6>
 800f656:	2301      	movs	r3, #1
 800f658:	465a      	mov	r2, fp
 800f65a:	4631      	mov	r1, r6
 800f65c:	4628      	mov	r0, r5
 800f65e:	47b8      	blx	r7
 800f660:	3001      	adds	r0, #1
 800f662:	f43f ae56 	beq.w	800f312 <_printf_float+0xb6>
 800f666:	f108 0801 	add.w	r8, r8, #1
 800f66a:	45d0      	cmp	r8, sl
 800f66c:	dbf3      	blt.n	800f656 <_printf_float+0x3fa>
 800f66e:	464b      	mov	r3, r9
 800f670:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800f674:	e6df      	b.n	800f436 <_printf_float+0x1da>
 800f676:	f04f 0800 	mov.w	r8, #0
 800f67a:	f104 0b1a 	add.w	fp, r4, #26
 800f67e:	e7f4      	b.n	800f66a <_printf_float+0x40e>
 800f680:	2301      	movs	r3, #1
 800f682:	4642      	mov	r2, r8
 800f684:	e7e1      	b.n	800f64a <_printf_float+0x3ee>
 800f686:	2301      	movs	r3, #1
 800f688:	464a      	mov	r2, r9
 800f68a:	4631      	mov	r1, r6
 800f68c:	4628      	mov	r0, r5
 800f68e:	47b8      	blx	r7
 800f690:	3001      	adds	r0, #1
 800f692:	f43f ae3e 	beq.w	800f312 <_printf_float+0xb6>
 800f696:	f108 0801 	add.w	r8, r8, #1
 800f69a:	68e3      	ldr	r3, [r4, #12]
 800f69c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f69e:	1a5b      	subs	r3, r3, r1
 800f6a0:	4543      	cmp	r3, r8
 800f6a2:	dcf0      	bgt.n	800f686 <_printf_float+0x42a>
 800f6a4:	e6fc      	b.n	800f4a0 <_printf_float+0x244>
 800f6a6:	f04f 0800 	mov.w	r8, #0
 800f6aa:	f104 0919 	add.w	r9, r4, #25
 800f6ae:	e7f4      	b.n	800f69a <_printf_float+0x43e>

0800f6b0 <_printf_common>:
 800f6b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f6b4:	4616      	mov	r6, r2
 800f6b6:	4698      	mov	r8, r3
 800f6b8:	688a      	ldr	r2, [r1, #8]
 800f6ba:	690b      	ldr	r3, [r1, #16]
 800f6bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f6c0:	4293      	cmp	r3, r2
 800f6c2:	bfb8      	it	lt
 800f6c4:	4613      	movlt	r3, r2
 800f6c6:	6033      	str	r3, [r6, #0]
 800f6c8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f6cc:	4607      	mov	r7, r0
 800f6ce:	460c      	mov	r4, r1
 800f6d0:	b10a      	cbz	r2, 800f6d6 <_printf_common+0x26>
 800f6d2:	3301      	adds	r3, #1
 800f6d4:	6033      	str	r3, [r6, #0]
 800f6d6:	6823      	ldr	r3, [r4, #0]
 800f6d8:	0699      	lsls	r1, r3, #26
 800f6da:	bf42      	ittt	mi
 800f6dc:	6833      	ldrmi	r3, [r6, #0]
 800f6de:	3302      	addmi	r3, #2
 800f6e0:	6033      	strmi	r3, [r6, #0]
 800f6e2:	6825      	ldr	r5, [r4, #0]
 800f6e4:	f015 0506 	ands.w	r5, r5, #6
 800f6e8:	d106      	bne.n	800f6f8 <_printf_common+0x48>
 800f6ea:	f104 0a19 	add.w	sl, r4, #25
 800f6ee:	68e3      	ldr	r3, [r4, #12]
 800f6f0:	6832      	ldr	r2, [r6, #0]
 800f6f2:	1a9b      	subs	r3, r3, r2
 800f6f4:	42ab      	cmp	r3, r5
 800f6f6:	dc26      	bgt.n	800f746 <_printf_common+0x96>
 800f6f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f6fc:	6822      	ldr	r2, [r4, #0]
 800f6fe:	3b00      	subs	r3, #0
 800f700:	bf18      	it	ne
 800f702:	2301      	movne	r3, #1
 800f704:	0692      	lsls	r2, r2, #26
 800f706:	d42b      	bmi.n	800f760 <_printf_common+0xb0>
 800f708:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f70c:	4641      	mov	r1, r8
 800f70e:	4638      	mov	r0, r7
 800f710:	47c8      	blx	r9
 800f712:	3001      	adds	r0, #1
 800f714:	d01e      	beq.n	800f754 <_printf_common+0xa4>
 800f716:	6823      	ldr	r3, [r4, #0]
 800f718:	6922      	ldr	r2, [r4, #16]
 800f71a:	f003 0306 	and.w	r3, r3, #6
 800f71e:	2b04      	cmp	r3, #4
 800f720:	bf02      	ittt	eq
 800f722:	68e5      	ldreq	r5, [r4, #12]
 800f724:	6833      	ldreq	r3, [r6, #0]
 800f726:	1aed      	subeq	r5, r5, r3
 800f728:	68a3      	ldr	r3, [r4, #8]
 800f72a:	bf0c      	ite	eq
 800f72c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f730:	2500      	movne	r5, #0
 800f732:	4293      	cmp	r3, r2
 800f734:	bfc4      	itt	gt
 800f736:	1a9b      	subgt	r3, r3, r2
 800f738:	18ed      	addgt	r5, r5, r3
 800f73a:	2600      	movs	r6, #0
 800f73c:	341a      	adds	r4, #26
 800f73e:	42b5      	cmp	r5, r6
 800f740:	d11a      	bne.n	800f778 <_printf_common+0xc8>
 800f742:	2000      	movs	r0, #0
 800f744:	e008      	b.n	800f758 <_printf_common+0xa8>
 800f746:	2301      	movs	r3, #1
 800f748:	4652      	mov	r2, sl
 800f74a:	4641      	mov	r1, r8
 800f74c:	4638      	mov	r0, r7
 800f74e:	47c8      	blx	r9
 800f750:	3001      	adds	r0, #1
 800f752:	d103      	bne.n	800f75c <_printf_common+0xac>
 800f754:	f04f 30ff 	mov.w	r0, #4294967295
 800f758:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f75c:	3501      	adds	r5, #1
 800f75e:	e7c6      	b.n	800f6ee <_printf_common+0x3e>
 800f760:	18e1      	adds	r1, r4, r3
 800f762:	1c5a      	adds	r2, r3, #1
 800f764:	2030      	movs	r0, #48	@ 0x30
 800f766:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f76a:	4422      	add	r2, r4
 800f76c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f770:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f774:	3302      	adds	r3, #2
 800f776:	e7c7      	b.n	800f708 <_printf_common+0x58>
 800f778:	2301      	movs	r3, #1
 800f77a:	4622      	mov	r2, r4
 800f77c:	4641      	mov	r1, r8
 800f77e:	4638      	mov	r0, r7
 800f780:	47c8      	blx	r9
 800f782:	3001      	adds	r0, #1
 800f784:	d0e6      	beq.n	800f754 <_printf_common+0xa4>
 800f786:	3601      	adds	r6, #1
 800f788:	e7d9      	b.n	800f73e <_printf_common+0x8e>
	...

0800f78c <_printf_i>:
 800f78c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f790:	7e0f      	ldrb	r7, [r1, #24]
 800f792:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f794:	2f78      	cmp	r7, #120	@ 0x78
 800f796:	4691      	mov	r9, r2
 800f798:	4680      	mov	r8, r0
 800f79a:	460c      	mov	r4, r1
 800f79c:	469a      	mov	sl, r3
 800f79e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f7a2:	d807      	bhi.n	800f7b4 <_printf_i+0x28>
 800f7a4:	2f62      	cmp	r7, #98	@ 0x62
 800f7a6:	d80a      	bhi.n	800f7be <_printf_i+0x32>
 800f7a8:	2f00      	cmp	r7, #0
 800f7aa:	f000 80d2 	beq.w	800f952 <_printf_i+0x1c6>
 800f7ae:	2f58      	cmp	r7, #88	@ 0x58
 800f7b0:	f000 80b9 	beq.w	800f926 <_printf_i+0x19a>
 800f7b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f7b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f7bc:	e03a      	b.n	800f834 <_printf_i+0xa8>
 800f7be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f7c2:	2b15      	cmp	r3, #21
 800f7c4:	d8f6      	bhi.n	800f7b4 <_printf_i+0x28>
 800f7c6:	a101      	add	r1, pc, #4	@ (adr r1, 800f7cc <_printf_i+0x40>)
 800f7c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f7cc:	0800f825 	.word	0x0800f825
 800f7d0:	0800f839 	.word	0x0800f839
 800f7d4:	0800f7b5 	.word	0x0800f7b5
 800f7d8:	0800f7b5 	.word	0x0800f7b5
 800f7dc:	0800f7b5 	.word	0x0800f7b5
 800f7e0:	0800f7b5 	.word	0x0800f7b5
 800f7e4:	0800f839 	.word	0x0800f839
 800f7e8:	0800f7b5 	.word	0x0800f7b5
 800f7ec:	0800f7b5 	.word	0x0800f7b5
 800f7f0:	0800f7b5 	.word	0x0800f7b5
 800f7f4:	0800f7b5 	.word	0x0800f7b5
 800f7f8:	0800f939 	.word	0x0800f939
 800f7fc:	0800f863 	.word	0x0800f863
 800f800:	0800f8f3 	.word	0x0800f8f3
 800f804:	0800f7b5 	.word	0x0800f7b5
 800f808:	0800f7b5 	.word	0x0800f7b5
 800f80c:	0800f95b 	.word	0x0800f95b
 800f810:	0800f7b5 	.word	0x0800f7b5
 800f814:	0800f863 	.word	0x0800f863
 800f818:	0800f7b5 	.word	0x0800f7b5
 800f81c:	0800f7b5 	.word	0x0800f7b5
 800f820:	0800f8fb 	.word	0x0800f8fb
 800f824:	6833      	ldr	r3, [r6, #0]
 800f826:	1d1a      	adds	r2, r3, #4
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	6032      	str	r2, [r6, #0]
 800f82c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f830:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f834:	2301      	movs	r3, #1
 800f836:	e09d      	b.n	800f974 <_printf_i+0x1e8>
 800f838:	6833      	ldr	r3, [r6, #0]
 800f83a:	6820      	ldr	r0, [r4, #0]
 800f83c:	1d19      	adds	r1, r3, #4
 800f83e:	6031      	str	r1, [r6, #0]
 800f840:	0606      	lsls	r6, r0, #24
 800f842:	d501      	bpl.n	800f848 <_printf_i+0xbc>
 800f844:	681d      	ldr	r5, [r3, #0]
 800f846:	e003      	b.n	800f850 <_printf_i+0xc4>
 800f848:	0645      	lsls	r5, r0, #25
 800f84a:	d5fb      	bpl.n	800f844 <_printf_i+0xb8>
 800f84c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f850:	2d00      	cmp	r5, #0
 800f852:	da03      	bge.n	800f85c <_printf_i+0xd0>
 800f854:	232d      	movs	r3, #45	@ 0x2d
 800f856:	426d      	negs	r5, r5
 800f858:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f85c:	4859      	ldr	r0, [pc, #356]	@ (800f9c4 <_printf_i+0x238>)
 800f85e:	230a      	movs	r3, #10
 800f860:	e011      	b.n	800f886 <_printf_i+0xfa>
 800f862:	6821      	ldr	r1, [r4, #0]
 800f864:	6833      	ldr	r3, [r6, #0]
 800f866:	0608      	lsls	r0, r1, #24
 800f868:	f853 5b04 	ldr.w	r5, [r3], #4
 800f86c:	d402      	bmi.n	800f874 <_printf_i+0xe8>
 800f86e:	0649      	lsls	r1, r1, #25
 800f870:	bf48      	it	mi
 800f872:	b2ad      	uxthmi	r5, r5
 800f874:	2f6f      	cmp	r7, #111	@ 0x6f
 800f876:	4853      	ldr	r0, [pc, #332]	@ (800f9c4 <_printf_i+0x238>)
 800f878:	6033      	str	r3, [r6, #0]
 800f87a:	bf14      	ite	ne
 800f87c:	230a      	movne	r3, #10
 800f87e:	2308      	moveq	r3, #8
 800f880:	2100      	movs	r1, #0
 800f882:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f886:	6866      	ldr	r6, [r4, #4]
 800f888:	60a6      	str	r6, [r4, #8]
 800f88a:	2e00      	cmp	r6, #0
 800f88c:	bfa2      	ittt	ge
 800f88e:	6821      	ldrge	r1, [r4, #0]
 800f890:	f021 0104 	bicge.w	r1, r1, #4
 800f894:	6021      	strge	r1, [r4, #0]
 800f896:	b90d      	cbnz	r5, 800f89c <_printf_i+0x110>
 800f898:	2e00      	cmp	r6, #0
 800f89a:	d04b      	beq.n	800f934 <_printf_i+0x1a8>
 800f89c:	4616      	mov	r6, r2
 800f89e:	fbb5 f1f3 	udiv	r1, r5, r3
 800f8a2:	fb03 5711 	mls	r7, r3, r1, r5
 800f8a6:	5dc7      	ldrb	r7, [r0, r7]
 800f8a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f8ac:	462f      	mov	r7, r5
 800f8ae:	42bb      	cmp	r3, r7
 800f8b0:	460d      	mov	r5, r1
 800f8b2:	d9f4      	bls.n	800f89e <_printf_i+0x112>
 800f8b4:	2b08      	cmp	r3, #8
 800f8b6:	d10b      	bne.n	800f8d0 <_printf_i+0x144>
 800f8b8:	6823      	ldr	r3, [r4, #0]
 800f8ba:	07df      	lsls	r7, r3, #31
 800f8bc:	d508      	bpl.n	800f8d0 <_printf_i+0x144>
 800f8be:	6923      	ldr	r3, [r4, #16]
 800f8c0:	6861      	ldr	r1, [r4, #4]
 800f8c2:	4299      	cmp	r1, r3
 800f8c4:	bfde      	ittt	le
 800f8c6:	2330      	movle	r3, #48	@ 0x30
 800f8c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f8cc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f8d0:	1b92      	subs	r2, r2, r6
 800f8d2:	6122      	str	r2, [r4, #16]
 800f8d4:	f8cd a000 	str.w	sl, [sp]
 800f8d8:	464b      	mov	r3, r9
 800f8da:	aa03      	add	r2, sp, #12
 800f8dc:	4621      	mov	r1, r4
 800f8de:	4640      	mov	r0, r8
 800f8e0:	f7ff fee6 	bl	800f6b0 <_printf_common>
 800f8e4:	3001      	adds	r0, #1
 800f8e6:	d14a      	bne.n	800f97e <_printf_i+0x1f2>
 800f8e8:	f04f 30ff 	mov.w	r0, #4294967295
 800f8ec:	b004      	add	sp, #16
 800f8ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f8f2:	6823      	ldr	r3, [r4, #0]
 800f8f4:	f043 0320 	orr.w	r3, r3, #32
 800f8f8:	6023      	str	r3, [r4, #0]
 800f8fa:	4833      	ldr	r0, [pc, #204]	@ (800f9c8 <_printf_i+0x23c>)
 800f8fc:	2778      	movs	r7, #120	@ 0x78
 800f8fe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f902:	6823      	ldr	r3, [r4, #0]
 800f904:	6831      	ldr	r1, [r6, #0]
 800f906:	061f      	lsls	r7, r3, #24
 800f908:	f851 5b04 	ldr.w	r5, [r1], #4
 800f90c:	d402      	bmi.n	800f914 <_printf_i+0x188>
 800f90e:	065f      	lsls	r7, r3, #25
 800f910:	bf48      	it	mi
 800f912:	b2ad      	uxthmi	r5, r5
 800f914:	6031      	str	r1, [r6, #0]
 800f916:	07d9      	lsls	r1, r3, #31
 800f918:	bf44      	itt	mi
 800f91a:	f043 0320 	orrmi.w	r3, r3, #32
 800f91e:	6023      	strmi	r3, [r4, #0]
 800f920:	b11d      	cbz	r5, 800f92a <_printf_i+0x19e>
 800f922:	2310      	movs	r3, #16
 800f924:	e7ac      	b.n	800f880 <_printf_i+0xf4>
 800f926:	4827      	ldr	r0, [pc, #156]	@ (800f9c4 <_printf_i+0x238>)
 800f928:	e7e9      	b.n	800f8fe <_printf_i+0x172>
 800f92a:	6823      	ldr	r3, [r4, #0]
 800f92c:	f023 0320 	bic.w	r3, r3, #32
 800f930:	6023      	str	r3, [r4, #0]
 800f932:	e7f6      	b.n	800f922 <_printf_i+0x196>
 800f934:	4616      	mov	r6, r2
 800f936:	e7bd      	b.n	800f8b4 <_printf_i+0x128>
 800f938:	6833      	ldr	r3, [r6, #0]
 800f93a:	6825      	ldr	r5, [r4, #0]
 800f93c:	6961      	ldr	r1, [r4, #20]
 800f93e:	1d18      	adds	r0, r3, #4
 800f940:	6030      	str	r0, [r6, #0]
 800f942:	062e      	lsls	r6, r5, #24
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	d501      	bpl.n	800f94c <_printf_i+0x1c0>
 800f948:	6019      	str	r1, [r3, #0]
 800f94a:	e002      	b.n	800f952 <_printf_i+0x1c6>
 800f94c:	0668      	lsls	r0, r5, #25
 800f94e:	d5fb      	bpl.n	800f948 <_printf_i+0x1bc>
 800f950:	8019      	strh	r1, [r3, #0]
 800f952:	2300      	movs	r3, #0
 800f954:	6123      	str	r3, [r4, #16]
 800f956:	4616      	mov	r6, r2
 800f958:	e7bc      	b.n	800f8d4 <_printf_i+0x148>
 800f95a:	6833      	ldr	r3, [r6, #0]
 800f95c:	1d1a      	adds	r2, r3, #4
 800f95e:	6032      	str	r2, [r6, #0]
 800f960:	681e      	ldr	r6, [r3, #0]
 800f962:	6862      	ldr	r2, [r4, #4]
 800f964:	2100      	movs	r1, #0
 800f966:	4630      	mov	r0, r6
 800f968:	f7f0 fc5a 	bl	8000220 <memchr>
 800f96c:	b108      	cbz	r0, 800f972 <_printf_i+0x1e6>
 800f96e:	1b80      	subs	r0, r0, r6
 800f970:	6060      	str	r0, [r4, #4]
 800f972:	6863      	ldr	r3, [r4, #4]
 800f974:	6123      	str	r3, [r4, #16]
 800f976:	2300      	movs	r3, #0
 800f978:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f97c:	e7aa      	b.n	800f8d4 <_printf_i+0x148>
 800f97e:	6923      	ldr	r3, [r4, #16]
 800f980:	4632      	mov	r2, r6
 800f982:	4649      	mov	r1, r9
 800f984:	4640      	mov	r0, r8
 800f986:	47d0      	blx	sl
 800f988:	3001      	adds	r0, #1
 800f98a:	d0ad      	beq.n	800f8e8 <_printf_i+0x15c>
 800f98c:	6823      	ldr	r3, [r4, #0]
 800f98e:	079b      	lsls	r3, r3, #30
 800f990:	d413      	bmi.n	800f9ba <_printf_i+0x22e>
 800f992:	68e0      	ldr	r0, [r4, #12]
 800f994:	9b03      	ldr	r3, [sp, #12]
 800f996:	4298      	cmp	r0, r3
 800f998:	bfb8      	it	lt
 800f99a:	4618      	movlt	r0, r3
 800f99c:	e7a6      	b.n	800f8ec <_printf_i+0x160>
 800f99e:	2301      	movs	r3, #1
 800f9a0:	4632      	mov	r2, r6
 800f9a2:	4649      	mov	r1, r9
 800f9a4:	4640      	mov	r0, r8
 800f9a6:	47d0      	blx	sl
 800f9a8:	3001      	adds	r0, #1
 800f9aa:	d09d      	beq.n	800f8e8 <_printf_i+0x15c>
 800f9ac:	3501      	adds	r5, #1
 800f9ae:	68e3      	ldr	r3, [r4, #12]
 800f9b0:	9903      	ldr	r1, [sp, #12]
 800f9b2:	1a5b      	subs	r3, r3, r1
 800f9b4:	42ab      	cmp	r3, r5
 800f9b6:	dcf2      	bgt.n	800f99e <_printf_i+0x212>
 800f9b8:	e7eb      	b.n	800f992 <_printf_i+0x206>
 800f9ba:	2500      	movs	r5, #0
 800f9bc:	f104 0619 	add.w	r6, r4, #25
 800f9c0:	e7f5      	b.n	800f9ae <_printf_i+0x222>
 800f9c2:	bf00      	nop
 800f9c4:	08013896 	.word	0x08013896
 800f9c8:	080138a7 	.word	0x080138a7

0800f9cc <_scanf_float>:
 800f9cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9d0:	b087      	sub	sp, #28
 800f9d2:	4617      	mov	r7, r2
 800f9d4:	9303      	str	r3, [sp, #12]
 800f9d6:	688b      	ldr	r3, [r1, #8]
 800f9d8:	1e5a      	subs	r2, r3, #1
 800f9da:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800f9de:	bf81      	itttt	hi
 800f9e0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800f9e4:	eb03 0b05 	addhi.w	fp, r3, r5
 800f9e8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800f9ec:	608b      	strhi	r3, [r1, #8]
 800f9ee:	680b      	ldr	r3, [r1, #0]
 800f9f0:	460a      	mov	r2, r1
 800f9f2:	f04f 0500 	mov.w	r5, #0
 800f9f6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800f9fa:	f842 3b1c 	str.w	r3, [r2], #28
 800f9fe:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800fa02:	4680      	mov	r8, r0
 800fa04:	460c      	mov	r4, r1
 800fa06:	bf98      	it	ls
 800fa08:	f04f 0b00 	movls.w	fp, #0
 800fa0c:	9201      	str	r2, [sp, #4]
 800fa0e:	4616      	mov	r6, r2
 800fa10:	46aa      	mov	sl, r5
 800fa12:	46a9      	mov	r9, r5
 800fa14:	9502      	str	r5, [sp, #8]
 800fa16:	68a2      	ldr	r2, [r4, #8]
 800fa18:	b152      	cbz	r2, 800fa30 <_scanf_float+0x64>
 800fa1a:	683b      	ldr	r3, [r7, #0]
 800fa1c:	781b      	ldrb	r3, [r3, #0]
 800fa1e:	2b4e      	cmp	r3, #78	@ 0x4e
 800fa20:	d864      	bhi.n	800faec <_scanf_float+0x120>
 800fa22:	2b40      	cmp	r3, #64	@ 0x40
 800fa24:	d83c      	bhi.n	800faa0 <_scanf_float+0xd4>
 800fa26:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800fa2a:	b2c8      	uxtb	r0, r1
 800fa2c:	280e      	cmp	r0, #14
 800fa2e:	d93a      	bls.n	800faa6 <_scanf_float+0xda>
 800fa30:	f1b9 0f00 	cmp.w	r9, #0
 800fa34:	d003      	beq.n	800fa3e <_scanf_float+0x72>
 800fa36:	6823      	ldr	r3, [r4, #0]
 800fa38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fa3c:	6023      	str	r3, [r4, #0]
 800fa3e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fa42:	f1ba 0f01 	cmp.w	sl, #1
 800fa46:	f200 8117 	bhi.w	800fc78 <_scanf_float+0x2ac>
 800fa4a:	9b01      	ldr	r3, [sp, #4]
 800fa4c:	429e      	cmp	r6, r3
 800fa4e:	f200 8108 	bhi.w	800fc62 <_scanf_float+0x296>
 800fa52:	2001      	movs	r0, #1
 800fa54:	b007      	add	sp, #28
 800fa56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa5a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800fa5e:	2a0d      	cmp	r2, #13
 800fa60:	d8e6      	bhi.n	800fa30 <_scanf_float+0x64>
 800fa62:	a101      	add	r1, pc, #4	@ (adr r1, 800fa68 <_scanf_float+0x9c>)
 800fa64:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800fa68:	0800fbaf 	.word	0x0800fbaf
 800fa6c:	0800fa31 	.word	0x0800fa31
 800fa70:	0800fa31 	.word	0x0800fa31
 800fa74:	0800fa31 	.word	0x0800fa31
 800fa78:	0800fc0f 	.word	0x0800fc0f
 800fa7c:	0800fbe7 	.word	0x0800fbe7
 800fa80:	0800fa31 	.word	0x0800fa31
 800fa84:	0800fa31 	.word	0x0800fa31
 800fa88:	0800fbbd 	.word	0x0800fbbd
 800fa8c:	0800fa31 	.word	0x0800fa31
 800fa90:	0800fa31 	.word	0x0800fa31
 800fa94:	0800fa31 	.word	0x0800fa31
 800fa98:	0800fa31 	.word	0x0800fa31
 800fa9c:	0800fb75 	.word	0x0800fb75
 800faa0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800faa4:	e7db      	b.n	800fa5e <_scanf_float+0x92>
 800faa6:	290e      	cmp	r1, #14
 800faa8:	d8c2      	bhi.n	800fa30 <_scanf_float+0x64>
 800faaa:	a001      	add	r0, pc, #4	@ (adr r0, 800fab0 <_scanf_float+0xe4>)
 800faac:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800fab0:	0800fb65 	.word	0x0800fb65
 800fab4:	0800fa31 	.word	0x0800fa31
 800fab8:	0800fb65 	.word	0x0800fb65
 800fabc:	0800fbfb 	.word	0x0800fbfb
 800fac0:	0800fa31 	.word	0x0800fa31
 800fac4:	0800fb0d 	.word	0x0800fb0d
 800fac8:	0800fb4b 	.word	0x0800fb4b
 800facc:	0800fb4b 	.word	0x0800fb4b
 800fad0:	0800fb4b 	.word	0x0800fb4b
 800fad4:	0800fb4b 	.word	0x0800fb4b
 800fad8:	0800fb4b 	.word	0x0800fb4b
 800fadc:	0800fb4b 	.word	0x0800fb4b
 800fae0:	0800fb4b 	.word	0x0800fb4b
 800fae4:	0800fb4b 	.word	0x0800fb4b
 800fae8:	0800fb4b 	.word	0x0800fb4b
 800faec:	2b6e      	cmp	r3, #110	@ 0x6e
 800faee:	d809      	bhi.n	800fb04 <_scanf_float+0x138>
 800faf0:	2b60      	cmp	r3, #96	@ 0x60
 800faf2:	d8b2      	bhi.n	800fa5a <_scanf_float+0x8e>
 800faf4:	2b54      	cmp	r3, #84	@ 0x54
 800faf6:	d07b      	beq.n	800fbf0 <_scanf_float+0x224>
 800faf8:	2b59      	cmp	r3, #89	@ 0x59
 800fafa:	d199      	bne.n	800fa30 <_scanf_float+0x64>
 800fafc:	2d07      	cmp	r5, #7
 800fafe:	d197      	bne.n	800fa30 <_scanf_float+0x64>
 800fb00:	2508      	movs	r5, #8
 800fb02:	e02c      	b.n	800fb5e <_scanf_float+0x192>
 800fb04:	2b74      	cmp	r3, #116	@ 0x74
 800fb06:	d073      	beq.n	800fbf0 <_scanf_float+0x224>
 800fb08:	2b79      	cmp	r3, #121	@ 0x79
 800fb0a:	e7f6      	b.n	800fafa <_scanf_float+0x12e>
 800fb0c:	6821      	ldr	r1, [r4, #0]
 800fb0e:	05c8      	lsls	r0, r1, #23
 800fb10:	d51b      	bpl.n	800fb4a <_scanf_float+0x17e>
 800fb12:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800fb16:	6021      	str	r1, [r4, #0]
 800fb18:	f109 0901 	add.w	r9, r9, #1
 800fb1c:	f1bb 0f00 	cmp.w	fp, #0
 800fb20:	d003      	beq.n	800fb2a <_scanf_float+0x15e>
 800fb22:	3201      	adds	r2, #1
 800fb24:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fb28:	60a2      	str	r2, [r4, #8]
 800fb2a:	68a3      	ldr	r3, [r4, #8]
 800fb2c:	3b01      	subs	r3, #1
 800fb2e:	60a3      	str	r3, [r4, #8]
 800fb30:	6923      	ldr	r3, [r4, #16]
 800fb32:	3301      	adds	r3, #1
 800fb34:	6123      	str	r3, [r4, #16]
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	3b01      	subs	r3, #1
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	607b      	str	r3, [r7, #4]
 800fb3e:	f340 8087 	ble.w	800fc50 <_scanf_float+0x284>
 800fb42:	683b      	ldr	r3, [r7, #0]
 800fb44:	3301      	adds	r3, #1
 800fb46:	603b      	str	r3, [r7, #0]
 800fb48:	e765      	b.n	800fa16 <_scanf_float+0x4a>
 800fb4a:	eb1a 0105 	adds.w	r1, sl, r5
 800fb4e:	f47f af6f 	bne.w	800fa30 <_scanf_float+0x64>
 800fb52:	6822      	ldr	r2, [r4, #0]
 800fb54:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800fb58:	6022      	str	r2, [r4, #0]
 800fb5a:	460d      	mov	r5, r1
 800fb5c:	468a      	mov	sl, r1
 800fb5e:	f806 3b01 	strb.w	r3, [r6], #1
 800fb62:	e7e2      	b.n	800fb2a <_scanf_float+0x15e>
 800fb64:	6822      	ldr	r2, [r4, #0]
 800fb66:	0610      	lsls	r0, r2, #24
 800fb68:	f57f af62 	bpl.w	800fa30 <_scanf_float+0x64>
 800fb6c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800fb70:	6022      	str	r2, [r4, #0]
 800fb72:	e7f4      	b.n	800fb5e <_scanf_float+0x192>
 800fb74:	f1ba 0f00 	cmp.w	sl, #0
 800fb78:	d10e      	bne.n	800fb98 <_scanf_float+0x1cc>
 800fb7a:	f1b9 0f00 	cmp.w	r9, #0
 800fb7e:	d10e      	bne.n	800fb9e <_scanf_float+0x1d2>
 800fb80:	6822      	ldr	r2, [r4, #0]
 800fb82:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800fb86:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800fb8a:	d108      	bne.n	800fb9e <_scanf_float+0x1d2>
 800fb8c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800fb90:	6022      	str	r2, [r4, #0]
 800fb92:	f04f 0a01 	mov.w	sl, #1
 800fb96:	e7e2      	b.n	800fb5e <_scanf_float+0x192>
 800fb98:	f1ba 0f02 	cmp.w	sl, #2
 800fb9c:	d055      	beq.n	800fc4a <_scanf_float+0x27e>
 800fb9e:	2d01      	cmp	r5, #1
 800fba0:	d002      	beq.n	800fba8 <_scanf_float+0x1dc>
 800fba2:	2d04      	cmp	r5, #4
 800fba4:	f47f af44 	bne.w	800fa30 <_scanf_float+0x64>
 800fba8:	3501      	adds	r5, #1
 800fbaa:	b2ed      	uxtb	r5, r5
 800fbac:	e7d7      	b.n	800fb5e <_scanf_float+0x192>
 800fbae:	f1ba 0f01 	cmp.w	sl, #1
 800fbb2:	f47f af3d 	bne.w	800fa30 <_scanf_float+0x64>
 800fbb6:	f04f 0a02 	mov.w	sl, #2
 800fbba:	e7d0      	b.n	800fb5e <_scanf_float+0x192>
 800fbbc:	b97d      	cbnz	r5, 800fbde <_scanf_float+0x212>
 800fbbe:	f1b9 0f00 	cmp.w	r9, #0
 800fbc2:	f47f af38 	bne.w	800fa36 <_scanf_float+0x6a>
 800fbc6:	6822      	ldr	r2, [r4, #0]
 800fbc8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800fbcc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800fbd0:	f040 8108 	bne.w	800fde4 <_scanf_float+0x418>
 800fbd4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800fbd8:	6022      	str	r2, [r4, #0]
 800fbda:	2501      	movs	r5, #1
 800fbdc:	e7bf      	b.n	800fb5e <_scanf_float+0x192>
 800fbde:	2d03      	cmp	r5, #3
 800fbe0:	d0e2      	beq.n	800fba8 <_scanf_float+0x1dc>
 800fbe2:	2d05      	cmp	r5, #5
 800fbe4:	e7de      	b.n	800fba4 <_scanf_float+0x1d8>
 800fbe6:	2d02      	cmp	r5, #2
 800fbe8:	f47f af22 	bne.w	800fa30 <_scanf_float+0x64>
 800fbec:	2503      	movs	r5, #3
 800fbee:	e7b6      	b.n	800fb5e <_scanf_float+0x192>
 800fbf0:	2d06      	cmp	r5, #6
 800fbf2:	f47f af1d 	bne.w	800fa30 <_scanf_float+0x64>
 800fbf6:	2507      	movs	r5, #7
 800fbf8:	e7b1      	b.n	800fb5e <_scanf_float+0x192>
 800fbfa:	6822      	ldr	r2, [r4, #0]
 800fbfc:	0591      	lsls	r1, r2, #22
 800fbfe:	f57f af17 	bpl.w	800fa30 <_scanf_float+0x64>
 800fc02:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800fc06:	6022      	str	r2, [r4, #0]
 800fc08:	f8cd 9008 	str.w	r9, [sp, #8]
 800fc0c:	e7a7      	b.n	800fb5e <_scanf_float+0x192>
 800fc0e:	6822      	ldr	r2, [r4, #0]
 800fc10:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800fc14:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800fc18:	d006      	beq.n	800fc28 <_scanf_float+0x25c>
 800fc1a:	0550      	lsls	r0, r2, #21
 800fc1c:	f57f af08 	bpl.w	800fa30 <_scanf_float+0x64>
 800fc20:	f1b9 0f00 	cmp.w	r9, #0
 800fc24:	f000 80de 	beq.w	800fde4 <_scanf_float+0x418>
 800fc28:	0591      	lsls	r1, r2, #22
 800fc2a:	bf58      	it	pl
 800fc2c:	9902      	ldrpl	r1, [sp, #8]
 800fc2e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800fc32:	bf58      	it	pl
 800fc34:	eba9 0101 	subpl.w	r1, r9, r1
 800fc38:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800fc3c:	bf58      	it	pl
 800fc3e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800fc42:	6022      	str	r2, [r4, #0]
 800fc44:	f04f 0900 	mov.w	r9, #0
 800fc48:	e789      	b.n	800fb5e <_scanf_float+0x192>
 800fc4a:	f04f 0a03 	mov.w	sl, #3
 800fc4e:	e786      	b.n	800fb5e <_scanf_float+0x192>
 800fc50:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800fc54:	4639      	mov	r1, r7
 800fc56:	4640      	mov	r0, r8
 800fc58:	4798      	blx	r3
 800fc5a:	2800      	cmp	r0, #0
 800fc5c:	f43f aedb 	beq.w	800fa16 <_scanf_float+0x4a>
 800fc60:	e6e6      	b.n	800fa30 <_scanf_float+0x64>
 800fc62:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fc66:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fc6a:	463a      	mov	r2, r7
 800fc6c:	4640      	mov	r0, r8
 800fc6e:	4798      	blx	r3
 800fc70:	6923      	ldr	r3, [r4, #16]
 800fc72:	3b01      	subs	r3, #1
 800fc74:	6123      	str	r3, [r4, #16]
 800fc76:	e6e8      	b.n	800fa4a <_scanf_float+0x7e>
 800fc78:	1e6b      	subs	r3, r5, #1
 800fc7a:	2b06      	cmp	r3, #6
 800fc7c:	d824      	bhi.n	800fcc8 <_scanf_float+0x2fc>
 800fc7e:	2d02      	cmp	r5, #2
 800fc80:	d836      	bhi.n	800fcf0 <_scanf_float+0x324>
 800fc82:	9b01      	ldr	r3, [sp, #4]
 800fc84:	429e      	cmp	r6, r3
 800fc86:	f67f aee4 	bls.w	800fa52 <_scanf_float+0x86>
 800fc8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fc8e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fc92:	463a      	mov	r2, r7
 800fc94:	4640      	mov	r0, r8
 800fc96:	4798      	blx	r3
 800fc98:	6923      	ldr	r3, [r4, #16]
 800fc9a:	3b01      	subs	r3, #1
 800fc9c:	6123      	str	r3, [r4, #16]
 800fc9e:	e7f0      	b.n	800fc82 <_scanf_float+0x2b6>
 800fca0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fca4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800fca8:	463a      	mov	r2, r7
 800fcaa:	4640      	mov	r0, r8
 800fcac:	4798      	blx	r3
 800fcae:	6923      	ldr	r3, [r4, #16]
 800fcb0:	3b01      	subs	r3, #1
 800fcb2:	6123      	str	r3, [r4, #16]
 800fcb4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fcb8:	fa5f fa8a 	uxtb.w	sl, sl
 800fcbc:	f1ba 0f02 	cmp.w	sl, #2
 800fcc0:	d1ee      	bne.n	800fca0 <_scanf_float+0x2d4>
 800fcc2:	3d03      	subs	r5, #3
 800fcc4:	b2ed      	uxtb	r5, r5
 800fcc6:	1b76      	subs	r6, r6, r5
 800fcc8:	6823      	ldr	r3, [r4, #0]
 800fcca:	05da      	lsls	r2, r3, #23
 800fccc:	d530      	bpl.n	800fd30 <_scanf_float+0x364>
 800fcce:	055b      	lsls	r3, r3, #21
 800fcd0:	d511      	bpl.n	800fcf6 <_scanf_float+0x32a>
 800fcd2:	9b01      	ldr	r3, [sp, #4]
 800fcd4:	429e      	cmp	r6, r3
 800fcd6:	f67f aebc 	bls.w	800fa52 <_scanf_float+0x86>
 800fcda:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fcde:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fce2:	463a      	mov	r2, r7
 800fce4:	4640      	mov	r0, r8
 800fce6:	4798      	blx	r3
 800fce8:	6923      	ldr	r3, [r4, #16]
 800fcea:	3b01      	subs	r3, #1
 800fcec:	6123      	str	r3, [r4, #16]
 800fcee:	e7f0      	b.n	800fcd2 <_scanf_float+0x306>
 800fcf0:	46aa      	mov	sl, r5
 800fcf2:	46b3      	mov	fp, r6
 800fcf4:	e7de      	b.n	800fcb4 <_scanf_float+0x2e8>
 800fcf6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800fcfa:	6923      	ldr	r3, [r4, #16]
 800fcfc:	2965      	cmp	r1, #101	@ 0x65
 800fcfe:	f103 33ff 	add.w	r3, r3, #4294967295
 800fd02:	f106 35ff 	add.w	r5, r6, #4294967295
 800fd06:	6123      	str	r3, [r4, #16]
 800fd08:	d00c      	beq.n	800fd24 <_scanf_float+0x358>
 800fd0a:	2945      	cmp	r1, #69	@ 0x45
 800fd0c:	d00a      	beq.n	800fd24 <_scanf_float+0x358>
 800fd0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fd12:	463a      	mov	r2, r7
 800fd14:	4640      	mov	r0, r8
 800fd16:	4798      	blx	r3
 800fd18:	6923      	ldr	r3, [r4, #16]
 800fd1a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800fd1e:	3b01      	subs	r3, #1
 800fd20:	1eb5      	subs	r5, r6, #2
 800fd22:	6123      	str	r3, [r4, #16]
 800fd24:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fd28:	463a      	mov	r2, r7
 800fd2a:	4640      	mov	r0, r8
 800fd2c:	4798      	blx	r3
 800fd2e:	462e      	mov	r6, r5
 800fd30:	6822      	ldr	r2, [r4, #0]
 800fd32:	f012 0210 	ands.w	r2, r2, #16
 800fd36:	d001      	beq.n	800fd3c <_scanf_float+0x370>
 800fd38:	2000      	movs	r0, #0
 800fd3a:	e68b      	b.n	800fa54 <_scanf_float+0x88>
 800fd3c:	7032      	strb	r2, [r6, #0]
 800fd3e:	6823      	ldr	r3, [r4, #0]
 800fd40:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800fd44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fd48:	d11c      	bne.n	800fd84 <_scanf_float+0x3b8>
 800fd4a:	9b02      	ldr	r3, [sp, #8]
 800fd4c:	454b      	cmp	r3, r9
 800fd4e:	eba3 0209 	sub.w	r2, r3, r9
 800fd52:	d123      	bne.n	800fd9c <_scanf_float+0x3d0>
 800fd54:	9901      	ldr	r1, [sp, #4]
 800fd56:	2200      	movs	r2, #0
 800fd58:	4640      	mov	r0, r8
 800fd5a:	f002 fbf9 	bl	8012550 <_strtod_r>
 800fd5e:	9b03      	ldr	r3, [sp, #12]
 800fd60:	6821      	ldr	r1, [r4, #0]
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	f011 0f02 	tst.w	r1, #2
 800fd68:	ec57 6b10 	vmov	r6, r7, d0
 800fd6c:	f103 0204 	add.w	r2, r3, #4
 800fd70:	d01f      	beq.n	800fdb2 <_scanf_float+0x3e6>
 800fd72:	9903      	ldr	r1, [sp, #12]
 800fd74:	600a      	str	r2, [r1, #0]
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	e9c3 6700 	strd	r6, r7, [r3]
 800fd7c:	68e3      	ldr	r3, [r4, #12]
 800fd7e:	3301      	adds	r3, #1
 800fd80:	60e3      	str	r3, [r4, #12]
 800fd82:	e7d9      	b.n	800fd38 <_scanf_float+0x36c>
 800fd84:	9b04      	ldr	r3, [sp, #16]
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d0e4      	beq.n	800fd54 <_scanf_float+0x388>
 800fd8a:	9905      	ldr	r1, [sp, #20]
 800fd8c:	230a      	movs	r3, #10
 800fd8e:	3101      	adds	r1, #1
 800fd90:	4640      	mov	r0, r8
 800fd92:	f002 fc5d 	bl	8012650 <_strtol_r>
 800fd96:	9b04      	ldr	r3, [sp, #16]
 800fd98:	9e05      	ldr	r6, [sp, #20]
 800fd9a:	1ac2      	subs	r2, r0, r3
 800fd9c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800fda0:	429e      	cmp	r6, r3
 800fda2:	bf28      	it	cs
 800fda4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800fda8:	4910      	ldr	r1, [pc, #64]	@ (800fdec <_scanf_float+0x420>)
 800fdaa:	4630      	mov	r0, r6
 800fdac:	f000 f8e4 	bl	800ff78 <siprintf>
 800fdb0:	e7d0      	b.n	800fd54 <_scanf_float+0x388>
 800fdb2:	f011 0f04 	tst.w	r1, #4
 800fdb6:	9903      	ldr	r1, [sp, #12]
 800fdb8:	600a      	str	r2, [r1, #0]
 800fdba:	d1dc      	bne.n	800fd76 <_scanf_float+0x3aa>
 800fdbc:	681d      	ldr	r5, [r3, #0]
 800fdbe:	4632      	mov	r2, r6
 800fdc0:	463b      	mov	r3, r7
 800fdc2:	4630      	mov	r0, r6
 800fdc4:	4639      	mov	r1, r7
 800fdc6:	f7f0 fed9 	bl	8000b7c <__aeabi_dcmpun>
 800fdca:	b128      	cbz	r0, 800fdd8 <_scanf_float+0x40c>
 800fdcc:	4808      	ldr	r0, [pc, #32]	@ (800fdf0 <_scanf_float+0x424>)
 800fdce:	f000 f9b7 	bl	8010140 <nanf>
 800fdd2:	ed85 0a00 	vstr	s0, [r5]
 800fdd6:	e7d1      	b.n	800fd7c <_scanf_float+0x3b0>
 800fdd8:	4630      	mov	r0, r6
 800fdda:	4639      	mov	r1, r7
 800fddc:	f7f0 ff2c 	bl	8000c38 <__aeabi_d2f>
 800fde0:	6028      	str	r0, [r5, #0]
 800fde2:	e7cb      	b.n	800fd7c <_scanf_float+0x3b0>
 800fde4:	f04f 0900 	mov.w	r9, #0
 800fde8:	e629      	b.n	800fa3e <_scanf_float+0x72>
 800fdea:	bf00      	nop
 800fdec:	080138b8 	.word	0x080138b8
 800fdf0:	08013c4d 	.word	0x08013c4d

0800fdf4 <std>:
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	b510      	push	{r4, lr}
 800fdf8:	4604      	mov	r4, r0
 800fdfa:	e9c0 3300 	strd	r3, r3, [r0]
 800fdfe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fe02:	6083      	str	r3, [r0, #8]
 800fe04:	8181      	strh	r1, [r0, #12]
 800fe06:	6643      	str	r3, [r0, #100]	@ 0x64
 800fe08:	81c2      	strh	r2, [r0, #14]
 800fe0a:	6183      	str	r3, [r0, #24]
 800fe0c:	4619      	mov	r1, r3
 800fe0e:	2208      	movs	r2, #8
 800fe10:	305c      	adds	r0, #92	@ 0x5c
 800fe12:	f000 f914 	bl	801003e <memset>
 800fe16:	4b0d      	ldr	r3, [pc, #52]	@ (800fe4c <std+0x58>)
 800fe18:	6263      	str	r3, [r4, #36]	@ 0x24
 800fe1a:	4b0d      	ldr	r3, [pc, #52]	@ (800fe50 <std+0x5c>)
 800fe1c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800fe1e:	4b0d      	ldr	r3, [pc, #52]	@ (800fe54 <std+0x60>)
 800fe20:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fe22:	4b0d      	ldr	r3, [pc, #52]	@ (800fe58 <std+0x64>)
 800fe24:	6323      	str	r3, [r4, #48]	@ 0x30
 800fe26:	4b0d      	ldr	r3, [pc, #52]	@ (800fe5c <std+0x68>)
 800fe28:	6224      	str	r4, [r4, #32]
 800fe2a:	429c      	cmp	r4, r3
 800fe2c:	d006      	beq.n	800fe3c <std+0x48>
 800fe2e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800fe32:	4294      	cmp	r4, r2
 800fe34:	d002      	beq.n	800fe3c <std+0x48>
 800fe36:	33d0      	adds	r3, #208	@ 0xd0
 800fe38:	429c      	cmp	r4, r3
 800fe3a:	d105      	bne.n	800fe48 <std+0x54>
 800fe3c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800fe40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe44:	f000 b978 	b.w	8010138 <__retarget_lock_init_recursive>
 800fe48:	bd10      	pop	{r4, pc}
 800fe4a:	bf00      	nop
 800fe4c:	0800ffb9 	.word	0x0800ffb9
 800fe50:	0800ffdb 	.word	0x0800ffdb
 800fe54:	08010013 	.word	0x08010013
 800fe58:	08010037 	.word	0x08010037
 800fe5c:	20003794 	.word	0x20003794

0800fe60 <stdio_exit_handler>:
 800fe60:	4a02      	ldr	r2, [pc, #8]	@ (800fe6c <stdio_exit_handler+0xc>)
 800fe62:	4903      	ldr	r1, [pc, #12]	@ (800fe70 <stdio_exit_handler+0x10>)
 800fe64:	4803      	ldr	r0, [pc, #12]	@ (800fe74 <stdio_exit_handler+0x14>)
 800fe66:	f000 b869 	b.w	800ff3c <_fwalk_sglue>
 800fe6a:	bf00      	nop
 800fe6c:	20000184 	.word	0x20000184
 800fe70:	08012a0d 	.word	0x08012a0d
 800fe74:	20000194 	.word	0x20000194

0800fe78 <cleanup_stdio>:
 800fe78:	6841      	ldr	r1, [r0, #4]
 800fe7a:	4b0c      	ldr	r3, [pc, #48]	@ (800feac <cleanup_stdio+0x34>)
 800fe7c:	4299      	cmp	r1, r3
 800fe7e:	b510      	push	{r4, lr}
 800fe80:	4604      	mov	r4, r0
 800fe82:	d001      	beq.n	800fe88 <cleanup_stdio+0x10>
 800fe84:	f002 fdc2 	bl	8012a0c <_fflush_r>
 800fe88:	68a1      	ldr	r1, [r4, #8]
 800fe8a:	4b09      	ldr	r3, [pc, #36]	@ (800feb0 <cleanup_stdio+0x38>)
 800fe8c:	4299      	cmp	r1, r3
 800fe8e:	d002      	beq.n	800fe96 <cleanup_stdio+0x1e>
 800fe90:	4620      	mov	r0, r4
 800fe92:	f002 fdbb 	bl	8012a0c <_fflush_r>
 800fe96:	68e1      	ldr	r1, [r4, #12]
 800fe98:	4b06      	ldr	r3, [pc, #24]	@ (800feb4 <cleanup_stdio+0x3c>)
 800fe9a:	4299      	cmp	r1, r3
 800fe9c:	d004      	beq.n	800fea8 <cleanup_stdio+0x30>
 800fe9e:	4620      	mov	r0, r4
 800fea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fea4:	f002 bdb2 	b.w	8012a0c <_fflush_r>
 800fea8:	bd10      	pop	{r4, pc}
 800feaa:	bf00      	nop
 800feac:	20003794 	.word	0x20003794
 800feb0:	200037fc 	.word	0x200037fc
 800feb4:	20003864 	.word	0x20003864

0800feb8 <global_stdio_init.part.0>:
 800feb8:	b510      	push	{r4, lr}
 800feba:	4b0b      	ldr	r3, [pc, #44]	@ (800fee8 <global_stdio_init.part.0+0x30>)
 800febc:	4c0b      	ldr	r4, [pc, #44]	@ (800feec <global_stdio_init.part.0+0x34>)
 800febe:	4a0c      	ldr	r2, [pc, #48]	@ (800fef0 <global_stdio_init.part.0+0x38>)
 800fec0:	601a      	str	r2, [r3, #0]
 800fec2:	4620      	mov	r0, r4
 800fec4:	2200      	movs	r2, #0
 800fec6:	2104      	movs	r1, #4
 800fec8:	f7ff ff94 	bl	800fdf4 <std>
 800fecc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800fed0:	2201      	movs	r2, #1
 800fed2:	2109      	movs	r1, #9
 800fed4:	f7ff ff8e 	bl	800fdf4 <std>
 800fed8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800fedc:	2202      	movs	r2, #2
 800fede:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fee2:	2112      	movs	r1, #18
 800fee4:	f7ff bf86 	b.w	800fdf4 <std>
 800fee8:	200038cc 	.word	0x200038cc
 800feec:	20003794 	.word	0x20003794
 800fef0:	0800fe61 	.word	0x0800fe61

0800fef4 <__sfp_lock_acquire>:
 800fef4:	4801      	ldr	r0, [pc, #4]	@ (800fefc <__sfp_lock_acquire+0x8>)
 800fef6:	f000 b920 	b.w	801013a <__retarget_lock_acquire_recursive>
 800fefa:	bf00      	nop
 800fefc:	200038d5 	.word	0x200038d5

0800ff00 <__sfp_lock_release>:
 800ff00:	4801      	ldr	r0, [pc, #4]	@ (800ff08 <__sfp_lock_release+0x8>)
 800ff02:	f000 b91b 	b.w	801013c <__retarget_lock_release_recursive>
 800ff06:	bf00      	nop
 800ff08:	200038d5 	.word	0x200038d5

0800ff0c <__sinit>:
 800ff0c:	b510      	push	{r4, lr}
 800ff0e:	4604      	mov	r4, r0
 800ff10:	f7ff fff0 	bl	800fef4 <__sfp_lock_acquire>
 800ff14:	6a23      	ldr	r3, [r4, #32]
 800ff16:	b11b      	cbz	r3, 800ff20 <__sinit+0x14>
 800ff18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff1c:	f7ff bff0 	b.w	800ff00 <__sfp_lock_release>
 800ff20:	4b04      	ldr	r3, [pc, #16]	@ (800ff34 <__sinit+0x28>)
 800ff22:	6223      	str	r3, [r4, #32]
 800ff24:	4b04      	ldr	r3, [pc, #16]	@ (800ff38 <__sinit+0x2c>)
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d1f5      	bne.n	800ff18 <__sinit+0xc>
 800ff2c:	f7ff ffc4 	bl	800feb8 <global_stdio_init.part.0>
 800ff30:	e7f2      	b.n	800ff18 <__sinit+0xc>
 800ff32:	bf00      	nop
 800ff34:	0800fe79 	.word	0x0800fe79
 800ff38:	200038cc 	.word	0x200038cc

0800ff3c <_fwalk_sglue>:
 800ff3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff40:	4607      	mov	r7, r0
 800ff42:	4688      	mov	r8, r1
 800ff44:	4614      	mov	r4, r2
 800ff46:	2600      	movs	r6, #0
 800ff48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ff4c:	f1b9 0901 	subs.w	r9, r9, #1
 800ff50:	d505      	bpl.n	800ff5e <_fwalk_sglue+0x22>
 800ff52:	6824      	ldr	r4, [r4, #0]
 800ff54:	2c00      	cmp	r4, #0
 800ff56:	d1f7      	bne.n	800ff48 <_fwalk_sglue+0xc>
 800ff58:	4630      	mov	r0, r6
 800ff5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff5e:	89ab      	ldrh	r3, [r5, #12]
 800ff60:	2b01      	cmp	r3, #1
 800ff62:	d907      	bls.n	800ff74 <_fwalk_sglue+0x38>
 800ff64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ff68:	3301      	adds	r3, #1
 800ff6a:	d003      	beq.n	800ff74 <_fwalk_sglue+0x38>
 800ff6c:	4629      	mov	r1, r5
 800ff6e:	4638      	mov	r0, r7
 800ff70:	47c0      	blx	r8
 800ff72:	4306      	orrs	r6, r0
 800ff74:	3568      	adds	r5, #104	@ 0x68
 800ff76:	e7e9      	b.n	800ff4c <_fwalk_sglue+0x10>

0800ff78 <siprintf>:
 800ff78:	b40e      	push	{r1, r2, r3}
 800ff7a:	b500      	push	{lr}
 800ff7c:	b09c      	sub	sp, #112	@ 0x70
 800ff7e:	ab1d      	add	r3, sp, #116	@ 0x74
 800ff80:	9002      	str	r0, [sp, #8]
 800ff82:	9006      	str	r0, [sp, #24]
 800ff84:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ff88:	4809      	ldr	r0, [pc, #36]	@ (800ffb0 <siprintf+0x38>)
 800ff8a:	9107      	str	r1, [sp, #28]
 800ff8c:	9104      	str	r1, [sp, #16]
 800ff8e:	4909      	ldr	r1, [pc, #36]	@ (800ffb4 <siprintf+0x3c>)
 800ff90:	f853 2b04 	ldr.w	r2, [r3], #4
 800ff94:	9105      	str	r1, [sp, #20]
 800ff96:	6800      	ldr	r0, [r0, #0]
 800ff98:	9301      	str	r3, [sp, #4]
 800ff9a:	a902      	add	r1, sp, #8
 800ff9c:	f002 fbb6 	bl	801270c <_svfiprintf_r>
 800ffa0:	9b02      	ldr	r3, [sp, #8]
 800ffa2:	2200      	movs	r2, #0
 800ffa4:	701a      	strb	r2, [r3, #0]
 800ffa6:	b01c      	add	sp, #112	@ 0x70
 800ffa8:	f85d eb04 	ldr.w	lr, [sp], #4
 800ffac:	b003      	add	sp, #12
 800ffae:	4770      	bx	lr
 800ffb0:	20000190 	.word	0x20000190
 800ffb4:	ffff0208 	.word	0xffff0208

0800ffb8 <__sread>:
 800ffb8:	b510      	push	{r4, lr}
 800ffba:	460c      	mov	r4, r1
 800ffbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ffc0:	f000 f86c 	bl	801009c <_read_r>
 800ffc4:	2800      	cmp	r0, #0
 800ffc6:	bfab      	itete	ge
 800ffc8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ffca:	89a3      	ldrhlt	r3, [r4, #12]
 800ffcc:	181b      	addge	r3, r3, r0
 800ffce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ffd2:	bfac      	ite	ge
 800ffd4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ffd6:	81a3      	strhlt	r3, [r4, #12]
 800ffd8:	bd10      	pop	{r4, pc}

0800ffda <__swrite>:
 800ffda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffde:	461f      	mov	r7, r3
 800ffe0:	898b      	ldrh	r3, [r1, #12]
 800ffe2:	05db      	lsls	r3, r3, #23
 800ffe4:	4605      	mov	r5, r0
 800ffe6:	460c      	mov	r4, r1
 800ffe8:	4616      	mov	r6, r2
 800ffea:	d505      	bpl.n	800fff8 <__swrite+0x1e>
 800ffec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fff0:	2302      	movs	r3, #2
 800fff2:	2200      	movs	r2, #0
 800fff4:	f000 f840 	bl	8010078 <_lseek_r>
 800fff8:	89a3      	ldrh	r3, [r4, #12]
 800fffa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fffe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010002:	81a3      	strh	r3, [r4, #12]
 8010004:	4632      	mov	r2, r6
 8010006:	463b      	mov	r3, r7
 8010008:	4628      	mov	r0, r5
 801000a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801000e:	f000 b857 	b.w	80100c0 <_write_r>

08010012 <__sseek>:
 8010012:	b510      	push	{r4, lr}
 8010014:	460c      	mov	r4, r1
 8010016:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801001a:	f000 f82d 	bl	8010078 <_lseek_r>
 801001e:	1c43      	adds	r3, r0, #1
 8010020:	89a3      	ldrh	r3, [r4, #12]
 8010022:	bf15      	itete	ne
 8010024:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010026:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801002a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801002e:	81a3      	strheq	r3, [r4, #12]
 8010030:	bf18      	it	ne
 8010032:	81a3      	strhne	r3, [r4, #12]
 8010034:	bd10      	pop	{r4, pc}

08010036 <__sclose>:
 8010036:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801003a:	f000 b80d 	b.w	8010058 <_close_r>

0801003e <memset>:
 801003e:	4402      	add	r2, r0
 8010040:	4603      	mov	r3, r0
 8010042:	4293      	cmp	r3, r2
 8010044:	d100      	bne.n	8010048 <memset+0xa>
 8010046:	4770      	bx	lr
 8010048:	f803 1b01 	strb.w	r1, [r3], #1
 801004c:	e7f9      	b.n	8010042 <memset+0x4>
	...

08010050 <_localeconv_r>:
 8010050:	4800      	ldr	r0, [pc, #0]	@ (8010054 <_localeconv_r+0x4>)
 8010052:	4770      	bx	lr
 8010054:	200002d0 	.word	0x200002d0

08010058 <_close_r>:
 8010058:	b538      	push	{r3, r4, r5, lr}
 801005a:	4d06      	ldr	r5, [pc, #24]	@ (8010074 <_close_r+0x1c>)
 801005c:	2300      	movs	r3, #0
 801005e:	4604      	mov	r4, r0
 8010060:	4608      	mov	r0, r1
 8010062:	602b      	str	r3, [r5, #0]
 8010064:	f7f2 f9be 	bl	80023e4 <_close>
 8010068:	1c43      	adds	r3, r0, #1
 801006a:	d102      	bne.n	8010072 <_close_r+0x1a>
 801006c:	682b      	ldr	r3, [r5, #0]
 801006e:	b103      	cbz	r3, 8010072 <_close_r+0x1a>
 8010070:	6023      	str	r3, [r4, #0]
 8010072:	bd38      	pop	{r3, r4, r5, pc}
 8010074:	200038d0 	.word	0x200038d0

08010078 <_lseek_r>:
 8010078:	b538      	push	{r3, r4, r5, lr}
 801007a:	4d07      	ldr	r5, [pc, #28]	@ (8010098 <_lseek_r+0x20>)
 801007c:	4604      	mov	r4, r0
 801007e:	4608      	mov	r0, r1
 8010080:	4611      	mov	r1, r2
 8010082:	2200      	movs	r2, #0
 8010084:	602a      	str	r2, [r5, #0]
 8010086:	461a      	mov	r2, r3
 8010088:	f7f2 f9d3 	bl	8002432 <_lseek>
 801008c:	1c43      	adds	r3, r0, #1
 801008e:	d102      	bne.n	8010096 <_lseek_r+0x1e>
 8010090:	682b      	ldr	r3, [r5, #0]
 8010092:	b103      	cbz	r3, 8010096 <_lseek_r+0x1e>
 8010094:	6023      	str	r3, [r4, #0]
 8010096:	bd38      	pop	{r3, r4, r5, pc}
 8010098:	200038d0 	.word	0x200038d0

0801009c <_read_r>:
 801009c:	b538      	push	{r3, r4, r5, lr}
 801009e:	4d07      	ldr	r5, [pc, #28]	@ (80100bc <_read_r+0x20>)
 80100a0:	4604      	mov	r4, r0
 80100a2:	4608      	mov	r0, r1
 80100a4:	4611      	mov	r1, r2
 80100a6:	2200      	movs	r2, #0
 80100a8:	602a      	str	r2, [r5, #0]
 80100aa:	461a      	mov	r2, r3
 80100ac:	f7f2 f961 	bl	8002372 <_read>
 80100b0:	1c43      	adds	r3, r0, #1
 80100b2:	d102      	bne.n	80100ba <_read_r+0x1e>
 80100b4:	682b      	ldr	r3, [r5, #0]
 80100b6:	b103      	cbz	r3, 80100ba <_read_r+0x1e>
 80100b8:	6023      	str	r3, [r4, #0]
 80100ba:	bd38      	pop	{r3, r4, r5, pc}
 80100bc:	200038d0 	.word	0x200038d0

080100c0 <_write_r>:
 80100c0:	b538      	push	{r3, r4, r5, lr}
 80100c2:	4d07      	ldr	r5, [pc, #28]	@ (80100e0 <_write_r+0x20>)
 80100c4:	4604      	mov	r4, r0
 80100c6:	4608      	mov	r0, r1
 80100c8:	4611      	mov	r1, r2
 80100ca:	2200      	movs	r2, #0
 80100cc:	602a      	str	r2, [r5, #0]
 80100ce:	461a      	mov	r2, r3
 80100d0:	f7f2 f96c 	bl	80023ac <_write>
 80100d4:	1c43      	adds	r3, r0, #1
 80100d6:	d102      	bne.n	80100de <_write_r+0x1e>
 80100d8:	682b      	ldr	r3, [r5, #0]
 80100da:	b103      	cbz	r3, 80100de <_write_r+0x1e>
 80100dc:	6023      	str	r3, [r4, #0]
 80100de:	bd38      	pop	{r3, r4, r5, pc}
 80100e0:	200038d0 	.word	0x200038d0

080100e4 <__errno>:
 80100e4:	4b01      	ldr	r3, [pc, #4]	@ (80100ec <__errno+0x8>)
 80100e6:	6818      	ldr	r0, [r3, #0]
 80100e8:	4770      	bx	lr
 80100ea:	bf00      	nop
 80100ec:	20000190 	.word	0x20000190

080100f0 <__libc_init_array>:
 80100f0:	b570      	push	{r4, r5, r6, lr}
 80100f2:	4d0d      	ldr	r5, [pc, #52]	@ (8010128 <__libc_init_array+0x38>)
 80100f4:	4c0d      	ldr	r4, [pc, #52]	@ (801012c <__libc_init_array+0x3c>)
 80100f6:	1b64      	subs	r4, r4, r5
 80100f8:	10a4      	asrs	r4, r4, #2
 80100fa:	2600      	movs	r6, #0
 80100fc:	42a6      	cmp	r6, r4
 80100fe:	d109      	bne.n	8010114 <__libc_init_array+0x24>
 8010100:	4d0b      	ldr	r5, [pc, #44]	@ (8010130 <__libc_init_array+0x40>)
 8010102:	4c0c      	ldr	r4, [pc, #48]	@ (8010134 <__libc_init_array+0x44>)
 8010104:	f003 fb72 	bl	80137ec <_init>
 8010108:	1b64      	subs	r4, r4, r5
 801010a:	10a4      	asrs	r4, r4, #2
 801010c:	2600      	movs	r6, #0
 801010e:	42a6      	cmp	r6, r4
 8010110:	d105      	bne.n	801011e <__libc_init_array+0x2e>
 8010112:	bd70      	pop	{r4, r5, r6, pc}
 8010114:	f855 3b04 	ldr.w	r3, [r5], #4
 8010118:	4798      	blx	r3
 801011a:	3601      	adds	r6, #1
 801011c:	e7ee      	b.n	80100fc <__libc_init_array+0xc>
 801011e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010122:	4798      	blx	r3
 8010124:	3601      	adds	r6, #1
 8010126:	e7f2      	b.n	801010e <__libc_init_array+0x1e>
 8010128:	08013cb8 	.word	0x08013cb8
 801012c:	08013cb8 	.word	0x08013cb8
 8010130:	08013cb8 	.word	0x08013cb8
 8010134:	08013cbc 	.word	0x08013cbc

08010138 <__retarget_lock_init_recursive>:
 8010138:	4770      	bx	lr

0801013a <__retarget_lock_acquire_recursive>:
 801013a:	4770      	bx	lr

0801013c <__retarget_lock_release_recursive>:
 801013c:	4770      	bx	lr
	...

08010140 <nanf>:
 8010140:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8010148 <nanf+0x8>
 8010144:	4770      	bx	lr
 8010146:	bf00      	nop
 8010148:	7fc00000 	.word	0x7fc00000

0801014c <quorem>:
 801014c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010150:	6903      	ldr	r3, [r0, #16]
 8010152:	690c      	ldr	r4, [r1, #16]
 8010154:	42a3      	cmp	r3, r4
 8010156:	4607      	mov	r7, r0
 8010158:	db7e      	blt.n	8010258 <quorem+0x10c>
 801015a:	3c01      	subs	r4, #1
 801015c:	f101 0814 	add.w	r8, r1, #20
 8010160:	00a3      	lsls	r3, r4, #2
 8010162:	f100 0514 	add.w	r5, r0, #20
 8010166:	9300      	str	r3, [sp, #0]
 8010168:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801016c:	9301      	str	r3, [sp, #4]
 801016e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010172:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010176:	3301      	adds	r3, #1
 8010178:	429a      	cmp	r2, r3
 801017a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801017e:	fbb2 f6f3 	udiv	r6, r2, r3
 8010182:	d32e      	bcc.n	80101e2 <quorem+0x96>
 8010184:	f04f 0a00 	mov.w	sl, #0
 8010188:	46c4      	mov	ip, r8
 801018a:	46ae      	mov	lr, r5
 801018c:	46d3      	mov	fp, sl
 801018e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010192:	b298      	uxth	r0, r3
 8010194:	fb06 a000 	mla	r0, r6, r0, sl
 8010198:	0c02      	lsrs	r2, r0, #16
 801019a:	0c1b      	lsrs	r3, r3, #16
 801019c:	fb06 2303 	mla	r3, r6, r3, r2
 80101a0:	f8de 2000 	ldr.w	r2, [lr]
 80101a4:	b280      	uxth	r0, r0
 80101a6:	b292      	uxth	r2, r2
 80101a8:	1a12      	subs	r2, r2, r0
 80101aa:	445a      	add	r2, fp
 80101ac:	f8de 0000 	ldr.w	r0, [lr]
 80101b0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80101b4:	b29b      	uxth	r3, r3
 80101b6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80101ba:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80101be:	b292      	uxth	r2, r2
 80101c0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80101c4:	45e1      	cmp	r9, ip
 80101c6:	f84e 2b04 	str.w	r2, [lr], #4
 80101ca:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80101ce:	d2de      	bcs.n	801018e <quorem+0x42>
 80101d0:	9b00      	ldr	r3, [sp, #0]
 80101d2:	58eb      	ldr	r3, [r5, r3]
 80101d4:	b92b      	cbnz	r3, 80101e2 <quorem+0x96>
 80101d6:	9b01      	ldr	r3, [sp, #4]
 80101d8:	3b04      	subs	r3, #4
 80101da:	429d      	cmp	r5, r3
 80101dc:	461a      	mov	r2, r3
 80101de:	d32f      	bcc.n	8010240 <quorem+0xf4>
 80101e0:	613c      	str	r4, [r7, #16]
 80101e2:	4638      	mov	r0, r7
 80101e4:	f001 f9c4 	bl	8011570 <__mcmp>
 80101e8:	2800      	cmp	r0, #0
 80101ea:	db25      	blt.n	8010238 <quorem+0xec>
 80101ec:	4629      	mov	r1, r5
 80101ee:	2000      	movs	r0, #0
 80101f0:	f858 2b04 	ldr.w	r2, [r8], #4
 80101f4:	f8d1 c000 	ldr.w	ip, [r1]
 80101f8:	fa1f fe82 	uxth.w	lr, r2
 80101fc:	fa1f f38c 	uxth.w	r3, ip
 8010200:	eba3 030e 	sub.w	r3, r3, lr
 8010204:	4403      	add	r3, r0
 8010206:	0c12      	lsrs	r2, r2, #16
 8010208:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801020c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8010210:	b29b      	uxth	r3, r3
 8010212:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010216:	45c1      	cmp	r9, r8
 8010218:	f841 3b04 	str.w	r3, [r1], #4
 801021c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010220:	d2e6      	bcs.n	80101f0 <quorem+0xa4>
 8010222:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010226:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801022a:	b922      	cbnz	r2, 8010236 <quorem+0xea>
 801022c:	3b04      	subs	r3, #4
 801022e:	429d      	cmp	r5, r3
 8010230:	461a      	mov	r2, r3
 8010232:	d30b      	bcc.n	801024c <quorem+0x100>
 8010234:	613c      	str	r4, [r7, #16]
 8010236:	3601      	adds	r6, #1
 8010238:	4630      	mov	r0, r6
 801023a:	b003      	add	sp, #12
 801023c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010240:	6812      	ldr	r2, [r2, #0]
 8010242:	3b04      	subs	r3, #4
 8010244:	2a00      	cmp	r2, #0
 8010246:	d1cb      	bne.n	80101e0 <quorem+0x94>
 8010248:	3c01      	subs	r4, #1
 801024a:	e7c6      	b.n	80101da <quorem+0x8e>
 801024c:	6812      	ldr	r2, [r2, #0]
 801024e:	3b04      	subs	r3, #4
 8010250:	2a00      	cmp	r2, #0
 8010252:	d1ef      	bne.n	8010234 <quorem+0xe8>
 8010254:	3c01      	subs	r4, #1
 8010256:	e7ea      	b.n	801022e <quorem+0xe2>
 8010258:	2000      	movs	r0, #0
 801025a:	e7ee      	b.n	801023a <quorem+0xee>
 801025c:	0000      	movs	r0, r0
	...

08010260 <_dtoa_r>:
 8010260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010264:	69c7      	ldr	r7, [r0, #28]
 8010266:	b099      	sub	sp, #100	@ 0x64
 8010268:	ed8d 0b02 	vstr	d0, [sp, #8]
 801026c:	ec55 4b10 	vmov	r4, r5, d0
 8010270:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8010272:	9109      	str	r1, [sp, #36]	@ 0x24
 8010274:	4683      	mov	fp, r0
 8010276:	920e      	str	r2, [sp, #56]	@ 0x38
 8010278:	9313      	str	r3, [sp, #76]	@ 0x4c
 801027a:	b97f      	cbnz	r7, 801029c <_dtoa_r+0x3c>
 801027c:	2010      	movs	r0, #16
 801027e:	f000 fdfd 	bl	8010e7c <malloc>
 8010282:	4602      	mov	r2, r0
 8010284:	f8cb 001c 	str.w	r0, [fp, #28]
 8010288:	b920      	cbnz	r0, 8010294 <_dtoa_r+0x34>
 801028a:	4ba7      	ldr	r3, [pc, #668]	@ (8010528 <_dtoa_r+0x2c8>)
 801028c:	21ef      	movs	r1, #239	@ 0xef
 801028e:	48a7      	ldr	r0, [pc, #668]	@ (801052c <_dtoa_r+0x2cc>)
 8010290:	f002 fc36 	bl	8012b00 <__assert_func>
 8010294:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010298:	6007      	str	r7, [r0, #0]
 801029a:	60c7      	str	r7, [r0, #12]
 801029c:	f8db 301c 	ldr.w	r3, [fp, #28]
 80102a0:	6819      	ldr	r1, [r3, #0]
 80102a2:	b159      	cbz	r1, 80102bc <_dtoa_r+0x5c>
 80102a4:	685a      	ldr	r2, [r3, #4]
 80102a6:	604a      	str	r2, [r1, #4]
 80102a8:	2301      	movs	r3, #1
 80102aa:	4093      	lsls	r3, r2
 80102ac:	608b      	str	r3, [r1, #8]
 80102ae:	4658      	mov	r0, fp
 80102b0:	f000 feda 	bl	8011068 <_Bfree>
 80102b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80102b8:	2200      	movs	r2, #0
 80102ba:	601a      	str	r2, [r3, #0]
 80102bc:	1e2b      	subs	r3, r5, #0
 80102be:	bfb9      	ittee	lt
 80102c0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80102c4:	9303      	strlt	r3, [sp, #12]
 80102c6:	2300      	movge	r3, #0
 80102c8:	6033      	strge	r3, [r6, #0]
 80102ca:	9f03      	ldr	r7, [sp, #12]
 80102cc:	4b98      	ldr	r3, [pc, #608]	@ (8010530 <_dtoa_r+0x2d0>)
 80102ce:	bfbc      	itt	lt
 80102d0:	2201      	movlt	r2, #1
 80102d2:	6032      	strlt	r2, [r6, #0]
 80102d4:	43bb      	bics	r3, r7
 80102d6:	d112      	bne.n	80102fe <_dtoa_r+0x9e>
 80102d8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80102da:	f242 730f 	movw	r3, #9999	@ 0x270f
 80102de:	6013      	str	r3, [r2, #0]
 80102e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80102e4:	4323      	orrs	r3, r4
 80102e6:	f000 854d 	beq.w	8010d84 <_dtoa_r+0xb24>
 80102ea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80102ec:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8010544 <_dtoa_r+0x2e4>
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	f000 854f 	beq.w	8010d94 <_dtoa_r+0xb34>
 80102f6:	f10a 0303 	add.w	r3, sl, #3
 80102fa:	f000 bd49 	b.w	8010d90 <_dtoa_r+0xb30>
 80102fe:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010302:	2200      	movs	r2, #0
 8010304:	ec51 0b17 	vmov	r0, r1, d7
 8010308:	2300      	movs	r3, #0
 801030a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801030e:	f7f0 fc03 	bl	8000b18 <__aeabi_dcmpeq>
 8010312:	4680      	mov	r8, r0
 8010314:	b158      	cbz	r0, 801032e <_dtoa_r+0xce>
 8010316:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010318:	2301      	movs	r3, #1
 801031a:	6013      	str	r3, [r2, #0]
 801031c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801031e:	b113      	cbz	r3, 8010326 <_dtoa_r+0xc6>
 8010320:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010322:	4b84      	ldr	r3, [pc, #528]	@ (8010534 <_dtoa_r+0x2d4>)
 8010324:	6013      	str	r3, [r2, #0]
 8010326:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8010548 <_dtoa_r+0x2e8>
 801032a:	f000 bd33 	b.w	8010d94 <_dtoa_r+0xb34>
 801032e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8010332:	aa16      	add	r2, sp, #88	@ 0x58
 8010334:	a917      	add	r1, sp, #92	@ 0x5c
 8010336:	4658      	mov	r0, fp
 8010338:	f001 fa3a 	bl	80117b0 <__d2b>
 801033c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8010340:	4681      	mov	r9, r0
 8010342:	2e00      	cmp	r6, #0
 8010344:	d077      	beq.n	8010436 <_dtoa_r+0x1d6>
 8010346:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010348:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801034c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010350:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010354:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8010358:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801035c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8010360:	4619      	mov	r1, r3
 8010362:	2200      	movs	r2, #0
 8010364:	4b74      	ldr	r3, [pc, #464]	@ (8010538 <_dtoa_r+0x2d8>)
 8010366:	f7ef ffb7 	bl	80002d8 <__aeabi_dsub>
 801036a:	a369      	add	r3, pc, #420	@ (adr r3, 8010510 <_dtoa_r+0x2b0>)
 801036c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010370:	f7f0 f96a 	bl	8000648 <__aeabi_dmul>
 8010374:	a368      	add	r3, pc, #416	@ (adr r3, 8010518 <_dtoa_r+0x2b8>)
 8010376:	e9d3 2300 	ldrd	r2, r3, [r3]
 801037a:	f7ef ffaf 	bl	80002dc <__adddf3>
 801037e:	4604      	mov	r4, r0
 8010380:	4630      	mov	r0, r6
 8010382:	460d      	mov	r5, r1
 8010384:	f7f0 f8f6 	bl	8000574 <__aeabi_i2d>
 8010388:	a365      	add	r3, pc, #404	@ (adr r3, 8010520 <_dtoa_r+0x2c0>)
 801038a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801038e:	f7f0 f95b 	bl	8000648 <__aeabi_dmul>
 8010392:	4602      	mov	r2, r0
 8010394:	460b      	mov	r3, r1
 8010396:	4620      	mov	r0, r4
 8010398:	4629      	mov	r1, r5
 801039a:	f7ef ff9f 	bl	80002dc <__adddf3>
 801039e:	4604      	mov	r4, r0
 80103a0:	460d      	mov	r5, r1
 80103a2:	f7f0 fc01 	bl	8000ba8 <__aeabi_d2iz>
 80103a6:	2200      	movs	r2, #0
 80103a8:	4607      	mov	r7, r0
 80103aa:	2300      	movs	r3, #0
 80103ac:	4620      	mov	r0, r4
 80103ae:	4629      	mov	r1, r5
 80103b0:	f7f0 fbbc 	bl	8000b2c <__aeabi_dcmplt>
 80103b4:	b140      	cbz	r0, 80103c8 <_dtoa_r+0x168>
 80103b6:	4638      	mov	r0, r7
 80103b8:	f7f0 f8dc 	bl	8000574 <__aeabi_i2d>
 80103bc:	4622      	mov	r2, r4
 80103be:	462b      	mov	r3, r5
 80103c0:	f7f0 fbaa 	bl	8000b18 <__aeabi_dcmpeq>
 80103c4:	b900      	cbnz	r0, 80103c8 <_dtoa_r+0x168>
 80103c6:	3f01      	subs	r7, #1
 80103c8:	2f16      	cmp	r7, #22
 80103ca:	d851      	bhi.n	8010470 <_dtoa_r+0x210>
 80103cc:	4b5b      	ldr	r3, [pc, #364]	@ (801053c <_dtoa_r+0x2dc>)
 80103ce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80103d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80103da:	f7f0 fba7 	bl	8000b2c <__aeabi_dcmplt>
 80103de:	2800      	cmp	r0, #0
 80103e0:	d048      	beq.n	8010474 <_dtoa_r+0x214>
 80103e2:	3f01      	subs	r7, #1
 80103e4:	2300      	movs	r3, #0
 80103e6:	9312      	str	r3, [sp, #72]	@ 0x48
 80103e8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80103ea:	1b9b      	subs	r3, r3, r6
 80103ec:	1e5a      	subs	r2, r3, #1
 80103ee:	bf44      	itt	mi
 80103f0:	f1c3 0801 	rsbmi	r8, r3, #1
 80103f4:	2300      	movmi	r3, #0
 80103f6:	9208      	str	r2, [sp, #32]
 80103f8:	bf54      	ite	pl
 80103fa:	f04f 0800 	movpl.w	r8, #0
 80103fe:	9308      	strmi	r3, [sp, #32]
 8010400:	2f00      	cmp	r7, #0
 8010402:	db39      	blt.n	8010478 <_dtoa_r+0x218>
 8010404:	9b08      	ldr	r3, [sp, #32]
 8010406:	970f      	str	r7, [sp, #60]	@ 0x3c
 8010408:	443b      	add	r3, r7
 801040a:	9308      	str	r3, [sp, #32]
 801040c:	2300      	movs	r3, #0
 801040e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010410:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010412:	2b09      	cmp	r3, #9
 8010414:	d864      	bhi.n	80104e0 <_dtoa_r+0x280>
 8010416:	2b05      	cmp	r3, #5
 8010418:	bfc4      	itt	gt
 801041a:	3b04      	subgt	r3, #4
 801041c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801041e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010420:	f1a3 0302 	sub.w	r3, r3, #2
 8010424:	bfcc      	ite	gt
 8010426:	2400      	movgt	r4, #0
 8010428:	2401      	movle	r4, #1
 801042a:	2b03      	cmp	r3, #3
 801042c:	d863      	bhi.n	80104f6 <_dtoa_r+0x296>
 801042e:	e8df f003 	tbb	[pc, r3]
 8010432:	372a      	.short	0x372a
 8010434:	5535      	.short	0x5535
 8010436:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801043a:	441e      	add	r6, r3
 801043c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8010440:	2b20      	cmp	r3, #32
 8010442:	bfc1      	itttt	gt
 8010444:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8010448:	409f      	lslgt	r7, r3
 801044a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801044e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8010452:	bfd6      	itet	le
 8010454:	f1c3 0320 	rsble	r3, r3, #32
 8010458:	ea47 0003 	orrgt.w	r0, r7, r3
 801045c:	fa04 f003 	lslle.w	r0, r4, r3
 8010460:	f7f0 f878 	bl	8000554 <__aeabi_ui2d>
 8010464:	2201      	movs	r2, #1
 8010466:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801046a:	3e01      	subs	r6, #1
 801046c:	9214      	str	r2, [sp, #80]	@ 0x50
 801046e:	e777      	b.n	8010360 <_dtoa_r+0x100>
 8010470:	2301      	movs	r3, #1
 8010472:	e7b8      	b.n	80103e6 <_dtoa_r+0x186>
 8010474:	9012      	str	r0, [sp, #72]	@ 0x48
 8010476:	e7b7      	b.n	80103e8 <_dtoa_r+0x188>
 8010478:	427b      	negs	r3, r7
 801047a:	930a      	str	r3, [sp, #40]	@ 0x28
 801047c:	2300      	movs	r3, #0
 801047e:	eba8 0807 	sub.w	r8, r8, r7
 8010482:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010484:	e7c4      	b.n	8010410 <_dtoa_r+0x1b0>
 8010486:	2300      	movs	r3, #0
 8010488:	930b      	str	r3, [sp, #44]	@ 0x2c
 801048a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801048c:	2b00      	cmp	r3, #0
 801048e:	dc35      	bgt.n	80104fc <_dtoa_r+0x29c>
 8010490:	2301      	movs	r3, #1
 8010492:	9300      	str	r3, [sp, #0]
 8010494:	9307      	str	r3, [sp, #28]
 8010496:	461a      	mov	r2, r3
 8010498:	920e      	str	r2, [sp, #56]	@ 0x38
 801049a:	e00b      	b.n	80104b4 <_dtoa_r+0x254>
 801049c:	2301      	movs	r3, #1
 801049e:	e7f3      	b.n	8010488 <_dtoa_r+0x228>
 80104a0:	2300      	movs	r3, #0
 80104a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80104a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80104a6:	18fb      	adds	r3, r7, r3
 80104a8:	9300      	str	r3, [sp, #0]
 80104aa:	3301      	adds	r3, #1
 80104ac:	2b01      	cmp	r3, #1
 80104ae:	9307      	str	r3, [sp, #28]
 80104b0:	bfb8      	it	lt
 80104b2:	2301      	movlt	r3, #1
 80104b4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80104b8:	2100      	movs	r1, #0
 80104ba:	2204      	movs	r2, #4
 80104bc:	f102 0514 	add.w	r5, r2, #20
 80104c0:	429d      	cmp	r5, r3
 80104c2:	d91f      	bls.n	8010504 <_dtoa_r+0x2a4>
 80104c4:	6041      	str	r1, [r0, #4]
 80104c6:	4658      	mov	r0, fp
 80104c8:	f000 fd8e 	bl	8010fe8 <_Balloc>
 80104cc:	4682      	mov	sl, r0
 80104ce:	2800      	cmp	r0, #0
 80104d0:	d13c      	bne.n	801054c <_dtoa_r+0x2ec>
 80104d2:	4b1b      	ldr	r3, [pc, #108]	@ (8010540 <_dtoa_r+0x2e0>)
 80104d4:	4602      	mov	r2, r0
 80104d6:	f240 11af 	movw	r1, #431	@ 0x1af
 80104da:	e6d8      	b.n	801028e <_dtoa_r+0x2e>
 80104dc:	2301      	movs	r3, #1
 80104de:	e7e0      	b.n	80104a2 <_dtoa_r+0x242>
 80104e0:	2401      	movs	r4, #1
 80104e2:	2300      	movs	r3, #0
 80104e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80104e6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80104e8:	f04f 33ff 	mov.w	r3, #4294967295
 80104ec:	9300      	str	r3, [sp, #0]
 80104ee:	9307      	str	r3, [sp, #28]
 80104f0:	2200      	movs	r2, #0
 80104f2:	2312      	movs	r3, #18
 80104f4:	e7d0      	b.n	8010498 <_dtoa_r+0x238>
 80104f6:	2301      	movs	r3, #1
 80104f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80104fa:	e7f5      	b.n	80104e8 <_dtoa_r+0x288>
 80104fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80104fe:	9300      	str	r3, [sp, #0]
 8010500:	9307      	str	r3, [sp, #28]
 8010502:	e7d7      	b.n	80104b4 <_dtoa_r+0x254>
 8010504:	3101      	adds	r1, #1
 8010506:	0052      	lsls	r2, r2, #1
 8010508:	e7d8      	b.n	80104bc <_dtoa_r+0x25c>
 801050a:	bf00      	nop
 801050c:	f3af 8000 	nop.w
 8010510:	636f4361 	.word	0x636f4361
 8010514:	3fd287a7 	.word	0x3fd287a7
 8010518:	8b60c8b3 	.word	0x8b60c8b3
 801051c:	3fc68a28 	.word	0x3fc68a28
 8010520:	509f79fb 	.word	0x509f79fb
 8010524:	3fd34413 	.word	0x3fd34413
 8010528:	080138ca 	.word	0x080138ca
 801052c:	080138e1 	.word	0x080138e1
 8010530:	7ff00000 	.word	0x7ff00000
 8010534:	08013895 	.word	0x08013895
 8010538:	3ff80000 	.word	0x3ff80000
 801053c:	080139d8 	.word	0x080139d8
 8010540:	08013939 	.word	0x08013939
 8010544:	080138c6 	.word	0x080138c6
 8010548:	08013894 	.word	0x08013894
 801054c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010550:	6018      	str	r0, [r3, #0]
 8010552:	9b07      	ldr	r3, [sp, #28]
 8010554:	2b0e      	cmp	r3, #14
 8010556:	f200 80a4 	bhi.w	80106a2 <_dtoa_r+0x442>
 801055a:	2c00      	cmp	r4, #0
 801055c:	f000 80a1 	beq.w	80106a2 <_dtoa_r+0x442>
 8010560:	2f00      	cmp	r7, #0
 8010562:	dd33      	ble.n	80105cc <_dtoa_r+0x36c>
 8010564:	4bad      	ldr	r3, [pc, #692]	@ (801081c <_dtoa_r+0x5bc>)
 8010566:	f007 020f 	and.w	r2, r7, #15
 801056a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801056e:	ed93 7b00 	vldr	d7, [r3]
 8010572:	05f8      	lsls	r0, r7, #23
 8010574:	ed8d 7b04 	vstr	d7, [sp, #16]
 8010578:	ea4f 1427 	mov.w	r4, r7, asr #4
 801057c:	d516      	bpl.n	80105ac <_dtoa_r+0x34c>
 801057e:	4ba8      	ldr	r3, [pc, #672]	@ (8010820 <_dtoa_r+0x5c0>)
 8010580:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010584:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010588:	f7f0 f988 	bl	800089c <__aeabi_ddiv>
 801058c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010590:	f004 040f 	and.w	r4, r4, #15
 8010594:	2603      	movs	r6, #3
 8010596:	4da2      	ldr	r5, [pc, #648]	@ (8010820 <_dtoa_r+0x5c0>)
 8010598:	b954      	cbnz	r4, 80105b0 <_dtoa_r+0x350>
 801059a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801059e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80105a2:	f7f0 f97b 	bl	800089c <__aeabi_ddiv>
 80105a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80105aa:	e028      	b.n	80105fe <_dtoa_r+0x39e>
 80105ac:	2602      	movs	r6, #2
 80105ae:	e7f2      	b.n	8010596 <_dtoa_r+0x336>
 80105b0:	07e1      	lsls	r1, r4, #31
 80105b2:	d508      	bpl.n	80105c6 <_dtoa_r+0x366>
 80105b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80105b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80105bc:	f7f0 f844 	bl	8000648 <__aeabi_dmul>
 80105c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80105c4:	3601      	adds	r6, #1
 80105c6:	1064      	asrs	r4, r4, #1
 80105c8:	3508      	adds	r5, #8
 80105ca:	e7e5      	b.n	8010598 <_dtoa_r+0x338>
 80105cc:	f000 80d2 	beq.w	8010774 <_dtoa_r+0x514>
 80105d0:	427c      	negs	r4, r7
 80105d2:	4b92      	ldr	r3, [pc, #584]	@ (801081c <_dtoa_r+0x5bc>)
 80105d4:	4d92      	ldr	r5, [pc, #584]	@ (8010820 <_dtoa_r+0x5c0>)
 80105d6:	f004 020f 	and.w	r2, r4, #15
 80105da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80105de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105e2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80105e6:	f7f0 f82f 	bl	8000648 <__aeabi_dmul>
 80105ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80105ee:	1124      	asrs	r4, r4, #4
 80105f0:	2300      	movs	r3, #0
 80105f2:	2602      	movs	r6, #2
 80105f4:	2c00      	cmp	r4, #0
 80105f6:	f040 80b2 	bne.w	801075e <_dtoa_r+0x4fe>
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d1d3      	bne.n	80105a6 <_dtoa_r+0x346>
 80105fe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010600:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010604:	2b00      	cmp	r3, #0
 8010606:	f000 80b7 	beq.w	8010778 <_dtoa_r+0x518>
 801060a:	4b86      	ldr	r3, [pc, #536]	@ (8010824 <_dtoa_r+0x5c4>)
 801060c:	2200      	movs	r2, #0
 801060e:	4620      	mov	r0, r4
 8010610:	4629      	mov	r1, r5
 8010612:	f7f0 fa8b 	bl	8000b2c <__aeabi_dcmplt>
 8010616:	2800      	cmp	r0, #0
 8010618:	f000 80ae 	beq.w	8010778 <_dtoa_r+0x518>
 801061c:	9b07      	ldr	r3, [sp, #28]
 801061e:	2b00      	cmp	r3, #0
 8010620:	f000 80aa 	beq.w	8010778 <_dtoa_r+0x518>
 8010624:	9b00      	ldr	r3, [sp, #0]
 8010626:	2b00      	cmp	r3, #0
 8010628:	dd37      	ble.n	801069a <_dtoa_r+0x43a>
 801062a:	1e7b      	subs	r3, r7, #1
 801062c:	9304      	str	r3, [sp, #16]
 801062e:	4620      	mov	r0, r4
 8010630:	4b7d      	ldr	r3, [pc, #500]	@ (8010828 <_dtoa_r+0x5c8>)
 8010632:	2200      	movs	r2, #0
 8010634:	4629      	mov	r1, r5
 8010636:	f7f0 f807 	bl	8000648 <__aeabi_dmul>
 801063a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801063e:	9c00      	ldr	r4, [sp, #0]
 8010640:	3601      	adds	r6, #1
 8010642:	4630      	mov	r0, r6
 8010644:	f7ef ff96 	bl	8000574 <__aeabi_i2d>
 8010648:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801064c:	f7ef fffc 	bl	8000648 <__aeabi_dmul>
 8010650:	4b76      	ldr	r3, [pc, #472]	@ (801082c <_dtoa_r+0x5cc>)
 8010652:	2200      	movs	r2, #0
 8010654:	f7ef fe42 	bl	80002dc <__adddf3>
 8010658:	4605      	mov	r5, r0
 801065a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801065e:	2c00      	cmp	r4, #0
 8010660:	f040 808d 	bne.w	801077e <_dtoa_r+0x51e>
 8010664:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010668:	4b71      	ldr	r3, [pc, #452]	@ (8010830 <_dtoa_r+0x5d0>)
 801066a:	2200      	movs	r2, #0
 801066c:	f7ef fe34 	bl	80002d8 <__aeabi_dsub>
 8010670:	4602      	mov	r2, r0
 8010672:	460b      	mov	r3, r1
 8010674:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010678:	462a      	mov	r2, r5
 801067a:	4633      	mov	r3, r6
 801067c:	f7f0 fa74 	bl	8000b68 <__aeabi_dcmpgt>
 8010680:	2800      	cmp	r0, #0
 8010682:	f040 828b 	bne.w	8010b9c <_dtoa_r+0x93c>
 8010686:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801068a:	462a      	mov	r2, r5
 801068c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8010690:	f7f0 fa4c 	bl	8000b2c <__aeabi_dcmplt>
 8010694:	2800      	cmp	r0, #0
 8010696:	f040 8128 	bne.w	80108ea <_dtoa_r+0x68a>
 801069a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801069e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80106a2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	f2c0 815a 	blt.w	801095e <_dtoa_r+0x6fe>
 80106aa:	2f0e      	cmp	r7, #14
 80106ac:	f300 8157 	bgt.w	801095e <_dtoa_r+0x6fe>
 80106b0:	4b5a      	ldr	r3, [pc, #360]	@ (801081c <_dtoa_r+0x5bc>)
 80106b2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80106b6:	ed93 7b00 	vldr	d7, [r3]
 80106ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80106bc:	2b00      	cmp	r3, #0
 80106be:	ed8d 7b00 	vstr	d7, [sp]
 80106c2:	da03      	bge.n	80106cc <_dtoa_r+0x46c>
 80106c4:	9b07      	ldr	r3, [sp, #28]
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	f340 8101 	ble.w	80108ce <_dtoa_r+0x66e>
 80106cc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80106d0:	4656      	mov	r6, sl
 80106d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80106d6:	4620      	mov	r0, r4
 80106d8:	4629      	mov	r1, r5
 80106da:	f7f0 f8df 	bl	800089c <__aeabi_ddiv>
 80106de:	f7f0 fa63 	bl	8000ba8 <__aeabi_d2iz>
 80106e2:	4680      	mov	r8, r0
 80106e4:	f7ef ff46 	bl	8000574 <__aeabi_i2d>
 80106e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80106ec:	f7ef ffac 	bl	8000648 <__aeabi_dmul>
 80106f0:	4602      	mov	r2, r0
 80106f2:	460b      	mov	r3, r1
 80106f4:	4620      	mov	r0, r4
 80106f6:	4629      	mov	r1, r5
 80106f8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80106fc:	f7ef fdec 	bl	80002d8 <__aeabi_dsub>
 8010700:	f806 4b01 	strb.w	r4, [r6], #1
 8010704:	9d07      	ldr	r5, [sp, #28]
 8010706:	eba6 040a 	sub.w	r4, r6, sl
 801070a:	42a5      	cmp	r5, r4
 801070c:	4602      	mov	r2, r0
 801070e:	460b      	mov	r3, r1
 8010710:	f040 8117 	bne.w	8010942 <_dtoa_r+0x6e2>
 8010714:	f7ef fde2 	bl	80002dc <__adddf3>
 8010718:	e9dd 2300 	ldrd	r2, r3, [sp]
 801071c:	4604      	mov	r4, r0
 801071e:	460d      	mov	r5, r1
 8010720:	f7f0 fa22 	bl	8000b68 <__aeabi_dcmpgt>
 8010724:	2800      	cmp	r0, #0
 8010726:	f040 80f9 	bne.w	801091c <_dtoa_r+0x6bc>
 801072a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801072e:	4620      	mov	r0, r4
 8010730:	4629      	mov	r1, r5
 8010732:	f7f0 f9f1 	bl	8000b18 <__aeabi_dcmpeq>
 8010736:	b118      	cbz	r0, 8010740 <_dtoa_r+0x4e0>
 8010738:	f018 0f01 	tst.w	r8, #1
 801073c:	f040 80ee 	bne.w	801091c <_dtoa_r+0x6bc>
 8010740:	4649      	mov	r1, r9
 8010742:	4658      	mov	r0, fp
 8010744:	f000 fc90 	bl	8011068 <_Bfree>
 8010748:	2300      	movs	r3, #0
 801074a:	7033      	strb	r3, [r6, #0]
 801074c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801074e:	3701      	adds	r7, #1
 8010750:	601f      	str	r7, [r3, #0]
 8010752:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010754:	2b00      	cmp	r3, #0
 8010756:	f000 831d 	beq.w	8010d94 <_dtoa_r+0xb34>
 801075a:	601e      	str	r6, [r3, #0]
 801075c:	e31a      	b.n	8010d94 <_dtoa_r+0xb34>
 801075e:	07e2      	lsls	r2, r4, #31
 8010760:	d505      	bpl.n	801076e <_dtoa_r+0x50e>
 8010762:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010766:	f7ef ff6f 	bl	8000648 <__aeabi_dmul>
 801076a:	3601      	adds	r6, #1
 801076c:	2301      	movs	r3, #1
 801076e:	1064      	asrs	r4, r4, #1
 8010770:	3508      	adds	r5, #8
 8010772:	e73f      	b.n	80105f4 <_dtoa_r+0x394>
 8010774:	2602      	movs	r6, #2
 8010776:	e742      	b.n	80105fe <_dtoa_r+0x39e>
 8010778:	9c07      	ldr	r4, [sp, #28]
 801077a:	9704      	str	r7, [sp, #16]
 801077c:	e761      	b.n	8010642 <_dtoa_r+0x3e2>
 801077e:	4b27      	ldr	r3, [pc, #156]	@ (801081c <_dtoa_r+0x5bc>)
 8010780:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010782:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010786:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801078a:	4454      	add	r4, sl
 801078c:	2900      	cmp	r1, #0
 801078e:	d053      	beq.n	8010838 <_dtoa_r+0x5d8>
 8010790:	4928      	ldr	r1, [pc, #160]	@ (8010834 <_dtoa_r+0x5d4>)
 8010792:	2000      	movs	r0, #0
 8010794:	f7f0 f882 	bl	800089c <__aeabi_ddiv>
 8010798:	4633      	mov	r3, r6
 801079a:	462a      	mov	r2, r5
 801079c:	f7ef fd9c 	bl	80002d8 <__aeabi_dsub>
 80107a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80107a4:	4656      	mov	r6, sl
 80107a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80107aa:	f7f0 f9fd 	bl	8000ba8 <__aeabi_d2iz>
 80107ae:	4605      	mov	r5, r0
 80107b0:	f7ef fee0 	bl	8000574 <__aeabi_i2d>
 80107b4:	4602      	mov	r2, r0
 80107b6:	460b      	mov	r3, r1
 80107b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80107bc:	f7ef fd8c 	bl	80002d8 <__aeabi_dsub>
 80107c0:	3530      	adds	r5, #48	@ 0x30
 80107c2:	4602      	mov	r2, r0
 80107c4:	460b      	mov	r3, r1
 80107c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80107ca:	f806 5b01 	strb.w	r5, [r6], #1
 80107ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80107d2:	f7f0 f9ab 	bl	8000b2c <__aeabi_dcmplt>
 80107d6:	2800      	cmp	r0, #0
 80107d8:	d171      	bne.n	80108be <_dtoa_r+0x65e>
 80107da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80107de:	4911      	ldr	r1, [pc, #68]	@ (8010824 <_dtoa_r+0x5c4>)
 80107e0:	2000      	movs	r0, #0
 80107e2:	f7ef fd79 	bl	80002d8 <__aeabi_dsub>
 80107e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80107ea:	f7f0 f99f 	bl	8000b2c <__aeabi_dcmplt>
 80107ee:	2800      	cmp	r0, #0
 80107f0:	f040 8095 	bne.w	801091e <_dtoa_r+0x6be>
 80107f4:	42a6      	cmp	r6, r4
 80107f6:	f43f af50 	beq.w	801069a <_dtoa_r+0x43a>
 80107fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80107fe:	4b0a      	ldr	r3, [pc, #40]	@ (8010828 <_dtoa_r+0x5c8>)
 8010800:	2200      	movs	r2, #0
 8010802:	f7ef ff21 	bl	8000648 <__aeabi_dmul>
 8010806:	4b08      	ldr	r3, [pc, #32]	@ (8010828 <_dtoa_r+0x5c8>)
 8010808:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801080c:	2200      	movs	r2, #0
 801080e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010812:	f7ef ff19 	bl	8000648 <__aeabi_dmul>
 8010816:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801081a:	e7c4      	b.n	80107a6 <_dtoa_r+0x546>
 801081c:	080139d8 	.word	0x080139d8
 8010820:	080139b0 	.word	0x080139b0
 8010824:	3ff00000 	.word	0x3ff00000
 8010828:	40240000 	.word	0x40240000
 801082c:	401c0000 	.word	0x401c0000
 8010830:	40140000 	.word	0x40140000
 8010834:	3fe00000 	.word	0x3fe00000
 8010838:	4631      	mov	r1, r6
 801083a:	4628      	mov	r0, r5
 801083c:	f7ef ff04 	bl	8000648 <__aeabi_dmul>
 8010840:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010844:	9415      	str	r4, [sp, #84]	@ 0x54
 8010846:	4656      	mov	r6, sl
 8010848:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801084c:	f7f0 f9ac 	bl	8000ba8 <__aeabi_d2iz>
 8010850:	4605      	mov	r5, r0
 8010852:	f7ef fe8f 	bl	8000574 <__aeabi_i2d>
 8010856:	4602      	mov	r2, r0
 8010858:	460b      	mov	r3, r1
 801085a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801085e:	f7ef fd3b 	bl	80002d8 <__aeabi_dsub>
 8010862:	3530      	adds	r5, #48	@ 0x30
 8010864:	f806 5b01 	strb.w	r5, [r6], #1
 8010868:	4602      	mov	r2, r0
 801086a:	460b      	mov	r3, r1
 801086c:	42a6      	cmp	r6, r4
 801086e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010872:	f04f 0200 	mov.w	r2, #0
 8010876:	d124      	bne.n	80108c2 <_dtoa_r+0x662>
 8010878:	4bac      	ldr	r3, [pc, #688]	@ (8010b2c <_dtoa_r+0x8cc>)
 801087a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801087e:	f7ef fd2d 	bl	80002dc <__adddf3>
 8010882:	4602      	mov	r2, r0
 8010884:	460b      	mov	r3, r1
 8010886:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801088a:	f7f0 f96d 	bl	8000b68 <__aeabi_dcmpgt>
 801088e:	2800      	cmp	r0, #0
 8010890:	d145      	bne.n	801091e <_dtoa_r+0x6be>
 8010892:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010896:	49a5      	ldr	r1, [pc, #660]	@ (8010b2c <_dtoa_r+0x8cc>)
 8010898:	2000      	movs	r0, #0
 801089a:	f7ef fd1d 	bl	80002d8 <__aeabi_dsub>
 801089e:	4602      	mov	r2, r0
 80108a0:	460b      	mov	r3, r1
 80108a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80108a6:	f7f0 f941 	bl	8000b2c <__aeabi_dcmplt>
 80108aa:	2800      	cmp	r0, #0
 80108ac:	f43f aef5 	beq.w	801069a <_dtoa_r+0x43a>
 80108b0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80108b2:	1e73      	subs	r3, r6, #1
 80108b4:	9315      	str	r3, [sp, #84]	@ 0x54
 80108b6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80108ba:	2b30      	cmp	r3, #48	@ 0x30
 80108bc:	d0f8      	beq.n	80108b0 <_dtoa_r+0x650>
 80108be:	9f04      	ldr	r7, [sp, #16]
 80108c0:	e73e      	b.n	8010740 <_dtoa_r+0x4e0>
 80108c2:	4b9b      	ldr	r3, [pc, #620]	@ (8010b30 <_dtoa_r+0x8d0>)
 80108c4:	f7ef fec0 	bl	8000648 <__aeabi_dmul>
 80108c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80108cc:	e7bc      	b.n	8010848 <_dtoa_r+0x5e8>
 80108ce:	d10c      	bne.n	80108ea <_dtoa_r+0x68a>
 80108d0:	4b98      	ldr	r3, [pc, #608]	@ (8010b34 <_dtoa_r+0x8d4>)
 80108d2:	2200      	movs	r2, #0
 80108d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80108d8:	f7ef feb6 	bl	8000648 <__aeabi_dmul>
 80108dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80108e0:	f7f0 f938 	bl	8000b54 <__aeabi_dcmpge>
 80108e4:	2800      	cmp	r0, #0
 80108e6:	f000 8157 	beq.w	8010b98 <_dtoa_r+0x938>
 80108ea:	2400      	movs	r4, #0
 80108ec:	4625      	mov	r5, r4
 80108ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80108f0:	43db      	mvns	r3, r3
 80108f2:	9304      	str	r3, [sp, #16]
 80108f4:	4656      	mov	r6, sl
 80108f6:	2700      	movs	r7, #0
 80108f8:	4621      	mov	r1, r4
 80108fa:	4658      	mov	r0, fp
 80108fc:	f000 fbb4 	bl	8011068 <_Bfree>
 8010900:	2d00      	cmp	r5, #0
 8010902:	d0dc      	beq.n	80108be <_dtoa_r+0x65e>
 8010904:	b12f      	cbz	r7, 8010912 <_dtoa_r+0x6b2>
 8010906:	42af      	cmp	r7, r5
 8010908:	d003      	beq.n	8010912 <_dtoa_r+0x6b2>
 801090a:	4639      	mov	r1, r7
 801090c:	4658      	mov	r0, fp
 801090e:	f000 fbab 	bl	8011068 <_Bfree>
 8010912:	4629      	mov	r1, r5
 8010914:	4658      	mov	r0, fp
 8010916:	f000 fba7 	bl	8011068 <_Bfree>
 801091a:	e7d0      	b.n	80108be <_dtoa_r+0x65e>
 801091c:	9704      	str	r7, [sp, #16]
 801091e:	4633      	mov	r3, r6
 8010920:	461e      	mov	r6, r3
 8010922:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010926:	2a39      	cmp	r2, #57	@ 0x39
 8010928:	d107      	bne.n	801093a <_dtoa_r+0x6da>
 801092a:	459a      	cmp	sl, r3
 801092c:	d1f8      	bne.n	8010920 <_dtoa_r+0x6c0>
 801092e:	9a04      	ldr	r2, [sp, #16]
 8010930:	3201      	adds	r2, #1
 8010932:	9204      	str	r2, [sp, #16]
 8010934:	2230      	movs	r2, #48	@ 0x30
 8010936:	f88a 2000 	strb.w	r2, [sl]
 801093a:	781a      	ldrb	r2, [r3, #0]
 801093c:	3201      	adds	r2, #1
 801093e:	701a      	strb	r2, [r3, #0]
 8010940:	e7bd      	b.n	80108be <_dtoa_r+0x65e>
 8010942:	4b7b      	ldr	r3, [pc, #492]	@ (8010b30 <_dtoa_r+0x8d0>)
 8010944:	2200      	movs	r2, #0
 8010946:	f7ef fe7f 	bl	8000648 <__aeabi_dmul>
 801094a:	2200      	movs	r2, #0
 801094c:	2300      	movs	r3, #0
 801094e:	4604      	mov	r4, r0
 8010950:	460d      	mov	r5, r1
 8010952:	f7f0 f8e1 	bl	8000b18 <__aeabi_dcmpeq>
 8010956:	2800      	cmp	r0, #0
 8010958:	f43f aebb 	beq.w	80106d2 <_dtoa_r+0x472>
 801095c:	e6f0      	b.n	8010740 <_dtoa_r+0x4e0>
 801095e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010960:	2a00      	cmp	r2, #0
 8010962:	f000 80db 	beq.w	8010b1c <_dtoa_r+0x8bc>
 8010966:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010968:	2a01      	cmp	r2, #1
 801096a:	f300 80bf 	bgt.w	8010aec <_dtoa_r+0x88c>
 801096e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8010970:	2a00      	cmp	r2, #0
 8010972:	f000 80b7 	beq.w	8010ae4 <_dtoa_r+0x884>
 8010976:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801097a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801097c:	4646      	mov	r6, r8
 801097e:	9a08      	ldr	r2, [sp, #32]
 8010980:	2101      	movs	r1, #1
 8010982:	441a      	add	r2, r3
 8010984:	4658      	mov	r0, fp
 8010986:	4498      	add	r8, r3
 8010988:	9208      	str	r2, [sp, #32]
 801098a:	f000 fc6b 	bl	8011264 <__i2b>
 801098e:	4605      	mov	r5, r0
 8010990:	b15e      	cbz	r6, 80109aa <_dtoa_r+0x74a>
 8010992:	9b08      	ldr	r3, [sp, #32]
 8010994:	2b00      	cmp	r3, #0
 8010996:	dd08      	ble.n	80109aa <_dtoa_r+0x74a>
 8010998:	42b3      	cmp	r3, r6
 801099a:	9a08      	ldr	r2, [sp, #32]
 801099c:	bfa8      	it	ge
 801099e:	4633      	movge	r3, r6
 80109a0:	eba8 0803 	sub.w	r8, r8, r3
 80109a4:	1af6      	subs	r6, r6, r3
 80109a6:	1ad3      	subs	r3, r2, r3
 80109a8:	9308      	str	r3, [sp, #32]
 80109aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80109ac:	b1f3      	cbz	r3, 80109ec <_dtoa_r+0x78c>
 80109ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	f000 80b7 	beq.w	8010b24 <_dtoa_r+0x8c4>
 80109b6:	b18c      	cbz	r4, 80109dc <_dtoa_r+0x77c>
 80109b8:	4629      	mov	r1, r5
 80109ba:	4622      	mov	r2, r4
 80109bc:	4658      	mov	r0, fp
 80109be:	f000 fd11 	bl	80113e4 <__pow5mult>
 80109c2:	464a      	mov	r2, r9
 80109c4:	4601      	mov	r1, r0
 80109c6:	4605      	mov	r5, r0
 80109c8:	4658      	mov	r0, fp
 80109ca:	f000 fc61 	bl	8011290 <__multiply>
 80109ce:	4649      	mov	r1, r9
 80109d0:	9004      	str	r0, [sp, #16]
 80109d2:	4658      	mov	r0, fp
 80109d4:	f000 fb48 	bl	8011068 <_Bfree>
 80109d8:	9b04      	ldr	r3, [sp, #16]
 80109da:	4699      	mov	r9, r3
 80109dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80109de:	1b1a      	subs	r2, r3, r4
 80109e0:	d004      	beq.n	80109ec <_dtoa_r+0x78c>
 80109e2:	4649      	mov	r1, r9
 80109e4:	4658      	mov	r0, fp
 80109e6:	f000 fcfd 	bl	80113e4 <__pow5mult>
 80109ea:	4681      	mov	r9, r0
 80109ec:	2101      	movs	r1, #1
 80109ee:	4658      	mov	r0, fp
 80109f0:	f000 fc38 	bl	8011264 <__i2b>
 80109f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80109f6:	4604      	mov	r4, r0
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	f000 81cf 	beq.w	8010d9c <_dtoa_r+0xb3c>
 80109fe:	461a      	mov	r2, r3
 8010a00:	4601      	mov	r1, r0
 8010a02:	4658      	mov	r0, fp
 8010a04:	f000 fcee 	bl	80113e4 <__pow5mult>
 8010a08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a0a:	2b01      	cmp	r3, #1
 8010a0c:	4604      	mov	r4, r0
 8010a0e:	f300 8095 	bgt.w	8010b3c <_dtoa_r+0x8dc>
 8010a12:	9b02      	ldr	r3, [sp, #8]
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	f040 8087 	bne.w	8010b28 <_dtoa_r+0x8c8>
 8010a1a:	9b03      	ldr	r3, [sp, #12]
 8010a1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	f040 8089 	bne.w	8010b38 <_dtoa_r+0x8d8>
 8010a26:	9b03      	ldr	r3, [sp, #12]
 8010a28:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010a2c:	0d1b      	lsrs	r3, r3, #20
 8010a2e:	051b      	lsls	r3, r3, #20
 8010a30:	b12b      	cbz	r3, 8010a3e <_dtoa_r+0x7de>
 8010a32:	9b08      	ldr	r3, [sp, #32]
 8010a34:	3301      	adds	r3, #1
 8010a36:	9308      	str	r3, [sp, #32]
 8010a38:	f108 0801 	add.w	r8, r8, #1
 8010a3c:	2301      	movs	r3, #1
 8010a3e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010a40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	f000 81b0 	beq.w	8010da8 <_dtoa_r+0xb48>
 8010a48:	6923      	ldr	r3, [r4, #16]
 8010a4a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010a4e:	6918      	ldr	r0, [r3, #16]
 8010a50:	f000 fbbc 	bl	80111cc <__hi0bits>
 8010a54:	f1c0 0020 	rsb	r0, r0, #32
 8010a58:	9b08      	ldr	r3, [sp, #32]
 8010a5a:	4418      	add	r0, r3
 8010a5c:	f010 001f 	ands.w	r0, r0, #31
 8010a60:	d077      	beq.n	8010b52 <_dtoa_r+0x8f2>
 8010a62:	f1c0 0320 	rsb	r3, r0, #32
 8010a66:	2b04      	cmp	r3, #4
 8010a68:	dd6b      	ble.n	8010b42 <_dtoa_r+0x8e2>
 8010a6a:	9b08      	ldr	r3, [sp, #32]
 8010a6c:	f1c0 001c 	rsb	r0, r0, #28
 8010a70:	4403      	add	r3, r0
 8010a72:	4480      	add	r8, r0
 8010a74:	4406      	add	r6, r0
 8010a76:	9308      	str	r3, [sp, #32]
 8010a78:	f1b8 0f00 	cmp.w	r8, #0
 8010a7c:	dd05      	ble.n	8010a8a <_dtoa_r+0x82a>
 8010a7e:	4649      	mov	r1, r9
 8010a80:	4642      	mov	r2, r8
 8010a82:	4658      	mov	r0, fp
 8010a84:	f000 fd08 	bl	8011498 <__lshift>
 8010a88:	4681      	mov	r9, r0
 8010a8a:	9b08      	ldr	r3, [sp, #32]
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	dd05      	ble.n	8010a9c <_dtoa_r+0x83c>
 8010a90:	4621      	mov	r1, r4
 8010a92:	461a      	mov	r2, r3
 8010a94:	4658      	mov	r0, fp
 8010a96:	f000 fcff 	bl	8011498 <__lshift>
 8010a9a:	4604      	mov	r4, r0
 8010a9c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d059      	beq.n	8010b56 <_dtoa_r+0x8f6>
 8010aa2:	4621      	mov	r1, r4
 8010aa4:	4648      	mov	r0, r9
 8010aa6:	f000 fd63 	bl	8011570 <__mcmp>
 8010aaa:	2800      	cmp	r0, #0
 8010aac:	da53      	bge.n	8010b56 <_dtoa_r+0x8f6>
 8010aae:	1e7b      	subs	r3, r7, #1
 8010ab0:	9304      	str	r3, [sp, #16]
 8010ab2:	4649      	mov	r1, r9
 8010ab4:	2300      	movs	r3, #0
 8010ab6:	220a      	movs	r2, #10
 8010ab8:	4658      	mov	r0, fp
 8010aba:	f000 faf7 	bl	80110ac <__multadd>
 8010abe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010ac0:	4681      	mov	r9, r0
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	f000 8172 	beq.w	8010dac <_dtoa_r+0xb4c>
 8010ac8:	2300      	movs	r3, #0
 8010aca:	4629      	mov	r1, r5
 8010acc:	220a      	movs	r2, #10
 8010ace:	4658      	mov	r0, fp
 8010ad0:	f000 faec 	bl	80110ac <__multadd>
 8010ad4:	9b00      	ldr	r3, [sp, #0]
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	4605      	mov	r5, r0
 8010ada:	dc67      	bgt.n	8010bac <_dtoa_r+0x94c>
 8010adc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ade:	2b02      	cmp	r3, #2
 8010ae0:	dc41      	bgt.n	8010b66 <_dtoa_r+0x906>
 8010ae2:	e063      	b.n	8010bac <_dtoa_r+0x94c>
 8010ae4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010ae6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8010aea:	e746      	b.n	801097a <_dtoa_r+0x71a>
 8010aec:	9b07      	ldr	r3, [sp, #28]
 8010aee:	1e5c      	subs	r4, r3, #1
 8010af0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010af2:	42a3      	cmp	r3, r4
 8010af4:	bfbf      	itttt	lt
 8010af6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8010af8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8010afa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8010afc:	1ae3      	sublt	r3, r4, r3
 8010afe:	bfb4      	ite	lt
 8010b00:	18d2      	addlt	r2, r2, r3
 8010b02:	1b1c      	subge	r4, r3, r4
 8010b04:	9b07      	ldr	r3, [sp, #28]
 8010b06:	bfbc      	itt	lt
 8010b08:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8010b0a:	2400      	movlt	r4, #0
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	bfb5      	itete	lt
 8010b10:	eba8 0603 	sublt.w	r6, r8, r3
 8010b14:	9b07      	ldrge	r3, [sp, #28]
 8010b16:	2300      	movlt	r3, #0
 8010b18:	4646      	movge	r6, r8
 8010b1a:	e730      	b.n	801097e <_dtoa_r+0x71e>
 8010b1c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8010b1e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8010b20:	4646      	mov	r6, r8
 8010b22:	e735      	b.n	8010990 <_dtoa_r+0x730>
 8010b24:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010b26:	e75c      	b.n	80109e2 <_dtoa_r+0x782>
 8010b28:	2300      	movs	r3, #0
 8010b2a:	e788      	b.n	8010a3e <_dtoa_r+0x7de>
 8010b2c:	3fe00000 	.word	0x3fe00000
 8010b30:	40240000 	.word	0x40240000
 8010b34:	40140000 	.word	0x40140000
 8010b38:	9b02      	ldr	r3, [sp, #8]
 8010b3a:	e780      	b.n	8010a3e <_dtoa_r+0x7de>
 8010b3c:	2300      	movs	r3, #0
 8010b3e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010b40:	e782      	b.n	8010a48 <_dtoa_r+0x7e8>
 8010b42:	d099      	beq.n	8010a78 <_dtoa_r+0x818>
 8010b44:	9a08      	ldr	r2, [sp, #32]
 8010b46:	331c      	adds	r3, #28
 8010b48:	441a      	add	r2, r3
 8010b4a:	4498      	add	r8, r3
 8010b4c:	441e      	add	r6, r3
 8010b4e:	9208      	str	r2, [sp, #32]
 8010b50:	e792      	b.n	8010a78 <_dtoa_r+0x818>
 8010b52:	4603      	mov	r3, r0
 8010b54:	e7f6      	b.n	8010b44 <_dtoa_r+0x8e4>
 8010b56:	9b07      	ldr	r3, [sp, #28]
 8010b58:	9704      	str	r7, [sp, #16]
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	dc20      	bgt.n	8010ba0 <_dtoa_r+0x940>
 8010b5e:	9300      	str	r3, [sp, #0]
 8010b60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b62:	2b02      	cmp	r3, #2
 8010b64:	dd1e      	ble.n	8010ba4 <_dtoa_r+0x944>
 8010b66:	9b00      	ldr	r3, [sp, #0]
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	f47f aec0 	bne.w	80108ee <_dtoa_r+0x68e>
 8010b6e:	4621      	mov	r1, r4
 8010b70:	2205      	movs	r2, #5
 8010b72:	4658      	mov	r0, fp
 8010b74:	f000 fa9a 	bl	80110ac <__multadd>
 8010b78:	4601      	mov	r1, r0
 8010b7a:	4604      	mov	r4, r0
 8010b7c:	4648      	mov	r0, r9
 8010b7e:	f000 fcf7 	bl	8011570 <__mcmp>
 8010b82:	2800      	cmp	r0, #0
 8010b84:	f77f aeb3 	ble.w	80108ee <_dtoa_r+0x68e>
 8010b88:	4656      	mov	r6, sl
 8010b8a:	2331      	movs	r3, #49	@ 0x31
 8010b8c:	f806 3b01 	strb.w	r3, [r6], #1
 8010b90:	9b04      	ldr	r3, [sp, #16]
 8010b92:	3301      	adds	r3, #1
 8010b94:	9304      	str	r3, [sp, #16]
 8010b96:	e6ae      	b.n	80108f6 <_dtoa_r+0x696>
 8010b98:	9c07      	ldr	r4, [sp, #28]
 8010b9a:	9704      	str	r7, [sp, #16]
 8010b9c:	4625      	mov	r5, r4
 8010b9e:	e7f3      	b.n	8010b88 <_dtoa_r+0x928>
 8010ba0:	9b07      	ldr	r3, [sp, #28]
 8010ba2:	9300      	str	r3, [sp, #0]
 8010ba4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	f000 8104 	beq.w	8010db4 <_dtoa_r+0xb54>
 8010bac:	2e00      	cmp	r6, #0
 8010bae:	dd05      	ble.n	8010bbc <_dtoa_r+0x95c>
 8010bb0:	4629      	mov	r1, r5
 8010bb2:	4632      	mov	r2, r6
 8010bb4:	4658      	mov	r0, fp
 8010bb6:	f000 fc6f 	bl	8011498 <__lshift>
 8010bba:	4605      	mov	r5, r0
 8010bbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d05a      	beq.n	8010c78 <_dtoa_r+0xa18>
 8010bc2:	6869      	ldr	r1, [r5, #4]
 8010bc4:	4658      	mov	r0, fp
 8010bc6:	f000 fa0f 	bl	8010fe8 <_Balloc>
 8010bca:	4606      	mov	r6, r0
 8010bcc:	b928      	cbnz	r0, 8010bda <_dtoa_r+0x97a>
 8010bce:	4b84      	ldr	r3, [pc, #528]	@ (8010de0 <_dtoa_r+0xb80>)
 8010bd0:	4602      	mov	r2, r0
 8010bd2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010bd6:	f7ff bb5a 	b.w	801028e <_dtoa_r+0x2e>
 8010bda:	692a      	ldr	r2, [r5, #16]
 8010bdc:	3202      	adds	r2, #2
 8010bde:	0092      	lsls	r2, r2, #2
 8010be0:	f105 010c 	add.w	r1, r5, #12
 8010be4:	300c      	adds	r0, #12
 8010be6:	f001 ff75 	bl	8012ad4 <memcpy>
 8010bea:	2201      	movs	r2, #1
 8010bec:	4631      	mov	r1, r6
 8010bee:	4658      	mov	r0, fp
 8010bf0:	f000 fc52 	bl	8011498 <__lshift>
 8010bf4:	f10a 0301 	add.w	r3, sl, #1
 8010bf8:	9307      	str	r3, [sp, #28]
 8010bfa:	9b00      	ldr	r3, [sp, #0]
 8010bfc:	4453      	add	r3, sl
 8010bfe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010c00:	9b02      	ldr	r3, [sp, #8]
 8010c02:	f003 0301 	and.w	r3, r3, #1
 8010c06:	462f      	mov	r7, r5
 8010c08:	930a      	str	r3, [sp, #40]	@ 0x28
 8010c0a:	4605      	mov	r5, r0
 8010c0c:	9b07      	ldr	r3, [sp, #28]
 8010c0e:	4621      	mov	r1, r4
 8010c10:	3b01      	subs	r3, #1
 8010c12:	4648      	mov	r0, r9
 8010c14:	9300      	str	r3, [sp, #0]
 8010c16:	f7ff fa99 	bl	801014c <quorem>
 8010c1a:	4639      	mov	r1, r7
 8010c1c:	9002      	str	r0, [sp, #8]
 8010c1e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010c22:	4648      	mov	r0, r9
 8010c24:	f000 fca4 	bl	8011570 <__mcmp>
 8010c28:	462a      	mov	r2, r5
 8010c2a:	9008      	str	r0, [sp, #32]
 8010c2c:	4621      	mov	r1, r4
 8010c2e:	4658      	mov	r0, fp
 8010c30:	f000 fcba 	bl	80115a8 <__mdiff>
 8010c34:	68c2      	ldr	r2, [r0, #12]
 8010c36:	4606      	mov	r6, r0
 8010c38:	bb02      	cbnz	r2, 8010c7c <_dtoa_r+0xa1c>
 8010c3a:	4601      	mov	r1, r0
 8010c3c:	4648      	mov	r0, r9
 8010c3e:	f000 fc97 	bl	8011570 <__mcmp>
 8010c42:	4602      	mov	r2, r0
 8010c44:	4631      	mov	r1, r6
 8010c46:	4658      	mov	r0, fp
 8010c48:	920e      	str	r2, [sp, #56]	@ 0x38
 8010c4a:	f000 fa0d 	bl	8011068 <_Bfree>
 8010c4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c50:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010c52:	9e07      	ldr	r6, [sp, #28]
 8010c54:	ea43 0102 	orr.w	r1, r3, r2
 8010c58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010c5a:	4319      	orrs	r1, r3
 8010c5c:	d110      	bne.n	8010c80 <_dtoa_r+0xa20>
 8010c5e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010c62:	d029      	beq.n	8010cb8 <_dtoa_r+0xa58>
 8010c64:	9b08      	ldr	r3, [sp, #32]
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	dd02      	ble.n	8010c70 <_dtoa_r+0xa10>
 8010c6a:	9b02      	ldr	r3, [sp, #8]
 8010c6c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8010c70:	9b00      	ldr	r3, [sp, #0]
 8010c72:	f883 8000 	strb.w	r8, [r3]
 8010c76:	e63f      	b.n	80108f8 <_dtoa_r+0x698>
 8010c78:	4628      	mov	r0, r5
 8010c7a:	e7bb      	b.n	8010bf4 <_dtoa_r+0x994>
 8010c7c:	2201      	movs	r2, #1
 8010c7e:	e7e1      	b.n	8010c44 <_dtoa_r+0x9e4>
 8010c80:	9b08      	ldr	r3, [sp, #32]
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	db04      	blt.n	8010c90 <_dtoa_r+0xa30>
 8010c86:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010c88:	430b      	orrs	r3, r1
 8010c8a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010c8c:	430b      	orrs	r3, r1
 8010c8e:	d120      	bne.n	8010cd2 <_dtoa_r+0xa72>
 8010c90:	2a00      	cmp	r2, #0
 8010c92:	dded      	ble.n	8010c70 <_dtoa_r+0xa10>
 8010c94:	4649      	mov	r1, r9
 8010c96:	2201      	movs	r2, #1
 8010c98:	4658      	mov	r0, fp
 8010c9a:	f000 fbfd 	bl	8011498 <__lshift>
 8010c9e:	4621      	mov	r1, r4
 8010ca0:	4681      	mov	r9, r0
 8010ca2:	f000 fc65 	bl	8011570 <__mcmp>
 8010ca6:	2800      	cmp	r0, #0
 8010ca8:	dc03      	bgt.n	8010cb2 <_dtoa_r+0xa52>
 8010caa:	d1e1      	bne.n	8010c70 <_dtoa_r+0xa10>
 8010cac:	f018 0f01 	tst.w	r8, #1
 8010cb0:	d0de      	beq.n	8010c70 <_dtoa_r+0xa10>
 8010cb2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010cb6:	d1d8      	bne.n	8010c6a <_dtoa_r+0xa0a>
 8010cb8:	9a00      	ldr	r2, [sp, #0]
 8010cba:	2339      	movs	r3, #57	@ 0x39
 8010cbc:	7013      	strb	r3, [r2, #0]
 8010cbe:	4633      	mov	r3, r6
 8010cc0:	461e      	mov	r6, r3
 8010cc2:	3b01      	subs	r3, #1
 8010cc4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010cc8:	2a39      	cmp	r2, #57	@ 0x39
 8010cca:	d052      	beq.n	8010d72 <_dtoa_r+0xb12>
 8010ccc:	3201      	adds	r2, #1
 8010cce:	701a      	strb	r2, [r3, #0]
 8010cd0:	e612      	b.n	80108f8 <_dtoa_r+0x698>
 8010cd2:	2a00      	cmp	r2, #0
 8010cd4:	dd07      	ble.n	8010ce6 <_dtoa_r+0xa86>
 8010cd6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010cda:	d0ed      	beq.n	8010cb8 <_dtoa_r+0xa58>
 8010cdc:	9a00      	ldr	r2, [sp, #0]
 8010cde:	f108 0301 	add.w	r3, r8, #1
 8010ce2:	7013      	strb	r3, [r2, #0]
 8010ce4:	e608      	b.n	80108f8 <_dtoa_r+0x698>
 8010ce6:	9b07      	ldr	r3, [sp, #28]
 8010ce8:	9a07      	ldr	r2, [sp, #28]
 8010cea:	f803 8c01 	strb.w	r8, [r3, #-1]
 8010cee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010cf0:	4293      	cmp	r3, r2
 8010cf2:	d028      	beq.n	8010d46 <_dtoa_r+0xae6>
 8010cf4:	4649      	mov	r1, r9
 8010cf6:	2300      	movs	r3, #0
 8010cf8:	220a      	movs	r2, #10
 8010cfa:	4658      	mov	r0, fp
 8010cfc:	f000 f9d6 	bl	80110ac <__multadd>
 8010d00:	42af      	cmp	r7, r5
 8010d02:	4681      	mov	r9, r0
 8010d04:	f04f 0300 	mov.w	r3, #0
 8010d08:	f04f 020a 	mov.w	r2, #10
 8010d0c:	4639      	mov	r1, r7
 8010d0e:	4658      	mov	r0, fp
 8010d10:	d107      	bne.n	8010d22 <_dtoa_r+0xac2>
 8010d12:	f000 f9cb 	bl	80110ac <__multadd>
 8010d16:	4607      	mov	r7, r0
 8010d18:	4605      	mov	r5, r0
 8010d1a:	9b07      	ldr	r3, [sp, #28]
 8010d1c:	3301      	adds	r3, #1
 8010d1e:	9307      	str	r3, [sp, #28]
 8010d20:	e774      	b.n	8010c0c <_dtoa_r+0x9ac>
 8010d22:	f000 f9c3 	bl	80110ac <__multadd>
 8010d26:	4629      	mov	r1, r5
 8010d28:	4607      	mov	r7, r0
 8010d2a:	2300      	movs	r3, #0
 8010d2c:	220a      	movs	r2, #10
 8010d2e:	4658      	mov	r0, fp
 8010d30:	f000 f9bc 	bl	80110ac <__multadd>
 8010d34:	4605      	mov	r5, r0
 8010d36:	e7f0      	b.n	8010d1a <_dtoa_r+0xaba>
 8010d38:	9b00      	ldr	r3, [sp, #0]
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	bfcc      	ite	gt
 8010d3e:	461e      	movgt	r6, r3
 8010d40:	2601      	movle	r6, #1
 8010d42:	4456      	add	r6, sl
 8010d44:	2700      	movs	r7, #0
 8010d46:	4649      	mov	r1, r9
 8010d48:	2201      	movs	r2, #1
 8010d4a:	4658      	mov	r0, fp
 8010d4c:	f000 fba4 	bl	8011498 <__lshift>
 8010d50:	4621      	mov	r1, r4
 8010d52:	4681      	mov	r9, r0
 8010d54:	f000 fc0c 	bl	8011570 <__mcmp>
 8010d58:	2800      	cmp	r0, #0
 8010d5a:	dcb0      	bgt.n	8010cbe <_dtoa_r+0xa5e>
 8010d5c:	d102      	bne.n	8010d64 <_dtoa_r+0xb04>
 8010d5e:	f018 0f01 	tst.w	r8, #1
 8010d62:	d1ac      	bne.n	8010cbe <_dtoa_r+0xa5e>
 8010d64:	4633      	mov	r3, r6
 8010d66:	461e      	mov	r6, r3
 8010d68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010d6c:	2a30      	cmp	r2, #48	@ 0x30
 8010d6e:	d0fa      	beq.n	8010d66 <_dtoa_r+0xb06>
 8010d70:	e5c2      	b.n	80108f8 <_dtoa_r+0x698>
 8010d72:	459a      	cmp	sl, r3
 8010d74:	d1a4      	bne.n	8010cc0 <_dtoa_r+0xa60>
 8010d76:	9b04      	ldr	r3, [sp, #16]
 8010d78:	3301      	adds	r3, #1
 8010d7a:	9304      	str	r3, [sp, #16]
 8010d7c:	2331      	movs	r3, #49	@ 0x31
 8010d7e:	f88a 3000 	strb.w	r3, [sl]
 8010d82:	e5b9      	b.n	80108f8 <_dtoa_r+0x698>
 8010d84:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010d86:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8010de4 <_dtoa_r+0xb84>
 8010d8a:	b11b      	cbz	r3, 8010d94 <_dtoa_r+0xb34>
 8010d8c:	f10a 0308 	add.w	r3, sl, #8
 8010d90:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010d92:	6013      	str	r3, [r2, #0]
 8010d94:	4650      	mov	r0, sl
 8010d96:	b019      	add	sp, #100	@ 0x64
 8010d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010d9e:	2b01      	cmp	r3, #1
 8010da0:	f77f ae37 	ble.w	8010a12 <_dtoa_r+0x7b2>
 8010da4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010da6:	930a      	str	r3, [sp, #40]	@ 0x28
 8010da8:	2001      	movs	r0, #1
 8010daa:	e655      	b.n	8010a58 <_dtoa_r+0x7f8>
 8010dac:	9b00      	ldr	r3, [sp, #0]
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	f77f aed6 	ble.w	8010b60 <_dtoa_r+0x900>
 8010db4:	4656      	mov	r6, sl
 8010db6:	4621      	mov	r1, r4
 8010db8:	4648      	mov	r0, r9
 8010dba:	f7ff f9c7 	bl	801014c <quorem>
 8010dbe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010dc2:	f806 8b01 	strb.w	r8, [r6], #1
 8010dc6:	9b00      	ldr	r3, [sp, #0]
 8010dc8:	eba6 020a 	sub.w	r2, r6, sl
 8010dcc:	4293      	cmp	r3, r2
 8010dce:	ddb3      	ble.n	8010d38 <_dtoa_r+0xad8>
 8010dd0:	4649      	mov	r1, r9
 8010dd2:	2300      	movs	r3, #0
 8010dd4:	220a      	movs	r2, #10
 8010dd6:	4658      	mov	r0, fp
 8010dd8:	f000 f968 	bl	80110ac <__multadd>
 8010ddc:	4681      	mov	r9, r0
 8010dde:	e7ea      	b.n	8010db6 <_dtoa_r+0xb56>
 8010de0:	08013939 	.word	0x08013939
 8010de4:	080138bd 	.word	0x080138bd

08010de8 <_free_r>:
 8010de8:	b538      	push	{r3, r4, r5, lr}
 8010dea:	4605      	mov	r5, r0
 8010dec:	2900      	cmp	r1, #0
 8010dee:	d041      	beq.n	8010e74 <_free_r+0x8c>
 8010df0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010df4:	1f0c      	subs	r4, r1, #4
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	bfb8      	it	lt
 8010dfa:	18e4      	addlt	r4, r4, r3
 8010dfc:	f000 f8e8 	bl	8010fd0 <__malloc_lock>
 8010e00:	4a1d      	ldr	r2, [pc, #116]	@ (8010e78 <_free_r+0x90>)
 8010e02:	6813      	ldr	r3, [r2, #0]
 8010e04:	b933      	cbnz	r3, 8010e14 <_free_r+0x2c>
 8010e06:	6063      	str	r3, [r4, #4]
 8010e08:	6014      	str	r4, [r2, #0]
 8010e0a:	4628      	mov	r0, r5
 8010e0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010e10:	f000 b8e4 	b.w	8010fdc <__malloc_unlock>
 8010e14:	42a3      	cmp	r3, r4
 8010e16:	d908      	bls.n	8010e2a <_free_r+0x42>
 8010e18:	6820      	ldr	r0, [r4, #0]
 8010e1a:	1821      	adds	r1, r4, r0
 8010e1c:	428b      	cmp	r3, r1
 8010e1e:	bf01      	itttt	eq
 8010e20:	6819      	ldreq	r1, [r3, #0]
 8010e22:	685b      	ldreq	r3, [r3, #4]
 8010e24:	1809      	addeq	r1, r1, r0
 8010e26:	6021      	streq	r1, [r4, #0]
 8010e28:	e7ed      	b.n	8010e06 <_free_r+0x1e>
 8010e2a:	461a      	mov	r2, r3
 8010e2c:	685b      	ldr	r3, [r3, #4]
 8010e2e:	b10b      	cbz	r3, 8010e34 <_free_r+0x4c>
 8010e30:	42a3      	cmp	r3, r4
 8010e32:	d9fa      	bls.n	8010e2a <_free_r+0x42>
 8010e34:	6811      	ldr	r1, [r2, #0]
 8010e36:	1850      	adds	r0, r2, r1
 8010e38:	42a0      	cmp	r0, r4
 8010e3a:	d10b      	bne.n	8010e54 <_free_r+0x6c>
 8010e3c:	6820      	ldr	r0, [r4, #0]
 8010e3e:	4401      	add	r1, r0
 8010e40:	1850      	adds	r0, r2, r1
 8010e42:	4283      	cmp	r3, r0
 8010e44:	6011      	str	r1, [r2, #0]
 8010e46:	d1e0      	bne.n	8010e0a <_free_r+0x22>
 8010e48:	6818      	ldr	r0, [r3, #0]
 8010e4a:	685b      	ldr	r3, [r3, #4]
 8010e4c:	6053      	str	r3, [r2, #4]
 8010e4e:	4408      	add	r0, r1
 8010e50:	6010      	str	r0, [r2, #0]
 8010e52:	e7da      	b.n	8010e0a <_free_r+0x22>
 8010e54:	d902      	bls.n	8010e5c <_free_r+0x74>
 8010e56:	230c      	movs	r3, #12
 8010e58:	602b      	str	r3, [r5, #0]
 8010e5a:	e7d6      	b.n	8010e0a <_free_r+0x22>
 8010e5c:	6820      	ldr	r0, [r4, #0]
 8010e5e:	1821      	adds	r1, r4, r0
 8010e60:	428b      	cmp	r3, r1
 8010e62:	bf04      	itt	eq
 8010e64:	6819      	ldreq	r1, [r3, #0]
 8010e66:	685b      	ldreq	r3, [r3, #4]
 8010e68:	6063      	str	r3, [r4, #4]
 8010e6a:	bf04      	itt	eq
 8010e6c:	1809      	addeq	r1, r1, r0
 8010e6e:	6021      	streq	r1, [r4, #0]
 8010e70:	6054      	str	r4, [r2, #4]
 8010e72:	e7ca      	b.n	8010e0a <_free_r+0x22>
 8010e74:	bd38      	pop	{r3, r4, r5, pc}
 8010e76:	bf00      	nop
 8010e78:	200038dc 	.word	0x200038dc

08010e7c <malloc>:
 8010e7c:	4b02      	ldr	r3, [pc, #8]	@ (8010e88 <malloc+0xc>)
 8010e7e:	4601      	mov	r1, r0
 8010e80:	6818      	ldr	r0, [r3, #0]
 8010e82:	f000 b825 	b.w	8010ed0 <_malloc_r>
 8010e86:	bf00      	nop
 8010e88:	20000190 	.word	0x20000190

08010e8c <sbrk_aligned>:
 8010e8c:	b570      	push	{r4, r5, r6, lr}
 8010e8e:	4e0f      	ldr	r6, [pc, #60]	@ (8010ecc <sbrk_aligned+0x40>)
 8010e90:	460c      	mov	r4, r1
 8010e92:	6831      	ldr	r1, [r6, #0]
 8010e94:	4605      	mov	r5, r0
 8010e96:	b911      	cbnz	r1, 8010e9e <sbrk_aligned+0x12>
 8010e98:	f001 fe0c 	bl	8012ab4 <_sbrk_r>
 8010e9c:	6030      	str	r0, [r6, #0]
 8010e9e:	4621      	mov	r1, r4
 8010ea0:	4628      	mov	r0, r5
 8010ea2:	f001 fe07 	bl	8012ab4 <_sbrk_r>
 8010ea6:	1c43      	adds	r3, r0, #1
 8010ea8:	d103      	bne.n	8010eb2 <sbrk_aligned+0x26>
 8010eaa:	f04f 34ff 	mov.w	r4, #4294967295
 8010eae:	4620      	mov	r0, r4
 8010eb0:	bd70      	pop	{r4, r5, r6, pc}
 8010eb2:	1cc4      	adds	r4, r0, #3
 8010eb4:	f024 0403 	bic.w	r4, r4, #3
 8010eb8:	42a0      	cmp	r0, r4
 8010eba:	d0f8      	beq.n	8010eae <sbrk_aligned+0x22>
 8010ebc:	1a21      	subs	r1, r4, r0
 8010ebe:	4628      	mov	r0, r5
 8010ec0:	f001 fdf8 	bl	8012ab4 <_sbrk_r>
 8010ec4:	3001      	adds	r0, #1
 8010ec6:	d1f2      	bne.n	8010eae <sbrk_aligned+0x22>
 8010ec8:	e7ef      	b.n	8010eaa <sbrk_aligned+0x1e>
 8010eca:	bf00      	nop
 8010ecc:	200038d8 	.word	0x200038d8

08010ed0 <_malloc_r>:
 8010ed0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ed4:	1ccd      	adds	r5, r1, #3
 8010ed6:	f025 0503 	bic.w	r5, r5, #3
 8010eda:	3508      	adds	r5, #8
 8010edc:	2d0c      	cmp	r5, #12
 8010ede:	bf38      	it	cc
 8010ee0:	250c      	movcc	r5, #12
 8010ee2:	2d00      	cmp	r5, #0
 8010ee4:	4606      	mov	r6, r0
 8010ee6:	db01      	blt.n	8010eec <_malloc_r+0x1c>
 8010ee8:	42a9      	cmp	r1, r5
 8010eea:	d904      	bls.n	8010ef6 <_malloc_r+0x26>
 8010eec:	230c      	movs	r3, #12
 8010eee:	6033      	str	r3, [r6, #0]
 8010ef0:	2000      	movs	r0, #0
 8010ef2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010ef6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010fcc <_malloc_r+0xfc>
 8010efa:	f000 f869 	bl	8010fd0 <__malloc_lock>
 8010efe:	f8d8 3000 	ldr.w	r3, [r8]
 8010f02:	461c      	mov	r4, r3
 8010f04:	bb44      	cbnz	r4, 8010f58 <_malloc_r+0x88>
 8010f06:	4629      	mov	r1, r5
 8010f08:	4630      	mov	r0, r6
 8010f0a:	f7ff ffbf 	bl	8010e8c <sbrk_aligned>
 8010f0e:	1c43      	adds	r3, r0, #1
 8010f10:	4604      	mov	r4, r0
 8010f12:	d158      	bne.n	8010fc6 <_malloc_r+0xf6>
 8010f14:	f8d8 4000 	ldr.w	r4, [r8]
 8010f18:	4627      	mov	r7, r4
 8010f1a:	2f00      	cmp	r7, #0
 8010f1c:	d143      	bne.n	8010fa6 <_malloc_r+0xd6>
 8010f1e:	2c00      	cmp	r4, #0
 8010f20:	d04b      	beq.n	8010fba <_malloc_r+0xea>
 8010f22:	6823      	ldr	r3, [r4, #0]
 8010f24:	4639      	mov	r1, r7
 8010f26:	4630      	mov	r0, r6
 8010f28:	eb04 0903 	add.w	r9, r4, r3
 8010f2c:	f001 fdc2 	bl	8012ab4 <_sbrk_r>
 8010f30:	4581      	cmp	r9, r0
 8010f32:	d142      	bne.n	8010fba <_malloc_r+0xea>
 8010f34:	6821      	ldr	r1, [r4, #0]
 8010f36:	1a6d      	subs	r5, r5, r1
 8010f38:	4629      	mov	r1, r5
 8010f3a:	4630      	mov	r0, r6
 8010f3c:	f7ff ffa6 	bl	8010e8c <sbrk_aligned>
 8010f40:	3001      	adds	r0, #1
 8010f42:	d03a      	beq.n	8010fba <_malloc_r+0xea>
 8010f44:	6823      	ldr	r3, [r4, #0]
 8010f46:	442b      	add	r3, r5
 8010f48:	6023      	str	r3, [r4, #0]
 8010f4a:	f8d8 3000 	ldr.w	r3, [r8]
 8010f4e:	685a      	ldr	r2, [r3, #4]
 8010f50:	bb62      	cbnz	r2, 8010fac <_malloc_r+0xdc>
 8010f52:	f8c8 7000 	str.w	r7, [r8]
 8010f56:	e00f      	b.n	8010f78 <_malloc_r+0xa8>
 8010f58:	6822      	ldr	r2, [r4, #0]
 8010f5a:	1b52      	subs	r2, r2, r5
 8010f5c:	d420      	bmi.n	8010fa0 <_malloc_r+0xd0>
 8010f5e:	2a0b      	cmp	r2, #11
 8010f60:	d917      	bls.n	8010f92 <_malloc_r+0xc2>
 8010f62:	1961      	adds	r1, r4, r5
 8010f64:	42a3      	cmp	r3, r4
 8010f66:	6025      	str	r5, [r4, #0]
 8010f68:	bf18      	it	ne
 8010f6a:	6059      	strne	r1, [r3, #4]
 8010f6c:	6863      	ldr	r3, [r4, #4]
 8010f6e:	bf08      	it	eq
 8010f70:	f8c8 1000 	streq.w	r1, [r8]
 8010f74:	5162      	str	r2, [r4, r5]
 8010f76:	604b      	str	r3, [r1, #4]
 8010f78:	4630      	mov	r0, r6
 8010f7a:	f000 f82f 	bl	8010fdc <__malloc_unlock>
 8010f7e:	f104 000b 	add.w	r0, r4, #11
 8010f82:	1d23      	adds	r3, r4, #4
 8010f84:	f020 0007 	bic.w	r0, r0, #7
 8010f88:	1ac2      	subs	r2, r0, r3
 8010f8a:	bf1c      	itt	ne
 8010f8c:	1a1b      	subne	r3, r3, r0
 8010f8e:	50a3      	strne	r3, [r4, r2]
 8010f90:	e7af      	b.n	8010ef2 <_malloc_r+0x22>
 8010f92:	6862      	ldr	r2, [r4, #4]
 8010f94:	42a3      	cmp	r3, r4
 8010f96:	bf0c      	ite	eq
 8010f98:	f8c8 2000 	streq.w	r2, [r8]
 8010f9c:	605a      	strne	r2, [r3, #4]
 8010f9e:	e7eb      	b.n	8010f78 <_malloc_r+0xa8>
 8010fa0:	4623      	mov	r3, r4
 8010fa2:	6864      	ldr	r4, [r4, #4]
 8010fa4:	e7ae      	b.n	8010f04 <_malloc_r+0x34>
 8010fa6:	463c      	mov	r4, r7
 8010fa8:	687f      	ldr	r7, [r7, #4]
 8010faa:	e7b6      	b.n	8010f1a <_malloc_r+0x4a>
 8010fac:	461a      	mov	r2, r3
 8010fae:	685b      	ldr	r3, [r3, #4]
 8010fb0:	42a3      	cmp	r3, r4
 8010fb2:	d1fb      	bne.n	8010fac <_malloc_r+0xdc>
 8010fb4:	2300      	movs	r3, #0
 8010fb6:	6053      	str	r3, [r2, #4]
 8010fb8:	e7de      	b.n	8010f78 <_malloc_r+0xa8>
 8010fba:	230c      	movs	r3, #12
 8010fbc:	6033      	str	r3, [r6, #0]
 8010fbe:	4630      	mov	r0, r6
 8010fc0:	f000 f80c 	bl	8010fdc <__malloc_unlock>
 8010fc4:	e794      	b.n	8010ef0 <_malloc_r+0x20>
 8010fc6:	6005      	str	r5, [r0, #0]
 8010fc8:	e7d6      	b.n	8010f78 <_malloc_r+0xa8>
 8010fca:	bf00      	nop
 8010fcc:	200038dc 	.word	0x200038dc

08010fd0 <__malloc_lock>:
 8010fd0:	4801      	ldr	r0, [pc, #4]	@ (8010fd8 <__malloc_lock+0x8>)
 8010fd2:	f7ff b8b2 	b.w	801013a <__retarget_lock_acquire_recursive>
 8010fd6:	bf00      	nop
 8010fd8:	200038d4 	.word	0x200038d4

08010fdc <__malloc_unlock>:
 8010fdc:	4801      	ldr	r0, [pc, #4]	@ (8010fe4 <__malloc_unlock+0x8>)
 8010fde:	f7ff b8ad 	b.w	801013c <__retarget_lock_release_recursive>
 8010fe2:	bf00      	nop
 8010fe4:	200038d4 	.word	0x200038d4

08010fe8 <_Balloc>:
 8010fe8:	b570      	push	{r4, r5, r6, lr}
 8010fea:	69c6      	ldr	r6, [r0, #28]
 8010fec:	4604      	mov	r4, r0
 8010fee:	460d      	mov	r5, r1
 8010ff0:	b976      	cbnz	r6, 8011010 <_Balloc+0x28>
 8010ff2:	2010      	movs	r0, #16
 8010ff4:	f7ff ff42 	bl	8010e7c <malloc>
 8010ff8:	4602      	mov	r2, r0
 8010ffa:	61e0      	str	r0, [r4, #28]
 8010ffc:	b920      	cbnz	r0, 8011008 <_Balloc+0x20>
 8010ffe:	4b18      	ldr	r3, [pc, #96]	@ (8011060 <_Balloc+0x78>)
 8011000:	4818      	ldr	r0, [pc, #96]	@ (8011064 <_Balloc+0x7c>)
 8011002:	216b      	movs	r1, #107	@ 0x6b
 8011004:	f001 fd7c 	bl	8012b00 <__assert_func>
 8011008:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801100c:	6006      	str	r6, [r0, #0]
 801100e:	60c6      	str	r6, [r0, #12]
 8011010:	69e6      	ldr	r6, [r4, #28]
 8011012:	68f3      	ldr	r3, [r6, #12]
 8011014:	b183      	cbz	r3, 8011038 <_Balloc+0x50>
 8011016:	69e3      	ldr	r3, [r4, #28]
 8011018:	68db      	ldr	r3, [r3, #12]
 801101a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801101e:	b9b8      	cbnz	r0, 8011050 <_Balloc+0x68>
 8011020:	2101      	movs	r1, #1
 8011022:	fa01 f605 	lsl.w	r6, r1, r5
 8011026:	1d72      	adds	r2, r6, #5
 8011028:	0092      	lsls	r2, r2, #2
 801102a:	4620      	mov	r0, r4
 801102c:	f001 fd86 	bl	8012b3c <_calloc_r>
 8011030:	b160      	cbz	r0, 801104c <_Balloc+0x64>
 8011032:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011036:	e00e      	b.n	8011056 <_Balloc+0x6e>
 8011038:	2221      	movs	r2, #33	@ 0x21
 801103a:	2104      	movs	r1, #4
 801103c:	4620      	mov	r0, r4
 801103e:	f001 fd7d 	bl	8012b3c <_calloc_r>
 8011042:	69e3      	ldr	r3, [r4, #28]
 8011044:	60f0      	str	r0, [r6, #12]
 8011046:	68db      	ldr	r3, [r3, #12]
 8011048:	2b00      	cmp	r3, #0
 801104a:	d1e4      	bne.n	8011016 <_Balloc+0x2e>
 801104c:	2000      	movs	r0, #0
 801104e:	bd70      	pop	{r4, r5, r6, pc}
 8011050:	6802      	ldr	r2, [r0, #0]
 8011052:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011056:	2300      	movs	r3, #0
 8011058:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801105c:	e7f7      	b.n	801104e <_Balloc+0x66>
 801105e:	bf00      	nop
 8011060:	080138ca 	.word	0x080138ca
 8011064:	0801394a 	.word	0x0801394a

08011068 <_Bfree>:
 8011068:	b570      	push	{r4, r5, r6, lr}
 801106a:	69c6      	ldr	r6, [r0, #28]
 801106c:	4605      	mov	r5, r0
 801106e:	460c      	mov	r4, r1
 8011070:	b976      	cbnz	r6, 8011090 <_Bfree+0x28>
 8011072:	2010      	movs	r0, #16
 8011074:	f7ff ff02 	bl	8010e7c <malloc>
 8011078:	4602      	mov	r2, r0
 801107a:	61e8      	str	r0, [r5, #28]
 801107c:	b920      	cbnz	r0, 8011088 <_Bfree+0x20>
 801107e:	4b09      	ldr	r3, [pc, #36]	@ (80110a4 <_Bfree+0x3c>)
 8011080:	4809      	ldr	r0, [pc, #36]	@ (80110a8 <_Bfree+0x40>)
 8011082:	218f      	movs	r1, #143	@ 0x8f
 8011084:	f001 fd3c 	bl	8012b00 <__assert_func>
 8011088:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801108c:	6006      	str	r6, [r0, #0]
 801108e:	60c6      	str	r6, [r0, #12]
 8011090:	b13c      	cbz	r4, 80110a2 <_Bfree+0x3a>
 8011092:	69eb      	ldr	r3, [r5, #28]
 8011094:	6862      	ldr	r2, [r4, #4]
 8011096:	68db      	ldr	r3, [r3, #12]
 8011098:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801109c:	6021      	str	r1, [r4, #0]
 801109e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80110a2:	bd70      	pop	{r4, r5, r6, pc}
 80110a4:	080138ca 	.word	0x080138ca
 80110a8:	0801394a 	.word	0x0801394a

080110ac <__multadd>:
 80110ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110b0:	690d      	ldr	r5, [r1, #16]
 80110b2:	4607      	mov	r7, r0
 80110b4:	460c      	mov	r4, r1
 80110b6:	461e      	mov	r6, r3
 80110b8:	f101 0c14 	add.w	ip, r1, #20
 80110bc:	2000      	movs	r0, #0
 80110be:	f8dc 3000 	ldr.w	r3, [ip]
 80110c2:	b299      	uxth	r1, r3
 80110c4:	fb02 6101 	mla	r1, r2, r1, r6
 80110c8:	0c1e      	lsrs	r6, r3, #16
 80110ca:	0c0b      	lsrs	r3, r1, #16
 80110cc:	fb02 3306 	mla	r3, r2, r6, r3
 80110d0:	b289      	uxth	r1, r1
 80110d2:	3001      	adds	r0, #1
 80110d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80110d8:	4285      	cmp	r5, r0
 80110da:	f84c 1b04 	str.w	r1, [ip], #4
 80110de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80110e2:	dcec      	bgt.n	80110be <__multadd+0x12>
 80110e4:	b30e      	cbz	r6, 801112a <__multadd+0x7e>
 80110e6:	68a3      	ldr	r3, [r4, #8]
 80110e8:	42ab      	cmp	r3, r5
 80110ea:	dc19      	bgt.n	8011120 <__multadd+0x74>
 80110ec:	6861      	ldr	r1, [r4, #4]
 80110ee:	4638      	mov	r0, r7
 80110f0:	3101      	adds	r1, #1
 80110f2:	f7ff ff79 	bl	8010fe8 <_Balloc>
 80110f6:	4680      	mov	r8, r0
 80110f8:	b928      	cbnz	r0, 8011106 <__multadd+0x5a>
 80110fa:	4602      	mov	r2, r0
 80110fc:	4b0c      	ldr	r3, [pc, #48]	@ (8011130 <__multadd+0x84>)
 80110fe:	480d      	ldr	r0, [pc, #52]	@ (8011134 <__multadd+0x88>)
 8011100:	21ba      	movs	r1, #186	@ 0xba
 8011102:	f001 fcfd 	bl	8012b00 <__assert_func>
 8011106:	6922      	ldr	r2, [r4, #16]
 8011108:	3202      	adds	r2, #2
 801110a:	f104 010c 	add.w	r1, r4, #12
 801110e:	0092      	lsls	r2, r2, #2
 8011110:	300c      	adds	r0, #12
 8011112:	f001 fcdf 	bl	8012ad4 <memcpy>
 8011116:	4621      	mov	r1, r4
 8011118:	4638      	mov	r0, r7
 801111a:	f7ff ffa5 	bl	8011068 <_Bfree>
 801111e:	4644      	mov	r4, r8
 8011120:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011124:	3501      	adds	r5, #1
 8011126:	615e      	str	r6, [r3, #20]
 8011128:	6125      	str	r5, [r4, #16]
 801112a:	4620      	mov	r0, r4
 801112c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011130:	08013939 	.word	0x08013939
 8011134:	0801394a 	.word	0x0801394a

08011138 <__s2b>:
 8011138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801113c:	460c      	mov	r4, r1
 801113e:	4615      	mov	r5, r2
 8011140:	461f      	mov	r7, r3
 8011142:	2209      	movs	r2, #9
 8011144:	3308      	adds	r3, #8
 8011146:	4606      	mov	r6, r0
 8011148:	fb93 f3f2 	sdiv	r3, r3, r2
 801114c:	2100      	movs	r1, #0
 801114e:	2201      	movs	r2, #1
 8011150:	429a      	cmp	r2, r3
 8011152:	db09      	blt.n	8011168 <__s2b+0x30>
 8011154:	4630      	mov	r0, r6
 8011156:	f7ff ff47 	bl	8010fe8 <_Balloc>
 801115a:	b940      	cbnz	r0, 801116e <__s2b+0x36>
 801115c:	4602      	mov	r2, r0
 801115e:	4b19      	ldr	r3, [pc, #100]	@ (80111c4 <__s2b+0x8c>)
 8011160:	4819      	ldr	r0, [pc, #100]	@ (80111c8 <__s2b+0x90>)
 8011162:	21d3      	movs	r1, #211	@ 0xd3
 8011164:	f001 fccc 	bl	8012b00 <__assert_func>
 8011168:	0052      	lsls	r2, r2, #1
 801116a:	3101      	adds	r1, #1
 801116c:	e7f0      	b.n	8011150 <__s2b+0x18>
 801116e:	9b08      	ldr	r3, [sp, #32]
 8011170:	6143      	str	r3, [r0, #20]
 8011172:	2d09      	cmp	r5, #9
 8011174:	f04f 0301 	mov.w	r3, #1
 8011178:	6103      	str	r3, [r0, #16]
 801117a:	dd16      	ble.n	80111aa <__s2b+0x72>
 801117c:	f104 0909 	add.w	r9, r4, #9
 8011180:	46c8      	mov	r8, r9
 8011182:	442c      	add	r4, r5
 8011184:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011188:	4601      	mov	r1, r0
 801118a:	3b30      	subs	r3, #48	@ 0x30
 801118c:	220a      	movs	r2, #10
 801118e:	4630      	mov	r0, r6
 8011190:	f7ff ff8c 	bl	80110ac <__multadd>
 8011194:	45a0      	cmp	r8, r4
 8011196:	d1f5      	bne.n	8011184 <__s2b+0x4c>
 8011198:	f1a5 0408 	sub.w	r4, r5, #8
 801119c:	444c      	add	r4, r9
 801119e:	1b2d      	subs	r5, r5, r4
 80111a0:	1963      	adds	r3, r4, r5
 80111a2:	42bb      	cmp	r3, r7
 80111a4:	db04      	blt.n	80111b0 <__s2b+0x78>
 80111a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80111aa:	340a      	adds	r4, #10
 80111ac:	2509      	movs	r5, #9
 80111ae:	e7f6      	b.n	801119e <__s2b+0x66>
 80111b0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80111b4:	4601      	mov	r1, r0
 80111b6:	3b30      	subs	r3, #48	@ 0x30
 80111b8:	220a      	movs	r2, #10
 80111ba:	4630      	mov	r0, r6
 80111bc:	f7ff ff76 	bl	80110ac <__multadd>
 80111c0:	e7ee      	b.n	80111a0 <__s2b+0x68>
 80111c2:	bf00      	nop
 80111c4:	08013939 	.word	0x08013939
 80111c8:	0801394a 	.word	0x0801394a

080111cc <__hi0bits>:
 80111cc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80111d0:	4603      	mov	r3, r0
 80111d2:	bf36      	itet	cc
 80111d4:	0403      	lslcc	r3, r0, #16
 80111d6:	2000      	movcs	r0, #0
 80111d8:	2010      	movcc	r0, #16
 80111da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80111de:	bf3c      	itt	cc
 80111e0:	021b      	lslcc	r3, r3, #8
 80111e2:	3008      	addcc	r0, #8
 80111e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80111e8:	bf3c      	itt	cc
 80111ea:	011b      	lslcc	r3, r3, #4
 80111ec:	3004      	addcc	r0, #4
 80111ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80111f2:	bf3c      	itt	cc
 80111f4:	009b      	lslcc	r3, r3, #2
 80111f6:	3002      	addcc	r0, #2
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	db05      	blt.n	8011208 <__hi0bits+0x3c>
 80111fc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8011200:	f100 0001 	add.w	r0, r0, #1
 8011204:	bf08      	it	eq
 8011206:	2020      	moveq	r0, #32
 8011208:	4770      	bx	lr

0801120a <__lo0bits>:
 801120a:	6803      	ldr	r3, [r0, #0]
 801120c:	4602      	mov	r2, r0
 801120e:	f013 0007 	ands.w	r0, r3, #7
 8011212:	d00b      	beq.n	801122c <__lo0bits+0x22>
 8011214:	07d9      	lsls	r1, r3, #31
 8011216:	d421      	bmi.n	801125c <__lo0bits+0x52>
 8011218:	0798      	lsls	r0, r3, #30
 801121a:	bf49      	itett	mi
 801121c:	085b      	lsrmi	r3, r3, #1
 801121e:	089b      	lsrpl	r3, r3, #2
 8011220:	2001      	movmi	r0, #1
 8011222:	6013      	strmi	r3, [r2, #0]
 8011224:	bf5c      	itt	pl
 8011226:	6013      	strpl	r3, [r2, #0]
 8011228:	2002      	movpl	r0, #2
 801122a:	4770      	bx	lr
 801122c:	b299      	uxth	r1, r3
 801122e:	b909      	cbnz	r1, 8011234 <__lo0bits+0x2a>
 8011230:	0c1b      	lsrs	r3, r3, #16
 8011232:	2010      	movs	r0, #16
 8011234:	b2d9      	uxtb	r1, r3
 8011236:	b909      	cbnz	r1, 801123c <__lo0bits+0x32>
 8011238:	3008      	adds	r0, #8
 801123a:	0a1b      	lsrs	r3, r3, #8
 801123c:	0719      	lsls	r1, r3, #28
 801123e:	bf04      	itt	eq
 8011240:	091b      	lsreq	r3, r3, #4
 8011242:	3004      	addeq	r0, #4
 8011244:	0799      	lsls	r1, r3, #30
 8011246:	bf04      	itt	eq
 8011248:	089b      	lsreq	r3, r3, #2
 801124a:	3002      	addeq	r0, #2
 801124c:	07d9      	lsls	r1, r3, #31
 801124e:	d403      	bmi.n	8011258 <__lo0bits+0x4e>
 8011250:	085b      	lsrs	r3, r3, #1
 8011252:	f100 0001 	add.w	r0, r0, #1
 8011256:	d003      	beq.n	8011260 <__lo0bits+0x56>
 8011258:	6013      	str	r3, [r2, #0]
 801125a:	4770      	bx	lr
 801125c:	2000      	movs	r0, #0
 801125e:	4770      	bx	lr
 8011260:	2020      	movs	r0, #32
 8011262:	4770      	bx	lr

08011264 <__i2b>:
 8011264:	b510      	push	{r4, lr}
 8011266:	460c      	mov	r4, r1
 8011268:	2101      	movs	r1, #1
 801126a:	f7ff febd 	bl	8010fe8 <_Balloc>
 801126e:	4602      	mov	r2, r0
 8011270:	b928      	cbnz	r0, 801127e <__i2b+0x1a>
 8011272:	4b05      	ldr	r3, [pc, #20]	@ (8011288 <__i2b+0x24>)
 8011274:	4805      	ldr	r0, [pc, #20]	@ (801128c <__i2b+0x28>)
 8011276:	f240 1145 	movw	r1, #325	@ 0x145
 801127a:	f001 fc41 	bl	8012b00 <__assert_func>
 801127e:	2301      	movs	r3, #1
 8011280:	6144      	str	r4, [r0, #20]
 8011282:	6103      	str	r3, [r0, #16]
 8011284:	bd10      	pop	{r4, pc}
 8011286:	bf00      	nop
 8011288:	08013939 	.word	0x08013939
 801128c:	0801394a 	.word	0x0801394a

08011290 <__multiply>:
 8011290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011294:	4614      	mov	r4, r2
 8011296:	690a      	ldr	r2, [r1, #16]
 8011298:	6923      	ldr	r3, [r4, #16]
 801129a:	429a      	cmp	r2, r3
 801129c:	bfa8      	it	ge
 801129e:	4623      	movge	r3, r4
 80112a0:	460f      	mov	r7, r1
 80112a2:	bfa4      	itt	ge
 80112a4:	460c      	movge	r4, r1
 80112a6:	461f      	movge	r7, r3
 80112a8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80112ac:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80112b0:	68a3      	ldr	r3, [r4, #8]
 80112b2:	6861      	ldr	r1, [r4, #4]
 80112b4:	eb0a 0609 	add.w	r6, sl, r9
 80112b8:	42b3      	cmp	r3, r6
 80112ba:	b085      	sub	sp, #20
 80112bc:	bfb8      	it	lt
 80112be:	3101      	addlt	r1, #1
 80112c0:	f7ff fe92 	bl	8010fe8 <_Balloc>
 80112c4:	b930      	cbnz	r0, 80112d4 <__multiply+0x44>
 80112c6:	4602      	mov	r2, r0
 80112c8:	4b44      	ldr	r3, [pc, #272]	@ (80113dc <__multiply+0x14c>)
 80112ca:	4845      	ldr	r0, [pc, #276]	@ (80113e0 <__multiply+0x150>)
 80112cc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80112d0:	f001 fc16 	bl	8012b00 <__assert_func>
 80112d4:	f100 0514 	add.w	r5, r0, #20
 80112d8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80112dc:	462b      	mov	r3, r5
 80112de:	2200      	movs	r2, #0
 80112e0:	4543      	cmp	r3, r8
 80112e2:	d321      	bcc.n	8011328 <__multiply+0x98>
 80112e4:	f107 0114 	add.w	r1, r7, #20
 80112e8:	f104 0214 	add.w	r2, r4, #20
 80112ec:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80112f0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80112f4:	9302      	str	r3, [sp, #8]
 80112f6:	1b13      	subs	r3, r2, r4
 80112f8:	3b15      	subs	r3, #21
 80112fa:	f023 0303 	bic.w	r3, r3, #3
 80112fe:	3304      	adds	r3, #4
 8011300:	f104 0715 	add.w	r7, r4, #21
 8011304:	42ba      	cmp	r2, r7
 8011306:	bf38      	it	cc
 8011308:	2304      	movcc	r3, #4
 801130a:	9301      	str	r3, [sp, #4]
 801130c:	9b02      	ldr	r3, [sp, #8]
 801130e:	9103      	str	r1, [sp, #12]
 8011310:	428b      	cmp	r3, r1
 8011312:	d80c      	bhi.n	801132e <__multiply+0x9e>
 8011314:	2e00      	cmp	r6, #0
 8011316:	dd03      	ble.n	8011320 <__multiply+0x90>
 8011318:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801131c:	2b00      	cmp	r3, #0
 801131e:	d05b      	beq.n	80113d8 <__multiply+0x148>
 8011320:	6106      	str	r6, [r0, #16]
 8011322:	b005      	add	sp, #20
 8011324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011328:	f843 2b04 	str.w	r2, [r3], #4
 801132c:	e7d8      	b.n	80112e0 <__multiply+0x50>
 801132e:	f8b1 a000 	ldrh.w	sl, [r1]
 8011332:	f1ba 0f00 	cmp.w	sl, #0
 8011336:	d024      	beq.n	8011382 <__multiply+0xf2>
 8011338:	f104 0e14 	add.w	lr, r4, #20
 801133c:	46a9      	mov	r9, r5
 801133e:	f04f 0c00 	mov.w	ip, #0
 8011342:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011346:	f8d9 3000 	ldr.w	r3, [r9]
 801134a:	fa1f fb87 	uxth.w	fp, r7
 801134e:	b29b      	uxth	r3, r3
 8011350:	fb0a 330b 	mla	r3, sl, fp, r3
 8011354:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8011358:	f8d9 7000 	ldr.w	r7, [r9]
 801135c:	4463      	add	r3, ip
 801135e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011362:	fb0a c70b 	mla	r7, sl, fp, ip
 8011366:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801136a:	b29b      	uxth	r3, r3
 801136c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011370:	4572      	cmp	r2, lr
 8011372:	f849 3b04 	str.w	r3, [r9], #4
 8011376:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801137a:	d8e2      	bhi.n	8011342 <__multiply+0xb2>
 801137c:	9b01      	ldr	r3, [sp, #4]
 801137e:	f845 c003 	str.w	ip, [r5, r3]
 8011382:	9b03      	ldr	r3, [sp, #12]
 8011384:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011388:	3104      	adds	r1, #4
 801138a:	f1b9 0f00 	cmp.w	r9, #0
 801138e:	d021      	beq.n	80113d4 <__multiply+0x144>
 8011390:	682b      	ldr	r3, [r5, #0]
 8011392:	f104 0c14 	add.w	ip, r4, #20
 8011396:	46ae      	mov	lr, r5
 8011398:	f04f 0a00 	mov.w	sl, #0
 801139c:	f8bc b000 	ldrh.w	fp, [ip]
 80113a0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80113a4:	fb09 770b 	mla	r7, r9, fp, r7
 80113a8:	4457      	add	r7, sl
 80113aa:	b29b      	uxth	r3, r3
 80113ac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80113b0:	f84e 3b04 	str.w	r3, [lr], #4
 80113b4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80113b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80113bc:	f8be 3000 	ldrh.w	r3, [lr]
 80113c0:	fb09 330a 	mla	r3, r9, sl, r3
 80113c4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80113c8:	4562      	cmp	r2, ip
 80113ca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80113ce:	d8e5      	bhi.n	801139c <__multiply+0x10c>
 80113d0:	9f01      	ldr	r7, [sp, #4]
 80113d2:	51eb      	str	r3, [r5, r7]
 80113d4:	3504      	adds	r5, #4
 80113d6:	e799      	b.n	801130c <__multiply+0x7c>
 80113d8:	3e01      	subs	r6, #1
 80113da:	e79b      	b.n	8011314 <__multiply+0x84>
 80113dc:	08013939 	.word	0x08013939
 80113e0:	0801394a 	.word	0x0801394a

080113e4 <__pow5mult>:
 80113e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80113e8:	4615      	mov	r5, r2
 80113ea:	f012 0203 	ands.w	r2, r2, #3
 80113ee:	4607      	mov	r7, r0
 80113f0:	460e      	mov	r6, r1
 80113f2:	d007      	beq.n	8011404 <__pow5mult+0x20>
 80113f4:	4c25      	ldr	r4, [pc, #148]	@ (801148c <__pow5mult+0xa8>)
 80113f6:	3a01      	subs	r2, #1
 80113f8:	2300      	movs	r3, #0
 80113fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80113fe:	f7ff fe55 	bl	80110ac <__multadd>
 8011402:	4606      	mov	r6, r0
 8011404:	10ad      	asrs	r5, r5, #2
 8011406:	d03d      	beq.n	8011484 <__pow5mult+0xa0>
 8011408:	69fc      	ldr	r4, [r7, #28]
 801140a:	b97c      	cbnz	r4, 801142c <__pow5mult+0x48>
 801140c:	2010      	movs	r0, #16
 801140e:	f7ff fd35 	bl	8010e7c <malloc>
 8011412:	4602      	mov	r2, r0
 8011414:	61f8      	str	r0, [r7, #28]
 8011416:	b928      	cbnz	r0, 8011424 <__pow5mult+0x40>
 8011418:	4b1d      	ldr	r3, [pc, #116]	@ (8011490 <__pow5mult+0xac>)
 801141a:	481e      	ldr	r0, [pc, #120]	@ (8011494 <__pow5mult+0xb0>)
 801141c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8011420:	f001 fb6e 	bl	8012b00 <__assert_func>
 8011424:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011428:	6004      	str	r4, [r0, #0]
 801142a:	60c4      	str	r4, [r0, #12]
 801142c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8011430:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011434:	b94c      	cbnz	r4, 801144a <__pow5mult+0x66>
 8011436:	f240 2171 	movw	r1, #625	@ 0x271
 801143a:	4638      	mov	r0, r7
 801143c:	f7ff ff12 	bl	8011264 <__i2b>
 8011440:	2300      	movs	r3, #0
 8011442:	f8c8 0008 	str.w	r0, [r8, #8]
 8011446:	4604      	mov	r4, r0
 8011448:	6003      	str	r3, [r0, #0]
 801144a:	f04f 0900 	mov.w	r9, #0
 801144e:	07eb      	lsls	r3, r5, #31
 8011450:	d50a      	bpl.n	8011468 <__pow5mult+0x84>
 8011452:	4631      	mov	r1, r6
 8011454:	4622      	mov	r2, r4
 8011456:	4638      	mov	r0, r7
 8011458:	f7ff ff1a 	bl	8011290 <__multiply>
 801145c:	4631      	mov	r1, r6
 801145e:	4680      	mov	r8, r0
 8011460:	4638      	mov	r0, r7
 8011462:	f7ff fe01 	bl	8011068 <_Bfree>
 8011466:	4646      	mov	r6, r8
 8011468:	106d      	asrs	r5, r5, #1
 801146a:	d00b      	beq.n	8011484 <__pow5mult+0xa0>
 801146c:	6820      	ldr	r0, [r4, #0]
 801146e:	b938      	cbnz	r0, 8011480 <__pow5mult+0x9c>
 8011470:	4622      	mov	r2, r4
 8011472:	4621      	mov	r1, r4
 8011474:	4638      	mov	r0, r7
 8011476:	f7ff ff0b 	bl	8011290 <__multiply>
 801147a:	6020      	str	r0, [r4, #0]
 801147c:	f8c0 9000 	str.w	r9, [r0]
 8011480:	4604      	mov	r4, r0
 8011482:	e7e4      	b.n	801144e <__pow5mult+0x6a>
 8011484:	4630      	mov	r0, r6
 8011486:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801148a:	bf00      	nop
 801148c:	080139a4 	.word	0x080139a4
 8011490:	080138ca 	.word	0x080138ca
 8011494:	0801394a 	.word	0x0801394a

08011498 <__lshift>:
 8011498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801149c:	460c      	mov	r4, r1
 801149e:	6849      	ldr	r1, [r1, #4]
 80114a0:	6923      	ldr	r3, [r4, #16]
 80114a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80114a6:	68a3      	ldr	r3, [r4, #8]
 80114a8:	4607      	mov	r7, r0
 80114aa:	4691      	mov	r9, r2
 80114ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80114b0:	f108 0601 	add.w	r6, r8, #1
 80114b4:	42b3      	cmp	r3, r6
 80114b6:	db0b      	blt.n	80114d0 <__lshift+0x38>
 80114b8:	4638      	mov	r0, r7
 80114ba:	f7ff fd95 	bl	8010fe8 <_Balloc>
 80114be:	4605      	mov	r5, r0
 80114c0:	b948      	cbnz	r0, 80114d6 <__lshift+0x3e>
 80114c2:	4602      	mov	r2, r0
 80114c4:	4b28      	ldr	r3, [pc, #160]	@ (8011568 <__lshift+0xd0>)
 80114c6:	4829      	ldr	r0, [pc, #164]	@ (801156c <__lshift+0xd4>)
 80114c8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80114cc:	f001 fb18 	bl	8012b00 <__assert_func>
 80114d0:	3101      	adds	r1, #1
 80114d2:	005b      	lsls	r3, r3, #1
 80114d4:	e7ee      	b.n	80114b4 <__lshift+0x1c>
 80114d6:	2300      	movs	r3, #0
 80114d8:	f100 0114 	add.w	r1, r0, #20
 80114dc:	f100 0210 	add.w	r2, r0, #16
 80114e0:	4618      	mov	r0, r3
 80114e2:	4553      	cmp	r3, sl
 80114e4:	db33      	blt.n	801154e <__lshift+0xb6>
 80114e6:	6920      	ldr	r0, [r4, #16]
 80114e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80114ec:	f104 0314 	add.w	r3, r4, #20
 80114f0:	f019 091f 	ands.w	r9, r9, #31
 80114f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80114f8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80114fc:	d02b      	beq.n	8011556 <__lshift+0xbe>
 80114fe:	f1c9 0e20 	rsb	lr, r9, #32
 8011502:	468a      	mov	sl, r1
 8011504:	2200      	movs	r2, #0
 8011506:	6818      	ldr	r0, [r3, #0]
 8011508:	fa00 f009 	lsl.w	r0, r0, r9
 801150c:	4310      	orrs	r0, r2
 801150e:	f84a 0b04 	str.w	r0, [sl], #4
 8011512:	f853 2b04 	ldr.w	r2, [r3], #4
 8011516:	459c      	cmp	ip, r3
 8011518:	fa22 f20e 	lsr.w	r2, r2, lr
 801151c:	d8f3      	bhi.n	8011506 <__lshift+0x6e>
 801151e:	ebac 0304 	sub.w	r3, ip, r4
 8011522:	3b15      	subs	r3, #21
 8011524:	f023 0303 	bic.w	r3, r3, #3
 8011528:	3304      	adds	r3, #4
 801152a:	f104 0015 	add.w	r0, r4, #21
 801152e:	4584      	cmp	ip, r0
 8011530:	bf38      	it	cc
 8011532:	2304      	movcc	r3, #4
 8011534:	50ca      	str	r2, [r1, r3]
 8011536:	b10a      	cbz	r2, 801153c <__lshift+0xa4>
 8011538:	f108 0602 	add.w	r6, r8, #2
 801153c:	3e01      	subs	r6, #1
 801153e:	4638      	mov	r0, r7
 8011540:	612e      	str	r6, [r5, #16]
 8011542:	4621      	mov	r1, r4
 8011544:	f7ff fd90 	bl	8011068 <_Bfree>
 8011548:	4628      	mov	r0, r5
 801154a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801154e:	f842 0f04 	str.w	r0, [r2, #4]!
 8011552:	3301      	adds	r3, #1
 8011554:	e7c5      	b.n	80114e2 <__lshift+0x4a>
 8011556:	3904      	subs	r1, #4
 8011558:	f853 2b04 	ldr.w	r2, [r3], #4
 801155c:	f841 2f04 	str.w	r2, [r1, #4]!
 8011560:	459c      	cmp	ip, r3
 8011562:	d8f9      	bhi.n	8011558 <__lshift+0xc0>
 8011564:	e7ea      	b.n	801153c <__lshift+0xa4>
 8011566:	bf00      	nop
 8011568:	08013939 	.word	0x08013939
 801156c:	0801394a 	.word	0x0801394a

08011570 <__mcmp>:
 8011570:	690a      	ldr	r2, [r1, #16]
 8011572:	4603      	mov	r3, r0
 8011574:	6900      	ldr	r0, [r0, #16]
 8011576:	1a80      	subs	r0, r0, r2
 8011578:	b530      	push	{r4, r5, lr}
 801157a:	d10e      	bne.n	801159a <__mcmp+0x2a>
 801157c:	3314      	adds	r3, #20
 801157e:	3114      	adds	r1, #20
 8011580:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011584:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011588:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801158c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011590:	4295      	cmp	r5, r2
 8011592:	d003      	beq.n	801159c <__mcmp+0x2c>
 8011594:	d205      	bcs.n	80115a2 <__mcmp+0x32>
 8011596:	f04f 30ff 	mov.w	r0, #4294967295
 801159a:	bd30      	pop	{r4, r5, pc}
 801159c:	42a3      	cmp	r3, r4
 801159e:	d3f3      	bcc.n	8011588 <__mcmp+0x18>
 80115a0:	e7fb      	b.n	801159a <__mcmp+0x2a>
 80115a2:	2001      	movs	r0, #1
 80115a4:	e7f9      	b.n	801159a <__mcmp+0x2a>
	...

080115a8 <__mdiff>:
 80115a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115ac:	4689      	mov	r9, r1
 80115ae:	4606      	mov	r6, r0
 80115b0:	4611      	mov	r1, r2
 80115b2:	4648      	mov	r0, r9
 80115b4:	4614      	mov	r4, r2
 80115b6:	f7ff ffdb 	bl	8011570 <__mcmp>
 80115ba:	1e05      	subs	r5, r0, #0
 80115bc:	d112      	bne.n	80115e4 <__mdiff+0x3c>
 80115be:	4629      	mov	r1, r5
 80115c0:	4630      	mov	r0, r6
 80115c2:	f7ff fd11 	bl	8010fe8 <_Balloc>
 80115c6:	4602      	mov	r2, r0
 80115c8:	b928      	cbnz	r0, 80115d6 <__mdiff+0x2e>
 80115ca:	4b3f      	ldr	r3, [pc, #252]	@ (80116c8 <__mdiff+0x120>)
 80115cc:	f240 2137 	movw	r1, #567	@ 0x237
 80115d0:	483e      	ldr	r0, [pc, #248]	@ (80116cc <__mdiff+0x124>)
 80115d2:	f001 fa95 	bl	8012b00 <__assert_func>
 80115d6:	2301      	movs	r3, #1
 80115d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80115dc:	4610      	mov	r0, r2
 80115de:	b003      	add	sp, #12
 80115e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115e4:	bfbc      	itt	lt
 80115e6:	464b      	movlt	r3, r9
 80115e8:	46a1      	movlt	r9, r4
 80115ea:	4630      	mov	r0, r6
 80115ec:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80115f0:	bfba      	itte	lt
 80115f2:	461c      	movlt	r4, r3
 80115f4:	2501      	movlt	r5, #1
 80115f6:	2500      	movge	r5, #0
 80115f8:	f7ff fcf6 	bl	8010fe8 <_Balloc>
 80115fc:	4602      	mov	r2, r0
 80115fe:	b918      	cbnz	r0, 8011608 <__mdiff+0x60>
 8011600:	4b31      	ldr	r3, [pc, #196]	@ (80116c8 <__mdiff+0x120>)
 8011602:	f240 2145 	movw	r1, #581	@ 0x245
 8011606:	e7e3      	b.n	80115d0 <__mdiff+0x28>
 8011608:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801160c:	6926      	ldr	r6, [r4, #16]
 801160e:	60c5      	str	r5, [r0, #12]
 8011610:	f109 0310 	add.w	r3, r9, #16
 8011614:	f109 0514 	add.w	r5, r9, #20
 8011618:	f104 0e14 	add.w	lr, r4, #20
 801161c:	f100 0b14 	add.w	fp, r0, #20
 8011620:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011624:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011628:	9301      	str	r3, [sp, #4]
 801162a:	46d9      	mov	r9, fp
 801162c:	f04f 0c00 	mov.w	ip, #0
 8011630:	9b01      	ldr	r3, [sp, #4]
 8011632:	f85e 0b04 	ldr.w	r0, [lr], #4
 8011636:	f853 af04 	ldr.w	sl, [r3, #4]!
 801163a:	9301      	str	r3, [sp, #4]
 801163c:	fa1f f38a 	uxth.w	r3, sl
 8011640:	4619      	mov	r1, r3
 8011642:	b283      	uxth	r3, r0
 8011644:	1acb      	subs	r3, r1, r3
 8011646:	0c00      	lsrs	r0, r0, #16
 8011648:	4463      	add	r3, ip
 801164a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801164e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8011652:	b29b      	uxth	r3, r3
 8011654:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011658:	4576      	cmp	r6, lr
 801165a:	f849 3b04 	str.w	r3, [r9], #4
 801165e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011662:	d8e5      	bhi.n	8011630 <__mdiff+0x88>
 8011664:	1b33      	subs	r3, r6, r4
 8011666:	3b15      	subs	r3, #21
 8011668:	f023 0303 	bic.w	r3, r3, #3
 801166c:	3415      	adds	r4, #21
 801166e:	3304      	adds	r3, #4
 8011670:	42a6      	cmp	r6, r4
 8011672:	bf38      	it	cc
 8011674:	2304      	movcc	r3, #4
 8011676:	441d      	add	r5, r3
 8011678:	445b      	add	r3, fp
 801167a:	461e      	mov	r6, r3
 801167c:	462c      	mov	r4, r5
 801167e:	4544      	cmp	r4, r8
 8011680:	d30e      	bcc.n	80116a0 <__mdiff+0xf8>
 8011682:	f108 0103 	add.w	r1, r8, #3
 8011686:	1b49      	subs	r1, r1, r5
 8011688:	f021 0103 	bic.w	r1, r1, #3
 801168c:	3d03      	subs	r5, #3
 801168e:	45a8      	cmp	r8, r5
 8011690:	bf38      	it	cc
 8011692:	2100      	movcc	r1, #0
 8011694:	440b      	add	r3, r1
 8011696:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801169a:	b191      	cbz	r1, 80116c2 <__mdiff+0x11a>
 801169c:	6117      	str	r7, [r2, #16]
 801169e:	e79d      	b.n	80115dc <__mdiff+0x34>
 80116a0:	f854 1b04 	ldr.w	r1, [r4], #4
 80116a4:	46e6      	mov	lr, ip
 80116a6:	0c08      	lsrs	r0, r1, #16
 80116a8:	fa1c fc81 	uxtah	ip, ip, r1
 80116ac:	4471      	add	r1, lr
 80116ae:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80116b2:	b289      	uxth	r1, r1
 80116b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80116b8:	f846 1b04 	str.w	r1, [r6], #4
 80116bc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80116c0:	e7dd      	b.n	801167e <__mdiff+0xd6>
 80116c2:	3f01      	subs	r7, #1
 80116c4:	e7e7      	b.n	8011696 <__mdiff+0xee>
 80116c6:	bf00      	nop
 80116c8:	08013939 	.word	0x08013939
 80116cc:	0801394a 	.word	0x0801394a

080116d0 <__ulp>:
 80116d0:	b082      	sub	sp, #8
 80116d2:	ed8d 0b00 	vstr	d0, [sp]
 80116d6:	9a01      	ldr	r2, [sp, #4]
 80116d8:	4b0f      	ldr	r3, [pc, #60]	@ (8011718 <__ulp+0x48>)
 80116da:	4013      	ands	r3, r2
 80116dc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	dc08      	bgt.n	80116f6 <__ulp+0x26>
 80116e4:	425b      	negs	r3, r3
 80116e6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80116ea:	ea4f 5223 	mov.w	r2, r3, asr #20
 80116ee:	da04      	bge.n	80116fa <__ulp+0x2a>
 80116f0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80116f4:	4113      	asrs	r3, r2
 80116f6:	2200      	movs	r2, #0
 80116f8:	e008      	b.n	801170c <__ulp+0x3c>
 80116fa:	f1a2 0314 	sub.w	r3, r2, #20
 80116fe:	2b1e      	cmp	r3, #30
 8011700:	bfda      	itte	le
 8011702:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8011706:	40da      	lsrle	r2, r3
 8011708:	2201      	movgt	r2, #1
 801170a:	2300      	movs	r3, #0
 801170c:	4619      	mov	r1, r3
 801170e:	4610      	mov	r0, r2
 8011710:	ec41 0b10 	vmov	d0, r0, r1
 8011714:	b002      	add	sp, #8
 8011716:	4770      	bx	lr
 8011718:	7ff00000 	.word	0x7ff00000

0801171c <__b2d>:
 801171c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011720:	6906      	ldr	r6, [r0, #16]
 8011722:	f100 0814 	add.w	r8, r0, #20
 8011726:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801172a:	1f37      	subs	r7, r6, #4
 801172c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011730:	4610      	mov	r0, r2
 8011732:	f7ff fd4b 	bl	80111cc <__hi0bits>
 8011736:	f1c0 0320 	rsb	r3, r0, #32
 801173a:	280a      	cmp	r0, #10
 801173c:	600b      	str	r3, [r1, #0]
 801173e:	491b      	ldr	r1, [pc, #108]	@ (80117ac <__b2d+0x90>)
 8011740:	dc15      	bgt.n	801176e <__b2d+0x52>
 8011742:	f1c0 0c0b 	rsb	ip, r0, #11
 8011746:	fa22 f30c 	lsr.w	r3, r2, ip
 801174a:	45b8      	cmp	r8, r7
 801174c:	ea43 0501 	orr.w	r5, r3, r1
 8011750:	bf34      	ite	cc
 8011752:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011756:	2300      	movcs	r3, #0
 8011758:	3015      	adds	r0, #21
 801175a:	fa02 f000 	lsl.w	r0, r2, r0
 801175e:	fa23 f30c 	lsr.w	r3, r3, ip
 8011762:	4303      	orrs	r3, r0
 8011764:	461c      	mov	r4, r3
 8011766:	ec45 4b10 	vmov	d0, r4, r5
 801176a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801176e:	45b8      	cmp	r8, r7
 8011770:	bf3a      	itte	cc
 8011772:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011776:	f1a6 0708 	subcc.w	r7, r6, #8
 801177a:	2300      	movcs	r3, #0
 801177c:	380b      	subs	r0, #11
 801177e:	d012      	beq.n	80117a6 <__b2d+0x8a>
 8011780:	f1c0 0120 	rsb	r1, r0, #32
 8011784:	fa23 f401 	lsr.w	r4, r3, r1
 8011788:	4082      	lsls	r2, r0
 801178a:	4322      	orrs	r2, r4
 801178c:	4547      	cmp	r7, r8
 801178e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8011792:	bf8c      	ite	hi
 8011794:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8011798:	2200      	movls	r2, #0
 801179a:	4083      	lsls	r3, r0
 801179c:	40ca      	lsrs	r2, r1
 801179e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80117a2:	4313      	orrs	r3, r2
 80117a4:	e7de      	b.n	8011764 <__b2d+0x48>
 80117a6:	ea42 0501 	orr.w	r5, r2, r1
 80117aa:	e7db      	b.n	8011764 <__b2d+0x48>
 80117ac:	3ff00000 	.word	0x3ff00000

080117b0 <__d2b>:
 80117b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80117b4:	460f      	mov	r7, r1
 80117b6:	2101      	movs	r1, #1
 80117b8:	ec59 8b10 	vmov	r8, r9, d0
 80117bc:	4616      	mov	r6, r2
 80117be:	f7ff fc13 	bl	8010fe8 <_Balloc>
 80117c2:	4604      	mov	r4, r0
 80117c4:	b930      	cbnz	r0, 80117d4 <__d2b+0x24>
 80117c6:	4602      	mov	r2, r0
 80117c8:	4b23      	ldr	r3, [pc, #140]	@ (8011858 <__d2b+0xa8>)
 80117ca:	4824      	ldr	r0, [pc, #144]	@ (801185c <__d2b+0xac>)
 80117cc:	f240 310f 	movw	r1, #783	@ 0x30f
 80117d0:	f001 f996 	bl	8012b00 <__assert_func>
 80117d4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80117d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80117dc:	b10d      	cbz	r5, 80117e2 <__d2b+0x32>
 80117de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80117e2:	9301      	str	r3, [sp, #4]
 80117e4:	f1b8 0300 	subs.w	r3, r8, #0
 80117e8:	d023      	beq.n	8011832 <__d2b+0x82>
 80117ea:	4668      	mov	r0, sp
 80117ec:	9300      	str	r3, [sp, #0]
 80117ee:	f7ff fd0c 	bl	801120a <__lo0bits>
 80117f2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80117f6:	b1d0      	cbz	r0, 801182e <__d2b+0x7e>
 80117f8:	f1c0 0320 	rsb	r3, r0, #32
 80117fc:	fa02 f303 	lsl.w	r3, r2, r3
 8011800:	430b      	orrs	r3, r1
 8011802:	40c2      	lsrs	r2, r0
 8011804:	6163      	str	r3, [r4, #20]
 8011806:	9201      	str	r2, [sp, #4]
 8011808:	9b01      	ldr	r3, [sp, #4]
 801180a:	61a3      	str	r3, [r4, #24]
 801180c:	2b00      	cmp	r3, #0
 801180e:	bf0c      	ite	eq
 8011810:	2201      	moveq	r2, #1
 8011812:	2202      	movne	r2, #2
 8011814:	6122      	str	r2, [r4, #16]
 8011816:	b1a5      	cbz	r5, 8011842 <__d2b+0x92>
 8011818:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801181c:	4405      	add	r5, r0
 801181e:	603d      	str	r5, [r7, #0]
 8011820:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011824:	6030      	str	r0, [r6, #0]
 8011826:	4620      	mov	r0, r4
 8011828:	b003      	add	sp, #12
 801182a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801182e:	6161      	str	r1, [r4, #20]
 8011830:	e7ea      	b.n	8011808 <__d2b+0x58>
 8011832:	a801      	add	r0, sp, #4
 8011834:	f7ff fce9 	bl	801120a <__lo0bits>
 8011838:	9b01      	ldr	r3, [sp, #4]
 801183a:	6163      	str	r3, [r4, #20]
 801183c:	3020      	adds	r0, #32
 801183e:	2201      	movs	r2, #1
 8011840:	e7e8      	b.n	8011814 <__d2b+0x64>
 8011842:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011846:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801184a:	6038      	str	r0, [r7, #0]
 801184c:	6918      	ldr	r0, [r3, #16]
 801184e:	f7ff fcbd 	bl	80111cc <__hi0bits>
 8011852:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011856:	e7e5      	b.n	8011824 <__d2b+0x74>
 8011858:	08013939 	.word	0x08013939
 801185c:	0801394a 	.word	0x0801394a

08011860 <__ratio>:
 8011860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011864:	b085      	sub	sp, #20
 8011866:	e9cd 1000 	strd	r1, r0, [sp]
 801186a:	a902      	add	r1, sp, #8
 801186c:	f7ff ff56 	bl	801171c <__b2d>
 8011870:	9800      	ldr	r0, [sp, #0]
 8011872:	a903      	add	r1, sp, #12
 8011874:	ec55 4b10 	vmov	r4, r5, d0
 8011878:	f7ff ff50 	bl	801171c <__b2d>
 801187c:	9b01      	ldr	r3, [sp, #4]
 801187e:	6919      	ldr	r1, [r3, #16]
 8011880:	9b00      	ldr	r3, [sp, #0]
 8011882:	691b      	ldr	r3, [r3, #16]
 8011884:	1ac9      	subs	r1, r1, r3
 8011886:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801188a:	1a9b      	subs	r3, r3, r2
 801188c:	ec5b ab10 	vmov	sl, fp, d0
 8011890:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8011894:	2b00      	cmp	r3, #0
 8011896:	bfce      	itee	gt
 8011898:	462a      	movgt	r2, r5
 801189a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801189e:	465a      	movle	r2, fp
 80118a0:	462f      	mov	r7, r5
 80118a2:	46d9      	mov	r9, fp
 80118a4:	bfcc      	ite	gt
 80118a6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80118aa:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80118ae:	464b      	mov	r3, r9
 80118b0:	4652      	mov	r2, sl
 80118b2:	4620      	mov	r0, r4
 80118b4:	4639      	mov	r1, r7
 80118b6:	f7ee fff1 	bl	800089c <__aeabi_ddiv>
 80118ba:	ec41 0b10 	vmov	d0, r0, r1
 80118be:	b005      	add	sp, #20
 80118c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080118c4 <__copybits>:
 80118c4:	3901      	subs	r1, #1
 80118c6:	b570      	push	{r4, r5, r6, lr}
 80118c8:	1149      	asrs	r1, r1, #5
 80118ca:	6914      	ldr	r4, [r2, #16]
 80118cc:	3101      	adds	r1, #1
 80118ce:	f102 0314 	add.w	r3, r2, #20
 80118d2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80118d6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80118da:	1f05      	subs	r5, r0, #4
 80118dc:	42a3      	cmp	r3, r4
 80118de:	d30c      	bcc.n	80118fa <__copybits+0x36>
 80118e0:	1aa3      	subs	r3, r4, r2
 80118e2:	3b11      	subs	r3, #17
 80118e4:	f023 0303 	bic.w	r3, r3, #3
 80118e8:	3211      	adds	r2, #17
 80118ea:	42a2      	cmp	r2, r4
 80118ec:	bf88      	it	hi
 80118ee:	2300      	movhi	r3, #0
 80118f0:	4418      	add	r0, r3
 80118f2:	2300      	movs	r3, #0
 80118f4:	4288      	cmp	r0, r1
 80118f6:	d305      	bcc.n	8011904 <__copybits+0x40>
 80118f8:	bd70      	pop	{r4, r5, r6, pc}
 80118fa:	f853 6b04 	ldr.w	r6, [r3], #4
 80118fe:	f845 6f04 	str.w	r6, [r5, #4]!
 8011902:	e7eb      	b.n	80118dc <__copybits+0x18>
 8011904:	f840 3b04 	str.w	r3, [r0], #4
 8011908:	e7f4      	b.n	80118f4 <__copybits+0x30>

0801190a <__any_on>:
 801190a:	f100 0214 	add.w	r2, r0, #20
 801190e:	6900      	ldr	r0, [r0, #16]
 8011910:	114b      	asrs	r3, r1, #5
 8011912:	4298      	cmp	r0, r3
 8011914:	b510      	push	{r4, lr}
 8011916:	db11      	blt.n	801193c <__any_on+0x32>
 8011918:	dd0a      	ble.n	8011930 <__any_on+0x26>
 801191a:	f011 011f 	ands.w	r1, r1, #31
 801191e:	d007      	beq.n	8011930 <__any_on+0x26>
 8011920:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011924:	fa24 f001 	lsr.w	r0, r4, r1
 8011928:	fa00 f101 	lsl.w	r1, r0, r1
 801192c:	428c      	cmp	r4, r1
 801192e:	d10b      	bne.n	8011948 <__any_on+0x3e>
 8011930:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011934:	4293      	cmp	r3, r2
 8011936:	d803      	bhi.n	8011940 <__any_on+0x36>
 8011938:	2000      	movs	r0, #0
 801193a:	bd10      	pop	{r4, pc}
 801193c:	4603      	mov	r3, r0
 801193e:	e7f7      	b.n	8011930 <__any_on+0x26>
 8011940:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011944:	2900      	cmp	r1, #0
 8011946:	d0f5      	beq.n	8011934 <__any_on+0x2a>
 8011948:	2001      	movs	r0, #1
 801194a:	e7f6      	b.n	801193a <__any_on+0x30>

0801194c <sulp>:
 801194c:	b570      	push	{r4, r5, r6, lr}
 801194e:	4604      	mov	r4, r0
 8011950:	460d      	mov	r5, r1
 8011952:	ec45 4b10 	vmov	d0, r4, r5
 8011956:	4616      	mov	r6, r2
 8011958:	f7ff feba 	bl	80116d0 <__ulp>
 801195c:	ec51 0b10 	vmov	r0, r1, d0
 8011960:	b17e      	cbz	r6, 8011982 <sulp+0x36>
 8011962:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8011966:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801196a:	2b00      	cmp	r3, #0
 801196c:	dd09      	ble.n	8011982 <sulp+0x36>
 801196e:	051b      	lsls	r3, r3, #20
 8011970:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8011974:	2400      	movs	r4, #0
 8011976:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 801197a:	4622      	mov	r2, r4
 801197c:	462b      	mov	r3, r5
 801197e:	f7ee fe63 	bl	8000648 <__aeabi_dmul>
 8011982:	ec41 0b10 	vmov	d0, r0, r1
 8011986:	bd70      	pop	{r4, r5, r6, pc}

08011988 <_strtod_l>:
 8011988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801198c:	b09f      	sub	sp, #124	@ 0x7c
 801198e:	460c      	mov	r4, r1
 8011990:	9217      	str	r2, [sp, #92]	@ 0x5c
 8011992:	2200      	movs	r2, #0
 8011994:	921a      	str	r2, [sp, #104]	@ 0x68
 8011996:	9005      	str	r0, [sp, #20]
 8011998:	f04f 0a00 	mov.w	sl, #0
 801199c:	f04f 0b00 	mov.w	fp, #0
 80119a0:	460a      	mov	r2, r1
 80119a2:	9219      	str	r2, [sp, #100]	@ 0x64
 80119a4:	7811      	ldrb	r1, [r2, #0]
 80119a6:	292b      	cmp	r1, #43	@ 0x2b
 80119a8:	d04a      	beq.n	8011a40 <_strtod_l+0xb8>
 80119aa:	d838      	bhi.n	8011a1e <_strtod_l+0x96>
 80119ac:	290d      	cmp	r1, #13
 80119ae:	d832      	bhi.n	8011a16 <_strtod_l+0x8e>
 80119b0:	2908      	cmp	r1, #8
 80119b2:	d832      	bhi.n	8011a1a <_strtod_l+0x92>
 80119b4:	2900      	cmp	r1, #0
 80119b6:	d03b      	beq.n	8011a30 <_strtod_l+0xa8>
 80119b8:	2200      	movs	r2, #0
 80119ba:	920b      	str	r2, [sp, #44]	@ 0x2c
 80119bc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80119be:	782a      	ldrb	r2, [r5, #0]
 80119c0:	2a30      	cmp	r2, #48	@ 0x30
 80119c2:	f040 80b3 	bne.w	8011b2c <_strtod_l+0x1a4>
 80119c6:	786a      	ldrb	r2, [r5, #1]
 80119c8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80119cc:	2a58      	cmp	r2, #88	@ 0x58
 80119ce:	d16e      	bne.n	8011aae <_strtod_l+0x126>
 80119d0:	9302      	str	r3, [sp, #8]
 80119d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80119d4:	9301      	str	r3, [sp, #4]
 80119d6:	ab1a      	add	r3, sp, #104	@ 0x68
 80119d8:	9300      	str	r3, [sp, #0]
 80119da:	4a8e      	ldr	r2, [pc, #568]	@ (8011c14 <_strtod_l+0x28c>)
 80119dc:	9805      	ldr	r0, [sp, #20]
 80119de:	ab1b      	add	r3, sp, #108	@ 0x6c
 80119e0:	a919      	add	r1, sp, #100	@ 0x64
 80119e2:	f001 f927 	bl	8012c34 <__gethex>
 80119e6:	f010 060f 	ands.w	r6, r0, #15
 80119ea:	4604      	mov	r4, r0
 80119ec:	d005      	beq.n	80119fa <_strtod_l+0x72>
 80119ee:	2e06      	cmp	r6, #6
 80119f0:	d128      	bne.n	8011a44 <_strtod_l+0xbc>
 80119f2:	3501      	adds	r5, #1
 80119f4:	2300      	movs	r3, #0
 80119f6:	9519      	str	r5, [sp, #100]	@ 0x64
 80119f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80119fa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	f040 858e 	bne.w	801251e <_strtod_l+0xb96>
 8011a02:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011a04:	b1cb      	cbz	r3, 8011a3a <_strtod_l+0xb2>
 8011a06:	4652      	mov	r2, sl
 8011a08:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8011a0c:	ec43 2b10 	vmov	d0, r2, r3
 8011a10:	b01f      	add	sp, #124	@ 0x7c
 8011a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a16:	2920      	cmp	r1, #32
 8011a18:	d1ce      	bne.n	80119b8 <_strtod_l+0x30>
 8011a1a:	3201      	adds	r2, #1
 8011a1c:	e7c1      	b.n	80119a2 <_strtod_l+0x1a>
 8011a1e:	292d      	cmp	r1, #45	@ 0x2d
 8011a20:	d1ca      	bne.n	80119b8 <_strtod_l+0x30>
 8011a22:	2101      	movs	r1, #1
 8011a24:	910b      	str	r1, [sp, #44]	@ 0x2c
 8011a26:	1c51      	adds	r1, r2, #1
 8011a28:	9119      	str	r1, [sp, #100]	@ 0x64
 8011a2a:	7852      	ldrb	r2, [r2, #1]
 8011a2c:	2a00      	cmp	r2, #0
 8011a2e:	d1c5      	bne.n	80119bc <_strtod_l+0x34>
 8011a30:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011a32:	9419      	str	r4, [sp, #100]	@ 0x64
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	f040 8570 	bne.w	801251a <_strtod_l+0xb92>
 8011a3a:	4652      	mov	r2, sl
 8011a3c:	465b      	mov	r3, fp
 8011a3e:	e7e5      	b.n	8011a0c <_strtod_l+0x84>
 8011a40:	2100      	movs	r1, #0
 8011a42:	e7ef      	b.n	8011a24 <_strtod_l+0x9c>
 8011a44:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8011a46:	b13a      	cbz	r2, 8011a58 <_strtod_l+0xd0>
 8011a48:	2135      	movs	r1, #53	@ 0x35
 8011a4a:	a81c      	add	r0, sp, #112	@ 0x70
 8011a4c:	f7ff ff3a 	bl	80118c4 <__copybits>
 8011a50:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011a52:	9805      	ldr	r0, [sp, #20]
 8011a54:	f7ff fb08 	bl	8011068 <_Bfree>
 8011a58:	3e01      	subs	r6, #1
 8011a5a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8011a5c:	2e04      	cmp	r6, #4
 8011a5e:	d806      	bhi.n	8011a6e <_strtod_l+0xe6>
 8011a60:	e8df f006 	tbb	[pc, r6]
 8011a64:	201d0314 	.word	0x201d0314
 8011a68:	14          	.byte	0x14
 8011a69:	00          	.byte	0x00
 8011a6a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8011a6e:	05e1      	lsls	r1, r4, #23
 8011a70:	bf48      	it	mi
 8011a72:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8011a76:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011a7a:	0d1b      	lsrs	r3, r3, #20
 8011a7c:	051b      	lsls	r3, r3, #20
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d1bb      	bne.n	80119fa <_strtod_l+0x72>
 8011a82:	f7fe fb2f 	bl	80100e4 <__errno>
 8011a86:	2322      	movs	r3, #34	@ 0x22
 8011a88:	6003      	str	r3, [r0, #0]
 8011a8a:	e7b6      	b.n	80119fa <_strtod_l+0x72>
 8011a8c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8011a90:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8011a94:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8011a98:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8011a9c:	e7e7      	b.n	8011a6e <_strtod_l+0xe6>
 8011a9e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8011c1c <_strtod_l+0x294>
 8011aa2:	e7e4      	b.n	8011a6e <_strtod_l+0xe6>
 8011aa4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8011aa8:	f04f 3aff 	mov.w	sl, #4294967295
 8011aac:	e7df      	b.n	8011a6e <_strtod_l+0xe6>
 8011aae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011ab0:	1c5a      	adds	r2, r3, #1
 8011ab2:	9219      	str	r2, [sp, #100]	@ 0x64
 8011ab4:	785b      	ldrb	r3, [r3, #1]
 8011ab6:	2b30      	cmp	r3, #48	@ 0x30
 8011ab8:	d0f9      	beq.n	8011aae <_strtod_l+0x126>
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d09d      	beq.n	80119fa <_strtod_l+0x72>
 8011abe:	2301      	movs	r3, #1
 8011ac0:	9309      	str	r3, [sp, #36]	@ 0x24
 8011ac2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011ac4:	930c      	str	r3, [sp, #48]	@ 0x30
 8011ac6:	2300      	movs	r3, #0
 8011ac8:	9308      	str	r3, [sp, #32]
 8011aca:	930a      	str	r3, [sp, #40]	@ 0x28
 8011acc:	461f      	mov	r7, r3
 8011ace:	220a      	movs	r2, #10
 8011ad0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8011ad2:	7805      	ldrb	r5, [r0, #0]
 8011ad4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8011ad8:	b2d9      	uxtb	r1, r3
 8011ada:	2909      	cmp	r1, #9
 8011adc:	d928      	bls.n	8011b30 <_strtod_l+0x1a8>
 8011ade:	494e      	ldr	r1, [pc, #312]	@ (8011c18 <_strtod_l+0x290>)
 8011ae0:	2201      	movs	r2, #1
 8011ae2:	f000 ffd5 	bl	8012a90 <strncmp>
 8011ae6:	2800      	cmp	r0, #0
 8011ae8:	d032      	beq.n	8011b50 <_strtod_l+0x1c8>
 8011aea:	2000      	movs	r0, #0
 8011aec:	462a      	mov	r2, r5
 8011aee:	4681      	mov	r9, r0
 8011af0:	463d      	mov	r5, r7
 8011af2:	4603      	mov	r3, r0
 8011af4:	2a65      	cmp	r2, #101	@ 0x65
 8011af6:	d001      	beq.n	8011afc <_strtod_l+0x174>
 8011af8:	2a45      	cmp	r2, #69	@ 0x45
 8011afa:	d114      	bne.n	8011b26 <_strtod_l+0x19e>
 8011afc:	b91d      	cbnz	r5, 8011b06 <_strtod_l+0x17e>
 8011afe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011b00:	4302      	orrs	r2, r0
 8011b02:	d095      	beq.n	8011a30 <_strtod_l+0xa8>
 8011b04:	2500      	movs	r5, #0
 8011b06:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8011b08:	1c62      	adds	r2, r4, #1
 8011b0a:	9219      	str	r2, [sp, #100]	@ 0x64
 8011b0c:	7862      	ldrb	r2, [r4, #1]
 8011b0e:	2a2b      	cmp	r2, #43	@ 0x2b
 8011b10:	d077      	beq.n	8011c02 <_strtod_l+0x27a>
 8011b12:	2a2d      	cmp	r2, #45	@ 0x2d
 8011b14:	d07b      	beq.n	8011c0e <_strtod_l+0x286>
 8011b16:	f04f 0c00 	mov.w	ip, #0
 8011b1a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8011b1e:	2909      	cmp	r1, #9
 8011b20:	f240 8082 	bls.w	8011c28 <_strtod_l+0x2a0>
 8011b24:	9419      	str	r4, [sp, #100]	@ 0x64
 8011b26:	f04f 0800 	mov.w	r8, #0
 8011b2a:	e0a2      	b.n	8011c72 <_strtod_l+0x2ea>
 8011b2c:	2300      	movs	r3, #0
 8011b2e:	e7c7      	b.n	8011ac0 <_strtod_l+0x138>
 8011b30:	2f08      	cmp	r7, #8
 8011b32:	bfd5      	itete	le
 8011b34:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8011b36:	9908      	ldrgt	r1, [sp, #32]
 8011b38:	fb02 3301 	mlale	r3, r2, r1, r3
 8011b3c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8011b40:	f100 0001 	add.w	r0, r0, #1
 8011b44:	bfd4      	ite	le
 8011b46:	930a      	strle	r3, [sp, #40]	@ 0x28
 8011b48:	9308      	strgt	r3, [sp, #32]
 8011b4a:	3701      	adds	r7, #1
 8011b4c:	9019      	str	r0, [sp, #100]	@ 0x64
 8011b4e:	e7bf      	b.n	8011ad0 <_strtod_l+0x148>
 8011b50:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011b52:	1c5a      	adds	r2, r3, #1
 8011b54:	9219      	str	r2, [sp, #100]	@ 0x64
 8011b56:	785a      	ldrb	r2, [r3, #1]
 8011b58:	b37f      	cbz	r7, 8011bba <_strtod_l+0x232>
 8011b5a:	4681      	mov	r9, r0
 8011b5c:	463d      	mov	r5, r7
 8011b5e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8011b62:	2b09      	cmp	r3, #9
 8011b64:	d912      	bls.n	8011b8c <_strtod_l+0x204>
 8011b66:	2301      	movs	r3, #1
 8011b68:	e7c4      	b.n	8011af4 <_strtod_l+0x16c>
 8011b6a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011b6c:	1c5a      	adds	r2, r3, #1
 8011b6e:	9219      	str	r2, [sp, #100]	@ 0x64
 8011b70:	785a      	ldrb	r2, [r3, #1]
 8011b72:	3001      	adds	r0, #1
 8011b74:	2a30      	cmp	r2, #48	@ 0x30
 8011b76:	d0f8      	beq.n	8011b6a <_strtod_l+0x1e2>
 8011b78:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8011b7c:	2b08      	cmp	r3, #8
 8011b7e:	f200 84d3 	bhi.w	8012528 <_strtod_l+0xba0>
 8011b82:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011b84:	930c      	str	r3, [sp, #48]	@ 0x30
 8011b86:	4681      	mov	r9, r0
 8011b88:	2000      	movs	r0, #0
 8011b8a:	4605      	mov	r5, r0
 8011b8c:	3a30      	subs	r2, #48	@ 0x30
 8011b8e:	f100 0301 	add.w	r3, r0, #1
 8011b92:	d02a      	beq.n	8011bea <_strtod_l+0x262>
 8011b94:	4499      	add	r9, r3
 8011b96:	eb00 0c05 	add.w	ip, r0, r5
 8011b9a:	462b      	mov	r3, r5
 8011b9c:	210a      	movs	r1, #10
 8011b9e:	4563      	cmp	r3, ip
 8011ba0:	d10d      	bne.n	8011bbe <_strtod_l+0x236>
 8011ba2:	1c69      	adds	r1, r5, #1
 8011ba4:	4401      	add	r1, r0
 8011ba6:	4428      	add	r0, r5
 8011ba8:	2808      	cmp	r0, #8
 8011baa:	dc16      	bgt.n	8011bda <_strtod_l+0x252>
 8011bac:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8011bae:	230a      	movs	r3, #10
 8011bb0:	fb03 2300 	mla	r3, r3, r0, r2
 8011bb4:	930a      	str	r3, [sp, #40]	@ 0x28
 8011bb6:	2300      	movs	r3, #0
 8011bb8:	e018      	b.n	8011bec <_strtod_l+0x264>
 8011bba:	4638      	mov	r0, r7
 8011bbc:	e7da      	b.n	8011b74 <_strtod_l+0x1ec>
 8011bbe:	2b08      	cmp	r3, #8
 8011bc0:	f103 0301 	add.w	r3, r3, #1
 8011bc4:	dc03      	bgt.n	8011bce <_strtod_l+0x246>
 8011bc6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8011bc8:	434e      	muls	r6, r1
 8011bca:	960a      	str	r6, [sp, #40]	@ 0x28
 8011bcc:	e7e7      	b.n	8011b9e <_strtod_l+0x216>
 8011bce:	2b10      	cmp	r3, #16
 8011bd0:	bfde      	ittt	le
 8011bd2:	9e08      	ldrle	r6, [sp, #32]
 8011bd4:	434e      	mulle	r6, r1
 8011bd6:	9608      	strle	r6, [sp, #32]
 8011bd8:	e7e1      	b.n	8011b9e <_strtod_l+0x216>
 8011bda:	280f      	cmp	r0, #15
 8011bdc:	dceb      	bgt.n	8011bb6 <_strtod_l+0x22e>
 8011bde:	9808      	ldr	r0, [sp, #32]
 8011be0:	230a      	movs	r3, #10
 8011be2:	fb03 2300 	mla	r3, r3, r0, r2
 8011be6:	9308      	str	r3, [sp, #32]
 8011be8:	e7e5      	b.n	8011bb6 <_strtod_l+0x22e>
 8011bea:	4629      	mov	r1, r5
 8011bec:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011bee:	1c50      	adds	r0, r2, #1
 8011bf0:	9019      	str	r0, [sp, #100]	@ 0x64
 8011bf2:	7852      	ldrb	r2, [r2, #1]
 8011bf4:	4618      	mov	r0, r3
 8011bf6:	460d      	mov	r5, r1
 8011bf8:	e7b1      	b.n	8011b5e <_strtod_l+0x1d6>
 8011bfa:	f04f 0900 	mov.w	r9, #0
 8011bfe:	2301      	movs	r3, #1
 8011c00:	e77d      	b.n	8011afe <_strtod_l+0x176>
 8011c02:	f04f 0c00 	mov.w	ip, #0
 8011c06:	1ca2      	adds	r2, r4, #2
 8011c08:	9219      	str	r2, [sp, #100]	@ 0x64
 8011c0a:	78a2      	ldrb	r2, [r4, #2]
 8011c0c:	e785      	b.n	8011b1a <_strtod_l+0x192>
 8011c0e:	f04f 0c01 	mov.w	ip, #1
 8011c12:	e7f8      	b.n	8011c06 <_strtod_l+0x27e>
 8011c14:	08013ab8 	.word	0x08013ab8
 8011c18:	08013aa0 	.word	0x08013aa0
 8011c1c:	7ff00000 	.word	0x7ff00000
 8011c20:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011c22:	1c51      	adds	r1, r2, #1
 8011c24:	9119      	str	r1, [sp, #100]	@ 0x64
 8011c26:	7852      	ldrb	r2, [r2, #1]
 8011c28:	2a30      	cmp	r2, #48	@ 0x30
 8011c2a:	d0f9      	beq.n	8011c20 <_strtod_l+0x298>
 8011c2c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8011c30:	2908      	cmp	r1, #8
 8011c32:	f63f af78 	bhi.w	8011b26 <_strtod_l+0x19e>
 8011c36:	3a30      	subs	r2, #48	@ 0x30
 8011c38:	920e      	str	r2, [sp, #56]	@ 0x38
 8011c3a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011c3c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8011c3e:	f04f 080a 	mov.w	r8, #10
 8011c42:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011c44:	1c56      	adds	r6, r2, #1
 8011c46:	9619      	str	r6, [sp, #100]	@ 0x64
 8011c48:	7852      	ldrb	r2, [r2, #1]
 8011c4a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8011c4e:	f1be 0f09 	cmp.w	lr, #9
 8011c52:	d939      	bls.n	8011cc8 <_strtod_l+0x340>
 8011c54:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8011c56:	1a76      	subs	r6, r6, r1
 8011c58:	2e08      	cmp	r6, #8
 8011c5a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8011c5e:	dc03      	bgt.n	8011c68 <_strtod_l+0x2e0>
 8011c60:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8011c62:	4588      	cmp	r8, r1
 8011c64:	bfa8      	it	ge
 8011c66:	4688      	movge	r8, r1
 8011c68:	f1bc 0f00 	cmp.w	ip, #0
 8011c6c:	d001      	beq.n	8011c72 <_strtod_l+0x2ea>
 8011c6e:	f1c8 0800 	rsb	r8, r8, #0
 8011c72:	2d00      	cmp	r5, #0
 8011c74:	d14e      	bne.n	8011d14 <_strtod_l+0x38c>
 8011c76:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011c78:	4308      	orrs	r0, r1
 8011c7a:	f47f aebe 	bne.w	80119fa <_strtod_l+0x72>
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	f47f aed6 	bne.w	8011a30 <_strtod_l+0xa8>
 8011c84:	2a69      	cmp	r2, #105	@ 0x69
 8011c86:	d028      	beq.n	8011cda <_strtod_l+0x352>
 8011c88:	dc25      	bgt.n	8011cd6 <_strtod_l+0x34e>
 8011c8a:	2a49      	cmp	r2, #73	@ 0x49
 8011c8c:	d025      	beq.n	8011cda <_strtod_l+0x352>
 8011c8e:	2a4e      	cmp	r2, #78	@ 0x4e
 8011c90:	f47f aece 	bne.w	8011a30 <_strtod_l+0xa8>
 8011c94:	499b      	ldr	r1, [pc, #620]	@ (8011f04 <_strtod_l+0x57c>)
 8011c96:	a819      	add	r0, sp, #100	@ 0x64
 8011c98:	f001 f9ee 	bl	8013078 <__match>
 8011c9c:	2800      	cmp	r0, #0
 8011c9e:	f43f aec7 	beq.w	8011a30 <_strtod_l+0xa8>
 8011ca2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011ca4:	781b      	ldrb	r3, [r3, #0]
 8011ca6:	2b28      	cmp	r3, #40	@ 0x28
 8011ca8:	d12e      	bne.n	8011d08 <_strtod_l+0x380>
 8011caa:	4997      	ldr	r1, [pc, #604]	@ (8011f08 <_strtod_l+0x580>)
 8011cac:	aa1c      	add	r2, sp, #112	@ 0x70
 8011cae:	a819      	add	r0, sp, #100	@ 0x64
 8011cb0:	f001 f9f6 	bl	80130a0 <__hexnan>
 8011cb4:	2805      	cmp	r0, #5
 8011cb6:	d127      	bne.n	8011d08 <_strtod_l+0x380>
 8011cb8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011cba:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8011cbe:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8011cc2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8011cc6:	e698      	b.n	80119fa <_strtod_l+0x72>
 8011cc8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8011cca:	fb08 2101 	mla	r1, r8, r1, r2
 8011cce:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8011cd2:	920e      	str	r2, [sp, #56]	@ 0x38
 8011cd4:	e7b5      	b.n	8011c42 <_strtod_l+0x2ba>
 8011cd6:	2a6e      	cmp	r2, #110	@ 0x6e
 8011cd8:	e7da      	b.n	8011c90 <_strtod_l+0x308>
 8011cda:	498c      	ldr	r1, [pc, #560]	@ (8011f0c <_strtod_l+0x584>)
 8011cdc:	a819      	add	r0, sp, #100	@ 0x64
 8011cde:	f001 f9cb 	bl	8013078 <__match>
 8011ce2:	2800      	cmp	r0, #0
 8011ce4:	f43f aea4 	beq.w	8011a30 <_strtod_l+0xa8>
 8011ce8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011cea:	4989      	ldr	r1, [pc, #548]	@ (8011f10 <_strtod_l+0x588>)
 8011cec:	3b01      	subs	r3, #1
 8011cee:	a819      	add	r0, sp, #100	@ 0x64
 8011cf0:	9319      	str	r3, [sp, #100]	@ 0x64
 8011cf2:	f001 f9c1 	bl	8013078 <__match>
 8011cf6:	b910      	cbnz	r0, 8011cfe <_strtod_l+0x376>
 8011cf8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011cfa:	3301      	adds	r3, #1
 8011cfc:	9319      	str	r3, [sp, #100]	@ 0x64
 8011cfe:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8011f20 <_strtod_l+0x598>
 8011d02:	f04f 0a00 	mov.w	sl, #0
 8011d06:	e678      	b.n	80119fa <_strtod_l+0x72>
 8011d08:	4882      	ldr	r0, [pc, #520]	@ (8011f14 <_strtod_l+0x58c>)
 8011d0a:	f000 fef1 	bl	8012af0 <nan>
 8011d0e:	ec5b ab10 	vmov	sl, fp, d0
 8011d12:	e672      	b.n	80119fa <_strtod_l+0x72>
 8011d14:	eba8 0309 	sub.w	r3, r8, r9
 8011d18:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8011d1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8011d1c:	2f00      	cmp	r7, #0
 8011d1e:	bf08      	it	eq
 8011d20:	462f      	moveq	r7, r5
 8011d22:	2d10      	cmp	r5, #16
 8011d24:	462c      	mov	r4, r5
 8011d26:	bfa8      	it	ge
 8011d28:	2410      	movge	r4, #16
 8011d2a:	f7ee fc13 	bl	8000554 <__aeabi_ui2d>
 8011d2e:	2d09      	cmp	r5, #9
 8011d30:	4682      	mov	sl, r0
 8011d32:	468b      	mov	fp, r1
 8011d34:	dc13      	bgt.n	8011d5e <_strtod_l+0x3d6>
 8011d36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	f43f ae5e 	beq.w	80119fa <_strtod_l+0x72>
 8011d3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011d40:	dd78      	ble.n	8011e34 <_strtod_l+0x4ac>
 8011d42:	2b16      	cmp	r3, #22
 8011d44:	dc5f      	bgt.n	8011e06 <_strtod_l+0x47e>
 8011d46:	4974      	ldr	r1, [pc, #464]	@ (8011f18 <_strtod_l+0x590>)
 8011d48:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011d4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011d50:	4652      	mov	r2, sl
 8011d52:	465b      	mov	r3, fp
 8011d54:	f7ee fc78 	bl	8000648 <__aeabi_dmul>
 8011d58:	4682      	mov	sl, r0
 8011d5a:	468b      	mov	fp, r1
 8011d5c:	e64d      	b.n	80119fa <_strtod_l+0x72>
 8011d5e:	4b6e      	ldr	r3, [pc, #440]	@ (8011f18 <_strtod_l+0x590>)
 8011d60:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011d64:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8011d68:	f7ee fc6e 	bl	8000648 <__aeabi_dmul>
 8011d6c:	4682      	mov	sl, r0
 8011d6e:	9808      	ldr	r0, [sp, #32]
 8011d70:	468b      	mov	fp, r1
 8011d72:	f7ee fbef 	bl	8000554 <__aeabi_ui2d>
 8011d76:	4602      	mov	r2, r0
 8011d78:	460b      	mov	r3, r1
 8011d7a:	4650      	mov	r0, sl
 8011d7c:	4659      	mov	r1, fp
 8011d7e:	f7ee faad 	bl	80002dc <__adddf3>
 8011d82:	2d0f      	cmp	r5, #15
 8011d84:	4682      	mov	sl, r0
 8011d86:	468b      	mov	fp, r1
 8011d88:	ddd5      	ble.n	8011d36 <_strtod_l+0x3ae>
 8011d8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011d8c:	1b2c      	subs	r4, r5, r4
 8011d8e:	441c      	add	r4, r3
 8011d90:	2c00      	cmp	r4, #0
 8011d92:	f340 8096 	ble.w	8011ec2 <_strtod_l+0x53a>
 8011d96:	f014 030f 	ands.w	r3, r4, #15
 8011d9a:	d00a      	beq.n	8011db2 <_strtod_l+0x42a>
 8011d9c:	495e      	ldr	r1, [pc, #376]	@ (8011f18 <_strtod_l+0x590>)
 8011d9e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011da2:	4652      	mov	r2, sl
 8011da4:	465b      	mov	r3, fp
 8011da6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011daa:	f7ee fc4d 	bl	8000648 <__aeabi_dmul>
 8011dae:	4682      	mov	sl, r0
 8011db0:	468b      	mov	fp, r1
 8011db2:	f034 040f 	bics.w	r4, r4, #15
 8011db6:	d073      	beq.n	8011ea0 <_strtod_l+0x518>
 8011db8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8011dbc:	dd48      	ble.n	8011e50 <_strtod_l+0x4c8>
 8011dbe:	2400      	movs	r4, #0
 8011dc0:	46a0      	mov	r8, r4
 8011dc2:	940a      	str	r4, [sp, #40]	@ 0x28
 8011dc4:	46a1      	mov	r9, r4
 8011dc6:	9a05      	ldr	r2, [sp, #20]
 8011dc8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8011f20 <_strtod_l+0x598>
 8011dcc:	2322      	movs	r3, #34	@ 0x22
 8011dce:	6013      	str	r3, [r2, #0]
 8011dd0:	f04f 0a00 	mov.w	sl, #0
 8011dd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	f43f ae0f 	beq.w	80119fa <_strtod_l+0x72>
 8011ddc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011dde:	9805      	ldr	r0, [sp, #20]
 8011de0:	f7ff f942 	bl	8011068 <_Bfree>
 8011de4:	9805      	ldr	r0, [sp, #20]
 8011de6:	4649      	mov	r1, r9
 8011de8:	f7ff f93e 	bl	8011068 <_Bfree>
 8011dec:	9805      	ldr	r0, [sp, #20]
 8011dee:	4641      	mov	r1, r8
 8011df0:	f7ff f93a 	bl	8011068 <_Bfree>
 8011df4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011df6:	9805      	ldr	r0, [sp, #20]
 8011df8:	f7ff f936 	bl	8011068 <_Bfree>
 8011dfc:	9805      	ldr	r0, [sp, #20]
 8011dfe:	4621      	mov	r1, r4
 8011e00:	f7ff f932 	bl	8011068 <_Bfree>
 8011e04:	e5f9      	b.n	80119fa <_strtod_l+0x72>
 8011e06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011e08:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8011e0c:	4293      	cmp	r3, r2
 8011e0e:	dbbc      	blt.n	8011d8a <_strtod_l+0x402>
 8011e10:	4c41      	ldr	r4, [pc, #260]	@ (8011f18 <_strtod_l+0x590>)
 8011e12:	f1c5 050f 	rsb	r5, r5, #15
 8011e16:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8011e1a:	4652      	mov	r2, sl
 8011e1c:	465b      	mov	r3, fp
 8011e1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011e22:	f7ee fc11 	bl	8000648 <__aeabi_dmul>
 8011e26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011e28:	1b5d      	subs	r5, r3, r5
 8011e2a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8011e2e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011e32:	e78f      	b.n	8011d54 <_strtod_l+0x3cc>
 8011e34:	3316      	adds	r3, #22
 8011e36:	dba8      	blt.n	8011d8a <_strtod_l+0x402>
 8011e38:	4b37      	ldr	r3, [pc, #220]	@ (8011f18 <_strtod_l+0x590>)
 8011e3a:	eba9 0808 	sub.w	r8, r9, r8
 8011e3e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8011e42:	e9d8 2300 	ldrd	r2, r3, [r8]
 8011e46:	4650      	mov	r0, sl
 8011e48:	4659      	mov	r1, fp
 8011e4a:	f7ee fd27 	bl	800089c <__aeabi_ddiv>
 8011e4e:	e783      	b.n	8011d58 <_strtod_l+0x3d0>
 8011e50:	4b32      	ldr	r3, [pc, #200]	@ (8011f1c <_strtod_l+0x594>)
 8011e52:	9308      	str	r3, [sp, #32]
 8011e54:	2300      	movs	r3, #0
 8011e56:	1124      	asrs	r4, r4, #4
 8011e58:	4650      	mov	r0, sl
 8011e5a:	4659      	mov	r1, fp
 8011e5c:	461e      	mov	r6, r3
 8011e5e:	2c01      	cmp	r4, #1
 8011e60:	dc21      	bgt.n	8011ea6 <_strtod_l+0x51e>
 8011e62:	b10b      	cbz	r3, 8011e68 <_strtod_l+0x4e0>
 8011e64:	4682      	mov	sl, r0
 8011e66:	468b      	mov	fp, r1
 8011e68:	492c      	ldr	r1, [pc, #176]	@ (8011f1c <_strtod_l+0x594>)
 8011e6a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8011e6e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8011e72:	4652      	mov	r2, sl
 8011e74:	465b      	mov	r3, fp
 8011e76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011e7a:	f7ee fbe5 	bl	8000648 <__aeabi_dmul>
 8011e7e:	4b28      	ldr	r3, [pc, #160]	@ (8011f20 <_strtod_l+0x598>)
 8011e80:	460a      	mov	r2, r1
 8011e82:	400b      	ands	r3, r1
 8011e84:	4927      	ldr	r1, [pc, #156]	@ (8011f24 <_strtod_l+0x59c>)
 8011e86:	428b      	cmp	r3, r1
 8011e88:	4682      	mov	sl, r0
 8011e8a:	d898      	bhi.n	8011dbe <_strtod_l+0x436>
 8011e8c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8011e90:	428b      	cmp	r3, r1
 8011e92:	bf86      	itte	hi
 8011e94:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8011f28 <_strtod_l+0x5a0>
 8011e98:	f04f 3aff 	movhi.w	sl, #4294967295
 8011e9c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8011ea0:	2300      	movs	r3, #0
 8011ea2:	9308      	str	r3, [sp, #32]
 8011ea4:	e07a      	b.n	8011f9c <_strtod_l+0x614>
 8011ea6:	07e2      	lsls	r2, r4, #31
 8011ea8:	d505      	bpl.n	8011eb6 <_strtod_l+0x52e>
 8011eaa:	9b08      	ldr	r3, [sp, #32]
 8011eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011eb0:	f7ee fbca 	bl	8000648 <__aeabi_dmul>
 8011eb4:	2301      	movs	r3, #1
 8011eb6:	9a08      	ldr	r2, [sp, #32]
 8011eb8:	3208      	adds	r2, #8
 8011eba:	3601      	adds	r6, #1
 8011ebc:	1064      	asrs	r4, r4, #1
 8011ebe:	9208      	str	r2, [sp, #32]
 8011ec0:	e7cd      	b.n	8011e5e <_strtod_l+0x4d6>
 8011ec2:	d0ed      	beq.n	8011ea0 <_strtod_l+0x518>
 8011ec4:	4264      	negs	r4, r4
 8011ec6:	f014 020f 	ands.w	r2, r4, #15
 8011eca:	d00a      	beq.n	8011ee2 <_strtod_l+0x55a>
 8011ecc:	4b12      	ldr	r3, [pc, #72]	@ (8011f18 <_strtod_l+0x590>)
 8011ece:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011ed2:	4650      	mov	r0, sl
 8011ed4:	4659      	mov	r1, fp
 8011ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011eda:	f7ee fcdf 	bl	800089c <__aeabi_ddiv>
 8011ede:	4682      	mov	sl, r0
 8011ee0:	468b      	mov	fp, r1
 8011ee2:	1124      	asrs	r4, r4, #4
 8011ee4:	d0dc      	beq.n	8011ea0 <_strtod_l+0x518>
 8011ee6:	2c1f      	cmp	r4, #31
 8011ee8:	dd20      	ble.n	8011f2c <_strtod_l+0x5a4>
 8011eea:	2400      	movs	r4, #0
 8011eec:	46a0      	mov	r8, r4
 8011eee:	940a      	str	r4, [sp, #40]	@ 0x28
 8011ef0:	46a1      	mov	r9, r4
 8011ef2:	9a05      	ldr	r2, [sp, #20]
 8011ef4:	2322      	movs	r3, #34	@ 0x22
 8011ef6:	f04f 0a00 	mov.w	sl, #0
 8011efa:	f04f 0b00 	mov.w	fp, #0
 8011efe:	6013      	str	r3, [r2, #0]
 8011f00:	e768      	b.n	8011dd4 <_strtod_l+0x44c>
 8011f02:	bf00      	nop
 8011f04:	08013891 	.word	0x08013891
 8011f08:	08013aa4 	.word	0x08013aa4
 8011f0c:	08013889 	.word	0x08013889
 8011f10:	080138c0 	.word	0x080138c0
 8011f14:	08013c4d 	.word	0x08013c4d
 8011f18:	080139d8 	.word	0x080139d8
 8011f1c:	080139b0 	.word	0x080139b0
 8011f20:	7ff00000 	.word	0x7ff00000
 8011f24:	7ca00000 	.word	0x7ca00000
 8011f28:	7fefffff 	.word	0x7fefffff
 8011f2c:	f014 0310 	ands.w	r3, r4, #16
 8011f30:	bf18      	it	ne
 8011f32:	236a      	movne	r3, #106	@ 0x6a
 8011f34:	4ea9      	ldr	r6, [pc, #676]	@ (80121dc <_strtod_l+0x854>)
 8011f36:	9308      	str	r3, [sp, #32]
 8011f38:	4650      	mov	r0, sl
 8011f3a:	4659      	mov	r1, fp
 8011f3c:	2300      	movs	r3, #0
 8011f3e:	07e2      	lsls	r2, r4, #31
 8011f40:	d504      	bpl.n	8011f4c <_strtod_l+0x5c4>
 8011f42:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011f46:	f7ee fb7f 	bl	8000648 <__aeabi_dmul>
 8011f4a:	2301      	movs	r3, #1
 8011f4c:	1064      	asrs	r4, r4, #1
 8011f4e:	f106 0608 	add.w	r6, r6, #8
 8011f52:	d1f4      	bne.n	8011f3e <_strtod_l+0x5b6>
 8011f54:	b10b      	cbz	r3, 8011f5a <_strtod_l+0x5d2>
 8011f56:	4682      	mov	sl, r0
 8011f58:	468b      	mov	fp, r1
 8011f5a:	9b08      	ldr	r3, [sp, #32]
 8011f5c:	b1b3      	cbz	r3, 8011f8c <_strtod_l+0x604>
 8011f5e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8011f62:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	4659      	mov	r1, fp
 8011f6a:	dd0f      	ble.n	8011f8c <_strtod_l+0x604>
 8011f6c:	2b1f      	cmp	r3, #31
 8011f6e:	dd55      	ble.n	801201c <_strtod_l+0x694>
 8011f70:	2b34      	cmp	r3, #52	@ 0x34
 8011f72:	bfde      	ittt	le
 8011f74:	f04f 33ff 	movle.w	r3, #4294967295
 8011f78:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8011f7c:	4093      	lslle	r3, r2
 8011f7e:	f04f 0a00 	mov.w	sl, #0
 8011f82:	bfcc      	ite	gt
 8011f84:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8011f88:	ea03 0b01 	andle.w	fp, r3, r1
 8011f8c:	2200      	movs	r2, #0
 8011f8e:	2300      	movs	r3, #0
 8011f90:	4650      	mov	r0, sl
 8011f92:	4659      	mov	r1, fp
 8011f94:	f7ee fdc0 	bl	8000b18 <__aeabi_dcmpeq>
 8011f98:	2800      	cmp	r0, #0
 8011f9a:	d1a6      	bne.n	8011eea <_strtod_l+0x562>
 8011f9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011f9e:	9300      	str	r3, [sp, #0]
 8011fa0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011fa2:	9805      	ldr	r0, [sp, #20]
 8011fa4:	462b      	mov	r3, r5
 8011fa6:	463a      	mov	r2, r7
 8011fa8:	f7ff f8c6 	bl	8011138 <__s2b>
 8011fac:	900a      	str	r0, [sp, #40]	@ 0x28
 8011fae:	2800      	cmp	r0, #0
 8011fb0:	f43f af05 	beq.w	8011dbe <_strtod_l+0x436>
 8011fb4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011fb6:	2a00      	cmp	r2, #0
 8011fb8:	eba9 0308 	sub.w	r3, r9, r8
 8011fbc:	bfa8      	it	ge
 8011fbe:	2300      	movge	r3, #0
 8011fc0:	9312      	str	r3, [sp, #72]	@ 0x48
 8011fc2:	2400      	movs	r4, #0
 8011fc4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8011fc8:	9316      	str	r3, [sp, #88]	@ 0x58
 8011fca:	46a0      	mov	r8, r4
 8011fcc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011fce:	9805      	ldr	r0, [sp, #20]
 8011fd0:	6859      	ldr	r1, [r3, #4]
 8011fd2:	f7ff f809 	bl	8010fe8 <_Balloc>
 8011fd6:	4681      	mov	r9, r0
 8011fd8:	2800      	cmp	r0, #0
 8011fda:	f43f aef4 	beq.w	8011dc6 <_strtod_l+0x43e>
 8011fde:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011fe0:	691a      	ldr	r2, [r3, #16]
 8011fe2:	3202      	adds	r2, #2
 8011fe4:	f103 010c 	add.w	r1, r3, #12
 8011fe8:	0092      	lsls	r2, r2, #2
 8011fea:	300c      	adds	r0, #12
 8011fec:	f000 fd72 	bl	8012ad4 <memcpy>
 8011ff0:	ec4b ab10 	vmov	d0, sl, fp
 8011ff4:	9805      	ldr	r0, [sp, #20]
 8011ff6:	aa1c      	add	r2, sp, #112	@ 0x70
 8011ff8:	a91b      	add	r1, sp, #108	@ 0x6c
 8011ffa:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8011ffe:	f7ff fbd7 	bl	80117b0 <__d2b>
 8012002:	901a      	str	r0, [sp, #104]	@ 0x68
 8012004:	2800      	cmp	r0, #0
 8012006:	f43f aede 	beq.w	8011dc6 <_strtod_l+0x43e>
 801200a:	9805      	ldr	r0, [sp, #20]
 801200c:	2101      	movs	r1, #1
 801200e:	f7ff f929 	bl	8011264 <__i2b>
 8012012:	4680      	mov	r8, r0
 8012014:	b948      	cbnz	r0, 801202a <_strtod_l+0x6a2>
 8012016:	f04f 0800 	mov.w	r8, #0
 801201a:	e6d4      	b.n	8011dc6 <_strtod_l+0x43e>
 801201c:	f04f 32ff 	mov.w	r2, #4294967295
 8012020:	fa02 f303 	lsl.w	r3, r2, r3
 8012024:	ea03 0a0a 	and.w	sl, r3, sl
 8012028:	e7b0      	b.n	8011f8c <_strtod_l+0x604>
 801202a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801202c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801202e:	2d00      	cmp	r5, #0
 8012030:	bfab      	itete	ge
 8012032:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8012034:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8012036:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8012038:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 801203a:	bfac      	ite	ge
 801203c:	18ef      	addge	r7, r5, r3
 801203e:	1b5e      	sublt	r6, r3, r5
 8012040:	9b08      	ldr	r3, [sp, #32]
 8012042:	1aed      	subs	r5, r5, r3
 8012044:	4415      	add	r5, r2
 8012046:	4b66      	ldr	r3, [pc, #408]	@ (80121e0 <_strtod_l+0x858>)
 8012048:	3d01      	subs	r5, #1
 801204a:	429d      	cmp	r5, r3
 801204c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8012050:	da50      	bge.n	80120f4 <_strtod_l+0x76c>
 8012052:	1b5b      	subs	r3, r3, r5
 8012054:	2b1f      	cmp	r3, #31
 8012056:	eba2 0203 	sub.w	r2, r2, r3
 801205a:	f04f 0101 	mov.w	r1, #1
 801205e:	dc3d      	bgt.n	80120dc <_strtod_l+0x754>
 8012060:	fa01 f303 	lsl.w	r3, r1, r3
 8012064:	9313      	str	r3, [sp, #76]	@ 0x4c
 8012066:	2300      	movs	r3, #0
 8012068:	9310      	str	r3, [sp, #64]	@ 0x40
 801206a:	18bd      	adds	r5, r7, r2
 801206c:	9b08      	ldr	r3, [sp, #32]
 801206e:	42af      	cmp	r7, r5
 8012070:	4416      	add	r6, r2
 8012072:	441e      	add	r6, r3
 8012074:	463b      	mov	r3, r7
 8012076:	bfa8      	it	ge
 8012078:	462b      	movge	r3, r5
 801207a:	42b3      	cmp	r3, r6
 801207c:	bfa8      	it	ge
 801207e:	4633      	movge	r3, r6
 8012080:	2b00      	cmp	r3, #0
 8012082:	bfc2      	ittt	gt
 8012084:	1aed      	subgt	r5, r5, r3
 8012086:	1af6      	subgt	r6, r6, r3
 8012088:	1aff      	subgt	r7, r7, r3
 801208a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801208c:	2b00      	cmp	r3, #0
 801208e:	dd16      	ble.n	80120be <_strtod_l+0x736>
 8012090:	4641      	mov	r1, r8
 8012092:	9805      	ldr	r0, [sp, #20]
 8012094:	461a      	mov	r2, r3
 8012096:	f7ff f9a5 	bl	80113e4 <__pow5mult>
 801209a:	4680      	mov	r8, r0
 801209c:	2800      	cmp	r0, #0
 801209e:	d0ba      	beq.n	8012016 <_strtod_l+0x68e>
 80120a0:	4601      	mov	r1, r0
 80120a2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80120a4:	9805      	ldr	r0, [sp, #20]
 80120a6:	f7ff f8f3 	bl	8011290 <__multiply>
 80120aa:	900e      	str	r0, [sp, #56]	@ 0x38
 80120ac:	2800      	cmp	r0, #0
 80120ae:	f43f ae8a 	beq.w	8011dc6 <_strtod_l+0x43e>
 80120b2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80120b4:	9805      	ldr	r0, [sp, #20]
 80120b6:	f7fe ffd7 	bl	8011068 <_Bfree>
 80120ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80120bc:	931a      	str	r3, [sp, #104]	@ 0x68
 80120be:	2d00      	cmp	r5, #0
 80120c0:	dc1d      	bgt.n	80120fe <_strtod_l+0x776>
 80120c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	dd23      	ble.n	8012110 <_strtod_l+0x788>
 80120c8:	4649      	mov	r1, r9
 80120ca:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80120cc:	9805      	ldr	r0, [sp, #20]
 80120ce:	f7ff f989 	bl	80113e4 <__pow5mult>
 80120d2:	4681      	mov	r9, r0
 80120d4:	b9e0      	cbnz	r0, 8012110 <_strtod_l+0x788>
 80120d6:	f04f 0900 	mov.w	r9, #0
 80120da:	e674      	b.n	8011dc6 <_strtod_l+0x43e>
 80120dc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80120e0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80120e4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80120e8:	35e2      	adds	r5, #226	@ 0xe2
 80120ea:	fa01 f305 	lsl.w	r3, r1, r5
 80120ee:	9310      	str	r3, [sp, #64]	@ 0x40
 80120f0:	9113      	str	r1, [sp, #76]	@ 0x4c
 80120f2:	e7ba      	b.n	801206a <_strtod_l+0x6e2>
 80120f4:	2300      	movs	r3, #0
 80120f6:	9310      	str	r3, [sp, #64]	@ 0x40
 80120f8:	2301      	movs	r3, #1
 80120fa:	9313      	str	r3, [sp, #76]	@ 0x4c
 80120fc:	e7b5      	b.n	801206a <_strtod_l+0x6e2>
 80120fe:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012100:	9805      	ldr	r0, [sp, #20]
 8012102:	462a      	mov	r2, r5
 8012104:	f7ff f9c8 	bl	8011498 <__lshift>
 8012108:	901a      	str	r0, [sp, #104]	@ 0x68
 801210a:	2800      	cmp	r0, #0
 801210c:	d1d9      	bne.n	80120c2 <_strtod_l+0x73a>
 801210e:	e65a      	b.n	8011dc6 <_strtod_l+0x43e>
 8012110:	2e00      	cmp	r6, #0
 8012112:	dd07      	ble.n	8012124 <_strtod_l+0x79c>
 8012114:	4649      	mov	r1, r9
 8012116:	9805      	ldr	r0, [sp, #20]
 8012118:	4632      	mov	r2, r6
 801211a:	f7ff f9bd 	bl	8011498 <__lshift>
 801211e:	4681      	mov	r9, r0
 8012120:	2800      	cmp	r0, #0
 8012122:	d0d8      	beq.n	80120d6 <_strtod_l+0x74e>
 8012124:	2f00      	cmp	r7, #0
 8012126:	dd08      	ble.n	801213a <_strtod_l+0x7b2>
 8012128:	4641      	mov	r1, r8
 801212a:	9805      	ldr	r0, [sp, #20]
 801212c:	463a      	mov	r2, r7
 801212e:	f7ff f9b3 	bl	8011498 <__lshift>
 8012132:	4680      	mov	r8, r0
 8012134:	2800      	cmp	r0, #0
 8012136:	f43f ae46 	beq.w	8011dc6 <_strtod_l+0x43e>
 801213a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801213c:	9805      	ldr	r0, [sp, #20]
 801213e:	464a      	mov	r2, r9
 8012140:	f7ff fa32 	bl	80115a8 <__mdiff>
 8012144:	4604      	mov	r4, r0
 8012146:	2800      	cmp	r0, #0
 8012148:	f43f ae3d 	beq.w	8011dc6 <_strtod_l+0x43e>
 801214c:	68c3      	ldr	r3, [r0, #12]
 801214e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012150:	2300      	movs	r3, #0
 8012152:	60c3      	str	r3, [r0, #12]
 8012154:	4641      	mov	r1, r8
 8012156:	f7ff fa0b 	bl	8011570 <__mcmp>
 801215a:	2800      	cmp	r0, #0
 801215c:	da46      	bge.n	80121ec <_strtod_l+0x864>
 801215e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012160:	ea53 030a 	orrs.w	r3, r3, sl
 8012164:	d16c      	bne.n	8012240 <_strtod_l+0x8b8>
 8012166:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801216a:	2b00      	cmp	r3, #0
 801216c:	d168      	bne.n	8012240 <_strtod_l+0x8b8>
 801216e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012172:	0d1b      	lsrs	r3, r3, #20
 8012174:	051b      	lsls	r3, r3, #20
 8012176:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801217a:	d961      	bls.n	8012240 <_strtod_l+0x8b8>
 801217c:	6963      	ldr	r3, [r4, #20]
 801217e:	b913      	cbnz	r3, 8012186 <_strtod_l+0x7fe>
 8012180:	6923      	ldr	r3, [r4, #16]
 8012182:	2b01      	cmp	r3, #1
 8012184:	dd5c      	ble.n	8012240 <_strtod_l+0x8b8>
 8012186:	4621      	mov	r1, r4
 8012188:	2201      	movs	r2, #1
 801218a:	9805      	ldr	r0, [sp, #20]
 801218c:	f7ff f984 	bl	8011498 <__lshift>
 8012190:	4641      	mov	r1, r8
 8012192:	4604      	mov	r4, r0
 8012194:	f7ff f9ec 	bl	8011570 <__mcmp>
 8012198:	2800      	cmp	r0, #0
 801219a:	dd51      	ble.n	8012240 <_strtod_l+0x8b8>
 801219c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80121a0:	9a08      	ldr	r2, [sp, #32]
 80121a2:	0d1b      	lsrs	r3, r3, #20
 80121a4:	051b      	lsls	r3, r3, #20
 80121a6:	2a00      	cmp	r2, #0
 80121a8:	d06b      	beq.n	8012282 <_strtod_l+0x8fa>
 80121aa:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80121ae:	d868      	bhi.n	8012282 <_strtod_l+0x8fa>
 80121b0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80121b4:	f67f ae9d 	bls.w	8011ef2 <_strtod_l+0x56a>
 80121b8:	4b0a      	ldr	r3, [pc, #40]	@ (80121e4 <_strtod_l+0x85c>)
 80121ba:	4650      	mov	r0, sl
 80121bc:	4659      	mov	r1, fp
 80121be:	2200      	movs	r2, #0
 80121c0:	f7ee fa42 	bl	8000648 <__aeabi_dmul>
 80121c4:	4b08      	ldr	r3, [pc, #32]	@ (80121e8 <_strtod_l+0x860>)
 80121c6:	400b      	ands	r3, r1
 80121c8:	4682      	mov	sl, r0
 80121ca:	468b      	mov	fp, r1
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	f47f ae05 	bne.w	8011ddc <_strtod_l+0x454>
 80121d2:	9a05      	ldr	r2, [sp, #20]
 80121d4:	2322      	movs	r3, #34	@ 0x22
 80121d6:	6013      	str	r3, [r2, #0]
 80121d8:	e600      	b.n	8011ddc <_strtod_l+0x454>
 80121da:	bf00      	nop
 80121dc:	08013ad0 	.word	0x08013ad0
 80121e0:	fffffc02 	.word	0xfffffc02
 80121e4:	39500000 	.word	0x39500000
 80121e8:	7ff00000 	.word	0x7ff00000
 80121ec:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80121f0:	d165      	bne.n	80122be <_strtod_l+0x936>
 80121f2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80121f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80121f8:	b35a      	cbz	r2, 8012252 <_strtod_l+0x8ca>
 80121fa:	4a9f      	ldr	r2, [pc, #636]	@ (8012478 <_strtod_l+0xaf0>)
 80121fc:	4293      	cmp	r3, r2
 80121fe:	d12b      	bne.n	8012258 <_strtod_l+0x8d0>
 8012200:	9b08      	ldr	r3, [sp, #32]
 8012202:	4651      	mov	r1, sl
 8012204:	b303      	cbz	r3, 8012248 <_strtod_l+0x8c0>
 8012206:	4b9d      	ldr	r3, [pc, #628]	@ (801247c <_strtod_l+0xaf4>)
 8012208:	465a      	mov	r2, fp
 801220a:	4013      	ands	r3, r2
 801220c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8012210:	f04f 32ff 	mov.w	r2, #4294967295
 8012214:	d81b      	bhi.n	801224e <_strtod_l+0x8c6>
 8012216:	0d1b      	lsrs	r3, r3, #20
 8012218:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801221c:	fa02 f303 	lsl.w	r3, r2, r3
 8012220:	4299      	cmp	r1, r3
 8012222:	d119      	bne.n	8012258 <_strtod_l+0x8d0>
 8012224:	4b96      	ldr	r3, [pc, #600]	@ (8012480 <_strtod_l+0xaf8>)
 8012226:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012228:	429a      	cmp	r2, r3
 801222a:	d102      	bne.n	8012232 <_strtod_l+0x8aa>
 801222c:	3101      	adds	r1, #1
 801222e:	f43f adca 	beq.w	8011dc6 <_strtod_l+0x43e>
 8012232:	4b92      	ldr	r3, [pc, #584]	@ (801247c <_strtod_l+0xaf4>)
 8012234:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012236:	401a      	ands	r2, r3
 8012238:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801223c:	f04f 0a00 	mov.w	sl, #0
 8012240:	9b08      	ldr	r3, [sp, #32]
 8012242:	2b00      	cmp	r3, #0
 8012244:	d1b8      	bne.n	80121b8 <_strtod_l+0x830>
 8012246:	e5c9      	b.n	8011ddc <_strtod_l+0x454>
 8012248:	f04f 33ff 	mov.w	r3, #4294967295
 801224c:	e7e8      	b.n	8012220 <_strtod_l+0x898>
 801224e:	4613      	mov	r3, r2
 8012250:	e7e6      	b.n	8012220 <_strtod_l+0x898>
 8012252:	ea53 030a 	orrs.w	r3, r3, sl
 8012256:	d0a1      	beq.n	801219c <_strtod_l+0x814>
 8012258:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801225a:	b1db      	cbz	r3, 8012294 <_strtod_l+0x90c>
 801225c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801225e:	4213      	tst	r3, r2
 8012260:	d0ee      	beq.n	8012240 <_strtod_l+0x8b8>
 8012262:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012264:	9a08      	ldr	r2, [sp, #32]
 8012266:	4650      	mov	r0, sl
 8012268:	4659      	mov	r1, fp
 801226a:	b1bb      	cbz	r3, 801229c <_strtod_l+0x914>
 801226c:	f7ff fb6e 	bl	801194c <sulp>
 8012270:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012274:	ec53 2b10 	vmov	r2, r3, d0
 8012278:	f7ee f830 	bl	80002dc <__adddf3>
 801227c:	4682      	mov	sl, r0
 801227e:	468b      	mov	fp, r1
 8012280:	e7de      	b.n	8012240 <_strtod_l+0x8b8>
 8012282:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8012286:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801228a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801228e:	f04f 3aff 	mov.w	sl, #4294967295
 8012292:	e7d5      	b.n	8012240 <_strtod_l+0x8b8>
 8012294:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8012296:	ea13 0f0a 	tst.w	r3, sl
 801229a:	e7e1      	b.n	8012260 <_strtod_l+0x8d8>
 801229c:	f7ff fb56 	bl	801194c <sulp>
 80122a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80122a4:	ec53 2b10 	vmov	r2, r3, d0
 80122a8:	f7ee f816 	bl	80002d8 <__aeabi_dsub>
 80122ac:	2200      	movs	r2, #0
 80122ae:	2300      	movs	r3, #0
 80122b0:	4682      	mov	sl, r0
 80122b2:	468b      	mov	fp, r1
 80122b4:	f7ee fc30 	bl	8000b18 <__aeabi_dcmpeq>
 80122b8:	2800      	cmp	r0, #0
 80122ba:	d0c1      	beq.n	8012240 <_strtod_l+0x8b8>
 80122bc:	e619      	b.n	8011ef2 <_strtod_l+0x56a>
 80122be:	4641      	mov	r1, r8
 80122c0:	4620      	mov	r0, r4
 80122c2:	f7ff facd 	bl	8011860 <__ratio>
 80122c6:	ec57 6b10 	vmov	r6, r7, d0
 80122ca:	2200      	movs	r2, #0
 80122cc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80122d0:	4630      	mov	r0, r6
 80122d2:	4639      	mov	r1, r7
 80122d4:	f7ee fc34 	bl	8000b40 <__aeabi_dcmple>
 80122d8:	2800      	cmp	r0, #0
 80122da:	d06f      	beq.n	80123bc <_strtod_l+0xa34>
 80122dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d17a      	bne.n	80123d8 <_strtod_l+0xa50>
 80122e2:	f1ba 0f00 	cmp.w	sl, #0
 80122e6:	d158      	bne.n	801239a <_strtod_l+0xa12>
 80122e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80122ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d15a      	bne.n	80123a8 <_strtod_l+0xa20>
 80122f2:	4b64      	ldr	r3, [pc, #400]	@ (8012484 <_strtod_l+0xafc>)
 80122f4:	2200      	movs	r2, #0
 80122f6:	4630      	mov	r0, r6
 80122f8:	4639      	mov	r1, r7
 80122fa:	f7ee fc17 	bl	8000b2c <__aeabi_dcmplt>
 80122fe:	2800      	cmp	r0, #0
 8012300:	d159      	bne.n	80123b6 <_strtod_l+0xa2e>
 8012302:	4630      	mov	r0, r6
 8012304:	4639      	mov	r1, r7
 8012306:	4b60      	ldr	r3, [pc, #384]	@ (8012488 <_strtod_l+0xb00>)
 8012308:	2200      	movs	r2, #0
 801230a:	f7ee f99d 	bl	8000648 <__aeabi_dmul>
 801230e:	4606      	mov	r6, r0
 8012310:	460f      	mov	r7, r1
 8012312:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8012316:	9606      	str	r6, [sp, #24]
 8012318:	9307      	str	r3, [sp, #28]
 801231a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801231e:	4d57      	ldr	r5, [pc, #348]	@ (801247c <_strtod_l+0xaf4>)
 8012320:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8012324:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012326:	401d      	ands	r5, r3
 8012328:	4b58      	ldr	r3, [pc, #352]	@ (801248c <_strtod_l+0xb04>)
 801232a:	429d      	cmp	r5, r3
 801232c:	f040 80b2 	bne.w	8012494 <_strtod_l+0xb0c>
 8012330:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012332:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8012336:	ec4b ab10 	vmov	d0, sl, fp
 801233a:	f7ff f9c9 	bl	80116d0 <__ulp>
 801233e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012342:	ec51 0b10 	vmov	r0, r1, d0
 8012346:	f7ee f97f 	bl	8000648 <__aeabi_dmul>
 801234a:	4652      	mov	r2, sl
 801234c:	465b      	mov	r3, fp
 801234e:	f7ed ffc5 	bl	80002dc <__adddf3>
 8012352:	460b      	mov	r3, r1
 8012354:	4949      	ldr	r1, [pc, #292]	@ (801247c <_strtod_l+0xaf4>)
 8012356:	4a4e      	ldr	r2, [pc, #312]	@ (8012490 <_strtod_l+0xb08>)
 8012358:	4019      	ands	r1, r3
 801235a:	4291      	cmp	r1, r2
 801235c:	4682      	mov	sl, r0
 801235e:	d942      	bls.n	80123e6 <_strtod_l+0xa5e>
 8012360:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012362:	4b47      	ldr	r3, [pc, #284]	@ (8012480 <_strtod_l+0xaf8>)
 8012364:	429a      	cmp	r2, r3
 8012366:	d103      	bne.n	8012370 <_strtod_l+0x9e8>
 8012368:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801236a:	3301      	adds	r3, #1
 801236c:	f43f ad2b 	beq.w	8011dc6 <_strtod_l+0x43e>
 8012370:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8012480 <_strtod_l+0xaf8>
 8012374:	f04f 3aff 	mov.w	sl, #4294967295
 8012378:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801237a:	9805      	ldr	r0, [sp, #20]
 801237c:	f7fe fe74 	bl	8011068 <_Bfree>
 8012380:	9805      	ldr	r0, [sp, #20]
 8012382:	4649      	mov	r1, r9
 8012384:	f7fe fe70 	bl	8011068 <_Bfree>
 8012388:	9805      	ldr	r0, [sp, #20]
 801238a:	4641      	mov	r1, r8
 801238c:	f7fe fe6c 	bl	8011068 <_Bfree>
 8012390:	9805      	ldr	r0, [sp, #20]
 8012392:	4621      	mov	r1, r4
 8012394:	f7fe fe68 	bl	8011068 <_Bfree>
 8012398:	e618      	b.n	8011fcc <_strtod_l+0x644>
 801239a:	f1ba 0f01 	cmp.w	sl, #1
 801239e:	d103      	bne.n	80123a8 <_strtod_l+0xa20>
 80123a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	f43f ada5 	beq.w	8011ef2 <_strtod_l+0x56a>
 80123a8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8012458 <_strtod_l+0xad0>
 80123ac:	4f35      	ldr	r7, [pc, #212]	@ (8012484 <_strtod_l+0xafc>)
 80123ae:	ed8d 7b06 	vstr	d7, [sp, #24]
 80123b2:	2600      	movs	r6, #0
 80123b4:	e7b1      	b.n	801231a <_strtod_l+0x992>
 80123b6:	4f34      	ldr	r7, [pc, #208]	@ (8012488 <_strtod_l+0xb00>)
 80123b8:	2600      	movs	r6, #0
 80123ba:	e7aa      	b.n	8012312 <_strtod_l+0x98a>
 80123bc:	4b32      	ldr	r3, [pc, #200]	@ (8012488 <_strtod_l+0xb00>)
 80123be:	4630      	mov	r0, r6
 80123c0:	4639      	mov	r1, r7
 80123c2:	2200      	movs	r2, #0
 80123c4:	f7ee f940 	bl	8000648 <__aeabi_dmul>
 80123c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80123ca:	4606      	mov	r6, r0
 80123cc:	460f      	mov	r7, r1
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	d09f      	beq.n	8012312 <_strtod_l+0x98a>
 80123d2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80123d6:	e7a0      	b.n	801231a <_strtod_l+0x992>
 80123d8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8012460 <_strtod_l+0xad8>
 80123dc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80123e0:	ec57 6b17 	vmov	r6, r7, d7
 80123e4:	e799      	b.n	801231a <_strtod_l+0x992>
 80123e6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80123ea:	9b08      	ldr	r3, [sp, #32]
 80123ec:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d1c1      	bne.n	8012378 <_strtod_l+0x9f0>
 80123f4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80123f8:	0d1b      	lsrs	r3, r3, #20
 80123fa:	051b      	lsls	r3, r3, #20
 80123fc:	429d      	cmp	r5, r3
 80123fe:	d1bb      	bne.n	8012378 <_strtod_l+0x9f0>
 8012400:	4630      	mov	r0, r6
 8012402:	4639      	mov	r1, r7
 8012404:	f7ee fc68 	bl	8000cd8 <__aeabi_d2lz>
 8012408:	f7ee f8f0 	bl	80005ec <__aeabi_l2d>
 801240c:	4602      	mov	r2, r0
 801240e:	460b      	mov	r3, r1
 8012410:	4630      	mov	r0, r6
 8012412:	4639      	mov	r1, r7
 8012414:	f7ed ff60 	bl	80002d8 <__aeabi_dsub>
 8012418:	460b      	mov	r3, r1
 801241a:	4602      	mov	r2, r0
 801241c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8012420:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8012424:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012426:	ea46 060a 	orr.w	r6, r6, sl
 801242a:	431e      	orrs	r6, r3
 801242c:	d06f      	beq.n	801250e <_strtod_l+0xb86>
 801242e:	a30e      	add	r3, pc, #56	@ (adr r3, 8012468 <_strtod_l+0xae0>)
 8012430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012434:	f7ee fb7a 	bl	8000b2c <__aeabi_dcmplt>
 8012438:	2800      	cmp	r0, #0
 801243a:	f47f accf 	bne.w	8011ddc <_strtod_l+0x454>
 801243e:	a30c      	add	r3, pc, #48	@ (adr r3, 8012470 <_strtod_l+0xae8>)
 8012440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012444:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012448:	f7ee fb8e 	bl	8000b68 <__aeabi_dcmpgt>
 801244c:	2800      	cmp	r0, #0
 801244e:	d093      	beq.n	8012378 <_strtod_l+0x9f0>
 8012450:	e4c4      	b.n	8011ddc <_strtod_l+0x454>
 8012452:	bf00      	nop
 8012454:	f3af 8000 	nop.w
 8012458:	00000000 	.word	0x00000000
 801245c:	bff00000 	.word	0xbff00000
 8012460:	00000000 	.word	0x00000000
 8012464:	3ff00000 	.word	0x3ff00000
 8012468:	94a03595 	.word	0x94a03595
 801246c:	3fdfffff 	.word	0x3fdfffff
 8012470:	35afe535 	.word	0x35afe535
 8012474:	3fe00000 	.word	0x3fe00000
 8012478:	000fffff 	.word	0x000fffff
 801247c:	7ff00000 	.word	0x7ff00000
 8012480:	7fefffff 	.word	0x7fefffff
 8012484:	3ff00000 	.word	0x3ff00000
 8012488:	3fe00000 	.word	0x3fe00000
 801248c:	7fe00000 	.word	0x7fe00000
 8012490:	7c9fffff 	.word	0x7c9fffff
 8012494:	9b08      	ldr	r3, [sp, #32]
 8012496:	b323      	cbz	r3, 80124e2 <_strtod_l+0xb5a>
 8012498:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801249c:	d821      	bhi.n	80124e2 <_strtod_l+0xb5a>
 801249e:	a328      	add	r3, pc, #160	@ (adr r3, 8012540 <_strtod_l+0xbb8>)
 80124a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124a4:	4630      	mov	r0, r6
 80124a6:	4639      	mov	r1, r7
 80124a8:	f7ee fb4a 	bl	8000b40 <__aeabi_dcmple>
 80124ac:	b1a0      	cbz	r0, 80124d8 <_strtod_l+0xb50>
 80124ae:	4639      	mov	r1, r7
 80124b0:	4630      	mov	r0, r6
 80124b2:	f7ee fba1 	bl	8000bf8 <__aeabi_d2uiz>
 80124b6:	2801      	cmp	r0, #1
 80124b8:	bf38      	it	cc
 80124ba:	2001      	movcc	r0, #1
 80124bc:	f7ee f84a 	bl	8000554 <__aeabi_ui2d>
 80124c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80124c2:	4606      	mov	r6, r0
 80124c4:	460f      	mov	r7, r1
 80124c6:	b9fb      	cbnz	r3, 8012508 <_strtod_l+0xb80>
 80124c8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80124cc:	9014      	str	r0, [sp, #80]	@ 0x50
 80124ce:	9315      	str	r3, [sp, #84]	@ 0x54
 80124d0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80124d4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80124d8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80124da:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80124de:	1b5b      	subs	r3, r3, r5
 80124e0:	9311      	str	r3, [sp, #68]	@ 0x44
 80124e2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80124e6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80124ea:	f7ff f8f1 	bl	80116d0 <__ulp>
 80124ee:	4650      	mov	r0, sl
 80124f0:	ec53 2b10 	vmov	r2, r3, d0
 80124f4:	4659      	mov	r1, fp
 80124f6:	f7ee f8a7 	bl	8000648 <__aeabi_dmul>
 80124fa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80124fe:	f7ed feed 	bl	80002dc <__adddf3>
 8012502:	4682      	mov	sl, r0
 8012504:	468b      	mov	fp, r1
 8012506:	e770      	b.n	80123ea <_strtod_l+0xa62>
 8012508:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801250c:	e7e0      	b.n	80124d0 <_strtod_l+0xb48>
 801250e:	a30e      	add	r3, pc, #56	@ (adr r3, 8012548 <_strtod_l+0xbc0>)
 8012510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012514:	f7ee fb0a 	bl	8000b2c <__aeabi_dcmplt>
 8012518:	e798      	b.n	801244c <_strtod_l+0xac4>
 801251a:	2300      	movs	r3, #0
 801251c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801251e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8012520:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012522:	6013      	str	r3, [r2, #0]
 8012524:	f7ff ba6d 	b.w	8011a02 <_strtod_l+0x7a>
 8012528:	2a65      	cmp	r2, #101	@ 0x65
 801252a:	f43f ab66 	beq.w	8011bfa <_strtod_l+0x272>
 801252e:	2a45      	cmp	r2, #69	@ 0x45
 8012530:	f43f ab63 	beq.w	8011bfa <_strtod_l+0x272>
 8012534:	2301      	movs	r3, #1
 8012536:	f7ff bb9e 	b.w	8011c76 <_strtod_l+0x2ee>
 801253a:	bf00      	nop
 801253c:	f3af 8000 	nop.w
 8012540:	ffc00000 	.word	0xffc00000
 8012544:	41dfffff 	.word	0x41dfffff
 8012548:	94a03595 	.word	0x94a03595
 801254c:	3fcfffff 	.word	0x3fcfffff

08012550 <_strtod_r>:
 8012550:	4b01      	ldr	r3, [pc, #4]	@ (8012558 <_strtod_r+0x8>)
 8012552:	f7ff ba19 	b.w	8011988 <_strtod_l>
 8012556:	bf00      	nop
 8012558:	200001e0 	.word	0x200001e0

0801255c <_strtol_l.constprop.0>:
 801255c:	2b24      	cmp	r3, #36	@ 0x24
 801255e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012562:	4686      	mov	lr, r0
 8012564:	4690      	mov	r8, r2
 8012566:	d801      	bhi.n	801256c <_strtol_l.constprop.0+0x10>
 8012568:	2b01      	cmp	r3, #1
 801256a:	d106      	bne.n	801257a <_strtol_l.constprop.0+0x1e>
 801256c:	f7fd fdba 	bl	80100e4 <__errno>
 8012570:	2316      	movs	r3, #22
 8012572:	6003      	str	r3, [r0, #0]
 8012574:	2000      	movs	r0, #0
 8012576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801257a:	4834      	ldr	r0, [pc, #208]	@ (801264c <_strtol_l.constprop.0+0xf0>)
 801257c:	460d      	mov	r5, r1
 801257e:	462a      	mov	r2, r5
 8012580:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012584:	5d06      	ldrb	r6, [r0, r4]
 8012586:	f016 0608 	ands.w	r6, r6, #8
 801258a:	d1f8      	bne.n	801257e <_strtol_l.constprop.0+0x22>
 801258c:	2c2d      	cmp	r4, #45	@ 0x2d
 801258e:	d12d      	bne.n	80125ec <_strtol_l.constprop.0+0x90>
 8012590:	782c      	ldrb	r4, [r5, #0]
 8012592:	2601      	movs	r6, #1
 8012594:	1c95      	adds	r5, r2, #2
 8012596:	f033 0210 	bics.w	r2, r3, #16
 801259a:	d109      	bne.n	80125b0 <_strtol_l.constprop.0+0x54>
 801259c:	2c30      	cmp	r4, #48	@ 0x30
 801259e:	d12a      	bne.n	80125f6 <_strtol_l.constprop.0+0x9a>
 80125a0:	782a      	ldrb	r2, [r5, #0]
 80125a2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80125a6:	2a58      	cmp	r2, #88	@ 0x58
 80125a8:	d125      	bne.n	80125f6 <_strtol_l.constprop.0+0x9a>
 80125aa:	786c      	ldrb	r4, [r5, #1]
 80125ac:	2310      	movs	r3, #16
 80125ae:	3502      	adds	r5, #2
 80125b0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80125b4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80125b8:	2200      	movs	r2, #0
 80125ba:	fbbc f9f3 	udiv	r9, ip, r3
 80125be:	4610      	mov	r0, r2
 80125c0:	fb03 ca19 	mls	sl, r3, r9, ip
 80125c4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80125c8:	2f09      	cmp	r7, #9
 80125ca:	d81b      	bhi.n	8012604 <_strtol_l.constprop.0+0xa8>
 80125cc:	463c      	mov	r4, r7
 80125ce:	42a3      	cmp	r3, r4
 80125d0:	dd27      	ble.n	8012622 <_strtol_l.constprop.0+0xc6>
 80125d2:	1c57      	adds	r7, r2, #1
 80125d4:	d007      	beq.n	80125e6 <_strtol_l.constprop.0+0x8a>
 80125d6:	4581      	cmp	r9, r0
 80125d8:	d320      	bcc.n	801261c <_strtol_l.constprop.0+0xc0>
 80125da:	d101      	bne.n	80125e0 <_strtol_l.constprop.0+0x84>
 80125dc:	45a2      	cmp	sl, r4
 80125de:	db1d      	blt.n	801261c <_strtol_l.constprop.0+0xc0>
 80125e0:	fb00 4003 	mla	r0, r0, r3, r4
 80125e4:	2201      	movs	r2, #1
 80125e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80125ea:	e7eb      	b.n	80125c4 <_strtol_l.constprop.0+0x68>
 80125ec:	2c2b      	cmp	r4, #43	@ 0x2b
 80125ee:	bf04      	itt	eq
 80125f0:	782c      	ldrbeq	r4, [r5, #0]
 80125f2:	1c95      	addeq	r5, r2, #2
 80125f4:	e7cf      	b.n	8012596 <_strtol_l.constprop.0+0x3a>
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d1da      	bne.n	80125b0 <_strtol_l.constprop.0+0x54>
 80125fa:	2c30      	cmp	r4, #48	@ 0x30
 80125fc:	bf0c      	ite	eq
 80125fe:	2308      	moveq	r3, #8
 8012600:	230a      	movne	r3, #10
 8012602:	e7d5      	b.n	80125b0 <_strtol_l.constprop.0+0x54>
 8012604:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8012608:	2f19      	cmp	r7, #25
 801260a:	d801      	bhi.n	8012610 <_strtol_l.constprop.0+0xb4>
 801260c:	3c37      	subs	r4, #55	@ 0x37
 801260e:	e7de      	b.n	80125ce <_strtol_l.constprop.0+0x72>
 8012610:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8012614:	2f19      	cmp	r7, #25
 8012616:	d804      	bhi.n	8012622 <_strtol_l.constprop.0+0xc6>
 8012618:	3c57      	subs	r4, #87	@ 0x57
 801261a:	e7d8      	b.n	80125ce <_strtol_l.constprop.0+0x72>
 801261c:	f04f 32ff 	mov.w	r2, #4294967295
 8012620:	e7e1      	b.n	80125e6 <_strtol_l.constprop.0+0x8a>
 8012622:	1c53      	adds	r3, r2, #1
 8012624:	d108      	bne.n	8012638 <_strtol_l.constprop.0+0xdc>
 8012626:	2322      	movs	r3, #34	@ 0x22
 8012628:	f8ce 3000 	str.w	r3, [lr]
 801262c:	4660      	mov	r0, ip
 801262e:	f1b8 0f00 	cmp.w	r8, #0
 8012632:	d0a0      	beq.n	8012576 <_strtol_l.constprop.0+0x1a>
 8012634:	1e69      	subs	r1, r5, #1
 8012636:	e006      	b.n	8012646 <_strtol_l.constprop.0+0xea>
 8012638:	b106      	cbz	r6, 801263c <_strtol_l.constprop.0+0xe0>
 801263a:	4240      	negs	r0, r0
 801263c:	f1b8 0f00 	cmp.w	r8, #0
 8012640:	d099      	beq.n	8012576 <_strtol_l.constprop.0+0x1a>
 8012642:	2a00      	cmp	r2, #0
 8012644:	d1f6      	bne.n	8012634 <_strtol_l.constprop.0+0xd8>
 8012646:	f8c8 1000 	str.w	r1, [r8]
 801264a:	e794      	b.n	8012576 <_strtol_l.constprop.0+0x1a>
 801264c:	08013af9 	.word	0x08013af9

08012650 <_strtol_r>:
 8012650:	f7ff bf84 	b.w	801255c <_strtol_l.constprop.0>

08012654 <__ssputs_r>:
 8012654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012658:	688e      	ldr	r6, [r1, #8]
 801265a:	461f      	mov	r7, r3
 801265c:	42be      	cmp	r6, r7
 801265e:	680b      	ldr	r3, [r1, #0]
 8012660:	4682      	mov	sl, r0
 8012662:	460c      	mov	r4, r1
 8012664:	4690      	mov	r8, r2
 8012666:	d82d      	bhi.n	80126c4 <__ssputs_r+0x70>
 8012668:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801266c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012670:	d026      	beq.n	80126c0 <__ssputs_r+0x6c>
 8012672:	6965      	ldr	r5, [r4, #20]
 8012674:	6909      	ldr	r1, [r1, #16]
 8012676:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801267a:	eba3 0901 	sub.w	r9, r3, r1
 801267e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012682:	1c7b      	adds	r3, r7, #1
 8012684:	444b      	add	r3, r9
 8012686:	106d      	asrs	r5, r5, #1
 8012688:	429d      	cmp	r5, r3
 801268a:	bf38      	it	cc
 801268c:	461d      	movcc	r5, r3
 801268e:	0553      	lsls	r3, r2, #21
 8012690:	d527      	bpl.n	80126e2 <__ssputs_r+0x8e>
 8012692:	4629      	mov	r1, r5
 8012694:	f7fe fc1c 	bl	8010ed0 <_malloc_r>
 8012698:	4606      	mov	r6, r0
 801269a:	b360      	cbz	r0, 80126f6 <__ssputs_r+0xa2>
 801269c:	6921      	ldr	r1, [r4, #16]
 801269e:	464a      	mov	r2, r9
 80126a0:	f000 fa18 	bl	8012ad4 <memcpy>
 80126a4:	89a3      	ldrh	r3, [r4, #12]
 80126a6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80126aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80126ae:	81a3      	strh	r3, [r4, #12]
 80126b0:	6126      	str	r6, [r4, #16]
 80126b2:	6165      	str	r5, [r4, #20]
 80126b4:	444e      	add	r6, r9
 80126b6:	eba5 0509 	sub.w	r5, r5, r9
 80126ba:	6026      	str	r6, [r4, #0]
 80126bc:	60a5      	str	r5, [r4, #8]
 80126be:	463e      	mov	r6, r7
 80126c0:	42be      	cmp	r6, r7
 80126c2:	d900      	bls.n	80126c6 <__ssputs_r+0x72>
 80126c4:	463e      	mov	r6, r7
 80126c6:	6820      	ldr	r0, [r4, #0]
 80126c8:	4632      	mov	r2, r6
 80126ca:	4641      	mov	r1, r8
 80126cc:	f000 f9c6 	bl	8012a5c <memmove>
 80126d0:	68a3      	ldr	r3, [r4, #8]
 80126d2:	1b9b      	subs	r3, r3, r6
 80126d4:	60a3      	str	r3, [r4, #8]
 80126d6:	6823      	ldr	r3, [r4, #0]
 80126d8:	4433      	add	r3, r6
 80126da:	6023      	str	r3, [r4, #0]
 80126dc:	2000      	movs	r0, #0
 80126de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80126e2:	462a      	mov	r2, r5
 80126e4:	f000 fd89 	bl	80131fa <_realloc_r>
 80126e8:	4606      	mov	r6, r0
 80126ea:	2800      	cmp	r0, #0
 80126ec:	d1e0      	bne.n	80126b0 <__ssputs_r+0x5c>
 80126ee:	6921      	ldr	r1, [r4, #16]
 80126f0:	4650      	mov	r0, sl
 80126f2:	f7fe fb79 	bl	8010de8 <_free_r>
 80126f6:	230c      	movs	r3, #12
 80126f8:	f8ca 3000 	str.w	r3, [sl]
 80126fc:	89a3      	ldrh	r3, [r4, #12]
 80126fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012702:	81a3      	strh	r3, [r4, #12]
 8012704:	f04f 30ff 	mov.w	r0, #4294967295
 8012708:	e7e9      	b.n	80126de <__ssputs_r+0x8a>
	...

0801270c <_svfiprintf_r>:
 801270c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012710:	4698      	mov	r8, r3
 8012712:	898b      	ldrh	r3, [r1, #12]
 8012714:	061b      	lsls	r3, r3, #24
 8012716:	b09d      	sub	sp, #116	@ 0x74
 8012718:	4607      	mov	r7, r0
 801271a:	460d      	mov	r5, r1
 801271c:	4614      	mov	r4, r2
 801271e:	d510      	bpl.n	8012742 <_svfiprintf_r+0x36>
 8012720:	690b      	ldr	r3, [r1, #16]
 8012722:	b973      	cbnz	r3, 8012742 <_svfiprintf_r+0x36>
 8012724:	2140      	movs	r1, #64	@ 0x40
 8012726:	f7fe fbd3 	bl	8010ed0 <_malloc_r>
 801272a:	6028      	str	r0, [r5, #0]
 801272c:	6128      	str	r0, [r5, #16]
 801272e:	b930      	cbnz	r0, 801273e <_svfiprintf_r+0x32>
 8012730:	230c      	movs	r3, #12
 8012732:	603b      	str	r3, [r7, #0]
 8012734:	f04f 30ff 	mov.w	r0, #4294967295
 8012738:	b01d      	add	sp, #116	@ 0x74
 801273a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801273e:	2340      	movs	r3, #64	@ 0x40
 8012740:	616b      	str	r3, [r5, #20]
 8012742:	2300      	movs	r3, #0
 8012744:	9309      	str	r3, [sp, #36]	@ 0x24
 8012746:	2320      	movs	r3, #32
 8012748:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801274c:	f8cd 800c 	str.w	r8, [sp, #12]
 8012750:	2330      	movs	r3, #48	@ 0x30
 8012752:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80128f0 <_svfiprintf_r+0x1e4>
 8012756:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801275a:	f04f 0901 	mov.w	r9, #1
 801275e:	4623      	mov	r3, r4
 8012760:	469a      	mov	sl, r3
 8012762:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012766:	b10a      	cbz	r2, 801276c <_svfiprintf_r+0x60>
 8012768:	2a25      	cmp	r2, #37	@ 0x25
 801276a:	d1f9      	bne.n	8012760 <_svfiprintf_r+0x54>
 801276c:	ebba 0b04 	subs.w	fp, sl, r4
 8012770:	d00b      	beq.n	801278a <_svfiprintf_r+0x7e>
 8012772:	465b      	mov	r3, fp
 8012774:	4622      	mov	r2, r4
 8012776:	4629      	mov	r1, r5
 8012778:	4638      	mov	r0, r7
 801277a:	f7ff ff6b 	bl	8012654 <__ssputs_r>
 801277e:	3001      	adds	r0, #1
 8012780:	f000 80a7 	beq.w	80128d2 <_svfiprintf_r+0x1c6>
 8012784:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012786:	445a      	add	r2, fp
 8012788:	9209      	str	r2, [sp, #36]	@ 0x24
 801278a:	f89a 3000 	ldrb.w	r3, [sl]
 801278e:	2b00      	cmp	r3, #0
 8012790:	f000 809f 	beq.w	80128d2 <_svfiprintf_r+0x1c6>
 8012794:	2300      	movs	r3, #0
 8012796:	f04f 32ff 	mov.w	r2, #4294967295
 801279a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801279e:	f10a 0a01 	add.w	sl, sl, #1
 80127a2:	9304      	str	r3, [sp, #16]
 80127a4:	9307      	str	r3, [sp, #28]
 80127a6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80127aa:	931a      	str	r3, [sp, #104]	@ 0x68
 80127ac:	4654      	mov	r4, sl
 80127ae:	2205      	movs	r2, #5
 80127b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80127b4:	484e      	ldr	r0, [pc, #312]	@ (80128f0 <_svfiprintf_r+0x1e4>)
 80127b6:	f7ed fd33 	bl	8000220 <memchr>
 80127ba:	9a04      	ldr	r2, [sp, #16]
 80127bc:	b9d8      	cbnz	r0, 80127f6 <_svfiprintf_r+0xea>
 80127be:	06d0      	lsls	r0, r2, #27
 80127c0:	bf44      	itt	mi
 80127c2:	2320      	movmi	r3, #32
 80127c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80127c8:	0711      	lsls	r1, r2, #28
 80127ca:	bf44      	itt	mi
 80127cc:	232b      	movmi	r3, #43	@ 0x2b
 80127ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80127d2:	f89a 3000 	ldrb.w	r3, [sl]
 80127d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80127d8:	d015      	beq.n	8012806 <_svfiprintf_r+0xfa>
 80127da:	9a07      	ldr	r2, [sp, #28]
 80127dc:	4654      	mov	r4, sl
 80127de:	2000      	movs	r0, #0
 80127e0:	f04f 0c0a 	mov.w	ip, #10
 80127e4:	4621      	mov	r1, r4
 80127e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80127ea:	3b30      	subs	r3, #48	@ 0x30
 80127ec:	2b09      	cmp	r3, #9
 80127ee:	d94b      	bls.n	8012888 <_svfiprintf_r+0x17c>
 80127f0:	b1b0      	cbz	r0, 8012820 <_svfiprintf_r+0x114>
 80127f2:	9207      	str	r2, [sp, #28]
 80127f4:	e014      	b.n	8012820 <_svfiprintf_r+0x114>
 80127f6:	eba0 0308 	sub.w	r3, r0, r8
 80127fa:	fa09 f303 	lsl.w	r3, r9, r3
 80127fe:	4313      	orrs	r3, r2
 8012800:	9304      	str	r3, [sp, #16]
 8012802:	46a2      	mov	sl, r4
 8012804:	e7d2      	b.n	80127ac <_svfiprintf_r+0xa0>
 8012806:	9b03      	ldr	r3, [sp, #12]
 8012808:	1d19      	adds	r1, r3, #4
 801280a:	681b      	ldr	r3, [r3, #0]
 801280c:	9103      	str	r1, [sp, #12]
 801280e:	2b00      	cmp	r3, #0
 8012810:	bfbb      	ittet	lt
 8012812:	425b      	neglt	r3, r3
 8012814:	f042 0202 	orrlt.w	r2, r2, #2
 8012818:	9307      	strge	r3, [sp, #28]
 801281a:	9307      	strlt	r3, [sp, #28]
 801281c:	bfb8      	it	lt
 801281e:	9204      	strlt	r2, [sp, #16]
 8012820:	7823      	ldrb	r3, [r4, #0]
 8012822:	2b2e      	cmp	r3, #46	@ 0x2e
 8012824:	d10a      	bne.n	801283c <_svfiprintf_r+0x130>
 8012826:	7863      	ldrb	r3, [r4, #1]
 8012828:	2b2a      	cmp	r3, #42	@ 0x2a
 801282a:	d132      	bne.n	8012892 <_svfiprintf_r+0x186>
 801282c:	9b03      	ldr	r3, [sp, #12]
 801282e:	1d1a      	adds	r2, r3, #4
 8012830:	681b      	ldr	r3, [r3, #0]
 8012832:	9203      	str	r2, [sp, #12]
 8012834:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012838:	3402      	adds	r4, #2
 801283a:	9305      	str	r3, [sp, #20]
 801283c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012900 <_svfiprintf_r+0x1f4>
 8012840:	7821      	ldrb	r1, [r4, #0]
 8012842:	2203      	movs	r2, #3
 8012844:	4650      	mov	r0, sl
 8012846:	f7ed fceb 	bl	8000220 <memchr>
 801284a:	b138      	cbz	r0, 801285c <_svfiprintf_r+0x150>
 801284c:	9b04      	ldr	r3, [sp, #16]
 801284e:	eba0 000a 	sub.w	r0, r0, sl
 8012852:	2240      	movs	r2, #64	@ 0x40
 8012854:	4082      	lsls	r2, r0
 8012856:	4313      	orrs	r3, r2
 8012858:	3401      	adds	r4, #1
 801285a:	9304      	str	r3, [sp, #16]
 801285c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012860:	4824      	ldr	r0, [pc, #144]	@ (80128f4 <_svfiprintf_r+0x1e8>)
 8012862:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012866:	2206      	movs	r2, #6
 8012868:	f7ed fcda 	bl	8000220 <memchr>
 801286c:	2800      	cmp	r0, #0
 801286e:	d036      	beq.n	80128de <_svfiprintf_r+0x1d2>
 8012870:	4b21      	ldr	r3, [pc, #132]	@ (80128f8 <_svfiprintf_r+0x1ec>)
 8012872:	bb1b      	cbnz	r3, 80128bc <_svfiprintf_r+0x1b0>
 8012874:	9b03      	ldr	r3, [sp, #12]
 8012876:	3307      	adds	r3, #7
 8012878:	f023 0307 	bic.w	r3, r3, #7
 801287c:	3308      	adds	r3, #8
 801287e:	9303      	str	r3, [sp, #12]
 8012880:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012882:	4433      	add	r3, r6
 8012884:	9309      	str	r3, [sp, #36]	@ 0x24
 8012886:	e76a      	b.n	801275e <_svfiprintf_r+0x52>
 8012888:	fb0c 3202 	mla	r2, ip, r2, r3
 801288c:	460c      	mov	r4, r1
 801288e:	2001      	movs	r0, #1
 8012890:	e7a8      	b.n	80127e4 <_svfiprintf_r+0xd8>
 8012892:	2300      	movs	r3, #0
 8012894:	3401      	adds	r4, #1
 8012896:	9305      	str	r3, [sp, #20]
 8012898:	4619      	mov	r1, r3
 801289a:	f04f 0c0a 	mov.w	ip, #10
 801289e:	4620      	mov	r0, r4
 80128a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80128a4:	3a30      	subs	r2, #48	@ 0x30
 80128a6:	2a09      	cmp	r2, #9
 80128a8:	d903      	bls.n	80128b2 <_svfiprintf_r+0x1a6>
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d0c6      	beq.n	801283c <_svfiprintf_r+0x130>
 80128ae:	9105      	str	r1, [sp, #20]
 80128b0:	e7c4      	b.n	801283c <_svfiprintf_r+0x130>
 80128b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80128b6:	4604      	mov	r4, r0
 80128b8:	2301      	movs	r3, #1
 80128ba:	e7f0      	b.n	801289e <_svfiprintf_r+0x192>
 80128bc:	ab03      	add	r3, sp, #12
 80128be:	9300      	str	r3, [sp, #0]
 80128c0:	462a      	mov	r2, r5
 80128c2:	4b0e      	ldr	r3, [pc, #56]	@ (80128fc <_svfiprintf_r+0x1f0>)
 80128c4:	a904      	add	r1, sp, #16
 80128c6:	4638      	mov	r0, r7
 80128c8:	f7fc fcc8 	bl	800f25c <_printf_float>
 80128cc:	1c42      	adds	r2, r0, #1
 80128ce:	4606      	mov	r6, r0
 80128d0:	d1d6      	bne.n	8012880 <_svfiprintf_r+0x174>
 80128d2:	89ab      	ldrh	r3, [r5, #12]
 80128d4:	065b      	lsls	r3, r3, #25
 80128d6:	f53f af2d 	bmi.w	8012734 <_svfiprintf_r+0x28>
 80128da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80128dc:	e72c      	b.n	8012738 <_svfiprintf_r+0x2c>
 80128de:	ab03      	add	r3, sp, #12
 80128e0:	9300      	str	r3, [sp, #0]
 80128e2:	462a      	mov	r2, r5
 80128e4:	4b05      	ldr	r3, [pc, #20]	@ (80128fc <_svfiprintf_r+0x1f0>)
 80128e6:	a904      	add	r1, sp, #16
 80128e8:	4638      	mov	r0, r7
 80128ea:	f7fc ff4f 	bl	800f78c <_printf_i>
 80128ee:	e7ed      	b.n	80128cc <_svfiprintf_r+0x1c0>
 80128f0:	08013bf9 	.word	0x08013bf9
 80128f4:	08013c03 	.word	0x08013c03
 80128f8:	0800f25d 	.word	0x0800f25d
 80128fc:	08012655 	.word	0x08012655
 8012900:	08013bff 	.word	0x08013bff

08012904 <__sflush_r>:
 8012904:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801290c:	0716      	lsls	r6, r2, #28
 801290e:	4605      	mov	r5, r0
 8012910:	460c      	mov	r4, r1
 8012912:	d454      	bmi.n	80129be <__sflush_r+0xba>
 8012914:	684b      	ldr	r3, [r1, #4]
 8012916:	2b00      	cmp	r3, #0
 8012918:	dc02      	bgt.n	8012920 <__sflush_r+0x1c>
 801291a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801291c:	2b00      	cmp	r3, #0
 801291e:	dd48      	ble.n	80129b2 <__sflush_r+0xae>
 8012920:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012922:	2e00      	cmp	r6, #0
 8012924:	d045      	beq.n	80129b2 <__sflush_r+0xae>
 8012926:	2300      	movs	r3, #0
 8012928:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801292c:	682f      	ldr	r7, [r5, #0]
 801292e:	6a21      	ldr	r1, [r4, #32]
 8012930:	602b      	str	r3, [r5, #0]
 8012932:	d030      	beq.n	8012996 <__sflush_r+0x92>
 8012934:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012936:	89a3      	ldrh	r3, [r4, #12]
 8012938:	0759      	lsls	r1, r3, #29
 801293a:	d505      	bpl.n	8012948 <__sflush_r+0x44>
 801293c:	6863      	ldr	r3, [r4, #4]
 801293e:	1ad2      	subs	r2, r2, r3
 8012940:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012942:	b10b      	cbz	r3, 8012948 <__sflush_r+0x44>
 8012944:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012946:	1ad2      	subs	r2, r2, r3
 8012948:	2300      	movs	r3, #0
 801294a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801294c:	6a21      	ldr	r1, [r4, #32]
 801294e:	4628      	mov	r0, r5
 8012950:	47b0      	blx	r6
 8012952:	1c43      	adds	r3, r0, #1
 8012954:	89a3      	ldrh	r3, [r4, #12]
 8012956:	d106      	bne.n	8012966 <__sflush_r+0x62>
 8012958:	6829      	ldr	r1, [r5, #0]
 801295a:	291d      	cmp	r1, #29
 801295c:	d82b      	bhi.n	80129b6 <__sflush_r+0xb2>
 801295e:	4a2a      	ldr	r2, [pc, #168]	@ (8012a08 <__sflush_r+0x104>)
 8012960:	410a      	asrs	r2, r1
 8012962:	07d6      	lsls	r6, r2, #31
 8012964:	d427      	bmi.n	80129b6 <__sflush_r+0xb2>
 8012966:	2200      	movs	r2, #0
 8012968:	6062      	str	r2, [r4, #4]
 801296a:	04d9      	lsls	r1, r3, #19
 801296c:	6922      	ldr	r2, [r4, #16]
 801296e:	6022      	str	r2, [r4, #0]
 8012970:	d504      	bpl.n	801297c <__sflush_r+0x78>
 8012972:	1c42      	adds	r2, r0, #1
 8012974:	d101      	bne.n	801297a <__sflush_r+0x76>
 8012976:	682b      	ldr	r3, [r5, #0]
 8012978:	b903      	cbnz	r3, 801297c <__sflush_r+0x78>
 801297a:	6560      	str	r0, [r4, #84]	@ 0x54
 801297c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801297e:	602f      	str	r7, [r5, #0]
 8012980:	b1b9      	cbz	r1, 80129b2 <__sflush_r+0xae>
 8012982:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012986:	4299      	cmp	r1, r3
 8012988:	d002      	beq.n	8012990 <__sflush_r+0x8c>
 801298a:	4628      	mov	r0, r5
 801298c:	f7fe fa2c 	bl	8010de8 <_free_r>
 8012990:	2300      	movs	r3, #0
 8012992:	6363      	str	r3, [r4, #52]	@ 0x34
 8012994:	e00d      	b.n	80129b2 <__sflush_r+0xae>
 8012996:	2301      	movs	r3, #1
 8012998:	4628      	mov	r0, r5
 801299a:	47b0      	blx	r6
 801299c:	4602      	mov	r2, r0
 801299e:	1c50      	adds	r0, r2, #1
 80129a0:	d1c9      	bne.n	8012936 <__sflush_r+0x32>
 80129a2:	682b      	ldr	r3, [r5, #0]
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	d0c6      	beq.n	8012936 <__sflush_r+0x32>
 80129a8:	2b1d      	cmp	r3, #29
 80129aa:	d001      	beq.n	80129b0 <__sflush_r+0xac>
 80129ac:	2b16      	cmp	r3, #22
 80129ae:	d11e      	bne.n	80129ee <__sflush_r+0xea>
 80129b0:	602f      	str	r7, [r5, #0]
 80129b2:	2000      	movs	r0, #0
 80129b4:	e022      	b.n	80129fc <__sflush_r+0xf8>
 80129b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80129ba:	b21b      	sxth	r3, r3
 80129bc:	e01b      	b.n	80129f6 <__sflush_r+0xf2>
 80129be:	690f      	ldr	r7, [r1, #16]
 80129c0:	2f00      	cmp	r7, #0
 80129c2:	d0f6      	beq.n	80129b2 <__sflush_r+0xae>
 80129c4:	0793      	lsls	r3, r2, #30
 80129c6:	680e      	ldr	r6, [r1, #0]
 80129c8:	bf08      	it	eq
 80129ca:	694b      	ldreq	r3, [r1, #20]
 80129cc:	600f      	str	r7, [r1, #0]
 80129ce:	bf18      	it	ne
 80129d0:	2300      	movne	r3, #0
 80129d2:	eba6 0807 	sub.w	r8, r6, r7
 80129d6:	608b      	str	r3, [r1, #8]
 80129d8:	f1b8 0f00 	cmp.w	r8, #0
 80129dc:	dde9      	ble.n	80129b2 <__sflush_r+0xae>
 80129de:	6a21      	ldr	r1, [r4, #32]
 80129e0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80129e2:	4643      	mov	r3, r8
 80129e4:	463a      	mov	r2, r7
 80129e6:	4628      	mov	r0, r5
 80129e8:	47b0      	blx	r6
 80129ea:	2800      	cmp	r0, #0
 80129ec:	dc08      	bgt.n	8012a00 <__sflush_r+0xfc>
 80129ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80129f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80129f6:	81a3      	strh	r3, [r4, #12]
 80129f8:	f04f 30ff 	mov.w	r0, #4294967295
 80129fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a00:	4407      	add	r7, r0
 8012a02:	eba8 0800 	sub.w	r8, r8, r0
 8012a06:	e7e7      	b.n	80129d8 <__sflush_r+0xd4>
 8012a08:	dfbffffe 	.word	0xdfbffffe

08012a0c <_fflush_r>:
 8012a0c:	b538      	push	{r3, r4, r5, lr}
 8012a0e:	690b      	ldr	r3, [r1, #16]
 8012a10:	4605      	mov	r5, r0
 8012a12:	460c      	mov	r4, r1
 8012a14:	b913      	cbnz	r3, 8012a1c <_fflush_r+0x10>
 8012a16:	2500      	movs	r5, #0
 8012a18:	4628      	mov	r0, r5
 8012a1a:	bd38      	pop	{r3, r4, r5, pc}
 8012a1c:	b118      	cbz	r0, 8012a26 <_fflush_r+0x1a>
 8012a1e:	6a03      	ldr	r3, [r0, #32]
 8012a20:	b90b      	cbnz	r3, 8012a26 <_fflush_r+0x1a>
 8012a22:	f7fd fa73 	bl	800ff0c <__sinit>
 8012a26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d0f3      	beq.n	8012a16 <_fflush_r+0xa>
 8012a2e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012a30:	07d0      	lsls	r0, r2, #31
 8012a32:	d404      	bmi.n	8012a3e <_fflush_r+0x32>
 8012a34:	0599      	lsls	r1, r3, #22
 8012a36:	d402      	bmi.n	8012a3e <_fflush_r+0x32>
 8012a38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012a3a:	f7fd fb7e 	bl	801013a <__retarget_lock_acquire_recursive>
 8012a3e:	4628      	mov	r0, r5
 8012a40:	4621      	mov	r1, r4
 8012a42:	f7ff ff5f 	bl	8012904 <__sflush_r>
 8012a46:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012a48:	07da      	lsls	r2, r3, #31
 8012a4a:	4605      	mov	r5, r0
 8012a4c:	d4e4      	bmi.n	8012a18 <_fflush_r+0xc>
 8012a4e:	89a3      	ldrh	r3, [r4, #12]
 8012a50:	059b      	lsls	r3, r3, #22
 8012a52:	d4e1      	bmi.n	8012a18 <_fflush_r+0xc>
 8012a54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012a56:	f7fd fb71 	bl	801013c <__retarget_lock_release_recursive>
 8012a5a:	e7dd      	b.n	8012a18 <_fflush_r+0xc>

08012a5c <memmove>:
 8012a5c:	4288      	cmp	r0, r1
 8012a5e:	b510      	push	{r4, lr}
 8012a60:	eb01 0402 	add.w	r4, r1, r2
 8012a64:	d902      	bls.n	8012a6c <memmove+0x10>
 8012a66:	4284      	cmp	r4, r0
 8012a68:	4623      	mov	r3, r4
 8012a6a:	d807      	bhi.n	8012a7c <memmove+0x20>
 8012a6c:	1e43      	subs	r3, r0, #1
 8012a6e:	42a1      	cmp	r1, r4
 8012a70:	d008      	beq.n	8012a84 <memmove+0x28>
 8012a72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012a76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012a7a:	e7f8      	b.n	8012a6e <memmove+0x12>
 8012a7c:	4402      	add	r2, r0
 8012a7e:	4601      	mov	r1, r0
 8012a80:	428a      	cmp	r2, r1
 8012a82:	d100      	bne.n	8012a86 <memmove+0x2a>
 8012a84:	bd10      	pop	{r4, pc}
 8012a86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012a8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012a8e:	e7f7      	b.n	8012a80 <memmove+0x24>

08012a90 <strncmp>:
 8012a90:	b510      	push	{r4, lr}
 8012a92:	b16a      	cbz	r2, 8012ab0 <strncmp+0x20>
 8012a94:	3901      	subs	r1, #1
 8012a96:	1884      	adds	r4, r0, r2
 8012a98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012a9c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8012aa0:	429a      	cmp	r2, r3
 8012aa2:	d103      	bne.n	8012aac <strncmp+0x1c>
 8012aa4:	42a0      	cmp	r0, r4
 8012aa6:	d001      	beq.n	8012aac <strncmp+0x1c>
 8012aa8:	2a00      	cmp	r2, #0
 8012aaa:	d1f5      	bne.n	8012a98 <strncmp+0x8>
 8012aac:	1ad0      	subs	r0, r2, r3
 8012aae:	bd10      	pop	{r4, pc}
 8012ab0:	4610      	mov	r0, r2
 8012ab2:	e7fc      	b.n	8012aae <strncmp+0x1e>

08012ab4 <_sbrk_r>:
 8012ab4:	b538      	push	{r3, r4, r5, lr}
 8012ab6:	4d06      	ldr	r5, [pc, #24]	@ (8012ad0 <_sbrk_r+0x1c>)
 8012ab8:	2300      	movs	r3, #0
 8012aba:	4604      	mov	r4, r0
 8012abc:	4608      	mov	r0, r1
 8012abe:	602b      	str	r3, [r5, #0]
 8012ac0:	f7ef fcc4 	bl	800244c <_sbrk>
 8012ac4:	1c43      	adds	r3, r0, #1
 8012ac6:	d102      	bne.n	8012ace <_sbrk_r+0x1a>
 8012ac8:	682b      	ldr	r3, [r5, #0]
 8012aca:	b103      	cbz	r3, 8012ace <_sbrk_r+0x1a>
 8012acc:	6023      	str	r3, [r4, #0]
 8012ace:	bd38      	pop	{r3, r4, r5, pc}
 8012ad0:	200038d0 	.word	0x200038d0

08012ad4 <memcpy>:
 8012ad4:	440a      	add	r2, r1
 8012ad6:	4291      	cmp	r1, r2
 8012ad8:	f100 33ff 	add.w	r3, r0, #4294967295
 8012adc:	d100      	bne.n	8012ae0 <memcpy+0xc>
 8012ade:	4770      	bx	lr
 8012ae0:	b510      	push	{r4, lr}
 8012ae2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012ae6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012aea:	4291      	cmp	r1, r2
 8012aec:	d1f9      	bne.n	8012ae2 <memcpy+0xe>
 8012aee:	bd10      	pop	{r4, pc}

08012af0 <nan>:
 8012af0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8012af8 <nan+0x8>
 8012af4:	4770      	bx	lr
 8012af6:	bf00      	nop
 8012af8:	00000000 	.word	0x00000000
 8012afc:	7ff80000 	.word	0x7ff80000

08012b00 <__assert_func>:
 8012b00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012b02:	4614      	mov	r4, r2
 8012b04:	461a      	mov	r2, r3
 8012b06:	4b09      	ldr	r3, [pc, #36]	@ (8012b2c <__assert_func+0x2c>)
 8012b08:	681b      	ldr	r3, [r3, #0]
 8012b0a:	4605      	mov	r5, r0
 8012b0c:	68d8      	ldr	r0, [r3, #12]
 8012b0e:	b954      	cbnz	r4, 8012b26 <__assert_func+0x26>
 8012b10:	4b07      	ldr	r3, [pc, #28]	@ (8012b30 <__assert_func+0x30>)
 8012b12:	461c      	mov	r4, r3
 8012b14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012b18:	9100      	str	r1, [sp, #0]
 8012b1a:	462b      	mov	r3, r5
 8012b1c:	4905      	ldr	r1, [pc, #20]	@ (8012b34 <__assert_func+0x34>)
 8012b1e:	f000 fba7 	bl	8013270 <fiprintf>
 8012b22:	f000 fbb7 	bl	8013294 <abort>
 8012b26:	4b04      	ldr	r3, [pc, #16]	@ (8012b38 <__assert_func+0x38>)
 8012b28:	e7f4      	b.n	8012b14 <__assert_func+0x14>
 8012b2a:	bf00      	nop
 8012b2c:	20000190 	.word	0x20000190
 8012b30:	08013c4d 	.word	0x08013c4d
 8012b34:	08013c1f 	.word	0x08013c1f
 8012b38:	08013c12 	.word	0x08013c12

08012b3c <_calloc_r>:
 8012b3c:	b570      	push	{r4, r5, r6, lr}
 8012b3e:	fba1 5402 	umull	r5, r4, r1, r2
 8012b42:	b93c      	cbnz	r4, 8012b54 <_calloc_r+0x18>
 8012b44:	4629      	mov	r1, r5
 8012b46:	f7fe f9c3 	bl	8010ed0 <_malloc_r>
 8012b4a:	4606      	mov	r6, r0
 8012b4c:	b928      	cbnz	r0, 8012b5a <_calloc_r+0x1e>
 8012b4e:	2600      	movs	r6, #0
 8012b50:	4630      	mov	r0, r6
 8012b52:	bd70      	pop	{r4, r5, r6, pc}
 8012b54:	220c      	movs	r2, #12
 8012b56:	6002      	str	r2, [r0, #0]
 8012b58:	e7f9      	b.n	8012b4e <_calloc_r+0x12>
 8012b5a:	462a      	mov	r2, r5
 8012b5c:	4621      	mov	r1, r4
 8012b5e:	f7fd fa6e 	bl	801003e <memset>
 8012b62:	e7f5      	b.n	8012b50 <_calloc_r+0x14>

08012b64 <rshift>:
 8012b64:	6903      	ldr	r3, [r0, #16]
 8012b66:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8012b6a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012b6e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8012b72:	f100 0414 	add.w	r4, r0, #20
 8012b76:	dd45      	ble.n	8012c04 <rshift+0xa0>
 8012b78:	f011 011f 	ands.w	r1, r1, #31
 8012b7c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8012b80:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8012b84:	d10c      	bne.n	8012ba0 <rshift+0x3c>
 8012b86:	f100 0710 	add.w	r7, r0, #16
 8012b8a:	4629      	mov	r1, r5
 8012b8c:	42b1      	cmp	r1, r6
 8012b8e:	d334      	bcc.n	8012bfa <rshift+0x96>
 8012b90:	1a9b      	subs	r3, r3, r2
 8012b92:	009b      	lsls	r3, r3, #2
 8012b94:	1eea      	subs	r2, r5, #3
 8012b96:	4296      	cmp	r6, r2
 8012b98:	bf38      	it	cc
 8012b9a:	2300      	movcc	r3, #0
 8012b9c:	4423      	add	r3, r4
 8012b9e:	e015      	b.n	8012bcc <rshift+0x68>
 8012ba0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8012ba4:	f1c1 0820 	rsb	r8, r1, #32
 8012ba8:	40cf      	lsrs	r7, r1
 8012baa:	f105 0e04 	add.w	lr, r5, #4
 8012bae:	46a1      	mov	r9, r4
 8012bb0:	4576      	cmp	r6, lr
 8012bb2:	46f4      	mov	ip, lr
 8012bb4:	d815      	bhi.n	8012be2 <rshift+0x7e>
 8012bb6:	1a9a      	subs	r2, r3, r2
 8012bb8:	0092      	lsls	r2, r2, #2
 8012bba:	3a04      	subs	r2, #4
 8012bbc:	3501      	adds	r5, #1
 8012bbe:	42ae      	cmp	r6, r5
 8012bc0:	bf38      	it	cc
 8012bc2:	2200      	movcc	r2, #0
 8012bc4:	18a3      	adds	r3, r4, r2
 8012bc6:	50a7      	str	r7, [r4, r2]
 8012bc8:	b107      	cbz	r7, 8012bcc <rshift+0x68>
 8012bca:	3304      	adds	r3, #4
 8012bcc:	1b1a      	subs	r2, r3, r4
 8012bce:	42a3      	cmp	r3, r4
 8012bd0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8012bd4:	bf08      	it	eq
 8012bd6:	2300      	moveq	r3, #0
 8012bd8:	6102      	str	r2, [r0, #16]
 8012bda:	bf08      	it	eq
 8012bdc:	6143      	streq	r3, [r0, #20]
 8012bde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012be2:	f8dc c000 	ldr.w	ip, [ip]
 8012be6:	fa0c fc08 	lsl.w	ip, ip, r8
 8012bea:	ea4c 0707 	orr.w	r7, ip, r7
 8012bee:	f849 7b04 	str.w	r7, [r9], #4
 8012bf2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012bf6:	40cf      	lsrs	r7, r1
 8012bf8:	e7da      	b.n	8012bb0 <rshift+0x4c>
 8012bfa:	f851 cb04 	ldr.w	ip, [r1], #4
 8012bfe:	f847 cf04 	str.w	ip, [r7, #4]!
 8012c02:	e7c3      	b.n	8012b8c <rshift+0x28>
 8012c04:	4623      	mov	r3, r4
 8012c06:	e7e1      	b.n	8012bcc <rshift+0x68>

08012c08 <__hexdig_fun>:
 8012c08:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8012c0c:	2b09      	cmp	r3, #9
 8012c0e:	d802      	bhi.n	8012c16 <__hexdig_fun+0xe>
 8012c10:	3820      	subs	r0, #32
 8012c12:	b2c0      	uxtb	r0, r0
 8012c14:	4770      	bx	lr
 8012c16:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8012c1a:	2b05      	cmp	r3, #5
 8012c1c:	d801      	bhi.n	8012c22 <__hexdig_fun+0x1a>
 8012c1e:	3847      	subs	r0, #71	@ 0x47
 8012c20:	e7f7      	b.n	8012c12 <__hexdig_fun+0xa>
 8012c22:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8012c26:	2b05      	cmp	r3, #5
 8012c28:	d801      	bhi.n	8012c2e <__hexdig_fun+0x26>
 8012c2a:	3827      	subs	r0, #39	@ 0x27
 8012c2c:	e7f1      	b.n	8012c12 <__hexdig_fun+0xa>
 8012c2e:	2000      	movs	r0, #0
 8012c30:	4770      	bx	lr
	...

08012c34 <__gethex>:
 8012c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c38:	b085      	sub	sp, #20
 8012c3a:	468a      	mov	sl, r1
 8012c3c:	9302      	str	r3, [sp, #8]
 8012c3e:	680b      	ldr	r3, [r1, #0]
 8012c40:	9001      	str	r0, [sp, #4]
 8012c42:	4690      	mov	r8, r2
 8012c44:	1c9c      	adds	r4, r3, #2
 8012c46:	46a1      	mov	r9, r4
 8012c48:	f814 0b01 	ldrb.w	r0, [r4], #1
 8012c4c:	2830      	cmp	r0, #48	@ 0x30
 8012c4e:	d0fa      	beq.n	8012c46 <__gethex+0x12>
 8012c50:	eba9 0303 	sub.w	r3, r9, r3
 8012c54:	f1a3 0b02 	sub.w	fp, r3, #2
 8012c58:	f7ff ffd6 	bl	8012c08 <__hexdig_fun>
 8012c5c:	4605      	mov	r5, r0
 8012c5e:	2800      	cmp	r0, #0
 8012c60:	d168      	bne.n	8012d34 <__gethex+0x100>
 8012c62:	49a0      	ldr	r1, [pc, #640]	@ (8012ee4 <__gethex+0x2b0>)
 8012c64:	2201      	movs	r2, #1
 8012c66:	4648      	mov	r0, r9
 8012c68:	f7ff ff12 	bl	8012a90 <strncmp>
 8012c6c:	4607      	mov	r7, r0
 8012c6e:	2800      	cmp	r0, #0
 8012c70:	d167      	bne.n	8012d42 <__gethex+0x10e>
 8012c72:	f899 0001 	ldrb.w	r0, [r9, #1]
 8012c76:	4626      	mov	r6, r4
 8012c78:	f7ff ffc6 	bl	8012c08 <__hexdig_fun>
 8012c7c:	2800      	cmp	r0, #0
 8012c7e:	d062      	beq.n	8012d46 <__gethex+0x112>
 8012c80:	4623      	mov	r3, r4
 8012c82:	7818      	ldrb	r0, [r3, #0]
 8012c84:	2830      	cmp	r0, #48	@ 0x30
 8012c86:	4699      	mov	r9, r3
 8012c88:	f103 0301 	add.w	r3, r3, #1
 8012c8c:	d0f9      	beq.n	8012c82 <__gethex+0x4e>
 8012c8e:	f7ff ffbb 	bl	8012c08 <__hexdig_fun>
 8012c92:	fab0 f580 	clz	r5, r0
 8012c96:	096d      	lsrs	r5, r5, #5
 8012c98:	f04f 0b01 	mov.w	fp, #1
 8012c9c:	464a      	mov	r2, r9
 8012c9e:	4616      	mov	r6, r2
 8012ca0:	3201      	adds	r2, #1
 8012ca2:	7830      	ldrb	r0, [r6, #0]
 8012ca4:	f7ff ffb0 	bl	8012c08 <__hexdig_fun>
 8012ca8:	2800      	cmp	r0, #0
 8012caa:	d1f8      	bne.n	8012c9e <__gethex+0x6a>
 8012cac:	498d      	ldr	r1, [pc, #564]	@ (8012ee4 <__gethex+0x2b0>)
 8012cae:	2201      	movs	r2, #1
 8012cb0:	4630      	mov	r0, r6
 8012cb2:	f7ff feed 	bl	8012a90 <strncmp>
 8012cb6:	2800      	cmp	r0, #0
 8012cb8:	d13f      	bne.n	8012d3a <__gethex+0x106>
 8012cba:	b944      	cbnz	r4, 8012cce <__gethex+0x9a>
 8012cbc:	1c74      	adds	r4, r6, #1
 8012cbe:	4622      	mov	r2, r4
 8012cc0:	4616      	mov	r6, r2
 8012cc2:	3201      	adds	r2, #1
 8012cc4:	7830      	ldrb	r0, [r6, #0]
 8012cc6:	f7ff ff9f 	bl	8012c08 <__hexdig_fun>
 8012cca:	2800      	cmp	r0, #0
 8012ccc:	d1f8      	bne.n	8012cc0 <__gethex+0x8c>
 8012cce:	1ba4      	subs	r4, r4, r6
 8012cd0:	00a7      	lsls	r7, r4, #2
 8012cd2:	7833      	ldrb	r3, [r6, #0]
 8012cd4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8012cd8:	2b50      	cmp	r3, #80	@ 0x50
 8012cda:	d13e      	bne.n	8012d5a <__gethex+0x126>
 8012cdc:	7873      	ldrb	r3, [r6, #1]
 8012cde:	2b2b      	cmp	r3, #43	@ 0x2b
 8012ce0:	d033      	beq.n	8012d4a <__gethex+0x116>
 8012ce2:	2b2d      	cmp	r3, #45	@ 0x2d
 8012ce4:	d034      	beq.n	8012d50 <__gethex+0x11c>
 8012ce6:	1c71      	adds	r1, r6, #1
 8012ce8:	2400      	movs	r4, #0
 8012cea:	7808      	ldrb	r0, [r1, #0]
 8012cec:	f7ff ff8c 	bl	8012c08 <__hexdig_fun>
 8012cf0:	1e43      	subs	r3, r0, #1
 8012cf2:	b2db      	uxtb	r3, r3
 8012cf4:	2b18      	cmp	r3, #24
 8012cf6:	d830      	bhi.n	8012d5a <__gethex+0x126>
 8012cf8:	f1a0 0210 	sub.w	r2, r0, #16
 8012cfc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012d00:	f7ff ff82 	bl	8012c08 <__hexdig_fun>
 8012d04:	f100 3cff 	add.w	ip, r0, #4294967295
 8012d08:	fa5f fc8c 	uxtb.w	ip, ip
 8012d0c:	f1bc 0f18 	cmp.w	ip, #24
 8012d10:	f04f 030a 	mov.w	r3, #10
 8012d14:	d91e      	bls.n	8012d54 <__gethex+0x120>
 8012d16:	b104      	cbz	r4, 8012d1a <__gethex+0xe6>
 8012d18:	4252      	negs	r2, r2
 8012d1a:	4417      	add	r7, r2
 8012d1c:	f8ca 1000 	str.w	r1, [sl]
 8012d20:	b1ed      	cbz	r5, 8012d5e <__gethex+0x12a>
 8012d22:	f1bb 0f00 	cmp.w	fp, #0
 8012d26:	bf0c      	ite	eq
 8012d28:	2506      	moveq	r5, #6
 8012d2a:	2500      	movne	r5, #0
 8012d2c:	4628      	mov	r0, r5
 8012d2e:	b005      	add	sp, #20
 8012d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d34:	2500      	movs	r5, #0
 8012d36:	462c      	mov	r4, r5
 8012d38:	e7b0      	b.n	8012c9c <__gethex+0x68>
 8012d3a:	2c00      	cmp	r4, #0
 8012d3c:	d1c7      	bne.n	8012cce <__gethex+0x9a>
 8012d3e:	4627      	mov	r7, r4
 8012d40:	e7c7      	b.n	8012cd2 <__gethex+0x9e>
 8012d42:	464e      	mov	r6, r9
 8012d44:	462f      	mov	r7, r5
 8012d46:	2501      	movs	r5, #1
 8012d48:	e7c3      	b.n	8012cd2 <__gethex+0x9e>
 8012d4a:	2400      	movs	r4, #0
 8012d4c:	1cb1      	adds	r1, r6, #2
 8012d4e:	e7cc      	b.n	8012cea <__gethex+0xb6>
 8012d50:	2401      	movs	r4, #1
 8012d52:	e7fb      	b.n	8012d4c <__gethex+0x118>
 8012d54:	fb03 0002 	mla	r0, r3, r2, r0
 8012d58:	e7ce      	b.n	8012cf8 <__gethex+0xc4>
 8012d5a:	4631      	mov	r1, r6
 8012d5c:	e7de      	b.n	8012d1c <__gethex+0xe8>
 8012d5e:	eba6 0309 	sub.w	r3, r6, r9
 8012d62:	3b01      	subs	r3, #1
 8012d64:	4629      	mov	r1, r5
 8012d66:	2b07      	cmp	r3, #7
 8012d68:	dc0a      	bgt.n	8012d80 <__gethex+0x14c>
 8012d6a:	9801      	ldr	r0, [sp, #4]
 8012d6c:	f7fe f93c 	bl	8010fe8 <_Balloc>
 8012d70:	4604      	mov	r4, r0
 8012d72:	b940      	cbnz	r0, 8012d86 <__gethex+0x152>
 8012d74:	4b5c      	ldr	r3, [pc, #368]	@ (8012ee8 <__gethex+0x2b4>)
 8012d76:	4602      	mov	r2, r0
 8012d78:	21e4      	movs	r1, #228	@ 0xe4
 8012d7a:	485c      	ldr	r0, [pc, #368]	@ (8012eec <__gethex+0x2b8>)
 8012d7c:	f7ff fec0 	bl	8012b00 <__assert_func>
 8012d80:	3101      	adds	r1, #1
 8012d82:	105b      	asrs	r3, r3, #1
 8012d84:	e7ef      	b.n	8012d66 <__gethex+0x132>
 8012d86:	f100 0a14 	add.w	sl, r0, #20
 8012d8a:	2300      	movs	r3, #0
 8012d8c:	4655      	mov	r5, sl
 8012d8e:	469b      	mov	fp, r3
 8012d90:	45b1      	cmp	r9, r6
 8012d92:	d337      	bcc.n	8012e04 <__gethex+0x1d0>
 8012d94:	f845 bb04 	str.w	fp, [r5], #4
 8012d98:	eba5 050a 	sub.w	r5, r5, sl
 8012d9c:	10ad      	asrs	r5, r5, #2
 8012d9e:	6125      	str	r5, [r4, #16]
 8012da0:	4658      	mov	r0, fp
 8012da2:	f7fe fa13 	bl	80111cc <__hi0bits>
 8012da6:	016d      	lsls	r5, r5, #5
 8012da8:	f8d8 6000 	ldr.w	r6, [r8]
 8012dac:	1a2d      	subs	r5, r5, r0
 8012dae:	42b5      	cmp	r5, r6
 8012db0:	dd54      	ble.n	8012e5c <__gethex+0x228>
 8012db2:	1bad      	subs	r5, r5, r6
 8012db4:	4629      	mov	r1, r5
 8012db6:	4620      	mov	r0, r4
 8012db8:	f7fe fda7 	bl	801190a <__any_on>
 8012dbc:	4681      	mov	r9, r0
 8012dbe:	b178      	cbz	r0, 8012de0 <__gethex+0x1ac>
 8012dc0:	1e6b      	subs	r3, r5, #1
 8012dc2:	1159      	asrs	r1, r3, #5
 8012dc4:	f003 021f 	and.w	r2, r3, #31
 8012dc8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8012dcc:	f04f 0901 	mov.w	r9, #1
 8012dd0:	fa09 f202 	lsl.w	r2, r9, r2
 8012dd4:	420a      	tst	r2, r1
 8012dd6:	d003      	beq.n	8012de0 <__gethex+0x1ac>
 8012dd8:	454b      	cmp	r3, r9
 8012dda:	dc36      	bgt.n	8012e4a <__gethex+0x216>
 8012ddc:	f04f 0902 	mov.w	r9, #2
 8012de0:	4629      	mov	r1, r5
 8012de2:	4620      	mov	r0, r4
 8012de4:	f7ff febe 	bl	8012b64 <rshift>
 8012de8:	442f      	add	r7, r5
 8012dea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012dee:	42bb      	cmp	r3, r7
 8012df0:	da42      	bge.n	8012e78 <__gethex+0x244>
 8012df2:	9801      	ldr	r0, [sp, #4]
 8012df4:	4621      	mov	r1, r4
 8012df6:	f7fe f937 	bl	8011068 <_Bfree>
 8012dfa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012dfc:	2300      	movs	r3, #0
 8012dfe:	6013      	str	r3, [r2, #0]
 8012e00:	25a3      	movs	r5, #163	@ 0xa3
 8012e02:	e793      	b.n	8012d2c <__gethex+0xf8>
 8012e04:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8012e08:	2a2e      	cmp	r2, #46	@ 0x2e
 8012e0a:	d012      	beq.n	8012e32 <__gethex+0x1fe>
 8012e0c:	2b20      	cmp	r3, #32
 8012e0e:	d104      	bne.n	8012e1a <__gethex+0x1e6>
 8012e10:	f845 bb04 	str.w	fp, [r5], #4
 8012e14:	f04f 0b00 	mov.w	fp, #0
 8012e18:	465b      	mov	r3, fp
 8012e1a:	7830      	ldrb	r0, [r6, #0]
 8012e1c:	9303      	str	r3, [sp, #12]
 8012e1e:	f7ff fef3 	bl	8012c08 <__hexdig_fun>
 8012e22:	9b03      	ldr	r3, [sp, #12]
 8012e24:	f000 000f 	and.w	r0, r0, #15
 8012e28:	4098      	lsls	r0, r3
 8012e2a:	ea4b 0b00 	orr.w	fp, fp, r0
 8012e2e:	3304      	adds	r3, #4
 8012e30:	e7ae      	b.n	8012d90 <__gethex+0x15c>
 8012e32:	45b1      	cmp	r9, r6
 8012e34:	d8ea      	bhi.n	8012e0c <__gethex+0x1d8>
 8012e36:	492b      	ldr	r1, [pc, #172]	@ (8012ee4 <__gethex+0x2b0>)
 8012e38:	9303      	str	r3, [sp, #12]
 8012e3a:	2201      	movs	r2, #1
 8012e3c:	4630      	mov	r0, r6
 8012e3e:	f7ff fe27 	bl	8012a90 <strncmp>
 8012e42:	9b03      	ldr	r3, [sp, #12]
 8012e44:	2800      	cmp	r0, #0
 8012e46:	d1e1      	bne.n	8012e0c <__gethex+0x1d8>
 8012e48:	e7a2      	b.n	8012d90 <__gethex+0x15c>
 8012e4a:	1ea9      	subs	r1, r5, #2
 8012e4c:	4620      	mov	r0, r4
 8012e4e:	f7fe fd5c 	bl	801190a <__any_on>
 8012e52:	2800      	cmp	r0, #0
 8012e54:	d0c2      	beq.n	8012ddc <__gethex+0x1a8>
 8012e56:	f04f 0903 	mov.w	r9, #3
 8012e5a:	e7c1      	b.n	8012de0 <__gethex+0x1ac>
 8012e5c:	da09      	bge.n	8012e72 <__gethex+0x23e>
 8012e5e:	1b75      	subs	r5, r6, r5
 8012e60:	4621      	mov	r1, r4
 8012e62:	9801      	ldr	r0, [sp, #4]
 8012e64:	462a      	mov	r2, r5
 8012e66:	f7fe fb17 	bl	8011498 <__lshift>
 8012e6a:	1b7f      	subs	r7, r7, r5
 8012e6c:	4604      	mov	r4, r0
 8012e6e:	f100 0a14 	add.w	sl, r0, #20
 8012e72:	f04f 0900 	mov.w	r9, #0
 8012e76:	e7b8      	b.n	8012dea <__gethex+0x1b6>
 8012e78:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8012e7c:	42bd      	cmp	r5, r7
 8012e7e:	dd6f      	ble.n	8012f60 <__gethex+0x32c>
 8012e80:	1bed      	subs	r5, r5, r7
 8012e82:	42ae      	cmp	r6, r5
 8012e84:	dc34      	bgt.n	8012ef0 <__gethex+0x2bc>
 8012e86:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012e8a:	2b02      	cmp	r3, #2
 8012e8c:	d022      	beq.n	8012ed4 <__gethex+0x2a0>
 8012e8e:	2b03      	cmp	r3, #3
 8012e90:	d024      	beq.n	8012edc <__gethex+0x2a8>
 8012e92:	2b01      	cmp	r3, #1
 8012e94:	d115      	bne.n	8012ec2 <__gethex+0x28e>
 8012e96:	42ae      	cmp	r6, r5
 8012e98:	d113      	bne.n	8012ec2 <__gethex+0x28e>
 8012e9a:	2e01      	cmp	r6, #1
 8012e9c:	d10b      	bne.n	8012eb6 <__gethex+0x282>
 8012e9e:	9a02      	ldr	r2, [sp, #8]
 8012ea0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012ea4:	6013      	str	r3, [r2, #0]
 8012ea6:	2301      	movs	r3, #1
 8012ea8:	6123      	str	r3, [r4, #16]
 8012eaa:	f8ca 3000 	str.w	r3, [sl]
 8012eae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012eb0:	2562      	movs	r5, #98	@ 0x62
 8012eb2:	601c      	str	r4, [r3, #0]
 8012eb4:	e73a      	b.n	8012d2c <__gethex+0xf8>
 8012eb6:	1e71      	subs	r1, r6, #1
 8012eb8:	4620      	mov	r0, r4
 8012eba:	f7fe fd26 	bl	801190a <__any_on>
 8012ebe:	2800      	cmp	r0, #0
 8012ec0:	d1ed      	bne.n	8012e9e <__gethex+0x26a>
 8012ec2:	9801      	ldr	r0, [sp, #4]
 8012ec4:	4621      	mov	r1, r4
 8012ec6:	f7fe f8cf 	bl	8011068 <_Bfree>
 8012eca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012ecc:	2300      	movs	r3, #0
 8012ece:	6013      	str	r3, [r2, #0]
 8012ed0:	2550      	movs	r5, #80	@ 0x50
 8012ed2:	e72b      	b.n	8012d2c <__gethex+0xf8>
 8012ed4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	d1f3      	bne.n	8012ec2 <__gethex+0x28e>
 8012eda:	e7e0      	b.n	8012e9e <__gethex+0x26a>
 8012edc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	d1dd      	bne.n	8012e9e <__gethex+0x26a>
 8012ee2:	e7ee      	b.n	8012ec2 <__gethex+0x28e>
 8012ee4:	08013aa0 	.word	0x08013aa0
 8012ee8:	08013939 	.word	0x08013939
 8012eec:	08013c4e 	.word	0x08013c4e
 8012ef0:	1e6f      	subs	r7, r5, #1
 8012ef2:	f1b9 0f00 	cmp.w	r9, #0
 8012ef6:	d130      	bne.n	8012f5a <__gethex+0x326>
 8012ef8:	b127      	cbz	r7, 8012f04 <__gethex+0x2d0>
 8012efa:	4639      	mov	r1, r7
 8012efc:	4620      	mov	r0, r4
 8012efe:	f7fe fd04 	bl	801190a <__any_on>
 8012f02:	4681      	mov	r9, r0
 8012f04:	117a      	asrs	r2, r7, #5
 8012f06:	2301      	movs	r3, #1
 8012f08:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8012f0c:	f007 071f 	and.w	r7, r7, #31
 8012f10:	40bb      	lsls	r3, r7
 8012f12:	4213      	tst	r3, r2
 8012f14:	4629      	mov	r1, r5
 8012f16:	4620      	mov	r0, r4
 8012f18:	bf18      	it	ne
 8012f1a:	f049 0902 	orrne.w	r9, r9, #2
 8012f1e:	f7ff fe21 	bl	8012b64 <rshift>
 8012f22:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8012f26:	1b76      	subs	r6, r6, r5
 8012f28:	2502      	movs	r5, #2
 8012f2a:	f1b9 0f00 	cmp.w	r9, #0
 8012f2e:	d047      	beq.n	8012fc0 <__gethex+0x38c>
 8012f30:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012f34:	2b02      	cmp	r3, #2
 8012f36:	d015      	beq.n	8012f64 <__gethex+0x330>
 8012f38:	2b03      	cmp	r3, #3
 8012f3a:	d017      	beq.n	8012f6c <__gethex+0x338>
 8012f3c:	2b01      	cmp	r3, #1
 8012f3e:	d109      	bne.n	8012f54 <__gethex+0x320>
 8012f40:	f019 0f02 	tst.w	r9, #2
 8012f44:	d006      	beq.n	8012f54 <__gethex+0x320>
 8012f46:	f8da 3000 	ldr.w	r3, [sl]
 8012f4a:	ea49 0903 	orr.w	r9, r9, r3
 8012f4e:	f019 0f01 	tst.w	r9, #1
 8012f52:	d10e      	bne.n	8012f72 <__gethex+0x33e>
 8012f54:	f045 0510 	orr.w	r5, r5, #16
 8012f58:	e032      	b.n	8012fc0 <__gethex+0x38c>
 8012f5a:	f04f 0901 	mov.w	r9, #1
 8012f5e:	e7d1      	b.n	8012f04 <__gethex+0x2d0>
 8012f60:	2501      	movs	r5, #1
 8012f62:	e7e2      	b.n	8012f2a <__gethex+0x2f6>
 8012f64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012f66:	f1c3 0301 	rsb	r3, r3, #1
 8012f6a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012f6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d0f0      	beq.n	8012f54 <__gethex+0x320>
 8012f72:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8012f76:	f104 0314 	add.w	r3, r4, #20
 8012f7a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8012f7e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8012f82:	f04f 0c00 	mov.w	ip, #0
 8012f86:	4618      	mov	r0, r3
 8012f88:	f853 2b04 	ldr.w	r2, [r3], #4
 8012f8c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8012f90:	d01b      	beq.n	8012fca <__gethex+0x396>
 8012f92:	3201      	adds	r2, #1
 8012f94:	6002      	str	r2, [r0, #0]
 8012f96:	2d02      	cmp	r5, #2
 8012f98:	f104 0314 	add.w	r3, r4, #20
 8012f9c:	d13c      	bne.n	8013018 <__gethex+0x3e4>
 8012f9e:	f8d8 2000 	ldr.w	r2, [r8]
 8012fa2:	3a01      	subs	r2, #1
 8012fa4:	42b2      	cmp	r2, r6
 8012fa6:	d109      	bne.n	8012fbc <__gethex+0x388>
 8012fa8:	1171      	asrs	r1, r6, #5
 8012faa:	2201      	movs	r2, #1
 8012fac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012fb0:	f006 061f 	and.w	r6, r6, #31
 8012fb4:	fa02 f606 	lsl.w	r6, r2, r6
 8012fb8:	421e      	tst	r6, r3
 8012fba:	d13a      	bne.n	8013032 <__gethex+0x3fe>
 8012fbc:	f045 0520 	orr.w	r5, r5, #32
 8012fc0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012fc2:	601c      	str	r4, [r3, #0]
 8012fc4:	9b02      	ldr	r3, [sp, #8]
 8012fc6:	601f      	str	r7, [r3, #0]
 8012fc8:	e6b0      	b.n	8012d2c <__gethex+0xf8>
 8012fca:	4299      	cmp	r1, r3
 8012fcc:	f843 cc04 	str.w	ip, [r3, #-4]
 8012fd0:	d8d9      	bhi.n	8012f86 <__gethex+0x352>
 8012fd2:	68a3      	ldr	r3, [r4, #8]
 8012fd4:	459b      	cmp	fp, r3
 8012fd6:	db17      	blt.n	8013008 <__gethex+0x3d4>
 8012fd8:	6861      	ldr	r1, [r4, #4]
 8012fda:	9801      	ldr	r0, [sp, #4]
 8012fdc:	3101      	adds	r1, #1
 8012fde:	f7fe f803 	bl	8010fe8 <_Balloc>
 8012fe2:	4681      	mov	r9, r0
 8012fe4:	b918      	cbnz	r0, 8012fee <__gethex+0x3ba>
 8012fe6:	4b1a      	ldr	r3, [pc, #104]	@ (8013050 <__gethex+0x41c>)
 8012fe8:	4602      	mov	r2, r0
 8012fea:	2184      	movs	r1, #132	@ 0x84
 8012fec:	e6c5      	b.n	8012d7a <__gethex+0x146>
 8012fee:	6922      	ldr	r2, [r4, #16]
 8012ff0:	3202      	adds	r2, #2
 8012ff2:	f104 010c 	add.w	r1, r4, #12
 8012ff6:	0092      	lsls	r2, r2, #2
 8012ff8:	300c      	adds	r0, #12
 8012ffa:	f7ff fd6b 	bl	8012ad4 <memcpy>
 8012ffe:	4621      	mov	r1, r4
 8013000:	9801      	ldr	r0, [sp, #4]
 8013002:	f7fe f831 	bl	8011068 <_Bfree>
 8013006:	464c      	mov	r4, r9
 8013008:	6923      	ldr	r3, [r4, #16]
 801300a:	1c5a      	adds	r2, r3, #1
 801300c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013010:	6122      	str	r2, [r4, #16]
 8013012:	2201      	movs	r2, #1
 8013014:	615a      	str	r2, [r3, #20]
 8013016:	e7be      	b.n	8012f96 <__gethex+0x362>
 8013018:	6922      	ldr	r2, [r4, #16]
 801301a:	455a      	cmp	r2, fp
 801301c:	dd0b      	ble.n	8013036 <__gethex+0x402>
 801301e:	2101      	movs	r1, #1
 8013020:	4620      	mov	r0, r4
 8013022:	f7ff fd9f 	bl	8012b64 <rshift>
 8013026:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801302a:	3701      	adds	r7, #1
 801302c:	42bb      	cmp	r3, r7
 801302e:	f6ff aee0 	blt.w	8012df2 <__gethex+0x1be>
 8013032:	2501      	movs	r5, #1
 8013034:	e7c2      	b.n	8012fbc <__gethex+0x388>
 8013036:	f016 061f 	ands.w	r6, r6, #31
 801303a:	d0fa      	beq.n	8013032 <__gethex+0x3fe>
 801303c:	4453      	add	r3, sl
 801303e:	f1c6 0620 	rsb	r6, r6, #32
 8013042:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8013046:	f7fe f8c1 	bl	80111cc <__hi0bits>
 801304a:	42b0      	cmp	r0, r6
 801304c:	dbe7      	blt.n	801301e <__gethex+0x3ea>
 801304e:	e7f0      	b.n	8013032 <__gethex+0x3fe>
 8013050:	08013939 	.word	0x08013939

08013054 <L_shift>:
 8013054:	f1c2 0208 	rsb	r2, r2, #8
 8013058:	0092      	lsls	r2, r2, #2
 801305a:	b570      	push	{r4, r5, r6, lr}
 801305c:	f1c2 0620 	rsb	r6, r2, #32
 8013060:	6843      	ldr	r3, [r0, #4]
 8013062:	6804      	ldr	r4, [r0, #0]
 8013064:	fa03 f506 	lsl.w	r5, r3, r6
 8013068:	432c      	orrs	r4, r5
 801306a:	40d3      	lsrs	r3, r2
 801306c:	6004      	str	r4, [r0, #0]
 801306e:	f840 3f04 	str.w	r3, [r0, #4]!
 8013072:	4288      	cmp	r0, r1
 8013074:	d3f4      	bcc.n	8013060 <L_shift+0xc>
 8013076:	bd70      	pop	{r4, r5, r6, pc}

08013078 <__match>:
 8013078:	b530      	push	{r4, r5, lr}
 801307a:	6803      	ldr	r3, [r0, #0]
 801307c:	3301      	adds	r3, #1
 801307e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013082:	b914      	cbnz	r4, 801308a <__match+0x12>
 8013084:	6003      	str	r3, [r0, #0]
 8013086:	2001      	movs	r0, #1
 8013088:	bd30      	pop	{r4, r5, pc}
 801308a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801308e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8013092:	2d19      	cmp	r5, #25
 8013094:	bf98      	it	ls
 8013096:	3220      	addls	r2, #32
 8013098:	42a2      	cmp	r2, r4
 801309a:	d0f0      	beq.n	801307e <__match+0x6>
 801309c:	2000      	movs	r0, #0
 801309e:	e7f3      	b.n	8013088 <__match+0x10>

080130a0 <__hexnan>:
 80130a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130a4:	680b      	ldr	r3, [r1, #0]
 80130a6:	6801      	ldr	r1, [r0, #0]
 80130a8:	115e      	asrs	r6, r3, #5
 80130aa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80130ae:	f013 031f 	ands.w	r3, r3, #31
 80130b2:	b087      	sub	sp, #28
 80130b4:	bf18      	it	ne
 80130b6:	3604      	addne	r6, #4
 80130b8:	2500      	movs	r5, #0
 80130ba:	1f37      	subs	r7, r6, #4
 80130bc:	4682      	mov	sl, r0
 80130be:	4690      	mov	r8, r2
 80130c0:	9301      	str	r3, [sp, #4]
 80130c2:	f846 5c04 	str.w	r5, [r6, #-4]
 80130c6:	46b9      	mov	r9, r7
 80130c8:	463c      	mov	r4, r7
 80130ca:	9502      	str	r5, [sp, #8]
 80130cc:	46ab      	mov	fp, r5
 80130ce:	784a      	ldrb	r2, [r1, #1]
 80130d0:	1c4b      	adds	r3, r1, #1
 80130d2:	9303      	str	r3, [sp, #12]
 80130d4:	b342      	cbz	r2, 8013128 <__hexnan+0x88>
 80130d6:	4610      	mov	r0, r2
 80130d8:	9105      	str	r1, [sp, #20]
 80130da:	9204      	str	r2, [sp, #16]
 80130dc:	f7ff fd94 	bl	8012c08 <__hexdig_fun>
 80130e0:	2800      	cmp	r0, #0
 80130e2:	d151      	bne.n	8013188 <__hexnan+0xe8>
 80130e4:	9a04      	ldr	r2, [sp, #16]
 80130e6:	9905      	ldr	r1, [sp, #20]
 80130e8:	2a20      	cmp	r2, #32
 80130ea:	d818      	bhi.n	801311e <__hexnan+0x7e>
 80130ec:	9b02      	ldr	r3, [sp, #8]
 80130ee:	459b      	cmp	fp, r3
 80130f0:	dd13      	ble.n	801311a <__hexnan+0x7a>
 80130f2:	454c      	cmp	r4, r9
 80130f4:	d206      	bcs.n	8013104 <__hexnan+0x64>
 80130f6:	2d07      	cmp	r5, #7
 80130f8:	dc04      	bgt.n	8013104 <__hexnan+0x64>
 80130fa:	462a      	mov	r2, r5
 80130fc:	4649      	mov	r1, r9
 80130fe:	4620      	mov	r0, r4
 8013100:	f7ff ffa8 	bl	8013054 <L_shift>
 8013104:	4544      	cmp	r4, r8
 8013106:	d952      	bls.n	80131ae <__hexnan+0x10e>
 8013108:	2300      	movs	r3, #0
 801310a:	f1a4 0904 	sub.w	r9, r4, #4
 801310e:	f844 3c04 	str.w	r3, [r4, #-4]
 8013112:	f8cd b008 	str.w	fp, [sp, #8]
 8013116:	464c      	mov	r4, r9
 8013118:	461d      	mov	r5, r3
 801311a:	9903      	ldr	r1, [sp, #12]
 801311c:	e7d7      	b.n	80130ce <__hexnan+0x2e>
 801311e:	2a29      	cmp	r2, #41	@ 0x29
 8013120:	d157      	bne.n	80131d2 <__hexnan+0x132>
 8013122:	3102      	adds	r1, #2
 8013124:	f8ca 1000 	str.w	r1, [sl]
 8013128:	f1bb 0f00 	cmp.w	fp, #0
 801312c:	d051      	beq.n	80131d2 <__hexnan+0x132>
 801312e:	454c      	cmp	r4, r9
 8013130:	d206      	bcs.n	8013140 <__hexnan+0xa0>
 8013132:	2d07      	cmp	r5, #7
 8013134:	dc04      	bgt.n	8013140 <__hexnan+0xa0>
 8013136:	462a      	mov	r2, r5
 8013138:	4649      	mov	r1, r9
 801313a:	4620      	mov	r0, r4
 801313c:	f7ff ff8a 	bl	8013054 <L_shift>
 8013140:	4544      	cmp	r4, r8
 8013142:	d936      	bls.n	80131b2 <__hexnan+0x112>
 8013144:	f1a8 0204 	sub.w	r2, r8, #4
 8013148:	4623      	mov	r3, r4
 801314a:	f853 1b04 	ldr.w	r1, [r3], #4
 801314e:	f842 1f04 	str.w	r1, [r2, #4]!
 8013152:	429f      	cmp	r7, r3
 8013154:	d2f9      	bcs.n	801314a <__hexnan+0xaa>
 8013156:	1b3b      	subs	r3, r7, r4
 8013158:	f023 0303 	bic.w	r3, r3, #3
 801315c:	3304      	adds	r3, #4
 801315e:	3401      	adds	r4, #1
 8013160:	3e03      	subs	r6, #3
 8013162:	42b4      	cmp	r4, r6
 8013164:	bf88      	it	hi
 8013166:	2304      	movhi	r3, #4
 8013168:	4443      	add	r3, r8
 801316a:	2200      	movs	r2, #0
 801316c:	f843 2b04 	str.w	r2, [r3], #4
 8013170:	429f      	cmp	r7, r3
 8013172:	d2fb      	bcs.n	801316c <__hexnan+0xcc>
 8013174:	683b      	ldr	r3, [r7, #0]
 8013176:	b91b      	cbnz	r3, 8013180 <__hexnan+0xe0>
 8013178:	4547      	cmp	r7, r8
 801317a:	d128      	bne.n	80131ce <__hexnan+0x12e>
 801317c:	2301      	movs	r3, #1
 801317e:	603b      	str	r3, [r7, #0]
 8013180:	2005      	movs	r0, #5
 8013182:	b007      	add	sp, #28
 8013184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013188:	3501      	adds	r5, #1
 801318a:	2d08      	cmp	r5, #8
 801318c:	f10b 0b01 	add.w	fp, fp, #1
 8013190:	dd06      	ble.n	80131a0 <__hexnan+0x100>
 8013192:	4544      	cmp	r4, r8
 8013194:	d9c1      	bls.n	801311a <__hexnan+0x7a>
 8013196:	2300      	movs	r3, #0
 8013198:	f844 3c04 	str.w	r3, [r4, #-4]
 801319c:	2501      	movs	r5, #1
 801319e:	3c04      	subs	r4, #4
 80131a0:	6822      	ldr	r2, [r4, #0]
 80131a2:	f000 000f 	and.w	r0, r0, #15
 80131a6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80131aa:	6020      	str	r0, [r4, #0]
 80131ac:	e7b5      	b.n	801311a <__hexnan+0x7a>
 80131ae:	2508      	movs	r5, #8
 80131b0:	e7b3      	b.n	801311a <__hexnan+0x7a>
 80131b2:	9b01      	ldr	r3, [sp, #4]
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d0dd      	beq.n	8013174 <__hexnan+0xd4>
 80131b8:	f1c3 0320 	rsb	r3, r3, #32
 80131bc:	f04f 32ff 	mov.w	r2, #4294967295
 80131c0:	40da      	lsrs	r2, r3
 80131c2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80131c6:	4013      	ands	r3, r2
 80131c8:	f846 3c04 	str.w	r3, [r6, #-4]
 80131cc:	e7d2      	b.n	8013174 <__hexnan+0xd4>
 80131ce:	3f04      	subs	r7, #4
 80131d0:	e7d0      	b.n	8013174 <__hexnan+0xd4>
 80131d2:	2004      	movs	r0, #4
 80131d4:	e7d5      	b.n	8013182 <__hexnan+0xe2>

080131d6 <__ascii_mbtowc>:
 80131d6:	b082      	sub	sp, #8
 80131d8:	b901      	cbnz	r1, 80131dc <__ascii_mbtowc+0x6>
 80131da:	a901      	add	r1, sp, #4
 80131dc:	b142      	cbz	r2, 80131f0 <__ascii_mbtowc+0x1a>
 80131de:	b14b      	cbz	r3, 80131f4 <__ascii_mbtowc+0x1e>
 80131e0:	7813      	ldrb	r3, [r2, #0]
 80131e2:	600b      	str	r3, [r1, #0]
 80131e4:	7812      	ldrb	r2, [r2, #0]
 80131e6:	1e10      	subs	r0, r2, #0
 80131e8:	bf18      	it	ne
 80131ea:	2001      	movne	r0, #1
 80131ec:	b002      	add	sp, #8
 80131ee:	4770      	bx	lr
 80131f0:	4610      	mov	r0, r2
 80131f2:	e7fb      	b.n	80131ec <__ascii_mbtowc+0x16>
 80131f4:	f06f 0001 	mvn.w	r0, #1
 80131f8:	e7f8      	b.n	80131ec <__ascii_mbtowc+0x16>

080131fa <_realloc_r>:
 80131fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131fe:	4680      	mov	r8, r0
 8013200:	4615      	mov	r5, r2
 8013202:	460c      	mov	r4, r1
 8013204:	b921      	cbnz	r1, 8013210 <_realloc_r+0x16>
 8013206:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801320a:	4611      	mov	r1, r2
 801320c:	f7fd be60 	b.w	8010ed0 <_malloc_r>
 8013210:	b92a      	cbnz	r2, 801321e <_realloc_r+0x24>
 8013212:	f7fd fde9 	bl	8010de8 <_free_r>
 8013216:	2400      	movs	r4, #0
 8013218:	4620      	mov	r0, r4
 801321a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801321e:	f000 f840 	bl	80132a2 <_malloc_usable_size_r>
 8013222:	4285      	cmp	r5, r0
 8013224:	4606      	mov	r6, r0
 8013226:	d802      	bhi.n	801322e <_realloc_r+0x34>
 8013228:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801322c:	d8f4      	bhi.n	8013218 <_realloc_r+0x1e>
 801322e:	4629      	mov	r1, r5
 8013230:	4640      	mov	r0, r8
 8013232:	f7fd fe4d 	bl	8010ed0 <_malloc_r>
 8013236:	4607      	mov	r7, r0
 8013238:	2800      	cmp	r0, #0
 801323a:	d0ec      	beq.n	8013216 <_realloc_r+0x1c>
 801323c:	42b5      	cmp	r5, r6
 801323e:	462a      	mov	r2, r5
 8013240:	4621      	mov	r1, r4
 8013242:	bf28      	it	cs
 8013244:	4632      	movcs	r2, r6
 8013246:	f7ff fc45 	bl	8012ad4 <memcpy>
 801324a:	4621      	mov	r1, r4
 801324c:	4640      	mov	r0, r8
 801324e:	f7fd fdcb 	bl	8010de8 <_free_r>
 8013252:	463c      	mov	r4, r7
 8013254:	e7e0      	b.n	8013218 <_realloc_r+0x1e>

08013256 <__ascii_wctomb>:
 8013256:	4603      	mov	r3, r0
 8013258:	4608      	mov	r0, r1
 801325a:	b141      	cbz	r1, 801326e <__ascii_wctomb+0x18>
 801325c:	2aff      	cmp	r2, #255	@ 0xff
 801325e:	d904      	bls.n	801326a <__ascii_wctomb+0x14>
 8013260:	228a      	movs	r2, #138	@ 0x8a
 8013262:	601a      	str	r2, [r3, #0]
 8013264:	f04f 30ff 	mov.w	r0, #4294967295
 8013268:	4770      	bx	lr
 801326a:	700a      	strb	r2, [r1, #0]
 801326c:	2001      	movs	r0, #1
 801326e:	4770      	bx	lr

08013270 <fiprintf>:
 8013270:	b40e      	push	{r1, r2, r3}
 8013272:	b503      	push	{r0, r1, lr}
 8013274:	4601      	mov	r1, r0
 8013276:	ab03      	add	r3, sp, #12
 8013278:	4805      	ldr	r0, [pc, #20]	@ (8013290 <fiprintf+0x20>)
 801327a:	f853 2b04 	ldr.w	r2, [r3], #4
 801327e:	6800      	ldr	r0, [r0, #0]
 8013280:	9301      	str	r3, [sp, #4]
 8013282:	f000 f83f 	bl	8013304 <_vfiprintf_r>
 8013286:	b002      	add	sp, #8
 8013288:	f85d eb04 	ldr.w	lr, [sp], #4
 801328c:	b003      	add	sp, #12
 801328e:	4770      	bx	lr
 8013290:	20000190 	.word	0x20000190

08013294 <abort>:
 8013294:	b508      	push	{r3, lr}
 8013296:	2006      	movs	r0, #6
 8013298:	f000 fa08 	bl	80136ac <raise>
 801329c:	2001      	movs	r0, #1
 801329e:	f7ef f85d 	bl	800235c <_exit>

080132a2 <_malloc_usable_size_r>:
 80132a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80132a6:	1f18      	subs	r0, r3, #4
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	bfbc      	itt	lt
 80132ac:	580b      	ldrlt	r3, [r1, r0]
 80132ae:	18c0      	addlt	r0, r0, r3
 80132b0:	4770      	bx	lr

080132b2 <__sfputc_r>:
 80132b2:	6893      	ldr	r3, [r2, #8]
 80132b4:	3b01      	subs	r3, #1
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	b410      	push	{r4}
 80132ba:	6093      	str	r3, [r2, #8]
 80132bc:	da08      	bge.n	80132d0 <__sfputc_r+0x1e>
 80132be:	6994      	ldr	r4, [r2, #24]
 80132c0:	42a3      	cmp	r3, r4
 80132c2:	db01      	blt.n	80132c8 <__sfputc_r+0x16>
 80132c4:	290a      	cmp	r1, #10
 80132c6:	d103      	bne.n	80132d0 <__sfputc_r+0x1e>
 80132c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80132cc:	f000 b932 	b.w	8013534 <__swbuf_r>
 80132d0:	6813      	ldr	r3, [r2, #0]
 80132d2:	1c58      	adds	r0, r3, #1
 80132d4:	6010      	str	r0, [r2, #0]
 80132d6:	7019      	strb	r1, [r3, #0]
 80132d8:	4608      	mov	r0, r1
 80132da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80132de:	4770      	bx	lr

080132e0 <__sfputs_r>:
 80132e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132e2:	4606      	mov	r6, r0
 80132e4:	460f      	mov	r7, r1
 80132e6:	4614      	mov	r4, r2
 80132e8:	18d5      	adds	r5, r2, r3
 80132ea:	42ac      	cmp	r4, r5
 80132ec:	d101      	bne.n	80132f2 <__sfputs_r+0x12>
 80132ee:	2000      	movs	r0, #0
 80132f0:	e007      	b.n	8013302 <__sfputs_r+0x22>
 80132f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80132f6:	463a      	mov	r2, r7
 80132f8:	4630      	mov	r0, r6
 80132fa:	f7ff ffda 	bl	80132b2 <__sfputc_r>
 80132fe:	1c43      	adds	r3, r0, #1
 8013300:	d1f3      	bne.n	80132ea <__sfputs_r+0xa>
 8013302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013304 <_vfiprintf_r>:
 8013304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013308:	460d      	mov	r5, r1
 801330a:	b09d      	sub	sp, #116	@ 0x74
 801330c:	4614      	mov	r4, r2
 801330e:	4698      	mov	r8, r3
 8013310:	4606      	mov	r6, r0
 8013312:	b118      	cbz	r0, 801331c <_vfiprintf_r+0x18>
 8013314:	6a03      	ldr	r3, [r0, #32]
 8013316:	b90b      	cbnz	r3, 801331c <_vfiprintf_r+0x18>
 8013318:	f7fc fdf8 	bl	800ff0c <__sinit>
 801331c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801331e:	07d9      	lsls	r1, r3, #31
 8013320:	d405      	bmi.n	801332e <_vfiprintf_r+0x2a>
 8013322:	89ab      	ldrh	r3, [r5, #12]
 8013324:	059a      	lsls	r2, r3, #22
 8013326:	d402      	bmi.n	801332e <_vfiprintf_r+0x2a>
 8013328:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801332a:	f7fc ff06 	bl	801013a <__retarget_lock_acquire_recursive>
 801332e:	89ab      	ldrh	r3, [r5, #12]
 8013330:	071b      	lsls	r3, r3, #28
 8013332:	d501      	bpl.n	8013338 <_vfiprintf_r+0x34>
 8013334:	692b      	ldr	r3, [r5, #16]
 8013336:	b99b      	cbnz	r3, 8013360 <_vfiprintf_r+0x5c>
 8013338:	4629      	mov	r1, r5
 801333a:	4630      	mov	r0, r6
 801333c:	f000 f938 	bl	80135b0 <__swsetup_r>
 8013340:	b170      	cbz	r0, 8013360 <_vfiprintf_r+0x5c>
 8013342:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013344:	07dc      	lsls	r4, r3, #31
 8013346:	d504      	bpl.n	8013352 <_vfiprintf_r+0x4e>
 8013348:	f04f 30ff 	mov.w	r0, #4294967295
 801334c:	b01d      	add	sp, #116	@ 0x74
 801334e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013352:	89ab      	ldrh	r3, [r5, #12]
 8013354:	0598      	lsls	r0, r3, #22
 8013356:	d4f7      	bmi.n	8013348 <_vfiprintf_r+0x44>
 8013358:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801335a:	f7fc feef 	bl	801013c <__retarget_lock_release_recursive>
 801335e:	e7f3      	b.n	8013348 <_vfiprintf_r+0x44>
 8013360:	2300      	movs	r3, #0
 8013362:	9309      	str	r3, [sp, #36]	@ 0x24
 8013364:	2320      	movs	r3, #32
 8013366:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801336a:	f8cd 800c 	str.w	r8, [sp, #12]
 801336e:	2330      	movs	r3, #48	@ 0x30
 8013370:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013520 <_vfiprintf_r+0x21c>
 8013374:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013378:	f04f 0901 	mov.w	r9, #1
 801337c:	4623      	mov	r3, r4
 801337e:	469a      	mov	sl, r3
 8013380:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013384:	b10a      	cbz	r2, 801338a <_vfiprintf_r+0x86>
 8013386:	2a25      	cmp	r2, #37	@ 0x25
 8013388:	d1f9      	bne.n	801337e <_vfiprintf_r+0x7a>
 801338a:	ebba 0b04 	subs.w	fp, sl, r4
 801338e:	d00b      	beq.n	80133a8 <_vfiprintf_r+0xa4>
 8013390:	465b      	mov	r3, fp
 8013392:	4622      	mov	r2, r4
 8013394:	4629      	mov	r1, r5
 8013396:	4630      	mov	r0, r6
 8013398:	f7ff ffa2 	bl	80132e0 <__sfputs_r>
 801339c:	3001      	adds	r0, #1
 801339e:	f000 80a7 	beq.w	80134f0 <_vfiprintf_r+0x1ec>
 80133a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80133a4:	445a      	add	r2, fp
 80133a6:	9209      	str	r2, [sp, #36]	@ 0x24
 80133a8:	f89a 3000 	ldrb.w	r3, [sl]
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	f000 809f 	beq.w	80134f0 <_vfiprintf_r+0x1ec>
 80133b2:	2300      	movs	r3, #0
 80133b4:	f04f 32ff 	mov.w	r2, #4294967295
 80133b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80133bc:	f10a 0a01 	add.w	sl, sl, #1
 80133c0:	9304      	str	r3, [sp, #16]
 80133c2:	9307      	str	r3, [sp, #28]
 80133c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80133c8:	931a      	str	r3, [sp, #104]	@ 0x68
 80133ca:	4654      	mov	r4, sl
 80133cc:	2205      	movs	r2, #5
 80133ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80133d2:	4853      	ldr	r0, [pc, #332]	@ (8013520 <_vfiprintf_r+0x21c>)
 80133d4:	f7ec ff24 	bl	8000220 <memchr>
 80133d8:	9a04      	ldr	r2, [sp, #16]
 80133da:	b9d8      	cbnz	r0, 8013414 <_vfiprintf_r+0x110>
 80133dc:	06d1      	lsls	r1, r2, #27
 80133de:	bf44      	itt	mi
 80133e0:	2320      	movmi	r3, #32
 80133e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80133e6:	0713      	lsls	r3, r2, #28
 80133e8:	bf44      	itt	mi
 80133ea:	232b      	movmi	r3, #43	@ 0x2b
 80133ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80133f0:	f89a 3000 	ldrb.w	r3, [sl]
 80133f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80133f6:	d015      	beq.n	8013424 <_vfiprintf_r+0x120>
 80133f8:	9a07      	ldr	r2, [sp, #28]
 80133fa:	4654      	mov	r4, sl
 80133fc:	2000      	movs	r0, #0
 80133fe:	f04f 0c0a 	mov.w	ip, #10
 8013402:	4621      	mov	r1, r4
 8013404:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013408:	3b30      	subs	r3, #48	@ 0x30
 801340a:	2b09      	cmp	r3, #9
 801340c:	d94b      	bls.n	80134a6 <_vfiprintf_r+0x1a2>
 801340e:	b1b0      	cbz	r0, 801343e <_vfiprintf_r+0x13a>
 8013410:	9207      	str	r2, [sp, #28]
 8013412:	e014      	b.n	801343e <_vfiprintf_r+0x13a>
 8013414:	eba0 0308 	sub.w	r3, r0, r8
 8013418:	fa09 f303 	lsl.w	r3, r9, r3
 801341c:	4313      	orrs	r3, r2
 801341e:	9304      	str	r3, [sp, #16]
 8013420:	46a2      	mov	sl, r4
 8013422:	e7d2      	b.n	80133ca <_vfiprintf_r+0xc6>
 8013424:	9b03      	ldr	r3, [sp, #12]
 8013426:	1d19      	adds	r1, r3, #4
 8013428:	681b      	ldr	r3, [r3, #0]
 801342a:	9103      	str	r1, [sp, #12]
 801342c:	2b00      	cmp	r3, #0
 801342e:	bfbb      	ittet	lt
 8013430:	425b      	neglt	r3, r3
 8013432:	f042 0202 	orrlt.w	r2, r2, #2
 8013436:	9307      	strge	r3, [sp, #28]
 8013438:	9307      	strlt	r3, [sp, #28]
 801343a:	bfb8      	it	lt
 801343c:	9204      	strlt	r2, [sp, #16]
 801343e:	7823      	ldrb	r3, [r4, #0]
 8013440:	2b2e      	cmp	r3, #46	@ 0x2e
 8013442:	d10a      	bne.n	801345a <_vfiprintf_r+0x156>
 8013444:	7863      	ldrb	r3, [r4, #1]
 8013446:	2b2a      	cmp	r3, #42	@ 0x2a
 8013448:	d132      	bne.n	80134b0 <_vfiprintf_r+0x1ac>
 801344a:	9b03      	ldr	r3, [sp, #12]
 801344c:	1d1a      	adds	r2, r3, #4
 801344e:	681b      	ldr	r3, [r3, #0]
 8013450:	9203      	str	r2, [sp, #12]
 8013452:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013456:	3402      	adds	r4, #2
 8013458:	9305      	str	r3, [sp, #20]
 801345a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013530 <_vfiprintf_r+0x22c>
 801345e:	7821      	ldrb	r1, [r4, #0]
 8013460:	2203      	movs	r2, #3
 8013462:	4650      	mov	r0, sl
 8013464:	f7ec fedc 	bl	8000220 <memchr>
 8013468:	b138      	cbz	r0, 801347a <_vfiprintf_r+0x176>
 801346a:	9b04      	ldr	r3, [sp, #16]
 801346c:	eba0 000a 	sub.w	r0, r0, sl
 8013470:	2240      	movs	r2, #64	@ 0x40
 8013472:	4082      	lsls	r2, r0
 8013474:	4313      	orrs	r3, r2
 8013476:	3401      	adds	r4, #1
 8013478:	9304      	str	r3, [sp, #16]
 801347a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801347e:	4829      	ldr	r0, [pc, #164]	@ (8013524 <_vfiprintf_r+0x220>)
 8013480:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013484:	2206      	movs	r2, #6
 8013486:	f7ec fecb 	bl	8000220 <memchr>
 801348a:	2800      	cmp	r0, #0
 801348c:	d03f      	beq.n	801350e <_vfiprintf_r+0x20a>
 801348e:	4b26      	ldr	r3, [pc, #152]	@ (8013528 <_vfiprintf_r+0x224>)
 8013490:	bb1b      	cbnz	r3, 80134da <_vfiprintf_r+0x1d6>
 8013492:	9b03      	ldr	r3, [sp, #12]
 8013494:	3307      	adds	r3, #7
 8013496:	f023 0307 	bic.w	r3, r3, #7
 801349a:	3308      	adds	r3, #8
 801349c:	9303      	str	r3, [sp, #12]
 801349e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80134a0:	443b      	add	r3, r7
 80134a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80134a4:	e76a      	b.n	801337c <_vfiprintf_r+0x78>
 80134a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80134aa:	460c      	mov	r4, r1
 80134ac:	2001      	movs	r0, #1
 80134ae:	e7a8      	b.n	8013402 <_vfiprintf_r+0xfe>
 80134b0:	2300      	movs	r3, #0
 80134b2:	3401      	adds	r4, #1
 80134b4:	9305      	str	r3, [sp, #20]
 80134b6:	4619      	mov	r1, r3
 80134b8:	f04f 0c0a 	mov.w	ip, #10
 80134bc:	4620      	mov	r0, r4
 80134be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80134c2:	3a30      	subs	r2, #48	@ 0x30
 80134c4:	2a09      	cmp	r2, #9
 80134c6:	d903      	bls.n	80134d0 <_vfiprintf_r+0x1cc>
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d0c6      	beq.n	801345a <_vfiprintf_r+0x156>
 80134cc:	9105      	str	r1, [sp, #20]
 80134ce:	e7c4      	b.n	801345a <_vfiprintf_r+0x156>
 80134d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80134d4:	4604      	mov	r4, r0
 80134d6:	2301      	movs	r3, #1
 80134d8:	e7f0      	b.n	80134bc <_vfiprintf_r+0x1b8>
 80134da:	ab03      	add	r3, sp, #12
 80134dc:	9300      	str	r3, [sp, #0]
 80134de:	462a      	mov	r2, r5
 80134e0:	4b12      	ldr	r3, [pc, #72]	@ (801352c <_vfiprintf_r+0x228>)
 80134e2:	a904      	add	r1, sp, #16
 80134e4:	4630      	mov	r0, r6
 80134e6:	f7fb feb9 	bl	800f25c <_printf_float>
 80134ea:	4607      	mov	r7, r0
 80134ec:	1c78      	adds	r0, r7, #1
 80134ee:	d1d6      	bne.n	801349e <_vfiprintf_r+0x19a>
 80134f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80134f2:	07d9      	lsls	r1, r3, #31
 80134f4:	d405      	bmi.n	8013502 <_vfiprintf_r+0x1fe>
 80134f6:	89ab      	ldrh	r3, [r5, #12]
 80134f8:	059a      	lsls	r2, r3, #22
 80134fa:	d402      	bmi.n	8013502 <_vfiprintf_r+0x1fe>
 80134fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80134fe:	f7fc fe1d 	bl	801013c <__retarget_lock_release_recursive>
 8013502:	89ab      	ldrh	r3, [r5, #12]
 8013504:	065b      	lsls	r3, r3, #25
 8013506:	f53f af1f 	bmi.w	8013348 <_vfiprintf_r+0x44>
 801350a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801350c:	e71e      	b.n	801334c <_vfiprintf_r+0x48>
 801350e:	ab03      	add	r3, sp, #12
 8013510:	9300      	str	r3, [sp, #0]
 8013512:	462a      	mov	r2, r5
 8013514:	4b05      	ldr	r3, [pc, #20]	@ (801352c <_vfiprintf_r+0x228>)
 8013516:	a904      	add	r1, sp, #16
 8013518:	4630      	mov	r0, r6
 801351a:	f7fc f937 	bl	800f78c <_printf_i>
 801351e:	e7e4      	b.n	80134ea <_vfiprintf_r+0x1e6>
 8013520:	08013bf9 	.word	0x08013bf9
 8013524:	08013c03 	.word	0x08013c03
 8013528:	0800f25d 	.word	0x0800f25d
 801352c:	080132e1 	.word	0x080132e1
 8013530:	08013bff 	.word	0x08013bff

08013534 <__swbuf_r>:
 8013534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013536:	460e      	mov	r6, r1
 8013538:	4614      	mov	r4, r2
 801353a:	4605      	mov	r5, r0
 801353c:	b118      	cbz	r0, 8013546 <__swbuf_r+0x12>
 801353e:	6a03      	ldr	r3, [r0, #32]
 8013540:	b90b      	cbnz	r3, 8013546 <__swbuf_r+0x12>
 8013542:	f7fc fce3 	bl	800ff0c <__sinit>
 8013546:	69a3      	ldr	r3, [r4, #24]
 8013548:	60a3      	str	r3, [r4, #8]
 801354a:	89a3      	ldrh	r3, [r4, #12]
 801354c:	071a      	lsls	r2, r3, #28
 801354e:	d501      	bpl.n	8013554 <__swbuf_r+0x20>
 8013550:	6923      	ldr	r3, [r4, #16]
 8013552:	b943      	cbnz	r3, 8013566 <__swbuf_r+0x32>
 8013554:	4621      	mov	r1, r4
 8013556:	4628      	mov	r0, r5
 8013558:	f000 f82a 	bl	80135b0 <__swsetup_r>
 801355c:	b118      	cbz	r0, 8013566 <__swbuf_r+0x32>
 801355e:	f04f 37ff 	mov.w	r7, #4294967295
 8013562:	4638      	mov	r0, r7
 8013564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013566:	6823      	ldr	r3, [r4, #0]
 8013568:	6922      	ldr	r2, [r4, #16]
 801356a:	1a98      	subs	r0, r3, r2
 801356c:	6963      	ldr	r3, [r4, #20]
 801356e:	b2f6      	uxtb	r6, r6
 8013570:	4283      	cmp	r3, r0
 8013572:	4637      	mov	r7, r6
 8013574:	dc05      	bgt.n	8013582 <__swbuf_r+0x4e>
 8013576:	4621      	mov	r1, r4
 8013578:	4628      	mov	r0, r5
 801357a:	f7ff fa47 	bl	8012a0c <_fflush_r>
 801357e:	2800      	cmp	r0, #0
 8013580:	d1ed      	bne.n	801355e <__swbuf_r+0x2a>
 8013582:	68a3      	ldr	r3, [r4, #8]
 8013584:	3b01      	subs	r3, #1
 8013586:	60a3      	str	r3, [r4, #8]
 8013588:	6823      	ldr	r3, [r4, #0]
 801358a:	1c5a      	adds	r2, r3, #1
 801358c:	6022      	str	r2, [r4, #0]
 801358e:	701e      	strb	r6, [r3, #0]
 8013590:	6962      	ldr	r2, [r4, #20]
 8013592:	1c43      	adds	r3, r0, #1
 8013594:	429a      	cmp	r2, r3
 8013596:	d004      	beq.n	80135a2 <__swbuf_r+0x6e>
 8013598:	89a3      	ldrh	r3, [r4, #12]
 801359a:	07db      	lsls	r3, r3, #31
 801359c:	d5e1      	bpl.n	8013562 <__swbuf_r+0x2e>
 801359e:	2e0a      	cmp	r6, #10
 80135a0:	d1df      	bne.n	8013562 <__swbuf_r+0x2e>
 80135a2:	4621      	mov	r1, r4
 80135a4:	4628      	mov	r0, r5
 80135a6:	f7ff fa31 	bl	8012a0c <_fflush_r>
 80135aa:	2800      	cmp	r0, #0
 80135ac:	d0d9      	beq.n	8013562 <__swbuf_r+0x2e>
 80135ae:	e7d6      	b.n	801355e <__swbuf_r+0x2a>

080135b0 <__swsetup_r>:
 80135b0:	b538      	push	{r3, r4, r5, lr}
 80135b2:	4b29      	ldr	r3, [pc, #164]	@ (8013658 <__swsetup_r+0xa8>)
 80135b4:	4605      	mov	r5, r0
 80135b6:	6818      	ldr	r0, [r3, #0]
 80135b8:	460c      	mov	r4, r1
 80135ba:	b118      	cbz	r0, 80135c4 <__swsetup_r+0x14>
 80135bc:	6a03      	ldr	r3, [r0, #32]
 80135be:	b90b      	cbnz	r3, 80135c4 <__swsetup_r+0x14>
 80135c0:	f7fc fca4 	bl	800ff0c <__sinit>
 80135c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80135c8:	0719      	lsls	r1, r3, #28
 80135ca:	d422      	bmi.n	8013612 <__swsetup_r+0x62>
 80135cc:	06da      	lsls	r2, r3, #27
 80135ce:	d407      	bmi.n	80135e0 <__swsetup_r+0x30>
 80135d0:	2209      	movs	r2, #9
 80135d2:	602a      	str	r2, [r5, #0]
 80135d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80135d8:	81a3      	strh	r3, [r4, #12]
 80135da:	f04f 30ff 	mov.w	r0, #4294967295
 80135de:	e033      	b.n	8013648 <__swsetup_r+0x98>
 80135e0:	0758      	lsls	r0, r3, #29
 80135e2:	d512      	bpl.n	801360a <__swsetup_r+0x5a>
 80135e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80135e6:	b141      	cbz	r1, 80135fa <__swsetup_r+0x4a>
 80135e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80135ec:	4299      	cmp	r1, r3
 80135ee:	d002      	beq.n	80135f6 <__swsetup_r+0x46>
 80135f0:	4628      	mov	r0, r5
 80135f2:	f7fd fbf9 	bl	8010de8 <_free_r>
 80135f6:	2300      	movs	r3, #0
 80135f8:	6363      	str	r3, [r4, #52]	@ 0x34
 80135fa:	89a3      	ldrh	r3, [r4, #12]
 80135fc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8013600:	81a3      	strh	r3, [r4, #12]
 8013602:	2300      	movs	r3, #0
 8013604:	6063      	str	r3, [r4, #4]
 8013606:	6923      	ldr	r3, [r4, #16]
 8013608:	6023      	str	r3, [r4, #0]
 801360a:	89a3      	ldrh	r3, [r4, #12]
 801360c:	f043 0308 	orr.w	r3, r3, #8
 8013610:	81a3      	strh	r3, [r4, #12]
 8013612:	6923      	ldr	r3, [r4, #16]
 8013614:	b94b      	cbnz	r3, 801362a <__swsetup_r+0x7a>
 8013616:	89a3      	ldrh	r3, [r4, #12]
 8013618:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801361c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013620:	d003      	beq.n	801362a <__swsetup_r+0x7a>
 8013622:	4621      	mov	r1, r4
 8013624:	4628      	mov	r0, r5
 8013626:	f000 f883 	bl	8013730 <__smakebuf_r>
 801362a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801362e:	f013 0201 	ands.w	r2, r3, #1
 8013632:	d00a      	beq.n	801364a <__swsetup_r+0x9a>
 8013634:	2200      	movs	r2, #0
 8013636:	60a2      	str	r2, [r4, #8]
 8013638:	6962      	ldr	r2, [r4, #20]
 801363a:	4252      	negs	r2, r2
 801363c:	61a2      	str	r2, [r4, #24]
 801363e:	6922      	ldr	r2, [r4, #16]
 8013640:	b942      	cbnz	r2, 8013654 <__swsetup_r+0xa4>
 8013642:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8013646:	d1c5      	bne.n	80135d4 <__swsetup_r+0x24>
 8013648:	bd38      	pop	{r3, r4, r5, pc}
 801364a:	0799      	lsls	r1, r3, #30
 801364c:	bf58      	it	pl
 801364e:	6962      	ldrpl	r2, [r4, #20]
 8013650:	60a2      	str	r2, [r4, #8]
 8013652:	e7f4      	b.n	801363e <__swsetup_r+0x8e>
 8013654:	2000      	movs	r0, #0
 8013656:	e7f7      	b.n	8013648 <__swsetup_r+0x98>
 8013658:	20000190 	.word	0x20000190

0801365c <_raise_r>:
 801365c:	291f      	cmp	r1, #31
 801365e:	b538      	push	{r3, r4, r5, lr}
 8013660:	4605      	mov	r5, r0
 8013662:	460c      	mov	r4, r1
 8013664:	d904      	bls.n	8013670 <_raise_r+0x14>
 8013666:	2316      	movs	r3, #22
 8013668:	6003      	str	r3, [r0, #0]
 801366a:	f04f 30ff 	mov.w	r0, #4294967295
 801366e:	bd38      	pop	{r3, r4, r5, pc}
 8013670:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013672:	b112      	cbz	r2, 801367a <_raise_r+0x1e>
 8013674:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013678:	b94b      	cbnz	r3, 801368e <_raise_r+0x32>
 801367a:	4628      	mov	r0, r5
 801367c:	f000 f830 	bl	80136e0 <_getpid_r>
 8013680:	4622      	mov	r2, r4
 8013682:	4601      	mov	r1, r0
 8013684:	4628      	mov	r0, r5
 8013686:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801368a:	f000 b817 	b.w	80136bc <_kill_r>
 801368e:	2b01      	cmp	r3, #1
 8013690:	d00a      	beq.n	80136a8 <_raise_r+0x4c>
 8013692:	1c59      	adds	r1, r3, #1
 8013694:	d103      	bne.n	801369e <_raise_r+0x42>
 8013696:	2316      	movs	r3, #22
 8013698:	6003      	str	r3, [r0, #0]
 801369a:	2001      	movs	r0, #1
 801369c:	e7e7      	b.n	801366e <_raise_r+0x12>
 801369e:	2100      	movs	r1, #0
 80136a0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80136a4:	4620      	mov	r0, r4
 80136a6:	4798      	blx	r3
 80136a8:	2000      	movs	r0, #0
 80136aa:	e7e0      	b.n	801366e <_raise_r+0x12>

080136ac <raise>:
 80136ac:	4b02      	ldr	r3, [pc, #8]	@ (80136b8 <raise+0xc>)
 80136ae:	4601      	mov	r1, r0
 80136b0:	6818      	ldr	r0, [r3, #0]
 80136b2:	f7ff bfd3 	b.w	801365c <_raise_r>
 80136b6:	bf00      	nop
 80136b8:	20000190 	.word	0x20000190

080136bc <_kill_r>:
 80136bc:	b538      	push	{r3, r4, r5, lr}
 80136be:	4d07      	ldr	r5, [pc, #28]	@ (80136dc <_kill_r+0x20>)
 80136c0:	2300      	movs	r3, #0
 80136c2:	4604      	mov	r4, r0
 80136c4:	4608      	mov	r0, r1
 80136c6:	4611      	mov	r1, r2
 80136c8:	602b      	str	r3, [r5, #0]
 80136ca:	f7ee fe37 	bl	800233c <_kill>
 80136ce:	1c43      	adds	r3, r0, #1
 80136d0:	d102      	bne.n	80136d8 <_kill_r+0x1c>
 80136d2:	682b      	ldr	r3, [r5, #0]
 80136d4:	b103      	cbz	r3, 80136d8 <_kill_r+0x1c>
 80136d6:	6023      	str	r3, [r4, #0]
 80136d8:	bd38      	pop	{r3, r4, r5, pc}
 80136da:	bf00      	nop
 80136dc:	200038d0 	.word	0x200038d0

080136e0 <_getpid_r>:
 80136e0:	f7ee be24 	b.w	800232c <_getpid>

080136e4 <__swhatbuf_r>:
 80136e4:	b570      	push	{r4, r5, r6, lr}
 80136e6:	460c      	mov	r4, r1
 80136e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80136ec:	2900      	cmp	r1, #0
 80136ee:	b096      	sub	sp, #88	@ 0x58
 80136f0:	4615      	mov	r5, r2
 80136f2:	461e      	mov	r6, r3
 80136f4:	da0d      	bge.n	8013712 <__swhatbuf_r+0x2e>
 80136f6:	89a3      	ldrh	r3, [r4, #12]
 80136f8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80136fc:	f04f 0100 	mov.w	r1, #0
 8013700:	bf14      	ite	ne
 8013702:	2340      	movne	r3, #64	@ 0x40
 8013704:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013708:	2000      	movs	r0, #0
 801370a:	6031      	str	r1, [r6, #0]
 801370c:	602b      	str	r3, [r5, #0]
 801370e:	b016      	add	sp, #88	@ 0x58
 8013710:	bd70      	pop	{r4, r5, r6, pc}
 8013712:	466a      	mov	r2, sp
 8013714:	f000 f848 	bl	80137a8 <_fstat_r>
 8013718:	2800      	cmp	r0, #0
 801371a:	dbec      	blt.n	80136f6 <__swhatbuf_r+0x12>
 801371c:	9901      	ldr	r1, [sp, #4]
 801371e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013722:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013726:	4259      	negs	r1, r3
 8013728:	4159      	adcs	r1, r3
 801372a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801372e:	e7eb      	b.n	8013708 <__swhatbuf_r+0x24>

08013730 <__smakebuf_r>:
 8013730:	898b      	ldrh	r3, [r1, #12]
 8013732:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013734:	079d      	lsls	r5, r3, #30
 8013736:	4606      	mov	r6, r0
 8013738:	460c      	mov	r4, r1
 801373a:	d507      	bpl.n	801374c <__smakebuf_r+0x1c>
 801373c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013740:	6023      	str	r3, [r4, #0]
 8013742:	6123      	str	r3, [r4, #16]
 8013744:	2301      	movs	r3, #1
 8013746:	6163      	str	r3, [r4, #20]
 8013748:	b003      	add	sp, #12
 801374a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801374c:	ab01      	add	r3, sp, #4
 801374e:	466a      	mov	r2, sp
 8013750:	f7ff ffc8 	bl	80136e4 <__swhatbuf_r>
 8013754:	9f00      	ldr	r7, [sp, #0]
 8013756:	4605      	mov	r5, r0
 8013758:	4639      	mov	r1, r7
 801375a:	4630      	mov	r0, r6
 801375c:	f7fd fbb8 	bl	8010ed0 <_malloc_r>
 8013760:	b948      	cbnz	r0, 8013776 <__smakebuf_r+0x46>
 8013762:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013766:	059a      	lsls	r2, r3, #22
 8013768:	d4ee      	bmi.n	8013748 <__smakebuf_r+0x18>
 801376a:	f023 0303 	bic.w	r3, r3, #3
 801376e:	f043 0302 	orr.w	r3, r3, #2
 8013772:	81a3      	strh	r3, [r4, #12]
 8013774:	e7e2      	b.n	801373c <__smakebuf_r+0xc>
 8013776:	89a3      	ldrh	r3, [r4, #12]
 8013778:	6020      	str	r0, [r4, #0]
 801377a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801377e:	81a3      	strh	r3, [r4, #12]
 8013780:	9b01      	ldr	r3, [sp, #4]
 8013782:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8013786:	b15b      	cbz	r3, 80137a0 <__smakebuf_r+0x70>
 8013788:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801378c:	4630      	mov	r0, r6
 801378e:	f000 f81d 	bl	80137cc <_isatty_r>
 8013792:	b128      	cbz	r0, 80137a0 <__smakebuf_r+0x70>
 8013794:	89a3      	ldrh	r3, [r4, #12]
 8013796:	f023 0303 	bic.w	r3, r3, #3
 801379a:	f043 0301 	orr.w	r3, r3, #1
 801379e:	81a3      	strh	r3, [r4, #12]
 80137a0:	89a3      	ldrh	r3, [r4, #12]
 80137a2:	431d      	orrs	r5, r3
 80137a4:	81a5      	strh	r5, [r4, #12]
 80137a6:	e7cf      	b.n	8013748 <__smakebuf_r+0x18>

080137a8 <_fstat_r>:
 80137a8:	b538      	push	{r3, r4, r5, lr}
 80137aa:	4d07      	ldr	r5, [pc, #28]	@ (80137c8 <_fstat_r+0x20>)
 80137ac:	2300      	movs	r3, #0
 80137ae:	4604      	mov	r4, r0
 80137b0:	4608      	mov	r0, r1
 80137b2:	4611      	mov	r1, r2
 80137b4:	602b      	str	r3, [r5, #0]
 80137b6:	f7ee fe21 	bl	80023fc <_fstat>
 80137ba:	1c43      	adds	r3, r0, #1
 80137bc:	d102      	bne.n	80137c4 <_fstat_r+0x1c>
 80137be:	682b      	ldr	r3, [r5, #0]
 80137c0:	b103      	cbz	r3, 80137c4 <_fstat_r+0x1c>
 80137c2:	6023      	str	r3, [r4, #0]
 80137c4:	bd38      	pop	{r3, r4, r5, pc}
 80137c6:	bf00      	nop
 80137c8:	200038d0 	.word	0x200038d0

080137cc <_isatty_r>:
 80137cc:	b538      	push	{r3, r4, r5, lr}
 80137ce:	4d06      	ldr	r5, [pc, #24]	@ (80137e8 <_isatty_r+0x1c>)
 80137d0:	2300      	movs	r3, #0
 80137d2:	4604      	mov	r4, r0
 80137d4:	4608      	mov	r0, r1
 80137d6:	602b      	str	r3, [r5, #0]
 80137d8:	f7ee fe20 	bl	800241c <_isatty>
 80137dc:	1c43      	adds	r3, r0, #1
 80137de:	d102      	bne.n	80137e6 <_isatty_r+0x1a>
 80137e0:	682b      	ldr	r3, [r5, #0]
 80137e2:	b103      	cbz	r3, 80137e6 <_isatty_r+0x1a>
 80137e4:	6023      	str	r3, [r4, #0]
 80137e6:	bd38      	pop	{r3, r4, r5, pc}
 80137e8:	200038d0 	.word	0x200038d0

080137ec <_init>:
 80137ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80137ee:	bf00      	nop
 80137f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80137f2:	bc08      	pop	{r3}
 80137f4:	469e      	mov	lr, r3
 80137f6:	4770      	bx	lr

080137f8 <_fini>:
 80137f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80137fa:	bf00      	nop
 80137fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80137fe:	bc08      	pop	{r3}
 8013800:	469e      	mov	lr, r3
 8013802:	4770      	bx	lr
